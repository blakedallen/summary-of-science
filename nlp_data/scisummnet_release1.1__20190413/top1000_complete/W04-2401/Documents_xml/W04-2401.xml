<PAPER>
  <S sid="0">A Linear Programming Formulation For Global Inference In Natural Language Tasks</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Given a collection of discrete random variables representing outcomes of learned local predictors in natural language, e.g., named entities and relations, we seek an optimal global assignment to the variables in the presence of general (non-sequential) constraints.</S>
    <S sid="2" ssid="2">Examples of these constraints include the type of arguments a relation can take, and the mutual activity of different relations, etc.</S>
    <S sid="3" ssid="3">We develop a linear programming formulation for this problem and evaluate it in the context of simultaneously learning named entities and relations.</S>
    <S sid="4" ssid="4">Our approach allows us to efficiently incorporate domain and task specific constraints at decision time, resulting in significant improvements in the accuracy and the &#8220;human-like&#8221; quality of the inferences.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">Natural language decisions often depend on the outcomes of several different but mutually dependent predictions.</S>
    <S sid="6" ssid="2">These predictions must respect some constraints that could arise from the nature of the data or from domain or task specific conditions.</S>
    <S sid="7" ssid="3">For example, in part-ofspeech tagging, a sentence must have at least one verb, and cannot have three consecutive verbs.</S>
    <S sid="8" ssid="4">These facts can be used as constraints.</S>
    <S sid="9" ssid="5">In named entity recognition, &#8220;no entities can overlap&#8221; is a common constraint used in various works (Tjong Kim Sang and De Meulder, 2003).</S>
    <S sid="10" ssid="6">Efficient solutions to problems of these sort have been given when the constraints on the predictors are sequential (Dietterich, 2002).</S>
    <S sid="11" ssid="7">These solutions can be categorized into the following two frameworks.</S>
    <S sid="12" ssid="8">Learning global models trains a probabilistic model under the constraints imposed by the domain.</S>
    <S sid="13" ssid="9">Examples include variations of HMMs, conditional models and sequential variations of Markov random fields (Lafferty et al., 2001).</S>
    <S sid="14" ssid="10">The other framework, inference with classifiers (Roth, 2002), views maintaining constraints and learning classifiers as separate processes.</S>
    <S sid="15" ssid="11">Various local classifiers are trained without the knowledge of constraints.</S>
    <S sid="16" ssid="12">The predictions are taken as input on the inference procedure which then finds the best global prediction.</S>
    <S sid="17" ssid="13">In addition to the conceptual simplicity of this approach, it also seems to perform better experimentally (Tjong Kim Sang and De Meulder, 2003).</S>
    <S sid="18" ssid="14">Typically, efficient inference procedures in both frameworks rely on dynamic programming (e.g., Viterbi), which works well in sequential data.</S>
    <S sid="19" ssid="15">However, in many important problems, the structure is more general, resulting in computationally intractable inference.</S>
    <S sid="20" ssid="16">Problems of these sorts have been studied in computer vision, where inference is generally performed over low level measurements rather than over higher level predictors (Levin et al., 2002; Boykov et al., 2001).</S>
    <S sid="21" ssid="17">This work develops a novel inference with classifiers approach.</S>
    <S sid="22" ssid="18">Rather than being restricted on sequential data, we study a fairly general setting.</S>
    <S sid="23" ssid="19">The problem is defined in terms of a collection of discrete random variables representing binary relations and their arguments; we seek an optimal assignment to the variables in the presence of the constraints on the binary relations between variables and the relation types.</S>
    <S sid="24" ssid="20">The key insight to this solution comes from recent techniques developed for approximation algorithms (Chekuri et al., 2001).</S>
    <S sid="25" ssid="21">Following this work, we model inference as an optimization problem, and show how to cast it as a linear program.</S>
    <S sid="26" ssid="22">Using existing numerical packages, which are able to solve very large linear programming problems in a very short time1, inference can be done very quickly.</S>
    <S sid="27" ssid="23">Our approach could be contrasted with other approaches to sequential inference or to general Markov random field approaches (Lafferty et al., 2001; Taskar et al., 2002).</S>
    <S sid="28" ssid="24">The key difference is that in these approaches, the model is learned globally, under the constraints imposed by the domain.</S>
    <S sid="29" ssid="25">In our approach, predictors do not need to be learned in the context of the decision tasks, but rather can be learned in other contexts, or incorporated as background knowledge.</S>
    <S sid="30" ssid="26">This way, our approach allows the incorporation of constraints into decisions in a dynamic fashion and can therefore support task specific inferences.</S>
    <S sid="31" ssid="27">The significance of this is clearly shown in our experimental results.</S>
    <S sid="32" ssid="28">We develop our models in the context of natural language inferences and evaluate it here on the problem of simultaneously recognizing named entities and relations between them.</S>
    <S sid="33" ssid="29">This is the problem of recognizing the kill (KFJ, Oswald) relation in the sentence &#8220;J.</S>
    <S sid="34" ssid="30">V. Oswald was murdered at JFK after his assassin, R. U. KFJ...&#8221; This task requires making several local decisions, such as identifying named entities in the sentence, in order to support the relation identification.</S>
    <S sid="35" ssid="31">For example, it may be useful to identify that Oswald and KFJ are people, and JFK is a location.</S>
    <S sid="36" ssid="32">This, in turn, may help to identify that the kill action is described in the sentence.</S>
    <S sid="37" ssid="33">At the same time, the relation kill constrains its arguments to be people (or at least, not to be locations) and helps to enforce that Oswald and KFJ are likely to be people, while JFK is not.</S>
    <S sid="38" ssid="34">In our model, we first learn a collection of &#8220;local&#8221; predictors, e.g., entity and relation identifiers.</S>
    <S sid="39" ssid="35">At decision time, given a sentence, we produce a global decision that optimizes over the suggestions of the classifiers that are active in the sentence, known constraints among them and, potentially, domain or tasks specific constraints relevant to the current decision.</S>
    <S sid="40" ssid="36">Although a brute-force algorithm may seem feasible for short sentences, as the number of entity variable grows, the computation becomes intractable very quickly.</S>
    <S sid="41" ssid="37">Given n entities in a sentence, there are O(n2) possible relations between them.</S>
    <S sid="42" ssid="38">Assume that each variable (entity or relation) can take l labels (&#8220;none&#8221; is one of these labels).</S>
    <S sid="43" ssid="39">Thus, there are ln2 possible assignments, which is too large even for a small n. When evaluated on simultaneous learning of named entities and relations, our approach not only provides a significant improvement in the predictors&#8217; accuracy; more importantly, it provides coherent solutions.</S>
    <S sid="44" ssid="40">While many statistical methods make &#8220;stupid&#8221; mistakes (i.e., inconsistency among predictions), that no human ever makes, as we show, our approach improves also the quality of the inference significantly.</S>
    <S sid="45" ssid="41">The rest of the paper is organized as follows.</S>
    <S sid="46" ssid="42">Section 2 formally defines our problem and section 3 describes the computational approach we propose.</S>
    <S sid="47" ssid="43">Experimental results are given in section 4, followed by some discussion and conclusion in section 5.</S>
  </SECTION>
  <SECTION title="2 The Relational Inference Problem" number="2">
    <S sid="48" ssid="1">We consider the relational inference problem within the reasoning with classifiers paradigm, and study a specific but fairly general instantiation of this problem, motivated by the problem of recognizing named entities (e.g., persons, locations, organization names) and relations between them (e.g. work for, located in, live in).</S>
    <S sid="49" ssid="2">We consider a set V which consists of two types of variables V = E U R. The first set of variables E = {E1, E2, &#183; &#183; &#183; , En} ranges G&#163;.</S>
    <S sid="50" ssid="3">The value (called &#8220;label&#8221;) assigned to Ei &#8712; E is denoted fE, &#8712; G&#163;.</S>
    <S sid="51" ssid="4">The second set of variables R = {Rij}{1&#8804;i,j&#8804;n;i0j} is viewed as binary relations over E. Specifically, for each pair of entities Ei and Ej, i =&#65533; j, we use Rij and Rji to denote the (binary) relations (Ei, Ej) and (Ej, Ei) respectively.</S>
    <S sid="52" ssid="5">The set of labels of relations is GR and the label assigned to relation Rij &#8712; R is fR&#8222; &#8712; GR.</S>
    <S sid="53" ssid="6">Apparently, there exists some constraints on the labels of corresponding relation and entity variables.</S>
    <S sid="54" ssid="7">For instance, if the relation is live in, then the first entity should be a person, and the second entity should be a location.</S>
    <S sid="55" ssid="8">The correspondence between the relation and entity variables can be represented by a bipartite graph.</S>
    <S sid="56" ssid="9">Each relation variable Rij is connected to its first entity Ei , and second entity Ej.</S>
    <S sid="57" ssid="10">We use N1 and N2 to denote the entity variables of a relation Rij.</S>
    <S sid="58" ssid="11">Specifically, Ei = N1(Rij) and Ej =N2(Rij).</S>
    <S sid="59" ssid="12">In addition, we define a set of constraints on the outcomes of the variables in V. C1 : G&#163; x GR &#8594; {0, 1} constraint values of the first argument of a relation.</S>
    <S sid="60" ssid="13">C2 is defined similarly and constrains the second argument a relation can take.</S>
    <S sid="61" ssid="14">For example, (born in, person) is in C1 but not in C2 because the first entity of relation born in has to be a person and the second entity can only be a location instead of a person.</S>
    <S sid="62" ssid="15">Note that while we define the constraints here as Boolean, our formalisms in fact allows for stochastic constraints.</S>
    <S sid="63" ssid="16">Also note that we can define a large number of constraints, such as CR : GR x GR &#8594; {0, 1} which constrain types of relations, etc.</S>
    <S sid="64" ssid="17">In fact, as will be clear in Sec.</S>
    <S sid="65" ssid="18">3 the language for defining constraints is very rich &#8211; linear (in)equalities over V. We exemplify the framework using the problem of simultaneous recognition of named entities and relations in sentences.</S>
    <S sid="66" ssid="19">Briefly speaking, we assume a learning mechanism that can recognize entity phrases in sentences, based on local contextual features.</S>
    <S sid="67" ssid="20">Similarly, we assume a learning mechanism that can recognize the semantic relation between two given phrases in a sentence.</S>
    <S sid="68" ssid="21">We seek an inference algorithm that can produce a coherent labeling of entities and relations in a given sentence.</S>
    <S sid="69" ssid="22">Furthermore, it follows, as best as possible the recommendation of the entity and relation classifiers, but also satisfies natural constraints that exist on whether specific entities can be the argument of specific relations, whether two relations can occur together at the same time, or any other information that might be available at the inference time (e.g., suppose it is known that entities A and B represent the same location; one may like to incorporate an additional constraint that prevents an inference of the type: &#8220;C lives in A; C does not live in B&#8221;).</S>
    <S sid="70" ssid="23">We note that a large number of problems can be modeled this way.</S>
    <S sid="71" ssid="24">Examples include problems such as chunking sentences (Punyakanok and Roth, 2001), coreference resolution and sequencing problems in computational biology.</S>
    <S sid="72" ssid="25">In fact, each of the components of our problem here, the separate task of recognizing named entities in sentences and the task of recognizing semantic relations between phrases, can be modeled this way.</S>
    <S sid="73" ssid="26">However, our goal is specifically to consider interacting problems at different levels, resulting in more complex constraints among them, and exhibit the power of our method.</S>
    <S sid="74" ssid="27">The most direct way to formalize our inference problem is via the formalism of Markov Random Field (MRF) theory (Li, 2001).</S>
    <S sid="75" ssid="28">Rather than doing that, for computational reasons, we first use a fairly standard transformation of MRF to a discrete optimization problem (see (Kleinberg and Tardos, 1999) for details).</S>
    <S sid="76" ssid="29">Specifically, under weak assumptions we can view the inference problem as the following optimization problem, which aims to minimize the objective function that is the sum of the following two cost functions.</S>
    <S sid="77" ssid="30">Assignment cost: the cost of deviating from the assignment of the variables V given by the classifiers.</S>
    <S sid="78" ssid="31">The specific cost function we use is defined as follows: Let l be the label assigned to variable u &#8712; V. If the marginal probability estimation is p = P(fu = l), then the assignment cost cu(l) is &#8722; log p. Constraint cost: the cost imposed by breaking constraints between neighboring nodes.</S>
    <S sid="79" ssid="32">The specific cost function we use is defined as follows: Consider two entity nodes Ei, Ej and its corresponding relation node Rij; that is, Ei = N 1(Rij) and Ej = N2(Rij).</S>
    <S sid="80" ssid="33">The constraint cost indicates whether the labels are consistent with the constraints.</S>
    <S sid="81" ssid="34">In particular, we use: d1(fEi, fRij ) is 0 if (fRij, fEi) &#8712; C1; otherwise, d1(fEi, fRij) is &#8734; 2.</S>
    <S sid="82" ssid="35">Similarly, we use d2 to force the consistency of the second argument of a relation.</S>
    <S sid="83" ssid="36">Since we are seeking the most probable global assignment that satisfies the constraints, therefore, the overall cost function we optimize, for a global labeling f of all variables is:</S>
  </SECTION>
  <SECTION title="3 A Computational Approach to Relational Inference" number="3">
    <S sid="84" ssid="1">Unfortunately, it is not hard to see that the combinatorial problem (Eq.</S>
    <S sid="85" ssid="2">1) is computationally intractable even when placing assumptions on the cost function (Kleinberg and Tardos, 1999).</S>
    <S sid="86" ssid="3">The computational approach we adopt is to develop a linear programming (LP) formulation of the problem, and then solve the corresponding integer linear programming (ILP) problem.</S>
    <S sid="87" ssid="4">Our LP formulation is based on the method proposed by (Chekuri et al., 2001).</S>
    <S sid="88" ssid="5">Since the objective function (Eq.</S>
    <S sid="89" ssid="6">1) is not a linear function in terms of the labels, we introduce new binary variables to represent different possible assignments to each original variable; we then represent the objective function as a linear function of these binary variables.</S>
    <S sid="90" ssid="7">Let x{u,i1 be a {0,1}-variable, defined to be 1 if and only if variable u is labeled i, where u &#8712; E, i &#8712; GE or u &#8712; R, i &#8712; GR.</S>
    <S sid="91" ssid="8">For example, x{E1,21 = 1 when the label of entity E1 is 2; x{R23,31 = 0 when the label of relation R23 is not 3.</S>
    <S sid="92" ssid="9">Let x{Rij,r,Ei,e11 be a {0,1}-variable indicating whether relation Rij is assigned label r and its first argument, Ei, is assigned label e1.</S>
    <S sid="93" ssid="10">For instance, x{R12,1,E1,21 = 1 means the label of relation R12 is 1 and the label of its first argument, E1, is 2.</S>
    <S sid="94" ssid="11">Similarly, x{Rij,r,Ej,e21 = 1 indicates that Rij is assigned label r and its second argument, Ej, is assigned label e2.</S>
    <S sid="95" ssid="12">With these definitions, the optimization problem can be represented as the following ILP problem (Figure 1).</S>
    <S sid="96" ssid="13">Equations (2) and (3) require that each entity or relation variable can only be assigned one label.</S>
    <S sid="97" ssid="14">Equations (4) and (5) assure that the assignment to each entity or relation variable is consistent with the assignment to its neighboring variables.</S>
    <S sid="98" ssid="15">(6), (7), and (8) are the integral constraints on these binary variables.</S>
    <S sid="99" ssid="16">There are several advantages of representing the problem in an LP formulation.</S>
    <S sid="100" ssid="17">First of all, linear (in)equalities are fairly general and are able to represent many types of constraints (e.g., the decision time constraint in the experiment in Sec.</S>
    <S sid="101" ssid="18">4).</S>
    <S sid="102" ssid="19">More importantly, an ILP problem at this scale can be solved very quickly using current commercial LP/ILP packages, like (Xpress-MP, 2003) or (CPLEX, 2003).</S>
    <S sid="103" ssid="20">We introduce the general strategies of solving an ILP problem here.</S>
    <S sid="104" ssid="21">To solve an ILP problem, a natural idea is to relax the integral constraints.</S>
    <S sid="105" ssid="22">That is, replacing (6), (7), and (8) with: If LPR returns an integer solution, then it is also the optimal solution to the ILP problem.</S>
    <S sid="106" ssid="23">If the solution is non integer, then at least it gives a lower bound to the value of the cost function, which can be used in modifying the problem and getting closer to deriving an optimal integer solution.</S>
    <S sid="107" ssid="24">A direct way to handle the non integer solution is called rounding, which finds an integer point that is close to the non integer solution.</S>
    <S sid="108" ssid="25">Under some conditions of cost functions, which do not hold here, a well designed rounding algorithm can be shown that the rounded solution is a good approximation to the optimal solution (Kleinberg and Tardos, 1999; Chekuri et al., 2001).</S>
    <S sid="109" ssid="26">Nevertheless, in general, the outcomes of the rounding procedure may not even be a legal solution to the problem.</S>
    <S sid="110" ssid="27">Branch and bound is the method that divides an ILP problem into several LP subproblems.</S>
    <S sid="111" ssid="28">It uses LPR as a subroutine to generate dual (upper and lower) bounds to reduce the search space, and finds the optimal solution as well.</S>
    <S sid="112" ssid="29">When LPR finds a non integer solution, it splits the problem on the non integer variable.</S>
    <S sid="113" ssid="30">For example, suppose variable xi is fractional in an non integer solution to the ILP problem min{cx : x &#8712; S, x &#8712; {0,1}n}, where S is the linear constraints.</S>
    <S sid="114" ssid="31">The ILP problem can be split into two sub LPR problems, min{cx : x &#8712; S&#8745;{xi = 0}} and min{cx : x &#8712; S&#8745;{xi = 1}}.</S>
    <S sid="115" ssid="32">Since any feasible solution provides an upper bound and any LPR solution generates a lower bound, the search tree can be effectively cut.</S>
    <S sid="116" ssid="33">Another strategy of dealing with non integer points, which is often combined with branch &amp; bound, is called cutting plane.</S>
    <S sid="117" ssid="34">When a non integer solution is given by LPR, it adds a new linear constraint that makes the non integer point infeasible, while still keeps the optimal integer solution in the feasible region.</S>
    <S sid="118" ssid="35">As a result, the feasible region is closer to the ideal polyhedron, which is the convex hull of feasible integer solutions.</S>
    <S sid="119" ssid="36">The most famous cutting plane algorithm is Gomory&#8217;s fractional cutting plane method (Wolsey, 1998), which can be shown that only finite number of additional constraints are needed.</S>
    <S sid="120" ssid="37">Moreover, researchers develop different cutting plane algorithms for different types of ILP problems.</S>
    <S sid="121" ssid="38">One example is (Wang and Regan, 2000), which only focuses on binary ILP problems.</S>
    <S sid="122" ssid="39">Although in theory, a search based strategy may need several steps to find the optimal solution, LPR always generates integer solutions in our experiments.</S>
    <S sid="123" ssid="40">This phenomenon may link to the theory of unimodularity.</S>
    <S sid="124" ssid="41">When the coefficient matrix of a given linear program in its standard form is unimodular, it can be shown that the optimal solution to the linear program is in fact integral (Schrijver, 1986).</S>
    <S sid="125" ssid="42">In other words, LPR is guaranteed to produce an integer solution.</S>
    <S sid="126" ssid="43">Theorem 3.1 indicates that if a linear programming problem is in its standard form, then regardless of the cost function and the integral vector b, the optimal solution is an integer if and only if the coefficient matrix A is unimodular.</S>
    <S sid="127" ssid="44">Although the coefficient matrix in our problem is not unimodular, LPR still produces integer solutions for all the (thousands of cases) we have experimented with.</S>
    <S sid="128" ssid="45">This may be due to the fact that the coefficient matrix shares many properties of a unimodular matrix.</S>
    <S sid="129" ssid="46">As a result, most of the vertices of the polyhedron are integer points.</S>
    <S sid="130" ssid="47">Another possible reason is that given the cost function we have, the optimal solution is always integer.</S>
    <S sid="131" ssid="48">Because of the availability of very efficient LP/ILP packages, we defer the exploration of this direction for now.</S>
  </SECTION>
  <SECTION title="4 Experiments" number="4">
    <S sid="132" ssid="1">We describe below two experiments on the problem of simultaneously recognizing entities and relations.</S>
    <S sid="133" ssid="2">In the first, we view the task as a knowledge acquisition task &#8211; we let the system read sentences and identify entities and relations among them.</S>
    <S sid="134" ssid="3">Given that this is a difficult task which may require quite often information beyond the sentence, we consider also a &#8220;forced decision&#8221; task, in which we simulate a question answering situation &#8211; we ask the system, say, &#8220;who killed whom&#8221; and evaluate it on identifying correctly the relation and its arguments, given that it is known that somewhere in this sentence this relation is active.</S>
    <S sid="135" ssid="4">In addition, this evaluation exhibits the ability of our approach to incorporate task specific constraints at decision time.</S>
    <S sid="136" ssid="5">Our experiments are based on the TREC data set (which consists of articles from WSJ, AP, etc.) that we annotated for named entities and relations.</S>
    <S sid="137" ssid="6">In order to effectively observe the interaction between relations and entities, we picked 1437 sentences that have at least one active relation.</S>
    <S sid="138" ssid="7">Among those sentences, there are 5336 entities, and 19048 pairs of entities (binary relations).</S>
    <S sid="139" ssid="8">Entity labels include 1685 persons, 1968 locations, 978 organizations and 705 others.</S>
    <S sid="140" ssid="9">Relation labels include 406 located in, 394 work for, 451 orgBased in, 521 live in, 268 kill, and 17007 none.</S>
    <S sid="141" ssid="10">Note that most pairs of entities have no active relations at all.</S>
    <S sid="142" ssid="11">Therefore, relation none significantly outnumbers others.</S>
    <S sid="143" ssid="12">Examples of each relation label and the constraints between a relation variable and its two entity arguments are shown as follows.</S>
    <S sid="144" ssid="13">Relation Entity1 Entity2 Example located in loc loc (New York, US) work for per org (Bill Gates, Microsoft) orgBased in org loc (HP, Palo Alto) live in per loc (Bush, US) kill per per (Oswald, JFK) In order to focus on the evaluation of our inference procedure, we assume the problem of segmentation (or phrase detection) (Abney, 1991; Punyakanok and Roth, 2001) is solved, and the entity boundaries are given to us as input; thus we only concentrate on their classifications.</S>
    <S sid="145" ssid="14">We evaluate our LP based global inference procedure against two simpler approaches and a third that is given more information at learning time.</S>
    <S sid="146" ssid="15">Basic, only tests our entity and relation classifiers, which are trained independently using only local features.</S>
    <S sid="147" ssid="16">In particular, the relation classifier does not know the labels of its entity arguments, and the entity classifier does not know the labels of relations in the sentence either.</S>
    <S sid="148" ssid="17">Since basic classifiers are used in all approaches, we describe how they are trained here.</S>
    <S sid="149" ssid="18">For the entity classifier, one set of features are extracted from words within a size 4 window around the target phrase.</S>
    <S sid="150" ssid="19">They are: (1) words, part-of-speech tags, and conjunctions of them; (2) bigrams and trigrams of the mixture of words and tags.</S>
    <S sid="151" ssid="20">In addition, some other features are extracted from the target phrase, including: symbol explanation icap the first character of a word is capitalized acap all characters of a word are capitalized incap some characters of a word are capitalized suffix the suffix of a word is &#8220;ing&#8221;, &#8220;ment&#8221;, etc. bigram bigram of words in the target phrase len number of words in the target phrase place3 the phrase is/has a known place&#8217;s name prof3 the phrase is/has a professional title (e.g.</S>
    <S sid="152" ssid="21">Lt.) name3 the phrase is/has a known person&#8217;s name For the relation classifier, there are three sets of features: (1) features similar to those used in the entity classification are extracted from the two argument entities of the relation; (2) conjunctions of the features from the two arguments; (3) some patterns extracted from the sentence or between the two arguments.</S>
    <S sid="153" ssid="22">Some features in category (3) are &#8220;the number of words between arg1 and arg2 &#8221;, &#8220;whether arg1 and arg2 are the same word&#8221;, or &#8220;arg1 is the beginning of the sentence and has words that consist of all capitalized characters&#8221;, where ar$1 and ar$2 represent the first and second argument entities respectively.</S>
    <S sid="154" ssid="23">In addition, Table 1 presents some patterns we use.</S>
    <S sid="155" ssid="24">The learning algorithm used is a variation of the Winnow update rule incorporated in SNoW (Roth, 1998; Roth and Yih, 2002), a multi-class classifier that is specifically tailored for large scale learning tasks.</S>
    <S sid="156" ssid="25">SNoW learns a sparse network of linear functions, in which the targets (entity classes or relation classes, in this case) are represented as linear functions over a common feature space.</S>
    <S sid="157" ssid="26">While SNoW can be used as a classifier and predicts using a winner-take-all mechanism over the activation value of the target classes, we can also rely directly on the raw activation value it outputs, which is the weighted linear sum of the active features, to estimate the posteriors.</S>
    <S sid="158" ssid="27">It can be verified that the resulting values are monotonic with the confidence in the prediction, therefore provide a good source of probability estimation.</S>
    <S sid="159" ssid="28">We use softmax (Bishop, 1995) over the raw activation values as conditional probabilities.</S>
    <S sid="160" ssid="29">Specifically, suppose the number of classes is n, and the raw activation values of class i is acti.</S>
    <S sid="161" ssid="30">The posterior estimation for class i is derived by the following equation.</S>
    <S sid="162" ssid="31">Pipeline, mimics the typical strategy in solving complex natural language problems &#8211; separating a task into several stages and solving them sequentially.</S>
    <S sid="163" ssid="32">For example, a named entity recognizer may be trained using a different corpus in advance, and given to a relation classifier as a tool to extract features.</S>
    <S sid="164" ssid="33">This approach first trains an entity classifier as described in the basic approach, and then uses the prediction of entities in addition to other local features to learn the relation identifier.</S>
    <S sid="165" ssid="34">Note that although the true labels of entities are known here when training the relation identifier, this may not be the case in general NLP problems.</S>
    <S sid="166" ssid="35">Since only the predicted entity labels are available in testing, learning on the predictions of the entity classifier presumably makes the relation classifier more tolerant to the mistakes of the entity classifier.</S>
    <S sid="167" ssid="36">In fact, we also observe this phenomenon empirically.</S>
    <S sid="168" ssid="37">When the relation classifier is trained using the true entity labels, the performance is much worse than using the predicted entity labels.</S>
    <S sid="169" ssid="38">LP, is our global inference procedure.</S>
    <S sid="170" ssid="39">It takes as input the constraints between a relation and its entity arguments, and the output (the estimated probability distribution of labels) of the basic classifiers.</S>
    <S sid="171" ssid="40">Note that LP may change the predictions for either entity labels or relation labels, while pipeline fully trusts the labels of entity classifier, and only the relation predictions may be different from the basic relation classifier.</S>
    <S sid="172" ssid="41">In other words, LP is able to enhance the performance of entity classification, which is impossible for pipeline.</S>
    <S sid="173" ssid="42">The final approach, Omniscience, tests the conceptual upper bound of this entity/relation classification problem.</S>
    <S sid="174" ssid="43">It also trains the two classifiers separately as the basic approach.</S>
    <S sid="175" ssid="44">However, it assumes that the entity classifier knows the correct relation labels, and similarly the relation classifier knows the right entity labels as well.</S>
    <S sid="176" ssid="45">This additional information is then used as features in training and testing.</S>
    <S sid="177" ssid="46">Note that this assumption is totally unrealistic.</S>
    <S sid="178" ssid="47">Nevertheless, it may give us a hint that how much a global inference can achieve.</S>
    <S sid="179" ssid="48">Tables 2 &amp; 3 show the performance of each approach in F&#946;=1 using 5-fold cross-validation.</S>
    <S sid="180" ssid="49">The results show that LP performs consistently better than basic and pipeline, both in entities and relations.</S>
    <S sid="181" ssid="50">Note that LP does not apply learning at all, but still outperforms pipeline, which uses entity predictions as new features in learning.</S>
    <S sid="182" ssid="51">The results of the omniscient classifiers reveal that there is still room for improvement.</S>
    <S sid="183" ssid="52">One option is to apply learning to tune a better cost function in the LP approach.</S>
    <S sid="184" ssid="53">One of the more significant results in our experiments, we believe, is the improvement in the quality of the decisions.</S>
    <S sid="185" ssid="54">As mentioned in Sec.</S>
    <S sid="186" ssid="55">1, incorporating constraints helps to avoid inconsistency in classification.</S>
    <S sid="187" ssid="56">It is inpi = teresting to investigate how often such mistakes happen without global inference, and see how effectively the global inference enhances this.</S>
    <S sid="188" ssid="57">For this purpose, we define the quality of the decision as follows.</S>
    <S sid="189" ssid="58">For an active relation of which the label is classified correctly, if both its argument entities are also predicted correctly, we count it as a coherent prediction.</S>
    <S sid="190" ssid="59">Quality is then the number of coherent predictions divided by the sum of coherent and incoherent predictions.</S>
    <S sid="191" ssid="60">Since the basic and pipeline approaches do not have a global view of the labels of entities and relations, 5% to 25% of the predictions are incoherent.</S>
    <S sid="192" ssid="61">Therefore, the quality is not always good.</S>
    <S sid="193" ssid="62">On the other hand, our global inference procedure, LP, takes the natural constraints into account, so it never generates incoherent predictions.</S>
    <S sid="194" ssid="63">If the relation classifier has the correct entity labels as features, a good learner should learn the constraints as well.</S>
    <S sid="195" ssid="64">As a result, the quality of omniscient is almost as good as LP.</S>
    <S sid="196" ssid="65">Another experiment we did is the forced decision test, which boosts the F1 of &#8220;kill&#8221; relation to 86.2%.</S>
    <S sid="197" ssid="66">Here we consider only sentences in which the &#8220;kill&#8221; relation is active.</S>
    <S sid="198" ssid="67">We force the system to determine which of the possible relations in a sentence (i.e., which pair of entities) has this relation by adding a new linear equality.</S>
    <S sid="199" ssid="68">This is a realistic situation (e.g., in the context of question answering) in that it adds an external constraint, not present at the time of learning the classifiers and it evaluates the ability of our inference algorithm to cope with it.</S>
    <S sid="200" ssid="69">The results exhibit that our expectations are correct.</S>
    <S sid="201" ssid="70">In fact, we believe that in natural situations the number of constraints that can apply is even larger.</S>
    <S sid="202" ssid="71">Observing the algorithm performs on other, specific, forced decision tasks verifies that LP is reliable in these situations.</S>
    <S sid="203" ssid="72">As shown in the experiment, it even performs better than omniscience, which is given more information at learning time, but cannot adapt to the situation at decision time.</S>
  </SECTION>
  <SECTION title="5 Discussion" number="5">
    <S sid="204" ssid="1">We presented an linear programming based approach for global inference where decisions depend on the outcomes of several different but mutually dependent classifiers.</S>
    <S sid="205" ssid="2">Even in the presence of a fairly general constraint structure, deviating from the sequential nature typically studied, this approach can find the optimal solution efficiently.</S>
    <S sid="206" ssid="3">Contrary to general search schemes (e.g., beam search), which do not guarantee optimality, the linear programming approach provides an efficient way to finding the optimal solution.</S>
    <S sid="207" ssid="4">The key advantage of the linear programming formulation is its generality and flexibility; in particular, it supports the ability to incorporate classifiers learned in other contexts, &#8220;hints&#8221; supplied and decision time constraints, and reason with all these for the best global prediction.</S>
    <S sid="208" ssid="5">In sharp contrast with the typically used pipeline framework, our formulation does not blindly trust the results of some classifiers, and therefore is able to overcome mistakes made by classifiers with the help of constraints.</S>
    <S sid="209" ssid="6">Our experiments have demonstrated these advantages by considering the interaction between entity and relation classifiers.</S>
    <S sid="210" ssid="7">In fact, more classifiers can be added and used within the same framework.</S>
    <S sid="211" ssid="8">For example, if coreference resolution is available, it is possible to incorporate it in the form of constraints that force the labels of the coreferred entities to be the same (but, of course, allowing the global solution to reject the suggestion of these classifiers).</S>
    <S sid="212" ssid="9">Consequently, this may enhance the performance of entity/relation recognition and, at the same time, correct possible coreference resolution errors.</S>
    <S sid="213" ssid="10">Another example is to use chunking information for better relation identification; suppose, for example, that we have available chunking information that identifies Subj+Verb and Verb+Object phrases.</S>
    <S sid="214" ssid="11">Given a sentence that has the verb &#8220;murder&#8221;, we may conclude that the subject and object of this verb are in a &#8220;kill&#8221; relation.</S>
    <S sid="215" ssid="12">Since the chunking information is used in the global inference procedure, this information will contribute to enhancing its performance and robustness, relying on having more constraints and overcoming possible mistakes by some of the classifiers.</S>
    <S sid="216" ssid="13">Moreover, in an interactive environment where a user can supply new constraints (e.g., a question answering situation) this framework is able to make use of the new information and enhance the performance at decision time, without retraining the classifiers.</S>
    <S sid="217" ssid="14">As we show, our formulation supports not only improved accuracy, but also improves the &#8216;human-like&#8221; quality of the decisions.</S>
    <S sid="218" ssid="15">We believe that it has the potential to be a powerful way for supporting natural language inferences.</S>
    <S sid="219" ssid="16">Acknowledgements This research has been supported by NFS grants CAREER IIS-9984168, ITR IIS-0085836, EIA-0224453, an ONR MURI Award, and an equipment donation from AMD.</S>
    <S sid="220" ssid="17">We also thank the anonymous referees for their useful comments.</S>
  </SECTION>
</PAPER>
