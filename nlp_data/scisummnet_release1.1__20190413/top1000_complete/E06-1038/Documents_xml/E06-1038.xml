<PAPER>
  <S sid="0">Discriminative Sentence Compression With Soft Syntactic Evidence</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We present a model for sentence compression that uses a discriminative largemargin learning framework coupled with a novel feature set defined on compressed bigrams as well as deep syntactic representations provided by auxiliary dependency and phrase-structure parsers.</S>
    <S sid="2" ssid="2">The parsers are trained out-of-domain and contain a significant amount of noise.</S>
    <S sid="3" ssid="3">We argue that the discriminative nature of the learning algorithm allows the model to learn weights relative to any noise in the feature set to optimize compression accuracy directly.</S>
    <S sid="4" ssid="4">This differs from current state-of-the-art models (Knight and Marcu, 2000) that treat noisy parse trees, for both compressed and uncompressed sentences, as gold standard when calculating model parameters.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">The ability to compress sentences grammatically with minimal information loss is an important problem in text summarization.</S>
    <S sid="6" ssid="2">Most summarization systems are evaluated on the amount of relevant information retained as well as their compression rate.</S>
    <S sid="7" ssid="3">Thus, returning highly compressed, yet informative, sentences allows summarization systems to return larger sets of sentences and increase the overall amount of information extracted.</S>
    <S sid="8" ssid="4">We focus on the particular instantiation of sentence compression when the goal is to produce the compressed version solely by removing words or phrases from the original, which is the most common setting in the literature (Knight and Marcu, 2000; Riezler et al., 2003; Turner and Charniak, 2005).</S>
    <S sid="9" ssid="5">In this framework, the goal is to find the shortest substring of the original sentence that conveys the most important aspects of the meaning.</S>
    <S sid="10" ssid="6">We will work in a supervised learning setting and assume as input a training set T=(xt,yt)|?</S>
    <S sid="11" ssid="7">| t&#65533;1 of original sentences xt and their compressions yt.</S>
    <S sid="12" ssid="8">We use the Ziff-Davis corpus, which is a set of 1087 pairs of sentence/compression pairs.</S>
    <S sid="13" ssid="9">Furthermore, we use the same 32 testing examples from Knight and Marcu (2000) and the rest for training, except that we hold out 20 sentences for the purpose of development.</S>
    <S sid="14" ssid="10">A handful of sentences occur twice but with different compressions.</S>
    <S sid="15" ssid="11">We randomly select a single compression for each unique sentence in order to create an unambiguous training set.</S>
    <S sid="16" ssid="12">Examples from this data set are given in Figure 1.</S>
    <S sid="17" ssid="13">Formally, sentence compression aims to shorten a sentence x = x1 ... xn into a substring y = y1 ... ym, where yi E {x1, ... , xn}.</S>
    <S sid="18" ssid="14">We define the function I(yi) E {1, ... , n} that maps word yi in the compression to the index of the word in the original sentence.</S>
    <S sid="19" ssid="15">Finally we include the constraint I(yi) &lt; I(yi+1), which forces each word in x to occur at most once in the compression y. Compressions are evaluated on three criteria, Typically grammaticality and importance are traded off with compression rate.</S>
    <S sid="20" ssid="16">The longer our compressions, the less likely we are to remove important words or phrases crucial to maintaining grammaticality and the intended meaning.</S>
    <S sid="21" ssid="17">The paper is organized as follows: Section 2 discusses previous approaches to sentence compression.</S>
    <S sid="22" ssid="18">In particular, we discuss the advantages and disadvantages of the models of Knight and Marcu (2000).</S>
    <S sid="23" ssid="19">In Section 3 we present our discriminative large-margin model for sentence compression, including the learning framework and an efficient decoding algorithm for searching the space of compressions.</S>
    <S sid="24" ssid="20">We also show how to extract a rich feature set that includes surfacelevel bigram features of the compressed sentence, dropped words and phrases from the original sentence, and features over noisy dependency and phrase-structure trees for the original sentence.</S>
    <S sid="25" ssid="21">We argue that this rich feature set allows the model to learn which words and phrases should be dropped and which should remain in the compression.</S>
    <S sid="26" ssid="22">Section 4 presents an experimental evaluation of our model compared to the models of Knight and Marcu (2000) and finally Section 5 discusses some areas of future work.</S>
  </SECTION>
  <SECTION title="2 Previous Work" number="2">
    <S sid="27" ssid="1">Knight and Marcu (2000) first tackled this problem by presenting a generative noisy-channel model and a discriminative tree-to-tree decision tree model.</S>
    <S sid="28" ssid="2">The noisy-channel model defines the problem as finding the compressed sentence with maximum conditional probability P(y) is the source model, which is a PCFG plus bigram language model.</S>
    <S sid="29" ssid="3">P(x|y) is the channel model, the probability that the long sentence is an expansion of the compressed sentence.</S>
    <S sid="30" ssid="4">To calculate the channel model, both the original and compressed versions of every sentence in the training set are assigned a phrase-structure tree.</S>
    <S sid="31" ssid="5">Given a tree for a long sentence x and compressed sentence y, the channel probability is the product of the probability for each transformation required if the tree for y is to expand to the tree for x.</S>
    <S sid="32" ssid="6">The tree-to-tree decision tree model looks to rewrite the tree for x into a tree for y.</S>
    <S sid="33" ssid="7">The model uses a shift-reduce-drop parsing algorithm that starts with the sequence of words in x and the corresponding tree.</S>
    <S sid="34" ssid="8">The algorithm then either shifts (considers new words and subtrees for x), reduces (combines subtrees from x into possibly new tree constructions) or drops (drops words and subtrees from x) on each step of the algorithm.</S>
    <S sid="35" ssid="9">A decision tree model is trained on a set of indicative features for each type of action in the parser.</S>
    <S sid="36" ssid="10">These models are then combined in a greedy global search algorithm to find a single compression.</S>
    <S sid="37" ssid="11">Though both models of Knight and Marcu perform quite well, they do have their shortcomings.</S>
    <S sid="38" ssid="12">The noisy-channel model uses a source model that is trained on uncompressed sentences, even though the source model is meant to represent the probability of compressed sentences.</S>
    <S sid="39" ssid="13">The channel model requires aligned parse trees for both compressed and uncompressed sentences in the training set in order to calculate probability estimates.</S>
    <S sid="40" ssid="14">These parses are provided from a parsing model trained on out-of-domain data (the WSJ), which can result in parse trees with many mistakes for both the original and compressed versions.</S>
    <S sid="41" ssid="15">This makes alignment difficult and the channel probability estimates unreliable as a result.</S>
    <S sid="42" ssid="16">On the other hand, the decision tree model does not rely on the trees to align and instead simply learns a tree-totree transformation model to compress sentences.</S>
    <S sid="43" ssid="17">The primary problem with this model is that most of the model features encode properties related to including or dropping constituents from the tree with no encoding of bigram or trigram surface features to promote grammaticality.</S>
    <S sid="44" ssid="18">As a result, the model will sometimes return very short and ungrammatical compressions.</S>
    <S sid="45" ssid="19">Both models rely heavily on the output of a noisy parser to calculate probability estimates for the compression.</S>
    <S sid="46" ssid="20">We argue in the next section that ideally, parse trees should be treated solely as a source of evidence when making compression decisions to be balanced with other evidence such as that provided by the words themselves.</S>
    <S sid="47" ssid="21">Recently Turner and Charniak (2005) presented supervised and semi-supervised versions of the Knight and Marcu noisy-channel model.</S>
    <S sid="48" ssid="22">The resulting systems typically return informative and grammatical sentences, however, they do so at the cost of compression rate.</S>
    <S sid="49" ssid="23">Riezler et al. (2003) present a discriminative sentence compressor over the output of an LFG parser that is a packed representation of possible compressions.</S>
    <S sid="50" ssid="24">Though this model is highly likely to return grammatical compressions, it required the training data be human annotated with syntactic trees.</S>
  </SECTION>
  <SECTION title="3 Discriminative Sentence Compression" number="3">
    <S sid="51" ssid="1">For the rest of the paper we use x = x1 ... xn to indicate an uncompressed sentence and y = y1 ... ym a compressed version of x, i.e., each yj indicates the position in x of the jth word in the compression.</S>
    <S sid="52" ssid="2">We always pad the sentence with dummy start and end words, x1 = -START- and xn = -END-, which are always included in the compressed version (i.e. y1 = x1 and ym = xn).</S>
    <S sid="53" ssid="3">In this section we described a discriminative online learning approach to sentence compression, the core of which is a decoding algorithm that searches the entire space of compressions.</S>
    <S sid="54" ssid="4">Let the score of a compression y for a sentence x as In particular, we are going to factor this score using a first-order Markov assumption on the words in the compressed sentence Finally, we define the score function to be the dot product between a high dimensional feature representation and a corresponding weight vector Note that this factorization will allow us to define features over two adjacent words in the compression as well as the words in-between that were dropped from the original sentence to create the compression.</S>
    <S sid="55" ssid="5">We will show in Section 3.2 how this factorization also allows us to include features on dropped phrases and subtrees from both a dependency and a phrase-structure parse of the original sentence.</S>
    <S sid="56" ssid="6">Note that these features are meant to capture the same information in both the source and channel models of Knight and Marcu (2000).</S>
    <S sid="57" ssid="7">However, here they are merely treated as evidence for the discriminative learner, which will set the weight of each feature relative to the other (possibly overlapping) features to optimize the models accuracy on the observed data.</S>
    <S sid="58" ssid="8">We define a dynamic programming table C[i] which represents the highest score for any compression that ends at word xi for sentence x.</S>
    <S sid="59" ssid="9">We define a recurrence as follows It is easy to show that C[n] represents the score of the best compression for sentence x (whose length is n) under the first-order score factorization we made.</S>
    <S sid="60" ssid="10">We can show this by induction.</S>
    <S sid="61" ssid="11">If we assume that C[j] is the highest scoring compression that ends at word xj, for all j &lt; i, then C[i] must also be the highest scoring compression ending at word xi since it represents the max combination over all high scoring shorter compressions plus the score of extending the compression to the current word.</S>
    <S sid="62" ssid="12">Thus, since xn is by definition in every compressed version of x (see above), then it must be the case that C[n] stores the score of the best compression.</S>
    <S sid="63" ssid="13">This table can be filled in O(n2).</S>
    <S sid="64" ssid="14">This algorithm is really an extension of Viterbi to the case when scores factor over dynamic substrings of the text (Sarawagi and Cohen, 2004; McDonald et al., 2005a).</S>
    <S sid="65" ssid="15">As such, we can use back-pointers to reconstruct the highest scoring compression as well as k-best decoding algorithms.</S>
    <S sid="66" ssid="16">This decoding algorithm is dynamic with respect to compression rate.</S>
    <S sid="67" ssid="17">That is, the algorithm will return the highest scoring compression regardless of length.</S>
    <S sid="68" ssid="18">This may seem problematic since longer compressions might contribute more to the score (since they contain more bigrams) and thus be preferred.</S>
    <S sid="69" ssid="19">However, in Section 3.2 we define a rich feature set, including features on words dropped from the compression that will help disfavor compressions that drop very few words since this is rarely seen in the training data.</S>
    <S sid="70" ssid="20">In fact, it turns out that our learned compressions have a compression rate very similar to the gold standard.</S>
    <S sid="71" ssid="21">That said, there are some instances when a static compression rate is preferred.</S>
    <S sid="72" ssid="22">A user may specifically want a 25% compression rate for all sentences.</S>
    <S sid="73" ssid="23">This is not a problem for our decoding algorithm.</S>
    <S sid="74" ssid="24">We simply augment the dynamic programming table and calculate C[i][r], which is the score of the best compression of length r that ends at word xi.</S>
    <S sid="75" ssid="25">This table can be filled in as follows Thus, if we require a specific compression rate, we simple determine the number of words r that satisfy this rate and calculate C[n][r].</S>
    <S sid="76" ssid="26">The new complexity is O(n2r).</S>
    <S sid="77" ssid="27">So far we have defined the score of a compression as well as a decoding algorithm that searches the entire space of compressions to find the one with highest score.</S>
    <S sid="78" ssid="28">This all relies on a score factorization over adjacent words in the compression, s(x, I(yj&#8722;1), I(yj)) = w &#183; f(x, I(yj&#8722;1), I(yj)).</S>
    <S sid="79" ssid="29">In Section 3.3 we describe an online large-margin method for learning w. Here we present the feature representation f(x, I(yj&#8722;1), I(yj)) for a pair of adjacent words in the compression.</S>
    <S sid="80" ssid="30">These features were tuned on a development data set.</S>
  </SECTION>
  <SECTION title="3.2.1 Word/POS Features" number="4">
    <S sid="81" ssid="1">The first set of features are over adjacent words yj&#8722;1 and yj in the compression.</S>
    <S sid="82" ssid="2">These include the part-of-speech (POS) bigrams for the pair, the POS of each word individually, and the POS context (bigram and trigram) of the most recent word being added to the compression, yj.</S>
    <S sid="83" ssid="3">These features are meant to indicate likely words to include in the compression as well as some level of grammaticality, e.g., the adjacent POS features &#8220;JJ&amp;VB&#8221; would get a low weight since we rarely see an adjective followed by a verb.</S>
    <S sid="84" ssid="4">We also add a feature indicating if yj&#8722;1 and yj were actually adjacent in the original sentence or not and we conjoin this feature with the above POS features.</S>
    <S sid="85" ssid="5">Note that we have not included any lexical features.</S>
    <S sid="86" ssid="6">We found during experiments on the development data that lexical information was too sparse and led to overfitting, so we rarely include such features.</S>
    <S sid="87" ssid="7">Instead we rely on the accuracy of POS tags to provide enough evidence.</S>
    <S sid="88" ssid="8">Next we added features over every dropped word in the original sentence between yj&#8722;1 and yj, if there were any.</S>
    <S sid="89" ssid="9">These include the POS of each dropped word, the POS of the dropped words conjoined with the POS of yj&#8722;1 and yj.</S>
    <S sid="90" ssid="10">If the dropped word is a verb, we add a feature indicating the actual verb (this is for common verbs like &#8220;is&#8221;, which are typically in compressions).</S>
    <S sid="91" ssid="11">Finally we add the POS context (bigram and trigram) of each dropped word.</S>
    <S sid="92" ssid="12">These features represent common characteristics of words that can or should be dropped from the original sentence in the compressed version (e.g. adjectives and adverbs).</S>
    <S sid="93" ssid="13">We also add a feature indicating whether the dropped word is a negation (e.g., not, never, etc.).</S>
    <S sid="94" ssid="14">We also have a set of features to represent brackets in the text, which are common in the data set.</S>
    <S sid="95" ssid="15">The first measures if all the dropped words between yj&#8722;1 and yj have a mismatched or inconsistent bracketing.</S>
    <S sid="96" ssid="16">The second measures if the left and right-most dropped words are themselves both brackets.</S>
    <S sid="97" ssid="17">These features come in handy for examples like, The Associated Press ( AP ) reported the story, where the compressed version is The Associated Press reported the story.</S>
    <S sid="98" ssid="18">Information within brackets is often redundant.</S>
    <S sid="99" ssid="19">The previous set of features are meant to encode common POS contexts that are commonly retained or dropped from the original sentence during compression.</S>
    <S sid="100" ssid="20">However, they do so without a larger picture of the function of each word in the sentence.</S>
    <S sid="101" ssid="21">For instance, dropping verbs is not that uncommon - a relative clause for instance may be dropped during compression.</S>
    <S sid="102" ssid="22">However, dropping the main verb in the sentence is uncommon, since that verb and its arguments typically encode most of the information being conveyed.</S>
    <S sid="103" ssid="23">An obvious solution to this problem is to include features over a deep syntactic analysis of the sentence.</S>
    <S sid="104" ssid="24">To do this we parse every sentence twice, once with a dependency parser (McDonald et al., 2005b) and once with a phrase-structure parser (Charniak, 2000).</S>
    <S sid="105" ssid="25">These parsers have been trained out-of-domain on the Penn WSJ Treebank and as a result contain noise.</S>
    <S sid="106" ssid="26">However, we are merely going to use them as an additional source of features.</S>
    <S sid="107" ssid="27">We call this soft syntactic evidence since the deep trees are not used as a strict goldstandard in our model but just as more evidence for or against particular compressions.</S>
    <S sid="108" ssid="28">The learning algorithm will set the feature weight accordingly depending on each features discriminative power.</S>
    <S sid="109" ssid="29">It is not unique to use soft syntactic features in this way, as it has been done for many problems in language processing.</S>
    <S sid="110" ssid="30">However, we stress this aspect of our model due to the history of compression systems using syntax to provide hard structural constraints on the output.</S>
    <S sid="111" ssid="31">Lets consider the sentence x = Mary saw Ralph on Tuesday after lunch, with corresponding parses given in Figure 2.</S>
    <S sid="112" ssid="32">In particular, lets consider the feature representation f(x,3,6).</S>
    <S sid="113" ssid="33">That is, the feature representation of making Ralph and after adjacent in the compression and dropping the prepositional phrase on Tuesday.</S>
    <S sid="114" ssid="34">The first set of features we consider are over dependency trees.</S>
    <S sid="115" ssid="35">For every dropped word we add a feature indicating the POS of the words parent in the tree.</S>
    <S sid="116" ssid="36">For example, if the dropped words parent is root, then it typically means it is the main verb of the sentence and unlikely to be dropped.</S>
    <S sid="117" ssid="37">We also add a conjunction feature of the POS tag of the word being dropped and the POS of its parent as well as a feature indicating for each word being dropped whether it is a leaf node in the tree.</S>
    <S sid="118" ssid="38">We also add the same features for the two adjacent words, but indicating that they are part of the compression.</S>
    <S sid="119" ssid="39">For the phrase-structure features we find every node in the tree that subsumes a piece of dropped text and is not a child of a similar node.</S>
    <S sid="120" ssid="40">In this case the PP governing on Tuesday.</S>
    <S sid="121" ssid="41">We then add features indicating the context from which this node was dropped.</S>
    <S sid="122" ssid="42">For example we add a feature specifying that a PP was dropped which was the child of a VP.</S>
    <S sid="123" ssid="43">We also add a feature indicating that a PP was dropped which was the left sibling of another PP, etc.</S>
    <S sid="124" ssid="44">Ideally, for each production in the tree we would like to add a feature indicating every node that was dropped, e.g.</S>
    <S sid="125" ssid="45">&#8220;VP&#8594;VBD NP PP PP &#8658; VP&#8594;VBD NP PP&#8221;.</S>
    <S sid="126" ssid="46">However, we cannot necessarily calculate this feature since the extent of the production might be well beyond the local context of first-order feature factorization.</S>
    <S sid="127" ssid="47">Furthermore, since the training set is so small, these features are likely to be observed very few times.</S>
    <S sid="128" ssid="48">In this section we have described a rich feature set over adjacent words in the compressed sentence, dropped words and phrases from the original sentence, and properties of deep syntactic trees of the original sentence.</S>
    <S sid="129" ssid="49">Note that these features in many ways mimic the information already present in the noisy-channel and decision-tree models of Knight and Marcu (2000).</S>
    <S sid="130" ssid="50">Our bigram features encode properties that indicate both good and bad words to be adjacent in the compressed sentence.</S>
    <S sid="131" ssid="51">This is similar in purpose to the source model from the noisy-channel system.</S>
    <S sid="132" ssid="52">However, in that system, the source model is trained on uncompressed sentences and thus is not as representative of likely bigram features for compressed sentences, which is really what we desire.</S>
    <S sid="133" ssid="53">Our feature set also encodes dropped words and phrases through the properties of the words themselves and through properties of their syntactic relation to the rest of the sentence in a parse tree.</S>
    <S sid="134" ssid="54">These features represent likely phrases to be dropped in the compression and are thus similar in nature to the channel model in the noisy-channel system as well as the features in the tree-to-tree decision tree system.</S>
    <S sid="135" ssid="55">However, we use these syntactic constraints as soft evidence in our model.</S>
    <S sid="136" ssid="56">That is, they represent just another layer of evidence to be considered during training when setting parameters.</S>
    <S sid="137" ssid="57">Thus, if the parses have too much noise, the learning algorithm can lower the weight of the parse features since they are unlikely to be useful discriminators on the training data.</S>
    <S sid="138" ssid="58">This differs from the models of Knight and Marcu (2000), which treat the noisy parses as gold-standard when calculating probability estimates.</S>
    <S sid="139" ssid="59">An important distinction we should make is the notion of supported versus unsupported features (Sha and Pereira, 2003).</S>
    <S sid="140" ssid="60">Supported features are those that are on for the gold standard compressions in the training.</S>
    <S sid="141" ssid="61">For instance, the bigram feature &#8220;NN&amp;VB&#8221; will be supported since there is most likely a compression that contains a adjacent noun and verb.</S>
    <S sid="142" ssid="62">However, the feature &#8220;JJ&amp;VB&#8221; will not be supported since an adjacent adjective and verb most likely will not be observed in any valid compression.</S>
    <S sid="143" ssid="63">Our model includes all features, including those that are unsupported.</S>
    <S sid="144" ssid="64">The advantage of this is that the model can learn negative weights for features that are indicative of bad compressions.</S>
    <S sid="145" ssid="65">This is not difficult to do since most features are POS based and the feature set size even with all these features is only 78,923.</S>
    <S sid="146" ssid="66">Having defined a feature encoding and decoding algorithm, the last step is to learn the feature weights w. We do this using the Margin Infused Relaxed Algorithm (MIRA), which is a discriminative large-margin online learning technique shown in Figure 3 (Crammer and Singer, 2003).</S>
    <S sid="147" ssid="67">On each iteration, MIRA considers a single instance from the training set (xt, yt) and updates the weights so that the score of the correct compression, yt, is greater than the score of all other compressions by a margin proportional to their loss.</S>
    <S sid="148" ssid="68">Many weight vectors will satisfy these constraints so we pick the one with minimum change from the previous setting.</S>
    <S sid="149" ssid="69">We define the loss to be the number of words falsely retained or dropped in the incorrect compression relative to the correct one.</S>
    <S sid="150" ssid="70">For instance, if the correct compression of the sentence in Figure 2 is Mary saw Ralph, then the compression Mary saw after lunch would have a loss of 3 since it incorrectly left out one word and included two others.</S>
    <S sid="151" ssid="71">Of course, for a sentence there are exponentially many possible compressions, which means that this optimization will have exponentially many constraints.</S>
    <S sid="152" ssid="72">We follow the method of McDonald et al. (2005b) and create constraints only on the k compressions that currently have the highest score, bestk(x; w).</S>
    <S sid="153" ssid="73">This can easily be calculated by extending the decoding algorithm with standard Viterbi k-best techniques.</S>
    <S sid="154" ssid="74">On the development data, we found that k = 10 provided the best performance, though varying k did not have a major impact overall.</S>
    <S sid="155" ssid="75">Furthermore we found that after only 3-5 training epochs performance on the development data was maximized.</S>
    <S sid="156" ssid="76">The final weight vector is the average of all weight vectors throughout training.</S>
    <S sid="157" ssid="77">Averaging has been shown to reduce overfitting (Collins, 2002) as well as reliance on the order of the examples during training.</S>
    <S sid="158" ssid="78">We found it to be particularly important for this data set.</S>
  </SECTION>
  <SECTION title="4 Experiments" number="5">
    <S sid="159" ssid="1">We use the same experimental methodology as Knight and Marcu (2000).</S>
    <S sid="160" ssid="2">We provide every compression to four judges and ask them to evaluate each one for grammaticality and importance on a scale from 1 to 5.</S>
    <S sid="161" ssid="3">For each of the 32 sentences in our test set we ask the judges to evaluate three systems: human annotated, the decision tree model of Knight and Marcu (2000) and our system.</S>
    <S sid="162" ssid="4">The judges were told all three compressions were automatically generated and the order in which they were presented was randomly chosen for each sentence.</S>
    <S sid="163" ssid="5">We compared our system to the decision tree model of Knight and Marcu instead of the noisy-channel model since both performed nearly as well in their evaluation, and the compression rate of the decision tree model is nearer to our system (around 57-58%).</S>
    <S sid="164" ssid="6">The noisy-channel model typically returned longer compressions.</S>
    <S sid="165" ssid="7">Results are shown in Table 1.</S>
    <S sid="166" ssid="8">We present the average score over all judges as well as the standard deviation.</S>
    <S sid="167" ssid="9">The evaluation for the decision tree system of Knight and Marcu is strikingly similar to the original evaluation in their work.</S>
    <S sid="168" ssid="10">This provides strong evidence that the evaluation criteria in both cases were very similar.</S>
    <S sid="169" ssid="11">Table 1 shows that all models had similar compressions rates, with humans preferring to compress a little more aggressively.</S>
    <S sid="170" ssid="12">Not surprisingly, the human compressions are practically all grammatical.</S>
    <S sid="171" ssid="13">A quick scan of the evaluations shows that the few ungrammatical human compressions were for sentences that were not really grammatical in the first place.</S>
    <S sid="172" ssid="14">Of greater interest is that the compressions of our system are typically more grammatical than the decision tree model of Knight and Marcu.</S>
    <S sid="173" ssid="15">When looking at importance, we see that our system actually does the best &#8211; even better than humans.</S>
    <S sid="174" ssid="16">The most likely reason for this is that our model returns longer sentences and is thus less likely to prune away important information.</S>
    <S sid="175" ssid="17">For example, consider the sentence The chemical etching process used for glare protection is effective and will help if your office has the fluorescent-light overkill that&#8217;s typical in offices The human compression was Glare protection is effective, whereas our model compressed the sentence to The chemical etching process used for glare protection is effective.</S>
    <S sid="176" ssid="18">A primary reason that our model does better than the decision tree model of Knight and Marcu is that on a handful of sentences, the decision tree compressions were a single word or noun-phrase.</S>
    <S sid="177" ssid="19">For such sentences the evaluators typically rated the compression a 1 for both grammaticality and importance.</S>
    <S sid="178" ssid="20">In contrast, our model never failed in such drastic ways and always output something reasonable.</S>
    <S sid="179" ssid="21">This is quantified in the standard deviation of the two systems.</S>
    <S sid="180" ssid="22">Though these results are promising, more large scale experiments are required to really ascertain the significance of the performance increase.</S>
    <S sid="181" ssid="23">Ideally we could sample multiple training/testing splits and use all sentences in the data set to evaluate the systems.</S>
    <S sid="182" ssid="24">However, since these systems require human evaluation we did not have the time or the resources to conduct these experiments.</S>
    <S sid="183" ssid="25">Here we aim to give the reader a flavor of some common outputs from the different models.</S>
    <S sid="184" ssid="26">Three examples are given in Table 4.1.</S>
    <S sid="185" ssid="27">The first shows two properties.</S>
    <S sid="186" ssid="28">First of all, the decision tree model completely breaks and just returns a single noun-phrase.</S>
    <S sid="187" ssid="29">Our system performs well, however it leaves out the complementizer of the relative clause.</S>
    <S sid="188" ssid="30">This actually occurred in a few examples and appears to be the most common problem of our model.</S>
    <S sid="189" ssid="31">A post-processing rule should eliminate this.</S>
    <S sid="190" ssid="32">The second example displays a case in which our system and the human system are grammatical, but the removal of a prepositional phrase hurts the resulting meaning of the sentence.</S>
    <S sid="191" ssid="33">In fact, without the knowledge that the sentence is referring to broadband, the compressions are meaningless.</S>
    <S sid="192" ssid="34">This appears to be a harder problem &#8211; determining which prepositional phrases can be dropped and which cannot.</S>
    <S sid="193" ssid="35">The final, and more interesting, example presents two very different compressions by the human and our automatic system.</S>
    <S sid="194" ssid="36">Here, the human kept the relative clause relating what languages the source code is available in, but dropped the main verb phrase of the sentence.</S>
    <S sid="195" ssid="37">Our model preferred to retain the main verb phrase and drop the relative clause.</S>
    <S sid="196" ssid="38">This is most likely due to the fact that dropping the main verb phrase of a sentence is much less likely in the training data than dropping a relative clause.</S>
    <S sid="197" ssid="39">Two out of four evaluators preferred the compression returned by our system and the other two rated them equal.</S>
  </SECTION>
  <SECTION title="5 Discussion" number="6">
    <S sid="198" ssid="1">In this paper we have described a new system for sentence compression.</S>
    <S sid="199" ssid="2">This system uses discriminative large-margin learning techniques coupled with a decoding algorithm that searches the space of all compressions.</S>
    <S sid="200" ssid="3">In addition we defined a rich feature set of bigrams in the compression and dropped words and phrases from the original sentence.</S>
    <S sid="201" ssid="4">The model also incorporates soft syntactic evidence in the form of features over dependency and phrase-structure trees for each sentence.</S>
    <S sid="202" ssid="5">This system has many advantages over previous approaches.</S>
    <S sid="203" ssid="6">First of all its discriminative nature allows us to use a rich dependent feature set and to optimize a function directly related to compresThe fi rst new product, ATF Protype , is a line of digital postscript typefaces that will be sold in packages of up to six fonts.</S>
    <S sid="204" ssid="7">ATF Protype is a line of digital postscript typefaces that will be sold in packages of up to six fonts .</S>
    <S sid="205" ssid="8">The fi rst new product .</S>
    <S sid="206" ssid="9">ATF Protype is a line of digital postscript typefaces will be sold in packages of up to six fonts .</S>
    <S sid="207" ssid="10">Finally, another advantage of broadband is distance.</S>
    <S sid="208" ssid="11">Another advantage is distance.</S>
    <S sid="209" ssid="12">Another advantage of broadband is distance.</S>
    <S sid="210" ssid="13">Another advantage is distance.</S>
    <S sid="211" ssid="14">The source code , which is available for C , Fortran , ADA and VHDL , can be compiled and executed on the same system or ported to other target platforms .</S>
    <S sid="212" ssid="15">The source code is available for C , Fortran , ADA and VHDL .</S>
    <S sid="213" ssid="16">The source code is available for C .</S>
    <S sid="214" ssid="17">The source code can be compiled and executed on the same system or ported to other target platforms . sion accuracy during training, both of which have been shown to be beneficial for other problems.</S>
    <S sid="215" ssid="18">Furthermore, the system does not rely on the syntactic parses of the sentences to calculate probability estimates.</S>
    <S sid="216" ssid="19">Instead, this information is incorporated as just another form of evidence to be considered during training.</S>
    <S sid="217" ssid="20">This is advantageous because these parses are trained on out-of-domain data and often contain a significant amount of noise.</S>
    <S sid="218" ssid="21">A fundamental flaw with all sentence compression systems is that model parameters are set with the assumption that there is a single correct answer for each sentence.</S>
    <S sid="219" ssid="22">Of course, like most compression and translation tasks, this is not true, consider, TapeWare , which supports DOS and NetWare 286 , is a value-added process that lets you directly connect the QA150-EXAT to a file server and issue a command from any workstation to back up the server The human annotated compression is, TapeWare supports DOS and NetWare 286.</S>
    <S sid="220" ssid="23">However, another completely valid compression might be, TapeWare lets you connect the QA150-EXAT to a fi le server.</S>
    <S sid="221" ssid="24">These two compressions overlap by a single word.</S>
    <S sid="222" ssid="25">Our learning algorithm may unnecessarily lower the score of some perfectly valid compressions just because they were not the exact compression chosen by the human annotator.</S>
    <S sid="223" ssid="26">A possible direction of research is to investigate multilabel learning techniques for structured data (McDonald et al., 2005a) that learn a scoring function separating a set of valid answers from all invalid answers.</S>
    <S sid="224" ssid="27">Thus if a sentence has multiple valid compressions we can learn to score each valid one higher than all invalid compressions during training to avoid this problem.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="7">
    <S sid="225" ssid="1">The author would like to thank Daniel Marcu for providing the data as well as the output of his and Kevin Knight&#8217;s systems.</S>
    <S sid="226" ssid="2">Thanks also to Hal Daum&#180;e and Fernando Pereira for useful discussions.</S>
    <S sid="227" ssid="3">Finally, the author thanks the four reviewers for evaluating the compressed sentences.</S>
    <S sid="228" ssid="4">This work was supported by NSF ITR grants 0205448 and 0428193.</S>
  </SECTION>
</PAPER>
