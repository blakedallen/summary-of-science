<PAPER>
  <S sid="0">Bootstrapping</S>
  <ABSTRACT>
    <S sid="1" ssid="1">disambiguation rivaling supervised methods.</S>
    <S sid="2" ssid="2">In Proceedings of the 33rd Annual Meeting of the for Computational pages 189&#8211;196. see that view independence does not imply preindepence, consider an example in which always.</S>
    <S sid="3" ssid="3">This is compatible with rule independence, but implies that = 1 and = 0, violating precision independence.</S>
    <S sid="4" ssid="4">A</S>
  </ABSTRACT>
  <SECTION title="1 Overview" number="1">
    <S sid="5" ssid="1">The term bootstrapping here refers to a problem setting in which one is given a small set of labeled data and a large set of unlabeled data, and the task is to induce a classifier.</S>
    <S sid="6" ssid="2">The plenitude of unlabeled natural language data, and the paucity of labeled data, have made bootstrapping a topic of interest in computational linguistics.</S>
    <S sid="7" ssid="3">Current work has been spurred by two papers, (Yarowsky, 1995) and (Blum and Mitchell, 1998).</S>
    <S sid="8" ssid="4">Blum and Mitchell propose a conditional independence assumption to account for the efficacy of their algorithm, called co-training, and they give a proof based on that conditional independence assumption.</S>
    <S sid="9" ssid="5">They also give an intuitive explanation of why co-training works, in terms of maximizing agreement on unlabeled data between classifiers based on different &#8220;views&#8221; of the data.</S>
    <S sid="10" ssid="6">Finally, they suggest that the Yarowsky algorithm is a special case of the co-training algorithm.</S>
    <S sid="11" ssid="7">The Blum and Mitchell paper has been very influential, but it has some shortcomings.</S>
    <S sid="12" ssid="8">The proof they give does not actually apply directly to the co-training algorithm, nor does it directly justify the intuitive account in terms of classifier agreement on unlabeled data, nor, for that matter, does the co-training algorithm directly seek to find classifiers that agree on unlabeled data.</S>
    <S sid="13" ssid="9">Moreover, the suggestion that the Yarowsky algorithm is a special case of co-training is based on an incidental detail of the particular application that Yarowsky considers, not on the properties of the core algorithm.</S>
    <S sid="14" ssid="10">In recent work, (Dasgupta et al., 2001) prove that a classifier has low generalization error if it agrees on unlabeled data with a second classifier based on a different &#8220;view&#8221; of the data.</S>
    <S sid="15" ssid="11">This addresses one of the shortcomings of the original co-training paper: it gives a proof that justifies searching for classifiers that agree on unlabeled data.</S>
    <S sid="16" ssid="12">I extend this work in two ways.</S>
    <S sid="17" ssid="13">First, (Dasgupta et al., 2001) assume the same conditional independence assumption as proposed by Blum and Mitchell.</S>
    <S sid="18" ssid="14">I show that that independence assumption is remarkably powerful, and violated in the data; however, I show that a weaker assumption suffices.</S>
    <S sid="19" ssid="15">Second, I give an algorithm that finds classifiers that agree on unlabeled data, and I report on an implementation and empirical results.</S>
    <S sid="20" ssid="16">Finally, I consider the question of the relation between the co-training algorithm and the Yarowsky algorithm.</S>
    <S sid="21" ssid="17">I suggest that the Yarowsky algorithm is actually based on a different independence assumption, and I show that, if the independence assumption holds, the Yarowsky algorithm is effective at finding a high-precision classifier.</S>
  </SECTION>
  <SECTION title="2 Problem Setting and Notation" number="2">
    <S sid="22" ssid="1">A bootstrapping problem consists of a space of instances X, a set of labels L, a function Y : X -+ G assigning labels to instances, and a space of rules mapping instances to labels.</S>
    <S sid="23" ssid="2">Rules may be partial functions; we write F(x) = + if F abstains (that is, makes no prediction) on input x.</S>
    <S sid="24" ssid="3">&#8220;Classifier&#8221; is synonymous with &#8220;rule&#8221;.</S>
    <S sid="25" ssid="4">It is often useful to think of rules and labels as sets of instances.</S>
    <S sid="26" ssid="5">A binary rule F can be thought of as the characteristic function of the set of instances {x : F(x) = +}.</S>
    <S sid="27" ssid="6">Multi-class rules also define useful sets when a particular target class t is understood.</S>
    <S sid="28" ssid="7">For any rule F, we write F` for the set of instances {x : F(x) = &#65533;}, or (ambiguously) for that set&#8217;s characteristic function.</S>
    <S sid="29" ssid="8">We write F` for the complement of F`, either as a set or characteristic function.</S>
    <S sid="30" ssid="9">Note that &#175;F` contains instances on which F abstains.</S>
    <S sid="31" ssid="10">We write F&#175;` for {x : F(x) =&#65533; t n F(x) =&#65533; +}.</S>
    <S sid="32" ssid="11">When F does not abstain, &#175;F` and F&#175;` are identical.</S>
    <S sid="33" ssid="12">Finally, in expressions like Pr[F = +|Y = +] (with square brackets and &#8220;Pr&#8221;), the functions F(x) and Y (x) are used as random variables.</S>
    <S sid="34" ssid="13">By contrast, in the expression P(F|Y ) (with parentheses and &#8220;P&#8221;), F is the set of instances for which F(x) = +, and Y is the set of instances for which Y (x) = +.</S>
  </SECTION>
  <SECTION title="3 View Independence" number="3">
    <S sid="35" ssid="1">Blum and Mitchell assume that each instance x consists of two &#8220;views&#8221; x1, x2.</S>
    <S sid="36" ssid="2">We can take this as the assumption of functions X1 and X2 such that X1(x) = x1 and X2(x) = x2.</S>
    <S sid="37" ssid="3">They propose that views are conditionally independent given the label.</S>
    <S sid="38" ssid="4">Definition 1 A pair of views x1, x2 satisfy view independence just in case: There is a related independence assumption that will prove useful.</S>
    <S sid="39" ssid="5">Let us define W1 to consist of rules that are functions of X1 only, and define W2 to consist of rules that are functions of X2 only.</S>
    <S sid="40" ssid="6">If instead of generating W1 and W2 from X1 and X2, we assume a set of features F (which can be thought of as binary rules), and take W1 = W2 = F, rule independence reduces to the Naive Bayes independence assumption.</S>
    <S sid="41" ssid="7">The following theorem is not difficult to prove; we omit the proof.</S>
    <S sid="42" ssid="8">Theorem 1 View independence implies rule independence.</S>
  </SECTION>
  <SECTION title="4 Rule Independence and Bootstrapping" number="4">
    <S sid="43" ssid="1">Blum and Mitchell&#8217;s paper suggests that rules that agree on unlabelled instances are useful in bootstrapping.</S>
    <S sid="44" ssid="2">Note that the agreement rate between rules makes no reference to labels; it can be determined from unlabeled data.</S>
    <S sid="45" ssid="3">The algorithm that Blum and Mitchell describe does not explicitly search for rules with good agreement; nor does agreement rate play any direct role in the learnability proof given in the Blum and Mitchell paper.</S>
    <S sid="46" ssid="4">The second lack is emended in (Dasgupta et al., 2001).</S>
    <S sid="47" ssid="5">They show that, if view independence is satisfied, then the agreement rate between opposing-view rules F and G upper bounds the error of F (or G).</S>
    <S sid="48" ssid="6">The following statement of the theorem is simplified and assumes non-abstaining binary rules.</S>
    <S sid="49" ssid="7">Theorem 2 For all F E W1, G E W2 that satisfy rule independence and are nontrivial predictors in the sense that minu Pr[F = u] &gt; Pr[F =&#65533; If F agrees with G on all but E unlabelled instances, then either F or F&#175; predicts Y with error no greater than E. A small amount of labelled data suffices to choose between F and F&#175;.</S>
    <S sid="50" ssid="8">I give a geometric proof sketch here; the reader is referred to the original paper for a formal proof.</S>
    <S sid="51" ssid="9">Consider figures 1 and 2.</S>
    <S sid="52" ssid="10">In these diagrams, area represents probability.</S>
    <S sid="53" ssid="11">For example, the leftmost box (in either diagram) represents the instances for which Y = +, and the area of its upper left quadrant represents Pr[F = +, G = +, Y = +].</S>
    <S sid="54" ssid="12">Typically, in such a diagram, either the horizontal or vertical line is broken, as in figure 2.</S>
    <S sid="55" ssid="13">In the special case in which rule independence is satisfied, both horizontal and vertical lines are unbroken, as in figure 1.</S>
    <S sid="56" ssid="14">Theorem 2 states that disagreement upper bounds error.</S>
    <S sid="57" ssid="15">First let us consider a lemma, to wit: disagreement upper bounds minority probabilities.</S>
    <S sid="58" ssid="16">Define the minority value of F given Y = y to be the value u with least probability Pr[F = u|Y = y]; the minority probability is the probability of the minority value.</S>
    <S sid="59" ssid="17">(Note that minority probabilities are conditional probabilities, and distinct from the marginal probability mina Pr[F = u] mentioned in the theorem.)</S>
    <S sid="60" ssid="18">In figure 1a, the areas of disagreement are the upper right and lower left quadrants of each box, as marked.</S>
    <S sid="61" ssid="19">The areas of minority values are marked in figure 1b.</S>
    <S sid="62" ssid="20">It should be obvious that the area of disagreement upper bounds the area of minority values.</S>
    <S sid="63" ssid="21">The error values of F are the values opposite to the values of Y : the error value is &#8722; when Y = + and + when Y = &#8722;.</S>
    <S sid="64" ssid="22">When minority values are error values, as in figure 1, disagreement upper bounds error, and theorem 2 follows immediately.</S>
    <S sid="65" ssid="23">However, three other cases are possible.</S>
    <S sid="66" ssid="24">One possibility is that minority values are opposite to error values.</S>
    <S sid="67" ssid="25">In this case, the minority values of F&#175; are error values, and disagreement between F and G upper bounds the error of F&#175;.</S>
    <S sid="68" ssid="26">This case is admitted by theorem 2.</S>
    <S sid="69" ssid="27">In the final two cases, minority values are the same regardless of the value of Y .</S>
    <S sid="70" ssid="28">In these cases, however, the predictors do not satisfy the &#8220;nontriviality&#8221; condition of theorem 2, which requires that mina Pr[F = u] be greater than the disagreement between F and G.</S>
  </SECTION>
  <SECTION title="5 The Unreasonableness of Rule Independence" number="5">
    <S sid="71" ssid="1">Rule independence is a very strong assumption; one remarkable consequence will show just how strong it is.</S>
    <S sid="72" ssid="2">The precision of a rule F is defined to be Pr[Y = +|F = +].</S>
    <S sid="73" ssid="3">(We continue to assume non-abstaining binary rules.)</S>
    <S sid="74" ssid="4">If rule independence holds, knowing the precision of any one rule allows one to exactly compute the precision of every other rule given only unlabeled data and knowledge of the size of the target concept.</S>
    <S sid="75" ssid="5">Let F and G be arbitrary rules based on independent views.</S>
    <S sid="76" ssid="6">We first derive an expression for the precision of F in terms of G. Note that the second line is derived from the first by rule independence.</S>
    <S sid="77" ssid="7">To compute the expression on the righthand side of the last line, we require P(Y |G), P(Y ), P(G|F), and P(G).</S>
    <S sid="78" ssid="8">The first value, the precision of G, is assumed known.</S>
    <S sid="79" ssid="9">The second value, P(Y ), is also assumed known; it can at any rate be estimated from a small amount of labeled data.</S>
    <S sid="80" ssid="10">The last two values, P(G|F) and P(G), can be computed from unlabeled data.</S>
    <S sid="81" ssid="11">Thus, given the precision of an arbitrary rule G, we can compute the precision of any otherview rule F. Then we can compute the precision of rules based on the same view as G by using the precision of some other-view rule F. Hence we can compute the precision of every rule given the precision of any one.</S>
    <S sid="82" ssid="12">The empirical investigations described here and below use the data set of (Collins and Singer, 1999).</S>
    <S sid="83" ssid="13">The task is to classify names in text as person, location, or organization.</S>
    <S sid="84" ssid="14">There is an unlabeled training set containing 89,305 instances, and a labeled test set containing 289 persons, 186 locations, 402 organizations, and 123 &#8220;other&#8221;, for a total of 1,000 instances.</S>
    <S sid="85" ssid="15">Instances are represented as lists of features.</S>
    <S sid="86" ssid="16">Intrinsic features are the words making up the name, and contextual features are features of the syntactic context in which the name occurs.</S>
    <S sid="87" ssid="17">For example, consider Bruce Kaplan, president of Metals Inc.</S>
    <S sid="88" ssid="18">This text snippet contains two instances.</S>
    <S sid="89" ssid="19">The first has intrinsic features N:Bruce-Kaplan, C:Bruce, and C:Kaplan (&#8220;N&#8221; for the complete name, &#8220;C&#8221; for &#8220;contains&#8221;), and contextual feature M:president (&#8220;M&#8221; for &#8220;modified by&#8221;).</S>
    <S sid="90" ssid="20">The second instance has intrinsic features N:Metals-Inc, C:Metals, C:Inc, and contextual feature X:president-of (&#8220;X&#8221; for &#8220;in the context of&#8221;).</S>
    <S sid="91" ssid="21">Let us define Y (x) = + if x is a &#8220;location&#8221; instance, and Y (x) = &#8722; otherwise.</S>
    <S sid="92" ssid="22">We can estimate P(Y ) from the test sample; it contains 186/1000 location instances, giving P(Y ) = .186.</S>
    <S sid="93" ssid="23">Let us treat each feature F as a rule predicting + when F is present and &#8722; otherwise.</S>
    <S sid="94" ssid="24">The precision of F is P(Y |F).</S>
    <S sid="95" ssid="25">The internal feature N:New-York has precision 1.</S>
    <S sid="96" ssid="26">This permits us to compute the precision of various contextual features, as shown in the &#8220;Co-training&#8221; column of Table 1.</S>
    <S sid="97" ssid="27">We note that the numbers do not even look like probabilities.</S>
    <S sid="98" ssid="28">The cause is the failure of view independence to hold in the data, combined with the instability of the estimator.</S>
    <S sid="99" ssid="29">(The &#8220;Yarowsky&#8221; column uses a seed rule to estimate P(Y |F), as is done in the Yarowsky algorithm, and the &#8220;Truth&#8221; column shows the true value of P(Y |F).)</S>
  </SECTION>
  <SECTION title="7 Relaxing the Assumption" number="6">
    <S sid="100" ssid="1">Nonetheless, the unreasonableness of view independence does not mean we must abandon theorem 2.</S>
    <S sid="101" ssid="2">In this section, we introduce a weaker assumption, one that is satisfied by the data, and we show that theorem 2 holds under this weaker assumption.</S>
    <S sid="102" ssid="3">There are two ways in which the data can diverge from conditional independence: the rules may either be positively or negatively correlated, given the class value.</S>
    <S sid="103" ssid="4">Figure 2a illustrates positive correlation, and figure 2b illustrates negative correlation.</S>
    <S sid="104" ssid="5">If the rules are negatively correlated, then their disagreement (shaded in figure 2) is larger than if they are conditionally independent, and the conclusion of theorem 2 is maintained a fortiori.</S>
    <S sid="105" ssid="6">Unfortunately, in the data, they are positively correlated, so the theorem does not apply.</S>
    <S sid="106" ssid="7">Let us quantify the amount of deviation from conditional independence.</S>
    <S sid="107" ssid="8">We define the conditional dependence of F and G given Y = y to If F and G are conditionally independent, then dy = 0.</S>
    <S sid="108" ssid="9">This permits us to state a weaker version of rule independence: Definition 4 Rules F and G satisfy weak rule dependence just in case, for y E {+, &#8722;}: dy ` p2 2p1q1 where p1 = minu Pr[F = u|Y = y], p2 = minu Pr[G = u|Y = y], and q1 = 1 &#8722; p1.</S>
    <S sid="109" ssid="10">By definition, p1 and p2 cannot exceed 0.5.</S>
    <S sid="110" ssid="11">If p1 = 0.5, then weak rule dependence reduces to independence: if p1 = 0.5 and weak rule dependence is satisfied, then dy must be 0, which is to say, F and G must be conditionally independent.</S>
    <S sid="111" ssid="12">However, as p1 decreases, the permissible amount of conditional dependence increases.</S>
    <S sid="112" ssid="13">We can now state a generalized version of theorem 2: Theorem 3 For all F E W1, G E W2 that satisfy weak rule dependence and are nontrivial predictors in the sense that minu Pr[F = u] &gt; Pr[F =&#65533; G], one of the following inequalities holds: Consider figure 3.</S>
    <S sid="113" ssid="14">This illustrates the most relevant case, in which F and G are positively correlated given Y .</S>
    <S sid="114" ssid="15">(Only the case Y = + is shown; the case Y = &#8722; is similar.)</S>
    <S sid="115" ssid="16">We assume that the minority values of F are error values; the other cases are handled as in the discussion of theorem 2.</S>
    <S sid="116" ssid="17">Let u be the minority value of G when Y = +.</S>
    <S sid="117" ssid="18">In figure 3, a is the probability that G = u when F takes its minority value, and b is the probability that G = u when F takes its majority value.</S>
    <S sid="118" ssid="19">The value r = a &#8722; b is the difference.</S>
    <S sid="119" ssid="20">Note that r = 0 if F and G are conditionally independent given Y = +.</S>
    <S sid="120" ssid="21">In fact, we can show Hence, in particular, we may write dy = a &#8722; b.</S>
    <S sid="121" ssid="22">Observe further that p2, the minority probability of G when Y = +, is a weighted average of a and b, namely, p2 = p1a+q1b.</S>
    <S sid="122" ssid="23">Combining this with the equation dy = a&#8722;b allows us to express a and b in terms of the remaining variables, to wit: a = p2 + q1dy and b = p2 &#8722; p1dy.</S>
    <S sid="123" ssid="24">In order to prove theorem 3, we need to show that the area of disagreement (B U C) upper bounds the area of the minority value of F (AU B).</S>
    <S sid="124" ssid="25">This is true just in case C is larger than A, which is to say, if bq1 &gt; ap1.</S>
    <S sid="125" ssid="26">Substituting our expressions for a and b into this inequality and solving for dy yields: dy ` p2 2p1q1 In short, disagreement upper bounds the minority probability just in case weak rule dependence is satisfied, proving the theorem.</S>
  </SECTION>
  <SECTION title="8 The Greedy Agreement Algorithm" number="7">
    <S sid="126" ssid="1">Dasgupta, Littman, and McAllester suggest a possible algorithm at the end of their paper, but they give only the briefest suggestion, and do not implement or evaluate it.</S>
    <S sid="127" ssid="2">I give here an algorithm, the Greedy Agreement Algorithm, that constructs paired rules that agree on unlabeled data, and I examine its performance.</S>
    <S sid="128" ssid="3">The algorithm is given in figure 4.</S>
    <S sid="129" ssid="4">It begins with two seed rules, one for each view.</S>
    <S sid="130" ssid="5">At each iteration, each possible extension to one of the rules is considered and scored.</S>
    <S sid="131" ssid="6">The best one is kept, and attention shifts to the other rule.</S>
    <S sid="132" ssid="7">A complex rule (or classifier) is a list of atomic rules H, each associating a single feature h with a label t. H(x) = t if x has feature h, and H(x) = L otherwise.</S>
    <S sid="133" ssid="8">A given atomic rule is permitted to appear multiple times in the list.</S>
    <S sid="134" ssid="9">Each atomic rule occurrence gets one vote, and the classifier&#8217;s prediction is the label that receives the most votes.</S>
    <S sid="135" ssid="10">In case of a tie, there is no prediction.</S>
    <S sid="136" ssid="11">The cost of a classifier pair (F, G) is based on a more general version of theorem 2, that admits abstaining rules.</S>
    <S sid="137" ssid="12">The following theorem is based on (Dasgupta et al., 2001).</S>
    <S sid="138" ssid="13">Theorem 4 If view independence is satisfied, and if F and G are rules based on different views, then one of the following holds: In other words, for a given binary rule F, a pessimistic estimate of the number of errors made by F is S/(&#181; &#8722; S) times the number of instances labeled by F, plus the number of instances left unlabeled by F. Finally, we note that the cost of F is sensitive to the choice of G, but the cost of F with respect to G is not necessarily the same as the cost of G with respect to F. To get an overall cost, we average the cost of F with respect to G and G with respect to F. Figure 5 shows the performance of the greedy agreement algorithm after each iteration.</S>
    <S sid="139" ssid="14">Because not all test instances are labeled (some are neither persons nor locations nor organizations), and because classifiers do not label all instances, we show precision and recall rather than a single error rate.</S>
    <S sid="140" ssid="15">The contour lines show levels of the F-measure (the harmonic mean of precision and recall).</S>
    <S sid="141" ssid="16">The algorithm is run to convergence, that is, until no atomic rule can be found that decreases cost.</S>
    <S sid="142" ssid="17">It is interesting to note that there is no significant overtraining with respect to F-measure.</S>
    <S sid="143" ssid="18">The final values are 89.2/80.4/84.5 recall/precision/F-measure, which compare favorably with the performance of the Yarowsky algorithm (83.3/84.6/84.0).</S>
    <S sid="144" ssid="19">(Collins and Singer, 1999) add a special final round to boost recall, yielding 91.2/80.0/85.2 for the Yarowsky algorithm and 91.3/80.1/85.3 for their version of the original co-training algorithm.</S>
    <S sid="145" ssid="20">All four algorithms essentially perform equally well; the advantage of the greedy agreement algorithm is that we have an explanation for why it performs well.</S>
  </SECTION>
  <SECTION title="9 The Yarowsky Algorithm" number="8">
    <S sid="146" ssid="1">For Yarowsky&#8217;s algorithm, a classifier again consists of a list of atomic rules.</S>
    <S sid="147" ssid="2">The prediction of the classifier is the prediction of the first rule in the list that applies.</S>
    <S sid="148" ssid="3">The algorithm constructs a classifier iteratively, beginning with a seed rule.</S>
    <S sid="149" ssid="4">In the variant we consider here, one atomic rule is added at each iteration.</S>
    <S sid="150" ssid="5">An atomic rule F` is chosen only if its precision, Pr[G` = +JF` = +] (as measured using the labels assigned by the current classifier G), exceeds a fixed threshold &#952;.1 Yarowsky does not give an explicit justification for the algorithm.</S>
    <S sid="151" ssid="6">I show here that the algorithm can be justified on the basis of two independence assumptions.</S>
    <S sid="152" ssid="7">In what follows, F represents an atomic rule under consideration, and G represents the current classifier.</S>
    <S sid="153" ssid="8">Recall that Y` is the set of instances whose true label is t, and G` is the set of instances {x : G(x) = t}.</S>
    <S sid="154" ssid="9">We write G&#8727; for the set of instances labeled by the current classifier, that is, {x : G(x) =&#65533; +}.</S>
    <S sid="155" ssid="10">The first assumption is precision independence.</S>
    <S sid="156" ssid="11">Definition 5 Candidate rule F` and classifier G satisfy precision independence just in case Precision independence is stated here so that it looks like a conditional independence assumption, to emphasize the similarity to the analysis of co-training.</S>
    <S sid="157" ssid="12">In fact, it is only &#8220;half&#8221; an independence assumption&#8212;for precision independence, it is not necessary that P(Y`J &#175;F`, G&#8727;) = P(Y`J The second assumption is that classifiers make balanced errors.</S>
    <S sid="158" ssid="13">That is: P(Y`, G&#175;`JF`) = P(Y&#175;`, G`JF`) Let us first consider a concrete (but hypothetical) example.</S>
    <S sid="159" ssid="14">Suppose the initial classifier correctly labels 100 out of 1000 instances, and makes no mistakes.</S>
    <S sid="160" ssid="15">Then the initial precision is 1(Yarowsky, 1995), citing (Yarowsky, 1994), actually uses a superficially different score that is, however, a monotone transform of precision, hence equivalent to precision, since it is used only for sorting.</S>
    <S sid="161" ssid="16">1 and recall is 0.1.</S>
    <S sid="162" ssid="17">Suppose further that we add an atomic rule that correctly labels 19 new instances, and incorrectly labels one new instance.</S>
    <S sid="163" ssid="18">The rule&#8217;s precision is 0.95.</S>
    <S sid="164" ssid="19">The precision of the new classifier (the old classifier plus the new atomic rule) is 119/120 = 0.99.</S>
    <S sid="165" ssid="20">Note that the new precision lies between the old precision and the precision of the rule.</S>
    <S sid="166" ssid="21">We will show that this is always the case, given precision independence and balanced errors.</S>
    <S sid="167" ssid="22">We need to consider several quantities: the precision of the current classifier, P(Y`JG`); the precision of the rule under consideration, P(Y`JF`); the precision of the rule on the current labeled set, P(Y`JF`G&#8727;); and the precision of the rule as measured using estimated labels, P(G`JF`G&#8727;).</S>
    <S sid="168" ssid="23">The assumption of balanced errors implies that measured precision equals true precision on labeled instances, as follows.</S>
    <S sid="169" ssid="24">(We assume here that all instances have true labels, hence that This, combined with precision independence, implies that the precision of F` as measured on the labeled set is equal to its true precision P(Y`JF`).</S>
    <S sid="170" ssid="25">Now consider the precision of the old and new classifiers at predicting t. Of the instances that the old classifier labels t, let A be the number that are correctly labeled and B be the number that are incorrectly labeled.</S>
    <S sid="171" ssid="26">Defining Nt = A + B, the precision of the old classifier is Qt = A/Nt.</S>
    <S sid="172" ssid="27">Let &#916;A be the number of new instances that the rule under consideration correctly labels, and let &#916;B be the number that it incorrectly labels.</S>
    <S sid="173" ssid="28">Defining n = &#916;A + &#916;B, the precision of the rule is q = &#916;A/n.</S>
    <S sid="174" ssid="29">The precision of the new classifier is Qt+1 = (A + &#916;A)/Nt+1, which can be written as: That is, the precision of the new classifier is a weighted average of the precision of the old classifier and the precision of the new rule.</S>
    <S sid="175" ssid="30">An immediate consequence is that, if we only accept rules whose precision exceeds a given threshold B, then the precision of the new classifier exceeds B.</S>
    <S sid="176" ssid="31">Since measured precision equals true precision under our previous assumptions, it follows that the true precision of the final classifier exceeds B if the measured precision of every accepted rule exceeds B.</S>
    <S sid="177" ssid="32">Moreover, observe that recall can be written as: Nt Qt N` where N` is the number of instances whose true label is t. If Qt &gt; B, then recall is bounded below by NtB/N`, which grows as Nt grows.</S>
    <S sid="178" ssid="33">Hence we have proven the following theorem.</S>
    <S sid="179" ssid="34">Intuitively, the Yarowsky algorithm increases recall while holding precision above a threshold that represents the desired precision of the final classifier.</S>
    <S sid="180" ssid="35">The empirical behavior of the algorithm, as shown in figure 6, is in accordance with this analysis.</S>
    <S sid="181" ssid="36">We have seen, then, that the Yarowsky algorithm, like the co-training algorithm, can be justified on the basis of an independence assumption, precision independence.</S>
    <S sid="182" ssid="37">It is important to note, however, that the Yarowsky algorithm is not a special case of co-training.</S>
    <S sid="183" ssid="38">Precision independence and view independence are distinct assumptions; neither implies the other.2</S>
  </SECTION>
  <SECTION title="10 Conclusion" number="9">
    <S sid="184" ssid="1">To sum up, we have refined previous work on the analysis of co-training, and given a new cotraining algorithm that is theoretically justified and has good empirical performance.</S>
    <S sid="185" ssid="2">We have also given a theoretical analysis of the Yarowsky algorithm for the first time, and shown that it can be justified by an independence assumption that is quite distinct from the independence assumption that co-training is based on.</S>
  </SECTION>
</PAPER>
