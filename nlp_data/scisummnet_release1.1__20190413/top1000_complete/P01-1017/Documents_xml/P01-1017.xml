<PAPER>
  <S sid="0">Immediate-Head Parsing For Language Models</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We present two language models based upon an &#8220;immediate-head&#8221; parser &#8212; our name for a parser that conditions events below a constituent head of While all of the most accurate statistical parsers are of the immediate-head variety, no previous grammatical language model uses this technology.</S>
    <S sid="2" ssid="2">The perplexity for both of these models significantly improve upon the trigram model base-line as well as the best previous grammarbased language model.</S>
    <S sid="3" ssid="3">For the better of our two models these improvements are 24% and 14% respectively.</S>
    <S sid="4" ssid="4">We also suggest that improvement of the underlying parser should significantly improve the model&#8217;s perplexity and that even in the near term there is a lot of potential for improvement in immediatehead language models. are what we will call parsers in that all of the properties of the immedescendants of a constituent assigned probabilities that are conditioned on the lexical of For example, in Figure 1 the probability the into np pp conditioned on head of the &#8220;put&#8221;, as are the choices of the under the i.e., &#8220;ball&#8221; (the head of and &#8220;in&#8221; (the head of the It is the experience of the statistical parsing community that immediate-head parsers are the most accurate we can design.</S>
    <S sid="5" ssid="5">It is also worthy of note that many of these [1,3,6,7] are that is, for a try to find the parse by Equation 1: = arg (1) This is interesting because insofar as they comthese parsers define a language-model in that they can (in principle) assign a probability to all possible sentences in the language by com</S>
  </ABSTRACT>
  <SECTION title="" number="1">
    <S sid="6" ssid="1">All of the most accurate statistical parsers [1,3, 6,7,12,14] are lexicalized in that they condition probabilities on the lexical content of the sentences being parsed.</S>
    <S sid="7" ssid="2">Furthermore, all of these where p(7, s) is zero if the yield of 7 =&#65533; s. Language models, of course, are of interest because speech-recognition systems require them.</S>
    <S sid="8" ssid="3">These systems determine the words that were spoken by solving Equation 3: arg maxsp(s I A) = arg maxsp(s)p(A I s) (3) where A denotes the acoustic signal.</S>
    <S sid="9" ssid="4">The first term on the right, p(s), is the language model, and is what we compute via parsing in Equation 2.</S>
    <S sid="10" ssid="5">Virtually all current speech recognition systems use the so-called trigram language model in which the probability of a string is broken down into conditional probabilities on each word given On the other hand, in the last few years there has been interest in designing language models based upon parsing and Equation 2.</S>
    <S sid="11" ssid="6">We now turn to this previous research.</S>
  </SECTION>
  <SECTION title="2 Previous Work" number="2">
    <S sid="12" ssid="1">There is, of course, a very large body of literature on language modeling (for an overview, see [10]) and even the literature on grammatical language models is becoming moderately large [4, 9,15,16,17].</S>
    <S sid="13" ssid="2">The research presented in this paper is most closely related to two previous efforts, that by Chelba and Jelinek [4] (C&amp;J) and that by Roark [15], and this review concentrates on these two papers.</S>
    <S sid="14" ssid="3">While these two works differ in many particulars, we stress here the ways in which they are similar, and similar in ways that differ from the approach taken in this paper.</S>
    <S sid="15" ssid="4">In both cases the grammar based language model computes the probability of the next word based upon the previous words of the sentence.</S>
    <S sid="16" ssid="5">More specifically, these grammar-based models compute a subset of all possible grammatical relations for the prior words, and then compute Also, when computing the probability of the next word, both models condition on the two prior heads of constituents.</S>
    <S sid="17" ssid="6">Thus, like a trigram model, they use information about triples of words.</S>
    <S sid="18" ssid="7">Neither of these models uses an immediatehead parser.</S>
    <S sid="19" ssid="8">Rather they are both what we will call strict left-to-right parsers.</S>
    <S sid="20" ssid="9">At each sentence position in strict left-to-right parsing one computes the probability of the next word given the previous words (and does not go back to modify such probabilities).</S>
    <S sid="21" ssid="10">This is not possible in immediate-head parsing.</S>
    <S sid="22" ssid="11">Sometimes the immediate head of a constituent occurs after it (e.g, in noun-phrases, where the head is typically the rightmost noun) and thus is not available for conditioning by a strict left-to-right parser.</S>
    <S sid="23" ssid="12">There are two reasons why one might prefer strict left-to-right parsing for a language model (Roark [15] and Chelba, personal communication).</S>
    <S sid="24" ssid="13">First, the search procedures for guessing the words that correspond to the acoustic signal works left to right in the string.</S>
    <S sid="25" ssid="14">If the language model is to offer guidance to the search procedure it must do so as well.</S>
    <S sid="26" ssid="15">The second benefit of strict left-to-right parsing is that it is easily combined with the standard trigram model.</S>
    <S sid="27" ssid="16">In both cases at every point in the sentence we compute the probability of the next word given the prior words.</S>
    <S sid="28" ssid="17">Thus one can interpolate the trigram and grammar probability estimates for each word to get a more robust estimate.</S>
    <S sid="29" ssid="18">It turns out that this is a good thing to do, as is clear from Table 1, which gives perplexity results for a trigram model of the data in column one, results for the grammar-model in column two, and results for a model in which the two are interpoBoth the were trained and tested on the same training and testing corpora, to be described in Section 4.1.</S>
    <S sid="30" ssid="19">As indicated in the table, the trigram model achieved a perplexity of 167 for the testing corpus.</S>
    <S sid="31" ssid="20">The grammar models did slightly better (e.g., 158.28 for the Chelba and Jelinek (C&amp;J) parser), but it is the interpolation of the two that is clearly the winner (e.g., 137.26 for the Roark parser/trigram combination).</S>
    <S sid="32" ssid="21">In both papers the interpolation constants were 0.36 for the trigram estimate and 0.64 for the grammar estimate.</S>
    <S sid="33" ssid="22">While both of these reasons for strict-left-toright parsing (search and trigram interpolation) are valid, they are not necessarily compelling.</S>
    <S sid="34" ssid="23">The ability to combine easily with trigram models is important only as long as trigram models can improve grammar models.</S>
    <S sid="35" ssid="24">A sufficiently good grammar model would obviate the need for trigrams.</S>
    <S sid="36" ssid="25">As for the search problem, we briefly return to this point at the end of the paper.</S>
    <S sid="37" ssid="26">Here we simply note that while search requires that a language model provide probabilities in a left to right fashion, one can easily imagine procedures where these probabilities are revised after new information is found (i.e., the head of the constituent).</S>
    <S sid="38" ssid="27">Note that already our search procedure needs to revise previous most-likely-word hypotheses when the original guess makes the subsequent words very unlikely.</S>
    <S sid="39" ssid="28">Revising the associated language-model probabilities complicates the search procedure, but not unimaginably so.</S>
    <S sid="40" ssid="29">Thus it seems to us that it is worth finding out whether the superior parsing performance of immediate-head parsers translates into improved language models.</S>
  </SECTION>
  <SECTION title="3 The Immediate-Head Parsing Model" number="3">
    <S sid="41" ssid="1">We have taken the immediate-head parser described in [3] as our starting point.</S>
    <S sid="42" ssid="2">This parsing model assigns a probability to a parse 7 by a topdown process of considering each constituent c in 7 and, for each c, first guessing the pre-terminal of c, t(c) (t for &#8220;tag&#8221;), then the lexical head of c, h(c), and then the expansion of c into further constituents e(c).</S>
    <S sid="43" ssid="3">Thus the probability of a parse is given by the equation where l(c) is the label of c (e.g., whether it is a noun phrase (np), verb phrase, etc.) and H(c) is the relevant history of c &#8212; information outside c that our probability model deems important in determining the probability in question.</S>
    <S sid="44" ssid="4">In [3] H(c) approximately consists of the label, head, and head-part-of-speech for the parent of c: m(c), i(c), and u(c) respectively.</S>
    <S sid="45" ssid="5">One exception is the distribution p(e(c) j l(c), t(c), h(c), H(c)), where H only includes m and u.1 Whenever it is clear to which constituent we are referring we omit the (c) in, e.g., h(c).</S>
    <S sid="46" ssid="6">In this notation the above equation takes the following form: Because this is a point of contrast with the parsers described in the previous section, note that all of the conditional distributions are conditioned on one lexical item (either i or h).</S>
    <S sid="47" ssid="7">Thus only p(h j t,l, m, u, i), the distribution for the head of c, looks at two lexical items (i and h itself), and none of the distributions look at three lexical items as do the trigram distribution of Equation 4 and the previously discussed parsing language models [4, 15].</S>
    <S sid="48" ssid="8">Next we describe how we assign a probability to the expansion e of a constituent.</S>
    <S sid="49" ssid="9">We break up a traditional probabilistic context-free grammar (PCFG) rule into a left-hand side with a label l(c) drawn from the non-terminal symbols of our grammar, and a right-hand side that is a sequence 1We simplify slightly in this section.</S>
    <S sid="50" ssid="10">See [3] for all the details on the equations as well as the smoothing used. of one or more such symbols.</S>
    <S sid="51" ssid="11">For each expansion we distinguish one of the right-hand side labels as the &#8220;middle&#8221; or &#8220;head&#8221; symbol M(c).</S>
    <S sid="52" ssid="12">M(c) is the constituent from which the head lexical item h is obtained according to deterministic rules that pick the head of a constituent from among the heads of its children.</S>
    <S sid="53" ssid="13">To the left of M is a sequence of one or more left labels Li(c) including the special termination symbol A, which indicates that there are no more symbols to the left, and similarly for the labels to the right, Ri(c).</S>
    <S sid="54" ssid="14">Thus an expansion e(c) looks like: The expansion is generated by guessing first M, then in order L1 through Lm+1 (= A), and similarly for R1 through Rn+1.</S>
    <S sid="55" ssid="15">In anticipation of our discussion in Section 4.2, note that when we are expanding an Li we do not know the lexical items to its left, but if we properly dovetail our &#8220;guesses&#8221; we can be sure of what word, if any, appears to its right and before M, and similarly for the word to the left of Rj.</S>
    <S sid="56" ssid="16">This makes such words available to be conditioned upon.</S>
    <S sid="57" ssid="17">Finally, the parser of [3] deviates in two places from the strict dictates of a language model.</S>
    <S sid="58" ssid="18">First, as explicitly noted in [3], the parser does not compute the partition function (normalization constant) for its distributions so the numbers it returns are not true probabilities.</S>
    <S sid="59" ssid="19">We noted there that if we replaced the &#8220;max-ent inspired&#8221; feature with standard deleted interpolation smoothing, we took a significant hit in performance.</S>
    <S sid="60" ssid="20">We have now found several ways to overcome this problem, including some very efficient ways to compute partition functions for this class of models.</S>
    <S sid="61" ssid="21">In the end, however, this was not necessary, as we found that we could obtain equally good performance by &#8220;hand-crafting&#8221; our interpolation smoothing rather than using the &#8220;obvious&#8221; method (which performs poorly).</S>
    <S sid="62" ssid="22">Secondly, as noted in [2], the parser encourages right branching with a &#8220;bonus&#8221; multiplicative factor of 1.2 for constituents that end at the right boundary of the sentence, and a penalty of 0.8 for those that do not.</S>
    <S sid="63" ssid="23">This is replaced by explicitly conditioning the events in the expansion of Equation 6 on whether or not the constituent is at the right boundary (barring sentence-final punctuation).</S>
    <S sid="64" ssid="24">Again, with proper attention to details, this can be known at the time the expansion is taking place.</S>
    <S sid="65" ssid="25">This modification is much more complex than the multiplicative &#8220;hack,&#8221; and it is not quite as good (we lose about 0.1% in precision/recall figures), but it does allow us to compute true probabilities.</S>
    <S sid="66" ssid="26">The resulting parser strictly speaking defines a PCFG in that all of the extra conditioning information could be included in the non-terminalnode labels (as we did with the head information in Figure 1).</S>
    <S sid="67" ssid="27">When a PCFG probability distribution is estimated from training data (in our case the Penn tree-bank) PCFGs define a tight (summing to one) probability distribution over strings [5], thus making them appropriate for language models.</S>
    <S sid="68" ssid="28">We also empirically checked that our individual distributions (p(t 1 l, m, u, i), and p(h 1 t,l, m, u, i) from Equation 5 and p(L 1 l, t, h, m, u), p(M 1 l, t, h, m, u), and p(R 1 l, t, h, m, u) from Equation 5) sum to one for a large, random, selection of conditioning events2 As with [3], a subset of parses is computed with a non-lexicalized PCFG, and the most probable edges (using an empirically established threshold) have their probabilities recomputed according to the complete probability model of Equation 5.</S>
    <S sid="69" ssid="29">Both searches are conducted using dynamic programming.</S>
  </SECTION>
  <SECTION title="4 Experiments" number="4">
    <S sid="70" ssid="1">The parser as described in the previous section was trained and tested on the data used in the previously described grammar-based language modeling research [4,15].</S>
    <S sid="71" ssid="2">This data is from the Penn Wall Street Journal tree-bank [13], but modified to make the text more &#8220;speech-like&#8221;.</S>
    <S sid="72" ssid="3">In particular: 4. all words except for the 10,000 most common are replaced by the symbol UNK.</S>
    <S sid="73" ssid="4">As in previous work, files F0 to F20 are used for training, F21-F22 for development, and F23-F24 for testing.</S>
    <S sid="74" ssid="5">The results are given in Table 2.</S>
    <S sid="75" ssid="6">We refer to the current model as the bihead model.</S>
    <S sid="76" ssid="7">&#8220;Bihead&#8221; here emphasizes the already noted fact that in this model probabilities involve at most two lexical heads.</S>
    <S sid="77" ssid="8">As seen in Table 2, the immediate-bihead model with a perplexity of 144.98 outperforms both previous models, even though they use trigrams of words in their probability estimates.</S>
    <S sid="78" ssid="9">We also interpolated our parsing model with the trigram model (interpolation constant .36, as with the other models) and this model outperforms the other interpolation models.</S>
    <S sid="79" ssid="10">Note, however, that because our parser does not define probabilities for each word based upon previous words (as with trigram) it is not possible to do the integration at the word level.</S>
    <S sid="80" ssid="11">Rather we interpolate the probabilities of the entire sentences.</S>
    <S sid="81" ssid="12">This is a much less powerful technique than the word-level interpolation used by both C&amp;J and Roark, but we still observe a significant gain in performance.</S>
    <S sid="82" ssid="13">While the performance of the grammatical model is good, a look at sentences for which the trigram model outperforms it makes its limitations apparent.</S>
    <S sid="83" ssid="14">The sentences in question have noun phrases like &#8220;monday night football&#8221; that trigram models eats up but on which our bihead parsing model performs less well.</S>
    <S sid="84" ssid="15">For example, consider the sentence &#8220;he watched monday night football&#8221;.</S>
    <S sid="85" ssid="16">The trigram model assigns this a probability of 1.9 &#8226; 10-5, while the grammar model gives it a probability of 2.77 &#8226; 10-7.</S>
    <S sid="86" ssid="17">To a first approximation, this is entirely due to the difference in probability of the noun-phrase.</S>
    <S sid="87" ssid="18">For example, the trigram probability p(football I monday, night) = 0.366, and would have been 1.0 except that smoothing saved some of the probability for other things it might have seen but did not.</S>
    <S sid="88" ssid="19">Because the grammar model conditions in a different order, the closest equivalent probability would be that for &#8220;monday&#8221;, but in our model this is only conditioned on &#8220;football&#8221; so the probability is much less biased, only 0.0306.</S>
    <S sid="89" ssid="20">(Penn tree-bank base noun-phrases are flat, thus the head above &#8220;monday&#8221; is &#8220;football&#8221;.)</S>
    <S sid="90" ssid="21">This immediately suggests creating a second model that captures some of the trigram-like probabilities that the immediate-bihead model misses.</S>
    <S sid="91" ssid="22">The most obvious extension would be to condition upon not just one&#8217;s parent&#8217;s head, but one&#8217;s grandparent&#8217;s as well.</S>
    <S sid="92" ssid="23">This does capture some of the information we would like, particularly the case heads of noun-phrases inside of prepositional phrases.</S>
    <S sid="93" ssid="24">For example, in &#8220;united states of america&#8221;, the probability of &#8220;america&#8221; is now conditioned not just on &#8220;of&#8221; (the head of its parent) but also on &#8220;states&#8221;.</S>
    <S sid="94" ssid="25">Unfortunately, for most of the cases where trigram really cleans up this revision would do little.</S>
    <S sid="95" ssid="26">Thus, in &#8220;he watched monday night football&#8221; &#8220;monday&#8221; would now be conditioned upon &#8220;football&#8221; and &#8220;watched.&#8221; The addition of &#8220;watched&#8221; is unlikely to make much difference, certainly compared to the boost trigram models get by, in effect, recognizing the complete name.</S>
    <S sid="96" ssid="27">It is interesting to note, however, that virtually all linguists believe that a noun-phrase like &#8220;monday night football&#8221; has significant substructure &#8212; e.g., it would look something like Figure 2.</S>
    <S sid="97" ssid="28">If we assume this tree-structure the two heads above &#8220;monday&#8221; are &#8220;night&#8221; and &#8220;football&#8221; respectively, thus giving our trihead model the same power as the trigram for this case.</S>
    <S sid="98" ssid="29">Ignoring some of the conditioning events, we now get a probability p(h = monday I i = night, j = football), which is much higher than the corresponding bihead version p(h = monday I i = football).</S>
    <S sid="99" ssid="30">The reader may remember that h is the head of the current constituent, while i is the head of its parent.</S>
    <S sid="100" ssid="31">We now define j to be the grandparent head.</S>
    <S sid="101" ssid="32">We decided to adopt this structure, but to keep things simple we only changed the definition of &#8220;head&#8221; for the distribution p(h I t,l, m, u, i, j).</S>
    <S sid="102" ssid="33">Thus we adopted the following revised definition of head for constituents of base noun-phrases: For a pre-terminal (e.g., noun) constituent c of a base noun-phrase in which it is not the standard head (h) and which has as its right-sister another preterminal constituent d which is not itself h, the head of c is the head of d. The sole exceptions to this rule are phraseinitial determiners and numbers which retain h as their heads.</S>
    <S sid="103" ssid="34">In effect this definition assumes that the substructure of all base noun-phrases is left branching, as in Figure 2.</S>
    <S sid="104" ssid="35">This is not true, but Lauer [11] shows that about two-thirds of all branching in base-noun-phrases is leftward.</S>
    <S sid="105" ssid="36">We believe we would get even better results if the parser could determine the true branching structure.</S>
    <S sid="106" ssid="37">We then adopt the following definition of a grandparent-head feature j.</S>
    <S sid="107" ssid="38">1. if c is a noun phrase under a prepositional phrase, or is a pre-terminal which takes a revised head as defined above, then j is the grandparent head of c, else Case 1 now covers both &#8220;united states of america&#8221; and &#8220;monday night football&#8221; examples.</S>
    <S sid="108" ssid="39">Case 2 handles other flat constituents in Penn tree-bank style (e.g., quantifier-phrases) for which we do not have a good analysis.</S>
    <S sid="109" ssid="40">Case three says that this feature is a no-op in all other situations.</S>
    <S sid="110" ssid="41">The results for this model, again trained on F0F20 and tested on F23-24, are given in Figure 3 under the heading &#8221;Immediate-trihead model&#8221;.</S>
    <S sid="111" ssid="42">We see that the grammar perplexity is reduced to 130.20, a reduction of 10% over our first model, 14% over the previous best grammar model (152.26%), and 22% over the best of the above trigram models for the task (167.02).</S>
    <S sid="112" ssid="43">When we run the trigram and new grammar model in tandem we get a perplexity of 126.07, a reduction of 8% over the best previous tandem model and 24% over the best trigram model.</S>
    <S sid="113" ssid="44">One interesting fact about the immediate-trihead model is that of the 3761 sentences in the test corpus, on 2934, or about 75%, the grammar model assigns a higher probability to the sentence than does the trigram model.</S>
    <S sid="114" ssid="45">One might well ask what went &#8220;wrong&#8221; with the remaining 25%?</S>
    <S sid="115" ssid="46">Why should the grammar model ever get beaten?</S>
    <S sid="116" ssid="47">Three possible reasons come to mind: 1.</S>
    <S sid="117" ssid="48">The grammar model is better but only by a small amount, and due to sparse data problems occasionally the worse model will luck out and beat the better one.</S>
    <S sid="118" ssid="49">2.</S>
    <S sid="119" ssid="50">The grammar model and the trigram model capture different facts about the distribution of words in the language, and for some set of sentences one distribution will perform better than the other.</S>
    <S sid="120" ssid="51">3.</S>
    <S sid="121" ssid="52">The grammar model is, in some sense, always better than the trigram model, but if the parser bungles the parse, then the grammar model is impacted very badly.</S>
    <S sid="122" ssid="53">Obviously the trigram model has no such Achilles&#8217; heel.</S>
    <S sid="123" ssid="54">We ask this question because what we should do to improve performance of our grammar-based language models depends critically on which of these explanations is correct: if (1) we should collect more data, if (2) we should just live with the tandem grammar-trigram models, and if (3) we should create better parsers.</S>
    <S sid="124" ssid="55">Based upon a few observations on sentences from the development corpus for which the trigram model gave higher probabilities we hypothesized that reason (3), bungled parses, is primary.</S>
    <S sid="125" ssid="56">To test this we performed the following experiment.</S>
    <S sid="126" ssid="57">We divide the sentences from the test corpus into two groups, ones for which the trigram model performs better, and the ones for which the grammar model does better.</S>
    <S sid="127" ssid="58">We then collect labeled precision and recall statistics (the standard parsing performance measures) separately for each group.</S>
    <S sid="128" ssid="59">If our hypothesis is correct we expect the &#8220;grammar higher&#8221; group to have more accurate parses than the trigram-higher group as the poor parse would cause poor grammar perplexity for the sentence, which would then be worse than the trigram perplexity.</S>
    <S sid="129" ssid="60">If either of the other two explanations were correct one would not expect much difference between the two groups.</S>
    <S sid="130" ssid="61">The results are shown in Table 4.</S>
    <S sid="131" ssid="62">We see there that, for example, sentences for which the grammar model has the superior perplexity have average recall 5.9 (= 84.9&#8212;79.0) percentage points higher than the sentences for which the trigram model performed better.</S>
    <S sid="132" ssid="63">The gap for precision is 5.6.</S>
    <S sid="133" ssid="64">This seems to support our hypothesis.</S>
  </SECTION>
  <SECTION title="5 Conclusion and Future Work" number="5">
    <S sid="134" ssid="1">We have presented two grammar-based language models, both of which significantly improve upon both the trigram model baseline for the task (by 24% for the better of the two) and the best previous grammar-based language model (by 14%).</S>
    <S sid="135" ssid="2">Furthermore we have suggested that improvement of the underlying parser should improve the model&#8217;s perplexity still further.</S>
    <S sid="136" ssid="3">We should note, however, that if we were dealing with standard Penn Tree-bank Wall-StreetJournal text, asking for better parsers would be easier said than done.</S>
    <S sid="137" ssid="4">While there is still some progress, it is our opinion that substantial improvement in the state-of-the-art precision/recall figures (around 90%) is unlikely in the near future.3 However, we are not dealing with standard tree-bank text.</S>
    <S sid="138" ssid="5">As pointed out above, the text in question has been &#8220;speechified&#8221; by removing punctuation and capitalization, and &#8220;simplified&#8221; by allowing only a fixed vocabulary of 10,000 words (replacing all the rest by the symbol &#8220;UNK&#8221;), and replacing all digits and symbols by the symbol &#8220;N&#8221;.</S>
    <S sid="139" ssid="6">We believe that the resulting text grossly underrepresents the useful grammatical information available to speech-recognition systems.</S>
    <S sid="140" ssid="7">First, we believe that information about rare or even truly unknown words would be useful.</S>
    <S sid="141" ssid="8">For example, when run on standard text, the parser uses ending information to guess parts of speech [3].</S>
    <S sid="142" ssid="9">Even if we had never encountered the word &#8220;showboating&#8221;, the &#8220;ing&#8221; ending tells us that this is almost certainly a progressive verb.</S>
    <S sid="143" ssid="10">It is much harder to determine this about UNK.4 Secondly, while punctuation is not to be found in speech, prosody should give us something like equivalent information, perhaps even better.</S>
    <S sid="144" ssid="11">Thus significantly better parser performance on speechderived data seems possible, suggesting that highperformance trigram-less language models may be within reach.</S>
    <S sid="145" ssid="12">We believe that the adaptation of prosodic information to parsing use is a worthy topic for future research.</S>
    <S sid="146" ssid="13">Finally, we have noted two objections to immediate-head language models: first, they complicate left-to-right search (since heads are often to the right of their children) and second, they cannot be tightly integrated with trigram models.</S>
    <S sid="147" ssid="14">The possibility of trigram-less language models makes the second of these objections without force.</S>
    <S sid="148" ssid="15">Nor do we believe the first to be a permanent disability.</S>
    <S sid="149" ssid="16">If one is willing to provide sub-optimal probability estimates as one proceeds left-to-right and then amend them upon seeing the true head, left-to-right processing and immediatehead parsing might be joined.</S>
    <S sid="150" ssid="17">Note that one of the cases where this might be worrisome, early words in a base noun-phrase could be conditioned upon a head which comes several words later, has been made significantly less problematic by our revised definition of heads inside noun-phrases.</S>
    <S sid="151" ssid="18">We believe that other such situations can be brought into line as well, thus again taming the search problem.</S>
    <S sid="152" ssid="19">However, this too is a topic for future research.</S>
  </SECTION>
</PAPER>
