<PAPER>
  <S sid="0">A Probability Model To Improve Word Alignment</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Word alignment plays a crucial role in statistical machine translation.</S>
    <S sid="2" ssid="2">Word-aligned corpora have been found to be an excellent source of translation-related knowledge.</S>
    <S sid="3" ssid="3">We present a statistical model for computing the probability of an alignment given a sentence pair.</S>
    <S sid="4" ssid="4">This model allows easy integration of context-specific features.</S>
    <S sid="5" ssid="5">Our experiments show that this model can be an effective tool for improving an existing word alignment.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">Word alignments were first introduced as an intermediate result of statistical machine translation systems (Brown et al., 1993).</S>
    <S sid="7" ssid="2">Since their introduction, many researchers have become interested in word alignments as a knowledge source.</S>
    <S sid="8" ssid="3">For example, alignments can be used to learn translation lexicons (Melamed, 1996), transfer rules (Carbonell et al., 2002; Menezes and Richardson, 2001), and classifiers to find safe sentence segmentation points (Berger et al., 1996).</S>
    <S sid="9" ssid="4">In addition to the IBM models, researchers have proposed a number of alternative alignment methods.</S>
    <S sid="10" ssid="5">These methods often involve using a statistic such as &#966;2 (Gale and Church, 1991) or the log likelihood ratio (Dunning, 1993) to create a score to measure the strength of correlation between source and target words.</S>
    <S sid="11" ssid="6">Such measures can then be used to guide a constrained search to produce word alignments (Melamed, 2000).</S>
    <S sid="12" ssid="7">It has been shown that once a baseline alignment has been created, one can improve results by using a refined scoring metric that is based on the alignment.</S>
    <S sid="13" ssid="8">For example Melamed uses competitive linking along with an explicit noise model in (Melamed, 2000) to produce a new scoring metric, which in turn creates better alignments.</S>
    <S sid="14" ssid="9">In this paper, we present a simple, flexible, statistical model that is designed to capture the information present in a baseline alignment.</S>
    <S sid="15" ssid="10">This model allows us to compute the probability of an alignment for a given sentence pair.</S>
    <S sid="16" ssid="11">It also allows for the easy incorporation of context-specific knowledge into alignment probabilities.</S>
    <S sid="17" ssid="12">A critical reader may pose the question, &#8220;Why invent a new statistical model for this purpose, when existing, proven models are available to train on a given word alignment?&#8221; We will demonstrate experimentally that, for the purposes of refinement, our model achieves better results than a comparable existing alternative.</S>
    <S sid="18" ssid="13">We will first present this model in its most general form.</S>
    <S sid="19" ssid="14">Next, we describe an alignment algorithm that integrates this model with linguistic constraints in order to produce high quality word alignments.</S>
    <S sid="20" ssid="15">We will follow with our experimental results and discussion.</S>
    <S sid="21" ssid="16">We will close with a look at how our work relates to other similar systems and a discussion of possible future directions.</S>
  </SECTION>
  <SECTION title="2 Probability Model" number="2">
    <S sid="22" ssid="1">In this section we describe our probability model.</S>
    <S sid="23" ssid="2">To do so, we will first introduce some necessary notation.</S>
    <S sid="24" ssid="3">Let E be an English sentence e1, e2, ... , em and let F be a French sentence f1, f2,.</S>
    <S sid="25" ssid="4">.</S>
    <S sid="26" ssid="5">.</S>
    <S sid="27" ssid="6">, fn.</S>
    <S sid="28" ssid="7">We define a link l(ei, fj) to exist if ei and fj are a translation (or part of a translation) of one another.</S>
    <S sid="29" ssid="8">We define the null link l(ei, f0) to exist if ei does not correspond to a translation for any French word in F. The null link l(e0, fj) is defined similarly.</S>
    <S sid="30" ssid="9">An alignment A for two sentences E and F is a set of links such that every word in E and F participates in at least one link, and a word linked to e0 or f0 participates in no other links.</S>
    <S sid="31" ssid="10">If e occurs in E x times and f occurs in F y times, we say that e and f co-occur xy times in this sentence pair.</S>
    <S sid="32" ssid="11">We define the alignment problem as finding the alignment A that maximizes P(A|E, F).</S>
    <S sid="33" ssid="12">This corresponds to finding the Viterbi alignment in the IBM translation systems.</S>
    <S sid="34" ssid="13">Those systems model P(F, A|E), which when maximized is equivalent to maximizing P(A|E, F).</S>
    <S sid="35" ssid="14">We propose here a system which models P(A|E, F) directly, using a different decomposition of terms.</S>
    <S sid="36" ssid="15">In the IBM models of translation, alignments exist as artifacts of which English words generated which French words.</S>
    <S sid="37" ssid="16">Our model does not state that one sentence generates the other.</S>
    <S sid="38" ssid="17">Instead it takes both sentences as given, and uses the sentences to determine an alignment.</S>
    <S sid="39" ssid="18">An alignment A consists of t links {l1, l2, ... , lt}, where each lk = l(eik, fjk) for some ik and jk.</S>
    <S sid="40" ssid="19">We will refer to consecutive subsets of A as lji = {li, li+1, ... , lj}.</S>
    <S sid="41" ssid="20">Given this notation, P(A|E, F) can be decomposed as follows: Here P(lk|eik, fjk) is link probability given a cooccurrence of the two words, which is similar in spirit to Melamed&#8217;s explicit noise model (Melamed, 2000).</S>
    <S sid="42" ssid="21">This term depends only on the words inmodifies the link probability, providing contextsensitive information.</S>
    <S sid="43" ssid="22">Up until this point, we have made no simplifying assumptions in our derivation.</S>
    <S sid="44" ssid="23">Unfortunately, Ck = {E, F, lk&#8722;1 1 } is too complex to estimate context probabilities directly.</S>
    <S sid="45" ssid="24">Suppose FTk is a set of context-related features such that P(lk|Ck) can be approximated by P(lk|eik, fjk, FTk).</S>
    <S sid="46" ssid="25">Let C0k = {eik, fjk}&#8746;FTk.</S>
    <S sid="47" ssid="26">P(lk|C0k) can then be decomposed using the same derivation as above.</S>
    <S sid="48" ssid="27">In the second line of this derivation, we can drop eik and fjk from C0k, leaving only FTk, because they are implied by the events which the probabilities are conditionalized on.</S>
    <S sid="49" ssid="28">Now, we are left with the task of approximating P (FTk|lk) and P(FTk|eik,fjk).</S>
    <S sid="50" ssid="29">To do so, we will assume that for all ft &#8712; FTk, ft is conditionally independent given either lk or (eik, fjk).</S>
    <S sid="51" ssid="30">This allows us to approximate alignment probability P(A|E, F) as follows: represent the context of lk.</S>
    <S sid="52" ssid="31">Note that both the context Ck and the link lk imply the occurrence of eik and fjk.</S>
    <S sid="53" ssid="32">We can rewrite P (lk|Ck) as: In any context, only a few features will be active.</S>
    <S sid="54" ssid="33">The inner product is understood to be only over those features ft that are present in the current context.</S>
    <S sid="55" ssid="34">This approximation will cause P(A|E, F) to no longer be awell-behaved probability distribution, though as in Naive Bayes, it can be an excellent estimator for the purpose of ranking alignments.</S>
    <S sid="56" ssid="35">If we have an aligned training corpus, the probabilities needed for the above equation are quite easy to obtain.</S>
    <S sid="57" ssid="36">Link probabilities can be determined directly from |lk |(link counts) and |eik, fj,k| (co-occurrence counts).</S>
    <S sid="58" ssid="37">For any co-occurring pair of words (eik, fjk), we check whether it has the feature ft.</S>
    <S sid="59" ssid="38">If it does, we increment the count of |ft, eik, fjk|.</S>
    <S sid="60" ssid="39">If this pair is also linked, then we increment the count of |ft, lk|.</S>
    <S sid="61" ssid="40">Note that our definition of FTk allows for features that depend on previous links.</S>
    <S sid="62" ssid="41">For this reason, when determining whether or not a feature is present in a given context, one must impose an ordering on the links.</S>
    <S sid="63" ssid="42">This ordering can be arbitrary as long as the same ordering is used in training1 and probability evaluation.</S>
    <S sid="64" ssid="43">A simple solution would be to order links according their French words.</S>
    <S sid="65" ssid="44">We choose to order links according to the link probability P(lk|eik, fjk) as it has an intuitive appeal of allowing more certain links to provide context for others.</S>
    <S sid="66" ssid="45">We store probabilities in two tables.</S>
    <S sid="67" ssid="46">The first table stores link probabilities P(lk|eik, fjk).</S>
    <S sid="68" ssid="47">It has an entry for every word pair that was linked at least once in the training corpus.</S>
    <S sid="69" ssid="48">Its size is the same as the translation table in the IBM models.</S>
    <S sid="70" ssid="49">The second table stores feature probabilities, P(ft|lk) and P(ft|eik, fjk).</S>
    <S sid="71" ssid="50">For every linked word pair, this table has two entries for each active feature.</S>
    <S sid="72" ssid="51">In the worst case this table will be of size 2x|FT |x|E|x|F|.</S>
    <S sid="73" ssid="52">In practice, it is much smaller as most contexts activate only a small number of features.</S>
    <S sid="74" ssid="53">In the next subsection we will walk through a simple example of this probability model in action.</S>
    <S sid="75" ssid="54">We will describe the features used in our implementation of this model in Section 3.2.</S>
    <S sid="76" ssid="55">Figure 1 shows an aligned corpus consisting of one sentence pair.</S>
    <S sid="77" ssid="56">Suppose that we are concerned with only one feature ft that is active2 for eik and fjk if an adjacent pair is an alignment, i.e., This example would produce the probability tables shown in Table 1.</S>
    <S sid="78" ssid="57">Note how ft is active for the (a, v) link, and is not active for the (b, u) link.</S>
    <S sid="79" ssid="58">This is due to our selected ordering.</S>
    <S sid="80" ssid="59">Table 1 allows us to calculate the probability of this alignment as:</S>
  </SECTION>
  <SECTION title="3 Word-Alignment Algorithm" number="3">
    <S sid="81" ssid="1">In this section, we describe a world-alignment algorithm guided by the alignment probability model derived above.</S>
    <S sid="82" ssid="2">In designing this algorithm we have selected constraints, features and a search method in order to achieve high performance.</S>
    <S sid="83" ssid="3">The model, however, is general, and could be used with any instantiation of the above three factors.</S>
    <S sid="84" ssid="4">This section will describe and motivate the selection of our constraints, features and search method.</S>
    <S sid="85" ssid="5">The input to our word-alignment algorithm consists of a pair of sentences E and F, and the dependency tree TE for E. TE allows us to make use of features and constraints that are based on linguistic intuitions.</S>
    <S sid="86" ssid="6">The reader will note that our alignment model as described above has very few factors to prevent undesirable alignments, such as having all French words align to the same English word.</S>
    <S sid="87" ssid="7">To guide the model to correct alignments, we employ two constraints to limit our search for the most probable alignment.</S>
    <S sid="88" ssid="8">The first constraint is the one-to-one constraint (Melamed, 2000): every word (except the null words eo and fo) participates in exactly one link.</S>
    <S sid="89" ssid="9">The second constraint, known as the cohesion constraint (Fox, 2002), uses the dependency tree (Mel&#8217;&#711;cuk, 1987) of the English sentence to restrict possible link combinations.</S>
    <S sid="90" ssid="10">Given the dependency tree TE, the alignment can induce a dependency tree for F (Hwa et al., 2002).</S>
    <S sid="91" ssid="11">The cohesion constraint requires that this induced dependency tree does not have any crossing dependencies.</S>
    <S sid="92" ssid="12">The details about how the cohesion constraint is implemented are outside the scope of this paper.3 Here we will use a simple example to illustrate the effect of the constraint.</S>
    <S sid="93" ssid="13">Consider the partial alignment in Figure 2.</S>
    <S sid="94" ssid="14">When the system attempts to link of and de, the new link will induce the dotted dependency, which crosses a previously induced dependency between service and donn&#180;ees.</S>
    <S sid="95" ssid="15">Therefore, of and de will not be linked. the status of the data service&#10065; l' &#233;tat du service de donn&#233;es&#10065; In this section we introduce two types of features that we use in our implementation of the probability model described in Section 2.</S>
    <S sid="96" ssid="16">The first feature type fta concerns surrounding links.</S>
    <S sid="97" ssid="17">It has been observed that words close to each other in the source language tend to remain close to each other in the translation (Vogel et al., 1996; Ker and Change, 1997).</S>
    <S sid="98" ssid="18">To capture this notion, for any word pair (ei, fj), if a link l(ei,, fj,) exists where i &#8722; 2 &#8804; i' &#8804; i + 2 and j &#8722; 2 &#8804; j' &#8804; j + 2, then we say that the feature fta(i&#8722;i', j&#8722;j', ei,) is active for this context.</S>
    <S sid="99" ssid="19">We refer to these as adjacency features.</S>
    <S sid="100" ssid="20">The second feature type ftd uses the English parse tree to capture regularities among grammatical relations between languages.</S>
    <S sid="101" ssid="21">For example, when dealing with French and English, the location of the determiner with respect to its governor4 is never swapped during translation, while the location of adjectives is swapped frequently.</S>
    <S sid="102" ssid="22">For any word pair (ei, fj), let ei, be the governor of ei, and let rel be the relationship between them.</S>
    <S sid="103" ssid="23">If a link l(ei,, fj,) exists, then we say that the feature ftd(j &#8722;j', rel) is active for this context.</S>
    <S sid="104" ssid="24">We refer to these as dependency features.</S>
    <S sid="105" ssid="25">Take for example Figure 3 which shows a partial alignment with all links completed except for those involving &#8216;the&#8217;.</S>
    <S sid="106" ssid="26">Given this sentence pair and English parse tree, we can extract features of both types to assist in the alignment of thea.</S>
    <S sid="107" ssid="27">The word pair (thea, l') will have an active adjacency feature fta(+1, +1, host) as well as a dependency feature ftd(&#8722;1, det).</S>
    <S sid="108" ssid="28">These two features will work together to increase the probability of this correct link.</S>
    <S sid="109" ssid="29">In contrast, the incorrect link (thea, les) will have only ftd(+3, det), which will work to lower the link probability, since most determiners are located beDue to our use of constraints, when seeking the highest probability alignment, we cannot rely on a method such as dynamic programming to (implicitly) search the entire alignment space.</S>
    <S sid="110" ssid="30">Instead, we use a best-first search algorithm (with constant beam and agenda size) to search our constrained space of possible alignments.</S>
    <S sid="111" ssid="31">A state in this space is a partial alignment.</S>
    <S sid="112" ssid="32">A transition is defined as the addition of a single link to the current state.</S>
    <S sid="113" ssid="33">Any link which would create a state that does not violate any constraint is considered to be a valid transition.</S>
    <S sid="114" ssid="34">Our start state is the empty alignment, where all words in E and F are linked to null.</S>
    <S sid="115" ssid="35">A terminal state is a state in which no more links can be added without violating a constraint.</S>
    <S sid="116" ssid="36">Our goal is to find the terminal state with highest probability.</S>
    <S sid="117" ssid="37">For the purposes of our best-first search, nonterminal states are evaluated according to a greedy completion of the partial alignment.</S>
    <S sid="118" ssid="38">We build this completion by adding valid links in the order of their unmodified link probabilities P(lje, f) until no more links can be added.</S>
    <S sid="119" ssid="39">The score the state receives is the probability of its greedy completion.</S>
    <S sid="120" ssid="40">These completions are saved for later use (see Section 4.2).</S>
  </SECTION>
  <SECTION title="4 Training" number="4">
    <S sid="121" ssid="1">As was stated in Section 2, our probability model needs an initial alignment in order to create its probability tables.</S>
    <S sid="122" ssid="2">Furthermore, to avoid having our model learn mistakes and noise, it helps to train on a set of possible alignments for each sentence, rather than one Viterbi alignment.</S>
    <S sid="123" ssid="3">In the following subsections we describe the creation of the initial alignments used for our experiments, as well as our sampling method used in training.</S>
    <S sid="124" ssid="4">We produce an initial alignment using the same algorithm described in Section 3, except we maximize summed 02 link scores (Gale and Church, 1991), rather than alignment probability.</S>
    <S sid="125" ssid="5">This produces a reasonable one-to-one word alignment that we can refine using our probability model.</S>
    <S sid="126" ssid="6">Our use of the one-to-one constraint and the cohesion constraint precludes sampling directly from all possible alignments.</S>
    <S sid="127" ssid="7">These constraints tie words in such a way that the space of alignments cannot be enumerated as in IBM models 1 and 2 (Brown et al., 1993).</S>
    <S sid="128" ssid="8">Taking our lead from IBM models 3, 4 and 5, we will sample from the space of those highprobability alignments that do not violate our constraints, and then redistribute our probability mass among our sample.</S>
    <S sid="129" ssid="9">At each search state in our alignment algorithm, we consider a number of potential links, and select between them using a heuristic completion of the resulting state.</S>
    <S sid="130" ssid="10">Our sample S of possible alignments will be the most probable alignment, plus the greedy completions of the states visited during search.</S>
    <S sid="131" ssid="11">It is important to note that any sampling method that concentrates on complete, valid and high probability alignments will accomplish the same task.</S>
    <S sid="132" ssid="12">When collecting the statistics needed to calculate P(AjE, F) from our initial 02 alignment, we give each s E S a uniform weight.</S>
    <S sid="133" ssid="13">This is reasonable, as we have no probability estimates at this point.</S>
    <S sid="134" ssid="14">When training from the alignments produced by our model, we normalize P(sjE, F) so that &amp;&#8712;S P(sjE, F) = 1.</S>
    <S sid="135" ssid="15">We then count links and features in S according to these normalized probabilities.</S>
  </SECTION>
  <SECTION title="5 Experimental Results" number="5">
    <S sid="136" ssid="1">We adopted the same evaluation methodology as in (Och and Ney, 2000), which compared alignment outputs with manually aligned sentences.</S>
    <S sid="137" ssid="2">Och and Ney classify manual alignments into two categories: Sure (S) and Possible (P) (SCP).</S>
    <S sid="138" ssid="3">They defined the following metrics to evaluate an alignment A: We trained our alignment program with the same 50K pairs of sentences as (Och and Ney, 2000) and tested it on the same 500 manually aligned sentences.</S>
    <S sid="139" ssid="4">Both the training and testing sentences are from the Hansard corpus.</S>
    <S sid="140" ssid="5">We parsed the training |A&#8745;S| |S| and testing corpora with Minipar.5 We then ran the training procedure in Section 4 for three iterations.</S>
    <S sid="141" ssid="6">We conducted three experiments using this methodology.</S>
    <S sid="142" ssid="7">The goal of the first experiment is to compare the algorithm in Section 3 to a state-of-theart alignment system.</S>
    <S sid="143" ssid="8">The second will determine the contributions of the features.</S>
    <S sid="144" ssid="9">The third experiment aims to keep all factors constant except for the model, in an attempt to determine its performance when compared to an obvious alternative.</S>
    <S sid="145" ssid="10">Table 2 compares the results of our algorithm with the results in (Och and Ney, 2000), where an HMM model is used to bootstrap IBM Model 4.</S>
    <S sid="146" ssid="11">The rows IBM-4 F&#8594;E and IBM-4 E&#8594;F are the results obtained by IBM Model 4 when treating French as the source and English as the target or vice versa.</S>
    <S sid="147" ssid="12">The row IBM-4 Intersect shows the results obtained by taking the intersection of the alignments produced by IBM-4 E&#8594;F and IBM-4 F&#8594;E.</S>
    <S sid="148" ssid="13">The row IBM-4 Refined shows results obtained by refining the intersection of alignments in order to increase recall.</S>
    <S sid="149" ssid="14">Our algorithm achieved over 44% relative error reduction when compared with IBM-4 used in either direction and a 25% relative error rate reduction when compared with IBM-4 Refined.</S>
    <S sid="150" ssid="15">It also achieved a slight relative error reduction when compared with IBM-4 Intersect.</S>
    <S sid="151" ssid="16">This demonstrates that we are competitive with the methods described in (Och and Ney, 2000).</S>
    <S sid="152" ssid="17">In Table 2, one can see that our algorithm is high precision, low recall.</S>
    <S sid="153" ssid="18">This was expected as our algorithm uses the one-to-one constraint, which rules out many of the possible alignments present in the evaluation data.</S>
    <S sid="154" ssid="19">Table 3 shows the contributions of features to our algorithm&#8217;s performance.</S>
    <S sid="155" ssid="20">The initial (02) row is the score for the algorithm (described in Section 4.1) that generates our initial alignment.</S>
    <S sid="156" ssid="21">The withoutfeatures row shows the score after 3 iterations of refinement with an empty feature set.</S>
    <S sid="157" ssid="22">Here we can see that our model in its simplest form is capable of producing a significant improvement in alignment quality.</S>
    <S sid="158" ssid="23">The rows with ftd only and with fta only describe the scores after 3 iterations of training using only dependency and adjacency features respectively.</S>
    <S sid="159" ssid="24">The two features provide significant contributions, with the adjacency feature being slightly more important.</S>
    <S sid="160" ssid="25">The final row shows that both features can work together to create a greater improvement, despite the independence assumptions made in Section 2.</S>
    <S sid="161" ssid="26">Even though we have compared our algorithm to alignments created using IBM statistical models, it is not clear if our model is essential to our performance.</S>
    <S sid="162" ssid="27">This experiment aims to determine if we could have achieved similar results using the same initial alignment and search algorithm with an alternative model.</S>
    <S sid="163" ssid="28">Without using any features, our model is similar to IBM&#8217;s Model 1, in that they both take into account only the word types that participate in a given link.</S>
    <S sid="164" ssid="29">IBM Model 1 uses P(f|e), the probability of f being generated by e, while our model uses P(l|e, f), the probability of a link existing between e and f. In this experiment, we set Model 1 translation probabilities according to our initial 02 alignment, sampling as we described in Section 4.2.</S>
    <S sid="165" ssid="30">We then use the M=1 P(fj|eaj) to evaluate candidate alignments in a search that is otherwise identical to our algorithm.</S>
    <S sid="166" ssid="31">We ran Model 1 refinement for three iterations and recorded the best results that it achieved.</S>
    <S sid="167" ssid="32">It is clear from Table 4 that refining our initial 02 alignment using IBM&#8217;s Model 1 is less effective than using our model in the same manner.</S>
    <S sid="168" ssid="33">In fact, the Model 1 refinement receives a lower score than our initial alignment.</S>
  </SECTION>
  <SECTION title="6 Related Work" number="6">
    <S sid="169" ssid="1">When viewed with no features, our probability model is most similar to the explicit noise model defined in (Melamed, 2000).</S>
    <S sid="170" ssid="2">In fact, Melamed defines a probability distribution P(links(u, v)|cooc(u, v), A+, A&#8722;) which appears to make our work redundant.</S>
    <S sid="171" ssid="3">However, this distribution refers to the probability that two word types u and v are linked links(u, v) times in the entire corpus.</S>
    <S sid="172" ssid="4">Our distribution P(l|e, f) refers to the probability of linking a specific co-occurrence of the word tokens e and f. In Melamed&#8217;s work, these probabilities are used to compute a score based on a probability ratio.</S>
    <S sid="173" ssid="5">In our work, we use the probabilities directly.</S>
    <S sid="174" ssid="6">By far the most prominent probability models in machine translation are the IBM models and their extensions.</S>
    <S sid="175" ssid="7">When trying to determine whether two words are aligned, the IBM models ask, &#8220;What is the probability that this English word generated this French word?&#8221; Our model asks instead, &#8220;If we are given this English word and this French word, what is the probability that they are linked?&#8221; The distinction is subtle, yet important, introducing many differences.</S>
    <S sid="176" ssid="8">For example, in our model, E and F are symmetrical.</S>
    <S sid="177" ssid="9">Furthermore, we model P(l|e, f') and P (l|e, f'') as unrelated values, whereas the IBM model would associate them in the translation probabilities t(f'|e) and t(f''|e) through the constraint E f t(f|e) = 1.</S>
    <S sid="178" ssid="10">Unfortunately, by conditionalizing on both words, we eliminate a large inductive bias.</S>
    <S sid="179" ssid="11">This prevents us from starting with uniform probabilities and estimating parameters with EM.</S>
    <S sid="180" ssid="12">This is why we must supply the model with a noisy initial alignment, while IBM can start from an unaligned corpus.</S>
    <S sid="181" ssid="13">In the IBM framework, when one needs the model to take new information into account, one must create an extended model which can base its parameters on the previous model.</S>
    <S sid="182" ssid="14">In our model, new information can be incorporated modularly by adding features.</S>
    <S sid="183" ssid="15">This makes our work similar to maximum entropy-based machine translation methods, which also employ modular features.</S>
    <S sid="184" ssid="16">Maximum entropy can be used to improve IBM-style translation probabilities by using features, such as improvements to P(f|e) in (Berger et al., 1996).</S>
    <S sid="185" ssid="17">By the same token we can use maximum entropy to improve our estimates of P(lk|eik, fjk, Ck).</S>
    <S sid="186" ssid="18">We are currently investigating maximum entropy as an alternative to our current feature model which assumes conditional independence among features.</S>
    <S sid="187" ssid="19">There have been many recent proposals to leverage syntactic data in word alignment.</S>
    <S sid="188" ssid="20">Methods such as (Wu, 1997), (Alshawi et al., 2000) and (Lopez et al., 2002) employ a synchronous parsing procedure to constrain a statistical alignment.</S>
    <S sid="189" ssid="21">The work done in (Yamada and Knight, 2001) measures statistics on operations that transform a parse tree from one language into another.</S>
  </SECTION>
  <SECTION title="7 Future Work" number="7">
    <S sid="190" ssid="1">The alignment algorithm described here is incapable of creating alignments that are not one-to-one.</S>
    <S sid="191" ssid="2">The model we describe, however is not limited in the same manner.</S>
    <S sid="192" ssid="3">The model is currently capable of creating many-to-one alignments so long as the null probabilities of the words added on the &#8220;many&#8221; side are less than the probabilities of the links that would be created.</S>
    <S sid="193" ssid="4">Under the current implementation, the training corpus is one-to-one, which gives our model no opportunity to learn many-to-one alignments.</S>
    <S sid="194" ssid="5">We are pursuing methods to create an extended algorithm that can handle many-to-one alignments.</S>
    <S sid="195" ssid="6">This would involve training from an initial alignment that allows for many-to-one links, such as one of the IBM models.</S>
    <S sid="196" ssid="7">Features that are related to multiple links should be added to our set of feature types, to guide intelligent placement of such links.</S>
    <S sid="197" ssid="8">Adam Lopez, Michael Nossal, Rebecca Hwa, and Philip Resnik.</S>
    <S sid="198" ssid="9">2002.</S>
    <S sid="199" ssid="10">Word-level alignment for multilingual resource acquisition.</S>
    <S sid="200" ssid="11">In Proceedings of the Workshop on Linguistic Knowledge Acquisition and Representation: Bootstrapping Annotated Language Data.</S>
  </SECTION>
  <SECTION title="8 Conclusion" number="8">
    <S sid="201" ssid="1">We have presented a simple, flexible, statistical model for computing the probability of an alignment given a sentence pair.</S>
    <S sid="202" ssid="2">This model allows easy integration of context-specific features.</S>
    <S sid="203" ssid="3">Our experiments show that this model can be an effective tool for improving an existing word alignment.</S>
  </SECTION>
</PAPER>
