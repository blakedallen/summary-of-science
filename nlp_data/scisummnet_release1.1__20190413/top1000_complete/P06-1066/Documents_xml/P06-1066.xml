<PAPER>
  <S sid="0">Maximum Entropy Based Phrase Reordering Model For Statistical Machine Translation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We propose a novel reordering model for phrase-based statistical machine translation (SMT) that uses a maximum entropy (MaxEnt) model to predicate reorderings of neighbor blocks (phrase pairs).</S>
    <S sid="2" ssid="2">The model provides content-dependent, hierarchical phrasal reordering with generalization based on features automatically learned from a real-world bitext.</S>
    <S sid="3" ssid="3">We present an algorithm to extract all reordering events of neighbor blocks from bilingual data.</S>
    <S sid="4" ssid="4">In our experiments on Chineseto-English translation, this MaxEnt-based reordering model obtains significant improvements in BLEU score on the NIST MT-05 and IWSLT-04 tasks.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">Phrase reordering is of great importance for phrase-based SMT systems and becoming an active area of research recently.</S>
    <S sid="6" ssid="2">Compared with word-based SMT systems, phrase-based systems can easily address reorderings of words within phrases.</S>
    <S sid="7" ssid="3">However, at the phrase level, reordering is still a computationally expensive problem just like reordering at the word level (Knight, 1999).</S>
    <S sid="8" ssid="4">Many systems use very simple models to reorder phrases 1.</S>
    <S sid="9" ssid="5">One is distortion model (Och and Ney, 2004; Koehn et al., 2003) which penalizes translations according to their jump distance instead of their content.</S>
    <S sid="10" ssid="6">For example, if N words are skipped, a penalty of N will be paid regardless of which words are reordered.</S>
    <S sid="11" ssid="7">This model takes the risk of penalizing long distance jumps 1In this paper, we focus our discussions on phrases that are not necessarily aligned to syntactic constituent boundary. which are common between two languages with very different orders.</S>
    <S sid="12" ssid="8">Another simple model is flat reordering model (Wu, 1996; Zens et al., 2004; Kumar et al., 2005) which is not content dependent either.</S>
    <S sid="13" ssid="9">Flat model assigns constant probabilities for monotone order and non-monotone order.</S>
    <S sid="14" ssid="10">The two probabilities can be set to prefer monotone or non-monotone orientations depending on the language pairs.</S>
    <S sid="15" ssid="11">In view of content-independency of the distortion and flat reordering models, several researchers (Och et al., 2004; Tillmann, 2004; Kumar et al., 2005; Koehn et al., 2005) proposed a more powerful model called lexicalized reordering model that is phrase dependent.</S>
    <S sid="16" ssid="12">Lexicalized reordering model learns local orientations (monotone or non-monotone) with probabilities for each bilingual phrase from training data.</S>
    <S sid="17" ssid="13">During decoding, the model attempts to finding a Viterbi local orientation sequence.</S>
    <S sid="18" ssid="14">Performance gains have been reported for systems with lexicalized reordering model.</S>
    <S sid="19" ssid="15">However, since reorderings are related to concrete phrases, researchers have to design their systems carefully in order not to cause other problems, e.g. the data sparseness problem.</S>
    <S sid="20" ssid="16">Another smart reordering model was proposed by Chiang (2005).</S>
    <S sid="21" ssid="17">In his approach, phrases are reorganized into hierarchical ones by reducing subphrases to variables.</S>
    <S sid="22" ssid="18">This template-based scheme not only captures the reorderings of phrases, but also integrates some phrasal generalizations into the global model.</S>
    <S sid="23" ssid="19">In this paper, we propose a novel solution for phrasal reordering.</S>
    <S sid="24" ssid="20">Here, under the ITG constraint (Wu, 1997; Zens et al., 2004), we need to consider just two kinds of reorderings, straight and inverted between two consecutive blocks.</S>
    <S sid="25" ssid="21">Therefore reordering can be modelled as a problem of classification with only two labels, straight and inverted.</S>
    <S sid="26" ssid="22">In this paper, we build a maximum entropy based classification model as the reordering model.</S>
    <S sid="27" ssid="23">Different from lexicalized reordering, we do not use the whole block as reordering evidence, but only features extracted from blocks.</S>
    <S sid="28" ssid="24">This is more flexible.</S>
    <S sid="29" ssid="25">It makes our model reorder any blocks, observed in training or not.</S>
    <S sid="30" ssid="26">The whole maximum entropy based reordering model is embedded inside a log-linear phrase-based model of translation.</S>
    <S sid="31" ssid="27">Following the Bracketing Transduction Grammar (BTG) (Wu, 1996), we built a CKY-style decoder for our system, which makes it possible to reorder phrases hierarchically.</S>
    <S sid="32" ssid="28">To create a maximum entropy based reordering model, the first step is learning reordering examples from training data, similar to the lexicalized reordering model.</S>
    <S sid="33" ssid="29">But in our way, any evidences of reorderings will be extracted, not limited to reorderings of bilingual phrases of length less than a predefined number of words.</S>
    <S sid="34" ssid="30">Secondly, features will be extracted from reordering examples according to feature templates.</S>
    <S sid="35" ssid="31">Finally, a maximum entropy classifier will be trained on the features.</S>
    <S sid="36" ssid="32">In this paper we describe our system and the MaxEnt-based reordering model with the associated algorithm.</S>
    <S sid="37" ssid="33">We also present experiments that indicate that the MaxEnt-based reordering model improves translation significantly compared with other reordering approaches and a state-of-the-art distortion-based system (Koehn, 2004).</S>
  </SECTION>
  <SECTION title="2 System Overview" number="2">
    <S sid="38" ssid="1">Under the BTG scheme, translation is more like monolingual parsing through derivations.</S>
    <S sid="39" ssid="2">Throughout the translation procedure, three rules are used to derive the translation During decoding, the source sentence is segmented into a sequence of phrases as in a standard phrase-based model.</S>
    <S sid="40" ssid="3">Then the lexical rule (3) 2 is 2Currently, we restrict phrases x and y not to be null.</S>
    <S sid="41" ssid="4">Therefore neither deletion nor insertion is carried out during decoding.</S>
    <S sid="42" ssid="5">However, these operations are to be considered in our future version of model. used to translate source phrase y into target phrase x and generate a block A.</S>
    <S sid="43" ssid="6">Later, the straight rule (1) merges two consecutive blocks into a single larger block in the straight order; while the inverted rule (2) merges them in the inverted order.</S>
    <S sid="44" ssid="7">These two merging rules will be used continuously until the whole source sentence is covered.</S>
    <S sid="45" ssid="8">When the translation is finished, a tree indicating the hierarchical segmentation of the source sentence is also produced.</S>
    <S sid="46" ssid="9">In the following, we will define the model in a straight way, not in the dynamic programming recursion way used by (Wu, 1996; Zens et al., 2004).</S>
    <S sid="47" ssid="10">We focus on defining the probabilities of different rules by separating different features (including the language model) out from the rule probabilities and organizing them in a log-linear form.</S>
    <S sid="48" ssid="11">This straight way makes it clear how rules are used and what they depend on.</S>
    <S sid="49" ssid="12">For the two merging rules straight and inverted, applying them on two consecutive blocks A1 and where the Q is the reordering score of block A1 and A2, an is its weight, and 4pLM(A1,A2) is the increment of the language model score of the two blocks according to their final order, ALM is its weight.</S>
    <S sid="50" ssid="13">For the lexical rule, applying it is assigned a where p(&#183;) are the phrase translation probabilities in both directions, plex(&#183;) are the lexical translation probabilities in both directions, and exp(1) and exp(|x|) are the phrase penalty and word penalty, respectively.</S>
    <S sid="51" ssid="14">These features are very common in state-of-the-art systems (Koehn et al., 2005; Chiang, 2005) and As are weights of features.</S>
    <S sid="52" ssid="15">For the reordering model Q, we define it on the two consecutive blocks A1 and A2 and their order Under this framework, different reordering models can be designed.</S>
    <S sid="53" ssid="16">In fact, we defined four reordering models in our experiments.</S>
    <S sid="54" ssid="17">The first one is NONE, meaning no explicit reordering features at all.</S>
    <S sid="55" ssid="18">We set n to 1 for all different pairs of blocks and their orders.</S>
    <S sid="56" ssid="19">So the phrasal reordering is totally dependent on the language model.</S>
    <S sid="57" ssid="20">This model is obviously different from the monotone search, which does not use the inverted rule at all.</S>
    <S sid="58" ssid="21">The second one is a distortion style reordering model, which is formulated as where |AZ |denotes the number of words on the source side of blocks.</S>
    <S sid="59" ssid="22">When an &lt; 0, this design will penalize those non-monotone translations.</S>
    <S sid="60" ssid="23">The third one is a flat reordering model, which assigns probabilities for the straight and inverted order.</S>
    <S sid="61" ssid="24">It is formulated as In our experiments on Chinese-English tasks, the probability for the straight order is set at pm = 0.95.</S>
    <S sid="62" ssid="25">This is because word order in Chinese and English is usually similar.</S>
    <S sid="63" ssid="26">The last one is the maximum entropy based reordering model proposed by us, which will be described in the next section.</S>
    <S sid="64" ssid="27">We define a derivation D as a sequence of applications of rules (1) &#8722; (3), and let c(D) and e(D) be the Chinese and English yields of D. The probability of a derivation D is where Pr(i) is the probability of the ith application of rules.</S>
    <S sid="65" ssid="28">Given an input sentence c, the final translation e* is derived from the best derivation D* We developed a CKY style decoder that employs a beam search algorithm, similar to the one by Chiang (2005).</S>
    <S sid="66" ssid="29">The decoder finds the best derivation that generates the input sentence and its translation.</S>
    <S sid="67" ssid="30">From the best derivation, the best English e* is produced.</S>
    <S sid="68" ssid="31">Given a source sentence c, firstly we initiate the chart with phrases from phrase translation table by applying the lexical rule.</S>
    <S sid="69" ssid="32">Then for each cell that spans from i to j on the source side, all possible derivations spanning from i to j are generated.</S>
    <S sid="70" ssid="33">Our algorithm guarantees that any sub-cells within (i, j) have been expanded before cell (i, j) is expanded.</S>
    <S sid="71" ssid="34">Therefore the way to generate derivations in cell (i, j) is to merge derivations from any two neighbor sub-cells.</S>
    <S sid="72" ssid="35">This combination is done by applying the straight and inverted rules.</S>
    <S sid="73" ssid="36">Each application of these two rules will generate a new derivation covering cell (i, j).</S>
    <S sid="74" ssid="37">The score of the new generated derivation is derived from the scores of its two sub-derivations, reordering model score and the increment of the language model score according to the Equation (4).</S>
    <S sid="75" ssid="38">When the whole input sentence is covered, the decoding is over.</S>
    <S sid="76" ssid="39">Pruning of the search space is very important for the decoder.</S>
    <S sid="77" ssid="40">We use three pruning ways.</S>
    <S sid="78" ssid="41">The first one is recombination.</S>
    <S sid="79" ssid="42">When two derivations in the same cell have the same w leftmost/rightmost words on the English yields, where w depends on the order of the language model, they will be recombined by discarding the derivation with lower score.</S>
    <S sid="80" ssid="43">The second one is the threshold pruning which discards derivations that have a score worse than a times the best score in the same cell.</S>
    <S sid="81" ssid="44">The last one is the histogram pruning which only keeps the top n best derivations for each cell.</S>
    <S sid="82" ssid="45">In all our experiments, we set n = 40, a = 0.5 to get a tradeoff between speed and performance in the development set.</S>
    <S sid="83" ssid="46">Another feature of our decoder is the k-best list generation.</S>
    <S sid="84" ssid="47">The k-best list is very important for the minimum error rate training (Och, 2003a) which is used for tuning the weights A for our model.</S>
    <S sid="85" ssid="48">We use a very lazy algorithm for the k-best list generation, which runs two phases similarly to the one by Huang et al. (2005).</S>
    <S sid="86" ssid="49">In the first phase, the decoder runs as usual except that it keeps some information of weaker derivations which are to be discarded during recombination.</S>
    <S sid="87" ssid="50">This will generate not only the first-best of final derivation but also a shared forest.</S>
    <S sid="88" ssid="51">In the second phase, the lazy algorithm runs recursively on the shared forest.</S>
    <S sid="89" ssid="52">It finds the second-best of the final derivation, which makes its children to find their secondbest, and children&#8217;s children&#8217;s second-best, until the leaf node&#8217;s second-best.</S>
    <S sid="90" ssid="53">Then it finds the thirdbest, forth-best, and so on.</S>
    <S sid="91" ssid="54">In all our experiments, we set k = 200.</S>
    <S sid="92" ssid="55">The decoder is implemented in C++.</S>
    <S sid="93" ssid="56">Using the pruning settings described above, without the kbest list generation, it takes about 6 seconds to translate a sentence of average length 28.3 words on a 2GHz Linux system with 4G RAM memory.</S>
  </SECTION>
  <SECTION title="3 Maximum Entropy Based Reordering Model" number="3">
    <S sid="94" ssid="1">In this section, we discuss how to create a maximum entropy based reordering model.</S>
    <S sid="95" ssid="2">As described above, we defined the reordering model Q on the three factors: order o, block A1 and block A2.</S>
    <S sid="96" ssid="3">The central problem is, given two neighbor blocks A1 and A2, how to predicate their order o &#8712; {straight, inverted}.</S>
    <S sid="97" ssid="4">This is a typical problem of two-class classification.</S>
    <S sid="98" ssid="5">To be consistent with the whole model, the conditional probability p(o|A1, A2) is calculated.</S>
    <S sid="99" ssid="6">A simple way to compute this probability is to take counts from the training data and then to use the maximum likelihood estimate (MLE) The similar way is used by lexicalized reordering model.</S>
    <S sid="100" ssid="7">However, in our model this way can&#8217;t work because blocks become larger and larger due to using the merging rules, and finally unseen in the training data.</S>
    <S sid="101" ssid="8">This means we can not use blocks as direct reordering evidences.</S>
    <S sid="102" ssid="9">A good way to this problem is to use features of blocks as reordering evidences.</S>
    <S sid="103" ssid="10">Good features can not only capture reorderings, avoid sparseness, but also integrate generalizations.</S>
    <S sid="104" ssid="11">It is very straight to use maximum entropy model to integrate features to predicate reorderings of blocks.</S>
    <S sid="105" ssid="12">Under the MaxEnt model, we have where the functions hi &#8712; {0, 1} are model features and the Bi are weights of the model features which can be trained by different algorithms (Malouf, 2002).</S>
    <S sid="106" ssid="13">The input for the algorithm is a bilingual corpus with high-precision word alignments.</S>
    <S sid="107" ssid="14">We obtain the word alignments using the way of Koehn et al. (2005).</S>
    <S sid="108" ssid="15">After running GIZA++ (Och and Ney, rows from the corners are their links.</S>
    <S sid="109" ssid="16">Corner c1 is shared by block b1 and b2, which in turn are linked by the STRAIGHT links, bottomleft and topright of c1.</S>
    <S sid="110" ssid="17">Similarly, block b3 and b4 are linked by the INVERTED links, topleft and bottomright of c2.</S>
    <S sid="111" ssid="18">2000) in both directions, we apply the &#8220;growdiag-final&#8221; refinement rule on the intersection alignments for each sentence pair.</S>
    <S sid="112" ssid="19">Before we introduce this algorithm, we introduce some formal definitions.</S>
    <S sid="113" ssid="20">The first one is block which is a pair of source and target contiguous sequences of words This definition is similar to that of bilingual phrase except that there is no length limitation over block.</S>
    <S sid="114" ssid="21">A reordering example is a triple of (o, b1, b2) where b1 and b2 are two neighbor blocks and o is the order between them.</S>
    <S sid="115" ssid="22">We define each vertex of block as corner.</S>
    <S sid="116" ssid="23">Each corner has four links in four directions: topright, topleft, bottomright, bottomleft, and each link links a set of blocks which have the corner as their vertex.</S>
    <S sid="117" ssid="24">The topright and bottomleft link blocks with the straight order, so we call them STRAIGHT links.</S>
    <S sid="118" ssid="25">Similarly, we call the topleft and bottomright INVERTED links since they link blocks with the inverted order.</S>
    <S sid="119" ssid="26">For convenience, we use b &#8592;&#65533; Z&#10003; to denote that block b is linked by the link Z.</S>
    <S sid="120" ssid="27">Note that the STRAIGHT links can not coexist with the INVERTED links.</S>
    <S sid="121" ssid="28">These definitions are illustrated in Figure 1.</S>
    <S sid="122" ssid="29">The reordering example extraction algorithm is shown in Figure 2.</S>
    <S sid="123" ssid="30">The basic idea behind this algorithm is to register all neighbor blocks to the associated links of corners which are shared by them.</S>
    <S sid="124" ssid="31">To do this, we keep an array to record link information of corners when extracting blocks.</S>
    <S sid="125" ssid="32">Line 4 and 5 are similar to the phrase extraction algorithm by Och (2003b).</S>
    <S sid="126" ssid="33">Different from Och, we just extend one word which is aligned to null on the boundary of target side.</S>
    <S sid="127" ssid="34">If we put some length limitation over the extracted blocks and output them, we get bilingual phrases used in standard phrase-based SMT systems and also in our system.</S>
    <S sid="128" ssid="35">Line 7 updates all links associated with the current block.</S>
    <S sid="129" ssid="36">You can attach the current block to each of these links.</S>
    <S sid="130" ssid="37">However this will increase reordering examples greatly, especially those with the straight order.</S>
    <S sid="131" ssid="38">In our Experiments, we just attach the smallest blocks to the STRAIGHT links, and the largest blocks to the INVERTED links.</S>
    <S sid="132" ssid="39">This will keep the number of reordering examples acceptable but without performance degradation.</S>
    <S sid="133" ssid="40">Line 12 and 14 extract reordering examples.</S>
    <S sid="134" ssid="41">With the extracted reordering examples, we can obtain features for our MaxEnt-based reordering model.</S>
    <S sid="135" ssid="42">We design two kinds of features, lexical features and collocation features.</S>
    <S sid="136" ssid="43">For a block b = (s, t), we use s1 to denote the first word of the source s, t1 to denote the first word of the target t. Lexical features are defined on the single word s1 or t1.</S>
    <S sid="137" ssid="44">Collocation features are defined on the combination s1 or t1 between two blocks b1 and b2.</S>
    <S sid="138" ssid="45">Three kinds of combinations are used.</S>
    <S sid="139" ssid="46">The first one is source collocation, b1.s1&amp;b2.s1.</S>
    <S sid="140" ssid="47">The second is target collocation, b1.t1&amp;b2.t1.</S>
    <S sid="141" ssid="48">The last one (',) l 0, otherwise plates.</S>
    <S sid="142" ssid="49">The first one is a lexical feature, and the second one is a target collocation feature, where Ei are English words, O E {straight, inverted}. is block collocation, b1.s1&amp;b1.t1 and b2.s1&amp;b2.t1.</S>
    <S sid="143" ssid="50">The templates for the lexical feature and the collocation feature are shown in Figure 3.</S>
    <S sid="144" ssid="51">Why do we use the first words as features?</S>
    <S sid="145" ssid="52">These words are nicely at the boundary of blocks.</S>
    <S sid="146" ssid="53">One of assumptions of phrase-based SMT is that phrase cohere across two languages (Fox, 2002), which means phrases in one language tend to be moved together during translation.</S>
    <S sid="147" ssid="54">This indicates that boundary words of blocks may keep information for their movements/reorderings.</S>
    <S sid="148" ssid="55">To test this hypothesis, we calculate the information gain ratio (IGR) for boundary words as well as the whole blocks against the order on the reordering examples extracted by the algorithm described above.</S>
    <S sid="149" ssid="56">The IGR is the measure used in the decision tree learning to select features (Quinlan, 1993).</S>
    <S sid="150" ssid="57">It represents how precisely the feature predicate the class.</S>
    <S sid="151" ssid="58">For feature f and class c, the IGR(f, c) where En(&#183;) is the entropy and En(&#183;|&#183;) is the conditional entropy.</S>
    <S sid="152" ssid="59">To our surprise, the IGR for the four boundary words (IGR((b1.s1, b2.s1, b1.t1, b2.t1), order) = 0.2637) is very close to that for the two blocks together (IGR((b1, b2), order) = 0.2655).</S>
    <S sid="153" ssid="60">Although our reordering examples do not cover all reordering events in the training data, this result shows that boundary words do provide some clues for predicating reorderings.</S>
  </SECTION>
  <SECTION title="4 Experiments" number="4">
    <S sid="154" ssid="1">We carried out experiments to compare against various reordering models and systems to demonstrate the competitiveness of MaxEnt-based reordering: Our experiments were made on two Chinese-toEnglish translation tasks: NIST MT-05 (news domain) and IWSLT-04 (travel dialogue domain).</S>
    <S sid="155" ssid="2">NIST MT-05.</S>
    <S sid="156" ssid="3">In this task, the bilingual training data comes from the FBIS corpus with 7.06M Chinese words and 9.15M English words.</S>
    <S sid="157" ssid="4">The trigram language model training data consists of English texts mostly derived from the English side of the UN corpus (catalog number LDC2004E12), which totally contains 81M English words.</S>
    <S sid="158" ssid="5">For the efficiency of minimum error rate training, we built our development set using sentences of length at most 50 characters from the NIST MT-02 evaluation test data.</S>
    <S sid="159" ssid="6">IWSLT-04.</S>
    <S sid="160" ssid="7">For this task, our experiments were carried out on the small data track.</S>
    <S sid="161" ssid="8">Both the bilingual training data and the trigram language model training data are restricted to the supplied corpus, which contains 20k sentences, 179k Chinese words and 157k English words.</S>
    <S sid="162" ssid="9">We used the CSTAR 2003 test set consisting of 506 sentence pairs as development set.</S>
    <S sid="163" ssid="10">We obtained high-precision word alignments using the way described in Section 3.1.</S>
    <S sid="164" ssid="11">Then we ran our reordering example extraction algorithm to output blocks of length at most 7 words on the Chinese side together with their internal alignments.</S>
    <S sid="165" ssid="12">We also limited the length ratio between the target and source language (max(|s|, |t|)/min(|s|, |t|)) to 3.</S>
    <S sid="166" ssid="13">After extracting phrases, we calculated the phrase translation probabilities and lexical translation probabilities in both directions for each bilingual phrase.</S>
    <S sid="167" ssid="14">For the minimum-error-rate training, we reimplemented Venugopal&#8217;s trainer 3 (Venugopal et al., 2005) in C++.</S>
    <S sid="168" ssid="15">For all experiments, we ran this trainer with the decoder iteratively to tune the weights As to maximize the BLEU score on the development set.</S>
    <S sid="169" ssid="16">We shared the same phrase translation tables between Pharaoh and our system since the two systems use the same features of phrases.</S>
    <S sid="170" ssid="17">In fact, we extracted more phrases than Pharaoh&#8217;s trainer with its default settings.</S>
    <S sid="171" ssid="18">And we also used our reimplemented trainer to tune lambdas of Pharaoh to maximize its BLEU score.</S>
    <S sid="172" ssid="19">During decoding, we pruned the phrase table with b = 100 (default 20), pruned the chart with n = 100, a = 10&#8722;5 (default setting), and limited distortions to 4 (default 0).</S>
    <S sid="173" ssid="20">We firstly ran our reordering example extraction algorithm on the bilingual training data without any length limitations to obtain reordering examples and then extracted features from these examples.</S>
    <S sid="174" ssid="21">In the task of NIST MT-05, we obtained about 2.7M reordering examples with the straight order, and 367K with the inverted order, from which 112K lexical features and 1.7M collocation features after deleting those with one occurrence were extracted.</S>
    <S sid="175" ssid="22">In the task of IWSLT-04, we obtained 79.5k reordering examples with the straight order, 9.3k with the inverted order, from which 16.9K lexical features and 89.6K collocation features after deleting those with one occurrence were extracted.</S>
    <S sid="176" ssid="23">Finally, we ran the MaxEnt toolkit by Zhang 4 to tune the feature weights.</S>
    <S sid="177" ssid="24">We set iteration number to 100 and Gaussian prior to 1 for avoiding overfitting.</S>
    <S sid="178" ssid="25">We dropped unknown words (Koehn et al., 2005) of translations for both tasks before evaluating their BLEU scores.</S>
    <S sid="179" ssid="26">To be consistent with the official evaluation criterions of both tasks, casesensitive BLEU-4 scores were computed For the NIST MT-05 task and case-insensitive BLEU-4 scores were computed for the IWSLT-04 task 5.</S>
    <S sid="180" ssid="27">Experimental results on both tasks are shown in Table 1.</S>
    <S sid="181" ssid="28">Italic numbers refer to results for which the difference to the best result (indicated in bold) is not statistically significant.</S>
    <S sid="182" ssid="29">For all scores, we also show the 95% confidence intervals computed using Zhang&#8217;s significant tester (Zhang et al., 2004) which was modified to conform to NIST&#8217;s definition of the BLEU brevity penalty.</S>
    <S sid="183" ssid="30">We observe that if phrasal reordering is totally dependent on the language model (NONE) we get the worst performance, even worse than the monotone search.</S>
    <S sid="184" ssid="31">This indicates that our language models were not strong to discriminate between straight orders and inverted orders.</S>
    <S sid="185" ssid="32">The flat and distortion reordering models (Row 3 and 4) show similar performance with Pharaoh.</S>
    <S sid="186" ssid="33">Although they are not dependent on phrases, they really reorder phrases with penalties to wrong orders supported by the language model and therefore outperform the monotone search.</S>
    <S sid="187" ssid="34">In row 6, only lexical features are used for the MaxEnt-based reordering model; while row 7 uses lexical features and collocation features.</S>
    <S sid="188" ssid="35">On both tasks, we observe that various reordering approaches show similar and stable performance ranks in different domains and the MaxEnt-based reordering models achieve the best performance among them.</S>
    <S sid="189" ssid="36">Using all features for the MaxEnt model (lex + col) is marginally better than using only lex features (lex).</S>
    <S sid="190" ssid="37">In the experiments described above, collocation features do not make great contributions to the performance improvement but make the total number of features increase greatly.</S>
    <S sid="191" ssid="38">This is a problem for MaxEnt parameter estimation if it is scaled to large bitexts.</S>
    <S sid="192" ssid="39">Therefore, for the integration of MaxEnt-based phrase reordering model in the system trained on large bitexts, we remove collocation features and only use lexical features from the last words of blocks (similar to those from the first words of blocks with similar performance).</S>
    <S sid="193" ssid="40">This time the bilingual training data contain 2.4M sentence pairs (68.1M Chinese words and 73.8M English words) and two trigram language models are used.</S>
    <S sid="194" ssid="41">One is trained on the English side of the bilingual training data.</S>
    <S sid="195" ssid="42">The other is trained on the Xinhua portion of the Gigaword corpus with 181.1M words.</S>
    <S sid="196" ssid="43">We also use some rules to translate numbers, time expressions and Chinese person names.</S>
    <S sid="197" ssid="44">The new Bleu score on NIST MT-05 is 0.291 which is very promising.</S>
  </SECTION>
  <SECTION title="5 Discussion and Future Work" number="5">
    <S sid="198" ssid="1">In this paper we presented a MaxEnt-based phrase reordering model for SMT.</S>
    <S sid="199" ssid="2">We used lexical features and collocation features from boundary words of blocks to predicate reorderings of neighdence intervals.</S>
    <S sid="200" ssid="3">Italic numbers refer to results for which the difference to the best result (indicated in bold) is not statistically significant. bor blocks.</S>
    <S sid="201" ssid="4">Experiments on standard ChineseEnglish translation tasks from two different domains showed that our method achieves a significant improvement over the distortion/flat reordering models.</S>
    <S sid="202" ssid="5">Traditional distortion/flat-based SMT translation systems are good for learning phrase translation pairs, but learn nothing for phrasal reorderings from real-world data.</S>
    <S sid="203" ssid="6">This is our original motivation for designing a new reordering model, which can learn reorderings from training data just like learning phrasal translations.</S>
    <S sid="204" ssid="7">Lexicalized reordering model learns reorderings from training data, but it binds reorderings to individual concrete phrases, which restricts the model to reorderings of phrases seen in training data.</S>
    <S sid="205" ssid="8">On the contrary, the MaxEnt-based reordering model is not limited by this constraint since it is based on features of phrase, not phrase itself.</S>
    <S sid="206" ssid="9">It can be easily generalized to reorder unseen phrases provided that some features are fired on these phrases.</S>
    <S sid="207" ssid="10">Another advantage of the MaxEnt-based reordering model is that it can take more features into reordering, even though they are nonindependent.</S>
    <S sid="208" ssid="11">Tillmann et. al (2005) also use a MaxEnt model to integrate various features.</S>
    <S sid="209" ssid="12">The difference is that they use the MaxEnt model to predict not only orders but also blocks.</S>
    <S sid="210" ssid="13">To do that, it is necessary for the MaxEnt model to incorporate real-valued features such as the block translation probability and the language model probability.</S>
    <S sid="211" ssid="14">Due to the expensive computation, a local model is built.</S>
    <S sid="212" ssid="15">However, our MaxEnt model is just a module of the whole log-linear model of translation which uses its score as a real-valued feature.</S>
    <S sid="213" ssid="16">The modularity afforded by this design does not incur any computation problems, and make it easier to update one sub-model with other modules unchanged.</S>
    <S sid="214" ssid="17">Beyond the MaxEnt-based reordering model, another feature deserving attention in our system is the CKY style decoder which observes the ITG.</S>
    <S sid="215" ssid="18">This is different from the work of Zens et. al.</S>
    <S sid="216" ssid="19">(2004).</S>
    <S sid="217" ssid="20">In their approach, translation is generated linearly, word by word and phrase by phrase in a traditional way with respect to the incorporation of the language model.</S>
    <S sid="218" ssid="21">It can be said that their decoder did not violate the ITG constraints but not that it observed the ITG.</S>
    <S sid="219" ssid="22">The ITG not only decreases reorderings greatly but also makes reordering hierarchical.</S>
    <S sid="220" ssid="23">Hierarchical reordering is more meaningful for languages which are organized hierarchically.</S>
    <S sid="221" ssid="24">From this point, our decoder is similar to the work by Chiang (2005).</S>
    <S sid="222" ssid="25">The future work is to investigate other valuable features, e.g. binary features that explain blocks from the syntactical view.</S>
    <S sid="223" ssid="26">We think that there is still room for improvement if more contributing features are used.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="6">
    <S sid="224" ssid="1">This work was supported in part by National High Technology Research and Development Program under grant #2005AA114140 and National Natural Science Foundation of China under grant #60573188.</S>
    <S sid="225" ssid="2">Special thanks to Yajuan L&#168;u for discussions of the manuscript of this paper and three anonymous reviewers who provided valuable comments.</S>
  </SECTION>
</PAPER>
