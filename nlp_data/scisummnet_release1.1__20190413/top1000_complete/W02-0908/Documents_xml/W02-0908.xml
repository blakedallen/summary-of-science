<PAPER>
  <S sid="0">Improvements In Automatic Thesaurus Extraction</S>
  <ABSTRACT>
    <S sid="1" ssid="1">The use of semantic resources is comin modern but methods to extract lexical semantics have only recently begun to perform well enough for practical use.</S>
    <S sid="2" ssid="2">We evaluate existing and new similarity metrics for thesaurus extraction, and experiment with the tradeoff between extraction performance and efficiency.</S>
    <S sid="3" ssid="3">We propose an approximation based on attributes and coarseand fine-grained matching, that reduces the time complexity and execution time of thesaurus extraction with only a marginal performance penalty.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="4" ssid="1">Thesauri have traditionally been used in information retrieval tasks to expand words in queries with synonymous terms (e.g.</S>
    <S sid="5" ssid="2">Ruge, (1997)).</S>
    <S sid="6" ssid="3">Since the development of WordNet (Fellbaum, 1998) and large electronic thesauri, information from semantic resources is regularly leveraged to solve NLP problems.</S>
    <S sid="7" ssid="4">These tasks include collocation discovery (Pearce, 2001), smoothing and model estimation (Brown et al., 1992; Clark and Weir, 2001) and text classification (Baker and McCallum, 1998).</S>
    <S sid="8" ssid="5">Unfortunately, thesauri are expensive and timeconsuming to create manually, and tend to suffer from problems of bias, inconsistency, and limited coverage.</S>
    <S sid="9" ssid="6">In addition, thesaurus compilers cannot keep up with constantly evolving language use and cannot afford to build new thesauri for the many subdomains that NLP techniques are being applied to.</S>
    <S sid="10" ssid="7">There is a clear need for methods to extract thesauri automatically or tools that assist in the manual creation and updating of these semantic resources.</S>
    <S sid="11" ssid="8">Much of the existing work on thesaurus extraction and word clustering is based on the observation that related terms will appear in similar contexts.</S>
    <S sid="12" ssid="9">These systems differ primarily in their definition of &#8220;context&#8221; and the way they calculate similarity from the contexts each term appears in.</S>
    <S sid="13" ssid="10">Most systems extract co-occurrence and syntactic information from the words surrounding the target term, which is then converted into a vector-space representation of the contexts that each target term appears in (Pereira et al., 1993; Ruge, 1997; Lin, 1998b).</S>
    <S sid="14" ssid="11">Other systems take the whole document as the context and consider term co-occurrence at the document level (Crouch, 1988; Sanderson and Croft, 1999).</S>
    <S sid="15" ssid="12">Once these contexts have been defined, these systems then use clustering or nearest neighbour methods to find similar terms.</S>
    <S sid="16" ssid="13">Alternatively, some systems are based on the observation that related terms appear together in particular contexts.</S>
    <S sid="17" ssid="14">These systems extract related terms directly by recognising linguistic patterns (e.g.</S>
    <S sid="18" ssid="15">X, Y and other Zs) which link synonyms and hyponyms (Hearst, 1992; Caraballo, 1999).</S>
    <S sid="19" ssid="16">Our previous work (Curran and Moens, 2002) has evaluated thesaurus extraction performance and efficiency using several different context models.</S>
    <S sid="20" ssid="17">In this paper, we evaluate some existing similarity metrics and propose and motivate a new metric which outperforms the existing metrics.</S>
    <S sid="21" ssid="18">We also present an approximation algorithm that bounds the time complexity of pairwise thesaurus extraction.</S>
    <S sid="22" ssid="19">This results in a significant reduction in runtime with only a marginal performance penalty in our experiments.</S>
  </SECTION>
  <SECTION title="2 Automatic Thesaurus Extraction" number="2">
    <S sid="23" ssid="1">Vector-space thesaurus extraction systems can be separated into two components.</S>
    <S sid="24" ssid="2">The first component extracts the contexts from raw text and compiles them into a statistical description of the contexts each potential thesaurus term appears in.</S>
    <S sid="25" ssid="3">Some systems define the context as a window of words surrounding each thesaurus term (McDonald, 2000).</S>
    <S sid="26" ssid="4">Many systems extract grammatical relations using either a broad coverage parser (Lin, 1998a) or shallow statistical tools (Grefenstette, 1994; Curran and Moens, 2002).</S>
    <S sid="27" ssid="5">Our experiments use a shallow relation extractor based on (Grefenstette, 1994).</S>
    <S sid="28" ssid="6">We define a context relation instance as a tuple (w, r, w') where w is the thesaurus term, which occurs in some grammatical relation r with another word w' in the sentence.</S>
    <S sid="29" ssid="7">We refer to the tuple (r, w') as an attribute of w. For example, the tuple (dog, direct-obj, walk) indicates that the term dog was the direct object of the verb walk.</S>
    <S sid="30" ssid="8">Our relation extractor begins with a Naive Bayes POS tagger and chunker.</S>
    <S sid="31" ssid="9">After the raw text has been tagged and chunked, noun phrases separated by prepositions and conjunctions are concatenated, and the relation extracting algorithm is run over each sentence.</S>
    <S sid="32" ssid="10">This consists of four passes over the sentence, associating each noun with the modifiers and verbs from the syntactic contexts they appear in: The relation tuple is then converted to root form using the Sussex morphological analyser (Minnen et al., 2000) and the POS tags are removed.</S>
    <S sid="33" ssid="11">The relations for each term are collected together and counted, producing a context vector of attributes and (adjective, good) 2005 (adjective, faintest) 89 (direct-obj, have) 1836 (indirect-obj, toy) 74 (adjective, preconceived) 42 (adjective, foggiest) 15 their frequencies in the corpus.</S>
    <S sid="34" ssid="12">Figure 1 shows some example attributes for idea.</S>
    <S sid="35" ssid="13">The second system component performs nearestneighbour or cluster analysis to determine which terms are similar based on their context vectors.</S>
    <S sid="36" ssid="14">Both methods require a function that calculates the similarity between context vectors.</S>
    <S sid="37" ssid="15">For experimental analysis we have decomposed this function into measure and weight functions.</S>
    <S sid="38" ssid="16">The measure function calculates the similarity between two weighted context vectors and the weight function calculates a weight from the raw frequency information for each context relation.</S>
    <S sid="39" ssid="17">The primary experiments in this paper evaluate the performance of various existing and new measure and weight functions, which are described in the next section.</S>
    <S sid="40" ssid="18">The simplest algorithm for thesaurus extraction is nearest-neighbour comparison, which involves pairwise vector comparison of the target with every extracted term.</S>
    <S sid="41" ssid="19">Given n terms and up to m attributes for each term, the asymptotic time complexity of nearest-neighbour thesaurus extraction is O(n2m).</S>
    <S sid="42" ssid="20">This is very expensive with even a moderate vocabulary and small attribute vectors.</S>
    <S sid="43" ssid="21">The number of terms can be reduced by introducing a minimum cutoff that ignores potential synonyms with a frequency less than the cutoff, which for our experiments was</S>
  </SECTION>
  <SECTION title="3 Experiments" number="3">
    <S sid="44" ssid="1">Early experiments in thesaurus extraction (Grefenstette, 1994) suffered from the limited size of available corpora, but more recent experiments have used much larger corpora with greater success (Lin, 1998a).</S>
    <S sid="45" ssid="2">For these experiments we ran our relation extractor over the British National Corpus (BNC) consisting of 114 million words in 6.2 million sentences.</S>
    <S sid="46" ssid="3">The POS tagging and chunking took 159 minutes, and the relation extraction took an addiWe describe the functions evaluated in these experiments using an extension of the asterisk notation used by Lin (1998a), where an asterisk indicates a set ranging over all existing values of that variable.</S>
    <S sid="47" ssid="4">For example, the set of attributes of the term w is: (w, &#57741;, &#57741;) &#57738; {(r, w&#57742;)  |&#57739;(w, r, w&#57742;)} For convenience, we further extend the notation for weighted attribute vectors.</S>
    <S sid="48" ssid="5">A subscripted asterisk indicates that the variables are bound together: For weight functions we use similar notation: Table 1 defines the measure functions evaluated in these experiments.</S>
    <S sid="49" ssid="6">The simplest measure functions (prefix SET) use the attribute set model from IR and are taken from Manning and Sch&#168;utze (1999), pp.</S>
    <S sid="50" ssid="7">299.</S>
    <S sid="51" ssid="8">When these are used with weighted attributes, if the weight is greater than zero, then it is considered in the set.</S>
    <S sid="52" ssid="9">Other measures, such as LIN and JACCARD have previously been used for thesaurus extraction (Lin, 1998a; Grefenstette, 1994).</S>
    <S sid="53" ssid="10">Finally, we have generalised some set measures using similar reasoning to Grefenstette (1994).</S>
    <S sid="54" ssid="11">Alternative generalisations are marked with a dagger.</S>
    <S sid="55" ssid="12">These experiments also cover a range of weight functions as defined in Table 2.</S>
    <S sid="56" ssid="13">The weight functions LIN98A, LIN98B, and GREF94 are taken from existing systems (Lin, 1998a; Lin, 1998b; Grefenstette, 1994).</S>
    <S sid="57" ssid="14">Our proposed weight functions are motivated by our intuition that highly predictive attributes are strong collocations with their terms.</S>
    <S sid="58" ssid="15">Thus, we have implemented many of the statistics described in the Collocations chapter of Manning and Sch&#168;utze (1999), including the T-Test, X2-Test, Likelihood Ratio, and Mutual Information.</S>
    <S sid="59" ssid="16">Some functions (suffix LOG) have an extra log2(f(w, r, w&#57742;) + 1) factor to promote the influence of higher frequency attributes.</S>
  </SECTION>
  <SECTION title="4 Evaluation" number="4">
    <S sid="60" ssid="1">For the purposes of evaluation, we selected 70 single-word noun terms for thesaurus extraction.</S>
    <S sid="61" ssid="2">To avoid sample bias, the words were randomly selected from WordNet such that they covered a range of values for the following word properties: frequency Penn Treebank and BNC frequencies; number of senses WordNet and Macquarie senses; specificity depth in the WordNet hierarchy; concreteness distribution across WordNet subtrees.</S>
    <S sid="62" ssid="3">Table 3 lists some example terms with frequency and frequency rank data from the PTB, BNC and REUTERS, as well as the number of senses in WordNet and Macquarie, and their maximum and minimum depth in the WordNet hierarchy.</S>
    <S sid="63" ssid="4">For each term we extracted a thesaurus entry with 200 potential synonyms and their similarity scores.</S>
    <S sid="64" ssid="5">The simplest method of evaluation is direct comparison of the extracted thesaurus with a manuallycreated gold standard (Grefenstette, 1994).</S>
    <S sid="65" ssid="6">However, on small corpora, rare direct matches provide limited information for evaluation, and thesaurus coverage is a problem.</S>
    <S sid="66" ssid="7">Our evaluation uses a combination of three electronic thesauri: the Macquarie (Bernard, 1990), Roget&#8217;s (Roget, 1911) and Moby (Ward, 1996) thesauri.</S>
    <S sid="67" ssid="8">Roget&#8217;s and Macquarie are topic ordered and the Moby thesaurus is head ordered.</S>
    <S sid="68" ssid="9">As the extracted thesauri do not distinguish between senses, we transform Roget&#8217;s and Macquarie into head ordered format by conflating the sense sets containing each term.</S>
    <S sid="69" ssid="10">For the 70 terms we create a gold standard from the union of the synonyms from the three thesauri.</S>
    <S sid="70" ssid="11">With this gold standard in place, it is possible to use precision and recall measures to evaluate the quality of the extracted thesaurus.</S>
    <S sid="71" ssid="12">To help overcome the problems of direct comparisons we use several measures of system performance: direct matches (DIRECT), inverse rank (INVR), and precision of the top n synonyms (P(n)), for n = 1, 5 and 10.</S>
    <S sid="72" ssid="13">INVR is the sum of the inverse rank of each matching synonym, e.g. matching synonyms at ranks 3, 5 and 28 give an inverse rank score of</S>
  </SECTION>
  <SECTION title="3 + 1" number="5">
    <S sid="73" ssid="1">1 5 + 128, and with at most 200 synonyms, the maximum INVR score is 5.878.</S>
    <S sid="74" ssid="2">Precision of the top n is the percentage of matching synonyms in the top n extracted synonyms.</S>
    <S sid="75" ssid="3">There are a total of 23207 synonyms for the 70 terms in the gold standard.</S>
    <S sid="76" ssid="4">Each measure is averaged over the extracted synonym lists for all 70 thesaurus terms.</S>
  </SECTION>
  <SECTION title="5 Results" number="6">
    <S sid="77" ssid="1">For computational practicality, we assume that the performance behaviour of measure and weight functions are independent of each other.</S>
    <S sid="78" ssid="2">Therefore, we have evaluated the weight functions using the JACCARD measure, and evaluated the measure functions using the TTEST weight because they produced the best results in our previous experiments.</S>
    <S sid="79" ssid="3">Table 4 presents the results of evaluating the measure functions.</S>
    <S sid="80" ssid="4">The best performance across all measures was shared by JACCARD and DICE&#8224;, which produced identical results for the 70 words.</S>
    <S sid="81" ssid="5">DICE&#8224; is easier to compute and is thus the preferred measure function.</S>
    <S sid="82" ssid="6">Table 5 presents the results of evaluating the weight functions.</S>
    <S sid="83" ssid="7">Here TTEST significantly outperformed the other weight functions, which supports our intuition that good context descriptors are also strong collocates of the term.</S>
    <S sid="84" ssid="8">Surprisingly, the other collocation discovery functions did not perform as well, even though TTEST is not the most favoured for collocation discovery because of its behaviour at low frequency counts.</S>
    <S sid="85" ssid="9">One difficulty with weight functions involving logarithms or differences is that they can be negative.</S>
    <S sid="86" ssid="10">The results in Table 6 show that weight functions that are not bounded below by zero do not perform as well on thesaurus extraction.</S>
    <S sid="87" ssid="11">However, unbounded weights do produce interesting and unexpected results: they tend to return misspellings of the term and synonyms, abbreviations and lower frequency synonyms.</S>
    <S sid="88" ssid="12">For instance, TTEST' returned Co, Co. and PLC for company, but they do not appear in the synonyms extracted with TTEST.</S>
    <S sid="89" ssid="13">The unbounded weights also extracted more hyponyms, such as corporation names for company, including Kodak and Exxon.</S>
    <S sid="90" ssid="14">Finally unbounded weights tended to promote the rankings of synonyms from minority senses because the frequent senses are demoted by negative weights.</S>
    <S sid="91" ssid="15">For example, TTEST' returned writings, painting, fieldwork, essay and masterpiece as the best synonyms for work, whereas TTEST returned study, research, job, activity and life.</S>
    <S sid="92" ssid="16">Introducing a minimum cutoff that ignores low frequency potential synonyms can eliminate many unnecessary comparisons.</S>
    <S sid="93" ssid="17">Figure 2 presents both the performance of the system using direct match evaluation (left axis) and execution times (right axis) for increasing cutoffs.</S>
    <S sid="94" ssid="18">This test was performed using JACCARD and the TTEST and LIN98A weight functions.</S>
    <S sid="95" ssid="19">The first feature of note is that as we increase the minimum cutoff to 30, the direct match results improve for TTEST, which is probably a result of the TTEST weakness on low frequency counts.</S>
    <S sid="96" ssid="20">Initially, the execution time is rapidly reduced by small increments of the minimum cutoff.</S>
    <S sid="97" ssid="21">This is because Zipf&#8217;s law applies to relations, and so by small increments of the cutoff we eliminate many terms from the tail of the distribution.</S>
    <S sid="98" ssid="22">There are only 29,737 terms when the cutoff is 30; 88,926 terms when the cutoff is 5; and 246,067 without a cutoff, and because the extraction algorithm is O(n2m), this results in significant efficiency gains.</S>
    <S sid="99" ssid="23">Since extracting only 70 thesaurus terms takes about 43 minutes with a minimum cutoff of 5, the efficiency/performance trade-off is particularly important from the perspective of implementing a practical extraction system.</S>
  </SECTION>
  <SECTION title="6 Efficiency" number="7">
    <S sid="100" ssid="1">Even with a minimum cutoff of 30 as a reasonable compromise between speed and accuracy, extracting a thesaurus for 70 terms takes approximately 20 minutes.</S>
    <S sid="101" ssid="2">If we want to extract a complete thesaurus for 29,737 terms left after the cutoff has been applied, it would take approximately one full week of processing.</S>
    <S sid="102" ssid="3">Given that the size of the training corpus could be much larger (cf.</S>
    <S sid="103" ssid="4">Curran and Moens (2002)), which would increase both number of attributes for each term and the total number of terms above the minimum cutoff, this is not nearly fast enough.</S>
    <S sid="104" ssid="5">The problem is that the time complexity of thesaurus extraction is not practically scalable to significantly larger corpora.</S>
    <S sid="105" ssid="6">Although the minimum cutoff helps by reducing n to a reasonably small value, it does not constrain m in any way.</S>
    <S sid="106" ssid="7">In fact, using a cutoff increases the average value of m across the terms because it removes low frequency terms with few attributes.</S>
    <S sid="107" ssid="8">For instance, the frequent company appears in 11360 grammatical relations, with a total frequency of 69240 occurrences, whereas the infrequent pants appears in only 401 relations with a total frequency of 655 occurrences.</S>
    <S sid="108" ssid="9">The problem is that for every comparison, the algorithm must examine the length of both attribute vectors.</S>
    <S sid="109" ssid="10">Grefenstette (1994) uses bit signatures to test for shared attributes, but because of the high frequency of the most common attributes, this does not skip many comparisons.</S>
    <S sid="110" ssid="11">Our system keeps track of the sum of the remaining vector which is a significant optimisation, but comes at the cost of increased representation size.</S>
    <S sid="111" ssid="12">However, what is needed is some algorithmic reduction that bounds the number of full O(m) vector comparisons performed.</S>
  </SECTION>
  <SECTION title="7 Approximation Algorithm" number="8">
    <S sid="112" ssid="1">One way of bounding the complexity is to perform an approximate comparison first.</S>
    <S sid="113" ssid="2">If the approximation returns a positive result, then the algorithm performs the full comparison.</S>
    <S sid="114" ssid="3">We can do this by introducing another, much shorter vector of canonical attributes, with a bounded length k. If our approximate comparison returns at most p positive results for each term, then the time complexity becomes O(n2k + npm), which, since k is constant, is O(n2 + npm).</S>
    <S sid="115" ssid="4">So as long as we find an approximation function and vector such that p &lt;&lt; n, the system will run much faster and be much more scalable in m, the number of attributes.</S>
    <S sid="116" ssid="5">However, p &lt;&lt; n implies that we are discarding a very large number of potential matches and so there will be a performance penalty.</S>
    <S sid="117" ssid="6">This trade-off is governed by the number of the canonical attributes and how representative they are of the full attribute vector, and thus the term itself.</S>
    <S sid="118" ssid="7">It is also dependent on the functions used to compare the canonical attribute vectors.</S>
    <S sid="119" ssid="8">The canonical vector must contain attributes that best describe the thesaurus term in a bounded number of entries.</S>
    <S sid="120" ssid="9">The obvious first choice is the most strongly weighted attributes from the full vector.</S>
    <S sid="121" ssid="10">Figure 3 shows some of the most strongly weighted attributes for pants with their frequencies and weights.</S>
    <S sid="122" ssid="11">However, these attributes, although strongly correlated with pants, are in fact too specific and idiomatic to be a good summary, because there are very few other words with similar canonical attributes.</S>
    <S sid="123" ssid="12">For example, (adjective, smarty) only appears with two other terms (bun and number) in the entire corpus.</S>
    <S sid="124" ssid="13">The heuristic is so aggressive that too few positive approximate matches result.</S>
    <S sid="125" ssid="14">To alleviate this problem we filter the attributes so that only strongly weighted subject, direct-obj and indirect-obj relations are included in the canonical vectors.</S>
    <S sid="126" ssid="15">This is because in general they constrain the terms more and partake in fewer idiomatic collocations with the terms.</S>
    <S sid="127" ssid="16">So the general principle is the most descriptive verb relations constrain the search for possible synonyms, and the other modifiers provide finer grain distinctions used to rank possible synonyms.</S>
    <S sid="128" ssid="17">Figure 4 shows the 5 canonical attributes for pants.</S>
    <S sid="129" ssid="18">This canonical vector is a better general description of the term pants, since similar terms are likely to appear as the direct object of wear, even though it still contains the idiomatic attributes (direct-obj, wet) and (direct-obj, scare).</S>
    <S sid="130" ssid="19">One final difficulty this example shows is that attributes like (direct-obj, get) are not informative.</S>
    <S sid="131" ssid="20">We know this because (direct-obj, get) appears with 8769 different terms, which means the algorithm may perform a large number of unnecessary full comparisons since (direct-obj, get) could be a canonical attribute for many terms.</S>
    <S sid="132" ssid="21">To avoid this problem, we apply a maximum cutoff on the number of terms the attribute appears with.</S>
    <S sid="133" ssid="22">With limited experimentation, we have found that TTESTLOG is the best weight function for selecting canonical attributes.</S>
    <S sid="134" ssid="23">This may be because the extra log2(f(w, r, w&#65533;) + 1) factor encodes the desired bias towards relatively frequent canonical attributes.</S>
    <S sid="135" ssid="24">If a canonical attribute is shared by the two terms, then our algorithm performs the full comparison.</S>
    <S sid="136" ssid="25">Figure 5 shows system performance and speed, as canonical vector size is increased, with the maximum cutoff at 4000, 8000, and 10,000.</S>
    <S sid="137" ssid="26">As an example, with a maximum cutoff of 10,000 and a canonical vector size of 70, the total DIRECT score of 1841 represents a 3.9% performance penalty over full extraction, for an 89% reduction in execution time.</S>
    <S sid="138" ssid="27">Table 7 presents the example term results using the techniques we have described: JACCARD measure and TTEST weight functions; minimum cutoff of 30; and approximation algorithm with canonical vector size of 100 with TTESTLOG weighting.</S>
    <S sid="139" ssid="28">The BIG columns show the previous measure results if we returned 10,000 synonyms, and MAX gives the results for a comparison of the gold standard against itself.</S>
  </SECTION>
  <SECTION title="8 Conclusion" number="9">
    <S sid="140" ssid="1">In these experiments we have proposed new measure and weight functions that, as our evaluation has shown, significantly outperform existing similarity functions.</S>
    <S sid="141" ssid="2">The list of measure and weight functions we compared against is not complete, and we hope to add other functions to provide a general framework for thesaurus extraction experimentation.</S>
    <S sid="142" ssid="3">We would also like to expand our evaluation to include direct methods used by others (Lin, 1998a) and using the extracted thesaurus in NLP tasks.</S>
    <S sid="143" ssid="4">We have also investigated the speed/performance trade-off using frequency cutoffs.</S>
    <S sid="144" ssid="5">This has lead to the proposal of a new approximate comparison algorithm based on canonical attributes and a process of coarse- and fine-grained comparisons.</S>
    <S sid="145" ssid="6">This approximation algorithm is dramatically faster than simple pairwise comparison, with only a small performance penalty, which means that complete thesaurus extraction on large corpora is now feasible.</S>
    <S sid="146" ssid="7">Further, the canonical vector parameters allow for control of the speed/performance trade-off.</S>
    <S sid="147" ssid="8">These experiments show that large-scale thesaurus extraction is practical, and although results are not yet comparable with manually-constructed thesauri, may now be accurate enough to be useful for some NLP tasks.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="10">
    <S sid="148" ssid="1">We would like to thank Stephen Clark, Caroline Sporleder, Tara Murphy and the anonymous reviewers for their comments on drafts of this paper.</S>
    <S sid="149" ssid="2">This research is supported by Commonwealth and Sydney University Travelling scholarships.</S>
  </SECTION>
</PAPER>
