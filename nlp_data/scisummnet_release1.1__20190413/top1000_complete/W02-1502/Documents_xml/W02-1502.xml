<PAPER>
  <S sid="0">The Grammar Matrix: An Open-Source Starter-Kit For The Rapid Development Of Cross-Linguistically Consistent Broad-Coverage Precision Grammars</S>
  <ABSTRACT>
    <S sid="1" ssid="1">The grammar matrix is an open-source starter-kit for the development of broad- By using a type hierarchy to represent cross-linguistic generalizations and providing compatibility with other open-source tools for grammar engineering, evaluation, parsing and generation, it facilitates not only quick start-up but also rapid growth towards the wide coverage necessary for robust natural language processing and the precision parses and semantic representations necessary for natural language understanding.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="2" ssid="1">The past decade has seen the development of wide-coverage implemented grammars representing deep linguistic analysis of several languages in several frameworks, including Head-Driven Phrase Structure Grammar (HPSG), LexicalFunctional Grammar (LFG), and Lexicalized Tree Adjoining Grammar (LTAG).</S>
    <S sid="3" ssid="2">In HPSG, the most extensive grammars are those of English (Flickinger, 2000), German (M&#168;uller &amp; Kasper, 2000), and Japanese (Siegel, 2000; Siegel &amp; Bender, 2002).</S>
    <S sid="4" ssid="3">Despite being couched in the same general framework and in some cases being written in the same formalism and consequently being compatible with the same parsing and generation software, these grammars were developed more or less independently of each other.</S>
    <S sid="5" ssid="4">They each represent between 5 and 15 person years of research efforts, and comprise 35&#8211;70,000 lines of code.</S>
    <S sid="6" ssid="5">Unfortunately, most of that research is undocumented and the accumulated analyses, best practices for grammar engineering, and tricks of the trade are only available through painstaking inspection of the grammars and/or consultation with their authors.</S>
    <S sid="7" ssid="6">This lack of documentation holds across frameworks, with certain notable exceptions, including Alshawi (1992), M&#168;uller (1999), and Butt, King, Ni&#732;no, &amp; Segond (1999).</S>
    <S sid="8" ssid="7">Grammars which have been under development for many years tend to be very difficult to mine for information, as they contain layers upon layers of interacting analyses and decisions made in light of various intermediate stages of the grammar.</S>
    <S sid="9" ssid="8">As a result, when embarking on the creation of a new grammar for another language, it seems almost easier to start from scratch than to try to model it on an existing grammar.</S>
    <S sid="10" ssid="9">This is unfortunate&#8212;being able to leverage the knowledge and infrastructure embedded in existing grammars would greatly accelerate the process of developing new ones.</S>
    <S sid="11" ssid="10">At the same time, these grammars represent an untapped resource for the bottom-up exploration of language universals.</S>
    <S sid="12" ssid="11">As part of the LinGO consortium&#8217;s multi-lingual grammar engineering effort, we are developing a &#8216;grammar matrix&#8217; or starter-kit, distilling the wisdom of existing grammars and codifying and documenting it in a form that can be used as the basis for new grammars.</S>
    <S sid="13" ssid="12">In the following sections, we outline the inventory of a first, preliminary version of the grammar matrix, discuss the interaction of basic construction types and semantic composition in unification grammars by means of a detailed example, and consider extensions to the core inventory that we foresee and an evaluation methodology for the matrix proper.</S>
  </SECTION>
  <SECTION title="2 Preliminary Development of Matrix" number="2">
    <S sid="14" ssid="1">We have produced a preliminary version of the grammar matrix relying heavily on the LinGO project&#8217;s English Resource Grammar, and to a lesser extent on the Japanese grammar developed jointly between DFKI Saarbr&#168;ucken (Germany) and YY Technologies (Mountain View, CA).</S>
    <S sid="15" ssid="2">This early version of the matrix comprises the following comIncluded with the matrix are configuration and parameter files for the LKB grammar engineering environment (Copestake, 2002).</S>
    <S sid="16" ssid="3">Although small, this preliminary version of the matrix already reflects the main goals of the project: (i) Consistent with other work in HPSG, semantic representations and in particular the syntax-semantics interface are developed in detail; (ii) the types of the matrix are each representations of generalizations across linguistic objects and across languages; and (iii) the richness of the matrix and the incorporation of files which connect it with the LKB allow for extremely quick start-up as the matrix is applied to new languages.</S>
    <S sid="17" ssid="4">Since February 2002, this preliminary version of the matrix has been in use at two Norwegian universities, one working towards a broad-coverage reference implementation of Norwegian (NTNU), the other&#8212;for the time being&#8212;focused on specific aspects of clause structure and lexical description (Oslo University).</S>
    <S sid="18" ssid="5">In the first experiment with the matrix, at NTNU, basic Norwegian sentences were parsing and producing reasonable semantics within two hours of downloading the matrix files.</S>
    <S sid="19" ssid="6">Linguistic coverage should scale up quickly, since the foundation supplied by the matrix is designed not only to provide a quick start, but also to support long-term development of broad-coverage grammars.</S>
    <S sid="20" ssid="7">Both initiatives have confirmed the utility of the matrix starter kit and already have contributed to a series of discussions on cross-lingual HPSG design aspects, specifically in the areas of argument structure representations in the lexicon and basic assumptions about constituent structure (in one view, Norwegian exhibits a VSO topology in the main clause).</S>
    <S sid="21" ssid="8">The user groups have suggested refinements and extensions of the basic inventory, and it is expected that general solutions, as they are identified jointly, will propagate into the existing grammars too.</S>
  </SECTION>
  <SECTION title="3 A Detailed Example" number="3">
    <S sid="22" ssid="1">As an example of the level of detail involved in the grammar matrix, in this section we consider the analysis of intersective and scopal modification.</S>
    <S sid="23" ssid="2">The matrix is built to give Minimal Recursion Semantics (MRS; Copestake et al., 2001; Copestake, Flickinger, Sag, &amp; Pollard, 1999; Copestake, Flickinger, Malouf, Riehemann, &amp; Sag, 1995) representations.</S>
    <S sid="24" ssid="3">The two English examples in (1) exemplify the difference between intersective and scopal modification:1 The MRSs for (1a-b) (abstracting away from agreement information) are given in (2) and (3).</S>
    <S sid="25" ssid="4">The MRSs are ordered tuples consisting of a top handle (h1 in both cases), an instance or event variable (e in both cases), a bag of elementary predications (eps), and a bag of scope constraints (in these cases, QEQ constraints or &#8216;equal modulo quantifiers&#8217;).</S>
    <S sid="26" ssid="5">In a well-formed MRS, the handles can be 1These examples also differ in that probably is a prehead modifier while on a spaceship is a post-head modifier.</S>
    <S sid="27" ssid="6">This word-order distinction cross-cuts the semantic distinction, and our focus is on the latter, so we won&#8217;t consider the word-order aspects of these examples here. identified in one or more ways respecting the scope constraints such that the dependencies between the eps form a tree.</S>
    <S sid="28" ssid="7">For a detailed description of MRS, see the works cited above.</S>
    <S sid="29" ssid="8">Here, we will focus on the difference between the intersective modifier on (a spaceship) and the scopal modifier probably.</S>
    <S sid="30" ssid="9">In (2), the ep contributed by on (&#8216;on-rel&#8217;) shares its handle (h7) with the ep contributed by the verb it is modifying (&#8216;study-rel&#8217;).</S>
    <S sid="31" ssid="10">As such, the two will always have the same scope; no quantifier can intervene.</S>
    <S sid="32" ssid="11">Further, the second argument of the on-rel (e) is the event variable of the study-rel.</S>
    <S sid="33" ssid="12">The first argument, e', is the event variable of the on-rel and the third argument, z, is the instance variable of the spaceship-rel.</S>
    <S sid="34" ssid="13">In (3), the ep contributed by the scopal modifier probably (&#8216;probably-rel&#8217;) has its own handle (h7) which is not shared by anything.</S>
    <S sid="35" ssid="14">Furthermore, it takes a handle (h8) rather than the event variable of the study-rel as its argument. h8 is equal modulo quantifiers (QEQ) to the handle of the study-rel (h9), and h7 is equal modulo quantifiers to the argument of the prpstn-rel (h2).</S>
    <S sid="36" ssid="15">The prpstn-rel is the ep representing the illocutionary force of the whole expression.</S>
    <S sid="37" ssid="16">This means that quantifiers associated with the NPs Keanu and Kung Fu can scope inside or outside probably.</S>
    <S sid="38" ssid="17">While the details of modifier placement, which parts of speech can modify which kinds of phrases, etc., differ across languages, we believe that all languages display a distinction between scopal and intersective modification.</S>
    <S sid="39" ssid="18">Accordingly, the types necessary for describing these two kinds of modification are included in the matrix.</S>
    <S sid="40" ssid="19">The types isect-mod-phrase and scopal-modphrase (shown in Figures 1 and 2) encode the information necessary to build up in a compositional manner the modifier portions of the MRSs in (2) and (3).</S>
    <S sid="41" ssid="20">These types are embedded in the type hierarchy of the matrix.</S>
    <S sid="42" ssid="21">Through their supertype headmod-phr-simple they inherit information common to many types of phrases, including the basic feature geometry, head feature and non-local feature passing, and semantic compositionality.</S>
    <S sid="43" ssid="22">These types also have subtypes in the matrix specifying the two word-order possibilities (pre- or post-head modifiers), giving a total of four subtypes.2 The most important difference between these types is in the treatment of the handle of the head daughter&#8217;s semantics, to distinguish intersective and scopal modification.</S>
    <S sid="44" ssid="23">In isect-mod-phrase, the top handles (TOP) of the head and non-head (i.e., modifier) daughters are identified (#hand).</S>
    <S sid="45" ssid="24">This allows for MRSs like (2) where the eps contributed by the head (&#8216;study-rel&#8217;) and the modifier (&#8216;on-rel&#8217;) take the same scope.</S>
    <S sid="46" ssid="25">The type scopal-mod-phrase bears no such constraint.</S>
    <S sid="47" ssid="26">This allows for MRSs like (3) where the modifier&#8217;s semantic contribution (&#8216;probably-rel&#8217;) takes the handle of the head&#8217;s semantics (&#8216;study-rel&#8217;) as its argument, so that the modifier outscopes the head.</S>
    <S sid="48" ssid="27">In both types of modifier phrase, a constraint inherited from the supertype ensures that the handle of the modifier is also the handle of the whole phrase.</S>
    <S sid="49" ssid="28">The constraints on the LOCAL value inside the modifier&#8217;s MOD value regulate which lexical items can appear in which kind of phrase.</S>
    <S sid="50" ssid="29">Intersective modifiers specify lexically that they are [ MOD ( [ LOCAL isect-mod ] )] and scopal modifiers specify lexically that they are [ MOD ( [ LOCAL scopal-mod ] )].3 These constraints exemplify the kind of information that will be developed in the lexical hierarchy of the matrix.</S>
    <S sid="51" ssid="30">It is characteristic of broad-coverage grammars that every particular analysis interacts with many other analyses.</S>
    <S sid="52" ssid="31">Modularization is an on-going concern, both for maintainability of individual grammars, and for providing the right level of abstraction in the matrix.</S>
    <S sid="53" ssid="32">For the same reasons, we have only been able to touch on the highlights of the semantic analysis of modification here, but hope that this quick tour will suffice to illustrate the extent of the jump-start the matrix can give in the development of new grammars.</S>
  </SECTION>
  <SECTION title="4 Future Extensions" number="4">
    <S sid="54" ssid="1">The initial version of the matrix, while sufficient to support some useful grammar work, will require substantial further development on several fronts, including lexical representation, syntactic generalization, sociolinguistic variation, processing issues, and evaluation.</S>
    <S sid="55" ssid="2">This first version drew most heavily from the implementation of the English grammar, with some further insights drawn from the grammar of Japanese.</S>
    <S sid="56" ssid="3">Extensions to the matrix will be based on careful study of existing implemented grammars for other languages, notably German, Spanish and Japanese, as well as feedback from those using the first version of the matrix.</S>
    <S sid="57" ssid="4">For lexical representation, one of the most urgent needs is to provide a language-independent type hierarchy for the lexicon, at least for major parts of speech, establishing the mechanisms used for linking syntactic subcategorization to semantic predicate-argument structure.</S>
    <S sid="58" ssid="5">Lexical rules provide a second mechanism for expressing generalizations within the lexicon, and offer ready opportunities for cross-linguistic abstractions for both inflectional and derivational regularities.</S>
    <S sid="59" ssid="6">Work is also progressing on establishing a standard relational database (using PostgreSQL) for storing information for the lexical entries themselves, improving both scalability and clarity compared to the current simple text file representation.</S>
    <S sid="60" ssid="7">Formbased tools will be provided both for constructing lexical entries and for viewing the contents of the lexicon.</S>
    <S sid="61" ssid="8">The primary focus of work on syntactic generalization in the matrix is to support more freedom in word order, for both complements and modifiers.</S>
    <S sid="62" ssid="9">The first step will be a relatively conservative extension along the lines of Netter (1996), allowing the grammar writer more control over how a head combines with complements of different types, and their interleaving with modifier phrases.</S>
    <S sid="63" ssid="10">Other areas of immediate cross-linguistic interest include the hierarchy of head types, control phenomena, clitics, auxiliary verbs, noun-noun compounds, and more generally, phenomena that involve the word/phrase distinction, such as noun incorporation.</S>
    <S sid="64" ssid="11">A study of the existing grammars for English, German, Japanese, and Spanish reveals a high degree of language-specificity for several of these phenomena, but also suggests promise of reusable abstractions.</S>
    <S sid="65" ssid="12">Several kinds of sociolinguistic variation require extensions to the matrix, including grammaticized aspects of pragmatics such as politeness and empathy, as well as dialect and register alternations.</S>
    <S sid="66" ssid="13">The grammar of Japanese provides a starting point for representations of both empathy and politeness.</S>
    <S sid="67" ssid="14">Implementations of familiar vs. formal verb forms in German and Spanish provide further instances of politeness to help build the cross-linguistic abstractions.</S>
    <S sid="68" ssid="15">Extensions for dialect variation will build on some exploratory work in adapting the English grammar to support American, British, and Australian regionalisms, both lexical and syntactic, while restricting dialect mixture in generation and associated spurious ambiguity in parsing.</S>
    <S sid="69" ssid="16">While the development of the matrix will be built largely on the LKB platform, support will also be needed for using the emerging grammars on other processing platforms, and for linking to other packages for pre-processing the linguistic input.</S>
    <S sid="70" ssid="17">Several other platforms exist which can efficiently parse text using the existing grammars, including the PET system developed in C++ at Saarland University (Germany) and the DFKI (Callmeier, 2000); the PAGE system developed in Lisp at the DFKI (Uszkoreit et al., 1994); the LiLFeS system developed at Tokyo University (Makino, Yoshida, Torisawa, &amp; Tsujii, 1998), and a parallel processing system developed in Objective C at Delft University (The Netherlands; van Lohuizen, 2002).</S>
    <S sid="71" ssid="18">As part of the matrix package, sample configuration files and documentation will be provided for at least some of these additional platforms.</S>
    <S sid="72" ssid="19">Existing pre-processing packages can also significantly reduce the effort required to develop a new grammar, particularly for coping with the morphology/syntax interface.</S>
    <S sid="73" ssid="20">For example, the ChaSen package for segmenting Japanese input into words and morphemes (Asahara &amp; Matsumoto, 2000) has been linked to at least the LKB and PET systems.</S>
    <S sid="74" ssid="21">Support for connecting implementations of language-specific pre-processing packages of this kind will be preserved and extended as the matrix develops.</S>
    <S sid="75" ssid="22">Likewise, configuration files are included to support generation, at least within the LKB, provided that the grammar conforms to certain assumptions about semantic representation using the Minimal Recursion Semantics framework.</S>
    <S sid="76" ssid="23">Finally, a methodology is under development for constructing and using test suites organized around a typology of linguistic phenomena, using the implementation platform of the [incr tsdbo)] profiling package (Oepen &amp; Flickinger, 1998; Oepen &amp; Callmeier, 2000).</S>
    <S sid="77" ssid="24">These test suites will enable better communication about current coverage of a given grammar built using the matrix, and serve as the basis for identifying additional phenomena that need to be addressed cross-linguistically within the matrix.</S>
    <S sid="78" ssid="25">Of course, the development of the typology of phenomena is itself a major undertaking for which a systematic cross-linguistic approach will be needed, a discussion of which is outside the scope of this report.</S>
    <S sid="79" ssid="26">But the intent is to seed this classification scheme with a set of relatively coarse-grained phenomenon classes drawn from the existing grammars, then refine the typology as it is applied to these and new grammars built using the matrix.</S>
  </SECTION>
  <SECTION title="5 Case Studies" number="5">
    <S sid="80" ssid="1">One important part of the matrix package will be a library of phenomenon-based analyses drawn from the existing grammars and over time from users of the matrix, to provide working examples of how the matrix can be applied and extended.</S>
    <S sid="81" ssid="2">Each case study will be a set of grammar files, simplified for relevance, along with documentation of the analysis, and a test suite of sample sentences which define the range of data covered by the analysis.</S>
    <S sid="82" ssid="3">This library, too, will be organized around the typology of phenomena introduced above, but will also make explicit reference to language families, since both similarities and differences among related languages will be of interest in these case studies.</S>
    <S sid="83" ssid="4">Examples to be included in the first release of this library include numeral classifiers in Japanese, subject pro drop in Spanish, partial-VP fronting in German, and verb diathesis in Norwegian.</S>
  </SECTION>
  <SECTION title="6 Evaluation and Evolution" number="6">
    <S sid="84" ssid="1">The matrix itself is not a grammar but a collection of generalizations across grammars.</S>
    <S sid="85" ssid="2">As such, it cannot be tested directly on corpora from particular languages, and we must find other means of evaluation.</S>
    <S sid="86" ssid="3">We envision overall evaluation of the matrix based on case studies of its performance in helping grammar engineers quickly start new grammars and in helping them scale those grammars up.</S>
    <S sid="87" ssid="4">Evaluation in detail will based on automatable deletion/substitution metrics, i.e., tools that determine which types from the matrix get used as is, which get used with modifications, and which get ignored in various matrix-derived grammars.</S>
    <S sid="88" ssid="5">Furthermore, if the matrix evolves to include defeasible constraints, these tools will check which constraints get overridden and whether the value chosen is indeed common enough to be motivated as a default value.</S>
    <S sid="89" ssid="6">This evaluation in detail should be paired with feedback from the grammar engineers to determine why changes were made.</S>
    <S sid="90" ssid="7">The main goal of evaluation is, of course, to improve the matrix over time.</S>
    <S sid="91" ssid="8">This raises the question of how to propagate changes in the matrix to grammars based on earlier versions.</S>
    <S sid="92" ssid="9">The following three strategies (meant to be used in combination) seem promising: (i) segregate changes that are important to sync to (e.g., changes that affect MRS outputs, fundamental changes to important analyses), (ii) develop a methodology for communicating changes in the matrix, their motivation and their implementation to the user community, and (iii) develop tools for semi-automating resynching of existing grammars to upgrades of the matrix.</S>
    <S sid="93" ssid="10">These tools could use the type hierarchy to predict where conflicts are likely to arise and bring these to the engineer&#8217;s attention, possibly inspired by the approach under development at CSLI for the dynamic maintenance of the LinGO Redwoods treebank (Oepen et al., 2002).</S>
    <S sid="94" ssid="11">Finally, while initial development of the matrix has been and will continue to be highly centralized, we hope to provide support for proposed matrix improvements from the user community.</S>
    <S sid="95" ssid="12">User feedback will already come in the form of case studies for the library as discussed in Section 5 above, but also potentially in proposals for modification of the matrix drawing on experiences in grammar development.</S>
    <S sid="96" ssid="13">In order to provide users with some cross-linguistic context in which to develop and evaluate such proposals themselves, we intend to provide some sample matrix-derived grammars and corresponding testsuites with the matrix.</S>
    <S sid="97" ssid="14">A user could thus make a proposed change to the matrix, run the testsuites for several languages using the supplied grammars which draw from that changed matrix, and use [incr tsdbo)] to determine which phenomena have been affected by the change.</S>
    <S sid="98" ssid="15">It is clear that full automation of this evaluation process will be difficult, but at least some classes of changes to the matrix will permit this kind of quick cross-linguistic feedback to users with only a modest amount of additional infrastructure.</S>
  </SECTION>
  <SECTION title="7 Conclusion" number="7">
    <S sid="99" ssid="1">This project carries linguistic, computational, and practical interest.</S>
    <S sid="100" ssid="2">The linguistic interest lies in the HPSG community&#8217;s general bottom-up approach to language universals, which involves aiming for good coverage of a variety of languages first, and leaving the task of what they have in common for later.</S>
    <S sid="101" ssid="3">(Of course, theory building is never purely data-driven, and there are substantive hypotheses within HPSG about language universals.)</S>
    <S sid="102" ssid="4">Now that we have implementations with fairly extensive coverage for a somewhat typologically diverse set of languages, it is a good time to take the next step in this program, working to extract and generalize what is similar across these existing wide-coverage grammars.</S>
    <S sid="103" ssid="5">Moreover, the central role of types in the representation of linguistic generalizations enables the kind of underspecification which is useful for expressing what is common among related languages while allowing for the further specialization which necessarily distinguishes one language from another.</S>
    <S sid="104" ssid="6">The computational interest is threefold.</S>
    <S sid="105" ssid="7">First there is the question of what formal devices the grammar matrix will require.</S>
    <S sid="106" ssid="8">Should it include defaults?</S>
    <S sid="107" ssid="9">What about domain union (linearization theory)?</S>
    <S sid="108" ssid="10">The selection and deployment of formal devices should be informed by on-going research on processing schemes, and here the crosslinguistic perspective can be particularly helpful.</S>
    <S sid="109" ssid="11">Where there are several equivalent analyses of the same linguistic phenomena (e.g., morphosyntactic ambiguity or optionality), the choice of analysis can have processing implications that aren&#8217;t necessarily apparent in a single grammar.</S>
    <S sid="110" ssid="12">Second, having a set ofwide-coverage HPSGs with fairly standardized fundamentals could prove interesting for research on stochastic processing and disambiguation, especially if the languages differ in gross typological features such as word order.</S>
    <S sid="111" ssid="13">Finally, there are also computational issues involved in how the grammar matrix would evolve over time as it is used in new grammars.</S>
    <S sid="112" ssid="14">The matrix enables the developer of a grammar for a new language to get a quick start on producing a system that parses and generates with non-trivial semantics, while also building the foundation for a widecoverage grammar of the language.</S>
    <S sid="113" ssid="15">But the matrix itself may well change in parallel with the development of the grammar for a particular language, so appropriate mechanisms must be developed to support the merging of enhancements to both.</S>
    <S sid="114" ssid="16">There is also practical industrial benefit to this project.</S>
    <S sid="115" ssid="17">Companies that are consumers of these grammars benefit when grammars of multiple languages work with the same parsing and generation algorithms and produce standardized semantic representations derived from a rich, linguistically motivated syntax-semantics interface.</S>
    <S sid="116" ssid="18">More importantly, the grammar matrix will help to remove one of the primary remaining obstacles to commercial deployment of grammars of this type and indeed of the commercial use of deep linguistic analysis: the immense cost of developing the resource.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="8">
    <S sid="117" ssid="1">Since the grammar matrix draws on prior research and existing grammars, it necessarily reflects contributions from many people.</S>
    <S sid="118" ssid="2">Rob Malouf, Jeff Smith, John Beavers, and Kathryn Campbell-Kibler have contributed to the LinGO ERG; Melanie Siegel is the original developer for the Japanese grammar.</S>
    <S sid="119" ssid="3">Tim Baldwin, Ann Copestake, Ivan Sag, Tom Wasow, and other members of the LinGO Laboratory at CSLI have had a great deal of influence on the design of the grammatical analyses and corresponding MRS representations.</S>
    <S sid="120" ssid="4">Warmest thanks to Lars Hellan and his colleagues at NTNU and Jan Tore L&#248;nning and his students at Oslo University for their cooperation, patience, and tolerance.</S>
  </SECTION>
</PAPER>
