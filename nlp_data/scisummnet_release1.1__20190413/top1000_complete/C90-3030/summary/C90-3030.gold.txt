Constraint Grammar As A Framework For Parsing Running Text
Grammars which are used in parsers are often directly imported from autonomous grammar theory and descriptive practice that were not exercised for the explicit purpose of parsing.
Parsers have been designed for English based on e.g. Government and Binding Theory, Generalized Phrase Structure Grammar, and Lexical-Functional Grammar.
We present a formalism to be used for parsing where the grammar statements are closer to real text sentences and more directly address some notorious parsing problems, especially ambiguity.
The formalism is a linguistic one.
It relies on transitional probabilities in an indirect way.
The probabilities are not part of the description.
The descriptive statements, constraints, do not have the ordinary task of defining the notion 'correct sentence in L'.
They are less categorical in nature, more closely tied to morphological features, and more directly geared towards the basic task of parsing.
We see this task as one of inferring surface structure from a stream of concrete tokens in a basically bottom-up mode.
Constraints are formulated on the basis of extensive corpus studies.
They may reflect absolute, rule-like facts, or probabilistic tendencies where a certain risk is judged to be proper to take.
Constraints of the former rule-like type are of course preferable.
The ensemble of constraints for language L constitute a Constraint Grammar (CG) for L.
A CG is intended to be used by the Constraint Grammar Parser CGP, implemented as a Lisp interpreter.
Our input tokens to CGP are morphologically analyzed word-forms.
One central idea is to maximize the use of morphological information for parsing purposes.
All relevant structure is assigned directly via lexicon, morphology, and simple mappings from morphology to syntax.
The task of the constraints is basically to discard as many alternatives as possible, the optimum being a fully disambiguated sentence with one syntactic reading only.
The second central idea is to treat morphological disambiguation and syntactic labelling by the same mechanism of discarding improper alternatives.
A good parsing formalism should satisfy many requirements: the constraints should be declarative rather than procedural, they should be able to cope with any real-world text-sentence (i.e. with running text, not just with linguists' laboratory sentences), they should be clearly separated from the program code by which they are executed, the formalism should be language-independent, it should be reasonably easy to implement (optimally as finite-state automata), and it should also be efficient to run.
The CG formalism adheres to these desiderata.
we propose the Constraint Grammar framework.
