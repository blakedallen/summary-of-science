<PAPER>
  <S sid="0">Loosely Tree-Based Alignment For Machine Translation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We augment a model of translation based on re-ordering nodes in syntactic trees in order to allow alignments not conforming to the original tree structure, while keeping computational complexity polynomial in the sentence length.</S>
    <S sid="2" ssid="2">This is done by adding a new subtree cloning operation to either tree-to-string or tree-to-tree alignment algorithms.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="3" ssid="1">Systems for automatic translation between languages have been divided into transfer-based approaches, which rely on interpreting the source string into an abstract semantic representation from which text is generated in the target language, and statistical approaches, pioneered by Brown et al. (1990), which estimate parameters for a model of word-to-word correspondences and word re-orderings directly from large corpora of parallel bilingual text.</S>
    <S sid="4" ssid="2">Only recently have hybrid approaches begun to emerge, which apply probabilistic models to a structured representation of the source text.</S>
    <S sid="5" ssid="3">Wu (1997) showed that restricting word-level alignments between sentence pairs to observe syntactic bracketing constraints significantly reduces the complexity of the alignment problem and allows a polynomial-time solution.</S>
    <S sid="6" ssid="4">Alshawi et al. (2000) also induce parallel tree structures from unbracketed parallel text, modeling the generation of each node&#8217;s children with a finite-state transducer.</S>
    <S sid="7" ssid="5">Yamada and Knight (2001) present an algorithm for estimating probabilistic parameters for a similar model which represents translation as a sequence of re-ordering operations over children of nodes in a syntactic tree, using automatic parser output for the initial tree structures.</S>
    <S sid="8" ssid="6">The use of explicit syntactic information for the target language in this model has led to excellent translation results (Yamada and Knight, 2002), and raises the prospect of training a statistical system using syntactic information for both sides of the parallel corpus.</S>
    <S sid="9" ssid="7">Tree-to-tree alignment techniques such as probabilistic tree substitution grammars (Haji&#711;c et al., 2002) can be trained on parse trees from parallel treebanks.</S>
    <S sid="10" ssid="8">However, real bitexts generally do not exhibit parse-tree isomorphism, whether because of systematic differences between how languages express a concept syntactically (Dorr, 1994), or simply because of relatively free translations in the training material.</S>
    <S sid="11" ssid="9">In this paper, we introduce &#8220;loosely&#8221; tree-based alignment techniques to address this problem.</S>
    <S sid="12" ssid="10">We present analogous extensions for both tree-to-string and tree-to-tree models that allow alignments not obeying the constraints of the original syntactic tree (or tree pair), although such alignments are dispreferred because they incur a cost in probability.</S>
    <S sid="13" ssid="11">This is achieved by introducing a clone operation, which copies an entire subtree of the source language syntactic structure, moving it anywhere in the target language sentence.</S>
    <S sid="14" ssid="12">Careful parameterization of the probability model allows it to be estimated at no additional cost in computational complexity.</S>
    <S sid="15" ssid="13">We expect our relatively unconstrained clone operation to allow for various types of structural divergence by providing a sort of hybrid between tree-based and unstructured, IBM-style models.</S>
    <S sid="16" ssid="14">We first present the tree-to-string model, followed by the tree-to-tree model, before moving on to alignment results for a parallel syntactically annotated Korean-English corpus, measured in terms of alignment perplexities on held-out test data, and agreement with human-annotated word-level alignments.</S>
  </SECTION>
  <SECTION title="2 The Tree-to-String Model" number="2">
    <S sid="17" ssid="1">We begin by summarizing the model of Yamada and Knight (2001), which can be thought of as representing translation as an Alexander Calder mobile.</S>
    <S sid="18" ssid="2">If we follow the process of an English sentence&#8217;s transformation into French, the English sentence is first given a syntactic tree representation by a statistical parser (Collins, 1999).</S>
    <S sid="19" ssid="3">As the first step in the translation process, the children of each node in the tree can be re-ordered.</S>
    <S sid="20" ssid="4">For any node with m children, m! re-orderings are possible, each of which is assigned a probability Porder conditioned on the syntactic categories of the parent node and its children.</S>
    <S sid="21" ssid="5">As the second step, French words can be inserted at each node of the parse tree.</S>
    <S sid="22" ssid="6">Insertions are modeled in two steps, the first predicting whether an insertion to the left, an insertion to the right, or no insertion takes place with probability Pins, conditioned on the syntactic category of the node and that of its parent.</S>
    <S sid="23" ssid="7">The second step is the choice of the inserted word Pt(f|NULL), which is predicted without any conditioning information.</S>
    <S sid="24" ssid="8">The final step, a French translation of each original English word, at the leaves of the tree, is chosen according to a distribution Pt(f|e).</S>
    <S sid="25" ssid="9">The French word is predicted conditioned only on the English word, and each English word can generate at most one French word, or can generate a NULL symbol, representing deletion.</S>
    <S sid="26" ssid="10">Given the original tree, the re-ordering, insertion, and translation probabilities at each node are independent of the choices at any other node.</S>
    <S sid="27" ssid="11">These independence relations are analogous to those of a stochastic context-free grammar, and allow for efficient parameter estimation by an inside-outside Expectation Maximization (EM) algorithm.</S>
    <S sid="28" ssid="12">The computation of inside probabilities Q, outlined below, considers possible reordering of nodes in the original tree in a bottom-up manner: for all nodes &#949;i in input tree T do for all k, l such that 1 &lt; k &lt; l &lt; N do for all orderings &#961; of the children &#949;1...&#949;m of &#949;i do for all partitions of span k, l into k1, l1...km, lm do This algorithm has computational complexity O(|T |Nm+2), where m is the maximum number of children of any node in the input tree T, and N the length of the input string.</S>
    <S sid="29" ssid="13">By storing partially completed arcs in the chart and interleaving the inner two loops, complexity of O(|T|n3m!2m) can be achieved.</S>
    <S sid="30" ssid="14">Thus, while the algorithm is exponential in m, the fan-out of the grammar, it is polynomial in the size of the input string.</S>
    <S sid="31" ssid="15">Assuming |T |= O(n), the algorithm is O(n4).</S>
    <S sid="32" ssid="16">The model&#8217;s efficiency, however, comes at a cost.</S>
    <S sid="33" ssid="17">Not only are many independence assumptions made, but many alignments between source and target sentences simply cannot be represented.</S>
    <S sid="34" ssid="18">As a minimal example, take the tree: Of the six possible re-orderings of the three terminals, the two which would involve crossing the bracketing of the original tree (XZY and YZX) are not allowed.</S>
    <S sid="35" ssid="19">While this constraint gives us a way of using syntactic information in translation, it may in many cases be too rigid.</S>
    <S sid="36" ssid="20">In part to deal with this problem, Yamada and Knight (2001) flatten the trees in a pre-processing step by collapsing nodes with the same lexical head-word.</S>
    <S sid="37" ssid="21">This allows, for example, an English subject-verb-object (SVO) structure, which is analyzed as having a VP node spanning the verb and object, to be re-ordered as VSO in a language such as Arabic.</S>
    <S sid="38" ssid="22">Larger syntactic divergences between the two trees may require further relaxation of this constraint, and in practice we expect such divergences to be frequent.</S>
    <S sid="39" ssid="23">For example, a nominal modifier in one language may show up as an adverbial in the other, or, due to choices such as which information is represented by a main verb, the syntactic correspondence between the two In order to provide some flexibility, we modify the model in order to allow for a copy of a (translated) subtree from the English sentences to occur, with some cost, at any point in the resulting French sentence.</S>
    <S sid="40" ssid="24">For example, in the case of the input tree This operation, combined with the deletion of the original node Z, produces the alignment (XZY) that was disallowed by the original tree reordering model.</S>
    <S sid="41" ssid="25">Figure 1 shows an example from our Korean-English corpus where the clone operation allows the model to handle a case of wh-movement in the English sentence that could not be realized by any reordering of subtrees of the Korean parse.</S>
    <S sid="42" ssid="26">The probability of adding a clone of original node &#949;i as a child of node &#949;j is calculated in two steps: first, the choice of whether to insert a clone under &#949;j, with probability Pins(clone|&#949;j), and the choice of which original node to copy, with probability where Pmakeclone is the probability of an original node producing a copy.</S>
    <S sid="43" ssid="27">In our implementation, for simplicity, Pins(clone) is a single number, estimated by the EM algorithm but not conditioned on the parent node &#949;j, and Pmakeclone is a constant, meaning that the node to be copied is chosen from all the nodes in the original tree with uniform probability.</S>
    <S sid="44" ssid="28">It is important to note that Pmakeclone is not dependent on whether a clone of the node in question has already been made, and thus a node may be &#8220;reused&#8221; any number of times.</S>
    <S sid="45" ssid="29">This independence assumption is crucial to the computational tractability of the algorithm, as the model can be estimated using the dynamic programming method above, keeping counts for the expected number of times each node has been cloned, at no increase in computational complexity.</S>
    <S sid="46" ssid="30">Without such an assumption, the parameter estimation becomes a problem of parsing with crossing dependencies, which is exponential in the length of the input string (Barton, 1985).</S>
  </SECTION>
  <SECTION title="3 The Tree-to-Tree Model" number="3">
    <S sid="47" ssid="1">The tree-to-tree alignment model has tree transformation operations similar to those of the tree-tostring model described above.</S>
    <S sid="48" ssid="2">However, the transformed tree must not only match the surface string of the target language, but also the tree structure assigned to the string by the treebank annotators.</S>
    <S sid="49" ssid="3">In order to provide enough flexibility to make this possible, additional tree transformation operations allow a single node in the source tree to produce two nodes in the target tree, or two nodes in the source tree to be grouped together and produce a single node in the target tree.</S>
    <S sid="50" ssid="4">The model can be thought of as a synchronous tree substitution grammar, with probabilities parameterized to generate the target tree conditioned on the structure of the source tree.</S>
    <S sid="51" ssid="5">The probability P(Tb|Ta) of transforming the source tree Ta into target tree Tb is modeled in a sequence of steps proceeding from the root of the target tree down.</S>
    <S sid="52" ssid="6">At each level of the tree: In the final step of the process, as in the tree-tostring model, lexical items at the leaves of the tree are translated into the target language according to a distribution Pt(f|e).</S>
    <S sid="53" ssid="7">Allowing non-1-to-1 correspondences between nodes in the two trees is necessary to handle the fact that the depth of corresponding words in the two trees often differs.</S>
    <S sid="54" ssid="8">A further consequence of allowing elementary trees of size one or two is that some reorderings not allowed when reordering the children of each individual node separately are now possible.</S>
    <S sid="55" ssid="9">For example, with our simple tree if nodes A and B are considered as one elementary tree, with probability Pelem(ta|A &#8658; BZ), their collective children will be reordered with probability giving the desired word ordering XZY.</S>
    <S sid="56" ssid="10">However, computational complexity as well as data sparsity prevent us from considering arbitrarily large elementary trees, and the number of nodes considered at once still limits the possible alignments.</S>
    <S sid="57" ssid="11">For example, with our maximum of two nodes, no transformation of the tree the generative probability model should be thought of as only generating single nodes on the target side.</S>
    <S sid="58" ssid="12">Thus, the alignment algorithm is constrained by the bracketing on the target side, but does not generate the entire target tree structure.</S>
    <S sid="59" ssid="13">While the probability model for tree transformation operates from the top of the tree down, probability estimation for aligning two trees takes place by iterating through pairs of nodes from each tree in bottom-up order, as sketched below: for all nodes &#949;a in source tree Ta in bottom-up order do for all elementary trees ta rooted in &#949;a do for all nodes &#949;b in target tree Tb in bottom-up order do for all elementary trees tb rooted in &#949;b do The outer two loops, iterating over nodes in each tree, require O(|T|2).</S>
    <S sid="60" ssid="14">Because we restrict our elementary trees to include at most one child of the root node on either side, choosing elementary trees for a node pair is O(m2), where m refers to the maximum number of children of a node.</S>
    <S sid="61" ssid="15">Computing the alignment between the 2m children of the elementary tree on either side requires choosing which subset of source nodes to delete, O(22m), which subset of target nodes to insert (or clone), O(22m), and how to reorder the remaining nodes from source to target tree, O((2m)!).</S>
    <S sid="62" ssid="16">Thus overall complexity of the algorithm is O(|T|2m242m(2m)!</S>
    <S sid="63" ssid="17">), quadratic in the size of the input sentences, but exponential in the fan-out of the grammar. is capable of generating the alignment WYXZ.</S>
    <S sid="64" ssid="18">In order to generate the complete target tree, one more step is necessary to choose the structure on the target side, specifically whether the elementary tree has one or two nodes, what labels the nodes have, and, if there are two nodes, whether each child attaches to the first or the second.</S>
    <S sid="65" ssid="19">Because we are ultimately interested in predicting the correct target string, regardless of its structure, we do not assign probabilities to these steps.</S>
    <S sid="66" ssid="20">The nonterminals on the target side are ignored entirely, and while the alignment algorithm considers possible pairs of nodes as elementary trees on the target side during training, Allowing m-to-n matching of up to two nodes on either side of the parallel treebank allows for limited non-isomorphism between the trees, as in Haji&#711;c et al. (2002).</S>
    <S sid="67" ssid="21">However, even given this flexibility, requiring alignments to match two input trees rather than one often makes tree-to-tree alignment more constrained than tree-to-string alignment.</S>
    <S sid="68" ssid="22">For example, even alignments with no change in word order may not be possible if the structures of the two trees are radically mismatched.</S>
    <S sid="69" ssid="23">This leads us to think it may be helpful to allow departures from Tree-to-String Tree-to-Tree the constraints of the parallel bracketing, if it can be done in without dramatically increasing computational complexity.</S>
    <S sid="70" ssid="24">For this reason, we introduce a clone operation, which allows a copy of a node from the source tree to be made anywhere in the target tree.</S>
    <S sid="71" ssid="25">After the clone operation takes place, the transformation of source into target tree takes place using the tree decomposition and subtree alignment operations as before.</S>
    <S sid="72" ssid="26">The basic algorithm of the previous section remains unchanged, with the exception that the alignments &#945; between children of two elementary trees can now include cloned, as well as inserted, nodes on the target side.</S>
    <S sid="73" ssid="27">Given that &#945; specifies a new cloned node as a child of Ej, the choice of which node to clone is made as in the tree-to-string model: Because a node from the source tree is cloned with equal probability regardless of whether it has already been &#8220;used&#8221; or not, the probability of a clone operation can be computed under the same dynamic programming assumptions as the basic tree-to-tree model.</S>
    <S sid="74" ssid="28">As with the tree-to-string cloning operation, this independence assumption is essential to keep the complexity polynomial in the size of the input sentences.</S>
    <S sid="75" ssid="29">For reference, the parameterization of all four models is summarized in Table 1.</S>
  </SECTION>
  <SECTION title="4 Data" number="4">
    <S sid="76" ssid="1">For our experiments, we used a parallel KoreanEnglish corpus from the military domain (Han et al., 2001).</S>
    <S sid="77" ssid="2">Syntactic trees have been annotated by hand for both the Korean and English sentences; in this paper we will be using only the Korean trees, modeling their transformation into the English text.</S>
    <S sid="78" ssid="3">The corpus contains 5083 sentences, of which we used 4982 as training data, holding out 101 sentences for evaluation.</S>
    <S sid="79" ssid="4">The average Korean sentence length was 13 words.</S>
    <S sid="80" ssid="5">Korean is an agglutinative language, and words often contain sequences of meaning-bearing suffixes.</S>
    <S sid="81" ssid="6">For the purposes of our model, we represented the syntax trees using a fairly aggressive tokenization, breaking multimorphemic words into separate leaves of the tree.</S>
    <S sid="82" ssid="7">This gave an average of 21 tokens for the Korean sentences.</S>
    <S sid="83" ssid="8">The average English sentence length was 16.</S>
    <S sid="84" ssid="9">The maximum number of children of a node in the Korean trees was 23 (this corresponds to a comma-separated list of items).</S>
    <S sid="85" ssid="10">77% of the Korean trees had no more than four children at any node, 92% had no more than five children, and 96% no more than six children.</S>
    <S sid="86" ssid="11">The vocabulary size (number of unique types) was 4700 words in English, and 3279 in Korean &#8212; before splitting multi-morphemic words, the Korean vocabulary size was 10059.</S>
    <S sid="87" ssid="12">For reasons of computation speed, trees with more than 5 children were excluded from the experiments described below.</S>
  </SECTION>
  <SECTION title="5 Experiments" number="5">
    <S sid="88" ssid="1">We evaluate our translation models both in terms agreement with human-annotated word-level alignments between the sentence pairs.</S>
    <S sid="89" ssid="2">For scoring the viterbi alignments of each system against goldstandard annotated alignments, we use the alignment error rate (AER) of Och and Ney (2000), which measures agreement at the level of pairs of words:1 where A is the set of word pairs aligned by the automatic system, and G the set aligned in the gold standard.</S>
    <S sid="90" ssid="3">We provide a comparison of the tree-based models with the sequence of successively more complex models of Brown et al. (1993).</S>
    <S sid="91" ssid="4">Results are shown in Table 2.</S>
    <S sid="92" ssid="5">The error rates shown in Table 2 represent the minimum over training iterations; training was stopped for each model when error began to increase.</S>
    <S sid="93" ssid="6">IBM Models 1, 2, and 3 refer to Brown et al. (1993).</S>
    <S sid="94" ssid="7">&#8220;Tree-to-String&#8221; is the model of Yamada and Knight (2001), and &#8220;Tree-to-String, Clone&#8221; allows the node cloning operation of Section 2.1.</S>
    <S sid="95" ssid="8">&#8220;Tree-to-Tree&#8221; indicates the model of Section 3, while &#8220;Tree-to-Tree, Clone&#8221; adds the node cloning operation of Section 3.1.</S>
    <S sid="96" ssid="9">Model 2 is initialized from the parameters of Model 1, and Model 3 is initialized from Model 2.</S>
    <S sid="97" ssid="10">The lexical translation probabilities Pt(f|e) for each of our tree-based models are initialized from Model 1, and the node re-ordering probabilities are initialized uniformly.</S>
    <S sid="98" ssid="11">Figure 1 shows the viterbi alignment produced by the &#8220;Tree-to-String, Clone&#8221; system on one sentence from our test set.</S>
    <S sid="99" ssid="12">We found better agreement with the human alignments when fixing Pins(left) in the Tree-to-String model to a constant rather than letting it be determined through the EM training.</S>
    <S sid="100" ssid="13">While the model learned by EM tends to overestimate the total number of aligned word pairs, fixing a higher probability for insertions results in fewer total aligned pairs and therefore a better trade-off between precision and recall.</S>
    <S sid="101" ssid="14">As seen for other tasks (Carroll and Charniak, 1992; Merialdo, 1994), the likelihood criterion used in EM training may not be optimal when evaluating a system against human labeling.</S>
    <S sid="102" ssid="15">The approach of optimizing a small number of metaparameters has been applied to machine translation by Och and Ney (2002).</S>
    <S sid="103" ssid="16">It is likely that the IBM models could similarly be optimized to minimize alignment error &#8211; an open question is whether the optimization with respect to alignment error will correspond to optimization for translation accuracy.</S>
    <S sid="104" ssid="17">Within the strict EM framework, we found roughly equivalent performance between the IBM models and the two tree-based models when making use of the cloning operation.</S>
    <S sid="105" ssid="18">For both the tree-tostring and tree-to-tree models, the cloning operation improved results, indicating that adding the flexibility to handle structural divergence is important when using syntax-based models.</S>
    <S sid="106" ssid="19">The improvement was particularly significant for the tree-to-tree model, because using syntactic trees on both sides of the translation pair, while desirable as an additional source of information, severely constrains possible alignments unless the cloning operation is allowed.</S>
    <S sid="107" ssid="20">The tree-to-tree model has better theoretical complexity than the tree-to-string model, being quadratic rather than quartic in sentence length, and we found this to be a significant advantage in practice.</S>
    <S sid="108" ssid="21">This improvement in speed allows longer sentences and more data to be used in training syntax-based models.</S>
    <S sid="109" ssid="22">We found that when training on sentences of up 60 words, the tree-to-tree alignment was 20 times faster than tree-to-string alignment.</S>
    <S sid="110" ssid="23">For reasons of speed, Yamada and Knight (2002) limited training to sentences of length 30, and were able to use only one fifth of the available Chinese-English parallel corpus.</S>
  </SECTION>
  <SECTION title="6 Conclusion" number="6">
    <S sid="111" ssid="1">Our loosely tree-based alignment techniques allow statistical models of machine translation to make use of syntactic information while retaining the flexibility to handle cases of non-isomorphic source and target trees.</S>
    <S sid="112" ssid="2">This is achieved with a clone operation parameterized in such a way that alignment probabilities can be computed with no increase in asymptotic computational complexity.</S>
    <S sid="113" ssid="3">We present versions of this technique both for tree-to-string models, making use of parse trees for one of the two languages, and tree-to-tree models, which make use of parallel parse trees.</S>
    <S sid="114" ssid="4">Results in terms of alignment error rate indicate that the clone operation results in better alignments in both cases.</S>
    <S sid="115" ssid="5">On our Korean-English corpus, we found roughly equivalent performance for the unstructured IBM models, and the both the tree-to-string and tree-totree models when using cloning.</S>
    <S sid="116" ssid="6">To our knowledge these are the first results in the literature for tree-to-tree statistical alignment.</S>
    <S sid="117" ssid="7">While we did not see a benefit in alignment error from using syntactic trees in both languages, there is a significant practical benefit in computational efficiency.</S>
    <S sid="118" ssid="8">We remain hopeful that two trees can provide more information than one, and feel that extensions to the &#8220;loosely&#8221; tree-based approach are likely to demonstrate this using larger corpora.</S>
    <S sid="119" ssid="9">Another important question we plan to pursue is the degree to which these results will be borne out with larger corpora, and how the models may be refined as more training data is available.</S>
    <S sid="120" ssid="10">As one example, our tree representation is unlexicalized, but we expect conditioning the model on more lexical information to improve results, whether this is done by percolating lexical heads through the existing trees or by switching to a strict dependency representation.</S>
  </SECTION>
</PAPER>
