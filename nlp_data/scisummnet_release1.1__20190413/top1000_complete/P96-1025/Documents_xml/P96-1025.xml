<PAPER>
  <S sid="0">A New Statistical Parser Based On Bigram Lexical Dependencies</S>
  <ABSTRACT>
    <S sid="1" ssid="1">This paper describes a new statistical parser which is based on probabilities of dependencies between head-words in the parse tree.</S>
    <S sid="2" ssid="2">Standard bigram probability estimation techniques are extended to calculate probabilities of dependencies between pairs of words.</S>
    <S sid="3" ssid="3">Tests using Wall Street Journal data show that the method performs at least as well as SPATTER (Magerman 95; Jelinek et al. 94), which has the best published results for a statistical parser on this task.</S>
    <S sid="4" ssid="4">The simplicity of the approach means the model trains on 40,000 sentences in under 15 minutes.</S>
    <S sid="5" ssid="5">With a beam search strategy parsing speed can be improved to over 200 sentences a minute with negligible loss in accuracy.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">Lexical information has been shown to be crucial for many parsing decisions, such as prepositional-phrase attachment (for example (Hindle and Rooth 93)).</S>
    <S sid="7" ssid="2">However, early approaches to probabilistic parsing (Pereira and Schabes 92; Magerman and Marcus 91; Briscoe and Carroll 93) conditioned probabilities on non-terminal labels and part of speech tags alone.</S>
    <S sid="8" ssid="3">The SPATTER parser (Magerman 95; Jelinek et al. 94) does use lexical information, and recovers labeled constituents in Wall Street Journal text with above 84% accuracy &#8212; as far as we know the best published results on this task.</S>
    <S sid="9" ssid="4">This paper describes a new parser which is much simpler than SPATTER, yet performs at least as well when trained and tested on the same Wall Street Journal data.</S>
    <S sid="10" ssid="5">The method uses lexical information directly by modeling head-modifier' relations between pairs of words.</S>
    <S sid="11" ssid="6">In this way it is similar to 'By 'modifier' we mean the linguistic notion of either an argument or adjunct.</S>
    <S sid="12" ssid="7">Link grammars (Lafferty et al. 92), and dependency grammars in general.</S>
  </SECTION>
  <SECTION title="2 The Statistical Model" number="2">
    <S sid="13" ssid="1">The aim of a parser is to take a tagged sentence as input (for example Figure 1(a)) and produce a phrase-structure tree as output (Figure 1(b)).</S>
    <S sid="14" ssid="2">A statistical approach to this problem consists of two components.</S>
    <S sid="15" ssid="3">First, the statistical model assigns a probability to every candidate parse tree for a sentence.</S>
    <S sid="16" ssid="4">Formally, given a sentence S and a tree T, the model estimates the conditional probability P(TIS).</S>
    <S sid="17" ssid="5">The most likely parse under the model is then: Second, the parser is a method for finding Zest.</S>
    <S sid="18" ssid="6">This section describes the statistical model, while section 3 describes the parser.</S>
    <S sid="19" ssid="7">The key to the statistical model is that any tree such as Figure 1(b) can be represented as a set of baseNPs2 and a set of dependencies as in Figure 1(c).</S>
    <S sid="20" ssid="8">We call the set of baseNPs B, and the set of dependencies D; Figure 1(d) shows B and D for this example.</S>
    <S sid="21" ssid="9">For the purposes of our model, S is the sentence with words tagged for part of speech.</S>
    <S sid="22" ssid="10">That is, S =&lt; (to' , ti), (w2,t2)...(w7-4,4,) &gt;.</S>
    <S sid="23" ssid="11">For POS tagging we use a maximum-entropy tagger described in (Ratnaparkhi 96).</S>
    <S sid="24" ssid="12">The tagger performs at around 97% accuracy on Wall Street Journal Text, and is trained on the first 40,000 sentences of the Penn Treebank (Marcus et al. 93).</S>
    <S sid="25" ssid="13">Given S and B, the reduced sentence S' is defined as the subsequence of S which is formed by removing punctuation and reducing all baseNPs to their head-word alone.</S>
    <S sid="26" ssid="14">(heads of baseNPs are marked in bold).</S>
    <S sid="27" ssid="15">Arrows show modifier head dependencies.</S>
    <S sid="28" ssid="16">Section 2.1 describes how arrows are labeled with non-terminal triples from the parse-tree.</S>
    <S sid="29" ssid="17">Non-head words within baseNPs are excluded from the dependency structure; (d) B, the set of baseNPs, and D, the set of dependencies, are extracted from (c).</S>
    <S sid="30" ssid="18">Thus the reduced sentence is an array of word/tag Sections 2.1 to 2.4 describe the dependency model.</S>
    <S sid="31" ssid="19">Section 2.5 then describes the baseNP model, which uses bigram tagging techniques similar to (Ramshaw and Marcus 95; Church 88).</S>
    <S sid="32" ssid="20">The dependency model is limited to relationships between words in reduced sentences such as Example 1.</S>
    <S sid="33" ssid="21">The mapping from trees to dependency structures is central to the dependency model.</S>
    <S sid="34" ssid="22">It is defined in two steps: 1.</S>
    <S sid="35" ssid="23">For each constituent P &gt; in the parse tree a simple set of rules' identifies which of the children Ci is the 'head-child' of P. For example, NN would be identified as the head-child of NP &lt;DET .13 33 NN&gt;, VP would be identified as the head-child of S &lt;NP VP&gt;.</S>
    <S sid="36" ssid="24">Head-words 2.</S>
    <S sid="37" ssid="25">Head-modifier relationships are now extracted from the tree in Figure 2.</S>
    <S sid="38" ssid="26">Figure 3 illustrates how each constituent contributes a set of dependency relationships.</S>
    <S sid="39" ssid="27">VBD is identified as the head-child of VP &#8212;&gt; &lt;VBD NP NP&gt;.</S>
    <S sid="40" ssid="28">The head-words of the two NPs, resignation and yesterday, both modify the head-word of the VBD, announced.</S>
    <S sid="41" ssid="29">Dependencies are labeled by the modifier non-terminal, NP in both of these cases, the parent non-terminal, VP, and finally the head-child non-terminal, VBD.</S>
    <S sid="42" ssid="30">The triple of nonterminals at the start, middle and end of the arrow specify the nature of the dependency relationship &#8212; &lt;NP , S , VP&gt; represents a subject-verb dependency, &lt;PP ,NP ,NP&gt; denotes prepositional phrase modification of an NP, and so on4.</S>
    <S sid="43" ssid="31">Each word in the reduced sentence, with the exception of the sentential head 'announced', modifies exactly one other word.</S>
    <S sid="44" ssid="32">We use the notation to state that the jth word in the reduced sentence is a modifier to the hith word, with relationship R35.</S>
    <S sid="45" ssid="33">AF stands for 'arrow from'.</S>
    <S sid="46" ssid="34">Ri is the triple of labels at the start, middle and end of the arrow.</S>
    <S sid="47" ssid="35">For example, ti1 = Smith in this sentence, 4The triple can also be viewed as representing a semantic predicate-argument relationship, with the three elements being the type of the argument, result and functor respectively.</S>
    <S sid="48" ssid="36">This is particularly apparent in Categorial Grammar formalisms (Wood 93), which make an explicit link between dependencies and functional application.</S>
    <S sid="49" ssid="37">5For the head-word of the entire sentence h, 0, with R3=--&lt;Label of the root of the parse tree &gt;.</S>
    <S sid="50" ssid="38">So in this case, AF(5) = (0, &lt; S &gt;). and 1155 = announced, so AF(1) = (5, &lt;NP ,S ,VP&gt;).</S>
    <S sid="51" ssid="39">D is now defined as the m-tuple of dependencies: D = {(AF (1), AF(2)...AF(m)} .</S>
    <S sid="52" ssid="40">The model assumes that the dependencies are independent, so that: This section describes the way P(AF (AS, B) is estimated.</S>
    <S sid="53" ssid="41">The same sentence is very unlikely to appear both in training and test data, so we need to back-off from the entire sentence context.</S>
    <S sid="54" ssid="42">We believe that lexical information is crucial to attachment decisions, so it is natural to condition on the words and tags.</S>
    <S sid="55" ssid="43">Let V be the vocabulary of all words seen in training data, T be the set of all part-of-speech tags, and TRAIN be the training set, a set of reduced sentences.</S>
    <S sid="56" ssid="44">We define the following functions: where h(z) is an indicator function which is 1 if x is true, 0 if x is false. where P is the set of all triples of non-terminals.</S>
    <S sid="57" ssid="45">The denominator is a normalising factor which ensures that The denominator of (9) is constant, so maximising P(DIS, B) over D for fixed S, B is equivalent to maximising the product of the numerators, H(DIS, B).</S>
    <S sid="58" ssid="46">(This considerably simplifies the parsing process): An estimate based on the identities of the two tokens alone is problematic.</S>
    <S sid="59" ssid="47">Additional context, in particular the relative order of the two words and the distance between them, will also strongly influence the likelihood of one word modifying the other.</S>
    <S sid="60" ssid="48">For example consider the relationship between 'sales' and the three tokens of 'of': Example 2 Shaw, based in Dalton, Ga., has annual sales of about $ 1.18 billion, and has economies of scale and lower raw-material costs that are expected to boost the profitability of Armstrong 's brands, sold under the Armstrong and Evans-Black names.</S>
    <S sid="61" ssid="49">In this sentence 'sales' and 'of' co-occur three times.</S>
    <S sid="62" ssid="50">The parse tree in training data indicates a relationship in only one of these cases, so this sentence would contribute an estimate of that the two words are related.</S>
    <S sid="63" ssid="51">This seems unreasonably low given that 'sales of' is a strong collocation.</S>
    <S sid="64" ssid="52">The latter two instances of 'of' are so distant from 'sales' that it is unlikely that there will be a dependency.</S>
    <S sid="65" ssid="53">This suggests that distance is a crucial variable when deciding whether two words are related.</S>
    <S sid="66" ssid="54">It is included in the model by defining an extra 'distance' variable, A, and extending C, F and P to include this variable.</S>
    <S sid="67" ssid="55">For example, C( (a, b) , (c, d) , 6.) is the number of times (a, 6) and (c, d) appear in the same sentence at a distance A apart.</S>
    <S sid="68" ssid="56">(11) is then maximised instead of (10): A simple example of Aj,hi would be Aj,hi = hj &#8212; j.</S>
    <S sid="69" ssid="57">However, other features of a sentence, such as punctuation, are also useful when deciding if two words are related.</S>
    <S sid="70" ssid="58">We have developed a heuristic 'distance' measure which takes several such features into account The current distance measure Ai,h, is the combination of 6 features, or questions (we motivate the choice of these questions qualitatively &#8212; section 4 gives quantitative results showing their merit): Question 1 Does the kith word precede or follow the jth word?</S>
    <S sid="71" ssid="59">English is a language with strong word order, so the order of the two words in surface text will clearly affect their dependency statistics.</S>
    <S sid="72" ssid="60">Question 2 Are the hjth word and the jth word adjacent?</S>
    <S sid="73" ssid="61">English is largely right-branching and head-initial, which leads to a large proportion of dependencies being between adjacent words 7 .</S>
    <S sid="74" ssid="62">Table 1 shows just how local most dependencies are.</S>
    <S sid="75" ssid="63">Question 3 Is there a verb between the kith word and the jth word?</S>
    <S sid="76" ssid="64">Conditioning on the exact distance between two words by making Aj,h, = hj &#8212; j leads to severe sparse data problems.</S>
    <S sid="77" ssid="65">But Table 1 shows the need to make finer distance distinctions than just whether two words are adjacent.</S>
    <S sid="78" ssid="66">Consider the prepositions 'to', 'in' and 'of' in the following sentence: Example 3 Oil stocks escaped the brunt of Friday 's selling and several were able to post gains , including Chevron , which rose 5/8 to 66 3/8 in Big Board composite trading of 2.4 million shares .</S>
    <S sid="79" ssid="67">The prepositions' main candidates for attachment would appear to be the previous verb, 'rose', and the baseNP heads between each preposition and this verb.</S>
    <S sid="80" ssid="68">They are less likely to modify a more distant verb such as 'escaped'.</S>
    <S sid="81" ssid="69">Question 3 allows the parser to prefer modification of the most recent verb &#8212; effectively another, weaker preference for right-branching structures.</S>
    <S sid="82" ssid="70">Table 2 shows that 94% of dependencies do not cross a verb, giving empirical evidence that question 3 is useful.</S>
    <S sid="83" ssid="71">Questions 4, 5 and 6 People find that punctuation is extremely useful for identifying phrase structure, and the parser described here also relies on it heavily.</S>
    <S sid="84" ssid="72">Commas are not considered to be words or modifiers in the dependency model &#8212; but they do give strong indications about the parse structure.</S>
    <S sid="85" ssid="73">Questions 4, 5 and 6 allow the parser to use this information.</S>
    <S sid="86" ssid="74">The maximum likelihood estimator in (7) is likely to be plagued by sparse data problems &#8212; C( (t77j, ti) (7T7h, th, ) , Ai,h3) may be too low to give a reliable estimate, or worse still it may be zero leaving the estimate undefined.</S>
    <S sid="87" ssid="75">(Collins 95) describes how a backed-off estimation strategy is used for making prepositional phrase attachment decisions.</S>
    <S sid="88" ssid="76">The idea is to back-off to estimates based on less context.</S>
    <S sid="89" ssid="77">In this case, less context means looking at the POS tags rather than the specific words.</S>
    <S sid="90" ssid="78">There are four estimates, El E2 E3 and E4) based respectively on: 1) both words and both tags; 2) cui and the two POS tags; 3) .thh, and the two POS tags; 4) the two POS tags alone. where V is the set of all words seen in training data: the other definitions of C follow similarly.</S>
    <S sid="91" ssid="79">Estimates 2 and 3 compete &#8212; for a given pair of words in test data both estimates may exist and they are equally 'specific' to the test case example.</S>
    <S sid="92" ssid="80">(Collins 95) suggests the following way of combining them, which favours the estimate appearing more often in training data: This gives three estimates: E1, E23 and E4, a similar situation to trigram language modeling for speech recognition (Jelinek 90), where there are trigram, bigram and unigram estimates.</S>
    <S sid="93" ssid="81">(Jelinek 90) describes a deleted interpolation method which combines these estimates to give a 'smooth' estimate, and the model uses a variation of this idea: (Jelinek 90) describes how to find A values in (15) and (16) which maximise the likelihood of held-out data.</S>
    <S sid="94" ssid="82">We have taken a simpler approach, namely: These A values have the desired property of increasing as the denominator of the more 'specific' estimator increases.</S>
    <S sid="95" ssid="83">We think that a proper implementation of deleted interpolation is likely to improve results, although basing estimates on co-occurrence counts alone has the advantage of reduced training times.</S>
    <S sid="96" ssid="84">The overall model would be simpler if we could do without the baseNP model and frame everything in terms of dependencies.</S>
    <S sid="97" ssid="85">However the baseNP model is needed for two reasons.</S>
    <S sid="98" ssid="86">First, while adjacency between words is a good indicator of whether there is some relationship between them, this indicator is made substantially stronger if baseNPs are reduced to a single word.</S>
    <S sid="99" ssid="87">Second, it means that words internal to baseNPs are not included in the co-occurrence counts in training data.</S>
    <S sid="100" ssid="88">Otherwise, in a phrase like 'The Securities and Exchange Commission closed yesterday', pre-modifying nouns like 'Securities' and 'Exchange' would be included in cooccurrence counts, when in practice there is no way that they can modify words outside their baseNP.</S>
    <S sid="101" ssid="89">The baseNP model can be viewed as tagging the gaps between words with S(tart), C(ontinue), E(nd), B(etween) or N(u11) symbols, respectively meaning that the gap is at the start of a BaseNP, continues a BaseNP, is at the end of a BaseNP, is between two adjacent baseNPs, or is between two words which are both not in BaseNPs.</S>
    <S sid="102" ssid="90">We call the gap before the ith word Gi (a sentence with n words has n &#8212; 1 gaps).</S>
    <S sid="103" ssid="91">For example, [ John Smith] [ the president ] of [ IBM ] has announced [ his resignation] [ yesterday ] John C Smith B the C president E of S IBM E has N announced S his C resignation B yesterday The baseNP model considers the words directly to the left and right of each gap, and whether there is a comma between the two words (we write ci = 1 if there is a comma, ci = 0 otherwise).</S>
    <S sid="104" ssid="92">Probability estimates are based on counts of consecutive pairs of words in unreduced training data sentences, where baseNP boundaries define whether gaps fall into the S, C, E, B or N categories.</S>
    <S sid="105" ssid="93">The probability of a baseNP sequence in an unreduced sentence S is then: The estimation method is analogous to that described in the sparse data section of this paper.</S>
    <S sid="106" ssid="94">The method is similar to that described in (Ramshaw and Marcus 95; Church 88), where baseNP detection is also framed as a tagging problem.</S>
    <S sid="107" ssid="95">The probability of a parse tree T, given a sentence S, is: The denominator in Equation (9) is not actually constant for different baseNP sequences, but we make this approximation for the sake of efficiency and simplicity.</S>
    <S sid="108" ssid="96">In practice this is a good approximation because most baseNP boundaries are very well defined, so parses which have high enough P(BIS) to be among the highest scoring parses for a sentence tend to have identical or very similar baseNPs.</S>
    <S sid="109" ssid="97">Parses are ranked by the following quantity9: Equations (19) and (11) define i)(BIS) and N(DIS,B).</S>
    <S sid="110" ssid="98">The parser finds the tree which maximises (20) subject to the hard constraint that dependencies cannot cross.</S>
    <S sid="111" ssid="99">91n fact we also model the set of unary productions, U, in the tree, which are of the form P &gt;.</S>
    <S sid="112" ssid="100">This introduces an additional term, P(UP,S), into (20).</S>
    <S sid="113" ssid="101">This section describes two modifications which improve the model's performance. in the chart Z &lt;.. X Y ..&gt; two of its children X and Y are separated by a comma, then the last word in Y must be directly followed by a comma, or must be the last word in the sentence.</S>
    <S sid="114" ssid="102">In training data 96% of commas follow this rule.</S>
    <S sid="115" ssid="103">The rule also has the benefit of improving efficiency by reducing the number of constituents in the chart. where T is the set of all tags.</S>
    <S sid="116" ssid="104">Hence C (a, c) is the number of times that the words a and c occur in the same sentence, ignoring their tags.</S>
    <S sid="117" ssid="105">The other definitions in (13) are similarly redefined, with POS tags only being used when backing off from lexical information.</S>
    <S sid="118" ssid="106">This makes the parser less sensitive to tagging errors.</S>
    <S sid="119" ssid="107">Second, for each word wi the tagger can provide the distribution of tag probabilities P(ti IS) (given the previous two words are tagged as in the best overall sequence of tags) rather than just the first best tag.</S>
    <S sid="120" ssid="108">The score for a parse in equation (20) then has an additional term, nin_i P(tilS), the product of probabilities of the tags which it contains.</S>
    <S sid="121" ssid="109">Ideally we would like to integrate POS tagging into the parsing model rather than treating it as a separate stage.</S>
    <S sid="122" ssid="110">This is an area for future research.</S>
  </SECTION>
  <SECTION title="3 The Parsing Algorithm" number="3">
    <S sid="123" ssid="1">The parsing algorithm is a simple bottom-up chart parser.</S>
    <S sid="124" ssid="2">There is no grammar as such, although in practice any dependency with a triple of nonterminals which has not been seen in training data will get zero probability.</S>
    <S sid="125" ssid="3">Thus the parser searches through the space of all trees with nonterminal triples seen in training data.</S>
    <S sid="126" ssid="4">Probabilities of baseNPs in the chart are calculated using (19), while probabilities for other constituents are derived from the dependencies and baseNPs that they contain.</S>
    <S sid="127" ssid="5">A dynamic programming algorithm is used: if two proposed constituents span the same set of words, have the same label, head, and distance from with the punctuation rule described in section 2.7; (3) is model (2) with POS tags ignored when lexical information is present; (4) is model (3) with probability distributions from the POS tagger.</S>
    <S sid="128" ssid="6">LR/LP labeled recall/precision.</S>
    <S sid="129" ssid="7">CBs is the average number of crossing brackets per sentence.</S>
    <S sid="130" ssid="8">0 CBs, &lt; 2 CBs are the percentage of sentences with 0 or &lt; 2 crossing brackets respectively. join to form a new constituent.</S>
    <S sid="131" ssid="9">Each operation gives two new probability terms: one for the baseNP gap tag between the two constituents, and the other for the dependency between the head words of the two constituents. the head to the left and right end of the constituent, then the lower probability constituent can be safely discarded.</S>
    <S sid="132" ssid="10">Figure 4 shows how constituents in the chart combine in a bottom-up manner.</S>
  </SECTION>
  <SECTION title="4 Results" number="4">
    <S sid="133" ssid="1">The parser was trained on sections 02- 21 of the Wall Street Journal portion of the Penn Treebank (Marcus et al. 93) (approximately 40,000 sentences), and tested on section 23 (2,416 sentences).</S>
    <S sid="134" ssid="2">For comparison SPATTER (Magerman 95; Jelinek et al. 94) was also tested on section 23.</S>
    <S sid="135" ssid="3">We use the PARSEVAL measures (Black et al. 91) to compare performance: number of correct constituents in proposed parse number of constituents in proposed parse number of correct constituents in proposed parse number of constituents in treebank parse of constituents which violate constituent boundaries with a constituent in the treebank parse.</S>
    <S sid="136" ssid="4">For a constituent to be 'correct' it must span the same set of words (ignoring punctuation, i.e. all tokens tagged as commas, colons or quotes) and have the same labell&#176; as a constituent in the treebank the model.</S>
    <S sid="137" ssid="5">The results are for all sentences of &lt; 100 words in section 23 using model (3).</S>
    <S sid="138" ssid="6">For 'no lexical information' all estimates are based on POS tags alone.</S>
    <S sid="139" ssid="7">For 'no distance measure' the distance measure is Question 1 alone (i.e. whether tb-3 precedes Or follows ti)h,)&#8226; parse.</S>
    <S sid="140" ssid="8">Four configurations of the parser were tested: (1) The basic model; (2) The basic model with the punctuation rule described in section 2.7; (3) Model (2) with tags ignored when lexical information is present, as described in 2.7; and (4) Model (3) also using the full probability distributions for POS tags.</S>
    <S sid="141" ssid="9">We should emphasise that test data outside of section 23 was used for all development of the model, avoiding the danger of implicit training on section 23.</S>
    <S sid="142" ssid="10">Table 3 shows the results of the tests.</S>
    <S sid="143" ssid="11">Table 4 shows results which indicate how different parts of the system contribute to performance.</S>
    <S sid="144" ssid="12">All tests were made on a Sun SPARCServer 1000E, using 100% of a 60Mhz SuperSPARC processor.</S>
    <S sid="145" ssid="13">The parser uses around 180 megabytes of memory, and training on 40,000 sentences (essentially extracting the co-occurrence counts from the corpus) takes under 15 minutes.</S>
    <S sid="146" ssid="14">Loading the hash table of bigram counts into memory takes approximately 8 minutes.</S>
    <S sid="147" ssid="15">Two strategies are employed to improve parsing efficiency.</S>
    <S sid="148" ssid="16">First, a constant probability threshold is used while building the chart - any constituents with lower probability than this threshold are discarded.</S>
    <S sid="149" ssid="17">If a parse is found, it must be the highest ranked parse by the model (as all constituents discarded have lower probabilities than this parse and could not, therefore, be part of a higher probability parse).</S>
    <S sid="150" ssid="18">If no parse is found, the threshold is lowered and parsing is attempted again.</S>
    <S sid="151" ssid="19">The process continues until a parse is found.</S>
    <S sid="152" ssid="20">Second, a beam search strategy is used.</S>
    <S sid="153" ssid="21">For each span of words in the sentence the probability, Ph, of the highest probability constituent is recorded.</S>
    <S sid="154" ssid="22">All other constituents spanning the same words must have probability greater than 9- for some constant beam size - constituents which fall out of this beam are discarded.</S>
    <S sid="155" ssid="23">The method risks introducing search-errors, but in practice efficiency can be greatly improved with virtually no loss of accuracy.</S>
    <S sid="156" ssid="24">Table 5 shows the trade-off between speed and accuracy as the beam is narrowed. as the beam-size is varied.</S>
    <S sid="157" ssid="25">Model (3) was used for this test on all sentences &lt; 100 words in section 23.</S>
  </SECTION>
  <SECTION title="5 Conclusions and Future Work" number="5">
    <S sid="158" ssid="1">We have shown that a simple statistical model based on dependencies between words can parse Wall Street Journal news text with high accuracy.</S>
    <S sid="159" ssid="2">The method is equally applicable to tree or dependency representations of syntactic structures.</S>
    <S sid="160" ssid="3">There are many possibilities for improvement, which is encouraging.</S>
    <S sid="161" ssid="4">More sophisticated estimation techniques such as deleted interpolation should be tried.</S>
    <S sid="162" ssid="5">Estimates based on relaxing the distance measure could also be used for smoothing at present we only back-off on words.</S>
    <S sid="163" ssid="6">The distance measure could be extended to capture more context, such as other words or tags in the sentence.</S>
    <S sid="164" ssid="7">Finally, the model makes no account of valency.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="6">
    <S sid="165" ssid="1">I would like to thank Mitch Marcus, Jason Eisner, Dan Melamed and Adwait Ratnaparkhi for many useful discussions, and for comments on earlier versions of this paper.</S>
    <S sid="166" ssid="2">I would also like to thank David Magerman for his help with testing SPATTER.</S>
  </SECTION>
</PAPER>
