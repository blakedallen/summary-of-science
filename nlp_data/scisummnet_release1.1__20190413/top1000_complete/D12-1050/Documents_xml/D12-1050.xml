<PAPER>
  <S sid="0">A Comparison of Vector-based Representations for Semantic Composition</S>
  <ABSTRACT>
    <S sid="1" ssid="1">In this paper we address the problem of modeling compositional meaning for phrases and sentences using distributional methods.</S>
    <S sid="2" ssid="2">We experiment with several possible combinations of representation and composition, exhibiting varying degrees of sophistication.</S>
    <S sid="3" ssid="3">Some are shallow while others operate over syntactic structure, rely on parameter learning, or require access to very large corpora.</S>
    <S sid="4" ssid="4">We find that shallow approaches are as good as more computationally intensive alternatives with regards to two particular tests: (1) phrase similarity and (2) paraphrase detection.</S>
    <S sid="5" ssid="5">The sizes of the involved training corpora and the generated vectors are not as important as the fit between the meaning representation and compositional method.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">Distributional models of semantics have seen considerable success at simulating a wide range of behavioral data in tasks involving semantic cognition and also in practical applications.</S>
    <S sid="7" ssid="2">For example, they have been used to model judgments of semantic similarity (McDonald, 2000) and association (Denhire and Lemaire, 2004; Griffiths et al., 2007) and have been shown to achieve human level performance on synonymy tests (Landauer and Dumais, 1997; Griffiths et al., 2007) such as those included in the Test of English as a Foreign Language (TOEFL).</S>
    <S sid="8" ssid="3">This ability has been put to practical use in numerous natural language processing tasks such as automatic thesaurus extraction (Grefenstette, 1994), word sense discrimination (Sch&#168;utze, 1998), language modeling (Bellegarda, 2000), and the identification of analogical relations (Turney, 2006).</S>
    <S sid="9" ssid="4">While much research has been directed at the most effective ways of constructing representations for individual words, there has been far less consensus regarding the representation of larger constructions such as phrases and sentences.</S>
    <S sid="10" ssid="5">The problem has received some attention in the connectionist literature, particularly in response to criticisms of the ability of connectionist representations to handle complex structures (Smolensky, 1990; Plate, 1995).</S>
    <S sid="11" ssid="6">More recently, several proposals have been put forward for computing the meaning of word combinations in vector spaces.</S>
    <S sid="12" ssid="7">This renewed interest is partly due to the popularity of distributional methods and their application potential to tasks that require an understanding of larger phrases or complete sentences.</S>
    <S sid="13" ssid="8">For example, Mitchell and Lapata (2010) introduce a general framework for studying vector composition, which they formulate as a function f of two vectors u and v. Different composition models arise, depending on how f is chosen.</S>
    <S sid="14" ssid="9">Assuming that composition is a linear function of the Cartesian product of u and v allows to specify additive models which are by far the most common method of vector combination in the literature (Landauer and Dumais, 1997; Foltz et al., 1998; Kintsch, 2001).</S>
    <S sid="15" ssid="10">Alternatively, assuming that composition is a linear function of the tensor product of u and v, gives rise to models based on multiplication.</S>
    <S sid="16" ssid="11">One of the most sophisticated proposals for semantic composition is that of Clark et al. (2008) and the more recent implementation of Grefenstette and Sadrzadeh (2011a).</S>
    <S sid="17" ssid="12">Using techniques from logic, category theory, and quantum information they develop a compositional distributional semantics that brings type-logical and distributional vector space models together.</S>
    <S sid="18" ssid="13">In their framework, words belong to different type-based categories and different categories exist in different dimensional spaces.</S>
    <S sid="19" ssid="14">The category of a word is decided by the number and type of adjoints (arguments) it can take and the composition of a sentence results in a vector which exists in sentential space.</S>
    <S sid="20" ssid="15">Verbs, adjectives and adverbs act as relational functions, are represented by matrices, and modify the properties of nouns, that are represented by vectors (see also Baroni and Zamparelli (2010) for a proposal similar in spirit).</S>
    <S sid="21" ssid="16">Clarke (2012) introduces context-theoretic semantics, a general framework for combining vector representations, based on a mathematical theory of meaning as context, and shows that it can be used to describe a variety of models including that of Clark et al. (2008).</S>
    <S sid="22" ssid="17">Socher et al. (2011a) and Socher et al.</S>
    <S sid="23" ssid="18">(2011b) present a framework based on recursive neural networks that learns vector space representations for multi-word phrases and sentences.</S>
    <S sid="24" ssid="19">The network is given a list of word vectors as input and a binary tree representing their syntactic structure.</S>
    <S sid="25" ssid="20">Then, it computes an n-dimensional representation p of two n-dimensional children and the process is repeated at every parent node until a representation for a full tree is constructed.</S>
    <S sid="26" ssid="21">Parent representations are computed essentially by concatenating the representations of their children.</S>
    <S sid="27" ssid="22">During training, the model tries to minimize the reconstruction errors between the n-dimensional parent vectors and those representing their children.</S>
    <S sid="28" ssid="23">This model can also compute compositional representations when the tree structure is not given, e.g., by greedily inferring a binary tree.</S>
    <S sid="29" ssid="24">Although the type of function used for vector composition has attracted much attention, relatively less emphasis has been placed on the basic distributional representations on which the composition functions operate.</S>
    <S sid="30" ssid="25">In this paper, we examine three types of distributional representation of increasing sophistication and their effect on semantic composition.</S>
    <S sid="31" ssid="26">These include a simple semantic space, where a word&#8217;s vector represents its co-occurrence with neighboring words (Mitchell and Lapata, 2010), a syntax-aware space based on weighted distributional tuples that encode typed co-occurrence relations among words (Baroni and Lenci, 2010), and word embeddings computed with a neural language model (Bengio, 2001; Collobert and Weston, 2008).</S>
    <S sid="32" ssid="27">Word embeddings are distributed representations, low-dimensional and real-valued.</S>
    <S sid="33" ssid="28">Each dimension of the embedding represents a latent feature of the word, hopefully capturing useful syntactic and semantic properties.</S>
    <S sid="34" ssid="29">Using these representations, we construct several compositional models, based on addition, multiplication, and recursive neural networks.</S>
    <S sid="35" ssid="30">We assess the effectiveness of these models using two evaluation protocols.</S>
    <S sid="36" ssid="31">The first one involves modeling similarity judgments for short phrases gathered in human experiments (Mitchell and Lapata, 2010).</S>
    <S sid="37" ssid="32">The second one is paraphrase detection, i.e., the task of examining two sentences and determining whether they have the same meaning (Socher et al., 2011a).</S>
    <S sid="38" ssid="33">We find that shallow approaches are as good as more computationally intensive alternatives.</S>
    <S sid="39" ssid="34">They achieve considerable semantic expressivity without any learning, sophisticated linguistic processing, or access to very large corpora.</S>
    <S sid="40" ssid="35">Our contributions in this work are three-fold: an empirical comparison of a broad range of compositional models, some of which are introduced here for the first time; the use of an evaluation methodology that takes into account the full spectrum of compositionality from phrases to sentences; and the empirical finding that relatively simple compositional models can be used to perform competitively on the paraphrase detection and phrase similarity tasks.</S>
  </SECTION>
  <SECTION title="2 Modeling" number="2">
    <S sid="41" ssid="1">The elementary objects that we operate on are vectors associated with words.</S>
    <S sid="42" ssid="2">We instantiate these word representations following three distinct semantic space models which we describe in Section 2.1 below.</S>
    <S sid="43" ssid="3">Analogously, in Section 2.2 we consider three methods of vector composition, i.e., how a phrase or a sentence can be represented as a vector using the vectors of its constituent words.</S>
    <S sid="44" ssid="4">Combining different vector representations and composition methods gives rise to several compositional models whose performance we evaluate in Sections 3 and 4.</S>
    <S sid="45" ssid="5">For all of our experiments we employ column vectors from a Cartesian, finitely-dimensional space.</S>
    <S sid="46" ssid="6">The dimensionality will depend on the source of the vectors involved.</S>
    <S sid="47" ssid="7">Similarly, the component values inside each source&#8217;s vectors are not to be interpreted in the same manner.</S>
    <S sid="48" ssid="8">Nonetheless, they have in common that they originate from distributive corpus statistics. meaning is commonly represented in a highdimensional space, where each component corresponds to some contextual element in which the word is found.</S>
    <S sid="49" ssid="9">The contextual elements can be words themselves, or larger linguistic units such as sentences or documents, or even more complex linguistic representations such as the argument slots of predicates.</S>
    <S sid="50" ssid="10">A semantic space that is often employed in studying compositionality across a variety of tasks (Mitchell and Lapata, 2010; Grefenstette and Sadrzadeh, 2011a) uses a context window of five words on either side of the target word, and 2,000 vector dimensions.</S>
    <S sid="51" ssid="11">These are the common context words in the British National Corpus (BNC), a corpus of about 100 million tokens.</S>
    <S sid="52" ssid="12">Their values are set to the ratio of the probability of the context word given the target word to the probability of the context word overall.</S>
    <S sid="53" ssid="13">More formally, let us consider the BNC as a set of sentences: ni ) from the BNC&#8217;s vocabulary VocBNC.</S>
    <S sid="54" ssid="14">Then f reqw is the amount of times that each word w &#8712; VocBNC appears in the BNC.</S>
    <S sid="55" ssid="15">Mitchell and Lapata (2010) collect the M most frequent non-stoplist words in the set ctxttop = {w(top)1, , wM(top) } and let them consitute the word vectors&#8217; dimensions.</S>
    <S sid="56" ssid="16">Each dimension&#8217;s value is obtained from a co-occurrence count: for w &#8712; VocBNC and j = 1,...,M. Using these counts, they define word vectors component-wise. for j = 1,...,M, where totalCount is the total number of words in the BNC.</S>
    <S sid="57" ssid="17">This space is relatively simple, it has few parameters, requires no preprocessing other than tokenization and involves no syntactic information or parameter learning.</S>
    <S sid="58" ssid="18">Despite its simplicity, it is a good starting point for studying representations for compositional models as a baseline against which to evaluate more elaborate models.</S>
    <S sid="59" ssid="19">Neural Language Model Another perhaps less well-known approach to meaning representation is to represent words as continuous vectors of parameters.</S>
    <S sid="60" ssid="20">Such word vectors can be obtained with an unsupervised neural language model (NLM, Bengio (2001); Collobert and Weston (2008)) which jointly learns an embedding of words into a vector space and uses these vectors to predict how likely a word is, given its context.</S>
    <S sid="61" ssid="21">We induced word embeddings with Collobert and Weston (2008)&#8217;s neural language model.</S>
    <S sid="62" ssid="22">The model is discriminative and non-probabilistic.</S>
    <S sid="63" ssid="23">Each word i &#8712; D (the vocabulary) is embedded into a d-dimensional space using a lookup table LTW(&#183;): where W &#8712; Rd&#215;|D |is a matrix of parameters to be learned.</S>
    <S sid="64" ssid="24">Wi &#8712; Rd is the i-th column of W and d is the word vector size to be chosen by the user.</S>
    <S sid="65" ssid="25">The parameters W are automatically trained during the learning process using backpropagation.</S>
    <S sid="66" ssid="26">Specifically, at each training update, the model reads an n-gram x = (w1,...,wn) from the corpus.</S>
    <S sid="67" ssid="27">The n-gram is paired with a corrupted n-gram x&#732; = (w1,..., &#732;wn) where &#732;wn =6 wn is chosen uniformly from the vocabulary.</S>
    <S sid="68" ssid="28">The model concatenates the learned embeddings of the n words and predicts a score for the n-gram sequence using the learned embeddings as features.</S>
    <S sid="69" ssid="29">The training criterion is that n-grams that are present in the training corpus must have a score at least some margin higher than the corrupted n-grams.</S>
    <S sid="70" ssid="30">The model learns via gradient descent over the neural network parameters and the embedding lookup table.</S>
    <S sid="71" ssid="31">Word vectors are stored in a word embedding matrix which captures syntactic and semantic information from co-occurrence statistics.</S>
    <S sid="72" ssid="32">As these representations are learned, albeit in an unsupervised manner, one would hope that they capture word meanings more succinctly, compared to the simpler distributional representations that are merely based on co-occurrence.</S>
    <S sid="73" ssid="33">We trained the neural language model on the BNC.</S>
    <S sid="74" ssid="34">We optimized the model&#8217;s parameters on a word similarity task using 4% of the BNC as development data.</S>
    <S sid="75" ssid="35">Specifically, we used WordSim353, a benchmark dataset (Finkelstein et al., 2001), consisting of relatedness judgments (on a scale of 0 to 10) for 353 word pairs.</S>
    <S sid="76" ssid="36">We experimented with vectors of varying dimensionality (ranging from 50 to 200, with a step size of 50).</S>
    <S sid="77" ssid="37">The size of the target word&#8217;s context window was 2, 3 and 4 in turn.</S>
    <S sid="78" ssid="38">The rate at which embeddings were learned ranged from 3.4 x 10&#8722;10 to 6.7 x 10&#8722;10 to 10&#8722;9.</S>
    <S sid="79" ssid="39">We ran each training process for 1.1 x 108 to 2.7 x 108 iterations (ca.</S>
    <S sid="80" ssid="40">2 days).</S>
    <S sid="81" ssid="41">We obtained the best results with 50 dimensions, a context window of size 4, and a embedding learning rate of 10&#8722;9.</S>
    <S sid="82" ssid="42">The NLM with these parameters was then trained for 1.51x109 iterations (ca.</S>
    <S sid="83" ssid="43">2 weeks).</S>
    <S sid="84" ssid="44">Figure 1 illustrates a two-dimensional projection of the embeddings for the 500 most common words in the BNC.</S>
    <S sid="85" ssid="45">We only show two out of the actual 50 dimensions involved, but one can already begin to see clusterings of a syntactic and semantic nature.</S>
    <S sid="86" ssid="46">In one corner, for example, we encounter a grouping of possessive pronouns together with the possessive clitic &#8217;s.</S>
    <S sid="87" ssid="47">The singular ones my, her and his are closely positioned, as are the plural ones our, your and their.</S>
    <S sid="88" ssid="48">Also, there is a clustering of sociopolitical terms, such as international, country, national, government, and council.</S>
    <S sid="89" ssid="49">Distributional Memory Tensor Baroni and Lenci (2010) present Distributional Memory, a generalized framework for distributional semantics from which several special-purpose models can be derived.</S>
    <S sid="90" ssid="50">In their framework distributional information is extracted from the corpus once, in the form of a set of weighted word-link-word tuples arranged into a third-order tensor.</S>
    <S sid="91" ssid="51">Different matrices are then generated from the tensor, and their rows and columns give rise to different semantic spaces appropriate for capturing different semantic problems.</S>
    <S sid="92" ssid="52">In this way, the same distributional information can be shared across tasks such as word similarity or analogical learning.</S>
    <S sid="93" ssid="53">More formally, Baroni and Lenci (2010) construct a 3-dimensional tensor T assigning a value c to instances of word pairs w,v and a connecting link-word l. This representation operates over a dependency-parsed corpus and the scores c are obtained via counting the occurrences of tuples, and weighting the raw counts by mutual information.</S>
    <S sid="94" ssid="54">Table 1 presents examples of tensor entries.</S>
    <S sid="95" ssid="55">These were taken from a distributional memory tensor1 that Baroni and Lenci obtained via preprocessing several corpora: the web-derived ukWac corpus of about 1.915 billion words, a mid-2009 dump of the English Wikipedia containing about 820 million words, and the BNC.</S>
    <S sid="96" ssid="56">Extracting a 3-dimensional tensor from the BNC alone would create very sparse representations.</S>
    <S sid="97" ssid="57">We therefore extract so-called word-fibres, essentially projections onto a lower-dimensional subspace, from the same tensor Baroni and Lenci (2010) collectively derived from the 3 billion word corpus just described (henceforth 3-BWC).</S>
    <S sid="98" ssid="58">We view the 3-dimensional tensor as a mapping which assigns each target word w a non-zero value c, given the context (l,v).</S>
    <S sid="99" ssid="59">All wordcontext combinations not listed in T are implicitly assigned a zero value.</S>
    <S sid="100" ssid="60">Now we consider two possible approaches for obtaining vectors, depending on their application.</S>
    <S sid="101" ssid="61">First, we let the D most frequent contexts constitute the D dimensions that each word vector will have.</S>
    <S sid="102" ssid="62">Table 2 shows the 11 contexts (l,v) that appear most frequently in T. Thus, each target word&#8217;s vector is defined component-wise as: for j = 1,...,D. This approach is used when a fixed vector dimensionality is necessary.</S>
    <S sid="103" ssid="63">A more dynamic approach is possible when very few words w1,...,wn are involved in a test.</S>
    <S sid="104" ssid="64">Their representations can then have a denser format, that is, with no zero-valued components.</S>
    <S sid="105" ssid="65">For this we identify the set of contexts common to the words involved, ctxtdyn = {(l(dyn) Each context (l,v) again constitutes a vector dimension.</S>
    <S sid="106" ssid="66">The dimensionality varies strongly depending on the selection of words, but if n does not exceed 4, the dimensionality |ctxtdyn |will typically be substantial enough.</S>
    <S sid="107" ssid="67">In this approach, each word&#8217;s vector consists of the values c found along with that word and its context in the tensor.</S>
    <S sid="108" ssid="68">In our experiments we compose word vectors to create representations for phrase vectors and sentence vectors.</S>
    <S sid="109" ssid="69">The phrases we are interested in consist of two words each: an adjective and a noun like black hair, a compound noun made up of two nouns such as oil industry, or a verbal phrase with a transitive verb and an object noun, e.g., pour tea.</S>
    <S sid="110" ssid="70">Conceiving of a phrase phr = (w1,w2) as a binary tuple of words, we obtain its vector from its words&#8217; vectors either by addition: In the same way we acquire a vector senVeci representing a sentence Seni = (w(i) ni ) from the vectors for w1,...,wni.</S>
    <S sid="111" ssid="71">We simply sum the existing word vectors, that is, vectors obtained via the respective corpus for words that are not on our stoplist: And do the same with point-wise multiplication: The multiplication model in (13) can be seen as an instantiation of the categorical compositional framework put forward by Clark et al. (2008).</S>
    <S sid="112" ssid="72">In fact, a variety of multiplication-based models can be derived from this framework; and comparisons against component-wise multiplication on phrase similarity tasks yield comparable results (Grefenstette and Sadrzadeh, 2011a; Grefenstette and Sadrzadeh, 2011b).</S>
    <S sid="113" ssid="73">We thus opt for the model (13) as an example of compositional models based on multiplication due to its good performance across a variety of tasks, including language modeling and prediction of reading difficulty (Mitchell, 2011).</S>
    <S sid="114" ssid="74">Our third method, for creating phrase and sentence vectors alike, is the application of Socher et al. (2011a)&#8217;s model.</S>
    <S sid="115" ssid="75">They use the Stanford parser (Klein and Manning, 2003) to create a binary parse tree for each input phrase or sentence.</S>
    <S sid="116" ssid="76">This tree is then used as the basis for a deep recursive autoencoder (RAE).</S>
    <S sid="117" ssid="77">The aim is to construct a vector representation for the tree&#8217;s root bottom-up where the leaves contain word vectors.</S>
    <S sid="118" ssid="78">The latter can in theory be provided by any type of semantic space, however Socher et al. use word embeddings provided by the neural language model (Collobert and Weston, 2008).</S>
    <S sid="119" ssid="79">Given the binary tree input structure, the model computes parent representations p from their children (c1,c2) using a standard neural network layer: where [c1;c2] is the concatenation of the two children, f is an element-wise activation function such as tanh, b is a bias term, and W E Rnx2n is an encoding matrix that we want to learn during training.</S>
    <S sid="120" ssid="80">One way of assessing how well p represents its direct children is to decode their vectors in a reconstruction layer: During training, the goal is to minimize the reconstruction errors of all input pairs at nonterminal nodes p in a given parse tree by computing the square of the Euclidean distance between the original input and its reconstruction: Socher et al. (2011a) extend the standard recursive autoencoder sketched above in two ways.</S>
    <S sid="121" ssid="81">Firstly, they present an unfolding autoencoder that tries to reconstruct all leaf nodes underneath each node rather than only its direct children.</S>
    <S sid="122" ssid="82">And secondly, instead of transforming the two children directly into a parent p, they introduce another hidden layer inbetween.</S>
    <S sid="123" ssid="83">We obtained three compositional models per representation resulting in nine compositional models overall.</S>
    <S sid="124" ssid="84">Plugging different representations into the additive and multiplicative models is relatively straightforward.</S>
    <S sid="125" ssid="85">The RAE can also be used with arbitrary word vectors.</S>
    <S sid="126" ssid="86">Socher et al. (2011a) obtain best results with 100-dimensional vectors which we also used in our experiments.</S>
    <S sid="127" ssid="87">NLM vectors were trained with this dimensionality on the BNC for 7.9 x 108 iterations (with window size 4 and an embedding learning rate of 10&#8722;9).</S>
    <S sid="128" ssid="88">We constructed a simple distributional space with M = 100 dimensions, i.e., those connected to the 100 most frequent co-occurrence words.</S>
    <S sid="129" ssid="89">In the case of vectors obtained from Baroni and Lenci (2010)&#8217;s DM tensor, we differentiated between phrases and sentences, due to the disparate amount of words contained in them (see Section 2.1).</S>
    <S sid="130" ssid="90">To represent phrases, we used vectors of dynamic dimensionality, since these form a richer and denser representation.</S>
    <S sid="131" ssid="91">The sentences considered in Section 4 are too large for this approach and all word vectors must be members of the same vector space.</S>
    <S sid="132" ssid="92">Hence, these sentence vectors have fixed dimensionality D = 100, consisting of the &#8220;most significant&#8221; 100 dimensions, i.e., those reflecting the 100 most frequent contexts.</S>
  </SECTION>
  <SECTION title="3 Experiment 1: Phrase Similarity" number="3">
    <S sid="133" ssid="1">Our first experiment focused on modeling similarity judgments for short phrases gathered in human experiments.</S>
    <S sid="134" ssid="2">Distributional representations of individual words are commonly evaluated on tasks based on their ability to model semantic similarity relations, e.g., synonymy or priming.</S>
    <S sid="135" ssid="3">Thus, it seems appropriate to evaluate phrase representations in a similar manner.</S>
    <S sid="136" ssid="4">Specifically, we used the dataset from Mitchell and Lapata (2010) which contains similarity judgments for adjective-noun, noun-noun and verb-object phrases, respectively.2 Each item is a phrase pair phr1, phr2 which has a human rating from 1 (very low similarity) to 7 (very high similarity).</S>
    <S sid="137" ssid="5">Using the composition models described above, we compute the cosine similarity of phr1 and phr2: Model similarities were evaluated against the human similarity ratings using Spearman&#8217;s p correlation coefficient.</S>
    <S sid="138" ssid="6">Table 3 summarizes the performance of the various models on the phrase similarity dataset.</S>
    <S sid="139" ssid="7">Rows in the table correspond to different vector representations: the simple distributional semantic space (SDS) from Mitchell and Lapata (2010), Baroni and Lenci&#8217;s (2010) distributional memory tensor (DM) and the neural language model (NLM), for each phrase combination: adjective noun (Adj-N), nounnoun (N-N) and verb object (V-Obj).</S>
    <S sid="140" ssid="8">For each phrase type we report results for each compositional model, namely additive (+), multiplicative (0) and recursive autoencoder (RAE).</S>
    <S sid="141" ssid="9">The table also shows the dimensionality of the input vectors next to the vector representation.</S>
    <S sid="142" ssid="10">As can be seen, for SDS the best performing model is multiplication, as it is mostly for DM.</S>
    <S sid="143" ssid="11">With regard to NLM, vector addition yields overall better results.</S>
    <S sid="144" ssid="12">In general, neither DM or NLM in any compositional configuration are able to outperform SDS with multiplication.</S>
    <S sid="145" ssid="13">All models in Table 3 are significantly correlated with the human similarity judgments (p &lt; 0.01).</S>
    <S sid="146" ssid="14">Spearman&#8217;s p differences of 0.3 or more are significant at the 0.01 level, using a ttest (Cohen and Cohen, 1983).</S>
  </SECTION>
  <SECTION title="4 Experiment 2: Paraphrase Detection" number="4">
    <S sid="147" ssid="1">Although the phrase similarity task gives a fairly direct insight into semantic similarity and compositional representations, it is somewhat limited in scope as it only considers two-word constructions rather than naturally occurring sentences.</S>
    <S sid="148" ssid="2">Ideally, we would like to augment our evaluation with a task which is based on large quantities of natural data and for which vector composition has practical consequences.</S>
    <S sid="149" ssid="3">For these reasons, we used the Microsoft Research Paraphrase Corpus (MSRPC) introduced by Dolan et al. (2004).</S>
    <S sid="150" ssid="4">The corpus consists of sentence pairs Seni1,Seni2 and labels indicating whether they are in a paraphrase relationship or not.</S>
    <S sid="151" ssid="5">The vector representations obtained from our various compositional models were used as features for the paraphrase classification task.</S>
    <S sid="152" ssid="6">The MSRPC dataset contains 5,801 sentence pairs, we used the standard split of 4,076 training pairs (67.5% of which are paraphrases) and 1,725 test pairs (66.5% of which are paraphrases).</S>
    <S sid="153" ssid="7">In order to judge whether two sentences have the same meaning we employ Fan et al. (2008)&#8217;s liblinear classifier.</S>
    <S sid="154" ssid="8">For each of our three vector sources and three different compositional methods, we create the following features: (a) a vector representing the pair of input sentences either via concatenation (&#8220;con&#8221;) or subtraction (&#8220;sub&#8221;); (b) a vector encoding which words appear therein (&#8220;enc&#8221;); and (c) a vector made up of the following four other pieces of information: the cosine similarity of the sentence vectors, the length of Seni1, the length of Seni2, and the unigram overlap among the two sentences.</S>
    <S sid="155" ssid="9">In order to encode which words appear in each sentence and how often, we define a vector wdCounti for sentence Seni and enumerate all words occuring in the MSRPC: giving the word count vectors nMSRPC dimensions.</S>
    <S sid="156" ssid="10">Thus the k-th component of wdCounti is the frequency with which the word w(MSRPC) appears in for k = 1,...,nMSRPC.</S>
    <S sid="157" ssid="11">Even though nMSRPC may be large, the computer files storing our feature vectors do not explode in size because wdCount contains many zeros and the classifier allows a sparse notation of (non-zero) feature values.</S>
    <S sid="158" ssid="12">Regarding the last four features, we measured the similarity between sentences the same way as we did with phrases in section 3.</S>
    <S sid="159" ssid="13">Note that this is the cosine of the angle between senVeci1 and senVeci2.</S>
    <S sid="160" ssid="14">This enables us to observe the similarity or dissimilarity of two sentences independent of their sentence length.</S>
    <S sid="161" ssid="15">Even though each contained word increases or decreases the norm of the resulting sentence vector, this does not distort the overall similarity value, due to normalization.</S>
    <S sid="162" ssid="16">The lengths of Seni1 and Seni2 are simply the number of words they contain.</S>
    <S sid="163" ssid="17">The unigram overlap feature value may be viewed as the cardinality of the intersection of each sentence&#8217;s multisetbag-of-words.</S>
    <S sid="164" ssid="18">The latter is encoded in the alreadyintroduced wdCount vectors.</S>
    <S sid="165" ssid="19">Therefore, In order to establish which features work best for each representation and composition method, we exhaustively explored all combinations on a development set (20% of the original MSRPC training set).</S>
    <S sid="166" ssid="20">Tables 4 (accuracy) and 5 (F1) show our results on the test set with the best feature combinations for each model (shown in parentheses).</S>
    <S sid="167" ssid="21">Each row corresponds to a different type of composition and each column to a different word representation model.</S>
    <S sid="168" ssid="22">As can be seen, the distributional memory (DM) is the best performing representation for the additive composition model.</S>
    <S sid="169" ssid="23">The neural language model (NLM) gives best results for the recursive autoencoder (RAE), although the other two representations come close.</S>
    <S sid="170" ssid="24">And finally the simple distributional semantic space (SDS) works best with multiplication.</S>
    <S sid="171" ssid="25">Also note that the best performing models, namely DM with addition and SDS with multiplication, use a basic feature space consisting only of the cosine similarity of the composed sentence vectors, the length of the two sentences involved, and their unigram word overlap.</S>
    <S sid="172" ssid="26">Although our intention was to use the paraphrase detection task as a test-bed for evaluating compositional models rather than achieving state-of-the-art results, Table 6 compares our approach against previous work on the same task and dataset.</S>
    <S sid="173" ssid="27">Initial research concentrated on individual words rather than sentential representations.</S>
    <S sid="174" ssid="28">Several approaches used WordNet in conjunction with distributional similarity in an attempt to detect meaning conveyed by synonymous words (Islam and Inkpen, 2007; Mihalcea et al., 2006; Fernando and Stevenson, 2008).</S>
    <S sid="175" ssid="29">More recently, the addition of syntactic features based on dependency parse trees (Wan et al., 2006; Das and Smith, 2009) has been shown to substantially boost performance.</S>
    <S sid="176" ssid="30">The model of Das and Smith (2009), for example, uses quasi-synchronous dependency grammar to model the structure of the sentences involved in the comparison and their correspondences.</S>
    <S sid="177" ssid="31">Socher et al. (2011a) obtain an accuracy that is higher than previously published results.</S>
    <S sid="178" ssid="32">This model is more sophisticated than the one we used in our experiments (see Table 4 and 5).</S>
    <S sid="179" ssid="33">Rather than using the output of the RAE as features for the classifier, it applies dynamic pooling, a procedure that takes a similarity matrix as input (e.g., created by sentences with differing lengths) and maps it to a matrix of fixed size that represents more faithfully the global similarity structure.3 Overall, we observe that our own models do as well as some of the models that employ WordNet and more sophisticated syntactic features.</S>
    <S sid="180" ssid="34">With regard to F1, we are comparable with Das and Smith (2009) and Socher et al. (2011a) without using elaborate features, or any additional manipulations over and above the output of the composition functions 3Without dynamic pooling, their model yields an accuracy of 74.2. which if added could increase performance.</S>
  </SECTION>
  <SECTION title="5 Discussion" number="5">
    <S sid="181" ssid="1">In this paper we systematically compared three types of distributional representation and their effect on semantic composition.</S>
    <S sid="182" ssid="2">Our comparisons involved a simple distributional semantic space (Mitchell and Lapata, 2010), word embeddings computed with a neural language model (Collobert and Weston, 2008) and a representation based on weighted word-link-word tuples arranged into a third-order tensor (Baroni and Lenci, 2010).</S>
    <S sid="183" ssid="3">These representations vary in many respects: the amount of preprocessing and linguistic information involved (the third-order tensor computes semantic representations over parsed corpora), whether the semantic space is the by-product of a learning process (in the neural language model the parameters of the lookup table must be learned), and data requirements (the third-order tensor involves processing billions of words).</S>
    <S sid="184" ssid="4">These representations served as input to three composition methods involving addition, multiplication and a deep recursive autoencoder.</S>
    <S sid="185" ssid="5">Again these methods differ in terms of how they implement compositionality: addition and multiplication are commutative and associative operations and thus ignore word order and, more generally, syntactic structure.</S>
    <S sid="186" ssid="6">In contrast, the recursive autoencoder is syntax-aware as it operates over a parse tree.</S>
    <S sid="187" ssid="7">However, the composed representations must be learned with a neural network.</S>
    <S sid="188" ssid="8">We evaluated nine models on the complementary tasks of phrase similarity and paraphrase detection.</S>
    <S sid="189" ssid="9">The former task simplifies the challenge of finding an adequate method of composition and places more emphasis on the representation, whereas the latter poses, in a sense, the ultimate challenge for composition models.</S>
    <S sid="190" ssid="10">It involves entire sentences exhibiting varied syntactic constructions and in the limit involves genuine natural language undertanding.</S>
    <S sid="191" ssid="11">Across both tasks our results deliver a consistent message: simple is best.</S>
    <S sid="192" ssid="12">Despite being in theory more expressive, the representations obtained by the neural language model and the third-order tensor cannot match the simple semantic space on the phrase similarity task.</S>
    <S sid="193" ssid="13">In this task syntax-oblivious composition models are superior to the more sophisticated recursive autoencoder.</S>
    <S sid="194" ssid="14">The latter performs better on the paraphrase detection task when its output is fed to a classifier.</S>
    <S sid="195" ssid="15">The simple semantic space may not take word order or sentence structure into account, but nevertheless achieves considerable semantic expressivity: it is on par with the third-order tensor without having access to as much data (3 billion words) or a syntactically parsed corpus.</S>
    <S sid="196" ssid="16">What do these findings tell us about the future of compositional models for distributional semantics?</S>
    <S sid="197" ssid="17">The problem of finding the right methods of vector composition cannot be pursued independent of the choice of lexical representation.</S>
    <S sid="198" ssid="18">Having tested many model combinations, we argue that in a good model of distributive semantics representation and composition must go hand in hand, i.e., they must be mutually learned.</S>
    <S sid="199" ssid="19">Acknowledgments We are grateful to Jeff Mitchell for his help with the re-implementation of his models.</S>
    <S sid="200" ssid="20">Thanks to Frank Keller and Micha Elsner for their input on earlier versions of this work and to Richard Socher for technical assistance.</S>
    <S sid="201" ssid="21">We acknowledge the support of EPSRC through project grant EP/I032916/1.</S>
  </SECTION>
</PAPER>
