<PAPER>
  <S sid="0" ssid="0">A Uniform Architecture for Parsing and Generation Stuart M. SHIEBER Artificial Intelligence Center SRI International Menlo Park, California, USA* Abst rac t The use of a single grammar for both parsing and generation is an idea with a certain elegance, the desirability of which several researchers have noted.</S>
  <S sid="1" ssid="1">In this paper, we discuss a more radical possibility: not only can a single grammar be used by different processes engaged in various "directions" of processing, but one and the same language-processing archi- tecture can be used for processing the grammar in the various modes.</S>
  <S sid="2" ssid="2">In particular, parsing and generation can be viewed as two processes engaged in by a single parameterized theo- rem pr6ver for the logical interpretation f the formalism.</S>
  <S sid="3" ssid="3">We discuss our current implementation f such an architecture, which is parameterized in such a way that it can be used for either purpose with grammars written in the PATR formal- ism.</S>
  <S sid="4" ssid="4">Furthermore, the architecture allows fine tuning to re- flect different processing strategies, including parsing models intended to mimic psycholinguistic phenomena.</S>
  <S sid="5" ssid="5">This tuning allows the parsing system to operate within the same realm of efficiency as previous architectures for parsing alone, but with much greater flexibility for engaging in other processing regimes.</S>
  <S sid="6" ssid="6">1 Introduction the use of a single grammar for both parsing and generation is an idea ~ith a certain elegance, the desirability of which several researchers nave noted.</S>
  <S sid="7" ssid="7">Of course, judging the correctness of such a system re- quires a characterization f the meaning of grammars that is indepen- dent of their use by a particular processing, mechanism--that is, the brmalism in which the grammars are expressed must have an abstract ~emantics.</S>
  <S sid="8" ssid="8">As a paradigm example of such a formalism, we might take ~ny of the various logic- or unification-based grammar formalisms.</S>
  <S sid="9" ssid="9">As described by Pereira and Warren [1983], the parsing of strings ~ccording to the specifications ofa grammar with an independent log- cal semantics can be thought of as the constructive proving of the ;trings grammaticality: parsing can he viewed as logical deduction.</S>
  <S sid="10" ssid="10">-3ut, given a deductive framework that can represent the semantics ff the formalism abstractly enough to be independent of processing, he generation of strings matching some criteria can equally well be hought of as a deductive process, namely, a process of constructive ~roof of the existence of a string that matches the criteria.</S>
  <S sid="11" ssid="11">The dif- erence rests in which information is given as premises and what the ~oal is to be proved.</S>
  <S sid="12" ssid="12">This observation opens up the following possi- bility: not only can a single grammar be used by different processes ~ngaged in various "directions" of processing, but one and the same anguage-processing architecture can be employed for processing the grammar in the various modes.</S>
  <S sid="13" ssid="13">In particular, parsing and generatioa :an be viewed as two processes engaged in by a single parameterized ;heorem prover for the logical interpretation of the formalism.</S>
  <S sid="14" ssid="14">We will discuss our current implementation f such an architecture, ~hich is parameterized in such a way that it can be used either for ~arsing or generation with respect o grammars written in a particular ~rammar formalism which has a logical semantics, the PATR formal- sm.</S>
  <S sid="15" ssid="15">Furthermore, the architecture allows fine tuning to reflect differ- mt l::ocessing strategies, including parsing models intended to mimic )s~cholinguistiC phenomena.</S>
  <S sid="16" ssid="16">This tuning allows the parsing system to )perate within the same realm of efficiency as previous architectures or parsing alone, but with much greater flexibility for engaging in ,ther processing regimes.</S>
  <S sid="17" ssid="17">*This research was sponsored by the Nippon Telegraph and Telephone Corpo- ation under a contract with SRI International.</S>
  <S sid="18" ssid="18">2 Language Processing as Deduction Viewed intuitively, natural-language-utterance gen ration is a nonde- terministic top-down process of building a phrase that conforms to certain given criteria, e.g., that the phrase be a sentence and that it convey a particular meaning.</S>
  <S sid="19" ssid="19">Parsing, on the other hand, is usu- ally thought of as proceeding bottom-up in an effort to determine what properties hold of a given expression.</S>
  <S sid="20" ssid="20">As we have mentioned, however, both of these processes can be seen as variants of a single method for extracting certain goal theorems from the deductive closure of some given premises under the rules or constraints of the grammar.</S>
  <S sid="21" ssid="21">The various processes differ as to what the premises are and which goal theorems are of interest.</S>
  <S sid="22" ssid="22">In generation~ for instance, the premises are the lexical items of the language and goal theorems are of the form "expression a is a sentence with meaning M" for some given M. In parsing, the premises are the words a of the sentence to be parsed and goal theorems are of the form "expression a is a sentence (with properties P)".</S>
  <S sid="23" ssid="23">In this case, a is given a priori.</S>
  <S sid="24" ssid="24">This deductive view of language processing clearly presupposes an axiomatic approach to language description.</S>
  <S sid="25" ssid="25">Fortunately , most cur- rent linguistic theory approaches the problem of linguistic description axiomatically, and many current formalisms in use in natural-language processing, especially the logic grammar and unification-based for- malisms follow this approach as well.</S>
  <S sid="26" ssid="26">Consequently, the results pre- sented here will, for the most part, be applicable to any of these formalisms.</S>
  <S sid="27" ssid="27">We will, however, describe the system schematically-- without relying on any of the particular formalisms, but using notation that schematizes an augmented context-free formalism like definite- clause grammars or PATR.</S>
  <S sid="28" ssid="28">We merely assume that grammars classify phrases under a possibly infinite set of structured objects, as is com- mon in the unification-based formalisms.</S>
  <S sid="29" ssid="29">These structures--terms in definite-clause grammars, directed graphs in PATt~, and so forth--will be referred to generically as nonterminais, ince they play the role in the augmented context-free formalisms that the atomic nonterminal symbols fulfill in standard context-free grammars.</S>
  <S sid="30" ssid="30">We will assume that the notion of a unifier of such objects and most general unifier (mgu) are well defined; the symbol 0 will be used for unifiers.</S>
  <S sid="31" ssid="31">Following Pereira and Warren, the lemmas we will be proving from a grammar and a set of premises will include the same kind of conditional information encoded by the items of Earleys parsing algorithm.</S>
  <S sid="32" ssid="32">In Earleys algorithm, the existence of an item (or dotted rule) of the form in state set j &gt; i makes a claim that, for some string position k &gt; j , the  substring between i and k can be classified as an N if the sub- str!ng between j and k can be decomposed into a sequence of strings classified, respectively, under Vm,..., V~.</S>
  <S sid="33" ssid="33">We will use a notation rem- iniscent of Pereira and Warrens t to emphasize the conditional nature of the claim and its independence from V1,.. .</S>
  <S sid="34" ssid="34">,  V,n-1, namely, [i,N *-- V,~.. Vn,j] 2.1 Termino logy We digress here to introduce some terminology.</S>
  <S sid="35" ssid="35">If n = 0, then we will leave off the arrow; [i, N,j] then expresses the fact that a constituent admitted as a nonterminal N occurs between positions i and j .</S>
  <S sid="36" ssid="36">Such items will be referred to as nonconditional items; if n &gt; 0, the item will be considered conditional.</S>
  <S sid="37" ssid="37">In the grammars we are interested in~ rules will include either all nonterminals on the right-hand side or a~I terminals.</S>
  <S sid="38" ssid="38">We can think of the former as grammar rules proper, the XLater, in the sections containing examples of the architectures operation, we will reintroduce V1,...,  Vm-1 and the dot marker to aid readability.</S>
  <S sid="39" ssid="39">d14 latter as lexical entries.</S>
  <S sid="40" ssid="40">Nonconditional i tems formed by immediate inference from a lexieal entry will be called lexical items.</S>
  <S sid="41" ssid="41">For instance, if there is a grammar ule NP ---, sonny, then the item [0, NP,  1] is a lexical item.</S>
  <S sid="42" ssid="42">A prediction item (or, simply, a prediction) is an item with identical start and end positions.</S>
  <S sid="43" ssid="43">2.2 Ru les  of  In fe rence The two basic deduction steps or rules of inference we will use are-- following Earleys terminology--prediction a d completion.</S>
  <S sid="44" ssid="44">2 The inference rule of prediction is as follows: [ i ,A *- BC1.</S>
  <S sid="45" ssid="45">Cm, j  ]  B  -+ Dr ."</S>
  <S sid="46" ssid="46">"Dn 0 = mgu(B ,B  ) [j, BO ~- DxO.. .</S>
  <S sid="47" ssid="47">D,O, j] This rule corresponds to the logically valid inference consisting of in- stantiating a rule of the grammar as a conditional statement.</S>
  <S sid="48" ssid="48">3 The inference rule of completion is as follows: [i,A , -BC1.</S>
  <S sid="49" ssid="49">"Cm,j] Li, B ,k]  0 = mgu(B ,B  ) [i, AO *-- C~O.. .C~O,k] This rule corresponds to the logically valid inference consisting of lin- ear resolution of the conditional expression with respect o the non- conditional (unit) lemma.</S>
  <S sid="50" ssid="50">3 Parameter i z ing  a Theorem-Proving Architecture This characterization f parsing as deduction should be familiar from the work of Pereira and Warren.</S>
  <S sid="51" ssid="51">As they have demonstrated, such a view of purging is applicable beyond the context-free grammars by regarding the variables in the inference rules as logical variables and using unification of B and B t to solve for the most general unifier.</S>
  <S sid="52" ssid="52">Thus, this approach is applicable to most, if not all, of the logic gram- mar or unification-based formalisms.</S>
  <S sid="53" ssid="53">In particular, Pereira and Warren construct a parsing algorithm us- ing a deduction strategy which mimics Earleys algorithm.</S>
  <S sid="54" ssid="54">We would like to generalize the approach, so that the deduction strategy (or at least portions of it) are parameters of the deduction system.</S>
  <S sid="55" ssid="55">The pa- rameterization should have sufficient generality that parsers and gen- erators with w~rious control strategies, including Pereira and Warrens Barley deduction parser, are instances of the general architecture.</S>
  <S sid="56" ssid="56">We start the development of such an architecture by considering the unrestricted use of these two basic inference rules to form the deductive closure of the premises and the goals.</S>
  <S sid="57" ssid="57">The exhaustive use of prediction and completion as basic inference rules does provide a complete algorithm for proving lemmas of the sort described.</S>
  <S sid="58" ssid="58">However, several problems immediately present hemselves.</S>
  <S sid="59" ssid="59">First, proofs using these inference rules can be redundant.</S>
  <S sid="60" ssid="60">Various combinations of proof steps will lead to the same lemmas, and com- binatorial havoc may result.</S>
  <S sid="61" ssid="61">The traditional solution to this problem is to store lemmas in a table, i.e., the well-formed-substring table or chart in tabular parsing algorithms.</S>
  <S sid="62" ssid="62">In extending tabular parsing to non-context-free formalisms, the use of subsumption rather than iden- tity in testing for redundancy of lemmas becomes necessary, and has been described elsewhere [Pereira nd Shieber, 1987].</S>
  <S sid="63" ssid="63">Second, deduction is a nondeterministic process and the order of searching the various paths in the proof space is critical and differs among processing tasks.</S>
  <S sid="64" ssid="64">We therefore parameterize the theorem- proving process by a priority function that assigns to each lemma a priority.</S>
  <S sid="65" ssid="65">Lemmas are then added to the table in order of their pri- ority.</S>
  <S sid="66" ssid="66">As they are added, furtlmr lemmas that are consequences of the 2Pereira nd Warren use the terms insfantiation and reduction for their analogs to these rules.</S>
  <S sid="67" ssid="67">3As Jted previously [Shieber, 1985], this rule of inference can lead to arbitrary numbers of cousequents through repeated application when used with a grammar formalism with an infinite [structured] nonterminal domain.</S>
  <S sid="68" ssid="68">The solution proposed in that paper is to restrict the information passed from the predicting to the pre- dicted item, corresponding to the rule [i,A 4- BC~ ?..Cry,j] B .--* Da .?.</S>
  <S sid="69" ssid="69">Dn 0 = mgu(B~,  B) [j, BO ~ DIO" DuO,j] where B~ is a aonterminal with a bounded subset of the information of B.</S>
  <S sid="70" ssid="70">This inference rule is the one actually used in the implemented system.</S>
  <S sid="71" ssid="71">The reader is directed to the earlier paper for further discussion.</S>
  <S sid="72" ssid="72">new lemma and existing ones in the table may be deduced?</S>
  <S sid="73" ssid="73">These are themselves assigned priorities, and so forth.</S>
  <S sid="74" ssid="74">The technique chosen for implementing this facet of the process is the use of an agenda struc- tured as a priority queue to store the lemmas that have not yet been added to the table.</S>
  <S sid="75" ssid="75">Finally, depending on the kind of language processing we are inter- ested in, the premises of the problem and the types of goal lemmas we are searching for will be quite different.</S>
  <S sid="76" ssid="76">Therefore, we parameter- ize the theorem prover by an initial set of axioms to be added to the agenda nd by a predicate on lemmas that determines which are to be regarded as satisfying the goal conditions on lemmas.</S>
  <S sid="77" ssid="77">The structure of the architecture, then, is as follows.</S>
  <S sid="78" ssid="78">The processor is an agenda-based tabular theorem prover over lemmas of the sort defined above.</S>
  <S sid="79" ssid="79">It is parameterized by a The initial conditions, u A priority function on temmas, and ?</S>
  <S sid="80" ssid="80">A predicate xpressing the concept of a successful proofl By varying these parameters, the processor can be used to implement language parsers and generators embodying a wide variety of control strategies.</S>
  <S sid="81" ssid="81">4 Instances of the Architecture We now define some examples of the use of the architecture to process with grammars.</S>
  <S sid="82" ssid="82">4.1 Parser  Ins tances Consider a processor to parse a given string built by using this archi- tecture under the following parameterization: ?</S>
  <S sid="83" ssid="83">The initialization of the agenda includes axioms for each word in the string (e.g., [O, sonny, 1] and [1,1eft,2] for the sentence Sonny left) and an initial prediction for each rule whose left- hand side matches the start symbol of the grammar (e.g., [0, S ~- NP VP, 0]).</S>
  <S sid="84" ssid="84">The priority function orders lemmas inversely by.</S>
  <S sid="85" ssid="85">their end posi- tion, and for lemmas with the same end position, in accordance with their addition to the agenda in a first-in-first-out manner.</S>
  <S sid="86" ssid="86">The success criterion is that the lemma be nonconditional, that its start and end positions be thefirst and last positions in the string, respectively, and that the nonterminal be the start nonterminal, s Under this parameterization, the architecture mimics Earleys algo- rithm parsing the sentence in question, and considers uccessful those lemmas that represent proofs of the strings grammaticality with re- spect to the grammar, s Alternatively, by changing the priority function, we can engender different parsing behavior.</S>
  <S sid="87" ssid="87">For instance, if we just order lemmas in a last-in-first-out manner (treating the agenda s a stack) we have a "greedy" parsing algorithm, which pursues parsing possibilities depth- first and backtracks when dead-ends occur.</S>
  <S sid="88" ssid="88">An interesting possibility involves ordering lemmas as follows: ?</S>
  <S sid="89" ssid="89">Highest priority are prediction items, then lexical items, then other conditional items, then other nonconditional items.</S>
  <S sid="90" ssid="90">If (1) does not order items, items ending farther to the right have higher priority?</S>
  <S sid="91" ssid="91">If (1) and (2) do not order items, items constructed from the instantiation of longer rules have higher priority.</S>
  <S sid="92" ssid="92">This complex ordering implements a quite simple parsing strategy.</S>
  <S sid="93" ssid="93">The first condition guarantees that no nonconditional items will be added until conditional items have been computed?</S>
  <S sid="94" ssid="94">Thus, items cor- responding to the closure (in the sense of LI~ parsing) of the non- conditional items are always added to the table.</S>
  <S sid="95" ssid="95">Unlike LI~ parsing, 4For formalisms with complex structured nonterminals, the start "symbol" need only be unifiable with the left-haud-side nonterminal.</S>
  <S sid="96" ssid="96">That is, if S is the start nonterminal nd S ~ C1 .~.C, is a rule and 0 = mgu(S,S), then [0, S0 *- C18... C,8, 0] is an initial prediction.</S>
  <S sid="97" ssid="97">5Again, for formalisms with complex structured nontermiuals, the staxt symbol need only subsume the items nontermiual.</S>
  <S sid="98" ssid="98">SAssuming that the prediction inference rule uses the restriction mechanism, the architecture actually mimics the variant of Earieys algorithm previously described in [Shieber, 1985].</S>
  <S sid="99" ssid="99">615 however, the closure here is computed at run time rather than being preeomptled.</S>
  <S sid="100" ssid="100">The last two Conditions correspond to disambiguation of shift/reduce and reduce/reduce onflicts in LR parsing respectively.</S>
  <S sid="101" ssid="101">The former equires that shifts be preferred to reductions, the latter that longer reductions receive preference.</S>
  <S sid="102" ssid="102">In sum, this ordering strategy implements a sentence-disambigua- tio n parsing method that has previously been argued [Shieber, 1983] to model certain psycholinguistic phenomena--for instance, right asso- ciation and minimal attachment [Fra~zier and Fodor, 1978].</S>
  <S sid="103" ssid="103">However, unlike the earlier characterization in terms of LlZ disambiguation, this mechanism can be used for arbitrary logic or unification-based gram- mars, not just context-free grammars.</S>
  <S sid="104" ssid="104">Furthermore, the architecture allows for fine tuning of the disambiguation strategy beyond that de- scribed in earlier work.</S>
  <S sid="105" ssid="105">Finally, the strategy is complete, allowing "backtracking" if earlier proof paths lead to a dead eudf 4.2 A Pars ing  Example As a demonstration f the architecture used as a parser, we consider the Earley and backtracking-LR instances in parsing the ambiguous sentence: Castillo said Sonny was shot yesterday.</S>
  <S sid="106" ssid="106">Since the operation of the architecture as a parser is quite similar to that of previous parsers for unification-based formalisms, we will only highlight a few crucial steps in the process.</S>
  <S sid="107" ssid="107">The Earley parser assigns higher priority to items ending earlier in the sentence.</S>
  <S sid="108" ssid="108">The highest-priority initialization items are added first, s [O,S-~ ,NP  VP,  O] " [0, N P .--+ castillo ?, 1] Castillo By Completion, the item [0, S ---* NP  ?</S>
  <S sid="109" ssid="109">VP,  1] Castillo is generated, which in turn predicts [1, VP -4 ?</S>
  <S sid="110" ssid="110">VP  XI 1] " [1, vp - -+ .</S>
  <S sid="111" ssid="111">v, 1] " [1, VP --* o VP  AdvP, 1] " The highest-priority item remMniug on the agenda is the initial item [1, V -+ sa id .</S>
  <S sid="112" ssid="112">,  2] said Processing progresses in this manner, performing all operations at a string position before moving on to the next position until the final position is reached, at which point the final initial item corresponding to the word yesterday is added.</S>
  <S sid="113" ssid="113">The following flurry of items is generated by completion.</S>
  <S sid="114" ssid="114">9 [5, AdvP .--+ yesterday.</S>
  <S sid="115" ssid="115">,  6] yesterday (2) [I, VP ---+ VP  AdvP .</S>
  <S sid="116" ssid="116">,  6] said Sonny was shot yesterday (3) [3, VP ---* VP  AdvP .</S>
  <S sid="117" ssid="117">,  6] was shot yesterday [4, V P ---* V P AdvP  .</S>
  <S sid="118" ssid="118">, 6] shot yesterday [1, VP --* VP .AdvP ,  6] said Sonny was shot yesterday (4) [0, S ~ NP  VP .</S>
  <S sid="119" ssid="119">,  6] Castillo said Sonny was shot yesterday [3, V P --* V P ?</S>
  <S sid="120" ssid="120">Adv P, 6] was shot yesterday (5) [2, S --* NP  VP?</S>
  <S sid="121" ssid="121">,6  ]  Sonny was shot yesterday [4, V P ~ V P ?</S>
  <S sid="122" ssid="122">AdvP, 6] shot yesterday (6) [1, VP ---+ VP  S ?, 6] said Sonny was shot yesterday [1, VP ---* VP  ?</S>
  <S sid="123" ssid="123">AdvP, 6] ~said Sonny was shot yesterday (7) [0, S --* NP  VP .</S>
  <S sid="124" ssid="124">,  6] Castillo said Sonny was shot yesterday 7Modeling uf an incomplete version of the shift-reduce t chnique is also possible.</S>
  <S sid="125" ssid="125">The simplest method, however, involves eliminating the chart completing, and mimicking closure, shift, and reduction operations as operations on LR states (sets of items) directly.</S>
  <S sid="126" ssid="126">Though this method is not a straightforward instantiation ofthe architecture of Section 3 (since the chart is replaced by separate state sets), we have implemented a parser using much of the same technology described here and have successfully modeled the garden path phenomena that rely on the incompleteness of the shift-reduce t chnique.</S>
  <S sid="127" ssid="127">SThe format used in displaying these items reverts to one similar to Earleys algorithm, with a dot marking the position in the rule covered by the string gener- ated so far, so as to describe more clearly the portion of each grammar rule used.</S>
  <S sid="128" ssid="128">In addition, the string actually parsed or generated is given in single quotes after the item for convenience.</S>
  <S sid="129" ssid="129">SThe four instances of said Sonny was shot yesterday arise because of lexical ambiguity in the verb said and adverbial-attachment ambiguity.</S>
  <S sid="130" ssid="130">Only the finite version of said is used in forming the final sentence.</S>
  <S sid="131" ssid="131">616 Note that the first full parse found (4) is derived from the high attach- meat of the word yesterday (2) (which is composed from (i) directly), the second (7) from the low attachment (6) (derived from (5), which is derived in turn from (3)).</S>
  <S sid="132" ssid="132">By corhparison, the shift-reduce parser generates exactly the same items as the Earley parser, but in a different order.</S>
  <S sid="133" ssid="133">The crucial order- ing difference occurs in the following generated items: (1) [5,AdvP --+ yesterday ?, 6] yesterday (3) [3, VP ~ VP  AdvP .</S>
  <S sid="134" ssid="134">,  6] was shot yesterday [3, VP ---* V P ?</S>
  <S sid="135" ssid="135">Adv P, 6] was shot yesterday (5) [2, S --~ NP  VP  ?, 6] Sonny was shot yesterday (6) [1, VP-+ VP  S ?, 6] said Sonny was shot yesterday [1, VP --~ VP  ?</S>
  <S sid="136" ssid="136">AdvP, 6] said Sonny was shot yesterday (7) [0, S ~ NP  VP  ?, 6] Castillo said Sonny was shot yesterday (8) [2, S---* NP  VP  ?, 5] Sonny was shot [1, VP ---+ VP  S ,,  5] said Sonny was shot [1, VP --+ VP  ?</S>
  <S sid="137" ssid="137">AdvP, 5] said Sonny was shot (2) [1, VP ~ VP  AdvP .</S>
  <S sid="138" ssid="138">,  6] said Sonny was shot yesterday [1, VP ---* VP  ?</S>
  <S sid="139" ssid="139">AdvP, 6] said Sonny was shot yesterday (4) [0, S ~ NP  VP?</S>
  <S sid="140" ssid="140">,  6] Castillo said Sonny was shot yesterday Note that the reading of the sentence (7) with the low attachment of the adverb--the so-called "right association" reading--is generated before the reading with the higher attachment (4), in accordance with certain psycholinguistic results [Frazier and Fodor, 1978].</S>
  <S sid="141" ssid="141">This is be- cause item (3) has higher priority than item (8), since (3) corresponds to the shifting of the word yesterday and (8) to the reduction Of an NP and VP to S. The second clause of the priority definition or- ders such shifts before reductions.</S>
  <S sid="142" ssid="142">In summary, this instance of the architecture develops parses in right-association/minlmal-attachment preference order.</S>
  <S sid="143" ssid="143">4.3 Generator  Ins tances As a final example of the use of this architecture, we considerusing it for generation by changing the initialization condition as follows: * The init ial ization of the agenda includes axioms for each word in the lexicon at each position (e.g., [O, sonny ,  1] and [0, left, 1] and /1, left, 2/, and so on) and an initial prediction for each rule whose left-hand side is the start symbol of the grammar (e.g., [0, S +- NP VP,0]).</S>
  <S sid="144" ssid="144">In the case of a grammar formalism with more complex information structures as nonterminals, e.g., definite-clause grammars, the "start symbol" might include infor- mation about, say, the meaning of the sentence to be generated, We will refer to this as the goal meaning.</S>
  <S sid="145" ssid="145">u The success criterion is that the nonterminal be subsumed by the start nonterminal (and therefore have the appropriate meaning).</S>
  <S sid="146" ssid="146">Under this parameterization, the architecture serves as a generator for the grammar, generating sentences with the intended meaning.</S>
  <S sid="147" ssid="147">By changing the priority function, the order in which possibilities are pursued in generation can be controlled, thereby modeling depth-first strategies, breadth-first strategies, and so forth.</S>
  <S sid="148" ssid="148">Of course, as described, this approach to generation is sorely inade- quate for several reasons.</S>
  <S sid="149" ssid="149">First, it requires that we initially insert the entire lexicon into the agenda t arbitrary numbers of string positions.</S>
  <S sid="150" ssid="150">Not only is it infeasible to insert the lexicon so many times (indeed, even once is too much) but it also leads to massive redundancy in generation.</S>
  <S sid="151" ssid="151">The same phrase may be generated starting at many dif- ferent positions.</S>
  <S sid="152" ssid="152">For parsing, keeping track of which positions phrases occur at is advantageous; for generation, once a phrase is generated, we want to be able to use it in a variety of places.</S>
  <S sid="153" ssid="153">A simple solution to this problem is to ignore the string positions in the generation process.</S>
  <S sid="154" ssid="154">This can be done by positioning all lemmas at a single position.</S>
  <S sid="155" ssid="155">Thus we need insert the lexicon only once, each word being inserted at the single position, e.g., [0, sonny ,  0].</S>
  <S sid="156" ssid="156">Although this simplifies the set of initial items, by eliminating index- ing based on string position we remove the feature of tabular parsing methods such as Earleys algorithm that makes parsing reasonably effi- cient.</S>
  <S sid="157" ssid="157">The generation behavior exhibited is therefore not goal-directed; once the lexicon is inserted many phrases might be built that could not contribute in any way to a sentence with the appropriate mean- ing.</S>
  <S sid="158" ssid="158">In order to direct the behavior of the generator towards a goal meaning, we can modify the priority function so that it is partial; not every item will be assigned a priority and those that are not will never be added to the table (or agenda) at all.</S>
  <S sid="159" ssid="159">The filter we have been using assigns priorities only to items that might contribute semantically to the goal meaning.</S>
  <S sid="160" ssid="160">In particular, the meaning associated with the i tem must  subsume some port ion o f  the goal mean ing} ?</S>
  <S sid="161" ssid="161">This technique, a sort of indexing on meaning, replaces the indexing on string position that is more appropriate for parsing than generation.</S>
  <S sid="162" ssid="162">As a rule, filtering the items by making the priority function par- tial can lead to incompleteness of the parsing or generation process, n However, the subsumption filter described here for use in generation does not yield incompleteness of the generation algorithm under one assumption about the grammar, which we might call semant ic  mono- tonicity.</S>
  <S sid="163" ssid="163">A grammar is semantically monotonic if, for every phrase admitted by tim grammar, the semantic structure of each immediate subphrase subsumes some portion of the semantic structure of the en- tire phrase.</S>
  <S sid="164" ssid="164">Under this condition, items which do not subsume part of the goal meaning can be safely ignored, since any phrase built from them will also not subsume part of the goal meaning and thus will fail to satisfy the success criterion.</S>
  <S sid="165" ssid="165">Thus the question of complete- ness of the algorithm depends on an easily detectable property of the grammar.</S>
  <S sid="166" ssid="166">Semantic monotonicity is, by intention, a property of the particular grammar we have been using.</S>
  <S sid="167" ssid="167">4.4 A Generat ion  Example As an example of the generation process, we consider the generation of a sentence with a goal logical form passionately( love(sonny, kait)) The example was run using a toy grammar that placed subcate- gorization information in the lexicon, as in the style of analysis of head-driven phrase-structure grammar (HPSG).</S>
  <S sid="168" ssid="168">The grammar ignored tense and aspect information, so that, for instance, auxiliary verbs merely identified their own semantics with that of their postverbal complement .n The initial items included the following: (1) [0, NP.</S>
  <S sid="169" ssid="169">-~ sonny , ,  O] Sonny (2) [0, NP.+ kait ,,13] Knit [0, V -?</S>
  <S sid="170" ssid="170">,  O] to [0, V -* was ?, O] was [% v - ,  were .</S>
  <S sid="171" ssid="171">,  O] were [0, V -+ loves *, 0] loves [0, V -+ love , ,  0] love [0, V -* loved , ,  0] loved [0, AdvP .--* passionately ,, O] passionately (3) [0, S ~ ?</S>
  <S sid="172" ssid="172">NP  VP,  0] " Note that auxiliary verbs were included, as the semantic structure of an auxiliary is merely a variable (coiindexed with the semantic structure of its postverbal complement), which subsumes some part (in fact, every part) of the goal logical form./3 Similarly, the noun phrases Sonny and ~Kait ~ (with semantics sonny  and ka iL  respectively) are added, as these logical forms each subsume the respective innermost arguments of the goal logical form.</S>
  <S sid="173" ssid="173">Several forms of the verb love are considered, again because the semantics in this grammar makes no tense/aspect distinctions.</S>
  <S sid="174" ssid="174">But no other proper nouns or verbs are *?Since the success criterion requires that a successful item be subsumed by the start nonterminal and the priority filter requires that a successful items emantics subsume the start ~tonterminai% semantics, it follows that successful items match the start symbol exactly in semantic nformation; overgeneration in this sense is not a problem, 11 Indeed, we might want such incompleteness for certain cases of psycholinguis- tically motivated psrsing models such as the simulated Lit model described above.</S>
  <S sid="175" ssid="175">nFor reference, the grammar issimilar in spirit to the third sample grammar in [Shieber, 1986].</S>
  <S sid="176" ssid="176">asIt holds in general that closed-class lexical items---case-m~rking prepositions, function verbs, etc.~-are uniformly considered initial items for purposes of genera- tion because of their vestigial semantics.</S>
  <S sid="177" ssid="177">This is as desired, and follows from the operation of semantic filtering, rather than from any ad hoc techniques.</S>
  <S sid="178" ssid="178">considered (although the lexicon that was used contained them) as they do not pass the semantic filter.</S>
  <S sid="179" ssid="179">The noun phrase Sonny can be used as the subject of the sentence by combining items (1) and (3) yielding (4) [0, S --~ NP  ?</S>
  <S sid="180" ssid="180">VP,  0] Sonny (The corresponding item with the subject Knit will be generated later.)</S>
  <S sid="181" ssid="181">Prediction yields the following chain of items.</S>
  <S sid="182" ssid="182">VP  AdvP, 0] " [0, w -~.</S>
  <S sid="183" ssid="183">v, 0] " The various verbs, including the forms of love, can complete this latter item.</S>
  <S sid="184" ssid="184">[0, VP ~ V .,  O] to [0, V P --.</S>
  <S sid="185" ssid="185">, 0] is [O, VP  -* V.,0] was [0, VP -~ V. ,  O] were (5) [0, vP  -~ v .</S>
  <S sid="186" ssid="186">,  0] loves [0, VP -~ V. ,  O] love [0, VP ~ V .</S>
  <S sid="187" ssid="187">,  0] love [0, VP ---* V .</S>
  <S sid="188" ssid="188">,  0] loved The passive form of the verb loved might be combined with the ad- verb.</S>
  <S sid="189" ssid="189">[0, VP .-~ VP  ?</S>
  <S sid="190" ssid="190">AdvP, 0] loved [0, VP --, V P AdvP  .</S>
  <S sid="191" ssid="191">,  0] loved passionately The latter item might be used in a sentence Knit was loved passion- ately.</S>
  <S sid="192" ssid="192">This sentence will eventually be generated but will fail the success criterion because its semantics i insufficiently instantiated.</S>
  <S sid="193" ssid="193">Prediction from item (4) also yields the rule for adding complements to a verb phrase.</S>
  <S sid="194" ssid="194">[0, vP  - - , .</S>
  <S sid="195" ssid="195">VP  X,O] " Eventually, this item is completed with items (5) and (2).</S>
  <S sid="196" ssid="196">[0, VP ---, V P ?</S>
  <S sid="197" ssid="197">N P, 0] loves [0, VP --~ VP  NP  ,,  0] loves Knit The remaining items generated are [0, VP ---* VP  , AdvP, 0] loves Knit [0, V P ---, V P Adv P o, 0] loves Knit passionately [0, S ---* NP  VP .</S>
  <S sid="198" ssid="198">,  0] Sonny loves Knit passionately This final item matchesthe success criterion, and is the only such item.</S>
  <S sid="199" ssid="199">Therefore, the sentence Sonny loves Kait passionately is generated for the logical form pass ionate ly ( love(sonny ,  knit ) ) .</S>
  <S sid="200" ssid="200">Looking over the generation process, the set of phrases actively ex- plored by the generator included Kate is loved, Kate is loved pas- sionately, were loved passionately and similar passive constructions, Sonny loves Kalt, and various subphrases of these.</S>
  <S sid="201" ssid="201">However, other phrases composed of the same words, such as Knit loves Knit, Sonny is loved, and so forth, are eliminated by the semantics filter.</S>
  <S sid="202" ssid="202">Thus, the the generation process is, on the whole, quite goal-directed; the subphrases considered in the generation process are "reasonable".</S>
  <S sid="203" ssid="203">5 The  Imp lementat ion The architecture described above has been implemented for the PATR grammar formalism in a manner eminiscent of object-oriented pro- gramming.</S>
  <S sid="204" ssid="204">Instances of the architecture are built as follows.</S>
  <S sid="205" ssid="205">A general-purpose processor-building fimction, taking a priority func- tion and success criterion fnnction as arguments, returns an object that corresponds to the architecture instance.</S>
  <S sid="206" ssid="206">The object can be sent initialization items as arbitrary lemmas of the usual form.</S>
  <S sid="207" ssid="207">Whenever a successful lemma is constructed (according to the success criterion) it is returned, along with a continuation function that can be called if further sohttions are needed.</S>
  <S sid="208" ssid="208">No processing is done after a successflfl lemma has been pro?ed unless further solutions are requested.</S>
  <S sid="209" ssid="209">Using this implementation, wehave built instances of the architec- ture for Barley parsing and the other parsing variants described in this paper, including the shift/reduce simulator.</S>
  <S sid="210" ssid="210">In addition, a generator was built that is complete for semantically monotonic grammars.</S>
  <S sid="211" ssid="211">It is interesting to note that the generator is more than an order of magni- tude faster than our original PATR generator, which worked purely by 617 top-down depth-first backtracking search, that is, following the Prolog search strategy.</S>
  <S sid="212" ssid="212">The implementation is in Common Lisp and runs on Symbolics 3600, Sun, and Macintosh computers.</S>
  <S sid="213" ssid="213">It is used (in conjunction with a more extensive .grammar) ~s the generation component of the GENESYS system for utterance planning and production.</S>
  <S sid="214" ssid="214">6 Precursors Perhaps the clearest espousal of the notion of grammar eversability was made by Kay [1975], whose research into functional grammar has been motivated by the desire to "make it possible to generate and analyze sentences with the same grammar."</S>
  <S sid="215" ssid="215">Other researchers have also put such ideas into effect.</S>
  <S sid="216" ssid="216">Jacobss PHRED system [Jacobs, 1985] "operates from a declarative knowledge base of linguistic knowledge, common to that used by PHRAN", an analyzer for so-called phrasal grammars.</S>
  <S sid="217" ssid="217">Jacobs notes that other systems ~ have shared at least part of the linguistic information for parsing and generation; for instance, the HAM-ANS [Wahlster t al., 1983]a;nd VII~-LANG [Steinacker and Buchberger, 1983] systems utilize the same lexical information for both tasks.</S>
  <S sid="218" ssid="218">Kasper has used a system for parsing rammars in a unification- based formalism (SItIs Z-PATR system) to parse sentences with re- spect to the large ISI NIGEL grammar, which had been previously used for generation alone.</S>
  <S sid="219" ssid="219">Nonetheless, all of these systems rely on often radically different architectures for the two processes.</S>
  <S sid="220" ssid="220">Precedent for using a single ar- chitecture for both tasks is much more difficult to find.</S>
  <S sid="221" ssid="221">The germ of the idea can be found in the General Syntactic Processor (GSP) de- signed for the MIND system at Rand.</S>
  <S sid="222" ssid="222">Kaplan and K~y proposed use of the GSP for parsing with respect o augmented transition etworks and generation by traiisformational grammars [Kaplan, 1973].</S>
  <S sid="223" ssid="223">How- ever, detailed implementation was apparently never carried out.</S>
  <S sid="224" ssid="224">In any case, although the PrOposal involved using the same arehitecture~ different formalisms (and hence grammars) were presupposed for the two tasks, ttunning a definite-clanse grammar (DCG) "backwards" has been proposed previously, although the normal Prolog execution mechanism renders uch a technique unusable in practice.</S>
  <S sid="225" ssid="225">However, =.- alternative xecution models might make the practice feasible.</S>
  <S sid="226" ssid="226">As mentioned above, the technique described here is just such an exe: cution model, and is directly related to the Earley deduction model of Pereira and Warren [1983].. Hasida and Isizaki [1987] present an- other method for generating and analyzing using a DCG-like formal- ism, which they call dependency propagation.</S>
  <S sid="227" ssid="227">The technique seems to entail using dataflow dependencies implicit in the grammar to con- trol processing in a coroutining manner.</S>
  <S sid="228" ssid="228">The implementation status of their method and its practical utility are as yet unclear.</S>
  <S sid="229" ssid="229">The use of an agenda nd scheduling schemes to allow varying the control structure of a parser also finds precedent in the work of Kaplan [1973] and Kay [1967].</S>
  <S sid="230" ssid="230">Kays "powerful parser" and the GSP both em- ployed an agenda mechanism to control additions to the chart.</S>
  <S sid="231" ssid="231">How- ever, the "tasks" placed on the agenda were at the same time more powerful (corresponding to unconstrained rewrite rules) and more pro- cedural (allowing register operations and other procedural constructs).</S>
  <S sid="232" ssid="232">This work merely applies the notion in the context of the simple declar- ative formalisms presupposed, and provides it with a logical founda- tion on which a proof of correctness can be developed.</S>
  <S sid="233" ssid="233">TM Because the formalisms are simpler, the agenda need only keep track of one type of task: addition of a chart item.</S>
  <S sid="234" ssid="234">7 Fur ther  Kesearch Perhaps the most immediate problem raised by the methodology for generation i troduced in this paper is the strong requirement of se- mantic monotonicity, which serves as yet another instance of the strait- jacket of compositionality, The semantic-monotonicity onstraint al- lows the goal logical form to be systematically decomposed so that a. dynamic-programming generation process can be indexed by the parts of the decomposition (the subformulas), just as the constraint of string concatenation i  context-free grammars allows a goal sentence to be systematically decomposed so that a dynamic-programming parsing process can be indexed by the subparts of that decomposition (the 14Such a proof is currently in preparation.</S>
  <S sid="235" ssid="235">canonical intentionally logical equivalent forms LFs NL expression grammar defines LF la  / LF 1 ~- - - -  LF lb LF l c LF 2a / LF2  ~- -  LF2b LF 2c ?</S>
  <S sid="236" ssid="236">LF  3a  / LF 3 ~ LF 3b LF 3e , I I .</S>
  <S sid="237" ssid="237">I intentional equivalence defines Figure 1: Canonical Logical Forms substrings).</S>
  <S sid="238" ssid="238">And just az the concatenation restriction of context-free grammars can be problematic, so can the restriction of semantic mono- tonicity.</S>
  <S sid="239" ssid="239">Finding a weaker constraint on grammars that still allows efficient processing is thus an important research objective.</S>
  <S sid="240" ssid="240">Even with the semantic-monotonicity onstraint, he process of in- dexing by the highly structured logical forms is not nearly so efficient as indexing by simple integer string positions.</S>
  <S sid="241" ssid="241">Partial match retrieval or similar techniques from the Prolog literature might be useful here.</S>
  <S sid="242" ssid="242">Nothing has been said al~out he importartt problem of guaranteeing that the syntactic and semantic goal properties will actually be real- ized in the sentence generated.</S>
  <S sid="243" ssid="243">The success criterion for generation described here would require that the logical form for the sentence generated be identical to the goal logical form.</S>
  <S sid="244" ssid="244">However, there is no guarantee that the other properties of the sentence include those of the goal; only compatibility is guaranteed.</S>
  <S sid="245" ssid="245">Researchers at the Univer- sity of Stuttgart have proposed solutions to this problem based on the type of existential constraint found in lexieal-functional grammar.</S>
  <S sid="246" ssid="246">We expect hat their methods might be applicable within th~ presented architecture.</S>
  <S sid="247" ssid="247">Finally, on a more pessimistic note, we turn to a widespread problem in all systems for automatic generation of natural language, which Ap- pelt [1987] has discussed under the rubric "the problem of logical-form equivalence".</S>
  <S sid="248" ssid="248">The mapping from logical forms to natural-language expressions i  in general many-to-one.</S>
  <S sid="249" ssid="249">For instance, the logical forms red(x) h ball(x) and ball(x) h red(x) might both be realized as the nominal red ball.</S>
  <S sid="250" ssid="250">However, most systems for describing the string- LF relation declaratively do so by assigning a minimal set of logical forms to each string, with each logical form standing proxy for all its logical equivalents.</S>
  <S sid="251" ssid="251">The situation is represented graphically as Figure 1.</S>
  <S sid="252" ssid="252">The problem is complicated further in that, strictly speaking, the class of equivalent logical forms from the standpoint of generation is not really closed under logical equivalence.</S>
  <S sid="253" ssid="253">Instead, what is actu- ally required is a finer-grained notion of intentional equivalence, under which, for instance, p and p A (q Y -~q) would not necessarily be inten.. tionally equivalent; hey might correspond to different uttera~aces, one about p only, the other about both p and q.</S>
  <S sid="254" ssid="254">In such a system, merely using the grammar per se to drive gener- ation (as we do here) allows for the generation of strings from only a subset of the logical-form expressions that have natural-language re- lata, that is, LF1, LF2, and LF3 in the figure.</S>
  <S sid="255" ssid="255">We might call these the canonical ogical forms.</S>
  <S sid="256" ssid="256">Even if the grammar is reversible, the prob- lem remains, because logical equivalence is in general not computable.</S>
  <S sid="257" ssid="257">And even in restricted cases in which it is computable, for instance a logic with a confluence property under which all logically equivalent 61B expressions do have a canonical form, the problem is not solved unless the notion of canonical form implicit in the logic corresponds exactly to that of the natural-language grammar.</S>
  <S sid="258" ssid="258">It should be noted that this kind of problem is quite deep.</S>
  <S sid="259" ssid="259">Any,sys- tem that :represents meanings in some way (not necessarily with logical expressions) must face a correlate of this problem.</S>
  <S sid="260" ssid="260">Furthermore, al- though the issue impinges on syntax because it arises in the realm of grammar, it is primarily a semantic problem, as we will shortly see.</S>
  <S sid="261" ssid="261">There are two apparent possible approaches to a resolution of this problem.</S>
  <S sid="262" ssid="262">We might use a logic in vchich logical equivalence classes of expressions are all trivial, that is, any two distinct expressions mean something diiferent.</S>
  <S sid="263" ssid="263">In such a logic, there are no artifactual syn- tactic remnants in the syntax of the logical anguage.</S>
  <S sid="264" ssid="264">Furthermore, expressions ofthe logic must be relatable to expressions of the natural language with a reversible grammar.</S>
  <S sid="265" ssid="265">Alternatively, we could use a logic for which canonical forms, corresponding exactly to the natural language graramars logical forms, do exist.</S>
  <S sid="266" ssid="266">The difference between the two approaches is only an apparent one, for in the latter case the equivalence classes of logical forms can be identified as h)gical forms of a new logical anguage with no artifactual distinctlons.</S>
  <S sid="267" ssid="267">Thus, the second case reduces to the first.</S>
  <S sid="268" ssid="268">The central problem in either case, then~ is discovery of a logical language which exactly and uniquely represents all the meaning distinctions ofnatural language utterances and no others.</S>
  <S sid="269" ssid="269">This holy grail, of course, is just the goal of knowledge representation for natural language in general; we are unlikely to be able to rely on a full solution soon.</S>
  <S sid="270" ssid="270">However, by looking at approximations of this goal, suitably adapted to the particular problems of generation, we can hope to achieve some progress.</S>
  <S sid="271" ssid="271">In the case of approximations, it does not hold that the two methodologies reduce one to another; in this case, we feel that the second approach--designing a logical language that approximates in its canonical forms those needed for grammatical applications-qs more likely to yield good incremental results.</S>
  <S sid="272" ssid="272">l?eferences [Appelt, 1987] Douglas E. Appelt.</S>
  <S sid="273" ssid="273">Bidirectional grammars and the design of natural anguage ~eneration systems.</S>
  <S sid="274" ssid="274">In Theoretical Issues in Natural Language Pracessing--3, pages 185-191, New Mexico State University, Las Cruces, New Mexico, 7-9 January 1987.</S>
  <S sid="275" ssid="275">[Frazier and Fodor, 1978] Lyn Frazier and Janet Dean Fodor.</S>
  <S sid="276" ssid="276">The sausage machine: a new two-stage parsing model.</S>
  <S sid="277" ssid="277">Cognition, 6:291-325, 1978.</S>
  <S sid="278" ssid="278">[Hasida nd Isizaki, 1987] KSiti Hasida and Syun Isizaki.</S>
  <S sid="279" ssid="279">Depen- dency propagation: a unified theory of sentence comprehension and generatimu In Proceedings ofAAAI-87~ pages 664-670, Seat- tle, Washington, 13-17 July 1987.</S>
  <S sid="280" ssid="280">[Jacobs, 1985] Paul S. Jaeobs.</S>
  <S sid="281" ssid="281">PHRED: a generator for natural language interfaces.</S>
  <S sid="282" ssid="282">Computational Linguistics, 11(4):219-242, October-December 1985.</S>
  <S sid="283" ssid="283">[Kaplan, 1973] Ronald M. Kapian.</S>
  <S sid="284" ssid="284">A general syntactic processor.</S>
  <S sid="285" ssid="285">In Randall t~ustin, editor, Natural Language Processing, pages 193- 241, Algorithmics Press, New York, I973.</S>
  <S sid="286" ssid="286">[Kay, 1967] Martin Kay.</S>
  <S sid="287" ssid="287">Experiments with a powerful parser.</S>
  <S sid="288" ssid="288">In Proceedings Of the Second International Conference on Compu- tational Linguistics, August 1967.</S>
  <S sid="289" ssid="289">[Kay, 1975] Martin Kay.</S>
  <S sid="290" ssid="290">Syntactic processing and functional sen. tence perspective.</S>
  <S sid="291" ssid="291">In Theoretical Issues in Natural Language Pracessing--Supplement to the Proceedings, pages 12-15, Cam- bridge, Massachusetts, 10-13 June 1975~ [Pereira and Warren, 1983] Fernando C. N. Pereira and David tL D. Warren.</S>
  <S sid="292" ssid="292">Parsing as deduction.</S>
  <S sid="293" ssid="293">In Proceedings of the 21st An- nual Meeting of the Association for Computational Linguistics, pages 137-144, Massachusetts Institute of Technology, iCam- bridge, Massachusetts, 15-17 June 1983.</S>
  <S sid="294" ssid="294">[Pereira and Shieber, 1987] FernandoC.</S>
  <S sid="295" ssid="295">N. Pereira and Stuart M. Shieber.</S>
  <S sid="296" ssid="296">Proloy and Natural-Language Analysis.</S>
  <S sid="297" ssid="297">Volume 10 of CSLILecture Notes, Center for the Study of Language and Infor- mation, Stanford, California, 1987.</S>
  <S sid="298" ssid="298">[Shieber, 1983] Stuart M. Shieber.</S>
  <S sid="299" ssid="299">Sentence disambiguation by a shift-reduce parsing technique.</S>
  <S sid="300" ssid="300">In Proceedings of the 21st An- nual Meeting of the Association for Computational Linguistics, pages 113-118, Massachusetts Institute of Technology, Cam- bridge, Massachusetts, 15-17 June 1983.</S>
  <S sid="301" ssid="301">[Shieber, 1985] Stuart M. Shieber.</S>
  <S sid="302" ssid="302">Using restriction to extend parsing algorithms for complex-feature-based formalisms.</S>
  <S sid="303" ssid="303">In Proceedings of the 23rd Annual Meeting of the Association for Computational Linguistics, pages 145-152, University of Chicago, Chicago, Illi- nois, 8-12 July 1985.</S>
  <S sid="304" ssid="304">[Shieber, 1986] Stuart M. Shieber.</S>
  <S sid="305" ssid="305">An Introduction to Unification.</S>
  <S sid="306" ssid="306">Based Approaches to Grammar.</S>
  <S sid="307" ssid="307">Volume 4 of CSLI Lecture Notes, Center for the Study of Language and Information, Stanford, Cal- ifornia, 1986.</S>
  <S sid="308" ssid="308">[Steinackerand Buchberger, 1983] Ingeborg Steinacker and Ernst Buchberger.</S>
  <S sid="309" ssid="309">l~elating syntax and semantics: the syntactico- semantic lexicon of the system VIE-LANG.</S>
  <S sid="310" ssid="310">In Proceedings of the First Conference of the European Chapter of the Association for Computational Lir~guistics, pages 96-100, Piss, Italy, 1-2 Septem- ber 1983.</S>
  <S sid="311" ssid="311">[Wahlster tal., 1983] Wolfgang Wahlster, Heinz Marburger, An- thony Jameson, and Stephan Busemann.</S>
  <S sid="312" ssid="312">Overanswering yes-no questions: extended responses in a natural language interface to a vision system.</S>
  <S sid="313" ssid="313">In Proceedings of the Eighth Mternational Joint Conference on Artificial Intelligence, pages 643-646, Karlsruhe, West Germany, 8-12 August ]983.</S>
</PAPER>
