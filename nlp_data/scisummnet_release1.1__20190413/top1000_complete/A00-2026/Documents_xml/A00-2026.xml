<PAPER>
  <S sid="0">Trainable Methods For Surface Natural Language Generation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We present three systems for surface natural language generation that are trainable from annotated corpora.</S>
    <S sid="2" ssid="2">The first two systems, called NLG1 and NLG2, require a corpus marked only with domainspecific semantic attributes, while the last system, called NLG3, requires a corpus marked with both semantic attributes and syntactic dependency information.</S>
    <S sid="3" ssid="3">All systems attempt to produce a grammatical natural language phrase from a domain-specific semantic representation.</S>
    <S sid="4" ssid="4">NLG1 serves a baseline system and uses phrase frequencies to generate a whole phrase in one step, while NLG2 and NLG3 use maximum entropy probability models to individually generate each word in the phrase.</S>
    <S sid="5" ssid="5">The systems NLG2 and NLG3 learn to determine both the word choice and the word order of the phrase.</S>
    <S sid="6" ssid="6">We present experiments in which we generate phrases to describe flights in the air travel domain.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="7" ssid="1">This paper presents three trainable systems for surface natural language generation (NLG).</S>
    <S sid="8" ssid="2">Surface NLG, for our purposes, consists of generating a grammatical natural language phrase that expresses the meaning of an input semantic representation.</S>
    <S sid="9" ssid="3">The systems take a &amp;quot;corpus-based&amp;quot; or &amp;quot;machinelearning&amp;quot; approach to surface NLG, and learn to generate phrases from semantic input by statistically analyzing examples of phrases and their corresponding semantic representations.</S>
    <S sid="10" ssid="4">The determination of the content in the semantic representation, or &amp;quot;deep&amp;quot; generation, is not discussed here.</S>
    <S sid="11" ssid="5">Instead, the systems assume that the input semantic representation is fixed and only deal with how to express it in natural language.</S>
    <S sid="12" ssid="6">This paper discusses previous approaches to surface NLG, and introduces three trainable systems for surface NLG, called NLG1, NLG2, and NLG3.</S>
    <S sid="13" ssid="7">Quantitative evaluation of experiments in the air travel domain will also be discussed.</S>
  </SECTION>
  <SECTION title="2 Previous Approaches" number="2">
    <S sid="14" ssid="1">Templates are the easiest way to implement surface NLG.</S>
    <S sid="15" ssid="2">A template for describing a flight noun phrase in the air travel domain might be flight departing from $city-fr at $time-dep and arriving in $city-to at $time-arr where the words starting with &amp;quot;$&amp;quot; are actually variables &#8212; representing the departure city, and departure time, the arrival city, and the arrival time, respectively&#8212; whose values will be extracted from the environment in which the template is used.</S>
    <S sid="16" ssid="3">The approach of writing individual templates is convenient, but may not scale to complex domains in which hundreds or thousands of templates would be necessary, and may have shortcomings in maintainability and text quality (e.g., see (Reiter, 1995) for a discussion).</S>
    <S sid="17" ssid="4">There are more sophisticated surface generation packages, such as FUF/SURGE (Elhadad and Robin, 1996), KPML (Bateman, 1996), MUMBLE (Meteer et al., 1987), and RealPro (Lavoie and Rambow, 1997), which produce natural language text from an abstract semantic representation.</S>
    <S sid="18" ssid="5">These packages require linguistic sophistication in order to write the abstract semantic representation, but they are flexible because minor changes to the input can accomplish major changes to the generated text.</S>
    <S sid="19" ssid="6">The only trainable approaches (known to the author) to surface generation are the purely statistical machine translation (MT) systems such as (Berger et al., 1996) and the corpus-based generation system described in (Langkilde and Knight, 1998).</S>
    <S sid="20" ssid="7">The MT systems of (Berger et al., 1996) learn to generate text in the target language straight from the source language, without the aid of an explicit semantic representation.</S>
    <S sid="21" ssid="8">In contrast, (Langkilde and Knight, 1998) uses corpus-derived statistical knowledge to rank plausible hypotheses from a grammarbased surface generation component.</S>
  </SECTION>
  <SECTION title="3 Trainable Surface NLG" number="3">
    <S sid="22" ssid="1">In trainable surface NLG, the goal is to learn the mapping from semantics to words that would otherwise need to be specified in a grammar or knowledge base.</S>
    <S sid="23" ssid="2">All systems in this paper use attribute-value pairs as a semantic representation, which suffice as a representation for a limited domain like air travel.</S>
    <S sid="24" ssid="3">For example, the set of attribute-value pairs { $cityfr = New York City, $city-to = Seattle , $time-dep = 6 a.m., $date-dep = Wednesday } represent the meaning of the noun phrase &amp;quot;a flight to Seattle that departs from New York City at 6 a.m. on Wednesday&amp;quot;.</S>
    <S sid="25" ssid="4">The goal, more specifically, is then to learn the optimal attribute ordering and lexical choice for the text to be generated from the attribute-value pairs.</S>
    <S sid="26" ssid="5">For example, the NLG system should automatically decide if the attribute ordering in &amp;quot;flights to New York in the evening&amp;quot; is better or worse than the ordering in &amp;quot;flights in the evening to New York&amp;quot;.</S>
    <S sid="27" ssid="6">Furthermore, it should automatically decide if the lexical choice in &amp;quot;flights departing to New York&amp;quot; is better or worse than the choice in &amp;quot;flights leaving to New York&amp;quot;.</S>
    <S sid="28" ssid="7">The motivation for a trainable surface generator is to solve the above two problems in a way that reflects the observed usage of language in a corpus, but without the manual effort needed to construct a grammar or knowledge base.</S>
    <S sid="29" ssid="8">All the trainable NLG systems in this paper assume the existence of a large corpus of phrases in which the values of interest have been replaced with their corresponding attributes, or in other words, a corpus of generation templates.</S>
    <S sid="30" ssid="9">Figure 1 shows a sample of training data, where only words marked with a &amp;quot;8&amp;quot; are attributes.</S>
    <S sid="31" ssid="10">All of the NLG systems in this paper work in two steps as shown in Table 2.</S>
    <S sid="32" ssid="11">The systems NLG1, NLG2 and NLG3 all implement step 1; they produce a sequence of words intermixed with attributes, i.e., a template, from the the attributes alone.</S>
    <S sid="33" ssid="12">The values are ignored until step 2, when they replace their corresponding attributes in the phrase produced by step 1.</S>
    <S sid="34" ssid="13">The surface generation model NLG1 simply chooses the most frequent template in the training data that corresponds to a given set of attributes.</S>
    <S sid="35" ssid="14">Its performance is intended to serve as a baseline result to the more sophisticated models discussed later.</S>
    <S sid="36" ssid="15">Specifically, nlgi(A) returns the phrase that corresponds to the attribute set A: [empty string] TA = where TA are the phrases that have occurred with A in the training data, and where C(phrase, A) is the training data frequency of the natural language phrase phrase and the set of attributes A. NLG1 will fail to generate anything if A is a novel combination of attributes.</S>
    <S sid="37" ssid="16">The surface generation system NLG2 assumes that the best choice to express any given attribute-value set is the word sequence with the highest probability that mentions all of the input attributes exactly once.</S>
    <S sid="38" ssid="17">When generating a word, it uses local information, captured by word n-grams, together with certain non-local information, namely, the subset of the original attributes that remain to be generated.</S>
    <S sid="39" ssid="18">The local and non-local information is integrated with use of features in a maximum entropy probability model, and a highly pruned search procedure attempts to find the best scoring word sequence according to the model.</S>
    <S sid="40" ssid="19">The probability model in NLG2 is a conditional distribution over V U * stop*, where V is the generation vocabulary and where *stop* is a special &amp;quot;stop&amp;quot; symbol.</S>
    <S sid="41" ssid="20">The generation vocabulary V consists of all the words seen in the training data.</S>
    <S sid="42" ssid="21">The form of the maximum entropy probability model is identical to the one used in (Berger et al., 1996; Ratnaparkhi, 1998): where wi ranges over V U *stop* and {wi-i wi-2, attri} is the history, where wi denotes the ith word in the phrase, and attri denotes the attributes that remain to be generated at position i in the phrase.</S>
    <S sid="43" ssid="22">The h, where f3 (a, b) E {0,1}, are called features and capture any information in the history that might be useful for estimating P(wt iwi-1, wi-2, attri).</S>
    <S sid="44" ssid="23">The features used in NLG2 are described in the next section, and the feature weights ai, obtained from the Improved Iterative Scaling algorithm (Berger et al., 1996), are set to maximize the likelihood of the training data.</S>
    <S sid="45" ssid="24">The probability of the sequence W = wn, given the attribute set A, (and also given that its length is n) is: The feature patterns, used in NLG2 are shown in Table 3.</S>
    <S sid="46" ssid="25">The actual features are created by matching the patterns over the training data, e.g., an actual feature derived from the word hi-gram template might be: f(w1,tvi-1,w2-2,attri).</S>
    <S sid="47" ssid="26">01 if w = from and wi-i = flight and $city &#8212; fr E attri otherwise Input to Step 1: 1 $city-fr, $city-to, $time-dep, $date-dep 1 Output of Step 1: &amp;quot;a flight to $city-to that departs from $city-fr at $time-dep on $date-dep&amp;quot; Input to Step 2: &amp;quot;a flight to $city-to that departs from $city-fr at $time-dep on $date-dep&amp;quot;, $city-fr = New York City, $city-to = Seattle , $time-dep = 6 a.m., $date-dep = Wednesday } Output of Step 2: &amp;quot;a flight to Seattle that departs from New York City at 6 a.m. on Wednesday&amp;quot; Low frequency features involving word n&#8212;grams tend to be unreliable; the NLG2 system therefore only uses features which occur K times or more in the training data.</S>
    <S sid="48" ssid="27">The search procedure attempts to find a word sequence wi wn of any length n &lt;M for the input attribute set A such that and where M is an heuristically set maximum phrase length.</S>
    <S sid="49" ssid="28">The search is similar to a left-to-right breadthfirst-search, except that only a fraction of the word sequences are considered.</S>
    <S sid="50" ssid="29">More specifically, the search procedure implements the recurrence: VVNa = top(N,{wlw E V}) 147.mi-1-1 = top(N,next(WN,i)) The set WN,i is the top N scoring sequences of length i, and the expression next(WN,i) returns all sequences w1 w,+1 such that wi w, E WN,, and wi-Fi E V U *stop*.</S>
    <S sid="51" ssid="30">The expression top(N,next(WN,i)) finds the top N sequences in next(WN,i).</S>
    <S sid="52" ssid="31">During the search, any sequence that ends with *stop* is removed and placed in the set of completed sequences.</S>
    <S sid="53" ssid="32">If N completed hypotheses are discovered, or if WN,m is computed, the search terminates.</S>
    <S sid="54" ssid="33">Any incomplete sequence which does not satisfy condition (3) is discarded and any complete sequence that does not satisfy condition (2) is also discarded.</S>
    <S sid="55" ssid="34">When the search terminates, there will be at most N completed sequences, of possibly differing lengths.</S>
    <S sid="56" ssid="35">Currently, there is no normalization for different lengths, i.e., all sequences of length n &lt; M are equiprobable: NLG2 chooses the best answer to express the attribute set A as follows: where Wnig2 are the completed word sequences that satisfy the conditions of the NLG2 search described above.</S>
    <S sid="57" ssid="36">NLG3 addresses a shortcoming of NLG2, namely that the previous two words are not necessarily the best informants when predicting the next word.</S>
    <S sid="58" ssid="37">Instead, NLG3 assumes that conditioning on syntactically related words in the history will result on more accurate surface generation.</S>
    <S sid="59" ssid="38">The search procedure in NLG3 generates a syntactic dependency tree from top-to-bottom instead of a word sequence from leftto-right, where each word is predicted in the context of its syntactically related parent, grandparent, and siblings.</S>
    <S sid="60" ssid="39">NLG3 requires a corpus that has been annotated with tree structure like the sample dependency tree shown in Figure 1.</S>
    <S sid="61" ssid="40">The probability model for NLG3, shown in Figure 2, conditions on the parent, the two closest siblings, the direction of the child relative to the parent, and the attributes that remain to be generated.</S>
    <S sid="62" ssid="41">Just as in NLG2, p is a distribution over V U *stop*, and the Improved Iterative Scaling algorithm is used to find the feature weights a3.</S>
    <S sid="63" ssid="42">The expression chi(w) denotes the ith closest child to the headword w, par(w) denotes the parent of the headword w, dir E {left, right} denotes the direction of the child relative to the parent, and attr,i denotes the attributes that remain to be generated in the tree when headword w is predicting its ith child.</S>
    <S sid="64" ssid="43">For example, in Figure 1, if w =&amp;quot;flights&amp;quot;, then chi (w) =&amp;quot;evening&amp;quot; when generating the left children, and chl(w) =&amp;quot;from&amp;quot; when generating the right children.</S>
    <S sid="65" ssid="44">As shown in Figure 3, the probability of a dependency tree that expresses an attribute set A can be found by computing, for each word in the tree, the probability of generating its left children and then its right children.'</S>
    <S sid="66" ssid="45">In this formulation, the left children are generated independently from the right children.</S>
    <S sid="67" ssid="46">As in NLG2, NLG3 assumes the uniform distribution for the length probabilities Pr(# of left children = n) and Pr(# of right children = n) up to a certain maximum length M' = 10.</S>
    <S sid="68" ssid="47">The feature patterns for NLG3 are shown in Table 4.</S>
    <S sid="69" ssid="48">As before, the actual features are created by matching the patterns over the training data.</S>
    <S sid="70" ssid="49">The features in NLG3 have access to syntactic information whereas the features in NLG2 do not.</S>
    <S sid="71" ssid="50">Low frequency features involving word n&#8212;grams tend to be unreliable; the NLG3 system therefore only uses features which occur K times or more in the training data.</S>
    <S sid="72" ssid="51">Furthermore, if a feature derived from Table 4 looks at a particular word chi (w) and attribute a, we only allow it if a has occurred as a descendent of 1-We use a dummy ROOT node to generate the top most head word of the phrase chi(w) in some dependency tree in the training set.</S>
    <S sid="73" ssid="52">As an example, this condition allows features that look at chi(w) =&amp;quot;to&amp;quot; and $city-toE attr,i but disallows features that look at chi(w) =&amp;quot;to&amp;quot; and $cityfrE The idea behind the search procedure for NLG3 is similar to the search procedure for NLG2, namely, to explore only a fraction of the possible trees by continually sorting and advancing only the top N trees at any given point.</S>
    <S sid="74" ssid="53">However, the dependency trees are not built left-to-right like the word sequences in NLG2; instead they are built from the current head (which is initially the root node) in the following order: As before, any incomplete trees that have generated a particular attribute twice, as well as completed trees that have not generated a necessary attribute are discarded by the search.</S>
    <S sid="75" ssid="54">The search terminates when either N complete trees or N trees of the maximum length M are discovered.</S>
    <S sid="76" ssid="55">NLG3 chooses the best answer to express the attribute set A as follows: where Tn193 are the completed dependency trees that satisfy the conditions of the NLG3 search described above.</S>
  </SECTION>
  <SECTION title="4 Experiments" number="4">
    <S sid="77" ssid="1">The training and test sets used to evaluate NLG1, NLG2 and NLG3 were derived semi-automatically from a pre-existing annotated corpus of user queries in the air travel domain.</S>
    <S sid="78" ssid="2">The annotation scheme used a total of 26 attributes to represent flights.</S>
    <S sid="79" ssid="3">The training set consisted of 6000 templates describing flights while the test set consisted of 1946 templates describing flights.</S>
    <S sid="80" ssid="4">All systems used the same training set, and were tested on the attribute sets extracted from the phrases in the test set.</S>
    <S sid="81" ssid="5">For example, if the test set contains the template &amp;quot;flights to $city-to leaving at $time-dep&amp;quot;, the surface generation systems will be told to generate a phrase for the attribute set { $city-to, $time-dep }.</S>
    <S sid="82" ssid="6">The output of NLG3 on the attribute set { $city-to, $city-fr, $time-dep } is shown in Table 9.</S>
    <S sid="83" ssid="7">There does not appear to be an objective automatic evaluation method2 for generated text that correlates with how an actual person might judge the output.</S>
    <S sid="84" ssid="8">Therefore, two judges &#8212; the author and a colleague &#8212; manually evaluated the output of all three systems.</S>
    <S sid="85" ssid="9">Each judge assigned each phrase from each of the three systems one of the following rankings: OK: Tense or agreement is wrong, but word choice is correct.</S>
    <S sid="86" ssid="10">(These errors could be corrected by post-processing with a morphological analyzer.)</S>
    <S sid="87" ssid="11">Bad: Words are missing or extraneous words are present No Output: The system failed to produce any output While there were a total 1946 attribute sets from the test examples, the judges only needed to evaluate the 190 unique attribute sets, e.g., the attribute set { $city-fr $city-to } occurs 741 times in the test data.</S>
    <S sid="88" ssid="12">Subjective evaluation of generation output is 2Measuring word overlap or edit distance between the system's output and a &amp;quot;reference&amp;quot; set would be an automatic scoring method.</S>
    <S sid="89" ssid="13">We believe that such a method does not accurately measure the correctness or grammaticality of the text. not ideal, but is arguably superior than an automatic evaluation that fails to correlate with human linguistic judgement.</S>
    <S sid="90" ssid="14">The results of the manual evaluation, as well as the values of the search and feature selection parameters for all systems, are shown in Tables 5, 6, 7, and 8.</S>
    <S sid="91" ssid="15">(The values for N, M, and K were determined by manually evaluating the output of the 4 or 5 most common attribute sets in the training data).</S>
    <S sid="92" ssid="16">The weighted results in Tables 5 and 6 account for multiple occurrences of attribute sets, whereas the unweighted results in Tables 7 and 8 count each unique attribute set once, i.e., { $city-fr Scity-to } is counted 741 times in the weighted results but once in the unweighted results.</S>
    <S sid="93" ssid="17">Using the weighted results, which represent testing conditions more realistically than the unweighted results, both judges found an improvement from NLG1 to NLG2, and from NLG2 to NLG3.</S>
    <S sid="94" ssid="18">NLG3 cuts the error rate from NLG1 by at least 33% (counting anything without a rank of Correct as wrong).</S>
    <S sid="95" ssid="19">NLG2 cuts the error rate by at least 22% and underperforms NLG3, but requires far less annotation in its training data.</S>
    <S sid="96" ssid="20">NLG1 has no chance of generating anything for 3% of the data &#8212; it fails completely on novel attribute sets.</S>
    <S sid="97" ssid="21">Using the unweighted results, both judges found an improvement from NLG1 to NLG2, but, surprisingly, judge A found a slight decrease while judge B found an increase in accuracy from NLG2 to NLG3.</S>
    <S sid="98" ssid="22">The unweighted results show that the baseline NLG1 does well on the common attribute sets, since it correctly generates only less than 50% of the unweighted cases but over 80% of the weighted cases.</S>
  </SECTION>
  <SECTION title="5 Discussion" number="5">
    <S sid="99" ssid="1">The NLG2 and NLG3 systems automatically attempt to generalize from the knowledge inherent in the training corpus of templates, so that they can generate templates for novel attribute sets.</S>
    <S sid="100" ssid="2">There Probability 0.107582 0.00822441 0.00564712 0.00343372 0.0012465 Generated Text $time-dep flights from $city-fr to $city-to $time-dep flights between $city-fr and $city-to $time-dep flights $city-fr to $city-to flights from $city-fr to $city-to at $time-dep $time-dep flights from $city-fr to to $city-to Table 9: Sample output from NLG3.</S>
    <S sid="101" ssid="3">(Dependency tree structures are not shown.)</S>
    <S sid="102" ssid="4">Typical values for attributes: $time-dep = &amp;quot;10 a.m.&amp;quot;, $city-fr = &amp;quot;New York&amp;quot;, $city-to = &amp;quot;Miami&amp;quot; is some additional cost associated with producing the syntactic dependency annotation necessary for NLG3, but virtually no additional cost is associated with NLG2, beyond collecting the data itself and identifying the attributes.</S>
    <S sid="103" ssid="5">The trainable surface NLG systems in this paper differ from grammar-based systems in how they determine the attribute ordering and lexical choice.</S>
    <S sid="104" ssid="6">NLG2 and NLG3 automatically determine attribute ordering by simultaneously searching multiple orderings.</S>
    <S sid="105" ssid="7">In grammar-based approaches, such preferences need to be manually encoded.</S>
    <S sid="106" ssid="8">NLG2 and NLG3 solve the lexical choice problem by learning the words (via features in the maximum entropy probability model) that correlate with a given attribute and local context, whereas (Elhadad et al., 1997) uses a rule-based approach to decide the word choice.</S>
    <S sid="107" ssid="9">While trainable approaches avoid the expense of crafting a grammar to determine attribute ordering and lexical choice, they are less accurate than grammar-based approaches.</S>
    <S sid="108" ssid="10">For short phrases, accuracy is typically 100% with grammar-based approaches since the grammar writer can either correct or add a rule to generate the phrase of interest once an error is detected.</S>
    <S sid="109" ssid="11">Whereas with NLG2 and NLG3, one can tune the feature patterns, search parameters, and training data itself, but there is no guarantee that the tuning will result in 100% generation accuracy.</S>
    <S sid="110" ssid="12">Our approach differs from the corpus-based surface generation approaches of (Langkilde and Knight, 1998) and (Berger et al., 1996).</S>
    <S sid="111" ssid="13">(Langkilde and Knight, 1998) maps from semantics to words with a concept ontology, grammar, and lexicon, and ranks the resulting word lattice with corpus-based statistics, whereas NLG2 and NLG3 automatically learn the mapping from semantics to words from a corpus.</S>
    <S sid="112" ssid="14">(Berger et al., 1996) describes a statistical machine translation approach that generates text in the target language directly from the source text.</S>
    <S sid="113" ssid="15">NLG2 and NLG3 are also statistical learning approaches but generate from an actual semantic representation.</S>
    <S sid="114" ssid="16">This comparison suggests that statistical MT systems could also generate text from an &amp;quot;interlingua&amp;quot;, in a way similar to that of knowledgebased translation systems.</S>
    <S sid="115" ssid="17">We suspect that our statistical generation approach should perform accurately in domains of similar complexity to air travel.</S>
    <S sid="116" ssid="18">In the air travel domain, the length of a phrase fragment to describe an attribute is usually only a few words.</S>
    <S sid="117" ssid="19">Domains which require complex and lengthy phrase fragments to describe a single attribute will be more challenging to model with features that only look at word n-grams for n E {2, 3}.</S>
    <S sid="118" ssid="20">Domains in which there is greater ambiguity in word choice will require a more thorough search, i.e., a larger value of N, at the expense of CPU time and memory.</S>
    <S sid="119" ssid="21">Most importantly, the semantic annotation scheme for air travel has the property that it is both rich enough to accurately represent meaning in the domain, but simple enough to yield useful corpus statistics.</S>
    <S sid="120" ssid="22">Our approach may not scale to domains, such as freely occurring newspaper text, in which the semantic annotation schemes do not have this property.</S>
    <S sid="121" ssid="23">Our current approach has the limitation that it ignores the values of attributes, even though they might strongly influence the word order and word choice.</S>
    <S sid="122" ssid="24">This limitation can be overcome by using features on values, so that NLG2 and NLG3 might discover &#8212; to use a hypothetical example &#8212; that &amp;quot;flights leaving $city-fr&amp;quot; is preferred over &amp;quot;flights from $city-fr&amp;quot; when $city-fr is a particular value, such as &amp;quot;Miami&amp;quot;.</S>
  </SECTION>
  <SECTION title="6 Conclusions" number="6">
    <S sid="123" ssid="1">This paper presents the first systems (known to the author) that use a statistical learning approach to produce natural language text directly from a semantic representation.</S>
    <S sid="124" ssid="2">Information to solve the attribute ordering and lexical choice problems&#8212; which would normally be specified in a large handwritten grammar&#8212; is automatically collected from data with a few feature patterns, and is combined via the maximum entropy framework.</S>
    <S sid="125" ssid="3">NLG2 shows that using just local n-gram information can outperform the baseline, and NLG3 shows that using syntactic information can further improve generation accuracy.</S>
    <S sid="126" ssid="4">We conjecture that NLG2 and NLG3 should work in other domains which have a complexity similar to air travel, as well as available annotated data.</S>
  </SECTION>
  <SECTION title="7 Acknowledgements" number="7">
    <S sid="127" ssid="1">The author thanks Scott McCarley for serving as the second judge, and Scott Axelrod, Kishore Papineni, and Todd Ward for their helpful comments on this work.</S>
    <S sid="128" ssid="2">This work was supported in part by DARPA Contract # MDA972-97-C-0012.</S>
  </SECTION>
</PAPER>
