<PAPER>
  <S sid="0">Coarse-To-Fine N-Best Parsing And MaxEnt Discriminative Reranking</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Discriminative reranking is one method for constructing high-performance statistical parsers (Collins, 2000).</S>
    <S sid="2" ssid="2">A discriminative reranker requires a source of candidate parses for each sentence.</S>
    <S sid="3" ssid="3">This paper describes a simple yet novel method for constructing sets of 50-best parses based on a coarse-to-fine generative parser (Charniak, 2000).</S>
    <S sid="4" ssid="4">This method generates 50-best lists that are of substantially higher quality than previously obtainable.</S>
    <S sid="5" ssid="5">We used these parses as the input to a MaxEnt reranker (Johnson et al., 1999; Riezler et al., 2002) that selects the best parse from the set of parses for each sentence, obtaining an f-score of 91.0% on sentences of length 100 or less.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">We describe a reranking parser which uses a regularized MaxEnt reranker to select the best parse from the 50-best parses returned by a generative parsing model.</S>
    <S sid="7" ssid="2">The 50-best parser is a probabilistic parser that on its own produces high quality parses; the maximum probability parse trees (according to the parser&#8217;s model) have an f-score of 0.897 on section 23 of the Penn Treebank (Charniak, 2000), which is still state-of-the-art.</S>
    <S sid="8" ssid="3">However, the 50 best (i.e., the 50 highest probability) parses of a sentence often contain considerably better parses (in terms of f-score); this paper describes a 50-best parsing algorithm with an oracle f-score of 96.8 on the same data.</S>
    <S sid="9" ssid="4">The reranker attempts to select the best parse for a sentence from the 50-best list of possible parses for the sentence.</S>
    <S sid="10" ssid="5">Because the reranker only has to consider a relatively small number of parses per sentences, it is not necessary to use dynamic programming, which permits the features to be essentially arbitrary functions of the parse trees.</S>
    <S sid="11" ssid="6">While our reranker does not achieve anything like the oracle f-score, the parses it selects do have an f-score of 91.0, which is considerably better than the maximum probability parses of the n-best parser.</S>
    <S sid="12" ssid="7">In more detail, for each string s the n-best parsing algorithm described in section 2 returns the n highest probability parses Y(s) = {y1(s), ... , yn(s)} together with the probability p(y) of each parse y according to the parser&#8217;s probability model.</S>
    <S sid="13" ssid="8">The number n of parses was set to 50 for the experiments described here, but some simple sentences actually received fewer than 50 parses (so n is actually a function of s).</S>
    <S sid="14" ssid="9">Each yield or terminal string in the training, development and test data sets is mapped to such an n-best list of parse/probability pairs; the cross-validation scheme described in Collins (2000) was used to avoid training the n-best parser on the sentence it was being used to parse.</S>
    <S sid="15" ssid="10">A feature extractor, described in section 3, is a vector of m functions f = (fl, ... , fm), where each fj maps a parse y to a real number fj(y), which is the value of the jth feature on y.</S>
    <S sid="16" ssid="11">So a feature extractor maps each y to a vector of feature values f(y) = (f1(y), ..., fm(y)).</S>
    <S sid="17" ssid="12">Our reranking parser associates a parse with a score v&#952;(y), which is a linear function of the feature values f(y).</S>
    <S sid="18" ssid="13">That is, each feature fj is associated with a weight &#952;j, and the feature values and weights define the score v&#952;(y) of each parse y as follows: Given a string s, the reranking parser&#8217;s output &#710;y(s) on string s is the highest scoring parse in the n-best parses Y(s) for s, i.e., The feature weight vector &#952; is estimated from the labelled training corpus as described in section 4.</S>
    <S sid="19" ssid="14">Because we use labelled training data we know the correct parse y?</S>
    <S sid="20" ssid="15">(s) for each sentence s in the training data.</S>
    <S sid="21" ssid="16">The correct parse y?</S>
    <S sid="22" ssid="17">(s) is not always a member of the n-best parser&#8217;s output Y(s), but we can identify the parses Y+(s) in Y(s) with the highest f-scores.</S>
    <S sid="23" ssid="18">Informally, the estimation procedure finds a weight vector &#952; that maximizes the score v&#952;(y) of the parses y E Y+(s) relative to the scores of the other parses in Y(s), for each s in the training data.</S>
  </SECTION>
  <SECTION title="2 Recovering the n-best parses using coarse-to-fine parsing" number="2">
    <S sid="24" ssid="1">The major difficulty in n-best parsing, compared to 1-best parsing, is dynamic programming.</S>
    <S sid="25" ssid="2">For example, n-best parsing is straight-forward in best-first search or beam search approaches that do not use dynamic programming: to generate more than one parse, one simply allows the search mechanism to create successive versions to one&#8217;s heart&#8217;s content.</S>
    <S sid="26" ssid="3">A good example of this is the Roark parser (Roark, 2001) which works left-to right through the sentence, and abjures dynamic programming in favor of a beam search, keeping some large number of possibilities to extend by adding the next word, and then re-pruning.</S>
    <S sid="27" ssid="4">At the end one has a beam-width&#8217;s number of best parses (Roark, 2001).</S>
    <S sid="28" ssid="5">The Collins parser (Collins, 1997) does use dynamic programming in its search.</S>
    <S sid="29" ssid="6">That is, whenever a constituent with the same history is generated a second time, it is discarded if its probability is lower than the original version.</S>
    <S sid="30" ssid="7">If the opposite is true, then the original is discarded.</S>
    <S sid="31" ssid="8">This is fine if one only wants the first-best, but obviously it does not directly enumerate the n-best parses.</S>
    <S sid="32" ssid="9">However, Collins (Collins, 2000; Collins and Koo, in submission) has created an nbest version of his parser by turning off dynamic programming (see the user&#8217;s guide to Bikel&#8217;s re-implementation of Collins&#8217; parser, http://www.cis.upenn.edu/ dbikel/software.html#statparser).</S>
    <S sid="33" ssid="10">As with Roark&#8217;s parser, it is necessary to add a beam-width constraint to make the search tractable.</S>
    <S sid="34" ssid="11">With a beam width of 1000 the parser returns something like a 50-best list (Collins, personal communication), but the actual number of parses returned for each sentences varies.</S>
    <S sid="35" ssid="12">However, turning off dynamic programming results in a loss in efficiency.</S>
    <S sid="36" ssid="13">Indeed, Collins&#8217;s n-best list of parses for section 24 of the Penn tree-bank has some sentences with only a single parse, because the n-best parser could not find any parses.</S>
    <S sid="37" ssid="14">Now there are two known ways to produce n-best parses while retaining the use of dynamic programming: the obvious way and the clever way.</S>
    <S sid="38" ssid="15">The clever way is based upon an algorithm developed by Schwartz and Chow (1990).</S>
    <S sid="39" ssid="16">Recall the key insight in the Viterbi algorithm: in the optimal parse the parsing decisions at each of the choice points that determine a parse must be optimal, since otherwise one could find a better parse.</S>
    <S sid="40" ssid="17">This insight extends to n-best parsing as follows.</S>
    <S sid="41" ssid="18">Consider the secondbest parse: if it is to differ from the best parse, then at least one of its parsing decisions must be suboptimal.</S>
    <S sid="42" ssid="19">In fact, all but one of the parsing decisions in second-best parse must be optimal, and the one suboptimal decision must be the second-best choice at that choice point.</S>
    <S sid="43" ssid="20">Further, the nth-best parse can only involve at most n suboptimal parsing decisions, and all but one of these must be involved in one of the second through the n&#8722;1th-best parses.</S>
    <S sid="44" ssid="21">Thus the basic idea behind this approach to n-best parsing is to first find the best parse, then find the second-best parse, then the third-best, and so on.</S>
    <S sid="45" ssid="22">The algorithm was originally described for hidden Markov models.</S>
    <S sid="46" ssid="23">Since this first draft of this paper we have become aware of two PCFG implementations of this algorithm (Jimenez and Marzal, 2000; Huang and Chang, 2005).</S>
    <S sid="47" ssid="24">The first was tried on relatively small grammars, while the second was implemented on top of the Bikel re-implementation of the Collins v&#952;(y). parser (Bikel, 2004) and achieved oracle results for 50-best parses similar to those we report below.</S>
    <S sid="48" ssid="25">Here, however, we describe how to find n-best parses in a more straight-forward fashion.</S>
    <S sid="49" ssid="26">Rather than storing a single best parse of each edge, one stores n of them.</S>
    <S sid="50" ssid="27">That is, when using dynamic programming, rather than throwing away a candidate if it scores less than the best, one keeps it if it is one of the top n analyses for this edge discovered so far.</S>
    <S sid="51" ssid="28">This is really very straight-forward.</S>
    <S sid="52" ssid="29">The problem is space.</S>
    <S sid="53" ssid="30">Dynamic programming parsing algorithms for PCFGs require O(m2) dynamic programming states, where m is the length of the sentence, so an n-best parsing algorithm requires O(nm2).</S>
    <S sid="54" ssid="31">However things get much worse when the grammar is bilexicalized.</S>
    <S sid="55" ssid="32">As shown by Eisner (Eisner and Satta, 1999) the dynamic programming algorithms for bilexicalized PCFGs require O(m3) states, so a n-best parser would require O(nm3) states.</S>
    <S sid="56" ssid="33">Things become worse still in a parser like the one described in Charniak (2000) because it conditions on (and hence splits the dynamic programming states according to) features of the grandparent node in addition to the parent, thus multiplying the number of possible dynamic programming states even more.</S>
    <S sid="57" ssid="34">Thus nobody has implemented this version.</S>
    <S sid="58" ssid="35">There is, however, one particular feature of the Charniak parser that mitigates the space problem: it is a &#8220;coarse-to-fine&#8221; parser.</S>
    <S sid="59" ssid="36">By &#8220;coarse-to-fine&#8221; we mean that it first produces a crude version of the parse using coarse-grained dynamic programming states, and then builds fine-grained analyses by splitting the most promising of coarse-grained states.</S>
    <S sid="60" ssid="37">A prime example of this idea is from Goodman (1997), who describes amethod for producing a simple but crude approximate grammar of a standard context-free grammar.</S>
    <S sid="61" ssid="38">He parses a sentence using the approximate grammar, and the results are used to constrain the search for a parse with the full CFG.</S>
    <S sid="62" ssid="39">He finds that total parsing time is greatly reduced.</S>
    <S sid="63" ssid="40">A somewhat different take on this paradigm is seen in the parser we use in this paper.</S>
    <S sid="64" ssid="41">Here the parser first creates a parse forest based upon a much less complex version of the complete grammar.</S>
    <S sid="65" ssid="42">In particular, it only looks at standard CFG features, the parent and neighbor labels.</S>
    <S sid="66" ssid="43">Because this grammar encodes relatively little state information, its dynamic programming states are relatively coarse and hence there are comparatively few of them, so it can be efficiently parsed using a standard dynamic programming bottom-up CFG parser.</S>
    <S sid="67" ssid="44">However, precisely because this first stage uses a grammar that ignores many important contextual features, the best parse it finds will not, in general, be the best parse according to the finer-grained second-stage grammar, so clearly we do not want to perform best-first parsing with this grammar.</S>
    <S sid="68" ssid="45">Instead, the output of the first stage is a polynomial-sized packed parse forest which records the left and right string positions for each local tree in the parses generated by this grammar.</S>
    <S sid="69" ssid="46">The edges in the packed parse forest are then pruned, to focus attention on the coarsegrained states that are likely to correspond to highprobability fine-grained states.</S>
    <S sid="70" ssid="47">The edges are then pruned according to their marginal probability conditioned on the string s being parsed as follows: Here nij,k is a constituent of type i spanning the words from j to k, &#945;(nij,k) is the outside probability of this constituent, and Q(nij,k) is its inside probability.</S>
    <S sid="71" ssid="48">From parse forest both &#945; and Q can be computed in time proportional to the size of the compact forest.</S>
    <S sid="72" ssid="49">The parser then removes all constituents nij,k whose probability falls below some preset threshold.</S>
    <S sid="73" ssid="50">In the version of this parser available on the web, this threshold is on the order of 10&#8722;4.</S>
    <S sid="74" ssid="51">The unpruned edges are then exhaustively evaluated according to the fine-grained probabilistic model; in effect, each coarse-grained dynamic programming state is split into one or more fine-grained dynamic programming states.</S>
    <S sid="75" ssid="52">As noted above, the fine-grained model conditions on information that is not available in the coarse-grained model.</S>
    <S sid="76" ssid="53">This includes the lexical head of one&#8217;s parents, the part of speech of this head, the parent&#8217;s and grandparent&#8217;s category labels, etc.</S>
    <S sid="77" ssid="54">The fine-grained states investigated by the parser are constrained to be refinements of the coarse-grained states, which drastically reduces the number of fine-grained states that need to be investigated.</S>
    <S sid="78" ssid="55">It is certainly possible to do dynamic programming parsing directly with the fine-grained grammar, but precisely because the fine-grained grammar conditions on a wide variety of non-local contextual information there would be a very large number of different dynamic programming states, so direct dynamic programming parsing with the fine-grained grammar would be very expensive in terms of time and memory.</S>
    <S sid="79" ssid="56">As the second stage parse evaluates all the remaining constituents in all of the contexts in which they appear (e.g., what are the possible grand-parent labels) it keeps track of the most probable expansion of the constituent in that context, and at the end is able to start at the root and piece together the overall best parse.</S>
    <S sid="80" ssid="57">Now comes the easy part.</S>
    <S sid="81" ssid="58">To create a 50-best parser we simply change the fine-grained version of 1-best algorithm in accordance with the &#8220;obvious&#8221; scheme outlined earlier in this section.</S>
    <S sid="82" ssid="59">The first, coarse-grained, pass is not changed, but the second, fine-grained, pass keeps the n-best possibilities at each dynamic programming state, rather than keeping just first best.</S>
    <S sid="83" ssid="60">When combining two constituents to form a larger constituent, we keep the best 50 of the 2500 possibilities they offer.</S>
    <S sid="84" ssid="61">Naturally, if we keep each 50-best list sorted, we do nothing like 2500 operations.</S>
    <S sid="85" ssid="62">The experimental question is whether, in practice, the coarse-to-fine architecture keeps the number of dynamic programming states sufficiently low that space considerations do not defeat us.</S>
    <S sid="86" ssid="63">The answer seems to be yes.</S>
    <S sid="87" ssid="64">We ran the algorithm on section 24 of the Penn WSJ tree-bank using the default pruning settings mentioned above.</S>
    <S sid="88" ssid="65">Table 1 shows how the number of fine-grained dynamic programming states increases as a function of sentence length for the sentences in section 24 of the Treebank.</S>
    <S sid="89" ssid="66">There are no sentences of length greater than 69 in this section.</S>
    <S sid="90" ssid="67">Columns two to four show the number of sentences in each bucket, their average length, and the average number of fine-grained dynamic programming structures per sentence.</S>
    <S sid="91" ssid="68">The final column gives the value of the function 100*L1.5 where L is the average length of sentences in the bucket.</S>
    <S sid="92" ssid="69">Except for bucket 6, which is abnormally low, it seems that this add-hoc function tracks the number of structures quite well.</S>
    <S sid="93" ssid="70">Thus the number of dynamic programming states does not grow as L2, much less as L3.</S>
    <S sid="94" ssid="71">To put the number of these structures per sentence in perspective, consider the size of such structures.</S>
    <S sid="95" ssid="72">Each one must contain a probability, the nonterminal label of the structure, and a vector of pointers to it&#8217;s children (an average parent has slightly more than two children).</S>
    <S sid="96" ssid="73">If one were concerned about every byte this could be made quite small.</S>
    <S sid="97" ssid="74">In our implementation probably the biggest factor is the STL overhead on vectors.</S>
    <S sid="98" ssid="75">If we figure we are using, say, 25 bytes per structure, the total space required is only 1.25Mb even for 50,000 dynamic programming states, so it is clearly not worth worrying about the memory required.</S>
    <S sid="99" ssid="76">The resulting n-bests are quite good, as shown in Table 2.</S>
    <S sid="100" ssid="77">(The results are for all sentences of section 23 of the WSJ tree-bank of length &#8804; 100.)</S>
    <S sid="101" ssid="78">From the 1-best result we see that the base accuracy of the parser is 89.7%.1 2-best and 10-best show dramatic oracle-rate improvements.</S>
    <S sid="102" ssid="79">After that things start to slow down, and we achieve an oracle rate of 0.968 at 50-best.</S>
    <S sid="103" ssid="80">To put this in perspective, Roark (Roark, 2001) reports oracle results of 0.941 (with the same experimental setup) using his parser to return a variable number of parses.</S>
    <S sid="104" ssid="81">For the case cited his parser returns, on average, 70 parses per sentence.</S>
    <S sid="105" ssid="82">Finally, we note that 50-best parsing is only a factor of two or three slower than 1-best.</S>
  </SECTION>
  <SECTION title="3 Features for reranking parses" number="3">
    <S sid="106" ssid="1">This section describes how each parse y is mapped to a feature vector f(y) = (f1(y), ... , fm(y)).</S>
    <S sid="107" ssid="2">Each feature fj is a function that maps a parse to a real number.</S>
    <S sid="108" ssid="3">The first feature f1(y) = log p(y) is the logarithm of the parse probability p according to the n-best parser model.</S>
    <S sid="109" ssid="4">The other features are integer valued; informally, each feature is associated with a particular configuration, and the feature&#8217;s value fj(y) is the number of times that the configuration that fj indicates.</S>
    <S sid="110" ssid="5">For example, the feature feat pizza(y) counts the number of times that a phrase in y headed by eat has a complement phrase headed by pizza.</S>
    <S sid="111" ssid="6">Features belong to feature schema, which are abstract schema from which specific features are instantiated.</S>
    <S sid="112" ssid="7">For example, the feature feat pizza is an instance of the &#8220;Heads&#8221; schema.</S>
    <S sid="113" ssid="8">Feature schema are often parameterized in various ways.</S>
    <S sid="114" ssid="9">For example, the &#8220;Heads&#8221; schema is parameterized by the type of heads that the feature schema identifies.</S>
    <S sid="115" ssid="10">Following Grimshaw (1997), we associate each phrase with a lexical head and a function head.</S>
    <S sid="116" ssid="11">For example, the lexical head of an NP is a noun while the functional head of an NP is a determiner, and the lexical head of a VP is a main verb while the functional head of VP is an auxiliary verb.</S>
    <S sid="117" ssid="12">We experimented with various kinds of feature selection, and found that a simple count threshold performs as well as any of the methods we tried.</S>
    <S sid="118" ssid="13">Specifically, we ignored all features that did not vary on the parses of at least t sentences, where t is the count threshold.</S>
    <S sid="119" ssid="14">In the experiments described below t = 5, though we also experimented with t = 2.</S>
    <S sid="120" ssid="15">The rest of this section outlines the feature schemata used in the experiments below.</S>
    <S sid="121" ssid="16">These feature schemata used here were developed using the n-best parses provided to us by Michael Collins approximately a year before the n-best parser described here was developed.</S>
    <S sid="122" ssid="17">We used the division into preliminary training and preliminary development data sets described in Collins (2000) while experimenting with feature schemata; i.e., the first 36,000 sentences of sections 2&#8211;20 were used as preliminary training data, and the remaining sentences of sections 20 and 21 were used as preliminary development data.</S>
    <S sid="123" ssid="18">It is worth noting that developing feature schemata is much more of an art than a science, as adding or deleting a single schema usually does not have a significant effect on performance, yet the overall impact of many well-chosen schemata can be dramatic.</S>
    <S sid="124" ssid="19">Using the 50-best parser output described here, there are 1,148,697 features that meet the count threshold of at least 5 on the main training data (i.e., Penn treebank sections 2&#8211;21).</S>
    <S sid="125" ssid="20">We list each feature schema&#8217;s name, followed by the number of features in that schema with a count of at least 5, together with a brief description of the instances of the schema and the schema&#8217;s parameters.</S>
    <S sid="126" ssid="21">CoPar (10) The instances of this schema indicate conjunct parallelism at various different depths.</S>
    <S sid="127" ssid="22">For example, conjuncts which have the same label are parallel at depth 0, conjuncts with the same label and whose children have the same label are parallel at depth 1, etc.</S>
    <S sid="128" ssid="23">CoLenPar (22) The instances of this schema indicate the binned difference in length (in terms of number of preterminals dominated) in adjacent conjuncts in the same coordinated structures, conjoined with a boolean flag that indicates whether the pair is final in the coordinated phrase.</S>
    <S sid="129" ssid="24">RightBranch (2) This schema enables the reranker to prefer right-branching trees.</S>
    <S sid="130" ssid="25">One instance of this schema returns the number of nonterminal nodes that lie on the path from the root node to the right-most non-punctuation preterminal node, and the other instance of this schema counts the number of the other nonterminal nodes in the parse tree.</S>
    <S sid="131" ssid="26">Heavy (1049) This schema classifies nodes by their category, their binned length (i.e., the number of preterminals they dominate), whether they are at the end of the sentence and whether they are followed by punctuation.</S>
    <S sid="132" ssid="27">Neighbours (38,245) This schema classifies nodes by their category, their binned length, and the part of speech categories of the E1 preterminals to the node&#8217;s left and the $2 preterminals to the node&#8217;s right.</S>
    <S sid="133" ssid="28">E1 and E2 are parameters of this schema; here E1 = 1 or E1 = 2 and E2 = 1.</S>
    <S sid="134" ssid="29">Rule (271,655) The instances of this schema are local trees, annotated with varying amounts of contextual information controlled by the schema&#8217;s parameters.</S>
    <S sid="135" ssid="30">This schema was inspired by a similar schema in Collins and Koo (in submission).</S>
    <S sid="136" ssid="31">The parameters to this schema control whether nodes are annotated with their preterminal heads, their terminal heads and their ancestors&#8217; categories.</S>
    <S sid="137" ssid="32">An additional parameter controls whether the feature is specialized to embedded or non-embedded clauses, which roughly corresponds to Emonds&#8217; &#8220;nonroot&#8221; and &#8220;root&#8221; contexts (Emonds, 1976).</S>
    <S sid="138" ssid="33">NGram (54,567) The instances of this schema are E-tuples of adjacent children nodes of the same parent.</S>
    <S sid="139" ssid="34">This schema was inspired by a similar schema in Collins and Koo (in submission).</S>
    <S sid="140" ssid="35">This schema has the same parameters as the Rule schema, plus the length E of the tuples of children (E = 2 here).</S>
    <S sid="141" ssid="36">Heads (208,599) The instances of this schema are tuples of head-to-head dependencies, as mentioned above.</S>
    <S sid="142" ssid="37">The category of the node that is the least common ancestor of the head and the dependent is included in the instance (this provides a crude distinction between different classes of arguments).</S>
    <S sid="143" ssid="38">The parameters of this schema are whether the heads involved are lexical or functional heads, the number of heads in an instance, and whether the lexical item or just the head&#8217;s part of speech are included in the instance.</S>
    <S sid="144" ssid="39">LezFunHeads (2,299) The instances of this feature are the pairs of parts of speech of the lexical head and the functional head of nodes in parse trees.</S>
    <S sid="145" ssid="40">WProj (158,771) The instances of this schema are preterminals together with the categories of E of their closest maximal projection ancestors.</S>
    <S sid="146" ssid="41">The parameters of this schema control the number E of maximal projections, and whether the preterminals and the ancestors are lexicalized.</S>
    <S sid="147" ssid="42">Word (49,097) The instances of this schema are lexical items together with the categories of E of their immediate ancestor nodes, where E is a schema parameter (E = 2 or E = 3 here).</S>
    <S sid="148" ssid="43">This feature was inspired by a similar feature in Klein and Manning (2003).</S>
    <S sid="149" ssid="44">HeadTree (72,171) The instances of this schema are tree fragments consisting of the local trees consisting of the projections of a preterminal node and the siblings of such projections.</S>
    <S sid="150" ssid="45">This schema is parameterized by the head type (lexical or functional) used to determine the projections of a preterminal, and whether the head preterminal is lexicalized.</S>
    <S sid="151" ssid="46">NGramTree (291,909) The instances of this schema are subtrees rooted in the least common ancestor of E contiguous preterminal nodes.</S>
    <S sid="152" ssid="47">This schema is parameterized by the number E of contiguous preterminals (E = 2 or E = 3 here) and whether these preterminals are lexicalized.</S>
  </SECTION>
  <SECTION title="4 Estimating feature weights" number="4">
    <S sid="153" ssid="1">This section explains how we estimate the feature weights 0 = (01, ... , 0m) for the feature functions f = (f1, ... , fm).</S>
    <S sid="154" ssid="2">We use a MaxEnt estimator to find the feature weights &#710;0, where L is the loss function and R is a regularization penalty term: The training data D = (s1, ... , sn,) is a sequence of sentences and their correct parses y?</S>
    <S sid="155" ssid="3">(s1), ... , y?(sn).</S>
    <S sid="156" ssid="4">We used the 20-fold crossvalidation technique described in Collins (2000) to compute the n-best parses Y(s) for each sentence s in D. In general the correct parse y?</S>
    <S sid="157" ssid="5">(s) is not a member of Y(s), so instead we train the reranker to identify one of the best parses Y+(s) = arg maxy&#8712;Y(s) Fy,,(s)(y) in the n-best parser&#8217;s output, where Fy,,(y) is the Parseval f-score of y evaluated with respect to y?.</S>
    <S sid="158" ssid="6">Because there may not be a unique best parse for each sentence (i.e., |Y+(s) |&gt; 1 for some sentences s) we used the variant of MaxEnt described in Riezler et al. (2002) for partially labelled training data.</S>
    <S sid="159" ssid="7">Recall the standard MaxEnt conditional probability model for a parse y E Y: The loss function LD proposed in Riezler et al. (2002) is just the negative log conditional likelihood of the best parses Y+(s) relative to the n-best parser output Y(s): The partial derivatives of this loss function, which are required by the numerical estimation procedure, are: In the experiments reported here, we used a Gaussian or quadratic regularizer R(w) = cPmj=1 w2j, where c is an adjustable parameter that controls the amount of regularization, chosen to optimize the reranker&#8217;s f-score on the development set (section 24 of the treebank).</S>
    <S sid="160" ssid="8">We used the Limited Memory Variable Metric optimization algorithm from the PETSc/TAO optimization toolkit (Benson et al., 2004) to find the optimal feature weights &#952;&#710; because this method seems substantially faster than comparable methods (Malouf, 2002).</S>
    <S sid="161" ssid="9">The PETSc/TAO toolkit provides a variety of other optimization algorithms and flags for controlling convergence, but preliminary experiments on the Collins&#8217; trees with different algorithms and early stopping did not show any performance improvements, so we used the default PETSc/TAO setting for our experiments here.</S>
  </SECTION>
  <SECTION title="5 Experimental results" number="5">
    <S sid="162" ssid="1">We evaluated the performance of our reranking parser using the standard PARSEVAL metrics.</S>
    <S sid="163" ssid="2">We n-best trees f-score New 0.9102 Collins 0.9037 best trees, with weights estimated from sections 2&#8211; 21 and the regularizer constant c adjusted for optimal f-score on section 24 and evaluated on sentences of length less than 100 in section 23. trained the n-best parser on sections 2&#8211;21 of the Penn Treebank, and used section 24 as development data to tune the mixing parameters of the smoothing model.</S>
    <S sid="164" ssid="3">Similarly, we trained the feature weights &#952; with the MaxEnt reranker on sections 2&#8211;21, and adjusted the regularizer constant c to maximize the f-score on section 24 of the treebank.</S>
    <S sid="165" ssid="4">We did this both on the trees supplied to us by Michael Collins, and on the output of the n-best parser described in this paper.</S>
    <S sid="166" ssid="5">The results are presented in Table 3.</S>
    <S sid="167" ssid="6">The n-best parser&#8217;s most probable parses are already of state-of-the-art quality, but the reranker further improves the f-score.</S>
  </SECTION>
  <SECTION title="6 Conclusion" number="6">
    <S sid="168" ssid="1">This paper has described a dynamic programming n-best parsing algorithm that utilizes a heuristic coarse-to-fine refinement of parses.</S>
    <S sid="169" ssid="2">Because the coarse-to-fine approach prunes the set of possible parse edges beforehand, a simple approach which enumerates the n-best analyses of each parse edge is not only practical but quite efficient.</S>
    <S sid="170" ssid="3">We use the 50-best parses produced by this algorithm as input to a MaxEnt discriminative reranker.</S>
    <S sid="171" ssid="4">The reranker selects the best parse from this set of parses using a wide variety of features.</S>
    <S sid="172" ssid="5">The system we described here has an f-score of 0.91 when trained and tested using the standard PARSEVAL framework.</S>
    <S sid="173" ssid="6">This result is only slightly higher than the highest reported result for this test-set, Bod&#8217;s (.907) (Bod, 2003).</S>
    <S sid="174" ssid="7">More to the point, however, is that the system we describe is reasonably efficient so it can be used for the kind of routine parsing currently being handled by the Charniak or Collins parsers.</S>
    <S sid="175" ssid="8">A 91.0 f-score represents a 13% reduction in fmeasure error over the best of these parsers.2 Both the 50-best parser, and the reranking parser can be found at ftp://ftp.cs.brown.edu/pub/nlparser/, named parser and reranker respectively.</S>
    <S sid="176" ssid="9">Acknowledgements We would like to thanks Michael Collins for the use of his data and many helpful comments, and Liang Huang for providing an early draft of his paper and very useful comments on our paper.</S>
    <S sid="177" ssid="10">Finally thanks to the National Science Foundation for its support (NSF IIS-0112432, NSF 9721276, and NSF DMS-0074276).</S>
  </SECTION>
</PAPER>
