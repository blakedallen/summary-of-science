<PAPER>
  <S sid="0">Two-Level Many-Paths Generation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Large-scale natural language generation requires the integration of vast amounts of knowledge: lexical, grammatical, and conceptual.</S>
    <S sid="2" ssid="2">A robust generator must be able to well pieces of knowledge are missing.</S>
    <S sid="3" ssid="3">It must also be robust against incomplete or inaccurate inputs.</S>
    <S sid="4" ssid="4">To attack these problems, we have built a hybrid generator, in which gaps in symbolic knowledge are filled by statistical methods.</S>
    <S sid="5" ssid="5">We describe algorithms and show experimental results.</S>
    <S sid="6" ssid="6">We also discuss how the hybrid generation model can be used to simplify current generators and enhance their portability, even when perfect knowledge is in principle obtainable.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="7" ssid="1">A large-scale natural language generation (NLG) system for unrestricted text should be able to operate in an environment of 50,000 conceptual terms and 100,000 words or phrases.</S>
    <S sid="8" ssid="2">Turning conceptual expressions into English requires the integration of large knowledge bases (KBs), including grammar, ontology, lexicon, collocations, and mappings between them.</S>
    <S sid="9" ssid="3">The quality of an NLG system depends on the quality of its inputs and knowledge bases.</S>
    <S sid="10" ssid="4">Given that perfect KBs do not yet exist, an important question arises: can we build high-quality NLG systems that are robust against incomplete KBs and inputs?</S>
    <S sid="11" ssid="5">Although robustness has been heavily studied in natural language understanding (Weischedel and Black, 1980; Hayes, 1981; Lavie, 1994), it has received much less attention in NLG (Robin, 1995).</S>
    <S sid="12" ssid="6">We describe a hybrid model for natural language generation which offers improved performance in the presence of knowledge gaps in the generator (the grammar and the lexicon), and of errors in the semantic input.</S>
    <S sid="13" ssid="7">The model comes out of our practical experience in building a large Japanese-English newspaper machine translation system, JAPANGLOSS (Knight et al., 1994; Knight et al., 1995).</S>
    <S sid="14" ssid="8">This system translates Japanese into representations whose terms are drawn from the SENSUS ontology (Knight and Luk, 1994), a 70,000-node knowledge base skeleton derived from resources like WordNet (Miller, 1990), Longman's Dictionary (Procter, 1978), and the PENMAN Upper Model (Bateman, 1990).</S>
    <S sid="15" ssid="9">These representations are turned into English during generation.</S>
    <S sid="16" ssid="10">Because we are processing unrestricted newspaper text, all modules in JAPANGLOSS must be robust.</S>
    <S sid="17" ssid="11">In addition, we show how the model is useful in simplifying the design of a generator and its knowledge bases even when perfect knowledge is available.</S>
    <S sid="18" ssid="12">This is accomplished by relegating some aspects of lexical choice (such as preposition selection and noncompositional interlexical constraints) to a statistical component.</S>
    <S sid="19" ssid="13">The generator can then use simpler rules and combine them more freely; the price of this simplicity is that some of the output may be invalid.</S>
    <S sid="20" ssid="14">At this point, the statistical component intervenes and filters from the output all but the fluent expressions.</S>
    <S sid="21" ssid="15">The advantage of this two-level approach is that the knowledge bases in the generator become simpler, easier to develop, more portable across domains, and more accurate and robust in the presence of knowledge gaps.</S>
  </SECTION>
  <SECTION title="2 Knowledge Gaps" number="2">
    <S sid="22" ssid="1">In our machine translation experiences, we traced generation disfluencies to two sources:1 (1) incomplete or inaccurate conceptual (interlingua) structures, caused by knowledge gaps in the source language analyzer, and (2) knowledge gaps in the generator itself.</S>
    <S sid="23" ssid="2">These two categories of gaps include: The generation system we use, PENMAN (Penman, 1989), is robust because it supplies appropriate defaults when knowledge is missing.</S>
    <S sid="24" ssid="3">But the default choices frequently are not the optimal ones; the hybrid model we describe provides more satisfactory solutions.</S>
  </SECTION>
  <SECTION title="3 Issues in Lexical Choice" number="3">
    <S sid="25" ssid="1">The process of selecting words that will lexicalize each semantic concept is intrinsically linked with syntactic, semantic, and discourse structure issues.2 Multiple constraints apply to each lexical decision, often in a highly interdependent manner.</S>
    <S sid="26" ssid="2">However, while some lexical decisions can affect future (or past) lexical decisions, others are purely local, in the sense that they do not affect the lexicalization of other semantic roles.</S>
    <S sid="27" ssid="3">Consider the case of time adjuncts that express a single point in time, and assume that the generator has already decided to use a prepositional phrase for one of them.</S>
    <S sid="28" ssid="4">There are several forms of such adjuncts, e.g., { at five.</S>
    <S sid="29" ssid="5">She left on Monday. in February.</S>
    <S sid="30" ssid="6">In terms of their interactions with the rest of the sentence, these manifestations of the adjunct are identical.</S>
    <S sid="31" ssid="7">The use of different prepositions is an interlexical constraint between the semantic and syntactic heads of the PP that does not propagate outside the PP.</S>
    <S sid="32" ssid="8">Consequently, the selection of the preposition can be postponed until the very end.</S>
    <S sid="33" ssid="9">Existing generation models however select the preposition according to defaults or randomly among possible alternatives or by explicitly encoding the lexical constraints.</S>
    <S sid="34" ssid="10">The PENMAN generation system (Penman, 1989) defaults the preposition choice for point-time adjuncts to at, the most commonly used preposition in such cases.</S>
    <S sid="35" ssid="11">The FUF/SURGE (Elhadad, 1993) generation system is an example where prepositional lexical restrictions in time adjuncts are encoded by hand, producing fluent expressions but at the cost of a larger grammar.</S>
    <S sid="36" ssid="12">Collocational restrictions are another example of lexical constraints.</S>
    <S sid="37" ssid="13">Phrases such as three straight victories, which are frequently used in sports reports to express historical information, can be decomposed semantically into the head noun plus its modifiers.</S>
    <S sid="38" ssid="14">However, when ellipsis of the head noun is considered, a detailed corpus analysis of actual basketball game reports (Robin, 1995) shows that the forms won/lost three straight X, won/lost three consecutive X, and won/lost three straight are regularly used, but the form *won/lost three consecutive is not.</S>
    <S sid="39" ssid="15">To achieve fluent output within the knowledge-based generation paradigm, lexical constraints of this type must be explicitly identified and represented.</S>
    <S sid="40" ssid="16">Both the above examples indicate the presence of (perhaps domain-dependent) lexical constraints that are not explainable on semantic grounds.</S>
    <S sid="41" ssid="17">In the case of prepositions in time adjuncts, the constraints are institutionalized in the language, but still nothing about the concept MONTH relates to the use of the preposition in with month names instead of, say, on (Herskovits, 1986).</S>
    <S sid="42" ssid="18">Furthermore, lexical constraints are not limited to the syntagmatic, interlexical constraints discussed above.</S>
    <S sid="43" ssid="19">For a generator to be able to produce sufficiently varied text, multiple renditions of the same concept must be accessible.</S>
    <S sid="44" ssid="20">Then, the generator is faced with paradigmatic choices among alternatives that without sufficient information may look equivalent.</S>
    <S sid="45" ssid="21">These choices include choices among synonyms (and near-synonyms), and choices among alternative syntactic realizations of a semantic role.</S>
    <S sid="46" ssid="22">However, it is possible that not all the alternatives actually share the same level of fluency or currency in the domain, even if they are rough paraphrases.</S>
    <S sid="47" ssid="23">In short, knowledge-based generators are faced with multiple, complex, and interacting lexical constraints,3 and the integration of these constraints is a difficult problem, to the extent that the need for a different specialized architecture for lexical choice in each domain has been suggested (Danlos, 1986).</S>
    <S sid="48" ssid="24">However, compositional approaches to lexical choice have been successful whenever detailed representations of lexical constraints can be collected and entered into the lexicon (e.g., (Elhadad, 1993; Kukich et al., 1994)).</S>
    <S sid="49" ssid="25">Unfortunately, most of these constraints must be identified manually, and even when automatic methods for the acquisition of some types of this lexical knowledge exist (Smadja and McKeown, 1991), the extracted constraints must still be transformed to the generator's representation language by hand.</S>
    <S sid="50" ssid="26">This narrows the scope of the lexicon to a specific domain; the approach fails to scale up to unrestricted language.</S>
    <S sid="51" ssid="27">When the goal is domain-independent generation, we need to investigate methods for producing reasonable output in the absence of a large part of the information traditionally available to the lexical chooser.</S>
  </SECTION>
  <SECTION title="4 Current Solutions" number="4">
    <S sid="52" ssid="1">Two strategies have been used in lexical choice when knowledge gaps exist: selection of a default,4 and random choice among alternatives.</S>
    <S sid="53" ssid="2">Default choices have the advantage that they can be carefully chosen to mask knowledge gaps to some extent.</S>
    <S sid="54" ssid="3">For example, PENMAN defaults article selection to the and tense to present, so it will produce The dog chases the cat in the absence of definiteness information.</S>
    <S sid="55" ssid="4">Choosing the is a good tactic, because the works with mass, count, singular, plural, and occasionally even proper nouns, while a does not.</S>
    <S sid="56" ssid="5">On the down side, the's only outnumber a's and an's by about two-to-one (Knight and Chander, 1994), so guessing the will frequently be wrong.</S>
    <S sid="57" ssid="6">Another ploy is to give preference to nominalizations over clauses.</S>
    <S sid="58" ssid="7">This generates sentences like They plan the statement of the filing for bankruptcy, avoiding disasters like They plan that it is said to file for bankruptcy.</S>
    <S sid="59" ssid="8">Of course, we also miss out on sparkling renditions like They plan to say that they will file for bankruptcy.</S>
    <S sid="60" ssid="9">The alternative of randomized decisions offers increased paraphrasing power but also the risk of producing some non-fluent expressions; we could generate sentences like The dog chased a cat and A dog will chase the cat, but also An earth circles a sun.</S>
    <S sid="61" ssid="10">To sum up, defaults can help against knowledge gaps, but they take time to construct, limit paraphrasing power, and only return a mediocre level of quality.</S>
    <S sid="62" ssid="11">We seek methods that can do better.</S>
  </SECTION>
  <SECTION title="5 Statistical Methods" number="5">
    <S sid="63" ssid="1">Another approach to the problem of incomplete knowledge is the following.</S>
    <S sid="64" ssid="2">Suppose that according to our knowledge bases, input I may be rendered as sentence A or sentence B.</S>
    <S sid="65" ssid="3">If we had a device that could invoke new, easily obtainable knowledge to score the input/output pair (I, A) against (I, B), we could then choose A over B, or vice-versa.</S>
    <S sid="66" ssid="4">An alternative to this is to forget / and simply score A and B on the basis of fluency.</S>
    <S sid="67" ssid="5">This essentially assumes that our generator produces valid mappings from I, but may be unsure as to which is the correct rendition.</S>
    <S sid="68" ssid="6">At this point, we can make another approximation&#8212; modeling fluency as likelihood.</S>
    <S sid="69" ssid="7">In other words, how often have we seen A and B in the past?</S>
    <S sid="70" ssid="8">If A has occurred fifty times and B none at all, then we choose A.</S>
    <S sid="71" ssid="9">But if A and B are long sentences, then probably we have seen neither.</S>
    <S sid="72" ssid="10">In that case, further approximations are required.</S>
    <S sid="73" ssid="11">For example, does A contain frequent three-word sequences?</S>
    <S sid="74" ssid="12">Does B?</S>
    <S sid="75" ssid="13">Following this reasoning, we are led into statistical language modeling.</S>
    <S sid="76" ssid="14">We built a language model 4See also (Harbusch et al., 1994) for a thorough discussion of defaulting in NLG systems. for the English language by estimating bigram and trigram probabilities from a large collection of 46 million words of Wall Street Journal material.'</S>
    <S sid="77" ssid="15">We smoothed these estimates according to class membership for proper names and numbers, and according to an extended version of the enhanced GoodTuring method (Church and Gale, 1991) for the remaining words.</S>
    <S sid="78" ssid="16">The latter smoothing operation not only optimally regresses the probabilities of seen ngrams but also assigns a non-zero probability to all unseen n-grams which depends on how likely their component m-grams (m &lt; n, i.e., words and bigrams) are.</S>
    <S sid="79" ssid="17">The resulting conditional probabilities are converted to log-likelihoods for reasons of numerical accuracy and used to estimate the overall probability P(S) of any English sentence S according to a Markov assumption, i.e., Because both equations would assign lower and lower probabilities to longer sentences and we need to compare sentences of different lengths, a heuristic strictly increasing function of sentence length, f(/) 0.5/, is added to the log-likelihood estimates.</S>
  </SECTION>
  <SECTION title="6 First Experiment" number="6">
    <S sid="80" ssid="1">Our first goal was to integrate the symbolic knowledge in the PENMAN system with the statistical knowledge in our language model.</S>
    <S sid="81" ssid="2">We took a semantic representation generated automatically from a short Japanese sentence.</S>
    <S sid="82" ssid="3">We then used PENMAN to generate 3,456 English sentences corresponding to the 3,456 (= 27 &#8226; 33) possible combinations of the values of seven binary and three ternary features that were unspecified in the semantic input.</S>
    <S sid="83" ssid="4">These features were relevant to the semantic representation but their values were not extractable from the Japanese sentence, and thus each of their combinations corresponded to a particular interpretation among the many possible in the presence of incompleteness in the semantic input.</S>
    <S sid="84" ssid="5">Specifying a feature forced PENMAN to make a particular linguistic decision.</S>
    <S sid="85" ssid="6">For example, adding ( ident if iability&#8212;q t) forces the choice of determiner, while the : lex feature offers explicit control over the selection of open-class words.</S>
    <S sid="86" ssid="7">A literal translation of the input sentence was something like As for new company, there is plan to establish in February.</S>
    <S sid="87" ssid="8">Here are three randomly selected translations; note that the object of the &amp;quot;establishing&amp;quot; action is unspecified in the Japanese input, but PENMAN supplies a placeholder it when necessary, to ensure grammaticality: 'Available from the ACL Data Collection Initiative, as CD ROM 1. for bigrams A new company will have in mind that it is establishing it on February.</S>
    <S sid="88" ssid="9">The new company plans the launching on February.</S>
    <S sid="89" ssid="10">New companies will have as a goal the launching at February.</S>
    <S sid="90" ssid="11">We then ranked the 3,456 sentences using the bigram version of our statistical language model, with the hope that good renditions would come out on top.</S>
    <S sid="91" ssid="12">Here is an abridged list of outputs, loglikelihood scores heuristically corrected for length, and rankings: 401 The new companies will have in mind to establish it at February.</S>
    <S sid="92" ssid="13">[ -23.842337 ] While this experiment shows that statistical models can help make choices in generation, it fails as a computational strategy.</S>
    <S sid="93" ssid="14">Running PENMAN 3,456 times is expensive, but nothing compared to the cost of exhaustively exploring all combinations in larger input representations corresponding to sentences typically found in newspaper text.</S>
    <S sid="94" ssid="15">Twenty or thirty choice points typically multiply into millions or billions of potential sentences, and it is infeasible to generate them all independently.</S>
    <S sid="95" ssid="16">This leads us to consider other algorithms.</S>
  </SECTION>
  <SECTION title="7 Many-Paths Generation" number="7">
    <S sid="96" ssid="1">Instead of explicitly constructing all possible renditions of a semantic input and running PENMAN on them, we use a more efficient data structure and control algorithm to express possible ambiguities.</S>
    <S sid="97" ssid="2">The data structure is a word lattice&#8212;an acyclic state transition network with one start state, one final state, and transitions labeled by words.</S>
    <S sid="98" ssid="3">Word lattices are commonly used to model uncertainty in speech recognition (Waibel and Lee, 1990) and are well adapted for use with n-gram models.</S>
    <S sid="99" ssid="4">As we discussed in Section 3, a number of generation difficulties can be traced to the existence of constraints between words and phrases.</S>
    <S sid="100" ssid="5">Our generator operates on lexical islands, which do not interact with other words or concepts.6 How to identify such islands is an important problem in NLG: grammatical rules (e.g., agreement) may help group words together, and collocational knowledge can also mark the boundaries of some lexical islands (e.g., nominal compounds).</S>
    <S sid="101" ssid="6">When no explicit information is present, we can resort to treating single words as lexical islands, essentially adopting a view of maximum compositionality.</S>
    <S sid="102" ssid="7">Then, we rely on the statistical model to correct this approximation, by identifying any violations of the compositionality principle on the fly during actual text generation.</S>
    <S sid="103" ssid="8">The type of the lexical islands and the manner by which they have been identified do not affect the way our generator processes them.</S>
    <S sid="104" ssid="9">Each island corresponds to an independent component of the final sentence.</S>
    <S sid="105" ssid="10">Each individual word in an island specifies a choice point in the search and causes the creation of a state in the lattice; all continuations of alternative lexicalizations for this island become paths that leave this state.</S>
    <S sid="106" ssid="11">Choices between alternative lexical islands for the same concept also become states in the lattice, with arcs leading to the sub-lattices corresponding to each island.</S>
    <S sid="107" ssid="12">Once the semantic input to the generator has been transformed to a word lattice, a search component identifies the N highest scoring paths from the start to the final state, according to our statistical language model.</S>
    <S sid="108" ssid="13">We use a version of the N-best algorithm (Chow and Schwartz, 1989), a Viterbistyle beam search algorithm that allows extraction of more than just the best scoring path.</S>
    <S sid="109" ssid="14">(Hatzivassiloglou and Knight, 1995) has more details on our search algorithm and the method we applied to estimate the parameters of the statistical model.</S>
    <S sid="110" ssid="15">Our approach differs from traditional top-down generation in the same way that top-down and bottom-up parsing differ.</S>
    <S sid="111" ssid="16">In top-down parsing, backtracking is employed to exhaustively examine the space of possible alternatives.</S>
    <S sid="112" ssid="17">Similarly, traditional control mechanisms in generation operate top-down, either deterministically (Meteer et al., 1987; Tomita and Nyberg, 1988; Penman, 1989) or by backtracking to previous choice points (Elhadad, 1993).</S>
    <S sid="113" ssid="18">This mode of operation can unnecessarily duplicate a lot of work at run time, unless sophisticated control directives are included in the search engine (Elhadad and Robin, 1992).</S>
    <S sid="114" ssid="19">In contrast, in bottomup parsing and in our generation model, a special data structure (a chart or a lattice respectively) is used to efficiently encode multiple analyses, and to allow structure sharing between many alternatives, eliminating repeated search. knowledge, the word lattice will degenerate to a string, e.g.</S>
    <S sid="115" ssid="20">: 0 the , &lt;Dlarge Federal 00 deficit 0,0 fell Suppose we are uncertain about definiteness and number.</S>
    <S sid="116" ssid="21">We can generate a lattice with eight paths instead of one: deficit Federal fell deficits (* stands for the empty string.)</S>
    <S sid="117" ssid="22">But we run the risk that the n-gram model will pick a non-grammatical path like a large Federal deficits fell.</S>
    <S sid="118" ssid="23">So we can produce the following lattice instead: the In this case, we use knowledge about agreement to constrain the choices offered to the statistical model, from eight paths down to six.</S>
    <S sid="119" ssid="24">Notice that the sixpath lattice has more states and is more complex than the eight-path one.</S>
    <S sid="120" ssid="25">Also, the n-gram length is critical.</S>
    <S sid="121" ssid="26">When long-distance features control grammaticality, we cannot rely on the statistical model.</S>
    <S sid="122" ssid="27">Fortunately, long-distance features like agreement are among the first that go into any symbolic generator.</S>
    <S sid="123" ssid="28">This is our first example of how symbolic and statistical knowledge sources contain complementary information, which is why there is a significant advantage to combining them.</S>
    <S sid="124" ssid="29">Now we need an algorithm for converting generator inputs into word lattices.</S>
    <S sid="125" ssid="30">Our approach is to assign word lattices to each fragment of the input, in a bottom-up compositional fashion.</S>
    <S sid="126" ssid="31">For example, consider the following semantic input, which is written in the PENMAN-style Sentence Plan Language (SPL) (Penman, 1989), with concepts drawn from the SENSUS ontology (Knight and Luk, 1994), and may be rendered in English as It is easy for Americans to obtain guns: We process semantic subexpressions in a bottomup order, e.g., A2, G, P, E, and finally A.</S>
    <S sid="127" ssid="32">The grammar assigns what we call an e-structure to each subexpression.</S>
    <S sid="128" ssid="33">An e-structure consists of a list of distinct syntactic categories, paired with English word lattices: (&lt;syn, lat&gt;, &lt;syn, lat&gt;, ) .</S>
    <S sid="129" ssid="34">As we climb up the input expression, the grammar glues together various word lattices.</S>
    <S sid="130" ssid="35">The grammar is organized around semantic feature patterns rather than English syntax&#8212;rather than having one S -&gt; NP-VP rule with many semantic triggers, we have one AGENT-PATIENT rule with many English renderings.</S>
    <S sid="131" ssid="36">Here is a sample rule: Given an input semantic pattern, we locate the first grammar rule that matches it, i.e., a rule whose left-hand-side features except :rest are contained in the input pattern.</S>
    <S sid="132" ssid="37">The feature :rest is our mechanism for allowing partial matchings between rules and semantic inputs.</S>
    <S sid="133" ssid="38">Any input features that are not matched by the selected rule are collected in :rest, and recursively matched against other grammar rules.</S>
    <S sid="134" ssid="39">For the remaining features, we compute new estructures using the rule's right-hand side.</S>
    <S sid="135" ssid="40">In this example, the rule gives four ways to make a syntactic S, two ways to make an infinitive, and one way to make an NP.</S>
    <S sid="136" ssid="41">Corresponding word lattices are built out of elements that include: Any failure inside an alternative right-hand side of a rule causes that alternative to fail and be ignored.</S>
    <S sid="137" ssid="42">When all alternatives have been processed, results are collected into a new e-structure.</S>
    <S sid="138" ssid="43">If two or more word lattices can be created from one rule, they are merged with a final or. the Because our grammar is organized around semantic patterns, it nicely concentrates all of the material required to build word lattices.</S>
    <S sid="139" ssid="44">Unfortunately, it forces us to restate the same syntactic constraint in many places.</S>
    <S sid="140" ssid="45">A second problem is that sequential composition does not allow us to insert new words inside old lattices, as needed to generate sentences like John looked it up.</S>
    <S sid="141" ssid="46">We have extended our notation to allow such constructions, but the full solution is to move to a unification-based framework, in which e-structures are replaced by arbitrary feature structures with syn, sem, and lat fields.</S>
    <S sid="142" ssid="47">Of course, this requires extremely efficient handling of the disjunctions inherent in large word lattices.</S>
  </SECTION>
  <SECTION title="8 Results" number="8">
    <S sid="143" ssid="1">We implemented a medium-sized grammar of English based on the ideas of the previous section, for use in experiments and in the JAPANGLOSS machine translation system.</S>
    <S sid="144" ssid="2">The system converts a semantic input into a word lattice, sending the result to one of three sentence extraction programs: tions 5 and 7.</S>
    <S sid="145" ssid="3">For evaluation, we compare English outputs from these three sources.</S>
    <S sid="146" ssid="4">We also look at lattice properties and execution speed.</S>
    <S sid="147" ssid="5">Space limitations prevent us from tracing the generation of many long sentences&#8212;we show instead a few short ones.</S>
    <S sid="148" ssid="6">Note that the sample sentences shown for the RANDOM extraction model are not of the quality that would normally be expected from a knowledge-based generator, because of the high degree of ambiguity (unspecified features) in our semantic input.</S>
    <S sid="149" ssid="7">This incompleteness can be in turn attributed in part to the lack of such information in Japanese source text and in part to our own desire to find out how much of the ambiguity can be automatically resolved with our statistical model.</S>
    <S sid="150" ssid="8">A final (abbreviated) example comes from interlingua expressions produced by the semantic analyzer of JAPANGLOSS, involving long sentences characteristic of newspaper text.</S>
    <S sid="151" ssid="9">Note that although the lattice is not much larger than in the previous examples, it now encodes many more paths.</S>
    <S sid="152" ssid="10">Many-paths generation leads to a new style of incremental grammar building.</S>
    <S sid="153" ssid="11">When dealing with some new construction, we first rather mindlessly overgenerate, providing the grammar with many ways to express the same thing.</S>
    <S sid="154" ssid="12">Then we watch the statistical component make its selections.</S>
    <S sid="155" ssid="13">If the selections are correct, there is no need to refine the grammar.</S>
    <S sid="156" ssid="14">For example, in our first grammar, we did not make any lexical or grammatical case distinctions.</S>
    <S sid="157" ssid="15">So our lattices included paths like Him saw I as well as He saw me.</S>
    <S sid="158" ssid="16">But the statistical model studiously avoided the bad paths, and in fact, we have yet to see an incorrect case usage from our generator.</S>
    <S sid="159" ssid="17">Likewise, our grammar proposes both his box and the box of he/him, but the former is statistically much more likely.</S>
    <S sid="160" ssid="18">Finally, we have no special rule to prohibit articles and possessives from appearing in the same noun phrase, but the bigram the his is so awful that the null article is always selected in the presence of a possessive pronoun.</S>
    <S sid="161" ssid="19">So we can get away with treating possessive pronouns like regular adjectives, greatly simplifying our grammar.</S>
    <S sid="162" ssid="20">We have also been able to simplify the generation of morphological variants.</S>
    <S sid="163" ssid="21">While true irregular forms (e.g., child I children) must be kept in a small exception table, the problem of &amp;quot;multiple regular&amp;quot; patterns usually increases the size of this table dramatically.</S>
    <S sid="164" ssid="22">For example, there are two ways to pluralize a noun ending in -o, but often only one is correct for a given noun (potatoes, but photos).</S>
    <S sid="165" ssid="23">There are many such inflectional and derivational patterns.</S>
    <S sid="166" ssid="24">Our approach is to apply all patterns and insert all results into the word lattice.</S>
    <S sid="167" ssid="25">Fortunately, the statistical model steers clear of sentences containing nonwords like potatos and photoes.</S>
    <S sid="168" ssid="26">We thus get by with a very small exception table, and furthermore, our spelling habits automatically adapt to the training corpus.</S>
    <S sid="169" ssid="27">Most importantly, the two-level generation model allows us to indirectly apply lexical constraints for the selection of open-class words, even though these constraints are not explicitly represented in the generator's lexicon.</S>
    <S sid="170" ssid="28">For example, the selection of a word from a pair of frequently co-occurring adjacent words will automatically create a strong bias for the selection of the other member of the pair, if the latter is compatible with the semantic concept being lexicalized.</S>
    <S sid="171" ssid="29">This type of collocational knowledge, along with additional collocational information based on long- and variable-distance dependencies, has been successfully used in the past to increase the fluency of generated text (Smadja and McKeown, 1991).</S>
    <S sid="172" ssid="30">But, although such collocational information can be extracted automatically, it has to be manually reformulated into the generator's representational framework before it can be used as an additional constraint during pure knowledge-based generation.</S>
    <S sid="173" ssid="31">In contrast, the two-level model provides for the automatic collection and implicit representation of collocational constraints between adjacent words.</S>
    <S sid="174" ssid="32">In addition, in the absence of external lexical constraints the language model prefers words more typical of and common in the domain, rather than generic or overly specialized or formal alternatives.</S>
    <S sid="175" ssid="33">The result is text that is more fluent and closely simulates the style of the training corpus in this respect.</S>
    <S sid="176" ssid="34">Note for example the choice of obtain in the second example of the previous section in favor of the more formal procure.</S>
    <S sid="177" ssid="35">Many times, however, the statistical model does not finish the job.</S>
    <S sid="178" ssid="36">A bigram model will happily select a sentence like I only hires men who is good pilots.</S>
    <S sid="179" ssid="37">If we see plenty of output like this, then grammatical work on agreement is needed.</S>
    <S sid="180" ssid="38">Or consider They planned increase in production, where the model drops an article because planned increase is such a frequent bigram.</S>
    <S sid="181" ssid="39">This is a subtle interaction&#8212;is planned a main verb or an adjective?</S>
    <S sid="182" ssid="40">Also, the model prefers short sentences to long ones with the same semantic content, which favors conciseness, but sometimes selects bad n-grams to avoid a longer (but clearer) rendition.</S>
    <S sid="183" ssid="41">This an interesting problem not encountered in otherwise similar speech recognition models.</S>
    <S sid="184" ssid="42">We are currently investigating solutions to all of these problems in a highly experimental setting.</S>
  </SECTION>
  <SECTION title="10 Conclusions" number="9">
    <S sid="185" ssid="1">Statistical methods give us a way to address a wide variety of knowledge gaps in generation.</S>
    <S sid="186" ssid="2">They even make it possible to load non-traditional duties onto a generator, such as word sense disambiguation for machine translation.</S>
    <S sid="187" ssid="3">For example, bei in Japanese may mean either American or rice, and sha may mean shrine or company.</S>
    <S sid="188" ssid="4">If for some reason, the analysis of beisha fails to resolve these ambiguities, the generator can pass them along in the lattice it builds, e.g.</S>
    <S sid="189" ssid="5">: In this case, the statistical model has a strong preference for the American company, which is nearly always the correct translation.7 Furthermore, our two-level generation model can implicitly handle both paradigmatic and syntagmatic lexical constraints, leading to the simplification of the generator's grammar and lexicon, and enhancing portability.</S>
    <S sid="190" ssid="6">By retraining the statistical component on a different domain, we can automatically pick up the peculiarities of the sublanguage such as preferences for particular words and collocations.</S>
    <S sid="191" ssid="7">At the same time, we take advantage of the strength of the knowledge-based approach which guarantees grammatical inputs to the statistical component, and reduces the amount of language structure that is to be retrieved from statistics.</S>
    <S sid="192" ssid="8">This approach addresses the problematic aspects of both pure knowledge-based generation (where incomplete knowledge is inevitable) and pure statistical bag generation (Brown et al., 1993) (where the statistical system has no linguistic guidance).</S>
    <S sid="193" ssid="9">Of course, the results are not perfect.</S>
    <S sid="194" ssid="10">We can improve on them by enhancing the statistical model, or by incorporating more knowledge and constraints in the lattices, possibly using automatic knowledge acquisition methods.</S>
    <S sid="195" ssid="11">One direction we intend to pursue is the rescoring of the top N generated sentences by more expensive (and extensive) methods, incorporating for example stylistic features or explicit knowledge of flexible collocations.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="10">
    <S sid="196" ssid="1">We would like to thank Yolanda Gil, Eduard Hovy, Kathleen McKeown, Jacques Robin, Bill Swartout, and the ACL reviewers for helpful comments on earlier versions of this paper.</S>
    <S sid="197" ssid="2">This work was supported in part by the Advanced Research Projects Agency (Order 8073, Contract MDA904-91-C-5224) and by the Department of Defense.</S>
  </SECTION>
</PAPER>
