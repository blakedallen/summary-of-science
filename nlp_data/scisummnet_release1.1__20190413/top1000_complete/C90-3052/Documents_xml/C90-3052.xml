<PAPER>
  <S sid="0" ssid="0">Typed Unification Grammars Martin C. Emele, Dhni Zajac Project Polygloss* University of Stuttgart IMS~CL/Ifl~AIS, Keplerstrage 17, D - 7000 Stuttgart 1, Federal Republic of Germany {emele,zajac} @is.informatik.uni-st ut gart.dbp.de Abstract We introduce TFS, a computer formal- ism in the class of logic ibrmaiisms which integrates a powerful type system.</S>
  <S sid="1" ssid="1">Its basic data structures are typed feature structures.</S>
  <S sid="2" ssid="2">The type system encourages an object- oriented approach to linguistic description by providing a multiple inheritance mecha- nism and an inference mechanism which al- lows the specitication of relations between levels o[ linguistic description defined as classes of objects.</S>
  <S sid="3" ssid="3">We illustrate this alc- proach starting from a very simple DCG, and show how to make use of the typing sys- tem to enforce general constraints and mod- ularize linguistic descriptions, and how fur- ther abstraction leads to a tlPSG-Iike gram- mar.</S>
  <S sid="4" ssid="4">1 In t roduct ion Various proposals have been made for the integra- tion of type intbrmation in unification-based gram- mar formali,nns to enforce constraints described in a hierarchical way where types are partially or- dered with a subtype relation.</S>
  <S sid="5" ssid="5">Authors describe these extensions as "inheritance grammars", "in- heritance networks", :Ii;ature sorts", "typed t~ature structures",...[1, 3, 5, 13, 17, 15, 9, 11, 7, 8].</S>
  <S sid="6" ssid="6">These formalisms exhibit, to various degrees, one or several of the following properties, characteristic of the so-called object-oriented paradigm: a high level of abstraction, a capacity of inference, modularity and distributed control.</S>
  <S sid="7" ssid="7">Abstraction and modular- ity are needed when the linguist wants to describe a hierarchy of concepts (like a lexical hierarchy or the hierarchy of phrasal categories), and to describe linguistic data at different levels (e.g.</S>
  <S sid="8" ssid="8">morphology, syntax, semantics).</S>
  <S sid="9" ssid="9">At first glance it seems rather natural to develop separate modules for different lin- guistic levels, and to describe separately their inter- actions; however, great difficulties are encountered when these modules have to be integrated.</S>
  <S sid="10" ssid="10">Usually, there are two choices.</S>
  <S sid="11" ssid="11">Either everything is described in a single place using a deeply intricate data struc- ture, like packing both syntactic and semantic equa- tions in CF rules in some LFG extensions (e.g.</S>
  <S sid="12" ssid="12">[10]); the price is a loss in understmtdability and general~ ity.</S>
  <S sid="13" ssid="13">Or descriptions are kept separate and the pro- eessing is done accordingly: first, a morphological phase, then a syntactic analysis, and then a semantic analysis, without any communication between these different steps [4].</S>
  <S sid="14" ssid="14">The price is that interdependent constraints between these levels are lost, resulting in inadequate linguistic description or very complex control strategies at the implementation level.</S>
  <S sid="15" ssid="15">In this paper, we argue that typed unification gram- mars give the linguist a formal framework which has the desirable properties.</S>
  <S sid="16" ssid="16">We will give an introduc- tion to such a formalism, called IF,_ (~Iyped I"ea- ture Structure), which integrates disjunctions, con- junctions and conditional expressions of typed fea- ture structures.</S>
  <S sid="17" ssid="17">This introduction will start from a very simple DCG, and will show how one can write a DCG-like grammar in TFS, making use of the typing system to enforce general constraints valid for classes of objects and to modularize linguistic descriptions.</S>
  <S sid="18" ssid="18">We then show that further abstraction leads to a I-[PSG-like grammar.</S>
  <S sid="19" ssid="19">It is not our goal to give here a formal account of the formalism (the interested reader should refer to [2] where a very clear tbrmal semantics on which TFS is based is given), and we will use an informal approach wherever possible.</S>
  <S sid="20" ssid="20">2 Typed t~ature s t ructures  and unif ication Tlle basic data structure of tile language is a typed featme structure: a feature structure (FS in the fol- lowing) with which a type can be associated.</S>
  <S sid="21" ssid="21">Corn- pared to untyped FSs (as presented in [16] for exam- ple), the TFS system offers the possibility to name complex FSs, and to associate constraints with these names, thus defining a type.</S>
  <S sid="22" ssid="22">We write feature names in small caps letters (v, ~, u), type symbols in upper case letters (A, B), and we use symbols inside a box [~, called tags, for denoting shared values.</S>
  <S sid="23" ssid="23">For cxarnple, the typed FS, written in a linear form A[F: [[]B[H: C],a: ~]], is an FS of type A with two features f." and e, v having as a value tile typed FS B[H: A] and G having the same shared value aS F. In the system, one can specify type definitions which can, as a first approximation, be seen as a kind of template definition like in e.g.</S>
  <S sid="24" ssid="24">There is, however, a major difference.</S>
  <S sid="25" ssid="25">The system uses a type inference mechanism to derive new types dy- namically during computation whereas templates in PATR-II are expanded statically at compile time.</S>
  <S sid="26" ssid="26">A type that encodes agreement features can be writ- ten: AGR = [num: NUM,gender: GEN] and types NtJM and GEN being themselves defined as NUM = SING V PLUR (where the symbol "y" denotes the logical OR) and GEN : MASC V FEM V NEU.</S>
  <S sid="27" ssid="27">The types  NUM, SG,... do not have definitions: they are called atomic types.</S>
  <S sid="28" ssid="28">AGR, NUM and GEN are called complex types.</S>
  <S sid="29" ssid="29">From a set of type definitions, one can extract, a par- tial order on type symbols.</S>
  <S sid="30" ssid="30">For example, from the *Researdl reported in this paper is partly supported by the German Ministry of Research and Technology (BMFT, Bun- desminister ffir Forschung und Technologie), under grant No.</S>
  <S sid="31" ssid="31">The views and conclusions contained herein are those of the authors and should not be interpreted as representing official policies.</S>
  <S sid="32" ssid="32">293 set of definitions above, we can derive the following partial order on type symbols (Fig.</S>
  <S sid="33" ssid="33">l) where T rep- resents the greatest element (no information) and 3_ the smallest element (inconsistent information, lead- ing to failure in unification).</S>
  <S sid="34" ssid="34">This partial order is in turn used to derive a lattice of type syml)ols, which is then exl.ended to typed FSs or(lere(1 by (typed) sub- stunption, forming a lattice on which the interpreter works (see a formal account in [2]).</S>
  <S sid="35" ssid="35">/ 1 " ~  GEN NUM :  / 1 ~ SIN(; PLUR MASC FEM NEU For exainple, the FS f l  AGR[nnm: NUM] subsumes the FS f9 AGR[num: PLUR, gen(ler: FEM] because f2 has more specifc information than f l  : no gender is spec- ified in fl, and the number value of f2 PLUR is more specific than the number value off l ,  NUM.</S>
  <S sid="36" ssid="36">Typed unification proceeds as ordinary unification for FSs, recnrsively corot)thing substructures at the same paths.</S>
  <S sid="37" ssid="37">When two (typed) FSs are unified, frst the type symbols are unified, and if this unifica- tion succeeds, the FSs are unified.</S>
  <S sid="38" ssid="38">Unification of two types X and Y is defined .</S>
  <S sid="39" ssid="39">as the set of) mostgeneral type(s) which is smaller than both x and Y: ~t is the greatest lower bound (GLB) of these two symbols in the lattice of type syml)ols.</S>
  <S sid="40" ssid="40">If taso types are di- rectly comparable, the smallest iv the result of the unification: HUM M PLUR = PLUR.</S>
  <S sid="41" ssid="41">This extension is consistent with the definition of the unifier of two FSs ~s the GLB of these structures (see, for exam- pie, [16]).</S>
  <S sid="42" ssid="42">3 Feature  types  as data  types  and  feature types  as re la t ions 3.1 The L IST type as a data  type A list of words will be defined in a LISP-like fash- ion as either the END of a list or a CONS with two attributes first and rest: LIST = END V CONS[vmsr:WORD, nEsT:LIST].</S>
  <S sid="43" ssid="43">WORD denotes the set of word forms, and the list.</S>
  <S sid="44" ssid="44">of words "John likes Mary" will be encoded as JOHN CONS [Fm.sr: CONS [FroST: LIKES L,-,:ST: LR .&lt;T:  ONS V"ST:  AR*l]t,, sr: j j which is a well-formed list.</S>
  <S sid="45" ssid="45">with respect to the LIST definition.</S>
  <S sid="46" ssid="46">(We shall use in the following a more concise syntax for lists: END will be written as 0; CONS[FIRsT:WORD, nEsr:klST] will be written as (WORD .</S>
  <S sid="47" ssid="47">LIST); lists will be written using the usual abbre- viation for lists: the list of words "John likes Mary" will then be written as (JOHN LIKES MARY}).</S>
  <S sid="48" ssid="48">3.2 The APPEND type as a relation One can also understand feature types as relations much like those in PROLOG.</S>
  <S sid="49" ssid="49">Let us recall the clas- sical PROLOG definition of append: append( [] ,L,L).</S>
  <S sid="50" ssid="50">append( [XlL1] ,L2, [XlL3] ) :-  append(L1,L2,L3).</S>
  <S sid="51" ssid="51">in I&gt;ROLOG, the arguments of a term are identi- fied by their positions in the term, and the presence 2 of all arguments i mandatory.</S>
  <S sid="52" ssid="52">In an FS, arguments (feature vahles) are not identified by their position but by a label, the feature, and the absence of an attrilmte-value pair will denote any kind of value for this attribute (type T).</S>
  <S sid="53" ssid="53">Using the TFS syntax, where the symbol :- after an FS introduces a condition, a definition for append can be as follows: APPEND = iF: 0, iS: [i~LIST, W: [~]] V iF: ([XJ ?</S>
  <S sid="54" ssid="54">: []~L,ST, w: (~ .</S>
  <S sid="55" ssid="55">1i~1)] : -- APPEND[F: ~.t-~, 13: [~], W:  [~ ] .</S>
  <S sid="56" ssid="56">Note that the tagging syntax allows to specification of identity between structures and a partial instance of the structure.</S>
  <S sid="57" ssid="57">This possibility (together with the fact.</S>
  <S sid="58" ssid="58">that typing iv enforced by the system) allows the writing of a typed version of append, in contrast to the untyped PROLOG version.</S>
  <S sid="59" ssid="59">3.3 Type checking as deduct ion Contrary to PROLOG,  there is no distinction in TFS between top-level types (which could be interpreted as predicates) and inner types (which could be inter- preted as arguments): they are all typed FSs, and the same deduction mechanism applies for the top-level structure ~s well as for all substructures.</S>
  <S sid="60" ssid="60">A (typed) FS is consistent with respect to a set of type def- initions if it unifies with the definition of its type, and if each of its substructures i also consistent.</S>
  <S sid="61" ssid="61">Conditions like in the definition of append above in- troduce additional constraints which are erased after having been successfidly evaluated.</S>
  <S sid="62" ssid="62">When a type iv defined as a disjunction, a structure has to be consis- tent with at, least, one element of the disjunction (but all possibilities are explored, creating as many pos- sible solutions as there are disjuncts).</S>
  <S sid="63" ssid="63">When a type is defined as a conjunction (using the AND operator noted "A"), a structure has to be consistent with every single element of the conjunction.</S>
  <S sid="64" ssid="64">The order used for type checking (roughly top-down) guaran- tees that the solution the system finds is the GLB of the set of definitions augmented by the initial struc- ture [2].</S>
  <S sid="65" ssid="65">For example, the (typed) FS AGR[num:PLUR] is consistent with regard to the set of defini- tions above (Sect.l).</S>
  <S sid="66" ssid="66">The interpreter will ap- ply the definition of AGR at the root of the FS : AGR[num:PLUR] M num:NUM,gender:GEN] = AGR[nu nl:PLUR,geuder:GEN AGR[num:MASC] is an inconsistent (typed) FS : AGR[num:MASCJ I-1 [uum:NUM,gender:GEN] = I be- cause the types MASC ail(] NUM have only J_, the bottom of the lattice, ~s a common snl)type repre- senting inconsistent information.</S>
  <S sid="67" ssid="67">Note that this type checking process may introduce new type symbols also used for checking, thus defining a type inheri- tance mechanism.</S>
  <S sid="68" ssid="68">A full evaluation of APPEND[w:(A B}] produces a set of three FSs: i F: 0, ": ID(A B), w: ~]  v F: &lt;~A.</S>
  <S sid="69" ssid="69">: ~(B) ,  w: &lt;t~.</S>
  <S sid="70" ssid="70">:  r~0,~:  (@ ?</S>
  <S sid="71" ssid="71">(m .~&gt;)] 4 Typed un i f i ca t ion  grammars 4.1 DCGs In this section, we describe how one can (but should not) write grammars using this formalism.</S>
  <S sid="72" ssid="72">To make comparisons easier, we will start from the small ex- ample of DCG presented in [Pereira nd Warren 80] and show how this grammar (Fig.2) can be written in TFS.</S>
  <S sid="73" ssid="73">294 sentenee(s(NP, VP)) --+ noun_phrase(Num,NP), verb_phrmse(Num,VV).</S>
  <S sid="74" ssid="74">noun_phrasetNum , np(Det,Noun)) -+ determiner(Nnm,Det),  noun(Nnm,Nonn).</S>
  <S sid="75" ssid="75">noun_phrase(singular,np(Name)) --~ name(Name).</S>
  <S sid="76" ssid="76">verb..phrase(Num,vp(TV,NP)) ~ trans_verb(Num,TV),noun_phrasc(N1,NP).</S>
  <S sid="77" ssid="77">determiner(Num,det(W)) --~ [W], is_determiner(W,Num).</S>
  <S sid="78" ssid="78">noun(Num,n(l~oot)) --+[W], is_noun(W,Num,Root).</S>
  <S sid="79" ssid="79">name(name(W)) --* [W], is_name(W).</S>
  <S sid="80" ssid="80">trans_verb(Num,tv(Root)) ~ [W], is_trans(W,Num,Root).</S>
  <S sid="81" ssid="81">(Figure 2) is_determiner(all, p ural).</S>
  <S sid="82" ssid="82">is_noun(man, singular, ma isJ~oun(men, phlral, man).</S>
  <S sid="83" ssid="83">is_trans(likes,singular, ike) is_trans(like, plural, like).</S>
  <S sid="84" ssid="84">In a specification like this, there are three different kinds of information mixed together.</S>
  <S sid="85" ssid="85">Take for exam- ple the rule "noun_phrase(Num, np(Det, Noun)) determiner(Num, Det), noun(Num, Noun)".</S>
  <S sid="86" ssid="86">In "this rule we find: 1. a specification of a set of wcll-formed sub- strings using the CF skeleton: noun_phrase --~ determiner, noun; 2. a specification of well-formed (partial) syntac- tic structures: the structure np(Det, Noun) is well-formed if Det and Noun are a well-formed structure and if its agreement value (variable Num) is the same for the Det, the Noun, and the noun_phrase; 3. a specification of a relation between well- formed (partial) syntactic structures and well- formed substrings by augmenting the CF skele- ton with annotations representing those struc- tures.</S>
  <S sid="87" ssid="87">4.2 A TFS  spec i f i ca t ion All this information mixed together can be separated out and specified in a more modular way.</S>
  <S sid="88" ssid="88">The set of well-formed strings of words is de- fined as in Sect.2.1, where WORD = allVmen... 2.</S>
  <S sid="89" ssid="89">The set of well-formed partial syntactic struc- tures, i.e.</S>
  <S sid="90" ssid="90">every syntactic onstraint like agree- [Rent or subcategorisation, should be expressed in this part of the specification.</S>
  <S sid="91" ssid="91">PI4RASAL_CATEGORY = S V NP V VP.</S>
  <S sid="92" ssid="92">S = [NP: NP[AaR: [~NUM], vP: VP[*oR: [g3]].</S>
  <S sid="93" ssid="93">[DET: DET[AGR: Z]NUM]I [NAME: PN] NP = Vo, .</S>
  <S sid="94" ssid="94">:  N[,oR: ~ ]  / V L *aR: SG LAOR: []~] J VP = [V: TV[AoR: [~INUM], NP: NP: AGR: [1~]].</S>
  <S sid="95" ssid="95">LEXICAL_CATEGORY : DET V N V PN V V. DET : ALL V EVERY V A V THE.</S>
  <S sid="96" ssid="96">ALL : [WORD: all, AOR: PL].</S>
  <S sid="97" ssid="97">N : MAN V WOMAN.</S>
  <S sid="98" ssid="98">MAN = [WORD:man, AGR:SG] V [WORD:men, *GR:Pq.</S>
  <S sid="99" ssid="99">PN = JOHN V MARY.</S>
  <S sid="100" ssid="100">MARY = [WORD: Mary].</S>
  <S sid="101" ssid="101">TV ---- LIKE V LOVE.</S>
  <S sid="102" ssid="102">L,KE = [WORD:,ike,, ,on:SG] V [WORD:,ike, hoR:PL].</S>
  <S sid="103" ssid="103">The relation between strings and struc- tures should be stated independently of well- formedness conditions on syntactic structures.</S>
  <S sid="104" ssid="104">It is expressed here in CF manner by using the APPEND relation on strings.</S>
  <S sid="105" ssid="105">(However, we do not advocate the exclusive use of CF-like relations; more complex ones can be specified to gain expressive power, e.g.</S>
  <S sid="106" ssid="106">by incorporating linear precedence rules).</S>
  <S sid="107" ssid="107">SENTENCE == NOUN_PHRASE[sTm[Na: ~ LIST, C-STR:[n~] VERB_PHRASE[sTRINO: ~ ,  C-STm  [~J APPEND [P :~,  .</S>
  <S sid="108" ssid="108">: ~ ,  w:~ ] NOUN_PHRASE =- [STmNO: ~.___~,  C-STR: NP[DI~T: [~], ,OUN: IK]] : -- DETERMINER[STmNQ: ~ ,  C-STm ~]] NOUN[sTmNO: ~ ,  c-s~.rm [Ell APPEND [F :~B:~,  w : ~  ] V [STR INO:~,  C-STR: PN[NAME: ~]  ]  : -- NAMErsrmNG: ~ ,  C-STm ~ ] VERB-PHRASE : [STRING: ~ ,  C-STR: VP[v: [~TV, NP: ~]  : -- TRANS_VERB[sTRINO: ~ ,  C-ST,R: [~1] NOUN_PHRASE[sTmNO: ~ ,  C-STR: ~ ] , APPEND [~:~ B: ~ ,  w : ~  ] LEXICAL-RULE = [STRING: ([~]), C-STR: [WORD: [~]].</S>
  <S sid="109" ssid="109">DETERMINER --= LEXICAL_RULE[c-sTm DET].</S>
  <S sid="110" ssid="110">NOUN = LEXlCAL.RULE[c-STR: N].</S>
  <S sid="111" ssid="111">NAME = LEXICAL-RULE[C-STm PN].</S>
  <S sid="112" ssid="112">TRANS_VERB = LEXICAL-RULE[C-STR: TV].</S>
  <S sid="113" ssid="113">4.3 Parsing and generation Both parsing and generation i  the system amount to type inference.</S>
  <S sid="114" ssid="114">Either (1) for parsing or (2) gen- eration yield the same result (3).</S>
  <S sid="115" ssid="115">(1 )  SENTENCE[sTRING: (Mary likes all men)] (2) SENTENCE NP: NP[NAME: MARY] Iv: LIKE ALL, o  : MANIJ (3) SENTENCE "sTR,NG: (lEMony []like, []a, Rime.)</S>
  <S sid="116" ssid="116">C-STR: S ~:  NP[...E: MARY[woRD: I~], .oR: aSG] vP: VP I v: UKE[woRD: [], AGR: ~] NP: NP [DET: ALL[WORD: [~, AOR: [~PL]] |NOUN: MAN[woRD: [~, AGR: [b]] / L^o~: [] J AGR: [] This shows that the formalism has the same power as PI~OLOG to synthesize unspecified arguments, and the same evaluation mechanism can be used for both generation and parsing, depending on the input.</S>
  <S sid="117" ssid="117">295 4.4 From DCG to HPSG In the following, we explain how one can general- ize the principles used for describing a DCG gram- mar in TFS to write an HPSG-like grammar.</S>
  <S sid="118" ssid="118">HPSG linguistic objects of all kinds, be they syntactic, phrase-structural, or semantic, are modeled by fea- ture structures [14].</S>
  <S sid="119" ssid="119">In addition, HPSG relies heavily on the notion of type.</S>
  <S sid="120" ssid="120">Hence, TFS is perfectly suited for an implementation f HPSG.</S>
  <S sid="121" ssid="121">The grammar itself is purely declarative in the sense that it characterizes what constraints should hold on linguistic objects in- dependently of the order in which these constraints are actually applied.</S>
  <S sid="122" ssid="122">We first generalize the description of linguistic struc- tures: instead of defining explicit types for sen- tences, noun phrases, etc., we define a generic con- stituent structure for any kind of phrase.</S>
  <S sid="123" ssid="123">According to the specification of ItPSG linguistic objects, we define SIGNs as being either of type PHRASAL_SIGN or of type LEXICAL-SIGN [15].</S>
  <S sid="124" ssid="124">A SIGN has a phono- logical value, represented as a list of words, and syntactic and semantic information (omitted for this comparison).</S>
  <S sid="125" ssid="125">The subtypes PHttASAL.SIGN and LEXICAL-SIGN inherit all the attributes and type re- strictions of SIGN.</S>
  <S sid="126" ssid="126">(4) SIGN -= (PHRASAL_SIGN V LEXICAL-SIGN) A |PHON: LIST_OF-STRINGS ISYN: CATEGORY LSEM: SEMANTIC_OBJECT PHRASAL_SIGNs (5) differ from LEXICAL_SIGNs (6) by having an additional dtrs (daughters") attribute that gives information about the (lexical or phrasal) signs which are their immediate constituents.</S>
  <S sid="127" ssid="127">This attribute encodes the kind of information about constituency conventionally described as constituent structures.</S>
  <S sid="128" ssid="128">In addition, the various daughters are distinguished according to what kinds of informa- tion they contribute to the sign as a whole.</S>
  <S sid="129" ssid="129">Thus, daughters are classified as heads and complements as in the standard X-bar theory.</S>
  <S sid="130" ssid="130">In order to be a well formed object of type PHRASAL-SIGN, a lin- guistic object has to obey some general principles such as the "Head Feature Principle" and the "Sub- categorization Feature Principle".</S>
  <S sid="131" ssid="131">(5) phrasal-sign----(HEAD_FP A SUBCAT-FP A ... A (CH_CO_FP V HC*.CO-FP ...)) A LCOMP- DTI~S: LIST_OF_SIGNSJ (6) lexical_sign ----VERB V PNOUN V NOUN V DET V .</S>
  <S sid="132" ssid="132">Genera l  pr inciples The "Head Feature Princi- ple" ensures that the head features of the head- daughter always be shared with their phrasal pro- jections.</S>
  <S sid="133" ssid="133">It generalizes the passing of agreement in- formation from e.g.</S>
  <S sid="134" ssid="134">a verb to the VP for all kind of constituent and for all information related to agree- ment and subcatcgorisation.</S>
  <S sid="135" ssid="135">[s.,.N: [..E.,,o: I-~-al] ] (7) HEAD_FP .--- L D~rps: [.EA~o"rp.</S>
  <S sid="136" ssid="136">: [HEAD: I i i~]  ]  ] In the DCG example, subcategorization was ex- pressed by introducing different kinds of lexical cat- egories like transitive verb (TV) vs. intransitive verbs IV).</S>
  <S sid="137" ssid="137">In HPSG, subcategorization is expressed by us- ng a list of signs.</S>
  <S sid="138" ssid="138">Thisl ist specifies the number and kind of signs that the head subcategorizes for the formation of a complete sign.</S>
  <S sid="139" ssid="139">Subcategorization in- formation is described in lexical entries.</S>
  <S sid="140" ssid="140">The "Subcat Feature Principle" ensures that in any phrasal sign, the subcat list of the head-daughter is the concate- nation of the list of complement daughters and the subcat list of the mother.</S>
  <S sid="141" ssid="141">(The order of the elements in the complements li t does not reflect the surface order but rather the more abstract "obliqueness hi- erarchy" ([14] Chap.7)).</S>
  <S sid="142" ssid="142">(8) SUBCAT-FP .---- ?</S>
  <S sid="143" ssid="143">Grammar  rules Just as we have generalized the notion of constituency, we are also able to generalize the relations between phonological representations and their desired constituent structure representa- tions.</S>
  <S sid="144" ssid="144">The specialized CF-like relations for a sen- tence, a noun phrase, and so on in the DCG exam- ple can be replaced by two more general rules which specify constituent structure configurations accord- ing to the X-bar theory.</S>
  <S sid="145" ssid="145">The "Complement Head Constituent Order Fea- ture Principle" (9) simply states that a "saturated phrasal sign" (i.e.</S>
  <S sid="146" ssid="146">with [syn:  [ subcat :0  ]  ]  ) is the combination of an unsaturated phrasal head with one phrasal complement (e.g.</S>
  <S sid="147" ssid="147">(9) CH-CO-FP ---- SYI,I: SU~BCAT: 01PH RASAL.SIGN [PHON" hJh_~.a~ DTRS: [HEAD-DTR: : . ]</S>
  <S sid="148" ssid="148">[ooMP-DT.~: (S,GN [P.oN: l?omp-pho-]]) : -  APPEND The "Head Complements Constituent Order Feature Principle" (13) states that an "unsaturated phrasal sign" is the combination of a lexical head and any number of complements (e.g.</S>
  <S sid="149" ssid="149">The relation ORDER_COMPL is used for specifyinl,,?-the or- dering of the phonological values of all complements.</S>
  <S sid="150" ssid="150">The phonological value of the whole phrase can then be specified as the concatenation f the head phonol- ogy value with the complement phonology value.</S>
  <S sid="151" ssid="151">(13) HC*-CO-FP -~ [F: igeaa-pnonl " APPEND |B: Icomp-phonl [w. ~ ORDER-COMPL I ~:oM:S: ~ hon,] Lw : [comp-pnonl j 296 (10) SGNI},,o,:{"M,~F "likes" "all" "men")].</S>
  <S sid="152" ssid="152">(11) SIGN L,K   DrRS MAN,I   ]]J 1COMP-DTF~S: { [COMP-Dr.s: (ALL) ) (12) PItRASAL-SI(;N "PHON: (l-~"Mary" .</S>
  <S sid="153" ssid="153">[2]( .[~]"likes".</S>
  <S sid="154" ssid="154">[~]("all" "men"))) IIEAD-DTn: PHRASAL-SIGN |ItNAD-DTR: LEXlCAL-SIGN / /ftNAD: [DTRS: SYN: SUBCAT: !</S>
  <S sid="155" ssid="155">L [ :)TRS: LCOMP-D!</S>
  <S sid="156" ssid="156">"itS: {[~ PHRASAL.</S>
  <S sid="157" ssid="157">:SIGN[PltON:[~] ...]) COMP-OrRs: ( I~PHRASAL_SIGN ton 1] y.: F  .Ex: Lsu cA : UM  ] Lexical entr ies AI,L = DET[sYN IIINAD: [LEX:"aII", NUM:pl]]] , MAN =: NOUN[~YN:IIn~A ): [bEX:"man", NUM:sg]V ]].</S>
  <S sid="158" ssid="158">", NUM:pl] MARY = PNOUN [SYN:I),BAD: (Lt~X:" mary", NUM:sg]]].</S>
  <S sid="159" ssid="159">LIKE = TRANS A (3RD-S GISYN: ha,~Ao:[u~x:" likes"]]] V).</S>
  <S sid="160" ssid="160">3RD-SG :~ [sYN:rHI;AD:[PFmSON:3, ug:sg]]].</S>
  <S sid="161" ssid="161">~RANS = [SYN: SVr~CAT:(ISYN:[m:AD:ICASI-:acc]]] )] .</S>
  <S sid="162" ssid="162">,5 Pars ing  and generat ion Either (10) for parsing or (11) generation, tile eval- uation yields I, he same fully specified sign (12).</S>
  <S sid="163" ssid="163">6 Conelus ion Ihe main characteristics of the formalism we pre-- s(.nted are (1, type inheritance which provides a clean way of itetining classes and subclasses of ob-.</S>
  <S sid="164" ssid="164">jects, and (2) an evaluation mechanism based on typed unitication which provides avery powerful and semantically (:lear means of specifying and cornput- irlg relations between classes of objects.</S>
  <S sid="165" ssid="165">lThe possibility of defining types as (conditional) ex= pressions of typed FSs encourages a very different approach to grammar specification than integrated CF based approaches like DCG or LFG: the gram- mar writer has to deline the set of linguistic objects relevant for the problem, define the possible rela- tions between these objects, and specify explicitly the constraints between objects and relations.</S>
  <S sid="166" ssid="166">The TFS system has been implemented in Common- Lisp and has been tested on Symbolics, TI Explorer, VAX and Allegro Common-Lisp.</S>
  <S sid="167" ssid="167">Sample grammars have been developed([6], [18]) in order to demon- strate the feasibility of the approach.</S>
  <S sid="168" ssid="168">Acknowledgments  The current system is based ol~ a previous implementation carried out by the au- thors at ATR, Kyoto, as a part of a visiting research program.</S>
  <S sid="169" ssid="169">We would like to thank Dr. Akira Kure- matsu, president of ATIL Interpreting Telephony Research Laboratories for making our stay possi- ble, and Mr. Teruaki Aizawa, head of the Natural Language Understanding Department for his con- stant support.</S>
  <S sid="170" ssid="170">We owe many clarifications to Son- dra Ahlen with whom we had many lively discus- sions.</S>
  <S sid="171" ssid="171">This paper has benefited from rnany comments fiom our collegues at the IMS of the University of Stuttgart.</S>
  <S sid="172" ssid="172">Y{eferences [1] Ilassan Ait-Kaci: A Lattice Theoretic Approach 1o Computation Based on a Calculus of Par- tially Ordered Type Structures, Ph.D. Thesis, University of Pennsylvania.</S>
  <S sid="173" ssid="173">1983 [2] Itassan Ait-Kaci: "An Algebraic Semantics Ap- proach to the effective I{esolution of Type Equa- tions."</S>
  <S sid="174" ssid="174">in: Theoretical Compuler Science, Vol.</S>
  <S sid="175" ssid="175">45, p. 293-351.</S>
  <S sid="176" ssid="176">1986 [3] tlassan Ait-Kaci, Patrick Lincoln: LIFE: a nat- ural language for natural anguage, MCC Tech- nical Report ACA-ST-074~88.</S>
  <S sid="177" ssid="177">Arnold, S. Krauwer, M. Rosner, L. des Tornbes, G.B.</S>
  <S sid="178" ssid="178">Varile: "The &lt;C,A&gt;,T frame- work in Eurotra: a theoretically committed no- tation for MT", llth International Conference on Computational Linguistics (COLING-86), Bonn.</S>
  <S sid="179" ssid="179">[5] lfdl~ne Bestougeff, G~rard Ligozat: "Parame- terized abstract objects for linguistic informa- tion processing", 2nd European A CL Confer- ence, Geneva.</S>
  <S sid="180" ssid="180">[6] Martin C. Emele: "A Typed Feature Structure Unification-based Approach to Generation" in: Proceedings of the WGNLC of the [ECE 1988, (Japan: Oiso University) 1989.</S>
  <S sid="181" ssid="181">[7] Martin Emele, R~mi Zajae: "RETIF: A Rewrit- ing System for Typed Feature Structures", (Ky- oto) 1989, [ATR Technical Report TR-I-0071] [8] Martin Emele, ~mi  Zajac: "Multiple Inheri- tance in RETIF", (Kyoto) 1989, [ATR Techni- cal Report TR-I-0114] 297 [9] [lO] [11] [12] [13] Roger Evans , Gerald Gazdar: "Inference in DATR", in: 4th European ACL Conference, Manchester.</S>
  <S sid="182" ssid="182">Jens E. Fenstad, Per-Kristian Halvorsen, Tore Langholm, Johan van Benthem: Situation, lan- guage, and logic, 1987,(Dordrecht: Reidel) Marc Moens, Jo Calder, Ewan Klein, Mike Reape, ttenk Zeevat: "Expressing generaliza- tions in unification-based formalisms", in: 4th European A CL Conference, 1989, (Manchester) Fernando C.N.</S>
  <S sid="183" ssid="183">Pereira, David H.D.</S>
  <S sid="184" ssid="184">War- ren: "Definite Clause Grammars for Language Analysis-A Survey of the Formalism and a Com- parison with Augmented Transition Networks", in: Artificial Intelligence 13: 231-278.</S>
  <S sid="185" ssid="185">Harry H. Porter: "Incorporating Inheritance and Feature Structures into a Logic Grammar Formalism", in: 25th Annual Meeting of the ACL, 1987, (Stanford) [14] Carl PolLard, Ivan A.</S>
  <S sid="186" ssid="186">Sag: Information-based Syntax and Semantics.</S>
  <S sid="187" ssid="187">CSLI, Lectures Notes Number 13, Chicago University Press, 1987 [15] Carl Pollard: "Sorts in unification-based gram- mar and what they mean", To appear in M. Pinkal and B. Gregor (eds.</S>
  <S sid="188" ssid="188">), Unification in nat- ural language analysis, 1988.</S>
  <S sid="189" ssid="189">[16] Stuart M. Shieber: An Introduction to Unification-based Approaches to Grammar, CSLI, Lecture Notes Number 4, Chicago Uni- versity Press, 1986.</S>
  <S sid="190" ssid="190">[17] Gert Smolka: A feature logic with subsorts, LILOG report 33, IBM Deutschland, Stuttgart, 1987.</S>
  <S sid="191" ssid="191">[18] R4mi Zajac: "A Transfer Model Using a Typed Feature Structure Rewriting System with In- heritance.</S>
  <S sid="192" ssid="192">", in: Proceedings of the 27th Annual Meeting of the A CL-89 (Vancouver, Canada) 1989.</S>
</PAPER>
