<PAPER>
  <S sid="0">Hierarchical Phrase-Based Translation  </S>
  <ABSTRACT>
    <S sid="1" ssid="1">present a statistical machine translation model that uses that contain subphrases.</S>
    <S sid="2" ssid="2">The model is formally a synchronous context-free grammar but is learned from a parallel text without any syntactic annotations.</S>
    <S sid="3" ssid="3">Thus it can be seen as combining fundamental ideas from both syntax-based translation and phrase-based translation.</S>
    <S sid="4" ssid="4">We describe our system&#8217;s training and decoding methods in detail, and evaluate it for translation speed and translation accuracy.</S>
    <S sid="5" ssid="5">Using BLEU as a metric of translation accuracy, we find that our system performs significantly better than the Alignment Template System, a state-of-the-art phrasebased system.</S>
  </ABSTRACT>
  <SECTION title="" number="1">
    <S sid="6" ssid="1">We present a statistical machine translation model that uses hierarchical phrases&#8212;phrases that contain subphrases.</S>
    <S sid="7" ssid="2">The model is formally a synchronous context-free grammar but is learned from a parallel text without any syntactic annotations.</S>
    <S sid="8" ssid="3">Thus it can be seen as combining fundamental ideas from both syntax-based translation and phrase-based translation.</S>
    <S sid="9" ssid="4">We describe our system&#8217;s training and decoding methods in detail, and evaluate it for translation speed and translation accuracy.</S>
    <S sid="10" ssid="5">Using BLEU as a metric of translation accuracy, we find that our system performs significantly better than the Alignment Template System, a state-of-the-art phrasebased system.</S>
  </SECTION>
  <SECTION title="1." number="2">
    <S sid="11" ssid="1">The alignment template translation model (Och and Ney 2004) and related phrase-based models advanced the state of the art in machine translation by expanding the basic unit of translation from words to phrases, that is, substrings of potentially unlimited size (but not necessarily phrases in any syntactic theory).</S>
    <S sid="12" ssid="2">These phrases allow a model to learn local reorderings, translations of multiword expressions, or insertions and deletions that are sensitive to local context.</S>
    <S sid="13" ssid="3">This makes them a simple and powerful mechanism for translation.</S>
    <S sid="14" ssid="4">The basic phrase-based model is an instance of the noisy-channel approach (Brown et al. 1993).</S>
    <S sid="15" ssid="5">Following convention, we call the source language &#8220;French&#8221; and the target language &#8220;English&#8221;; the translation of a French sentence f into an English sentence e is modeled as: The phrase-based translation model P( f  |e) &#8220;encodes&#8221; e into f by the following steps: Other phrase-based models model the joint distribution P(e,f ) (Marcu and Wong 2002) or make P(e) and P(f I e) into features of a log-linear model (Och and Ney 2002).</S>
    <S sid="16" ssid="6">But the basic architecture of phrase segmentation (or generation), phrase reordering, and phrase translation remains the same.</S>
    <S sid="17" ssid="7">Phrase-based models can robustly perform translations that are localized to substrings that are common enough to have been observed in training.</S>
    <S sid="18" ssid="8">But Koehn, Och, and Marcu (2003) find that phrases longer than three words improve performance little for training corpora of up to 20 million words, suggesting that the data may be too sparse to learn longer phrases.</S>
    <S sid="19" ssid="9">Above the phrase level, some models perform no reordering (Zens and Ney 2004; Kumar, Deng, and Byrne 2006), some have a simple distortion model that reorders phrases independently of their content (Koehn, Och, and Marcu 2003; Och and Ney 2004), and some, for example, the Alignment Template System (Och et al. 2004; Thayer et al.</S>
    <S sid="20" ssid="10">2004), hereafter ATS, and the IBM phrase-based system (Tillmann 2004; Tillmann and Zhang 2005), have phrase-reordering models that add some lexical sensitivity.</S>
    <S sid="21" ssid="11">But, as an illustration of the limitations of phrase reordering, consider the following Mandarin example and its English translation: M1)11'1 &#65533; &#198; JLF01 P &#65533;&#65533; n &#65533;&#65533; 0* &#65533;Aozhou shi yu Beihan you bangjiao de shaoshu guojia zhiyi Australia is with North Korea have dipl. rels. that few countries one of .</S>
    <S sid="22" ssid="12">.</S>
    <S sid="23" ssid="13">Australia is one of the few countries that have diplomatic relations with North Korea.</S>
    <S sid="24" ssid="14">If we count zhiyi (literally, &#8216;of-one&#8217;) as a single token, then translating this sentence correctly into English requires identifying a sequence of five word groups that need to be reversed.</S>
    <S sid="25" ssid="15">When we run a phrase-based system, ATS, on this sentence (using the experimental setup described herein), we get the following phrases with translations: [Aozhou] [shi]1 [yu Beihan]2 [you] [bangjiao] [de shaoshu guojia zhiyi] [.]</S>
    <S sid="26" ssid="16">[Australia] [has] [dipl. rels.]</S>
    <S sid="27" ssid="17">[with North Korea]2 [is]1 [one of the few countries] [.] where we have used subscripts to indicate the reordering of phrases.</S>
    <S sid="28" ssid="18">The phrase-based model is able to order &#8220;has diplomatic relations with North Korea&#8221; correctly (using phrase reordering) and &#8220;is one of the few countries&#8221; correctly (using a combination of phrase translation and phrase reordering), but does not invert these two groups as it should.</S>
    <S sid="29" ssid="19">We propose a solution to these problems that does not interfere with the strengths of the phrase-based approach, but rather capitalizes on them: Because phrases are good for learning reorderings of words, we can use them to learn reorderings of phrases as well.</S>
    <S sid="30" ssid="20">In order to do this we need hierarchical phrases that can contain other phrases.</S>
    <S sid="31" ssid="21">For example, a hierarchical phrase pair that might help with the above example is (yu 1 you 2 , have 2 with 1 ) (3) where 1 and 2 are placeholders for subphrases (Chiang 2005).</S>
    <S sid="32" ssid="22">This would capture the fact that Chinese prepositional phrases almost always modify verb phrases on the left, whereas English prepositional phrases usually modify verb phrases on the right.</S>
    <S sid="33" ssid="23">Because it generalizes over possible prepositional objects and direct objects, it acts both as a discontinuous phrase pair and as a phrase-reordering rule.</S>
    <S sid="34" ssid="24">Thus it is considerably more powerful than a conventional phrase pair.</S>
    <S sid="35" ssid="25">Similarly, the hierarchical phrase pair ( 1 de 2 , the 2 that 1 ) (4) would capture the fact that Chinese relative clauses modify NPs on the left, whereas English relative clauses modify on the right; and the pair ( 1 zhiyi, one of 1 ) (5) would render the construction zhiyi in English word order.</S>
    <S sid="36" ssid="26">These three rules, along with some conventional phrase pairs, suffice to translate the sentence correctly: [Aozhou] [shi] [[[yu [Beihan]1 you [bangjiao]2] de [shaoshu guojia]3] zhiyi] [Australia] [is] [one of [the [few countries]3 that [have [dipl. rels.</S>
    <S sid="37" ssid="27">]2 with [N. Korea]1]]] The system we describe in this article uses rules like (3), (4), and (5), which we formalize in the next section as rules of a synchronous context-free grammar (CFG).1 Moreover, the system is able to learn them automatically from a parallel text without syntactic annotation.</S>
    <S sid="38" ssid="28">Because our system uses a synchronous CFG, it could be thought of as an example of syntax-based statistical machine translation (MT), joining a line of research (Wu 1997; Alshawi, Bangalore, and Douglas 2000; Yamada and Knight 2001) that has been fruitful but has not previously produced systems that can compete with phrase-based systems in large-scale translation tasks such as the evaluations held by NIST.</S>
    <S sid="39" ssid="29">Our approach differs from early syntax-based statistical translation models in combining the idea of hierarchical structure with key insights from phrase-based MT: Crucially, by incorporating the use of elementary structures with possibly many words, we hope to inherit phrase-based MT&#8217;s capacity for memorizing translations from parallel data.</S>
    <S sid="40" ssid="30">Other insights borrowed from the current state of the art include minimum-error-rate training of log-linear models (Och and Ney 2002; Och 2003) and use of an m-gram language model.</S>
    <S sid="41" ssid="31">The conjunction of these various elements presents a considerable challenge for implementation, which we discuss in detail in this article.</S>
    <S sid="42" ssid="32">The result is the first system employing a grammar (to our knowledge) to perform better than phrase-based systems in large-scale evaluations.2</S>
  </SECTION>
  <SECTION title="2." number="3">
    <S sid="43" ssid="1">Approaches to syntax-based statistical MT have varied in their reliance on syntactic theories, or annotations made according to syntactic theories.</S>
    <S sid="44" ssid="2">At one extreme are those, exemplified by that of Wu (1997), that have no dependence on syntactic theory beyond the idea that natural language is hierarchical.</S>
    <S sid="45" ssid="3">If these methods distinguish between different categories, they typically do not distinguish very many.</S>
    <S sid="46" ssid="4">Our approach, as presented here, falls squarely into this family.</S>
    <S sid="47" ssid="5">By contrast, other approaches, exemplified by that of Yamada and Knight (2001), do make use of parallel data with syntactic annotations, either in the form of phrase-structure trees or dependency trees (Ding and Palmer 2005; Quirk, Menezes, and Cherry 2005).</S>
    <S sid="48" ssid="6">Because syntactically annotated corpora are comparatively small, obtaining parsed parallel text in quantity usually entails running an automatic parser on a parallel corpus to produce noisy annotations.</S>
    <S sid="49" ssid="7">Both of these strands of research have recently begun to explore extraction of larger rules, guided by word alignments.</S>
    <S sid="50" ssid="8">The extraction method we use, which is a straightforward generalization of phrase extraction from word-aligned parallel text, has been independently proposed before in various settings.</S>
    <S sid="51" ssid="9">The method of Block (2000) is the earliest instance we are aware of, though it is restricted to rules with one variable.</S>
    <S sid="52" ssid="10">The same method has also been used by Probst et al. (2002) and Xia and McCord (2004) in conjunction with syntactic annotations to extract rules that are used for reordering prior to translation.</S>
    <S sid="53" ssid="11">Finally, Galley et al. (2004) use the same method to extract a very large grammar from syntactically annotated data.</S>
    <S sid="54" ssid="12">The discontinuous phrases used by Simard et al. (2005) have a similar purpose to synchronous grammar rules; but they have variables that stand for single words rather than subderivations, and they can interleave in non-hierarchical ways.</S>
  </SECTION>
  <SECTION title="3." number="4">
    <S sid="55" ssid="1">The model is based on a synchronous CFG, elsewhere known as a syntax-directed transduction grammar (Lewis and Stearns 1968).</S>
    <S sid="56" ssid="2">We give here an informal definition and then describe in detail how we build a synchronous CFG for our model.</S>
    <S sid="57" ssid="3">In a synchronous CFG the elementary structures are rewrite rules with aligned pairs of right-hand sides: where X is a nonterminal, &#947; and &#945; are both strings of terminals and nonterminals, and &#8212; is a one-to-one correspondence between nonterminal occurrences in &#947; and nonterminal occurrences in &#945;.</S>
    <S sid="58" ssid="4">For example, the hierarchical phrase pairs (3), (4), and (5) previously presented could be formalized in a synchronous CFG as: where we have used boxed indices to indicate which nonterminal occurrences are linked by &#8212;.</S>
    <S sid="59" ssid="5">The conventional phrase pairs would be formalized as: A synchronous CFG derivation begins with a pair of linked start symbols.</S>
    <S sid="60" ssid="6">At each step, two linked nonterminals are rewritten using the two components of a single rule.</S>
    <S sid="61" ssid="7">When denoting links with boxed indices, we must consistently reindex the newly introduced symbols apart from the symbols already present.</S>
    <S sid="62" ssid="8">For an example using these rules, see Figure 1.</S>
    <S sid="63" ssid="9">The bulk of the grammar consists of automatically extracted rules.</S>
    <S sid="64" ssid="10">The extraction process begins with a word-aligned corpus: a set of triples (f, e, &#8212;), where f is a French sentence, e is an English sentence, and &#8212; is a (many-to-many) binary relation between positions off and positions of e. The word alignments are obtained by running GIZA++ (Och and Ney 2000) on the corpus in both directions, and forming the union of the two sets of word alignments.</S>
    <S sid="65" ssid="11">We then extract from each word-aligned sentence pair a set of rules that are consistent with the word alignments.</S>
    <S sid="66" ssid="12">This can be thought of in two steps.</S>
    <S sid="67" ssid="13">First, we identify initial phrase pairs using the same criterion as most phrase-based systems (Och and Ney 2004), namely, there must be at least one word inside one phrase aligned to a word inside the other, but no word inside one phrase can be aligned to a word outside the other phrase.</S>
    <S sid="68" ssid="14">For example, suppose our training data contained the fragment Example derivation of a synchronous CFG.</S>
    <S sid="69" ssid="15">Numbers above arrows are rules used at each step. with word alignments as shown in Figure 2a.</S>
    <S sid="70" ssid="16">The initial phrases that would be extracted are shown in Figure 2b.</S>
    <S sid="71" ssid="17">More formally: Definition 1 Given a word-aligned sentence pair ( f, e, &#8212;), let fji stand for the substring of f from position i to position j inclusive, and similarly for eji.</S>
    <S sid="72" ssid="18">Then a rule ( fj, ele ) is an initial phrase pair of ( f, e, &#8212;) iff: Second, in order to obtain rules from the phrases, we look for phrases that contain other phrases and replace the subphrases with nonterminal symbols.</S>
    <S sid="73" ssid="19">For example, given the initial phrases shown in Figure 2b, we could form the rule where k is an index not used in &#947; and &#945;, is a rule of (f, e, &#8212;).</S>
    <S sid="74" ssid="20">This scheme generates a very large number of rules, which is undesirable not only because it makes training and decoding very slow, but also because it creates spurious ambiguity&#8212;a situation where the decoder produces many derivations that are distinct yet have the same model feature vectors and give the same translation.</S>
    <S sid="75" ssid="21">This can result in k-best lists with very few different translations or feature vectors, which is problematic for the minimum-error-rate training algorithm (see Section 4.3).</S>
    <S sid="76" ssid="22">To avoid this, we filter our grammar according to the following constraints, chosen to balance grammar size and performance on our development set: Glue rules.</S>
    <S sid="77" ssid="23">Having extracted rules from the training data, we could let X be the grammar&#8217;s start symbol and translate new sentences using only the extracted rules.</S>
    <S sid="78" ssid="24">But for robustness and for continuity with phrase-based translation models, we allow the grammar to divide a French sentence into a sequence of chunks and translate one chunk at a time.</S>
    <S sid="79" ssid="25">We formalize this inside a synchronous CFG using the rules (14) and (15), which we call the glue rules, repeated here: These rules analyze an S (the start symbol) as a sequence of Xs which are translated without reordering.</S>
    <S sid="80" ssid="26">Note that if we restricted our grammar to comprise only the glue rules and conventional phrase pairs (that is, rules without nonterminal symbols on the right-hand side), the model would reduce to a phrase-based model with monotone translation (no phrase reordering).</S>
    <S sid="81" ssid="27">Entity rules.</S>
    <S sid="82" ssid="28">Finally, for each sentence to be translated, we run some specialized translation modules to translate the numbers, dates, numbers, and bylines in the sentence, and insert these translations into the grammar as new rules.3 Such modules are often used by phrase-based systems as well, but here their translations can plug into hierarchical phrases, for example, into the rule allowing it to generalize over numbers of years.</S>
  </SECTION>
  <SECTION title="4." number="5">
    <S sid="83" ssid="1">Given a French sentence f, a synchronous CFG will have, in general, many derivations that yield f on the French side, and therefore (in general) many possible translations e. We now define a model over derivations D to predict which translations are more likely than others.</S>
    <S sid="84" ssid="2">Following Och and Ney (2002), we depart from the traditional noisy-channel approach and use a more general log-linear model over derivations D: 3 These modules are due to U. Germann and F. J. Och.</S>
    <S sid="85" ssid="3">In a previous paper (Chiang et al. 2005) we reported on translation modules for numbers and names.</S>
    <S sid="86" ssid="4">The present modules are not the same as those, though the mechanism for integrating them is identical.</S>
    <S sid="87" ssid="5">209 Computational Linguistics Volume 33, Number 2 where the &#966;i are features defined on derivations and the &#955;i are feature weights.</S>
    <S sid="88" ssid="6">One of the features is an m-gram language model PLM(e); the remainder of the features we will define as products of functions on the rules used in a derivation: The factors other than the language model factor can be put into a particularly convenient form.</S>
    <S sid="89" ssid="7">A weighted synchronous CFG is a synchronous CFG together with a function w that assigns weights to rules.</S>
    <S sid="90" ssid="8">This function induces a weight function over derivations: It is easy to write dynamic-programming algorithms to find the highest-weight translation or k-best translations with a weighted synchronous CFG.</S>
    <S sid="91" ssid="9">Therefore it is problematic that w(D) does not include the language model, which is extremely important for translation quality.</S>
    <S sid="92" ssid="10">We return to this challenge in Section 5.</S>
    <S sid="93" ssid="11">For our experiments, we use a feature set analogous to the default feature set of Pharaoh (Koehn, Och, and Marcu 2003).</S>
    <S sid="94" ssid="12">The rules extracted from the training bitext have the following features: Finally, for all the rules, there is a word penalty exp(&#8722;#T(&#945;)), where #T just counts terminal symbols.</S>
    <S sid="95" ssid="13">This allows the model to learn a general preference for shorter or longer outputs.</S>
    <S sid="96" ssid="14">In order to estimate the parameters of the phrase translation and lexical-weighting features, we need counts for the extracted rules.</S>
    <S sid="97" ssid="15">For each sentence pair in the training data, there is in general more than one derivation of the sentence pair using the rules extracted from it.</S>
    <S sid="98" ssid="16">Because we have observed the sentence pair but have not observed the derivations, we do not know how many times each derivation has been seen, and therefore we do not actually know how many times each rule has been seen.</S>
    <S sid="99" ssid="17">Following Och and others, we use heuristics to hypothesize a distribution of possible rules as though we observed them in the training data, a distribution that does not necessarily maximize the likelihood of the training data.5 Och&#8217;s method gives a count of one to each extracted phrase pair occurrence.</S>
    <S sid="100" ssid="18">We likewise give a count of one to each initial phrase pair occurrence, then distribute its weight equally among the rules obtained by subtracting subphrases from it.</S>
    <S sid="101" ssid="19">Treating this distribution as our observed data, we use relative-frequency estimation to obtain P(&#947;  |&#945;) and P(&#945;  |&#947;).</S>
    <S sid="102" ssid="20">Finally, the parameters &#955;i of the log-linear model (18) are learned by minimumerror-rate training (Och 2003), which tries to set the parameters so as to maximize the BLEU score (Papineni et al. 2002) of a development set.</S>
    <S sid="103" ssid="21">This gives a weighted synchronous CFG according to (22) that is ready to be used by the decoder.</S>
    <S sid="104" ssid="22">4 This feature uses word alignment information, which is discarded in the final grammar.</S>
    <S sid="105" ssid="23">If a rule occurs in training with more than one possible word alignment, Koehn, Och, and Marcu take the maximum lexical weight; we take a weighted average.</S>
    <S sid="106" ssid="24">5 This approach is similar to that taken by many parsers, such as SPATTER (Magerman 1995) and its successors, which use heuristics to hypothesize an augmented version of the training data, but it is especially reminiscent of the Data Oriented Parsing method (Bod 1992), which hypothesizes a distribution over many possible derivations of each training example from subtrees of varying sizes.</S>
  </SECTION>
  <SECTION title="5." number="6">
    <S sid="107" ssid="1">In brief, our decoder is a CKY (Cocke-Kasami-Younger) parser with beam search together with a postprocessor for mapping French derivations to English derivations.</S>
    <S sid="108" ssid="2">Given a French sentence f, it finds the English yield of the single best derivation that has French yield f: &#65533;e&#710; = e arg max P(D) (24) Ds.t.f(D)=f Note that this is not necessarily the highest-probability English string, which would require a more expensive summation over derivations.</S>
    <S sid="109" ssid="3">We now discuss the details of the decoder, focusing attention on efficiently calculating English language-model probabilities for possible translations, which is the primary technical challenge.</S>
    <S sid="110" ssid="4">In the following we present several parsers as deductive proof systems (Shieber, Schabes, and Pereira 1995; Goodman 1999).</S>
    <S sid="111" ssid="5">A parser in this notation defines a space of weighted items, in which some items are designated axioms and some items are designated goals (the items to be proven), and a set of inference rules of the form which means that if all the items Ii (called the antecedents) are provable, with weight wi, then I (called the consequent) is provable, with weight w, provided the side condition &#966; holds.</S>
    <S sid="112" ssid="6">The parsing process grows a set of provable items: It starts with the axioms, and proceeds by applying inference rules to prove more and more items until a goal is proven.</S>
    <S sid="113" ssid="7">For example, the well-known CKY algorithm for CFGs in Chomsky normal form can be thought of as a deductive proof system whose items can take one of two forms: The axioms would be 6 Treating grammar rules as axioms is not standard practice, but advocated by Goodman (1999).</S>
    <S sid="114" ssid="8">Here, it has the benefit of simplifying the presentation in Section 5.3.4. and the inference rules would be and the goal would be [S, 0, n], where S is the start symbol of the grammar and n is the length of the input string f. Given a synchronous CFG, we could convert its French-side grammar into Chomsky normal form, and then for each sentence, we could find the best parse using CKY.</S>
    <S sid="115" ssid="9">Then it would be a straightforward matter to revert the best parse from Chomsky normal form into the original form and map it into its corresponding English tree, whose yield is the output translation.</S>
    <S sid="116" ssid="10">However, because we have already restricted the number of nonterminal symbols in our rules to two, it is more convenient to use a modified CKY algorithm that operates on our grammar directly, without any conversion to Chomsky normal form.</S>
    <S sid="117" ssid="11">The axioms, inference rules, and goals for the basic decoder are shown in Figure 3.</S>
    <S sid="118" ssid="12">Its time complexity is O(n3), just as CKY&#8217;s is.</S>
    <S sid="119" ssid="13">Because this algorithm does not yet incorporate a language model, let us call it the &#8722;LM parser.</S>
    <S sid="120" ssid="14">The actual search procedure is given by the pseudocode in Figure 4.</S>
    <S sid="121" ssid="15">It organizes the proved items into an array chart whose cells chart[X, i, j] are sets of items.</S>
    <S sid="122" ssid="16">The cells are ordered such that every item comes after its possible antecedents: smaller spans before larger spans, and X items before S items (because of the unary rule S &#8594; &#65533;X 1 , X 1 )).</S>
    <S sid="123" ssid="17">Then the parser can proceed by visiting the chart cells in order and trying to prove all the items for each cell.</S>
    <S sid="124" ssid="18">Whenever it proves a new item, it adds the item to the Search procedure for the &#8722;LM parser. appropriate chart cell; in order to reconstruct the derivations later, it must also store, with each item, a tuple of back-pointers to the antecedents from which the item was deduced (for axioms, an empty tuple is used).</S>
    <S sid="125" ssid="19">If two items are added to a cell that are equivalent except for their weights or back-pointers, then they are merged (in the MT decoding literature, this is also known as hypothesis recombination), with the merged item taking its weight and back-pointers from the better of the two equivalent items.</S>
    <S sid="126" ssid="20">(However, if we are interested in finding the k-best derivations, the merged item gets the multiset of all the tuples of back-pointers from the equivalent items.</S>
    <S sid="127" ssid="21">These backpointers are used below in Section 5.2.)</S>
    <S sid="128" ssid="22">The algorithm in Figure 4 does not completely search the space of proofs, because it has a constraint that prohibits any X from spanning a substring longer than a fixed limit &#923; on the French side, corresponding to the maximum length constraint on initial rules during training.</S>
    <S sid="129" ssid="23">This gives the decoding algorithm an asymptotic time complexity of O(n).</S>
    <S sid="130" ssid="24">In principle &#923; should match the initial phrase length limit used in training (as it does in our experiments), but in practice it can be adjusted separately to maximize accuracy or speed.</S>
    <S sid="131" ssid="25">We often want to find not only the best derivation for a French sentence but a list of the k-best derivations.</S>
    <S sid="132" ssid="26">These are used for minimum-error-rate training and for rescoring with a language model (Section 5.3.1).</S>
    <S sid="133" ssid="27">We describe here how to do this using the lazy algorithm of Huang and Chiang (2005).</S>
    <S sid="134" ssid="28">Part of this method will also be reused in our algorithm for fast parsing with a language model (Section 5.3.4).</S>
    <S sid="135" ssid="29">If we conceive of lists as functions from indices to values, we may create a virtual list, a function that computes member values on demand instead of storing all the values statically.</S>
    <S sid="136" ssid="30">The heart of the k-best algorithm is a function MERGEPRODUCTS, which takes a set G of tuples of (virtual) lists with an operator &#8855; and returns a virtual list: Example illustrating MERGEPRODUCTS, where L1 = {1, 2,6, 10} and L2 = {1, 4, 7}.</S>
    <S sid="137" ssid="31">Numbers are negative log-probabilities.</S>
    <S sid="138" ssid="32">It assumes that the input lists are sorted and returns a sorted list.</S>
    <S sid="139" ssid="33">A naive implementation of MERGEPRODUCTS would simply calculate all possible products and sort; however, if we are only interested in the top part of the result, we can implement MERGEPRODUCTS so that the output values are computed lazily and the input lists are accessed only as needed.</S>
    <S sid="140" ssid="34">To do this, we must assume that the multiplication operator &#174; is monotonic in each of its arguments.</S>
    <S sid="141" ssid="35">By way of motivation, consider the simple case G = {(L1,L2)}.</S>
    <S sid="142" ssid="36">The full set of possible products can be arranged in a two-dimensional grid (see Figure 5a), which we could then sort to obtain MERGEPRODUCTS(G).</S>
    <S sid="143" ssid="37">But because of our assumptions, we know that the first element of MERGEPRODUCTS(G) must be L1[1] &#174; L2[1].</S>
    <S sid="144" ssid="38">Moreover, we know that the second element must be either L1[1] &#174; L2[2] or L1[2] &#174; L2[1].</S>
    <S sid="145" ssid="39">In general (see Figure 5b), if some of the cells have been previously enumerated, the next cell must be one of the cells (shaded gray) adjacent to the previously enumerated ones and we need not consider the others (shaded white).</S>
    <S sid="146" ssid="40">In this way, if we only want to compute the first few elements of MERGEPRODUCTS(G), we can do so by performing a small number of products and discarding the rest of the grid.</S>
    <S sid="147" ssid="41">Figure 6 shows the pseudocode for MERGEPRODUCTS.7 In lines 2&#8211;5, a priority queue is initialized with the best element from each L E G, where L ranges over tuples of lists, and 1 stands for a vector whose elements all have the value 1 (the dimensionality of the vector should be evident from the context).</S>
    <S sid="148" ssid="42">The rest of the function creates the virtual list: To enumerate the next element of the list, we first insert the elements adjacent to the previously enumerated element, if any (lines 9&#8211;13, where bi stands for the vector whose ith element is 1 and is zero elsewhere), and then enumerate the best element in the priority queue, if any (lines 14&#8211;18).</S>
    <S sid="149" ssid="43">We assume standard implementations of 7 This version corrects the behavior of the previously published version in some boundary conditions.</S>
    <S sid="150" ssid="44">Thanks to D. Smith and J.</S>
    <S sid="151" ssid="45">May for pointing those cases out.</S>
    <S sid="152" ssid="46">In the actual implementation, an earlier version is used which has the correct behavior but not for cyclic forests (which the parser never produces).</S>
    <S sid="153" ssid="47">Function for computing the union of products of sorted lists (Huang and Chiang 2005).</S>
    <S sid="154" ssid="48">the priority queue subroutines HEAPIFY, INSERT, and EXTRACTBEST (Cormen et al. 2001).</S>
    <S sid="155" ssid="49">The k-best list generator is then easy to define (Figure 7).</S>
    <S sid="156" ssid="50">First, we generate a parse forest; then we simply apply MERGEPRODUCTS recursively to the whole forest, using memoization to ensure that we generate only one k-best list for each item in the forest.</S>
    <S sid="157" ssid="51">The pseudocode in Figure 7 will find only the weights for the k-best derivations; extending it to output the translations as well is a matter of modifying line 5 to package the English sides of rules together with the weights w, and replacing the real multiplication operator &#215; in line 9 with one that not only multiplies weights but also builds partial translations out of subtranslations.</S>
    <S sid="158" ssid="52">We now turn to the problem of incorporating the language model (LM), describing three methods: first, using the &#8722;LM parser to obtain a k-best list of translations and rescoring it with the LM; second, incorporating the LM directly into the grammar in a construction reminiscent of the intersection of a CFG with a finite-state automaton; third, a hybrid method which we call cube pruning.</S>
    <S sid="159" ssid="53">5.3.1 Rescoring.</S>
    <S sid="160" ssid="54">One easy way to incorporate the LM into the model would be to decode first using the &#8722;LM parser to produce a k-best list of translations, then to rescore the k-best list using the LM.</S>
    <S sid="161" ssid="55">This method has the potential to be very fast: linear in k. However, because the number of possible translations is exponential in n, we may have to set k extremely high in order to find the true best translation (taking the LM into account) or something acceptably close to it.</S>
    <S sid="162" ssid="56">5.3.2 Intersection.</S>
    <S sid="163" ssid="57">A more principled solution would be to calculate the LM probabilities online.</S>
    <S sid="164" ssid="58">To do this, we view an m-gram LM as a weighted finite state machine M in which each state corresponds to a sequence of (m &#8722; 1) English terminal symbols.</S>
    <S sid="165" ssid="59">We can then intersect the English side of our weighted CFG G with this finite-state machine to produce a new weighted CFG that incorporates M. Thus PLM would be part of the rule weights (22) just like the other features.</S>
    <S sid="166" ssid="60">(For notational consistency, however, we write the LM probabilities separately from the rule weights.)</S>
    <S sid="167" ssid="61">In principle this method should admit no search errors, though in practice the blow-up in the effective size of the grammar necessitates pruning of the search space, which can cause search errors.</S>
    <S sid="168" ssid="62">The classic construction for intersecting a (non-synchronous) CFG with a finitestate machine is due to Bar-Hillel, Perles, and Shamir (1964), but we use a slightly different construction proposed by Wu (1996) for inversion transduction grammar and bigram LMs.</S>
    <S sid="169" ssid="63">We present an adaptation of his algorithm to synchronous CFGs with two nonterminals per right-hand side and general m-gram LMs.</S>
    <S sid="170" ssid="64">First, assume that the LM expects a whole sentence to be preceded by (m &#8722; 1) start-of-sentence symbols (s) and followed by a single end-of-sentence symbol (/s).</S>
    <S sid="171" ssid="65">The grammar can be made to do this simply by adding a rule and making S&#8217; the new start symbol.</S>
    <S sid="172" ssid="66">First, we define two functions p and q which operate on strings over T U {*}, where T is the English terminal alphabet, and * is a special placeholder symbol that stands for an elided part of an English string.</S>
    <S sid="173" ssid="67">Values of p and q in the &#8220;cgisf&#8221; example.</S>
    <S sid="174" ssid="68">The function p calculates LM probabilities for all the complete m-grams in a string; the function q elides symbols when all their m-grams have been accounted for.</S>
    <S sid="175" ssid="69">These functions let us correctly calculate the LM score of a sentence piecemeal.</S>
    <S sid="176" ssid="70">For example, let m = 3 and &#8220;c g i s f&#8221; stand for &#8220;colorless green ideas sleep furiously.&#8221; Then Table 1 shows some values of p and q.</S>
    <S sid="177" ssid="71">Then we may extend the &#8722;LM parser as shown in Figure 8 to use p and q to calculate LM probabilities.</S>
    <S sid="178" ssid="72">We call this parser the +LM parser.</S>
    <S sid="179" ssid="73">The items are of the form [X, i, j; e], signifying that a subtree rooted in X has been recognized spanning from i to j on the French side, and its English translation (possibly with parts elided) is e. The theoretical running time of this algorithm is O(n3|T|4(m&#8722;1)), because a deduction can combine up to two starred strings, which each have up to 2(m &#8722; 1) terminal symbols.</S>
    <S sid="180" ssid="74">This is far too slow to use in practice, so we must use beam-search to prune the search space down to a reasonable size.</S>
    <S sid="181" ssid="75">5.3.3 Pruning.</S>
    <S sid="182" ssid="76">The chart is organized into cells, each of which contains all the items standing for X spanning fji+1.</S>
    <S sid="183" ssid="77">The rule items are also organized into cells, each of which contains all the rules with the same French side and left-hand side.</S>
    <S sid="184" ssid="78">From here on, let us Inference rules for the +LM parser.</S>
    <S sid="185" ssid="79">Here w[x/X] means the string w with the string x substituted for the symbol X.</S>
    <S sid="186" ssid="80">The function q is defined in the text. consider the item scores as costs, that is, negative log (base-10) probabilities.</S>
    <S sid="187" ssid="81">Then, for each cell, we throw out any item that has a score worse than: In the +LM parser, the score of an item [X, i, j; e] in the chart does not reflect the LM probability of generating the first (m &#8722; 1) words of e. Thus two items [X, i, j; e] and [X, i, j; e'] are not directly comparable.</S>
    <S sid="188" ssid="82">To enable more meaningful comparisons, we define a heuristic When comparing items for pruning (and only for pruning), we add this heuristic function to the score of each item.</S>
    <S sid="189" ssid="83">5.3.4 Cube Pruning.</S>
    <S sid="190" ssid="84">Now we can develop a compromise between the rescoring and intersection methods.</S>
    <S sid="191" ssid="85">Consider Figure 9a.</S>
    <S sid="192" ssid="86">To the left of the grid we have four rules with the same French side, and above we have three items with the same category and span, that is, they belong to the same chart cell.</S>
    <S sid="193" ssid="87">Any of the twelve combinations of these rules and items can be used to deduce a new item (whose scores are shown in the grid), and all these new items will go into the same chart cell (partially listed on the right).</S>
    <S sid="194" ssid="88">The intersection method would compute all twelve items and add them to the new chart cell, where most of them will likely be pruned away.</S>
    <S sid="195" ssid="89">In actuality, the grid may be a cube (one dimension for rules and two dimensions for two nonterminals) with up to b3 elements, whereas the target chart cell can hold at most b items (where b is the limit on the size of the cell imposed during pruning).</S>
    <S sid="196" ssid="90">Thus the vast majority of computed items are pruned.</S>
    <S sid="197" ssid="91">But it is possible to compute only a small corner of the cube and preemptively prune the rest of the items without computing them, a method we refer to as cube pruning.</S>
    <S sid="198" ssid="92">The situation pictured in Figure 9a is very similar to k-best list generation.</S>
    <S sid="199" ssid="93">The four rules to the left of the grid can be thought of like a 4-best list for a single &#8722;LM rule item (X --&#65533; cong X); the three items above the grid, like a 3-best list for the single &#8722;LM item [X, 6,8]; and the new items to be deduced, like a k-best list for [X, 5, 8], except that we don&#8217;t know what k is in advance.</S>
    <S sid="200" ssid="94">If we could use MERGEPRODUCTS to enumerate the new items best-first, then we could enumerate them until one of them was pruned from the new cell; then the rest of items, which would have a worse score than the pruned item, could be preemptively pruned.</S>
    <S sid="201" ssid="95">MERGEPRODUCTS expects its input lists to be sorted best-first, and the &#174; operator to be monotonic in each of its arguments.</S>
    <S sid="202" ssid="96">For cube pruning, we sort items (both in the inputs to MERGEPRODUCTS and in the priority queue inside MERGEPRODUCTS) according to their +LM score, including the heuristic function h. The &#174; operator we use takes one or more antecedent items and forms their consequent item according to Example illustrating hybrid method for incorporating the LM.</S>
    <S sid="203" ssid="97">Numbers are negative the +LM parser.</S>
    <S sid="204" ssid="98">Note that the LM makes this &#8855; only approximately monotonic.</S>
    <S sid="205" ssid="99">This means that the enumeration of new items will not necessarily be best-first.</S>
    <S sid="206" ssid="100">To alleviate this problem, we stop the enumeration not as soon as an item falls outside the beam, but as soon as an item falls outside the beam by a margin of e. This quantity e expresses our guess as to how much the scores of the enumerated items can fluctuate because of the LM.</S>
    <S sid="207" ssid="101">A simpler approach, and probably better in practice, would be simply to set e = 0, that is, to ignore any fluctuation, but increase R and b to compensate.</S>
    <S sid="208" ssid="102">See Figure 9b for an example of cube pruning.</S>
    <S sid="209" ssid="103">The upper-left grid cell is enumerated first, as in the k-best example in Section 5.2, but the choice of the second is different, because of the added LM costs.</S>
    <S sid="210" ssid="104">Then, the third item is enumerated and merged with the first (unlike in the k-best algorithm).</S>
    <S sid="211" ssid="105">Supposing a threshold beam of R = 5 and a margin of e = 0.5, we quit upon considering the next item, because, with a score of 7.7, it falls outside the beam by more than e. The rest of the grid is then discarded.</S>
    <S sid="212" ssid="106">The pseudocode is given in Figure 10.</S>
    <S sid="213" ssid="107">The function INFER+LM is used as the &#174; operator; it takes a tuple of antecedent +LM items and returns a consequent +LM item according to the inference rules in Figure 8.</S>
    <S sid="214" ssid="108">The procedure REPARSE+LM takes a &#8722;LM chart chart as input and produces a +LM chart chart'.</S>
    <S sid="215" ssid="109">The variables u, v stand for items in &#8722;LM and u', v', for items in +LM, and the relation v &#65533;i v' is defined as follows: For each cell in the input chart, it takes the single item from the cell and constructs the virtual list L of all of its +LM counterparts (lines 9&#8211;15).</S>
    <S sid="216" ssid="110">Then, it adds the top items of L to the target cell until the cell is judged to be full (lines 16&#8211;20).</S>
  </SECTION>
  <SECTION title="6." number="7">
    <S sid="217" ssid="1">The implementation of our system, named Hiero, is in Python, a bytecode-interpreted language, and optimized using Psyco, a just-in-time compiler (Rigo 2004), and Pyrex, a Python-like compiled language, with C++ code from the SRI Language Modeling Toolkit (Stolcke 2002).</S>
    <S sid="218" ssid="2">In this section we report on experiments with Mandarin-toEnglish translation.</S>
    <S sid="219" ssid="3">Our evaluation metric is case-insensitive BLEU-4 (Papineni et al. 2002), as defined by NIST, that is, using the shortest (as opposed to closest) reference sentence length for the brevity penalty.</S>
    <S sid="220" ssid="4">We ran the grammar extractor of Section 3.2 on the parallel corpora listed in Table 2 with the exception of the United Nations data, for a total of 28 million words (English side).8 We then filtered this grammar for our development set, which was the 2002 NIST MT evaluation dry-run data, and our test sets, which were the data from the 2003&#8211;2005 NIST MT evaluations.</S>
    <S sid="221" ssid="5">Some example rules are shown in Table 3, and the sizes of the filtered grammars are shown in Table 4.</S>
    <S sid="222" ssid="6">We also used the SRI Language Modeling Toolkit to train two trigram language models with modified Kneser&#8211;Ney smoothing (Kneser and Ney 1995; Chen and Goodman 1998): one on 2.8 billion words from the English Gigaword corpus, and the other on the English side of the parallel text (28 million words).</S>
    <S sid="223" ssid="7">Table 5 shows the average decoding time on part of the development set for the three LM-incorporation methods described in Section 5.3, on a single processor of a dual 3 GHz Xeon machine.</S>
    <S sid="224" ssid="8">For these experiments, only the Gigaword language model was used.</S>
    <S sid="225" ssid="9">We set b = 30, R = 1 for X cells, b = 15, R = 1 for S cells, and b = 100 for rules except where noted in Table 5.</S>
    <S sid="226" ssid="10">Note that values for R and e are only meaningful relative to the scale of the feature weights; here, the language model weight was 0.06.</S>
    <S sid="227" ssid="11">The feature weights were obtained by minimum-error-rate training using the cube-pruning (e = 0.1) decoder.</S>
    <S sid="228" ssid="12">For the LM rescoring decoder, parsing and k-best list generation used feature weights optimized for the &#8722;LM model, but rescoring used the same weights as the other experiments.</S>
    <S sid="229" ssid="13">We tested the rescoring method (k = 103 and 104), the intersection method, and the cube-pruning method (e = 0, 0.1, and 0.2).</S>
    <S sid="230" ssid="14">The LM rescoring decoder (k = 104) is the fastest but has the poorest BLEU score.</S>
    <S sid="231" ssid="15">Identifying and rescoring the k-best derivations is very quick; the execution time is dominated by reconstructing the output strings for the k-best derivations, so it is possible that further optimization could reduce these times.</S>
    <S sid="232" ssid="16">The intersecting decoder has the best score but runs very slowly.</S>
    <S sid="233" ssid="17">Finally, the cubepruning decoder runs almost as fast as the rescoring decoder and translates almost as well as the intersecting decoder.</S>
    <S sid="234" ssid="18">Among these tests, e = 0.1 gives the best results, but in general the optimal setting will depend on the other beam settings and the scale of the feature weights.</S>
    <S sid="235" ssid="19">We compared Hiero against two baselines: the state-of-the-art phrase-based system ATS (Och et al. 2004; Thayer et al.</S>
    <S sid="236" ssid="20">2004), and Hiero itself run as a conventional phrase-based system with monotone translation (no phrase reordering).</S>
    <S sid="237" ssid="21">The ATS baseline was trained on all the parallel data listed in Table 1, for a total of 159 million words (English side).</S>
    <S sid="238" ssid="22">The second language model was also trained on the English side of the whole bitext.</S>
    <S sid="239" ssid="23">Phrases of up to 10 in length on the French side were extracted from the parallel text, and minimum-error-rate training (Och 2003) was performed on the development set for 17 features, the same as used in the NIST 2004 and 2005 evaluations.9 These features are similar to the features used for our system, but also include features for phrase-reordering (which are not applicable to our system), IBM Model 1 in both directions, a missing word penalty, and a feature that controls a fallback lexicon.</S>
    <S sid="240" ssid="24">The other baseline, which we call Hiero Monotone, is the same as Hiero except with the limitation that extracted rules cannot have any nonterminal symbols on their righthand sides.</S>
    <S sid="241" ssid="25">In other words, only conventional phrases can be extracted, of length up to 5.</S>
    <S sid="242" ssid="26">These phrases are combined using the glue rules only, which makes the grammar equivalent to a conventional phrase-based model with monotone translation.</S>
    <S sid="243" ssid="27">Thus this system represents the nearest phrase-based equivalent to our model, to provide a controlled test of the effect of hierarchical phrases.</S>
    <S sid="244" ssid="28">We performed minimum-error-rate training separately on Hiero and Hiero Monotone to maximize their BLEU scores on the development set; the feature weights for Hiero are shown in Table 6.</S>
    <S sid="245" ssid="29">The beam settings used for both decoders were R = 30, b = 30 for X cells, R = 30, b = 15 for S cells, b = 100 for rules, and e = 3.</S>
    <S sid="246" ssid="30">On the test set, we found that Hiero improves over both baselines in all three tests (see Table 7).</S>
    <S sid="247" ssid="31">All improvements are statistically significant (p &lt; 0.01) using the sign test as described by Collins, Koehn, and Ku&#711;cerov&#180;a (2005).</S>
  </SECTION>
  <SECTION title="7." number="8">
    <S sid="248" ssid="1">Syntax-based statistical machine translation is a twofold challenge.</S>
    <S sid="249" ssid="2">It is a modeling challenge, in part because of the difficulty of coordinating syntactic structures with potentially messy parallel corpora; it is an implementation challenge, because of the added complexity introduced by hierarchical structures.</S>
    <S sid="250" ssid="3">Here we have addressed the modeling challenge by taking only the fundamental idea from syntax, that language is hierarchically structured, and integrating it conservatively into a phrase-based model typical of the current state of the art.</S>
    <S sid="251" ssid="4">This fusion does no violence to the latter; indeed, we have presented our approach as a logical outgrowth of the phrase-based approach.</S>
    <S sid="252" ssid="5">Moreover, hierarchical structure improves translation accuracy significantly.</S>
    <S sid="253" ssid="6">Feature weights obtained by minimum-error-rate training. language model (large) 1.00 language model (bitext) 1.03 The choice to use hierarchical structures that are more complex than flat structures, as well as rules that contain multiple lexical items instead of one, an m-gram model whose structure cuts across the structure of context-free derivations, and large amounts of training data for meaningful comparison with modern systems&#8212;these all threaten to make training a synchronous grammar and translating with it intractable.</S>
    <S sid="254" ssid="7">We have shown how, through training with simple methods inspired by phrase-based models, and translating using a modified CKY with cube pruning, this challenge can be met.</S>
    <S sid="255" ssid="8">Clearly, however, we have only scratched the surface of the modeling challenge.</S>
    <S sid="256" ssid="9">The fact that moving from flat structures to hierarchical structures significantly improves translation quality suggests that more specific ideas from syntax may be valuable as well.</S>
    <S sid="257" ssid="10">There are many possibilities for enriching the simple framework that the present model provides.</S>
    <S sid="258" ssid="11">But the course taken here is one of organic development of an approach known to work well at large-scale tasks, and we plan to stay this course in future work towards more syntactically informed statistical machine translation.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="9">
    <S sid="259" ssid="1">I would like to thank Liang Huang, Philipp Koehn, Adam Lopez, Nitin Madnani, Daniel Marcu, Christof Monz, Dragos Munteanu, Philip Resnik, Michael Subotin, Wei Wang, and the anonymous reviewers.</S>
    <S sid="260" ssid="2">This work was partially supported by ONR MURI contract FCPO.810548265, by Department of Defense contract RD-02-5700, and under the GALE program of the Defense Advanced Research Projects Agency, contract HR 0011-06-C-0022.</S>
    <S sid="261" ssid="3">S. D. G.</S>
  </SECTION>
</PAPER>
