<PAPER>
  <S sid="0">Efficient Algorithms For Parsing The DOP Model</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Excellent results have been reported for Data- Oriented Parsing (DOP) of natural language texts (Bod, 1993c).</S>
    <S sid="2" ssid="2">Unfortunately, existing algorithms are both computationally intensive and difficult to implement.</S>
    <S sid="3" ssid="3">Previous algorithms are expensive due to two factors: the exponential number of rules that must be generated and the use of a Monte Carlo parsing algorithm.</S>
    <S sid="4" ssid="4">In this paper we solve the first problem by a novel reduction of the DOP model to,a small, equivalent probabilistic context-free grammar.</S>
    <S sid="5" ssid="5">We solve the second problem by a novel deterministic parsing strategy that maximizes the expected number of correct constituents, rather than the probability of a correct parse tree.</S>
    <S sid="6" ssid="6">Using the optimizations, experiments yield a 97% crossing brackets rate and 88% zero crossing brackets rate.</S>
    <S sid="7" ssid="7">This differs significantly from the results reported by Bod, and is comparable to results from a duplication of Pereira and Schabes's (1992) experiment on the same data.</S>
    <S sid="8" ssid="8">We show that Bod's results are at least partially due to an extremely fortuitous choice of test data, and partially due to using cleaner data than other researchers.</S>
  </ABSTRACT>
  <SECTION title="Introduction" number="1">
    <S sid="9" ssid="1">The Data-Oriented Parsing (DOP) model has a short, interesting, and controversial history.</S>
    <S sid="10" ssid="2">It was introduced by Reinko Scha (1990), and was then studied by Rens Bod.</S>
    <S sid="11" ssid="3">Unfortunately, Bod (1993c, 1992) was not able to find an efficient exact algorithm for parsing using the model; however he did discover and implement Monte Carlo approximations.</S>
    <S sid="12" ssid="4">He tested these algorithms on a cleaned up version of the ATIS corpus, and achieved some very exciting results, reportedly getting 96% of his test set exactly correct, a huge improvement over previous results.</S>
    <S sid="13" ssid="5">For instance, Bod (1993b) compares these results to Schabes (1993), in which, for short sentences, 30% of the sentences have no crossing brackets (a much easier measure than exact match).</S>
    <S sid="14" ssid="6">Thus, Bod achieves an extraordinary 8-fold error rate reduction.</S>
    <S sid="15" ssid="7">Not surprisingly, other researchers attempted to duplicate these results, but due to a lack of details of the parsing algorithm in his publications, these other researchers were not able to confirm the results (Magerman, Lafferty, personal communication).</S>
    <S sid="16" ssid="8">Even Bod's thesis (Bod, 1995a) does not contain enough information to replicate his results.</S>
    <S sid="17" ssid="9">Parsing using the DOP model is especially difficult.</S>
    <S sid="18" ssid="10">The model can be summarized as a special kind of Stochastic Tree Substitution Grammar (STSG): given a bracketed, labelled training corpus, let every subtree of that corpus be an elementary tree, with a probability proportional to the number of occurrences of that subtree in the training corpus.</S>
    <S sid="19" ssid="11">Unfortunately, the number of trees is in general exponential in the size of the training corpus trees, producing an unwieldy grammar.</S>
    <S sid="20" ssid="12">In this paper, we introduce a reduction of the DOP model to an exactly equivalent Probabilistic Context Free Grammar (PCFG) that is linear in the number of nodes in the training data.</S>
    <S sid="21" ssid="13">Next, we present an algorithm for parsing, which returns the parse that is expected to have the largest number of correct constituents.</S>
    <S sid="22" ssid="14">We use the reduction and algorithm to parse held out test data, comparing these results to a replication of Pereira and Schabes (1992) on the same data.</S>
    <S sid="23" ssid="15">These results are disappointing: the PCFG implementation of the DOP model performs about the same as the Pereira and Schabes method.</S>
    <S sid="24" ssid="16">We present an analysis of the runtime of our algorithm and Bod's.</S>
    <S sid="25" ssid="17">Finally, we analyze Bod's data, showing that some of the difference between our performance and his is due to a fortuitous choice of test data.</S>
    <S sid="26" ssid="18">This paper contains the first published replication of the full DOP model, i.e. using a parser which sums over derivations.</S>
    <S sid="27" ssid="19">It also contains algorithms implementing the model with significantly fewer resources than previously needed.</S>
    <S sid="28" ssid="20">Furthermore, for the first time, the DOP model is compared on the same data to a competing model.</S>
    <S sid="29" ssid="21">The DOP model itself is extremely simple and can be described as follows: for every sentence in a parsed training corpus, extract every subtree.</S>
    <S sid="30" ssid="22">In general, the number of subtrees will be very large, typically exponential in sentence length.</S>
    <S sid="31" ssid="23">Now, use these trees to form a Stochastic Tree Substitution Grammar (STSG).</S>
    <S sid="32" ssid="24">There are two ways to define a STSG: either as a Stochastic Tree Adjoining Grammar (Schabes, 1992) restricted to substitution operations, or as an extended PCFG in which entire trees may occur on the right hand side, instead of just strings of terminals and nonterminals.</S>
    <S sid="33" ssid="25">Given the tree of Figure 1, we can use the DOP model to convert it into the STSG of Figure 2.</S>
    <S sid="34" ssid="26">The numbers in parentheses represent the probabilities.</S>
    <S sid="35" ssid="27">These trees can be combined in various ways to parse sentences.</S>
    <S sid="36" ssid="28">In theory, the DOP model has several advantages over other models.</S>
    <S sid="37" ssid="29">Unlike a PCFG, the use of trees allows capturing large contexts, making the model more sensitive.</S>
    <S sid="38" ssid="30">Since every subtree is included, even trivial ones corresponding to rules in a PCFG, novel sentences with unseen contexts Unfortunately, the number of subtrees is huge; therefore Bod randomly samples 5% of the subtrees, throwing away the rest.</S>
    <S sid="39" ssid="31">This significantly speeds up parsing.</S>
    <S sid="40" ssid="32">There are two existing ways to parse using the DOP model.</S>
    <S sid="41" ssid="33">First, one can find the most probable derivation.</S>
    <S sid="42" ssid="34">That is, there can be many ways a given sentence could be derived from the STSG.</S>
    <S sid="43" ssid="35">Using the most probable derivation criterion, one simply finds the most probable way that a sentence could be produced.</S>
    <S sid="44" ssid="36">Figure 3 shows a simple example STSG.</S>
    <S sid="45" ssid="37">For the string xx, what is the most probable derivation?</S>
    <S sid="46" ssid="38">The parse tree has probability i of being generated by the trivial derivation containing a single tree.</S>
    <S sid="47" ssid="39">This tree corresponds to the most probable derivation of xx.</S>
    <S sid="48" ssid="40">One could try to find the most probable parse tree.</S>
    <S sid="49" ssid="41">For a given sentence and a given parse tree, there are many different derivations that could lead to that parse tree.</S>
    <S sid="50" ssid="42">The probability of the parse tree is the sum of the probabilities of the derivations.</S>
    <S sid="51" ssid="43">Given our example, there are two different ways to generate the parse tree each with probability t, so that the parse tree has probability t .</S>
    <S sid="52" ssid="44">This parse tree is most probable.</S>
    <S sid="53" ssid="45">Bod (1993c) shows how to approximate this most probable parse using a Monte Carlo algorithm.</S>
    <S sid="54" ssid="46">The algorithm randomly samples possible derivations, then finds the tree with the most sampled derivations.</S>
    <S sid="55" ssid="47">Bod shows that the most probable parse yields better performance than the most probable derivation on the exact match criterion.</S>
    <S sid="56" ssid="48">Khalil Sima'an (1996) implemented a version of the DOP model, which parses efficiently by limiting the number of trees used and by using an efficient most probable derivation model.</S>
    <S sid="57" ssid="49">His experiments differed from ours and Bod's in many ways, including his use of a different version of the ATIS corpus; the use of word strings, rather than part of speech strings; and the fact that he did not parse sentences containing unknown words, effectively throwing out the most difficult sentences.</S>
    <S sid="58" ssid="50">Furthermore, Sima'an limited the number of substitution sites for his trees, effectively using a subset of the DOP model.</S>
    <S sid="59" ssid="51">Unfortunately, Bod's reduction to a STSG is extremely expensive, even when throwing away 95% of the grammar.</S>
    <S sid="60" ssid="52">Fortunately, it is possible to find an equivalent PCFG that contains exactly eight PCFG rules for each node in the training data; thus it is 0(n).</S>
    <S sid="61" ssid="53">Because this reduction is so much smaller, we do not discard any of the grammar when using it.</S>
    <S sid="62" ssid="54">The PCFG is equivalent in two senses: first it generates the same strings with the same probabilities; second, using an isomorphism defined below, it generates the same trees with the same probabilities, although one must sum over several PCFG trees for each STSG tree.</S>
    <S sid="63" ssid="55">To show this reduction and equivalence, we must first define some terminology.</S>
    <S sid="64" ssid="56">We assign every node in every tree a unique number, which we will call its address.</S>
    <S sid="65" ssid="57">Let A@k denote the node at address k, where A is the non-terminal labeling that node.</S>
    <S sid="66" ssid="58">We will need to create one new nonterminal for each node in the training data.</S>
    <S sid="67" ssid="59">We will call this non-terminal Ak.</S>
    <S sid="68" ssid="60">We will call nonterminals of this form &amp;quot;interior&amp;quot; non-terminals, and the original non-terminals in the parse trees &amp;quot;exterior&amp;quot;.</S>
    <S sid="69" ssid="61">Let aj represent the number of subtrees headed by the node Aaj.</S>
    <S sid="70" ssid="62">Let a represent the number of subtrees headed by nodes with non-terminal A, that is a = E &#8226; a &#8226; How many subtrees does it have?</S>
    <S sid="71" ssid="63">Consider first the possibilities on the left branch.</S>
    <S sid="72" ssid="64">There are bk non-trivial subtrees headed by Bak, and there is also the trivial case where the left node is simply B.</S>
    <S sid="73" ssid="65">Thus there are bk + 1 different possibilities on the left branch.</S>
    <S sid="74" ssid="66">Similarly, for the right branch there are ci + 1 possibilities.</S>
    <S sid="75" ssid="67">We can create a subtree by choosing any possible left subtree and any possible right subtree.</S>
    <S sid="76" ssid="68">Thus, there are ai = (bk + 1)(ci + 1) possible subtrees headed by A@j.</S>
    <S sid="77" ssid="69">In our example tree of Figure 1, both noun phrases have exactly one subtree: npt = np2 = 1; the verb phrase has 2 subtrees: vp3 = 2; and the sentence has 6: si = 6.</S>
    <S sid="78" ssid="70">These numbers correspond to the number of subtrees in Figure 2.</S>
    <S sid="79" ssid="71">We will call a PCFG subderivation isomorphic to a STSG tree if the subderivation begins with an external non-terminal, uses internal nonterminals for intermediate steps, and ends with external non-terminals.</S>
    <S sid="80" ssid="72">For instance, consider the tree taken from Figure 2.</S>
    <S sid="81" ssid="73">The following PCFG subderivation is isomorphic: S = NPA1 VP&#169;2 PN PN VP@2 PN PN V NP.</S>
    <S sid="82" ssid="74">We say that a PCFG derivation is isomorphic to a STSG derivation if there is a corresponding PCFG subderivation for every step in the STSG derivation.</S>
    <S sid="83" ssid="75">We will give a simple small PCFG with the following surprising property: for every subtree in the training corpus headed by A, the grammar will generate an isomorphic subderivation with probability 1/a.</S>
    <S sid="84" ssid="76">In other words, rather than using the large, explicit STSG, we can use this small PCFG that generates isomorphic derivations, with identical probabilities.</S>
    <S sid="85" ssid="77">The construction is as follows.</S>
    <S sid="86" ssid="78">For a node such we will generate the following eight PCFG rules, where the number in parentheses following a rule is its probability.</S>
    <S sid="87" ssid="79">Ai -4 BC (11a3) A -4 BC (11a) &#8212;&gt; BkC (bklaj) A &#8212;&gt; BkC (bkla) Ai -4 BC, (cilai) A -4 BC, (cila) BkC, (bkCliaj) A BkC, (bkel /a) We will show that subderivations headed by A with external non-terminals at the roots and leaves, internal non-terminals elsewhere have probability 1/a.</S>
    <S sid="88" ssid="80">Subderivations headed by Ai with external non-terminals only at the leaves, internal non-terminals elsewhere, have probability Vai.</S>
    <S sid="89" ssid="81">The proof is by induction on the depth of the trees.</S>
    <S sid="90" ssid="82">For trees of depth 1, there are two cases: Trivially, these trees have the required probabilities.</S>
    <S sid="91" ssid="83">Now, assume that the theorem is true for trees of depth n or less.</S>
    <S sid="92" ssid="84">We show that it holds for trees of depth n +1.</S>
    <S sid="93" ssid="85">There are eight cases, one for each of the eight rules.</S>
    <S sid="94" ssid="86">We show two of them.</S>
    <S sid="95" ssid="87">Let Bak represent a tree of at most depth n with external leaves, headed by Bk, and with internal intermediate non-terminals.</S>
    <S sid="96" ssid="88">Then, for trees such as the probability of the tree is.</S>
    <S sid="97" ssid="89">-1- = -.</S>
    <S sid="98" ssid="90">Simibk ci aj a, larly, for another case, trees headed by A the probability of the tree is*kk-0 = 1.</S>
    <S sid="99" ssid="91">The other six cases follow trivially with similar reasoning.</S>
    <S sid="100" ssid="92">We call a PCFG derivation isomorphic to a STSG derivation if for every substitution in the STSG there is a corresponding subderivation in the PCFG.</S>
    <S sid="101" ssid="93">Figure 4 contains an example of isomorphic derivations, using two subtrees in the STSG and four productions in the PCFG.</S>
    <S sid="102" ssid="94">We call a PCFG tree isomorphic to a STSG tree if they are identical when internal nonterminals are changed to external non-terminals.</S>
    <S sid="103" ssid="95">Our main theorem is that this construction produces PCFG trees isomorphic to the STSG trees with equal probability.</S>
    <S sid="104" ssid="96">If every subtree in the training corpus occurred exactly once, this would be trivial to prove.</S>
    <S sid="105" ssid="97">For every STSG subderivation, there would be an isomorphic PCFG subderivation, with equal probability.</S>
    <S sid="106" ssid="98">Thus for every STSG derivation, there would be an isomorphic PCFG derivation, with equal probability.</S>
    <S sid="107" ssid="99">Thus every STSG tree would be produced by the PCFG with equal probability.</S>
    <S sid="108" ssid="100">However, it is extremely likely that some subtrees, especially trivial ones like If the STSG formalism were modified slightly, so that trees could occur multiple times, then our relationship could be made one to one.</S>
    <S sid="109" ssid="101">Consider a modified form of the DOP model, in which when subtrees occurred multiple times in the training corpus, their counts were not merged: both identical trees are added to the grammar.</S>
    <S sid="110" ssid="102">Each of these trees will have a lower probability than if their counts were merged.</S>
    <S sid="111" ssid="103">This would change the probabilities of the derivations; however the probabilities of parse trees would not change, since there would be correspondingly more derivations for each tree.</S>
    <S sid="112" ssid="104">Now, the desired one to one relationship holds: for every derivation in the new STSG there is an isomorphic derivation in the PCFG with equal probability.</S>
    <S sid="113" ssid="105">Thus, summing over all derivations of a tree in the STSG yields the same probability as summing over all the isomorphic derivations in the PCFG.</S>
    <S sid="114" ssid="106">Thus, every STSG tree would be produced by the PCFG with equal probability.</S>
    <S sid="115" ssid="107">It follows trivially from this that no extra trees are produced by the PCFG.</S>
    <S sid="116" ssid="108">Since the total probability of the trees produced by the STSG is 1, and the PCFG produces these trees with the same probability, no probability is &amp;quot;left over&amp;quot; for any other trees.</S>
    <S sid="117" ssid="109">There are several different evaluation metrics one could use for finding the best parse.</S>
    <S sid="118" ssid="110">In the section covering previous research, we considered the most probable derivation and the most probable parse tree.</S>
    <S sid="119" ssid="111">There is one more metric we could consider.</S>
    <S sid="120" ssid="112">If our performance evaluation were based on the number of constituents correct, using measures similar to the crossing brackets measure, we would want the parse tree that was most likely to have the largest number of correct constituents.</S>
    <S sid="121" ssid="113">With this criterion and the example grammar of Figure 3, the best parse tree would be The probability that the S constituent is correct is 1.0, while the probability that the A constituent is correct is 1, and the probability that the B constituent is correct is Thus, this tree has on average 2 constituents correct.</S>
    <S sid="122" ssid="114">All other trees will have fewer constituents correct on average.</S>
    <S sid="123" ssid="115">We call the best parse tree under this criterion the Maximum Constituents Parse.</S>
    <S sid="124" ssid="116">Notice that this parse tree cannot even be produced by the grammar: each of its constituents is good, but it is not necessarily good when considered as a full tree.</S>
    <S sid="125" ssid="117">Bod (1993a, 1995a) shows that the most probable derivation does not perform as well as the most probable parse for the DOP model, getting 65% exact match for the most probable derivation, versus 96% correct for the most probable parse.</S>
    <S sid="126" ssid="118">This is not surprising, since each parse tree can be derived by many different derivations; the most probable parse criterion takes all possible derivations into account.</S>
    <S sid="127" ssid="119">Similarly, the Maximum Constituents Parse is also derived from the sum of many different derivations.</S>
    <S sid="128" ssid="120">Furthermore, although the Maximum Constituents Parse should not do as well on the exact match criterion, it should perform even better on the percent constituents correct criterion.</S>
    <S sid="129" ssid="121">We have previously performed a detailed comparison between the most likely parse, and the Maximum Constituents Parse for Probabilistic Context Free Grammars (Goodman, 1996); we showed that the two have very similar performance on a broad range of measures, with at most a 10% difference in error rate (i.e., a change from 10% error rate to 9% error rate.)</S>
    <S sid="130" ssid="122">We therefore think that it is reasonable to use a Maximum Constituents Parser to parse the DOP model.</S>
    <S sid="131" ssid="123">The parsing algorithm is a variation on the Inside-Outside algorithm, developed by Baker (1979) and discussed in detail by Lan and Young (1990).</S>
    <S sid="132" ssid="124">However, while the Inside-Outside algorithm is a grammar re-estimation algorithm, the algorithm presented here is just a parsing algorithm.</S>
    <S sid="133" ssid="125">It is closely related to a similar algorithm used for Hidden Markov Models (Rabiner, 1989) for finding the most likely state at each time.</S>
    <S sid="134" ssid="126">However, unlike in the HMM case where the algorithm produces a simple state sequence, in the PCFG case a parse tree is produced, resulting in additional constraints.</S>
    <S sid="135" ssid="127">A formal derivation of a very similar algorithm is given elsewhere (Goodman, 1996); only the intuition is given here.</S>
    <S sid="136" ssid="128">The algorithm can be summarized as follows.</S>
    <S sid="137" ssid="129">First, for each potential constituent, where a constituent is a non-terminal, a start position, and an end position, find the probability that that constituent is in the parse.</S>
    <S sid="138" ssid="130">After that, put the most likely constituents together to form a passe tree, using dynamic programming.</S>
    <S sid="139" ssid="131">The probability that a potential constituent occurs in the correct parse tree, P(X ws...wtIS wi...tv&#8222;), will be called g(s,t, X).</S>
    <S sid="140" ssid="132">In words, it is the probability that, given the sentence wi...w., a symbol X generates ws...wt&#8226; We can compute this probability using elements of the Inside-Outside algorithm.</S>
    <S sid="141" ssid="133">First, compute the inside probabilities, e(s,t, X) = P(X Ws.--wt).</S>
    <S sid="142" ssid="134">Second, compute the outside probabilities, f(s,t, X) = P(S Third, compute the matrix g(s,t, X): Once the matrix g(s,t, X) is computed, a dynamic programming algorithm can be used to determine the best parse, in the sense of maximizing the number of constituents expected correct.</S>
    <S sid="143" ssid="135">Figure 5 shows pseudocode for a simplified form of this algorithm.</S>
    <S sid="144" ssid="136">For a grammar with g nonterminals and training data of size T, the run time of the algorithm is 0(Tn2 + gn3 + n3) since there are two layers of outer loops, each with run time at most n, and inner loops, over addresses (training data), nonterminals and n. However, this is dominated by the computation of the Inside and Outside probabilities, which takes time 0(rn3), for a grammar with r rules.</S>
    <S sid="145" ssid="137">Since there are eight rules for every node in the training data, this is 0(Tn3).</S>
    <S sid="146" ssid="138">By modifying the algorithm slightly to record the actual split used at each node, we can recover the best parse.</S>
    <S sid="147" ssid="139">The entry maxc Li, n] contains the expected number of correct constituents, given the model.</S>
  </SECTION>
  <SECTION title="Experimental Results and Discussion" number="2">
    <S sid="148" ssid="1">We are grateful to Bod for supplying the data that he used for his experiments (Bod, 1995b, Bod, 1995a, Bod, 1993c).</S>
    <S sid="149" ssid="2">The original ATIS data from the Penn Tree Bank, version 0.5, is very noisy; it is difficult to even automatically read this data, due to inconsistencies between files.</S>
    <S sid="150" ssid="3">Researchers are thus left with the difficult decision as to how to clean the data.</S>
    <S sid="151" ssid="4">For this paper, we conducted two sets of experiments: one using a minimally cleaned set of data,1 making our results comparable to previous results; the other using the ATIS data prepared by Bod, which contained much more significant revisions.</S>
    <S sid="152" ssid="5">Ten data sets were constructed by randomly splitting minimally edited ATIS (Hemphill et al., 1990) sentences into a 700 sentence training set, and 88 sentence test set, then discarding sentences of length &gt; 30.</S>
    <S sid="153" ssid="6">For each of the ten sets, both the DOP algorithm outlined here and the grammar induction experiment of Pereira and Schabes were run.</S>
    <S sid="154" ssid="7">Crossing brackets, zero crossing brackets, and the paired differences are presented in Table 1.</S>
    <S sid="155" ssid="8">All sentences output by the parser were made binary branching (see the section covering analysis of Bod's data), since otherwise the crossing brackets measures are meaningless (Magerman, 1994).</S>
    <S sid="156" ssid="9">IA diff file between the original ATIS data and the cleaned up version, in a form usable by the &amp;quot;ed&amp;quot; program, is available by anonymous FTP from ftp://ftp.das.harvard.edu/pub/goodman/atis-ed/ ti_tb.par-ed and ti_tb.pos-ed.</S>
    <S sid="157" ssid="10">Note that the number of changes made was small.</S>
    <S sid="158" ssid="11">The diff files sum to 457 bytes, versus 269,339 bytes for the original files, or less than 0.2%.</S>
    <S sid="159" ssid="12">A few sentences were not parsable; these were assigned right branching period high structure, a good heuristic (Brill, 1993).</S>
    <S sid="160" ssid="13">We also ran experiments using Bod's data, 75 sentence test sets, and no limit on sentence length.</S>
    <S sid="161" ssid="14">However, while Bod provided us with his data, he did not provide us with the split into test and training that he used; as before we used ten random splits.</S>
    <S sid="162" ssid="15">The results are disappointing, as shown in Table 2.</S>
    <S sid="163" ssid="16">They are noticeably worse than those of Bod, and again very comparable to those of Pereira and Schabes.</S>
    <S sid="164" ssid="17">Whereas Bod reported 96% exact match, we got only 86% using the less restrictive zero crossing brackets criterion.</S>
    <S sid="165" ssid="18">It is not clear what exactly accounts for these differences.2 It is also noteworthy that the results are much better on Bod's data than on the minimally edited data: crossing brackets rates of 96% and 97% on Bod's data versus 90% on minimally edited data.</S>
    <S sid="166" ssid="19">Thus it appears that part of Bod's extraordinary performance can be explained by the fact that his data is much cleaner than the data used by other researchers.</S>
    <S sid="167" ssid="20">DOP does do slightly better on most measures.</S>
    <S sid="168" ssid="21">We performed a statistical analysis using a t-test on the paired differences between DOP and Pereira and Schabes performance on each run.</S>
    <S sid="169" ssid="22">On 2Ideally, we would exactly reproduce these experiments using Bod's algorithm.</S>
    <S sid="170" ssid="23">Unfortunately, it was not possible to get a full specification of the algorithm. the minimally edited ATIS data, the differences were statistically insignificant, while on Bod's data the differences were statistically significant beyond the 98'th percentile.</S>
    <S sid="171" ssid="24">Our technique for finding statistical significance is more strenuous than most: we assume that since all test sentences were parsed with the same training data, all results of a single run are correlated.</S>
    <S sid="172" ssid="25">Thus we compare paired differences of entire runs, rather than of sentences or constituents.</S>
    <S sid="173" ssid="26">This makes it harder to achieve statistical significance.</S>
    <S sid="174" ssid="27">Notice also the minimum and maximum columns of the &amp;quot;DOP-P&amp;S&amp;quot; lines, constructed by finding for each of the paired runs the difference between the DOP and the Pereira and Schabes algorithms.</S>
    <S sid="175" ssid="28">Notice that the minimum is usually negative, and the maximum is usually positive, meaning that on some tests DOP did worse than Pereira and Schabes and on some it did better.</S>
    <S sid="176" ssid="29">It is important to run multiple tests, especially with small test sets like these, in order to avoid misleading results.</S>
    <S sid="177" ssid="30">In this section, we examine the empirical runtime of our algorithm, and analyze Bod's.</S>
    <S sid="178" ssid="31">We also note that Bod's algorithm will probably be particularly inefficient on longer sentences.</S>
    <S sid="179" ssid="32">It takes about 6 seconds per sentence to run our algorithm on an HP 9000/715, versus 3.5 hours to run Bod's algorithm on a Sparc 2 (Bod, 1995b).</S>
    <S sid="180" ssid="33">Factoring in that the HP is roughly four times faster than the Sparc, the new algorithm is about 500 times faster.</S>
    <S sid="181" ssid="34">Of course, some of this difference may be due to differences in implementation, so this estimate is fairly rough.</S>
    <S sid="182" ssid="35">Furthermore, we believe Bod's analysis of his parsing algorithm is flawed.</S>
    <S sid="183" ssid="36">Letting G represent grammar size, and &#8364; represent maximum estimation error, Bod correctly analyzes his runtime as O(Gn3E-2).</S>
    <S sid="184" ssid="37">However, Bod then neglects analysis of this &#8364; -2 term, assuming that it is constant.</S>
    <S sid="185" ssid="38">Thus he concludes that his algorithm runs in polynomial time.</S>
    <S sid="186" ssid="39">However, for his algorithm to have some reasonable chance of finding the most probable parse, the number of times he must sample his data is at least inversely proportional to the conditional probability of that parse.</S>
    <S sid="187" ssid="40">For instance, if the maximum probability parse had probability 1/50, then he would need to sample at least 50 times to be reasonably sure of finding that parse.</S>
    <S sid="188" ssid="41">Now, we note that the conditional probability of the most probable parse tree will in general decline exponentially with sentence length.</S>
    <S sid="189" ssid="42">We assume that the number of ambiguities in a sentence will increase linearly with sentence length; if a five word sentence has on average one ambiguity, then a ten word sentence will have two, etc.</S>
    <S sid="190" ssid="43">A linear increase in ambiguity will lead to an exponential decrease in probability of the most probable parse.</S>
    <S sid="191" ssid="44">Since the probability of the most probable parse decreases exponentially in sentence length, the number of random samples needed to find this most probable parse increases exponentially in sentence length.</S>
    <S sid="192" ssid="45">Thus, when using the Monte Carlo algorithm, one is left with the uncomfortable choice of exponentially decreasing the probability of finding the most probable parse, or exponentially increasing the runtime.</S>
    <S sid="193" ssid="46">We admit that this is a somewhat informal argument.</S>
    <S sid="194" ssid="47">Still, the Monte Carlo algorithm has never been tested on sentences longer than those in the ATIS corpus; there is good reason to believe the algorithm will not work as well on longer sentences.</S>
    <S sid="195" ssid="48">Note that our algorithm has true runtime 0(Tn3), as shown previously.</S>
    <S sid="196" ssid="49">In the DOP model, a sentence cannot be given an exactly correct parse unless all productions in the correct parse occur in the training set.</S>
    <S sid="197" ssid="50">Thus, we can get an upper bound on performance by examining the test corpus and finding which parse trees could not be generated using only productions in the training corpus.</S>
    <S sid="198" ssid="51">Unfortunately, while Bod provided us with his data, he did not specify which sentences were test and which were training.</S>
    <S sid="199" ssid="52">We can however find an upper bound on average case performance, as well as an upper bound on the probability that any particular level of performance could be achieved.</S>
    <S sid="200" ssid="53">Bod randomly split his corpus into test and training.</S>
    <S sid="201" ssid="54">According to his thesis (Bod, 1995a, page 64), only one of his 75 test sentences had a correct parse which could not be generated from the training data.</S>
    <S sid="202" ssid="55">This turns out to be very surprising.</S>
    <S sid="203" ssid="56">An analysis of Bod's data shows that at least some of the difference in performance between his results and ours must be due to an extraordinarily fortuitous choice of test data.</S>
    <S sid="204" ssid="57">It would be very interesting to see how our algorithm performed on Bod's split into test and training, but he has not provided us with this split.</S>
    <S sid="205" ssid="58">Bod did examine versions of DOP that smoothed, allowing productions which did not occur in the training set; however his reference to coverage is with respect to a version which does no smoothing.</S>
    <S sid="206" ssid="59">In order to perform our analysis, we must determine certain details of Bod's parser which affect the probability of having most sentences correctly parsable.</S>
    <S sid="207" ssid="60">When using a chart parser, as Bod did, three problematic cases must be handled: &#8364; productions, unary productions, and n-ary (n&gt; 2) productions.</S>
    <S sid="208" ssid="61">The first two kinds of productions can be handled with a probabilistic chart parser, but large and difficult matrix manipulations are required (Stolcke, 1993); these manipulations would be especially difficult given the size of Bod's grammar.</S>
    <S sid="209" ssid="62">Examining Bod's data, we find he removed &#8364; productions.</S>
    <S sid="210" ssid="63">We also assume that Bod made the same choice we did and eliminated unary productions, given the difficulty of correctly parsing them.</S>
    <S sid="211" ssid="64">Bod himself does not know which technique he used for n-ary productions, since the chart parser he used was written by a third party (Bod, personal communication).</S>
    <S sid="212" ssid="65">The n-ary productions can be parsed in a straightforward manner, by converting them to binary branching form; however, there are at least three different ways to convert them, as illustrated in Table 3.</S>
    <S sid="213" ssid="66">In method &amp;quot;Correct&amp;quot;, the nary branching productions are converted in such a way that no overgeneration is introduced.</S>
    <S sid="214" ssid="67">A set of special non-terminals is added, one for each partial right hand side.</S>
    <S sid="215" ssid="68">In method &amp;quot;Continued&amp;quot;, a single new non-terminal is introduced for each original non-terminal.</S>
    <S sid="216" ssid="69">Because these non-terminals occur in multiple contexts, some overgeneration is introduced.</S>
    <S sid="217" ssid="70">However, this overgeneration is constrained, so that elements that tend to occur only at the beginning, middle, or end of the right hand side of a production cannot occur somewhere else.</S>
    <S sid="218" ssid="71">If the &amp;quot;Simple&amp;quot; method is used, then no new nonterminals are introduced; using this method, it is not possible to recover the n-ary branching structure from the resulting parse tree, and significant overgeneration occurs.</S>
    <S sid="219" ssid="72">Table 4 shows the undergeneration probabilities for each of these possible techniques for handling unary productions and n-ary productions.3 The first number in each column is the probability that a sentence in the training data will have a production that occurs nowhere else.</S>
    <S sid="220" ssid="73">The second number is the probability that a test set of 75 sentences drawn from this database will have one ungeneratable sentence: 75/974(1 &#8212; p).4 The table is arranged from least generous to most generous: in the upper left hand corner is a technique Bod might reasonably have used; in that case, the probability of getting the test set he described is less than one in a million.</S>
    <S sid="221" ssid="74">In the perl script for analyzing Bod's data is available by anonymous FTP from ftp://ftp.das.harvard.eduipub/goodman/analyze.perl 4Actually, this is a slight overestimate for a few reasons, including the fact that the 75 sentences are drawn without replacement.</S>
    <S sid="222" ssid="75">Also, consider a sentence with a production that occurs only in one other sentence in the corpus; there is some probability that both sentences will end up in the test data, causing both to be ungeneratable. lower right corner we give Bod the absolute maximum benefit of the doubt: we assume he used a parser capable of parsing unary branching productions, that he used a very overgenerating grammar, and that he used a loose definition of &amp;quot;Exact Match.&amp;quot; Even in this case, there is only about a 1.5% chance of getting the test set Bod describes.</S>
  </SECTION>
  <SECTION title="Conclusion" number="3">
    <S sid="223" ssid="1">We have given efficient techniques for parsing the DO? model.</S>
    <S sid="224" ssid="2">These results are significant since the DOP model has perhaps the best reported parsing accuracy; previously the full DOP model had not been replicated due to the difficulty and computational complexity of the existing algorithms.</S>
    <S sid="225" ssid="3">We have also shown that previous results were partially due to an unlikely choice of test data, and partially due to the heavy cleaning of the data, which reduced the difficulty of the task.</S>
    <S sid="226" ssid="4">Of course, this research raises as many questions as it answers.</S>
    <S sid="227" ssid="5">Were previous results due only to the choice of test data, or are the differences in implementation partly responsible?</S>
    <S sid="228" ssid="6">In that case, there is significant future work required to understand which differences account for Bod's exceptional performance.</S>
    <S sid="229" ssid="7">This will be complicated by the fact that sufficient details of Bod's implementation are not available.</S>
    <S sid="230" ssid="8">This research also shows the importance of testing on more than one small test set, as well as the importance of not making cross-corpus comparisons; if a new corpus is required, then previous algorithms should be duplicated for comparison.</S>
  </SECTION>
</PAPER>
