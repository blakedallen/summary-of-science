<PAPER>
  <S sid="0">Retrieving Collocations From Text: Xtract</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Natural languages are full of collocations, recurrent combinations of words that co-occur more often than expected by chance and that correspond to arbitrary word usages.</S>
    <S sid="2" ssid="2">Recent work in lexicography indicates that collocations are pervasive in English; apparently, they are common in all types of writing, including both technical and nontechnical genres.</S>
    <S sid="3" ssid="3">Several approaches have been proposed to retrieve various types of collocations from the analysis of large samples of textual data.</S>
    <S sid="4" ssid="4">These techniques automatically produce large numbers of collocations along with statistical figures intended to reflect the relevance of the associations.</S>
    <S sid="5" ssid="5">However, none of these techniques provides functional information along with the collocation.</S>
    <S sid="6" ssid="6">Also, the results produced often contained improper word associations reflecting some spurious aspect of the training corpus that did not stand for true collocations.</S>
    <S sid="7" ssid="7">In this paper, we describe a set of techniques based on statistical methods for retrieving and identifying collocations from large textual corpora.</S>
    <S sid="8" ssid="8">These techniques produce a wide range of collocations and are based on some original filtering methods that allow the production of richer and higher-precision output.</S>
    <S sid="9" ssid="9">These techniques have been implemented and resulted in a tool, techniques are described and some results are presented on a 10 corpus of stock market news reports.</S>
    <S sid="10" ssid="10">A lexicographic evaluation of a retrieval tool has been made, and the estimated precision of 80%.</S>
  </ABSTRACT>
  <SECTION title="" number="1">
    <S sid="11" ssid="1">Natural languages are full of collocations, recurrent combinations of words that co-occur more often than expected by chance and that correspond to arbitrary word usages.</S>
    <S sid="12" ssid="2">Recent work in lexicography indicates that collocations are pervasive in English; apparently, they are common in all types of writing, including both technical and nontechnical genres.</S>
    <S sid="13" ssid="3">Several approaches have been proposed to retrieve various types of collocations from the analysis of large samples of textual data.</S>
    <S sid="14" ssid="4">These techniques automatically produce large numbers of collocations along with statistical figures intended to reflect the relevance of the associations.</S>
    <S sid="15" ssid="5">However, none of these techniques provides functional information along with the collocation.</S>
    <S sid="16" ssid="6">Also, the results produced often contained improper word associations reflecting some spurious aspect of the training corpus that did not stand for true collocations.</S>
    <S sid="17" ssid="7">In this paper, we describe a set of techniques based on statistical methods for retrieving and identifying collocations from large textual corpora.</S>
    <S sid="18" ssid="8">These techniques produce a wide range of collocations and are based on some original filtering methods that allow the production of richer and higher-precision output.</S>
    <S sid="19" ssid="9">These techniques have been implemented and resulted in a lexicographic tool, Xtract.</S>
    <S sid="20" ssid="10">The techniques are described and some results are presented on a 10 million&#8212;word corpus of stock market news reports.</S>
    <S sid="21" ssid="11">A lexicographic evaluation of Xtract as a collocation retrieval tool has been made, and the estimated precision of Xtract is 80%.</S>
  </SECTION>
  <SECTION title="1." number="2">
    <S sid="22" ssid="1">Consider the following sentences: voir la porte to see the door die Tar sehen to see the door vedere la porta to see the door ver la puerta to see the door lcapiyi gormek to see the door enfoncer la porte * to push the door through die Tiir aufbrechen * to break the door sfondare la porta * to hit/demolish the door tumbar la puerta * to fall the door kapiyi kirmak * to break the door The above sentences contain expressions that are difficult to handle for nonspecialists.</S>
    <S sid="23" ssid="2">For example, among the eight different expressions referring to the famous Wall Street index, only those used in sentences 1-4 are correct.</S>
    <S sid="24" ssid="3">The expressions used in the starred sentences 5-8 are all incorrect.</S>
    <S sid="25" ssid="4">The rules violated in sentences 5-8 are neither rules of syntax nor of semantics but purely lexical rules.</S>
    <S sid="26" ssid="5">The word combinations used in sentences 5-8 are invalid simply because they do not exist; similarly, the ones used in sentences 1-4 are correct because they exist.</S>
    <S sid="27" ssid="6">Expressions such as these are called collocations.</S>
    <S sid="28" ssid="7">Collocations vary tremendously in the number of words involved, in the syntactic categories of the words, in the syntactic relations between the words, and in how rigidly the individual words are used together.</S>
    <S sid="29" ssid="8">For example, in some cases, the words of a collocation must be adjacent, as in sentences 1-5 above, while in others they can be separated by a varying number of other words.</S>
    <S sid="30" ssid="9">Unfortunately, with few exceptions (e.g., Benson, Benson, and Ilson 1986a) collocations are generally unavailable in compiled form.</S>
    <S sid="31" ssid="10">This creates a problem for persons not familiar with the sublanguagel as well as for several machine applications such as language generation.</S>
    <S sid="32" ssid="11">In this paper we describe a set of techniques for automatically retrieving such collocations from naturally occurring textual corpora.</S>
    <S sid="33" ssid="12">These techniques are based on statistical methods; they have been implemented in a tool, Xtract, which is able to retrieve a wide range of collocations with high performance.</S>
    <S sid="34" ssid="13">Preliminary results obtained with parts of Xtract have been described in the past (e.g., Smadja and McKeown 1990); this paper gives a complete description of the system and the results obtained.</S>
    <S sid="35" ssid="14">Xtract now works in three stages.</S>
    <S sid="36" ssid="15">In the first stage, pairwise lexical relations are retrieved using only statistical information.</S>
    <S sid="37" ssid="16">This stage is comparable to Church and Hanks (1989) in that it evaluates a certain word association between pairs of words.</S>
    <S sid="38" ssid="17">As in Church and Hanks (1989), the words can appear in any order and they can be separated by an arbitrary number of other words.</S>
    <S sid="39" ssid="18">However, the statistics we use provide more information and allow us to have more precision in our output.</S>
    <S sid="40" ssid="19">The output of this first stage is then passed in parallel to the next two stages.</S>
    <S sid="41" ssid="20">In the second stage, multiple-word combinations and complex expressions are identified.</S>
    <S sid="42" ssid="21">This stage produces output comparable to that of Choueka, Klein, and Neuwitz (1983); however the techniques we use are simpler and only produce relevant data.</S>
    <S sid="43" ssid="22">Finally, by combining parsing and statistical techniques the third stage labels and filters collocations retrieved at stage one.</S>
    <S sid="44" ssid="23">The third stage has been evaluated to raise the precision of Xtract from 40% to 80% with a recall of 94%.</S>
    <S sid="45" ssid="24">Section 2 is an introductory section on collocational knowledge, Section 3 describes the type of collocations that are retrieved by Xtract, and Section 4 briefly surveys related efforts and contrasts our work to them.</S>
    <S sid="46" ssid="25">The three stages of Xtract are then introduced in Section 5 and described respectively in Sections 6, 7, and 8.</S>
    <S sid="47" ssid="26">Some results obtained by running Xtract on several corpora are listed and discussed in Section 9.</S>
    <S sid="48" ssid="27">Qualitative and quantitative evaluations of our methods and of our results are discussed in Sections 10 and 11.</S>
    <S sid="49" ssid="28">Finally, several possible applications and tasks for Xtract are discussed in Section 12.</S>
  </SECTION>
  <SECTION title="2." number="3">
    <S sid="50" ssid="1">There has been a great deal of theoretical and applied work related to collocations that has resulted in different characterizations (e.g., Allerton 1984; Cruse 1986; Menuk 1981).</S>
    <S sid="51" ssid="2">Depending on their interests and points of view, researchers have focused on different aspects of collocations.</S>
    <S sid="52" ssid="3">One of the most comprehensive definition that has been used can be found in the lexicographic work of Benson and his colleagues (Benson 1990).</S>
    <S sid="53" ssid="4">The definition is the following:</S>
  </SECTION>
  <SECTION title="Definition" number="4">
    <S sid="54" ssid="1">A collocation is an arbitrary and recurrent word combination (Benson 1990).</S>
    <S sid="55" ssid="2">This definition, however, does not cover some aspects and properties of collocations that have consequences for a number of machine applications.</S>
    <S sid="56" ssid="3">For example, it has been shown that collocations are difficult to translate across languages&#8212;this fact obviously has a direct application for machine translation.</S>
    <S sid="57" ssid="4">Many properties of collocations have been identified in the past; however, the tendency was to focus on a restricted type of collocation.</S>
    <S sid="58" ssid="5">In this section, we present four properties of collocations that we have identified and discuss their relevance to computational linguistics.</S>
    <S sid="59" ssid="6">Collocations are difficult to produce for second language learners (Nakhimovsky and Leed 1979).</S>
    <S sid="60" ssid="7">In most cases, the learner cannot simply translate word-for-word what s/he would say in her/his native language.</S>
    <S sid="61" ssid="8">As we can see in Table 1, the word-forword translation of &amp;quot;to open the door&amp;quot; works well in both directions in all five languages.</S>
    <S sid="62" ssid="9">In contrast, translating word-for-word the expression: &amp;quot;to break down/force the door&amp;quot; is a poor strategy in both directions in all five languages.</S>
    <S sid="63" ssid="10">The co-occurrence of &amp;quot;door&amp;quot; and &amp;quot;open&amp;quot; is an open or free combination, whereas the combination &amp;quot;door&amp;quot; and &amp;quot;break down&amp;quot; is a collocation.</S>
    <S sid="64" ssid="11">Learners of English would not produce &amp;quot;to break down a door&amp;quot; whether their first language is French, German, Italian, Spanish, or Turkish, if they were not aware of the construct.</S>
    <S sid="65" ssid="12">Figure 1 illustrates disagreements between British English and American English.</S>
    <S sid="66" ssid="13">Here the problem is even finer than in Table 1 since the disagreement is not across two different languages, but across dialects of English.</S>
    <S sid="67" ssid="14">In each of the sentences given in this figure, there is a different word choice for the American (left side) and the British English (right side).</S>
    <S sid="68" ssid="15">The word choices do not correspond to any syntactic or semantic variation of English but rather to different word usages in both dialects of English.</S>
    <S sid="69" ssid="16">Translating from one language to another requires more than a good knowledge of the syntactic structure and the semantic representation.</S>
    <S sid="70" ssid="17">Because collocations are arbitrary, they must be readily available in both languages for effective machine translation.</S>
    <S sid="71" ssid="18">In addition to nontechnical collocations such as the ones presented before, domainspecific collocations are numerous.</S>
    <S sid="72" ssid="19">Technical jargons are often totally unintelligible for the layman.</S>
    <S sid="73" ssid="20">They contain a large number of technical terms.</S>
    <S sid="74" ssid="21">In addition, familiar words seem to be used differently.</S>
    <S sid="75" ssid="22">In the domain of sailing (Dellenbaugh and Dellenbaugh 1990), for example, some words are unknown to the nonfamiliar reader: rigg, jib, and leeward are totally meaningless to the layman.</S>
    <S sid="76" ssid="23">Some other combinations apparently do not contain any technical words, but these words take on a totally different meaning in the domain.</S>
    <S sid="77" ssid="24">For example, a dry suit is not a suit that is dry but a special type of suit used by sailors to stay dry in difficult weather conditions.</S>
    <S sid="78" ssid="25">Similarly a wet suit is a special kind of suit used for several marine activities.</S>
    <S sid="79" ssid="26">Native speakers are often unaware of the arbitrariness of collocations in nontechnical core English; however, this arbitrariness becomes obvious to the native speaker in specific sublanguages.</S>
    <S sid="80" ssid="27">Some examples of predicative collocations.</S>
    <S sid="81" ssid="28">Linguistically mastering a domain such as the domain of sailing thus requires more than a glossary, it requires knowledge of domain-dependent collocations.</S>
    <S sid="82" ssid="29">The recurrent property simply means that these combinations are not exceptions, but rather that they are very often repeated in a given context.</S>
    <S sid="83" ssid="30">Word combinations such as &amp;quot;to make a decision, to hit a record, to perform an operation&amp;quot; are typical of the language, and collocations such as &amp;quot;to buy short,&amp;quot; &amp;quot;to ease the jib&amp;quot; are characteristic of specific domains.</S>
    <S sid="84" ssid="31">Both types are repeatedly used in specific contexts.</S>
    <S sid="85" ssid="32">By cohesive2 clusters, we mean that the presence of one or several words of the collocations often implies or suggests the rest of the collocation.</S>
    <S sid="86" ssid="33">This is the property mostly used by lexicographers when compiling collocations (Cowie 1981; Benson 1989a).</S>
    <S sid="87" ssid="34">Lexicographers use other people's linguistic judgment for deciding what is and what is not a collocation.</S>
    <S sid="88" ssid="35">They give questionnaires to people such as the one given in Figure 2.</S>
    <S sid="89" ssid="36">This questionnaire contains sentences used by Benson for compiling collocational knowledge for the BBI (Benson 1989b).</S>
    <S sid="90" ssid="37">Each sentence contains an empty slot that can easily be filled in by native speakers.</S>
    <S sid="91" ssid="38">In contrast, second language speakers would not find the missing words automatically but would consider a long list of words having the appropriate semantic and syntactic features such as the ones given in the second column.</S>
    <S sid="92" ssid="39">As a consequence, collocations have particular statistical distributions (e.g., Halliday 1966; Cruse 1986).</S>
    <S sid="93" ssid="40">This means that, for example, the probability that any two adjacent words in a sample will be &amp;quot;red herring&amp;quot; is considerably larger than the probability of &amp;quot;red&amp;quot; times the probability of &amp;quot;herring.&amp;quot; The words cannot be considered as independent variables.</S>
    <S sid="94" ssid="41">We take advantage of this fact to develop a set of statistical techniques for retrieving and identifying collocations from large textual corpora.</S>
  </SECTION>
  <SECTION title="3." number="5">
    <S sid="95" ssid="1">Collocations come in a large variety of forms.</S>
    <S sid="96" ssid="2">The number of words involved as well as the way they are involved can vary a great deal.</S>
    <S sid="97" ssid="3">Some collocations are very rigid, whereas others are very flexible.</S>
    <S sid="98" ssid="4">For example, a collocation such as the one linking &amp;quot;to make&amp;quot; and &amp;quot;decision&amp;quot; can appear as &amp;quot;to make a decision,&amp;quot; &amp;quot;decisions to be made,&amp;quot; &amp;quot;made an important decision,&amp;quot; etc.</S>
    <S sid="99" ssid="5">In contrast, a collocation such as &amp;quot;The New York Stock Exchange&amp;quot; can only appear under one form; it is a very rigid collocation, a fixed expression.</S>
    <S sid="100" ssid="6">We have identified three types of collocations: rigid noun phrases, predicative relations, and phrasal templates.</S>
    <S sid="101" ssid="7">We discuss the three types in turn, and give some examples of collocations.</S>
    <S sid="102" ssid="8">A predicative relation consists of two words repeatedly used together in a similar syntactic relation.</S>
    <S sid="103" ssid="9">These lexical relations are the most flexible type of collocation.</S>
    <S sid="104" ssid="10">They are hard to identify since they often correspond to interrupted word sequences in the corpus.</S>
    <S sid="105" ssid="11">For example, a noun and a verb will form a predicative relation if they are repeatedly used together with the noun as the object of the verb.</S>
    <S sid="106" ssid="12">&amp;quot;Make-decision&amp;quot; is a good example of a predicative relation.</S>
    <S sid="107" ssid="13">Similarly, an adjective repeatedly modifying a given noun such as &amp;quot;hostile-takeover&amp;quot; also forms a predicative relation.</S>
    <S sid="108" ssid="14">Examples of automatically extracted predicative relations are given in Figure 3.3 This class of collocations is related to Menuk's lexical functions (Mel'aik 1981), and Benson's Ltype relations (Benson, Benson, and Ilson 1986b).</S>
    <S sid="109" ssid="15">Rigid noun phrases involve uninterrupted sequences of words such as &amp;quot;stock market,&amp;quot; &amp;quot;foreign exchange,&amp;quot; &amp;quot;New York Stock Exchange,&amp;quot; &amp;quot;The Dow Jones average of 30 industrials.&amp;quot; They can include nouns and adjectives as well as closed class words, and are similar to the type of collocations retrieved by Choueka (1988) and Amsler (1989).</S>
    <S sid="110" ssid="16">They are the most rigid type of collocation.</S>
    <S sid="111" ssid="17">Examples of rigid noun phrases are:4 &amp;quot;The NYSE's composite index of all its listed common stocks,&amp;quot; &amp;quot;The NASDAQ composite index for the over the counter market,&amp;quot; &amp;quot;leveraged buyout,&amp;quot; &amp;quot;the gross national product,&amp;quot; &amp;quot;White House spokesman Marlin Fitzwater.&amp;quot; In general, rigid noun phrases cannot be broken into smaller fragments without losing their meaning; they are lexical units in and of themselves.</S>
    <S sid="112" ssid="18">Moreover, they often refer to important concepts in a domain, and several rigid noun phrases can be used to express the same concept.</S>
    <S sid="113" ssid="19">In the New York Stock Exchange domain, for example, &amp;quot;The Dow industrials,&amp;quot; &amp;quot;The Dow Jones average of 30 industrial stocks,&amp;quot; &amp;quot;the Dow Jones industrial average,&amp;quot; and &amp;quot;The Dow Jones industrials&amp;quot; represent several ways to express a single concept.</S>
    <S sid="114" ssid="20">As we have seen before, these rigid noun phrases do not seem to follow any simple construction rule, as, for example; the examples given in sentences 6-8 at the beginning of the paper are all incorrect.</S>
    <S sid="115" ssid="21">Phrasal templates consist of idiomatic phrases containing one, several, or no empty slots.</S>
    <S sid="116" ssid="22">They are phrase-long collocations.</S>
    <S sid="117" ssid="23">Figure 4 lists some examples of phrasal templates in the stock market domain.</S>
    <S sid="118" ssid="24">In the figure, the empty slots must be filled in by a number (indicated by *NUMBER* in the figure).</S>
    <S sid="119" ssid="25">More generally, phrasal templates specify the parts of speech of the words that can fill the empty slots.</S>
    <S sid="120" ssid="26">Phrasal templates are quite representative of a given domain and are very often repeated in a rigid way in a given sublanguage.</S>
    <S sid="121" ssid="27">In the domain of weather reports, for example, the sentence &amp;quot;Temperatures indicate previous day's high and overnight low to 8 a.m.&amp;quot; is actually repeated before each weather report.'</S>
    <S sid="122" ssid="28">Unlike rigid noun phrases and predicative relations, phrasal templates are specifically useful for language generation.</S>
    <S sid="123" ssid="29">Because of their slightly idiosyncratic structure, generating them from single words is often a very difficult task for a language generator.</S>
    <S sid="124" ssid="30">As pointed out by Kukich (1983), in general, their usage gives an impression of fluency that could not be equaled with compositional generation alone.</S>
  </SECTION>
  <SECTION title="4." number="6">
    <S sid="125" ssid="1">There has been a recent surge of research interest in corpus-based computational linguistics methods; that is, the study and elaboration of techniques using large real text as a basis.</S>
    <S sid="126" ssid="2">Such techniques have various applications.</S>
    <S sid="127" ssid="3">Speech recognition (Bahl, Jelinek, and Mercer 1983) and text compression (e.g., Bell, Witten, and Cleary 1989; Guazzo 1980) have been of long-standing interest, and some new applications are currently being investigated, such as machine translation (Brown et al. 1988), spelling correction (Mays, Damerau, and Mercer 1990; Church and Gale 1990), parsing (Debili 1982; Hindle and Rooth 1990).</S>
    <S sid="128" ssid="4">As pointed out by Bell, Witten, and Cleary (1989), these applications fall under two research paradigms: statistical approaches and lexical approaches.</S>
    <S sid="129" ssid="5">In the statistical approach, language is modeled as a stochastic process and the corpus is used to estimate probabilities.</S>
    <S sid="130" ssid="6">In this approach, a collocation is simply considered as a sequence of words (or n-gram) among millions of other possible sequences.</S>
    <S sid="131" ssid="7">In contrast, in the lexical approach, a collocation is an element of a dictionary among a few thousand other lexical items.</S>
    <S sid="132" ssid="8">Collocations in the lexicographic meaning are only dealt with in the lexical approach.</S>
    <S sid="133" ssid="9">Aside from the work we present in this paper, most of the work carried out within the lexical approach has been done in computer-assisted lexicography by Choueka, Klein, and Neuwitz (1983) and Church and his colleagues (Church and Hanks 1989).</S>
    <S sid="134" ssid="10">Both works attempted to automatically acquire true collocations from corpora.</S>
    <S sid="135" ssid="11">Our work builds on Choueka's, and has been developed contemporarily to Church's.</S>
    <S sid="136" ssid="12">Choueka, Klein, and Neuwitz (1983) proposed algorithms to automatically retrieve idiomatic and collocational expressions.</S>
    <S sid="137" ssid="13">A collocation, as defined by Choueka, is a sequence of adjacent words that frequently appear together.</S>
    <S sid="138" ssid="14">In theory the sequences can be of any length, but in actuality, they contain two to six words.</S>
    <S sid="139" ssid="15">In Choueka (1988), experiments performed on an 11 million&#8212;word corpus taken from the New York Times archives are reported.</S>
    <S sid="140" ssid="16">Thousands of commonly used expressions such as &amp;quot;fried chicken,&amp;quot; &amp;quot;casual sex,&amp;quot; &amp;quot;chop suey,&amp;quot; &amp;quot;home run,&amp;quot; and &amp;quot;Magic Johnson&amp;quot; were retrieved.</S>
    <S sid="141" ssid="17">Choueka's methodology for handling large corpora can be considered as a first step toward computer-aided lexicography.</S>
    <S sid="142" ssid="18">The work, however, has some limitations.</S>
    <S sid="143" ssid="19">First, by definition, only uninterrupted sequences of words are retrieved; more flexible collocations such as &amp;quot;make-decision,&amp;quot; in which the two words can be separated by an arbitrary number of words, are not dealt with.</S>
    <S sid="144" ssid="20">Second, these techniques simply analyze the collocations according to their observed frequency in the corpus; this makes the results too dependent on the size of the corpus.</S>
    <S sid="145" ssid="21">Finally, at a more general level, although disambiguation was originally considered as a performance task, the collocations retrieved have not been used for any specific computational task.</S>
    <S sid="146" ssid="22">Church and Hanks (1989) describe a different set of techniques to retrieve collocations.</S>
    <S sid="147" ssid="23">A collocation as defined in their work is a pair of correlated words.</S>
    <S sid="148" ssid="24">That is, a collocation is a pair of words that appear together more often than expected.</S>
    <S sid="149" ssid="25">Church et al. (1991) improve over Choueka's work as they retrieve interrupted as well as uninterrupted sequences of words.</S>
    <S sid="150" ssid="26">Also, these collocations have been used by an automatic parser in order to resolve attachment ambiguities (Hindle and Rooth 1990).</S>
    <S sid="151" ssid="27">They use the notion of mutual information as defined in information theory (Shannon 1948; Fano 1961) in a manner similar to what has been used in speech recognition (e.g., Ephraim and Rabiner 1990), or text compression (e.g., Bell, Witten, and Cleary 1989), to evaluate the correlation of common appearances of pairs of words.</S>
    <S sid="152" ssid="28">Their work, however, has some limitations too.</S>
    <S sid="153" ssid="29">First, by definition, it can only retrieve collocations of length two.</S>
    <S sid="154" ssid="30">This limitation is intrinsic to the technique used since mutual information scores are defined for two items.</S>
    <S sid="155" ssid="31">The second limitation is that many collocations identified in Church and Hanks (1989) do not really identify true collocations, but simply pairs of words that frequently appear together such as the pairs &amp;quot;doctor-nurse,&amp;quot; &amp;quot;doctor-bill,&amp;quot; &amp;quot;doctor-honorary,&amp;quot; &amp;quot;doctors-dentists,&amp;quot; &amp;quot;doctors-hospitals,&amp;quot; etc.</S>
    <S sid="156" ssid="32">These co-occurrences are mostly due to semantic reasons.</S>
    <S sid="157" ssid="33">The two words are used in the same context because they are of related meanings; they are not part of a single collocational construct.</S>
    <S sid="158" ssid="34">The work we describe in the rest of this paper is along the same lines of research.</S>
    <S sid="159" ssid="35">It builds on Choueka's work and attempts to remedy the problems identified above.</S>
    <S sid="160" ssid="36">The techniques we describe retrieve the three types of collocations discussed in Section 2, and they have been implemented in a tool, Xtract.</S>
    <S sid="161" ssid="37">Xtract retrieves interrupted as well as uninterrupted sequences of words and deals with collocations of arbitrary length (1 to 30 in actuality).</S>
    <S sid="162" ssid="38">The following four sections describe and discuss the techniques used for Xtract.</S>
  </SECTION>
  <SECTION title="5." number="7">
    <S sid="163" ssid="1">Xtract consists of a set of tools to locate words in context and make statistical observation to identify collocations.</S>
    <S sid="164" ssid="2">In the upgraded version we describe here, Xtract has been extended and refined.</S>
    <S sid="165" ssid="3">More information is computed and an effort has been made to extract more functional information.</S>
    <S sid="166" ssid="4">Xtract now works in three stages.</S>
    <S sid="167" ssid="5">The three-stage analysis is described in Sections 6, 7, and 8.</S>
    <S sid="168" ssid="6">In the first stage, described in Section 6, Xtract uses straight statistical measures to retrieve from a corpus pairwise lexical relations whose common appearance within a single sentence are correlated.</S>
    <S sid="169" ssid="7">A pair (or bigram) is retrieved if its frequency of occurrence is above a certain threshold and if the words are used in relatively rigid ways.</S>
    <S sid="170" ssid="8">The output of stage one is then passed to both the second and third stage in parallel.</S>
    <S sid="171" ssid="9">In the second stage, described in Section 7, Xtract uses the output bigrams to produce collocations involving more than two words (or n-grams).</S>
    <S sid="172" ssid="10">It analyzes all sentences containing the bigram and the distribution of words and parts of speech for each position around the pair.</S>
    <S sid="173" ssid="11">It retains words (or parts of speech) occupying a position with probability greater than a given threshold.</S>
    <S sid="174" ssid="12">For example, the bigram &amp;quot;average-industrial&amp;quot; produces the ngram &amp;quot;the Dow Jones industrial average,&amp;quot; since the words are always used within rigid noun phrases in the training corpus.</S>
    <S sid="175" ssid="13">In the third stage, described in Section 8, Xtract adds syntactic information to collocations retrieved at the first stage and filters out inappropriate ones.</S>
    <S sid="176" ssid="14">For example, if a bigram involves a noun and a verb, this stage identifies it either as a subject-verb or as a verb-object collocation.</S>
    <S sid="177" ssid="15">If no such consistent relation is observed, then the collocation is rejected.</S>
  </SECTION>
  <SECTION title="6." number="8">
    <S sid="178" ssid="1">According to Cruse's definition (Cruse 1986), a syntagmatic lexical relation consists of a pair of words whose common appearances within a single phrase structure are correlated.</S>
    <S sid="179" ssid="2">In other words, those two words appear together within a single syntactic construct more often than expected by chance.</S>
    <S sid="180" ssid="3">The first stage of Xtract attempts to identify such pairwise lexical relations and produce statistical information on pairs of words involved together in the corpus.</S>
    <S sid="181" ssid="4">Ideally, in order to identify lexical relations in a corpus one would need to first parse it to verify that the words are used in a single phrase structure.</S>
    <S sid="182" ssid="5">However, in practice, free-style texts contain a great deal of nonstandard features over which automatic parsers would fail.'</S>
    <S sid="183" ssid="6">Fortunately, there is strong lexicographic evidence that most syntagmatic lexical relations relate words separated by at most five other words (Martin, Al, and Van Sterkenburg 1983).</S>
    <S sid="184" ssid="7">In other words, most of the lexical relations involving a word w can be retrieved by examining the neighborhood of w, wherever it occurs, within a span of five (-5 and +5 around w) words.'</S>
    <S sid="185" ssid="8">In the work presented here, we use this simplification and consider that two words co-occur if they are in a single sentence and if there are fewer than five words between them.</S>
    <S sid="186" ssid="9">In this first stage, we thus use only statistical methods to identify relevant pairs of words.</S>
    <S sid="187" ssid="10">These techniques are based on the assumptions that if two words are involved in a collocation then: These two assumptions are used to analyze the word distributions, and we base our filtering techniques on them.</S>
    <S sid="188" ssid="11">In this stage as well as in the two others, we often need part-of-speech information for several purposes.</S>
    <S sid="189" ssid="12">Stochastic part-of-speech taggers such as those in Church (1988) and Garside and Leech (1987) have been shown to reach 95-99% performance on free-style text.</S>
    <S sid="190" ssid="13">We preprocessed the corpus with a stochastic part-of-speech tagger developed at Bell Laboratories by Ken Church (Church 1988).9 In the rest of this section, we describe the algorithm used for the first stage of Xtract in some detail.</S>
    <S sid="191" ssid="14">We assume that the corpus is preprocessed by a part of speech tagger and we note w, a collocate of w if the two words appear in a common sentence within a distance of 5 words.</S>
    <S sid="192" ssid="15">Input: The tagged corpus, a given word w. Output: All the sentences containing w. Description: This actually encompasses the task of identifying sentence boundaries, and the task of selecting sentences containing w. The first task is not simple and is still an open problem.</S>
    <S sid="193" ssid="16">It is not enough to look for a period followed by a blank space as, for example, abbreviations and acronyms such as S.B.F., U.S.A., and A.T.M. often pose a problem.</S>
    <S sid="194" ssid="17">The basic algorithm for isolating sentences is described and implemented by a finite-state recognizer.</S>
    <S sid="195" ssid="18">Our implementation could easily be improved in many ways.</S>
    <S sid="196" ssid="19">For example, it performs poorly on acronyms and often considers them as end of sentences; giving it a list of currently used acronyms such as N.B.A., E.I.K., etc., would significantly improve its performance.</S>
    <S sid="197" ssid="20">Input: Output of Step 1.1, i.e., a set of tagged sentences containing w. Output: A list of words w, with frequency information on how w and w, co-occur.</S>
    <S sid="198" ssid="21">This includes the raw frequency as well as the breakdown into frequencies for each possible position.</S>
    <S sid="199" ssid="22">See Table 2 for example outputs.</S>
    <S sid="200" ssid="23">Description: For each input sentence containing w, we make a note of its collocates and store them along with their position relative to w, their part of speech, and their frequency of appearance.</S>
    <S sid="201" ssid="24">More precisely, for each prospective lexical relation, or for each potential collocate wi, we maintain a data structure containing this information.</S>
    <S sid="202" ssid="25">The data structure is shown in Figure 5.</S>
    <S sid="203" ssid="26">It contains freq&#8222; the frequency of appearance of w, with w so far in the corpus, PP, the part of speech of wi, and pij, (-5 &lt;j &lt; 5, j 0), the frequency of appearance of w, with w such that they are j words apart.</S>
    <S sid="204" ssid="27">The p;s represent the histogram of the frequency of appearances of w and w, in given positions.</S>
    <S sid="205" ssid="28">This histogram will be used in later stages.</S>
    <S sid="206" ssid="29">As an example, if sentence (9) is the current input to step 1.2 and w = takeover, then, the prospective lexical relations identified in sentence (9) are as shown in Table 3.</S>
    <S sid="207" ssid="30">In Table 3, distance is the distance between &amp;quot;takeover&amp;quot; and wi, and PP is the part of speech of w,.</S>
    <S sid="208" ssid="31">The closed class words are not considered at this stage and the other Data structure maintained at stage one by Xtract. words, such as &amp;quot;shareholders,&amp;quot; are rejected because they are more than five words away from &amp;quot;takeover.&amp;quot; For each of the above word pairs, we maintain the associated data structure as indicated in Figure 5.</S>
    <S sid="209" ssid="32">For takeover pill, for example, we would increment freqpin, and the p4 column in the histogram.</S>
    <S sid="210" ssid="33">Table 2 shows the output for the adjective collocates of the word &amp;quot;takeover.&amp;quot; Input: Output of Step 1.2, i.e., a list of words w, with information on how often and how w and wz co-occur.</S>
    <S sid="211" ssid="34">See Table 2 for an example input.</S>
    <S sid="212" ssid="35">Output: Significant word pairs, along with some statistical information describing how strongly the words are connected and how rigidly they are used together.</S>
    <S sid="213" ssid="36">A separate (but similar) statistical analysis is done for each syntactic category of collocates.</S>
    <S sid="214" ssid="37">See Table 4 for an example output.</S>
    <S sid="215" ssid="38">Description: At this step, the statistical distribution of the collocates of w is analyzed, and the interesting word pairs are automatically selected.</S>
    <S sid="216" ssid="39">If part of speech information is available, a separate analysis is made depending on the part of speech of the collocates.</S>
    <S sid="217" ssid="40">This balances the fact that verbs, adjectives, and nouns are simply not equally frequent.</S>
    <S sid="218" ssid="41">For each word w, we first analyze the distribution of the frequencies freq, of its collocates wi, and then compute its average frequency f and standard deviation a around f. We then replace freq, by its associated z-score k,. k, is called the strength of the word pair in Figure 4; it represents the number of standard deviation above the The collocates of &amp;quot;takeover&amp;quot; as retrieved from sentence (9). w w, distance PP takeover pill 4 N takeover make 2 V takeover attempt -1 N takeover expensive -3 J takeover allowing -5 V average of the frequency of the word pair w and w, and is defined as: k frech f a (la) Then, we analyze the distribution of the /Ifs and produce their average pi and variance U, around j3j.</S>
    <S sid="219" ssid="42">In Figure 4 spread represents U, on a scale of 1 to 100.</S>
    <S sid="220" ssid="43">1/, characterizes the shape of the pi, histogram.</S>
    <S sid="221" ssid="44">If U, is small, then the histogram will tend to be flat, which means that w, can be used equivalently in almost any position around w. In contrast, if U, is large, then the histogram will tend to have peaks, which means that w, can only be used in one (or several) specific position around w. LI, is defined by:</S>
  </SECTION>
  <SECTION title="10 (lb)" number="9">
    <S sid="222" ssid="1">These analyses are then used to sort out the retrieved data.</S>
    <S sid="223" ssid="2">First, using (1a), collocates with strength smaller than a given threshold 1(0 are eliminated.</S>
    <S sid="224" ssid="3">Then, using (1b), we filter out the collocates having a variance Li, smaller than a given threshold Uo.</S>
    <S sid="225" ssid="4">Finally, we keep the interesting collocates by pulling out the peaks of the 13'1 distributions.</S>
    <S sid="226" ssid="5">These peaks correspond to the js such that the z-score of p' is bigger than a given threshold 1c1.</S>
    <S sid="227" ssid="6">These thresholds have to be determined by the experimenter and are dependent on the use of the retrieved collocations.</S>
    <S sid="228" ssid="7">As described in Smadja (1991), for language generation we found that (lco, k1, Lio) = (1, I, 10) gave good results, but for other tasks different thresholds might be preferable.</S>
    <S sid="229" ssid="8">In general, the lower the threshold the more data are accepted, the higher the recall, and the lower the precision of the results.</S>
    <S sid="230" ssid="9">Section 10 describes an evaluation of the results produced with the above thresholds.</S>
    <S sid="231" ssid="10">More formally, a peak, or lexical relation containing w, at this point is defined as a tuple (wi, distance, strength, spread , j) verifying the following set of inequalities: Some example results are given in Table 4.</S>
    <S sid="232" ssid="11">As shown in Smadja (1991), the whole first stage of Xtract as described above can be performed in 0(S log S) time, in which S is the size of the corpus.</S>
    <S sid="233" ssid="12">The third step of counting frequencies and maintaining the data structure dominates the whole process and as pointed out by Ken Church (personal communication), it can be reduced to a sorting problem.</S>
    <S sid="234" ssid="13">The inequality set (C) is used to filter out irrelevant data, that is pairs of words supposedly not used consistently within a single syntactic structure.</S>
    <S sid="235" ssid="14">This section discusses the importance of each inequality in (C) on the filtering process. strength = freq &#8212; f &gt; ko (CO Condition (C1) helps eliminate the collocates that are not frequent enough.</S>
    <S sid="236" ssid="15">This condition specifies that the frequency of appearance of w, in the neighborhood of w must be at least one standard deviation above the average.</S>
    <S sid="237" ssid="16">In most statistical distributions, this thresholding eliminates the vast majority of the lexical relations.</S>
    <S sid="238" ssid="17">For example, for w = &amp;quot;takeover,&amp;quot; among the 3385 possible collocates only 167 were selected, which gives a proportion of 95% rejected.</S>
    <S sid="239" ssid="18">In the case of the standard normal distribution, this would reject some 68% of the cases.</S>
    <S sid="240" ssid="19">This indicates that the actual distribution of the collocates of &amp;quot;takeover&amp;quot; has a large kurtosis.'</S>
    <S sid="241" ssid="20">Among the eliminated collocates were &amp;quot;dormant, dilute, ex., defunct,&amp;quot; which obviously are not typical of a takeover.</S>
    <S sid="242" ssid="21">Although these rejected collocations might be useful for applications such as speech recognition, for example, we do not consider them any further here.</S>
    <S sid="243" ssid="22">We are looking for recurrent combinations and not casual ones.</S>
    <S sid="244" ssid="23">Condition (C2) requires that the histogram of the 10 relative frequencies of appearance of w, within five words of w (or pis) have at least one spike.</S>
    <S sid="245" ssid="24">If the histogram is flat, it will be rejected by this condition.</S>
    <S sid="246" ssid="25">For example, in Figure 5, the histogram associated with w2 would be rejected, whereas the one associated with wl or w, would be accepted.</S>
    <S sid="247" ssid="26">In Table 2, the histogram for &amp;quot;takeover-possible&amp;quot; is clearly accepted (there is a spike for 19_0, whereas the one for &amp;quot;takeover-federal&amp;quot; is rejected.</S>
    <S sid="248" ssid="27">The assumption here is that, if the two words are repeatedly used together within a single syntactic construct, then they will have a marked pattern of co-appearance, i.e., they will not appear in all the possible positions with an equal probability This actually eliminates pairs such as &amp;quot;telephone-television,&amp;quot; &amp;quot;bomb-soldier,&amp;quot; &amp;quot;trouble-problem,&amp;quot; &amp;quot;big-small,&amp;quot; and 10 The kurtosis of the distribution of the collocates probably depends on the word, and there is currently no agreement on the type of distribution that would describe them.</S>
    <S sid="249" ssid="28">&amp;quot;doctor-nurse&amp;quot; where the two words co-occur with no real structural consistency.</S>
    <S sid="250" ssid="29">The two words are often used together because they are associated with the same context rather than for pure structural reasons.</S>
    <S sid="251" ssid="30">Many collocations retrieved in Church and Hanks (1989) were of this type, as they retrieved doctors-dentists, doctors-nurses, doctorbills, doctors-hospitals, nurses-doctor, etc., which are not collocations in the sense defined above.</S>
    <S sid="252" ssid="31">Such collocations are not of interest for our purpose, although they could be useful for disambiguation or other semantic purposes.</S>
    <S sid="253" ssid="32">Condition (C2) filters out exactly this type of collocations. pi, ?pi + (ki x iff,) (c3) Condition (C3) pulls out the interesting relative positions of the two words.</S>
    <S sid="254" ssid="33">Conditions (C2) and (C1) eliminate rows in the output of Step 1.2.</S>
    <S sid="255" ssid="34">(See Figure 2).</S>
    <S sid="256" ssid="35">In contrast, Condition (C3) selects columns from the remaining rows.</S>
    <S sid="257" ssid="36">For each pair of words, one or several positions might be favored and thus result in several /9'1 selected.</S>
    <S sid="258" ssid="37">For example, the pair &amp;quot;expensive-takeover&amp;quot; produced two different peaks, one with only one word in between &amp;quot;expensive&amp;quot; and &amp;quot;takeover,&amp;quot; and the other with two words.</S>
    <S sid="259" ssid="38">Example sentences containing the two words in the two possible positions are: &amp;quot; The provision is aimed at making a hostile takeover prohibitively expensive by enabling Borg Warner's stockholders to buy the .</S>
    <S sid="260" ssid="39">.</S>
    <S sid="261" ssid="40">.</S>
    <S sid="262" ssid="41">&amp;quot; &amp;quot;The pill would make a takeover attempt more expensive by allowing the retailer's shareholders to buy more company stock .</S>
    <S sid="263" ssid="42">.</S>
    <S sid="264" ssid="43">.</S>
    <S sid="265" ssid="44">&amp;quot; Let us note that this filtering method is an original contribution of our work.</S>
    <S sid="266" ssid="45">Other works such as Church and Hanks (1989) simply focus on an evaluation of the correlation of appearance of a pair of words, which is roughly equivalent to condition (C1).</S>
    <S sid="267" ssid="46">(See next section).</S>
    <S sid="268" ssid="47">However, taking note of their pattern of appearance allows us to filter out more irrelevant collocations with (C2) and (C3).</S>
    <S sid="269" ssid="48">This is a very important point that will allow us to filter out many invalid collocations and also produce more functional information at stages 2 and 3.</S>
    <S sid="270" ssid="49">A graphical interpretation of the filtering method used for Xtract is given in Smadja (1991).</S>
    <S sid="271" ssid="50">7.</S>
    <S sid="272" ssid="51">Xtract Stage Two: From 2-Grams to N-Grams The role of the second stage of Xtract is twofold.</S>
    <S sid="273" ssid="52">It produces collocations involving more than two words, and it filters out some pairwise relations.</S>
    <S sid="274" ssid="53">Stage 2 is related to the work of Choueka (1988), and to some extent to what has been done in speech recognition (e.g., Bahl, Jelinek, and Mercer 1983; Merialdo 1987; Ephraim and Rabiner 1990).</S>
    <S sid="275" ssid="54">In this second stage, Xtract uses the same components used for the first stage but in a different way.</S>
    <S sid="276" ssid="55">It starts with the pairwise lexical relations produced in stage 1 and produces multiple word collocations, such as rigid noun phrases or phrasal templates, from them.</S>
    <S sid="277" ssid="56">To do this, Xtract studies the lexical relations in context, which is exactly what lexicographers do.</S>
    <S sid="278" ssid="57">For each bigram identified at the previous stage, Xtract examines all instances of appearance of the two words and analyzes the distributions of words and parts of speech in the surrounding positions.</S>
    <S sid="279" ssid="58">Input: Output of Stage 1.</S>
    <S sid="280" ssid="59">Similar to Table 4, i.e., a list of bigrams with their statistical information as computed in stage 1.</S>
    <S sid="281" ssid="60">Identical to Stage 1, Step 1.1.</S>
    <S sid="282" ssid="61">Given a pair of words w and wi, and an integer specifying the distance of the two words.11 This step produces all the sentences containing them in the given position.</S>
    <S sid="283" ssid="62">For example, given the bigram takeover-thwart and the distance 2, this step produces sentences like: &amp;quot;Under the recapitalization plan it proposed to thwart the takeover.&amp;quot; Identical to Stage 1, Step 1.2.</S>
    <S sid="284" ssid="63">We compute the frequency of appearance of each of the collocates of w by maintaining a data structure similar to the one given in Figure 5, Input: Output of Step 2.2.</S>
    <S sid="285" ssid="64">Output: N-grams such as in Figure 8.</S>
    <S sid="286" ssid="65">Discussion: Here, the analyses are simpler than for Stage 1.</S>
    <S sid="287" ssid="66">We are only interested in percentage frequencies and we only compute the moment of order 1 of the frequency distributions.</S>
    <S sid="288" ssid="67">Tables produced in Step 2.2 (such as in Figure 5) are used to compute the frequency of appearance of each word in each position around w. For each of the possible relative distances from w, we analyze the distribution of the words and only keep the words occupying the position with a probability greater than a given threshold T.12 If part of speech information is available, the same analysis is also performed with parts of speech instead of actual words.</S>
    <S sid="289" ssid="68">In short, a word w or a part of speech pos is kept in the final n-gram at position i if and only if it satisfies the following inequation: p(e) denotes the probability of event e. Consider the examples given in Figures 6 and 7 that show the concordances (output of step 2.1) for the input pairs: &amp;quot;averageindustrial&amp;quot; and &amp;quot;index-composite.&amp;quot; In Figure 6, the same words are always used from position &#8212;4 to position 0.</S>
    <S sid="290" ssid="69">However, at position +1, the words used are always different.</S>
    <S sid="291" ssid="70">&amp;quot;Dow&amp;quot; is used at position &#8212;3 in more than 90% of the cases.</S>
    <S sid="292" ssid="71">It is thus part of the produced rigid noun phrases.</S>
    <S sid="293" ssid="72">But &amp;quot;down&amp;quot; is only used a couple of times (out of several hundred) at position +1, 11 The distance is actually optional and can be given in various ways.</S>
    <S sid="294" ssid="73">We can specify the word order, the maximum distance, the exact distance, etc. and will not be part of the produced rigid noun phrases.</S>
    <S sid="295" ssid="74">From those concordances, Xtract produced the five-word rigid noun phrases: &amp;quot;The Dow Jones Industrial Average.&amp;quot; Figure 7 shows that from position &#8212;3 to position +7 the words used are always the same.</S>
    <S sid="296" ssid="75">In all the example sentences in which &amp;quot;composite&amp;quot; and &amp;quot;index&amp;quot; are adjacent, the two words are used within a bigger construct of 11 words (also called an 11-gram).</S>
    <S sid="297" ssid="76">However, if we look at position +8 for example, we see that although the words used are different, in all the cases they are verbs.</S>
    <S sid="298" ssid="77">Thus, after the 11-gram we expect to find a verb.</S>
    <S sid="299" ssid="78">In short, Figure 7 helps us produce both the rigid noun phrases &amp;quot;The NYSE's composite index of all its listed common stocks,&amp;quot; as well as the phrasal template &amp;quot;The NYSE's composite index of all its listed common stocks *VERB* *NUMBER* to *NUMBER*.&amp;quot; Figure 8 shows some sample phrasal templates and rigid noun phrases that were produced at this stage.</S>
    <S sid="300" ssid="79">The leftmost column gives the input lexical relations.</S>
    <S sid="301" ssid="80">Some other examples are given in Figure 3.</S>
    <S sid="302" ssid="81">The role of stage 2 is to filter out many lexical relations and replace them by valid ones.</S>
    <S sid="303" ssid="82">It produces both phrasal templates and rigid noun phrases.</S>
    <S sid="304" ssid="83">For example, associations such as &amp;quot;blue-stocks, &amp;quot; &amp;quot;air-controller,&amp;quot; or &amp;quot;advancing-market&amp;quot; were filtered out &#8226; Tuesday the Dow Jones industrial average The Dow Jones industrial average ... that sent the Dow Jones industrial average Monday the Dow Jones industrial average The Dow Jones industrial average ... in the Dow Jones industrial average *** rose 26.28 points to 2 304.69.</S>
    <S sid="305" ssid="84">The NYSE s composite index The NYSE s composite index The NYSE s composite index The NYSE s composite index The NYSE s composite index The NYSE s composite index The NYSE s composite index The NYSE s composite index The NYSE s composite index &amp;quot;the NYSE's composite index of all its listed common stocks and respectively replaced by: &amp;quot;blue chip stocks,&amp;quot; &amp;quot;air traffic controllers,&amp;quot; and &amp;quot;the broader market in the NYSE advancing issues.&amp;quot; Thus stage 2 produces n-word collocations from two-word associations.</S>
    <S sid="306" ssid="85">Producing n-word collocations has already been done (e.g., Choueka 1988).&amp;quot; The general method used by Choueka is the following: for each length n, (1 &lt;n &lt;6), produce all the word sequences of length n and sort them by frequency.</S>
    <S sid="307" ssid="86">On a 12 million&#8212;word corpus, Choueka retrieved 10 collocations of length six, 115 collocations of length five, 1,024 collocations of length four, 4,777 of length three, and some 15,973 of length two.</S>
    <S sid="308" ssid="87">The threshold imposed was 14.</S>
    <S sid="309" ssid="88">The method we presented in this section has three main advantages when compared to a straight n-gram method like Choueka's. of CPU time and space.</S>
    <S sid="310" ssid="89">In a 10 million&#8212;word corpus, with about 60,000 different words, there are about 3.6 x 109 possible bigrams, 2.16 x 1014 trigrams, and 3 x 1033 7-grams.</S>
    <S sid="311" ssid="90">This rapidly gets out of hand.</S>
    <S sid="312" ssid="91">Choueka, for example, had to stop at length six.</S>
    <S sid="313" ssid="92">In contrast, the rigid noun phrases we retrieve are of arbitrary length and are retrieved very easily and in one pass.</S>
    <S sid="314" ssid="93">The method we use starts from bigrams and produces the biggest possible subsuming n-gram.</S>
    <S sid="315" ssid="94">It is based on the fact that if an n-gram is statistically significant, then the included bigrams must also be significant.</S>
    <S sid="316" ssid="95">For example, to identify &amp;quot;The Dow Jones average of 30 industrials,&amp;quot; a traditional n-gram method would compare it to the other 7-grams and determine that it is significant.</S>
    <S sid="317" ssid="96">In contrast, we start from an included significant bigram (for example, &amp;quot;Dow-30&amp;quot;) and we directly retrieve the surrounding n-grams.'</S>
    <S sid="318" ssid="97">8.</S>
    <S sid="319" ssid="98">Xtract Stage Three: Adding Syntax to the Collocations The collocations as produced in the previous stages are already useful for lexicography.</S>
    <S sid="320" ssid="99">For computational use, however, functional information is needed.</S>
    <S sid="321" ssid="100">For example, the collocations should have some syntactic properties.</S>
    <S sid="322" ssid="101">It is not enough to say that &amp;quot;make&amp;quot; goes with &amp;quot;decision&amp;quot;; we need to know that &amp;quot;decision&amp;quot; is used as the direct object of the verb.</S>
    <S sid="323" ssid="102">The advent of robust parsers such as Cass (Abney 1990) and Fidditch (Hindle 1983) has made it possible to process large text corpora with good performance and thus combine statistical techniques with more symbolic analysis.</S>
    <S sid="324" ssid="103">In the past, some similar attempts have been done.</S>
    <S sid="325" ssid="104">Debili (1982) parsed corpora of French texts to identify nonambiguous predicate argument relations.</S>
    <S sid="326" ssid="105">He then used these relations for disambiguation.</S>
    <S sid="327" ssid="106">Hindle and Rooth (1990) later refined this approach by using bigram statistics to enhance the task of prepositional phrase attachment.</S>
    <S sid="328" ssid="107">Church et al. (1989, 1991) have yet another approach; they consider questions such as what does a boat typically do?</S>
    <S sid="329" ssid="108">They are preprocessing a corpus with the Fidditch parser (Hindle 1983) in order to produce a list of verbs that are most likely associated with the subject &amp;quot;boat.&amp;quot; Our goal here is different, as we analyze collocations automatically produced by the first stage of Xtract to either add syntactic information or reject them.</S>
    <S sid="330" ssid="109">For example, if a lexical relation identified at stage 1 involves a noun and a verb, the role of stage 3 is to determine whether it is a subject&#8212;verb or a verb&#8212;object collocation.</S>
    <S sid="331" ssid="110">If no such consistent relation is observed, then the collocation is rejected.</S>
    <S sid="332" ssid="111">Stage 3 uses a parser but it does not require a complete parse tree.</S>
    <S sid="333" ssid="112">Given a number of sentences, Xtract only needs to know pairwise syntactic (modifier&#8212;modified) relations.</S>
    <S sid="334" ssid="113">The parser we used in the experiment reported here is Cass (Abney 1989, 1990), a bottom-up incremental parser.</S>
    <S sid="335" ssid="114">Cass' takes input sentences labeled with part of speech and attempts to identify syntactic structure.</S>
    <S sid="336" ssid="115">One of the subtasks performed by Cass is to identify predicate argument relations, and this is the task we are interested in here.</S>
    <S sid="337" ssid="116">Stage 3 works in the following three steps.</S>
    <S sid="338" ssid="117">All the syntactic labels produced by Cass on sentence (10).</S>
    <S sid="339" ssid="118">Identical to what we did at Stage 2, Step 2.1.</S>
    <S sid="340" ssid="119">Given a pair of words w and w,, a distance of the two words (optional), and a tagged corpus, Xtract produces all the (tagged) sentences containing them in the given position specified by the distance.</S>
    <S sid="341" ssid="120">Input: Output of Step 3.1.</S>
    <S sid="342" ssid="121">A set of tagged sentences each containing both w and w,.</S>
    <S sid="343" ssid="122">Output: For each sentence, a set of syntactic labels such as those shown in Figure 9.</S>
    <S sid="344" ssid="123">Discussion: Cass is called on the concordances.</S>
    <S sid="345" ssid="124">From Cass output, we only retrieve binary syntactic relations (or labels) such as &amp;quot;verb&#8212;object&amp;quot; or &amp;quot;verb&#8212;subject,&amp;quot; &amp;quot;noun&#8212; adjective,&amp;quot; and &amp;quot;noun&#8212;noun.&amp;quot; To simplify, we abbreviate them respectively: VO, SV, NJ, NN.</S>
    <S sid="346" ssid="125">For sentence (10) below, for example, the labels produced are shown in Figure 9.</S>
    <S sid="347" ssid="126">10.</S>
    <S sid="348" ssid="127">&amp;quot;Wall Street faced a major test with stock traders returning to action for the first time since last week's epic selloff and investors awaited signs of life from the 5-year-old bull market.&amp;quot; Input: A set of sentences each associated with a set of labels as shown in Figure 9.</S>
    <S sid="349" ssid="128">Output: Collocations with associated syntactic labels as shown in Figure 10.</S>
    <S sid="350" ssid="129">Discussion: For any given sentence containing both w and w,, two cases are possible: either there is a label for the bigram (w, w,), or there is none.</S>
    <S sid="351" ssid="130">For example, for sentence (10), there is a syntactic label for the bigram faced-test, but there is none for the bigram stock-returning.</S>
    <S sid="352" ssid="131">Faced-test enters into a verb object relation, and stock-returning does not enter into any type of relation.</S>
    <S sid="353" ssid="132">If no label is retrieved for the bigram, it means that the parser could not identify a relation between the two words.</S>
    <S sid="354" ssid="133">In this case we introduce a new label: U (for undefined) to label the bigram.</S>
    <S sid="355" ssid="134">At this point, we associate with the sentence the label for the bigram (w, w1).</S>
    <S sid="356" ssid="135">With each of the input sentences, we associate a label for the bigram (w, w1).</S>
    <S sid="357" ssid="136">For example, the label associated with sentence (10) for the bigram faced-test would be VO.</S>
    <S sid="358" ssid="137">A list of labeled sentences for the bigram w = &amp;quot;rose&amp;quot; and w = &amp;quot;prices&amp;quot; is shown in Figure 10.</S>
    <S sid="359" ssid="138">Producing the &amp;quot;prices f] rose,&amp;quot; SV predicative relation at stage 3.</S>
    <S sid="360" ssid="139">Input: A set of sentences containing w and w, each associated with a label as shown in Figure 10.</S>
    <S sid="361" ssid="140">Output: Labeled collocations as shown in Figure 11.</S>
    <S sid="362" ssid="141">Discussion on Step 3.4: At this step, we count the frequencies of each possible label identified for the bigram (w, w,) and perform a statistical analysis of order two for this distribution.</S>
    <S sid="363" ssid="142">We compute the average frequency for the distribution of labels: ft and the standard deviation a-t. We finally apply a filtering method similar to (C2).</S>
    <S sid="364" ssid="143">Let t be a possible label.</S>
    <S sid="365" ssid="144">We keep t if and only if it satisfies inequality (4b) similar to (4a) given before: A collocation is thus accepted if and only if it has a label g satisfying inequality (4b), and g U.</S>
    <S sid="366" ssid="145">Similarly, a collocation is rejected if no label satisfies inequality (4b) or if U satisfies it.</S>
    <S sid="367" ssid="146">Figure 10 shows part of the output of Step 3.3 for w = &amp;quot;rose&amp;quot; and w, = &amp;quot;prices.&amp;quot; As shown in the figure, SV labels are a large majority.</S>
    <S sid="368" ssid="147">Thus, we would label the relation price-rose as an SV relation.</S>
    <S sid="369" ssid="148">An example output of this stage is given in Figure 11.</S>
    <S sid="370" ssid="149">The bigrams labeled U were rejected at this stage.</S>
    <S sid="371" ssid="150">Stage 3 thus produces very useful results.</S>
    <S sid="372" ssid="151">It filters out collocations and rejects more than half of them, thus improving the quality of the results.</S>
    <S sid="373" ssid="152">It also labels the collocations it accepts, thus producing a more functional and usable type of knowledge.</S>
    <S sid="374" ssid="153">For example, if the first two stages of Xtract produce the collocation &amp;quot;make-decision,&amp;quot; the third stage identifies it as a verb&#8212;object collocation.</S>
    <S sid="375" ssid="154">If no such relation can be observed, then the collocation is rejected.</S>
    <S sid="376" ssid="155">The produced collocations are not simple word associations but complex syntactic structures.</S>
    <S sid="377" ssid="156">Labeling and filtering are two useful tasks for automatic use of collocations as well as for lexicography.</S>
    <S sid="378" ssid="157">The whole of stage 3 (both as a filter and as a labeler) is an original contribution of our work.</S>
    <S sid="379" ssid="158">Retrieving syntactically labeled collocations is a relatively new concern.</S>
    <S sid="380" ssid="159">Moreover, filtering greatly improves the quality of the results.</S>
    <S sid="381" ssid="160">This is also a possible use of the emerging new parsing technology.</S>
    <S sid="382" ssid="161">Xtract is actually a library of tools implemented using standard C-Unix libraries.</S>
    <S sid="383" ssid="162">The toolkit has several utilities useful for analyzing corpora.</S>
    <S sid="384" ssid="163">Without making any effort to make Xtract efficient in terms of computing resources, the first stage as well as the second stage of Xtract only takes a few minutes to run on a ten-megabyte (pre-tagged) corpus.</S>
    <S sid="385" ssid="164">Xtract is currently being used at Columbia University for various lexical tasks.</S>
    <S sid="386" ssid="165">And it has been tested on many corpora, among them: several ten-megabyte corpora of news stories, a corpus, consisting of some twenty megabytes of New York Times articles, which has already been used by Choueka (1988), the Brown corpus (Francis and Ktfaera 1982), a corpus of the proceedings of the Canadian Parliament, also called the Hansards corpus, which amounts to several hundred megabytes.</S>
    <S sid="387" ssid="166">We are currently working on packaging Xtract to make it available to the research community.</S>
    <S sid="388" ssid="167">The packaged version will be portable, reusable, and faster than the one we used to write this paper.'</S>
    <S sid="389" ssid="168">We evaluate the filtering power of stage 3 in the evaluation section, Section 10.</S>
    <S sid="390" ssid="169">Section 9 presents some results that we obtained with the three stages of Xtract.</S>
  </SECTION>
  <SECTION title="9." number="10">
    <S sid="391" ssid="1">Results obtained from The Jerusalem Post corpus have already been reported (e.g., Smadja 1991).</S>
    <S sid="392" ssid="2">Figure 12 gives some results for the three-stage process of Xtract on a 10 million&#8212;word corpus of stock market reports taken from the Associated Press newswire.</S>
    <S sid="393" ssid="3">The collocations are given in the following format.</S>
    <S sid="394" ssid="4">The first line contains the bigrams with the distance, so that &amp;quot;sales fell &#8212;1&amp;quot; says that the two words under consideration are &amp;quot;sales&amp;quot; and &amp;quot;fell,&amp;quot; and that the distance we are considering is &#8212;1.</S>
    <S sid="395" ssid="5">The first line is thus the output of stage 1.</S>
    <S sid="396" ssid="6">The second line gives the output of stage 2, i.e., the n-grams.</S>
    <S sid="397" ssid="7">For example, &amp;quot;takeover-thwart&amp;quot; is retrieved as &amp;quot;44 to thwart AT takeover NN &amp;quot;AT stands for article, NN stands for nouns, and 44 is the number of times this collocation has been retrieved in the corpus.</S>
    <S sid="398" ssid="8">The third line gives the retrieved tags for this collocation, so that the syntactic relation between &amp;quot;takeover&amp;quot; and &amp;quot;thwart&amp;quot; is an SV relation.</S>
    <S sid="399" ssid="9">And finally, the last line is an example sentence containing the collocation.</S>
    <S sid="400" ssid="10">Output of the type of Figure 12 is automatically produced.</S>
    <S sid="401" ssid="11">This kind of output is about as far as we have gone automatically.</S>
    <S sid="402" ssid="12">Any further analysis and/or use of the collocations would probably require some manual intervention.</S>
    <S sid="403" ssid="13">Some complete output on the stock market corpus.</S>
    <S sid="404" ssid="14">For the 10 million&#8212;word stock market corpus, there were some 60,000 different word forms.</S>
    <S sid="405" ssid="15">Xtract has been able to retrieve some 15,000 collocations in total.</S>
    <S sid="406" ssid="16">We would like to note, however, that Xtract has only been effective at retrieving collocations for words appearing at least several dozen times in the corpus.</S>
    <S sid="407" ssid="17">This means that lowfrequency words were not productive in terms of collocations.</S>
    <S sid="408" ssid="18">Out of the 60,000 words in the corpus, only 8,000 were repeated more than 50 times.</S>
    <S sid="409" ssid="19">This means that for a target Overlap of the manual and automatic evaluations lexicon of size N = 8,000, one should expect at least as many collocations to be added, and Xtract can help retrieve most of them.</S>
    <S sid="410" ssid="20">The third stage of Xtract can thus be considered as a retrieval system that retrieves valid collocations from a set of candidates.</S>
    <S sid="411" ssid="21">This section describes an evaluation experiment of the third stage of Xtract as a retrieval system as well as an evaluation of the overall output of Xtract.</S>
    <S sid="412" ssid="22">Evaluation of retrieval systems is usually done with the help of two parameters: precision and recall (Salton 1989).</S>
    <S sid="413" ssid="23">Precision of a retrieval system is defined as the ratio of retrieved valid elements divided by the total number of retrieved elements (Salton 1989).</S>
    <S sid="414" ssid="24">It measures the quality of the retrieved material.</S>
    <S sid="415" ssid="25">Recall is defined as the ratio of retrieved valid elements divided by the total number of valid elements.</S>
    <S sid="416" ssid="26">It measures the effectiveness of the system.</S>
    <S sid="417" ssid="27">This section presents an evaluation of the retrieval performance of the third stage of Xtract.</S>
    <S sid="418" ssid="28">Deciding whether a given word combination is a valid or invalid collocation is actually a difficult task that is best done by a lexicographer.</S>
    <S sid="419" ssid="29">Jeffery Triggs is a lexicographer working for the Oxford English Dictionary (OED) coordinating the North American Readers program of OED at Bell Communication Research.</S>
    <S sid="420" ssid="30">Jeffery Triggs agreed to go over manually several thousands of collocations.'</S>
    <S sid="421" ssid="31">In order to have an unbiased experiment we had to be able to evaluate the performance of Xtract against a human expert.</S>
    <S sid="422" ssid="32">We had to have the lexicographer and Xtract perform the same task.</S>
    <S sid="423" ssid="33">To do this in an unbiased way we randomly selected a subset of about 4,000 collocations after the first two stages of Xtract.</S>
    <S sid="424" ssid="34">This set of collocations thus contained some good collocations and some bad ones.</S>
    <S sid="425" ssid="35">This data set was then evaluated by the lexicographer and the third stage of Xtract.</S>
    <S sid="426" ssid="36">This allowed 17 I am grateful to Jeffery, whose professionalism and kindness helped me understand some of the difficulty of lexicography.</S>
    <S sid="427" ssid="37">Without him this evaluation would not have been possible. us to evaluate the performances of the third stage of Xtract and the overall quality of the total output of Xtract in a single experiment.</S>
    <S sid="428" ssid="38">The experiment was as follows: We gave the 4,000 collocations to evaluate to the lexicographer, asking him to select the ones that he would consider for a domain-specific dictionary and to cross out the others.</S>
    <S sid="429" ssid="39">The lexicographer came up with three simple tags, YY, Y, and N. Both Y and YY include good collocations, and N includes bad collocations.</S>
    <S sid="430" ssid="40">The difference between YY and Y is that Y collocations are of better quality than YY collocations.</S>
    <S sid="431" ssid="41">YY collocations are often too specific to be included in a dictionary, or some words are missing, etc.</S>
    <S sid="432" ssid="42">After stage 2, about 20% of the collocations are Y, about 20% are YY, and about 60% are N. This told us that the precision of Xtract at stage 2 was only about 40%.</S>
    <S sid="433" ssid="43">Although this would seem like a poor precision, one should compare it with the much lower rates currently in practice in lexicography.</S>
    <S sid="434" ssid="44">For compiling new entries for the OED, for example, the first stage roughly consists of reading numerous documents to identify new or interesting expressions.</S>
    <S sid="435" ssid="45">This task is performed by professional readers.</S>
    <S sid="436" ssid="46">For the OED, the readers for the American program alone produce some 10,000 expressions a month.</S>
    <S sid="437" ssid="47">These lists are then sent off to the dictionary and go through several rounds of careful analysis before actually being submitted to the dictionary.</S>
    <S sid="438" ssid="48">The ratio of proposed candidates to good candidates is usually low.</S>
    <S sid="439" ssid="49">For example, out of the 10,000 expressions proposed each month, fewer than 400 are serious candidates for the OED, which represents a current rate of 4%.</S>
    <S sid="440" ssid="50">Automatically producing lists of candidate expressions could actually be of great help to lexicographers, and even a precision of 40% would be helpful.</S>
    <S sid="441" ssid="51">Such lexicographic tools could, for example, help readers retrieve sublanguage-specific expressions by providing them with lists of candidate collocations.</S>
    <S sid="442" ssid="52">The lexicographer then manually examines the list to remove the irrelevant data.</S>
    <S sid="443" ssid="53">Even low precision is useful for lexicographers, as manual filtering is much faster than manual scanning of the documents (Marcus 1990).</S>
    <S sid="444" ssid="54">Such techniques are not able to replace readers, though, as they are not designed to identify low-frequency expressions, whereas a human reader immediately identifies interesting expressions with as few as one occurrence.</S>
    <S sid="445" ssid="55">The second stage of this experiment was to use Xtract stage 3 to filter out and label the sample set of collocations.</S>
    <S sid="446" ssid="56">As described in Section 8, there are several valid labels (VO, VS, NN, etc.).</S>
    <S sid="447" ssid="57">In this experiment, we grouped them under a single label: T. There is only one nonvalid label: U (for unlabeled).</S>
    <S sid="448" ssid="58">A T collocation is thus accepted by Xtract stage 3, and a U collocation is rejected.</S>
    <S sid="449" ssid="59">The results of the use of stage 3 on the sample set of collocations are similar to the manual evaluation in terms of numbers: about 40% of the collocations were labeled (T) by Xtract stage 3, and about 60% were rejected (U).</S>
    <S sid="450" ssid="60">Figure 13 shows the overlap of the classifications made by Xtract and the lexicographer.</S>
    <S sid="451" ssid="61">In the figure, the first diagram on the left represents the breakdown in T and U of each of the manual categories (Y-YY and N).</S>
    <S sid="452" ssid="62">The diagram on the right represents the breakdown in Y-YY and N of the T and U categories.</S>
    <S sid="453" ssid="63">For example, the first column of the diagram on the left represents the application of Xtract stage 3 on the YY collocations.</S>
    <S sid="454" ssid="64">It shows that 94% of the collocations accepted by the lexicographer were also accepted by Xtract.</S>
    <S sid="455" ssid="65">In other words, this means that the recall of the third stage of Xtract is 94%.</S>
    <S sid="456" ssid="66">The first column of the diagram on the right represents the lexicographic evaluation of the collocations automatically accepted by Xtract.</S>
    <S sid="457" ssid="67">It shows that about 80% of the T collocations were accepted by the lexicographer and that about 20% were rejected.</S>
    <S sid="458" ssid="68">This shows that precision was raised from 40% to 80% with the addition of Xtract stage 3.</S>
    <S sid="459" ssid="69">In summary, these experiments allowed us to evaluate Stage 3 as a retrieval system.</S>
    <S sid="460" ssid="70">The results are: precision = 80% and recall = 94%.</S>
    <S sid="461" ssid="71">Top associations with &amp;quot;price&amp;quot; in NYT, DJ, and AP.</S>
    <S sid="462" ssid="72">In this section, we discuss the extent to which the results are dependent on the corpus used.</S>
    <S sid="463" ssid="73">To illustrate our purpose here, we are using results collected from three different corpora.</S>
    <S sid="464" ssid="74">The first one, DJ, for Dow Jones, is the corpus we used in this paper; it contains (mostly) stock market stories taken from the Associated Press newswire.</S>
    <S sid="465" ssid="75">DJ contains 8-9 million words.</S>
    <S sid="466" ssid="76">The second corpus, NYT, contains articles published in the New York Times during the years 1987 and 1988.</S>
    <S sid="467" ssid="77">The articles are on various subjects.</S>
    <S sid="468" ssid="78">This is the same corpus that was used by Choueka (1988).</S>
    <S sid="469" ssid="79">NYT contains 12 million words.</S>
    <S sid="470" ssid="80">The third corpus, AP, contains stories from the Associated Press newswire on various domains such as weather reports, politics, health, finances, etc.</S>
    <S sid="471" ssid="81">AP is 4 million words.</S>
    <S sid="472" ssid="82">Figure 14 represents the top 10 word associations retrieved by Xtract stage 1 for the three corpora with the word &amp;quot;price.&amp;quot; In this figure, d represents the distance between the two words and w represents the weight associated with the bigram.</S>
    <S sid="473" ssid="83">The weight is a combined index of the statistical distribution as discussed in Section 6, and it evaluates the collocation.</S>
    <S sid="474" ssid="84">There are several differences and similarities among the three columns of the figure in terms of the words retrieved, the order of the words retrieved, and the values of w. We identified two main ways in which the results depend on the corpus.</S>
    <S sid="475" ssid="85">We discuss them in turn.</S>
  </SECTION>
  <SECTION title="11.1 Results Are Dependent on the Size of the Corpus" number="11">
    <S sid="476" ssid="1">From the different corpora we used, we noticed that our statistical methods were not effective for low-frequency words.</S>
    <S sid="477" ssid="2">More precisely, the statistical methods we use do not seem to be effective on low frequency words (fewer than 100 occurrences).</S>
    <S sid="478" ssid="3">If the word is not frequently used in the corpus or if the corpus is too small, then the distribution of its collocates will not be big enough.</S>
    <S sid="479" ssid="4">For example, from AP, which contains about 1,000 occurrences of the word &amp;quot;rain,&amp;quot; Xtract produced over 170 collocations at stage 1 involving it.</S>
    <S sid="480" ssid="5">In contrast, DJ only contains some 50 occurrences of &amp;quot;rain&amp;quot;' and Xtract could only produce a few collocations with it.</S>
    <S sid="481" ssid="6">Some collocations with &amp;quot;rain&amp;quot; and &amp;quot;hurricane&amp;quot; extracted from AP are listed in Figure 15.</S>
    <S sid="482" ssid="7">Both words are high-frequency words in AP and low-frequency words in DJ.</S>
    <S sid="483" ssid="8">In short, to build a lexicon for a computational linguistics application in a given domain, one should make sure that the important words in the domain are frequent enough in the corpus.</S>
    <S sid="484" ssid="9">For a subdomain of the stock market describing only the fluctuations of several indexes and some of the major events of the day at Wall Street, a corpus of 10 million words appeared to be sufficient.</S>
    <S sid="485" ssid="10">This 10 million&#8212;token corpus contains only 5,000 words each repeated more than 100 times.</S>
  </SECTION>
  <SECTION title="11.2 Results Are Dependent on the Contents of the Corpus" number="12">
    <S sid="486" ssid="1">Size and frequency are not the only important criteria.</S>
    <S sid="487" ssid="2">For example, even though &amp;quot;food&amp;quot; is a high-frequency word in DJ, &amp;quot;eat&amp;quot; is not among its collocates, whereas it is among the top ones in the two other corpora.</S>
    <S sid="488" ssid="3">Food is not eaten at Wall Street but rather traded, sold, offered, bought, etc.</S>
    <S sid="489" ssid="4">If the corpus only contains stories in a given domain, most of the collocations retrieved will also be dependent on this domain.</S>
    <S sid="490" ssid="5">We have seen in Section 2 that in addition to jargonistic words, there are a number of more familiar terms that form collocations when used in different domains.</S>
    <S sid="491" ssid="6">A corpus containing stock market stories is obviously not a good choice for retrieving collocations related to weather reports or for retrieving domain independent collocations such as &amp;quot;makedecision.&amp;quot; For a domain-specific application, domain-dependent collocations are of interest, and a domain-specific corpus is exactly what is required.</S>
    <S sid="492" ssid="7">To build a system that generates stock market reports, it is a good choice to use a corpus containing only stock market reports.</S>
    <S sid="493" ssid="8">There is a danger in choosing a too specific corpus however.</S>
    <S sid="494" ssid="9">For example, in Figure 14, we see that the first collocate of &amp;quot;price&amp;quot; in AP is &amp;quot;gouging,&amp;quot; which is not retrieved in either DJ or in NYT.</S>
    <S sid="495" ssid="10">&amp;quot;Price gouging&amp;quot; is not a current practice at Wall Street and this collocation could not be retrieved even on some 20,000 occurrences of the word.</S>
    <S sid="496" ssid="11">An example use of &amp;quot;price gouging&amp;quot; is the following: &amp;quot;The Charleston City Council passed an emergency ordinance barring price gouging later Saturday after learning of an incident in which 5 pound bags of ice were being sold for 10.&amp;quot; More formally, if we compare the columns in Figure 14, we see that the numbers are much higher for DJ than for the other two corpora.</S>
    <S sid="497" ssid="12">This is not due to a size/frequency factor, since &amp;quot;price&amp;quot; occurs about 10,000 times in both NYT and DJ, whereas it only occurs 4,500 times in AP.</S>
    <S sid="498" ssid="13">It rather says that the distribution of collocates around &amp;quot;price&amp;quot; has a much higher variance in DJ than in the other corpora.</S>
    <S sid="499" ssid="14">DJ has much bigger weights because it is focused; the stories are almost all about Wall Street.</S>
    <S sid="500" ssid="15">In contrast, NYT contains a large number of stories with &amp;quot;price,&amp;quot; but they have various origins.</S>
    <S sid="501" ssid="16">&amp;quot;Price&amp;quot; has 4,627 collocates in NYT, whereas it only has 2,830 in DJ.</S>
    <S sid="502" ssid="17">Let us call Ocorpus the variety of a given corpus.</S>
    <S sid="503" ssid="18">One way to measure the variety is to use the information theory measure of entropy for a given language model.</S>
    <S sid="504" ssid="19">Entropy is defined (Shannon 1948) as: where p(w) is the probability of appearance of a given word, w. Entropy measures the predictability of a corpus, in other words, the bigger the entropy of a corpus the less predictable it is.</S>
    <S sid="505" ssid="20">In an ideal language model, the entropy of a corpus should not depend on its size.</S>
    <S sid="506" ssid="21">However, word probabilities are difficult to approximate (see, for example, Bell CD inches of rain.</S>
    <S sid="507" ssid="22">.</S>
    <S sid="508" ssid="23">.</S>
    <S sid="509" ssid="24">. acid rain.</S>
    <S sid="510" ssid="25">.</S>
    <S sid="511" ssid="26">.</S>
    <S sid="512" ssid="27">.</S>
    <S sid="513" ssid="28">CD inches of rain fell heavy rain .</S>
    <S sid="514" ssid="29">.</S>
    <S sid="515" ssid="30">.</S>
    <S sid="516" ssid="31">. the Atlantic hurricane season hurricane force winds rain forests to reduce acid rain .</S>
    <S sid="517" ssid="32">.</S>
    <S sid="518" ssid="33">.</S>
    <S sid="519" ssid="34">. a major hurricane light rain .</S>
    <S sid="520" ssid="35">.</S>
    <S sid="521" ssid="36">.</S>
    <S sid="522" ssid="37">. the most powerful hurricane to hit the .</S>
    <S sid="523" ssid="38">.</S>
    <S sid="524" ssid="39">.</S>
    <S sid="525" ssid="40">. an inch of rain .</S>
    <S sid="526" ssid="41">.</S>
    <S sid="527" ssid="42">.</S>
    <S sid="528" ssid="43">. to save the world s rain forests wind and rain .</S>
    <S sid="529" ssid="44">.</S>
    <S sid="530" ssid="45">.</S>
    <S sid="531" ssid="46">. a cold rain [19871 for a thorough discussion on probability estimation), and in most cases entropy grows with the size of the corpus.</S>
    <S sid="532" ssid="47">In this section, we use a simple unigram language model trained on the corpus and we approximate the variety of a given corpus by: 0 corpus &#8212; E(f(w)/S) log(f (w) /S) w in which f (w) is the frequency of appearance of the word w in the corpus and S is the total number of different word forms in the corpus.</S>
    <S sid="533" ssid="48">In addition, to be fair in our comparison of the three corpora, we have used three (sub)corpora of about one million words for DJ, NYT, and Brown.</S>
    <S sid="534" ssid="49">The 1 million&#8212;word Brown corpus (Francis and Ktit'era 1982) contains 43,300 different words, of which only 1091 are repeated more than 100 times.</S>
    <S sid="535" ssid="50">The 0 of the Brown corpus is: &#176;Brown = 10.5.</S>
    <S sid="536" ssid="51">In comparison, the size of DJ is 8,000,000.</S>
    <S sid="537" ssid="52">It contains 59,233 different words of which 5,367 are repeated more than 100 times.</S>
    <S sid="538" ssid="53">DJ 0 ratio is: ODJ = 9.6.</S>
    <S sid="539" ssid="54">And the 0 ratio of NYT which contains stories pertaining to various domains has been estimated at ONyT = 10.4.</S>
    <S sid="540" ssid="55">According to this measure, DJ is much more focused than both the Brown Corpus and NYT because the difference in variety is 1 in the logarithmic scale.</S>
    <S sid="541" ssid="56">This is not a surprise since the subjects it covers are much more restricted, the genre is of only one kind, and the setting is constant.</S>
    <S sid="542" ssid="57">In contrast, the Brown corpus has been designed to be of mixed and rich composition, and NYT is made up of stories and articles related to various subjects and domains.</S>
    <S sid="543" ssid="58">Let us note that several factors might also influence the overall entropy of a given corpus; for example the number of writers, the time span covered by the corpus, etc.</S>
    <S sid="544" ssid="59">In any case, the success of statistical methods such as the ones described in this report also depends on the sublanguage used in the corpus.</S>
    <S sid="545" ssid="60">For a sublanguage-dependent application, the training corpus must be focused, mainly because its vocabulary being restricted, the important words will be more frequent than in a nonrestricted corpus (of equivalent size), and thus the collocations will be easier to retrieve.</S>
    <S sid="546" ssid="61">Other applications might require less focused corpora.</S>
    <S sid="547" ssid="62">For those applications, the problem is even more touchy, as a perfectly balanced corpus is very difficult to compile.</S>
    <S sid="548" ssid="63">A sample of the 1987 DJ text is certainly not a good sample of general English; however, a balanced sample, such as the Brown Corpus, may also be a poor sample.</S>
    <S sid="549" ssid="64">It is doubtful that even a balanced corpus contains enough data on all possible domains, and the very effort of artificially balancing the corpus might also bias the results.</S>
    <S sid="550" ssid="65">Corpus-based techniques are still rarely used in the fields of linguistics, lexicography, and computational linguistics, and the main thrust of the work presented here is to promote its use for any text based application.</S>
    <S sid="551" ssid="66">In this section we discuss several uses of Xtract.</S>
    <S sid="552" ssid="67">Language generation is a novel application for Corpus-Based Computational Linguistics (Boguraev 1989).</S>
    <S sid="553" ssid="68">In Smadja (1991) we show how collocations enhance the task of lexical selection in language generation.</S>
    <S sid="554" ssid="69">Previous language generation works did not use collocations mainly because they did not have the information in compiled form and the lexicon formalisms available did not handle the variability of collocational knowledge.</S>
    <S sid="555" ssid="70">In contrast, we use Xtract to produce the collocations and we use Functional Unification Grammars (FUGs) (Kay 1979) as a representation formalism and a unification engine.</S>
    <S sid="556" ssid="71">We show how the use of FUGs allows us to properly handle the interactions of collocational and various other constraints.</S>
    <S sid="557" ssid="72">We have implemented Cook, a surface sentence generator that uses a flexible lexicon for expressing collocational constraints in the stock market domain.</S>
    <S sid="558" ssid="73">Using Ana (Kukich 1983) as a deep generator, Cook is implemented in FUF (Elhadad 1990), an extended implementation of FUG, and uniformly represents the lexicon and syntax as originally suggested by Halliday (1966).</S>
    <S sid="559" ssid="74">For a more detailed description of Cook the reader is referred to Smadja (1991).</S>
    <S sid="560" ssid="75">According to Benson, Benson, and Ilson (1986a), collocations fall into two major groups: lexical collocations and grammatical collocations.</S>
    <S sid="561" ssid="76">The difference between these two groups lies in the types of words involved.</S>
    <S sid="562" ssid="77">Lexical collocations roughly consist of syntagmatic affinities among open class words such as verbs, nouns, adjectives, and adverbs.</S>
    <S sid="563" ssid="78">In contrast, grammatical collocations generally involve at least one closed class word among particles, prepositions, and auxiliary verbs.</S>
    <S sid="564" ssid="79">Examples of grammatical collocations are: put-up, as in &amp;quot;I can't put up with this anymore,&amp;quot; and fill-out, as in &amp;quot;You have to fill out your 1040 form.&amp;quot;19 Consider the sentences below: 6.</S>
    <S sid="565" ssid="80">* &amp;quot;... a new initiative in the aftermath from the PLO's evacuation from Beirut.&amp;quot; 7.</S>
    <S sid="566" ssid="81">&amp;quot;... a new initiative in the aftershocks from the PLO's evacuation from Beirut.&amp;quot; 8.</S>
    <S sid="567" ssid="82">* &amp;quot;... a new initiative in the aftershocks of the PLO's evacuation from Beirut.&amp;quot; These examples clearly show that the choices of the prepositions are arbitrary.</S>
    <S sid="568" ssid="83">Sentences (1)&#8212;(2) and (3)&#8212;(4) compare the word associations comparison with/to with association with/to.</S>
    <S sid="569" ssid="84">Although very similar in meaning, the two words select different prepositions.</S>
    <S sid="570" ssid="85">Moreover, the difference of meaning of the two prepositions does not account for the wording choices.</S>
    <S sid="571" ssid="86">Similarly, sentences (5)&#8212;(6) and (7)&#8212;(8) illustrate the fact that &amp;quot;aftermath&amp;quot; selects the preposition &amp;quot;of&amp;quot; and &amp;quot;aftershock&amp;quot; selects &amp;quot;from.&amp;quot; Grammatical collocations are very similar to lexical collocations in the sense that they also correspond to arbitrary and recurrent word co-occurrences (Benson 1990).</S>
    <S sid="572" ssid="87">In terms of structure, grammatical collocations are much simpler: since many of the grammatical collocations only include one open class word, the separation base-collocator becomes trivial.</S>
    <S sid="573" ssid="88">The open class word is the meaning bearing element, it is the base; and the closed class word is the collocator.</S>
    <S sid="574" ssid="89">For lexicographers, grammatical collocations are somehow simpler than lexical collocations.</S>
    <S sid="575" ssid="90">A large number of dictionaries actually include them.</S>
    <S sid="576" ssid="91">For example, The Random House Dictionary of the English Language (RHDEL) (Flexner 1987) gives: &amp;quot;abreast of, accessible to, accustomed to, careful about, conducive to, conscious of, equal to, expert at, fond of, jealous of,&amp;quot; etc.</S>
    <S sid="577" ssid="92">However, a large number are missing and the information provided is inconsistent and spotty.</S>
    <S sid="578" ssid="93">For example, RHDEL does not include: appreciative of, available to, certain of, clever at, comprehensible to, curious about, difficult for, effective against, faithful to, friendly with, furious at, happy about, hostile to, etc.</S>
    <S sid="579" ssid="94">As demonstrated by Benson, even the most complete learners' dictionaries miss very important grammatical collocations and treat the others inconsistently.'</S>
    <S sid="580" ssid="95">Determiners are lexical elements that are used in conjunction with a noun to bring into correspondence with it a certain sector of reality (Ducrot and Todorov 1979).</S>
    <S sid="581" ssid="96">A noun without determiner has no referent.</S>
    <S sid="582" ssid="97">The role of determiner can be played by several classes of items: articles, (e.g., &amp;quot;a,&amp;quot; &amp;quot;the&amp;quot;), possessives (e.g., &amp;quot;my,&amp;quot; &amp;quot;your&amp;quot;), indefinite adjectives (e.g., &amp;quot;some,&amp;quot; &amp;quot;many,&amp;quot; &amp;quot;few,&amp;quot; &amp;quot;certain&amp;quot;), demonstratives (e.g., &amp;quot;this,&amp;quot; &amp;quot;those&amp;quot;), numbers, etc.</S>
    <S sid="583" ssid="98">Determiner&#8212;noun combinations are often based simply on semantic or syntactic criteria.</S>
    <S sid="584" ssid="99">For example in the expression &amp;quot;my left foot,&amp;quot; the determiner &amp;quot;my&amp;quot; is here for semantic reasons.</S>
    <S sid="585" ssid="100">Any other determiner would fail to identify the correct object (my left foot).</S>
    <S sid="586" ssid="101">Classes of nouns such as mass and count are supposed to determine the type of determiners to be used in conjunction with the nouns (Quirk et al. 1972).</S>
    <S sid="587" ssid="102">Mass nouns often refer to objects or ideas that can be divided into smaller parts without losing their meaning.</S>
    <S sid="588" ssid="103">In contrast, count nouns refer to objects that are not dividable.</S>
    <S sid="589" ssid="104">For example, &amp;quot;water&amp;quot; is a mass noun, if you spill half a glass of water you still have Some noun-preposition associations retrieved by Xtract. some water left in your glass.</S>
    <S sid="590" ssid="105">In contrast if you cut a book in two halves and discard one half, you do not have a book any more; &amp;quot;book&amp;quot; is a count noun.</S>
    <S sid="591" ssid="106">Count nouns are often used with numbers and articles, and mass nouns are often used with no articles (or the zero article noted 0) (Quirk et al. 1972).</S>
    <S sid="592" ssid="107">As with other types of word combinations, noun-determiner combinations often lead to collocations.</S>
    <S sid="593" ssid="108">Consider the table given in Table 5.</S>
    <S sid="594" ssid="109">In the table, some noundeterminer combinations are compared.</S>
    <S sid="595" ssid="110">The first four determiners (a, the, 0, some) represent a singular use of the noun, and the last four (many, few, a lot of, a great deal of) represent a plural use.</S>
    <S sid="596" ssid="111">1 and 300 are numbers.</S>
    <S sid="597" ssid="112">0 is the zero article.</S>
    <S sid="598" ssid="113">In the table, a '+' sign means that the combination is frequent and normal; a '-' sign means that the combination is very rare if not forbidden.</S>
    <S sid="599" ssid="114">A '?' sign means that the combination is very low probability and that it would probably require an unusual context.</S>
    <S sid="600" ssid="115">For example, one does not say *&amp;quot;a butter,&amp;quot; one says &amp;quot;some butter,&amp;quot; and the combination butter-many is rather unusual and would only occur in unusual contexts.</S>
    <S sid="601" ssid="116">For example, if one refers to several types of butter, one could say: &amp;quot;Many butters are based on regular butter and an additional spice or flavor, such as rosemary, sage, basil, garlic, etc.&amp;quot; &amp;quot;Book&amp;quot; is a typical count noun in that it can combine with &amp;quot;a&amp;quot; and &amp;quot;many.&amp;quot; &amp;quot;Butter&amp;quot; is a typical mass noun in that it combines with the zero determiner and &amp;quot;a great deal.&amp;quot; However, words such as &amp;quot;police, people, traffic, opinion, weather,&amp;quot; etc. share some characteristics of both mass nouns and count nouns.</S>
    <S sid="602" ssid="117">For example, &amp;quot;weather&amp;quot; is neither a count noun&#8212;*&amp;quot;a weather&amp;quot; is incorrect&#8212;nor a mass noun&#8212;*&amp;quot;a lot of weather&amp;quot; is incorrect (Quirk et al. 1972).</S>
    <S sid="603" ssid="118">However, it shares some characteristics of both types of nouns.</S>
    <S sid="604" ssid="119">Mass noun features include the premodified structures &amp;quot;a lot of good weather,&amp;quot; &amp;quot;some bad weather,&amp;quot; and &amp;quot;what lovely weather.&amp;quot; Count noun features include the plural &amp;quot;go out in all weathers,&amp;quot; &amp;quot;in the worst of weathers.&amp;quot; The problem with such combinations is that, if the word is irregular then the information will probably not be in the dictionary.'</S>
    <S sid="605" ssid="120">Moreover, even if the word is regular, the word itself might not be in the dictionary or the information could simply be difficult to retrieve automatically.</S>
    <S sid="606" ssid="121">Simple tools such as Xtract can hopefully provide such information.</S>
    <S sid="607" ssid="122">Based on a large number of occurrences of the noun, Xtract will be able to make statistical inferences as to the determiners used with it.</S>
    <S sid="608" ssid="123">Such analysis is possible without any modification to Xtract.</S>
    <S sid="609" ssid="124">Actually, only a subpart of Xtract is necessary to retrieve them.</S>
    <S sid="610" ssid="125">We have seen that collocations are difficult to handle for non-native speakers, and that they require special handling for computational applications.</S>
    <S sid="611" ssid="126">In a multilingual environment the problems become even more complex, as each language imposes its own collocational constraints.</S>
    <S sid="612" ssid="127">Consider, for example, the English expressions &amp;quot;House of Parliament&amp;quot; and &amp;quot;House painter.&amp;quot; The natural French translation for &amp;quot;house&amp;quot; is &amp;quot;maison.&amp;quot; However, the two expressions do not use this translation, but respectively &amp;quot;chambre&amp;quot; (&amp;quot;room&amp;quot; in English) and &amp;quot;Witiment&amp;quot; (&amp;quot;building&amp;quot; in English).</S>
    <S sid="613" ssid="128">Translations have to be provided for collocations, and should not be word-based but rather expression-based.</S>
    <S sid="614" ssid="129">Bilingual dictionaries are generally inadequate in dealing with such issues.</S>
    <S sid="615" ssid="130">They generally limit such context-sensitive translations to ambiguous words (e.g., &amp;quot;number&amp;quot; or &amp;quot;rock&amp;quot;) or highly complex words such as &amp;quot;make,&amp;quot; &amp;quot;have,&amp;quot; etc.</S>
    <S sid="616" ssid="131">Moreover, even in these cases, coverage is limited to semantic variants, and lexical collocations are generally omitted.</S>
    <S sid="617" ssid="132">One possible application is the development of compilation techniques for bilingual dictionaries.</S>
    <S sid="618" ssid="133">This would require compiling two monolingual collocational dictionaries and then developing some automatic or assisted translation methods.</S>
    <S sid="619" ssid="134">Those translation methods could be based on the statistical analysis of bilingual corpora currently available.</S>
    <S sid="620" ssid="135">A simple algorithm for translating collocations is given in Smadja (1992).</S>
    <S sid="621" ssid="136">Several other applications such as information retrieval, automatic thesauri compilation, and speech recognition are also discussed in Smadja (1991).</S>
    <S sid="622" ssid="137">21 Note that it might be in some grammar book.</S>
    <S sid="623" ssid="138">For example, Quirk et al. in their extensive grammar book (1972) devote some 100 pages to such noun&#8212;determiner combinations.</S>
    <S sid="624" ssid="139">They include a large number of rules and list exceptions to those rules.</S>
    <S sid="625" ssid="140">Corpus analysis is a relatively recent domain of research.</S>
    <S sid="626" ssid="141">With the availability of large samples of textual data and automated tools such as part-of-speech taggers, it has become possible to develop and use automatic techniques for retrieving lexical information from textual corpora.</S>
    <S sid="627" ssid="142">In this paper some original techniques for the automatic extraction of collocations have been presented.</S>
    <S sid="628" ssid="143">The techniques have been implemented in a system, Xtract, and tested on several corpora.</S>
    <S sid="629" ssid="144">Although some other attempts have been made to retrieve collocations from textual corpora, no work has been able to retrieve the full range of the collocations that Xtract retrieves.</S>
    <S sid="630" ssid="145">Thanks to our filtering methods, the collocations produced by Xtract are of better quality.</S>
    <S sid="631" ssid="146">And finally, because of the syntactic labeling, the collocations we produce are richer than the ones produced by other methods.</S>
    <S sid="632" ssid="147">The number and size of available textual corpora is constantly growing.</S>
    <S sid="633" ssid="148">Dictionaries are available in machine-readable form, news agencies provide subscribers with daily reports on various events, publishing companies use computers and provide machine-readable versions of books, magazines, and journals.</S>
    <S sid="634" ssid="149">This amounts to a vast quantity of language data with unused and virtually unlimited, implicit and explicit information about the English language.</S>
    <S sid="635" ssid="150">These textual data can thus be used to retrieve important information that is not available in other forms.</S>
    <S sid="636" ssid="151">The primary goal of the research we presented is to provide a comprehensive lexicographic toolkit to assist in implementing natural language processing, as well as to assist lexicographers in compiling general-purpose dictionaries, as most of the work is still manually performed in this domain.</S>
    <S sid="637" ssid="152">The abundance of text corpora allows a shift toward more empirical studies of language that emphasize the development of automated tools.</S>
    <S sid="638" ssid="153">We think that more research should be conducted in this direction and hope that our work will stimulate research projects along these lines.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="13">
    <S sid="639" ssid="1">I would like to thank Steve Abney, Ken Church, Karen Kukich, and Michael Elhadad for making their software tools available to us.</S>
    <S sid="640" ssid="2">Without them, most of the work reported here would not have been possible.</S>
    <S sid="641" ssid="3">Kathy McKeown read earlier versions of this paper and was helpful in both the writing and the research.</S>
    <S sid="642" ssid="4">Finally, the anonymous reviewers for Computational Linguistics made insightful comments on earlier versions of the paper.</S>
    <S sid="643" ssid="5">Part of this work has been done in collaboration with Bell Communication Research, and part of this work has been supported by DARPA grant NO0039-84-C-0165, by NSF grant IRT-84-51438, and by ONR grant NO0014-89-J-1782.</S>
  </SECTION>
</PAPER>
