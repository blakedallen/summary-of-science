<PAPER>
  <S sid="0">A Unification Method For Disjunctive Feature Descriptions</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Although disjunction has been used in several unificationbased grammar formalisms, existing methods of unification have been unsatisfactory for descriptions containing large quantities of disjunction, because they require exponential time.</S>
    <S sid="2" ssid="2">This paper describes a method of unification by successive approximation, resulting in better average performance.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="3" ssid="1">Disjunction has been used in several unification-based grammar formalisms to represent alternative structures in descriptions of constituents.</S>
    <S sid="4" ssid="2">Disjunction is an essential component of grammatical descriptions in Kay's Functional Unification Grammar [6], and it has been proposed by Karttunen as a linguistically motivated extension to PATR-II [2].</S>
    <S sid="5" ssid="3">In previous work two methods have been used to handle disjunctive descriptions in parsing and other computational applications.</S>
    <S sid="6" ssid="4">The first method requires expanding descriptions to disjunctive normal form (DNF) so that the entire description can be interpreted as a set of structures, each of which contains no disjunction.</S>
    <S sid="7" ssid="5">This method is exemplified by Definite Clause Grammar [8], which eliminates disjunctive terms by expanding each rule containing disjunction into alternative rules.</S>
    <S sid="8" ssid="6">It is also the method used by Kay [7] in parsing FUG.</S>
    <S sid="9" ssid="7">This method works reasonably well for small grammars, but it is clearly unsatisfactory for descriptions containing more than a small number of disjunctions, because the DNF expansion requires an amount of space which is exponential in the number of disjunctions.</S>
    <S sid="10" ssid="8">The second method, developed by Karttunen [2], uses constraints on disjuncts which must be checked whenever a disjunct is modified.</S>
    <S sid="11" ssid="9">Karttunen's method is only applicable to value disjunctions (i.e. those disjunctions used to specify the value of a single feature), and it becomes complicated and inefficient when disjuncts contain non-local dependencies (i.e. values specified by path expressions denoting another feature).</S>
    <S sid="12" ssid="10">In previous research [4,5] we have shown how descriptions of feature structures can be represented by a certain type of logical formula, and that the consistency problem for disjunctive descriptions is NP-complete.</S>
    <S sid="13" ssid="11">This result indicates, according to the widely accepted mathematical assumption that P NP, that any complete unification algorithm for disjunctive descriptions will require exponential time in the worst case.</S>
    <S sid="14" ssid="12">However, this result does not preclude algorithms with better average performance, such as the method described in the remainder of this paper.</S>
    <S sid="15" ssid="13">This method overcomes the shortcomings of previously existing methods, and has the following desirable properties:</S>
  </SECTION>
  <SECTION title="2 Data Structures" number="2">
    <S sid="16" ssid="1">The most common unification methods for non-disjunctive feature structures use a directed graph (DG) representation, in which arcs are labeled by names of features, and nodes correspond to values of features.</S>
    <S sid="17" ssid="2">For an introduction to these methods, the reader is referred to Shieber's survey [11].</S>
    <S sid="18" ssid="3">In the remainder of this section we will define a data structure for disjunctive descriptions, using DG structures as a basic component.</S>
    <S sid="19" ssid="4">In the following exposition, we will carefully observe the distinction between feature structures and their descriptions, as explained in [4].</S>
    <S sid="20" ssid="5">Feature structures will be represented by DGs, and descriptions of feature structures will be represented by logical formulas of the type described in [4].</S>
    <S sid="21" ssid="6">The NIL denoting no information; TOP denoting inconsistent information; a where a E A, to describe atomic values; I : where I E L and E FDL, to describe structures in which the feature labeled by I has a value described by 0; [&lt; pi &gt;,&#8226;&#8226;&#8226;,&lt; pes &gt;I where each pi E L* , to describe an equivalence class of paths sharing a common value in a feature structure; where 0, E FDL; syntax for formulas of this feature description logic (hereafter called FDL) is given in Figure 1.1 Note, in particular, that disjunction is used in descriptions of feature structures, but not in the structures themselves.</S>
    <S sid="22" ssid="7">As we have shown (see [91) that there is a unique minimal satisfying DG structure for any nondisjunctive FDL formula, we can represent the parts of a formula which do not contain any disjunction by DGs.</S>
    <S sid="23" ssid="8">DGs are a more compact way of representing the same information that is contained in a FDL formula, provided the formula contains no disjunction.</S>
    <S sid="24" ssid="9">Let us define an unconditional conjunct to be a conjunct of a formula which contains no occurrences of disjunction.</S>
    <S sid="25" ssid="10">After path expansion any formula can be put into the form: where uconj contains no occurrences of disjunction, and each disji, for 1 &lt; i &lt; m, is a disjunction of two or more alternatives.</S>
    <S sid="26" ssid="11">The uconj part of the formula is formed by using the commutative law to bring all unconditional conjuncts of the formula together at the front.</S>
    <S sid="27" ssid="12">Of course, there may be no unconditional conjuncts in a formula, in which case uconj would be the formula NIL.</S>
    <S sid="28" ssid="13">Each disjunct may be any type of formula, so disjuncts can also be put into a similar form, with all unconditional conjuncts grouped together before all disjunctive components.</S>
    <S sid="29" ssid="14">Thus the disjunctions of a formula can be put into the form (uconji Adi sj 11 A ...Adisji.)</S>
    <S sid="30" ssid="15">V ... V (uconj.</S>
    <S sid="31" ssid="16">Adi a jy, A ...A diejny).</S>
    <S sid="32" ssid="17">The embedding of conjuncts within disjuncts is preserved, but the order of conjuncts may be changed.</S>
    <S sid="33" ssid="18">The unconditional conjuncts of a formula contain information that is more definite than the information contained in disjunctions.</S>
    <S sid="34" ssid="19">Thus a formula can be regarded as having a definite part, containing only unconditional conjuncts, and an indefinite part, containing a set of disjunctions.</S>
    <S sid="35" ssid="20">The definite part contains no disjunction, and therefore it may be represented by a DG structure.</S>
    <S sid="36" ssid="21">To encode these parts of a formula, let us define a feature-description as a type of data structure, having two components: iLet A and L be sets of symbols which are used to denote atomic values and feature labels, respectively.</S>
    <S sid="37" ssid="22">Indefinite: a SET of disjunctions, where each disjunction is a SET of feature-descriptions.</S>
    <S sid="38" ssid="23">It is possible to convert any FDL formula into a featuredescription structure by a simple automatic procedure, as described in [51.</S>
    <S sid="39" ssid="24">This conversion does not add or subtract any information from a formula, nor increase its size in any significant way.</S>
    <S sid="40" ssid="25">It simply identifies components of the formula which may be converted into a more efficient representation as DG structures.</S>
    <S sid="41" ssid="26">A feature-description is conceptually equivalent to a special kind of AND/OR graph, in which the terminal nodes are represented by DG structures.</S>
    <S sid="42" ssid="27">For example, an AND/OR graph equivalent to the formula, is shown in Figure 2.</S>
    <S sid="43" ssid="28">In the AND/OR graph representation, each AND-node represents a feature-description.</S>
    <S sid="44" ssid="29">The first outgoing arc from an AND-node represents the definite component of a feature-description, and the remaining outgoing arcs represent the indefinite component.</S>
    <S sid="45" ssid="30">Each OR-node represents a disjunction.</S>
    <S sid="46" ssid="31">Function UNIFY-DESC (f, g) Returns feature-description: where f and g are feature-descriptions.</S>
    <S sid="47" ssid="32">/.</S>
    <S sid="48" ssid="33">Unify definite components.</S>
    <S sid="49" ssid="34">Let new-def = UNIFY-DGS (f.definite, g.definite).</S>
    <S sid="50" ssid="35">If new-def = TOP, then return (failure).</S>
    <S sid="51" ssid="36">Let desc = a feature-description with: desc.definite = new-def, desc.indefinite = tindefinite U g.indefinite.</S>
    <S sid="52" ssid="37">If desc.indefinite = 0, Then return (desc); Else begin; 2.</S>
    <S sid="53" ssid="38">Check compatibility of indefinite components with new-def.</S>
    <S sid="54" ssid="39">Let new-desc = CHECK-INDEF (desc, new-def).</S>
    <S sid="55" ssid="40">If new-desc = failure, then return (failure); S. Complete ezhau.stiue consistency checking, if necessary.</S>
    <S sid="56" ssid="41">Else if new-desc.indefinite = 0 OR if complete checking is not required, Then return (new-desc); Else begin; Let n = 1.</S>
    <S sid="57" ssid="42">Repeat while n &lt; cardinality of new-desc.indefinite:</S>
  </SECTION>
  <SECTION title="3 The Algorithm: Unification by Successive Approximation" number="3">
    <S sid="58" ssid="1">In this section we will give a complete algorithm for unifying two feature-descriptions, where one or both may contain disjunction.</S>
    <S sid="59" ssid="2">This algorithm is designed so that it can be used as a relatively efficient approximation method, with an optional step to perform complete consistency checking when necessary.</S>
    <S sid="60" ssid="3">Given two feature-descriptions, the strategy of the unification algorithm is to unify the definite components of the descriptions first, and examine the compatibility of indefinite components later.</S>
    <S sid="61" ssid="4">Disjuncts are eliminated from the description when they are inconsistent with definite information.</S>
    <S sid="62" ssid="5">This strategy avoids exploring disjuncts more than once when they are inconsistent with definite information.</S>
    <S sid="63" ssid="6">The exact algorithm is described in Figure 3.</S>
    <S sid="64" ssid="7">It has three major steps.</S>
    <S sid="65" ssid="8">In the first step, the definite components of the two descriptions are unified together, producing a DG structure, new-def, which represents the definite information of the result.</S>
    <S sid="66" ssid="9">This step can be performed by existing unification algorithms for DGs.</S>
    <S sid="67" ssid="10">In the second step, the indefinite components of both descriptions are checked for compatibility with new-def, using the function CHECK-INDEF, which is defined in Figure 4.</S>
    <S sid="68" ssid="11">CHECK-INDEF uses the function CHECK-DISJ, defined in Figure 5, to check the compatibility of each disjunction with the DG structure given by the parameter cond.</S>
    <S sid="69" ssid="12">The compatibility of two DGs can be checked by almost the same procedure as unification, but the two structures being checked are not actually merged as they are in unification.</S>
    <S sid="70" ssid="13">In the third major step, if any disjunctions remain, and it is necessary to do so, disjuncts of different disjunctions are considered in groups, to check whether they are compatible together.</S>
    <S sid="71" ssid="14">This step is performed by the function NWISECONSISTENCY, defined in Figure 6.</S>
    <S sid="72" ssid="15">When the parameter n to NWISE-CONSISTENCY has the value 1, then one disjunct is checked for compatibility with all other disjunctions of the description in a pairwise manner.</S>
    <S sid="73" ssid="16">The pairwise manner of checking compatibility can be generalized to groups of any size by increasing the value of the parameter n. While this third step of the algorithm is necessary in order to insure consistency of disjunctive descriptions, it is not necessary to use it every time a description is built during a parse.</S>
    <S sid="74" ssid="17">In practice, we find that the performance of the algorithm can be tuned by using this step only at strategic points during a parse, since it is the most inefficient step of the alFunction CHECK-INDEF (desc, cond) Returns feature-description: where desc is a feature-description, and cond is a DG.</S>
    <S sid="75" ssid="18">Let indef = desc.indefinite (a set of disjunctions).</S>
    <S sid="76" ssid="19">Let new-def = desc.definite (a DG).</S>
    <S sid="77" ssid="20">Let unchecked-parts = true.</S>
    <S sid="78" ssid="21">Function CHECK-DISJ (disj, cond) Returns disjunction: where disj is a disjunction of feature-descriptions, and cond is a DG. gorithm.</S>
    <S sid="79" ssid="22">In our application, using the Earley chart parsing method, it has proved best to use NWISE-CONSISTENCY only when building descriptions for complete edges, but not when building descriptions for active edges.</S>
    <S sid="80" ssid="23">Note that two feature-descriptions do not become permanently linked when they are unified, unlike unification for DG stuctures.</S>
    <S sid="81" ssid="24">The result of unifying two descriptions is a new description, which is satisfied by the intersection of the sets of structures that satisfy the two given descriptions.</S>
    <S sid="82" ssid="25">The new description contains all the information that is contained in either of the given descriptions, subtracting any disjuncts which are no longer compatible.</S>
  </SECTION>
  <SECTION title="4 An example" number="4">
    <S sid="83" ssid="1">In order to illustrate the effect of each step of the algorithm, let us consider an example of unifying the description of a known constituent with the description of a portion of a grammar.</S>
    <S sid="84" ssid="2">This exemplifies the predominant type of structure building operation needed in a parsing program for Functional Unification Grammar.</S>
    <S sid="85" ssid="3">The example given here is deliberately simple, in order to illustrate how the algorithm works with a minimum amount of detail.</S>
    <S sid="86" ssid="4">It is not intended as an example of a linguistically motivated grammar. descriptions have been unified, and their indefinite components have been conjoined together.</S>
    <S sid="87" ssid="5">In step 2 of the algorithm each of the disjuncts of DES C.INDEFINITE is checked for compatibility with DESC.DEFINITE, using the function CHECK-INDEF.</S>
    <S sid="88" ssid="6">In this case, all disjuncts are compatible with the definite information, except for one; the disjunct of the third disjunction which contains the feature Number : Sing.</S>
    <S sid="89" ssid="7">This disjunct is eliminated, and the only remaining disjunct in the disjunction (i.e., the disjunct containing Number : PO is unified with DESC.DEFINITE.</S>
    <S sid="90" ssid="8">The result after this step is shown in Figure 9.</S>
    <S sid="91" ssid="9">The four disjuncts that remain are numbered for convenience.</S>
    <S sid="92" ssid="10">In step 3, NWISE-CONSISTENCY is used with 1 as the value of the parameter n. A new description is hypothesized by unifying disjunct (1) with the definite component of the description (i.e., NEW-DESC.DEFINITE).</S>
    <S sid="93" ssid="11">Then disjuncts (3) and (4) are checked for compatibility with this hypothesized structure: (3) is not compatible, because the values of the Transitivity features do not unify.</S>
    <S sid="94" ssid="12">Disjunct (4) is also incompatible, because it has Goal : Person : 3, and the hypothesized description has ri&lt; Subj &gt;,&lt; Goal &gt;1, along with Subj : Person : 2.</S>
    <S sid="95" ssid="13">Therefore, since there is no compatible disjunct among (3) and (4), the hypothesis that (1) is compatible with the rest of the description has been shown to be invalid, and (1) can be eliminated.</S>
    <S sid="96" ssid="14">It follows that disjunct (2) should be unified with the definite part of the description.</S>
    <S sid="97" ssid="15">Now disjuncts (3) and (4) are checked for compatibility with the definite component of the new description: (3) is no longer compatible, but (4) is compatible.</S>
    <S sid="98" ssid="16">Therefore, (3) is eliminated, and (4) is unified with the definite information.</S>
    <S sid="99" ssid="17">No disjunctions remain in the result, as shown in Figure 10.</S>
  </SECTION>
  <SECTION title="5 Complexity of the Algorithm" number="5">
    <S sid="100" ssid="1">Referring to Figure 3, note that the function UNIFY-DESC may terminate after any of the three major steps.</S>
    <S sid="101" ssid="2">After each step it may detect inconsistency between the two descriptions and terminate, returning failure, or it may terminate because no disjunctions remain in the description.</S>
    <S sid="102" ssid="3">Therefore, it is useful to examine the complexity of each of the three steps independently.</S>
    <S sid="103" ssid="4">Let n represent the total number of symbols in the combined description f A g, and d represent the total number of disjuncts (in both top-level and embedded disjunctions) contained in f A g. Step /.</S>
    <S sid="104" ssid="5">This step performs the unification of two DG structures.</S>
    <S sid="105" ssid="6">Ait-Kaci [1] has shown how this operation can be performed in almost linear time by the UNION/FIND algorithm.</S>
    <S sid="106" ssid="7">Its time complexity has an upper bound of 0(n log n).</S>
    <S sid="107" ssid="8">Since an unknown amount of a description may be contained in the definite component, this step of the algorithm also requires 0(n log it) time.</S>
    <S sid="108" ssid="9">Step 2.</S>
    <S sid="109" ssid="10">For this step we examine the complexity of the function CHECK-INDEF.</S>
    <S sid="110" ssid="11">There are two nested loops in CHECK-INDEF, each of which may be executed at most once for each disjunct in the description.</S>
    <S sid="111" ssid="12">The inner loop checks the compatibility of two DG structures, which requires no more time than unification.</S>
    <S sid="112" ssid="13">Thus, in the worst case, CHECKlNDEF requires 0(cen log n) time.</S>
    <S sid="113" ssid="14">Step 3.</S>
    <S sid="114" ssid="15">NWISE-CONSISTENCY requires at most 0(2d/2) time.</S>
    <S sid="115" ssid="16">In this step, NWISE-CONSISTENCY is called at most (d/2) &#8212; 1 times.</S>
    <S sid="116" ssid="17">Therefore, the overall complexity of step 3 is 0(2d/2).</S>
    <S sid="117" ssid="18">Discussion.</S>
    <S sid="118" ssid="19">While the worst case complexity of the entire algorithm is 0(2d), an exponential, it is significant that it often terminates before step 3, even when a large number of disjunctions are present in one of the descriptions.</S>
    <S sid="119" ssid="20">Thus, in many practical cases the actual cost of the algorithm is bounded by a polynomial that is at most d2n log it.</S>
    <S sid="120" ssid="21">Since d must be less than n, this complexity function is almost cubic.</S>
    <S sid="121" ssid="22">Even when step 3 must be used, the number of remaining disjunctions is often much fewer than d/2, so the exponent is usually a small number.</S>
    <S sid="122" ssid="23">The algorithm performs well in most cases, because the three steps are ordered in increasing complexity, and the number of disjunctions can only decrease during unification.</S>
  </SECTION>
  <SECTION title="6 Implementation" number="6">
    <S sid="123" ssid="1">The algorithm presented in the previous sections has been implemented and tested as part of a general parsing method for Systemic Functional Grammar, which is described in [3].</S>
    <S sid="124" ssid="2">The algorithm was integrated with the structure building module of the PATR-II system [101, written in the Zetalisp programming language.</S>
    <S sid="125" ssid="3">While the feature-description corresponding to a grammar may have hundreds of disjunctions, the descriptions that result from parsing a sentence usually have only a small number of disjunctions, if any at all.</S>
    <S sid="126" ssid="4">Most disjunctions in a systemic grammar represent possible alternative values that some particular feature may have (along with the grammatical consequences entailed by choosing particular values for the feature).</S>
    <S sid="127" ssid="5">In the analysis of a particular sentence most features have a unique value, and some features are not present at all.</S>
    <S sid="128" ssid="6">When disjunction remains in the description of a sentence after parsing, it usually represents ambiguity or an underspecified part of the grammar.</S>
    <S sid="129" ssid="7">With this implementation of the algorithm, sentences of up to 10 words have been parsed correctly, using a grammar which contains over 300 disjunctions.</S>
    <S sid="130" ssid="8">The time required for most sentences is in the range of 10 to 300 seconds, running on lisp machine hardware.</S>
    <S sid="131" ssid="9">The fact that sentences can be parsed at all with a grammar containing this many disjunctions indicates that the algorithm is performing much better than its theoretical worst case time of 0(2d).2 The timings, shown in Table 1, obtained from the experimental parser for systemic grammar also indicate that a dramatic increase in the number of disjunctions in the grammar does not result in an exponential increase in parse time.</S>
    <S sid="132" ssid="10">C08 is a grammar containing 98 disjunctions, 2Consider, 23&amp;quot; i:.</S>
    <S sid="133" ssid="11">28&#176;, and 280 is taken to be a rough estimate of the number of particles in the universe. and G440 is a grammar containing 440 disjunctions.</S>
    <S sid="134" ssid="12">The total time used to parse each sentence is given in seconds.</S>
  </SECTION>
  <SECTION title="7 Conclusions" number="7">
    <S sid="135" ssid="1">The unification method presented here represents a general solution to a seemingly intractable problem.</S>
    <S sid="136" ssid="2">This method has been used successfully in an experimental parser for a grammar containing several hundred disjunctions in its description.</S>
    <S sid="137" ssid="3">Therefore, we expect that it can be used as the basis for language processing systems requiring large grammatical descriptions that contain disjunctive information, and refined as necessary and appropriate for specific applications.</S>
    <S sid="138" ssid="4">While the range of speed achieved by a straightforward implementation of this algorithm is acceptable for grammar testing, even greater efficiency would be desirable (and necessary for applications demanding fast real-time performance).</S>
    <S sid="139" ssid="5">Therefore, we suggest two types of refinement to this algorithm as topics for future research: using heuristics to determine an opportune ordering of the disjuncts within a description, and using parallel hardware to implement the compatibility tests for different disjunctions.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="8">
    <S sid="140" ssid="1">I would like to thank Bill Rounds, my advisor during graduate studies at the University of Michigan, for his helpful criticism of earlier versions of the algorithm which is presented here.</S>
    <S sid="141" ssid="2">I would also like to thank Bill Mann for suggestions during its implementation at USC/ISI, and Stuart Shieber for providing help in the use of the PATR-II system.</S>
    <S sid="142" ssid="3">This research was sponsored in part by the United States Air Force Office of Scientific Research contracts FQ8671-8401007 and F49620-87-C-0005, and in part by the United States Defense Advanced Research Projects Agency under contract MDA903-81-C-0335; the opinions expressed here are solely those of the author.</S>
  </SECTION>
</PAPER>
