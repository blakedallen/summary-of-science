<PAPER>
  <S sid="0">An Empirical Study of Semi-supervised Structured Conditional Models for Dependency Parsing</S>
  <ABSTRACT>
    <S sid="1" ssid="1">This paper describes an empirical study of high-performance dependency parsers based on a semi-supervised learning approach.</S>
    <S sid="2" ssid="2">We describe an extension of semisupervised structured conditional models (SS-SCMs) to the dependency parsing problem, whose framework is originally proposed in (Suzuki and Isozaki, 2008).</S>
    <S sid="3" ssid="3">Moreover, we introduce two extensions related to dependency parsing: The first extension is to combine SS-SCMs with another semi-supervised approach, described in (Koo et al., 2008).</S>
    <S sid="4" ssid="4">The second extension is to apply the approach to secondorder parsing models, such as those described in (Carreras, 2007), using a twostage semi-supervised learning approach.</S>
    <S sid="5" ssid="5">We demonstrate the effectiveness of our proposed methods on dependency parsing experiments using two widely used test collections: the Penn Treebank for English, and the Prague Dependency Treebank for Czech.</S>
    <S sid="6" ssid="6">Our best results on test data in the above datasets achieve 93.79% parent-prediction accuracy for En</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="7" ssid="1">Recent work has successfully developed dependency parsing models for many languages using supervised learning algorithms (Buchholz and Marsi, 2006; Nivre et al., 2007).</S>
    <S sid="8" ssid="2">Semi-supervised learning methods, which make use of unlabeled data in addition to labeled examples, have the potential to give improved performance over purely supervised methods for dependency parsing.</S>
    <S sid="9" ssid="3">It is often straightforward to obtain large amounts of unlabeled data, making semi-supervised approaches appealing; previous work on semisupervised methods for dependency parsing includes (Smith and Eisner, 2007; Koo et al., 2008; Wang et al., 2008).</S>
    <S sid="10" ssid="4">In particular, Koo et al. (2008) describe a semi-supervised approach that makes use of cluster features induced from unlabeled data, and gives state-of-the-art results on the widely used dependency parsing test collections: the Penn Treebank (PTB) for English and the Prague Dependency Treebank (PDT) for Czech.</S>
    <S sid="11" ssid="5">This is a very simple approach, but provided significant performance improvements comparing with the stateof-the-art supervised dependency parsers such as (McDonald and Pereira, 2006).</S>
    <S sid="12" ssid="6">This paper introduces an alternative method for semi-supervised learning for dependency parsing.</S>
    <S sid="13" ssid="7">Our approach basically follows a framework proposed in (Suzuki and Isozaki, 2008).</S>
    <S sid="14" ssid="8">We extend it for dependency parsing, which we will refer to as a Semi-supervised Structured Conditional Model (SS-SCM).</S>
    <S sid="15" ssid="9">In this framework, a structured conditional model is constructed by incorporating a series of generative models, whose parameters are estimated from unlabeled data.</S>
    <S sid="16" ssid="10">This paper describes a basic method for learning within this approach, and in addition describes two extensions.</S>
    <S sid="17" ssid="11">The first extension is to combine our method with the cluster-based semi-supervised method of (Koo et al., 2008).</S>
    <S sid="18" ssid="12">The second extension is to apply the approach to second-order parsing models, more specifically the model of (Carreras, 2007), using a two-stage semi-supervised learning approach.</S>
    <S sid="19" ssid="13">We conduct experiments on dependency parsing of English (on Penn Treebank data) and Czech (on the Prague Dependency Treebank).</S>
    <S sid="20" ssid="14">Our experiments investigate the effectiveness of: 1) the basic SS-SCM for dependency parsing; 2) a combination of the SS-SCM with Koo et al. (2008)&#8217;s semisupervised approach (even in the case we used the same unlabeled data for both methods); 3) the twostage semi-supervised learning approach that inIn this model v1, ... , vk are scalar parameters that may be positive or negative; q1 ... qk are functions (in fact, generative models), that are trained on unlabeled data.</S>
    <S sid="21" ssid="15">The vj parameters will dictate the relative strengths of the functions q1 ... qk, and will be trained on labeled data.</S>
    <S sid="22" ssid="16">For convenience, we will use v to refer to the vector of parameters v1 ... vk, and q to refer to the set of generative models q1 ... qk.</S>
    <S sid="23" ssid="17">The full model is specified by values for w, v, and q.</S>
    <S sid="24" ssid="18">We will write p(y|x; w, v, q) to refer to the conditional distribution under parameter values w, v, q.</S>
    <S sid="25" ssid="19">We will describe a three-step parameter estimation method that: 1) initializes the q functions (generative models) to be uniform distributions, and estimates parameter values w and v from labeled data; 2) induces new functions q1 ... qk from unlabeled data, based on the distribution defined by the w, v, q values from step (1); 3) re-estimates w and v on the labeled examples, keeping the q1 .</S>
    <S sid="26" ssid="20">.</S>
    <S sid="27" ssid="21">. qk from step (2) fixed.</S>
    <S sid="28" ssid="22">The end result is a model that combines supervised training with generative models induced from unlabeled data.</S>
    <S sid="29" ssid="23">We now describe how the generative models q1 .</S>
    <S sid="30" ssid="24">.</S>
    <S sid="31" ssid="25">. qk are defined, and how they are induced from unlabeled data.</S>
    <S sid="32" ssid="26">These models make direct use of the feature-vector definition f(x, y) used in the original, fully supervised, dependency parser.</S>
    <S sid="33" ssid="27">The first step is to partition the d features in f(x, y) into k separate feature vectors, r1(x, y) ... rk(x, y) (with the result that f is the concatenation of the k feature vectors r1 ... rk).</S>
    <S sid="34" ssid="28">In our experiments on dependency parsing, we partitioned f into up to over 140 separate feature vectors corresponding to different feature types.</S>
    <S sid="35" ssid="29">For example, one feature vector rj might include only those features corresponding to word bigrams involved in dependencies (i.e., indicator functions tied to the word bigram (xm, xh) involved in a dependency (x, h, m, l)).</S>
    <S sid="36" ssid="30">We then define a generative model that assigns a probability corporates a second-order parsing model.</S>
    <S sid="37" ssid="31">In addition, we evaluate the SS-SCM for English dependency parsing with large amounts (up to 3.72 billion tokens) of unlabeled data.</S>
    <S sid="38" ssid="32">Throughout this paper we will use x to denote an input sentence, and y to denote a labeled dependency structure.</S>
    <S sid="39" ssid="33">Given a sentence x with n words, a labeled dependency structure y is a set of n dependencies of the form (h, m, l), where h is the index of the head-word in the dependency, m is the index of the modifier word, and l is the label of the dependency.</S>
    <S sid="40" ssid="34">We use h = 0 for the root of the sentence.</S>
    <S sid="41" ssid="35">We assume access to a set of labeled training examples, {xz, yz}Z_'1, and in addition a set of unlabeled examples, {xz}M1.</S>
    <S sid="42" ssid="36">In conditional log-linear models for dependency parsing (which are closely related to conditional random fields (Lafferty et al., 2001)), a distribution over dependency structures for a sentence x is defined as follows: Here f(x, h, m, l) is a feature vector representing the dependency (h, m, l) in the context of the sentence x (see for example (McDonald et al., 2005a)).</S>
    <S sid="43" ssid="37">In this paper we extend the definition of g(x, y) to include features that are induced from unlabeled data.</S>
    <S sid="44" ssid="38">Specifically, we define to the dj-dimensional feature vector rj(x, h, m, l).</S>
    <S sid="45" ssid="39">The parameters of this model are &#952;j,1 ... &#952;j,dj; they form a multinomial distribution, with the constraints that &#952;j,a &gt; 0, and Pa &#952;j,a = 1.</S>
    <S sid="46" ssid="40">This model can be viewed as a very simple (naiveBayes) model that defines a distribution over feature vectors rj E Rdj.</S>
    <S sid="47" ssid="41">The next section describes how the parameters &#952;j,a are trained on unlabeled data.</S>
    <S sid="48" ssid="42">Given parameters &#952;j,a, we can simply define the functions q1 ... qk to be log probabilities under the generative model: We modify this definition slightly, be introducing scaling factors cj,a &gt; 0, and defining In our experiments, cj,a is simply a count of the number of times the feature indexed by (j, a) appears in unlabeled data.</S>
    <S sid="49" ssid="43">Thus more frequent features have their contribution down-weighted in the model.</S>
    <S sid="50" ssid="44">We have found this modification to be beneficial.</S>
    <S sid="51" ssid="45">We now describe the method for estimating the parameters &#952;j,a of the generative models.</S>
    <S sid="52" ssid="46">We assume initial parameters w, v, q, which define a distribution p(y|x0i; w, v, q) over dependency structures for each unlabeled example x0i.</S>
    <S sid="53" ssid="47">We will re-estimate the generative models q, based on unlabeled examples.</S>
    <S sid="54" ssid="48">The likelihood function on unlabeled data is defined as where q0 j is as defined in Eq.</S>
    <S sid="55" ssid="49">3.</S>
    <S sid="56" ssid="50">This function resembles the Q function used in the EM algorithm, where the hidden labels (in our case, dependency structures), are filled in using the conditional distribution p(y|x0i; w, v, q).</S>
    <S sid="57" ssid="51">It is simple to show that the estimates &#952;j,a that maximize the function in Eq.</S>
    <S sid="58" ssid="52">5 can be defined as follows.</S>
    <S sid="59" ssid="53">First, define a vector of expected counts based on w, v, q as Note that it is straightforward to calculate these expected counts using a variant of the inside-outside algorithm (Baker, 1979) applied to the (Eisner, 1996) dependency-parsing data structures (Paskin, 2001) for projective dependency structures, or the matrix-tree theorem (Koo et al., 2007; Smith and Smith, 2007; McDonald and Satta, 2007) for nonprojective dependency structures.</S>
    <S sid="60" ssid="54">The estimates that maximize Eq.</S>
    <S sid="61" ssid="55">5 are then In a slight modification, we employ the following estimates in our model, where &#951; &gt; 1 is a parameter of the model: This corresponds to a MAP estimate under a Dirichlet prior over the &#952;j,a parameters.</S>
    <S sid="62" ssid="56">This section describes the full parameter estimation method.</S>
    <S sid="63" ssid="57">The input to the algorithm is a set of labeled examples {xi, yi}Ni=1, a set of unlabeled examples {x0i}Mi=1, a feature-vector definition f(x, y), and a partition of f into k feature vectors r1 ... rk which underly the generative models.</S>
    <S sid="64" ssid="58">The output from the algorithm is a parameter vector w, a set of generative models q1 ... qk, and parameters v1 ... vk, which define a probabilistic dependency parsing model through Eqs.</S>
    <S sid="65" ssid="59">1 and 2.</S>
    <S sid="66" ssid="60">The learning algorithm proceeds in three steps: Step 1: Estimation of a Fully Supervised Model.</S>
    <S sid="67" ssid="61">We choose the initial value q0 of the generative models to be the uniform distribution, i.e., we set &#952;j,a = 1/dj for all j, a.</S>
    <S sid="68" ssid="62">We then define the regularized log-likelihood function for the labeled examples, with the generative model fixed at q0, to be: This is a conventional regularized log-likelihood function, as commonly used in CRF models.</S>
    <S sid="69" ssid="63">The parameter C &gt; 0 dictates the level of regularization in the model.</S>
    <S sid="70" ssid="64">We define the initial parameters (w0, v0) = arg max,,v L(w, v; q0).</S>
    <S sid="71" ssid="65">These parameters can be found using conventional methods for estimating the parameters of regularized log-likelihood functions (in our case we use LBFGS (Liu and Nocedal, 1989)).</S>
    <S sid="72" ssid="66">Note that the gradient of the log-likelihood function can be calculated using the inside-outside algorithm applied to projective dependency parse structures, or the matrix-tree theorem applied to non-projective structures.</S>
    <S sid="73" ssid="67">Step 2: Estimation of the Generative Models.</S>
    <S sid="74" ssid="68">In this step, expected count vectors r1 ... rk are first calculated, based on the distribution p(y|x; w0, v0, q0).</S>
    <S sid="75" ssid="69">Generative model parameters Oj,a are calculated through the definition in Eq.</S>
    <S sid="76" ssid="70">6; these estimates define updated generative models q1j for j = 1... k through Eq.</S>
    <S sid="77" ssid="71">4.</S>
    <S sid="78" ssid="72">We refer to the new values for the generative models as q1.</S>
    <S sid="79" ssid="73">Step 3: Re-estimation of w and v. In the final step, w1 and v1 are estimated as arg max,,v L(w, v; q1) where L(w, v; q1) is defined in an analogous way to L(w, v; q0).</S>
    <S sid="80" ssid="74">Thus w and v are re-estimated to optimize log-likelihood of the labeled examples, with the generative models q1 estimated in step 2.</S>
    <S sid="81" ssid="75">The final output from the algorithm is the set of parameters (w1, v1, q1).</S>
    <S sid="82" ssid="76">Note that it is possible to iterate the method&#8212;steps 2 and 3 can be repeated multiple times (Suzuki and Isozaki, 2008)&#8212;but in our experiments we only performed these steps once.</S>
  </SECTION>
  <SECTION title="3 Extensions" number="2">
    <S sid="83" ssid="1">Koo et al. (2008) describe a semi-supervised approach that incorporates cluster-based features, and that gives competitive results on dependency parsing benchmarks.</S>
    <S sid="84" ssid="2">The method is a two-stage approach.</S>
    <S sid="85" ssid="3">First, hierarchical word clusters are derived from unlabeled data using the Brown et al. clustering algorithm (Brown et al., 1992).</S>
    <S sid="86" ssid="4">Second, a new feature set is constructed by representing words by bit-strings of various lengths, corresponding to clusters at different levels of the hierarchy.</S>
    <S sid="87" ssid="5">These features are combined with conventional features based on words and part-of-speech tags.</S>
    <S sid="88" ssid="6">The new feature set is then used within a conventional discriminative, supervised approach, such as the averaged perceptron algorithm.</S>
    <S sid="89" ssid="7">The important point is that their approach uses unlabeled data only for the construction of a new feature set, and never affects to learning algorithms.</S>
    <S sid="90" ssid="8">It is straightforward to incorporate clusterbased features within the SS-SCM approach described in this paper.</S>
    <S sid="91" ssid="9">We simply use the clusterbased feature-vector representation f(x, y) introduced by (Koo et al., 2008) as the basis of our approach.</S>
    <S sid="92" ssid="10">Previous work (McDonald and Pereira, 2006; Carreras, 2007) has shown that second-order parsing models, which include information from &#8220;sibling&#8221; or &#8220;grandparent&#8221; relationships between dependencies, can give significant improvements in accuracy over first-order parsing models.</S>
    <S sid="93" ssid="11">In principle it would be straightforward to extend the SS-SCM approach that we have described to second-order parsing models.</S>
    <S sid="94" ssid="12">In practice, however, a bottleneck for the method would be the estimation of the generative models on unlabeled data.</S>
    <S sid="95" ssid="13">This step requires calculation of marginals on unlabeled data.</S>
    <S sid="96" ssid="14">Second-order parsing models generally require more costly inference methods for the calculation of marginals, and this increased cost may be prohibitive when large quantities of unlabeled data are employed.</S>
    <S sid="97" ssid="15">We instead make use of a simple &#8216;two-stage&#8217; approach for extending the SS-SCM approach to the second-order parsing model of (Carreras, 2007).</S>
    <S sid="98" ssid="16">In the first stage, we use a first-order parsing model to estimate generative models q1 ... qk from unlabeled data.</S>
    <S sid="99" ssid="17">In the second stage, we incorporate these generative models as features within a second-order parsing model.</S>
    <S sid="100" ssid="18">More precisely, in our approach, we first train a first-order parsing model by Step 1 and 2, exactly as described in Section 2.4, to estimate w0, v0 and q1.</S>
    <S sid="101" ssid="19">Then, we substitute Step 3 as a supervised learning such as MIRA with a second-order parsing model (McDonald et al., 2005a), which incorporates q1 as a real-values features.</S>
    <S sid="102" ssid="20">We refer this two-stage approach to as two-stage SS-SCM.</S>
    <S sid="103" ssid="21">In our experiments we use the 1-best MIRA algorithm (McDonald and Pereira, 2006)1 as a (labeled data sets) and unlabeled data used in our experiments parameter-estimation method for the second-order parsing model.</S>
    <S sid="104" ssid="22">In particular, we perform the following optimizations on each update t = 1, ..., T for re-estimating w and v: where L(yi, y) represents the loss between correct output of i&#8217;th sample yi and y.</S>
    <S sid="105" ssid="23">Then, the scoring function S for each y can be defined as follows: where B represents a tunable scaling factor, and f1 and f2 represent the feature vectors of first and second-order parsing parts, respectively.</S>
  </SECTION>
  <SECTION title="4 Experiments" number="3">
    <S sid="106" ssid="1">We now describe experiments investigating the effectiveness of the SS-SCM approach for dependency parsing.</S>
    <S sid="107" ssid="2">The experiments test basic, firstorder parsing models, as well as the extensions to cluster-based features and second-order parsing models described in the previous section.</S>
    <S sid="108" ssid="3">We conducted experiments on both English and Czech data.</S>
    <S sid="109" ssid="4">We used the Wall Street Journal sections of the Penn Treebank (PTB) III (Marcus et al., 1994) as a source of labeled data for English, and the Prague Dependency Treebank (PDT) 1.0 (Haji&#711;c, 1998) for Czech.</S>
    <S sid="110" ssid="5">To facilitate comparisons with previous work, we used exactly the same training, development and test sets as those described in (McDonald et al., 2005a; McDonald et al., 2005b; McDonald and Pereira, 2006; Koo et al., 2008).</S>
    <S sid="111" ssid="6">The English dependencyparsing data sets were constructed using a standard set of head-selection rules (Yamada and Matsumoto, 2003) to convert the phrase structure syntax of the Treebank to dependency tree representations.</S>
    <S sid="112" ssid="7">We split the data into three parts: sections 02-21 for training, section 22 for development and section 23 for test.</S>
    <S sid="113" ssid="8">The Czech data sets were obtained from the predefined training/development/test partition in the PDT.</S>
    <S sid="114" ssid="9">The unlabeled data for English was derived from the Brown Laboratory for Linguistic Information Processing (BLLIP) Corpus (LDC2000T43)2, giving a total of 1,796,379 sentences and 43,380,315 tokens.</S>
    <S sid="115" ssid="10">The raw text section of the PDT was used for Czech, giving 2,349,224 sentences and 39,336,570 tokens.</S>
    <S sid="116" ssid="11">These data sets are identical to the unlabeled data used in (Koo et al., 2008), and are disjoint from the training, development and test sets.</S>
    <S sid="117" ssid="12">The datasets used in our experiments are summarized in Table 1.</S>
    <S sid="118" ssid="13">In addition, we will describe experiments that make use of much larger amounts of unlabeled data.</S>
    <S sid="119" ssid="14">Unfortunately, we have no data available other than PDT for Czech, this is done only for English dependency parsing.</S>
    <S sid="120" ssid="15">Table 2 shows the detail of the larger unlabeled data set used in our experiments, where we eliminated sentences that have more than 128 tokens for computational reasons.</S>
    <S sid="121" ssid="16">Note that the total size of the unlabeled data reaches 3.72G (billion) tokens, which is approximately 4,000 times larger than the size of labeled training data.</S>
    <S sid="122" ssid="17">In general we will assume that the input sentences include both words and part-of-speech (POS) tags.</S>
    <S sid="123" ssid="18">Our baseline features (&#8220;baseline&#8221;) are very similar to those described in (McDonald et al., 2005a; Koo et al., 2008): these features track word and POS bigrams, contextual features surrounding dependencies, distance features, and so on.</S>
    <S sid="124" ssid="19">English POS tags were assigned by MXPOST (Ratnaparkhi, 1996), which was trained on the training data described in Section 4.1.</S>
    <S sid="125" ssid="20">Czech POS tags were obtained by the following two steps: First, we used &#8216;feature-based tagger&#8217; included with the PDT3, and then, we used the method described in (Collins et al., 1999) to convert the assigned rich POS tags into simplified POS tags.</S>
    <S sid="126" ssid="21">In a second set of experiments, we make use of the feature set used in the semi-supervised approach of (Koo et al., 2008).</S>
    <S sid="127" ssid="22">We will refer to this as the &#8220;cluster-based feature set&#8221; (CL).</S>
    <S sid="128" ssid="23">The BLLIP (43M tokens) and PDT (39M tokens) unlabeled data sets shown in Table 1 were used to construct the hierarchical clusterings used within the approach.</S>
    <S sid="129" ssid="24">Note that when this feature set is used within the SSSCM approach, the same set of unlabeled data is used to both induce the clusters, and to estimate the generative models within the SS-SCM model.</S>
    <S sid="130" ssid="25">As described in section 2.2, the generative models in the SS-SCM approach are defined through a partition of the original feature vector f(x, y) into k feature vectors r1(x, y) ... rk(x, y).</S>
    <S sid="131" ssid="26">We follow a similar approach to that of (Suzuki and Isozaki, 2008) in partitioning f(x, y), where the k different feature vectors correspond to different feature types or feature templates.</S>
    <S sid="132" ssid="27">Note that, in general, we are not necessary to do as above, this is one systematic way of a feature design for this approach.</S>
    <S sid="133" ssid="28">All results presented in our experiments are given in terms of parent-prediction accuracy on unla3Training, development, and test data in PDT already contains POS tags assigned by the &#8216;feature-based tagger&#8217;. beled dependency parsing.</S>
    <S sid="134" ssid="29">We ignore the parentpredictions of punctuation tokens for English, while we retain all the punctuation tokens for Czech.</S>
    <S sid="135" ssid="30">These settings match the evaluation setting in previous work such as (McDonald et al., 2005a; Koo et al., 2008).</S>
    <S sid="136" ssid="31">We used the method proposed by (Carreras, 2007) for our second-order parsing model.</S>
    <S sid="137" ssid="32">Since this method only considers projective dependency structures, we &#8220;projectivized&#8221; the PDT training data in the same way as (Koo et al., 2008).</S>
    <S sid="138" ssid="33">We used a non-projective model, trained using an application of the matrix-tree theorem (Koo et al., 2007; Smith and Smith, 2007; McDonald and Satta, 2007) for the first-order Czech models, and projective parsers for all other models.</S>
    <S sid="139" ssid="34">As shown in Section 2, SS-SCMs with 1st-order parsing models have two tunable parameters, C and q, corresponding to the regularization constant, and the Dirichlet prior for the generative models.</S>
    <S sid="140" ssid="35">We selected a fixed value q = 2, which was found to work well in preliminary experiments.4 The value of C was chosen to optimize performance on development data.</S>
    <S sid="141" ssid="36">Note that C for supervised SCMs were also tuned on development data.</S>
    <S sid="142" ssid="37">For the two-stage SS-SCM for incorporating second-order parsing model, we have additional one tunable parameter B shown in Eq.</S>
    <S sid="143" ssid="38">8.</S>
    <S sid="144" ssid="39">This was also chosen by the value that provided the best performance on development data.</S>
    <S sid="145" ssid="40">In addition to providing results for models trained on the full training sets, we also performed experiments with smaller labeled training sets.</S>
    <S sid="146" ssid="41">These training sets were either created through random sampling or by using a predefined subset of document IDs from the labeled training data.</S>
  </SECTION>
  <SECTION title="5 Results and Discussion" number="4">
    <S sid="147" ssid="1">Table 3 gives results for the SS-SCM method under various configurations: for first and secondorder parsing models, with and without the cluster features of (Koo et al., 2008), and for varying amounts of labeled data.</S>
    <S sid="148" ssid="2">The remainder of this section discusses these results in more detail.</S>
    <S sid="149" ssid="3">We can see from the results in Table 3 that our semi-supervised approach consistently gives gains data.</S>
    <S sid="150" ssid="4">Supervised SCM (1od) and Supervised MIRA (2od) are the baseline first and second-order approaches; SS-SCM (1od) and 2-stage SS-SCM(+MIRA) (2od) are the first and second-order approaches described in this paper.</S>
    <S sid="151" ssid="5">&#8220;Baseline&#8221; refers to models without cluster-based features, &#8220;CL&#8221; refers to models which make use of cluster-based features. in performance under various sizes of labeled data.</S>
    <S sid="152" ssid="6">Note that the baseline methods that we have used in these experiments are strong baselines.</S>
    <S sid="153" ssid="7">It is clear that the gains from our method are larger for smaller labeled data sizes, a tendency that was also observed in (Koo et al., 2008).</S>
    <S sid="154" ssid="8">One important observation from the results in Table 3 is that SS-SCMs can successfully improve the performance over a baseline method that uses the cluster-based feature set (CL).</S>
    <S sid="155" ssid="9">This is in spite of the fact that the generative models within the SS-SCM approach were trained on the same unlabeled data used to induce the cluster-based features.</S>
    <S sid="156" ssid="10">Table 3 also shows the effectiveness of the twostage approach (described in Section 3.2) that integrates the SS-SCM method within a second-order parser.</S>
    <S sid="157" ssid="11">This suggests that the SS-SCM method can be effective in providing features (generative models) used within a separate learning algorithm, providing that this algorithm can make use of realvalued features.</S>
    <S sid="158" ssid="12">Figure 1 shows the dependency parsing accuracy on English as a function of the amount of unlabeled data used within the SS-SCM approach.</S>
    <S sid="159" ssid="13">(As described in Section 4.1, we have no unlabeled data other than PDT for Czech, hence this section only considers English dependency parsing.)</S>
    <S sid="160" ssid="14">We can see that performance does improve as more unlabeled data is added; this trend is seen both with and without cluster-based features.</S>
    <S sid="161" ssid="15">In addition, Table 4 shows the performance of our proposed method using 3.72 billion tokens of unlabeled data.</S>
    <S sid="162" ssid="16">Note, however, that the gain in performance as unlabeled data is added is not as sharp as might be hoped, with a relatively modest difference in performance for 43.4 million tokens vs. 3.72 billion tokens of unlabeled data.</S>
    <S sid="163" ssid="17">The main computational challenge in our approach is the estimation of the generative models q = (qi ... qk) from unlabeled data, particularly when the amount of unlabeled data used is large.</S>
    <S sid="164" ssid="18">In our implementation, on the 43M token BLLIP corpus, using baseline features, it takes about 5 hours to compute the expected counts required to estimate the parameters of the generative models on a single 2.93GHz Xeon processor.</S>
    <S sid="165" ssid="19">It takes roughly 18 days of computation to estimate the generative models from the larger (3.72 billion word) corpus.</S>
    <S sid="166" ssid="20">Fortunately it is simple to parallelize this step; our method takes a few hours on the larger data set when parallelized across around 300 separate processes.</S>
    <S sid="167" ssid="21">Note that once the generative models have been estimated, decoding with the model, or training the model on labeled data, is relatively inexpensive, essentially taking the same amount of computation as standard dependency-parsing approaches.</S>
    <S sid="168" ssid="22">Finally, Table 5 displays the final results on test data.</S>
    <S sid="169" ssid="23">There results are obtained using the best setting in terms of the development data performance.</S>
    <S sid="170" ssid="24">Note that the English dependency parsing results shown in the table were achieved using 3.72 billion tokens of unlabeled data.</S>
    <S sid="171" ssid="25">The improvements on test data are similar to those observed on the development data.</S>
    <S sid="172" ssid="26">To determine statistical significance, we tested the difference of parent-prediction error-rates at the sentence level using a paired Wilcoxon signed rank test.</S>
    <S sid="173" ssid="27">All eight comparisons shown in Table 5 are significant with p &lt; 0.01.</S>
  </SECTION>
  <SECTION title="6 Comparison with Previous Methods" number="5">
    <S sid="174" ssid="1">Table 6 shows the performance of a number of state-of-the-art approaches on the English and Czech data sets.</S>
    <S sid="175" ssid="2">For both languages our approach gives the best reported figures on these datasets.</S>
    <S sid="176" ssid="3">Our results yield relative error reductions of roughly 27% (English) and 20% (Czech) over McDonald and Pereira (2006)&#8217;s second-order supervised dependency parsers, and roughly 9% (English) and 7% (Czech) over the previous best results provided by Koo et. al.</S>
    <S sid="177" ssid="4">(2008)&#8217;s secondorder semi-supervised dependency parsers.</S>
    <S sid="178" ssid="5">Note that there are some similarities between our two-stage semi-supervised learning approach and the semi-supervised learning method introduced by (Blitzer et al., 2006), which is an extension of the method described by (Ando and Zhang, 2005).</S>
    <S sid="179" ssid="6">In particular, both methods use a two-stage approach; They first train generative models or auxiliary problems from unlabeled data, and then, they incorporate these trained models into a supervised learning algorithm as real valued features.</S>
    <S sid="180" ssid="7">Moreover, both methods make direct use of existing feature-vector definitions f(x, y) in inducing representations from unlabeled data.</S>
  </SECTION>
  <SECTION title="7 Conclusion" number="6">
    <S sid="181" ssid="1">This paper has described an extension of the semi-supervised learning approach of (Suzuki and Isozaki, 2008) to the dependency parsing problem.</S>
    <S sid="182" ssid="2">In addition, we have described extensions that incorporate the cluster-based features of Koo et al. (2008), and that allow the use of second-order parsing models.</S>
    <S sid="183" ssid="3">We have described experiments that show that the approach gives significant improvements over state-of-the-art methods for dependency parsing; performance improves when the amount of unlabeled data is increased from 43.8 million tokens to 3.72 billion tokens.</S>
    <S sid="184" ssid="4">The approach should be relatively easily applied to languages other than English or Czech.</S>
    <S sid="185" ssid="5">We stress that the SS-SCM approach requires relatively little hand-engineering: it makes direct use of the existing feature-vector representation f(x, y) used in a discriminative model, and does not require the design of new features.</S>
    <S sid="186" ssid="6">The main choice in the approach is the partitioning of f(x, y) into components r1(x, y) ... rk(x, y), which in our experience is straightforward.</S>
  </SECTION>
</PAPER>
