<PAPER>
  <S sid="0">Unsupervised Learning Of Disambiguation Rules For Part Of Speech Tagging</S>
  <ABSTRACT>
    <S sid="1" ssid="1">In this paper we describe an unsupervised learning algorithm for automatically training a rule-based part of speech tagger without using a manually tagged corpus.</S>
    <S sid="2" ssid="2">We compare this algorithm to the Baum-Welch algorithm, used for unsupervised training of stochastic taggers.</S>
    <S sid="3" ssid="3">Next, we show a method for combining unsupervised and supervised rule-based training algorithms to create a highly accurate tagger using only a small amount of manually tagged text.</S>
  </ABSTRACT>
  <SECTION title="Introduction" number="1">
    <S sid="4" ssid="1">There has recently been a great deal of work exploring methods for automatically training part of speech taggers, as an alternative to laboriously hand-crafting rules for tagging, as was done in the past [Klein and Simmons, 1963; Harris, 1962].</S>
    <S sid="5" ssid="2">Almost all of the work in the area of automatically trained taggers has explored Markov-model based part of speech tagging [Jelinek, 1985; Church, 1988; Derose, 1988; DeMarcken, 1990; Cutting et al., 1992; Kupiec, 1992; Charniak et al., 1993; Weischedel et al., 1993; Schutze and Singer, 1994; Lin et al., 1994; Elworthy, 1994; Merialdo, 19951.2 For a Markov-model based tagger, training consists of learning both lexical probabilities (P(worclItag)) and contextual probabilities (P(tagiltagi_i tagi_n)).</S>
    <S sid="6" ssid="3">Once trained, a sentence can be tagged by searching for the tag sequence that maximizes the product of lexical and contextual probabilities.</S>
    <S sid="7" ssid="4">The most accurate stochastic taggers use estimates of lexical and contextual probabilities extracted from large manually annotated corpora (eg.</S>
    <S sid="8" ssid="5">[Weischedel et al., 1993; Charniak et al., 1993]).</S>
    <S sid="9" ssid="6">It is possible to use unsupervised learning to train stochastic taggers without the need for a manually annotated corpus by using the Baum-Welch algorithm [Baum, 1972; Jelinek, 1985; Cutting et al., 1992; Kupiec, 1992; Elworthy, 1994; Merialdo, 19951.</S>
    <S sid="10" ssid="7">This algorithm works by iteratively adjusting the lexical and contextual probabilities to increase the overall probability of the training corpus.</S>
    <S sid="11" ssid="8">If no prior knowledge is available, probabilities are initially either assigned randomly or evenly distributed.</S>
    <S sid="12" ssid="9">Although less accurate than the taggers built using manually annotated corpora, the fact that they can be trained using only a dictionary listing the allowable parts of speech for each word and not needing a manually tagged corpus is a huge advantage in many situations.</S>
    <S sid="13" ssid="10">Although a number of manually tagged corpora are available (eg.</S>
    <S sid="14" ssid="11">[Francis and Kucera, 1982; Marcus et al., 1993]), training on a corpus of one type and then applying the tagger to a corpus of a different type usually results in a tagger with low accuracy [Weischedel et al., 1993].</S>
    <S sid="15" ssid="12">Therefore, if tagged text is needed in training, this would require manually tagging text each time the tagger is to be applied to a new language, and even when being applied to a new type of text.</S>
    <S sid="16" ssid="13">In [Brill, 1992; Brill, 1994], a rule-based part of speech tagger is described which achieves highly competitive performance compared to stochastic taggers, and captures the learned knowledge in a set of simple deterministic rules instead of a large table of statistics.</S>
    <S sid="17" ssid="14">In addition, the learned rules can be converted into a deterministic finite state transducer.</S>
    <S sid="18" ssid="15">Tagging with this finite state transducer requires n steps to tag a sequence of length n, independent of the number of rules, and results in a part of speech tagger ten times faster than the fastest stochastic tagger [Roche and Schabes, 1995].</S>
    <S sid="19" ssid="16">One weakness of this rulebased tagger is that no unsupervised training algorithm has been presented for learning rules automatically without a manually annotated corpus.</S>
    <S sid="20" ssid="17">In this paper we present such an algorithm.</S>
    <S sid="21" ssid="18">We describe an algorithm for both unsupervised and weakly supervised training of a rule-based part of speech tagger, and compare the performance of this algorithm to that of the Baum-Welch algorithm.</S>
  </SECTION>
  <SECTION title="Transformation-Based Error-Driven Learning" number="2">
    <S sid="22" ssid="1">The rule-based tagger is based on a learning algorithm called transformation-based errordriven learning.</S>
    <S sid="23" ssid="2">Transformation-based error-driven learning has been applied to a number of natural language problems, including part of speech tagging, prepositional phrase attachment disambiguation, speech generation and syntactic parsing [Brill, 1992; Brill, 1994; Ramshaw and Marcus, 1994; Roche and Schabes, 1995; Brill and Resnik, 1994; Huang et al., 1994; Brill, 1993a; Brill, 1993b].</S>
    <S sid="24" ssid="3">Figure 1 illustrates the learning process.</S>
    <S sid="25" ssid="4">First, unannotated text is passed through an initial-state annotator.</S>
    <S sid="26" ssid="5">The initial-state annotator can range in complexity from assigning random structure to assigning the output of a sophisticated manually created annotator.</S>
    <S sid="27" ssid="6">Once text has been passed through the initial-state annotator, it is then compared to the truth as specified in a manually annotated corpus, and transformations are learned that can be applied to the output of the initial state annotator to make it better resemble the truth.</S>
    <S sid="28" ssid="7">In all of the applications explored to date, the following greedy search is applied: at each iteration of learning, the transformation is found whose application results in the highest score; that transformation is then added to the ordered transformation list and the training corpus is updated by applying the learned transformation.</S>
    <S sid="29" ssid="8">To define a specific application of transformation-based learning, one must specify the following: Once an ordered list of transformations is learned, new text can be annotated by first applying the initial state annotator to it and then applying each of the learned transformations, in order.</S>
    <S sid="30" ssid="9">In transformation-based part of speech tagging,3 all words are initially tagged with their most likely tag, as indicated in the training corpus.</S>
    <S sid="31" ssid="10">Below are some of the transformation templates used by the learner.4 Change tag a to tag b when: percentage of all possible transformations when searching for the best one.</S>
    <S sid="32" ssid="11">An example of a learned transformation is: Change the tag of a word from VERB to NOUN if the previous word is a DETERMINER.</S>
    <S sid="33" ssid="12">If the word race occurs more frequently as a verb than as a noun in the training corpus, the initial state annotator will mistag this word as a verb in the sentence: The race was very exciting.</S>
    <S sid="34" ssid="13">The above transformation will correct this tagging error.</S>
    <S sid="35" ssid="14">It was shown in [Brill, 1994] that the transformation-based tagger achieves a high rate of tagging accuracy.</S>
    <S sid="36" ssid="15">The transformation-based tagger captures its learned information in a set of simple rules, compared to the many thousands of opaque probabilities learned by Markov-model based taggers.6 Supervised training is feasible when one has access to a large manually tagged training corpus from the same domain as that to which the trained tagger will be applied.</S>
    <S sid="37" ssid="16">We next explore unsupervised and weakly supervised training as a practical alternative when the necessary resources are not available for supervised training.</S>
    <S sid="38" ssid="17">In supervised training, the corpus is used for scoring the outcome of applying transformations, in order to find the best transformation in each iteration of learning.</S>
    <S sid="39" ssid="18">In order to derive an unsupervised version of the learner, an objective function must be found for training that does not need a manually tagged corpus.</S>
    <S sid="40" ssid="19">We begin our exploration providing the training algorithm with a minimal amount of initial knowledge, namely knowing the allowable tags for each word, and nothing else.7 The relative likelihoods of tags for words is not known, nor is any information about which tags are likely to appear in which contexts.</S>
    <S sid="41" ssid="20">This would correspond to the knowledge that could be extracted from an on-line dictionary or through morphological and distributional analysis.</S>
    <S sid="42" ssid="21">The unsupervised rule learning algorithm is based on the following simple idea.</S>
    <S sid="43" ssid="22">Given the sentence: The can will be crushed. with no information beyond the dictionary entry for the word can, the best we can do is randomly guess between the possible tags for can in this context.</S>
    <S sid="44" ssid="23">However, using an unannotated corpus and a dictionary, it could be discovered that of the words that appear after The in the corpus that have only one possible tag listed in the dictionary, nouns are much more common than verbs or modals.</S>
    <S sid="45" ssid="24">From this the following rule could be learned: Change the tag of a word from (modal OR noun OR verb) to noun if the previous word is The.</S>
    <S sid="46" ssid="25">To fully define the learner, we must specify the three components of the learner: the initial state annotator, the set of transformation templates, and the scoring criterion.</S>
    <S sid="47" ssid="26">Initial State Annotator The unsupervised learner begins with an unannotated text corpus, and a dictionary listing words and the allowable part of speech tags for each word.</S>
    <S sid="48" ssid="27">The tags are not listed in any particular order.</S>
    <S sid="49" ssid="28">The initial state annotator tags each word in the corpus with a list of all allowable tags.</S>
    <S sid="50" ssid="29">Below is an example of the initial-state tagging of a sentence from the Penn Treebank [Marcus et al., 1993], where an underscore is to be read as or.8 Rival/JJ_NNP gangs/NNS have/VB_VBP turned/VBD_VBN cities/NNS into/IN combat/NN_VB zones/NNS ./.</S>
    <S sid="51" ssid="30">Transformation Templates The learner currently has four transformation templates.</S>
    <S sid="52" ssid="31">They are: Change the tag of a word from x to Y if: Transformations are used differently in the unsupervised learner than in the supervised learner.</S>
    <S sid="53" ssid="32">Here, a transformation will reduce the uncertainty as to the correct tag of a word in a particular context, instead of changing one tag to another.</S>
    <S sid="54" ssid="33">So all learned transformations will have the form: Change the tag of a word from x to Y in context C where x is a set of two or more part of speech tags, and Y- is a single part of speech tag, such that Y E X.</S>
    <S sid="55" ssid="34">Below we list some transformations that were actually learned by the system.</S>
    <S sid="56" ssid="35">Change the tag: From NN_VB_VBP to VBP if the previous tag is NNS From NN_VB to VB if the previous tag is MD From JJ_NNP to JJ if the following tag is NNS Scoring Criterion When using supervised transformation-based learning to train a part of speech tagger, the scoring function is just the tagging accuracy that results from applying a transformation.</S>
    <S sid="57" ssid="36">With unsupervised learning, the learner does not have a gold standard training corpus with which accuracy can be measured.</S>
    <S sid="58" ssid="37">Instead, we can try to use information from the distribution of unambiguous words to find reliable disambiguating contexts.</S>
    <S sid="59" ssid="38">In each learning iteration, the score of a transformation is computed based on the current tagging of the training set.</S>
    <S sid="60" ssid="39">Recall that this is completely unsupervised.</S>
    <S sid="61" ssid="40">Initially, each word in the training set is tagged with all tags allowed for that word, as indicated in the dictionary.</S>
    <S sid="62" ssid="41">In later learning iterations, the training set is transformed as a result of applying previously learned transformations.</S>
    <S sid="63" ssid="42">To score the transformation: Change the tag of a word from x to Y in context C, where Y E x, we do the following.</S>
    <S sid="64" ssid="43">For each tag Z E X, where freq(Y) is the number of occurrences of words unambiguously tagged with tag Y in the corpus, freq(Z) is the number of occurrences of words unambiguously tagged with tag Z in the corpus, and incontext(Z,C) is the number of times a word unambiguously tagged with tag Z occurs in context C in the training corpus.9 Then the score for the transformation Change the tag of a word from x to Y in context Cis: incontext(Y,C)&#8212; freq(Y)I freq(R)* incontext(R,C) A good transformation for removing the part of speech ambiguity of a word is one for which one of the possible tags appears much more frequently as measured by unambiguously tagged words than all others in the context, after adjusting for the differences in relative frequency between the different tags.</S>
    <S sid="65" ssid="44">The objective function for this transformation measures this by computing the difference between the number of unambiguous instances of tag Y in context C and the number of unambiguous instances of the most likely tag R in context C, where R E x, R Y, adjusting for relative frequency.</S>
    <S sid="66" ssid="45">In each learning iteration, the learner searches for the transformation which maximizes this function.</S>
    <S sid="67" ssid="46">Learning stops when no positive scoring transformations can be found.</S>
    <S sid="68" ssid="47">To test the effectiveness of the above unsupervised learning algorithm, we ran a number of experiments using two different corpora and part of speech tag sets: the Penn Treebank Wall Street Journal Corpus [Marcus et al., 19931 and the original Brown Corpus [Francis and Kucera, 1982].</S>
    <S sid="69" ssid="48">First, a dictionary was created listing all possible tags for each word in the corpus.</S>
    <S sid="70" ssid="49">This means that the test set contains no unknown words.</S>
    <S sid="71" ssid="50">We have set up the experiments in this way to facilitate comparisons with results given in other papers, where the same was done.</S>
    <S sid="72" ssid="51">&#176;An example of a context is: the previous tag is a determiner.</S>
    <S sid="73" ssid="52">In this experiment, a training set of 120,000 words and a separate test set of 200,000 words were used.</S>
    <S sid="74" ssid="53">We measure the accuracy of the tagger by comparing text tagged by the trained tagger to the gold standard manually annotated corpus.</S>
    <S sid="75" ssid="54">In the case where the tag of a word is not fully disambiguated by the tagger, a single tag is randomly chosen from the possible tags, and this tag is then compared to the gold standard.</S>
    <S sid="76" ssid="55">Initial state tagging accuracy on the training set is 90.7%.</S>
    <S sid="77" ssid="56">After learning 1,151 transformations, training set accuracy increases to 95.0%.</S>
    <S sid="78" ssid="57">Initial state tagging accuracy on the test set is also 90.7%.</S>
    <S sid="79" ssid="58">Accuracy increases to 95.1% after applying the learned transformations.</S>
    <S sid="80" ssid="59">Figure 2 shows test set tagging accuracy as a function of transformation number.</S>
    <S sid="81" ssid="60">In figure 3, we plot the difference between training and test set accuracies after the application of each transformation, including a smoothed curve.10 Notice that there is no overtraining: the difference in accuracies on training and test set remain within a very narrow range throughout, with test set accuracy exceeding training set accuracy by a small margin.</S>
    <S sid="82" ssid="61">Overtraining did not occur when using the original Brown Corpus either.</S>
    <S sid="83" ssid="62">When training a stochastic tagger using the Baum-Welch algorithm, overtraining often does occur [Merialdo, 1995; Elworthy, 1994], requiring an additional held-out training corpus for determining an appropriate number of training iterations.</S>
    <S sid="84" ssid="63">In this experiment, we also used a training set of 120,000 words and a separate test set of 200,000 words.</S>
    <S sid="85" ssid="64">Initial state tagging accuracy on the training set is 89.8%.</S>
    <S sid="86" ssid="65">After learning 1,729 transformations and applying them to the training set, accuracy increases to 95.6%.</S>
    <S sid="87" ssid="66">Initial state tagging accuracy on the test set is 89.9%, with accuracy increasing to 95.6% after applying the learned transformations.</S>
    <S sid="88" ssid="67">Expanding the training set to 350,000 words and testing on the same test set, accuracy increases to 96.0%.</S>
    <S sid="89" ssid="68">All unsupervised learning results are summarized in table 1.</S>
    <S sid="90" ssid="69">In [Merialdo, 1995], tagging experiments are described training a tagger using the BaumWelch algorithm with a dictionary constructed as described above and an untagged corpus.</S>
    <S sid="91" ssid="70">Experiments were run on Associated Press articles which were manually tagged at the University of Lancaster.</S>
    <S sid="92" ssid="71">When training on one million words of text, test set accuracy peaks at 86.6%.</S>
    <S sid="93" ssid="72">In [Elworthy, 1994], similar experiments were run.</S>
    <S sid="94" ssid="73">There, a peak accuracy of 92.0% was attained using the LOB corpus.&amp;quot; Using the Penn Treebank corpus, a peak accuracy of 83.6% resulted.</S>
    <S sid="95" ssid="74">These results are significantly lower than the results achieved using unsupervised transformation-based learning.</S>
    <S sid="96" ssid="75">In [Kupiec, 1992] a novel twist to the Baum-Welch algorithm is presented, where instead of having contextual probabilities for a tag following one or more previous tags, words are pooled into equivalence classes, where all words in an equivalence class have the same set of allowable part of speech assignments.</S>
    <S sid="97" ssid="76">Using these equivalence classes greatly reduces the number of parameters that need to be estimated.</S>
    <S sid="98" ssid="77">Kupiec ran experiments using the original Brown Corpus.</S>
    <S sid="99" ssid="78">When training on 440,000 words, test set accuracy was 95.7%, excluding punctuation.</S>
    <S sid="100" ssid="79">As shown above, test set accuracy using the transformation-based algorithm described in this paper gives an accuracy of 96.0% when trained on 350,000 words.</S>
    <S sid="101" ssid="80">Excluding punctuation, this accuracy is 95.6%.</S>
    <S sid="102" ssid="81">Note that since the Baum-Welch algorithm frequently overtrains, a tagged text would be necessary to figure out what training iteration gives peak performance.</S>
    <S sid="103" ssid="82">We have explored a method of training a transformation-based tagger when no information is known other than a list of possible tags for each word.</S>
    <S sid="104" ssid="83">Next we explore weakly supervised learning, where a small amount of human intervention is permitted.</S>
    <S sid="105" ssid="84">With Markov-model based taggers, there have been two different methods proposed for adding knowledge to a tagger trained using the Baum-Welch algorithm.</S>
    <S sid="106" ssid="85">One method is to manually alter the tagging model, based on human error analysis.</S>
    <S sid="107" ssid="86">This method is employed in [Kupiec, 1992; Cutting et al., 1992].</S>
    <S sid="108" ssid="87">Another approach is to obtain the initial probabilities for the model directly from a manually tagged corpus instead of using random or evenly distributed initial probabilities, and then adjust these probabilities using the Baum-Welch algorithm and an untagged corpus.</S>
    <S sid="109" ssid="88">This approach is described in [Merialdo, 1995; Elworthy, 1994].</S>
    <S sid="110" ssid="89">A tagged corpus can also be used to improve the accuracy of unsupervised transformationbased learning.</S>
    <S sid="111" ssid="90">A transformation-based system is a processor and not a classifier.</S>
    <S sid="112" ssid="91">Being a processor, it can be applied to the output of any initial state annotator.</S>
    <S sid="113" ssid="92">As mentioned above, in the supervised transformation-based tagger described in [Brill, 1994], each word is initially tagged with its most likely tag.</S>
    <S sid="114" ssid="93">Here, we use the trained unsupervised part of speech tagger as the initial state annotator for a supervised learner.</S>
    <S sid="115" ssid="94">Transformations will then be learned to fix errors made by the unsupervised learner.</S>
    <S sid="116" ssid="95">As shown in figure 4, unannotated text is -first passed through the unsupervised initial-state annotator, where each word is assigned a list of all allowable tags.</S>
    <S sid="117" ssid="96">The output of this tagger is then passed to the unsupervised learner, which learns an ordered list of transformations.</S>
    <S sid="118" ssid="97">The initialstate annotator and learned unsupervised transformations are then applied to unannotated text, which is then input to the supervised learner, along with the corresponding manually tagged corpus.</S>
    <S sid="119" ssid="98">The supervised learner learns a second ordered list of transformations.</S>
    <S sid="120" ssid="99">Once the system is trained, fresh text is tagged by first passing it through the unsupervised initial state annotator, then applying each of the unsupervised transformations, in order, and then applying each of the supervised transformations, in order.</S>
    <S sid="121" ssid="100">The advantage of combining unsupervised and supervised learning over using supervised 11[Elworthy, 1994] quotes accuracy on ambiguous words, which we have converted to overall accuracy. learning alone is that the combined approach allows us to utilize both tagged and untagged text in training.</S>
    <S sid="122" ssid="101">Since manually tagged text is costly and time-consuming to generate, it is often the case that when there is a corpus of manually tagged text available there will also be a much larger amount of untagged text available, a resource not utilized by purely supervised training algorithms.</S>
    <S sid="123" ssid="102">One significant difference between this approach and that taken in using the BaumWelch algorithm is that here the supervision influences the learner after unsupervised training, whereas when using tagged text to bias the initial probabilities for Baum-Welch training, supervision influences the learner prior to unsupervised training.</S>
    <S sid="124" ssid="103">The latter approach has the potential weakness of unsupervised training erasing what was learned from the manually annotated corpus.</S>
    <S sid="125" ssid="104">For example, in [Merialdo, 1995], extracting probability estimates from a 50,000 word manually tagged corpus gave a test set accuracy of 95.4%.</S>
    <S sid="126" ssid="105">After applying ten iterations of the Baum-Welch algorithm, accuracy dropped to 94.4%.</S>
    <S sid="127" ssid="106">Using the transformations learned in the above unsupervised training experiment run on the Penn Treebank, we apply these transformations to a separate training corpus.</S>
    <S sid="128" ssid="107">New supervised transformations are then learned by comparing the tagged corpus that results from applying these transformations with the correct tagging, as indicated in the manually annotated training corpus.</S>
    <S sid="129" ssid="108">In table 2, we show tagging accuracy on a separate test set using different sizes of manually annotated corpora.</S>
    <S sid="130" ssid="109">In each case, a 120,000 word untagged corpus was used for initial unsupervised training.</S>
    <S sid="131" ssid="110">This table also gives results from supervised training using the annotated corpus, without any prior unsupervised training.12 In all cases, the combined training outperformed the purely supervised training at no added cost in terms of annotated training text.</S>
    <S sid="132" ssid="111">Conclusions In this paper, we have presented a new algorithm for unsupervised training of a rule-based part of speech tagger.</S>
    <S sid="133" ssid="112">The rule-based tagger trained using this algorithm significantly outperforms the traditional method of applying the Baum-Welch algorithm for unsupervised training of a stochastic tagger, and achieves comparable performance to a class-based BaumWelch training algorithm.</S>
    <S sid="134" ssid="113">In addition, we have shown that by combining unsupervised and supervised learning, we can obtain a tagger that significantly outperforms a tagger trained using purely supervised learning.</S>
    <S sid="135" ssid="114">We are encouraged by these results, and expect an improvement in performance when the number of transformation templates provided to the unsupervised learner increases beyond the four currently used.</S>
    <S sid="136" ssid="115">We have also demonstrated that overtraining, a problem in Baum-Welch training, is not a problem in transformationbased learning.</S>
  </SECTION>
</PAPER>
