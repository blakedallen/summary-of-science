<PAPER>
  <S sid="0">Efficient Parsing For Bilexical Context-Free Grammars And Head Automaton Grammars</S>
  <ABSTRACT>
    <S sid="1" ssid="1">stochastic parsers use grammars, where each word type idiosyncratically prefers particular complements with parhead words.</S>
    <S sid="2" ssid="2">We present parsing algorithms for two bilexical formalisms, improvthe prior upper bounds of For a comspecial case that was known to allow (Eisner, 1997), we present an algorithm with an improved grammar constant.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="3" ssid="1">Lexicalized grammar formalisms are of both theoretical and practical interest to the computational linguistics community.</S>
    <S sid="4" ssid="2">Such formalisms specify syntactic facts about each word of the language&#8212;in particular, the type of arguments that the word can or must take.</S>
    <S sid="5" ssid="3">Early mechanisms of this sort included categorial grammar (Bar-Hillel, 1953) and subcategorization frames (Chomsky, 1965).</S>
    <S sid="6" ssid="4">Other lexicalized formalisms include (Schabes et al., 1988; Mel'euk, 1988; Pollard and Sag, 1994).</S>
    <S sid="7" ssid="5">Besides the possible arguments of a word, a natural-language grammar does well to specify possible head words for those arguments.</S>
    <S sid="8" ssid="6">&amp;quot;Convene&amp;quot; requires an NP object, but some NPs are more semantically or lexically appropriate here than others, and the appropriateness depends largely on the NP's head (e.g., &amp;quot;meeting&amp;quot;).</S>
    <S sid="9" ssid="7">We use the general term bilexical for a grammar that records such facts.</S>
    <S sid="10" ssid="8">A bilexical grammar makes many stipulations about the compatibility of particular pairs of words in particular roles.</S>
    <S sid="11" ssid="9">The acceptability of &amp;quot;Nora convened the * The authors were supported respectively under ARPA Grant N6600194-C-6043 &amp;quot;Human Language Technology&amp;quot; and Ministero dell'Universita e della Ricerca Scientifica e Tecnologica project &amp;quot;Methodologies and Tools of High Performance Systems for Multimedia Applications.&amp;quot; party&amp;quot; then depends on the grammar writer's assessment of whether parties can be convened.</S>
    <S sid="12" ssid="10">Several recent real-world parsers have improved state-of-the-art parsing accuracy by relying on probabilistic or weighted versions of bilexical grammars (Alshawi, 1996; Eisner, 1996; Charniak, 1997; Collins, 1997).</S>
    <S sid="13" ssid="11">The rationale is that soft selectional restrictions play a crucial role in disambiguation.1 The chart parsing algorithms used by most of the above authors run in time 0(n5), because bilexical grammars are enormous (the part of the grammar relevant to a length-n input has size 0(n2) in practice).</S>
    <S sid="14" ssid="12">Heavy probabilistic pruning is therefore needed to get acceptable runtimes.</S>
    <S sid="15" ssid="13">But in this paper we show that the complexity is not so bad after all: grammars where an 0(n3) algorithm was previously known (Eisner, 1997), the grammar constant can be reduced without harming the 0(n3) property.</S>
    <S sid="16" ssid="14">Our algorithmic technique throughout is to propose new kinds of subderivations that are not constituents.</S>
    <S sid="17" ssid="15">We use dynamic programming to assemble such subderivations into a full parse.</S>
  </SECTION>
  <SECTION title="2 Notation for context-free grammars" number="2">
    <S sid="18" ssid="1">The reader is assumed to be familiar with context-free grammars.</S>
    <S sid="19" ssid="2">Our notation follows (Harrison, 1978; Hoperoft and Ullman, 1979).</S>
    <S sid="20" ssid="3">A context-free grammar (CFG) is a tuple G = (VN, VT , P, S), where VN and VT are finite, disjoint sets of nonterminal and terminal symbols, respectively, and S E VN is the start symbol.</S>
    <S sid="21" ssid="4">Set P is a finite set of productions having the form A &#8212;* a, where A E VN , a E (VN U VT)*.</S>
    <S sid="22" ssid="5">If every production in P has the form A &#8212;4 BC or A a, for A, B,C E VN , a E VT, then the grammar is said to be in Chomsky Normal Form (CNF).2 Every language that can be generated by a CFG can also be generated by a CFG in CNF.</S>
    <S sid="23" ssid="6">In this paper we adopt the following conventions: a, b, c, d denote symbols in VT, w, X, y denote strings in Vat, and a, 0, denote strings in (VN U VT)*.</S>
    <S sid="24" ssid="7">The input to the parser will be a CFG G together with a string of terminal symbols to be parsed, w = d1d2 &#8226; &#8226; &#8226; dn.</S>
    <S sid="25" ssid="8">Also h,i, j,k denote positive integers, which are assumed to be &lt; n when we are treating them as indices into w. We write wzo for the input substring di &#8226; &#8226; &#8226; di (and put wj = e for i &gt; j).</S>
    <S sid="26" ssid="9">A &amp;quot;derives&amp;quot; relation, written is associated with a CFG as usual.</S>
    <S sid="27" ssid="10">We also use the reflexive and transitive closure of written and define L(G) accordingly.</S>
    <S sid="28" ssid="11">We write a 8 =* a-0 for a derivation in which only /3 is rewritten.</S>
  </SECTION>
  <SECTION title="3 Bilexical context-free grammars" number="3">
    <S sid="29" ssid="1">We introduce next a grammar formalism that captures lexical dependencies among pairs of words in VT.</S>
    <S sid="30" ssid="2">This formalism closely resembles stochastic grammatical formalisms that are used in several existing natural language processing systems (see &#167;1).</S>
    <S sid="31" ssid="3">We will specify a nonstochastic version, noting that probabilities or other weights may be attached to the rewrite rules exactly as in stochastic CFG (Gonzales and Thomason, 1978; Wetherell, 1980).</S>
    <S sid="32" ssid="4">(See &#167;4 for brief discussion.)</S>
    <S sid="33" ssid="5">Suppose G = (VN, VT , P,T[$]) is a CFG in CNF.3 We say that G is bilexical if there exists a set of &amp;quot;delexicalized nonterminals&amp;quot; VD such that VN = {A[a] : A E VD, a E VT} and every production in P has one of the following forms: Thus every nonterminal is lexicalized at some terminal a.</S>
    <S sid="34" ssid="6">A constituent of nonterminal type A[a] is said to have terminal symbol a as its lexical head, &amp;quot;inherited&amp;quot; from the constituent's head child in the parse tree (e.g., C[a]).</S>
    <S sid="35" ssid="7">Notice that the start symbol is necessarily a lexicalized nonterminal, T[$].</S>
    <S sid="36" ssid="8">Hence $ appears in every string of L(G); it is usually convenient to define G so that the language of interest is actually L' (G) = {x : x$ E L (G)} Such a grammar can encode lexically specific preferences.</S>
    <S sid="37" ssid="9">For example, P might contain the productions in order to allow the derivation VP[solve] solve two puzzles, but meanwhile omit the similar productions since puzzles are not edible, a goat is not solvable, &amp;quot;sleep&amp;quot; is intransitive, and &amp;quot;goat&amp;quot; cannot take plural determiners.</S>
    <S sid="38" ssid="10">(A stochastic version of the grammar could implement &amp;quot;soft preferences&amp;quot; by allowing the rules in the second group but assigning them various low probabilities.)</S>
    <S sid="39" ssid="11">The cost of this expressiveness is a very large grammar.</S>
    <S sid="40" ssid="12">Standard context-free parsing algorithms are inefficient in such a case.</S>
    <S sid="41" ssid="13">The CKY algorithm (Younger, 1967; Aho and Ullman, 1972) is time 0(n3- IPI), where in the worst case I P1 = IVNI3 (one ignores unary productions).</S>
    <S sid="42" ssid="14">For a bilexical grammar, the worst case is IPI = VD I 3 ' I VT12, which is large for a large vocabulary VT. We may improve the analysis somewhat by observing that when parsing d1 &#8226; &#8226; &#8226; dn, the CKY algorithm only considers nonterminals of the form A[di]; by restricting to the relevant productions we obtain 0(n3 &#8226; IVDI3 &#8226; min(n, IVTI)2)&#8226; We observe that in practical applications we always have n &lt; IVTI&#8226; Let us then restrict our analysis to the (infinite) set of input instances of the parsing problem that satisfy relation n &lt; WTI.</S>
    <S sid="43" ssid="15">With this assumption, the asymptotic time complexity of the CKY algorithm becomes 0(n5 &#8226; IVD13).</S>
    <S sid="44" ssid="16">In other words, it is a factor of n2 slower than a comparable non-lexicalized CFG.</S>
  </SECTION>
  <SECTION title="4 Bilexical CFG in time 0(n4)" number="4">
    <S sid="45" ssid="1">In this section we give a recognition algorithm for bilexical CNF context-free grammars, which runs in time 0(n4 &#8226; max(p, IVO)) 0(n4 &#8226; VDI).</S>
    <S sid="46" ssid="2">Here p is the maximum number of productions sharing the same pair of terminal symbols (e.g., the pair (b, a) in production (1)).</S>
    <S sid="47" ssid="3">The new algorithm is asymptotically more efficient than the CKY algorithm, when restricted to input instances satisfying the relation n &lt; IVTI.</S>
    <S sid="48" ssid="4">Where CKY recognizes only constituent substrings of the input, the new algorithm can recognize three types of subderivations, shown and described in Figure 1(a).</S>
    <S sid="49" ssid="5">A declarative specification of the algorithm is given in Figure 1(b).</S>
    <S sid="50" ssid="6">The derivability conditions of (a) are guaranteed by (b), by induction, and the correctness of the acceptance condition (see caption) follows.</S>
    <S sid="51" ssid="7">This declarative specification, like CKY, may be implemented by bottom-up dynamic programming.</S>
    <S sid="52" ssid="8">We sketch one such method.</S>
    <S sid="53" ssid="9">For each possible item, as shown in (a), we maintain a bit (indexed by the parameters of the item) that records whether the item has been derived yet.</S>
    <S sid="54" ssid="10">All these bits are initially zero.</S>
    <S sid="55" ssid="11">The algorithm makes a single pass through the possible items, setting the bit for each if it can be derived using any rule in (b) from items whose bits are already set.</S>
    <S sid="56" ssid="12">At the end of this pass it is straightforward to test whether to accept w (see caption).</S>
    <S sid="57" ssid="13">The pass considers the items in increasing order of width, where the width of an item in (a) is defined as max{h, j} &#8212; min{h, j}.</S>
    <S sid="58" ssid="14">Among items of the same width, those of type .L should be considered last.</S>
    <S sid="59" ssid="15">The algorithm requires space proportional to the number of possible items, which is at most n3IVD12.</S>
    <S sid="60" ssid="16">Each of the five rule templates can instantiate its free variables in at most n4p or (for COMPLETE rules) n41VD12 different ways, each of which is tested once and in constant time; so the runtime is 0(n4 max(P, IVO)).</S>
    <S sid="61" ssid="17">By comparison, the CKY algorithm uses only the first type of item, and relies on rules whose inputs are pairs Such rules can be instantiated in 0(n5) different ways for a fixed grammar, yielding 0(n5) time complexity.</S>
    <S sid="62" ssid="18">The new algorithm saves a factor of n by combining those two constituents in two steps, one of which is insensitive to k and abstracts over its possible values, the other of which is insensitive to h' and abstracts over its possible values.</S>
    <S sid="63" ssid="19">It is straightforward to turn the new 0(n4) recognition algorithm into a parser for stochastic bilexical CFCs (or other weighted bilexical CFGs).</S>
    <S sid="64" ssid="20">In a stochastic CFG, each nonterminal A[a] is accompanied by a probability distribution over productions of the form A[a] &#8212;&gt; a.</S>
    <S sid="65" ssid="21">A parse is just a derivation (proof tree) of lhn and its probability&#8212;like that of any derivation we find&#8212;is defined as the product of the probabilities of all productions used to condition inference rules in the proof tree.</S>
    <S sid="66" ssid="22">The highestprobability derivation for any item can be reconstructed recursively at the end of the parse, provided that each item maintains not only a bit indicating whether it can be derived, but also the probability and instantiated root rule of its highest-probability derivation tree.</S>
  </SECTION>
  <SECTION title="5 A more efficient variant" number="5">
    <S sid="67" ssid="1">We now give a variant of the algorithm of &#167;4; the variant has the same asymptotic complexity but will often be faster in practice.</S>
    <S sid="68" ssid="2">Notice that the ATTACH-LEFT rule of Figure 1(b) tries to combine the nonterminal label B[dhd of a previously derived constituent with every possible nonterminal label of the form C[dh].</S>
    <S sid="69" ssid="3">The improved version, shown in Figure 2, restricts C[dh] to be the label of a previously derived adjacent constituent.</S>
    <S sid="70" ssid="4">This improves speed if there are not many such constituents and we can enumerate them in 0(1) time apiece (using a sparse parse table to store the derived items).</S>
    <S sid="71" ssid="5">It is necessary to use an agenda data structure (Kay, 1986) when implementing the declarative algorithm of Figure 2.</S>
    <S sid="72" ssid="6">Deriving narrower items before wider ones as before will not work here because the rule HALVE derives narrow items from wide ones.</S>
  </SECTION>
  <SECTION title="6 Multiple word senses" number="6">
    <S sid="73" ssid="1">Rather than parsing an input string directly, it is often desirable to parse another string related by a (possibly stochastic) transduction.</S>
    <S sid="74" ssid="2">Let T be a finite-state transducer that maps a morpheme sequence w E Vit to its orthographic realization, a grapheme sequence fo T may realize arbitrary morphological processes, including affixation, local clitic movement, deletion of phonological nulls, forbidden or dispreferred k-grams, typographical errors, and mapping of multiple senses onto the same grapheme.</S>
    <S sid="75" ssid="3">Given grammar G and an input ti), we ask whether E T(L(G)).</S>
    <S sid="76" ssid="4">We have extended all the algorithms in this paper to this case: the items simply keep track of the transducer state as well.</S>
    <S sid="77" ssid="5">Due to space constraints, we sketch only the special case of multiple senses.</S>
    <S sid="78" ssid="6">Suppose that the input is iD= d1 &#8226; &#8226; &#8226; dn, and each d2 has up to g possible senses.</S>
    <S sid="79" ssid="7">Each item now needs to track its head's sense along with its head's position in ID.</S>
    <S sid="80" ssid="8">Wherever an item formerly recorded a head position h (similarly h'), it must now record a pair (h, dh), where dh E VT is a specific sense of dh.</S>
    <S sid="81" ssid="9">No rule in Figures 1-2 (or Figure 3 below) will mention more than two such pairs.</S>
    <S sid="82" ssid="10">So the time complexity increases by a factor of 0(g2).</S>
    <S sid="83" ssid="11">7 Head automaton grammars in time 0(n4) In this section we show that a length-n string generated by a head automaton grammar (Alshawi, 1996) can be parsed in time 0(n4).</S>
    <S sid="84" ssid="12">We do this by providing a translation from head automaton grammars to bilexical CFGs.4 This result improves on the head-automaton parsing algorithm given by Alshawi, which is analogous to the CKY algorithm on bilexical CFGs and is likewise 0(n5) in practice (see &#167;3).</S>
    <S sid="85" ssid="13">A head automaton grammar (HAG) is a function H : a 1-4 Ha that defines a head automaton (HA) for each element of its (finite) domain.</S>
    <S sid="86" ssid="14">Let VT = domain(H) and D = A single head automaton is an acceptor for a language of string pairs (zi, zr) E V x V. Informally, if b is the leftmost symbol of Zr and q' E a(q, b, -4), then Ha can move from state q to state q', matching symbol b and removing it from the left end of Zr.</S>
    <S sid="87" ssid="15">Symmetrically, if b is the rightmost symbol of zi and q' E Sa(q,b,&lt;---) then from q Ha can move to q', matching symbol b and removing it from the right end of z1.5 More formally, we associate with the head automaton Ha a &amp;quot;derives&amp;quot; relation ha, defined as a binary relation on Qa X 1 /4 X V. .</S>
    <S sid="88" ssid="16">For every q E Q, x,y E V, b E VT, de D, and q' E &amp;(q, b, d), we specify that The reflexive and transitive closure of ha is written Ha*.</S>
    <S sid="89" ssid="17">The language generated by Ha is the set We may now define the language generated by the entire grammar H. To generate, we expand the start word $ E VT into x$y for some (x, y) E L (Hs), and then recursively expand the words in strings x and y.</S>
    <S sid="90" ssid="18">More formally, given H, we simultaneously define La for all a E VT to be minimal such that if (x, y) E L(H a), x' e Lx, y' E Ly, then x'ayi E La, where stands for the concatenation language Lai &#8226; &#8226; Lai,.</S>
    <S sid="91" ssid="19">Then H generates language L. We next present a simple construction that transforms a HAG H into a bilexical CFG G generating the same language.</S>
    <S sid="92" ssid="20">The construction also preserves derivation ambiguity.</S>
    <S sid="93" ssid="21">This means that for each string w, there is a lineartime 1-to-1 mapping between (appropriately de5 Alshawi (1996) describes HAs as accepting (or equivalently, generating) zi and z from the outside in.</S>
    <S sid="94" ssid="22">To make Figure 3 easier to follow, we have defined HAs as accepting symbols in the opposite order, from the inside out.</S>
    <S sid="95" ssid="23">This amounts to the same thing if transitions are reversed, I. is exchanged with F., and any transition probabilities are replaced by those of the reversed Markov chain. fined) canonical derivations of w by H and canonical derivations of w by G. We adopt the notation above for H and the components of its head automata.</S>
    <S sid="96" ssid="24">Let VD be an arbitrary set of size t = max{IQa I : a E VT}, and for each a, define an arbitrary injection fa : Q.</S>
    <S sid="97" ssid="25">-4 VD.</S>
    <S sid="98" ssid="26">We define G = (VN, P,T[$]), where (iii) T fs(q), where we assume WLOG that Is is a singleton set {q}.</S>
    <S sid="99" ssid="27">We omit the formal proof that G and H admit isomorphic derivations and hence generate the same languages, observing only that if (x, y) = (bib2 &#8226; &#8226; &#8226; bi,b3+1- &#8226; &#8226; bk) E L(Ha)&#8212; a condition used in defining La above&#8212;then A[a] [bi] &#8226; &#8226; &#8226; B3[MaB3+1[bi+11 &#8226; &#8226; &#8226; Bk[bk], for any A, B1, .</S>
    <S sid="100" ssid="28">Bk that map to initial states in Ha, Hbl, Hb, respectively.</S>
    <S sid="101" ssid="29">In general, G has p = 0(IVD13) = 0(t3).</S>
    <S sid="102" ssid="30">The construction therefore implies that we can parse a length-n sentence under H in time 0(n4t3).</S>
    <S sid="103" ssid="31">If the HAs in H happen to be deterministic, then in each binary production given by (ii) above, symbol A is fully determined by a, b, and C. In this case p = 0(t2), so the parser will operate in time 0(n4t2).</S>
    <S sid="104" ssid="32">We note that this construction can be straightforwardly extended to convert stochastic HAGs as in (Alshawi, 1996) into stochastic CFGs.</S>
    <S sid="105" ssid="33">Probabilities that Ha assigns to state q's various transition and halt actions are copied onto the corresponding productions A[a] a of G, where A = fa(q).</S>
    <S sid="106" ssid="34">8 Split head automaton grammars in time 0 (n3 ) For many bilexical CFGs or HAGs of practical significance, just as for the bilexical version of link grammars (Lafferty et al., 1992), it is possible to parse length-n inputs even faster, in time 0(n3) (Eisner, 1997).</S>
    <S sid="107" ssid="35">In this section we describe and discuss this special case, and give a new 0(n3) algorithm that has a smaller grammar constant than previously reported.</S>
    <S sid="108" ssid="36">A head automaton Ha is called split if it has no states that can be entered on a &#247;- transition and exited on a ---&gt; transition.</S>
    <S sid="109" ssid="37">Such an automaton can accept (x, y) only by reading all of y&#8212;immediately after which it is said to be in a flip state&#8212;and then reading all of x.</S>
    <S sid="110" ssid="38">Formally, a flip state is one that allows entry on a &#8212;&gt; transition and that either allows exit on a transition or is a final state.</S>
    <S sid="111" ssid="39">We are concerned here with head automaton grammars H such that every Ha is split.</S>
    <S sid="112" ssid="40">These correspond to bilexical CFGs in which any derivation A[a] = xay has the form A[a] = xB[a] xay.</S>
    <S sid="113" ssid="41">That is, a word's left dependents are more oblique than its right dependents and c-command them.</S>
    <S sid="114" ssid="42">Such grammars are broadly applicable.</S>
    <S sid="115" ssid="43">Even if Ha is not split, there usually exists a split head automaton H&amp;quot;, recognizing the same language.</S>
    <S sid="116" ssid="44">H la exists if {x#y : (x, y) E L(Ha)} is regular (where # VT).</S>
    <S sid="117" ssid="45">In particular, lei', must exist unless Ha has a cycle that includes both &#247;- and -4 transitions.</S>
    <S sid="118" ssid="46">Such cycles would be necessary for Ha itself to accept a formal language such as {(bn, cn) : n &gt; 0}, where word a takes 2n dependents, but we know of no natural-language motivation for ever using them in a HAG.</S>
    <S sid="119" ssid="47">One more definition will help us bound the complexity.</S>
    <S sid="120" ssid="48">A split head automaton Ha is said to be g-split if its set of flip states, denoted C Qa, has size &lt; g. The languages that can be recognized by g-split HAs are those that can be written as 1..g 1 Li x R, where the Li and Ri are regular languages over VT. Eisner (1997) actually defined (g-split) bilexical grammars in terms of the latter property.6 We now present our result: Figure 3 specifies an 0(n3g2t2) recognition algorithm for a head automaton grammar H in which every H, is g-split.</S>
    <S sid="121" ssid="49">For deterministic automata, the runtime is 0(n3g2t)&#8212;a considerable improvement on the 0(n3g3t2) result of (Eisner, 1997), which also assumes deterministic automata.</S>
    <S sid="122" ssid="50">As in &#167;4, a simple bottom-up implementation will suffice.</S>
    <S sid="123" ssid="51">For a practical speedup, add h\j as an antecedent to the MID rule (and fill in the parse table from right to left).</S>
    <S sid="124" ssid="52">Like our previous algorithms, this one takes two steps (ATTACH, COMPLETE) to attach a child constituent to a parent constituent.</S>
    <S sid="125" ssid="53">But instead of full constituents&#8212;strings xd,y e d, &#8212;it uses only half-constituents like xdi and The other halves of these constituents can be attached later, because to find an accepting path for (zi, Zr) in a split head automaton, one can separately find the half-path before the flip state (which accepts zr) and the half-path after the flip state (which accepts zi).</S>
    <S sid="126" ssid="54">These two halfpaths can subsequently be joined into an accepting path if they have the same flip state s, i.e., one path starts where the other ends.</S>
    <S sid="127" ssid="55">Annotating our left half-constituents with s makes this check possible.</S>
  </SECTION>
  <SECTION title="9 Final remarks" number="7">
    <S sid="128" ssid="1">We have formally described, and given faster parsing algorithms for, three practical grammatical rewriting systems that capture dependencies between pairs of words.</S>
    <S sid="129" ssid="2">All three systems admit naive 0(n5) algorithms.</S>
    <S sid="130" ssid="3">We give the first 0(n4) results for the natural formalism of bilexical context-free grammar, and for Alshawi's (1996) head automaton grammars.</S>
    <S sid="131" ssid="4">For the usual case, split head automaton grammars or equivalent bilexical CFGs, we replace the 0(n3) algorithm of (Eisner, 1997) by one with a smaller grammar constant.</S>
    <S sid="132" ssid="5">Note that, e.g., all senses would restore the g 2 factor.</S>
    <S sid="133" ssid="6">Indeed, this approach gives added flexibility: a word's sense, unlike its choice of flip state, is visible to the HA that reads it. three models in (Collins, 1997) are susceptible to the 0(n3) method (cf.</S>
    <S sid="134" ssid="7">Collins's 0(n5)).</S>
    <S sid="135" ssid="8">Our dynamic programming techniques for cheaply attaching head information to derivations can also be exploited in parsing formalisms other than rewriting systems.</S>
    <S sid="136" ssid="9">The authors have developed an 0(n7)-time parsing algorithm for bilexicalized tree adjoining grammars (Schabes, 1992), improving the naive 0(n8) method.</S>
    <S sid="137" ssid="10">The results mentioned in &#167;6 are related to the closure property of CFGs under generalized sequential machine mapping (Hoperoft and Ullman, 1979).</S>
    <S sid="138" ssid="11">This property also holds for our class of bilexical CFGs.</S>
  </SECTION>
</PAPER>
