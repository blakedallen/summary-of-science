<PAPER>
  <S sid="0">Biomedical Named Entity Recognition Using Conditional Random Fields And Rich Feature Sets</S>
  <ABSTRACT/>
  <SECTION title="1 Introduction" number="1">
    <S sid="1" ssid="1">As the wealth of biomedical knowledge in the form of literature increases, there is a rising need for effective natural language processing tools to assist in organizing, curating, and retrieving this information.</S>
    <S sid="2" ssid="2">To that end, named entity recognition (the task of identifying words and phrases in free text that belong to certain classes of interest) is an important first step for many of these larger information management goals.</S>
    <S sid="3" ssid="3">In recent years, much attention has been focused on the problem of recognizing gene and protein mentions in biomedical abstracts.</S>
    <S sid="4" ssid="4">This paper presents a framework for simultaneously recognizing occurrences of PROTEIN, DNA, RNA, CELL-LINE, and CELL-TYPE entity classes using Conditional Random Fields with a variety of traditional and novel features.</S>
    <S sid="5" ssid="5">I show that this approach can achieve an overall F1 measure around 70, which seems to be the current state of the art.</S>
    <S sid="6" ssid="6">The system described here was developed as part of the BioNLP/NLPBA 2004 shared task.</S>
    <S sid="7" ssid="7">Experiments were conducted on a training and evaluation set provided by the task organizers.</S>
  </SECTION>
  <SECTION title="2 Conditional Random Fields" number="2">
    <S sid="8" ssid="1">Biomedical named entity recognition can be thought of as a sequence segmentation problem: each word is a token in a sequence to be assigned a label (e.g.</S>
    <S sid="9" ssid="2">PROTEIN, DNA, RNA, CELL-LINE, CELL-TYPE, or OTHER1).</S>
    <S sid="10" ssid="3">Conditional Random Fields (CRFs) are undirected statistical graphical models, a special case of which is a linear chain that corresponds to a conditionally trained finite-state machine.</S>
    <S sid="11" ssid="4">Such models are well suited to sequence analysis, and CRFs in 'More accurately, the data is in IOB format.</S>
    <S sid="12" ssid="5">B-DNA labels the first word of a DNA mention, I-DNA labels all subsequent words (likewise for other entities), and O labels non-entities.</S>
    <S sid="13" ssid="6">For simplicity, this paper only refers to the entities, not all the IOB label variants. particular have been shown to be useful in partof-speech tagging (Lafferty et al., 2001), shallow parsing (Sha and Pereira, 2003), and named entity recognition for newswire data (McCallum and Li, 2003).</S>
    <S sid="14" ssid="7">They have also just recently been applied to the more limited task of finding gene and protein mentions (McDonald and Pereira, 2004), with promising early results.</S>
    <S sid="15" ssid="8">Let o = (o1, o2, ... , on) be an sequence of observed words of length n. Let 5 be a set of states in a finite state machine, each corresponding to a label l E L (e.g.</S>
    <S sid="16" ssid="9">PROTEIN, DNA, etc.).</S>
    <S sid="17" ssid="10">Let s = (s1, s2, ... , sn) be the sequence of states in 5 that correspond to the labels assigned to words in the input sequence o. Linearchain CRFs define the conditional probability of a state sequence given an input sequence to be: where Zo is a normalization factor of all state sequences, fj(si_1, si, o, i) is one of m functions that describes a feature, and &#955;j is a learned weight for each such feature function.</S>
    <S sid="18" ssid="11">This paper considers the case of CRFs that use a firstorder Markov independence assumption with binary feature functions.</S>
    <S sid="19" ssid="12">For example, a feature may have a value of 0 in most cases, but given the text &#8220;the ATPase&#8221; it has the value 1 along the transition where si_1 corresponds to a state with the label OTHER, si corresponds to a state with the label PROTEIN, and fj is the feature function WORD=ATPase E o at position i in the sequence.</S>
    <S sid="20" ssid="13">Other feature functions that could have the value 1 along this transition are CAPITALIZED, MIXEDCASE, and SUFFIX=ase.</S>
    <S sid="21" ssid="14">Intuitively, the learned feature weight &#955;j for each feature fj should be positive for features that are correlated with the target label, negative for features that are anti-correlated with the label, and near zero for relatively uninformative features.</S>
    <S sid="22" ssid="15">These weights are set to maximize the conditional log likelihood of labeled sequences in a training set D = f(o, l)(1), ... , (o, l)(n)&#65533;: When the training state sequences are fully labeled and unambiguous, the objective function is convex, thus the model is guaranteed to find the optimal weight settings in terms of LL(D).</S>
    <S sid="23" ssid="16">Once these settings are found, the labeling for an new, unlabeled sequence can be done using a modified Viterbi algorithm.</S>
    <S sid="24" ssid="17">CRFs are presented in more complete detail by Lafferty et al. (2001).</S>
    <S sid="25" ssid="18">These experiments use the MALLET implementation of CRFs (McCallum, 2002), which uses a quasi-Newton method called L-BFGS to find these feature weights efficiently.</S>
  </SECTION>
  <SECTION title="3 Feature Set" number="3">
    <S sid="26" ssid="1">One property that makes feature based statistical models like CRFs so attractive is that they reduce the problem to finding an appropriate feature set.</S>
    <S sid="27" ssid="2">This section outlines the two main types of features used in these experiments.</S>
    <S sid="28" ssid="3">The simplest and most obvious feature set is the vocabulary from the training data.</S>
    <S sid="29" ssid="4">Generalizations over how these words appear (e.g. capitalization, affixes, etc.) are also important.</S>
    <S sid="30" ssid="5">The present model includes training vocabulary, 17 orthographic features based on regular expressions (e.g.</S>
    <S sid="31" ssid="6">ALPHANUMERIC, HASDASH, ROMANNUMERAL) as well as prefixes and suffixes in the character length range [3,5].</S>
    <S sid="32" ssid="7">Words are also assigned a generalized &#8220;word class&#8221; similar to Collins (2002), which replaces capital letters with &#8216;A&#8217;, lowercase letters with &#8216;a&#8217;, digits with &#8216;0&#8217;, and all other characters with &#8216; &#8217;.</S>
    <S sid="33" ssid="8">There is a similar &#8220;brief word class&#8221; feature which collapses consecutive identical characters into one.</S>
    <S sid="34" ssid="9">Thus the words &#8220;IL5&#8221; and &#8220;SH3&#8221; would both be given the features WC=AA0 and BWC=A0, while &#8220;F-actin&#8221; and &#8220;T-cells&#8221; would both be assigned WC=A aaaaa and BWC=A a.</S>
    <S sid="35" ssid="10">To model local context simply, neighboring words in the window [-1,1] are also added as features.</S>
    <S sid="36" ssid="11">For instance, the middle token in the sequence &#8220;human UDG promoter&#8221; would have features WORD=UDG, NEIGHBOR=human and NEIGHBOR=promoter.</S>
    <S sid="37" ssid="12">In addition to orthography, the model could also benefit from generalized semantic word groups.</S>
    <S sid="38" ssid="13">If training sequences contain &#8220;PML/RAR alpha,&#8221; &#8220;beta 2-M,&#8221; and &#8220;kappa B-specific DNA binding protein&#8221; all labeled with PROTEIN, the model might learn that the words &#8220;alpha,&#8221; &#8220;beta,&#8221; and &#8220;kappa&#8221; are indicative of proteins, but cannot capture the fact that they are all semantically related because they are Greek letters.</S>
    <S sid="39" ssid="14">Similarly, words with the feature WC=Aaa are often part of protein names, such as &#8220;Rab,&#8221; &#8220;Alu,&#8221; and &#8220;Gag.&#8221; But the model may have a difficult time setting the weights for this feature when confronted with words like &#8220;Phe,&#8221; &#8220;Arg,&#8221; and &#8220;Cys,&#8221; which are amino acid abbreviations and not often labeled as part of a protein name.</S>
    <S sid="40" ssid="15">This sort of semantic domain knowledge can be provided in the form of lexicons.</S>
    <S sid="41" ssid="16">I prepared a total of 17 such lexicons, which include 7 that were entered by hand (Greek letters, amino acids, chemical elements, known viruses, plus abbreviations of all these), and 4 corresponding to genes, chromosome locations, proteins, and cell lines, drawn from online public databases (Cancer GeneticsWeb,2 BBID,3 SwissProt,4 and the Cell Line Database5).</S>
    <S sid="42" ssid="17">Feature functions for the lexicons are set to 1 if they match words in the input sequence exactly.</S>
    <S sid="43" ssid="18">For lexicon entries that are multi-word, all words are required to match in the input sequence.</S>
    <S sid="44" ssid="19">Since no suitable database of terms for the CELL-TYPE class was found online, a lexicon was constructed by utilizing Google Sets,6 an online tool which takes a few seed examples and leverages Google&#8217;s web index to return other terms that appear in similar formatting and context as the seeds on web pages across the Internet.</S>
    <S sid="45" ssid="20">Several examples from the training data (e.g.</S>
    <S sid="46" ssid="21">&#8220;lymphocyte&#8221; and &#8220;neutrophil&#8221;) were used as seeds and new cell types (e.g.</S>
    <S sid="47" ssid="22">&#8220;chondroblast,&#8221; which doesn&#8217;t even occur in the training data), were returned.</S>
    <S sid="48" ssid="23">The process was repeated until the lexicon grew to roughly 50 entries, though it could probably be more complete.</S>
    <S sid="49" ssid="24">With all this information at the model&#8217;s disposal, it can still be difficult to properly disambiguate between these entities.</S>
    <S sid="50" ssid="25">For example, the acronym &#8220;EPC&#8221; appears in these static lexicons both as a protein (&#8220;eosinophil cationic protein&#8221; [sic]) and as a cell line (&#8220;epithelioma papulosum cyprini&#8221;).</S>
    <S sid="51" ssid="26">Furthermore, a single word like &#8220;transcript&#8221; is sometimes all that disambiguates between RNA and DNA mentions (e.g.</S>
    <S sid="52" ssid="27">&#8220;BMLF1 transcript&#8221;).</S>
    <S sid="53" ssid="28">The CRF can learn weights for these individual words, but it may help to build general, dynamic keyword lexicons that are associated with each label to assist in disambiguating between similar classes (and perhaps boost performance on low-frequency labels, such as RNA and CELL-LINE, for which training data are sparse).</S>
    <S sid="54" ssid="29">These keyword lexicons are generated automatically as follows.</S>
    <S sid="55" ssid="30">All of the labeled terms are extracted from the training set and separated into five lists (one for each entity class).</S>
    <S sid="56" ssid="31">Stop words, Greek letters, and digits are filtered, and remaining words are tallied for raw frequency counts under each entity class label.</S>
    <S sid="57" ssid="32">These frequencies are then subjected to a x2 test, where the null hypothesis is that a word&#8217;s frequency is the same for a given entity as it is for any other entity of interest (i.e.</S>
    <S sid="58" ssid="33">PROTEIN vs. DNA + RNA + CELL-LINE + CELL-TYPE, such that there is only one degree of freedom).</S>
    <S sid="59" ssid="34">All words for which the null hypothesis is rejected with a p-value &lt; 0.005 are added to the keyword lexicon for its majority class.</S>
    <S sid="60" ssid="35">Some example keywords are listed in table 1.</S>
  </SECTION>
  <SECTION title="4 Results and Discussion" number="4">
    <S sid="61" ssid="1">Two experiments were completed in the time allotted: one CRF model using only the orthographic features described in section 3.1, and a second system using all the semantic lexicons from 3.2 as well.</S>
    <S sid="62" ssid="2">Detailed results are presented in table 2.</S>
    <S sid="63" ssid="3">The orthographic model achieves an overall F1 measure of 69.8 on the evaluation set (88.9 on the training set), converging after 230 training iterations and approximately 18 hours of computation.</S>
    <S sid="64" ssid="4">The complete model, however, only reached an overall F1 of 69.5 on the evaluation set (86.7 on the training set), converging after 152 iterations in approximately 9 hours.</S>
    <S sid="65" ssid="5">The deleterious effect of the semantic lexicons is surprising and puzzling.7 However, even though semantic lexicons slightly decrease overall performance, it is worthwhile to note that adding lexicons actually improves both recall and precision for the RNA and CELL-LINE entities.</S>
    <S sid="66" ssid="6">These happen to be the two lowest frequency class labels in the data, together comprising less than 10% of the mentions in either the training or evaluation set.</S>
    <S sid="67" ssid="7">Error analysis shows that several of the orthographic model&#8217;s false negatives for these entities are of the form &#8220;messenger accumulation&#8221; (RNA) or &#8220;nonadherent culture&#8221; (CELL-LINE).</S>
    <S sid="68" ssid="8">It may be that keyword lexicons contributed to the model identifying these low frequency terms more accurately.</S>
    <S sid="69" ssid="9">Also of note is that, in both experiments, the CRF framework achieves somewhat comparable performance across all entities.</S>
    <S sid="70" ssid="10">In a previous attempt to use a Hidden Markov Model to simultaneously recognize multiple biomedical entities (Collier et al., 2000), HMM performance for a particular entity seemed more or less proportional to its frequency in the data.</S>
    <S sid="71" ssid="11">The advantage of the CRF here may be due to the fact that HMMs are generative models trained to learn the joint probability P(o, l) &#8212; where data for l may be sparse &#8212; and use Bayes rule to predict the best label.</S>
    <S sid="72" ssid="12">CRFs are discriminative models trained to maximize P(l|o) directly.</S>
  </SECTION>
  <SECTION title="5 Conclusions and Future Work" number="5">
    <S sid="73" ssid="1">In short, I have presented in detail a framework for recognizing multiple entity classes in biomedical abstracts with Conditional Random Fields.</S>
    <S sid="74" ssid="2">I have shown that a CRF-based model with only simple orthographic features can achieve performance near the current state of the art, while using semantic lexicons (as presented here) do not positively affect performance.$ While the system presented here shows promise, there is still much to be explored.</S>
    <S sid="75" ssid="3">Richer syntactic information such as shallow parsing may be useful.</S>
    <S sid="76" ssid="4">The method introduced in section 3.2 to generate semantic keywords can also be adapted to generate features for entityspecific morphology (e.g. affixes) and context, both linearly (e.g. neighboring words) and hierarchically (e.g. from a parse).</S>
    <S sid="77" ssid="5">Most interesting, though, might be to investigate why the lexicons do not generally help.</S>
    <S sid="78" ssid="6">One explanation is simply an issue of tokenization.</S>
    <S sid="79" ssid="7">While one abstract refers to &#8220;IL12,&#8221; others may write &#8220;IL-12&#8221; or &#8220;IL 12.&#8221; Similarly, the generalization of entities to groups (e.g.</S>
    <S sid="80" ssid="8">&#8220;x antibody&#8221; vs. &#8220;x antibodies&#8221;) can cause problems for these rigid lexicons that require exact matching.</S>
    <S sid="81" ssid="9">Enumerating all such variants for every entry in a lexicon is absurd.</S>
    <S sid="82" ssid="10">Perhaps relaxing the matching criteria and standardizing tokenization for both the input and lexicons will improve their utility.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="6">
    <S sid="83" ssid="1">I would like to thank my advisor Mark Craven for his advice and guidance, as well as Andrew McCallum and Aron Culotta for answering my questions about the MALLET system.</S>
    <S sid="84" ssid="2">This work is supported by NLM training grant 5T15LM007359-02 and NIH grant R01 LM07050-01.</S>
  </SECTION>
</PAPER>
