<PAPER>
  <S sid="0">A Unigram Orientation Model For Statistical Machine Translation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Lebanese violate warplanes Israeli airspace A l T A } r A t A l H r b y P y l y P A l A s r A } t n t h k A l m j A l A l j w y A l l b n A n y Abstract In this paper, we present a unigram segmentation model for statistical machine translation where the segmentation units are blocks: pairs of phrases without internal structure.</S>
    <S sid="2" ssid="2">The segmentation model uses a novel orientation component to handle swapping of neighbor blocks.</S>
    <S sid="3" ssid="3">During training, we collect block uncounts with we count how often a block occurs to the left or to the right of some predecessor block.</S>
    <S sid="4" ssid="4">The orientation model is shown to improve translation performance over two models: 1) no block re-ordering is used, and 2) the block swapping is controlled only by a language model.</S>
    <S sid="5" ssid="5">We show experimental results on a standard Arabic-English translation task.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">In recent years, phrase-based systems for statistical machine translation (Och et al., 1999; Koehn et al., 2003; Venugopal et al., 2003) have delivered state-of-the-art performance on standard translation tasks.</S>
    <S sid="7" ssid="2">In this paper, we present a phrase-based unigram system similar to the one in (Tillmann and Xia, 2003), which is extended by an unigram orientation model.</S>
    <S sid="8" ssid="3">The units of translation are blocks, pairs of phrases without internal structure.</S>
    <S sid="9" ssid="4">Fig.</S>
    <S sid="10" ssid="5">1 shows an example block translation using five Arabic-English blocks .</S>
    <S sid="11" ssid="6">The unigram orientation model is trained from word-aligned training data.</S>
    <S sid="12" ssid="7">During decoding, we view translation as a block segmentation process, where the input sentence is segmented from left to right and the target sentence is generated from bottom to top, one block at a time.</S>
    <S sid="13" ssid="8">A monotone block sequence is generated except for the possibility to swap a pair of neighbor blocks.</S>
    <S sid="14" ssid="9">The novel orientation model is used to assist the block swapping: as shown in section 3, block swapping where only a trigram language model is used to compute probabilities between neighbor blocks fails to improve translation performance.</S>
    <S sid="15" ssid="10">(Wu, 1996; Zens and Ney, 2003) present re-ordering models that make use of a straight/inverted orientation model that is related to our work.</S>
    <S sid="16" ssid="11">Here, we investigate in detail the effect of restricting the word re-ordering to neighbor block swapping only.</S>
    <S sid="17" ssid="12">In this paper, we assume a block generation process that generates block sequences from bottom to top, one block at a time.</S>
    <S sid="18" ssid="13">The score of a successor block depends on its predecessor block and on its orientation relative to the block .</S>
    <S sid="19" ssid="14">In Fig.</S>
    <S sid="20" ssid="15">1 for example, block is the predecessor of block , and block is the predecessor of block .</S>
    <S sid="21" ssid="16">The target clump of a predecessor block is adjacent to the target clump of a successor block .</S>
    <S sid="22" ssid="17">A right adjacent predecessor block is a block where additionally the source clumps are adjacent and the source clump of occurs to the right of the source clump of .</S>
    <S sid="23" ssid="18">A left adjacent predecessor block is defined accordingly.</S>
    <S sid="24" ssid="19">During decoding, we compute the score of a block sequence with orientation as a product of block bigram scores: where is a block and is a three-valued orientation component linked to the block (the orientation of the predecessor block is ignored.).</S>
    <S sid="25" ssid="20">A block has right orientation ( ) if it has a left adjacent predecessor.</S>
    <S sid="26" ssid="21">Accordingly, a block has left orientation ( ) if it has a right adjacent predecessor.</S>
    <S sid="27" ssid="22">If a block has neither a left or right adjacent predecessor, its orientation is neutral ( ).</S>
    <S sid="28" ssid="23">The neutral orientation is not modeled explicitly in this paper, rather it is handled as a default case as explained below.</S>
    <S sid="29" ssid="24">In Fig.</S>
    <S sid="30" ssid="25">1, the orientation sequence is , i.e. block and block are generated using left orientation.</S>
    <S sid="31" ssid="26">During decoding most blocks have right orientation , since the block translations are mostly monotone.</S>
    <S sid="32" ssid="27">We try to find a block sequence with orientation that maximizes .</S>
    <S sid="33" ssid="28">The following three types of parameters are used to model the block bigram score in Eq.</S>
    <S sid="34" ssid="29">1: Two unigram count-based models: and .</S>
    <S sid="35" ssid="30">We compute the unigram probability of a block based on its occurrence count .</S>
    <S sid="36" ssid="31">The blocks are counted from word-aligned training data.</S>
    <S sid="37" ssid="32">We also collect unigram counts with orientation: a left count and a right count .</S>
    <S sid="38" ssid="33">These counts are defined via an enumeration process and are used to define the orientation model : Trigram language model: The block language model score is computed as the probability of the first target word in the target clump of given the final two words of the target clump of .</S>
    <S sid="39" ssid="34">The three models are combined in a log-linear way, as shown in the following section.</S>
  </SECTION>
  <SECTION title="2 Orientation Unigram Model" number="2">
    <S sid="40" ssid="1">The basic idea of the orientation model can be illustrated as follows: In the example translation in Fig.</S>
    <S sid="41" ssid="2">1, block occurs to the left of block .</S>
    <S sid="42" ssid="3">Although the joint block consisting of the two smaller blocks and has not been seen in the training data, we can still profit from the fact that block occurs more frequently with left than with right orientation.</S>
    <S sid="43" ssid="4">In our Arabic-English training data, block has been seen times with left orientation, and with right orientation, i.e. it is always involved in swapping.</S>
    <S sid="44" ssid="5">This intuition is formalized using unigram counts with orientation.</S>
    <S sid="45" ssid="6">The orientation model is related to the distortion model in (Brown et al., 1993), but we do not compute a block alignment during training.</S>
    <S sid="46" ssid="7">We rather enumerate all relevant blocks in some order.</S>
    <S sid="47" ssid="8">Enumeration does not allow us to capture position dependent distortion probabilities, but we can compute statistics about adjacent block predecessors.</S>
    <S sid="48" ssid="9">Our baseline model is the unigram monotone model described in (Tillmann and Xia, 2003).</S>
    <S sid="49" ssid="10">Here, we select blocks from word-aligned training data and unigram block occurrence counts are computed: all blocks for a training sentence pair are enumerated in some order and we count how often a given block occurs in the parallel training data 1.</S>
    <S sid="50" ssid="11">The training algorithm yields a list of about blocks per training sentence pair.</S>
    <S sid="51" ssid="12">In this paper, we make extended use of the baseline enumeration procedure: for each block , we additionally enumerate all its left and right predecessors .</S>
    <S sid="52" ssid="13">No optimal block segmentation is needed to compute the predecessors: for each block , we check for adjacent predecessor blocks that also occur in the enumeration list.</S>
    <S sid="53" ssid="14">We compute left orientation counts as follows: Here, we enumerate all adjacent predecessors of block over all training sentence pairs.</S>
    <S sid="54" ssid="15">The identity of is ignored. is the number of times the block succeeds some right adjacent predecessor block .</S>
    <S sid="55" ssid="16">The &#8217;right&#8217; orientation count is defined accordingly.</S>
    <S sid="56" ssid="17">Note, that in general the unigram count : during enumeration, a block might have both left and right adjacent predecessors, either a left or a right adjacent predecessor, or no adjacent predecessors at all.</S>
    <S sid="57" ssid="18">The orientation count collection is illustrated in Fig.</S>
    <S sid="58" ssid="19">2: each time a block has a left or right adjacent predecessor in the parallel training data, the orientation counts are incremented accordingly.</S>
    <S sid="59" ssid="20">The decoding orientation restrictions are illustrated in Fig 3: a monotone block sequence with right ( 'We keep all blocks for which and the phrase length is less or equal .</S>
    <S sid="60" ssid="21">No other selection criteria are applied.</S>
    <S sid="61" ssid="22">For the model, we keep all blocks for which . order: for each block , we look for left and right adjacent predecessors . orientation is generated.</S>
    <S sid="62" ssid="23">If a block is skipped e.g. block in Fig 3 by first generating block then block , the block is generated using left orientation .</S>
    <S sid="63" ssid="24">Since the block translation is generated from bottom-to-top, the blocks and do not have adjacent predecessors below them: they are generated by a default model without orientation component.</S>
    <S sid="64" ssid="25">The orientation model is given in Eq.</S>
    <S sid="65" ssid="26">2, the default model is given in Eq.</S>
    <S sid="66" ssid="27">3.</S>
    <S sid="67" ssid="28">The block bigram model in Eq.</S>
    <S sid="68" ssid="29">1 is defined as: where and the orientation of the predecessor is ignored.</S>
    <S sid="69" ssid="30">The are chosen to be optimal on the devtest set (the optimal parameter setting is shown in Table.</S>
    <S sid="70" ssid="31">1).</S>
    <S sid="71" ssid="32">Only two parameters have to be optimized due to the constraint that the have to sum to .</S>
    <S sid="72" ssid="33">The default model is defined as: .</S>
    <S sid="73" ssid="34">Straightforward normalization over all successor blocks in Eq.</S>
    <S sid="74" ssid="35">2 and in Eq.</S>
    <S sid="75" ssid="36">3 is not feasible: there are tens of millions of possible successor blocks .</S>
    <S sid="76" ssid="37">In future work, normalization over a restricted successor set, e.g. for a given source input sentence, all blocks that match this sentence might be useful for both training and decoding.</S>
    <S sid="77" ssid="38">The segmentation model in Eq.</S>
    <S sid="78" ssid="39">1 naturally prefers translations that make use of a smaller number of blocks which leads to a smaller number of factors in Eq.</S>
    <S sid="79" ssid="40">1.</S>
    <S sid="80" ssid="41">Using fewer &#8217;bigger&#8217; blocks to carry out the translation generally seems to improve translation performance.</S>
    <S sid="81" ssid="42">Since normalization does not influence the number of blocks used to carry out the translation, it might be less important for our segmentation model.</S>
    <S sid="82" ssid="43">We use a DP-based beam search procedure similar to the one presented in (Tillmann and Xia, 2003).</S>
    <S sid="83" ssid="44">We maximize over all block segmentations with orientation for which the source phrases yield a segmentation of the input sentence.</S>
    <S sid="84" ssid="45">Swapping involves only blocks for which for the successor block , e.g. the blocks and in Fig 1.</S>
    <S sid="85" ssid="46">We tried several thresholds for , and performance is reduced significantly only if .</S>
    <S sid="86" ssid="47">No other parameters are used to control the block swapping.</S>
    <S sid="87" ssid="48">In particular the orientation of the predecessor block is ignored: in future work, we might take into account that a certain predecessor block typically precedes other blocks.</S>
  </SECTION>
  <SECTION title="3 Experimental Results" number="3">
    <S sid="88" ssid="1">The translation system is tested on an Arabic-to-English translation task.</S>
    <S sid="89" ssid="2">The training data comes from the UN news sources: million Arabic and million English words.</S>
    <S sid="90" ssid="3">The training data is sentence-aligned yielding million training sentence pairs.</S>
    <S sid="91" ssid="4">The Arabic data is romanized, some punctuation tokenization and some number classing are carried out on the English and the Arabic training data.</S>
    <S sid="92" ssid="5">As devtest set, we use testing data provided by LDC, which consists of sentences with Arabic words with reference translations.</S>
    <S sid="93" ssid="6">As a blind test set, we use MT 03 Arabic-English DARPA evaluation test set consisting of sentences with Arabic words.</S>
    <S sid="94" ssid="7">Three systems are evaluated in our experiments: is the baseline block unigram model without re-ordering.</S>
    <S sid="95" ssid="8">Here, monotone block alignments are generated: the blocks have only left predecessors (no blocks are swapped).</S>
    <S sid="96" ssid="9">This is the model presented in (Tillmann and Xia, 2003).</S>
    <S sid="97" ssid="10">For the model, the sentence is translated mostly monotonously, and only neighbor blocks are allowed to be swapped (at most block is skipped).</S>
    <S sid="98" ssid="11">The model allows for the same block swapping as the model, but additionally uses the orientation component described in Section 2: the block swapping is controlled where .</S>
    <S sid="99" ssid="12">The are not optimized separately, rather we define: by the unigram orientation counts.</S>
    <S sid="100" ssid="13">The and models use the block bigram model in Eq.</S>
    <S sid="101" ssid="14">3: all blocks are generated with neutral orientation , and only two components, the block unigram model and the block bigram score are used.</S>
    <S sid="102" ssid="15">Experimental results are reported in Table 1: three BLEU results are presented for both devtest set and blind test set.</S>
    <S sid="103" ssid="16">Two scaling parameters are set on the devtest set and copied for use on the blind test set.</S>
    <S sid="104" ssid="17">The second column shows the model name, the third column presents the optimal weighting as obtained from the devtest set by carrying out an exhaustive grid search.</S>
    <S sid="105" ssid="18">The fourth column shows BLEU results together with confidence intervals (Here, the word casing is ignored).</S>
    <S sid="106" ssid="19">The block swapping model obtains a statistical significant improvement over the baseline model.</S>
    <S sid="107" ssid="20">Interestingly, the swapping model without orientation performs worse than the baseline model: the word-based trigram language model alone is too weak to control the block swapping: the model is too unrestrictive to handle the block swapping reliably.</S>
    <S sid="108" ssid="21">Additionally, Table 2 presents devtest set example blocks that have actually been swapped.</S>
    <S sid="109" ssid="22">The training data is unsegmented, as can be seen from the first two blocks.</S>
    <S sid="110" ssid="23">The block in the first line has been seen times more often with left than with right orientation.</S>
    <S sid="111" ssid="24">Blocks for which the ratio is bigger than are likely candidates for swapping in our Arabic-English experiments.</S>
    <S sid="112" ssid="25">The ratio itself is not currently used in the orientation model.</S>
    <S sid="113" ssid="26">The orientation model mostly effects blocks where the Arabic and English words are verbs or nouns.</S>
    <S sid="114" ssid="27">As shown in Fig.</S>
    <S sid="115" ssid="28">1, the orientation model uses the orientation probability for the noun block , and only the default model for the adjective block .</S>
    <S sid="116" ssid="29">Although the noun block might occur by itself without adjective, the swapping is not controlled by the occurrence of the adjective block (which does not have adjacent predecessors).</S>
    <S sid="117" ssid="30">We rather model the fact that a noun block is typically preceded by some block .</S>
    <S sid="118" ssid="31">This situation seems typical for the block swapping that occurs on the evaluation test set.</S>
  </SECTION>
  <SECTION title="Acknowledgment" number="4">
    <S sid="119" ssid="1">This work was partially supported by DARPA and monitored by SPAWAR under contract No.</S>
    <S sid="120" ssid="2">N66001-99-28916.</S>
    <S sid="121" ssid="3">The paper has greatly profited from discussion with Kishore Papineni and Fei Xia.</S>
  </SECTION>
</PAPER>
