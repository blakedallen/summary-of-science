<PAPER>
  <S sid="0">TINA: A Natural Language System For Spoken Language Applications</S>
  <ABSTRACT>
    <S sid="1" ssid="1">new natural language system, been developed for applications involving spoken tasks. key ideas from context free grammars, Augmented Transition (ATN's), and the unification concept. a seamless interface between syntactic and semantic analysis, and also produces a highly constraining probabilistic language model to improve recognition performance.</S>
    <S sid="2" ssid="2">An initial set of context-free rewrite rules provided by hand is first converted to a network structure.</S>
    <S sid="3" ssid="3">Probability assignments on all arcs in the network are obtained automatically from a set of example sentences.</S>
    <S sid="4" ssid="4">The parser uses a stack decoding search strategy, with a top-down control flow, and includes a feature-passing mechanism to deal long-distance movement, agreement, and semantic constraints. an automatic sentence generation capability that has been effective for identifying overgeneralization problems as well as in producing a word-pair language model for a recognizer.</S>
    <S sid="5" ssid="5">The parser is currently with MIT's for use in two application domains, with the parser screening recognizer outputs either at the sentential level or to filter partial theories during the active search process.</S>
  </ABSTRACT>
  <SECTION title="" number="1">
    <S sid="6" ssid="1">A new natural language system, TINA, has been developed for applications involving spoken language tasks.</S>
    <S sid="7" ssid="2">TINA integrates key ideas from context free grammars, Augmented Transition Networks (ATN's), and the unification concept.</S>
    <S sid="8" ssid="3">TINA provides a seamless interface between syntactic and semantic analysis, and also produces a highly constraining probabilistic language model to improve recognition performance.</S>
    <S sid="9" ssid="4">An initial set of context-free rewrite rules provided by hand is first converted to a network structure.</S>
    <S sid="10" ssid="5">Probability assignments on all arcs in the network are obtained automatically from a set of example sentences.</S>
    <S sid="11" ssid="6">The parser uses a stack decoding search strategy, with a top-down control flow, and includes a feature-passing mechanism to deal with long-distance movement, agreement, and semantic constraints.</S>
    <S sid="12" ssid="7">TINA provides an automatic sentence generation capability that has been effective for identifying overgeneralization problems as well as in producing a word-pair language model for a recognizer.</S>
    <S sid="13" ssid="8">The parser is currently integrated with MIT's SUMMIT recognizer for use in two application domains, with the parser screening recognizer outputs either at the sentential level or to filter partial theories during the active search process.</S>
  </SECTION>
  <SECTION title="1." number="2">
    <S sid="14" ssid="1">Over the past few years, there has been a gradual paradigm shift in speech recognition research both in the U.S. and in Europe.</S>
    <S sid="15" ssid="2">In addition to continued research on the transcription problem, i.e., the conversion of the speech signal to text, many researchers have begun to address as well the problem of speech understanding.1 This shift is at least partly brought on by the realization that many of the applications involving human/machine interface using speech require an &amp;quot;understanding&amp;quot; of the intended message.</S>
    <S sid="16" ssid="3">In fact, to be truly effective, many potential applications demand that the system carry on a dialog with the user, using its knowledge base and information gleaned from previous sentences to achieve proper response generation.</S>
    <S sid="17" ssid="4">Current advances in research and development of spoken language systems2 can be found, for example, in the proceedings of the DARPA speech and natural language workshops, as well as in publications from participants of the ESPRIT SUNDIAL project.</S>
    <S sid="18" ssid="5">Representative systems are described in Boisen et al. (1989), De Mattia and Giachin (1989), Niedermair (1989), Niemann (1990), and Young (1989).</S>
    <S sid="19" ssid="6">A spoken language system relies on its natural language component to provide the meaning representation of a given sentence.</S>
    <S sid="20" ssid="7">Ideally, this component should also be useful for providing powerful constraints to the recognizer component in terms of permissible syntactic and semantic structures, given the limited domain.</S>
    <S sid="21" ssid="8">If it is to be useful for constraint, however, it must concern itself not only with coverage but also, and perhaps more importantly, with overgeneralizat ion.</S>
    <S sid="22" ssid="9">In many existing systems, the ability to parse as many sentences as possible is often achieved at the expense of accepting inappropriate word strings as legitimate sentences.</S>
    <S sid="23" ssid="10">This had not been viewed as a major concern in the past, since systems were typically presented only with well-formed text strings, as opposed to errorful recognizer outputs.</S>
    <S sid="24" ssid="11">The constraints can be much more effective if they are embedded in a probabilistic framework.</S>
    <S sid="25" ssid="12">The use of probabilities in a language model can lead to a substantially reduced perplexity3 for the recognizer.</S>
    <S sid="26" ssid="13">If the natural language component's computational and memory requirements are not excessive, and if it is organized in such a way that it can easily predict a set of next-word candidates, then it can be incorporated into the active search process of the recognizer, dynamically predicting possible words to follow a hypothesized word sequence, and pruning away hypotheses that cannot be completed in any way.</S>
    <S sid="27" ssid="14">The natural language component should be able to offer significant additional constraint to the recognizer, beyond what would be available from a local word-pair or bigram4 language model, because it is able to make use of long-distance constraints in requiring well-formed whole sentences.</S>
    <S sid="28" ssid="15">This paper describes a natural language system, TINA, which attempts to address some of these issues.</S>
    <S sid="29" ssid="16">The mechanisms were designed to support a graceful, seamless interface between syntax and semantics, leading to an efficient mechanism for constraining semantics.</S>
    <S sid="30" ssid="17">Grammar rules are written such that they describe syntactic structures at the high levels of a parse tree and semantic structures at the low levels.</S>
    <S sid="31" ssid="18">All of the meaning-carrying content of the sentence is completely encoded in the names of the categories of the parse tree, thus obviating the need for separate semantic rules.</S>
    <S sid="32" ssid="19">By encoding meaning in the structural entities of the parse tree, it becomes feasible to realize probabilistic semantic restrictions in an efficient manner.</S>
    <S sid="33" ssid="20">This also makes it straightforward to extract a semantic frame representation directly from an unannotated parse tree.</S>
    <S sid="34" ssid="21">The context-free rules are automatically converted to a shared network structure, and probability assignments are derived automatically from a set of parsed sentences.</S>
    <S sid="35" ssid="22">The probability assignment mechanism was deliberately designed to support an ability to predict a set of next-word candidates with associated word probabilities.</S>
    <S sid="36" ssid="23">Constraint mechanisms exist and are carried out through feature passing among nodes.</S>
    <S sid="37" ssid="24">A unique aspect of the grammar is that unification constraints are expressed one-dimensionally, being associated directly with categories rather than with rules.</S>
    <S sid="38" ssid="25">Syntactic and semantic fields are passed from node to node by default, thus making available by default the second argument to unification operations.</S>
    <S sid="39" ssid="26">This leads to a very efficient implementation of the constraint mechanism.</S>
    <S sid="40" ssid="27">Unifications introduce additional syntactic and semantic constraints such as person and number agreement and subject/verb semantic restrictions.</S>
    <S sid="41" ssid="28">This paper is organized as follows.</S>
    <S sid="42" ssid="29">Section 2 contains a detailed description of the grammar and the control strategy, including syntactic and semantic constraint mechanisms.</S>
    <S sid="43" ssid="30">Section 3 describes a number of domain-dependent versions of the system that have been implemented, and addresses, within the context of particular domains, several evaluation measures, including perplexity coverage, and portability.</S>
    <S sid="44" ssid="31">Section 4 discusses briefly two application domains involving database access in which the parser provides the link between a speech recognizer and the database queries.</S>
    <S sid="45" ssid="32">The last section provides a summary and a discussion of our future plans.</S>
    <S sid="46" ssid="33">There is also an appendix, which walks through an example grammar for three-digit numbers, showing how to train the probabilities, parse a sentence, and compute perplexity on a test sentence.</S>
  </SECTION>
  <SECTION title="2." number="3">
    <S sid="47" ssid="1">This section describes several aspects of the system in more detail, including how the grammar is generated and trained, how the control strategy operates, how constraints (both syntactic and semantic) are enforced, and practical issues having to do with efficiency and ease of debugging.</S>
    <S sid="48" ssid="2">TINA is based on a context-free grammar augmented with a set of features used to enforce syntactic and semantic constraints.</S>
    <S sid="49" ssid="3">The grammar is converted to a network structure by merging common elements on the right-hand side (RHS) of all rules sharing the same left-hand side (LHS) category Each LHS category becomes associated with a parent node whose children are the collection of unique categories appearing in the RHSs of all the rules in the common set.</S>
    <S sid="50" ssid="4">Each parent node establishes a twodimensional array of permissible links among its children, based on the rules.</S>
    <S sid="51" ssid="5">Each child can link forward to all of the children that appear adjacent to that child in any of the shared rule set.</S>
    <S sid="52" ssid="6">Probabilities are determined for pairs of siblings through frequency counts on rules generated by parsing a set of training sentences.</S>
    <S sid="53" ssid="7">The parsing process achieves efficiency through structure-sharing among rules, resembling in this respect a top-down chart processor.</S>
    <S sid="54" ssid="8">The grammar nodes are contained in a static structure describing a hierarchy of permissible sibling pairs given each parent, and a node-dependent set of constraint filters.</S>
    <S sid="55" ssid="9">Each grammar node contains a name specifying its category, a two-dimensional probability array of permissible links among the next lower level in the hierarchy and a list of filter specifications to be applied either in the top-down or the bottom-up cycle.</S>
    <S sid="56" ssid="10">When a sentence is parsed, a dynamic structure is created, a set of parse nodes that are linked together in a hierarchical structure to form explicit paths through the grammar.</S>
    <S sid="57" ssid="11">During the active parse process, the parse nodes are entered into a queue prioritized by their path scores.</S>
    <S sid="58" ssid="12">Each node (except terminals) in a given parse tree enters the queue exactly twice: once during the top-down cycle, during which it enters into the queue all of its possible first children, and once again during the bottom-up cycle, during which it enters all of its possible right siblings, given its parent.</S>
    <S sid="59" ssid="13">The control strategy repeatedly pops the queue, advancing the active hypothesis by exactly one step, and applying the appropriate node-level unifications.</S>
    <S sid="60" ssid="14">Each feature specification for each grammar node contains a feature name, a value or set of values for that feature, a logic function, and a specification as to whether the unification should take place during the top-down or during the bottom-up cycle.</S>
    <S sid="61" ssid="15">All features are associated with nodes (categories) rather than with rules, and each node performs exactly the same unifications without regard to whatever rule it might be a part of.</S>
    <S sid="62" ssid="16">In fact, during the active parse process, a rule is not an explicit entity while it is being formed.</S>
    <S sid="63" ssid="17">Each instantiation of a rule takes place only at the time that the next sibling is the distinguished [end] node, a special node that signifies a return to the level of the parent.</S>
    <S sid="64" ssid="18">The rule can be acquired by tracing back through the left siblings, until the distinguished [start] node is encountered, although this is not done in practice until the entire parse is completed.</S>
    <S sid="65" ssid="19">The parse nodes contain a set of features whose values will be modified through the unification process.</S>
    <S sid="66" ssid="20">All modifications to features are made nondestructively by copying a parse node each time a hypothesis is updated.</S>
    <S sid="67" ssid="21">Thus each independent hypothesis is associated with a particular parse node that contains all of the relevant feature information for that hypothesis.</S>
    <S sid="68" ssid="22">As a consequence, all hypotheses can be pursued in parallel, and no explicit backtracking is ever done.</S>
    <S sid="69" ssid="23">Control is repeatedly passed to the currently most probable hypothesis, until a complete sentence is found and all of the input stream is accounted for.</S>
    <S sid="70" ssid="24">Additional parses can be found by simply continuing the process.</S>
    <S sid="71" ssid="25">The grammar is built from a set of training sentences, using a bootstrapping procedure.</S>
    <S sid="72" ssid="26">Initially, each sentence is translated by hand into a list of the rules invoked to parse it.</S>
    <S sid="73" ssid="27">After the grammar has built up a substantial knowledge of the language, many new sentences can be parsed automatically, or with minimal intervention to add a few new rules incrementally.</S>
    <S sid="74" ssid="28">The arc probabilities can be incrementally updated after the successful parse of each new sentence.</S>
    <S sid="75" ssid="29">The process of converting the rules to a network form is straightforward.</S>
    <S sid="76" ssid="30">All rules with the same LHS are combined to form a structure describing possible interconnections among children of a parent node associated with the left-hand category.</S>
    <S sid="77" ssid="31">A probability matrix connecting each possible child with each other child is constructed by counting the number of times a particular sequence of two siblings occurred in the RHSs of the common rule set, and normalizing by counting all pairs from the particular left-sibling to any right sibling.5 Two distinguished nodes, a [start] node and an [end] node, are included among the children of every grammar node.</S>
    <S sid="78" ssid="32">A subset of the grammar nodes are terminal nodes whose children are a list of vocabulary words.</S>
    <S sid="79" ssid="33">This process can be illustrated with the use of a simple example.6 Suppose there exists a grammar for noun phrases that can be expressed through the single compact rule form: [NP] [article] ([adjective]) ([adjective]) [noun] where the parentheses signify optional nodes.</S>
    <S sid="80" ssid="34">This grammar would be converted to a network as shown in Figure 1, which would be stored as a single grammar node with the name [NP].</S>
    <S sid="81" ssid="35">The resulting grammar could be used to parse the set of phrases shown on the left, each of which would generate the corresponding rule shown on the right.</S>
    <S sid="82" ssid="36">&amp;quot;the boy&amp;quot; [NPI = [article] [noun] &amp;quot;a beautiful town&amp;quot; [NP] = [article] [adjective] [noun] &amp;quot;a cute little baby&amp;quot; [NP] [article] [adjective] [adjective] [noun] &amp;quot;the wonderful pudding&amp;quot; [NP] = [article] [adjective] [noun] Illustration of probabilistic network obtained from four rules with the same LHS (NP), as given in the text.</S>
    <S sid="83" ssid="37">A parent node, named [NP], would contain these five nodes as its children, with a probability matrix specifying the network connections.</S>
    <S sid="84" ssid="38">To train the probabilities, a record is kept of the relative counts of each subseqent sibling, with respect to each permissible child of the parent node, in our case, [NP], as they occurred in an entire set of parsed training sentences.</S>
    <S sid="85" ssid="39">In the example, [adjective] is followed three times by [noun] and once by [adjective], so the network shows a probability of 1 / 4 for the self loop and 3/4 for the advance to [noun].</S>
    <S sid="86" ssid="40">Notice that the system has now generalized to include any number of adjectives in a row.</S>
    <S sid="87" ssid="41">Each rule in general would occur multiple times in a given training set, but in addition there is a significant amount of sharing of individual sibling pairs among different rules, the so-called cross-pollination effect.</S>
    <S sid="88" ssid="42">This method of determining probabilities effectively amounts to a bigram language model7 embedded in a hierarchical structure, where a separate set of bigram statistics is collected on category pairs for each unique LHS category name.</S>
    <S sid="89" ssid="43">The method is to be distinguished from the more common method of applying probabilities to entire rule productions, rather than to sibling pairs among a shared rule set.</S>
    <S sid="90" ssid="44">An advantage to organizing probabilities at the sibling-pair level is that it conveniently provides an explicit probability estimate for a single next word, given a particular word sequence.</S>
    <S sid="91" ssid="45">This probability can be used to represent the language model score for the next word, which, when used in conjunction with the acoustic score, provides the overall score for the word.</S>
    <S sid="92" ssid="46">We make a further simplifying assumption that each sentence has only a single parse associated with it.</S>
    <S sid="93" ssid="47">This is probably justified only in conjunction with a grammar that contains semantic categories.</S>
    <S sid="94" ssid="48">We have found that, within the restricted domains of specific applications, the first parse is essentially always a correct parse, and often, in fact, the only parse.</S>
    <S sid="95" ssid="49">With only a single parse from each sentence, and with the grammar trained at the sibling-pair level, training probabilities becomes a trivial exercise of counting and normalizing sibling-pair frequencies within the pooled context-free rule sets.</S>
    <S sid="96" ssid="50">Training is localized such that, conditional on the parent, there is an advance from one sibling to some next sibling with probability 1.0.</S>
    <S sid="97" ssid="51">Normalization requires only this locally applied constraint, making it extremely fast to train on a set of parsed sentences.</S>
    <S sid="98" ssid="52">Furthermore, the method could incorporate syntactic and semantic constraints, by simply renormalizing the probabilities at run time, after paths that fail due to constraints have been eliminated.</S>
    <S sid="99" ssid="53">A functional block diagram of the control strategy is given in Figure 2.</S>
    <S sid="100" ssid="54">At any given time, a set of active parse nodes are arranged on a priority queue.</S>
    <S sid="101" ssid="55">Each parse node contains a pointer to a corresponding grammar node&#8222; and has access to all the information needed to pursue its partial theory.</S>
    <S sid="102" ssid="56">The top node is popped from the queue, and it then creates a number of new nodes (either first children' or right siblings9 depending on its state), and inserts them into the queue according to their probabilities.</S>
    <S sid="103" ssid="57">If the node is an [end] node, it returns control to the parent node, giving that node a completed subparse.</S>
    <S sid="104" ssid="58">As each new node is considered, unifications of syntactic and semantic constraints are performed, and may lead to failure.</S>
    <S sid="105" ssid="59">The process can terminate on the first successful completion of a sentence, or the Nth successful completion if more than one hypothesis is desired.</S>
    <S sid="106" ssid="60">A parse in TINA begins with a single parse node linked to the grammar node [sentence], which is entered on the queue with probability 1.0.</S>
    <S sid="107" ssid="61">This node creates new parse nodes that might have categories such as [statement], [question], and [request], and places them on the queue, prioritized.</S>
    <S sid="108" ssid="62">If [statement] is the most likely child, it gets popped from the queue, and returns nodes indicating [subject], [it], etc., to the queue.</S>
    <S sid="109" ssid="63">When [subject] reaches the top of the queue, it activates units such as [noun phrase], [gerund], and [noun clause].</S>
    <S sid="110" ssid="64">Each node, after instantiating first-children, becomes inactive, pending the return of a successful subparse from a sequence of children.</S>
    <S sid="111" ssid="65">Eventually, the cascade of first-children reaches a terminal node such as [article], Stephanie Seneff TINA: A Natural Language System for Spoken Language Applications which proposes a set of words to be compared with the input stream.</S>
    <S sid="112" ssid="66">If a match with an appropriate word is found, then the terminal node fills its subparse slot with an entry such as ([article] &amp;quot;the&amp;quot;), and activates all of its possible right-siblings.</S>
    <S sid="113" ssid="67">Whenever a terminal node has successfully matched an input word, the path probability is reset to 1.0.10 Thus the probabilities that are used to prioritize the queue represent not the total path probability but rather the probability given the partial word sequence.</S>
    <S sid="114" ssid="68">Each path climbs up from a terminal node and back down to a next terminal node, with each new node adjusting the path probability by multiplying by a new conditional probability The resulting conditional path probability for a next word represents the probability of that word in its linguistic role given all preceding words in their linguistic roles.</S>
    <S sid="115" ssid="69">With this strategy, a partial sentence does not become increasingly improbable as more and more words are added.</S>
    <S sid="116" ssid="70">Because of the sharing of common elements on the right-hand side of rules, TINA can automatically generate new rules that were not explicitly provided.</S>
    <S sid="117" ssid="71">For instance, having seen the rule X = ABC and the rule X B C D, the system would automatically generate two new rules, X B C and X = ABC D. Although this property can potentially lead to certain problems with overgeneralization, there are a number of reasons why it should be viewed as a feature.</S>
    <S sid="118" ssid="72">First of all, it permits the system to generalize more quickly to unseen structures.</S>
    <S sid="119" ssid="73">For example, having seen the rule [question] [aux] [subject] [predicate] (as in &amp;quot;May I go?&amp;quot;) and the rule [question] [have] [subject] [link] [pred-adjective] (as in &amp;quot;Has he been good?&amp;quot;), the system would also understand the forms [question] = [have] [subject] [predicate] (as in &amp;quot;Has he left?&amp;quot;) and [question] [aux] [subject] [link] [pred-adjective] (as in &amp;quot;Should I be careful?&amp;quot;).&amp;quot; Secondly, it greatly simplifies the implementation, because rules do not have to be explicitly monitored during the parse.</S>
    <S sid="120" ssid="74">Given a particular parent and a particular child, the system can generate the allowable right siblings without having to note who the left siblings (beyond the immediate one) were.</S>
    <S sid="121" ssid="75">Finally, and perhaps most importantly, probabilities are established on arcs connecting sibling pairs regardless of which rule is under construction.</S>
    <S sid="122" ssid="76">In this sense the arc probabilities behave like the familiar wordlevel bigrams of simple recognition language models (Jelinek 1976), except that they apply to siblings at multiple levels of the hierarchy.</S>
    <S sid="123" ssid="77">This makes the probabilities meaningful as a product of conditional probabilities as the parse advances to deeper levels of the parse tree and also as it returns to higher levels of the parse tree.</S>
    <S sid="124" ssid="78">This approach implies an independence assumption that claims that what can follow depends only on the left sibling and the parent.</S>
    <S sid="125" ssid="79">One negative aspect of the cross-pollination is that the system can potentially generalize to include forms that are agrammatical.</S>
    <S sid="126" ssid="80">For instance, the forms &amp;quot;Pick the box up&amp;quot; and &amp;quot;Pick up the box,&amp;quot; if defined by the same LHS name, would allow the system to include rules producing forms such as &amp;quot;Pick up the box up&amp;quot; and &amp;quot;Pick up the box up the box!&amp;quot; This problem can be overcome either by giving the two structures different LHS names or by grouping &amp;quot;up the box&amp;quot; and &amp;quot;the box up&amp;quot; into distinct parent nodes, adding another layer to the hierarchy on the RHS.</S>
    <S sid="127" ssid="81">Another solution is to use a trace mechanism to link the two positions for the object, thus preventing it from occurring in both places.</S>
    <S sid="128" ssid="82">A final alternative is to include a PARTICLE bit among the features which, once set, cannot be reset.</S>
    <S sid="129" ssid="83">In fact, there were only a few situations where such problems arose, and reasonable solutions could always be found.</S>
    <S sid="130" ssid="84">TINA's design includes a number of features that lead to rapid development of the grammar and/or porting of the grammar to a new domain, as well as efficient implementation capabilities, in terms of both speed and memory.</S>
    <S sid="131" ssid="85">Among its features are semi-automatic training from a set of example sentences, a sentence generation capability, and a design framework that easily accomodates parallel implementations.</S>
    <S sid="132" ssid="86">It is a two-step procedure to acquire a grammar from a specific set of sentences.</S>
    <S sid="133" ssid="87">The rule set is first built up gradually, by parsing the sentences one-by-one, adding rules and/or constraints as needed.</S>
    <S sid="134" ssid="88">Once a full set of sentences has been parsed in this fashion, the parse trees from the sentences are automatically converted to the sequence of rules used to parse each sentence.</S>
    <S sid="135" ssid="89">The training of both the rule set and the probability assignments is then established directly in a second pass from the provided set of parsed sentences; i.e., the parsed sentences are the grammar.</S>
    <S sid="136" ssid="90">Generation mode uses the same routines as those used by the parser, but chooses a small subset of the permissible paths based on the outcome of a random-number generator, rather than exploring all paths and relying on an input word stream to resolve the correct one.</S>
    <S sid="137" ssid="91">Since all of the arcs have assigned probabilities, the parse tree is traversed by generating a random number at each node and deciding which arcs to select based on the outcome.</S>
    <S sid="138" ssid="92">The arc probabilities can be used to weigh the alternatives.</S>
    <S sid="139" ssid="93">Occasionally, the generator chooses a path that leads to a dead end, because of unanticipated constraints.</S>
    <S sid="140" ssid="94">Hence we in general need to keep more than one partial theory alive at any given time, to avoid having to backtrack upon a failure condition.</S>
    <S sid="141" ssid="95">We could in fact always choose to sprout two branches at any decision point, although this generally leads to a much larger queue than is really necessary.</S>
    <S sid="142" ssid="96">We found instead that it was advantageous to monitor the size of the queue, and arbitrarily increase the number of branches kept alive from one to two whenever the queue becomes dangerously short, shrinking it back to one upon recovery.</S>
    <S sid="143" ssid="97">We have used generation mode to detect overgeneralizations in the grammar, to build a word-pair language model for use as a simple constraint mechanism in our recognizer, and to generate random sentences for testing our interface with the back-end.</S>
    <S sid="144" ssid="98">A final practical feature of TINA is that, as in unification grammars, all unifications are nondestructive, and as a consequence, explicit backtracking is never necessary.</S>
    <S sid="145" ssid="99">Every hypothesis on the queue is independent of every other one, in the sense that activities performed by pursuing one lead do not disturb the other active nodes.</S>
    <S sid="146" ssid="100">This feature makes TINA an excellent candidate for parallel implementation.</S>
    <S sid="147" ssid="101">The control strategy would simply deliver the most probable node to an available processor.</S>
    <S sid="148" ssid="102">TINA has been implemented in Commonlisp and runs on both a Sun workstation and a Symbolics LISP machine.</S>
    <S sid="149" ssid="103">A deterministic word sequence can be parsed in a small fraction of real-time on either machine.</S>
    <S sid="150" ssid="104">Of course, once the input is a speech waveform rather than a word sequence, the uncertainty inherent in the proposed words will greatly increase the search space.</S>
    <S sid="151" ssid="105">Until we have a better handle on control strategies in the best-first search algorithm, it is impossible to predict the computational load for a spoken-input mode.</S>
    <S sid="152" ssid="106">This section describes how TINA handles several issues that are often considered to be part of the task of a parser.</S>
    <S sid="153" ssid="107">These include agreement constraints, semantic restrictions, Stephanie Seneff TINA: A Natural Language System for Spoken Language Applications subject-tagging for verbs, and long distance movement (often referred to as gaps, or the trace, as in &amp;quot;(which article), do you think I should read (t1)?&amp;quot;) (Chomsky 1977).</S>
    <S sid="154" ssid="108">The gap mechanism resembles the Hold register idea of ATNs (Woods 1970) and the treatment of bounded domination metavariables in lexical functional grammars (LFGs) (Bresnan 1982, p. 235 ff.</S>
    <S sid="155" ssid="109">), but it is different from these in that the process of filling the Hold register equivalent involves two steps separately initiated by two independent nodes.</S>
    <S sid="156" ssid="110">Our approach to the design of a constraint mechanism is to establish a framework general enough to handle syntactic, semantic, and, ultimately, phonological constraints using identical functional procedures applied at the node level.</S>
    <S sid="157" ssid="111">The intent was to design a grammar for which the rules would be kept completely free of any constraints.</S>
    <S sid="158" ssid="112">To achieve this goal, we decided to break the constraint equations usually associated with rules down into their component parts, and then to attach constraints to nodes (i.e., categories) as equations in a single variable.</S>
    <S sid="159" ssid="113">The missing variable that must be unified with the new information would be made available by default.</S>
    <S sid="160" ssid="114">In effect, the constraint mechanism is thus reduced from a two-dimensional to a one-dimensional domain.</S>
    <S sid="161" ssid="115">Thus, for example, the developer would not be permitted to write an fstructure (Bresnan 1982) equation of the form [subj]Iilf = [np] associated with the rule [vp] &#8212;&gt; [verb] [np] Unf], to cover, &amp;quot;I told John to go.&amp;quot; Instead, the [np] node (regardless of its parent) would generate a CURRENT-FOCUS (defined later) from its subparse, which would be passed along passively to the verb &amp;quot;go.&amp;quot; The verb would then simply consult the CURRENT-FOCUS (regardless of its source) to establish the identity of its subject.</S>
    <S sid="162" ssid="116">The procedure works as follows.</S>
    <S sid="163" ssid="117">In the absence of any explicit instructions from its grammar node, a parse node simply passes along all features to the immediate relative (first child in the top-down cycle, and right sibling during the bottom-up cycle).</S>
    <S sid="164" ssid="118">Any constraints specified by the grammar node result in a modification of certain feature values.</S>
    <S sid="165" ssid="119">The modifications are specified through a four-tuple of (feature-name new-value logic-function cycle).</S>
    <S sid="166" ssid="120">The possible features include person and number, case, determiner (DEFINITE, INDEFINITE, PROPER, etc.</S>
    <S sid="167" ssid="121">), mode (ROOT, FINITE, etc.</S>
    <S sid="168" ssid="122">), and a semantic category bit map.</S>
    <S sid="169" ssid="123">The new value, entered as a bit pattern, could be a single value, such as SINGULAR, or could be multiple valued as in the number for the noun &amp;quot;fish.&amp;quot; Furthermore, during the bottom-up cycle, the new value can be the special variable top-down-setting, i.e., the value for that feature that currently occupies the slot in the parse node in question.</S>
    <S sid="170" ssid="124">This has the effect of disconnecting the node from its children, with respect to the feature in question.</S>
    <S sid="171" ssid="125">The logic function is one of AND, OR, or SET, and the cycle is either top-down or bottom-up.</S>
    <S sid="172" ssid="126">A parse node has jurisdiction over its own slots only during the bottom-up cycle.</S>
    <S sid="173" ssid="127">During the top-down cycle, its feature value modifications are manifested only in its descendants.</S>
    <S sid="174" ssid="128">The node retains the values for the features that its parent delivered, and may use these for unifications prior to passing information on to its right siblings.</S>
    <S sid="175" ssid="129">This additional complexity was felt necessary to handle number agreement in questions of the form &amp;quot;Do John and Mary eat out a lot?&amp;quot; Here, the auxiliary verb &amp;quot;do&amp;quot; sets the number to plural, but the two individual nouns are singular.</S>
    <S sid="176" ssid="130">The SUBJECT node blocks transfer of number information to its children (by setting the value to all 1s), but unifies the value for number returned during the bottom-up cycle with the value previously delivered to it by its left sibling, the auxiliary verb.</S>
    <S sid="177" ssid="131">There is a node, [andnoun-phrase], that deals specifically with compound nouns.</S>
    <S sid="178" ssid="132">This node blocks transfer 12 If the right sibling happens to be the distinguished [end] node, then the features get passed up to the parent. of number information to its children and sets number to plural during the bottom-up cycle.</S>
    <S sid="179" ssid="133">It has been found expedient to define a meta-level operator named &amp;quot;detach&amp;quot; that invokes a block operation during both the top-down and bottom-up cycles.</S>
    <S sid="180" ssid="134">This operation has the effect of isolating the node in question from its descendents with respect to the particular blocked feature.</S>
    <S sid="181" ssid="135">This mechanism was commonly used to detach a subordinate clause from a main clause with respect to the semantic bits, for example.</S>
    <S sid="182" ssid="136">The setting that had been delivered to the node during the top-down cycle is retained and sent forward during the bottom-up cycle, but not communicated to the node's children.</S>
    <S sid="183" ssid="137">Another special blocking property can be associated with certain features, but the block only applies at the point where an [end] node returns a solution to a parent.</S>
    <S sid="184" ssid="138">This is true, for instance, of the mode for the verb.</S>
    <S sid="185" ssid="139">Along with the syntactic and semantic features, there are also two slots that are concerned with the trace mechanism, and these are used as well for semantic filtering on key information from the past.</S>
    <S sid="186" ssid="140">There are some special operations concerned with filling these slots and unifying semantics with these slots that will be described in more detail in later sections.</S>
    <S sid="187" ssid="141">Lexical entries contain three-tuple specifications of values for features; the fourth element is irrelevant since there are no separate top-down and bottom-up cycles.</S>
    <S sid="188" ssid="142">Thus a terminal verb node contains vocabulary entries that include settings for verb mode, and for person/number if the verb is finite.</S>
    <S sid="189" ssid="143">The plural form for nouns can be handled through a [ph ] morph for the sake of efficiency.</S>
    <S sid="190" ssid="144">This morph sets the value of number to plural, regardless of its prior setting.</S>
    <S sid="191" ssid="145">It is the job of a parent node to unify that setting with the value delivered by the left siblings of the noun.</S>
    <S sid="192" ssid="146">Some examples may help explain how the constraint mechanism works.</S>
    <S sid="193" ssid="147">Consider, for example, the ill-formed phrase &amp;quot;each boats.&amp;quot; Suppose the grammar has the three rules, ([np] [da] [noun]), ([noun] [root-noun]), and ([noun] -4 [root-noun] [pl]).</S>
    <S sid="194" ssid="148">The lexical item &amp;quot;each&amp;quot; sets the number to singular and passes this value to the [noun] node.</S>
    <S sid="195" ssid="149">The [noun] node blocks transfer of number to its children.</S>
    <S sid="196" ssid="150">&amp;quot;Boat&amp;quot; sets the number to singular, but the [pl] morph overrides this value, returning a plural value to the parent.</S>
    <S sid="197" ssid="151">This plural value gets unified with the singular value that had been retained from &amp;quot;each&amp;quot; during the top-down cycle.</S>
    <S sid="198" ssid="152">The unification fails and the parse dies.</S>
    <S sid="199" ssid="153">By splitting off the plural morph, singular and plural nouns can share the bulk of their phonetics, thus reducing greatly the redundancy in the recognizer's matching problem.</S>
    <S sid="200" ssid="154">In theory, morphs could be split off for verbs as well, but due to the large number of irregularities this was not done.</S>
    <S sid="201" ssid="155">Subject-verb agreement gets enforced by default, because the number information that was realized during the parsing of the subject node gets passed along to the predicate and down to the terminal verb node.</S>
    <S sid="202" ssid="156">The lexical item unifies the number information, and the parse fails if the result is zero.</S>
    <S sid="203" ssid="157">Any nonauxiliary verb node blocks the transfer of any predecessor person/number information to its right siblings during the bottom-up cycle, reflecting the fact that verbs agree in person/number with their subject but not their object.</S>
    <S sid="204" ssid="158">Certain nodes set the mode of the verb either during the top-down or the bottomup cycle.</S>
    <S sid="205" ssid="159">Thus, for example, &amp;quot;have&amp;quot; as an auxiliary verb sets mode to PAST-PARTICIPLE during the bottom-up cycle (i.e., for its right-siblings).</S>
    <S sid="206" ssid="160">The category [gerund] sets the mode to PRESENT-PARTICIPLE during the top-down cycle (for its children).</S>
    <S sid="207" ssid="161">Whenever a [predicate] node is invoked, the verb's mode has always been set by a predecessor.</S>
    <S sid="208" ssid="162">2.5.1 Gaps.</S>
    <S sid="209" ssid="163">The mechanism to deal with gaps resembles in certain respects the Hold register idea of ATNs, but with an important difference, reflecting the design philosophy that no node can have access to information outside of its immediate domain.</S>
    <S sid="210" ssid="164">The mechanism involves two slots that are available in the feature vector of each parse node.</S>
    <S sid="211" ssid="165">These are called the CURRENT-FOCUS and the FLOAT-OBJECT, respectively.</S>
    <S sid="212" ssid="166">The CURRENT-FOCUS slot contains, at any given time, a pointer to the most recently mentioned content phrase in the sentence.</S>
    <S sid="213" ssid="167">If the FLOAT-OBJECT Slot is occupied, it means that there is a gap somewhere in the future that will ultimately be filled by the partial parse contained in the FLOAT-OBJECT.</S>
    <S sid="214" ssid="168">The process of getting into the FLOAT-OBJECT slot (which is analogous to the Hold register) requires two steps, executed independently by two different nodes.</S>
    <S sid="215" ssid="169">The first node, the generator, fills the CURRENT-FOCUS slot with the subparse returned to it by its children.</S>
    <S sid="216" ssid="170">The second node, the activator, moves the CURRENT-FOCUS into the FLOAT-OBJECT position, for its children, during the top-down cycle.</S>
    <S sid="217" ssid="171">It also requires that the FLOAT-OBJECT be absorbed somewhere among its descendants by a designated absorber node, a condition that is checked during the bottom-up cycle.</S>
    <S sid="218" ssid="172">The CURRENT-FOCUS only gets passed along to siblings and their descendants, and hence is unavailable to activators at higher levels of the parse tree.</S>
    <S sid="219" ssid="173">That is to say, the CURRENT-FOCUS is a feature, like verb-mode, that is blocked when an [end] node is encountered.</S>
    <S sid="220" ssid="174">To a first approximation, a CURRENT-FOCUS reaches only nodes that are c-commanded (Chomsky 1977) by its generator.</S>
    <S sid="221" ssid="175">Finally, certain blocker nodes block the transfer of the FLOAT-OBJECT to their children.</S>
    <S sid="222" ssid="176">A simple example will help explain how this works.</S>
    <S sid="223" ssid="177">For the sentence &amp;quot;(How many pies), did Mike buy (t,)?&amp;quot; as illustrated by the parse tree in Figure 3, the [qsubject] &amp;quot;how many pies&amp;quot; is a generator, so it fills the CURRENT-FOCUS with its subparse.</S>
    <S sid="224" ssid="178">The [do-question] is an activator; it moves the CURRENT-FOCUS into the FLOAT-OBJECT position.</S>
    <S sid="225" ssid="179">Finally, the object of &amp;quot;buy,&amp;quot; an absorber, takes the [q-subject] as its subparse.</S>
    <S sid="226" ssid="180">The [do-question] refuses to accept any solutions from its children if the FLOAT-OBJECT has not been absorbed.</S>
    <S sid="227" ssid="181">Thus, the sentence &amp;quot;How many pies did Mike buy the pies?&amp;quot; would be rejected.</S>
    <S sid="228" ssid="182">Furthermore, the same [do-question] grammar node deals with the yes/no question &amp;quot;Did Mike buy the pies?,&amp;quot; except in this case there is no CURRENTFOCUS and hence no gap.</S>
    <S sid="229" ssid="183">More complicated sentences involving nested or chained traces are handled straightforwardly by this scheme.</S>
    <S sid="230" ssid="184">For instance, the phrase, &amp;quot;Which hospital was Jane taken to?&amp;quot; can be parsed correctly by TINA, identifying &amp;quot;which hospital&amp;quot; as the object of the preposition &amp;quot;to&amp;quot; and &amp;quot;Jane&amp;quot; as the object of &amp;quot;taken.&amp;quot; The phrase &amp;quot;which hospital&amp;quot; gets generated by the [q-subject] and activated by the following [be-question], thus filling the FLOAT-OBJECT slot.</S>
    <S sid="231" ssid="185">When the predicate of the clause is reached, the word &amp;quot;Jane&amp;quot; is in the CURRENT-FOCUS slot, and the phrase &amp;quot;which hospital&amp;quot; is still in the FLOAT-OBJECT slot.</S>
    <S sid="232" ssid="186">The [participial-phrase] for &amp;quot;taken [object]&amp;quot; activates &amp;quot;Jane,&amp;quot; but only for its children.</S>
    <S sid="233" ssid="187">This word is ultimately absorbed by the [object] node within the verb phrase.</S>
    <S sid="234" ssid="188">Meanwhile, the [participial-phrase] passes along the original FLOATOBJECT (&amp;quot;which hospital&amp;quot;) to its right sibling, the adverbial prepositional phrase, &amp;quot;to [object].&amp;quot; The phrase &amp;quot;which hospital&amp;quot; is finally absorbed by the preposition's object.</S>
    <S sid="235" ssid="189">The example used to illustrate the power of ATNs (Woods 1986), &amp;quot;John was believed to have been shot,&amp;quot; also parses correctly, because the [object] node following the verb &amp;quot;believed&amp;quot; acts as both an absorber and a (re)generator.</S>
    <S sid="236" ssid="190">Cases of crossed traces are automatically blocked because the second CURRENT-FOCUS gets moved into the FLOAT-OBJECT position at the time of the second activator, overriding the preexisting FLOAT-OBJECT set up by the earlier activator.</S>
    <S sid="237" ssid="191">The wrong FLOAT-OBJECT is available at the position of the first trace, and the parse dies: *(Which books)i did you ask John (where)1 Bill bought (t,) (tj)?</S>
    <S sid="238" ssid="192">Example of a parse tree illustrating a gap.</S>
    <S sid="239" ssid="193">The CURRENT-FOCUS slot is not restricted to nodes that represent nouns.</S>
    <S sid="240" ssid="194">Some of the generators are adverbial or adjectival parts of speech (Pos).</S>
    <S sid="241" ssid="195">An absorber checks for agreement in POS before it can accept the FLOAT-OBJECT as its subparse.</S>
    <S sid="242" ssid="196">As an example, the question, &amp;quot;(How oily), do you like your salad dressing (t,)?&amp;quot; contains a Eq-subject] &amp;quot;how oily&amp;quot; that is an adjective.</S>
    <S sid="243" ssid="197">The absorber [pred-adjective] accepts the available float-object as its subparse, but only after confirming that POS is ADJECTIVE.</S>
    <S sid="244" ssid="198">The CURRENT-FOCUS has a number of other uses besides its role in movement.</S>
    <S sid="245" ssid="199">It always contains the subject whenever a verb is proposed, including verbs that are predicative objects of another verb, as in &amp;quot;I want to go to China.&amp;quot; It has also been found to be very effective for passing semantic information to be constrained by a future node, and it can play an integral role in pronoun reference.</S>
    <S sid="246" ssid="200">For instance, a reflexive pronoun nearly always refers back to the CURRENT-FOCUS, whereas a nonreflexive form never does, unless it is in the nominative case.</S>
    <S sid="247" ssid="201">2.5.2 Semantic Filtering.</S>
    <S sid="248" ssid="202">In the more recent versions of the grammar, we have implemented a number of semantic constraints using procedures very similar to those used for syntactic constraints.</S>
    <S sid="249" ssid="203">We found it effective to filter on the CURRENT-FOCUS'S semantic category, as well as to constrain absorbers in the gap mechanism to require a match on semantics before they could accept a FLOAT-OBJECT.</S>
    <S sid="250" ssid="204">Semantic categories were Parse tree for the sentence, &amp;quot;What street is the Hyatt on?&amp;quot; implemented in a hierarchy such that, for example, RESTAURANT automatically inherits the more general properties BUILDING and PLACE.</S>
    <S sid="251" ssid="205">We also introduced semantically loaded categories at the low levels of the parse tree.</S>
    <S sid="252" ssid="206">It seems that, as in syntax, there is a trade-off between the number of unique node-types and the number of constraint filtering operations.</S>
    <S sid="253" ssid="207">At low levels of the parse tree it seems more efficient to label the categories, whereas information that must pass through higher levels of the hierarchy is better done through constraint filters.</S>
    <S sid="254" ssid="208">As an example, consider the sentence, &amp;quot;(what street), is the Hyatt on (t,)?&amp;quot; shown in Figure 4.</S>
    <S sid="255" ssid="209">The [q-subject] places &amp;quot;What street&amp;quot; into the CURRENT-FOCUS slot, but this unit is activated to FLOAT-OBJECT status by the subsequent [be-question].</S>
    <S sid="256" ssid="210">The [subject] node refills the now empty CURRENT-FOCUS with &amp;quot;the Hyatt.&amp;quot; The node [a-street], an absorber, can accept the FLOAT-OBJECT as a solution, but only if there is tight agreement in semantics; i.e., it requires the identifier Street.</S>
    <S sid="257" ssid="211">Thus a sentence such as &amp;quot;What restaurant is the Hyatt on?&amp;quot; would fail on semantic grounds.</S>
    <S sid="258" ssid="212">Furthermore, the node [on-street] imposes strict semantic restrictions on the CURRENT-FOCUS.</S>
    <S sid="259" ssid="213">Thus the sentence &amp;quot;(What street), is Cambridge on (t,)?&amp;quot; would fail because [on-street] does not permit Region as the semantic category for the CURRENT-FOCUS, &amp;quot;Cambridge.&amp;quot; One place where semantic filtering can play a powerful role is in subject/verb relationships.</S>
    <S sid="260" ssid="214">This is easily accomplished within TINA's framework because the CURRENTFOCUS slot always contains the subject of a verb at the time of the verb's instantiation.</S>
    <S sid="261" ssid="215">This is obvious in the case of a simple statement or complete clause, since the [subject] node generates a current-focus, which is available as the subject of the terminal verb node in the subsequent [predicate].</S>
    <S sid="262" ssid="216">The same [subject] current-focus is also available as the subject of a verb in a predicative object of another verb, as in &amp;quot;I want to go to China.&amp;quot; For the case where a verb takes an object and an infinitive phrase as arguments, the [object] node replaces the current-focus with its subparse, such that when the verb of the infinitive phrase is proposed, the correct subject is available.</S>
    <S sid="263" ssid="217">This handles cases like &amp;quot;I asked Jane to help.&amp;quot; With this mechanism, the two sentences &amp;quot;I want to go&amp;quot; and &amp;quot;I want John to go&amp;quot; can share the same parse node for the verb want.</S>
    <S sid="264" ssid="218">Certain sentences exhibit a structure that superficially resembles the verb-objectinfinitive-phrase pattern but should not be represented this way, such as &amp;quot;I avoid cigarettes to stay healthy.&amp;quot; Here, clearly, &amp;quot;I&amp;quot; is the subject of &amp;quot;stay.&amp;quot; This can be realized in TINA by having a top-level rule, ([statement] [subject] [predicate] [adjunct-why]).</S>
    <S sid="265" ssid="219">The [object] node for &amp;quot;cigarettes&amp;quot; replaces the CURRENT-FOCUS, but the replacement does not get propagated back up to the [predicate] node (since a current-focus is passed only to siblings and children, but not to parents).</S>
    <S sid="266" ssid="220">Thus, the CURRENT-FOCUS &amp;quot;I&amp;quot; is passed on from the predicate to the adjunct, and eventually to the verb &amp;quot;stay.&amp;quot; Finally, in the case of passive voice, the CURRENT-FOCUS slot is empty at the time the verb is proposed, because the CURRENT-FOCUS which was the surface-form subject has been moved to the float-object position.</S>
    <S sid="267" ssid="221">In this case, the verb has no information concerning its subject, and so it identifies it as an unbound pronoun.</S>
    <S sid="268" ssid="222">Semantic filters can also be used to prevent multiple versions of the same case frame (Fillmore 1968) showing up as complements.</S>
    <S sid="269" ssid="223">For instance, the set of complements [from-place], [to-place], and [at-time] are freely ordered following a movement verb such as &amp;quot;leave.&amp;quot; Thus a flight can &amp;quot;leave for Chicago from Boston at nine,&amp;quot; or, equivalently, &amp;quot;leave at nine for Chicago from Boston.&amp;quot; If these complements are each allowed to follow the other, then in TINA an infinite sequence of [from-place's, [to-place]s and [at-time]s is possible.</S>
    <S sid="270" ssid="224">This is of course unacceptable, but it is straightforward to have each node, as it occurs, or in a semantic bit specifying its case frame, and, in turn, fail if that bit has already been set.</S>
    <S sid="271" ssid="225">We have found that this strategy, in conjunction with the capability of erasing all semantic bits whenever a new clause is entered (through the meta level &amp;quot;detach&amp;quot; operation mentioned previously) serves the desired goal of eliminating the unwanted redundancies.</S>
    <S sid="272" ssid="226">Thus far, we have added all semantic filters by hand, and they are implemented in a hard-fail mode, i.e., if the semantic restrictions fail, the node dies.</S>
    <S sid="273" ssid="227">This strategy seems to be adequate for the limited domains that we have worked with thus far, but they will probably be inadequate for more complex domains.</S>
    <S sid="274" ssid="228">In principle, one could parse a large set of sentences with semantics turned off, collecting the semantic conditions that occurred at each node of interest.</S>
    <S sid="275" ssid="229">Then the system could propose to a human expert a set of filters for each node, based on its observations, and the human could make the final decision on whether to accept the proposals.</S>
    <S sid="276" ssid="230">This approach resembles the work by Grishman et al. (1986) and Hirschman et al.</S>
    <S sid="277" ssid="231">(1975) on selectional restrictions.</S>
    <S sid="278" ssid="232">The semantic conditions that pass could even ultimately be associated with probabilities, obtained by frequency counts on their occurrences.</S>
    <S sid="279" ssid="233">There is obviously a great deal more work to be done in this important area.</S>
  </SECTION>
  <SECTION title="3." number="4">
    <S sid="280" ssid="1">This section addresses some performance measures for a grammar, including coverage, portability, perplexity, and trainability.</S>
    <S sid="281" ssid="2">Perplexity, roughly defined as the geometric mean of the number of alternative word hypotheses that may follow each word in the sentence, is of particular concern in spoken language tasks.</S>
    <S sid="282" ssid="3">Portability and trainability concern the ease with which an existing grammar can be ported to a new task, as well as the amount of training data necessary before the grammar is able to generalize well to unseen data.</S>
    <S sid="283" ssid="4">To date, four distinct domain-specific versions of TINA have been implemented.</S>
    <S sid="284" ssid="5">The first version (TIMIT) was developed for the 450 phonetically rich sentences of the TIMIT database (Lamel et al. 1986).</S>
    <S sid="285" ssid="6">The second version (RM) concerns the Resource Management task (Pallett 1989) that has been popular within the DARPA community in recent years.</S>
    <S sid="286" ssid="7">The third version (VOYAGER) serves as an interface both with a recognizer and with a functioning database back-end (Zue et al. 1990).</S>
    <S sid="287" ssid="8">The VOYAGER system can answer a number of different types of questions concerning navigation within a city, as well as provide certain information about hotels, restaurants, libraries, etc., within the region.</S>
    <S sid="288" ssid="9">A fourth domain-specific version is under development for the ATIS (Air Travel Information System) task, which has recently been designated as the new common task for the DARPA community.</S>
    <S sid="289" ssid="10">We tested ease of portability for TINA by beginning with a grammar built from the 450 TIMIT sentences and then deriving a grammar for the RM task.</S>
    <S sid="290" ssid="11">These two tasks represent very different sentence types.</S>
    <S sid="291" ssid="12">For instance, the overwhelming majority of the TIMIT sentences are statements, whereas the RM task is made up exclusively of questions and requests.</S>
    <S sid="292" ssid="13">The process of conversion to a new grammar involves parsing the new sentences one by one, and adding context-free rules whenever a parse fails.</S>
    <S sid="293" ssid="14">The person entering the rules must be very familiar with the grammar structure, but for the most part it is straightforward to identify and incrementally add missing rules.</S>
    <S sid="294" ssid="15">The parser identifies where in the sentence it fails, and also maintains a record of the successful partial parses.</S>
    <S sid="295" ssid="16">These pieces of information usually are adequate to pinpoint the problem.</S>
    <S sid="296" ssid="17">Once the grammar has been expanded to accomodate the new set of sentences, a subset grammar can be created automatically that only contains rules needed in the new domain, eliminating any rules that were particular to the original domain.</S>
    <S sid="297" ssid="18">It required less than one person-month to convert the grammar from TIMIT to the RM task.</S>
    <S sid="298" ssid="19">A set of 791 sentences within the RM task have been designated as training sentences, and a separate set of 200 sentences as the test set.</S>
    <S sid="299" ssid="20">We built a subset grammar from the 791 parsed training sentences, and then used this grammar to test coverage and perplexity on the unseen test sentences.</S>
    <S sid="300" ssid="21">The grammar could parse 100% of the training sentences and 84% of the test sentences.</S>
    <S sid="301" ssid="22">A formula for the test set perplexity (Lee 1989) is:13 where the wi are the sequence of all words in all sentences, N is the total number of words, including an &amp;quot;end&amp;quot; word after each sentence, and P(w, I w,_1,...wi) is the probability of the ith word given all preceding words.14 If all words are assumed equally likely, then P(w, I w,_1,...w1) can be determined by counting all the words that could follow each word in the sentence, along all workable partial theories.</S>
    <S sid="302" ssid="23">If the grammar contains probability estimates, then these can be used in place of the equally likely assumption.</S>
    <S sid="303" ssid="24">If the grammar's estimates reflect reality, the estimated probabilities will result in a reduction in the total perplexity An average perplexity for the 167 test sentences that were parsable was computed for the two conditions, without (Case 1) and with (Case 2) the estimated probabilities.</S>
    <S sid="304" ssid="25">The result was a perplexity of 368 for Case 1, but only 41.5 for Case 2, as summarized in Table 1.</S>
    <S sid="305" ssid="26">This is with a total vocabulary size of 985 words, and with a grammar that included some semantically restricted classes such as [ship-name] and [readinesscategory].</S>
    <S sid="306" ssid="27">The incorporation of arc probabilities reduced the perplexity by a factor of nine, a clear indicator that a proper mechanism for utilizing probabilities in a grammar can help significantly.</S>
    <S sid="307" ssid="28">An even lower perplexity could be realized within this domain by increasing the number of semantic nodes.</S>
    <S sid="308" ssid="29">In fact, this is a trend that we have increasingly adopted as we move to new domains.</S>
    <S sid="309" ssid="30">We didn't look at the test sentences while designing the grammar, nor have we yet looked at those sentences that failed to parse.</S>
    <S sid="310" ssid="31">However, we decided to examine the parse trees for those sentences that produced at least one parse to determine the depth of the first reasonable parse.</S>
    <S sid="311" ssid="32">The results were essentially the same for the training and the test sentences, as shown in Table 2.</S>
    <S sid="312" ssid="33">Both gave a reasonable parse as either the first or second proposed parse 96% of the time.</S>
    <S sid="313" ssid="34">Two of the test sentences never gave a correct parse.</S>
    <S sid="314" ssid="35">We have recently developed a subdomain for TINA that has been incorporated into a complete spoken language system called VOYAGER.</S>
    <S sid="315" ssid="36">The system provides directions on how to get from one place to another within an urban region, and also gives information such as phone number or address for places such as restaurants, hotels, libraries, etc.</S>
    <S sid="316" ssid="37">We have made extensive use of semantic filters within this domain, in order to reduce the perplexity of the recognition task as much as possible.</S>
    <S sid="317" ssid="38">To obtain training and test data for this task, we had a number of naive subjects use the system as if they were trying to obtain actual information.</S>
    <S sid="318" ssid="39">Their speech was recorded in a simulation mode in which the speech recognition component was excluded.</S>
    <S sid="319" ssid="40">Instead, an experimenter in a separate room typed in the utterances as spoken by the subject.</S>
    <S sid="320" ssid="41">Subsequent processing by the natural language and response generation components was done automatically by the computer (Zue et al. 1989).</S>
    <S sid="321" ssid="42">We were able to collect a total, of nearly 5000 utterances in this fashion.</S>
    <S sid="322" ssid="43">The speech material was then used to train the recognizer component, and the text material was used to train the natural language and back-end components.</S>
    <S sid="323" ssid="44">We designated a subset of 3312 sentences as the training set, and augmented the original rules so as to cover a number of sentences that appeared to stay within the domain of the back-end.</S>
    <S sid="324" ssid="45">We did not try to expand the rules to cover sentences that the back-end could not deal with, because we wanted to keep the natural language component tightly restricted to sentences with a likely overall success.</S>
    <S sid="325" ssid="46">In this way we were able to increase the coverage of an independent test set of 560 utterances from 69% to 76%, with a corresponding increase in perplexity, as shown in Table 3.</S>
    <S sid="326" ssid="47">Perplexity was quite low even without probabilities; this is due mainly to an extensive semantic filtering scheme.</S>
    <S sid="327" ssid="48">Probabilities decreased the perplexity by a factor of three, however, which is still quite significant.</S>
    <S sid="328" ssid="49">An encouraging result was that both perplexity and coverage were of comparable values for the training and test sets, as shown in the table.</S>
    <S sid="329" ssid="50">As mentioned previously, generation mode has been a very useful device for detecting overgeneralization problems in a grammar.</S>
    <S sid="330" ssid="51">After the addition of a number of semantically loaded nodes and semantic filters, the VOYAGER version of the grammar is now restricted mainly to sentences that are semantically as well as syntactically legitimate.</S>
    <S sid="331" ssid="52">To illustrate this point we show in Table 4 five examples of consecutively generated sentences.</S>
    <S sid="332" ssid="53">Since these were not selectively drawn from a larger set, they accurately reflect the current performance level.</S>
    <S sid="333" ssid="54">We also used generation mode to construct a word-pair grammar automatically for the recognizer component of our VOYAGER system.</S>
    <S sid="334" ssid="55">To do this, over 100,000 sentences were generated, and word-pair links were established for all words sharing the same terminal category (such as [restaurant-namel, for all category-pairs appearing in the generated sentences.</S>
    <S sid="335" ssid="56">We could test completion by continuing until no new pairs were found.</S>
    <S sid="336" ssid="57">The resulting word pair grammar has a perplexity of over 70, in contrast to a perplexity of less than nine for the grammar used to construct it.</S>
    <S sid="337" ssid="58">This difference reflects the additional constraint of both the probabilities and the long-distance dependencies.</S>
    <S sid="338" ssid="59">At present, we have available at MIT two systems, VOYAGER and ATIS, involving specific application domains in which a person can carry on a dialog with the computer, either through spoken speech or through text input.</S>
    <S sid="339" ssid="60">In both of these systems, TINA provides the interface between the recognizer and the application back-end.</S>
    <S sid="340" ssid="61">In this section, I will describe our current interfaces between TINA and the recognizer and our future plans in this area.</S>
    <S sid="341" ssid="62">In addition, I will describe briefly how we currently translate the parse tree into a semantic frame that serves as the input to database access and text response generation.</S>
    <S sid="342" ssid="63">This aspect of the system is beyond the scope of this paper, and therefore it will not be covered in detail.</S>
    <S sid="343" ssid="64">The recognizer for these systems is the SUMMIT system (Zue et al. 1989), which uses a segmental-based framework and includes an auditory model in the front-end processing.</S>
    <S sid="344" ssid="65">The lexicon is entered as phonetic pronunciations that are then augmented to account for a number of phonological rules.</S>
    <S sid="345" ssid="66">The search algorithm is the standard Viterbi search (Viterbi 1967), except that the match involves a network-to-network alignment problem rather than sequence-to-sequence.</S>
    <S sid="346" ssid="67">When we first integrated this recognizer with TINA, we used a &amp;quot;wire&amp;quot; connection, in that the recognizer produced a single best output, which was then passed to TINA for parsing.</S>
    <S sid="347" ssid="68">A simple word-pair grammar constrained the search space.</S>
    <S sid="348" ssid="69">If the parse failed, then the sentence was rejected.</S>
    <S sid="349" ssid="70">We have since improved the interface by incorporating a capability in the recognizer to propose additional solutions in turn once the first one fails to parse (Zue et al. 1991) To produce these &amp;quot;N-best&amp;quot; alternatives, we make use of a standard A* search algorithm (Hart 1968, Jelinek 1976).</S>
    <S sid="350" ssid="71">Both the A* and the Viterbi search are left-to-right search algorithms.</S>
    <S sid="351" ssid="72">However, the A* search is contrasted with the Viterbi search in that the set of active hypotheses take up unequal segments of time.</S>
    <S sid="352" ssid="73">That is, when a hypothesis is scoring well it is allowed to procede forward, whereas poorer scoring hypotheses are kept on hold.</S>
    <S sid="353" ssid="74">We have thus far developed two versions of the control strategy, a &amp;quot;loosely coupled&amp;quot; system and a &amp;quot;tightly coupled&amp;quot; system.</S>
    <S sid="354" ssid="75">Both versions begin with a Viterbi search all the way to the end of the sentence, resulting in not only the first candidate solution but also partial scores for a large set of other hypotheses.</S>
    <S sid="355" ssid="76">If this first solution fails to parse, then the best-scoring partial theory is allowed to procede forward incrementally.</S>
    <S sid="356" ssid="77">In an A* search, the main issue is how to get an estimate of the score for the unseen portion of the sentence.</S>
    <S sid="357" ssid="78">In our case, we can use the Viterbi path to the end as the estimate of the future score.</S>
    <S sid="358" ssid="79">This path is guaranteed to be the best way to get to the end; however, it may not parse.</S>
    <S sid="359" ssid="80">Hence it is a tight upper bound on the true score for the rest of the sentence.</S>
    <S sid="360" ssid="81">The recognizer can continue to propose hypotheses until one successfully parses, or until a quitting criterion is reached, such as an upper bound on N. Whereas in the loosely coupled system the parser acts as a filter only on completed candidate solutions (Zue et al. 1991), the tightly coupled system allows the parser to discard partial theories that have no way of continuing.</S>
    <S sid="361" ssid="82">Following the Viterbi search, each partial theory is first extended by the parser to specify possible next words, which are then scored by the recognizer.</S>
    <S sid="362" ssid="83">We have not yet made use of TINA'S probabilities in adjusting the recognizer scores on the fly, but we have been able to incorporate linguistic scores to resort N-best outputs, giving a significant improvement in performance (Goodine et al. 1991).</S>
    <S sid="363" ssid="84">Ultimately we want to incorporate TINA's probabilities directly into the A* search, but it is as yet unclear how to provide an appropriate upper bound for the probability estimate of the unseen portion of the linguistic model.</S>
    <S sid="364" ssid="85">&#8226; Once a parser has produced an analysis of a particular sentence, the next step is to convert it to a meaning representation form that can be used to perform whatever operations the user intended by speaking the sentence.</S>
    <S sid="365" ssid="86">We currently achieve this translation step in a second-pass treewalk through the completed parse tree.</S>
    <S sid="366" ssid="87">Although the generation of semantic frames could be done on the fly as the parse is being proposed, it seems inappropriate to go through all of that extra work for large numbers of incorrect partial theories, due to the uncertainty as to the identity of the terminal word strings inherent in spoken input.</S>
    <S sid="367" ssid="88">We have taken the point of view that all syntactic and semantic information can be represented uniformly in strictly hierarchical structures in the parse tree.</S>
    <S sid="368" ssid="89">Thus the parse tree contains nodes such as [subject] and [dir-object] that represent structural roles, as well as nodes such as [on-street] and [a-school] representing specific semantic categories.</S>
    <S sid="369" ssid="90">There are no separate semantic rules off to the side; rather, the semantic information is encoded directly as names attached to nodes in the tree.</S>
    <S sid="370" ssid="91">Exactly how to get from the parse tree to an appropriate meaning representation is a current research topic in our group.</S>
    <S sid="371" ssid="92">However, the method we are currently using in the ATIS domain (Seneff et al. 1991) represents our most promising approach to this problem.</S>
    <S sid="372" ssid="93">We have decided to limit semantic frame types to a small set of choices such as CLAUSE (for a sentence-level concept, such as request), PREDICATE (for a functional operation), REFERENCE (essentially proper noun), and QSET (for a set of objects).</S>
    <S sid="373" ssid="94">The process of obtaining a completed semantic frame amounts to passing frames along from node to node through the completed parse tree.</S>
    <S sid="374" ssid="95">Each node receives a frame in both a top-down and a bottom-up cycle, and modifies the frame according to specifications based on its broad-class identity (as one of noun, noun-phrase, predicate, quantifier, etc.).</S>
    <S sid="375" ssid="96">For example, a [subject] is a noun-phrase node with the label &amp;quot;topic.&amp;quot; During the top-down cycle, it creates a blank frame and inserts it into a &amp;quot;topic&amp;quot; slot in the frame that was handed to it.</S>
    <S sid="376" ssid="97">It passes the blank frame to its children, who will then fill it appropriately, labeling it as a QSET or as a REFERENCE.</S>
    <S sid="377" ssid="98">It then passes along to the right sibling the same frame that was handed to it from above, with the completed topic slot filled with the information delivered by the children.</S>
    <S sid="378" ssid="99">The raw frame that is realized through the treewalk is post-processed to simplify some of the structure, as well as to augment or interpret expressions such as relative time.</S>
    <S sid="379" ssid="100">For example, the predicate modifier in &amp;quot;flights leaving at ten a.m.&amp;quot; is simplified from a predicate leave to a modifier slot labeled departure-time.</S>
    <S sid="380" ssid="101">An expression such as &amp;quot;next Tuesday&amp;quot; is interpreted relative to today's date to fill in an actual month, date, and year.</S>
    <S sid="381" ssid="102">Following this post-analysis step, the frame is merged with references contained in a history record, to fold in information from the previous discourse.</S>
    <S sid="382" ssid="103">The completed semantic frame is used in ATIS both to generate an SQL (Structured Query Language) command to access the database and to generate a text output to be spoken in the interactive dialog.</S>
    <S sid="383" ssid="104">The SQL pattern is controlled through lists of frame patterns to match and query fragments to generate given the match.</S>
    <S sid="384" ssid="105">Text generation is done by assigning appropriate temporal ordering for modifiers on nouns and for the main noun.</S>
    <S sid="385" ssid="106">The modifiers are contained in slots associated with the QSET frame.</S>
    <S sid="386" ssid="107">Certain frames such as clock-time have special print functions that produce the appropriate piece of text associated with the contents.</S>
  </SECTION>
  <SECTION title="5." number="5">
    <S sid="387" ssid="1">This paper describes a new natural language system that addresses issues of concern in building a fully integrated spoken language system.</S>
    <S sid="388" ssid="2">The formalism provides an integrated approach to representations for syntax and for semantics, and produces a highly constraining language model to a speech recognizer.</S>
    <S sid="389" ssid="3">The grammar includes arc probabilities reflecting the frequency of occurrence of patterns within the domain.</S>
    <S sid="390" ssid="4">These probabilities are used to control the order in which hypotheses are considered, and are trained automatically from a set of parsed sentences, making it straightforward to tailor the grammar to a particular need.</S>
    <S sid="391" ssid="5">Ultimately, one could imagine the existence of a very large grammar that could parse almost anything, which would be subsetted for a particular task by simply providing it with a set of example sentences within that domain.</S>
    <S sid="392" ssid="6">The grammar makes use of a number of other principles that we felt were important.</S>
    <S sid="393" ssid="7">First of all, it explicitly incorporates into the parse tree semantic categories intermixed with syntactic ones, rather than having a set of semantic rules provided separately.</S>
    <S sid="394" ssid="8">The semantic nodes are dealt with in the same way as the syntactic nodes; the consequence is that the node names alone carry essentially all of the information necessary to extract a meaning representation from the sentence.</S>
    <S sid="395" ssid="9">The grammar is not a semantic grammar in the usual sense, because it does include high level nodes of a syntactic nature, such as noun-clause, subject, predicate, etc.</S>
    <S sid="396" ssid="10">A second important feature is that unifications are performed in a one-dimensional framework.</S>
    <S sid="397" ssid="11">That is to say, features delivered to a node by a close relative (sibling/parent/ child) are unified with particular feature values associated with that node.</S>
    <S sid="398" ssid="12">The x variable in an x-y relationship is not explicitly mentioned, but rather is assigned to be &amp;quot;whatever was delivered by the relative.&amp;quot; Thus, for example, a node such as [subject] unifies in exactly the same way, regardless of the rule under construction.</S>
    <S sid="399" ssid="13">Another important feature of TINA is that the same grammar can be run in generation mode, making up random sentences by tossing the dice.</S>
    <S sid="400" ssid="14">This has been found to be extremely useful for revealing overgeneralization problems in the grammar, as well as for automatically acquiring a word-pair grammar for a recognizer and producing sentences to test the back-end capability.</S>
    <S sid="401" ssid="15">We discussed a number of different application domains, and gave some performance statistics in terms of perplexity / coverage / overgeneralization within some of these domains.</S>
    <S sid="402" ssid="16">The most interesting result was obtained within the VOYAGER domain (see Sections 3.3 and 3.4).</S>
    <S sid="403" ssid="17">The perplexity (average number of words that can follow a given word) decreased from 70 to 28 to 8 when the grammar changed from wordpair (derived from the same grammar) to parser without probabilities to parser with probabilities.</S>
    <S sid="404" ssid="18">We currently have two application domains that can carry on a spoken dialog with a user.</S>
    <S sid="405" ssid="19">One, the VOYAGER domain (Zue et al. 1990), answers questions about places of interest in an urban area, in our case, the vicinity of MIT and Harvard University.</S>
    <S sid="406" ssid="20">The second one, ATIS (Seneff et al. 1991), is a system for accessing data in the Official Airline Guide and booking flights.</S>
    <S sid="407" ssid="21">Work continues on improving all aspects of these domains.</S>
    <S sid="408" ssid="22">Our current research is directed at a number of different remaining issues.</S>
    <S sid="409" ssid="23">As of this writing, we have a fully integrated version of the VOYAGER system, using an A* search algorithm (Goodine et al. 1991).</S>
    <S sid="410" ssid="24">The parser produces a set of next-word candidates dynamically for each partial theory.</S>
    <S sid="411" ssid="25">We have not yet incorporated probabilities from TINA into the search, but they are used effectively to resort the final output sentence candidates.</S>
    <S sid="412" ssid="26">In order to incorporate the probabilities into the search we need a tight upper bound on the future linguistic score for the unseen portion of each hypothesis.</S>
    <S sid="413" ssid="27">This is a current research topic in our group.</S>
    <S sid="414" ssid="28">We also plan to experiment with further reductions in perplexity based on a discourse state.</S>
    <S sid="415" ssid="29">This should be particularly effective within the ATIS domain where the system often asks directed questions about as yet unresolved particulars to the flight.</S>
  </SECTION>
  <SECTION title="6." number="6">
    <S sid="416" ssid="1">This appendix walks through a pedagogical example to parse spoken digit sequences up to three long, as in &amp;quot;three hundred and sixteen.&amp;quot; Included is a set of initial contextfree rules, a set of training sentences, an illustration of how to compute the path probabilities from the training sentences, and an illustration of both parsing and perplexity computation for a test sentence.</S>
    <S sid="417" ssid="2">Since there are only five training sentences, a number of the arcs of the original grammar are lost after training.</S>
    <S sid="418" ssid="3">This is a problem to be aware of in building grammars from example sentences.</S>
    <S sid="419" ssid="4">In the absence of a sufficient amount of training data, some arcs will inevitably be zeroed out.</S>
    <S sid="420" ssid="5">Unless it is desired to intentionally filter these out as being outside of the new domain, one can insert some arbitrarily small probability for these arcs, using, for example, an N-gram back-off model (Katz 1987).</S>
    <S sid="421" ssid="6">(parentheses indicate optional elements) and = [and] The training sentences: (with spoken form) 1: 144 &amp;quot;one hundred and forty four&amp;quot; The training pairs for &amp;quot;hundreds-place&amp;quot; (gathering together all rules in (1, 2, 3, 5) above that have &amp;quot;hundreds-place&amp;quot; on the LHS: The count array for &amp;quot;hundreds-place&amp;quot;: digits hundred and end a total start 3 0 0 0 1 4 digits 0 1 0 2 0 3 hundred 0 0 1 1 0 2 and 0 0 0 1 0 1 a 0 1 0 0 0 1 The probability of a transition from start to digits, within the parent node &amp;quot;hundredsplace,&amp;quot; is just 3/4, the ratio of the number of times &amp;quot;hundreds-place&amp;quot; started with &amp;quot;digits&amp;quot; over the number of times it started with anything.</S>
    <S sid="422" ssid="7">Parsing the phrase &amp;quot;four fifteen&amp;quot; with the trained parser: The initial stack:15 ChildlParent, Left Sibling Path Probability hundreds-placeInumber, start 4/5 tens-placeInumber, start 1/5 After &amp;quot;hundreds-place&amp;quot; gets popped and expanded: digitslhundreds-place, start 4/5*3/4 tens-placeInumber, start 1/5 alhundreds-place, start 4/5*1/4 (this is a tie score with the above) After &amp;quot;digits' hundreds-place&amp;quot; is popped and a match with &amp;quot;four&amp;quot; is found: endIhundreds-place, digits 2/3 (given &amp;quot;four&amp;quot; with certainty) hundredIhundreds-place, digits 1/3 (this is the word &amp;quot;hundred&amp;quot;) tens-placeInumber, start 1/5 at hundreds-place, start 4/5*1/4 After &amp;quot;endjhundreds-place, digits&amp;quot; is popped, &amp;quot;hundreds-place&amp;quot; has a solution in hand, &amp;quot;four.&amp;quot; It now activates its only right sibling, &amp;quot;tens-place.&amp;quot; This is a different instance of &amp;quot;tens-place&amp;quot; from the one at the third place in the stack.</S>
    <S sid="423" ssid="8">Its left sibling is &amp;quot;hundreds-place&amp;quot; rather than &amp;quot;start.&amp;quot; tens-placeInumber, hundreds-place hundredIhundreds-place, digits tens-placeInumber, start at hundreds-place, start After &amp;quot;tens-place&amp;quot; is expanded, we have: tensItens-place, start 2/3*3/5 hundredIhundreds-place, digits 1/3 tens-placeInumber, start 1/5 at hundreds-place, start 4/5*1/4 teensItens-place, start 2/3*1/5 ohItens-place, start 2/3*1/5 &amp;quot;Tens&amp;quot; and &amp;quot;hundred&amp;quot; will both get popped off and rejected, because there is no match with the word &amp;quot;fifteen.&amp;quot; &amp;quot;Tens-place&amp;quot; will also get popped, and eventually rejected, because nothing within &amp;quot;tens-place&amp;quot; matches the digit &amp;quot;four.&amp;quot; A similar fate meets the &amp;quot;a&amp;quot; hypothesis.</S>
    <S sid="424" ssid="9">Finally, &amp;quot;teens&amp;quot; will be popped off and matched, and &amp;quot;endi tens-place, teens&amp;quot; will be inserted at the top with probability 1.0.</S>
    <S sid="425" ssid="10">This answer will be returned to the parent, &amp;quot;tens-place,&amp;quot; and two new hypotheses will be inserted at the top of the Paths through the parse tree for the phrase &amp;quot;four fifteen&amp;quot; with associated probabilities derived from the training data. stack as follows: ones-place number, tens-place 3/5 end number, tens-place 2/5 After the first one is rejected, the second one finds a completed &amp;quot;number&amp;quot; rule and an empty input stream.</S>
    <S sid="426" ssid="11">The correct solution is now in hand.</S>
    <S sid="427" ssid="12">Notice that because &amp;quot;teens&amp;quot; was a relatively rare occurrence, a number of incorrect hypotheses had to be pursued before the correct one was considered.</S>
    <S sid="428" ssid="13">Computation of perplexity, for the phrase, &amp;quot;four fifteen:&amp;quot; These are the three transitions with associated probabilities, following the appropriate paths in Figure A.1: Transition Probability Thus, for this example test sentence: This comes out to about 14 words on average following a given word, for this Stephanie Seneff TINA: A Natural Language System for Spoken Language Applications particular phrase.</S>
    <S sid="429" ssid="14">This is higher than the norm for numbers given the grammar, again because of the rare occurrence of the &amp;quot;teens&amp;quot; node, as well as the fact that there is no ones-place.</S>
    <S sid="430" ssid="15">This example is a bit too simple - in general there would be multiple ways to get to a particular next word, and there are also constraints which kill certain paths and make it necessary to readjust probabilities on the fly.</S>
    <S sid="431" ssid="16">In practice, one must find all possible ways to extend a word sequence, computing total path probability for each one, and then renormalize to assure that with probability 1.0 there is an advance to some next word.</S>
    <S sid="432" ssid="17">It is the normalized probability contribution of all paths that can reach the next word that is used to update the log P calculation.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="7">
    <S sid="433" ssid="1">This research has benefited significantly from interactions with Lynette Hirschman and Victor Zue.</S>
    <S sid="434" ssid="2">In addition, Jim Glass, David Goodine, and Christine Pao have all made significant contributions to the programming of the TINA system, for which I am deeply grateful.</S>
    <S sid="435" ssid="3">I would also like to thank several anonymous reviewers for their careful critiques, the outcome of which was a substantially improved document.</S>
  </SECTION>
</PAPER>
