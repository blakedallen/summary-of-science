<PAPER>
  <S sid="0">Multi-Paragraph Segmentation Of Expository Text</S>
  <ABSTRACT>
    <S sid="1" ssid="1">This paper describes TextTiling, an algorithm for partitioning expository texts into coherent multi-paragraph discourse units which reflect the subtopic structure of the texts.</S>
    <S sid="2" ssid="2">The algorithm uses domain-independent lexical frequency and distribution information to recognize the interactions of multiple simultaneous themes.</S>
    <S sid="3" ssid="3">Two fully-implemented versions of the algorithm are described and shown to produce segmentation that corresponds well to human judgments of the major subtopic boundaries of thirteen lengthy texts.</S>
  </ABSTRACT>
  <SECTION title="INTRODUCTION" number="1">
    <S sid="4" ssid="1">The structure of expository texts can be characterized as a sequence of subtopical discussions that occur in the context of a few main topic discussions.</S>
    <S sid="5" ssid="2">For example, a popular science text called Stargazers, whose main topic is the existence of life on earth and other planets, can be described as consisting of the following subdiscussions (numbers indicate paragraph numbers): Subtopic structure is sometimes marked in technical texts by headings and subheadings which divide the text into coherent segments; Brown &amp; Yule (1983:140) state that this kind of division is one of the most basic in discourse.</S>
    <S sid="6" ssid="3">However, many expository texts consist of long sequences of paragraphs with very little structural demarcation.</S>
    <S sid="7" ssid="4">This paper presents fully-implemented algorithms that use lexical cohesion relations to partition expository texts into multi-paragraph segments that reflect their subtopic structure.</S>
    <S sid="8" ssid="5">Because the model of discourse structure is one in which text is partitioned into contiguous, nonoverlapping blocks, I call the general approach TextTiling.</S>
    <S sid="9" ssid="6">The ultimate goal is to not only identify the extents of the subtopical units, but to label their contents as well.</S>
    <S sid="10" ssid="7">This paper focusses only on the discovery of subtopic structure, leaving determination of subtopic content to future work.</S>
    <S sid="11" ssid="8">Most discourse segmentation work is done at a finer granularity than that suggested here.</S>
    <S sid="12" ssid="9">However, for lengthy written expository texts, multi-paragraph segmentation has many potential uses, including the improvement of computational tasks that make use of distributional information.</S>
    <S sid="13" ssid="10">For example, disambiguation algorithms that train on arbitrary-size text windows, e.g., Yarowsky (1992) and Gale et a/.</S>
    <S sid="14" ssid="11">(1992b), and algorithms that use lexical co-occurrence to determine semantic relatedness, e.g., Schiitze (1993), might benefit from using windows with motivated boundaries instead.</S>
    <S sid="15" ssid="12">Information retrieval algorithms can use subtopic structuring to return meaningful portions of a text if paragraphs are too short and sections are too long (or are not present).</S>
    <S sid="16" ssid="13">Motivated segments can also be used as a more meaningful unit for indexing long texts.</S>
    <S sid="17" ssid="14">Salton et at.</S>
    <S sid="18" ssid="15">(1993), working with encyclopedia text, find that comparing a query against sections and then paragraphs is more successful than comparing against full documents alone.</S>
    <S sid="19" ssid="16">I have used the results of TextTiling in a new paradigm for information access on fulltext documents (Hearst 1994).</S>
    <S sid="20" ssid="17">The next section describes the discourse model that motivates the approach.</S>
    <S sid="21" ssid="18">This is followed by a description of two algorithms for subtopic structuring that make use only of lexical cohesion relations, the evaluation of these algorithms, and a summary and discussion of future work.</S>
  </SECTION>
  <SECTION title="THE DISCOURSE MODEL" number="2">
    <S sid="22" ssid="1">Many discourse models assume a hierarchical segmentation model, e.g., attentional/intentional structure (Grosz &amp; Sidner 1986) and Rhetorical Structure Theory (Mann &amp; Thompson 1987).</S>
    <S sid="23" ssid="2">Although many aspects of discourse analysis require such a model, I choose to cast expository text into a linear sequence of segments, both for computational simplicity and because such a structure is sufficient for the coarse-grained tasks of interest here.'</S>
    <S sid="24" ssid="3">Skorochod'ko (1972) suggests discovering a text's structure by dividing it up into sentences and seeing how much word overlap appears among the sentences.</S>
    <S sid="25" ssid="4">The overlap forms a kind of intra-structure; fully connected graphs might indicate dense discussions of a topic, while long spindly chains of connectivity might indicate a sequential account (see Figure 1).</S>
    <S sid="26" ssid="5">The central idea is that of defining the structure of a text as a function of the connectivity patterns of the terms that comprise it.</S>
    <S sid="27" ssid="6">This is in contrast with segmenting guided primarily by fine-grained discourse cues such as register change, focus shift, and cue words.</S>
    <S sid="28" ssid="7">From a computational viewpoint, deducing textual topic structure from lexical connectivity alone is appealing, both because it is easy to compute, and also because discourse cues are sometimes misleading with respect to the topic structure (Brown &amp; Yule 1983)(&#167;3).</S>
    <S sid="29" ssid="8">I Additionally, (Passonneau 8.6 Litman 1993) concede the difficulty of eliciting hierarchical intentional structure with any degree of consistency from their human judges.</S>
    <S sid="30" ssid="9">The topology most of interest to this work is the final one in the diagram, the Piecewise Monolithic Structure, since it represents sequences of densely interrelated discussions linked together, one after another.</S>
    <S sid="31" ssid="10">This topology maps nicely onto that of viewing documents as a sequence of densely interrelated subtopical discussions, one following another.</S>
    <S sid="32" ssid="11">This assumption, as will be seen, is not always valid, but is nevertheless quite useful.</S>
    <S sid="33" ssid="12">This theoretical stance bears a close resemblance to Chafe's notion of The Flow Model of discourse (Chafe 1979), in description of which he writes (pp 179-180): Our data.., suggest that as a speaker moves from focus to focus (or from thought to thought) there are certain points at which there may be a more or less radical change in space, time, character configuration, event structure, or, even, world.</S>
    <S sid="34" ssid="13">... At points where all of these change in a maximal way, an episode boundary is strongly present.</S>
    <S sid="35" ssid="14">But often one or another will change considerably while others will change less radically, and all kinds of varied interactions between these several factors are possible.2 Although Chafe's work concerns narrative text, the same kind of observation applies to expository text.</S>
    <S sid="36" ssid="15">The TextTiling algorithms are designed to recognize episode boundaries by determining where thematic components like those listed by Chafe change in a maximal way.</S>
    <S sid="37" ssid="16">Many researchers have studied the patterns of occurrence of characters, setting, time, and the other thematic factors that Chafe mentions, usually in the context of narrative.</S>
    <S sid="38" ssid="17">In contrast, I attempt to determine where a relatively large set of active themes changes simultaneously, regardless of the type of thematic factor.</S>
    <S sid="39" ssid="18">This is especially important in expository text in which the subject matter tends to structure the discourse more so than characters, setting, etc.</S>
    <S sid="40" ssid="19">For example, in the Stargazers text, a discussion of continental movement, shoreline acreage, and habitability gives way to a discussion of binary and unary star systems.</S>
    <S sid="41" ssid="20">This is not so much a change in setting or character as a change in subject matter.</S>
    <S sid="42" ssid="21">Therefore, to recognize where the subtopic changes occur, I make use of lexical cohesion relations (Halliday &amp; Hasan 1976) in a manner similar to that suggested by Skorochod'ko.</S>
    <S sid="43" ssid="22">Morris and Hirst's pioneering work on computing discourse structure from lexical relations (Morris &amp; Hirst 1991), (Morris 1988) is a precursor to the work reported on here.</S>
    <S sid="44" ssid="23">Influenced by Halliday &amp; Hasan's (1976) theory of lexical coherence, Morris developed an algorithm that finds chains of related terms via a comprehensive thesaurus (Roget's Fourth Edition).3 For example, the 2Interestingly, Chafe arrived at the Flow Model after working extensively with, and then becoming dissatisfied with, a hierarchical model of paragraph structure like that of Longacre (1979). words residential and apartment both index the same thesaural category and can thus be considered to be in a coherence relation with one another.</S>
    <S sid="45" ssid="24">The chains are used to structure texts according to the attentional/intentional theory of discourse structure (Grosz Sidner 1986), and the extent of the chains correspond to the extent of a segment.</S>
    <S sid="46" ssid="25">The algorithm also incorporates the notion of &amp;quot;chain returns&amp;quot; &#8212; repetition of terms after a long hiatus &#8212; to close off an intention that spans over a digression.</S>
    <S sid="47" ssid="26">Since the Morris St Hirst (1991) algorithm attempts to discover attentional/intentional structure, their goals are different than those of TextTiling.</S>
    <S sid="48" ssid="27">Specifically, the discourse structure they attempt to discover is hierarchical and more fine-grained than that discussed here.</S>
    <S sid="49" ssid="28">Thus their model is not set up to take advantage of the fact that multiple simultaneous chains might occur over the same intention.</S>
    <S sid="50" ssid="29">Furthermore, chains tend to overlap one another extensively in long texts.</S>
    <S sid="51" ssid="30">Figure 2 shows the distribution, by sentence number, of selected terms from the Stargazers text.</S>
    <S sid="52" ssid="31">The first two terms have fairly uniform distribution and so should not be expected to provide much information about the divisions of the discussion.</S>
    <S sid="53" ssid="32">The next two terms occur mainly at the beginning and the end of the text, while terms binary through planet have considerable overlap is not generally available online. from sentences 58 to 78.</S>
    <S sid="54" ssid="33">There is a somewhat welldemarked cluster of terms between sentences 35 and 50, corresponding to the grouping together of paragraphs 10, 11, and 12 by human judges who have read the text.</S>
    <S sid="55" ssid="34">From the diagram it is evident that simply looking for chains of repeated terms is not sufficient for determining subtopic breaks.</S>
    <S sid="56" ssid="35">Even combining terms that are closely related semantically into single chains is insufficient, since often several different themes are active in the same segment.</S>
    <S sid="57" ssid="36">For example, sentences 37 - 51 contain dense interaction among the terms move, continent, shoreline, time, species, and life, and all but the latter occur only in this region.</S>
    <S sid="58" ssid="37">However, it is the case that the interlinked terms of sentences 57 - 71 (space, star, binary, trinary, astronomer, orbit) are closely related semantically, assuming the appropriate senses of the terms have been determined.</S>
  </SECTION>
  <SECTION title="ALGORITHMS FOR DISCOVERING SUBTOPIC STRUCTURE" number="3">
    <S sid="59" ssid="1">Many researchers (e.g., Halliday St Hasan (1976), Tannen (1989), Walker (1991)) have noted that term repetition is a strong cohesion indicator.</S>
    <S sid="60" ssid="2">I have found in this work that term repetition alone is a very useful indicator of subtopic structure, when analyzed in terms of multiple simultaneous information threads.</S>
    <S sid="61" ssid="3">This section describes two algorithms for discovering subtopic structure using term repetition as a lexical cohesion indicator.</S>
    <S sid="62" ssid="4">The first method compares, for a given window size, each pair of adjacent blocks of text according to how similar they are lexically.</S>
    <S sid="63" ssid="5">This method assumes that the more similar two blocks of text are, the more likely it is that the current subtopic continues, and, conversely, if two adjacent blocks of text are dissimilar, this implies a change in subtopic flow.</S>
    <S sid="64" ssid="6">The second method, an extension of Morris Si Hirst's (1991) approach, keeps track of active chains of repeated terms, where membership in a chain is determined by location in the text.</S>
    <S sid="65" ssid="7">The method determines subtopic flow by recording where in the discourse the bulk of one set of chains ends and a new set of chains begins.</S>
    <S sid="66" ssid="8">The core algorithm has three main parts: Tokenization refers to the division of the input text into individual lexical units.</S>
    <S sid="67" ssid="9">For both versions of the algorithm, the text is subdivided into psuedosentences of a pre-defined size w (a parameter of the algorithm) rather than actual syntactically-determined sentences, thus circumventing normalization problems.</S>
    <S sid="68" ssid="10">For the purposes of the rest of the discussion these groupings of tokens will be referred to as token-seguences.</S>
    <S sid="69" ssid="11">In practice, setting w to 20 tokens per token-sequence works best for many texts.</S>
    <S sid="70" ssid="12">The morphologically-analyzed token is stored in a table along with a record of the tokensequence number it occurred in, and how frequently it appeared in the token-sequence.</S>
    <S sid="71" ssid="13">A record is also kept of the locations of the paragraph breaks within the text.</S>
    <S sid="72" ssid="14">Closed-class and other very frequent words are eliminated from the analysis.</S>
    <S sid="73" ssid="15">After tokenization, the next step is the comparison of adjacent pairs of blocks of token-sequences for overall lexical similarity.</S>
    <S sid="74" ssid="16">Another important parameter for the algorithm is the blocksize: the number of tokensequences that are grouped together into a block to be compared against an adjacent group of token-sequences.</S>
    <S sid="75" ssid="17">This value, labeled k, varies slightly from text to text; as a heuristic it is the average paragraph length (in token-sequences).</S>
    <S sid="76" ssid="18">In practice, a value of k = 6 works well for many texts.</S>
    <S sid="77" ssid="19">Actual paragraphs are not used because their lengths can be highly irregular, leading to unbalanced comparisons.</S>
    <S sid="78" ssid="20">Similarity values are computed for every tokensequence gap number; that is, a score is assigned to token-sequence gap i corresponding to how similar the token-sequences from token-sequence i&#8212;k through i are to the token-sequences from i +1 to i+ k +1.</S>
    <S sid="79" ssid="21">Note that this moving window approach means that each tokensequence appears in k * 2 similarity computations.</S>
    <S sid="80" ssid="22">Similarity between blocks is calculated by a cosine measure: given two text blocks b1 and 62, each with k token-sequences, E, uh,b1wi,b2 VE, '4,bl Ent-1 '14,b2 where t ranges over all the terms that have been registered during the tokenization step, and wt,bi is the weight assigned to term t in block 61.</S>
    <S sid="81" ssid="23">In this version of the algorithm, the weights on the terms are simply their frequency within the block.4 Thus if the similarity score between two blocks is high, then the blocks have many terms in common.</S>
    <S sid="82" ssid="24">This formula yields a score between 0 and 1, inclusive.</S>
    <S sid="83" ssid="25">These scores can be plotted, token-sequence number against similarity score.</S>
    <S sid="84" ssid="26">However, since similarity is measured between blocks b1 and 62, where b1 spans token-sequences i k through i and 62 spans i + 1 to i + k +1, the measurement's x-axis coordinate falls between token-sequences i and i + 1.</S>
    <S sid="85" ssid="27">Rather than plotting a token-sequence number on the x-axis, we plot token-sequence gap number i.</S>
    <S sid="86" ssid="28">The plot is smoothed with average smoothing; in practice one round of average smoothing with a window size of three works best for most texts.</S>
    <S sid="87" ssid="29">Boundaries are determined by changes in the sequence of similarity scores.</S>
    <S sid="88" ssid="30">The token-sequence gap numbers are ordered according to how steeply the slopes of the plot are to either side of the token-sequence gap, rather than by their absolute similarity score.</S>
    <S sid="89" ssid="31">For a given token-sequence gap i, the algorithm looks at the scores of the token-sequence gaps to the left of i as long are their values are increasing.</S>
    <S sid="90" ssid="32">When the values to the left peak out, the difference between the score at the peak and the score at i is recorded.</S>
    <S sid="91" ssid="33">The same procedure takes place with the token-sequence gaps to the right of i; their scores are examined as long as they continue to rise.</S>
    <S sid="92" ssid="34">The relative height of the peak to the right of i is added to the relative height of the peak to the left.</S>
    <S sid="93" ssid="35">(A gap occurring at a peak will have a score of zero since neither of its neighbors is higher than it.)</S>
    <S sid="94" ssid="36">These new scores, called depth scores, corresponding to how sharp a change occurs on both sides of the tokensequence gap, are then sorted.</S>
    <S sid="95" ssid="37">Segment boundaries are assigned to the token-sequence gaps with the largest corresponding scores, adjusted as necessary to correspond to true paragraph breaks.</S>
    <S sid="96" ssid="38">A proviso check is done that prevents assignment of very close adjacent segment boundaries.</S>
    <S sid="97" ssid="39">Currently there must be at least three intervening token-sequences between boundaries.</S>
    <S sid="98" ssid="40">This helps control for the fact that many texts have spurious header information and single-sentence paragraphs.</S>
    <S sid="99" ssid="41">The algorithm must determine how many segments to assigned to a document, since every paragraph is a potential segment boundary.</S>
    <S sid="100" ssid="42">Any attempt to make an absolute cutoff is problematic since there would need to be some correspondence to the document style and length.</S>
    <S sid="101" ssid="43">A cutoff based on a particular valley depth is similarly problematic.</S>
    <S sid="102" ssid="44">I have devised a method for determining the number of boundaries to assign that scales with the size of the document and is sensitive to the patterns of similarity scores that it produces: the cutoff is a function of the average and standard deviations of the depth scores for the text under analysis.</S>
    <S sid="103" ssid="45">Currently a boundary is drawn only if the depth score exceeds g &#8212; a/2.</S>
  </SECTION>
  <SECTION title="EVALUATION" number="4">
    <S sid="104" ssid="1">One way to evaluate these segmentation algorithms is to compare against judgments made by human readers, another is to compare the algorithms against texts premarked by authors, and a third way is to see how well the results improve a computational task.</S>
    <S sid="105" ssid="2">This section compares the algorithm against reader judgments, since author markups are fallible and are usually applied to text types that this algorithm is not designed for, and Hearst (1994) shows how to use TextTiles in a task (although it does not show whether or not the results of the algorithms used here are better than some other algorithm with similar goals).</S>
    <S sid="106" ssid="3">Judgments were obtained from seven readers for each of thirteen magazine articles which satisfied the length criteria (between 1800 and 2500 words)5 and which contained little structural demarkation.</S>
    <S sid="107" ssid="4">The judges 50ne longer text of 2932 words was used since reader judgments had been obtained for it from an earlier experiment.</S>
    <S sid="108" ssid="5">Judges were technical researchers.</S>
    <S sid="109" ssid="6">Two texts had three or four short headers which were removed for consistency. were asked simply to mark the paragraph boundaries at which the topic changed; they were not given more explicit instructions about the granularity of the segmentation.</S>
    <S sid="110" ssid="7">Figure 3 shows the boundaries marked by seven judges on the Stargazers text.</S>
    <S sid="111" ssid="8">This format helps illustrate the general trends made by the judges and also helps show where and how often they disagree.</S>
    <S sid="112" ssid="9">For instance, all but one judge marked a boundary between paragraphs 2 and 3.</S>
    <S sid="113" ssid="10">The dissenting judge did mark a boundary after 3, as did two of the concurring judges.</S>
    <S sid="114" ssid="11">The next three major boundaries occur after paragraphs 5, 9, 12, and 13.</S>
    <S sid="115" ssid="12">There is some contention in the later paragraphs; three readers marked both 16 and 18, two marked 18 alone, and two marked 17 alone.</S>
    <S sid="116" ssid="13">The outline in the Introduction gives an idea of what each segment is about.</S>
    <S sid="117" ssid="14">Passonneau &amp; Litman (1993) discuss at length considerations about evaluating segmentation algorithms according to reader judgment information.</S>
    <S sid="118" ssid="15">As Figure 3 shows, agreement among judges is imperfect, but trends can be discerned.</S>
    <S sid="119" ssid="16">In Passonneau &amp; Litman's (1993) data, if 4 or more out of 7 judges mark a boundary, the segmentation is found to be significant using a variation of the Q-test (Cochran 1950).</S>
    <S sid="120" ssid="17">My data showed similar results.</S>
    <S sid="121" ssid="18">However, it isn't clear how useful this significance information is, since a simple majority does not provide overwhelming proof about the objective reality of the subtopic break.</S>
    <S sid="122" ssid="19">Since readers often disagree about where to draw a boundary marking for a topic shift, one can only use the general trends as a basis from which to compare different algorithms.</S>
    <S sid="123" ssid="20">Since the goals of TextTiling are better served by algorithms that produce more rather than fewer boundaries, I set the cutoff for &amp;quot;true&amp;quot; boundaries to three rather than four judges per paragraph.6 The remaining gaps are considered nonboundaries.</S>
  </SECTION>
  <SECTION title="Results" number="5">
    <S sid="124" ssid="1">Figure 4 shows a plot of the results of applying the block comparison algorithm to the Stargazer text.</S>
    <S sid="125" ssid="2">When the lowermost portion of a valley is not located at a paragraph gap, the judgment is moved to the nearest paragraph gap.7 For the most part, the regions of strong similarity correspond to the regions of strong agreement among the readers.</S>
    <S sid="126" ssid="3">(The results for this text were fifth highest out of the 13 test texts.)</S>
    <S sid="127" ssid="4">Note however, that the similarity information around paragraph 12 is weak.</S>
    <S sid="128" ssid="5">This paragraph briefly summarizes the contents of the previous three paragraphs; much of the terminol'Paragraphs of three or fewer sentences were combined with their neighbor if that neighbor was deemed to follow at &amp;quot;true&amp;quot; boundary, as in paragraphs 2 and 3 of the Stargazers text.</S>
    <S sid="129" ssid="6">'This might be explained in part by (Stark 1988) who shows that readers disagree measurably about where to place paragraph boundaries when presented with texts with those boundaries removed, ogy that occurred in all of them reappears in this one location (in the spirit of a Grosz &amp; Sidner (1986) &amp;quot;pop&amp;quot; operation).</S>
    <S sid="130" ssid="7">Thus it displays low similarity both to itself and to its neighbors.</S>
    <S sid="131" ssid="8">This is an example of a breakdown caused by the assumptions about the subtopic structure.</S>
    <S sid="132" ssid="9">It is possible that an additional pass through the text could be used to find structure of this kind.</S>
    <S sid="133" ssid="10">The final paragraph is a summary of the entire text; the algorithm recognizes the change in terminology from the preceding paragraphs and marks a boundary; only two of the readers chose to differentiate the summary; for this reason the algorithm is judged to have made an error even though this sectioning decision is reasonable.</S>
    <S sid="134" ssid="11">This illustrates the inherent fallibility of testing against reader judgments, although in part this is because the judges were given loose constraints.</S>
    <S sid="135" ssid="12">Following the advice of Gale et al. (1992a), I compare the algorithm against both upper and lower bounds.</S>
    <S sid="136" ssid="13">The upper bound in this case is the reader judgment data.</S>
    <S sid="137" ssid="14">The lower bound is a baseline algorithm that is a simple, reasonable approach to the problem that can be automated.</S>
    <S sid="138" ssid="15">A simple way to segment the texts is to place boundaries randomly in the document, constraining the number of boundaries to equal that of the average number of paragraph gaps assigned by judges.</S>
    <S sid="139" ssid="16">In the test data, boundaries are placed in about 41% of the paragraph gaps.</S>
    <S sid="140" ssid="17">A program was written that places a boundary at each potential gap 41% of the time (using a random number generator), and run 10,000 times for each text, and the average of the scores of these runs was found.</S>
    <S sid="141" ssid="18">These scores appear in Table 1 (results at 33% are also shown for comparison purposes).</S>
    <S sid="142" ssid="19">The algorithms are evaluated according to how many true boundaries they select out of the total selected (precision) and how many true boundaries are found out of the total possible (recall) (Salton 1988).</S>
    <S sid="143" ssid="20">The recall measure implicitly signals the number of missed boundaries (false negatives, or deletion errors); the number of false positives, or insertion errors, is indicated explicitly.</S>
    <S sid="144" ssid="21">In many cases the algorithms are almost correct but off by one paragraph, especially in the texts that the algorithm performs poorly on.</S>
    <S sid="145" ssid="22">When the block similarity algorithm is allowed to be off by one paragraph, there is dramatic improvement in the scores for the texts that lower part of Table 2, yielding an overall precision of 83% and recall of 78%.</S>
    <S sid="146" ssid="23">As in Figure 4, it is often the case that where the algorithm is incorrect, e.g., paragraph gap 11, the overall blocking is very close to what the judges intended.</S>
    <S sid="147" ssid="24">Table 1 shows that both the blocking algorithm and the chaining algorithm are sandwiched between the upper and lower bounds.</S>
    <S sid="148" ssid="25">Table 2 shows some of these results in more detail.</S>
    <S sid="149" ssid="26">The block similarity algorithm seems to work slightly better than the chaining algorithm, although the difference may not prove significant over the long run.</S>
    <S sid="150" ssid="27">Furthermore, in both versions of the algorithm, changes to the parameters of the algorithm perturbs the resulting boundary markings.</S>
    <S sid="151" ssid="28">This is an undesirable property and perhaps could be remedied with some kind of information-theoretic formulation of the problem.</S>
  </SECTION>
  <SECTION title="SUMMARY AND FUTURE WORK" number="6">
    <S sid="152" ssid="1">This paper has described algorithms for the segmentation of expository texts into discourse units that reflect the subtopic structure of expository text.</S>
    <S sid="153" ssid="2">I have introduced the notion of the recognition of multiple simultaneous themes, which bears some resemblance to .Chafe's Flow Model of discourse and Skorochod'ko's text structure types.</S>
    <S sid="154" ssid="3">The algorithms are fully implemented: term repetition alone, without use of thesaural relations, knowledge bases, or inference mechanisms, works well for many of the experimental texts.</S>
    <S sid="155" ssid="4">The structure it obtains is coarse-grained but generally reflects human judgment data.</S>
    <S sid="156" ssid="5">Earlier work (Hearst 1993) incorporated thesaural information into the algorithms; surprisingly the latest experiments find that this information degrades the performance.</S>
    <S sid="157" ssid="6">This could very well be due to problems with the algorithm used.</S>
    <S sid="158" ssid="7">A simple algorithm that just posits relations among terms that are a small distance apart according to WordNet (Miller et a/.</S>
    <S sid="159" ssid="8">1990) or Roget's 1911 thesaurus (from Project Gutenberg), modeled after Morris and Hirst's heuristics, might work better.</S>
    <S sid="160" ssid="9">Therefore I do not feel the issue is closed, and instead consider successful grouping of related words as future work.</S>
    <S sid="161" ssid="10">As another possible alternative Kozima (1993) has suggested using a (computationally expensive) semantic similarity metric to find similarity among terms within a small window of text (5 to 7 words).</S>
    <S sid="162" ssid="11">This work does not incorporate the notion of multiple simultaneous themes but instead just tries to find breaks in semantic similarity among a small number of terms.</S>
    <S sid="163" ssid="12">A good strategy may be to substitute this kind of similarity information for term repetition in algorithms like those described here.</S>
    <S sid="164" ssid="13">Another possibility would be to use semantic similarity information as computed in Schiitze (1993), Resnik (1993), or Dagan et al. (1993).</S>
    <S sid="165" ssid="14">The use of discourse cues for detection of segment boundaries and other discourse purposes has been extensively researched, although predominantly on spoken text (see Hirschberg &amp; Litman (1993) for a summary of six research groups' treatments of 64 cue words).</S>
    <S sid="166" ssid="15">It is possible that incorporation of such information may provide a relatively simple way improve the cases where the algorithm is off by one paragraph.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="7">
    <S sid="167" ssid="1">This paper has benefited from the comments of Graeme Hirst, Jan Pedersen, Penni Sibun, and Jeff Siskind.</S>
    <S sid="168" ssid="2">I would like to thank Anne Fontaine for her interest and help in the early stages of this work, and Robert Wilensky for supporting this line of research.</S>
    <S sid="169" ssid="3">This work was sponsored in part by the Advanced Research Projects Agency under Grant No.</S>
    <S sid="170" ssid="4">MDA972-92-J-1029 with the Corporation for National Research Initiatives (CNRI), and by the Xerox Palo Alto Research Center.</S>
  </SECTION>
</PAPER>
