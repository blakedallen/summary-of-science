<PAPER>
  <S sid="0">A New String-to-Dependency Machine Translation Algorithm with a Target Dependency Language Model</S>
  <ABSTRACT>
    <S sid="1" ssid="1">In this paper, we propose a novel string-todependency algorithm for statistical machine translation.</S>
    <S sid="2" ssid="2">With this new framework, we employ a target dependency language model during decoding to exploit long distance word relations, which are unavailable with a traditional n-gram language model.</S>
    <S sid="3" ssid="3">Our experiments show that the string-to-dependency decoder achieves 1.48 point improvement in BLEU and 2.53 point improvement in TER compared to a standard hierarchical string-tostring system on the NIST 04 Chinese-English evaluation set.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="4" ssid="1">In recent years, hierarchical methods have been successfully applied to Statistical Machine Translation (Graehl and Knight, 2004; Chiang, 2005; Ding and Palmer, 2005; Quirk et al., 2005).</S>
    <S sid="5" ssid="2">In some language pairs, i.e.</S>
    <S sid="6" ssid="3">Chinese-to-English translation, state-ofthe-art hierarchical systems show significant advantage over phrasal systems in MT accuracy.</S>
    <S sid="7" ssid="4">For example, Chiang (2007) showed that the Hiero system achieved about 1 to 3 point improvement in BLEU on the NIST 03/04/05 Chinese-English evaluation sets compared to a start-of-the-art phrasal system.</S>
    <S sid="8" ssid="5">Our work extends the hierarchical MT approach.</S>
    <S sid="9" ssid="6">We propose a string-to-dependency model for MT, which employs rules that represent the source side as strings and the target side as dependency structures.</S>
    <S sid="10" ssid="7">We restrict the target side to the so called wellformed dependency structures, in order to cover a large set of non-constituent transfer rules (Marcu et al., 2006), and enable efficient decoding through dynamic programming.</S>
    <S sid="11" ssid="8">We incorporate a dependency language model during decoding, in order to exploit long-distance word relations which are unavailable with a traditional n-gram language model on target strings.</S>
    <S sid="12" ssid="9">For comparison purposes, we replicated the Hiero decoder (Chiang, 2005) as our baseline.</S>
    <S sid="13" ssid="10">Our stringto-dependency decoder shows 1.48 point improvement in BLEU and 2.53 point improvement in TER on the NIST 04 Chinese-English MT evaluation set.</S>
    <S sid="14" ssid="11">In the rest of this section, we will briefly discuss previous work on hierarchical MT and dependency representations, which motivated our research.</S>
    <S sid="15" ssid="12">In section 2, we introduce the model of string-to-dependency decoding.</S>
    <S sid="16" ssid="13">Section 3 illustrates of the use of dependency language models.</S>
    <S sid="17" ssid="14">In section 4, we describe the implementation details of our MT system.</S>
    <S sid="18" ssid="15">We discuss experimental results in section 5, compare to related work in section 6, and draw conclusions in section 7.</S>
    <S sid="19" ssid="16">Graehl and Knight (2004) proposed the use of targettree-to-source-string transducers (xRS) to model translation.</S>
    <S sid="20" ssid="17">In xRS rules, the right-hand-side(rhs) of the target side is a tree with non-terminals(NTs), while the rhs of the source side is a string with NTs.</S>
    <S sid="21" ssid="18">Galley et al. (2006) extended this string-to-tree model by using Context-Free parse trees to represent the target side.</S>
    <S sid="22" ssid="19">A tree could represent multi-level transfer rules.</S>
    <S sid="23" ssid="20">The Hiero decoder (Chiang, 2007) does not require explicit syntactic representation on either side of the rules.</S>
    <S sid="24" ssid="21">Both source and target are strings with NTs.</S>
    <S sid="25" ssid="22">Decoding is solved as chart parsing.</S>
    <S sid="26" ssid="23">Hiero can be viewed as a hierarchical string-to-string model.</S>
    <S sid="27" ssid="24">Ding and Palmer (2005) and Quirk et al. (2005) followed the tree-to-tree approach (Shieber and Schabes, 1990) for translation.</S>
    <S sid="28" ssid="25">In their models, dependency treelets are used to represent both the source and the target sides.</S>
    <S sid="29" ssid="26">Decoding is implemented as tree transduction preceded by source side dependency parsing.</S>
    <S sid="30" ssid="27">While tree-to-tree models can represent richer structural information, existing tree-totree models did not show advantage over string-totree models on translation accuracy due to a much larger search space.</S>
    <S sid="31" ssid="28">One of the motivations of our work is to achieve desirable trade-off between model capability and search space through the use of the so called wellformed dependency structures in rule representation.</S>
    <S sid="32" ssid="29">Dependency trees reveal long-distance relations between words.</S>
    <S sid="33" ssid="30">For a given sentence, each word has a parent word which it depends on, except for the root word.</S>
    <S sid="34" ssid="31">Figure 1 shows an example of a dependency tree.</S>
    <S sid="35" ssid="32">Arrows point from the child to the parent.</S>
    <S sid="36" ssid="33">In this example, the word find is the root.</S>
    <S sid="37" ssid="34">Dependency trees are simpler in form than CFG trees since there are no constituent labels.</S>
    <S sid="38" ssid="35">However, dependency relations directly model semantic structure of a sentence.</S>
    <S sid="39" ssid="36">As such, dependency trees are a desirable prior model of the target sentence.</S>
    <S sid="40" ssid="37">We restrict ourselves to the so-called well-formed target dependency structures based on the following considerations.</S>
    <S sid="41" ssid="38">In (Ding and Palmer, 2005; Quirk et al., 2005), there is no restriction on dependency treelets used in transfer rules except for the size limit.</S>
    <S sid="42" ssid="39">This may result in a high dimensionality in hypothesis representation and make it hard to employ shared structures for efficient dynamic programming.</S>
    <S sid="43" ssid="40">In (Galley et al., 2004), rules contain NT slots and combination is only allowed at those slots.</S>
    <S sid="44" ssid="41">Therefore, the search space becomes much smaller.</S>
    <S sid="45" ssid="42">Furthermore, shared structures can be easily defined based on the labels of the slots.</S>
    <S sid="46" ssid="43">In order to take advantage of dynamic programming, we fixed the positions onto which another another tree could be attached by specifying NTs in dependency trees.</S>
    <S sid="47" ssid="44">Marcu et al. (2006) showed that many useful phrasal rules cannot be represented as hierarchical rules with the existing representation methods, even with composed transfer rules (Galley et al., 2006).</S>
    <S sid="48" ssid="45">For example, the following rule A number of techniques have been proposed to improve rule coverage.</S>
    <S sid="49" ssid="46">(Marcu et al., 2006) and (Galley et al., 2006) introduced artificial constituent nodes dominating the phrase of interest.</S>
    <S sid="50" ssid="47">The binarization method used by Wang et al. (2007) can cover many non-constituent rules also, but not all of them.</S>
    <S sid="51" ssid="48">For example, it cannot handle the above example.</S>
    <S sid="52" ssid="49">DeNeefe et al. (2007) showed that the best results were obtained by combing these methods.</S>
    <S sid="53" ssid="50">In this paper, we use well-formed dependency structures to handle the coverage of non-constituent rules.</S>
    <S sid="54" ssid="51">The use of dependency structures is due to the flexibility of dependency trees as a representation method which does not rely on constituents (Fox, 2002; Ding and Palmer, 2005; Quirk et al., 2005).</S>
    <S sid="55" ssid="52">The well-formedness of the dependency structures enables efficient decoding through dynamic programming.</S>
  </SECTION>
  <SECTION title="2 String-to-Dependency Translation" number="2">
    <S sid="56" ssid="1">A string-to-dependency grammar G is a 4-tuple G =&lt; R, X, Tf, Te &gt;, where R is a set of transfer rules.</S>
    <S sid="57" ssid="2">X is the only non-terminal, which is similar to the Hiero system (Chiang, 2007).</S>
    <S sid="58" ssid="3">Tf is a set of terminals in the source language, and Te is a set of terminals in the target language1.</S>
    <S sid="59" ssid="4">A string-to-dependency transfer rule R E R is a 4-tuple R =&lt; 5f, 5e, D, A &gt;, where 5f E (Tf U {X})+ is a source string, 5e E (Te U {X})+ is a target string, D represents the dependency structure for 5e, and A is the alignment between 5f and 5e.</S>
    <S sid="60" ssid="5">Non-terminal alignments in A must be one-to-one.</S>
    <S sid="61" ssid="6">In order to exclude undesirable structures, we only allow 5e whose dependency structure D is well-formed, which we will define below.</S>
    <S sid="62" ssid="7">In addition, the same well-formedness requirement will be applied to partial decoding results.</S>
    <S sid="63" ssid="8">Thus, we will be able to employ shared structures to merge multiple partial results.</S>
    <S sid="64" ssid="9">Based on the results in previous work (DeNeefe et al., 2007), we want to keep two kinds of dependency structures.</S>
    <S sid="65" ssid="10">In one kind, we keep dependency trees with a sub-root, where all the children of the sub-root are complete.</S>
    <S sid="66" ssid="11">We call them fixed dependency structures because the head is known or fixed.</S>
    <S sid="67" ssid="12">In the other, we keep dependency structures of sibling nodes of a common head, but the head itself is unspecified or floating.</S>
    <S sid="68" ssid="13">Each of the siblings must be a complete constituent.</S>
    <S sid="69" ssid="14">We call them floating dependency structures.</S>
    <S sid="70" ssid="15">Floating structures can represent many linguistically meaningful non-constituent structures: for example, like the red, a modifier of a noun.</S>
    <S sid="71" ssid="16">Only those two kinds of dependency structures are well-formed structures in our system.</S>
    <S sid="72" ssid="17">Furthermore, we operate over well-formed structures in a bottom-up style in decoding.</S>
    <S sid="73" ssid="18">However, the description given above does not provide a clear definition on how to combine those two types of structures.</S>
    <S sid="74" ssid="19">In the rest of this section, we will provide formal definitions of well-formed structures and combinatory operations over them, so that we can easily manipulate well-formed structures in decoding.</S>
    <S sid="75" ssid="20">Formal definitions also allow us to easily extend the framework to incorporate a dependency language model in decoding.</S>
    <S sid="76" ssid="21">Examples will be provided along with the formal definitions.</S>
    <S sid="77" ssid="22">Consider a sentence 5 = w1w2...wn.</S>
    <S sid="78" ssid="23">Let d1d2...dn represent the parent word IDs for each word.</S>
    <S sid="79" ssid="24">For example, d4 = 2 means that w4 depends 'We ignore the left hand side here because there is only one non-terminal X.</S>
    <S sid="80" ssid="25">Of course, this formalism can be extended to have multiple NTs.</S>
    <S sid="81" ssid="26">Definition 1 A dependency structure di..j is fixed on head h, where h E [i, j], or fixed for short, if and only if it meets the following conditions In addition, we say the category of di..j is (&#8722;, h, &#8722;), where &#8722; means this field is undefined.</S>
    <S sid="82" ssid="27">We say the category of di..j is (C, &#8722;, &#8722;) if j &lt; h, or (&#8722;, &#8722;, C) otherwise.</S>
    <S sid="83" ssid="28">A category is composed of the three fields (A, h, B), where h is used to represent the head, and A and B are designed to model left and right dependents of the head respectively.</S>
    <S sid="84" ssid="29">A dependency structure is well-formed if and only if it is either fixed or floating.</S>
    <S sid="85" ssid="30">We can represent dependency structures with graphs.</S>
    <S sid="86" ssid="31">Figure 2 shows examples of fixed structures, Figure 3 shows examples of floating structures, and Figure 4 shows ill-formed dependency structures.</S>
    <S sid="87" ssid="32">It is easy to verify that the structures in Figures 2 and 3 are well-formed.</S>
    <S sid="88" ssid="33">4(a) is ill-formed because boy does not have its child word the in the tree.</S>
    <S sid="89" ssid="34">4(b) is ill-formed because it is not a continuous segment.</S>
    <S sid="90" ssid="35">As for the example the red mentioned above, it is a well-formed floating dependency structure.</S>
    <S sid="91" ssid="36">One of the purposes of introducing floating dependency structures is that siblings having a common parent will become a well-defined entity, although they are not considered a constituent.</S>
    <S sid="92" ssid="37">We always build well-formed partial structures on the target side in decoding.</S>
    <S sid="93" ssid="38">Furthermore, we combine partial dependency structures in a way such that we can obtain all possible well-formed but no ill-formed dependency structures during bottom-up decoding.</S>
    <S sid="94" ssid="39">The solution is to employ categories introduced above.</S>
    <S sid="95" ssid="40">Each well-formed dependency structure has a category.</S>
    <S sid="96" ssid="41">We can apply four combinatory operations over the categories.</S>
    <S sid="97" ssid="42">If we can combine two categories with a certain category operation, we can use a corresponding tree operation to combine two dependency structures.</S>
    <S sid="98" ssid="43">The category of the combined dependency structure is the result of the combinatory category operations.</S>
    <S sid="99" ssid="44">We first introduce three meta category operations.</S>
    <S sid="100" ssid="45">Two of them are unary operations, left raising (LR) and right raising (RR), and one is the binary operation unification (UF).</S>
    <S sid="101" ssid="46">First, the raising operations are used to turn a completed fixed structure into a floating structure.</S>
    <S sid="102" ssid="47">It is easy to verify the following theorem according to the definitions.</S>
    <S sid="103" ssid="48">Therefore we can always raise a fixed structure if we assume it is complete, i.e.</S>
    <S sid="104" ssid="49">(1) holds.</S>
    <S sid="105" ssid="50">Unification is well-defined if and only if we can unify all three elements and the result is a valid fixed or floating category.</S>
    <S sid="106" ssid="51">For example, we can unify a fixed structure with a floating structure or two floating structures in the same direction, but we cannot unify two fixed structures.</S>
    <S sid="107" ssid="52">Next we introduce the four tree operations on dependency structures.</S>
    <S sid="108" ssid="53">Instead of providing the formal definition, we use figures to illustrate these operations to make it easy to understand.</S>
    <S sid="109" ssid="54">Figure 1 shows a traditional dependency tree.</S>
    <S sid="110" ssid="55">Figure 5 shows the four operations to combine partial dependency structures, which are left adjoining (LA), right adjoining (RA), left concatenation (LC) and right concatenation (RC).</S>
    <S sid="111" ssid="56">Child and parent subtrees can be combined with adjoining which is similar to the traditional dependency formalism.</S>
    <S sid="112" ssid="57">We can either adjoin a fixed structure or a floating structure to the head of a fixed structure.</S>
    <S sid="113" ssid="58">Complete siblings can be combined via concatenation.</S>
    <S sid="114" ssid="59">We can concatenate two fixed structures, one fixed structure with one floating structure, or two floating structures in the same direction.</S>
    <S sid="115" ssid="60">The flexibility of the order of operation allows us to take adWe use the same names for the operations on categories for the sake of convenience.</S>
    <S sid="116" ssid="61">We can easily use the meta category operations to define the four combinatory operations.</S>
    <S sid="117" ssid="62">The definition of the operations in the left direction is as follows.</S>
    <S sid="118" ssid="63">Those in the right direction are similar.</S>
    <S sid="119" ssid="64">It is easy to verify the soundness and completeness of category operations based on one-to-one mapping of the conditions in the definitions of corresponding operations on dependency structures and on categories.</S>
    <S sid="120" ssid="65">Suppose we have a dependency tree for a red apple, where both a and red depend on apple.</S>
    <S sid="121" ssid="66">There are two ways to compute the category of this string from the bottom up. cat(Da red apple) = LA(cat(Da),LA(cat(Dred),cat(Dapple))) = LA(LC(cat(Da), cat(Dred)), cat(Dapple)) Based on Theorem 2, it follows that combinatory operation of categories has the confluence property, since the result dependency structure is determined.</S>
    <S sid="122" ssid="67">Corollary 1 (confluence) The category of a wellformed dependency tree does not depend on the order of category calculation.</S>
    <S sid="123" ssid="68">With categories, we can easily track the types of dependency structures and constrain operations in decoding.</S>
    <S sid="124" ssid="69">For example, we have a rule with dependency structure find +&#8212; X, where X right adjoins to find.</S>
    <S sid="125" ssid="70">Suppose we have two floating structures2, We can replace X by X2, but not by X1 based on the definition of category operations.</S>
    <S sid="126" ssid="71">Now we explain how we get the string-todependency rules from training data.</S>
    <S sid="127" ssid="72">The procedure is similar to (Chiang, 2007) except that we maintain tree structures on the target side, instead of strings.</S>
    <S sid="128" ssid="73">Given sentence-aligned bi-lingual training data, we first use GIZA++ (Och and Ney, 2003) to generate word level alignment.</S>
    <S sid="129" ssid="74">We use a statistical CFG parser to parse the English side of the training data, and extract dependency trees with Magerman&#8217;s rules (1995).</S>
    <S sid="130" ssid="75">Then we use heuristic rules to extract transferrules recursively based on the GIZA alignment and the target dependency trees.</S>
    <S sid="131" ssid="76">The rule extraction procedure is as follows.</S>
    <S sid="132" ssid="77">All the 4-tuples (P?</S>
    <S sid="133" ssid="78">',&#65533; phrase alignments, where source phrase P ?</S>
    <S sid="134" ssid="79">',&#65533; &#65533;is e under alignment3 A, and D, the dependency structure for P m,n e , is well-formed.</S>
    <S sid="135" ssid="80">All valid phrase templates are valid rules templates.</S>
  </SECTION>
  <SECTION title="2." number="3">
    <S sid="136" ssid="1">Let (Pi,j f , Pm,n e , D1, A) be a valid rule template, and (Pp,q f , Ps,t e , D2, A) a valid phrase alignment, where [p, q] C [i, j], [s, t] C [m, n], D2 is a sub-structure of D1, and at least one word in Pi,j f but not in Pp,q f is aligned.</S>
    <S sid="137" ssid="2">We create a new valid rule template (P0 f, P0e, D0, A), where we obtain Pf0 by replacing Pp,q f with label X in Pi,j f , and obtain Among all valid rule templates, we collect those that contain at most two NTs and at most seven elements in the source as transfer rules in our system.</S>
    <S sid="138" ssid="3">Following previous work on hierarchical MT (Chiang, 2005; Galley et al., 2006), we solve decoding as chart parsing.</S>
    <S sid="139" ssid="4">We view target dependency as the hidden structure of source fragments.</S>
    <S sid="140" ssid="5">The parser scans all source cells in a bottom-up style, and checks matched transfer rules according to the source side.</S>
    <S sid="141" ssid="6">Once there is a completed rule, we build a larger dependency structure by substituting component dependency structures for corresponding NTs in the target dependency structure of rules.</S>
    <S sid="142" ssid="7">Hypothesis dependency structures are organized in a shared forest, or AND-OR structures.</S>
    <S sid="143" ssid="8">An ANDf aligned to Pm,n e , we mean all words in Pi,j f are either aligned to words in Pm,n e or unaligned, and vice versa.</S>
    <S sid="144" ssid="9">Furthermore, at least one word in Pi,j structure represents an application of a rule over component OR-structures, and an OR-structure represents a set of alternative AND-structures with the same state.</S>
    <S sid="145" ssid="10">A state means a n-tuple that characterizes the information that will be inquired by up-level AND-structures.</S>
    <S sid="146" ssid="11">Supposing we use a traditional tri-gram language model in decoding, we need to specify the leftmost two words and the rightmost two words in a state.</S>
    <S sid="147" ssid="12">Since we only have a single NT X in the formalism described above, we do not need to add the NT label in states.</S>
    <S sid="148" ssid="13">However, we need to specify one of the three types of the dependency structure: fixed, floating on the left side, or floating on the right side.</S>
    <S sid="149" ssid="14">This information is encoded in the category of the dependency structure.</S>
    <S sid="150" ssid="15">In the next section, we will explain how to extend categories and states to exploit a dependency language model during decoding.</S>
  </SECTION>
  <SECTION title="3 Dependency Language Model" number="4">
    <S sid="151" ssid="1">For the dependency tree in Figure 1, we calculate the probability of the tree as follows &#215;PL(will|find-as-head) &#215;PL(boy|will, find-as-head) &#215;PL(the|boy-as-head) &#215;PR(it|find-as-head) &#215;PR(interesting|it, find-as-head) Here PT(x) is the probability that word x is the root of a dependency tree.</S>
    <S sid="152" ssid="2">PL and PR are left and right side generative probabilities respectively.</S>
    <S sid="153" ssid="3">Let wh be the head, and wL1wL2...wLn be the children on the left side from the nearest to the farthest.</S>
    <S sid="154" ssid="4">Suppose we use a tri-gram dependency LM, wh-as-head represents wh used as the head, and it is different from wh in the dependency language model.</S>
    <S sid="155" ssid="5">The right side probability is similar.</S>
    <S sid="156" ssid="6">In order to calculate the dependency language model score, or depLM score for short, on the fly for partial hypotheses in a bottom-up decoding, we need to save more information in categories and states.</S>
    <S sid="157" ssid="7">We use a 5-tuple (LF, LN, h, RN, RF) to represent the category of a dependency structure. h represents the head.</S>
    <S sid="158" ssid="8">LF and RF represent the farthest two children on the left and right sides respectively.</S>
    <S sid="159" ssid="9">Similarly, LN and RN represent the nearest two children on the left and right sides respectively.</S>
    <S sid="160" ssid="10">The three types of categories are as follows.</S>
    <S sid="161" ssid="11">Similar operations as described in Section 2.2 are used to keep track of the head and boundary child nodes which are then used to compute depLM scores in decoding.</S>
    <S sid="162" ssid="12">Due to the limit of space, we skip the details here.</S>
  </SECTION>
  <SECTION title="4 Implementation Details Features" number="5">
    <S sid="163" ssid="1">8.</S>
    <S sid="164" ssid="2">Discount on ill-formed dependency structures We have eight features in our system.</S>
    <S sid="165" ssid="3">The values of the first four features are accumulated on the rules used in a translation.</S>
    <S sid="166" ssid="4">Following (Chiang, 2005), we also use concatenation rules like X &#8212;* XX for backup.</S>
    <S sid="167" ssid="5">The 5th feature counts the number of concatenation rules used in a translation.</S>
    <S sid="168" ssid="6">In our system, we allow substitutions of dependency structures with unmatched categories, but there is a discount for such substitutions.</S>
    <S sid="169" ssid="7">We tune the weights with several rounds of decoding-optimization.</S>
    <S sid="170" ssid="8">Following (Och, 2003), the k-best results are accumulated as the input of the optimizer.</S>
    <S sid="171" ssid="9">Powell&#8217;s method is used for optimization with 20 random starting points around the weight vector of the last iteration.</S>
    <S sid="172" ssid="10">Rescoring We rescore 1000-best translations (Huang and Chiang, 2005) by replacing the 3-gram LM score with the 5-gram LM score computed offline.</S>
  </SECTION>
  <SECTION title="5 Experiments" number="6">
    <S sid="173" ssid="1">We carried out experiments on three models.</S>
    <S sid="174" ssid="2">We take the replicated Hiero system as our baseline because it is the closest to our string-todependency model.</S>
    <S sid="175" ssid="3">They have similar rule extraction and decoding algorithms.</S>
    <S sid="176" ssid="4">Both systems use only one non-terminal label in rules.</S>
    <S sid="177" ssid="5">The major difference is in the representation of target structures.</S>
    <S sid="178" ssid="6">We use dependency structures instead of strings; thus, the comparison will show the contribution of using dependency information in decoding.</S>
    <S sid="179" ssid="7">All models are tuned on BLEU (Papineni et al., 2001), and evaluated on both BLEU and Translation Error Rate (TER) (Snover et al., 2006) so that we could detect over-tuning on one metric.</S>
    <S sid="180" ssid="8">We used part of the NIST 2006 ChineseEnglish large track data as well as some LDC corpora collected for the DARPA GALE program (LDC2005E83, LDC2006E34 and LDC2006G05) as our bilingual training data.</S>
    <S sid="181" ssid="9">It contains about 178M/191M words in source/target.</S>
    <S sid="182" ssid="10">Hierarchical rules were extracted from a subset which has about 35M/41M words5, and the rest of the training data were used to extract phrasal rules as in (Och, 2003; Chiang, 2005).</S>
    <S sid="183" ssid="11">The English side of this subset was also used to train a 3-gram dependency LM.</S>
    <S sid="184" ssid="12">Traditional 3-gram and 5-gram LMs were trained on a corpus of 6G words composed of the LDC Gigaword corpus and text downloaded from Web (Bulyko et al., 2007).</S>
    <S sid="185" ssid="13">We tuned the weights on NIST MT05 and tested on MT04.</S>
    <S sid="186" ssid="14">Table 1 shows the number of transfer rules extracted from the training data for the tuning and test sets.</S>
    <S sid="187" ssid="15">The constraint of well-formed dependency structures greatly reduced the size of the rule set.</S>
    <S sid="188" ssid="16">Although the rule size increased a little bit after incorporating dependency structures in rules, the size of string-to-dependency rule set is less than 20% of the baseline rule set size.</S>
    <S sid="189" ssid="17">Table 2 shows the BLEU and TER scores on MT04.</S>
    <S sid="190" ssid="18">On decoding output, the string-todependency system achieved 1.48 point improvement in BLEU and 2.53 point improvement in TER compared to the baseline hierarchical stringto-string system.</S>
    <S sid="191" ssid="19">After 5-gram rescoring, it achieved 1.21 point improvement in BLEU and 1.19 improvement in TER.</S>
    <S sid="192" ssid="20">The filtered model does not show improvement on BLEU.</S>
    <S sid="193" ssid="21">The filtered string-to-string rules can be viewed the string projection of stringto-dependency rules.</S>
    <S sid="194" ssid="22">It means that just using dependency structure does not provide an improvement on performance.</S>
    <S sid="195" ssid="23">However, dependency structures allow the use of a dependency LM which gives rise to significant improvement.</S>
  </SECTION>
  <SECTION title="6 Discussion" number="7">
    <S sid="196" ssid="1">The well-formed dependency structures defined here are similar to the data structures in previous work on mono-lingual parsing (Eisner and Satta, 1999; McDonald et al., 2005).</S>
    <S sid="197" ssid="2">However, here we have fixed structures growing on both sides to exploit various translation fragments learned in the training data, while the operations in mono-lingual parsing were designed to avoid artificial ambiguity of derivation.</S>
    <S sid="198" ssid="3">Charniak et al. (2003) described a two-step stringto-CFG-tree translation model which employed a syntax-based language model to select the best translation from a target parse forest built in the first step.</S>
    <S sid="199" ssid="4">Only translation probability P(FIE) was employed in the construction of the target forest due to the complexity of the syntax-based LM.</S>
    <S sid="200" ssid="5">Since our dependency LM models structures over target words directly based on dependency trees, we can build a single-step system.</S>
    <S sid="201" ssid="6">This dependency LM can also be used in hierarchical MT systems using lexicalized CFG trees.</S>
    <S sid="202" ssid="7">The use of a dependency LM in MT is similar to the use of a structured LM in ASR (Xu et al., 2002), which was also designed to exploit long-distance relations.</S>
    <S sid="203" ssid="8">The depLM is used in a bottom-up style, while SLM is employed in a left-to-right style.</S>
  </SECTION>
  <SECTION title="7 Conclusions and Future Work" number="8">
    <S sid="204" ssid="1">In this paper, we propose a novel string-todependency algorithm for statistical machine translation.</S>
    <S sid="205" ssid="2">For comparison purposes, we replicated the Hiero system as described in (Chiang, 2005).</S>
    <S sid="206" ssid="3">Our string-to-dependency system generates 80% fewer rules, and achieves 1.48 point improvement in BLEU and 2.53 point improvement in TER on the decoding output on the NIST 04 Chinese-English evaluation set.</S>
    <S sid="207" ssid="4">Dependency structures provide a desirable platform to employ linguistic knowledge in MT.</S>
    <S sid="208" ssid="5">In the future, we will continue our research in this direction to carry out translation with deeper features, for example, propositional structures (Palmer et al., 2005).</S>
    <S sid="209" ssid="6">We believe that the fixed and floating structures proposed in this paper can be extended to model predicates and arguments.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="9">
    <S sid="210" ssid="1">This work was supported by DARPA/IPTO Contract No.</S>
    <S sid="211" ssid="2">HR0011-06-C-0022 under the GALE program.</S>
    <S sid="212" ssid="3">We are grateful to Roger Bock, Ivan Bulyko, Mike Kayser, John Makhoul, Spyros Matsoukas, AnttiVeikko Rosti, Rich Schwartz and Bing Zhang for their help in running the experiments and constructive comments to improve this paper.</S>
  </SECTION>
</PAPER>
