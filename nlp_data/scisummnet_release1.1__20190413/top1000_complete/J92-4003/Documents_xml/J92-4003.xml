<PAPER>
  <S sid="0">Class-Based N-Gram Models Of Natural Language</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We address the problem of predicting a word from previous words in a sample of text.</S>
    <S sid="2" ssid="2">In particular, we discuss n-gram models based on classes of words.</S>
    <S sid="3" ssid="3">We also discuss several statistical algorithms for assigning words to classes based on the frequency of their co-occurrence with other words.</S>
    <S sid="4" ssid="4">We find that we are able to extract classes that have the flavor of either syntactically based groupings or semantically based groupings, depending on the nature of the underlying statistics.</S>
  </ABSTRACT>
  <SECTION title="" number="1">
    <S sid="5" ssid="1">IBM T. J. Watson Research Center We address the problem of predicting a word from previous words in a sample of text.</S>
    <S sid="6" ssid="2">In particular, we discuss n-gram models based on classes of words.</S>
    <S sid="7" ssid="3">We also discuss several statistical algorithms for assigning words to classes based on the frequency of their co-occurrence with other words.</S>
    <S sid="8" ssid="4">We find that we are able to extract classes that have the flavor of either syntactically based groupings or semantically based groupings, depending on the nature of the underlying statistics.</S>
  </SECTION>
  <SECTION title="1." number="2">
    <S sid="9" ssid="1">In a number of natural language processing tasks, we face the problem of recovering a string of English words after it has been garbled by passage through a noisy channel.</S>
    <S sid="10" ssid="2">To tackle this problem successfully, we must be able to estimate the probability with which any particular string of English words will be presented as input to the noisy channel.</S>
    <S sid="11" ssid="3">In this paper, we discuss a method for making such estimates.</S>
    <S sid="12" ssid="4">We also discuss the related topic of assigning words to classes according to statistical behavior in a large body of text.</S>
    <S sid="13" ssid="5">In the next section, we review the concept of a language model and give a definition of n-gram models.</S>
    <S sid="14" ssid="6">In Section 3, we look at the subset of n-gram models in which the words are divided into classes.</S>
    <S sid="15" ssid="7">We show that for n = 2 the maximum likelihood assignment of words to classes is equivalent to the assignment for which the average mutual information of adjacent classes is greatest.</S>
    <S sid="16" ssid="8">Finding an optimal assignment of words to classes is computationally hard, but we describe two algorithms for finding a suboptimal assignment.</S>
    <S sid="17" ssid="9">In Section 4, we apply mutual information to two other forms of word clustering.</S>
    <S sid="18" ssid="10">First, we use it to find pairs of words that function together as a single lexical entity.</S>
    <S sid="19" ssid="11">Then, by examining the probability that two words will appear within a reasonable distance of one another, we use it to find classes that have some loose semantic coherence.</S>
    <S sid="20" ssid="12">In describing our work, we draw freely on terminology and notation from the mathematical theory of communication.</S>
    <S sid="21" ssid="13">The reader who is unfamiliar with this field or who has allowed his or her facility with some of its concepts to fall into disrepair may profit from a brief perusal of Feller (1950) and Gallagher (1968).</S>
    <S sid="22" ssid="14">In the first of these, the reader should focus on conditional probabilities and on Markov chains; in the second, on entropy and mutual information.</S>
    <S sid="23" ssid="15">Source-channel setup.</S>
  </SECTION>
  <SECTION title="2." number="3">
    <S sid="24" ssid="1">Figure 1 shows a model that has long been used in automatic speech recognition (Bahl, Jelinek, and Mercer 1983) and has recently been proposed for machine translation (Brown et al. 1990) and for automatic spelling correction (Mays, Demerau, and Mercer 1990).</S>
    <S sid="25" ssid="2">In automatic speech recognition, y is an acoustic signal; in machine translation, y is a sequence of words in another language; and in spelling correction, y is a sequence of characters produced by a possibly imperfect typist.</S>
    <S sid="26" ssid="3">In all three applications, given a signal y, we seek to determine the string of English words, w, which gave rise to it.</S>
    <S sid="27" ssid="4">In general, many different word strings can give rise to the same signal and so we cannot hope to recover w successfully in all cases.</S>
    <S sid="28" ssid="5">We can, however, minimize our probability of error by choosing as our estimate of w that string W for which the a posteriori probability of W given y is greatest.</S>
    <S sid="29" ssid="6">For a fixed choice of y, this probability is proportional to the joint probability of * and y which, as shown in Figure 1, is the product of two terms: the a priori probability of W and the probability that y will appear at the output of the channel when * is placed at the input.</S>
    <S sid="30" ssid="7">The a priori probability of W, Pr (W), is the probability that the string W will arise in English.</S>
    <S sid="31" ssid="8">We do not attempt a formal definition of English or of the concept of arising in English.</S>
    <S sid="32" ssid="9">Rather, we blithely assume that the production of English text can be characterized by a set of conditional probabilities, Pr(wk w), in terms of which the probability of a string of words, w, can be expressed as a product: Here, wki-1 represents the string wi w2 &#8226; &#8226; &#8226; wk_i .</S>
    <S sid="33" ssid="10">In the conditional probability Pr(wk I -1 , ) we call wk-1 the history and wk the prediction.</S>
    <S sid="34" ssid="11">We refer to a computational mechanism for obtaining these conditional probabilities as a language model.</S>
    <S sid="35" ssid="12">Often we must choose which of two different language models is the better one.</S>
    <S sid="36" ssid="13">The performance of a language model in a complete system depends on a delicate interplay between the language model and other components of the system.</S>
    <S sid="37" ssid="14">One language model may surpass another as part of a speech recognition system but perform less well in a translation system.</S>
    <S sid="38" ssid="15">However, because it is expensive to evaluate a language model in the context of a complete system, we are led to seek an intrinsic measure of the quality of a language model.</S>
    <S sid="39" ssid="16">We might, for example, use each language model to compute the joint probability of some collection of strings and judge as better the language model that yields the greater probability The perplexity of a language model with respect to a sample of text, S. is the reciprocal of the geometric average of the probabilities of the predictions in S. If S has I S I words, then the perplexity is Pr (5)-1/1s1.</S>
    <S sid="40" ssid="17">Thus, the language model with the smaller perplexity will be the one that assigns the larger probability to S. Because the perplexity depends not only on the language model but also on the text with respect to which it is measured, it is important that the text be representative of that for which the language model is intended.</S>
    <S sid="41" ssid="18">Because perplexity is subject to sampling error, making fine distinctions between language models may require that the perplexity be measured with respect to a large sample.</S>
    <S sid="42" ssid="19">In an n-gram language model, we treat two histories as equivalent if they end in the same n - 1 words, i.e., we assume that for k &gt; n, Pr (wk w1k-1) is equal to Pr (wk I wifcin1+1).</S>
    <S sid="43" ssid="20">For a vocabulary of size V, a 1-gram model has V - 1 independent parameters, one for each word minus one for the constraint that all of the probabilities add up to 1.</S>
    <S sid="44" ssid="21">A 2-gram model has V(V - 1) independent parameters of the form Pr (102 I wi ) and V - 1 of the form Pr (w) for a total of V2 - 1 independent parameters.</S>
    <S sid="45" ssid="22">In general, an n-gram model has V&amp;quot; - 1 independent parameters: V&amp;quot;-1(V - 1) of the form Pr (wn I wr1), which we call the order-n parameters, plus the 17n-1-1 parameters of an (n - 1)-gram model.</S>
    <S sid="46" ssid="23">We estimate the parameters of an n-gram model by examining a sample of text, tf, which we call the training text, in a process called training.</S>
    <S sid="47" ssid="24">If C(w) is the number of times that the string w occurs in the string 1-T, then for a 1-gram language model the maximum likelihood estimate for the parameter Pr (w) is C(w)/T.</S>
    <S sid="48" ssid="25">To estimate the parameters of an n-gram model, we estimate the parameters of the (n -1)-gram model that it contains and then choose the order-n parameters so as to maximize Pr (tnT trii -1).</S>
    <S sid="49" ssid="26">Thus, the order-n parameters are We call this method of parameter estimation sequential maximum likelihood estimation.</S>
    <S sid="50" ssid="27">We can think of the order-n parameters of an n-gram model as constituting the transition matrix of a Markov model the states of which are sequences of n - 1 words.</S>
    <S sid="51" ssid="28">Thus, the probability of a transition between the state W1W2 &#8226; &#8226; ' Wn-1 and the state w2w3 &#8226; &#8226; &#8226; wn is Pr (w I W1102 &#8226; &#8226; &#8226; wn-i ) .</S>
    <S sid="52" ssid="29">The steady-state distribution for this transition matrix assigns a probability to each (n - 1)-gram, which we denote S(w7-1).</S>
    <S sid="53" ssid="30">We say that an n-gram language model is consistent if, for each string w7-1, the probability that the model assigns to win-1 is S(win-1).</S>
    <S sid="54" ssid="31">Sequential maximum likelihood estimation does not, in general, lead to a consistent model, although for large values of T, the model will be very nearly consistent.</S>
    <S sid="55" ssid="32">Maximum likelihood estimation of the parameters of a consistent n-gram language model is an interesting topic, but is beyond the scope of this paper.</S>
    <S sid="56" ssid="33">The vocabulary of English is very large and so, even for small values of n, the number of parameters in an n-gram model is enormous.</S>
    <S sid="57" ssid="34">The IBM Tangora speech recognition system has a vocabulary of about 20,000 words and employs a 3-gram language model with over eight trillion parameters (Averbuch et al. 1987).</S>
    <S sid="58" ssid="35">We can illustrate the problems attendant to parameter estimation for a 3-gram language model with the data in Table 1.</S>
    <S sid="59" ssid="36">Here, we show the number of 1-, 2-, and 3-grams appearing with various frequencies in a sample of 365,893,263 words of English text from a variety of sources.</S>
    <S sid="60" ssid="37">The vocabulary consists of the 260,740 different words plus a special Number of n-grams with various frequencies in 365,893,263 words of running text. unknown word into which all other words are mapped.</S>
    <S sid="61" ssid="38">Of the 6.799 x 1010 2-grams that might have occurred in the data, only 14,494,217 actually did occur and of these, 8,045,024 occurred only once each.</S>
    <S sid="62" ssid="39">Similarly, of the 1.773 x 1016 3-grams that might have occurred, only 75,349,888 actually did occur and of these, 53,737,350 occurred only once each.</S>
    <S sid="63" ssid="40">From these data and Turing's formula (Good 1953), we can expect that maximum likelihood estimates will be 0 for 14.7 percent of the 3-grams and for 2.2 percent of the 2-grams in a new sample of English text.</S>
    <S sid="64" ssid="41">We can be confident that any 3-gram that does not appear in our sample is, in fact, rare, but there are so many of them that their aggregate probability is substantial.</S>
    <S sid="65" ssid="42">As n increases, the accuracy of an n-gram model increases, but the reliability of our parameter estimates, drawn as they must be from a limited training text, decreases.</S>
    <S sid="66" ssid="43">Jelinek and Mercer (1980) describe a technique called interpolated estimation that combines the estimates of several language models so as to use the estimates of the more accurate models where they are reliable and, where they are unreliable, to fall back on the more reliable estimates of less accurate models.</S>
    <S sid="67" ssid="44">If Pri (w I &amp;I.-1) is the conditional probability as determined by the jth language model, then the interpolated estimate, Pr(wi I w'i-1), is given by Given values for Pr(i) 0, the A1(w) are chosen, with the help of the EM algorithm, so as to maximize the probability of some additional sample of text called the held-out data (Baum 1972; Dempster, Laird, and Rubin 1977; Jelinek and Mercer 1980).</S>
    <S sid="68" ssid="45">When we use interpolated estimation to combine the estimates from 1-, 2-, and 3-gram models, we choose the As to depend on the history, w1, only through the count of the 2gram, We expect that where the count of the 2-gram is high, the 3-gram estimates will be reliable, and, where the count is low, the estimates will be unreliable.</S>
    <S sid="69" ssid="46">We have constructed an interpolated 3-gram model in which we have divided the As into 1,782 different sets according to the 2-gram counts.</S>
    <S sid="70" ssid="47">We estimated these As from a held-out sample of 4,630,934 words.</S>
    <S sid="71" ssid="48">We measure the performance of our model on the Brown corpus, which contains a variety of English text and is not included in either our training or held-out data (Kiera and Francis 1967).</S>
    <S sid="72" ssid="49">The Brown corpus contains 1,014,312 words and has a perplexity of 244 with respect to our interpolated model.</S>
  </SECTION>
  <SECTION title="3." number="4">
    <S sid="73" ssid="1">Clearly, some words are similar to other words in their meaning and syntactic function.</S>
    <S sid="74" ssid="2">We would not be surprised to learn that the probability distribution of words in the vicinity of Thursday is very much like that for words in the vicinity of Friday.</S>
    <S sid="75" ssid="3">Of Peter F. Brown and Vincent J. Della Pietra Class-Based n-gram Models of Natural Language course, they will not be identical: we rarely hear someone say Thank God it's Thursday! or worry about Thursday the 13th.</S>
    <S sid="76" ssid="4">If we can successfully assign words to classes, it may be possible to make more reasonable predictions for histories that we have not previously seen by assuming that they are similar to other histories that we have seen.</S>
    <S sid="77" ssid="5">Suppose that we partition a vocabulary of V words into C classes using a function, 7r, which maps a word, wi, into its class, ci.</S>
    <S sid="78" ssid="6">We say that a language model is an ngram class model if it is an n-gram language model and if, in addition, for 1 &lt; k &lt; n, independent parameters: V - C of the form Pr (w j c,), plus the C&amp;quot; - 1 independent parameters of an n-gram language model for a vocabulary of size C. Thus, except in the trivial cases in which C --= V or n 1, an n-gram class language model always has fewer independent parameters than a general n-gram language model.</S>
    <S sid="79" ssid="7">Given training text, tr, the maximum likelihood estimates of the parameters of a 1-gram class model are where by C(c) we mean the number of words in tf for which the class is c. From these equations, we see that, since c = r(w), Pr (w) = Pr (w I c) Pr (c) = C(w)/T.</S>
    <S sid="80" ssid="8">For a 1-gram class model, the choice of the mapping it has no effect.</S>
    <S sid="81" ssid="9">For a 2-gram class model, the sequential maximum likelihood estimates of the order-2 parameters maximize Pr (tII ti) or, equivalently, log Pr(tr I t1) and are given by By definition, Pr (ci c2) = Pr (ci) Pr (c2 I ci), and so, for sequential maximum likelihood estimation, we have Since C(ci ) and Ec c(cio are the numbers of words for which the class is ci in the strings ti. and tiT-1 respectively, the final term in this equation tends to 1 as T tends to infinity.</S>
    <S sid="82" ssid="10">Thus, Pr (ci c2) tends to the relative frequency of ci c2 as consecutive classes in the training text.</S>
    <S sid="83" ssid="11">Therefore, since Ew c(ww2)/(T&#8212; 1) tends to the relative frequency of w2 in the training text, and hence to Pr (w2), we must have, in the limit, where H(w) is the entropy of the 1-gram word distribution and /(ci , c2) is the average mutual information of adjacent classes.</S>
    <S sid="84" ssid="12">Because L(7r) depends on 7r only through this average mutual information, the partition that maximizes L(7r) is, in the limit, also the partition that maximizes the average mutual information of adjacent classes.</S>
    <S sid="85" ssid="13">We know of no practical method for finding one of the partitions that maximize the average mutual information.</S>
    <S sid="86" ssid="14">Indeed, given such a partition, we know of no practical method for demonstrating that it does, in fact, maximize the average mutual information.</S>
    <S sid="87" ssid="15">We have, however, obtained interesting results using a greedy algorithm.</S>
    <S sid="88" ssid="16">Initially, we assign each word to a distinct class and compute the average mutual information between adjacent classes.</S>
    <S sid="89" ssid="17">We then merge that pair of classes for which the loss in average mutual information is least.</S>
    <S sid="90" ssid="18">After V &#8212; C of these merges, C classes remain.</S>
    <S sid="91" ssid="19">Often, we find that for classes obtained in this way the average mutual information can be made larger by moving some words from one class to another.</S>
    <S sid="92" ssid="20">Therefore, after having derived a set of classes from successive merges, we cycle through the vocabulary moving each word to the class for which the resulting partition has the greatest average mutual information.</S>
    <S sid="93" ssid="21">Eventually no potential reassignment of a word leads to a partition with greater average mutual information.</S>
    <S sid="94" ssid="22">At this point, we stop.</S>
    <S sid="95" ssid="23">It may be possible to find a partition with higher average mutual information by simultaneously reassigning two or more words, but we regard such a search as too costly to be feasible.</S>
    <S sid="96" ssid="24">To make even this suboptimal algorithm practical one must exercise a certain care in implementation.</S>
    <S sid="97" ssid="25">There are approximately (V-02/2 merges that we must investigate to carry out the ith step.</S>
    <S sid="98" ssid="26">The average mutual information remaining after any one of them is the sum of (V &#8212; 02 terms, each of which involves a logarithm.</S>
    <S sid="99" ssid="27">Since altogether we must make V &#8212; C merges, this straightforward approach to the computation is of order V5.</S>
    <S sid="100" ssid="28">We cannot seriously contemplate such a calculation except for very small values of V. A more frugal organization of the computation must take advantage of the redundancy in this straightforward calculation.</S>
    <S sid="101" ssid="29">As we shall see, we can make the computation of the average mutual information remaining after a merge in constant time, independent of V. Suppose that we have already made V &#8212;k merges, resulting in classes Ck(1), Ck (2), , Ck (k) and that we now wish to investigate the merge of Ck (i) with Ck (j for 1 &lt; i &lt;j &lt; k. Let pk(1, m) -= Pr (Ck (0, Ck(m)), i.e., the probability that a word in class Ck (m) follows a word in class Ck(1).</S>
    <S sid="102" ssid="30">Let and let The average mutual information remaining after V &#8212; k merges is We use the notation i+ j to represent the cluster obtained by merging Ck(i) and Ck(i)&#8226; If we know Ik.</S>
    <S sid="103" ssid="31">SO), and sk(j), then the majority of the time involved in computing Ik(i,j) is devoted to computing the sums on the second line of equation (15).</S>
    <S sid="104" ssid="32">Each of these sums has approximately V - k terms and so we have reduced the problem of evaluating Ik(i,j) from one of order V2 to one of order V. We can improve this further by keeping track of those pairs 1,m for which pk(1,m) is different from 0.</S>
    <S sid="105" ssid="33">We recall from Table 1, for example, that of the 6.799 x 1010 2-grams that might have occurred in the training data, only 14,494,217 actually did occur.</S>
    <S sid="106" ssid="34">Thus, in this case, the sums required in equation (15) have, on average, only about 56 non-zero terms instead of 260,741, as we might expect from the size of the vocabulary By examining all pairs, we can find that pair, i &lt;j, for which the loss in average mutual information, Lk (i, j) - Ik(i, j), is least.</S>
    <S sid="107" ssid="35">We complete the step by merging Ck(i) and Ck(j) to form a new cluster Ck_i (i).</S>
    <S sid="108" ssid="36">If j k, we rename Ck(k) as Ck_i (i) and for 1 i,j, we set Ck-i (1) to Ck(/).</S>
    <S sid="109" ssid="37">Obviously, Ik-i = Ik(i,j).</S>
    <S sid="110" ssid="38">The values of Pk-1, prk_i, and qk_...1 can be obtained easily from Pk, plk, prk, and qk.</S>
    <S sid="111" ssid="39">If 1 and m both denote indices neither of which is equal to either i or j, then it is easy to establish that Finally, we must evaluate sk_1(i) and Lk_1(/, i) from equations 15 and 16.</S>
    <S sid="112" ssid="40">Thus, the entire update process requires something on the order of V2 computations in the course of which we will determine the next pair of clusters to merge.</S>
    <S sid="113" ssid="41">The algorithm, then, is of order V3.</S>
    <S sid="114" ssid="42">Although we have described this algorithm as one for finding clusters, we actually determine much more.</S>
    <S sid="115" ssid="43">If we continue the algorithm for V - 1 merges, then we will have a single cluster which, of course, will be the entire vocabulary.</S>
    <S sid="116" ssid="44">The order in which clusters are merged, however, determines a binary tree the root of which corresponds reps representatives representative rep Sample subtrees from a 1,000-word mutual information tree. to this single cluster and the leaves of which correspond to the words in the vocabulary.</S>
    <S sid="117" ssid="45">Intermediate nodes of the tree correspond to groupings of words intermediate between single words and the entire vocabulary.</S>
    <S sid="118" ssid="46">Words that are statistically similar with respect to their immediate neighbors in running text will be close together in the tree.</S>
    <S sid="119" ssid="47">We have applied this tree-building algorithm to vocabularies of up to 5,000 words.</S>
    <S sid="120" ssid="48">Figure 2 shows some of the substructures in a tree constructed in this manner for the 1,000 most frequent words in a collection of office correspondence.</S>
    <S sid="121" ssid="49">Beyond 5,000 words this algorithm also fails of practicality.</S>
    <S sid="122" ssid="50">To obtain clusters for larger vocabularies, we proceed as follows.</S>
    <S sid="123" ssid="51">We arrange the words in the vocabulary in order of frequency with the most frequent words first and assign each of the first C words to its own, distinct class.</S>
    <S sid="124" ssid="52">At the first step of the algorithm, we assign the (C + 1)st most probable word to a new class and merge that pair among the resulting C + 1 classes for which the loss in average mutual information is least.</S>
    <S sid="125" ssid="53">At the kth step of the algorithm, we assign the (C + k)th most probable word to a new class.</S>
    <S sid="126" ssid="54">This restores the number of classes to C + 1, and we again merge that pair for which the loss in average mutual information is least.</S>
    <S sid="127" ssid="55">After V &#8212; C steps, each of the words in the vocabulary will have been assigned to one of C classes.</S>
    <S sid="128" ssid="56">We have used this algorithm to divide the 260,741-word vocabulary of Table 1 into 1,000 classes.</S>
    <S sid="129" ssid="57">Table 2 contains examples of classes that we find particularly interesting.</S>
    <S sid="130" ssid="58">Table 3 contains examples that were selected at random.</S>
    <S sid="131" ssid="59">Each of the lines in the tables contains members of a different class.</S>
    <S sid="132" ssid="60">The average class has 260 words and so to make the table manageable, we include only words that occur at least ten times and we include no more than the ten most frequent words of any class (the other two months would appear with the class of months if we extended this limit to twelve).</S>
    <S sid="133" ssid="61">The degree to which the classes capture both syntactic and semantic aspects of English is quite surprising given that they were constructed from nothing more than counts of bigrams.</S>
    <S sid="134" ssid="62">The class {that tha theat} is interesting because although tha and theat are not English words, the computer has discovered that in our data each of them is most often a mistyped that.</S>
    <S sid="135" ssid="63">Table 4 shows the number of class 1-, 2-, and 3-grams occurring in the text with various frequencies.</S>
    <S sid="136" ssid="64">We can expect from these data that maximum likelihood estimates will assign a probability of 0 to about 3.8 percent of the class 3-grams and to about .02 percent of the class 2-grams in a new sample of English text.</S>
    <S sid="137" ssid="65">This is a substantial improvement over the corresponding numbers for a 3-gram language model, which are 14.7 percent for word 3-grams and 2.2 percent for word 2-grams, but we have achieved this at the expense of precision in the model.</S>
    <S sid="138" ssid="66">With a class model, we distinguish between two different words of the same class only according to their relative frequencies in the text as a whole.</S>
    <S sid="139" ssid="67">Looking at the classes in Tables 2 and 3, we feel that this is reasonable for pairs like John and George or liberal and conservative but perhaps less so for pairs like little and prima or Minister and mover.</S>
    <S sid="140" ssid="68">We used these classes to construct an interpolated 3-gram class model using the same training text and held-out data as we used for the word-based language model we discussed above.</S>
    <S sid="141" ssid="69">We measured the perplexity of the Brown corpus with respect to this model and found it to be 271.</S>
    <S sid="142" ssid="70">We then interpolated the class-based estimators with the word-based estimators and found the perplexity of the test data to be 236, which is a small improvement over the perplexity of 244 we obtained with the word-based model.</S>
  </SECTION>
  <SECTION title="4." number="5">
    <S sid="143" ssid="1">In the previous section, we discussed some methods for grouping words together according to the statistical similarity of their surroundings.</S>
    <S sid="144" ssid="2">Here, we discuss two additional types of relations between words that can be discovered by examining various co-occurrence statistics.</S>
    <S sid="145" ssid="3">The mutual information of the pair w1 and w2 as adjacent words is If w2 follows wi less often than we would expect on the basis of their independent frequencies, then the mutual information is negative.</S>
    <S sid="146" ssid="4">If w2 follows wi more often than we would expect, then the mutual information is positive.</S>
    <S sid="147" ssid="5">We say that the pair w1 w2 is sticky if the mutual information for the pair is substantially greater than 0.</S>
    <S sid="148" ssid="6">In Table 5, we list the 20 stickiest pairs of words found in a 59,537,595-word sample of text from the Canadian parliament.</S>
    <S sid="149" ssid="7">The mutual information for each pair is given in bits, which corresponds to using 2 as the base of the logarithm in equation 18.</S>
    <S sid="150" ssid="8">Most of the pairs are proper names such as Pontius Pilate or foreign phrases that have been adopted into English such as mutatis mutandis and avant garde.</S>
    <S sid="151" ssid="9">The mutual information for Hum pty Dumpty, 22.5 bits, means that the pair occurs roughly 6,000,000 times more than one would expect from the individual frequencies of Hum pty and Dumpty.</S>
    <S sid="152" ssid="10">Notice that the property of being a sticky pair is not symmetric and so, while Hum pty Dumpty forms a sticky pair, Dumpty Hum pty does not.</S>
    <S sid="153" ssid="11">Instead of seeking pairs of words that occur next to one another more than we would expect, we can seek pairs of words that simply occur near one another more than we would expect.</S>
    <S sid="154" ssid="12">We avoid finding sticky pairs again by not considering pairs of words that occur too close to one another.</S>
    <S sid="155" ssid="13">To be precise, let Prnear (w1 w2) be the probability that a word chosen at random from the text is w1 and that a second word, chosen at random from a window of 1,001 words centered on wi but excluding the words in a window of 5 centered on w1, is w2.</S>
    <S sid="156" ssid="14">We say that w1 and w2 are semantically sticky if Prnear (W1W2) is much larger than Pr (w1) Pr (w2) .</S>
    <S sid="157" ssid="15">Unlike stickiness, semantic stickiness is symmetric so that if w1 sticks semantically to w2, then w2 sticks semantically to w1.</S>
    <S sid="158" ssid="16">In Table 6, we show some interesting classes that we constructed, using Prnear (w1 w2), in a manner similar to that described in the preceding section.</S>
    <S sid="159" ssid="17">Some classes group together words having the same morphological stem, such as performance, performed, perform, performs, and performing.</S>
    <S sid="160" ssid="18">Other classes contain words that are semantically related but have different stems, such as attorney, counsel, trial, court, and judge.</S>
  </SECTION>
  <SECTION title="5." number="6">
    <S sid="161" ssid="1">We have described several methods here that we feel clearly demonstrate the value of simple statistical techniques as allies in the struggle to tease from words their linguistic secrets.</S>
    <S sid="162" ssid="2">However, we have not as yet demonstrated the full value of the secrets thus gleaned.</S>
    <S sid="163" ssid="3">At the expense of a slightly greater perplexity, the 3-gram model with word classes requires only about one-third as much storage as the 3-gram language model in which each word is treated as a unique individual (see Tables 1 and 4).</S>
    <S sid="164" ssid="4">Even when we combine the two models, we are not able to achieve much improvement in the perplexity.</S>
    <S sid="165" ssid="5">Nonetheless, we are confident that we will eventually be able to make significant improvements to 3-gram language models with the help of classes of the kind that we have described here.</S>
  </SECTION>
  <SECTION title="Acknowledgment" number="7">
    <S sid="166" ssid="1">The authors would like to thank John Lafferty for his assistance in constructing word classes described in this paper.</S>
  </SECTION>
</PAPER>
