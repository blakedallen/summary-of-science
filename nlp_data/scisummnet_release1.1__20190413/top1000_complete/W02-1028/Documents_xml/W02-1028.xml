<PAPER>
  <S sid="0">A Bootstrapping Method For Learning Semantic Lexicons Using Extraction Pattern Contexts</S>
  <ABSTRACT>
    <S sid="1" ssid="1">This paper describes a bootstrapping algorithm called Basilisk that learns highquality semantic lexicons for multiple categories.</S>
    <S sid="2" ssid="2">Basilisk begins with an unannotated corpus and seed words for each semantic category, which are then bootstrapped to learn new words for each category.</S>
    <S sid="3" ssid="3">Basilisk hypothesizes the semantic class of a word based on collective information over a large body of extraction pattern contexts.</S>
    <S sid="4" ssid="4">We evaluate Basilisk on six semantic categories.</S>
    <S sid="5" ssid="5">The semantic lexicons produced by Basilisk have higher precision than those produced by previous techniques, with several categories showing substantial improvement.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">In recent years, several algorithms have been developed to acquire semantic lexicons automatically or semi-automatically using corpus-based techniques.</S>
    <S sid="7" ssid="2">For our purposes, the term semantic lexicon will refer to a dictionary of words labeled with semantic classes (e.g., &#8220;bird&#8221; is an ANIMAL and &#8220;truck&#8221; is a VEHICLE).</S>
    <S sid="8" ssid="3">Semantic class information has proven to be useful for many natural language processing tasks, including information extraction (Riloff and Schmelzenbach, 1998; Soderland et al., 1995), anaphora resolution (Aone and Bennett, 1996), question answering (Moldovan et al., 1999; Hirschman et al., 1999), and prepositional phrase attachment (Brill and Resnik, 1994).</S>
    <S sid="9" ssid="4">Although some semantic dictionaries do exist (e.g., WordNet (Miller, 1990)), these resources often do not contain the specialized vocabulary and jargon that is needed for specific domains.</S>
    <S sid="10" ssid="5">Even for relatively general texts, such as the Wall Street Journal (Marcus et al., 1993) or terrorism articles (MUC4 Proceedings, 1992), Roark and Charniak (Roark and Charniak, 1998) reported that 3 of every 5 terms generated by their semantic lexicon learner were not present in WordNet.</S>
    <S sid="11" ssid="6">These results suggest that automatic semantic lexicon acquisition could be used to enhance existing resources such as WordNet, or to produce semantic lexicons for specialized domains.</S>
    <S sid="12" ssid="7">We have developed a weakly supervised bootstrapping algorithm called Basilisk that automatically generates semantic lexicons.</S>
    <S sid="13" ssid="8">Basilisk hypothesizes the semantic class of a word by gathering collective evidence about semantic associations from extraction pattern contexts.</S>
    <S sid="14" ssid="9">Basilisk also learns multiple semantic classes simultaneously, which helps constrain the bootstrapping process.</S>
    <S sid="15" ssid="10">First, we present Basilisk&#8217;s bootstrapping algorithm and explain how it differs from previous work on semantic lexicon induction.</S>
    <S sid="16" ssid="11">Second, we present empirical results showing that Basilisk outperforms a previous algorithm.</S>
    <S sid="17" ssid="12">Third, we explore the idea of learning multiple semantic categories simultaneously by adding this capability to Basilisk as well as another bootstrapping algorithm.</S>
    <S sid="18" ssid="13">Finally, we present results showing that learning multiple semantic categories simultaneously improves performance.</S>
  </SECTION>
  <SECTION title="2 Bootstrapping using Collective Evidence from Extraction Patterns" number="2">
    <S sid="19" ssid="1">Basilisk (Bootstrapping Approach to SemantIc Lexicon Induction using Semantic Knowledge) is a weakly supervised bootstrapping algorithm that automatically generates semantic lexicons.</S>
    <S sid="20" ssid="2">Figure 1 shows the high-level view of Basilisk&#8217;s bootstrapping process.</S>
    <S sid="21" ssid="3">The input to Basilisk is an unannotated text corpus and a few manually defined seed words for each semantic category.</S>
    <S sid="22" ssid="4">Before bootstrapping begins, we run an extraction pattern learner over the corpus which generates patterns to extract every noun phrase in the corpus.</S>
    <S sid="23" ssid="5">The bootstrapping process begins by selecting a subset of the extraction patterns that tend to extract the seed words.</S>
    <S sid="24" ssid="6">We call this the pattern pool.</S>
    <S sid="25" ssid="7">The nouns extracted by these patterns become candidates for the lexicon and are placed in a candidate word pool.</S>
    <S sid="26" ssid="8">Basilisk scores each candidate word by gathering all patterns that extract it and measuring how strongly those contexts are associated with words that belong to the semantic category.</S>
    <S sid="27" ssid="9">The five best candidate words are added to the lexicon, and the process starts over again.</S>
    <S sid="28" ssid="10">In this section, we describe Basilisk&#8217;s bootstrapping algorithm in more detail and discuss related work.</S>
    <S sid="29" ssid="11">The input to Basilisk is a text corpus and a set of seed words.</S>
    <S sid="30" ssid="12">We generated seed words by sorting the words in the corpus by frequency and manually identifying the 10 most frequent nouns that belong to each category.</S>
    <S sid="31" ssid="13">These seed words form the initial semantic lexicon.</S>
    <S sid="32" ssid="14">In this section we describe the learning process for a single semantic category.</S>
    <S sid="33" ssid="15">In Section 3 we will explain how the process is adapted to handle multiple categories simultaneously.</S>
    <S sid="34" ssid="16">To identify new lexicon entries, Basilisk relies on extraction patterns to provide contextual evidence that a word belongs to a semantic class.</S>
    <S sid="35" ssid="17">As our representation for extraction patterns, we used the AutoSlog system (Riloff, 1996).</S>
    <S sid="36" ssid="18">AutoSlog&#8217;s extraction patterns represent linguistic expressions that extract a noun phrase in one of three syntactic roles: subject, direct object, or prepositional phrase object.</S>
    <S sid="37" ssid="19">For example, three patterns that would extract people are: &#8220;&lt;subject&gt; was arrested&#8221;, &#8220;murdered &lt;direct object&gt;&#8221;, and &#8220;collaborated with &lt;pp object&gt;&#8221;.</S>
    <S sid="38" ssid="20">Extraction patterns represent linguistic contexts that often reveal the meaning of a word by virtue of syntax and lexical semantics.</S>
    <S sid="39" ssid="21">Extraction patterns are typically designed to capture role relationships.</S>
    <S sid="40" ssid="22">For example, consider the verb &#8220;robbed&#8221; when it occurs in the active voice.</S>
    <S sid="41" ssid="23">The subject of &#8220;robbed&#8221; identifies the perpetrator, while the direct object of &#8220;robbed&#8221; identifies the victim or target.</S>
    <S sid="42" ssid="24">Before bootstrapping begins, we run AutoSlog exhaustively over the corpus to generate an extraction Generate all extraction patterns in the corpus and record their extractions. pattern for every noun phrase that appears.</S>
    <S sid="43" ssid="25">The patterns are then applied to the corpus and all of their extracted noun phrases are recorded.</S>
    <S sid="44" ssid="26">Figure 2 shows the bootstrapping process that follows, which we explain in the following sections.</S>
    <S sid="45" ssid="27">The first step in the bootstrapping process is to score the extraction patterns based on their tendency to extract known category members.</S>
    <S sid="46" ssid="28">All words that are currently defined in the semantic lexicon are considered to be category members.</S>
    <S sid="47" ssid="29">Basilisk scores each pattern using the RlogF metric that has been used for extraction pattern learning (Riloff, 1996).</S>
    <S sid="48" ssid="30">The score for each pattern is computed as: where Fi is the number of category members extracted by patterni and Ni is the total number of nouns extracted by patterni.</S>
    <S sid="49" ssid="31">Intuitively, the RlogF metric is a weighted conditional probability; a pattern receives a high score if a high percentage of its extractions are category members, or if a moderate percentage of its extractions are category members and it extracts a lot of them.</S>
    <S sid="50" ssid="32">The top N extraction patterns are put into a pattern pool.</S>
    <S sid="51" ssid="33">Basilisk uses a value of N=20 for the first iteration, which allows a variety of patterns to be considered, yet is small enough that all of the patterns are strongly associated with the category.1 The purpose of the pattern pool is to narrow down the field of candidates for the lexicon.</S>
    <S sid="52" ssid="34">Basilisk collects all noun phrases (NPs) extracted by patterns in the pattern pool and puts the head noun of each NP into the candidate word pool.</S>
    <S sid="53" ssid="35">Only these nouns are considered for addition to the lexicon.</S>
    <S sid="54" ssid="36">As the bootstrapping progresses, using the same value N=20 causes the candidate pool to become stagnant.</S>
    <S sid="55" ssid="37">For example, let&#8217;s assume that Basilisk performs perfectly, adding only valid category words to the lexicon.</S>
    <S sid="56" ssid="38">After some number of iterations, all of the valid category members extracted by the top 20 patterns will have been added to the lexicon, leaving only non-category words left to consider.</S>
    <S sid="57" ssid="39">For this reason, the pattern pool needs to be infused with new patterns so that more nouns (extractions) become available for consideration.</S>
    <S sid="58" ssid="40">To achieve this effect, we increment the value of N by one after each bootstrapping iteration.</S>
    <S sid="59" ssid="41">This ensures that there is always at least one new pattern contributing words to the candidate word pool on each successive iteration.</S>
    <S sid="60" ssid="42">The next step is to score the candidate words.</S>
    <S sid="61" ssid="43">For each word, Basilisk collects every pattern that extracted the word.</S>
    <S sid="62" ssid="44">All extraction patterns are used during this step, not just the patterns in the pattern pool.</S>
    <S sid="63" ssid="45">Initially, we used a scoring function that computes the average number of category members extracted by the patterns.</S>
    <S sid="64" ssid="46">The formula is: where Pi is the number of patterns that extract wordi, and Fj is the number of distinct category members extracted by pattern j.</S>
    <S sid="65" ssid="47">A word receives a high score if it is extracted by patterns that also have a tendency to extract known category members.</S>
    <S sid="66" ssid="48">As an example, suppose the word &#8220;Peru&#8221; is in the candidate word pool as a possible location.</S>
    <S sid="67" ssid="49">Basilisk finds all patterns that extract &#8220;Peru&#8221; and computes the average number of known locations extracted by those patterns.</S>
    <S sid="68" ssid="50">Let&#8217;s assume that the three patterns shown below extract &#8220;Peru&#8221; and that the underlined words are known locations.</S>
    <S sid="69" ssid="51">&#8220;Peru&#8221; would receive a score of (2+3+2)/3 = 2.3.</S>
    <S sid="70" ssid="52">Intuitively, this means that patterns that extract &#8220;Peru&#8221; also extract, on average, 2.3 known location words.</S>
    <S sid="71" ssid="53">Unfortunately, this scoring function has a problem.</S>
    <S sid="72" ssid="54">The average can be heavily skewed by one pattern that extracts a large number of category members.</S>
    <S sid="73" ssid="55">For example, suppose word w is extracted by 10 patterns, 9 which do not extract any category members but the tenth extracts 50 category members.</S>
    <S sid="74" ssid="56">The average number of category members extracted by these patterns will be 5.</S>
    <S sid="75" ssid="57">This is misleading because the only evidence linking word w with the semantic category is a single, high-frequency extraction pattern (which may extract words that belong to other categories as well).</S>
    <S sid="76" ssid="58">To alleviate this problem, we modified the scoring function to compute the average logarithm of the number of category members extracted by each pattern.</S>
    <S sid="77" ssid="59">The logarithm reduces the influence of any single pattern.</S>
    <S sid="78" ssid="60">We will refer to this scoring metric as the AvgLog function, which is defined below.</S>
    <S sid="79" ssid="61">Since log2(1) = 0, we add one to each frequency count so that patterns which extract a single category member contribute a positive value.</S>
    <S sid="80" ssid="62">Using this scoring metric, all words in the candidate word pool are scored and the top five words are added to the semantic lexicon.</S>
    <S sid="81" ssid="63">The pattern pool and the candidate word pool are then emptied, and the bootstrapping process starts over again.</S>
  </SECTION>
  <SECTION title="2.1.3 Related Work" number="3">
    <S sid="82" ssid="1">Several weakly supervised learning algorithms have previously been developed to generate semantic lexicons from text corpora.</S>
    <S sid="83" ssid="2">Riloff and Shepherd (Riloff and Shepherd, 1997) developed a bootstrapping algorithm that exploits lexical co-occurrence statistics, and Roark and Charniak (Roark and Charniak, 1998) refined this algorithm to focus more explicitly on certain syntactic structures.</S>
    <S sid="84" ssid="3">Hale, Ge, and Charniak (Ge et al., 1998) devised a technique to learn the gender of words.</S>
    <S sid="85" ssid="4">Caraballo (Caraballo, 1999) and Hearst (Hearst, 1992) created techniques to learn hypernym/hyponym relationships.</S>
    <S sid="86" ssid="5">None of these previous algorithms used extraction patterns or similar contexts to infer semantic class associations.</S>
    <S sid="87" ssid="6">Several learning algorithms have also been developed for named entity recognition (e.g., (Collins and Singer, 1999; Cucerzan and Yarowsky, 1999)).</S>
    <S sid="88" ssid="7">(Collins and Singer, 1999) used contextual information of a different sort than we do.</S>
    <S sid="89" ssid="8">Furthermore, our research aims to learn general nouns (e.g., &#8220;artist&#8221;) rather than proper nouns, so many of the features commonly used to great advantage for named entity recognition (e.g., capitalization and title words) are not applicable to our task.</S>
    <S sid="90" ssid="9">The algorithm most closely related to Basilisk is meta-bootstrapping (Riloff and Jones, 1999), which also uses extraction pattern contexts for semantic lexicon induction.</S>
    <S sid="91" ssid="10">Meta-bootstrapping identifies a single extraction pattern that is highly correlated with a semantic category and then assumes that all of its extracted noun phrases belong to the same category.</S>
    <S sid="92" ssid="11">However, this assumption is often violated, which allows incorrect terms to enter the lexicon.</S>
    <S sid="93" ssid="12">Riloff and Jones acknowledged this issue and used a second level of bootstrapping (the &#8220;Meta&#8221; bootstrapping level) to alleviate this problem.</S>
    <S sid="94" ssid="13">While meta-bootstrapping trusts individual extraction patterns to make unilateral decisions, Basilisk gathers collective evidence from a large set of extraction patterns.</S>
    <S sid="95" ssid="14">As we will demonstrate in Section 2.2, Basilisk&#8217;s approach produces better results than meta-bootstrapping and is also considerably more efficient because it uses only a single bootstrapping loop (meta-bootstrapping uses nested bootstrapping).</S>
    <S sid="96" ssid="15">However, meta-bootstrapping produces category-specific extraction patterns in addition to a semantic lexicon, while Basilisk focuses exclusively on semantic lexicon induction.</S>
    <S sid="97" ssid="16">To evaluate Basilisk&#8217;s performance, we ran experiments with the MUC-4 corpus (MUC-4 Proceedings, 1992), which contains 1700 texts associated with terrorism.</S>
    <S sid="98" ssid="17">We used Basilisk to learn semantic lexicons for six semantic categories: BUILDING, EVENT, HUMAN, LOCATION, TIME, and WEAPON.</S>
    <S sid="99" ssid="18">Before we ran these experiments, one of the authors manually labeled every head noun in the corpus that was found by an extraction pattern.</S>
    <S sid="100" ssid="19">These manual annotations were the gold standard.</S>
    <S sid="101" ssid="20">Table 1 shows the breakdown of semantic categories for the head nouns.</S>
    <S sid="102" ssid="21">These numbers represent a baseline: an algorithm that randomly selects words would be expected to get accuracies consistent with these numbers.</S>
    <S sid="103" ssid="22">Three semantic lexicon learners have previously been evaluated on the MUC-4 corpus (Riloff and Shepherd, 1997; Roark and Charniak, 1998; Riloff and Jones, 1999), and of these meta-bootstrapping achieved the best results.</S>
    <S sid="104" ssid="23">So we implemented the meta-bootstrapping algorithm ourselves to directly compare its performance with that of Basilisk.</S>
    <S sid="105" ssid="24">A difference between the original implementation and ours is that our version learns individual nouns (as does Basilisk) instead of noun phrases.</S>
    <S sid="106" ssid="25">We believe that learning individual nouns is a more conservative approach because noun phrases often overlap (e.g., &#8220;high-power bombs&#8221; and &#8220;incendiary bombs&#8221; would count as two different lexicon entries in the original meta-bootstrapping algorithm).</S>
    <S sid="107" ssid="26">Consequently, our meta-bootstrapping results differ from those reported in (Riloff and Jones, 1999).</S>
    <S sid="108" ssid="27">Figure 3 shows the results for Basilisk (ba-1) and meta-bootstrapping (mb-1).</S>
    <S sid="109" ssid="28">We ran both algorithms for 200 iterations, so that 1000 words were added to the lexicon (5 words per iteration).</S>
    <S sid="110" ssid="29">The X axis shows the number of words learned, and the Y axis shows how many were correct.</S>
    <S sid="111" ssid="30">The Y axes have different ranges because some categories are more prolific than others.</S>
    <S sid="112" ssid="31">Basilisk outperforms meta-bootstrapping for every category, often substantially.</S>
    <S sid="113" ssid="32">For the human and location categories, Basilisk learned hundreds of words, with accuracies in the 80-89% range through much of the bootstrapping.</S>
    <S sid="114" ssid="33">It is worth noting that Basilisk&#8217;s performance held up well on the human and location categories even at the end, achieving 79.5% (795/1000) accuracy for humans and 53.2% (532/1000) accuracy for locations.</S>
  </SECTION>
  <SECTION title="3 Learning Multiple Semantic Categories Simultaneously" number="4">
    <S sid="115" ssid="1">We also explored the idea of bootstrapping multiple semantic classes simultaneously.</S>
    <S sid="116" ssid="2">Our hypothesis was that errors of confusion2 between semantic categories can be lessened by using information about multiple categories.</S>
    <S sid="117" ssid="3">This hypothesis makes sense only if a word cannot belong to more than one semantic class.</S>
    <S sid="118" ssid="4">In general, this is not true because words are often polysemous.</S>
    <S sid="119" ssid="5">But within a limited domain, a word usually has a dominant word sense.</S>
    <S sid="120" ssid="6">Therefore we make a &#8220;one sense per domain&#8221; assumption (similar Figure 4 illustrates what happens when a semantic lexicon is generated for a single category.</S>
    <S sid="121" ssid="7">The seed words for the category (in this case, category C) are represented by the solid black area in category C&#8217;s territory.</S>
    <S sid="122" ssid="8">The hypothesized words in the growing lexicon are represented by a shaded area.</S>
    <S sid="123" ssid="9">The goal of the bootstrapping algorithm is to expand the area of hypothesized words so that it exactly matches the category&#8217;s true territory.</S>
    <S sid="124" ssid="10">If the shaded area expands beyond the category&#8217;s true territory, then incorrect words have been added to the lexicon.</S>
    <S sid="125" ssid="11">In Figure 4, category C has claimed a significant number of words that belong to categories B and E. When generating a lexicon for one category at a time, these confusion errors are impossible to detect because the learner has no knowledge of the other categories.</S>
    <S sid="126" ssid="12">Figure 5 shows the same search space when lexicons are generated for six categories simultaneously.</S>
    <S sid="127" ssid="13">If the lexicons cannot overlap, then we constrain the ability of a category to overstep its bounds.</S>
    <S sid="128" ssid="14">Category C is stopped when it begins to encroach upon the territories of categories B and E because words in those areas have already been claimed.</S>
    <S sid="129" ssid="15">The easiest way to take advantage of multiple categories is to add simple conflict resolution that enforces the &#8220;one sense per domain&#8221; constraint.</S>
    <S sid="130" ssid="16">If more than one category tries to claim a word, then we use conflict resolution to decide which category should win.</S>
    <S sid="131" ssid="17">We incorporated a simple conflict resolution procedure into Basilisk, as well as the metabootstrapping algorithm.</S>
    <S sid="132" ssid="18">For both algorithms, the conflict resolution procedure works as follows.</S>
    <S sid="133" ssid="19">(1) If a word is hypothesized for category A but has already been assigned to category B during a previous iteration, then the category A hypothesis is discarded.</S>
    <S sid="134" ssid="20">(2) If a word is hypothesized for both category A and category B during the same iteration, then it to the &#8220;one sense per discourse&#8221; observation (Gale et al., 1992)) that a word belongs to a single semantic category within a limited domain.</S>
    <S sid="135" ssid="21">All of our experiments involve the MUC-4 terrorism domain and corpus, for which this assumption seems appropriate.</S>
    <S sid="136" ssid="22">Figure 4 shows one way of viewing the task of semantic lexicon induction.</S>
    <S sid="137" ssid="23">The set of all words in the corpus is visualized as a search space.</S>
    <S sid="138" ssid="24">Each category owns a certain territory within the space (demarcated with a dashed line), representing the words that are true members of that category.</S>
    <S sid="139" ssid="25">Not all territories are the same size, since some categories have more members than others.</S>
    <S sid="140" ssidr,:: &#65533;&#65533;&#65533;&#65533;&#65533; &#65533;&#65533;&#65533;&#65533;&#65533; &#65533;&#65533;&#65533;&#65533;&#65533; &#65533;&#65533;&#65533;&#65533;&#65533; &#65533;&#65533;&#65533;&#65533; &#65533;&#65533;&#65533;&#65533; is assigned to the category for which it receives the highest score.</S>
    <S sid="141" ssid="27">In Section 3.4, we will present empirical results showing how this simple conflict resolution scheme affects performance.</S>
    <S sid="142" ssid="28">Simple conflict resolution helps the algorithm recognize when it has encroached on another category&#8217;s territory, but it does not actively steer the bootstrapping in a more promising direction.</S>
    <S sid="143" ssid="29">A more intelligent way to handle multiple categories is to incorporate knowledge about other categories directly into the scoring function.</S>
    <S sid="144" ssid="30">We modified Basilisk&#8217;s scoring function to prefer words that have strong evidence for one category but little or no evidence for competing categories.</S>
    <S sid="145" ssid="31">Each word wi in the candidate word pool receives a score for category ca based on the following formula: where AvgLog is the candidate scoring function used previously by Basilisk (see Equation 3) and the max function returns the maximum AvgLog value over all competing categories.</S>
    <S sid="146" ssid="32">For example, the score for each candidate LOCATION word will be its AvgLog score for the LOCATION category minus its maximum AvgLog score for all other categories.</S>
    <S sid="147" ssid="33">A word is ranked highly only if it has a high score for the targeted category and there is little evidence that it belongs to a different category.</S>
    <S sid="148" ssid="34">This has the effect of steering the bootstrapping process away from ambiguous parts of the search space.</S>
    <S sid="149" ssid="35">We will use the abbreviation 1CAT to indicate that only one semantic category was bootstrapped, and MCAT to indicate that multiple semantic categories were simultaneously bootstrapped.</S>
    <S sid="150" ssid="36">Figure 6 compares the performance of Basilisk-MCAT with conflict resolution (ba-M) against Basilisk-1CAT (ba-1).</S>
    <S sid="151" ssid="37">Most categories show small performance gains, with the BUILDING, LOCATION, and WEAPON categories benefitting the most.</S>
    <S sid="152" ssid="38">However, the improvement usually doesn&#8217;t kick in until many bootstrapping iterations have passed.</S>
    <S sid="153" ssid="39">This phenomenon is consistent with the visualization of the search space in Figure 5.</S>
    <S sid="154" ssid="40">Since the seed words for each category are not generally located near each other in the search space, the bootstrapping process is unaffected by conflict resolution until the categories begin to encroach on each other&#8217;s territories.</S>
    <S sid="155" ssid="41">1).</S>
    <S sid="156" ssid="42">Learning multiple categories improves the performance of meta-bootstrapping dramatically for most categories.</S>
    <S sid="157" ssid="43">We were surprised that the improvement for meta-bootstrapping was much We also measured the recall of Basilisk&#8217;s lexicons after 1000 words had been learned, based on the gold standard data shown in Table 1.</S>
    <S sid="158" ssid="44">The recall results range from 40-60%, which indicates that a good percentage of the category words are being found, although there are clearly more category words lurking in the corpus.</S>
  </SECTION>
  <SECTION title="4 Conclusions" number="5">
    <S sid="159" ssid="1">Basilisk&#8217;s bootstrapping algorithm exploits two ideas: (1) collective evidence from extraction patterns can be used to infer semantic category associations, and (2) learning multiple semantic categories simultaneously can help constrain the bootstrapping process.</S>
    <S sid="160" ssid="2">The accuracy achieved by Basilisk is substantially higher than that of previous techniques for semantic lexicon induction on the MUC-4 corpus, and empirical results show that both of Basilisk&#8217;s ideas contribute to its performance.</S>
    <S sid="161" ssid="3">We also demonBuilding: theatre store cathedral temple palace penitentiary academy houses school mansions Event: ambush assassination uprisings sabotage takeover incursion kidnappings clash shoot-out Human: boys snipers detainees commandoes extremists deserter narcoterrorists demonstrators cronies missionaries Location: suburb Soyapango capital Oslo regions cities neighborhoods Quito corregimiento Time: afternoon evening decade hour March weeks Saturday eve anniversary Wednesday Weapon: cannon grenade launchers firebomb car-bomb rifle pistol machineguns firearms strated that learning multiple semantic categories simultaneously improves the meta-bootstrapping algorithm, which suggests that this is a general observation which may improve other bootstrapping algorithms as well.</S>
  </SECTION>
  <SECTION title="5 Acknowledgments" number="6">
    <S sid="162" ssid="1">This research was supported by the National Science Foundation under award IRI-9704240.</S>
  </SECTION>
</PAPER>
