<PAPER>
  <S sid="0">The Structure And Performance Of An Open-Domain Question Answering System</S>
  <ABSTRACT>
    <S sid="1" ssid="1">answers in large collections of texts: paragraph + abductive inference.</S>
    <S sid="2" ssid="2">Notes of the Fall AAAI Symposium on Question An</S>
  </ABSTRACT>
  <SECTION title="1 Background" number="1">
    <S sid="3" ssid="1">Finding the answer to a question by returning a small fragment of a text, where the answer actually lies, is profoundly different from the task of information retrieval (IR) or information extraction (IE).</S>
    <S sid="4" ssid="2">Current IR systems allow us to locate full documents that might contain pertinent information, leaving it to the user to extract the answer from a ranked list of texts.</S>
    <S sid="5" ssid="3">In contrast, IE systems extract the information of interest, provided it has been presented in a predefined, target representation, known as template.</S>
    <S sid="6" ssid="4">The immediate solution of combining IR and IE techniques for question/answering (Q/A) is impractical since IE systems are known to be highly dependent on domain knowledge, and furthermore, the template generation is not performed automatically.</S>
    <S sid="7" ssid="5">Our methodology of finding answers in large collections of documents relies on natural language processing (NLP) techniques in novel ways.</S>
    <S sid="8" ssid="6">First, we perform the processing of the question by combining syntactic information, resulting from a shallow parse, with semantic information that characterizes the question (e.g. question type, question focus).</S>
    <S sid="9" ssid="7">Secondly, the search for the answer is based on a novel form of indexing, called paragraph indexing (Moldovan and Mihalcea 2000).</S>
    <S sid="10" ssid="8">Finally, in order to extract answers and to evaluate their correctness, we use a battery of abductive techniques (Hobbs et al.1993), some based on empirical methods, some on lexicosemantic information.</S>
    <S sid="11" ssid="9">The principles that have guided our paragraph indexing and the abductive inference of the answers are reported in (Harabagiu and Maiorano 1999).</S>
    <S sid="12" ssid="10">2 Overview of the LASSO Q/A System The architecture of LASSO (Moldovan, Harabagiu et. al 1999) comprises three modules: Question Processing module, Paragraph Indexing module and Answer Processing module.</S>
    <S sid="13" ssid="11">Given a question, of open-ended nature, expressed in natural language, we first process the question by creating a representation of the information requested.</S>
    <S sid="14" ssid="12">Thus we automatically find (a) the question type from the taxonomy of questions built into the system, (b) the expected answer type from the semantic analysis of the question, and most importantly, (c) the question focus defined as the main information required by that question.</S>
    <S sid="15" ssid="13">Furthermore, the Question Processing module also identifies the keywords from the question, which are passed to the Paragraph Indexing module, as illustrated by Figure 1. what questions, as what is ambiguous and it says nothing about the information asked by the question.</S>
    <S sid="16" ssid="14">The same applies to many other question types.</S>
    <S sid="17" ssid="15">The problem was solved by defining a concept named focus.</S>
    <S sid="18" ssid="16">A focus is a word or a sequence of words which define the question and disambiguate the question by indicating what the question is looking for.</S>
    <S sid="19" ssid="17">For example, for the question What is the largest city in Germany?, the focus is largest city.</S>
    <S sid="20" ssid="18">Knowing the focus and the question type it becomes easier to determine the type of the answer sought, namely: the name of the largest city in Germany.</S>
    <S sid="21" ssid="19">The focus is also important in determining the list of keywords for query formation.</S>
    <S sid="22" ssid="20">Often, many question words do not appear in the answer, and that is because their role is just to form the context of the question.</S>
    <S sid="23" ssid="21">For example, in the question In 1990, what day of the week did Christmas fall on?, the focus is day of the week, a concept that is unlikely to occur in the answer.</S>
    <S sid="24" ssid="22">In such situations, the focus should not be included in the list of keywords considered for detecting the answer.</S>
    <S sid="25" ssid="23">The process of extracting keywords is based on a set of ordered heuristics.</S>
    <S sid="26" ssid="24">Each heuristic returns a set of keywords that are added in the same order to the question keywords.</S>
    <S sid="27" ssid="25">We have implemented eight different heuristics.</S>
    <S sid="28" ssid="26">Initially, only the keywords returned by the first six heuristics are considered.</S>
    <S sid="29" ssid="27">If further keywords are needed in the retrieval loop, keywords provided by the other two heuristics are added.</S>
    <S sid="30" ssid="28">When keywords define an exceedingly specific query, they are dropped in the reversed order in which they have been entered.</S>
    <S sid="31" ssid="29">The heuristics are: Table 2 lists two questions from the TREC8 competition together with their associated keywords.</S>
    <S sid="32" ssid="30">The Table also illustrates the trace of keywords until the paragraphs containing the answer were found.</S>
    <S sid="33" ssid="31">For question 26, the paragraphs containing the answers could not be found before dropping many of the initial keywords.</S>
    <S sid="34" ssid="32">In contrast, the answer for question 13 was found when the verb rent was added to the Boolean query.</S>
    <S sid="35" ssid="33">Q-26 What is the name of the &amp;quot;female&amp;quot; counterpart to El Nino, which results in cooling temperatures and very dry weather ?</S>
  </SECTION>
  <SECTION title="4 Paragraph Indexing" number="2">
    <S sid="36" ssid="1">The Information Retrieval Engine for LASSO is related to the Zprise IR search engine available from NIST.</S>
    <S sid="37" ssid="2">There were several features of the Zprise IR engine which were not conducive to working within the design of LASSO.</S>
    <S sid="38" ssid="3">Because of this, a new IR engine was generated to support LASSO without the encumbrance of these features.</S>
    <S sid="39" ssid="4">The index creation was, however, kept in its entirety.</S>
    <S sid="40" ssid="5">The Zprise IR engine was built using a cosine vector space model.</S>
    <S sid="41" ssid="6">This model does not allow for the extraction of those documents which include all of the keywords, but extracts documents according to the similarity measure between the document and the query as computed by the cosine of the angle between the vectors represented by the document and the query.</S>
    <S sid="42" ssid="7">This permits documents to be retrieved when only one of the keywords is present.</S>
    <S sid="43" ssid="8">Additionally, the keywords present in one retrieved document may not be present in another retrieved document.</S>
    <S sid="44" ssid="9">LASSO's requirements are much more rigid.</S>
    <S sid="45" ssid="10">LASSO requires that documents be retrieved only when all of the keywords are present in the document.</S>
    <S sid="46" ssid="11">Thus, it became necessary to implement a more precise determinant for extraction.</S>
    <S sid="47" ssid="12">For the early work, it was determined that a Boolean discriminate would suffice provided that the operators AND and OR were implemented.</S>
    <S sid="48" ssid="13">It was also necessary to provide the ability to organize queries through the use of parentheses.</S>
    <S sid="49" ssid="14">We opted for the Boolean indexing as opposed to vector indexing (Buckley et al.1998) because Boolean indexing increases the recall at the expense of precision.</S>
    <S sid="50" ssid="15">That works well for us since we control the retrieval precision with the PARAGRAPH operator which provides document filtering.</S>
    <S sid="51" ssid="16">In addition, the Boolean indexing requires less processing time than vector indexing, and this becomes important when the collection size increases.</S>
    <S sid="52" ssid="17">To facilitate the identification of the document sources, the engine was required to put the document id in front of each line in the document.</S>
    <S sid="53" ssid="18">The index creation includes the following steps: normalize the SGML tags, eliminate extraneous characters, identify the words within each document, stem the terms (words) using the Porter stemming algorithm, calculate the local (document) and global (collection) weights, build a comprehensive dictionary of the collection, and create the inverted index file.</S>
    <S sid="54" ssid="19">The number of documents that contain the keywords returned by the Search Engine may be large since only weak Boolean operators were used.</S>
    <S sid="55" ssid="20">A new, more restrictive operator was introduced: PARAGRAPH n. This operator searches like an AND operator for the words in the query with the constraint that the words belong only to some n consecutive paragraphs, where n is a controllable positive integer.</S>
    <S sid="56" ssid="21">The parameter n selects the number of paragraphs, thus controlling the size of the text retrieved from a document considered relevant.</S>
    <S sid="57" ssid="22">The rationale is that most likely the information requested is found in a few paragraphs rather than being dispersed over an entire document.</S>
    <S sid="58" ssid="23">Paragraph ordering is performed by a radix sort that involves three different scores: the largest Same_word_sequence-score, the largest Distance-score and the smallest Missing_keyword-score.</S>
    <S sid="59" ssid="24">The definition of these scores is based on the notion of paragraphwindow.</S>
    <S sid="60" ssid="25">Paragraph-windows are determined by the need to consider separately each match of the same keyword in the same paragraph.</S>
    <S sid="61" ssid="26">For example, if we have a set of keywords fkl, Id, k3, k41 and in a paragraph kl and Id are matched each twice, whereas k3 is matched only once, and k4 is not matched, we are going to have four different windows, defined by the keywords: [kl-matchl, Id-matchl, k3], [k1-match2,0-match1, k3], [kl-matchl, Idmatch2, k3], and [k1-match2, k2-match, k3].</S>
    <S sid="62" ssid="27">A window comprises all the text between the lowest positioned keyword in the window and the highest position keyword in the window.</S>
    <S sid="63" ssid="28">For each paragraph window we compute the following scores: The radix sorting takes place across all the window scores for all paragraphs.</S>
  </SECTION>
  <SECTION title="5 Answer Processing" number="3">
    <S sid="64" ssid="1">The Answer Processing module identifies and extracts the answer from the paragraphs that contain the question keywords.</S>
    <S sid="65" ssid="2">Crucial to the identification of the answer is the recognition of the answer type.</S>
    <S sid="66" ssid="3">Since almost always the answer type is not explicit in the question or the answer, we need to rely on lexicosemantic information provided by a parser to identify named entities (e.g. names of people or organizations, monetary units, dates and temporal/locative expressions, products and others).</S>
    <S sid="67" ssid="4">The recognition of the answer type, through the semantic tag returned by the parser, creates a candidate answer.</S>
    <S sid="68" ssid="5">The extraction of the answer and its evaluation are based on a set of heuristics.</S>
    <S sid="69" ssid="6">The Parser The parser combines information from broad coverage lexical dictionaries with semantic information that contributes to the identification of the named entities.</S>
    <S sid="70" ssid="7">Since part-ofspeech tagging is an intrinsic component of a parser, we have extended Brill's part-ofspeech tagger in two ways.</S>
    <S sid="71" ssid="8">First, we have acquired new tagging rules and secondly, we have unified the dictionaries of the tagger with semantic dictionaries derived from the Gazetteers and from WordNet (Miller 1995).</S>
    <S sid="72" ssid="9">In addition to the implementation of grammar rules, we have implemented heuristics capable of recognizing names of persons, organizations, locations, dates, currencies and products.</S>
    <S sid="73" ssid="10">Similar heuristics recognize named entities successfully in IE systems.</S>
    <S sid="74" ssid="11">Having these capabilities proved to be useful for locating the possible answers within a set of candidate paragraphs.</S>
    <S sid="75" ssid="12">Answer Extraction The parser enables the recognition of the answer candidates in the paragraph.</S>
    <S sid="76" ssid="13">Each expression tagged by the parser with the answer type becomes one of the answer candidates for a paragraph.</S>
    <S sid="77" ssid="14">Similar to the paragraphwindows used in ordering the paragraphs, we establish an answer-window for each answer candidate.</S>
    <S sid="78" ssid="15">To evaluate the correctness of each answer candidate, a new evaluation metric is computed for each answer-window.</S>
    <S sid="79" ssid="16">We use the following scores: The overall score for a given answer candidate is computed by: Currently the combined score represents an un-normalized measure of answer correctness.</S>
    <S sid="80" ssid="17">The answer extraction is performed by choosing the answer candidate with the highest score.</S>
    <S sid="81" ssid="18">Some of the scores approximate very simple abductions.</S>
    <S sid="82" ssid="19">For example, the recognition of keywords or other question words in an apposition determines the Punctuation_sign-score, the Same_parse_subtreescore, the Comma_3_words-score and the Same_sentence-score to go up.</S>
    <S sid="83" ssid="20">Moreover, the same sequence score gives higher plausibility to answer candidates that contain in their window sequences of question words that follow the same orders in the question.</S>
    <S sid="84" ssid="21">This score approximates the assumption that concepts are lexicalized in the same manner in the question and in the answer.</S>
    <S sid="85" ssid="22">However, the combined score allows for keywords and question words to be matched in the same order.</S>
    <S sid="86" ssid="23">Table 3 illustrates some of the scores that were attributed to the candidate answers LASSO has extracted successfully.</S>
    <S sid="87" ssid="24">Currently we compute the same score for both short and long answers, as we analyze in the same way the answer windows.</S>
  </SECTION>
  <SECTION title="6 Performance evaluation" number="4">
    <S sid="88" ssid="1">Several criteria and metrics may be used to measure the performance of a QA system.</S>
    <S sid="89" ssid="2">In TREC-8, the performance focus was on accuracy.</S>
    <S sid="90" ssid="3">Table 4 summarizes the scores provided by NIST for our system.</S>
    <S sid="91" ssid="4">The metric used by NIST for accuracy is described in (Voorhees and Tice 1999).</S>
    <S sid="92" ssid="5">Another important performance parameter is the processing time to answer a question.</S>
    <S sid="93" ssid="6">On the average, the processing time per question is 61 sec., and the time ranges from 1 sec. to 540 sec.</S>
    <S sid="94" ssid="7">There are four main components of the overall time: (1) question processing time, (2) paragraph search time, (3) paragraph ordering time, and (4) answer extraction time.</S>
    <S sid="95" ssid="8">Table 5 summarizes the relative time spent on each processing component.</S>
    <S sid="96" ssid="9">The answer extraction dominates the processing time while the question processing part is negligible.</S>
  </SECTION>
  <SECTION title="7 Conclusions" number="5">
    <S sid="97" ssid="1">In principle, the problem of finding one or more answers to a question from a very large set of documents can be addressed by creating a context for the question and a knowledge representation of each document and then match the question context against each document representation.</S>
    <S sid="98" ssid="2">This approach is not practical yet since it involves advanced techniques in knowledge representation of open text, reasoning, natural language processing, and indexing that currently are beyond the technology state of the art.</S>
    <S sid="99" ssid="3">On the other hand, traditional information retrieval and extraction techniques alone can not be used for question answering due to the need to pinpoint exactly an answer in large collections of open domain texts.</S>
    <S sid="100" ssid="4">Thus, a mixture of natural language processing and information retrieval methods may be the solution for now.</S>
    <S sid="101" ssid="5">In order to better understand the nature of the QA task and put this into perspective, we offer in Table 6 a taxonomy of question answering systems.</S>
    <S sid="102" ssid="6">It is not sufficient to classify only the types of questions alone, since for the same question the answer may be easier or more difficult to extract depending on how the answer is phrased in the text.</S>
    <S sid="103" ssid="7">Thus we classify the QA systems, not the questions.</S>
    <S sid="104" ssid="8">We provide a taxonomy based on three critePercentage of questions in top 5 NIST score Short answer Long answer ria that we consider important for building question answering systems: (1) knowledge base, (2) reasoning, and (3) natural language processing and indexing techniques.</S>
    <S sid="105" ssid="9">Knowledge bases and reasoning provide the medium for building question contexts and matching them against text documents.</S>
    <S sid="106" ssid="10">Indexing identifies the text passages where answers may lie, and natural language processing provides a framework for answer extraction.</S>
    <S sid="107" ssid="11">Out of the 153 questions that our system has answered, 136 belong to Class 1, and 17 to Class 2.</S>
    <S sid="108" ssid="12">Obviously, the questions in Class 2 are more difficult as they require more powerful natural language and reasoning techniques.</S>
    <S sid="109" ssid="13">As we look for the future, in order to address questions of higher classes we need to handle real-time knowledge acquisition and classification from different domains, coreference, metonymy, special-purpose reasoning, semantic indexing and other advanced techniques.</S>
  </SECTION>
</PAPER>
