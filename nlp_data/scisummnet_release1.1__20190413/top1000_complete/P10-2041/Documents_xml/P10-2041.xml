<PAPER>
  <S sid="0">Intelligent Selection of Language Model Training Data</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We address the problem of selecting nondomain-specific language model training data to build auxiliary language models for use in tasks such as machine translation.</S>
    <S sid="2" ssid="2">Our approach is based on comparing the cross-entropy, according to domainspecific and non-domain-specifc language models, for each sentence of the text source used to produce the latter language model.</S>
    <S sid="3" ssid="3">We show that this produces better language models, trained on less data, than both random data selection and two other previously proposed methods.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="4" ssid="1">Statistical N-gram language models are widely used in applications that produce natural-language text as output, particularly speech recognition and machine translation.</S>
    <S sid="5" ssid="2">It seems to be a universal truth that output quality can always be improved by using more language model training data, but only if the training data is reasonably well-matched to the desired output.</S>
    <S sid="6" ssid="3">This presents a problem, because in virtually any particular application the amount of in-domain data is limited.</S>
    <S sid="7" ssid="4">Thus it has become standard practice to combine in-domain data with other data, either by combining N-gram counts from in-domain and other data (usually weighting the counts in some way), or building separate language models from different data sources, interpolating the language model probabilities either linearly or log-linearly.</S>
    <S sid="8" ssid="5">Log-linear interpolation is particularly popular in statistical machine translation (e.g., Brants et al., 2007), because the interpolation weights can easily be discriminatively trained to optimize an end-to-end translation objective function (such as BLEU) by making the log probability according to each language model a separate feature function in the overall translation model.</S>
    <S sid="9" ssid="6">The normal practice when using multiple languages models in machine translation seems to be to train models on as much data as feasible from each source, and to depend on feature weight optimization to down-weight the impact of data that is less well-matched to the translation application.</S>
    <S sid="10" ssid="7">In this paper, however, we show that for a data source that is not entirely in-domain, we can improve the match between the language model from that data source and the desired application output by intelligently selecting a subset of the available data as language model training data.</S>
    <S sid="11" ssid="8">This not only produces a language model better matched to the domain of interest (as measured in terms of perplexity on held-out in-domain data), but it reduces the computational resources needed to exploit a large amount of non-domain-specific data, since the resources needed to filter a large amount of data are much less (especially in terms of memory) than those required to build a language model from all the data.</S>
  </SECTION>
  <SECTION title="2 Approaches to the Problem" number="2">
    <S sid="12" ssid="1">Our approach to the problem assumes that we have enough in-domain data to train a reasonable indomain language model, which we then use to help score text segments from other data sources, and we select segments based on a score cutoff optimized on held-out in-domain data.</S>
    <S sid="13" ssid="2">We are aware of two comparable previous approaches.</S>
    <S sid="14" ssid="3">Lin et al. (1997) and Gao et al.</S>
    <S sid="15" ssid="4">(2002) both used a method similar to ours, in which the metric used to score text segments is their perplexity according to the in-domain language model.</S>
    <S sid="16" ssid="5">The candidate text segments with perplexity less than some threshold are selected.</S>
    <S sid="17" ssid="6">The second previous approach does not explicitly make use of an in-domain language model, but is still applicable to our scenario.</S>
    <S sid="18" ssid="7">Klakow (2000) estimates a unigram language model from the entire non-domain-specific corpus to be selected from, and scores each candidate text segment from that corpus by the change in the log likelihood of the in-domain data according to the unigram model, if that segment were removed from the corpus used to estimate the unigram model.</S>
    <S sid="19" ssid="8">Those segments whose removal would decrease the log likelihood of the in-domain data more than some threshold are selected.</S>
    <S sid="20" ssid="9">Our method is a fairly simple variant of scoring by perplexity according to an in-domain language model.</S>
    <S sid="21" ssid="10">First, note that selecting segments based on a perplexity threshold is equivalent to selecting based on a cross-entropy threshold.</S>
    <S sid="22" ssid="11">Perplexity and cross-entropy are monotonically related, since the perplexity of a string s according to a model M is simply bHmW, where HM(s) is the cross-entropy of s according to M and b is the base with respect to which the cross-entropy is measured (e.g., bits or nats).</S>
    <S sid="23" ssid="12">However, instead of scoring text segments by perplexity or cross-entropy according to the in-domain language model, we score them by the difference of the cross-entropy of a text segment according to the in-domain language model and the cross-entropy of the text segment according to a language model trained on a random sample of the data source from which the text segment is drawn.</S>
    <S sid="24" ssid="13">To state this formally, let I be an in-domain data set and N be a non-domain-specific (or otherwise not entirely in-domain) data set.</S>
    <S sid="25" ssid="14">Let HI(s) be the per-word cross-entropy, according to a language model trained on I, of a text segment s drawn from N. Let HN(s) be the per-word cross-entropy of s according to a language model trained on a random sample of N. We partition N into text segments (e.g., sentences), and score the segments according to HI(s) &#8722; HN(s), selecting all text segments whose score is less than a threshold T. This method can be justified by reasoning simliar to that used to derive methods for training binary text classifiers without labeled negative examples (Denis et al., 2002; Elkin and Noto, 2008).</S>
    <S sid="26" ssid="15">Let us imagine that our non-domainspecific corpus N contains an in-domain subcorpus NI, drawn from the same distribution as our in-domain corpus I.</S>
    <S sid="27" ssid="16">Since NI is statistically just like our in-domain data I, it would seem to be a good candidate for the data that we want to extract from N. By a simple variant of Bayes rule, the probability P(NI|s, N) of a text segment s, drawn randomly from N, being in NI is given by Since NI is a subset of N, P(s|NI, N) = P(s|NI), and by our assumption about the relationship of I and NI, P(s|NI) = P(s|I).</S>
    <S sid="28" ssid="17">Hence, If we could estimate all the probabilities in the right-hand side of this equation, we could use it to select text segments that have a high probability of being in NI.</S>
    <S sid="29" ssid="18">We can estimate P(s|I) and P(s|N) by training language models on I and a sample of N, respectively.</S>
    <S sid="30" ssid="19">That leaves us only P(NI|N), to estimate, but we really don&#8217;t care what P(NI|N) is, because knowing that would still leave us wondering what threshold to set on P (NI|s, N).</S>
    <S sid="31" ssid="20">We don&#8217;t care about classification accuracy; we care only about the quality of the resulting language model, so we might as well just attempt to find a threshold on P(s|I)/P(s|N) that optimizes the fit of the resulting language model to held-out indomain data.</S>
    <S sid="32" ssid="21">Equivalently, we can work in the log domain with the quantity log(P(s|I)) &#8722; log(P(s|N)).</S>
    <S sid="33" ssid="22">This gets us very close to working with the difference in cross-entropies, because HI(s)&#8722;HN(s) is just a length-normalized version of log(P(s|I)) &#8722; log(P(s|N)), with the sign reversed.</S>
    <S sid="34" ssid="23">The reason that we need to normalize for length is that the value of log(P(s|I)) &#8722; log(P(s|N)) tends to correlate very strongly with text segment length.</S>
    <S sid="35" ssid="24">If the candidate text segments vary greatly in length&#8212;e.g., if we partition N into sentences&#8212; this correlation can be a serious problem.</S>
    <S sid="36" ssid="25">We estimated this effect on a 1000-sentence sample of our experimental data described below, and found the correlation between sentence log probability difference and sentence length to be r = &#8722;0.92, while the cross-entropy difference was almost uncorrelated with sentence length (r = 0.04).</S>
    <S sid="37" ssid="26">Hence, using sentence probability ratios or log probability differences as our scoring function would result in selecting disproportionately very short sentences.</S>
    <S sid="38" ssid="27">We tested this in an experiment not described here in detail, and found it not to be significantly better as a selection criterion than random selection.</S>
  </SECTION>
  <SECTION title="3 Experiments" number="3">
    <S sid="39" ssid="1">We have empirically evaluated our proposed method for selecting data from a non-domainspecific source to model text in a specific domain.</S>
    <S sid="40" ssid="2">For the in-domain corpus, we chose the English side of the English-French parallel text from release v5 of the Europarl corpus (Koehn, 2005).</S>
    <S sid="41" ssid="3">This consists of proceedings of the European Parliament from 1999 through 2009.</S>
    <S sid="42" ssid="4">We used the text from 1999 through 2008 as in-domain training data, and we used the first 2000 sentences from January 2009 as test data.</S>
    <S sid="43" ssid="5">For the nondomain-specific corpus, we used the LDC English Gigaword Third Edition (LDC Catalog No.</S>
    <S sid="44" ssid="6">: LDC2007T07).</S>
    <S sid="45" ssid="7">We used a simple tokenization scheme on all data, splitting on white space and on boundaries between alphanumeric and nonalphanumeric (e.g., punctuation) characters.</S>
    <S sid="46" ssid="8">With this tokenization, the sizes of our data sets in terms of sentences and tokens are shown in Table 1.</S>
    <S sid="47" ssid="9">The token counts include added end-of-sentence tokens.</S>
    <S sid="48" ssid="10">To implement our data selection method we required one language model trained on the Europarl training data and one trained on the Gigaword data.</S>
    <S sid="49" ssid="11">To make these language models comparable, and to show the feasibility of optimizing the fit to the in-domain data without training a model on the entire Gigaword corpus, we trained the Gigaword language model for data selection on a random sample of the Gigaword corpus of a similar size to that of the Europarl training data: 1,874,051 sentences, 48,459,945 tokens.</S>
    <S sid="50" ssid="12">To further increase the comparability of these Europarl and Gigaword language models, we restricted the vocabulary of both models to the tokens appearing at least twice in the Europarl training data, treating all other tokens as instances of &lt;UNK&gt;.</S>
    <S sid="51" ssid="13">With this vocabulary, 4-gram language models were trained on both the Europarl training data and the Gigaword random sample using backoff absolute discounting (Ney et al. 1994), with a discount of 0.7 used for all N-gram lengths.</S>
    <S sid="52" ssid="14">The discounted probability mass at the unigram level was added to the probability of &lt;UNK&gt;.</S>
    <S sid="53" ssid="15">A count cutoff of 2 occurrences was applied to the trigrams and 4-grams in estimating these models.</S>
    <S sid="54" ssid="16">We computed the cross-entropy of each sentence in the Gigaword corpus according to both models, and scored each sentence by the difference in cross-entropy, HEp(s)&#8722;HG,,,(s).</S>
    <S sid="55" ssid="17">We then selected subsets of the Gigaword data corresponding to 8 cutoff points in the cross-entropy difference scores, and trained 4-gram models (again using absolute discounting with a discount of 0.7) on each of these subsets and on the full Gigaword corpus.</S>
    <S sid="56" ssid="18">These language models were estimated without restricting the vocabulary or applying count cutoffs, but the only parameters computed were those needed to determine the perplexity of the held-out Europarl test set, which saves a substantial amount of computation in determining the optimal selection threshold.</S>
    <S sid="57" ssid="19">We compared our selection method to three other methods.</S>
    <S sid="58" ssid="20">As a baseline, we trained language models on random subsets of the Gigaword corpus of approximately equal size to the data sets produced by the cutoffs we selected for the cross-entropy difference scores.</S>
    <S sid="59" ssid="21">Next, we scored all the Gigaword sentences by the cross-entropy according to the Europarl-trained model alone.</S>
    <S sid="60" ssid="22">As we noted above, this is equivalent to the indomain perplexity scoring method used by Lin et al. (1997) and Gao et al.</S>
    <S sid="61" ssid="23">(2002).</S>
    <S sid="62" ssid="24">Finally, we implemented Klakow&#8217;s (2000) method, scoring each Gigaword sentence by removing it from the Gigaword corpus and computing the difference in the log likelihood of the Europarl corpus according to unigram models trained on the Gigaword corpus with and without that sentence.</S>
    <S sid="63" ssid="25">With the latter two methods, we chose cutoff points in the resulting scores to produce data sets approximately equal in size to those obtained using our selection method.</S>
  </SECTION>
  <SECTION title="4 Results" number="4">
    <S sid="64" ssid="1">For all four selection methods, plots of test set perplexity vs. the number of training data tokens selected are displayed in Figure 1.</S>
    <S sid="65" ssid="2">(Note that the training data token counts are displayed on a logarithmic scale.)</S>
    <S sid="66" ssid="3">The test set perplexity for the language model trained on the full Gigaword corpus is 135.</S>
    <S sid="67" ssid="4">As we might expect, reducing training data by random sampling always increases perplexity.</S>
    <S sid="68" ssid="5">Selecting Gigaword sentences by their cross-entropy according to the Europarl-trained model is effective in reducing both test set perplexity and training corpus size, with an optimum perplexity of 124, obtained with a model built from 36% of the Gigaword corpus.</S>
    <S sid="69" ssid="6">Klakow&#8217;s method is even more effective, with an optimum perplexity of 111, obtained with a model built from 21% of the Gigaword corpus.</S>
    <S sid="70" ssid="7">The cross-entropy difference selection method, however, is yet more effective, with an optimum perplexity of 101, obtained with a model built from less than 7% of the Gigaword corpus.</S>
    <S sid="71" ssid="8">The comparisons implied by Figure 1, however, are only approximate, because each perplexity (even along the same curve) is computed with respect to a different vocabulary, resulting in a different out-of-vocabulary (OOV) rate.</S>
    <S sid="72" ssid="9">OOV tokens in the test data are excluded from the perplexity computation, so the perplexity measurements are not strictly comparable.</S>
    <S sid="73" ssid="10">Out of the 55566 test set tokens, the number of OOV tokens ranges from 418 (0.75%), for the smallest training set based on in-domain crossentropy scoring, to 20 (0.03%), for training on the full Gigaword corpus.</S>
    <S sid="74" ssid="11">If we consider only the training sets that appear to produce the lowest perplexity for each selection method, however, the spread of OOV counts is much narrower, ranging 53 (0.10%) for best training set based on crossentropy difference scoring, to 20 (0.03%), for random selection.</S>
    <S sid="75" ssid="12">To control for the difference in vocabulary, we estimated a modified 4-gram language model for each selection method (other than random selection) using the training set that appeared to produce the lowest perplexity for that selection method in our initial experiments.</S>
    <S sid="76" ssid="13">In the modified language models, the unigram model based on the selected training set is smoothed by absolute discounting, and backed-off to an unsmoothed unigram model based on the full Gigaword corpus.</S>
    <S sid="77" ssid="14">This produces language models that are normalized over the same vocabulary as a model trained on the full Gigaword corpus; thus the test set has the same OOVs for each model.</S>
    <S sid="78" ssid="15">Test set perplexity for each of these modifed language models is compared to that of the original version of the model in Table 2.</S>
    <S sid="79" ssid="16">It can be seen that adjusting the vocabulary in this way, so that all models are based on the same vocabulary, yields only very small changes in the measured test-set perplexity, and these differences are much smaller than the differences between the different selection methods, whichever way the vocabulary of the language models is determined.</S>
  </SECTION>
  <SECTION title="5 Conclusions" number="5">
    <S sid="80" ssid="1">The cross-entropy difference selection method introduced here seems to produce language models that are both a better match to texts in a restricted domain, and require less data for training, than any of the other data selection methods tested.</S>
    <S sid="81" ssid="2">This study is preliminary, however, in that we have not yet shown improved end-to-end task performance applying this approach, such as improved BLEU scores in a machine translation task.</S>
    <S sid="82" ssid="3">However, we believe there is reason to be optimistic about this.</S>
    <S sid="83" ssid="4">When a language model trained on non-domain-specific data is used in a statistical translation model as a separate feature function (as is often the case), lower perplexity on indomain target language test data derived from reference translations corresponds directly to assigning higher language model feature scores to those reference translations, which should in turn lead to translation system output that matches reference translations better.</S>
  </SECTION>
</PAPER>
