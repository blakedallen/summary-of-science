<PAPER>
  <S sid="0">Learning Synchronous Grammars for Semantic Parsing with Lambda Calculus</S>
  <ABSTRACT>
    <S sid="1" ssid="1">This paper presents the first empirical results to our knowledge on learning synchronous grammars that generate logical forms.</S>
    <S sid="2" ssid="2">Using statistical machine translation techniques, a semantic parser based on a synchronous grammar augmented with operators is learned given a set of training sentences and their correct logical forms.</S>
    <S sid="3" ssid="3">The resulting parser is shown to be the bestperforming system so far in a database query domain.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="4" ssid="1">Originally developed as a theory of compiling programming languages (Aho and Ullman, 1972), synchronous grammars have seen a surge of interest recently in the statistical machine translation (SMT) community as a way of formalizing syntax-based translation models between natural languages (NL).</S>
    <S sid="5" ssid="2">In generating multiple parse trees in a single derivation, synchronous grammars are ideal for modeling syntax-based translation because they describe not only the hierarchical structures of a sentence and its translation, but also the exact correspondence between their sub-parts.</S>
    <S sid="6" ssid="3">Among the grammar formalisms successfully put into use in syntaxbased SMT are synchronous context-free grammars (SCFG) (Wu, 1997) and synchronous treesubstitution grammars (STSG) (Yamada and Knight, 2001).</S>
    <S sid="7" ssid="4">Both formalisms have led to SMT systems whose performance is state-of-the-art (Chiang, 2005; Galley et al., 2006).</S>
    <S sid="8" ssid="5">Synchronous grammars have also been used in other NLP tasks, most notably semantic parsing, which is the construction of a complete, formal meaning representation (MR) of an NL sentence.</S>
    <S sid="9" ssid="6">In our previous work (Wong and Mooney, 2006), semantic parsing is cast as a machine translation task, where an SCFG is used to model the translation of an NL into a formal meaning-representation language (MRL).</S>
    <S sid="10" ssid="7">Our algorithm, WASP, uses statistical models developed for syntax-based SMT for lexical learning and parse disambiguation.</S>
    <S sid="11" ssid="8">The result is a robust semantic parser that gives good performance in various domains.</S>
    <S sid="12" ssid="9">More recently, we show that our SCFG-based parser can be inverted to produce a state-of-the-art NL generator, where a formal MRL is translated into an NL (Wong and Mooney, 2007).</S>
    <S sid="13" ssid="10">Currently, the use of learned synchronous grammars in semantic parsing and NL generation is limited to simple MRLs that are free of logical variables.</S>
    <S sid="14" ssid="11">This is because grammar formalisms such as SCFG do not have a principled mechanism for handling logical variables.</S>
    <S sid="15" ssid="12">This is unfortunate because most existing work on computational semantics is based on predicate logic, where logical variables play an important role (Blackburn and Bos, 2005).</S>
    <S sid="16" ssid="13">For some domains, this problem can be avoided by transforming a logical language into a variable-free, functional language (e.g. the GEOQUERY functional query language in Wong and Mooney (2006)).</S>
    <S sid="17" ssid="14">However, development of such a functional language is non-trivial, and as we will see, logical languages can be more appropriate for certain domains.</S>
    <S sid="18" ssid="15">On the other hand, most existing methods for mapping NL sentences to logical forms involve substantial hand-written components that are difficult to maintain (Joshi and Vijay-Shanker, 2001; Bayer et al., 2004; Bos, 2005).</S>
    <S sid="19" ssid="16">Zettlemoyer and Collins (2005) present a statistical method that is considerably more robust, but it still relies on hand-written rules for lexical acquisition, which can create a performance bottleneck.</S>
    <S sid="20" ssid="17">In this work, we show that methods developed for SMT can be brought to bear on tasks where logical forms are involved, such as semantic parsing.</S>
    <S sid="21" ssid="18">In particular, we extend the WASP semantic parsing algorithm by adding variable-binding &#955;-operators to the underlying SCFG.</S>
    <S sid="22" ssid="19">The resulting synchronous grammar generates logical forms using &#955;-calculus (Montague, 1970).</S>
    <S sid="23" ssid="20">A semantic parser is learned given a set of sentences and their correct logical forms using SMT methods.</S>
    <S sid="24" ssid="21">The new algorithm is called &#955;WASP, and is shown to be the best-performing system so far in the GEOQUERY domain.</S>
  </SECTION>
  <SECTION title="2 Test Domain" number="2">
    <S sid="25" ssid="1">In this work, we mainly consider the GEOQUERY domain, where a query language based on Prolog is used to query a database on U.S. geography (Zelle and Mooney, 1996).</S>
    <S sid="26" ssid="2">The query language consists of logical forms augmented with meta-predicates for concepts such as smallest and count.</S>
    <S sid="27" ssid="3">Figure 1 shows two sample logical forms and their English glosses.</S>
    <S sid="28" ssid="4">Throughout this paper, we use the notation x1, x2,... for logical variables.</S>
    <S sid="29" ssid="5">Although Prolog logical forms are the main focus of this paper, our algorithm makes minimal assumptions about the target MRL.</S>
    <S sid="30" ssid="6">The only restriction on the MRL is that it be defined by an unambiguous context-free grammar (CFG) that divides a logical form into subformulas (and terms into subterms).</S>
    <S sid="31" ssid="7">Figure 2(a) shows a sample parse tree of a logical form, where each CFG production corresponds to a subformula.</S>
  </SECTION>
  <SECTION title="3 The Semantic Parsing Algorithm" number="3">
    <S sid="32" ssid="1">Our work is based on the WASP semantic parsing algorithm (Wong and Mooney, 2006), which translates NL sentences into MRs using an SCFG.</S>
    <S sid="33" ssid="2">In WASP, each SCFG production has the following form: where &#945; is an NL phrase and &#946; is the MR translation of &#945;.</S>
    <S sid="34" ssid="3">Both &#945; and &#946; are strings of terminal and nonterminal symbols.</S>
    <S sid="35" ssid="4">Each non-terminal in &#945; appears in &#946; exactly once.</S>
    <S sid="36" ssid="5">We use indices to show the correspondence between non-terminals in &#945; and &#946;.</S>
    <S sid="37" ssid="6">All derivations start with a pair of co-indexed start symbols, (S1 , S1 ).</S>
    <S sid="38" ssid="7">Each step of a derivation involves the rewriting of a pair of co-indexed non-terminals by the same SCFG production.</S>
    <S sid="39" ssid="8">The yield of a derivation is a pair of terminal strings, (e, f), where e is an NL sentence and f is the MR translation of e. For convenience, we call an SCFG production a rule throughout this paper.</S>
    <S sid="40" ssid="9">While WASP works well for target MRLs that are free of logical variables such as CLANG (Wong and Mooney, 2006), it cannot easily handle various kinds of logical forms used in computational semantics, such as predicate logic.</S>
    <S sid="41" ssid="10">The problem is that WASP lacks a principled mechanism for handling logical variables.</S>
    <S sid="42" ssid="11">In this work, we extend the WASP algorithm by adding a variable-binding mechanism based on &#955;-calculus, which allows for compositional semantics for logical forms.</S>
    <S sid="43" ssid="12">This work is based on an extended version of SCFG, which we call &#955;-SCFG, where each rule has the following form: where &#945; is an NL phrase and &#946; is the MR translation of &#945;.</S>
    <S sid="44" ssid="13">Unlike (1), &#946; is a string of terminals, non-terminals, and logical variables.</S>
    <S sid="45" ssid="14">The variable-binding operator &#955; binds occurrences of the logical variables x1, ... , xk in &#946;, which makes &#955;x1 ... &#955;xk.&#946; a &#955;-function of arity k. When applied to a list of arguments, (xi1, ... , xik), the &#955;function gives &#946;&#963;, where &#963; is a substitution operator, {x1/xi1,..., xk/xik}, that replaces all bound occurrences of xj in &#946; with xij.</S>
    <S sid="46" ssid="15">If any of the arguments xij appear in &#946; as a free variable (i.e. not bound by any &#955;), then those free variables in &#946; must be renamed before function application takes place.</S>
    <S sid="47" ssid="16">Each non-terminal Aj in &#946; is followed by a list of arguments, xj _ (xj1, ... , xjkj ).</S>
    <S sid="48" ssid="17">During parsing, Aj must be rewritten by a &#955;-function fj of arity kj.</S>
    <S sid="49" ssid="18">Like SCFG, a derivation starts with a pair of co-indexed start symbols and ends when all nonterminals have been rewritten.</S>
    <S sid="50" ssid="19">To compute the yield of a derivation, each fj is applied to its corresponding arguments xj to obtain an MR string free of &#955;operators with logical variables properly named.</S>
    <S sid="51" ssid="20">As a concrete example, Figure 2(b) shows an MR parse tree that corresponds to the English parse, [What is the [smallest [state] [by area]]], based on the A-SCFG rules in Figure 3.</S>
    <S sid="52" ssid="21">To compute the yield of this MR parse tree, we start from the leaf nodes: apply Ax1.state(x1) to the argument (x1), and Ax1.Ax2.area(x1,x2) to the arguments (x1, x2).</S>
    <S sid="53" ssid="22">This results in two MR strings: state(x1) and area(x1,x2).</S>
    <S sid="54" ssid="23">Substituting these MR strings for the FORM nonterminals in the parent node gives the A-function Ax1.smallest(x2,(state(x1),area(x1,x2))).</S>
    <S sid="55" ssid="24">Applying this A-function to (x1) gives the MR string smallest(x2,(state(x1),area(x1,x2))).</S>
    <S sid="56" ssid="25">Substituting this MR string for the FORM nonterminal in the grandparent node in turn gives the logical form in Figure 1(a).</S>
    <S sid="57" ssid="26">This is the yield of the MR parse tree, since the root node of the parse tree is reached.</S>
    <S sid="58" ssid="27">Given a set of training sentences paired with their correct logical forms, {(ei, fi)}, the main learning task is to find a A-SCFG, G, that covers the training data.</S>
    <S sid="59" ssid="28">Like most existing work on syntax-based SMT (Chiang, 2005; Galley et al., 2006), we construct G using rules extracted from word alignments.</S>
    <S sid="60" ssid="29">We use the K = 5 most probable word alignments for the training set given by GIZA++ (Och and Ney, 2003), with variable names ignored to reduce sparsity.</S>
    <S sid="61" ssid="30">Rules are then extracted from each word alignment as follows.</S>
    <S sid="62" ssid="31">To ground our discussion, we use the word alignment in Figure 4 as an example.</S>
    <S sid="63" ssid="32">To represent the logical form in Figure 4, we use its linearized parse&#8212;a list of MRL productions that generate the logical form, in top-down, left-most order (cf.</S>
    <S sid="64" ssid="33">Figure 2(a)).</S>
    <S sid="65" ssid="34">Since the MRL grammar is unambiguous, every logical form has a unique linearized parse.</S>
    <S sid="66" ssid="35">We assume the alignment to be n-to-1, where each word is linked to at most one MRL production.</S>
    <S sid="67" ssid="36">Rules are extracted in a bottom-up manner, starting with MRL productions at the leaves of the MR parse tree, e.g.</S>
    <S sid="68" ssid="37">FORM &#8212;* state(x1) in Figure 2(a).</S>
    <S sid="69" ssid="38">Given an MRL production, A &#8212;* Q, a rule A &#8212;* (&#945;, Axi1 ... Axik.Q) is extracted such that: (1) &#945; is the NL phrase linked to the MRL production; (2) xi1, ... , xik are the logical variables that appear in Q and outside the current leaf node in the MR parse tree.</S>
    <S sid="70" ssid="39">If xi1, ... , xik were not bound by A, they would become free variables in Q, subject to renaming during function application (and therefore, invisible to the rest of the logical form).</S>
    <S sid="71" ssid="40">For example, since x1 is an argument of the state predicate as well as answer and area, x1 must be bound (cf. the corresponding tree node in Figure 2(b)).</S>
    <S sid="72" ssid="41">The rule extracted for the state predicate is shown in Figure 3.</S>
    <S sid="73" ssid="42">The case for the internal nodes of the MR parse tree is similar.</S>
    <S sid="74" ssid="43">Given an MRL production, A &#8212;* Q, where Q contains non-terminals A1, ... , An, a rule A &#8212;* (&#945;, Axi1 ... Axik.Q&#8242;) is extracted such that: (1) &#945; is the NL phrase linked to the MRL production, with non-terminals A1, ... , An showing the positions of the argument strings; (2) Q&#8242; is Q with each non-terminal Aj replaced with Aj(xj1, ... , xjkj ), where xj1, ... , xjkj are the bound variables in the A-function used to rewrite Aj; (3) xi1, ... , xik are the logical variables that appear in Q&#8242; and outside the current MR sub-parse.</S>
    <S sid="75" ssid="44">For example, see the rule extracted for the smallest predicate in Figure 3, where x2 is an argument of smallest, but it does not appear outside the formula smallest(...), so x2 need not be bound by A.</S>
    <S sid="76" ssid="45">On the other hand, x1 appears in Q&#8242;, and it appears outside smallest(...) (as an argument of answer), so x1 must be bound.</S>
    <S sid="77" ssid="46">Rule extraction continues in this manner until the root of the MR parse tree is reached.</S>
    <S sid="78" ssid="47">Figure 3 shows all the rules extracted from Figure 4.1 Since the learned A-SCFG can be ambiguous, a probabilistic model is needed for parse disambiguation.</S>
    <S sid="79" ssid="48">We use the maximum-entropy model proposed in Wong and Mooney (2006), which defines a conditional probability distribution over derivations given an observed NL sentence.</S>
    <S sid="80" ssid="49">The output MR is the yield of the most probable derivation according to this model.</S>
    <S sid="81" ssid="50">Parameter estimation involves maximizing the conditional log-likelihood of the training set.</S>
    <S sid="82" ssid="51">For each rule, r, there is a feature that returns the number of times r is used in a derivation.</S>
    <S sid="83" ssid="52">More features will be introduced in Section 5.</S>
  </SECTION>
  <SECTION title="4 Promoting NL/MRL Isomorphism" number="4">
    <S sid="84" ssid="1">We have described the A-WASP algorithm which generates logical forms based on A-calculus.</S>
    <S sid="85" ssid="2">While reasonably effective, it can be improved in several ways.</S>
    <S sid="86" ssid="3">In this section, we focus on improving lexical acquisition.</S>
    <S sid="87" ssid="4">To see why the current lexical acquisition algorithm can be problematic, consider the word alignment in Figure 5 (for the sentence pair in Figure 1(b)).</S>
    <S sid="88" ssid="5">No rules can be extracted for the state predicate, because the shortest NL substring that covers the word states and the argument string Texas, i.e. states bordering Texas, contains the word bordering, which is linked to an MRL production outside the MR sub-parse rooted at state.</S>
    <S sid="89" ssid="6">Rule extraction is forbidden in this case because it would destroy the link between bordering and next to.</S>
    <S sid="90" ssid="7">In other words, the NL and MR parse trees are not isomorphic.</S>
    <S sid="91" ssid="8">This problem can be ameliorated by transforming the logical form of each training sentence so that the NL and MR parse trees are maximally isomorphic.</S>
    <S sid="92" ssid="9">This is possible because some of the operators used in the logical forms, notably the conjunction operator (,), are both associative (a,(b,c) = (a,b),c = a,b,c) and commutative (a,b = b,a).</S>
    <S sid="93" ssid="10">Hence, conjuncts can be reordered and regrouped without changing the meaning of a conjunction.</S>
    <S sid="94" ssid="11">For example, rule extraction would be possible if the positions of the next to and state conjuncts were switched.</S>
    <S sid="95" ssid="12">We present a method for regrouping conjuncts to promote isomorphism between NL and MR parse trees.2 Given a conjunction, it does the following: (See Figure 6 for the pseudocode, and Figure 5 for an illustration.)</S>
    <S sid="96" ssid="13">Step 1.</S>
    <S sid="97" ssid="14">Identify the MRL productions that correspond to the conjuncts and the meta-predicate that takes the conjunction as an argument (count in Figure 5), and figure them as vertices in an undi2This method also applies to any operators that are associative and commutative, e.g. disjunction.</S>
    <S sid="98" ssid="15">For concreteness, however, we use conjunction as an example. rected graph, F. An edge (pi7 pj) is in F if and only if pi and pj contain occurrences of the same logical variables.</S>
    <S sid="99" ssid="16">Each edge in F indicates a possible edge in the transformed MR parse tree.</S>
    <S sid="100" ssid="17">Intuitively, two concepts are closely related if they involve the same logical variables, and therefore, should be placed close together in the MR parse tree.</S>
    <S sid="101" ssid="18">By keeping occurrences of a logical variable in close proximity in the MR parse tree, we also avoid unnecessary variable bindings in the extracted rules.</S>
    <S sid="102" ssid="19">Step 2.</S>
    <S sid="103" ssid="20">Remove edges from F whose inclusion in the MR parse tree would prevent the NL and MR parse trees from being isomorphic.</S>
    <S sid="104" ssid="21">Step 3.</S>
    <S sid="105" ssid="22">Add edges to F to make sure that a spanning tree for F exists.</S>
    <S sid="106" ssid="23">Steps 4&#8211;6.</S>
    <S sid="107" ssid="24">Assign edge weights based on word distance, find a minimum spanning tree, T, for F, then regroup the conjuncts based on T. The choice of T reflects the intuition that words that occur close together in a sentence tend to be semantically related.</S>
    <S sid="108" ssid="25">This procedure is repeated for all conjunctions that appear in a logical form.</S>
    <S sid="109" ssid="26">Rules are then extracted from the same input alignment used to regroup conjuncts.</S>
    <S sid="110" ssid="27">Of course, the regrouping of conjuncts requires a good alignment to begin with, and that requires a reasonable ordering of conjuncts in the training data, since the alignment model is sensitive to word order.</S>
    <S sid="111" ssid="28">This suggests an iterative algorithm in which a better grouping of conjuncts leads to a better alignment model, which guides further regrouping until convergence.</S>
    <S sid="112" ssid="29">We did not pursue this, as it is not needed in our experiments so far.</S>
  </SECTION>
  <SECTION title="5 Modeling the Target MRL" number="5">
    <S sid="113" ssid="1">In this section, we propose two methods for modeling the target MRL.</S>
    <S sid="114" ssid="2">This is motivated by the fact that many of the errors made by the A-WASP parser can be detected by inspecting the MR translations alone.</S>
    <S sid="115" ssid="3">Figure 7 shows some typical errors, which can be classified into two broad categories: 1.</S>
    <S sid="116" ssid="4">Type mismatch errors.</S>
    <S sid="117" ssid="5">For example, a state cannot possibly be a river (Figure 7(a)).</S>
    <S sid="118" ssid="6">Also it is awkward to talk about the population density of a state&#8217;s highest point (Figure 7(b)).</S>
    <S sid="119" ssid="7">2.</S>
    <S sid="120" ssid="8">Errors that do not involve type mismatch.</S>
    <S sid="121" ssid="9">For example, a query can be overly trivial (Figure 7(c)), or involve aggregate functions on a known singleton (Figure 7(d)).</S>
    <S sid="122" ssid="10">The first type of errors can be fixed by type checking.</S>
    <S sid="123" ssid="11">Each m-place predicate is associated with a list of m-tuples showing all valid combinations of entity types that the m arguments can refer to: These m-tuples of entity types are given as domain knowledge.</S>
    <S sid="124" ssid="12">The parser maintains a set of possible entity types for each logical variable introduced in a partial derivation (except those that are no longer visible).</S>
    <S sid="125" ssid="13">If there is a logical variable that cannot refer to any types of entities (i.e. the set of entity types is empty), then the partial derivation is considered invalid.</S>
    <S sid="126" ssid="14">For example, based on the tuples shown above, point(x1) and density(x1, ) cannot be both true, because {POINT} n {COUNTRY, STATE, CITY} = &#8709;.</S>
    <S sid="127" ssid="15">The use of type checking is to exploit the fact that people tend not to ask questions that obviously have no valid answers (Grice, 1975).</S>
    <S sid="128" ssid="16">It is also similar to Schuler&#8217;s (2003) use of model-theoretic interpretations to guide syntactic parsing.</S>
    <S sid="129" ssid="17">Errors that do not involve type mismatch are handled by adding new features to the maximumentropy model (Section 3.2).</S>
    <S sid="130" ssid="18">We only consider features that are based on the MR translations, and therefore, these features can be seen as an implicit language model of the target MRL (Papineni et al., 1997).</S>
    <S sid="131" ssid="19">Of the many features that we have tried, one feature set stands out as being the most effective, the two-level rules in Collins and Koo (2005), which give the number of times a given rule is used to expand a non-terminal in a given parent rule.</S>
    <S sid="132" ssid="20">We use only the MRL part of the rules.</S>
    <S sid="133" ssid="21">For example, a negative weight for the combination of QUERY &#8594; answer(x1,FORM(x1)) and FORM &#8594; Ax1.equal(x1, ) would discourage any parse that yields Figure 7(c).</S>
    <S sid="134" ssid="22">The two-level rules features, along with the features described in Section 3.2, are used in the final version of A-WASP.</S>
  </SECTION>
  <SECTION title="6 Experiments" number="6">
    <S sid="135" ssid="1">We evaluated the A-WASP algorithm in the GEOQUERY domain.</S>
    <S sid="136" ssid="2">The larger GEOQUERY corpus consists of 880 English questions gathered from various sources (Wong and Mooney, 2006).</S>
    <S sid="137" ssid="3">The questions were manually translated into Prolog logical forms.</S>
    <S sid="138" ssid="4">The average length of a sentence is 7.57 words.</S>
    <S sid="139" ssid="5">We performed a single run of 10-fold cross validation, and measured the performance of the learned parsers using precision (percentage of translations that were correct), recall (percentage of test sentences that were correctly translated), and Fmeasure (harmonic mean of precision and recall).</S>
    <S sid="140" ssid="6">A translation is considered correct if it retrieves the same answer as the correct logical form.</S>
    <S sid="141" ssid="7">Figure 8 shows the learning curves for the AWASP algorithm compared to: (1) the original WASP algorithm which uses a functional query language (FunQL); (2) SCISSOR (Ge and Mooney, 2005), a fully-supervised, combined syntacticsemantic parsing algorithm which also uses FunQL; and (3) Zettlemoyer and Collins (2005) (Z&amp;C), a CCG-based algorithm which uses Prolog logical forms.</S>
    <S sid="142" ssid="8">Table 1 summarizes the results at the end of the learning curves (792 training examples for AWASP, WASP and SCISSOR, 600 for Z&amp;C).</S>
    <S sid="143" ssid="9">A few observations can be made.</S>
    <S sid="144" ssid="10">First, algorithms that use Prolog logical forms as the target MRL generally show better recall than those using FunQL.</S>
    <S sid="145" ssid="11">In particular, A-WASP has the best recall by far.</S>
    <S sid="146" ssid="12">One reason is that it allows lexical items to be combined in ways not allowed by FunQL or the hand-written templates in Z&amp;C, e.g.</S>
    <S sid="147" ssid="13">[smallest [state] [by area]] in Figure 3.</S>
    <S sid="148" ssid="14">Second, Z&amp;C has the best precision, although their results are based on 280 test examples only, whereas our results are based on 10-fold cross validation.</S>
    <S sid="149" ssid="15">Third, A-WASP has the best F-measure.</S>
    <S sid="150" ssid="16">To see the relative importance of each component of the A-WASP algorithm, we performed two ablation studies.</S>
    <S sid="151" ssid="17">First, we compared the performance of A-WASP with and without conjunct regrouping (Section 4).</S>
    <S sid="152" ssid="18">Second, we compared the performance of A-WASP with and without language modeling for the MRL (Section 5).</S>
    <S sid="153" ssid="19">Table 2 shows the results.</S>
    <S sid="154" ssid="20">It is found that conjunct regrouping improves recall (p &lt; 0.01 based on the paired t-test), and the use of two-level rules in the maximum-entropy model improves precision and recall (p &lt; 0.05).</S>
    <S sid="155" ssid="21">Type checking also significantly improves precision and recall.</S>
    <S sid="156" ssid="22">A major advantage of A-WASP over SCISSOR and Z&amp;C is that it does not require any prior knowledge of the NL syntax.</S>
    <S sid="157" ssid="23">Figure 9 shows the performance of A-WASP on the multilingual GEOQUERY data set.</S>
    <S sid="158" ssid="24">The 250-example data set is a subset of the larger GEOQUERY corpus.</S>
    <S sid="159" ssid="25">All English questions in this data set were manually translated into Spanish, Japanese and Turkish, while the corresponding Prolog queries remain unchanged.</S>
    <S sid="160" ssid="26">Figure 9 shows that A-WASP performed comparably for all NLs.</S>
    <S sid="161" ssid="27">In contrast, SCISSOR cannot be used directly on the nonEnglish data, because syntactic annotations are only available in English.</S>
    <S sid="162" ssid="28">Z&amp;C cannot be used directly either, because it requires NL-specific templates for building CCG grammars.</S>
  </SECTION>
  <SECTION title="7 Conclusions" number="7">
    <S sid="163" ssid="1">We have presented A-WASP, a semantic parsing algorithm based on a A-SCFG that generates logical forms using A-calculus.</S>
    <S sid="164" ssid="2">A semantic parser is learned given a set of training sentences and their correct logical forms using standard SMT techniques.</S>
    <S sid="165" ssid="3">The result is a robust semantic parser for predicate logic, and it is the best-performing system so far in the GEOQUERY domain.</S>
    <S sid="166" ssid="4">This work shows that it is possible to use standard SMT methods in tasks where logical forms are involved.</S>
    <S sid="167" ssid="5">For example, it should be straightforward to adapt A-WASP to the NL generation task&#8212;all one needs is a decoder that can handle input logical forms.</S>
    <S sid="168" ssid="6">Other tasks that can potentially benefit from this include question answering and interlingual MT.</S>
    <S sid="169" ssid="7">In future work, we plan to further generalize the synchronous parsing framework to allow different combinations of grammar formalisms.</S>
    <S sid="170" ssid="8">For example, to handle long-distance dependencies that occur in open-domain text, CCG and TAG would be more appropriate than CFG.</S>
    <S sid="171" ssid="9">Certain applications may require different meaning representations, e.g. frame semantics.</S>
    <S sid="172" ssid="10">Acknowledgments: We thank Rohit Kate, Razvan Bunescu and the anonymous reviewers for their valuable comments.</S>
    <S sid="173" ssid="11">This work was supported by a gift from Google Inc.</S>
  </SECTION>
</PAPER>
