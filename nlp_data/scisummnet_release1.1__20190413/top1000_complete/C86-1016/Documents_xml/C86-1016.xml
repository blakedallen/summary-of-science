<PAPER>
  <S sid="0" ssid="0">D-PATR:  A Deve lopment  Env i ronment fo r  Un i f i ca t ion -Based  Grammars Lauri Karttunen Artificial Intelligence Center SRI International 333 Ravenswood Avenue Menlo Park, CA 94025 USA and Center for the Study of Language and Information Stanford University 1 Introduction I)-PATR is a development environment for unification-based grammars on Xerox l i00 series work stations.</S>
  <S sid="1" ssid="1">It is based on the PATR formalism developed at SRI International.</S>
  <S sid="2" ssid="2">This formalism is suitable for encoding a wide variety of grammars.</S>
  <S sid="3" ssid="3">At one end of this range are simple phrase-structure grammars with no feature augmentations.</S>
  <S sid="4" ssid="4">The PATR formalism can also be used to encode grammars that are based on a number of current linguistic theories, such as lexical-functional grammar (Bresnan and Kaplan), head-driven phrase structure grammar (Pollard and Sag), and functional unification grammar (Kay).</S>
  <S sid="5" ssid="5">At the other end of the range covered by D-PATR are unification-based categorial grammars (Klein, Steedman, Uszkoreit, Wittenburg) in which all the syntactic information is incorporated in the lexicon and the remaining few combinatorial rules that build phrases are function application and composition.</S>
  <S sid="6" ssid="6">Definite-clause grammars (Pereira and Warren) can also be encoded in the PATR formalism.</S>
  <S sid="7" ssid="7">What these approaches have in common is that syntactic rules and lexieal entries can be written down as sets of attribute-value pairs.</S>
  <S sid="8" ssid="8">Moreover, because a value at the end of one path of attributes can be shared by another path, the structures that are generated by such grammars can be thought of as directed graphs Cdags").</S>
  <S sid="9" ssid="9">Unification is the key operation for building these structures.</S>
  <S sid="10" ssid="10">Because unification is associative and commutative, statements in a unification-based grammar formalism are order-independent and bidirectional with respect to parsing and generation.</S>
  <S sid="11" ssid="11">For a comprehensive introduction tounification-based approaches togrammar, see Shieber 1986 (forthcoming).</S>
  <S sid="12" ssid="12">The idea that led to the present version of D-PATR was to produce a simple compact system for experimenting with unification-based grammars that would run on machines maller than the Symbolics 3600 for which the original tATI~ implementation at SRI had been created.</S>
  <S sid="13" ssid="13">The first version of I)-PATR, initially called }lUG, was written at the Scandinavian Summer Workshop for Computational Linguistics in Helsinki, Finland, at the end of August 1985.</S>
  <S sid="14" ssid="14">Although the actual notation for writing rules in D-PATR in some respects differs from the notation in the original PATI?</S>
  <S sid="15" ssid="15">system, essentially both systems implement the samegrammar formalism.</S>
  <S sid="16" ssid="16">To emphasize this point, the two implementations are now called Z-PATR (Zeta-LiSP PATR) and D PATR (Interlisp-D PATR).</S>
  <S sid="17" ssid="17">A number of innovations that came in with l) PATR (HUG) have since migrated to Z-PATR.</S>
  <S sid="18" ssid="18">A case in point is the method for minimizing copying in unification that is discussed in the section on parsing and unification.</S>
  <S sid="19" ssid="19">Other implementation differences remain--for example, in the parsing algorithm and in the treatment of gaps--but grammars written for D-PATR are convertible into Z-PATR format, and vice versa.</S>
  <S sid="20" ssid="20">D-PATR consists of four basic parts: ?</S>
  <S sid="21" ssid="21">A unification package ?</S>
  <S sid="22" ssid="22">Interpreter for rules and lexical items ?</S>
  <S sid="23" ssid="23">Input output routines for directed graphs ?</S>
  <S sid="24" ssid="24">An Earley style chart parser.</S>
  <S sid="25" ssid="25">These packages are written in simple Interlisp-D for transportability o other dialects of LISP.</S>
  <S sid="26" ssid="26">They do not depend on the features of any particular machine.</S>
  <S sid="27" ssid="27">The only part of D-PATR that is specific to Xerox 1100 series work stations is its user interface.</S>
  <S sid="28" ssid="28">This last set of routines takes full advantage of the graphic capabilities 74 of D-machines.</S>
  <S sid="29" ssid="29">It  provides good facil it ies for wr i t ing and edit ing grammars  as well as many debugging tools for the , ~rammar  writer.</S>
  <S sid="30" ssid="30">2 Grammar  Formal i sm 2.1 Rules A rule in I]-PATR is a l ist of atomic eot~stituent labels that  may be followed by speczfications.</S>
  <S sid="31" ssid="31">Specif ications are constra ints  upon one or more const i tuents  of the rule.</S>
  <S sid="32" ssid="32">in the s implest  case, there are no specif ications and the labels correspond to symbols in an ordinary phrase structure rule.</S>
  <S sid="33" ssid="33">For example, the rule S + NP VP in I) PATR notat ion is wr i t ten as (S NP VP) Before a rule is used by the parser, I)-PATI{ compiles it to a feature set.</S>
  <S sid="34" ssid="34">A feature set can be displayed in di[ferent ways-- for  example, as a matr i?</S>
  <S sid="35" ssid="35">or as a directed graph.</S>
  <S sid="36" ssid="36">[n this paper, we usual ly represent feature sets as graphs but the matr ix  notat ion will also be used occasionally.</S>
  <S sid="37" ssid="37">[n these graphs, the const i tuents  of the rule are represented by labeled arcs, called attributes.</S>
  <S sid="38" ssid="38">The nodes in the graph are values.</S>
  <S sid="39" ssid="39">A value can be atomic or complex; a complex wfiue is another  set of at t r ibute-va lue pairs.</S>
  <S sid="40" ssid="40">By convention, the symbol on the left-hand side of a phrase structure rule is represented by the numer ic  at t r ibute  0.</S>
  <S sid="41" ssid="41">Const i tuents  on the r ight -hand side of the rule are numbered left-to-right, s tar t ing with 1.</S>
  <S sid="42" ssid="42">The above rule D PATR represents  as the following feature set, shown here first as a graph and then as the equiva lent  matr ix.</S>
  <S sid="43" ssid="43">O-- - -cat - -S  0  [cat  S] - i .</S>
  <S sid="44" ssid="44">ca t - -NP  1  [cat  &lt; 2 .</S>
  <S sid="45" ssid="45">ca t - -VP  2  [cat  VF;]I a r i ty - -2  ar  i t,y 2 I t l abe ls  I I - -NP  labe ls  NP - -2 - -VP  V specification is a two-item list of the form ( { a t t r ibute  I path ] [ path  [ va lue  } ).</S>
  <S sid="46" ssid="46">Here attribute is an atom, path is a list, and value is e i ther  an atomic symbol, a l ist of specifications, or an abbreviat ion tbr such a list.</S>
  <S sid="47" ssid="47">The last case is d ist inguished from the first by pref ixing the value symbol with (,~) when it has an abbreviatory role.</S>
  <S sid="48" ssid="48">Ignoring the (?L&gt;cases, this gives four dif ferent k inds of specifications: (attribute vahte), (path value), (attribute path), and (path path).</S>
  <S sid="49" ssid="49">The same feature set can often be specified in several  different ways; in choosing one, we general ly try to minimize the number  of parentheses.</S>
  <S sid="50" ssid="50">Below is a simple example of a phrase structure rule augmented  with specifications.</S>
  <S sid="51" ssid="51">(S NP VP ((0 f se t ) (2  f se t ) ) ((1 f set )  (2 f se t  sub ject ) ) ((2 f se t  form) f in i te ) ) The first specit~cation is an analogue of an I.F~; T = annotat ion;  the S node inher i ts  its feature set from the VP.</S>
  <S sid="52" ssid="52">In addition, N[ is VPs subject and vps feature set contains the feature [form: finite].</S>
  <S sid="53" ssid="53">I) IATI{ compiles this rule to the following graph.</S>
  <S sid="54" ssid="54">(From now on, we shal l  omit the two non-const i tuent  a tr ibutes,  arity and labels, fi-om our display.)</S>
  <S sid="55" ssid="55">~cat - -S O--  - .</S>
  <S sid="56" ssid="56">f se t 2- -Q  .</S>
  <S sid="57" ssid="57">/ / fo r i~f in i te fset  ~C.suba~ct"-~ [ 1 As the graph shows, the feature set of the S-node is the same as VPS feature set.</S>
  <S sid="58" ssid="58">The NP const i tuent  has been unified with the subject in the feature set of the S and the vp.</S>
  <S sid="59" ssid="59">2.2 Specif icat ions In the above rule, the cat feature is interpreted by [) PATR as a const ra int  on the manner  in which the const i tuent  can be instant iated.</S>
  <S sid="60" ssid="60">More constra ints  can be added by annotat ing  the rule with specifications.</S>
  <S sid="61" ssid="61">A It is permissible in D p,.</S>
  <S sid="62" ssid="62">R to write rules that  do not assign their  const i tuents  to any specific syntactic category, such as S, NP, P. and the like.</S>
  <S sid="63" ssid="63">The default assumption is that  the const i tuent  [abels also serve as values of cat.</S>
  <S sid="64" ssid="64">By declar ing them to be DummyCategories, the grammar  writer  can override this convention.</S>
  <S sid="65" ssid="65">The 75 default  dummy symbols are x, Y, and z. instead of (S NP VP), one could just  as well write (xYz ((0 cat) S) (( I  cat) NP) ((2 cat) VP) [t is also legal to leave cat entirely unspecified.</S>
  <S sid="66" ssid="66">This option is useful for expressing rules of function application and composit ion in lexically-based categorial grammars .</S>
  <S sid="67" ssid="67">2.3 Words  and  Stems In its present  form, D-PATR does not have a morphological analyzer  to relate inflected or derived forms of words to entr ies in a morpheme lexicon.</S>
  <S sid="68" ssid="68">All lexcmes must  be entered individually, in ant ic ipat ion of hav ing a better  solution avai lable in the future, D-PATR presently splits the lexicon into two parts: words and stems.</S>
  <S sid="69" ssid="69">The format of the two lexicons is the same, but entr ies  in the word lexicon may contain a reference to an entry in the stem lexicon.</S>
  <S sid="70" ssid="70">For example, the entr ies for am, are.</S>
  <S sid="71" ssid="71">ts, was, were, etc.</S>
  <S sid="72" ssid="72">in the word lexicon can refer to the entry for be in the stem lexicon.</S>
  <S sid="73" ssid="73">Consequently,  what is common to all forms of the auxi l iary can be stated in a single place.</S>
  <S sid="74" ssid="74">A [exical entry  is a l ist consist ing of a form and a list of subentrtes.</S>
  <S sid="75" ssid="75">Each subentry  in turn is a list headed by a morphological category and any number  of specifications.</S>
  <S sid="76" ssid="76">A specification can be a two-item list of the type discussed in the previous section or a template.</S>
  <S sid="77" ssid="77">A template is an abbreviat ion fo ra  l istofspeci f icat ions.</S>
  <S sid="78" ssid="78">For example, the entry for kisses in the word lexicon might  look as follows: (kisses (g kiss PresTense Sg3) (N kiss PI)).</S>
  <S sid="79" ssid="79">I Iere N and V are used as names of morphological categories; kiss refers to an entry in the stem lexicon; PresTense, S t3  and PI are templates.</S>
  <S sid="80" ssid="80">The fact that  kiss is a stem and St3  a template is not marked; it is ra ther determined by where the i r  definit ions are found.</S>
  <S sid="81" ssid="81">The entry for kiss in the stem lexicon could be, for example, (kiss (V VMain TakesNP Dyadic) (N)).</S>
  <S sid="82" ssid="82">When the def init ions for kisses and kiss are 76 interpreted,  the templates and other specif ications that occur in the i r  subentr ies  are processed sequent ia l ly  from left to r ight.</S>
  <S sid="83" ssid="83">Each i tem is compiled to a directed graph and superimposed on the graph previously compiled.</S>
  <S sid="84" ssid="84">This overwr i t ing operat ion differs flom standard unif ication in that  it never fails; if two specif ications give confl ict ing values to some path, the later specif ication overrules the earl ier one.</S>
  <S sid="85" ssid="85">The lexicon writer  can take advantage of this convent ion to set up a hierarchical  feature system in which init ia l  default  ass ignments  can be overr idden by later specifications.</S>
  <S sid="86" ssid="86">2.4 Templates Definit ions for templates  have the same format as the entr ies  in the word and stem lexicons except that  there are no mult ip le subentr ies;  templates are assumed to be unambiguous.</S>
  <S sid="87" ssid="87">A template definit ion is simply a List consist ing of a template name and a number  of specifications.</S>
  <S sid="88" ssid="88">For example, the template names that appear in the entr ies  for kiss might  be expanded as follows: (Note that  a specification may be e i ther  a two-item list of the form discussed in section 2.2 or a name of another  template,) (V OneBar) (OneBar (barlevel one)) (VMain Predicate ( invert ible false)) (Predicate ((trans pred) (sense))) (TakesNP ((syncat f i r s t  cat) NP) ((syncat rest f i r s t  cat) NP) ((syncat rest rest)(syncat ta i l ) ) ) (Dyadic ((trans argl) (syncat f i r s t  trans)) ((trans arg2) (syncat rest f i r s t  trans))) With these definit ions, the verb entry  for kiss in the stem lexicon compiles to the graph shown below.</S>
  <S sid="89" ssid="89">barl evel -- one cat--V invertible--false lex~ sense ~- - .</S>
  <S sid="90" ssid="90">-~ /pred~kiss t rans - -~arg1~ arg2"~~a NP syncat--L ~ / f i r s t - -&lt;~ - res t - -&lt;  k t rans il- --r stII The role of the template TakesNP in this entry is to state that  the verb kiss requires two NPs as its syntactic arguments .</S>
  <S sid="91" ssid="91">The f irst e lement  of the list is the value of the path &lt;syncat f i r s t&gt;,  the second is &lt;syncat res t  f i r s t&gt;.</S>
  <S sid="92" ssid="92">The template Dyadic l inks the two arguments  in the semant ic  t rans lat ion  of kiss to the t rans lat ions  of its syntact ic arguments .</S>
  <S sid="93" ssid="93">2.5 l ,ex iea l  Ru les The expansion of morpheme def init ions by means of templates is a s t ra ight forward matter:  an init ia l  graph acquires addit ional  features and, perhaps, new values for features it a l ready has.</S>
  <S sid="94" ssid="94">I)-[AII{ also allows a more radical t ransformat ion by means of lexical titles.</S>
  <S sid="95" ssid="95">A lexical rule is a special kind of template with two attr ibutes:  m and out.</S>
  <S sid="96" ssid="96">[n applying a lexical rule to a graph, the latter  is J]rst unified with the value of in.</S>
  <S sid="97" ssid="97">If the operat ion succeeds, the value of out is passed on as the result.</S>
  <S sid="98" ssid="98">Because the values under out cart be l inked selectively to the corresponding values under  in, the usual result  of applying a [exical rule is a metamorphos is  of the input graph.</S>
  <S sid="99" ssid="99">let us consider the graph corresponding to a possible lexieal rule for Passive in Engi ish.</S>
  <S sid="100" ssid="100">To make it easier to see the effect of the rule, the graph is turned aroud so that the out values are opposite to the corresponding Ln values; the indeterminates  in the middle are unif ied with their counterparts  in the word to which the rule is applied.</S>
  <S sid="101" ssid="101">i n - cat l/ c(~t le_~ [ / - t,_.x~ ....... ~ntics--relatior,-fl- ,,d,dion SOMEBODY- -arR!</S>
  <S sid="102" ssid="102">7 sem(lnticsl-out / The effect of the rule is to make a transi t ive verb lose the object slot in its syntact ic frame, even though semant ica l ly  it remains  a two-place predicate.</S>
  <S sid="103" ssid="103">The semant ic  effect of the rule is to unify arg2 with the subjects semant ics  and to assign to argl the value SOMEI}OI)Y.</S>
  <S sid="104" ssid="104">This is s imi lar  to the analysis  of passives in some LI,G grammars .</S>
  <S sid="105" ssid="105">2.6 F i l lers  and  Gaps Constructh)ns such as the fb[lowing contain const i tuents  that,  semant ical ly  and syntactical ly,  fill a vacant  s lot - -a  gap--somewhere in the adjacent structure.</S>
  <S sid="106" ssid="106">That paper [ dont  intend to read - - .</S>
  <S sid="107" ssid="107">Good aw)cados are hard to find - - .</S>
  <S sid="108" ssid="108">The neighbor whose car you asked to borrow - -  called.</S>
  <S sid="109" ssid="109">Is this the company the ht.stogram of whose productmrt she wants  to display - - ?</S>
  <S sid="110" ssid="110">From a parsers point of view, there are two main problems to be solved.</S>
  <S sid="111" ssid="111">For the parse to succeed, the filler needs to be avai lable when the incomplete structure is encountered.</S>
  <S sid="112" ssid="112">There must  also be a way to et l sure  Chat a designated fil ler will be consumed by a gap somewhere.</S>
  <S sid="113" ssid="113">A th i rd problem is that,  in relat ive clauses, the filler must contain a relat ive pronoun.</S>
  <S sid="114" ssid="114">Many solut ions to these problems have been proposed and could be implemented in D PATR.</S>
  <S sid="115" ssid="115">As  a convenience, D PAIIt also makes avai lable to the grammar  writer a bui lt - in default  mechanism for d is t r ibut ing the information about fillers, gaps, and relat ive pronouns in an appropr iate way.</S>
  <S sid="116" ssid="116">The or iginal  idea, conceived by Fernando Pereira,  was implemented for gaps in z PATR by Stuar t  Shieber.</S>
  <S sid="117" ssid="117">The scheme in I)-t)AIR is an improvement  in that  it also handles sentences with nested fi l ler-gap dependencies.</S>
  <S sid="118" ssid="118">77 The default  mechan ism uses four special features: gapln, gapOut, relIn and relOut.</S>
  <S sid="119" ssid="119">These features need to be ment ioned explicit ly only in rules that  introduce fillers, such as the relat ive-clause rule, and in the lexical entr ies of relat ive and interrogat ive pronouns.</S>
  <S sid="120" ssid="120">Other  rules are automat ica l ly  augmented  by I)-PAIR in the appropr iate manner  when they are compiled to feature sets used by the parser.</S>
  <S sid="121" ssid="121">By deact ivat ing this facility, the grammar writer can also take care of fi l lers and gaps in a manner  of his own choosing.</S>
  <S sid="122" ssid="122">3 Pars ing  and  Un i f i ca t ion D PATR uses an active chart  parser that  proceeds in a top-down, breadth-f i rst  manner .</S>
  <S sid="123" ssid="123">Because the const i tuents  in a rule are feature sets ra ther  than atomic symbols, the task is a bit  more complicated than in s tandard implementat ions  of Earleys a lgor i thm.</S>
  <S sid="124" ssid="124">We consider two cases here.</S>
  <S sid="125" ssid="125">Let us assume that  the parser is in the process of t ry ing to build an instance of the rule A ~ I~ C and that  it has successfully instant ia ted B as B.</S>
  <S sid="126" ssid="126">At this point, it will enter  a part ial  instant iat ion  of the rule on the chart.</S>
  <S sid="127" ssid="127">We designate this active edge as A(B): C. Here the colon marks  the line between daughter  const i tuents  that  have been found and daughters  that  sti l l  need to be instant iated.</S>
  <S sid="128" ssid="128">When an active edge is added to the chart, the parser needs to find all the rules that  match the first un instant ia ted  const i tuent  to the r ight  of the colon.</S>
  <S sid="129" ssid="129">In the case at hand, it needs to match C aga inst  he left-hand sides of all rules to determine what  rules it should now try to instant iate.</S>
  <S sid="130" ssid="130">For example, if there is a rule C ~ D in the grammar  and C is compatible with C, a looping C: I) or C: I) edge should be added to the chart.</S>
  <S sid="131" ssid="131">In the case of an ordinary phrase-structure grammar , this match ing  task is simple because const i tuents  are represented by atomic category labels.</S>
  <S sid="132" ssid="132">Fur thermore,  A = A, B = B, and C = C. For D PATR, the s i tuat ion is more 78 complicated.</S>
  <S sid="133" ssid="133">F i rst  of all, the const i tuents  are feature sets; second, the const i tuents  in a part ia l ly   [nstant iated rule are general ly  not equal to the corresponding const i tuents in an un ins tant ia ted  rule.</S>
  <S sid="134" ssid="134">Because of the l inks among const i tuents  in a unif icat ion-based grammar , ins tant ia t ing  B as B in the rule A -, B C may also have an effect on the feature sets of A and C. This  is why we label the resul t ing edge A{13): C. Using the feature set C to find the rules that  could instant iate  it is no more difficult than using the or iginal  C, but  it is iess efficient because the result  cannot  be saved and reused when another instance of C must  be bui l t  later.</S>
  <S sid="135" ssid="135">l.) PATR so lves  this problem by carry ing the or iginal rule along with its part ia l ly  instant iated form on active edges.</S>
  <S sid="136" ssid="136">The match ing  task for the prediction step of Ear leys  a lgor i thm is performed using the const i tuent from the original rule ra ther  than its current  instance.</S>
  <S sid="137" ssid="137">A s imi lar  problem arises when an inactive edge is entered on the chart.</S>
  <S sid="138" ssid="138">When the parser has instant ia ted C as c:" and entered it on the chart,  it has to find all the incoming active edges at the start ing vertex of C" that could be extended with the newly found const i tuent.</S>
  <S sid="139" ssid="139">If(" were :m atomic symbol, this task would be simple because it would involve only simple equal ity checks: because C" is a feature set, we would have to use unif ication, which is a more t ime-consuming operation.</S>
  <S sid="140" ssid="140">I) PATR avoids the problem ent irely by keeping track, as part  of the prediction step, of what  edges C" could be used to extend.</S>
  <S sid="141" ssid="141">When an active edge is entered on the chart ,  one piece of information in the edge label is a pointer to the edges that could be extended with it.</S>
  <S sid="142" ssid="142">Init ial ly, the list contains only the edge that  generated the new edge; other  edges may be added later.</S>
  <S sid="143" ssid="143">This information is passed along on whenever  an exist ing edge is extended to a new one.</S>
  <S sid="144" ssid="144">At the point at which C" is added to the chart,  no checks are necessary because the new edge already has a pointer to every incoming edge at the s tar t ing vertex that  can now perhaps be extended.</S>
  <S sid="145" ssid="145">Let us now consider a situation, in which the chart contains two adjacent edges A(B):C and C".</S>
  <S sid="146" ssid="146">In the course of trying to extend the the active edge with C" to build A", the parser has to unify it with the C" constituent of the active edge.</S>
  <S sid="147" ssid="147">The nature of chart parsing is :inch Chat, whether or not this unificat, ion succeeds, it must not alter the contents of the two operand edges.</S>
  <S sid="148" ssid="148">Both AIB):C and C" must remain on l, he chart because they may be needed later on for some other unification.</S>
  <S sid="149" ssid="149">Because unificaLion is a destructive operation, some of the earl ier implementations of unification-based chart parsing, e.g.</S>
  <S sid="150" ssid="150">Z-PATR, never apply it directly, instead, the feature sets are first copied and unil ication is then applied to the copies.</S>
  <S sid="151" ssid="151">In this way, the operands are left untouched, us the parsing algorithm requires, but t.he method is computationally inefficient because it involves a great deal of copying.</S>
  <S sid="152" ssid="152">1) PATI{ solves the problem in a novel way.</S>
  <S sid="153" ssid="153">In [)-PATR, unification is implemented so that the original state of the input structures can be restored after the operation has been completed.</S>
  <S sid="154" ssid="154">Whenever a destructive change is about to be nmde in the value of an attribute, the eell and its contents are saved in an array.</S>
  <S sid="155" ssid="155">After unification, all the effects of the operation can be undone by restoring the saved values.</S>
  <S sid="156" ssid="156">I) PATI{ takes advantage of this option in the following way.</S>
  <S sid="157" ssid="157">parser tries to extend A(B): C to A" by unifying C with C", the operation is applied directly to the two feature sets without them being copied in advance.</S>
  <S sid="158" ssid="158">If the unification fails, its effects are simply cancelled by restoring the original feature sets from the save array.</S>
  <S sid="159" ssid="159">If the operation succeeds, the result ing structure is copied and then the original feature sets are then restored.</S>
  <S sid="160" ssid="160">The copied result remains of course unaffected by the cancellation.</S>
  <S sid="161" ssid="161">The following sketch summarizes the difference between I) PATI{ and earl ier versions of Z.PATR with respect to copying and unification.</S>
  <S sid="162" ssid="162">Here X and v stand for the original feature sets, z for the result, and the copied structures are identified with primes.</S>
  <S sid="163" ssid="163">-~-~ x Y {opt&gt; ?</S>
  <S sid="164" ssid="164">D-PATR x restore X un i fy  ~&gt; Z copy -~, Z y restore Y As the i l lustration shows, the new me~,hod entails making only one copy, not two, when the operation succeeds.</S>
  <S sid="165" ssid="165">In the event of failure, 1) IATR simply restores the original structures without copying anything; the old method always copies both input structures.</S>
  <S sid="166" ssid="166">In the case of Z-PATR, the new method has shortened parsing times by a factor of three.</S>
  <S sid="167" ssid="167">It is expected that this technique can be further improved by hnplcmenting some fmm of structure sharing [Karttunen :~nd Kay 1985; Pereira 1.9851 to minimize the need for copying.</S>
  <S sid="168" ssid="168">4 Conch ls ion Unlike some other grammar development systems--for example, Ronald Kaplans IA,(~ Grammar Writers Workbench [Kiparsky 84]--I)-PATR [S not an implementation of a particular linguistic theory.</S>
  <S sid="169" ssid="169">It is designed to be an efficient generic tool for expJoring a ,ange of grammar formalisms in which unit~cation plays a central role.</S>
  <S sid="170" ssid="170">Because of its fliendly interface and display facilities, I)-PArR can also be used for educational purposes, in partieular, to demonstrate chart parsing and unification.</S>
  <S sid="171" ssid="171">I)-PATR is not a commercial product.</S>
  <S sid="172" ssid="172">It is made available to users outside SRI who might wish to develop unification-based grammars.</S>
  <S sid="173" ssid="173">I)-IATR is currently being used for grammar development at s[d International.</S>
  <S sid="174" ssid="174">and Xerox IAIIC.</S>
  <S sid="175" ssid="175">For a more comprehensive discussion of I) PATI{ and its features, see Karttunen (forthcoming).</S>
  <S sid="176" ssid="176">79 Acknowledgments I)-PATR is  a close relative of Z-PATR, the first IATR implementation, whose main architect is Stuart Shieber.</S>
  <S sid="177" ssid="177">Many of the ideas in D-PATR come from the work of Ronald Kaplan, Martin Kay, and Fernando Pereira.</S>
  <S sid="178" ssid="178">The matrix display package for feature sets in D-PATR was written by Per-Kristian Halvorsen.</S>
  <S sid="179" ssid="179">I would also like to thank Annie Zaenen and Hans Uszkoreit for their help in designing the system.</S>
  <S sid="180" ssid="180">This research, made possible in part by a gift from the System Development Foundation, was also supported by the Defense Advanced Research Projects Agency under Contract N00039-84-C-0524 with the Naval Electronics Systems Command.</S>
  <S sid="181" ssid="181">References Kaplan, R. and J. Bresnan, "I,exical-functional grammar: A Formal System for Grammatical Representation," The Mental Representation f Grammatical Relations, J. Bresnan, ed., MIT Press, Cambdridge, Massachusetts, 1983.</S>
  <S sid="182" ssid="182">Karttunen, L. and M. Kay, "Structure Sharing with Binary Trees," Proceedings of the 23rd Annual Meeting of the ACL, Association for Computational Linguistics, 1985.</S>
  <S sid="183" ssid="183">Karttunen, L. D-PATR: A Development Environment for Unification-Based Grammars, CSLI Report, Center for the Study of Language and Information, Stanford, California (forthcoming in 1986).</S>
  <S sid="184" ssid="184">Kay, M., "Parsing in Functional Unification Grammar," Natural Language Parsing, D. Dowty, L. Karttunen, and A. Zwieky, eds., Cambridge University Press, Cambridge, England, 1985.</S>
  <S sid="185" ssid="185">Kiparsky, C. "LFG Manual," manuscript, Xerox Palo Alto Research Center, Palo Alto, California (1985).</S>
  <S sid="186" ssid="186">Pereira, F. C. N., "A Structure-Sharing Representation for Unification-Based Grammar Formalisms," Proceedings of the 23rd Annual Meeting of the ACL, Association for Computational Linguistics, 1985.</S>
  <S sid="187" ssid="187">Pereira, F. C. N. and D. H. D. Warren, "Definite-Clause Grammars for Language Analysis--a Survey of the Formalism and a Comparison with Augmented Transition Networks," Artificial Intelligence, 13:231-278, 1980.</S>
  <S sid="188" ssid="188">Pollard, C., Generalized Phrase Structure Grammars.</S>
  <S sid="189" ssid="189">Head Grammars, and Natural Languages, Ph.D. dissertation, Stanford University, Stanford, California (1984).</S>
  <S sid="190" ssid="190">Pollard, C., Lecture notes on head-driven phrase-structure grammar, Center for the Study of Language and information, unpublished (February 1985).</S>
  <S sid="191" ssid="191">Shieber, S. M., H. Uszkoreit, F. C. N. Pereira, J. J. Robinson, and M. Tyson, "The Formalism and Implementation of PATR lI," Research on Interactive Acquisition and Use of Knowledge, B. Grosz and M. Stickel, eds., Sill Final Report 1894, SRI International, Menlo Park, California, 1983.</S>
  <S sid="192" ssid="192">Shieber, S. M., L. Karttunen, and F. C. N. Pereira, Notes from the Unification Underground: A Compilation of Papers on Unification-Based Grammar Formalisms.</S>
  <S sid="193" ssid="193">Technical Report 327, Artificial Intelligence Center, SRI International, Menlo Park, California (June 1984).</S>
  <S sid="194" ssid="194">Shieber, S. M., An Introductton to Untficatton-Based Approaches to Grammar, CSLI Lecture Notes Series, (University of Chicago Press, Chicago Illinois, forthcoming in 1986).</S>
  <S sid="195" ssid="195">Steedman, M., "Combinators, Categorial Grammars, and Parasitic Gaps," paper presented at the Tucson Conference on Categorial Grammar (June 1985).</S>
  <S sid="196" ssid="196">Uszkoreit, H., "On Categorial Unification Grammars," in this volume.</S>
  <S sid="197" ssid="197">Wittenburg, K., Some Properties of Combinatory Categorial Grammars of Relevance to Parsing.</S>
  <S sid="198" ssid="198">Technical Report HI-012-86, Microelectronics and Computer Technology Corporation, Austin, Texas, (January 1986).</S>
</PAPER>
