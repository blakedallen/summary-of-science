<PAPER>
  <S sid="0">An All-Subtrees Approach To Unsupervised Parsing</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We investigate generalizations of the allsubtrees &amp;quot;DOP&amp;quot; approach to unsupervised parsing.</S>
    <S sid="2" ssid="2">Unsupervised DOP models assign all possible binary trees to a set of sentences and next use (a large random subset of) all subtrees from these binary trees to compute the most probable parse trees.</S>
    <S sid="3" ssid="3">We will test both a relative frequency estimator for unsupervised DOP and a maximum likelihood estimator which is known to be statistically consistent.</S>
    <S sid="4" ssid="4">We report state-ofthe-art results on English (WSJ), German (NEGRA) and Chinese (CTB) data.</S>
    <S sid="5" ssid="5">To the best of our knowledge this is the first paper which tests a maximum likelihood estimator for DOP on the Wall Street Journal, leading the surprising result that unsupervised parsing model beats a widely used supervised model (a treebank PCFG).</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">The problem of bootstrapping syntactic structure from unlabeled data has regained considerable interest.</S>
    <S sid="7" ssid="2">While supervised parsers suffer from shortage of hand-annotated data, unsupervised parsers operate with unlabeled raw data of which unlimited quantities are available.</S>
    <S sid="8" ssid="3">During the last few years there has been steady progress in the field.</S>
    <S sid="9" ssid="4">Where van Zaanen (2000) achieved 39.2% unlabeled f-score on ATIS word strings, Clark (2001) reports 42.0% on the same data, and Klein and Manning (2002) obtain 51.2% f-score on ATIS part-of-speech strings using a constituent-context model called CCM.</S>
    <S sid="10" ssid="5">On Penn Wall Street Journal po-s-strings &#8804; 10 (WSJ10), Klein and Manning (2002) report 71.1% unlabeled f-score with CCM.</S>
    <S sid="11" ssid="6">And the hybrid approach of Klein and Manning (2004), which combines constituency and dependency models, yields 77.6% f-score.</S>
    <S sid="12" ssid="7">Bod (2006) shows that a further improvement on the WSJ10 can be achieved by an unsupervised generalization of the all-subtrees approach known as Data-Oriented Parsing (DOP).</S>
    <S sid="13" ssid="8">This unsupervised DOP model, coined U-DOP, first assigns all possible unlabeled binary trees to a set of sentences and next uses all subtrees from (a large subset of) these trees to compute the most probable parse trees.</S>
    <S sid="14" ssid="9">Bod (2006) reports that U-DOP not only outperforms previous unsupervised parsers but that its performance is as good as a binarized supervised parser (i.e. a treebank PCFG) on the WSJ.</S>
    <S sid="15" ssid="10">A possible drawback of U-DOP, however, is the statistical inconsistency of its estimator (Johnson 2002) which is inherited from the DOP1 model (Bod 1998).</S>
    <S sid="16" ssid="11">That is, even with unlimited training data, U-DOP's estimator is not guaranteed to converge to the correct weight distribution.</S>
    <S sid="17" ssid="12">Johnson (2002: 76) argues in favor of a maximum likelihood estimator for DOP which is statistically consistent.</S>
    <S sid="18" ssid="13">As it happens, in Bod (2000) we already developed such a DOP model, termed ML-DOP, which reestimates the subtree probabilities by a maximum likelihood procedure based on Expectation-Maximization.</S>
    <S sid="19" ssid="14">Although crossvalidation is needed to avoid overlearning, ML-DOP outperforms DOP1 on the OVIS corpus (Bod 2000).</S>
    <S sid="20" ssid="15">This raises the question whether we can create an unsupervised DOP model which is also statistically consistent.</S>
    <S sid="21" ssid="16">In this paper we will show that an unsupervised version of ML-DOP can be constructed along the lines of U-DOP.</S>
    <S sid="22" ssid="17">We will start out by summarizing DOP, U-DOP and ML-DOP, and next create a new unsupervised model called UML-DOP.</S>
    <S sid="23" ssid="18">We report that UML-DOP not only obtains higher parse accuracy than U-DOP on three different domains, but that it also achieves this with fewer subtrees than U-DOP.</S>
    <S sid="24" ssid="19">To the best of our knowledge, this paper presents the first unsupervised parser that outperforms a widely used supervised parser on the WSJ, i.e. a treebank PCFG.</S>
    <S sid="25" ssid="20">We will raise the question whether the end of supervised parsing is in sight.</S>
  </SECTION>
  <SECTION title="2 DOP" number="2">
    <S sid="26" ssid="1">The key idea of DOP is this: given an annotated corpus, use all subtrees, regardless of size, to parse new sentences.</S>
    <S sid="27" ssid="2">The DOP1 model in Bod (1998) computes the probabilities of parse trees and sentences from the relative frequencies of the subtrees.</S>
    <S sid="28" ssid="3">Although it is now known that DOP1's relative frequency estimator is statistically inconsistent (Johnson 2002), the model yields excellent empirical results and has been used in state-of-the-art systems.</S>
    <S sid="29" ssid="4">Let's illustrate DOP1 with a simple example.</S>
    <S sid="30" ssid="5">Assume a corpus consisting of only two trees, as given in figure 1.</S>
    <S sid="31" ssid="6">DOP1 computes the probability of a subtree t as the probability of selecting t among all corpus subtrees that can be substituted on the same node as t. This probability is computed as the number of occurrences of t in the corpus,  |t |, divided by the total number of occurrences of all subtrees t' with the same root label as t.1 Let r(t) return the root label of t. Then we may write: New sentences may be derived by combining fragments, i.e. subtrees, from this corpus, by means of a node-substitution operation indicated as o. Node-substitution identifies the leftmost nonterminal frontier node of one subtree with the root node of a second subtree (i.e., the second subtree is substituted on the leftmost nonterminal frontier node of the first subtree).</S>
    <S sid="32" ssid="7">Thus a new sentence such as Mary likes Susan can be derived by The probability of a derivation t1o...otn is computed by the product of the probabilities of its subtrees ti: As we have seen, there may be several distinct derivations that generate the same parse tree.</S>
    <S sid="33" ssid="8">The probability of a parse tree T is the sum of the assigning all possible binary trees to this string, where each root node is labeled S and each internal node is labeled X.</S>
    <S sid="34" ssid="9">Thus NNS VBD JJ NNS has a total of five binary trees shown in figure 4 -- where for readability we add words as well.</S>
    <S sid="35" ssid="10">Thus DOP1 considers counts of subtrees of a wide range of sizes: everything from counts of singlelevel rules to entire trees is taken into account to compute the most probable parse tree of a sentence.</S>
    <S sid="36" ssid="11">A disadvantage of the approach may be that an extremely large number of subtrees (and derivations) must be considered.</S>
    <S sid="37" ssid="12">Fortunately there exists a compact isomorphic PCFG-reduction of DOP1 whose size is linear rather than exponential in the size of the training set (Goodman 2003).</S>
    <S sid="38" ssid="13">Moreover, Collins and Duffy (2002) show how a tree kernel can be applied to DOP1's all-subtrees representation.</S>
    <S sid="39" ssid="14">The currently most successful version of DOP1 uses a PCFG-reduction of the model with an n-best parsing algorithm (Bod 2003).</S>
  </SECTION>
  <SECTION title="3 U-DOP" number="3">
    <S sid="40" ssid="1">U-DOP extends DOP1 to unsupervised parsing (Bod 2006).</S>
    <S sid="41" ssid="2">Its key idea is to assign all unlabeled binary trees to a set of sentences and to next use (in principle) all subtrees from these binary trees to parse new sentences.</S>
    <S sid="42" ssid="3">U-DOP thus proposes one of the richest possible models in bootstrapping trees.</S>
    <S sid="43" ssid="4">Previous models like Klein and Manning's (2002, 2005) CCM model limit the dependencies to &amp;quot;contiguous subsequences of a sentence&amp;quot;.</S>
    <S sid="44" ssid="5">This means that CCM neglects dependencies that are non-contiguous such as between more and than in &amp;quot;BA carried more people than cargo&amp;quot;.</S>
    <S sid="45" ssid="6">Instead, UDOP's all-subtrees approach captures both contiguous and non-contiguous lexical dependencies.</S>
    <S sid="46" ssid="7">As with most other unsupervised parsing models, U-DOP induces trees for p-o-s strings rather than for word strings.</S>
    <S sid="47" ssid="8">The extension to word strings is straightforward as there exist highly accurate unsupervised part-of-speech taggers (e.g.</S>
    <S sid="48" ssid="9">Sch&#252;tze 1995) which can be directly combined with unsupervised parsers.</S>
    <S sid="49" ssid="10">To give an illustration of U-DOP, consider the WSJ p-o-s string NNS VBD JJ NNS which may correspond for instance to the sentence Investors suffered heavy losses.</S>
    <S sid="50" ssid="11">U-DOP starts by While we can efficiently represent the set of all binary trees of a string by means of a chart, we need to unpack the chart if we want to extract subtrees from this set of binary trees.</S>
    <S sid="51" ssid="12">And since the total number of binary trees for the small WSJ10 is almost 12 million, it is doubtful whether we can apply the unrestricted U-DOP model to such a corpus.</S>
    <S sid="52" ssid="13">U-DOP therefore randomly samples a large subset from the total number of parse trees from the chart (see Bod 2006) and next converts the subtrees from these parse trees into a PCFG-reduction (Goodman 2003).</S>
    <S sid="53" ssid="14">Since the computation of the most probable parse tree is NP-complete (Sima'an 1996), U-DOP estimates the most probable tree from the 100 most probable derivations using Viterbi n-best parsing.</S>
    <S sid="54" ssid="15">We could also have used the more efficient k-best hypergraph parsing technique by Huang and Chiang (2005), but we have not yet incorporated this into our implementation.</S>
    <S sid="55" ssid="16">To give an example of the dependencies that U-DOP can take into account, consider the following subtrees in figure 5 from the trees in probabilities of its distinct derivations.</S>
    <S sid="56" ssid="17">Let tid be the i-th subtree in the derivation d that produces tree T, then the probability of T is given by figure 4 (where we again add words for readability).</S>
    <S sid="57" ssid="18">These subtrees show that U-DOP takes into account both contiguous and non-contiguous substrings.</S>
    <S sid="58" ssid="19">Of course, if we only had the sentence Investors suffered heavy losses in our corpus, there would be no difference in probability between the five parse trees in figure 4.</S>
    <S sid="59" ssid="20">However, if we also have a different sentence where JJ NNS (heavy losses) appears in a different context, e.g. in Heavy losses were reported, its covering subtree gets a relatively higher frequency and the parse tree where heavy losses occurs as a constituent gets a higher total probability.</S>
  </SECTION>
  <SECTION title="4 ML-DOP" number="4">
    <S sid="60" ssid="1">ML-DOP (Bod 2000) extends DOP with a maximum likelihood reestimation technique based on the expectation-maximization (EM) algorithm (Dempster et al. 1977) which is known to be statistically consistent (Shao 1999).</S>
    <S sid="61" ssid="2">ML-DOP reestimates DOP's subtree probabilities in an iterative way until the changes become negligible.</S>
    <S sid="62" ssid="3">The following exposition of ML-DOP is heavily based on previous work by Bod (2000) and Magerman (1993).</S>
    <S sid="63" ssid="4">It is important to realize that there is an implicit assumption in DOP that all possible derivations of a parse tree contribute equally to the total probability of the parse tree.</S>
    <S sid="64" ssid="5">This is equivalent to saying that there is a hidden component to the model, and that DOP can be trained using an EM algorithm to determine the maximum likelihood estimate for the training data.</S>
    <S sid="65" ssid="6">The EM algorithm for this ML-DOP model is related to the Inside-Outside algorithm for context-free grammars, but the reestimation formula is complicated by the presence of subtrees of depth greater than 1.</S>
    <S sid="66" ssid="7">To derive the reestimation formula, it is useful to consider the state space of all possible derivations of a tree.</S>
    <S sid="67" ssid="8">The derivations of a parse tree T can be viewed as a state trellis, where each state contains a partially constructed tree in the course of a leftmost derivation of T. st denotes a state containing the tree t which is a subtree of T. The state trellis is defined as follows.</S>
    <S sid="68" ssid="9">The initial state, s0, is a tree with depth zero, consisting of simply a root node labeled with S. The final state, sT, is the given parse tree T. A state st is connected forward to all states stf such that tf = t &#176; t', for some t'.</S>
    <S sid="69" ssid="10">Here the appropriate t' is defined to be tf &#8722; t. A state st is connected backward to all states stb such that t = tb &#176; t', for some t'.</S>
    <S sid="70" ssid="11">Again, t' is defined to be t &#8722; tb.</S>
    <S sid="71" ssid="12">The construction of the state lattice and assignment of transition probabilities according to the ML-DOP model is called the forward pass.</S>
    <S sid="72" ssid="13">The probability of a given state, P(s), is referred to as &#945;(s).</S>
    <S sid="73" ssid="14">The forward probability of a state st is computed recursively The backward probability of a state, referred to as &#946;(s), is calculated according to the following recursive formula: where the backward probability of the goal state is set equal to the forward probability of the goal state, &#946;(sT) = &#945;(sT).</S>
    <S sid="74" ssid="15">The update formula for the count of a subtree t is (where r(t) is the root label of t): The updated probability distribution, P'(t  |r(t)), is defined to be In practice, ML-DOP starts out by assigning the same relative frequencies to the subtrees as DOP1, which are next reestimated by the formulas above.</S>
    <S sid="75" ssid="16">We may in principle start out with any initial parameters, including random initializations, but since ML estimation is known to be very sensitive to the initialization of the parameters, it is convenient to start with parameters that are known to perform well.</S>
    <S sid="76" ssid="17">To avoid overtraining, ML-DOP uses the subtrees from one half of the training set to be trained on the other half, and vice versa.</S>
    <S sid="77" ssid="18">This crosstraining is important since otherwise UML-DOP would assign the training set trees their empirical frequencies and assign zero weight to all other subtrees (cf.</S>
    <S sid="78" ssid="19">Prescher et al. 2004).</S>
    <S sid="79" ssid="20">The updated probabilities are iteratively reestimated until the decrease in cross-entropy becomes negligible.</S>
    <S sid="80" ssid="21">Unfortunately, no compact PCFG-reduction of MLDOP is known.</S>
    <S sid="81" ssid="22">As a consequence, parsing with ML-DOP is very costly and the model has hitherto never been tested on corpora larger than OVIS (Bonnema et al. 1997).</S>
    <S sid="82" ssid="23">Yet, we will show that by clever pruning we can extend our experiments not only to the WSJ, but also to the German NEGRA and the Chinese CTB.</S>
    <S sid="83" ssid="24">(Zollmann and Sima'an 2005 propose a different consistent estimator for DOP, which we cannot go into here).</S>
  </SECTION>
  <SECTION title="5 UML-DOP" number="5">
    <S sid="84" ssid="1">Analogous to U-DOP, UML-DOP is an unsupervised generalization of ML-DOP: it first assigns all unlabeled binary trees to a set of sentences and next extracts a large (random) set of subtrees from this tree set.</S>
    <S sid="85" ssid="2">It then reestimates the initial probabilities of these subtrees by ML-DOP on the sentences from a held-out part of the tree set.</S>
    <S sid="86" ssid="3">The training is carried out by dividing the tree set into two equal parts, and reestimating the subtrees from one part on the other.</S>
    <S sid="87" ssid="4">As initial probabilities we use the subtrees' relative frequencies as described in section 2 (smoothed by Good-Turing -- see Bod 1998), though it would also be interesting to see how the model works with other initial parameters, in particular with the usage frequencies proposed by Zuidema (2006).</S>
    <S sid="88" ssid="5">As with U-DOP, the total number of subtrees that can be extracted from the binary tree set is too large to be fully taken into account.</S>
    <S sid="89" ssid="6">Together with the high computational cost of reestimation we propose even more drastic pruning than we did in Bod (2006) for U-DOP.</S>
    <S sid="90" ssid="7">That is, while for sentences &lt;_ 7 words we use all binary trees, for each sentence &gt;_ 8 words we randomly sample a fixed number of 128 trees (which effectively favors more frequent trees).</S>
    <S sid="91" ssid="8">The resulting set of trees is referred to as the binary tree set.</S>
    <S sid="92" ssid="9">Next, we randomly extract for each subtree-depth a fixed number of subtrees, where the depth of subtree is the longest path from root to any leaf.</S>
    <S sid="93" ssid="10">This has roughly the same effect as the correction factor used in Bod (2003, 2006).</S>
    <S sid="94" ssid="11">That is, for each particular depth we sample subtrees by first randomly selecting a node in a random tree from the binary tree set after which we select random expansions from that node until a subtree of the particular depth is obtained.</S>
    <S sid="95" ssid="12">For our experiments in section 6, we repeated this procedure 200,000 times for each depth.</S>
    <S sid="96" ssid="13">The resulting subtrees are then given to MLDOP's reestimation procedure.</S>
    <S sid="97" ssid="14">Finally, the reestimated subtrees are used to compute the most probable parse trees for all sentences using Viterbi n-best, as described in section 3, where the most probable parse is estimated from the 100 most probable derivations.</S>
    <S sid="98" ssid="15">A potential criticism of (U)ML-DOP is that since we use DOP1's relative frequencies as initial parameters, ML-DOP may only find a local maximum nearest to DOP1's estimator.</S>
    <S sid="99" ssid="16">But this is of course a criticism against any iterative ML approach: it is not guaranteed that the global maximum is found (cf.</S>
    <S sid="100" ssid="17">Manning and Sch&#252;tze 1999: 401).</S>
    <S sid="101" ssid="18">Nevertheless we will see that our reestimation procedure leads to significantly better accuracy compared to U-DOP (the latter would be equal to UML-DOP under 0 iterations).</S>
    <S sid="102" ssid="19">Moreover, in contrast to U-DOP, UML-DOP can be theoretically motivated: it maximizes the likelihood of the data using the statistically consistent EM algorithm.</S>
  </SECTION>
  <SECTION title="6 Experiments: Can we beat supervised by unsupervised parsing?" number="6">
    <S sid="103" ssid="1">To compare UML-DOP to U-DOP, we started out with the WSJ10 corpus, which contains 7422 sentences &lt;_ 10 words after removing empty elements and punctuation.</S>
    <S sid="104" ssid="2">We used the same evaluation metrics for unlabeled precision (UP) and unlabeled recall (UR) as defined in Klein (2005: 2122).</S>
    <S sid="105" ssid="3">Klein's definitions differ slightly from the standard PARSEVAL metrics: multiplicity of brackets is ignored, brackets of span one are ignored and the bracket labels are ignored.</S>
    <S sid="106" ssid="4">The two metrics of UP and UR are combined by the unlabeled f score F1 which is defined as the harmonic mean of UP and UR: F1 = 2*UP*UR/(UP+UR).</S>
    <S sid="107" ssid="5">For the WSJ10, we obtained a binary tree set of 5.68 * 105 trees, by extracting the binary trees as described in section 5.</S>
    <S sid="108" ssid="6">From this binary tree set we sampled 200,000 subtrees for each subtreedepth.</S>
    <S sid="109" ssid="7">This resulted in a total set of roughly 1.7 * 106 subtrees that were reestimated by our maximum-likelihood procedure.</S>
    <S sid="110" ssid="8">The decrease in cross-entropy became negligible after 14 iterations (for both halfs of WSJ10).</S>
    <S sid="111" ssid="9">After computing the most probable parse trees, UML-DOP achieved an f-score of 82.9% which is a 20.5% error reduction compared to U-DOP's f-score of 78.5% on the same data (Bod 2006).</S>
    <S sid="112" ssid="10">We next tested UML-DOP on two additional domains which were also used in Klein and Manning (2004) and Bod (2006): the German NEGRA10 (Skut et al. 1997) and the Chinese CTB10 (Xue et al.</S>
    <S sid="113" ssid="11">2002) both containing 2200+ sentences &lt;_ 10 words after removing punctuation.</S>
    <S sid="114" ssid="12">Table 1 shows the results of UML-DOP compared to U-DOP, the CCM model by Klein and Manning (2002), the DMV dependency learning model by Klein and Manning (2004) as well as their combined model DMV+CCM.</S>
    <S sid="115" ssid="13">Table 1 shows that UML-DOP scores better than U-DOP and Klein and Manning's models in all cases.</S>
    <S sid="116" ssid="14">It thus pays off to not only use subtrees rather than substrings (as in CCM) but to also reestimate the subtrees' probabilities by a maximum-likelihood procedure rather than using their (smoothed) relative frequencies (as in U-DOP).</S>
    <S sid="117" ssid="15">Note that UML-DOP achieves these improved results with fewer subtrees than U-DOP, due to UML-DOP's more drastic pruning of subtrees.</S>
    <S sid="118" ssid="16">It is also noteworthy that UMLDOP, like U-DOP, does not employ a separate class for non-constituents, so-called distituents, while CCM and CCM+DMV do.</S>
    <S sid="119" ssid="17">(Interestingly, the top 10 most frequently learned constituents by UMLDOP were exactly the same as by U-DOP -- see the relevant table in Bod 2006).</S>
    <S sid="120" ssid="18">We were also interested in testing UML-DOP on longer sentences.</S>
    <S sid="121" ssid="19">We therefore included all WSJ sentences up to 40 words after removing empty elements and punctuation (WSJ40) and again sampled 200,000 subtrees for each depth, using the same method as before.</S>
    <S sid="122" ssid="20">Furthermore, we compared UML-DOP against a supervised binarized PCFG, i.e. a treebank PCFG whose simple relative frequency estimator corresponds to maximum likelihood (Chi and Geman 1998), and which we shall refer to as &amp;quot;ML-PCFG&amp;quot;.</S>
    <S sid="123" ssid="21">To this end, we used a random 90%/10% division of WSJ40 into a training set and a test set.</S>
    <S sid="124" ssid="22">The ML-PCFG had thus access to the Penn WSJ trees in the training set, while UML-DOP had to bootstrap all structure from the flat strings from the training set to next parse the 10% test set -- clearly a much more challenging task.</S>
    <S sid="125" ssid="23">Table 2 gives the results in terms of f-scores.</S>
    <S sid="126" ssid="24">The table shows that UML-DOP scores better than U-DOP, also for WSJ40.</S>
    <S sid="127" ssid="25">Our results on WSJ10 are somewhat lower than in table 1 due to the use of a smaller training set of 90% of the data.</S>
    <S sid="128" ssid="26">But the most surprising result is that UML-DOP's fscore is higher than the supervised binarized treebank PCFG (ML-PCFG) for both WSJ10 and WSJ40.</S>
    <S sid="129" ssid="27">In order to check whether this difference is statistically significant, we additionally tested on 10 different 90/10 divisions of the WSJ40 (which were the same splits as in Bod 2006).</S>
    <S sid="130" ssid="28">For these splits, UML-DOP achieved an average f-score of 66.9%, while ML-PCFG obtained an average f-score of 64.7%.</S>
    <S sid="131" ssid="29">The difference in accuracy between UMLDOP and ML-PCFG was statistically significant according to paired t-testing (p&#8804;0.05).</S>
    <S sid="132" ssid="30">To the best of our knowledge this means that we have shown for the first time that an unsupervised parsing model (UML-DOP) outperforms a widely used supervised parsing model (a treebank PCFG) on the WSJ40.</S>
    <S sid="133" ssid="31">We should keep in mind that (1) a treebank PCFG is not state-of-the-art: its performance is mediocre compared to e.g.</S>
    <S sid="134" ssid="32">Bod (2003) or McClosky et al. (2006), and (2) that our treebank PCFG is binarized as in Klein and Manning (2005) to make results comparable.</S>
    <S sid="135" ssid="33">To be sure, the unbinarized version of the treebank PCFG obtains 89.0% average f-score on WSJ10 and 72.3% average f-score on WSJ40.</S>
    <S sid="136" ssid="34">Remember that the Penn Treebank annotations are often exceedingly flat, and many branches have arity larger than two.</S>
    <S sid="137" ssid="35">It would be interesting to see how UML-DOP performs if we also accept ternary (and wider) branches -- though the total number of possible trees that can be assigned to strings would then further explode.</S>
    <S sid="138" ssid="36">UML-DOP's performance still remains behind that of supervised (binarized) DOP parsers, such as DOP1, which achieved 81.9% average fscore on the 10 WSJ40 splits, and ML-DOP, which performed slightly better with 82.1% average fscore.</S>
    <S sid="139" ssid="37">And if DOP1 and ML-DOP are not binarized, their average f-scores are respectively 90.1% and 90.5% on WSJ40.</S>
    <S sid="140" ssid="38">However, DOP1 and ML-DOP heavily depend on annotated data whereas UML-DOP only needs unannotated data.</S>
    <S sid="141" ssid="39">It would thus be interesting to see how close UML-DOP can get to ML-DOP's performance if we enlarge the amount of training data.</S>
    <S sid="142" ssid="40">7 Conclusion: Is the end of supervised parsing in sight?</S>
    <S sid="143" ssid="41">Now that we have outperformed a well-known supervised parser by an unsupervised one, we may raise the question as to whether the end of supervised NLP comes in sight.</S>
    <S sid="144" ssid="42">All supervised parsers are reaching an asymptote and further improvement does not seem to come from more hand-annotated data but by adding unsupervised or semi-unsupervised techniques (cf.</S>
    <S sid="145" ssid="43">McClosky et al. 2006).</S>
    <S sid="146" ssid="44">Thus if we modify our question as: does the exclusively supervised approach to parsing come to an end, we believe that the answer is certainly yes.</S>
    <S sid="147" ssid="45">Yet we should neither rule out the possibility that entirely unsupervised methods will in fact surpass semi-supervised methods.</S>
    <S sid="148" ssid="46">The main problem is how to quantitatively compare these different parsers, as any evaluation on handannotated data (like the Penn treebank) will unreasonably favor semi-supervised parsers.</S>
    <S sid="149" ssid="47">There is thus is a quest for designing an annotationindependent evaluation scheme.</S>
    <S sid="150" ssid="48">Since parsers are becoming increasingly important in applications like syntax-based machine translation and structural language models for speech recognition, one way to go would be to compare these different parsing methods by isolating their contribution in improving a concrete NLP system, rather than by testing them against gold standard annotations which are inherently theory-dependent.</S>
    <S sid="151" ssid="49">The initially disappointing results of inducing trees entirely from raw text was not so much due to the difficulty of the bootstrapping problem per se, but to (1) the poverty of the initial models and (2) the difficulty of finding theoryindependent evaluation criteria.</S>
    <S sid="152" ssid="50">The time has come to fully reappraise unsupervised parsing models which should be trained on massive amounts of data, and be evaluated in a concrete application.</S>
    <S sid="153" ssid="51">There is a final question as to how far the DOP approach to unsupervised parsing can be stretched.</S>
    <S sid="154" ssid="52">In principle we can assign all possible syntactic categories, semantic roles, argument structures etc. to a set of given sentences and let the statistics decide which assignments are most useful in parsing new sentences.</S>
    <S sid="155" ssid="53">Whether such a massively maximalist approach is feasible can only be answered by empirical investigation in due time.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="7">
    <S sid="156" ssid="1">Thanks to Willem Zuidema, David Tugwell and especially to three anonymous reviewers whose unanymous suggestions on DOP and EM considerably improved the original paper.</S>
    <S sid="157" ssid="2">A substantial part of this research was carried out in the context of the NWO Exact project &amp;quot;Unsupervised Stochastic Grammar Induction from Unlabeled Data&amp;quot;, project number 612.066.405.</S>
  </SECTION>
</PAPER>
