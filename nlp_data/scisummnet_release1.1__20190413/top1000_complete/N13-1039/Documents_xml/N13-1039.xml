<PAPER>
  <S sid="0">Improved Part-of-Speech Tagging for Online Conversational Text with Word Clusters</S>
  <ABSTRACT>
    <S sid="1" ssid="1">author: Online conversational text, typified by microblogs, and text is a challenge for natural language processing.</S>
    <S sid="2" ssid="2">Unlike the highly edited genres that conventional NLP tools have been developed for, conversational text contains many nonstandard lexical items and syntactic patterns.</S>
    <S sid="3" ssid="3">These are the result of unintentional errors, dialectal variation, conversational ellipsis, topic diversity, and creative use of language and orthography (Eisenstein, 2013).</S>
    <S sid="4" ssid="4">An example is shown in Fig.</S>
    <S sid="5" ssid="5">1.</S>
    <S sid="6" ssid="6">As a result of this widespread variation, standard modeling assumptions that depend on lexical, syntactic, and orthographic regularity are inappropriate.</S>
    <S sid="7" ssid="7">There Abstract We consider the problem of part-of-speech tagging for informal, online conversational text.</S>
    <S sid="8" ssid="8">We systematically evaluate the use of large-scale unsupervised word clustering and new lexical features to improve tagging accuracy.</S>
    <S sid="9" ssid="9">With these features, our system achieves state-of-the-art tagging results on both Twitter and IRC POS tagging tasks; Twitter tagging is improved from 90% to 93% accuracy (more than 3% absolute).</S>
    <S sid="10" ssid="10">Qualitative analysis of these word clusters yields insights about NLP and linguistic phenomena in this genre.</S>
    <S sid="11" ssid="11">Additionally, we contribute the first POS annotation guidelines for such text and release a new dataset of English language tweets annotated using these guidelines.</S>
    <S sid="12" ssid="12">Tagging software, annotation guidelines, and large-scale word clusters are available at:</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="13" ssid="1">asked for your last name so he can add you on Facebook.</S>
    <S sid="14" ssid="2">The tagset is defined in Appendix A.</S>
    <S sid="15" ssid="3">Refer to Fig.</S>
    <S sid="16" ssid="4">2 for word clusters corresponding to some of these words. is preliminary work on social media part-of-speech (POS) tagging (Gimpel et al., 2011), named entity recognition (Ritter et al., 2011; Liu et al., 2011), and parsing (Foster et al., 2011), but accuracy rates are still significantly lower than traditional well-edited genres like newswire.</S>
    <S sid="17" ssid="5">Even web text parsing, which is a comparatively easier genre than social media, lags behind newspaper text (Petrov and McDonald, 2012), as does speech transcript parsing (McClosky et al., 2010).</S>
    <S sid="18" ssid="6">To tackle the challenge of novel words and constructions, we create a new Twitter part-of-speech tagger&#8212;building on previous work by Gimpel et al. (2011)&#8212;that includes new large-scale distributional features.</S>
    <S sid="19" ssid="7">This leads to state-of-the-art results in POS tagging for both Twitter and Internet Relay Chat (IRC) text.</S>
    <S sid="20" ssid="8">We also annotated a new dataset of tweets with POS tags, improved the annotations in the previous dataset from Gimpel et al., and developed annotation guidelines for manual POS tagging of tweets.</S>
    <S sid="21" ssid="9">We release all of these resources to the research community:</S>
  </SECTION>
  <SECTION title="2 MEMM Tagger" number="2">
    <S sid="22" ssid="1">Our tagging model is a first-order maximum entropy Markov model (MEMM), a discriminative sequence model for which training and decoding are extremely efficient (Ratnaparkhi, 1996; McCallum et al., 2000).2 The probability of a tag yt is conditioned on the input sequence x and the tag to its left yt&#8722;1, and is parameterized by a multiclass logistic regression: We use transition features for every pair of labels, and extract base observation features from token t and neighboring tokens, and conjoin them against all K = 25 possible outputs in our coarse tagset (Appendix A).</S>
    <S sid="23" ssid="2">Our feature sets will be discussed below in detail.</S>
    <S sid="24" ssid="3">Decoding.</S>
    <S sid="25" ssid="4">For experiments reported in this paper, we use the O(|x|K2) Viterbi algorithm for prediction; K is the number of tags.</S>
    <S sid="26" ssid="5">This exactly maximizes p(y  |x), but the MEMM also naturally allows a faster O(|x|K) left-to-right greedy decoding: fort = 1... |x|: yt arg maxk p(yt = k  |&#65533;yt&#8722;1, x, t; 3) which we find is 3 times faster and yields similar accuracy as Viterbi (an insignificant accuracy decrease of less than 0.1% absolute on the DAILY547 test set discussed below).</S>
    <S sid="27" ssid="6">Speed is paramount for social media analysis applications&#8212;which often require the processing of millions to billions of messages&#8212;so we make greedy decoding the default in the released software.</S>
    <S sid="28" ssid="7">2Although when compared to CRFs, MEMMs theoretically suffer from the &#8220;label bias&#8221; problem (Lafferty et al., 2001), our system substantially outperforms the CRF-based taggers of previous work; and when comparing to Gimpel et al. system with similar feature sets, we observed little difference in accuracy.</S>
    <S sid="29" ssid="8">This is consistent with conventional wisdom that the quality of lexical features is much more important than the parametric form of the sequence model, at least in our setting: part-ofspeech tagging with a small labeled training set.</S>
    <S sid="30" ssid="9">This greedy tagger runs at 800 tweets/sec.</S>
    <S sid="31" ssid="10">(10,000 tokens/sec.) on a single CPU core, about 40 times faster than Gimpel et al.&#8217;s system.</S>
    <S sid="32" ssid="11">The tokenizer by itself (&#167;4) runs at 3,500 tweets/sec.3 Training and regularization.</S>
    <S sid="33" ssid="12">During training, the MEMM log-likelihood for a tagged tweet (x, y) is the sum over the observed token tags yt, each conditional on the tweet being tagged and the observed previous tag (with a start symbol before the first token in x), We optimize the parameters 3 with OWL-QN, an L1-capable variant of L-BFGS (Andrew and Gao, 2007; Liu and Nocedal, 1989) to minimize the regularized objective where N is the number of tokens in the corpus and the sum ranges over all tagged tweets (x, y) in the training data.</S>
    <S sid="34" ssid="13">We use elastic net regularization (Zou and Hastie, 2005), which is a linear combination of L1 and L2 penalties; here j indexes over all features: Using even a very small L1 penalty eliminates many irrelevant or noisy features.</S>
  </SECTION>
  <SECTION title="3 Unsupervised Word Clusters" number="3">
    <S sid="35" ssid="1">Our POS tagger can make use of any number of possibly overlapping features.</S>
    <S sid="36" ssid="2">While we have only a small amount of hand-labeled data for training, we also have access to billions of tokens of unlabeled conversational text from the web.</S>
    <S sid="37" ssid="3">Previous work has shown that unlabeled text can be used to induce unsupervised word clusters which can improve the performance of many supervised NLP tasks (Koo et al., 2008; Turian et al., 2010; T&#228;ckstr&#246;m et al., 2012, inter alia).</S>
    <S sid="38" ssid="4">We use a similar approach here to improve tagging performance for online conversational text.</S>
    <S sid="39" ssid="5">We also make our induced clusters publicly available in the hope that they will be useful for other NLP tasks in this genre.</S>
    <S sid="40" ssid="6">We obtained hierarchical word clusters via Brown clustering (Brown et al., 1992) on a large set of unlabeled tweets.4 The algorithm partitions words into a base set of 1,000 clusters, and induces a hierarchy among those 1,000 clusters with a series of greedy agglomerative merges that heuristically optimize the likelihood of a hidden Markov model with a one-class-per-lexical-type constraint.</S>
    <S sid="41" ssid="7">Not only does Brown clustering produce effective features for discriminative models, but its variants are better unsupervised POS taggers than some models developed nearly 20 years later; see comparisons in Blunsom and Cohn (2011).</S>
    <S sid="42" ssid="8">The algorithm is attractive for our purposes since it scales to large amounts of data.</S>
    <S sid="43" ssid="9">When training on tweets drawn from a single day, we observed time-specific biases (e.g., numerical dates appearing in the same cluster as the word tonight), so we assembled our unlabeled data from a random sample of 100,000 tweets per day from September 10, 2008 to August 14, 2012, and filtered out non-English tweets (about 60% of the sample) using langid.py (Lui and Baldwin, 2012).5 Each tweet was processed with our tokenizer and lowercased.</S>
    <S sid="44" ssid="10">We normalized all atmentions to (@MENTION) and URLs/email addresses to their domains (e.g. http://bit.ly/ dP8rR8 ==&gt;- (URL-bit.ly)).</S>
    <S sid="45" ssid="11">In an effort to reduce spam, we removed duplicated tweet texts (this also removes retweets) before word clustering.</S>
    <S sid="46" ssid="12">This normalization and cleaning resulted in 56 million unique tweets (847 million tokens).</S>
    <S sid="47" ssid="13">We set the clustering software&#8217;s count threshold to only cluster words appearing 40 or more times, yielding 216,856 word types, which took 42 hours to cluster on a single CPU.</S>
    <S sid="48" ssid="14">Fig.</S>
    <S sid="49" ssid="15">2 shows example clusters.</S>
    <S sid="50" ssid="16">Some of the challenging words in the example tweet (Fig.</S>
    <S sid="51" ssid="17">1) are highlighted.</S>
    <S sid="52" ssid="18">The term lololol (an extension of lol for &#8220;laughing out loud&#8221;) is grouped with a large number of laughter acronyms (A1: &#8220;laughing my (fucking) ass off,&#8221; &#8220;cracking the fuck up&#8221;).</S>
    <S sid="53" ssid="19">Since expressions of laughter are so prevalent on Twitter, the algorithm creates another laughter cluster (A1&#8217;s sibling A2), that tends to have onomatopoeic, non-acronym variants (e.g., haha).</S>
    <S sid="54" ssid="20">The acronym ikr (&#8220;I know, right?&#8221;) is grouped with expressive variations of &#8220;yes&#8221; and &#8220;no&#8221; (A4).</S>
    <S sid="55" ssid="21">Note that A1&#8211;A4 are grouped in a fairly specific subtree; and indeed, in this message ikr and lololol are both tagged as interjections. smh (&#8220;shaking my head,&#8221; indicating disapproval) seems related, though is always tagged in the annotated data as a miscellaneous abbreviation (G); the difference between acronyms that are interjections versus other acronyms may be complicated.</S>
    <S sid="56" ssid="22">Here, smh is in a related but distinct subtree from the above expressions (A5); its usage in this example is slightly different from its more common usage, which it shares with the other words in its cluster: message-ending expressions of commentary or emotional reaction, sometimes as a metacomment on the author&#8217;s message; e.g., Maybe you could get a guy to date you if you actually respected yourself #smh or There is really NO reason why other girls should send my boyfriend a goodmorning text #justsaying.</S>
    <S sid="57" ssid="23">We observe many variants of categories traditionally considered closed-class, including pronouns (B: u = &#8220;you&#8221;) and prepositions (C: fir = &#8220;for&#8221;).</S>
    <S sid="58" ssid="24">There is also evidence of grammatical categories specific to conversational genres of English; clusters E1&#8211;E2 demonstrate variations of single-word contractions for &#8220;going to&#8221; and &#8220;trying to,&#8221; some of which have more complicated semantics.6 Finally, the HMM learns about orthographic variants, even though it treats all words as opaque symbols; cluster F consists almost entirely of variants of &#8220;so,&#8221; their frequencies monotonically decreasing in the number of vowel repetitions&#8212;a phenomenon called &#8220;expressive lengthening&#8221; or &#8220;affective lengthening&#8221; (Brody and Diakopoulos, 2011; Schnoebelen, 2012).</S>
    <S sid="59" ssid="25">This suggests a future direction to jointly model class sequence and orthographic information (Clark, 2003; Smith and Eisner, 2005; Blunsom and Cohn, 2011).</S>
    <S sid="60" ssid="26">We have built an HTML viewer to browse these and numerous other interesting examples.7 We use the term emoticon to mean a face or icon constructed with traditional alphabetic or punctua6One coauthor, a native speaker of the Texan English dialect, notes &#8220;finna&#8221; (short for &#8220;fixing to&#8221;, cluster E1) may be an immediate future auxiliary, indicating an immediate future tense that is present in many languages (though not in standard English).</S>
    <S sid="61" ssid="27">To illustrate: &#8220;She finna go&#8221; approximately means &#8220;She will go,&#8221; but sooner, in the sense of &#8220;She is about to go.&#8221; tion symbols, and emoji to mean symbols rendered in software as small pictures, in line with the text.</S>
    <S sid="62" ssid="28">Since our tokenizer is careful to preserve emoticons and other symbols (see &#167;4), they are clustered just like other words.</S>
    <S sid="63" ssid="29">Similar emoticons are clustered together (G1&#8211;G4), including separate clusters of happy [[ :) =) ^_^ ]], sad/disappointed [[ :/ :( -_- &lt;/3 ]], love [[ &#10065;xoxo &#10065;.&#10065; ]] and winking [[ ;) (^_-) ]] emoticons.</S>
    <S sid="64" ssid="30">The clusters are not perfectly aligned with our POS annotation guidelines; for example, the &#8220;sad&#8221; emoticon cluster included emotion-bearing terms that our guidelines define as non-emoticons, such as #ugh, #tear, and #fml (&#8220;fuck my life&#8221;), though these seem potentially useful for sentiment analysis.</S>
    <S sid="65" ssid="31">One difficult task is classifying different types of symbols in tweets: our annotation guidelines differentiate between emoticons, punctuation, and garbage (apparently non-meaningful symbols or tokenization errors).</S>
    <S sid="66" ssid="32">Several Unicode character ranges are reserved for emoji-style symbols (including the three Unicode hearts in G4); however, depending on the user&#8217;s software, characters in these ranges might be rendered differently or not at all.</S>
    <S sid="67" ssid="33">We have found instances where the clustering algorithm groups proprietary iOS emoji symbols along with normal emoticons; for example, the character U+E056, which is interpreted on iOS as a smiling face, is in the same G2 cluster as smiley face emoticons.</S>
    <S sid="68" ssid="34">The symbol U+E12F, which represents a picture of a bag of money, is grouped with the words cash and money.</S>
    <S sid="69" ssid="35">Since Brown clusters are hierarchical in a binary tree, each word is associated with a tree path represented as a bitstring with length &lt; 16; we use prefixes of the bitstring as features (for all prefix lengths E 12, 4, 6,... ,16}).</S>
    <S sid="70" ssid="36">This allows sharing of statistical strength between similar clusters.</S>
    <S sid="71" ssid="37">Using prefix features of hierarchical clusters in this way was similarly found to be effective for named-entity recognition (Turian et al., 2010) and Twitter POS tagging (Ritter et al., 2011).</S>
    <S sid="72" ssid="38">When checking to see if a word is associated with a cluster, the tagger first normalizes the word using the same techniques as described in &#167;3.1, then creates a priority list of fuzzy match transformations of the word by removing repeated punctuation and repeated characters.</S>
    <S sid="73" ssid="39">If the normalized word is not in a cluster, the tagger considers the fuzzy matches.</S>
    <S sid="74" ssid="40">Although only about 3% of the tokens in the development set (&#167;6) did not appear in a clustering, this method resulted in a relative error decrease of 18% among such word tokens.</S>
    <S sid="75" ssid="41">Besides unsupervised word clusters, there are two other sets of features that contain generalized lexical class information.</S>
    <S sid="76" ssid="42">We use the tag dictionary feature from Gimpel et al., which adds a feature for a word&#8217;s most frequent part-of-speech tag.8 This can be viewed as a feature-based domain adaptation method, since it gives lexical type-level information for standard English words, which the model learns to map between PTB tags to the desired output tags.</S>
    <S sid="77" ssid="43">Second, since the lack of consistent capitalization conventions on Twitter makes it especially difficult to recognize names&#8212;Gimpel et al. and Foster et al.</S>
    <S sid="78" ssid="44">(2011) found relatively low accuracy on proper nouns&#8212;we added a token-level name list feature, which fires on (non-function) words from names from several sources: Freebase lists of celebrities and video games (Google, 2012), the Moby Words list of US Locations,9 and lists of male, female, family, and proper names from Mark Kantrowitz&#8217;s name corpus.10</S>
  </SECTION>
  <SECTION title="4 Tokenization and Emoticon Detection" number="4">
    <S sid="79" ssid="1">Word segmentation on Twitter is challenging due to the lack of orthographic conventions; in particular, punctuation, emoticons, URLs, and other symbols may have no whitespace separation from textual 8Frequencies came from the Wall Street Journal and Brown corpus sections of the Penn Treebank.</S>
    <S sid="80" ssid="2">If a word has multiple PTB tags, each tag is a feature with value for the frequency rank; e.g. for three different tags in the PTB, this feature gives a value of 1 for the most frequent tag, 2/3 for the second, etc.</S>
    <S sid="81" ssid="3">Coarse versions of the PTB tags are used (Petrov et al., 2011).</S>
    <S sid="82" ssid="4">While 88% of words in the dictionary have only one tag, using rank information seemed to give a small but consistent gain over only using the most common tag, or using binary features conjoined with rank as in Gimpel et al. words (e.g. no:-d,yes should parse as four tokens), and internally may contain alphanumeric symbols that could be mistaken for words: a naive split(/[^azA-Z0-9]+/) tokenizer thinks the words &#8220;p&#8221; and &#8220;d&#8221; are among the top 100 most common words on Twitter, due to misanalysis of :p and :d. Traditional Penn Treebank&#8211;style tokenizers are hardly better, often breaking a string of punctuation characters into a single token per character.</S>
    <S sid="83" ssid="5">We rewrote twokenize (O&#8217;Connor et al., 2010), a rule-based tokenizer, emoticon, and URL detector, for use in the tagger.</S>
    <S sid="84" ssid="6">Emoticons are especially challenging, since they are open-class and productive.</S>
    <S sid="85" ssid="7">We revise O&#8217;Connor et al.&#8217;s regular expression grammar that describes possible emoticons, adding a grammar of horizontal emoticons (e.g.</S>
    <S sid="86" ssid="8">-_-), known as &#8220;Eastern-style,&#8221;11 though we observe high usage in English-speaking Twitter (Fig.</S>
    <S sid="87" ssid="9">2, G2&#8211;G3).</S>
    <S sid="88" ssid="10">We also add a number of other improvements to the patterns.</S>
    <S sid="89" ssid="11">Because this system was used as preprocessing for the word clustering experiment in &#167;3, we were able to infer the emoticon clusters in Fig.</S>
    <S sid="90" ssid="12">2.</S>
    <S sid="91" ssid="13">Furthermore, whether a token matches the emoticon pattern is also used as a feature in the tagger (&#167;2).</S>
    <S sid="92" ssid="14">URL recognition is also difficult, since the http:// is often dropped, resulting in protocol-less URLs like about.me.</S>
    <S sid="93" ssid="15">We add recognition patterns for these by using a list of top-level and country domains.</S>
  </SECTION>
  <SECTION title="5 Annotated Dataset" number="5">
    <S sid="94" ssid="1">Gimpel et al. (2011) provided a dataset of POStagged tweets consisting almost entirely of tweets sampled from one particular day (October 27, 2010).</S>
    <S sid="95" ssid="2">We were concerned about overfitting to timespecific phenomena; for example, a substantial fraction of the messages are about a basketball game happening that day.</S>
    <S sid="96" ssid="3">We created a new test set of 547 tweets for evaluation.</S>
    <S sid="97" ssid="4">The test set consists of one random English tweet from every day between January 1, 2011 and June 30, 2012.</S>
    <S sid="98" ssid="5">In order for a tweet to be considered English, it had to contain at least one English word other than a URL, emoticon, or at-mention.</S>
    <S sid="99" ssid="6">We noticed biases in the outputs of langid.py, so we instead selected these messages completely manually (going through a random sample of one day&#8217;s messages until an English message was found).</S>
    <S sid="100" ssid="7">Gimpel et al. provided a tagset for Twitter (shown in Appendix A), which we used unmodified.</S>
    <S sid="101" ssid="8">The original annotation guidelines were not published, but in this work we recorded the rules governing tagging decisions and made further revisions while annotating the new data.12 Some of our guidelines reiterate or modify rules made by Penn Treebank annotators, while others treat specific phenomena found on Twitter (refer to the next section).</S>
    <S sid="102" ssid="9">Our tweets were annotated by two annotators who attempted to match the choices made in Gimpel et al.&#8217;s dataset.</S>
    <S sid="103" ssid="10">The annotators also consulted the POS annotations in the Penn Treebank (Marcus et al., 1993) as an additional reference.</S>
    <S sid="104" ssid="11">Differences were reconciled by a third annotator in discussion with all annotators.13 During this process, an inconsistency was found in Gimpel et al.&#8217;s data, which we corrected (concerning the tagging of this/that, a change to 100 labels, 0.4%).</S>
    <S sid="105" ssid="12">The new version of Gimpel et al.&#8217;s data (called OCT27), as well as the newer messages (called DAILY547), are both included in our data release.</S>
    <S sid="106" ssid="13">Ritter et al. (2011) annotated tweets using an augmented version of the PTB tagset and presumably followed the PTB annotation guidelines.</S>
    <S sid="107" ssid="14">We wrote new guidelines because the PTB conventions are inappropriate for Twitter in several ways, as shown in the design of Gimpel et al.&#8217;s tagset.</S>
    <S sid="108" ssid="15">Importantly, &#8220;compound&#8221; tags (e.g., nominal+verbal and nominal+possessive) are used because tokenization is difficult or seemingly impossible for the nonstandard word forms that are commonplace in conversational text.</S>
    <S sid="109" ssid="16">For example, the PTB tokenization splits contractions containing apostrophes: I&#8217;m ==&gt;.</S>
    <S sid="110" ssid="17">I/PRP &#8217;m/VBP.</S>
    <S sid="111" ssid="18">But conversational text often contains variants that resist a single PTB tag (like im), or even challenge traditional English grammatical categories (like imma or umma, which both mean &#8220;I am going to&#8221;).</S>
    <S sid="112" ssid="19">One strategy would be to analyze these forms into a PTB-style tokenization, as discussed in Forsyth (2007), who proposes to analyze doncha as do/VBP ncha/PRP, but notes it would be difficult.</S>
    <S sid="113" ssid="20">We think this is impossible to handle in the rulebased framework used by English tokenizers, given the huge (and possibly growing) number of large compounds like imma, gonna, w/that, etc.</S>
    <S sid="114" ssid="21">These are not rare: the word clustering algorithm discovers hundreds of such words as statistically coherent classes (e.g. clusters E1 and E2 in Fig.</S>
    <S sid="115" ssid="22">2); and the word imma is the 962nd most common word in our unlabeled corpus, more frequent than cat or near.</S>
    <S sid="116" ssid="23">We do not attempt to do Twitter &#8220;normalization&#8221; into traditional written English (Han and Baldwin, 2011), which we view as a lossy translation task.</S>
    <S sid="117" ssid="24">In fact, many of Twitter&#8217;s unique linguistic phenomena are due not only to its informal nature, but also a set of authors that heavily skews towards younger ages and minorities, with heavy usage of dialects that are different than the standard American English most often seen in NLP datasets (Eisenstein, 2013; Eisenstein et al., 2011).</S>
    <S sid="118" ssid="25">For example, we suspect that imma may implicate tense and aspect markers from African-American Vernacular English.14 Trying to impose PTB-style tokenization on Twitter is linguistically inappropriate: should the lexico-syntactic behavior of casual conversational chatter by young minorities be straightjacketed into the stylistic conventions of the 1980s Wall Street Journal?</S>
    <S sid="119" ssid="26">Instead, we would like to directly analyze the syntax of online conversational text on its own terms.</S>
    <S sid="120" ssid="27">Thus, we choose to leave these word forms untokenized and use compound tags, viewing compositional multiword analysis as challenging future work.15 We believe that our strategy is sufficient for many applications, such as chunking or named entity recognition; many applications such as sentiment analysis (Turney, 2002; Pang and Lee, 2008, &#167;4.2.3), open information extraction (Carlson et al., 2010; Fader et al., 2011), and information retrieval (Allan and Raghavan, 2002) use POS patterns that seem quite compatible with our approach.</S>
    <S sid="121" ssid="28">More complex downstream processing like parsing is an interesting challenge, since contraction parsing on traditional text is probably a benefit to current parsers.</S>
    <S sid="122" ssid="29">We believe that any PTB-trained tool requires substantial retraining and adaptation for Twitter due to the huge genre and stylistic differences (Foster et al., 2011); thus tokenization conventions are a relatively minor concern.</S>
    <S sid="123" ssid="30">Our simple-toannotate conventions make it easier to produce new training data.</S>
  </SECTION>
  <SECTION title="6 Experiments" number="6">
    <S sid="124" ssid="1">We are primarily concerned with performance on our annotated datasets described in &#167;5 (OCT27, DAILY547), though for comparison to previous work we also test on other corpora (RITTERTW in &#167;6.2, NPSCHAT in &#167;6.3).</S>
    <S sid="125" ssid="2">The annotated datasets are listed in Table 1.</S>
    <S sid="126" ssid="3">We use OCT27 to refer to the entire dataset described in Gimpel et al. ; it is split into training, development, and test portions (OCT27TRAIN, OCT27DEV, OCT27TEST).</S>
    <S sid="127" ssid="4">We use DAILY547 as an additional test set.</S>
    <S sid="128" ssid="5">Neither OCT27TEST nor DAILY547 were extensively evaluated against until final ablation testing when writing this paper.</S>
    <S sid="129" ssid="6">The total number of features is 3.7 million, all of which are used under pure L2 regularization; but only 60,000 are selected by elastic net regularization with (A1, A2) = (0.25, 2), which achieves nearly the same (but no better) accuracy as pure L2,16 and we use it for all experiments.</S>
    <S sid="130" ssid="7">We observed that it was 16We conducted a grid search for the regularizer values on part of DAILY547, and many regularizer values give the best or nearly the best results.</S>
    <S sid="131" ssid="8">We suspect a different setup would have yielded similar results. possible to get radically smaller models with only a slight degradation in performance: (4, 0.06) has 0.5% worse accuracy but uses only 1,632 features, a small enough number to browse through manually.</S>
    <S sid="132" ssid="9">First, we evaluate on the new test set, training on all of OCT27.</S>
    <S sid="133" ssid="10">Due to DAILY547&#8217;s statistical representativeness, we believe this gives the best view of the tagger&#8217;s accuracy on English Twitter text.</S>
    <S sid="134" ssid="11">The full tagger attains 93.2% accuracy (final row of Table 2).</S>
    <S sid="135" ssid="12">To facilitate comparisons with previous work, we ran a series of experiments training only on OCT27&#8217;s training and development sets, then report test results on both OCT27TEST and all of DAILY547, shown in Table 2.</S>
    <S sid="136" ssid="13">Our tagger achieves substantially higher accuracy than Gimpel et al. (2011).17 Feature ablation.</S>
    <S sid="137" ssid="14">A number of ablation tests indicate the word clusters are a very strong source of lexical knowledge.</S>
    <S sid="138" ssid="15">When dropping the tag dictionaries and name lists, the word clusters maintain most of the accuracy (row 2).</S>
    <S sid="139" ssid="16">If we drop the clusters and rely only on tag dictionaries and namelists, accuracy decreases significantly (row 3).</S>
    <S sid="140" ssid="17">In fact, we can remove all observation features except for word clusters&#8212;no word features, orthographic fea17These numbers differ slightly from those reported by Gimpel et al., due to the corrections we made to the OCT27 data, noted in Section 5.1.</S>
    <S sid="141" ssid="18">We retrained and evaluated their tagger (version 0.2) on our corrected dataset. tures, affix n-grams, capitalization, emoticon patterns, etc.&#8212;and the accuracy is in fact still better than the previous work (row 4).18 We also wanted to know whether to keep the tag dictionary and name list features, but the splits reported in Fig.</S>
    <S sid="142" ssid="19">2 did not show statistically significant differences; so to better discriminate between ablations, we created a lopsided train/test split of all data with a much larger test portion (26,974 tokens), having greater statistical power (tighter confidence intervals of f 0.3%).19 The full system got 90.8% while the no&#8211;tag dictionary, no-namelists ablation had 90.0%, a statistically significant difference.</S>
    <S sid="143" ssid="20">Therefore we retain these features.</S>
    <S sid="144" ssid="21">Compared to the tagger in Gimpel et al., most of our feature changes are in the new lexical features described in &#167;3.5.20 We do not reuse the other lexical features from the previous work, including a phonetic normalizer (Metaphone), a name list consisting of words that are frequently capitalized, and distributional features trained on a much smaller unlabeled corpus; they are all worse than our new lexical features described here.</S>
    <S sid="145" ssid="22">(We did include, however, a variant of the tag dictionary feature that uses phonetic normalization for lookup; it seemed to yield a small improvement.)</S>
    <S sid="146" ssid="23">18Furthermore, when evaluating the clusters as unsupervised (hard) POS tags, we obtain a many-to-one accuracy of 89.2% on DAILY547.</S>
    <S sid="147" ssid="24">Before computing this, we lowercased the text to match the clusters and removed tokens tagged as URLs and at-mentions.</S>
    <S sid="148" ssid="25">19Reported confidence intervals in this paper are 95% binomial normal approximation intervals for the proportion of correctly tagged tokens: f1.96.,/p(1 &#8722; p)/ntokm &lt; 1/\/n.</S>
    <S sid="149" ssid="26">20Details on the exact feature set are available in a technical report (Owoputi et al., 2012), also available on the website.</S>
    <S sid="150" ssid="27">Non-traditional words.</S>
    <S sid="151" ssid="28">The word clusters are especially helpful with words that do not appear in traditional dictionaries.</S>
    <S sid="152" ssid="29">We constructed a dictionary by lowercasing the union of the ispell &#8216;American&#8217;, &#8216;British&#8217;, and &#8216;English&#8217; dictionaries, plus the standard Unix words file from Webster&#8217;s Second International dictionary, totalling 260,985 word types.</S>
    <S sid="153" ssid="30">After excluding tokens defined by the gold standard as punctuation, URLs, at-mentions, or emoticons,21 22% of DAILY547&#8217;s tokens do not appear in this dictionary.</S>
    <S sid="154" ssid="31">Without clusters, they are very difficult to classify (only 79.2% accuracy), but adding clusters generates a 5.7 point improvement&#8212;much larger than the effect on in-dictionary tokens (Table 3).</S>
    <S sid="155" ssid="32">Varying the amount of unlabeled data.</S>
    <S sid="156" ssid="33">A tagger that only uses word clusters achieves an accuracy of 88.6% on the OCT27 development set.22 We created several clusterings with different numbers of unlabeled tweets, keeping the number of clusters constant at 800.</S>
    <S sid="157" ssid="34">As shown in Fig.</S>
    <S sid="158" ssid="35">3, there was initially a logarithmic relationship between number of tweets and accuracy, but accuracy (and lexical coverage) levels out after 750,000 tweets.</S>
    <S sid="159" ssid="36">We use the largest clustering (56 million tweets and 1,000 clusters) as the default for the released tagger. tagset plus several Twitter-specific tags, referred to in Table 1 as RITTERTW.</S>
    <S sid="160" ssid="37">Linguistic concerns notwithstanding (&#167;5.2), for a controlled comparison, we train and test our system on this data with the same 4-fold cross-validation setup they used, attaining 90.0% (f0.5%) accuracy.</S>
    <S sid="161" ssid="38">Ritter et al.&#8217;s CRFbased tagger had 85.3% accuracy, and their best tagger, trained on a concatenation of PTB, IRC, and Twitter, achieved 88.3% (Table 4).</S>
    <S sid="162" ssid="39">First, we compare to a tagger in the same setup as experiments on this data in Forsyth (2007), training on 90% of the data and testing on 10%; we average results across 10-fold cross-validation.25 The full tagger model achieved 93.4% (f0.3%) accuracy, significantly improving over the best result they report, 90.8% accuracy with a tagger trained on a mix of several POS-annotated corpora.</S>
    <S sid="163" ssid="40">We also perform the ablation experiments on this corpus, with a slightly different experimental setup: we first filter out system messages then split data 24Release 1.0: http://faculty.nps.edu/ cmartell/NPSChat.htm 25Forsyth actually used 30 different 90/10 random splits; we prefer cross-validation because the same test data is never repeated, thus allowing straightforward confidence estimation of accuracy from the number of tokens (via binomial sample variance, footnote 19).</S>
    <S sid="164" ssid="41">In all cases, the models are trained on the same amount of data (90%). into 5,067 training and 2,868 test messages.</S>
    <S sid="165" ssid="42">Results show a similar pattern as the Twitter data (see final column of Table 2).</S>
    <S sid="166" ssid="43">Thus the Twitter word clusters are also useful for language in the medium of text chat rooms; we suspect these clusters will be applicable for deeper syntactic and semantic analysis in other online conversational text mediums, such as text messages and instant messages.</S>
  </SECTION>
  <SECTION title="7 Conclusion" number="7">
    <S sid="167" ssid="1">We have constructed a state-of-the-art part-ofspeech tagger for the online conversational text genres of Twitter and IRC, and have publicly released our new evaluation data, annotation guidelines, open-source tagger, and word clusters at http://www.ark.cs.cmu.edu/TweetNLP.</S>
  </SECTION>
</PAPER>
