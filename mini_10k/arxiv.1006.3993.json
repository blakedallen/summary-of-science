{"id": "http://arxiv.org/abs/1006.3993v1", "guidislink": true, "updated": "2010-06-21T06:38:46Z", "updated_parsed": [2010, 6, 21, 6, 38, 46, 0, 172, 0], "published": "2010-06-21T06:38:46Z", "published_parsed": [2010, 6, 21, 6, 38, 46, 0, 172, 0], "title": "An Algorithm to List All the Fixed-Point Free Involutions on a Finite\n  Set", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1006.5812%2C1006.3245%2C1006.5647%2C1006.0068%2C1006.5360%2C1006.1580%2C1006.4183%2C1006.3705%2C1006.0772%2C1006.1174%2C1006.2001%2C1006.0386%2C1006.5628%2C1006.5927%2C1006.0373%2C1006.3904%2C1006.4018%2C1006.4389%2C1006.5018%2C1006.1307%2C1006.2461%2C1006.4655%2C1006.5248%2C1006.2573%2C1006.3881%2C1006.4978%2C1006.2076%2C1006.4392%2C1006.3789%2C1006.3214%2C1006.4201%2C1006.0594%2C1006.5295%2C1006.3039%2C1006.1179%2C1006.3993%2C1006.4207%2C1006.3212%2C1006.2321%2C1006.5858%2C1006.3307%2C1006.4290%2C1006.1398%2C1006.1954%2C1006.0203%2C1006.2396%2C1006.5835%2C1006.3637%2C1006.5222%2C1006.5744%2C1006.5751%2C1006.1915%2C1006.5292%2C1006.4939%2C1006.2796%2C1006.2725%2C1006.0920%2C1006.3416%2C1006.4984%2C1006.5427%2C1006.1442%2C1006.3012%2C1006.5611%2C1006.0033%2C1006.2346%2C1006.3338%2C1006.2957%2C1006.2918%2C1006.3959%2C1006.5603%2C1006.3557%2C1006.1239%2C1006.4559%2C1006.0140%2C1006.2041%2C1006.1717%2C1006.3215%2C1006.3277%2C1006.1639%2C1006.0548%2C1006.4883%2C1006.1265%2C1006.2167%2C1006.1985%2C1006.2693%2C1006.3764%2C1006.1641%2C1006.1838%2C1006.1358%2C1006.5313%2C1006.1862%2C1006.4011%2C1006.3503%2C1006.4578%2C1006.1653%2C1006.0432%2C1006.4235%2C1006.1208%2C1006.5600%2C1006.2186%2C1006.4538&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "An Algorithm to List All the Fixed-Point Free Involutions on a Finite\n  Set"}, "summary": "An involution on a finite set is a bijection such as I(I(e))=e for all the\nelement of the set. A fixed-point free involution on a finite set is an\ninvolution such as I(e)=e for none element of the set. In this article, the\nfixed-point free involutions are represented as partitions of the set and some\nproperties linked to this representation are exhibited. Then an optimal\nalgorithm to list all the fixed-point free involutions is presented. Its\nsoundness relies on the representation of the fixed-point free involutions as\npartitions. Finally, an implementation of the algorithm is proposed, with an\neffective data representation.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1006.5812%2C1006.3245%2C1006.5647%2C1006.0068%2C1006.5360%2C1006.1580%2C1006.4183%2C1006.3705%2C1006.0772%2C1006.1174%2C1006.2001%2C1006.0386%2C1006.5628%2C1006.5927%2C1006.0373%2C1006.3904%2C1006.4018%2C1006.4389%2C1006.5018%2C1006.1307%2C1006.2461%2C1006.4655%2C1006.5248%2C1006.2573%2C1006.3881%2C1006.4978%2C1006.2076%2C1006.4392%2C1006.3789%2C1006.3214%2C1006.4201%2C1006.0594%2C1006.5295%2C1006.3039%2C1006.1179%2C1006.3993%2C1006.4207%2C1006.3212%2C1006.2321%2C1006.5858%2C1006.3307%2C1006.4290%2C1006.1398%2C1006.1954%2C1006.0203%2C1006.2396%2C1006.5835%2C1006.3637%2C1006.5222%2C1006.5744%2C1006.5751%2C1006.1915%2C1006.5292%2C1006.4939%2C1006.2796%2C1006.2725%2C1006.0920%2C1006.3416%2C1006.4984%2C1006.5427%2C1006.1442%2C1006.3012%2C1006.5611%2C1006.0033%2C1006.2346%2C1006.3338%2C1006.2957%2C1006.2918%2C1006.3959%2C1006.5603%2C1006.3557%2C1006.1239%2C1006.4559%2C1006.0140%2C1006.2041%2C1006.1717%2C1006.3215%2C1006.3277%2C1006.1639%2C1006.0548%2C1006.4883%2C1006.1265%2C1006.2167%2C1006.1985%2C1006.2693%2C1006.3764%2C1006.1641%2C1006.1838%2C1006.1358%2C1006.5313%2C1006.1862%2C1006.4011%2C1006.3503%2C1006.4578%2C1006.1653%2C1006.0432%2C1006.4235%2C1006.1208%2C1006.5600%2C1006.2186%2C1006.4538&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "An involution on a finite set is a bijection such as I(I(e))=e for all the\nelement of the set. A fixed-point free involution on a finite set is an\ninvolution such as I(e)=e for none element of the set. In this article, the\nfixed-point free involutions are represented as partitions of the set and some\nproperties linked to this representation are exhibited. Then an optimal\nalgorithm to list all the fixed-point free involutions is presented. Its\nsoundness relies on the representation of the fixed-point free involutions as\npartitions. Finally, an implementation of the algorithm is proposed, with an\neffective data representation."}, "authors": ["Cyril Prissette"], "author_detail": {"name": "Cyril Prissette"}, "author": "Cyril Prissette", "links": [{"href": "http://arxiv.org/abs/1006.3993v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1006.3993v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1006.3993v1", "affiliation": "LSEET", "arxiv_url": "http://arxiv.org/abs/1006.3993v1", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "arXiv:1006.3993v1 [cs.DS] 21 Jun 2010\n\nAn Algorithm to List All the Fixed-Point Free\nInvolutions on a Finite Set\nCyril Prissette\nLaboratoire de Sondages Electromagntiques\nde l'Environnement Terrestre - UMR 6017\nInstitut des Siences de l'Ingenieur de Toulon et du Var\nAvenue Pompidou. B.P. 56\n83162 La Valette Cedex - France\nEmail : prissette@univ-tln.fr\nSeptember 28, 2018\n\nAbstract\nA fixed-point free involution on a finite set S is defined as a bijection I : S \u2192 S\nsuch as \u2200e \u2208 S, I(I(e)) = e and \u2200e \u2208 S, I(e) 6= e.\nIn this article, the fixed-point free involutions are represented as partitions\nof the set S, and some properties linked to this representation are exhibited.\nThen an optimal algorithm to list all the fixed-point free involutions is presented. Its soundess relies on the representation of the fixed-point free involutions as partitions.\nFinally, an implementation of the algorithm is proposed, with an effective\ndata representation.\n\nKeywords\nAlgorithm, Fixed-point free involutions, Partitions, Recursion\n\n1\n\nIntroduction\n\nA fixed-point free involution involution on a finite set is a function which can\nbe defined as follows :\n\u2200e \u2208 S, I(I(e)) = e\n1\n\n\f\u2200e \u2208 S, I(e) 6= e\nSome recent cryptanalysis methods are based on fixed-point free involutions\non finite sets. Indeed, such functions can be seen as mixing functions with a\nstructural weakness, which make them trivially invertible.\nSuch functions can be used instead of a cryptographically robust functions, in\nordrer to study the behaviour of a cryptographyc algorithm [Poinsot (2006)]. An\nother possible cryptographic attack is to find weak keys, such as the algorithm\nis equivalent to a fixed-point free involution [Prissette (2004)].\nObviously, an algorithm can be use to list all the permutations \u03c0 of the finite\nset S [Dijkstra (1997)]. For each permutation, I as \u2200e \u2208 S, I(e) = \u03c0e , it is easy\nto check the constraint of involution (\u2200e \u2208 S, I(I(e)) = e ) and the absence of\nfixed-point.\nHowever, cryptography use large finite sets and using an algorithm to list all\nthe permutation is a waste of time, because the number of fixed-point free involutions on a set roughly equals the square root of the number of permutations\non the set.\nIn the first part of this article, some properties of the fixed-point free involutions are presented and a quick proof is given for each of them. Then, in a\nsecond part, an algorithm to list all fixed-point free involutions on a finite set is\ndescribed. Finally, an effective data representation is proposed in an example\nof implementation of the algorithm.\n\n2\n2.1\n\nProperties of the Fixed-Point Free Involutions\nFixed-Point Free Involutions and Partitions\n\nLet I be a fixed-point free involution on S and define PI as follows :\nPI = {{e, I(e)}, \u2200e \u2208 S}\nObviously, as I is a fixed-point free involution , e and I(e) = e\u2032 generate the\nsame subset {e, I(e)} = {I(I(e)), e\u2032 )} = {I(e\u2032 ), e\u2032 } = {e\u2032 , I(e\u2032 )}. Every element\nof S is a element of a single element of PI . Thus, the fixed-point free involution\nI defines the set PI as a partition of S, such as the cardinality of every subset\nof PI is 2.\nConversely, given a partition PI of S, such as the cardinality of every element\nof PI is 2, the involution I can be defined as follows :\n\u001a\nI(e) = e\u2032\n\u2200{e, e\u2032 } \u2208 PI ,\nI(e\u2032 ) = e\nAs every element of S is an element of a single element of PI , then I(I(e)) =\nI(e\u2032 ) = e. Moreover, as the cardinality of every element of PI is 2, thus\n\u2200e\u2208S , I(e) 6= e. So I is the fixed-point free involution defined by PI .\nThe fixed-point free involution I can be represented in a single way as the\npartition PI . This property will be use to represent fixed-point free involution\nin a convenient way.\n2\n\n\f2.2\n\nFixed-Point Free Involutions and Union\n\nLet I be a fixed-point free involution on S. Let i and j be such as i \u2208\n/ S and j \u2208\n/S\nand i 6= j. Considering the partition PI of S, associated to I, PI \u2032 = PI \u222a{{i, j}}\nis a partition of S \u222a {i, j} and the cardinality of every subsets is 2. So PI \u2032 can be\nused to represent a fixed-point free involution I \u2032 on S \u222a {i, j}, defined as follows\n:\n\uf8f1\n\uf8f2 \u2200e \u2208 S, I \u2032 (e) = I(e)\nI \u2032 (i) = j\n\uf8f3\nI \u2032 (j) = i\nThe main idea of the algorithm is to build a fixed-point free involution, with\na fixed-point free involution on a smaller set.\n\n2.3\n\nFixed-Point Free Involutions and Bijections\n\nLet I be a fixed-point free involution on S,\nLet B be a bijection from S to S \u2032\nLet's define I \u2032 from S \u2032 to S \u2032 as follows :\nI \u2032 (e\u2032 ) = B \u25e6 I \u25e6 B \u22121 (e\u2032 )\nLet's prove that I \u2032 is a fixed-point free involution. First, Let's prove that I \u2032 is\nan involution.\nI \u2032 (I \u2032 (e\u2032 )) = I \u2032 \u25e6 B \u25e6 I \u25e6 B \u22121 (e\u2032 )\n\u21d4 I \u2032 (I \u2032 (e\u2032 )) = B \u25e6 I \u25e6 B \u22121 \u25e6 B \u25e6 I \u25e6 B \u22121 (e\u2032 )\n\u21d4 I \u2032 (I \u2032 (e\u2032 )) = B \u25e6 I \u25e6 I \u25e6 B \u22121 (e\u2032 )\n\u21d4 I \u2032 (I \u2032 (e\u2032 )) = B \u25e6 B \u22121 (e\u2032 )\n\u21d4 I \u2032 (I \u2032 (e\u2032 )) = e\u2032\nSo I \u2032 is an involution.\nNow, let's prove that I \u2032 is fixed-point free. If I \u2032 (e\u2032 ) = e\u2032 , then\nB \u22121 \u25e6 B \u25e6 I \u25e6 B \u22121 (e\u2032 ) = B \u22121 (e\u2032 )\n\u21d4 I \u25e6 B \u22121 (e\u2032 ) = B \u22121 (e\u2032 )\n\u21d4 I(e) = e with e = B \u22121 (e\u2032 )\nHowever, I is fixed-point free. So the previous equality is false, and I \u2032 is a\nfixed-point free involution.\nThis property is useful to build fixed-point free involution on any set with\nan even cardinality : one can build a fixed-point free involution on a simple\nset with the same cardinality, then use a bijection to map this fixed-point free\ninvolution onto the wanted set.\nWithout loss of generality, S is defined as {1, 2, 3, ..2n} until the end of this\narticle.\n\n3\n\n\f3\n3.1\n\nAlgorithm\nBijections Family\n\nFor the purpose of the algorithm, a family of bijections from S = {1, 2, .., 2k}\nto {2, .., 2k + 2} \\ i is needed, with i in {2, 2, .., 2k + 2}.\nAlthough many families of bijections may be used, the following one is chosen\n:\n\u001a\nx + 2 if x + 1 \u2265 i\nBi (x) =\nx + 1 if x + 1 < i\nEvery element of the family is an easy-to-compute, easy-to-invert, increasing\nfunction. None of these properties is mandatory; however, they are useful for\nsaving time and space.\nObviously, the inverse function of Bi is :\n\u001a\nx \u2212 1 if x + 1 \u2264 i\nBi\u22121 (x) =\nx \u2212 2 if x + 1 > i\n\n3.2\n\nPresentation of the Algorithm\n\nThe goal of the algorithm is to construct the set of the fixed-point free involutions on the finite set S = {1, 2, .., n}, with even cardinality. The main idea is\nto start with the simple fixed-point free involution represented by the partition\n{{}} then, the size of the set is increased using the \"Union Property\" and the\n\"Bijection Property\".\nThis is a recursive process : given a fixed-point free involution on {1, .., k}, a\nbijection is used to get an fixed-point free involution on {2, .., 2k +2}\\i, then the\nunion property is used to add the set {1, i} and get a fixed-point free involution\non ({2, .., 2k + 2} \\ i) \u222a {1, i} = {1, .., k}.\nHere is a description of the algorithm, as a recursive function.\nfunction fpfi(n,S)\n// n : cardinal of the final set\n// S : current set (initial value = \u2205)\nif (|S| = n) then\noutput S\nelse\nfor i=2 to n\nS \u2032 = {{1, i}}\nforall {e, e\u2032 } \u2208 S\nS \u2032 = S \u2032 \u222a {{Bi (e), Bi (e\u2032 )}}\nend forall\n4\n\n\ffpfi(n,S')\nend for\nend if\nend\n\n3.3\n\nExample\n\nHere is a quick description of the building of one of the involutions on the set\n{1, .., 6}, knowing an involution on the set {1, .., 4}, for example the involution\nI such as :\nPI = {{1, 3}, {2, 4}}\nThere are 5 involutions built on I, each of them includes {1, i} with a different\nvalue of i in {2, .., 6}. For each of these involutions, the associated partition is\nbuilt using I and Bi .\nFor example, for i = 5, the elements of the partition are :\n\u2022 the element {1, 5}.\n\u2022 the elements built with B5 and PI :\n\u2013 from {1, 3}, compute {B5 (1), B5 (3)} = {2, 4}\n\u2013 from {2, 4}, compute {B5 (2), B5 (4)} = {3, 6}\nThe resulting involution is associated with the set of these three sets :\n{{1, 5}, {2, 4}, {3, 6}}\nThe following tree shows how some of the fixed-point free involution on\n{1, .., 6} are built.\n{{1, 2}, {3, 5}, {4, 6}}\n\nB2\n{{1, 2}, {3, 4}}\nB2\n\nB2\n\u2205\n\nB4\n\nB3\n{{1, 2}}\n\n{{1, 3}, {2, 5}, {4, 6}}\nB3\n\n{{1, 4}, {2, 5}, {3, 6}}\n\n{{1, 3}, {2, 4}}\nB5\n\nB4\n\nB6\n{{1, 4}, {2, 3}}\n\n{{1, 5}, {2, 4}, {3, 6}}\n\n{{1, 6}, {2, 4}, {3, 5}}\n\n5\n\n\f4\n\nImplementation\n\n4.1\n\nData Representation\n\nAs previously shown, a fixed-point free involution I on the set S can be represented as a partition PI of S such as the cardinality of every element of PI is\n2.\nLet's \u03bc(PI ) be the set of elements of S defined as follows :\n\u03bc(PI ) = {min(i, j), \u2200{i,j}\u2208PI }\nThe algorithm represents the partition PI as an 2n-element array T .\n\uf8f1\nT [2k] \u2208 \u03bc(PI )\n\uf8f2 \u22000\u2264k<n ,\n\u22000\u2264k<n\u22121 , T [2k] > T [2k + 2]\n\uf8f3\n\u22000\u2264k<n\u22121 , T [2k + 1] = I(T [2k])\n\nSimply speaking, the odd-indexed elements of T are, decreasingly sorted,\nthe set of the lowest elements of each set of the partition PI . The even-indexed\nelements of T are the values associated by I to the odd-indexed elements.\n4.1.1\n\nExample\n\nLet I be the fixed-point free involution on {1..6} such as I(x) = 7 \u2212 x. This\nfixed-point free involution is represented by the partition PI :\nPI = {{2, 5}, {3, 4}, {6, 1}}\nWith this partition, \u03bc(PI ) is defined as :\n\u03bc(PI ) = {2, 3, 1}\nThis partition PI (and so the fixed-point free involution I) is represented as the\narray T :\nT = [3, 4, 2, 5, 1, 6]\n\n4.2\n\nUnion operator\n\nThe purpose of the proposed data representation is to speed up the calculation\nof the Union operator. Actually, with this representation, the bijection do not\ndestroy the order of the element, and the new couple (1, I(1)) is simply merged\nat the end of the array.\nIn many practical implementations, it can be effectively done by allocating\nan array as large as the size of the set, and recursively filling the array from left\nto right.\nAn example of such an implementation is given in Appendix A.\n\n6\n\n\f5\n\nConclusion\n\nThe algorithm presented in this article was designed to fit cryptographic needs\nof an effective algorithm to list all the fixed-point free involutions on a finite set.\nHowever, the use of such functions is not restricted to cryptographic researches,\nand the algorithm is generic.\n\nReferences\n[Levitin (2002)] Levitin, A.V. (2002). Introduction to the Design & Analysis of\nAlgorithms. Addison Wesley. ISBN 0201743957.\n[Conner and Floyd (1960)] Conner, P.E. and Floyd, E. E. (1960) Fixed point\nfree involutions and equivariant maps. In Journal: Bull. Amer. Math. Soc.\nVolume 66 Pages 416-441\n[Poinsot (2006)] Poinsot, L. (2006). Boolean Bent Functions in Impossible\nCases: Odd and Plane Dimensions. In IJCSNS International Journal of\nComputer Science and Network Security. Volume 6, No.8A\n[Prissette (2004)] Prissette, C. Weak keys of graph cryptography. In Information and Communication Technologies: From Theory to Applications, 2004.\nProceedings. 2004 International Conference. Pages 419-420\n[Dijkstra (1997)] E. W. Dijkstra A Discipline of Programming. Prentice-Hall,\n1997.\n\n7\n\n\f"}