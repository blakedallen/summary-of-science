{"id": "http://arxiv.org/abs/1110.4206v1", "guidislink": true, "updated": "2011-10-19T08:38:12Z", "updated_parsed": [2011, 10, 19, 8, 38, 12, 2, 292, 0], "published": "2011-10-19T08:38:12Z", "published_parsed": [2011, 10, 19, 8, 38, 12, 2, 292, 0], "title": "Development of 2MASS Catalog Server Kit", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1110.3702%2C1110.2368%2C1110.6435%2C1110.5675%2C1110.2202%2C1110.6740%2C1110.6350%2C1110.6396%2C1110.5049%2C1110.5332%2C1110.0972%2C1110.2564%2C1110.0654%2C1110.1171%2C1110.1651%2C1110.0903%2C1110.2833%2C1110.4539%2C1110.6366%2C1110.2543%2C1110.6352%2C1110.4720%2C1110.4542%2C1110.2053%2C1110.6305%2C1110.5812%2C1110.4379%2C1110.2875%2C1110.4195%2C1110.2396%2C1110.0217%2C1110.4992%2C1110.5144%2C1110.3705%2C1110.1118%2C1110.4351%2C1110.4962%2C1110.3256%2C1110.4312%2C1110.4917%2C1110.4784%2C1110.1522%2C1110.4438%2C1110.6100%2C1110.1283%2C1110.0947%2C1110.3466%2C1110.2392%2C1110.6090%2C1110.3781%2C1110.0621%2C1110.3364%2C1110.5114%2C1110.6744%2C1110.4288%2C1110.1204%2C1110.0215%2C1110.0311%2C1110.3212%2C1110.2422%2C1110.6172%2C1110.2794%2C1110.1806%2C1110.4837%2C1110.0890%2C1110.6434%2C1110.6122%2C1110.4300%2C1110.0051%2C1110.2942%2C1110.0239%2C1110.0404%2C1110.5821%2C1110.6845%2C1110.1090%2C1110.3743%2C1110.3498%2C1110.1681%2C1110.3176%2C1110.2571%2C1110.4083%2C1110.6628%2C1110.3428%2C1110.4206%2C1110.4757%2C1110.3917%2C1110.5786%2C1110.5809%2C1110.4155%2C1110.2434%2C1110.4594%2C1110.1808%2C1110.6415%2C1110.5220%2C1110.2067%2C1110.0509%2C1110.6712%2C1110.5139%2C1110.4523%2C1110.2300%2C1110.5036&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Development of 2MASS Catalog Server Kit"}, "summary": "We develop a software kit called \"2MASS Catalog Server Kit\" to easily\nconstruct a high-performance database server for the 2MASS Point Source Catalog\n(includes 470,992,970 objects) and several all-sky catalogs. Users can perform\nfast radial search and rectangular search using provided stored functions in\nSQL similar to SDSS SkyServer. Our software kit utilizes open-source RDBMS, and\ntherefore any astronomers and developers can install our kit on their personal\ncomputers for research, observation, etc. Out kit is tuned for optimal\ncoordinate search performance. We implement an effective radial search using an\northogonal coordinate system, which does not need any techniques that depend on\nHTM or HEALpix. Applying the xyz coordinate system to the database index, we\ncan easily implement a system of fast radial search for relatively small (less\nthan several million rows) catalogs. To enable high-speed search of huge\ncatalogs on RDBMS, we apply three additional techniques: table partitioning,\ncomposite expression index, and optimization in stored functions. As a result,\nwe obtain satisfactory performance of radial search for the 2MASS catalog. Our\nsystem can also perform fast rectangular search. It is implemented using\ntechniques similar to those applied for radial search. Our way of\nimplementation enables a compact system and will give important hints for a\nlow-cost development of other huge catalog databases.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1110.3702%2C1110.2368%2C1110.6435%2C1110.5675%2C1110.2202%2C1110.6740%2C1110.6350%2C1110.6396%2C1110.5049%2C1110.5332%2C1110.0972%2C1110.2564%2C1110.0654%2C1110.1171%2C1110.1651%2C1110.0903%2C1110.2833%2C1110.4539%2C1110.6366%2C1110.2543%2C1110.6352%2C1110.4720%2C1110.4542%2C1110.2053%2C1110.6305%2C1110.5812%2C1110.4379%2C1110.2875%2C1110.4195%2C1110.2396%2C1110.0217%2C1110.4992%2C1110.5144%2C1110.3705%2C1110.1118%2C1110.4351%2C1110.4962%2C1110.3256%2C1110.4312%2C1110.4917%2C1110.4784%2C1110.1522%2C1110.4438%2C1110.6100%2C1110.1283%2C1110.0947%2C1110.3466%2C1110.2392%2C1110.6090%2C1110.3781%2C1110.0621%2C1110.3364%2C1110.5114%2C1110.6744%2C1110.4288%2C1110.1204%2C1110.0215%2C1110.0311%2C1110.3212%2C1110.2422%2C1110.6172%2C1110.2794%2C1110.1806%2C1110.4837%2C1110.0890%2C1110.6434%2C1110.6122%2C1110.4300%2C1110.0051%2C1110.2942%2C1110.0239%2C1110.0404%2C1110.5821%2C1110.6845%2C1110.1090%2C1110.3743%2C1110.3498%2C1110.1681%2C1110.3176%2C1110.2571%2C1110.4083%2C1110.6628%2C1110.3428%2C1110.4206%2C1110.4757%2C1110.3917%2C1110.5786%2C1110.5809%2C1110.4155%2C1110.2434%2C1110.4594%2C1110.1808%2C1110.6415%2C1110.5220%2C1110.2067%2C1110.0509%2C1110.6712%2C1110.5139%2C1110.4523%2C1110.2300%2C1110.5036&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We develop a software kit called \"2MASS Catalog Server Kit\" to easily\nconstruct a high-performance database server for the 2MASS Point Source Catalog\n(includes 470,992,970 objects) and several all-sky catalogs. Users can perform\nfast radial search and rectangular search using provided stored functions in\nSQL similar to SDSS SkyServer. Our software kit utilizes open-source RDBMS, and\ntherefore any astronomers and developers can install our kit on their personal\ncomputers for research, observation, etc. Out kit is tuned for optimal\ncoordinate search performance. We implement an effective radial search using an\northogonal coordinate system, which does not need any techniques that depend on\nHTM or HEALpix. Applying the xyz coordinate system to the database index, we\ncan easily implement a system of fast radial search for relatively small (less\nthan several million rows) catalogs. To enable high-speed search of huge\ncatalogs on RDBMS, we apply three additional techniques: table partitioning,\ncomposite expression index, and optimization in stored functions. As a result,\nwe obtain satisfactory performance of radial search for the 2MASS catalog. Our\nsystem can also perform fast rectangular search. It is implemented using\ntechniques similar to those applied for radial search. Our way of\nimplementation enables a compact system and will give important hints for a\nlow-cost development of other huge catalog databases."}, "authors": ["Chisato Yamauchi"], "author_detail": {"name": "Chisato Yamauchi"}, "author": "Chisato Yamauchi", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1086/663234", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1110.4206v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1110.4206v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "2011 PASP accepted", "arxiv_primary_category": {"term": "astro-ph.IM", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "astro-ph.IM", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1110.4206v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1110.4206v1", "journal_reference": null, "doi": "10.1086/663234", "fulltext": "Development of 2MASS Catalog Server Kit\n\narXiv:1110.4206v1 [astro-ph.IM] 19 Oct 2011\n\nChisato Yamauchi\nAstronomy Data Center, National Astronomical Observatory of Japan, 2-21-1 Osawa, Mitaka, Tokyo,\n181-8588, Japan\nchisato.yamauchi@nao.ac.jp\n\nABSTRACT\nWe develop a software kit called \"2MASS Catalog Server Kit\" to easily construct a highperformance database server for the 2MASS Point Source Catalog (includes 470,992,970 objects)\nand several all-sky catalogs. Users can perform fast radial search and rectangular search using\nprovided stored functions in SQL similar to SDSS SkyServer. Our software kit utilizes opensource RDBMS, and therefore any astronomers and developers can install our kit on their personal\ncomputers for research, observation, etc.\nOut kit is tuned for optimal coordinate search performance. We implement an effective radial\nsearch using an orthogonal coordinate system, which does not need any techniques that depend\non HTM or HEALpix. Applying the xyz coordinate system to the database index, we can easily\nimplement a system of fast radial search for relatively small (less than several million rows)\ncatalogs. To enable high-speed search of huge catalogs on RDBMS, we apply three additional\ntechniques: table partitioning, composite expression index, and optimization in stored functions.\nAs a result, we obtain satisfactory performance of radial search for the 2MASS catalog. Our\nsystem can also perform fast rectangular search. It is implemented using techniques similar to\nthose applied for radial search.\nOur way of implementation enables a compact system and will give important hints for a\nlow-cost development of other huge catalog databases.\nSubject headings: Data Analysis and Techniques\n\n1.\n\nwidely used in astronomical communities. Such\nsoftware is important for observatories with unstable or narrowband networks or for personal studies that require huge catalog entries. Although\nSkyServer (Thakar et al. 2004) of Sloan Digital\nSky Survey (SDSS; York et al. 2000) shows powerful flexibility of the programming interfaces based\non Structured Query Language (SQL) for catalog\nsearch, it is not easy for end users to have such a\nhigh-performance search server in offline environments.\nTherefore, we develop a software kit that enables any users to construct a database system\nbased on a relational data base management system (RDBMS) in their personal computers and to\nquickly search a huge catalog with functions similar to SDSS SkyServer. The first target of our kit\n\nIntroduction\n\nUsing huge object catalogs is more common in\nastronomical studies and observations. To support\nsearching such catalogs, a variety of Web-based\ndatabase services have been developed. For example, NASA/IPAC Infrared Science Archive (IRSA;\nBerriman et al. 2000), VizieR (Ochsenbein et al.\n2000) and Virtual Observatory (VO; Szalay 2001)\nportal sites are widely used in astronomical communities. Some project teams distribute software\nto be installed in personal computers to use such\nservices via a network. Astronomers and developers can use various catalogs with Web browsers\nand such client-side software.\nOn the other hand, there is software to search\ncatalogs in offline environments. For example,\n\"scat\" in the WCSTools package (Mink 2006) is\n1\n\n\fis the Two Micron All Sky Survey (Skrutskie et al.\n2006) Point Source Catalog (2MASS PSC), which\nis huge but frequently used in astronomy. We\nimplement powerful functions into the kit using\nour various techniques. One of the features of our\ntechniques is applying an xyz coordinate system\nfor fast radial search of a huge catalog. This implementation might be rare and interesting for developers, and we mainly report it in this article.\nOur software kit is built on publicly available\nsoftware. In contrast, commercial RDBMS products have been used to develop previous Webbased database services of huge catalogs such as\nSDSS SkyServer (Thakar et al. 2004), WFCAM\nScience Archive (Hambly et al. 2007), etc. This\narticle will also demonstrate the true power of an\nopen-source RDBMS.\nThis article is organized as follows: First, our\nsoftware kit is introduced in \u00a72. We show our\noverview of software design in \u00a73. In \u00a74, we explain details of our techniques and reasonable implementation for high-speed radial search of our\nsoftware kit. We additionally report techniques\nfor rectangular search in \u00a75. Summary is given in\n\u00a76.\nNote that primitive data types of RDBMS are\ndisplayed in the following way throughout this article: INT2 is a signed two-byte integer, INT4 is a\nsigned four-byte integer, and FLOAT8 is a doubleprecision floating-point number.\n2.\n\nFig. 1.- Web page of the 2MASS Catalog Server\nKit. Users can easily install, use, and tune their\nown catalog database. This page includes enough\ncontents for RDBMS beginners.\nThe instructions include a procedure for setting\nup RDBMS and configuration of the operating\nsystem; therefore, any users can easily construct\ntheir own catalog database servers. Users can\nsearch catalogs not only with flexible SQL but also\nwith several useful stored functions prepared by\nour kit. Using the functions in users' SQL statements, users can perform fast radial and rectangular search with very small SQL statements with\ncoordinate conversions (e.g., J2000 to Galactic).\nOf course, users do not have to know algorithm\nand indexing about typical searches. We show\nan example SQL statement of a radial search of\nGalactic coordinate (0,0) with 0.2\u2032 radius:\n\n2MASS Catalog Server Kit\n\nThe 2MASS Catalog Server Kit1) (2MASS\nKit) is a software package to construct a highperformance search server of 2MASS PSC and\nseveral all-sky catalogs on Linux, MacOSX, Solaris, and other UNIX systems. To install this\nkit, it is enough to prepare a standard personal\ncomputer with a hard drive of 600 Gbyte or more.\nThe kit contains a complete data set of tables\nfor 2MASS PSC, SQL statements and sources of C\nlanguage with a Makefile. The HTML document\n(Fig. 1) shows step-by-step instructions for installation, a tutorial for database beginners, reference\nof stored functions, and several hints for tuning.\n\nSELECT fJ2L(o.ra,o.dec) as l,\nfJ2B(o.ra,o.dec) as b,\no.j_m,o.h_m,o.k_m, n.distance\nFROM fTwomassGetNearbyObjEq(\nfG2Ra(0,0),fG2Dec(0,0),0.2) n,\ntwomass o\nWHERE n.objid = o.objid;\n\n1)\n\nhttp://www.ir.isas.jaxa.jp/\u223c cyamauch/2masskit/. Software package and data set are available in this page. We\nare planning to support USNO-B1.0, PPMXL, GSC-2.3,\netc.\n\nwhere fJ2L() and fJ2B() convert J2000 to Galactic, fG2Ra() and fG2Dec() convert Galactic\n\n2\n\n\fto J2000, and fTwomassGetNearbyObjEq() is a\nstored function that performs fast radial search of\n2MASS PSC with an optimized algorithm.\nThe kit is also characterized by its flexible tuning. Each table and index for 2MASS PSC is registered in one of seven table spaces (each resides\nin a separate directory), thus allowing only the\nessential parts to be easily moved onto fast devices. Given the terrific evolution that has taken\nplace with recent solid-state drives (SSDs) in performance, a very cost-effective way of constructing\nhigh-performance servers is moving part, or all, of\nthe table indices to a fast SSD.\nBefore installing the 2MASS Kit, users can\nconfirm the performance of our kit using the\nSQL Search Tool2) of the AKARI Catalogue\nArchive Server (AKARI-CAS; Yamauchi et al.\n2011).\nAKARI-CAS is developed to search\nAKARI All-Sky Catalogues based on imaging\ndata obtained by the Far-Infrared Surveyor (FIS;\nKawada et al. 2007) and the Infrared Camera\n(IRC; Onaka et al. 2007) built on AKARI satellite, and it also supports fast search for 2MASS\nPSC. To perform this search, AKARI-CAS has\nthe source codes of 2MASS Kit. Of course, our\nkit utilizes open-source RDBMS, PostgreSQL-8.4,\nand therefore requires no software licensing fees.\n\nabout RDBMS products.\nFast positional search is indispensable for astronomy, even if the database has huge catalogs.\nFortunately, PostgreSQL has some special features\nto handle huge tables. For example, PostgreSQL\nsupports table inheritance that is useful for table partitioning and has a \"constraint-exclusion\"\nfeature to allow us a seamless access to the partitioned tables. To obtain the best performance of\npositional search, i.e., radial search and rectangular search, we apply such features and write our\ncodes in stored functions for more optimization.\nWe mainly tune the performance of radial\nsearch, since it is most important for astronomical\ncatalog databases. Our severe test for it is done\nby cross-identification as multiple radial searches.\nIt is the main theme of this article.\nOne of the advantages of PostgreSQL is having\nmany built-in functions usable in SQL statements.\nTogether with them, coordinate conversions shown\nin \u00a72 such as J2000-to-Galactic conversion are supported by newly created stored functions that contain some codes of wcstools-3.8.3) Our kit provides further functions that are also available in\nAKARI-CAS. See Yamauchi et al. (2011) for general technical know-how for creating stored functions in PostgreSQL.\n\n3.\n\n4.\n\nOverview of Software Design\n\nChoosing an appropriate RDBMS product is\nimportant for our software design, since functions\nto support various users' requirements depend on\nRDBMS products.\nUsers will search the 2MASS PSC using various criteria. Therefore, the RDBMS product\nshould meet recent SQL standards and must have\nenough search performance. In addition, some\nusers might not have knowledge about indices of\ntables. To support such users, the kit has to\nprovide some functions to minimize SQL statements for typical searches in astronomy. Therefore, the RDBMS product should have high coding flexibility of stored functions. We investigated\nsome open-source RDBMS products when developing AKARI-CAS. We found that PostgreSQL\nperfectly satisfies the preceding requirements. See\nalso Yamauchi et al. (2011) for an investigation\n2)\n\n4.1.\n\nTechnical Design of Radial Search\nBasic Algorithm\n\nThe radial search is the most typical query\nin the catalog database services. However, this\nsearch using RDBMS cannot be optimized in a\nstraightforward way, because an index of RDBMS\nis useful for the case:\nSmin \u2264 f (cAn , cBn , ..., cXn ) \u2264 Smax ,\n\n(1)\n\nwhere Smin and Smax are the search criteria and\ncAn ,cBn ,... are data of columns A, B, etc.; however,\nan index cannot be created for following case:\nSmin \u2264 f (cAn , cBn , S1 , S2 ) \u2264 Smax ,\n\n(2)\n\nwhere S1 and S2 are also the search criteria. The\nradial search corresponds to the case (2), i.e., f ()\nis a function that takes a pair of positions and\n3)\n\nhttp://darts.jaxa.jp/ir/akari/cas/tools/search/sql.html.\n\n3\n\nhttp://tdc-www.harvard.edu/wcstools/.\n\n\freturns an angular distance, and Smax is the search\nradius.\nTo enable fast radial search applying the\ndatabase index, some special methods based on\nspatial splitting have been devised, such as Hierarchical Triangular Mesh4) (HTM; Kunszt et al.\n2000) or HEALPix5) (G\u00f3rski et al. 2005). Their\nmethods divide the sky into many areas, assign\neach area the unique ID, and give each object a\ncorresponding ID from which the one-dimensional\nindex is created.\nWe do not use such techniques, but use the\nmore simple and cost-effective way. Figure 2 shows\nthe concept of our radial search. The most important point of this concept is the use of the xyz\ncoordinate for the database index.\nIn our databases, the object tables have columns\nof unit vectors (cx, cy, cz) presenting J2000 source\npositions. We create a composite index on (cx, cy,\ncz) and write stored functions to execute the following procedure:\n\nregion for radial search\n(radius = r)\ncz\n2r\n2r\n\ncube for index\u2212scan\nof (cx,cy,cz)\ncy\ncx\n\nFig. 2.- Concept of our radial search with search\nradius = r. Catch objects within a cube 2r each\nside using index scan on (cx,cy,cz), then select\nobjects within the strict search area (striped pattern) from them.\n\n1. Catch objects within a cube of the size\n2r\u00d72r\u00d72r using index scan on (cx, cy, cz).\n\nTo enable fast radial search, we construct our\ntable and index with the following procedure:\n\n2. Select objects within the strict search circle\non the celestial sphere from the result of step\n1.\n\n1. Register all rows of all columns of AKARI/IRC\nPSC into a table AkariIrc. The table includes a primary key objID of INT4 type,\nJ2000 source position (ra, dec) of FLOAT8\ntype and unit vector (cx, cy, cz) of FLOAT8\ntype converted from (ra, dec).\n\nThe feature of our algorithm is that it requires\nalmost no calculation before executing the index\nscan, and the efficiency is quite high for a small\nsearch radius. In addition, we do not have to\nimplement special processing for polar singularity. Tanaka (1993) pointed out the advantage of\napplying orthogonal coordinate system to avoid\npolar singularity.\n4.2.\n\n2. Create a composite index on (cx, cy, cz) by\nthe following SQL statement:6)\nCREATE INDEX akariirc_xyz\nON AkariIrc(cx,cy,cz);\n\nImplementation for Small Catalogs\nTo perform a radial search, we create SQL\nstored functions. For example, the source code\nof a stored function to obtain an objID of the\nobject whose distance from search position is the\nsmallest in the search region is given next:7)\n\nIn this section, we present our implementation and test results of radial search of the\nAKARI/IRC Point Source Catalogue (AKARI/IRC\nPSC; Ishihara et al. 2010), including 870,973 objects. It is relatively small compared with the\nSDSS or 2MASS catalog; therefore, we implement\nthe system only with the basic method described\nin \u00a74.1.\n\nCREATE FUNCTION\nfAkariIrcGetNearestObjIDEq(FLOAT8,FLOAT8,FLOAT8)\n6)\n\n4)\n5)\n\n2r\n\nIn the case of PostgreSQL, we have to do VACUUM\nANALYZE; after creating indices.\n7) See Appendix A for each stored function written in this\ndefinition.\n\nhttp://skyserver.org/HTM/.\nhttp://healpix.jpl.nasa.gov/.\n\n4\n\n\fwith all AKARI/IRC PSC objects within 0.25\u2032\nradius in Table 1. Here is the SQL statement for\nthis test:\n\nTable 1: Results of match-up of AKARI/FIS\nBSC with AKARI/IRC PSC. The hardware is a\nCore2Quad Q9650 (3.0GHz) CPU on GIGABYTE\nGA-EX38-DS4 with 8 Gbyte DDR2-800 memory\nand an Adaptec RAID 2405 with 1 Tbyte SATA2\nHDD\u00d72 (RAID1).\nCondition\nJust after OS rebooting\nSecond trial\n\nSELECT count(fAkariIrcGetNearestObjIDEq(ra,dec,0.25))\nFROM AkariFis;\n\nThis returns 19,267 matches.\nAKARI catalogs are small enough compared\nwith memory capacities of present computers.\nTherefore, users generally have to wait only 30\ns or so, even for cross-identification. We can implement radial search of the catalogs including\nless than several million objects with our simple\nmethod by applying the xyz coordinate. See also\nYamauchi et al. (2011) for more applications for\nAKARI catalogs using our techniques.\n\nElapsed time\n42.0 s\n19.8 s\n\nRETURNS INT4 AS\n'SELECT o.objID\nFROM (\nSELECT objID,\nfDistanceArcMinXYZ(fEq2X($1,$2),fEq2Y($1,$2),\n\n4.3.\n\nImplementation for 2MASS PSC\n\nfEq2Z($1,$2),cx,cy,cz) as distance\nFROM AkariIrc\nWHERE\n\n4.3.1.\n\n(cx BETWEEN fEq2X($1,$2) - fArcMin2Rad($3) AND\nfEq2X($1,$2) + fArcMin2Rad($3)) AND\n\nIn \u00a74.2, we store all the contents of a catalog\ninto a table, create a composite index on (cx, cy,\ncz), and write a simple SQL stored function to\nperform a radial search. However, there is a limit\nof row numbers for this simple implementation described in \u00a74.2. This limit is caused by two factors: (1) enlargement of processing and (2) the\nbottleneck of disk I/O access. First, we show the\nbehavior of factor 1 here.\nWe test the performance of cross-identification\nas multiple radial searches. We use a subset of\nAKARI/IRC PSC and a subset of 2MASS PSC for\nthe cross-identification. The table of the subset of\n2MASS PSC includes all columns and additional\nprimary key objid of INT4 and unit vector (cx,\ncy, cz) of FLOAT8 calculated at the data registration, and a composite index on the unit vector\nis created. To examine the performance dependency on the number of data entries, we prepare\nfive cases; 5099652, 10226706, 20294711, 40688903\nand 82092729, selected by declination range from\nthe south pole. Then we test the performance of\ncross-identification for each case. The following\nSQL statement is an example of the test:\n\n(cy BETWEEN fEq2Y($1,$2) - fArcMin2Rad($3) AND\nfEq2Y($1,$2) + fArcMin2Rad($3)) AND\n(cz BETWEEN fEq2Z($1,$2) - fArcMin2Rad($3) AND\nfEq2Z($1,$2) + fArcMin2Rad($3))\n) o\nWHERE o.distance <= $3\nORDER BY o.distance\nLIMIT 1'\nIMMUTABLE LANGUAGE 'sql';\n\nwhere $1, $2, and $3 are the arguments of this\nstored function; ($1, $2) is the center position in\nJ2000 of the search region; and $3 is the search\nradius.\nIf we cutout from SELECT o.objID to WHERE\no.distance <= $3 in the preceding source and\nexecute it by giving actual values for $1, $2, and\n$3, it performs a radial search.\nTo evaluate the performance of our radial\nsearch, we try a cross-identification as multiple radial searches using fAkariIrcGetNearestObjIDEq().\nWe show our test results of matching up all objects of AKARI FIS Bright Source Catalogue8)\n(AKARI/FIS BSC; including 427,071 objects)\n\nData Size Limit of Simple Radial Search\nImplementation\n\nSELECT count(\nfTwomassGetNearestObjIDEq(o.ra, o.dec, 0.25))\n\n8)\n\nAKARI/FIS All-Sky Survey Bright Source CataFROM (SELECT * FROM AkariIrc\nlogue Version 1.0 Release Note (Yamamura et al. 2010),\nhttp://www.ir.isas.jaxa.jp/AKARI/Observation/PSC/Public/RN/AKARI-FIS BSC V1 RN.pdf.\n\n5\n\n\f3500\n\n4.3.2.\n\nAs shown in \u00a74.3.1, we cannot achieve sufficient\nperformance under severe search requirements of\nhuge catalogs using simple implementation. Moreover, we can easily expect that the bottleneck of\ndisk I/O becomes a serious problem for actual use.\nTo break such limits, we consider to optimize the\ndesign of table relations, indices and stored functions. Our strategy for implementation of huge\ncatalogs is as follows;\n\n3000\n\nCount of radial search (count/sec)\n\nStrategy to Break the Data Size Limit\n\n2500\n2000\n1500\n1000\n\n1. Reduce the height of the nonunique index.\n500\n0\n\n2. Reduce the file size of the data set for performing a radial search.\n0\n\n2e+07\n\n4e+07\n6e+07\nNumber of rows\n\n8e+07\n\n3. Note that unique indices (e.g., primary key)\ngive enough performance for a huge table.\n\nFig.\n3.- Performance test of simple radial\nsearch implementation applied for a huge catalog.\nWe test cross-identification between a subset of\nAKARI/IRC PSC and subset of 2MASS PSC for\ndifferent row sizes of the 2MASS PSC table; count\nof radial search per second is plotted against the\nnumber of rows in the 2MASS PSC table. Hardware is a 2\u00d7 Opteron2384 CPU on a Supermicro\ndual-processor board with 32 Gbyte memory.\n\n4. Minimize CPU time for additional processing.\n5. Carry out experimental tuning.\n4.3.3.\n\nDesign of Rable Relation\n\nConsidering the strategy in \u00a74.3.2, we determine the design of table relation as follows:\n1. We apply the table partitioning technique.\n2. We prepare a special table set consisting of\nonly necessary columns for each search purpose.\n\nWHERE dec < -74.600006) o;\n\nA criterion of 'dec < -74.60006' is to choose\nAKARI/IRC objects within the region corresponding to the 2MASS PSC subset.\nFigure 3 shows the result of our tests. In the\ncase of the smallest data size about 5.1 million\nobjects, searches of more than 3000 counts/s are\nperformed. However, processing speed is rapidly\ndropped with increasing number of rows. Each\nmeasurement in Figure 3 was obtained from the\nmedian of the last three successive runs; i.e., all\nmeasurements were taken under the condition of\nenough cached data in the main memory. Therefore, this result means that it is impossible to obtain acceptable performance for severe search requirements with huge catalogs using this simple\nimplementation, even if there is no bottleneck of\ndisk I/O access.\n\n3. We store the object positions into integer (INT4) columns in this special table\nset. These integer values are converted and\nscaled from the original floating-point values\nof right ascension and declination.\nFigure 4 shows our design of table relation.\nThe main table \"twomass\" has 470,992,970 entries (without partitioning9) ) and is basically supposed to be searched with the primary key. On the\nother hand, table partitioning is applied to the table sets \"twomass xyzi\" and \"twomass j2000i\"\nto reduce the height of the nonunique index in\neach table. These two table sets are optimized\nfor radial search and rectangular search (see \u00a75),\nrespectively.\n9)\n\nIn our tests, partitioning of main table decreases the performance of join on the primary key.\n\n6\n\n\fchild tables\n\ntwomass_xyzi\n\nobjid (INT4)\n\nobjid (INT4)\n\nra\n\ncxi ( INT4)\n\ndec\n\ncyi ( INT4)\n\nerr_maj\n\nczi ( INT4)\n\nto preselect objects within a cube. Therefore, we\ncan reduce the size of the index on (cxi, cyi, czi)\nusing the composite expression index so that the\nindex is created in INT2 type.\nWe show an actual SQL statement to create one\nof the indices;\n\n}\n\ntwomass\n\nerr_min\n\nmain table\n\nCREATE INDEX twomass_xyzi_aaa0_i16xyz\n\ntables for radial search\n\nON Twomass_xyzi_aaa0\n\nchild tables\n\ntwomass_j2000i\n\n}\n\nerr_ang\n:\n:\n\n(fGetI16UVecI4(cxi,32400),\nfGetI16UVecI4(cyi,32400),\n\nobjid (INT4)\n\nfGetI16UVecI4(czi,32400));\n\nrai ( INT4)\ndeci ( INT4)\n\nwhere Twomass xyzi aaa0 is the name of a child\ntable and fGetI16UVecI4(arg,32400) scales and\nrounds the unit vector of INT4 into that of INT2\nhaving a range from \u221232400 to 32400. This gives\nabout 9\u2032\u2032 of spatial resolution in the worst case;\nhowever, it does not cause any problems for typical\nsearches.\nThe data size of all indices on table sets\ntwomass xyzi is about 10 Gbyte, which is small\nenough to be stored in a RAM disk and enables\nfaster file access.\n\ntables for rectangular search\n\nFig. 4.- Design of table relation to enable fast\npositional search of 2MASS PSC. Columns (cxi,\ncyi, czi) and (rai, deci) are the unit vectors, right ascension and declination, respectively.\nTheir integer values are converted and scaled from\nfloating-point values in columns (ra, dec) in the\ntwomass table.\n\n4.3.5.\n\nTable partitioning is supported via table inheritance in PostgreSQL. A parent table has column definition and empty rows, and child tables\nhave the same columns as those of the parent and\na number of rows. We determine the contents\nof child tables with the range partitioning using\nvalues of declination. This partitioning is implemented so that child tables have almost the same\nnumber of rows. The optimal number of partitions\nis discussed in \u00a74.3.6.\nThe values of (cxi, cyi, czi) are converted\nfrom the original right ascension and declination\nand scaled between \u22122\u00d7109 and 2\u00d7109 (integer)\nso that the spatial resolution is fine enough for\nastronomical object catalogs. When performing a\nradial search, this integer version of the unit vector\nis restored into floating-point values to calculate\nangular distance.\nThe data size of the table set is about 20 Gbyte,\nwhich reduces disk read traffic and disk seek time.\n4.3.4.\n\nStored Function\n\nPostgreSQL has a constraint-exclusion (CE)\nfeature to allow us a seamless access to the partitioned tables. If CHECK constraints are included\nin the definitions of child tables, the server parses\nan SQL statement referring a parent and accesses\nonly necessary child table(s). We find that CE\ncan improve the performance of a general onetime search.10) However, it is still not enough\nfor repeating a radial search many times within\na small period of time. It is desired that crossidentification can be also performed only with an\nSQL statement that runs multiple radial searches.\nTo improve the performance further, we create a stored function to access necessary child\ntables and perform a radial search. Although it\nis best to write the code in C from a performance\npoint of view, an SQL execution in a C stored\nfunction is not supported in PostgreSQL. Alternatively, PostgreSQL offers dynamic SQL execution\nin PL/pgSQL11) ; therefore, we create stored functions in both PL/pgSQL and C. We show a code\n\nIndex\n\nWe can notice that spatial resolution of the\ncomposite index on (cxi, cyi, czi) does not have\nto be that of INT4, since the index is only used\n\n10)\n\nWe apply CE for rectangular search. See \u00a75.\nPL/pgSQL is a procedural language for the PostgreSQL\ndatabase system.\n\n11)\n\n7\n\n\fto create a PL/pgSQL function that obtains an\nobjID of the object nearest to the given position\nwithin the search region (this function is used for\ncross-identification):\n\nBETWEEN -95 AND 95)\nAND\n(fGetI16UVecI4(czi,32400)\nBETWEEN -95 AND 95)\nUNION ALL\nSELECT objid,\n\nCREATE FUNCTION fTwomassGetNearestObjIDEq(\n\nfDistanceArcMinXYZI4(cxi,cyi,czi,1,0,0)\nAS distance\n\narg1 FLOAT8, arg2 FLOAT8, arg3 FLOAT8)\nRETURNS INT4\n\nFROM twomass_xyzi_baa0\n\nAS $$\n\nWHERE (fGetI16UVecI4(cxi,32400)\nBETWEEN 32305 AND 32400) AND\n\nDECLARE\nrt INT4;\n\n(fGetI16UVecI4(cyi,32400)\nBETWEEN -95 AND 95)\nAND\n\nBEGIN\nEXECUTE _fTwomassGetSqlForRadialSearch(\narg1, arg2, arg3, 32400, TRUE\n\n(fGetI16UVecI4(czi,32400)\nBETWEEN -95 AND 95)\n\n) INTO rt;\nRETURN rt;\n\n) o\nWHERE o.distance <= 10\n\nEND\n\nORDER BY o.distance\nLIMIT 1\n\n$$ IMMUTABLE LANGUAGE 'plpgsql';\n\nwhere fTwomassGetSqlForRadialSearch() is a\nstored function written in C that returns an SQL\nstatement for radial search or cross-identification\n(i.e., multiple radial searches), and arg1, arg2,\nand arg3 are right ascension, declination, and\nsearch radius, respectively. The fourth and fifth\narguments of fTwomassGetSqlForRadialSearch()\nare the scaling parameter of a composite expression index on (cxi, cyi, czi) and a switch to select\neither radial search (FALSE) or cross-identification\n(TRUE), respectively.\nThe function fTwomassGetSqlForRadialSearch()\nknows range information of declination for each\nchild table of twomass xyzi and generates an appropriate SQL statement with the UNION ALL12)\nkeyword (if required) to access necessary child\ntable(s). We show an example SQL statement\ngenerated by the function that searches the nearest object from (0,0) in J2000 coordinates within\na 10\u2032 radius:\nSELECT o.objid\nFROM\n(SELECT objid,\nfDistanceArcMinXYZI4(cxi,cyi,czi,1,0,0)\nAS distance\nFROM twomass_xyzi_ace7\nWHERE (fGetI16UVecI4(cxi,32400)\nBETWEEN 32305 AND 32400) AND\n(fGetI16UVecI4(cyi,32400)\n\nHere fDistanceArcMinXYZI4() is a stored function written in C to obtain angular distance in\narcminutes between two positions.\nGeneral radial search is performed by using\nthe fTwomassGetNearbyObjEq() function. The\nsource code of it is almost the same as that\nof fTwomassGetNearestObjIDEq(). See also the\nsource files in our kit for details.\n4.3.6.\n\nThe number of partitions of twomass xyzi is\nan important factor for performance. A public\nversion of 2MASS PSC is provided as 92 files\ndivided by declination.13) Therefore, we create\n92\u00d7n partitions and test the performance of crossidentification as multiple radial searches for n = 2,\nn = 4, n = 8, and n = 16. Figure 5 is the result\nof the test. All measurements were made with\nenough cached data in the main memory. The\ncase of n = 8 shows significant improvement compared with n = 2 or n = 4. However, the n = 16\ncase of radius = 0.25\u2032 exhibits a slight decrease of\nthe performance. We suspect that increasing the\nUNION ALL phrase in n = 16 case causes the slowdown and that around n = 8 might be the best\nnumber of partitions.\nAs a result, we apply n = 8 for our system,\nwhich achieves comparable performance with the\n13)\n\n12)\n\nNumber of Partitions\n\nStrictly speaking, neighboring two files have some overlapped area in declination. We have to be careful in the\narea, when selecting objects with strict declination ranges.\n\nUNION ALL is used to merge two results of SELECT phrases.\n\n8\n\n\f3700\n\nTable 2: The performance of radial search and\nrectangular search of 2MASS PSC. Hardware is a\nCore2Quad Q9650 (3.0GHz) CPU on GIGABYTE\nGA-EX38-DS4 with 8 Gbyte DDR2-800 memory.\n\nCount of radial search (count/sec)\n\n3600\n3500\n\nsearch radius = 0.1arcmin\n\n3400\n\nSearch criteria\nRadial (r=1\u2032 )\nRadial (r=60\u2032 )\nRadial (r=180\u2032 )\nRadial (r=360\u2032 )\nRect. (2\u25e6 \u00d72\u25e6 )\nRect. (10\u25e6 \u00d710\u25e6 )\n\n3300\n3200\nsearch radius = 0.25arcmin\n\n3100\n3000\n2900\n\nNo. Obj\n2\n5198\n47632\n189784\n6644\n167266\n\nElapsed time\n0.001 s\n0.022 s\n0.149 s\n0.484 s\n0.025 s\n0.386 s\n\n2800\n2700\n\n0\n\n200\n\n400\n\n600 800 1000 1200 1400 1600\nNumber of child tables\n\ntwomass table:\nSELECT o.ra,o.dec,o.j_m,o.h_m,o.k_m,\no.j_msigcom,o.h_msigcom,o.k_msigcom,\n\nFig. 5.- Performance of cross-identification between all objects of AKARI/IRC PSC and all\nobjects of 2MASS PSC for different numbers of\npartitions of 2MASS PSC. The count of radial\nsearch per second is plotted against the number\nof child tables of 2MASS PSC. Hardware is a 2\u00d7\nOpteron2384 CPU on a Supermicro dual-processor\nboard with 64 Gbyte memory.\n\nn.distance\nFROM fTwomassGetNearbyObjEq(0,0,3) n, twomass o\nWHERE n.objid = o.objid;\n\nwhere a join on the primary key n.objid =\no.objid works fast enough. See the document\nof our software kit for details.\n5.\n\ncase of 5 million objects in Figure 3.\n4.4.\n\nTechnical Design of Rectangular Search\n\nAs shown in Figure 4, we implement rectangular search using an approach similar to that of\nradial search. Rectangular search is used as a onetime search in major cases; therefore, we implement it so that we can obtain better performance\nwith minimum cost. Although we introduced the\nCE feature of PostgreSQL in \u00a73 and \u00a74.3.5, we did\nnot use it for radial search. On the other hand, we\nfound that CE is suitable for rectangular search,\nand it simplifies our implementation.\nWe create 92 partitions (child tables) for rectangular search following the recommendation (less\nthan 100 partitions) of the official document of\nPostgreSQL, and we distribute all rows into child\ntables divided by their declination. Then we create indices on all the child tables. Here is an\nexample to create one pair of indices:\n\nPerformance with a Standard PC\n\nWe test the performance of a radial search of\n2MASS PSC using a standard personal computer.\nTable 2 is the test results, including four cases of\ndifferent search radii, and shows satisfactory performance. This test is made in the \"psql\" interactive terminal with the following SQL statement:\nSELECT count(*)\nFROM fTwomassGetNearbyObjEq(0, 0, radius);\n\nafter the \\timing command. All measurements\nwere made with enough cached data in the main\nmemory; therefore, the actual search speed may\nbe slower than them, due to the bottleneck of disk\nI/O. This bottleneck is generally reduced by performing many searches for a long span that increases memory cache efficiency.\nIn actual searches, we use this stored function and natural join between returned result and\n\nCREATE INDEX twomass_j2000i_aaa_radeci\nON Twomass_j2000i_aaa (rai,deci);\nCREATE INDEX twomass_j2000i_aaa_decrai\n\n9\n\n\fThe implementation of radial search for relatively small (less than several million entries) catalogs can be very simple, and good performance is\nrealized. We also show that such simple implementation is not enough for the severe search requirements of huge catalogs, and we need additional\ntechniques. We examine our revised implementation of radial search of the 2MASS PSC using\ntechniques of table partitioning, composite expression index, stored functions, etc. Our performance\ntests of cross-identification of AKARI/IRC PSC\n(870,973 objects) with 2MASS PSC (470,992,970\nobjects) achieve about a 2000 counts/s radial\nsearch using a dual-processor server. Additional\ntests using a standard personal computer also\nshow satisfactory performance of radial search\nwith some typical search radii.\nWe also present our simple implementation of\nfast rectangular search for which the constraintexclusion (CE) feature of PostgreSQL works effectively to improve performance.\nCommercial RDBMS products have often been\nused for services for huge catalogs. Our report\nshows that an open-source RDBMS product is also\na good choice to develop astronomical database\nservices.\n\nON Twomass_j2000i_aaa (deci,rai);\n\nwhere Twomass j2000i aaa is the name of a child\ntable. After creating a stored function for rectangular search in PL/pgSQL, we can run a fast\nrectangular search like this:\nSELECT o.ra,o.dec,o.j_m,o.h_m,o.k_m,\no.j_msigcom,o.h_msigcom,o.k_msigcom\nFROM fTwomassGetObjFromRectEq(0,0.1, 1,1.1) n,\ntwomass o\nWHERE n.objid = o.objid;\n\nNote that we have to write the code of the\nstored function fTwomassGetObjFromRectEq() in\nPL/pgSQL, since a search must be performed as\ndynamic SQL execution. A stored function written in SQL only supports static SQL execution,\nunder which CE does not work.\nTable 2 includes the performance of two cases of\nrectangular search. On average, the search speed\nwith CE and partitioning is faster by more than 10\ntimes compared with the searches using an index\non a single table.\nOur stored function for rectangular search has\nseveral other minor contrivances. See the document and source files in the 2MASS Kit for details.\n6.\n\nSummary\n\nWe acknowledge Satoshi Takita, Shinki Oyabu,\nNorio Ikeda and Yoshifusa Ita for their test reports and suggestions about documentation. We\nare grateful to Aniruddha R. Thakar, Yanxia\nZhang and Nigel Hambly for giving us valuable\ninformation of cross-identification techniques. We\nthank Kanoa Withington for reporting their use\nof 2MASS Kit at Canada-France-Hawaii Telescope\n(CFHT) observatory. We thank Shin-ichi Ichikawa\nand Masafumi Yagi for insightful comments about\napplication and literature of the orthogonal coordinate system. We acknowledge Issei Yamamura\nfor his careful reading of the text. We thank Jun\nKuwamura for informing us about some technical tips of PostgreSQL. We thank the anonymous\nreferee for his installation report and useful comments regarding this article. We thank Japan\nPostgreSQL Users Group for giving us the chance\nto talk about the 2MASS Kit at the PostgreSQL\nConference 2011 in Japan. We thank Linux, PostgreSQL and other UNIX-related communities for\nthe development of various useful software.\n\nWe develop a software kit to construct a highperformance astronomical catalog database supporting 2MASS PSC and several all-sky catalogs\non a standard personal computer. The kit has a\ndocument that includes step-by-step instructions\nfor installation and a tutorial for database beginners, and it utilizes open-source RDBMS. Therefore, any users can easily build their own catalog server without software licensing fees and\ncan search the catalogs with various criteria using SQL.\nOut kit is tuned for optimal performance of positional search, i.e., radial search and rectangular\nsearch. We use an orthogonal coordinate system\nfor database index to implement the radial search\nthat is most important in the positional search.\nThis xyz-based method needs neither special processing for polar singularity nor spatial splitting\nsuch as HTM or HEALPix. Therefore, we can\ndevelop cost-effective astronomical database systems.\n\n10\n\n\fAppendix A: Stored Functions in \u00a74.2\n\nTable 3: Results of match-up of AKARI/IRC PSC\nwith 2MASS PSC using multiple radial searches\nwith multiple sessions. Hardware is 2\u00d7 XEON\nX5650 (2.67GHz six-core 12-thread) CPU on a\nSupermicro dual-processor board and LSI 9211-4i\nHBA with a Crucial C300 SSD.\n\nHere, we explain each stored function in the\ndefinition of the fAkariIrcGetNearestObjIDEq()\nfunction in \u00a74.2. All stored functions shown next\nare written in C.\n\u2022 fEq2X(ra,dec), fEq2Y(ra,dec) and fEq2Z\n(ra,dec) convert J2000 (ra,dec) to (cx, cy,\ncz) of the unit vectors, respectively.\n\nSessions\n1\n2\n4\n8\n10\n12\n18\n24\n\n\u2022 fDistanceArcMinXYZ(cx1, cy1, cz1, cx2,\ncy2,cz2) returns the angular distance\n(in arcminutes) between two positions,\n(cx1,cy1,cz1) and (cx2,cy2,cz2).\n\u2022 fArcMin2Rad(distance) converts the distance in arcminutes to radians.\n\nElapsed Time\n7.72 minutes\n4.55 minutes\n2.50 minutes\n1.50 minutes\n1.35 minutes\n1.28 minutes\n1.22 minutes\n1.22 minutes\n\nN of Radial Search\n1881 counts/s\n3189 counts/s\n5796 counts/s\n9697 counts/s\n10741 counts/s\n11333 counts/s\n11902 counts/s\n11898 counts/s\n\nAppendix B: Performance Tuning\nperformance. However, we found that satisfactory\nperformance can be obtained using 2MASS Kit\nwith recent inexpensive and high-speed SSDs and\nmulticore CPUs.\nWe store the PostgreSQL database files of the\nindex set and table set for radial search (about 30\nGbyte) into a Crucial C300 MLC SSD, and we test\nthe performance of cross-identification between\nAKARI/IRC PSC and 2MASS PSC using six-core\n(12-thread) CPUs on a dual-processor board. We\nconnect multiple sessions to the PostgreSQL server\nand execute the following SQL statements simultaneously:\n\nThroughout the tests of cross-identification presented in this article, we use PostgreSQL 8.4.5\nwith CentOS 5.5 64-bit on x86 64 compatible\nhardware. We have adjusted the following points\nto obtain the highest performance for our hardware:\n\u2022 Dynamic clocking of the CPU and others\nare disabled. We stop cpuspeed using the\nchkconfig command in OS and turn off\nC1E (Enhanced Halt) in BIOS. If they are\nenabled, the performance may decrease by\nmore than 10 %.\n\nSELECT count(\n\n\u2022 We set the readahead parameter to 1024 using the hdparm command. This sometimes\nimproves by several percent compared with\nthe default value.\n\nfTwomassGetNearestObjIDEq(o.ra, o.dec, 0.25))\nFROM ( SELECT * FROM AkariIrc\nWHERE objid % n = m ORDER BY dec ) o;\n\nwhere n is the number of sessions, and a unique\nsequential number beginning with 0 is assigned to\nm for each session. For example, we set n = 4 and\nm = 0, 1, 2 and 3 for cross-identification using four\nsessions (threads).\nThe results are shown in Table 3. Less than\n10 sessions show significant scaling factor. Recent\nmainstream CPUs have four cores or more; therefore, RDBMS-based multiple radial searches might\nbecome a good choice for several situations.\n\n\u2022 We set the noatime option of the mount command for database storage.\nAppendix C: Cross-Identification\nSSD and Multicore CPU\n\nusing\n\nOne of the best methods to perform crossidentification with huge catalogs is the plane\nsweep techniques (Devereux et al. 2005, N. Hambly 2011, private communication). Although\n2MASS Kit supports cross-identification as multiple radial searches, such a RDBMS-based approach might generally be unsuitable for the best\n11\n\n\fREFERENCES\nBerriman, G. B., Good, J. C., & Lonsdale, C. J.,\n2000, BAAS, 32, 1601\nDevereux, D., Abel, D. J., Power, R. A., & Lamb,\nP. R., 2005, in ASP Conf. Ser. 347, Astronomical Data Analysis Software and Systems XIV,\ned. P. Shopbell, M. Britton, & R. Ebert (San\nFrancisco: ASP), 346\nG\u00f3rski, K. M. et al., 2005, ApJ, 622, 759\nHambly, N. C. et al., 2007, MNRAS, 384, 637\nIshihara, D. et al., 2010, A&A, 514, A1\nKawada, M. et al., 2007, PASJ, 59, S389\nKunszt, P. Z., Szalay, A. S., Csabai, I., & Thakar,\nA. R., 2000, in ASP Conf. Ser. 216, Astronomical Data Analysis Software and Systems IX,\ned. N. Manset, C. Veillet, & D. Crabtree (San\nFrancisco: ASP), 141\nMink, D., 2006, in ASP Conf. Ser. 351, Astronomical Data Analysis Software and Systems XV,\ned. C. Gabriel, C. Arviset, D. Ponz, & E. Solano\n(San Francisco: ASP), 204\nOchsenbein, F., Bauer, P., & Marcout, J., 2000,\nA&AS, 143, 23\nOnaka, T. et al., 2007, PASJ, 59, S401\nSkrutskie, M. F. et. al., 2006, AJ, 131, 1163\nSzalay, A. S. 2001, in ASP Conf. Ser. 238, Astronomical Data Analysis Software and Systems\nX, ed. F. R. Harnden, Jr., F. A. Primini, & H.\nE. Payne (San Francisco: ASP), 3\nTanaka, W., 1993, Report of the National Astronomical Observatory of Japan, 1 (Tokyo:\nNAOJ), 349\nThakar, A. R. et\n(arXiv:cs/0403020)\n\nal.,\n\n2004,\n\npreprint\n\nYamauchi, C. et al., 2011, PASP, 123, 852\nYork, D. G. et al., 2000, AJ, 120, 1579\n\nThis 2-column preprint was prepared with the AAS LATEX\nmacros v5.2.\n\n12\n\n\f"}