{"id": "http://arxiv.org/abs/1204.5507v2", "guidislink": true, "updated": "2012-11-11T10:55:56Z", "updated_parsed": [2012, 11, 11, 10, 55, 56, 6, 316, 0], "published": "2012-04-24T22:31:47Z", "published_parsed": [2012, 4, 24, 22, 31, 47, 1, 115, 0], "title": "Dynamic Network Delay Cartography", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1204.4650%2C1204.1964%2C1204.2357%2C1204.2704%2C1204.5506%2C1204.1471%2C1204.1903%2C1204.1805%2C1204.3523%2C1204.2641%2C1204.2697%2C1204.2377%2C1204.6273%2C1204.2570%2C1204.1099%2C1204.4035%2C1204.3201%2C1204.2393%2C1204.3203%2C1204.1528%2C1204.5015%2C1204.0595%2C1204.2543%2C1204.2065%2C1204.0418%2C1204.4458%2C1204.5623%2C1204.6418%2C1204.4351%2C1204.0847%2C1204.4215%2C1204.1032%2C1204.0112%2C1204.4641%2C1204.3454%2C1204.5503%2C1204.2342%2C1204.0094%2C1204.4219%2C1204.0830%2C1204.2116%2C1204.1257%2C1204.1290%2C1204.5507%2C1204.2142%2C1204.5273%2C1204.4267%2C1204.6506%2C1204.4459%2C1204.2049%2C1204.0685%2C1204.0668%2C1204.3275%2C1204.2028%2C1204.4513%2C1204.2990%2C1204.0684%2C1204.0610%2C1204.0854%2C1204.4240%2C1204.1614%2C1204.3701%2C1204.4814%2C1204.3114%2C1204.4902%2C1204.6376%2C1204.5338%2C1204.4198%2C1204.2256%2C1204.0229%2C1204.4357%2C1204.3691%2C1204.2563%2C1204.5036%2C1204.3540%2C1204.1291%2C1204.2325%2C1204.3021%2C1204.1055%2C1204.3490%2C1204.2453%2C1204.0948%2C1204.0531%2C1204.4478%2C1204.4394%2C1204.2340%2C1204.2363%2C1204.4912%2C1204.4389%2C1204.0175%2C1204.6020%2C1204.0769%2C1204.1518%2C1204.0210%2C1204.6422%2C1204.5505%2C1204.1538%2C1204.4160%2C1204.5909%2C1204.4041%2C1204.1731&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Dynamic Network Delay Cartography"}, "summary": "Path delays in IP networks are important metrics, required by network\noperators for assessment, planning, and fault diagnosis. Monitoring delays of\nall source-destination pairs in a large network is however challenging and\nwasteful of resources. The present paper advocates a spatio-temporal Kalman\nfiltering approach to construct network-wide delay maps using measurements on\nonly a few paths. The proposed network cartography framework allows efficient\ntracking and prediction of delays by relying on both topological as well as\nhistorical data. Optimal paths for delay measurement are selected in an online\nfashion by leveraging the notion of submodularity. The resulting predictor is\noptimal in the class of linear predictors, and outperforms competing\nalternatives on real-world datasets.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1204.4650%2C1204.1964%2C1204.2357%2C1204.2704%2C1204.5506%2C1204.1471%2C1204.1903%2C1204.1805%2C1204.3523%2C1204.2641%2C1204.2697%2C1204.2377%2C1204.6273%2C1204.2570%2C1204.1099%2C1204.4035%2C1204.3201%2C1204.2393%2C1204.3203%2C1204.1528%2C1204.5015%2C1204.0595%2C1204.2543%2C1204.2065%2C1204.0418%2C1204.4458%2C1204.5623%2C1204.6418%2C1204.4351%2C1204.0847%2C1204.4215%2C1204.1032%2C1204.0112%2C1204.4641%2C1204.3454%2C1204.5503%2C1204.2342%2C1204.0094%2C1204.4219%2C1204.0830%2C1204.2116%2C1204.1257%2C1204.1290%2C1204.5507%2C1204.2142%2C1204.5273%2C1204.4267%2C1204.6506%2C1204.4459%2C1204.2049%2C1204.0685%2C1204.0668%2C1204.3275%2C1204.2028%2C1204.4513%2C1204.2990%2C1204.0684%2C1204.0610%2C1204.0854%2C1204.4240%2C1204.1614%2C1204.3701%2C1204.4814%2C1204.3114%2C1204.4902%2C1204.6376%2C1204.5338%2C1204.4198%2C1204.2256%2C1204.0229%2C1204.4357%2C1204.3691%2C1204.2563%2C1204.5036%2C1204.3540%2C1204.1291%2C1204.2325%2C1204.3021%2C1204.1055%2C1204.3490%2C1204.2453%2C1204.0948%2C1204.0531%2C1204.4478%2C1204.4394%2C1204.2340%2C1204.2363%2C1204.4912%2C1204.4389%2C1204.0175%2C1204.6020%2C1204.0769%2C1204.1518%2C1204.0210%2C1204.6422%2C1204.5505%2C1204.1538%2C1204.4160%2C1204.5909%2C1204.4041%2C1204.1731&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Path delays in IP networks are important metrics, required by network\noperators for assessment, planning, and fault diagnosis. Monitoring delays of\nall source-destination pairs in a large network is however challenging and\nwasteful of resources. The present paper advocates a spatio-temporal Kalman\nfiltering approach to construct network-wide delay maps using measurements on\nonly a few paths. The proposed network cartography framework allows efficient\ntracking and prediction of delays by relying on both topological as well as\nhistorical data. Optimal paths for delay measurement are selected in an online\nfashion by leveraging the notion of submodularity. The resulting predictor is\noptimal in the class of linear predictors, and outperforms competing\nalternatives on real-world datasets."}, "authors": ["Ketan Rajawat", "Emiliano Dall'Anese", "Georgios B. Giannakis"], "author_detail": {"name": "Georgios B. Giannakis"}, "author": "Georgios B. Giannakis", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1109/TIT.2014.2311802", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1204.5507v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1204.5507v2", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "Part of this paper has been published in the \\emph{IEEE Statistical\n  Signal Processing Workshop}, Ann Arbor, MI, Aug. 2012", "arxiv_primary_category": {"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1204.5507v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1204.5507v2", "journal_reference": null, "doi": "10.1109/TIT.2014.2311802", "fulltext": "IEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n1\n\nDynamic Network Delay Cartography\n\narXiv:1204.5507v2 [cs.NI] 11 Nov 2012\n\nKetan Rajawat, Emiliano Dall'Anese, and Georgios B. Giannakis\u22c6\n\nAbstract\nPath delays in IP networks are important metrics, required by network operators for assessment,\nplanning, and fault diagnosis. Monitoring delays of all source-destination pairs in a large network is\nhowever challenging and wasteful of resources. The present paper advocates a spatio-temporal Kalman\nfiltering approach to construct network-wide delay maps using measurements on only a few paths. The\nproposed network cartography framework allows efficient tracking and prediction of delays by relying\non both topological as well as historical data. Optimal paths for delay measurement are selected in an\nonline fashion by leveraging the notion of submodularity. The resulting predictor is optimal in the class\nof linear predictors, and outperforms competing alternatives on real-world datasets.\n\nIndex Terms\nInternet measurements, network kriging, kriged Kalman filter, delay prediction, submodularity\noptimization.\n\nSubmitted April 19, 2012; revised August 20, 2018.\nThe authors are with the Department of Electrical and Computer Engineering, University of Minnesota, 200 Union Street SE,\nMinneapolis, MN 55455, USA. Tel/fax: +1(612)624-9510/625-2002. E-mails: {ketan,emiliano, georgios}@umn.edu\n\u22c6\n\nCorresponding author.\nWork in this paper was supported by NSF-ECCS grant no. 1202135. Part of this paper has been presented at the IEEE\n\nStatistical Signal Processing Workshop, Ann Arbor, MI, Aug. 2012.\n\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n2\n\nI. I NTRODUCTION\nThe explosive growth in network traffic volumes has necessitated the development of avantgarde monitoring tools to endow network operators with a comprehensive view of the global\nnetwork behavior. However, acquisition and processing of network-wide performance metrics\nfor large networks is no easy task. For instance, monitoring path metrics such as delays or loss\nrates is challenging primarily because the number of paths generally grows as the square of the\nnumber of nodes in the network. Therefore, measuring and storing the delays of all possible\nsource-destination pairs is hard in practice even for moderate-size networks.\nFocus has thus shifted towards statistical means of predicting network-wide performance\nmetrics using measurements on only a subset of nodes [1], [2]. A promising approach in this\ncontext has been the application of kriging, a tool for spatial prediction popular in geostatistics\nand environmental sciences [3], [4]. A network kriging approach was developed in [5], where\nnetwork-wide path delays were predicted using measurements on a chosen subset of paths.\nThe class of linear predictors introduced leverages network topology information to model\nthe covariance among path delays. This is accomplished in [5] by assigning higher correlation\nbetween two paths if they share several links, as in this case, they are expected to incur similar\ndelay variations.\nThe present paper puts forth a dynamic network kriging approach capable of real-time spatiotemporal delay predictions. Specifically, a kriged Kalman filter (KKF) is employed to explicitly\ncapture variations due to queuing delays, while retaining the topology-based kriging predictor.\nThe resulting dynamic network kriging approach not only yields lower prediction error, but is\nalso more flexible, allowing delay measurements to be taken on random subsets of paths. In this\ncontext, the problem of choosing the optimal paths for delay measurements is also considered.\nSince the KKF runs in real-time, the paths are also selected in an online fashion by minimizing\nthe prediction error per time slot. Interestingly, the resulting combinatorial optimization problem\nis shown to be submodular, and is therefore solved approximately via a greedy routine.\nRecently, a compressive sampling-based approach has also been reported for predicting networkwide performance metrics [6], [7]. For instance, diffusion wavelets were utilized in [6] to obtain\na compressible representation of the delays, and account for spatial and temporal correlations.\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n3\n\nAlthough this allows for enchanced prediction accuracy over [5], it requires batch processing of\nmeasurements which does not scale well to large networks for real-time operation. In contrast,\nboth the KKF and the greedy path selection algorithms entail sequential operations, and are\ntherefore significantly faster.\nImputation of end-to-end delays has also been considered in the context of Internet geolocation.\nTreating end-to-end delays as distances between nodes, all-pair node distances are estimated using\nEuclidean embedding [8], or, matrix factorization [9]. However, these approaches do not exploit\nthe temporal or topological information, since their focus is not on monitoring or extrapolation\n(that is, prediction) of delays.\nThe rest of the paper is organized as follows. Sec. II introduces the model and the problem\nstatement. Sec. III deals with the KKF approach, while Sec. III-A describes techniques for\nestimating the relevant parameters. Finally, empirical validation of KKF and comparisons with\nthe Kriging approach of [5] are provided in Sec. V.\nNotation. Lower case symbols with indices, such as yp , represent scalar variables. These\nvariables, when stacked over their indices are denoted through their bold-faced versions y.\nBold-faced upper case symbols (S) represent matrices. Regular upper case symbols (S) represent\nconstant scalars, and typically stand for the cardinality of the set represented by corresponding\ncalligraphic upper case symbol (S). Identity matrix of size P \u00d7 P is denoted by IP , , and its\ncolumns by e1 , e2 , . . ., eP . Matrix Cy denotes the covariance matrix of the vector y.\nII. M ODELING\n\nAND\n\nP ROBLEM S TATEMENT\n\nConsider an IP network modeled by a connected digraph G = (V, E), with V denoting the set\nof nodes (devices, servers, or routers), and E, the communication links. The issue is to monitor\npath delays on a set of multi-hop paths P that connect the P := |P| source-destination pairs.\nLatency measured on path p \u2208 P at time t is denoted by yp (t), and all such network-wide\ndelays are collected in the vector y(t). At any time t however, delay can only be measured\non a subset of paths S(t) \u2282 P, which is represented by ys (t). Based on such partial current\nand past measurements H(t) := {ys (\u03c4 )}t\u03c4 =1 , the goal is to predict the remaining path delays\nys\u0304 (t) := {yp (t)}p\u2208P\\S(t) for each t.\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n4\n\nThe per-path end-to-end delay yp (t) consists of several independent components corresponding\nto contributions from each intermediate link and router. Of these, the queuing delay \u03c7\u030ap (t) is the\ntime spent by the packets waiting in the queues of intermediate buffers, and depends on the\ntraffic volumes in competing links. Network traffic is not only correlated spatio-temporally,\nbut also exhibits non-stationarities, in the form of random fluctuations and bursts [10]. Indeed,\nit is not surprising that the statistical properties of queueing delays in large IP networks are\nlargely unknown. In the interests of model parsimony and amenability to the tools used later,\nthe following random-walk model is instead adopted for the latent vector of queuing delays,\n\u03c7\u030a(t) = \u03c7\u030a(t \u2212 1) + \u03b7(t)\n\n(1)\n\u0002\n\u0003\nwhere \u03b7(t) denotes state noise with zero mean, and covariance matrix C\u03b7 := E \u03b7(t)\u03b7 T (t) .\n\nObserve that the random-walk model has very few tuning parameters, compared to say, a model\nwhich includes a non-identity state transition matrix (i.e., \u03c7\u030a(t) = B\u03c7\u030a(t \u2212 1) + \u03b7(t)). Further\nadvantages of the random-walk model, including those pertaining to the computational cost, are\nprovided in later sections.\nOther components of the path delay, combined in the nonzero-mean random \u03bd\u030ap (t), include the\npropagation, processing, and transmission delays, which are temporally uncorrelated (see e.g.,\n[11] for details). This component of delays is however spatially correlated across paths, and the\ncovariance matrix of the compacted vector \u03bd\u030a(t) is given by C\u03bd . Finally, the measurement of\npath delays using software tools such as ping itself introduces errors \u01ebp (t), which are assumed\n\u0002\n\u0003\nzero mean, uncorrelated over time and across paths, with covariance \u03c3 2 := E \u01ebp (t)\u01ebTp (t) .\nThe measured delays are expressed as\n\nyp (t) = \u03c7\u030ap (t) + \u03bd\u030ap (t) + \u01ebp (t)\n\np \u2208 S(t).\n\nLetting S(t) denote the |S(t)| \u00d7 P selection matrix with 0-1 entries that contains the p-th row\nof IP if p \u2208 S(t), the measurement equation can be compactly written as\nys (t) = S(t)\u03c7\u030a(t) + \u03bd\u030as (t) + \u01ebs (t)\n\n(2)\n\nwhere the vector \u01ebs (t) collects the measurement errors on paths p \u2208 S(t), and \u03bd\u030as (t) := S(t)\u03bd\u030a(t).\nThe next section describes a KKF approach for tracking and predicting the unknown end-toend delays ys\u0304 (t), by utilizing the state-space model described by (1) and (2).\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\nIII. DYNAMIC\n\n5\n\nNETWORK KRIGING\n\nThe spatio-temporal model in (1)-(2) is widely employed in geostatistics and environmental\nscience, where \u03c7\u030a(t) is generally referred to as trend, and \u03bd\u030a(t) captures random fluctuations\naround \u03c7\u030a(t); see e.g., [3, Ch. 4], [12], [13]. Recently, a similar modeling approach was employed\nby [14] to describe the dynamics of wireless propagation channels, and in [15] for spatio-temporal\nrandom field estimation. In order to better relate the proposed model with the existing ones,\nthe mean of \u03bd\u030a(t) is incorporated in the trend, and (2) is now replaced with\nys (t) = S(t)\u03c7(t) + \u03bds (t) + \u01ebs (t)\n\n(3)\n\nwhere \u03bds (t) := \u03bd\u030as (t) \u2212 E [\u03bd\u030as (t)] and \u03c7(t) := \u03c7\u030a(t) + E [\u03bd\u030a(t)], and likewise for \u03bd(t). Next, given\nonly first- and second-order moments of \u03b7(t), \u01ebs (t), and \u03bd(t), this section derives the best linear\npredictor for the unavailable path delay vector ys\u0304 (t).\nSuppose first that the queuing delay vector \u03c7(t) is known, and let S\u0304(t) denote an |S\u0304(t)| \u00d7\nP matrix containing the p-th row of IP if p \u2208 S\u0304(t); that is, S\u0304(t) is a path selection matrix\nwhich returns quantities pertaining to paths in S\u0304(t). Then, the linear minimum mean-square\nerror (LMMSE) estimator (denoted by E\u2217 [.]) for \u03bds\u0304 (t) is given by (see, e.g. [16])\nE\u2217 [\u03bds\u0304 (t)|\u03c7(t), ys (t)] = S\u0304(t)C\u03bd ST (t) S(t)C\u03bd ST (t) + \u03c3 2 IS\n\u00d7 [ys (t) \u2212 S(t)\u03c7(t)]\n\n\u0001\u22121\n(4)\n\nand is commonly referred to as kriging [4]. In practice however, the trend \u03c7(t) has to be\nestimated from the data. In the so-termed universal kriging predictor [3], \u03c7(t) is estimated using\nthe generalized least-squares (GLS) criterion, where \u03bds (t) is treated as noise (lumped together\nwith \u01ebs (t)). The prediction for \u03bds\u0304 (t) is then obtained by replacing \u03c7(t) in (4) with its estimate.\nThis approach was proposed for network delay prediction in [5], and was referred to as network\nkriging. However, since the trend is estimated independently using GLS per time slot, its temporal\ndynamics present in (1) are not exploited.\nFrom the spatio-temporal model set forth in Sec. II, it is clear that estimating the trend \u03c7(t) can\nbenefit from processing both present and past measurements jointly. Towards this end, the Kalman\nfiltering (KF) machinery offers a viable option for tracking the evolution of \u03c7(t) from the set of\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n6\n\nhistorical data H(t). At each time t, the KF finds the LMMSE estimate \u03c7\u0302(t) := E\u2217 [\u03c7(t)|H(t)],\n\u0002\n\u0003\nand its error covariance matrix M(t) := E (\u03c7(t) \u2212 \u03c7\u0302(t))(\u03c7(t) \u2212 \u03c7\u0302(t))T using the following\nset of recursions (see e.g., [16, Ch. 3])\n\n\u03c7\u0302(t) = \u03c7\u0302(t \u2212 1) + K(t)(ys (t) \u2212 S(t)\u03c7\u0302(t \u2212 1))\n\n(5a)\n\nM(t) = (IP \u2212 K(t)S(t))(M(t \u2212 1) + C\u03b7 )\n\n(5b)\n\nwhere the so-termed Kalman gain K(t) is given by\nK(t) := (M(t \u2212 1) + C\u03b7 )ST (t)\n\u0002\n\u0003\u22121\n\u00d7 S(t)(C\u03bd + C\u03b7 + M(t \u2212 1))ST (t) + \u03c3 2 IS\n.\n\n(6)\n\nOnce \u03c7\u0302(t) has been estimated via KF, \u03bds\u0304 (t) can be readily obtained via kriging as in (4), yielding\nthe predictor\n\u0177s\u0304 (t) = S\u0304(t)\u03c7\u0302(t) + S\u0304(t)C\u03bd ST (t) S(t)C\u03bd ST (t) + \u03c3 2 IS\n\u00d7 [ys (t) \u2212 S(t)\u03c7\u0302(t)] .\n\n\u0001\u22121\n(7)\n\nThe predictor in (7) constitutes what is also referred to as the kriged Kalman filter [12], [13].\nThe LMMSE framework employed here yields the best linear predictor even for non-Gaussian\ndistributed noise. The prediction error of the KKF is characterized in the following proposition,\nwhose proof is provided in Appendix A.\nProposition 1. The prediction error covariance matrix at time t is given by\nMs\u0304y (t) := E{(ys\u0304 (t) \u2212 \u0177s\u0304 (t))(ys\u0304 (t) \u2212 \u0177s\u0304 (t))T }\n\u0014\n\u0015\u22121\n1 T\n\u22121\n2\n= \u03c3 IS\u0304 + S\u0304(t) (M(t \u2212 1) + C\u03bd + C\u03b7 ) + 2 S (t)S(t)\nS\u0304T (t) .\n\u03c3\n\n(8a)\n(8b)\n\nHaving a closed-form expression for the prediction error will come handy for selecting the\nmatrix S(t), as shown later in Sec. IV.\nThe KF step also allows \u03c4 -step prediction for \u03c4 \u2265 1, which is given by \u0177(t + \u03c4 ) = \u03c7\u0302(t), since\nthe kriging term is temporally white. In the present context, this can be useful in preemptive\nrouting and congestion control algorithms, as well as for extrapolating missing measurements.\n\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n7\n\nIn the latter case, the covariance matrix is updated simply as M(t) = M(t \u2212 1) + C\u03b7 . Before\nconcluding the description of the KKF, the following remarks are due.\nRemark 1. The random walk model adopted in (1) may result in an unstable filter. Operationally,\nif the KKF is unstable, an incorrect initialization of M(0) or \u03c7(0) may result in poor prediction\nperformance even as t \u2192 \u221e. This can be remedied by adopting a damped model \u03c7(t) =\nb\u03c7(t \u2212 1) + \u03b7(t) with b < 1. Here, \u03c7(t) is a zero-mean random process which does not\nincorporate the mean of \u03bd\u030a(t). The mean delay of all paths should instead be estimated a priori,\nand subtracted from the measurements themselves, so that each component of the path delay\nin (3) is zero-mean. With this modification, the results in this paper can be generalized to the\ndamped case. The random walk model is nevertheless used here since no instability issues were\nobserved in the two data sets considered in Sec. V. An alternative formulation, developed along\nthe lines of [17], can also be used in the AR(1) case. This technique may however increase\nthe number of state-space parameters, and considerably complicate the expressions developed in\nSec. IV.\nRemark 2. A distributed implementation of the KKF may be desirable for enhancing the\nrobustness and scalability of delay monitoring. In large-scale networks, a distributed algorithm\nalso mitigates the message passing overhead required to collect all measurements at a fusion\ncenter. If the model covariances C\u03bd and C\u03b7 are globally known, and the selection matrix S(t)\nis constant for all t, a distributed implementation of (5) can be derived along the lines of [18].\nTo this end, notice that substituting (5a) in (7), one can re-write the KKF predictor as\n\u0177s\u0304 (t) = S\u0304(t) [F(t) \u2212 F(t)S(t)K(t) + K(t)] ys (t) + S\u0304(t)\u03c7\u0302(t \u2212 1)\n+ S\u0304(t) [F(t)S(t)K(t) \u2212 K(t) \u2212 F(t)] S(t)\u03c7\u0302(t \u2212 1)\n(9)\n\u0001\u22121\nwhere F(t) := C\u03bd ST (t) S(t)C\u03bd ST (t) + \u03c3 2 IS . With \u03c7\u0302(t \u2212 1) available from the previous\n\niteration, it is clear from (9) that if d(t) := [F(t) \u2212 F(t)S(t)K(t) + K(t)] ys (t) were available\n\nat each node of the network, the KKF predictor (7) could be performed locally at each node.\nAssume that measurements are collected at a sub-set of nodes Vs \u2282 V, and node v \u2208 Vs\nmeasures delays of the set of paths Sv \u2282 S; that is, v is the end-node of all the paths in Sv .\nThen, to compute d(t) in a distributed manner, consider rewriting it as a sum of |Vs | terms, each\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n8\n\ninvolving only the local measurements ys,v (t) := [{yp |p \u2208 Sv }]T . Next, collect in the P \u00d7 |Sv |\nmatrix \u03a6v (t), the columns of matrix F(t) \u2212 F(t)S(t)K(t) + K(t) corresponding to the paths in\nP\nSv . Then, d(t) can be expressed as d(t) = v\u2208Vs \u03a6v (t)ys,v (t), which is equivalent to [19]\nX\nkdv \u2212 |Vs |\u03a6v (t)ys,v (t)k22\n(10a)\n{dv (t)}v\u2208Vs = arg min\n{dv }\n\nv\u2208Vs\n\ns.t. dv = dv\u2032 ,\n\nv \u2032 \u2208 V\u0304s , v \u2208 Vs\n\n(10b)\n\nwhere dv (t) represents a local copy of d(t) at node v, and V\u0304s \u2282 Vs is the set of nodes\ncommunicating with v. Building on (10), an iterative consensus algorithm whereby each node v\nexchanges its local copy dv (t) only with nodes in V\u0304s , can be derived by employing the so called\nalternating direction method of multipliers as detailed in [19] and [18]. Notice that, since the\nmodel covariances are globally known, recursions (8a) can be performed locally at each node.\nA. Estimating model parameters\nThe LMMSE-optimal dynamic kriging framework described in Sec. III requires knowledge of\nmodel covariance matrices C\u03bd , \u03c3 2 IS , and C\u03b7 , to operate. Of these, \u03c3 2 depends on the precision\noffered by the measurement software, and can be safely assumed known a priori.\nThe structure of C\u03bd is motivated by the modeling assumptions and utilizes topological information. Intuitively, propagation, transmission, and processing delays over paths p, q \u2208 P should\nbe highly correlated if these paths share many links. This relationship can be modeled by utilizing\nthe Gramian matrix G := RRT , where R is the P \u00d7 |E| path-link routing matrix; that is, the\n(p, l)th element of R is 1 if path p \u2208 P traverses link l \u2208 E, and 0 otherwise. Each off-diagonal\nentry (p, q) of G represents the number of links common to the paths p, q \u2208 P. On the other\nhand, the elements on the main diagonal of G count the number of constituent links per path.\nThe covariance matrix of \u03bd(t) can therefore be modeled as C\u03bd = \u03b3G.\nA similar model for C\u03bd was adopted by [5], where it was motivated from the property that\npath delays are sum of link delays, that is, \u03bd(t) = Rx(t), where vector x(t) collects the link\ndelays. Under this assumption, it holds that C\u03bd = \u03b3G if the link delays are uncorrelated across\nlinks, and have covariance matrix \u03b3I|E| . Note that the KKF and path-selection techniques also\nwork with a generic link-delay covariance matrix \u03a3, i.e., C\u03bd = R\u03a3RT . Unfortunately however,\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n9\n\nin most IP networks the link delays cannot be directly observed, which makes estimation of \u03a3\ndifficult, if not impossible. For example, consider a network (1\u20132\u20133) where two end terminals\n(nodes 1 and 3) are connected via an intermediate router (node 2). Clearly, the delays incurred\nby the individual links (1\u20132 and 2\u20133) cannot be discerned from each other, no matter how\naccurately the end-to-end delays (between 1 and 3) are measured. The same reasoning applies\nto the corresponding covariance matrices, irrespective of the estimation technique used.\nFor the remaining parameters, namely \u03b3 and C\u03b7 , an empirical approach is described next.\nL\nIt entails a training phase, and a set of measurements {ys (t)}tt=1\ncollected at time slots t =\n\n1, . . . , tL . During the KKF operation, tL \u2212 1 time slots can be periodically devoted to updating\nmodel covariances, while predicting the networks-wide delays ys\u0304 (t) for t = 1, . . . , tL . Let\nb \u03bd (t) := \u03b3\u0302(t)G and C\nb \u03b7 (t) denote the estimates of C\u03bd and C\u03b7 , respectively, at time t. Estimating\nC\nthe covariance matrix of the state noise is well-known to be a challenging task, primarily because\n\u03c7(t) and \u03c7(t \u2212 1) are not directly observable. Furthermore, methods such as those in [20] are\nnot applicable in the present context, as they require the KF to be time-invariant and stationary.\nL\nAs shown in [21], a viable means of estimating C\u03b7 from {ys (t)}tt=1\nrelies on approximating the\n\nnoise \u03b7(t) as q(t) := \u03c7\u0302(t) \u2212 \u03c7\u0302(t \u2212 1). Then, upon noticing that the resultant process {q(\u03c4 )} is\ntemporally-white, the sample mean and covariance of q can be obtained as\nt\n\nL\n1 X\nq(t)\nm\u0302q (tL ) =\ntL \u2212 1 t=2\n\n(11)\n\nt\n\nL\n1 X\n(q(t) \u2212 m\u0302q (t))(q(t) \u2212 m\u0302q (t))T .\n(12)\ntL \u2212 2 t=2\nb q } = (tL \u2212 1)\u22121 P (M(t \u2212 1) \u2212 M(t)) + C\u03b7 , it\nUsing (12), and exploiting the equality E{C\nt\n\nb q (tL ) =\nC\n\nfollows that an unbiased estimate of C\u03b7 can be obtained as\n\nL \u0010\n\u0011\n1 X\nM(t) \u2212 M(t \u2212 1) .\ntL \u2212 1 t=2\n\nt\n\nb \u03b7 (tL ) = C\nb q (tL ) +\nC\n\n(13)\n\nFinally, in order to obtain \u03b3\u0302, consider the innovations at time t as \u03b9p (t) := yp (t) \u2212 \u03c7\u0302p (t \u2212 1),\nand notice that if the model covariances are correct, then \u03b9p (t) is temporally white and zero-mean\n[20]. Indeed, it is possible to show that E [\u03b9p (t)\u03b9q (t)] = [M(t \u2212 1) + C\u03b7 + C\u03bd ]pq + \u03c3 2 for any\np, q \u2208 S(t) [21]. Further, let Tpq := {t|1 \u2264 t \u2264 tL , p, q \u2208 S(t)} be the set of time slots for\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n10\n\nwhich paths p and q are both measured. Then, the sample covariance between \u03b9p (t) and \u03b9q (t)\nP\nis given by \u0108pq := |Tpq |\u22121 t\u2208Tpq \u03b9p (t)\u03b9q (t) for all pairs p, q \u2208 P. Given M(t \u2212 1) and \u03c3 2 , this\nobservation yields the following estimate\nh\ni\n1 X\nb\nb \u03b7 (t)]pq .\nC\u03bd (t) =\n\u03b9p (t)\u03b9q (t) \u2212 \u03c3 2 \u2212 [M(t \u2212 1) + C\npq\n|Tpq | t\u2208T\n\n(14)\n\npq\n\nb \u03bd (t) can be updated recursively using C\nb \u03bd (t \u2212 1) in (14). At each time, only\nIndeed, entries of C\na few entries are updated, depending on which paths are observed (cf. S(t)).\n\nb \u03bd (t) to \u03b3G in the least-squares sense, which yields\nFinally, \u03b3\u0302(t) can be obtained by fitting C\nP\nb\np,q\u2208P [G]pq [C\u03bd (tL )]pq\n.\n(15)\n\u03b3\u0302(tL ) =\nkGk2F\nAs further justification for the random-walk model, it is remarked that a model of the form\n\u03c7(t) = B\u03c7(t \u2212 1) + \u03b7(t) requires learning the entries of B. Since the state vector is not directly\nobserved, estimation of B is usually significantly more difficult [16], [22], [23]. Such a model\nwould also need a longer training phase, and may exhibit poor generalization performance if the\namount of training data is limited [24]. This problem also arises when trying to use the model\nC\u03bd = R\u03a3RT , where additionally, \u03a3 is not uniquely identifiable, as explained earlier.\nIV. O NLINE E XPERIMENTAL D ESIGN\nThis section considers the problem of optimally choosing the set of paths S(t) (equivalently,\nthe matrix S(t)) so as to minimize the prediction error. To begin with, a simple case is considered\nwhere the set S(t) is allowed to contain any S paths. Operational requirements may however\nimpose further constraints on S(t), and these are discussed later.\nThe prediction error can be characterized by using a scalar function of Mys\u0304 (t); see e.g., [25].\nTo this end, the so called D-optimal design is considered, where the goal is to minimize the\nfunction f (S(t)) := log det(Ms\u0304y (t)). The paths selected at time t are therefore given by the\nsolution of the following optimization problem\nS \u2217 (t) = arg min f (S)\nS\u2208P\n\ns. t.\n\nAugust 20, 2018\n\n|S| = S.\n\n(16)\n(17)\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n11\n\nClearly, tackling (16) incurs combinatorial complexity and is challenging to solve exactly, even\nfor moderate-size networks. Indeed, (16) is an example of the so called subset selection problem,\nwhich is NP-complete in general; see e.g., [26] and references therein.\nInterestingly, it is possible to solve (16) approximately by utilizing the notion of submodularity.\nConsider a function g(S), which takes as input sets S \u2282 P. Given a set A \u2208 P and an element\ng\np \u2208 P \\ A, the increment function is defined as \u03b4A\n(p) := g(A \u222a {p}) \u2212 g(A). Function g(*)\ng\nis submodular if its increments are monotonically decreasing, meaning \u03b4A\n(p) \u2265 \u03b4Bg (p) for all\ng\nA \u2282 B \u2208 P. Likewise, g(*) is supermodular iff \u03b4A\n(p) \u2264 \u03b4Bg (p) for all A \u2282 B \u2208 P. In the present\n\ncase, the following proposition holds.\nProposition 2. The function f (S) is monotonic and supermodular in S.\nThe proof of Proposition 2 is provided in Appendix B, and relies on related results from [25].\nAn important implication of Proposition 2 is that a greedy forward selection algorithm can\nbe developed to solve (16) approximately [27]. Upon defining the shifted function h(S) :=\nf (S) \u2212 log det(M(t \u2212 1) + C\u03b7 + C\u03bd + \u03c3 2 IP ), a result from [27] ensures that the solution of the\ngreedy algorithm S g (t) satisfies the inequality\n\u0013\n\u0012\n1\ng\nh(S \u2217 (t)).\nh(S (t)) \u2264 1 \u2212\ne\n\n(18)\n\nWhile performance of the greedy algorithm is usually much better in practice, this bound ensures\nthat it does not break down for pathological inputs.\nf\nThe greedy algorithm involves repeatedly performing the updates S \u2190 S \u222a arg minp\u2208S\n/ \u03b4S (p)\n\nuntil |S| = S. This is useful in the present case, since the increments can be evaluated efficiently\nusing determinant update rules. Specifically, the updates are given by\n\u0012\nh\ni \u0013\nf\n\u03b4\u2205 (p) = \u2212 log 1 + M(t \u2212 1) + C\u03b7 + C\u03bd\np,p\n\u0013\n\u0012\nh\n\u0001\u22121 i\nf\n\u22121\nT\n\u03b4S (p) = \u2212 log 1 + (M(t \u2212 1) + C\u03b7 + C\u03bd ) + S S\np,p\n\n\u2200p \u2208 P\n\n(19)\n\n\u2200p \u2208 P \\ S.\n\n(20)\n\nFurther, each iteration requires a rank-one update to the matrix inverse in (20), which can\nalso be performed efficiently. The full greedy approach is summarized in Algorithm 1, where\n\u03a6 := (M(t \u2212 1) + C\u03b7 + C\u03bd )/\u03c3 2 . Algorithm 1 involves only basic operations, and it is easy\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n12\n\nto verify that its worst case complexity is O(P S 3). Further, the final value of the matrix V\nevaluated in the last iteration (Algorithm 1, line 11) is exactly the inverse term required for\nevaluating the Kalman gain in (6). In fact, the operational complexity can be further reduced\nusing lazy updates [28]. Finally, it is worth mentioning that the low-complexity of Algorithm\n1 is also a result of the random-walk model used here. In particular, the state space model\n\u03c7(t) = B\u03c7(t \u2212 1) + \u03b7(t) would result in significantly more complicated expressions.\nAlgorithm 1 Greedy algorithm for solving (16)\n1:\n2:\n3:\n\nfunction G REEDY(\u03a6, S)\ns \u2190 arg max [\u03a6]p,p\nh 1\u2264p\u2264P\ni\nV := 1/ ([\u03a6]s,s + 1)\n\n4:\n\nS \u2190 {s}\n\n5:\n\nfor k = 2 : S do\n\n6:\n\nwp \u2190 \u03a6S,p for all p \u2208 P \\ S\n\n7:\n\ns \u2190 arg max [\u03a6]p,p \u2212 wpT Vwp\n\n8:\n\nS \u2190 S \u222a {s}\n\n9:\n\nd \u2190 [\u03a6]s,s \u2212 wsT Vws + 1\n\n10:\n\nu \u2190 \u2212Vw\ns\n\uf8ee\n\uf8f9\nV + uuT /d u/d\n\uf8fb\nV\u2190\uf8f0\nT\nu /d\n1/d\n\np\u2208S\n/\n\n11:\n\n12:\n\n// wp has entries [\u03a6]s,p for all s \u2208 S\n\nreturn S\n\nNext, consider a more practical scenario, where the software installed at each end-node can\nmeasure delays on all paths originating at that node. At any time t however, delays are measured\nfrom only N end-nodes. Let Ve denote the set of all end-nodes, and Pv , the set of paths which\nS\nhave the node v \u2208 Ve as their origin (likewise, PN := v\u2208N Pv for N \u2282 Ve ). For any subset N\n\n(and its complement N\u0304 := V \\ N ), define the selection matrix N (N\u0304) consisting of canonical\n\nvectors eTp as rows, for all p \u2208 PN (p \u2208 PN\u0304 ). Defining the cost function fn (N ) := f (PN ), the\n\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n13\n\nonline optimal design problem for this scenario is expressed as\nN \u2217 (t) = arg min fn (N )\n\n(21a)\n\nN \u2282Ve\n\ns. t.\n\n|N | = N.\n\n(21b)\n\nIt follows from the properties of submodular functions that the cost function fn (N ) is also\nn\nmonotonic and supermodular in N . In particular, observe that the increments \u03b4N\n(v) = fn (N \u222a\n\n{v}) \u2212 fn (N ) = f (PN \u222a Pv ) \u2212 f (PN ) for v \u2208\n/ N satisfy the non-increasing property, i.e.,\nn\n\u03b4A\n(v) \u2264 \u03b4Bn (v) for all A \u2282 B \u2282 Ve and v \u2208\n/ B. A greedy algorithm similar to Algorithm 1 can\n\ntherefore be developed to obtain an approximate solution with the same (1 \u2212 1/e) guarantee\nas in (18). Complexity of the greedy algorithm in this case would be however higher, since\nevaluating \u03b4N (v) now requires rank-|Pv | updates in the determinant and inverses. Nevertheless,\nthe algorithm would still be efficient as long as |Pv | \u226a P for all v \u2208 Ve . In the special case\nwhen delay measurements are performed by only one node per time slot (N = 1), the solution\nof (21a) is simply given by\n\u0010\nh\ni \u0011\nN \u2217(t) = arg min log det I|Pv | + M(t \u2212 1) + C\u03b7 + C\u03bd\nv\u2208Ve\n\nh\ni\nwhere M(t \u2212 1) + C\u03b7 + C\u03bd\n\nvv\n\n(22)\n\nvv\n\nis the |Pv | \u00d7 |Pv | submatrix containing the rows and columns\n\nof M(t \u2212 1) + C\u03b7 + C\u03bd corresponding to the paths in Pv .\nIn some networks, it may be relatively straightforward to install delay measurement software\non every end-node, while allowing each end-node to measure delay on only one path per time\nslot. This amounts to replacing the budget-constraint (17) in (16) with\n|S \u2229 Pv | = 1\n\n\u2200 v \u2208 Ve .\n\n(23)\n\nInterestingly, constraints of this form can also be handled using the greedy approach by simply\nimposing (23) while searching for the best increment at every iteration. Specifically, the search\nspace of path p [cf. Algorithm 1, line 7] now becomes p \u2208 P \\PN , where N = {v : S \u2229Pv 6= \u2205}.\nMore general constraints of the form |S \u2229 Pv | \u2264 Sv can similarly be incorporated. Constraints\nof this form are referred to as partition matroid constraints, under which the greedy algorithm\nprovides an approximation ratio of 1/2 [29].\n\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n14\n\nV. E MPIRICAL VALIDATION\nPerformance of the proposed network-wide latency prediction schemes is validated using two\ndifferent datasets, which include delays measured on:\n(a)\n\nInternet2 backbone network1 , a lightly loaded network that exhibits low delay variability; and,\n\n(b)\n\nNew Zealand Active Measurement Project (NZ-AMP)2 , a network deployed across\nseveral universities and ISPs in New Zealand, characterized by comparatively higher\nvariability in delays.\n\nUsing the aforementioned datasets, the performance of KKF is also compared against that of\ncompeting alternatives in [5] and [6].\nBefore proceeding, a brief description of the nonlinear estimation technique in [6] is provided.\nThe approach hinges on a sparse representation of the network-wide delays, and employs l1 -norm\nminimization to recover the sparse basis coefficient vector. Specifically, the path delays adhere\nto the postulated linear model y(t) = H\u03b2(t), where k\u03b2(t)k0 \u226a P , and the matrix H \u2208 RP \u00d7P is\nconstructed using diffusion wavelets [30]. The diffusion matrix used for computing the wavelet\nbasis is obtained by applying Sinkhorn balancing [31] to the matrix W \u2208 RP \u00d7P , whose (p, q)-th\nelement is defined as\n[W]p,q =\n\n[G]pq\n[G]pp + [G]qq \u2212 [G]pq\n\n(24)\n\nwhere G is the Gramian defined in Sec. III-A. The overall algorithm amounts to solving the\nfollowing minimization problem\n\u03b2\u0302 \u2032 (t) = arg min\nk\u03b2 \u2032 k1\n\u2032\n\u03b2\n\ns. t.\n\nys (t) = S(t)HL\u03b2 \u2032\n\n(25a)\n(25b)\n\nwhere L is a diagonal matrix whose (n, n)-th entry is given by [L]n,n = 2k , with k \u2208 N\ndenoting the scale corresponding to the diffusion wavelet coefficient \u03b2n [6]. Subsequently, ys\u0304 (t)\nis predicted as \u0177s\u0304 (t) = S\u0304(t)HL\u03b2\u0302 \u2032 (t).\n1\n\n[Online] http://www.internet2.edu/network\n\n2\n\n[Online] http://erg.cs.waikato.ac.nz/amp\n\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n15\n\nUnder the premise that delays change slowly with time, the described algorithm can be used to\nestimate ys\u0304 (t) over a sequence of \u03c4 > 1 contiguous time-steps jointly. In this case, problem (25)\nis solved by replacing ys (t) with \u0233s (t) := [ysT (t \u2212 \u03c4 + 1), ysT (t \u2212 \u03c4 + 2), . . . , ysT (t)]T , and by\ncomputing the P \u03c4 \u00d7 P \u03c4 diffusion wavelet matrix based on W and temporal correlations as\nshown in [6]. Although this is a viable way to capture temporal correlations of delays, observe\nthat it requires solving l1 -norm minimization problems with P \u03c4 variables every \u03c4 time slots.\nThis increase in complexity prohibits the use of a large value of \u03c4 , and the simulations here\nonly report performance with \u03c4 = 5. It is also worth mentioning that such a batch solution also\ndoes not compare favorably to a real-time implementation, such as that provided by the KKF\nwhere delay predictions become available every time new measurements arrive.\n\nA. Internet2 Delay Data\nThe One Way Active Measurement Project (OWAMP) collects one way delays on the Internet2\nbackbone network3 . The network has 9 end-nodes and 26 directional links as depicted in Fig. 1.\nDelays are measured on the 72 paths among the end-nodes every minute. The data {y(t)} is\ncollected over tP = 4500 minutes (about three days) in July 2011.\nThe model KKF covariances C\u03bd and C\u03b7 are estimated using data from the initial 1,000 time\nslots. In this phase, 50 paths are randomly selected per time slot. The KKF is initialized by\nb \u03b7 (t) are updated in an\nsetting \u03b3 = 1, C\u03b7 = C\u03bd , and run for 500 time slots. Next, \u03b3\u0302(t) and C\n\nonline fashion, as outlined in Sec. III-A. The final values are obtained at the conclusion of the\ntraining phase at t = 1,000.\nPictorially, the performance of different algorithms can be assessed through delay maps\nshown in 2. Such maps can succinctly represent the network health, and are especially useful\nfor networks which otherwise have low delay variability, such as the Internet2. The map in\nFig. 2(a) corresponds to the true delays, wheres maps (b), (c), and (d) depict the predicted values\nobtained from the network kriging, wavelet-based approach, and KKF respectively. Predictions\nare performed using measurements over an interval of 100 minutes on 10 random paths (same\n3\n\n[Online] http://ndb1.net.internet2.edu/cgi-bin/owamp.cgi\n\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\nFig. 1.\n\n16\n\nInternet2 IP backbone network.\n\npaths are used throughout the considered interval), and the delays are predicted on the remaining\n62 paths are reported. In these maps, paths are arranged in increasing order according to the true\ndelay at time t = 1. It can be seen that the map produced by the kriging and compressive sensing\napproaches are very different from the true map. In contrast, the map obtained when using the\nKKF is close to the true map. In particular, observe that the delays of several paths change\nslightly around t = 80 in Fig. 2(a). However, of the three maps, this change is only discernible\nin the KKF map in 2(d). The delay predictions provided by the KKF are thus sufficiently accurate\nfor human inspection at control centers, even when monitoring a few paths.\nIt should be remarked that the maps in Fig. 2 are only for demonstration purposes, and not\nmuch can be inferred about the relative performance of different algorithms from these depictions\nalone. For a more detailed analysis of the different delay prediction approaches, consider the\nnormalized mean-square prediction error (NMSPE), defined as\ntP\nX\n1\nNMSPE :=\nk\u0177s\u0304 (t) \u2212 ys\u0304 (t)k22 .\n(tP \u2212 tL )(P \u2212 S) t=t +1\n\n(26)\n\nL\n\nThe prediction performance of the three algorithms is first assessed by using delay measurements\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n17\n\n[ms]\n\n[ms]\n40\n\n40\n\n60\n\n60\n35\n\n35\n\n50\n\n50\n30\n40\n\n25\n20\n\n30\n\nPath index\n\nPath index\n\n40\n\n30\n25\n20\n\n30\n\n15\n\n15\n\n20\n\n20\n10\n\n10\n\n10\n10\n\n5\n\n20\n\n40\n\n60\n\n80\n\n0\n\n100\n\n5\n\n20\n\n40\n\nt\n\n60\n\n80\n\n(a) True map\n\n(b) Kriging\n[ms]\n\n[ms]\n40\n\n40\n\n60\n\n60\n35\n\n35\n\n50\n\n50\n30\n\n30\n40\n\n25\n20\n\n30\n\nPath index\n\nPath index\n\n40\n\n25\n20\n\n30\n\n15\n20\n\n15\n20\n\n10\n10\n\n5\n\n20\n\n40\n\n60\n\n80\n\nt\n\n(c) Wavelets\nFig. 2.\n\n0\n\n100\n\nt\n\n100\n\n0\n\n10\n10\n\n5\n\n20\n\n40\n\n60\n\n80\n\n100\n\n0\n\nt\n\n(d) KKF\n\nTrue and predicted delay map for 62 paths in the Internet2 network over in interval of 100 minutes.\n\non randomly selected paths for each t. The (same) randomly selected paths are used for all three\napproaches. Fig. 3 depicts the NMSPE as a function of S, the number of paths on which delays\nare measured. Clearly, the KKF markedly outperforms the other two approaches across the entire\nrange of S. As expected [6], the compressive sampling-based approach provides a more accurate\nprediction than network kriging.\nNext, the performance of the three algorithms is analyzed for the case when paths for delay\nmeasurement are selected optimally. For the network kriging and the wavelet-based approaches,\nthe optimal paths are obtained according to the selection procedures provided in [5] and [6],\nrespectively. As pointed out in [6], performance of the wavelet-based approach can be improved\nby capitalizing on temporal correlations. This is done by solving (25) using measurements from\n\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n18\n\n2\n\n10\n\nKriging\nWavelets\nKKF\n1\n\nNMSPE\n\n10\n\n0\n\n10\n\n\u22121\n\n10\n\n\u22122\n\n10\n\nFig. 3.\n\n10\n\n20\n\n30\n\n40\nS\n\n50\n\n60\n\n70\n\nNMSPE as a function of S, Internet2 network with random path selection.\n\n\u03c4 = 5 consecutive time slots in a batch form. The temporal correlation is set to 0.5 and the\noptimal paths are obtained again using the selection strategy outlined in [6]. For the KKF, optimal\npaths are selected in an online fashion using Algorithm 1. Again, a significantly more accurate\nprediction of the path delays for the entire range of S is obtained via the KKF.\nB. NZ-AMP Delay Data\nThe KKF algorithm is tested here using delay data from NZ-AMP. The project continuously\nruns ICMP and scamper to determine the topology and delays between a set of nodes in New\nZealand. The data collected for this paper consist of end-to-end delays measured every ten\nminutes over the month of August 2011. The network has a total of 186 paths, whose delays\nrange from almost constant to highly variable, at times reaching up to 250ms.\nIn Fig. 5, the NMSPE as a function of S is reported, for the case where paths that are to be\nmeasured are chosen randomly. Again, same paths are used for the three considered schemes.\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n19\n\nKriging\nWavelets, \u03c4 = 1\nWavelets, \u03c4 = 5\nKKF\n\n1\n\n10\n\n0\n\nNMSPE\n\n10\n\n\u22121\n\n10\n\n\u22122\n\n10\n\n10\n\nFig. 4.\n\n20\n\n30\n\n40\nS\n\n50\n\n60\n\n70\n\nNMSPE as a function of S, Internet2 network with optimal path selection.\n\nThe KKF provides a markedly lower prediction error also for the NZ-AMP delay data. On the\nother hand, Fig. 6 shows the NMSPE on optimally selected paths for all three schemes. The\nKKF performs relatively better than the competing schemes for this data set as well. Observe\nthough that the actual values of the NMSPE incurred for this dataset is at least an order of\nmagnitude higher than those in the Internet2 dataset. Indeed, given the high variability in the\ndata, it is possible to improve upon the prediction accuracy of KKF by training it better. This is\nshowcased by the considerably lower prediction error curve for training interval tL =2,000 shown\nin Fig. 6.\nWhile the NMSPE is useful for characterizing the average performance, network operators\nare also interested in the prediction accuracy over the entire range of delay values. Towards\nthis end, Fig. 7 shows the scatter plots of \u0177s\u0304 (t) versus ys\u0304 (t) for all t and S = 30 optimally\nselected paths. The points cluster around the 45-degree line \u0177s\u0304 (t) = ys\u0304 (t), and the thinner the\n\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n20\n\n2\n\nNMSPE\n\n10\n\n1\n\n10\n\nKriging\nWavelets\nKKF\n10\n\nFig. 5.\n\n20\n\n30\n\n40\nS\n\n50\n\n60\n\n70\n\nNMSPE as a function of S, NZ-AMP network with random path selection.\n\n\"cloud\" of points is, the more accurate the estimates are. Indeed, it can be seen that the points\ngenerated from the KKF estimates are crammed in a very close area around the 45-degree line,\nand accurate estimates are produced for the entire range of experienced delays. Furthermore, the\nscatter plots corroborate the unbiasedness of the KKF predictor.\nVI. C ONCLUSION\nThe present paper develops a spatio-temporal prediction approach to track and predict networkwide path delays using measurements on only a few paths. The proposed algorithm adapts a\nkriged Kalman filter that exploits both topological as well as historical data. The framework also\nallows for the use of submodular optimization in the selection of optimal delay measurement\nlocations. The problem of path selection is formulated for different types of constraints on the set\nof selected paths, and solved in an online fashion to near-optimality. The resulting predictor is\nvalidated on two datasets with different delay profiles, and is shown to substantially outperform\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n21\n\n2\n\nNMSPE\n\n10\n\n1\n\n10\n\nKriging\nWavelets, \u03c4 = 1\nWavelets, \u03c4 = 5\nKKF, t = 1000\n\n0\n\nT\n\n10\n\nKKF, t = 2000\nT\n\n10\n\nFig. 6.\n\n20\n\n30\n\n40\nS\n\n50\n\n60\n\n70\n\nNMSPE as a function of S, NZ-AMP network with optimal path selection.\n\ncompeting alternatives.\nA PPENDIX A\nE RROR\n\nCOVARIANCE MATRIX\n\nTowards deriving an expression for Mys\u0304 (t), observe that the prediction error can be written as\nys\u0304 (t) \u2212 \u0177s\u0304 (t) = S\u0304(t)\u03c7(t) + S\u0304(t)\u03bd(t) + \u01ebs\u0304 (t) \u2212 S\u0304(t)\u03c7\u0302(t)\n\u0001\u22121\n\u2212 S\u0304(t)C\u03bd ST (t) S(t)C\u03bd ST (t) + \u03c3 2 IS\n[ys (t) \u2212 S(t)\u03c7\u0302(t)]\n\n(27)\n\n= S\u0304(t)(\u03c7(t) \u2212 \u03c7\u0302(t) + \u03bd(t)) + \u01ebs\u0304 (t)\n\n\u2212 S\u0304(t)C\u03bd ST (t) S(t)C\u03bd ST (t) + \u03c3 2 IS\n\nAugust 20, 2018\n\n\u0001\u22121\n\n[S(t)(\u03c7(t) \u2212 \u03c7\u0302(t) + \u03bd(t)) + \u01ebs (t)] .\n(28)\n\nDRAFT\n\n\f22\n\n300\n\n300\n\n250\n\n250\nPredicted delay (ms)\n\nPredicted delay (ms)\n\nIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n200\n150\n100\n50\n0\n\n200\n150\n100\n50\n\n0\n\n50\n\n100\n150\n200\nTrue delay (ms)\n\n250\n\n300\n\n0\n\n0\n\n50\n\n(a) Kriging\n\n100\n150\n200\nTrue delay (ms)\n\n250\n\n300\n\n(b) Wavelets\n300\n\nPredicted delay (ms)\n\n250\n200\n150\n100\n50\n0\n\n0\n\n50\n\n100\n150\n200\nTrue delay (ms)\n\n250\n\n300\n\n(c) KKF\nFig. 7.\n\nScatter plot for the NZ-AMP network, S = 30 with optimal path selection.\n\nUsing (5a), the term \u03c7(t) \u2212 \u03c7\u0302(t) can be written as\n\u03c7(t) \u2212 \u03c7\u0302(t) = \u03c7(t) \u2212 \u03c7\u0302(t \u2212 1) \u2212 K(t) [S(t)(\u03c7(t) + \u03bd(t)) + \u01ebs (t) \u2212 S(t)\u03c7\u0302(t \u2212 1)]\n= \u03c7(t) \u2212 \u03c7\u0302(t \u2212 1) + K(t)S(t)(\u03c7(t) \u2212 \u03c7\u0302(t \u2212 1) + \u03bd(t)) + K(t)\u01ebs (t)\n= (IP \u2212 K(t)S(t))\u03c7\u0303(t) \u2212 K(t)S(t)\u03bd(t) \u2212 K(t)\u01ebs (t)\n\n(29)\n\nwhere \u03c7\u0303(t) := \u03c7(t) \u2212 \u03c7\u0302(t \u2212 1). Substituting (29) in (28), it follows that\nys\u0304 (t) \u2212 \u0177s\u0304 (t) = S\u0304(t)(IP \u2212 K(t)S(t))(\u03c7\u0303(t) + \u03bd(t)) \u2212 S\u0304(t)K(t)\u01ebs (t) + \u01ebs\u0304 (t)\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n23\n\n\u2212 S\u0304(t)C\u03bd ST (t) S(t)C\u03bd ST (t) + \u03c3 2 IS\n\n\u0001\u22121\n\n\u00d7 [S(t)(IP \u2212 K(t)S(t))(\u03c7\u0303(t) + \u03bd(t)) \u2212 S(t)K(t)\u01ebs (t) + \u01ebs (t)]\n\n(30)\n\n= S\u0304(t)(IP \u2212 K(t)S(t))(\u03c7\u0303(t) + \u03bd(t))\n\u2212 S\u0304(t)C\u03bd ST (t) S(t)C\u03bd ST (t) + \u03c3 2 IS\n\n\u0001\u22121\n\nS(t)(IP \u2212 K(t)S(t))(\u03c7\u0303(t) + \u03bd(t))\n\u0001\u22121\n\u2212 S\u0304(t)K(t)\u01ebs (t) \u2212 S\u0304(t)C\u03bd ST (t) S(t)C\u03bd ST (t) + \u03c3 2 IS\n(IS \u2212 S(t)K(t))\u01ebs (t)\n+ \u01ebs\u0304 (t)\n\n(31)\n\nwhich, after some manipulations, can be expressed as\nys\u0304 (t) \u2212 \u0177s\u0304 (t) = S\u0304(t)(IP \u2212 Q(t)S(t))(\u03c7\u0303(t) + \u03bd(t)) + Q(t)\u01ebs (t) + \u01ebs\u0304 (t)\n\n(32)\n\nwhere\nQ(t) := K(t) + C\u03bd S(t)(S(t)C\u03bd ST (t) + \u03c3 2 IS )\u22121 \u2212 C\u03bd S(t)(S(t)C\u03bd ST (t) + \u03c3 2 IS )\u22121 S(t)K(t).\n(33)\nNext, substituting for K(t) from (6), the expression for Q(t) simplifies to\n\u0002\n\u0003\u22121\nQ(t) = (M(t \u2212 1) + C\u03b7 )ST (t) S(t)(M(t \u2212 1) + C\u03b7 + C\u03bd )ST (t) + \u03c3 2 IS\n+ C\u03bd ST (t)(S(t)C\u03bd ST (t) + \u03c3 2 IS )\u22121\n\n\u2212 C\u03bd ST (t)(S(t)C\u03bd ST (t) + \u03c3 2 IS )\u22121 S(t)(M(t \u2212 1) + C\u03b7 )ST (t)\n\u0002\n\u0003\u22121\n\u00d7 S(t)(M(t \u2212 1) + C\u03b7 + C\u03bd )ST (t) + \u03c3 2 IS\n\u0002\n\u0003\u22121\n= (M(t \u2212 1) + C\u03b7 + C\u03bd )ST (t) S(t)(M(t \u2212 1) + C\u03b7 + C\u03bd )ST (t) + \u03c3 2 IS\n.\n\n(34)\n(35)\n\n\u0002\n\u0003\nUtilizing the fact that \u03c7\u0303(t), \u03bd(t), \u01ebs (t), and \u01ebs\u0304 (t) are mutually uncorrelated, with E \u03c7\u0303(t)\u03c7\u0303T (t) :=\n\nM(t \u2212 1) + C\u03b7 , the error covariance matrix Mys\u0304 (t) becomes\n\u0002\n\u0003\nMys\u0304 (t) = E (ys\u0304 (t) \u2212 \u0177s\u0304 (t))(ys\u0304 (t) \u2212 \u0177s\u0304 (t))T\n\n(36)\n\n+ \u03c3 2 S\u0304(t)Q(t)QT (t)S\u0304T (t) + \u03c3 2 IP \u2212S\n\n(37)\n\n= S\u0304(t)(IP \u2212 Q(t)S(t))(M(t \u2212 1) + C\u03bd + C\u03b7 )(IP \u2212 ST (t)QT (t))S\u0304T (t)\n\n= S\u0304(t)(M(t \u2212 1) + C\u03bd + C\u03b7 )S\u0304T (t) \u2212 2S\u0304(t)Q(t)S(t)(M(t \u2212 1) + C\u03bd + C\u03b7 )S\u0304T (t)\n\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n24\n\n+ S\u0304(t)Q(t)S(t)(M(t \u2212 1) + C\u03b7 + C\u03bd )ST (t)QT (t)S\u0304T (t) + \u03c3 2 S\u0304(t)Q(t)QT (t)S\u0304T (t)\n+ \u03c3 2 IP \u2212S\n\n(38)\n\n= S\u0304(t)(M(t \u2212 1) + C\u03bd + C\u03b7 )S\u0304T (t) \u2212 S\u0304(t)Q(t)S(t)(M(t \u2212 1) + C\u03bd + C\u03b7 )S\u0304T (t)\n+ \u03c3 2 IP \u2212S .\n\n(39)\n\nSubstituting for Q(t) [cf. (35)] in (39), and using the Woodbury matrix identity [32], the final\nexpression for Mys\u0304 (t) becomes\nMys\u0304 (t)\n\n2\n\n= \u03c3 IP \u2212S + S\u0304(t)\n\n\u0014\n\nM(t \u2212 1) + C\u03bd + C\u03b7\n\n\u0001\u22121\n\n1\n+ 2 ST (t)S(t)\n\u03c3\n\n\u0015\u22121\n\nS\u0304T (t) .\n\n(40)\n\nA PPENDIX B\nP ROOF\nLet \u03a6 :=\n\n1\n(M(t\n\u03c32\n\nOF MONOTONICITY AND SUPERMODULARITY OF\n\nf\n\n\u2212 1) + C\u03b7 + C\u03bd ), and observe that f can be written as\n\n\u0002\n\u0003\nf (S) = log(\u03c3 2 ) + log det IP \u2212S + S\u0304(\u03a6\u22121 + ST S)\u22121 S\u0304T\n\u0002\n\u0003\n= log(\u03c3 2 ) + log det IP + S\u0304T S\u0304(\u03a6\u22121 + ST S)\u22121\n\u0002\n\u0003\n\u0002\n\u0003\n= log(\u03c3 2 ) + log det \u03a6\u22121 + ST S + S\u0304T S\u0304 + log det (\u03a6\u22121 + ST S)\u22121\n\n(41a)\n(41b)\n(41c)\n\nwhere (41b) follows from Sylvester's theorem for determinants [32].\nObserving that S\u0304T S\u0304 + ST S = IP , it is possible to write f (S) as\n\u0001\nf (S) = log(\u03c3 2 ) + log det(\u03a6\u22121 + IP ) \u2212 log det \u03a6\u22121 + ST S .\n\n(42)\n\nNext, consider the decomposition \u03a6 = UUT , and define the shifted function\nh(S) := f (S) \u2212 log(\u03c3 2 ) \u2212 log det (\u03a6 + IP )\n\n(43a)\n\n= \u2212 log det(IP + ST S\u03a6)\n\u0002\n\u0003\n= \u2212 log det IS + (SU)(SU)T\n\n(43b)\n(43c)\n\nwhere Sylvester's theorem has again been used in (43c). Finally, it is well known that a function\nof the form log det(IP + (SU)T (SU)) is non-decreasing and submodular (see e.g., [25]), which\nallows one to deduce that f (S) is non-increasing and supermodular. Note further that the greedy\napproach from [27] can be used on h(S) by defining h(\u2205) = 0.\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n25\n\nR EFERENCES\n[1] H. Singhal and G. Michailidis, \"Structural models for dual modality data with application to network tomography,\" IEEE\nTrans. Inf. Theory, vol. 57, no. 8, pp. 5054\u20135071, Aug. 2011.\n[2] M. G. Rabbat, M. A. T. Figueiredo, and R. D. Nowak, \"Network inference from co-occurrences,\" IEEE Trans. Inf. Theory,\nvol. 54, no. 9, pp. 4053\u20134068, Sep. 2008.\n[3] B. D. Ripley, Spatial Statistics. John Wiley & Sons, 1981.\n[4] N. Cressie, \"The origins of kriging,\" Mathematical Geology, vol. 22, no. 3, pp. 239\u2013252, 1990.\n[5] D. B. Chua, E. D. Kolaczyk, and M. Crovella, \"Network kriging,\" IEEE J. Sel. Areas Commun., vol. 24, no. 12, pp.\n2263\u20132272, Dec. 2006.\n[6] M. Coates, Y. Pointurier, and M. Rabbat, \"Compressed network monitoring for IP and all-optical networks,\" in Proc. ACM\nInternet Measurement Conf., San Diego, CA, Oct. 2007.\n[7] W. Xu, E. Mallada, and A. Tang, \"Compressive sensing over graphs,\" in Proc. of IEEE INFOCOM, Shanghai, China, Apr.\n2011, pp. 2087\u20132095.\n[8] F. Dabek, R. Cox, F. Kaashoek, and R. Morris, \"Vivaldi: A decentralized network coordinate system,\" in Proc. of the ACM\nSIGCOMM, Portland, Oregon, USA, 2004, pp. 15\u201326.\n[9] Y. Liao, P. Geurts, and G. Leduc, \"Network distance prediction based on decentralized matrix factorization,\" in Proc. of\nIFIP Networking, Chennai, India, May 2010.\n[10] A. Lakhina, K. Papagiannaki, M. Crovella, C. Diot, E. D. Kolaczyk, and N. Taft, \"Structural analysis of network traffic\nflows,\" in Proc. of ACM SIGMETRICS, New York, NY, 2004, pp. 61\u201372.\n[11] C. J. Bovy, H. T. Mertodimedjo, G. Hooghiemstra, H. Uijterwaal, and P. van Mieghem, \"Analysis of end-to-end delay\nmeasurements in Internet,\" in Proc. Passive and Active Measurement Workshop, Fort Collins, CO, Apr. 2002.\n[12] K. V. Mardia, C. Goodall, E. J. Redfern, and F. J. Alonso, \"The Kriged Kalman filter,\" Test, vol. 7, no. 2, pp. 217\u2013285,\nDec. 1998.\n[13] C. K. Wikle and N. Cressie, \"A dimension-reduced approach to space-time Kalman filtering,\" Biometrika, vol. 86, no. 4,\npp. 815\u2013829, 1999.\n[14] S.-J. Kim, E. Dall'Anese, and G. B. Giannakis, \"Cooperative spectrum sensing for cognitive radios using Kriged Kalman\nfiltering,\" IEEE J. Sel. Topics Signal Process., vol. 5, no. 1, pp. 24\u201336, Feb. 2011.\n[15] J. Cort\u00e9s, \"Distributed Kriged Kalman filter for spatial estimation,\" IEEE Trans. Auto. Contr., vol. 54, no. 12, pp. 2816\u2013\n2827, Dec. 2009.\n[16] B. D. O. Anderson and J. B. Moore, Optimal Filtering. Englewood Cliffs, NJ: Prentice-Hall, 1979.\n[17] P. Casas, S. Vaton, L. Fillatre, and T. Chonavel, \"Efficient methods for traffic matrix modeling and on-line estimation in\nlarge-scale ip networks,\" in Proc. of the 21st Intl. Teletraffic Congress, Paris, France, 2009, pp. 45\u201354.\n[18] E. Dall'Anese, S.-J. Kim, and G. Giannakis, \"Channel gain map tracking via distributed kriging,\" IEEE Trans. Veh. Technol.,\nvol. 60, no. 3, pp. 1205\u20131211, Mar. 2011.\n[19] I. D. Schizas, A. Ribeiro, and G. B. Giannakis, \"Consensus in ad hoc WSNs with noisy links - part I: Distributed estimation\nof deterministic signals,\" IEEE Trans. Signal Process., vol. 56, no. 1, pp. 350\u2013364, Jan. 2008.\n\nAugust 20, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON INFORMATION THEORY (SUBMITTED)\n\n26\n\n[20] R. Mehra, \"On the identification of variances and adaptive Kalman filtering,\" IEEE Trans. Autom. Control, vol. 15, no. 2,\npp. 175\u2013184, Apr. 1970.\n[21] K. Myers and B. Tapley, \"Adaptive sequential estimation with unknown noise statistics,\" IEEE Trans. Autom. Control,\nvol. 21, no. 4, pp. 520\u2013523, Aug. 1976.\n[22] M. K. Tsatsanis and G. B. Giannakis, \"Modeling and equalization of rapidly fading channels,\" Intl. J. Adaptive Control\nand Signal Process., vol. 10, no. 2-3, pp. 159\u2013176, 1996.\n[23] M. K. Tsatsanis, G. B. Giannakis, and G. Zhou, \"Modeling and equalization of rapidly fading channels,\" Signal Process.,\nvol. 53, no. 2-3, pp. 211\u2013229, 1996.\n[24] C. M. Bishop, Pattern Recognition and Machine Learning.\n\nSpringer, New York, 2006.\n\n[25] F. Bach, \"Learning with submodular functions: A convex optimization perspective,\" Foundations and Trends in Machine\nLearning, 2012. [Online]. Available: http://arxiv.org/abs/1111.6453\n[26] A. Das and D. Kempe, \"Algorithms for subset selection in linear regression,\" in Proc. of the ACM Symp. on Theory of\nComputing, Victoria, British Columbia, Canada, May 2008, pp. 45\u201354.\n[27] G. L. Nemhauser, L. A. Wolsey, and M. L. Fisher, \"An analysis of approximations for maximizing submodular set functions\n- I,\" Mathematical Programming, no. 1, pp. 265\u2013294, Dec. 1978.\n[28] M. Minoux, \"Accelerated greedy algorithms for maximizing submodular set functions,\" in Optimization Techniques, ser.\nLecture Notes in Control and Information Sciences, J. Stoer, Ed. Springer Berlin / Heidelberg, 1978, vol. 7, pp. 234\u2013243.\n[29] M. L. Fisher, G. L. Nemhauser, and L. A. Wolsey, \"An analysis of approximations for maximizing submodular set functions\n- II,\" Mathematical Programming Study, pp. 73\u201387, 1978.\n[30] R. R. Coifman and M. Maggioni, \"Diffusion wavelets,\" Applied and Computational Harmonic Analysis, vol. 21, no. 1,\npp. 53\u201394, 2006.\n[31] R. Sinkhorn, \"A relationship between arbitrary positive matrices and doubly stochastic matrices,\" The Annals of\nMathematical Statistics, vol. 35, no. 2, pp. 876\u2013879, 1964.\n[32] G. H. Golub and C. F. V. Loan, Matrix Computations, 3rd ed.\n\nAugust 20, 2018\n\nJohns Hopkins University Press, 1996.\n\nDRAFT\n\n\f"}