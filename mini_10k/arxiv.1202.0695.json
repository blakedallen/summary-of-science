{"id": "http://arxiv.org/abs/1202.0695v1", "guidislink": true, "updated": "2012-02-03T13:19:43Z", "updated_parsed": [2012, 2, 3, 13, 19, 43, 4, 34, 0], "published": "2012-02-03T13:19:43Z", "published_parsed": [2012, 2, 3, 13, 19, 43, 4, 34, 0], "title": "The Game of Pure Strategy is solved!", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1202.6096%2C1202.5711%2C1202.1920%2C1202.2516%2C1202.3011%2C1202.4209%2C1202.2532%2C1202.4529%2C1202.4819%2C1202.5328%2C1202.1662%2C1202.0042%2C1202.2647%2C1202.0835%2C1202.0785%2C1202.4688%2C1202.5073%2C1202.3969%2C1202.3072%2C1202.2724%2C1202.1342%2C1202.3037%2C1202.4946%2C1202.3561%2C1202.3699%2C1202.1323%2C1202.0052%2C1202.0097%2C1202.1028%2C1202.3260%2C1202.3124%2C1202.1990%2C1202.4734%2C1202.1235%2C1202.2008%2C1202.0573%2C1202.4873%2C1202.4519%2C1202.6322%2C1202.3064%2C1202.3313%2C1202.4848%2C1202.0687%2C1202.0968%2C1202.5871%2C1202.4921%2C1202.2716%2C1202.3838%2C1202.1256%2C1202.6486%2C1202.4558%2C1202.5330%2C1202.3871%2C1202.2001%2C1202.6310%2C1202.3484%2C1202.4988%2C1202.3453%2C1202.2723%2C1202.1927%2C1202.1458%2C1202.2504%2C1202.2707%2C1202.2315%2C1202.3065%2C1202.2793%2C1202.2598%2C1202.4493%2C1202.3788%2C1202.4339%2C1202.4589%2C1202.3696%2C1202.0149%2C1202.2884%2C1202.0176%2C1202.1894%2C1202.6389%2C1202.2085%2C1202.2605%2C1202.3302%2C1202.0349%2C1202.5809%2C1202.5688%2C1202.0517%2C1202.0552%2C1202.1918%2C1202.5211%2C1202.2583%2C1202.2854%2C1202.4578%2C1202.6082%2C1202.2648%2C1202.5457%2C1202.0695%2C1202.2689%2C1202.3823%2C1202.4068%2C1202.6414%2C1202.3473%2C1202.2163%2C1202.4439&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The Game of Pure Strategy is solved!"}, "summary": "We solve the classical \"Game of Pure Strategy\" using linear programming. We\nnotice an intricate even-odd behavior in the results of our computations, that\nseems to encourage odd or maximal bids.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1202.6096%2C1202.5711%2C1202.1920%2C1202.2516%2C1202.3011%2C1202.4209%2C1202.2532%2C1202.4529%2C1202.4819%2C1202.5328%2C1202.1662%2C1202.0042%2C1202.2647%2C1202.0835%2C1202.0785%2C1202.4688%2C1202.5073%2C1202.3969%2C1202.3072%2C1202.2724%2C1202.1342%2C1202.3037%2C1202.4946%2C1202.3561%2C1202.3699%2C1202.1323%2C1202.0052%2C1202.0097%2C1202.1028%2C1202.3260%2C1202.3124%2C1202.1990%2C1202.4734%2C1202.1235%2C1202.2008%2C1202.0573%2C1202.4873%2C1202.4519%2C1202.6322%2C1202.3064%2C1202.3313%2C1202.4848%2C1202.0687%2C1202.0968%2C1202.5871%2C1202.4921%2C1202.2716%2C1202.3838%2C1202.1256%2C1202.6486%2C1202.4558%2C1202.5330%2C1202.3871%2C1202.2001%2C1202.6310%2C1202.3484%2C1202.4988%2C1202.3453%2C1202.2723%2C1202.1927%2C1202.1458%2C1202.2504%2C1202.2707%2C1202.2315%2C1202.3065%2C1202.2793%2C1202.2598%2C1202.4493%2C1202.3788%2C1202.4339%2C1202.4589%2C1202.3696%2C1202.0149%2C1202.2884%2C1202.0176%2C1202.1894%2C1202.6389%2C1202.2085%2C1202.2605%2C1202.3302%2C1202.0349%2C1202.5809%2C1202.5688%2C1202.0517%2C1202.0552%2C1202.1918%2C1202.5211%2C1202.2583%2C1202.2854%2C1202.4578%2C1202.6082%2C1202.2648%2C1202.5457%2C1202.0695%2C1202.2689%2C1202.3823%2C1202.4068%2C1202.6414%2C1202.3473%2C1202.2163%2C1202.4439&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We solve the classical \"Game of Pure Strategy\" using linear programming. We\nnotice an intricate even-odd behavior in the results of our computations, that\nseems to encourage odd or maximal bids."}, "authors": ["Glenn C. Rhoads", "Laurent Bartholdi"], "author_detail": {"name": "Laurent Bartholdi"}, "author": "Laurent Bartholdi", "links": [{"title": "doi", "href": "http://dx.doi.org/10.3390/g3040150", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1202.0695v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1202.0695v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.GT", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.GT", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1202.0695v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1202.0695v1", "arxiv_comment": null, "journal_reference": "Games 3 (2012) 150--156", "doi": "10.3390/g3040150", "fulltext": "THE GAME OF PURE STRATEGY IS SOLVED!\n\narXiv:1202.0695v1 [cs.GT] 3 Feb 2012\n\nGLENN C. RHOADS AND LAURENT BARTHOLDI\nAbstract. We solve the classical \"Game of Pure Strategy\" using linear programming. We notice an intricate even-odd behavior in the results of our\ncomputations, that seems to encourage odd or maximal bids.\n\n1. Introduction\nSimple, two-player games are important models for human decision making; they\nshould have sufficiently elementary rules that they can be studied both theoretically\nand empirically, yet be sufficiently rich to involve a non-trivial amount of human\npsychological experience.\nWe study, and solve numerically, the \"Game of Pure Strategy\", a model of\ndecision making based on bidding. It is an important paradigm in game theory,\nbecause it can easily be shown (see below) that no deterministic strategy may\nsucceed.\nWe notice, in the numerical data, that the parity of the bid is often more important than its actual value. This echoes a known recommendation for online bidding\n(in which the bidding amounts are less restricted than in room bidding): the website www.bidnapper.com recommends to its customers to \"Bid in odd amounts.\nMany novices bid in rounded numbers.\"\nThe computations were made with the help of the RRZN in Hannover, whose\nsupport is gratefully acknowledged.\n2. The Game of Pure Strategy\nGoofspiel, also called Game of Pure Strategy (GOPS) is a two person game.\nTake a standard 52 card deck and discard all of the cards of one suit. The cards\nof one suit are given to one player, the cards of another suit are given to the other\nplayer, and the cards in the remaining suit are shuffled and placed face down in the\nmiddle. The cards are valued from low to high as ace=1, 2, 3, . . . , 10, jack=11,\nqueen=12, and king=13.\nA round consists of turning up the next card from the middle pile and then the\ntwo players 'bet' on the upturned card, each player choosing one card and then\nsimultaneously displaying it to the other player. The player showing the highest\ncard wins the value of the upturned card. If both players display the same card, the\npoint value is split between the two players. These three cards are then discarded.\nThe game ends after 13 rounds and the winner is the person who obtained the most\npoints (you need 46 or better to win).\nThough the mechanics of the game are simple, the strategy is not. Suppose for\nexample that the king is the upturned card in the first round. Further suppose that\nDate: February 2, 2012.\n1\n\n\f2\n\nGLENN C. RHOADS AND LAURENT BARTHOLDI\n\nyou choose to bet one (i.e. the ace). When you turn your card up, you found out\nthat your opponent bet his king winning 13 points. You are happy with this result\nbecause you now have 12 more betting points which should more than make up for\nthe lost 13 points. In fact, it is possible that you could win every remaining point by\nalways betting one more than your opponent (though of course that would require\ncheating, by knowing in advance what your opponent is going to bet). However,\nyou are taking a chance by betting only one: if your opponent had bet a two or\nthree, then she would have won 13 points at almost no cost. When playing the game\nyou are trying to outguess your opponent while your opponent is trying to outguess\nyou: you find yourself reasoning along lines such as \"my opponent is probably going\nto play X so I should play Y , but he may see through this and instead play Z to\ndefeat Y so maybe I should play W instead.\"\n\n3. Solving GOPS\nTo make use of game theory, we use an equivalent scoring system: the player\nwith the higher card wins from the opponent the value of the upturned card, or\nwins nothing in the event of a tie. The game is now a two-person zero-sum game\nthat can be represented by a matrix with one row for each possible play of player\none and one column for each possible play of player two. The i, j'th entry of the\nmatrix is the value of the game to player one when player one makes his i'th play\nwhile player two makes her j'th play (such a formulation is called a matrix game).\nIt is not hard to see that you should not choose a deterministic strategy. In\nfact, every deterministic strategy A can be defeated as follows. Use strategy A\nto find the card that my opponent is going to play. If my opponent is going to\nplay a King, play the ace. Otherwise play the card that is one higher than my\nopponent's choice. This counterstrategy will win every round except one resulting\nin a trouncing. Instead your strategy should have some random variations where\nyou play particular cards with some probability.\nHow difficult is it to analyze this game? Suppose the cards are valued from 1\nthrough N . The number of distinct ways that the middle suit could be ordered\nand the number of distinct betting sequences for each player is N factorial. Hence,\nthe number of possible ways of playing out a game is f (N ) = (N !)3 . Analysis of\nGOPS, along these lines, would require consideration, for N = 13, of 2.4 \u00d7 1029\nvariations, a number clearly beyond computational possibilities.\nTo our knowledge, the game had never been previously analyzed beyond N = 5,\nsee [Kerr (online)]. There is a way to signficantly reduce the number of games\nneeded to be analyzed. Sheldon Ross [Ross (1971)] describes a recursive rule expressing the value of a game as a function of the values of smaller games. We give\na further simplification of his rule.\nLet f (V, Y, P ) be the value for player one of the game in which V is the set of\ncards player one has in his hand, Y is the set of cards player two has in her hand,\nand P is the set of cards in the deck. Further, for Pk \u2208 P , let fk (V, Y, P ) be the\nvalue for player one of that game, once the upcard Pk has been revealed. Clearly\nf (V, Y, P ) is the average of the fk (V, Y, P ):\nf (V, Y, P ) =\n\n1 X\nfk (V, Y, P ).\n|P |\nPk \u2208P\n\n\fTHE GAME OF PURE STRATEGY IS SOLVED!\n\n3\n\nSuppose |V | = |Y | = |P | = N . Then fk (V, Y, P ) is expressed as the value of the\nN \u00d7 N game whose payoff matrix [Xij ] is\nXij = Pk sign(Vi \u2212 Yj ) + f (V \\ {Vi }, Y \\ {Yj }, P \\ {Pk });\nhere\n\uf8f1\n\uf8f4\n\uf8f21\nsign(x) = 0\n\uf8f4\n\uf8f3\n\u22121\n\nif x > 0,\nif x = 0,\nif x < 0.\n\nIn english, this self-evident rule says the value of the game when player one plays\nVi and player two plays Yj is the value of the upturned card that is won or lost,\nplus the average value of the remaining game where the average is taken over all\npossible remaining upturned cards.\nBlindly applying this rule results in a straightforward recursive program; however, evaluation of f (V, Y, P ) on sets of cardinality N requires N 3 evaluations of f\non sets of cardinality N \u2212 1, leading again to the (N !)3 complexity estimate.\nTo avoid this issue, we use a bottom-up approach storing the values f (V, Y, P )\nof the subgames as we go. We use these stored values when computing the larger\nsubgames. Using this technique, called dynamic programming, we compute the\nvalue of each subgame only once. For an initial N \u00d7 N game, this reduces the\n\u00013\nPN\nnumber of subgames we need to solve and store to j=0 j Nj , a much more feasible\nnumber. Furthermore, we may use the symmetry between players one and two to\ngain an extra factor of two, since f (V, Y, P ) = \u2212f (Y, V, P ) and f (V, V, P ) = 0;\nand at each step of the algorithm we only need to store in memory the values of\nf (V, Y, P ) for a given value of j. On a large computer with 1TB core memory, the\ngame is then solvable up to N = 16.\nLinear programs. If all values f (V, Y, P ) are known, it is then easy to compute\nthe optimal playing strategy. Let us say that the remaining cards are V, Y, P respectively for player one, player two and the deck, and that Pk \u2208 P has been turned up.\nRecall the payoff matrix [Xij ] from the previous subsection. The optimal strategy,\nfor player one, will take the form of an list of probabilities xi of playingPcard Vi .\nAssuming that player two plays optimally, we want to maximize minj i xi Xij ;\nnamely, we want to maximize the outcome, allowing player two to make the best\nmove (= minimize the outcome) as long as she doesn't know our move. The solution\nis then a Nash equilibrium of the game.\nThis maximization problem is a linear program (LP), and we will solve it using linear programming tools. The classical reference [Dantzig (1963)] remains an\nexcellent introduction to linear programming. For example, suppose we have the\nfollowing 3 \u00d7 3 matrix game:\n\uf8ee\n\uf8f9\n1 \u22122\n3\n\uf8f0 \u22124\n5 \u22126 \uf8fb .\n7 \u22128\n9\nTo formulate this as a LP, we introduce the variables x1 , x2 , and x3 to represent\nthe probabilities with which player one should play columns 1, 2, and 3 respectively.\nWe also introduce the variable v to represent the value of the game. The LP\n\n\f4\n\nGLENN C. RHOADS AND LAURENT BARTHOLDI\n\nformulation of this game is as follows:\n\uf8f1\nx1\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f2 \u22122x1\n3x1\nmaximize v such that\n\uf8f4\n\uf8f4\nx1\n\uf8f4\n\uf8f4\n\uf8f3\nx1\n\n\u2212 4x2\n+ 5x2\n\u2212 6x2\n+ x2\n,\nx2\n\n+ 7x3\n\u2212 8x3\n+ 9x3\n+ x3\n,\nx3\n\n\u2212\n\u2212\n\u2212\n\nv\nv\nv\n\n\u2265\n\u2265\n\u2265\n=\n\u2265\n\n0,\n0,\n0,\n1,\n0.\n\nThe last two constraint rows are needed to ensure that x1 , x2 , and x3 form a\nprobability distribution. The variable v is unrestricted. Note that we are maximizing the expected profit, and not the probability of winning. If we are playing\nfor money, and there is some agreed-upon amount per point won, then this is the\noptimal strategy. If, however, we want to maximize the probability of winning, and\nnot the amount won, then the results may be different.\nIndeed, suppose the remaining cards are queen, king, player one has 2, 4 in his\nhand, and player two has ace, 3 in her hand. Player one can guarantee victory by\nalways playing 4 when the king shows up, but by doing so forfeits the chance of\nwinning both last cards, so guarantees a win by only one point. Playing either card\nwith same probability gives him an average gain of 12.5 (the optimal strategy is to\nplay high with 52% probability on the king, resulting in an average gain of 12.52).\nThere is a single 0 \u00d7 0 game, whose value is 0, and it may be used to start the\ninduction with f (\u2205, \u2205, \u2205) = 0. We note that, up to 2 \u00d7 2 games, the results are easily\ncomputed by hand. Trivially, a 1 \u00d7 1 game is won by the player having the largest\ncard. Consider the following 2 \u00d7 2 matrix game:\n\u0014\n\u0015\na b\nc d\nIf a value is a minimum value in its column and a maximum value in its row,\nthen it is a saddle point. If the game has a saddle point, then the value of the game\nis the value of a saddle point entry (there may be more than one saddle point). If\nthe game has no saddle point, then the value of the game is (ad \u2212 bc)/(a \u2212 b \u2212 c + d).\nThe formulation of a matrix game as a LP and the solution to 2 \u00d7 2 matrix games\ncan be found in many sources (e.g. [Mendelson (2004)]).\n4. Results\nWe have computed the winning strategies for N = 13 using the method described\nin the previous section: for each triple V, Y, P of subsets of {1, . . . , 13} of same\ncardinality, we have computed the value f (V, Y, P ) of the corresponding game, and\nhave computed the probability arrays xki with which card Vi should be played if\nthe upcard is Pk .\nBecause of its formulation as a maximization of a piecewise-linear function, these\nprobabilities are rational numbers. We shall argue that their denominators are so\nlarge as to make exact computations pointless.\n4.1. Implementation. We use the publicly available GLPK linear programming\nsolver to solve repeatedly the matrix games. This package implements the simplex\nalgorithm both in floating-point and multi-precision rational arithmetic.\nIn our computer program, we represent the card sets by bit-vectors. To conserve\nspace, we use a perfect hash table, that is a table whose entries correspond bijectively\nto subgames. The subgames are stored in lexicographic order; each subgame is\n\n\fTHE GAME OF PURE STRATEGY IS SOLVED!\n\n5\n\nrepresented by the concatenation of the representations of player 1's hand, player\n2's hand, and the deck. When we need the value of a previously computed subgame,\nwe compute its position in our ordering and grab the corresponding entry from the\ntable. In our dynamic programming method, we compute subgames in increasing\nsize of hands. To conserve space, we only store the results of the subgames of the\ncurrent size we are working on and the subgames of the next smaller size. This is\npossible because the value of a subgame is needed only when computing the values\nof subgames of the next larger size.\nThe results don't get interesting until N = 5. There, in the initial position, the\noptimal betting strategies, rounded to four digits, are\nTable 1. Optimal strategy at the first move, N = 5\n\nupcard\n1\n2\n3\n4\n5\n\n1\n2\n3\n4\n5\n0.0470 0.1855 0.1182 0.1226 0.1123\n0.8327\n0 0.1188 0.07347 0.0241\n0.1203 0.7375\n0 0.1915\n0\n0 0.0770 0.7630 0.2043\n0\n0\n0\n0 0.4081 0.8636\n\nThe exact values, as pointed before, are prohibitively long to write down. For\nexample, the top entry 0.0470 is really\n5306287082133275981487303358632452609704399851215456295628045583\n1875882988814425504038999635791836938252991208618766205613347715\n8328568084730206912059640079498714570709437787806964249018639429\n44810525052774918079399954562997646185715598682274851480804900 /\n1129268720669360758902051860285520214948806792442363910626460283\n5249749724573405290487422550704989332508431906657764350941879381\n7660750019182194563647083966290489533469158285998067618020193436\n7037256681898791738381922918288920527729219085504200644992335857\nWe have computed the exact values up to N = 7; the numerators and denominators of the optimal probabilities have approximately one million digits.\nThere are only a few general patterns in this table (and in the corresponding ones\nfor N = 6, . . . , 12 that we do not display). If the upcard is large, say > 3N/4, then\nit seems one should not bet a card < N/2 and of opposite parity. Counterintuitively,\nsometimes one should bet more than double the upcard. Also, when the initial card\nis N , it seems that one should never bet N \u2212 1 nor N \u2212 2. However, it is striking\nthat, in the last column, odd bets are consistently (up to i = 10) to be preferred\nto even bets; and that, in general, one should bet a card of the same parity as the\nupcard.\n5. Outlook\nThe first author made a version of the program that stored the actual probability\nvectors associated with the optimal strategies. These strategies were then used in a\nsimple program that actually played the 9-card game. Despite the counterintuitive\nnature of these results, the computer player did win the majority of the games.\nIf you are trying to maximize the probability of winning instead of amount won,\n\n\f6\n\nGLENN C. RHOADS AND LAURENT BARTHOLDI\n\nTable 2. Optimal strategy at the first move, N = 13\n\nupcard\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n1\n0\n.414\n.090\n.496\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n2\n0\n.227\n.022\n.299\n.098\n.355\n0\n0\n0\n0\n0\n0\n0\n\n3\n.052\n0\n.178\n.034\n.230\n.092\n.274\n.139\n0\n0\n0\n0\n0\n\n4\n.031\n.020\n.095\n.061\n.134\n.107\n.175\n.154\n.221\n0\n0\n0\n0\n\n5\n0\n.056\n.036\n.088\n.067\n.124\n.101\n.165\n.148\n.215\n0\n0\n0\n\n6\n0\n.073\n.002\n.098\n0\n.185\n.002\n.218\n.045\n.266\n.110\n0\n0\n\n7\n.020\n0\n.069\n0\n.124\n0\n.168\n.021\n.202\n0\n.397\n0\n0\n\n8\n0\n.034\n.021\n.054\n.039\n.077\n.060\n.103\n.092\n.144\n.151\n.226\n0\n\n9\n0\n.047\n.002\n.065\n0\n.120\n.001\n.142\n.029\n.177\n0\n.417\n0\n\n10\n0\n.036\n0\n.067\n0\n.098\n0\n.138\n.015\n.170\n.063\n.241\n.170\n\n11\n.014\n0\n.041\n0\n.080\n0\n.102\n.016\n.123\n0\n.253\n.023\n.348\n\n12\n0\n.030\n0\n.056\n0\n.082\n.008\n.099\n.028\n.124\n.065\n0\n.508\n\n13\n.010\n0\n.037\n0\n.065\n0\n.087\n0\n.126\n.013\n0\n0\n.661\n\nthen there is at least one weakness in the computed strategies. In the 9-card\ngame, suppose the initial upcard is a 9. The computer player will play a 9 with a\nprobability, rounded to four digits, of 0.7475. Now if you always play a 1, then nearly\n3/4 of the time you will gain an advantage (playing a 1 against the computer's 9 is\nto your advantage due to your increased betting strength for the remainder of the\ngame)! The computed strategies are optimizing the amount won not the probability\nof winning. When you play a 1 against the computed strategies, then in a minority\nof cases the computer will play a small value winning the 9 and gaining more of\nan advantage than you stand to get when the computer chooses to play a 9. The\noptimal strategies for maximizing the probability of winning are still unknown.\nWe have not been able to determine the exact value \u03b7 of an extra bidding chip,\nthough experimentation shows that, as R gets large, the values converge to the\nestimation 1 + 1/(2N \u2212 2), albeit very slowly.\nOur computer code was run on a 64-bit computer with 160 nodes and 640GB\ncore memory. It relies on the GLPK linear programming library. It is available, as\na C++ program, at\nhttp://www.uni-math.gwdg.de/laurent/gops.zip\nReferences\n[Dantzig (1963)] Dantzig, George B. Linear programming and extensions Princeton University\nPress, Princeton, N.J., 1963. xvi+625 pages.\n[Kerr (online)] David Kerr. http://home.netcom.com/ \u0303goldkerr/gops.htm\n[Mendelson (2004)] Elliott Mendelson. Introducing Game Theory and Its Applications Chapman\n& Hall/CRC, Washington D.C., 2004.\n[Ross (1971)] Sheldon M. Ross. Goofspiel: The Game of Pure Strategy. Journal of Applied Probability, Vol.8, No.3 (Sept.71), pp.621-25.\nGlenn C. Rhoads: University of Maryland, University College, 3501 University\nBlvd. East, Adelphi, MD 20783\nE-mail address: grhoads@faculty.umuc.edu\nLaurent Bartholdi: Bunsenstrasse 3-5, D-3703 G\u00f6ttingen, Germany\n\n\f"}