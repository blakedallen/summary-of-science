{"id": "http://arxiv.org/abs/0709.3079v2", "guidislink": true, "updated": "2008-07-02T21:33:30Z", "updated_parsed": [2008, 7, 2, 21, 33, 30, 2, 184, 0], "published": "2007-09-19T17:57:16Z", "published_parsed": [2007, 9, 19, 17, 57, 16, 2, 262, 0], "title": "Computing a pyramid partition generating function with dimer shuffling", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0709.3123%2C0709.3193%2C0709.2515%2C0709.1096%2C0709.3488%2C0709.4423%2C0709.2152%2C0709.1465%2C0709.0719%2C0709.2956%2C0709.2764%2C0709.1046%2C0709.2907%2C0709.1424%2C0709.3347%2C0709.0646%2C0709.1929%2C0709.0163%2C0709.4663%2C0709.1217%2C0709.3026%2C0709.1309%2C0709.1669%2C0709.4657%2C0709.1014%2C0709.4611%2C0709.0592%2C0709.1538%2C0709.3868%2C0709.2107%2C0709.1660%2C0709.3600%2C0709.3255%2C0709.3266%2C0709.0017%2C0709.2664%2C0709.1270%2C0709.1535%2C0709.0039%2C0709.0452%2C0709.3387%2C0709.3726%2C0709.3927%2C0709.1835%2C0709.3079%2C0709.2617%2C0709.1032%2C0709.0328%2C0709.0784%2C0709.4200%2C0709.0077%2C0709.4260%2C0709.3952%2C0709.3258%2C0709.2230%2C0709.2752%2C0709.2403%2C0709.2939%2C0709.1866%2C0709.4169%2C0709.0640%2C0709.0166%2C0709.0138%2C0709.4314%2C0709.1347%2C0709.0048%2C0709.0504%2C0709.1754%2C0709.4570%2C0709.3078%2C0709.1478%2C0709.4645%2C0709.3544%2C0709.1343%2C0709.2418%2C0709.1799%2C0709.0601%2C0709.1486%2C0709.1340%2C0709.3571%2C0709.3894%2C0709.1120%2C0709.3155%2C0709.2906%2C0709.1610%2C0709.2700%2C0709.1271%2C0709.4123%2C0709.3522%2C0709.2787%2C0709.1827%2C0709.1506%2C0709.1075%2C0709.0599%2C0709.2470%2C0709.4589%2C0709.1089%2C0709.1354%2C0709.0864%2C0709.3735%2C0709.2926&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Computing a pyramid partition generating function with dimer shuffling"}, "summary": "We verify a recent conjecture of Kenyon/Szendroi, arXiv:0705.3419, by\ncomputing the generating function for pyramid partitions. Pyramid partitions\nare closely related to Aztec Diamonds; their generating function turns out to\nbe the partition function for the Donaldson--Thomas theory of a non-commutative\nresolution of the conifold singularity {x1x2 -x3x4 = 0}. The proof does not\nrequire algebraic geometry; it uses a modified version of the domino shuffling\nalgorithm of Elkies, Kuperberg, Larsen and Propp.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0709.3123%2C0709.3193%2C0709.2515%2C0709.1096%2C0709.3488%2C0709.4423%2C0709.2152%2C0709.1465%2C0709.0719%2C0709.2956%2C0709.2764%2C0709.1046%2C0709.2907%2C0709.1424%2C0709.3347%2C0709.0646%2C0709.1929%2C0709.0163%2C0709.4663%2C0709.1217%2C0709.3026%2C0709.1309%2C0709.1669%2C0709.4657%2C0709.1014%2C0709.4611%2C0709.0592%2C0709.1538%2C0709.3868%2C0709.2107%2C0709.1660%2C0709.3600%2C0709.3255%2C0709.3266%2C0709.0017%2C0709.2664%2C0709.1270%2C0709.1535%2C0709.0039%2C0709.0452%2C0709.3387%2C0709.3726%2C0709.3927%2C0709.1835%2C0709.3079%2C0709.2617%2C0709.1032%2C0709.0328%2C0709.0784%2C0709.4200%2C0709.0077%2C0709.4260%2C0709.3952%2C0709.3258%2C0709.2230%2C0709.2752%2C0709.2403%2C0709.2939%2C0709.1866%2C0709.4169%2C0709.0640%2C0709.0166%2C0709.0138%2C0709.4314%2C0709.1347%2C0709.0048%2C0709.0504%2C0709.1754%2C0709.4570%2C0709.3078%2C0709.1478%2C0709.4645%2C0709.3544%2C0709.1343%2C0709.2418%2C0709.1799%2C0709.0601%2C0709.1486%2C0709.1340%2C0709.3571%2C0709.3894%2C0709.1120%2C0709.3155%2C0709.2906%2C0709.1610%2C0709.2700%2C0709.1271%2C0709.4123%2C0709.3522%2C0709.2787%2C0709.1827%2C0709.1506%2C0709.1075%2C0709.0599%2C0709.2470%2C0709.4589%2C0709.1089%2C0709.1354%2C0709.0864%2C0709.3735%2C0709.2926&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We verify a recent conjecture of Kenyon/Szendroi, arXiv:0705.3419, by\ncomputing the generating function for pyramid partitions. Pyramid partitions\nare closely related to Aztec Diamonds; their generating function turns out to\nbe the partition function for the Donaldson--Thomas theory of a non-commutative\nresolution of the conifold singularity {x1x2 -x3x4 = 0}. The proof does not\nrequire algebraic geometry; it uses a modified version of the domino shuffling\nalgorithm of Elkies, Kuperberg, Larsen and Propp."}, "authors": ["Benjamin Young"], "author_detail": {"name": "Benjamin Young"}, "author": "Benjamin Young", "arxiv_comment": "19 pages, 13 figures. v2: fixed minor typos, updated references and\n  future work; added some definitions to Section 6", "links": [{"href": "http://arxiv.org/abs/0709.3079v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0709.3079v2", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "math.CO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "math.CO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "math.AG", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "05A15", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0709.3079v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0709.3079v2", "journal_reference": null, "doi": null, "fulltext": "COMPUTING A PYRAMID PARTITION GENERATING FUNCTION\nWITH DIMER SHUFFLING\n\narXiv:0709.3079v2 [math.CO] 2 Jul 2008\n\nBEN YOUNG\nAbstract. We verify a recent conjecture of Kenyon/Szendr\u0151i by computing the generating\nfunction for pyramid partitions. Pyramid partitions are closely related to Aztec Diamonds;\ntheir generating function turns out to be the partition function for the Donaldson-Thomas\ntheory of a non-commutative resolution of the conifold singularity {x1 x2 \u2212 x3 x4 = 0} \u2282 C4 .\nThe proof does not require algebraic geometry; it uses a modified version of the domino\nshuffling algorithm of Elkies, Kuperberg, Larsen and Propp, [3].\n\n1. Introduction\nConsider the pyramid-shaped stack of square bricks shown in Figure 1. The bricks are the\nsame ones used to q-enumerate Aztec Diamonds in [3]: ridges on the top and bottom of the\nbricks restrict the manner in which the bricks may be stacked. Each brick rests upon two\nside-by-side bricks, and is rotated 90 degrees from the bricks immediately below it. We use\ntwo colors of bricks - light and dark - to make alternating layers of this pyramid, starting\nwith dark bricks at the pyramid's apex.\nIn Figure 1, there is a row of three dark bricks at the top of the pyramid. It is straightforward to build a similar pyramid with a row of n \u2265 1 bricks along the top. Following [6],\nwe make the following definitions:\nDefinition 1.1. The pyramid with a row of n dark bricks at the top is called the empty\nroom1 of length n, and is denoted \u03b5n .\nDefinition 1.2. A pyramid partition of length n is a finite subset \u03c0 of the bricks of \u03b5n such\nthat if B is a brick in \u03c0, then all of the bricks of \u03b5n which rest upon B are also in \u03c0. Let Pn\ndenote the set of all pyramid partitions of length n.\nDefinition 1.3. The weight of \u03c0, w0 (\u03c0), is\n#{dark bricks in \u03c0} #{light bricks in \u03c0}\nq1\n.\n\nq0\n\nIn other words, a pyramid partition is a collection of bricks removed from \u03b5n such that the\nremaining pile of bricks is stable. For our treatment, it is better to draw pyramid partitions\n1This\n\nadmittedly strange terminology is borrowed from the jargon of 3D partitions, which are made of stacks\nof boxes in the corner of a room. Here, the configuration of minimum weight is an empty room, with no\nboxes.\n1\n\n\fFigure 1: Special bricks, assembled into the configuration \u03b53 .\n\nby drawing the remaining pile of bricks. For an example of a pyramid partition drawn in\nthis way, see Figure 2. Note that \u03b5n is itself a pyramid partition of weight 1, for all n.\nThere is a third way to view a pyramid partition \u03c0, which is much more useful computationally. Recall that a dimer cover (or 1-factor ) of a graph G is a subgraph G\u2032 such that\nevery vertex of G\u2032 has degree 1. Each brick in \u03c0 has two dimers stencilled on the top; dark\nbricks have vertical (North-South) dimers, whereas light bricks have horizontal (East-West)\ndimers. When one views \u03c0 from above, one can see a dimer cover of the square lattice (see\nthe right-hand image in Figure 2). It is helpful to think of the lattice points as pairs of\nhalf-integers, so that the origin lies above the axis of symmetry of \u03b5n .\nSince every pyramid partition has only finitely many bricks, the dimer cover associated to\n\u03c0 looks like that of \u03b5n (see Figure 3) when one moves far enough from the origin. Indeed,\ngiven a dimer cover T of the square lattice which is asymptotically identical to \u03b5n , it is\nstraightforward to construct a corresponding pyramid partition which looks like T from\nabove. We shall therefore refer to these dimer configurations as pyramid partitions, as well.\nIn [6], Szendr\u0151i defines a bivariate generating function for Pn by\nX\n(n)\nw0 (\u03c0)\nZA (q0 , \u2212q1 ) =\n\u03c0\u2208Pn\n\n(1)\n\nand observes that ZA (q0 , q1 ) arises as the partition function for the Donaldson-Thomas\ntheory of a non-commutative resolution of the conifold singularity {x1 x2 \u2212 x3 x4 = 0} \u2282 C4 .\n2\n\n\fFigure 2: A pyramid partition of length 1, viewed from the side and from above\n\nSzendr\u0151i conjectures that\n(1)\n\n(n)\n\nZA (q0 , \u2212q1 ) = M(1, q0 q1 )2\n\nY\n\n(1 + q0k q1k\u22121 )k+n\u22121\n\nY\n\n(1 + q0k q1k+1)max(k\u2212n+1,0)\n\nk\u22651\n\nk\u22651\n\nwhere M(x, q) is the MacMahon function\nM(x, q) =\n\n\u221e \u0012\nY\n\nn=1\n\n1\n1 \u2212 xq n\n\n\u0013n\n\n.\n\nThis conjecture (or at least the special case q0 = q1 = q) was originally posed by Kenyon [4]\nWe present a proof of this conjecture. We first do the case n = 1, using a modification\nof the domino shuffling argument of [3], originally used to compute the weight generating\nfunction of an Aztec Diamond. Strikingly, this case uses the Donaldson-Thomas partition\nfunction of the resolution of this conifold, computed in [1].\nBefore we go any further, let us choose a more convenient notation.\nDefinition 1.4. Let\n(n)\n\nZ(n; q0 , q1 ) := ZA (q0 , \u2212q1 ) =\n\nX\n\nw0 (\u03c0);\n\n\u03c0\u2208Pn\n\nZ(\u221e; q0 , q1 ) := M(1, q0 q1 )2 M(\u2212q1\u22121 , q0 q1 )\u22121 .\nWe may now restate (and prove) Equation (1) for n = 1 in the following form:\nTheorem 1.5. Z(1; q0 , q1 ) = M(\u2212q1\u22121 , q0 q1 )\u22121 Z(\u221e; q0 , q1 ).\n3\n\n\fFigure 3: The empty rooms of lengths 1 and 2.\n\n(a) \u03b51\n\n(b) \u03b52\n\nWe have chosen the notation somewhat suggestively here. Our proof, very informally\nspeaking, is that domino shuffling transforms pyramid partitions of length n into pyramid\npartitions of length n + 1 in a weight-preserving manner (the transformation is not quite\nbijective). Repeating this procedure forever, we get \"pyramid partitions of length \u221e\".\nThese objects are easily weight-enumerated due to a surprising bijection with a type of 3D\npartitions which we have called super-rigid partitions (see Section 6). It is also possible to\nuse our methods to prove equation (1) for general n, which in our new notation looks like\nthis:\nY\nY\n(1 + q0k q1k\u22121 )k+n\u22121 (1 + q0k q1k+1 )max(k\u2212n+1,0)\n(2)\nZ(n; q0 , q1 ) = M(1, q0 q1 )2\nk\u22651\n\nk\u22651\n\nIn section 7, we shall outline how to modify our proof of Theorem 1.5 to handle this more\ngeneral case. The proof is relegated to a later section of the paper because it contains\nessentially no new combinatorial ideas (only greater complication) and because the n = 1\ncase is of greater geometric interest.\n\n2. Dimer Shuffling\nNext, we will describe the shuffling algorithm, originally published in [3]. We shall call\nthis algorithm dimer shuffling, rather than domino shuffling, since all of our pictures are of\ndimers, which are dual to the dominos of [3]. However, the shuffling algorithm is identical.\nWe review it here in order to define all of our terminology.\n4\n\n\fFigure 4:\nOdd\n\nEven\n\nS\n\nE\n\nW\n\nN\n\n(a) Odd blocks and even blocks\n\n(b) The directions in which\ndimers move during sliding\n\nThe purpose of the algorithm is to transform a pyramid partition of length n into a pyramid\npartition of length n + 1. Unfortunately, the dimer shuffle is not quite an honest function\nfrom Pn to Pn+1 , in that there are several different possible outcomes of the algorithm. So\nlet us first describe the deterministic part of the algorithm, the sliding map, which acts on\ncertain partial dimer covers T of the square lattice.\nFirst of all, we colour the vertices of the lattice black and white in a checkerboard pattern.\nAny dimer on this lattice has one endpoint of each color. Of course, we must pick the parity\nof this colouring; it depends on the parity of n (see Figure 3). If n is odd, then the center\nsquare of the lattice has a black vertex in the upper left corner. Otherwise, that vertex is\nwhite.\nWe adopt the following definitions of [3] (changing the notation slightly):\nDefinition 2.1. Two side-by-side dimers (or, sometimes, their four endpoints) are called a\nblock. A block is odd if it has a black vertex in the upper left corner; otherwise it is even.\nFigure 4(a) shows the different types of odd and even blocks. As you can see in Figure 3,\nthe empty room of length n always has precisely n odd blocks in a vertical line in the center.\nDefinition 2.2. An odd-deficient (respectively, even-deficient) dimer cover is a partial dimer\ncover such that the set of non-covered vertices is a finite union of odd (respectively, even)\nblocks. Given a dimer cover T , construct the odd-deficient dimer cover T\u0303 by deleting all of\nthe odd blocks of T . Construct the even-deficient dimer cover T\u0302 by deleting all of the even\nblocks of T . Let\nP\u0303n := {\u03c0\u0303 : \u03c0 \u2208 Pn },\nP\u0302n := {\u03c0\u0302 : \u03c0 \u2208 Pn }.\nDefinition 2.3. The sliding map S is a mapping from the set {dimers on the colored square\nlattice} to itself. If d is a dimer, then define S(d) to be the other dimer in the odd block\ncontaining d. If T is an odd-deficient partial dimer cover, then define S(T ) to be the partial\ndimer cover {S(d) : d \u2208 T }.\n5\n\n\fFigure 5:\n\n(b) S(\u03c0\u0303).\n\n(a) An odd-deficient \u03c0\u0303 \u2208 P\u03031 .\n\nObserve that S moves each dimer in T one unit to the north, south, east, or west, depending on its position; Figure 4(b) shows the directions in which the dimers move. We\nshall often call dimers northbound, southbound, eastbound, or westbound, according to the\ndirection in which they slide. Note that S depends on the parity of the lattice coloring we\nhave chosen.\nLemma 2.4. S is an involution on the set of odd-deficient dimer covers. The restriction\nS|P\u0303n is a bijection from P\u0303n to P\u0302n+1 with their usual colorings.\nProof. One first shows that S is an involution, essentially by analyzing all of the possible\nlocal odd-deficient configurations of dimers. This is done in detail in [3]. To verify that the\nimage of S is P\u0302n+1 , observe that S(\u03b5\u0303n ) = \u03b5n+1 . The parity of the usual coloring of Pn+1 is\nthe opposite of that of Pn , so for \u03c0 \u2208 Pn , S(\u03c0) is even-deficient and asymptotic to \u03b5n+1 . \u0003\nFigure 5 shows how S works. In (a), we have deleted all of the odd blocks of the pyramid\npartition in Figure 2; the missing odd blocks are marked with grey squares. In (b), we\nhave applied S, and now the grey squares denote the missing even blocks. Observe that\nS(\u03c0) \u2208 P\u03022 .\nWe may now define the dimer shuffling algorithm, which extends S to a map\nS : Pn \u2192 {formal sums of pyramid partitions of length n + 1}.\nDefinition 2.5. Let \u03c0 \u2208 Pn . The following three steps constitute the dimer shuffling algorithm:\n(1) (Deleting) Delete all of the odd blocks in \u03c0 to get \u03c0\u0303.\n(2) (Sliding) Compute S(\u03c0\u0303), as defined above.\n6\n\n\f(3) (Creating) Now we have a partial dimer cover which is possibly missing some even\nblocks. Each block may be filled in with either two horizontal dimers, or two vertical\ndimers. Define S(\u03c0) to be the formal sum of all of these fillings.\nIt is fairly straightforward to see that these steps are well-defined and that they do indeed\ngive you a formal sum of dimer covers of the plane; this is shown in detail in [3].\nFinally, let us prove a lemma about the number of odd blocks of a pyramid partition.\nObserve that Figure 5(a) has 10 odd blocks, whereas (b) has 9 even blocks. In general, we\nhave:\nLemma 2.6. Let \u03c0\u0303 \u2208 P\u0303n . Then #{odd blocks in \u03c0\u0303} \u2212 #{even blocks in S(\u03c0\u0303)} = n.\nProof. Suppose there are m odd blocks in \u03c0 and m\u2032 even blocks in S(\u03c0). Let R be a\n2a \u00d7 (2a + 2n \u2212 2) rectangle of lattice points centered at the origin, where a is large enough\nthat \u03c0 is identical to \u03b5n outside R, and there are no odd blocks of \u03c0 on the boundary of R.\nFor example, for the odd-deficient partition of Figure 5(a), we could take a = 7 and R to be\nthe 14 \u00d7 14 rectangle of lattice points shown in the illustration.\nEach dimer has two endpoints and each (missing) odd block has four vertices, so the\nnumber of dimers in R is\n(2a)(2a + 2n \u2212 2) \u2212 4m\n(3)\n.\n2\nNow let us shuffle the dimers in R. The same dimers now fit into a (2a \u2212 2) \u00d7 (2a + 2n)\nrectangle, which has (2a \u2212 2)(2a + 2n) and contains all m\u2032 odd blocks. So the number of\ndimers in R is also equal to\n(2a \u2212 2)(2a + 2n) \u2212 4m\u2032\n2\nSetting Equations (3) and (4) equal, we obtain the lemma.\n(4)\n\n\u0003\n\n3. Weighting the lattice\nIn order to use domino shuffling as a computational tool, we need to find a way to calculate\nthe weight of a pyramid partition from its dimer form, without interpreting it as a pile of\nbricks. Our strategy shall be to assign a monomial weight to every edge of the square lattice\nin such a way that the renormalized product of the edge weights of any pyramid partition\n\u03c0 is w0 (\u03c0). This idea is mentioned in [6], but we shall need to be explicit about what edge\nweights we use and how we do the renormalization.\nIn order to determine the proper weights to use, it is helpful to consider how a minimal\nchange in the dimer configuration should affect the weight. We make the following definition:\n7\n\n\fFigure 6: Elementary moves for adding a bricks to pyramid partitions\n\n\u00d7q\n\n1\n\u2212\u2192\n\n\u00d7q\n\n0\n\u2212\u2192\n\nDefinition 3.1. Let \u03c0 be a pyramid partition. An elementary move is the act of adding an\nappropriately colored block to \u03c0 to obtain a new pyramid partition.\nWhen we analyze the effect an elementary move has on the dimer version of \u03c0, we see that\nthere are two different types of elementary moves for adding a dark or light brick. They are\nshown in Figure 6; recall that our convention in drawing the brick pictures is to show the\ncomplement of the pyramid partition! An odd elementary move should contribute q0 to the\nweight, whereas an even move should contribute q1 .\nWe may now assign a weight to each edge of the square lattice which is compatible with\nthe elementary moves, in the following sense: select any 2\u00d72 block of vertices in the weighted\nlattice. If it is an odd block, we should have\nweight of two horizontal dimers\n= q0 ,\nweight of two vertical dimers\nand if it is an even block, we should have\nweight of two vertical dimers\n= q1 .\nweight of two horizontal dimers\nIn fact, there are many ways to do this, but it is convenient to choose the weighting in\nwhich all vertical edges have weight 1, and all the northbound horizontal edges closest to\nthe x axis have weight 1 (see Figure 7). We adopt the convention that in a weighted lattice,\nedges with no marked weight get weight 1.\nDefinition 3.2. If d is a dimer, then w0 (d) is the weight assigned to d in Figure 7.\nNow we need to explain how to use these edge weights to compute the weight of a pyramid\npartition \u03c0. Naively, we want to say that the weight of \u03c0 is the product of the weights of its\n8\n\n\fFigure 7: The w0 weighting on the square lattice. The heavy black line is the x axis.\n2\nq0\nq1\n\n\u22122 \u22122\nq0\nq1\n\n2\nq0\nq1\n\n\u22122 \u22122\nq0\nq1\n\n2\nq0\nq1\n\n\u22122 \u22122\nq0\nq1\n\n2\nq0\nq1\n\n\u22121 \u22121\nq0\nq1\n\n2\nq0\nq1\n\n\u22121 \u22121\nq0\nq1\n\n2\nq0\nq1\n\n\u22121 \u22121\nq0\nq1\n\n2\nq0\nq1\n\n\u22121 \u22121\nq0\nq1\n\nq0\n\n\u22121 \u22121\nq0\nq1\n\nq0\n\n\u22121 \u22121\nq0\nq1\n\nq0\n\n\u22121 \u22121\nq1\nq0\n\nq0\n\n1\n\nq0\n\n1\n\nq0\n\n1\n\nq0\n\n1\n\n\u22121\nq1\n\n1\n\n\u22121\nq1\n\n1\n\n\u22121\nq1\n\n1\n\n\u22121\nq1\n\nq0 q1\n\n\u22121\nq1\n\nq0 q1\n\n\u22121\nq1\n\nq0 q1\n\n\u22121\nq1\n\nq0 q1\n\n\u22121 \u22122\nq0\nq1\n\nq0 q1\n\n\u22121 \u22122\nq0\nq1\n\nq0 q1\n\n\u22121 \u22122\nq0\nq1\n\nq0 q1\n\n\u22121 \u22122\nq0\nq1\n\n2 2\nq0\nq1\n\n\u22121 \u22122\nq0\nq1\n\n2 2\nq0\nq1\n\n\u22121 \u22122\nq0\nq1\n\n2 2\nq0\nq1\n\n\u22121 \u22122\nq0\nq1\n\n2 2\nq0\nq1\n\nedges. However, since \u03c0 covers the entire plane and has an infinite number of edges, this is\nmeaningless. Fortunately, all one has to do is to normalize the weight in the following sense:\nLemma 3.3. Suppose that \u03c0 \u2208 Pn . Let R be a finite region of the lattice which contains all\nof the edges where \u03c0 differs from \u03b5n . Then\n!\u22121\n!\nY\nY\nw0 (\u03c0) =\nw0 (e)\nw0 (e)\n.\ne\u2208R\u2229\u03c0\n\ne\u2208R\u2229\u03b5n\n\nProof. As a base case, let \u03c0 = \u03b5n and observe that both sides are equal to 1. Next, suppose\nthat the lemma holds for some pyramid partition \u03c00 ; by the preceding remarks, it also holds\nfor all \u03c0 which differ from \u03c00 by an elementary move. The lemma then follows by induction\non the number of bricks in \u03c0.\n\u0003\n4. Weighting and Shuffling\nWe shall use a different weighting function, w1 , to weight S(\u03c0). Essentially, we want to\nthink of the weight of a dimer as being unaffected by the shuffling operation. In fact, we\nshall define a series of weight functions w1 , w2 , w3 , . . ., which have the property that\nw0 (d) = w1 (S(d)) = w2 (S 2 (d)) = * * *\n9\n\n\fFigure 8: A comparison of the weightings w0 and w1\n\nq0\u22122 q1\u22122\n\nq02 q1\n\nq0\u22122 q1\u22122\n\nq02 q1\n\nq0\u22122 q1\u22122\n\nq03 q12\n\nq0\u22121 q1\u22121\n\nq03 q12\n\nq0\u22121 q1\u22121\n\nq03 q12\n\nq02 q1\n\nq0\u22121 q1\u22121\n\nq02 q1\n\nq0\u22121 q1\u22121\n\nq02 q1\n\nq0\u22121 q1\u22121\n\nq02 q1\n\nq0\u22121 q1\u22121\n\nq02 q1\n\nq0\u22121 q1\u22121\n\nq0\u22121 q1\u22121\n\nq0\n\nq0\u22121 q1\u22121\n\nq0\n\nq0\u22121 q1\u22121\n\nq02 q1\n\n1\n\nq02 q1\n\n1\n\nq02 q1\n\nq0\n\n1\n\nq0\n\n1\n\nq0\n\n1\n\nq0\n\n1\n\nq0\n\n1\n\n1\n\nq1\u22121\n\n1\n\nq1\u22121\n\n1\n\nq0\n\nq0 q1\n\nq0\n\nq0 q1\n\nq0\n\nq1\u22121\n\nq0 q1\n\nq1\u22121\n\nq0 q1\n\nq1\u22121\n\nq0 q1\n\nq1\u22121\n\nq0 q1\n\nq1\u22121\n\nq0 q1\n\nq0 q1\n\nq0\u22121 q1\u22122\n\nq0 q1\n\nq0\u22121 q1\u22122\n\nq0 q1\n\nq1\u22121\n\nq02 q12\n\nq1\u22121\n\nq02 q12\n\nq1\u22121\n\nq0\u22121 q1\u22122\n\nq02 q12\n\nq0\u22121 q1\u22122\n\nq02 q12\n\nq0\u22121 q1\u22122\n\nq02 q12\n\nq0\u22121 q1\u22122\n\nq02 q12\n\nq0\u22121 q1\u22122\n\nq02 q12\n\n(a) w0\n\n(b) w1\n\nfor any dimer d.\nDefinition 4.1. Let d be dimer in a pyramid partition of length n (with the usual lattice\ncoloring). Let a \u2265 1. Define the weight function wa by\n\u22121\n\u22121\n\u22121\nwa (d) = w0 (S\n| \u25e6 S {z\u25e6 * * * \u25e6 S }(d)).\na\u22121\n\nFor a comparison of w0 and w1 , see Figure 7. Observe that if d is a vertical dimer, then\nwa (d) = 1 for all a. In [3], there is only one weighting function, w0 , and the generating\nfunction is manipulated so that w0 can be reused. Such an approach would also apply to\nour setting, but it doesn't give us the results we want.\nLemma 4.2. Let d, d\u2032 be horizontal dimers, with d\u2032 immediately north of d. Then\n\uf8f1\n\uf8f2q a+1 q a if the block formed by d, d\u2032 is odd,\n0\n1\n\u2032\nwa (d)wa (d ) =\n\uf8f3q a q a\u22121 if the block formed by d, d\u2032 is even.\n0 1\n\n10\n\n\fProof. When a = 0, the lemma follows from the definition of w0 . Now, suppose a > 0. If\nthe block d, d\u2032 is even, then S \u22121 interchanges d and d\u2032 , so\nwa (d)wa (d\u2032 ) = wa\u22121 (S \u22121 (d))wa\u22121 (S \u22121 (d\u2032 )) = wa\u22121 (d\u2032 )wa\u22121 (d) = q0a q1a\u22121\nby induction on a; otherwise, (d, S \u22121 (d)) and (d\u2032 , S \u22121 (d)) are odd blocks under the alternate\ncoloring, and we have\nwa (d)wa (d\u2032 ) = wa\u22121 (S \u22121 (d))wa\u22121 (S \u22121 (d\u2032 ))\n=\n\nwa\u22121 (S \u22121 (d))wa\u22121 (d)wa\u22121 (d\u2032 )wa\u22121 (S \u22121 (d\u2032 ))\nwa\u22121 (d)wa\u22121 (d\u2032 )\n\n=\n\n(q0a q1a\u22121 )2\n= q0a+1 q1a\nq0a\u22121 q1a\u22122\n\nagain by induction on a.\n\n\u0003\n\nNext, we define what we mean by the weight of an odd-deficient or even-deficient dimer\ncover:\nDefinition 4.3. Let \u03b7\u0303 be an odd-deficient (or even-deficient) pyramid partition of length n.\nLet \u03c0 be the pyramid partition obtained by filling in the missing odd (even) blocks of \u03b7\u0303 with\npairs of vertical dimers. Then we define\nwa (\u03b7\u0303) = wa (\u03c0).\nIf there are m odd blocks in \u03b7\u0303, then\nX\nwa (\u03c0) = (1 + q0a+1 q1a )m wa (\u03b7\u0303)\n(5)\n\u03c0 fills in \u03b7\u0303\n\nbecause each odd block of \u03b7\u0303 may be filled in two ways: we can use two vertical dimers (which\neach have weight 1) or we can use two horizontal dimers (which have a combined weight of\nq0a+1 q1a by Lemma 4.2). Similarly, if there are m\u2032 odd blocks in S(\u03b7\u0303), we have\nX\n\u2032\n(6)\nwa+1 (\u03c0 \u2032 ) = (1 + q0a+1 q1a )m wa+1 (S(\u03b7\u0303))\n\u03c0 \u2032 fills in S(\u03b7\u0303)\n\nAs \u03b7\u0303 runs over P\u0303n , S(\u03b7\u0303) runs over P\u0302n+1 . Also, Lemma 2.6 implies that m \u2212 m\u2032 = n, so\ncombining Equations (5) and (6), we get\nX\nX\nwa+1 (\u03c0)\nwa (\u03c0) = (1 + q0a+1 q1a )n\n(7)\n\u03c0\u2208Pn+1\n\n\u03c0\u2208Pn\n\nUsing Equation (7) k times, starting with n = 1 and a = 0, yields\n!\nk\nX\nY\nwk (\u03c0).\n(8)\nZ(1; q0 , q1 ) =\n(1 + q0i q1i\u22121 )i\ni=1\n\n\u03c0\u2208Pk+1\n\n11\n\n\fFigure 9: A pyramid partition, being split into two pieces which agree along the seam.\n\nAs k \u2192 \u221e, the product on the right-hand side becomes M(\u2212q1\u22121 , q0 q1 )\u22121 , which is certainly\ngood news, as this is one of the factors which appears in the statement of Theorem 1.5. Next\nwe need to try to understand the sum\nX\nwk (\u03c0)\n\u03c0\u2208Pk+1\n\nin the limit k \u2192 \u221e.\n5. Length-\u221e pyramid partitions\nIn order to speak sensibly about the limit of the weighting functions wn as n gets large, we\nmust shift our viewpoint slightly. We shall split the square lattice along the x axis, giving\nus two half planes. There are infinitely many vertical edges which cross the x axis; we shall\ninclude these edges in both half-planes, and identify them. A pyramid partition of length 1\ntherefore corresponds to two half-pyramid partitions which agree along the \"ragged\" edges\nof the two half-planes (see Figure 9). Note that we don't quite have two matchings of the\ntwo graphs because the pendant edges (those that cross the x axis) aren't necessarily in \u03c0.\nThis is a trivial change of viewpoint, but it allows us to shuffle the upper and lower halfplanes independently. When we are applying S to the weights in the lower half-plane, let us\nimagine that we are travelling with the southbound weights. From our new point of view, the\nnorthbound weights now move two units north, the \"westbound\" weights move northwest,\n12\n\n\fFigure 10: The weighting w\u221e , top and bottom pieces.\nq \u22122\n\n0\n\nq \u22122\n\n0\n\nq \u22122\n\n0\n\nq \u22121\n\n0\n\nq \u22121\n\nq \u22121\n\n0\n\nq \u22121\n\n0\n\n1\n\n1\n\n..\n.\n\n..\n.\n\n..\n.\n\n..\n.\n\n..\n.\n\n0\n\nq1\u22121 q\n\n0\n\nq1\u22121\n\n0\n\nq1\u22121\n\n0\n\nq \u22121\n\n0\n\nq1\u22121 q\n\n0\n\nq1\u22121 q\n\n0\n\n0\n\n1\n\n0\n\nq1\u22121\n\n0\n\nq1\u22121\n\n0\n\nq1\u22121\n\n0\n\n1\n\n0\n\n1\n\n0\n\nq1\u22121\n\n0\n\nq1\u22121\n\n0\n\n0\n\nq\n\n0\n\nq\n\n0\n\nq1\u22121 q \u22121\n\n0\n\nq1\u22121 q \u22121\n\n0\n\nq1\u22121 q \u22121\n\nq\n\n0\n\nq\n\n0\n\nq\n\n0\n\nq1\u22121 q \u22121\n\n0\n\nq1\u22121 q \u22121\n\n0\n\nq1\u22121 q \u22122\n\n0\n\nq1\u22121 q \u22122\n\n0\n\nq1\u22121 q \u22122\n\n..\n.\n\n..\n.\n\n..\n.\n\n..\n.\n\n..\n.\n\nand the \"eastbound\" weights move northeast. Similarly, when we are applying S to the\nupper half-plane, we are travelling with the northbound weights.\nNow it is clear what happens to the weight function wn as n goes to infinity. In the lower\nhalf-plane, nothing happens to the (now stationary) southbound edges at all. However, the\nweights of the northbound edges get multiplied by q0 q1 . Let q = q0 q1 . If we start with n = 1\nand shuffle k times, the northbound edges are multiplied by q n , so in the limit n \u2192 \u221e, they\nget weight zero. In the same way, the southbound edges in the upper half plane get weight\nzero. We call this weight function w\u221e ; it is shown in Figure 10.\nWe compute the weights of pyramid partitions in the same way as before: by normalizP\ning by the weight of \u03b5\u221e (see Figure 11). When we compute the sum \u03c0 w\u221e (\u03c0), we find\nthat pyramid partitions with southbound edges in the upper part, or northbound edges in\nthe lower part, get assigned weight zero. Therefore, the only configurations \u03c0 that conP\ntribute to the sum\nw\u221e (\u03c0) are in fact perfect matchings on the heavy edges in Figure 10,\nasymptotically identical to the empty room of length infinity (see Figure 11).\nFurthermore, if a dimer configuration of this type has horizontal edges arbitrarily far south\nin its upper half, or arbitrarily far north in its lower half, it also gets weight zero. Thus the\nonly dimer configurations that get nonzero weight under w\u221e have a large frozen region of\nvertical dimers in the middle.\nDefinition 5.1. A pyramid partition of length \u221e is a dimer configuration \u03c0 with w\u221e (\u03c0) > 0.\n13\n\n\fFigure 11: The empty room of length \u221e, \u03b5\u221e , top and bottom halves\n\nq \u22122\n\nq \u22122\n\nq \u22122\n\nD\n\nD\n\nD\n\nq \u22122\n\nC\n\nC\nq \u22121\n\nD\nq \u22122\n\nq \u22122\n\nC\n\nq \u22122\n\nq \u22121\n\nB\n\nB\nq \u22121\nA\nA\n\u22121\nq1\n\nB\n\nB\n\n\u22121\nq1 q \u22121\n\n\u22121\nq1 q \u22121\n\nC\n\nC\n\nC\n\n\u22121 \u22121\nq1\nq\n\n\u22121 \u22121\nq1\nq\n\n\u22121 \u22121\nq1\nq\n\nD\n\nD\n\nD\n\nD\n\n\u22121 \u22122\nq1\nq\n\n\u22121 \u22122\nq1\nq\n\n\u22121 \u22122\nq1\nq\n\n\u22121 \u22122\nq1\nq\n\nIn order to determine whether pyramid partitions of length \u221e can be weight-enumerated\nin any sensible way, we should try to write down a set of elementary moves which can be\napplied to the empty room, sequentially, and are capable of generating all such \u03c0. One such\nset is depicted in Figure 13.\nOne uses these elementary moves as follows. Suppose we wish to construct a partition\n\u03c0 \u2208 P\u221e . Start with \u03b5\u221e , and apply the \"infinite\" elementary move (a) until the frozen region\nin the middle is correct. Then apply move (b) to the upper region and move (c) to the lower\nregion until you have \u03c0.\nNote that move (a) deletes horizontal dimers from \u03b5\u221e symmetrically in pairs. The first\napplication of the move deletes the two dimers marked A in Figure 11; the next deletes two\ndimers marked B, and so on. Furthermore, the weight change of move (a) depends on where\nit is applied. If two dimers marked A are deleted, then the weight increases by q1 q; if two\ndimers marked B are deleted, then the weight increases by q1 q 2 , and so on.\n6. A weight-preserving bijection\nWe begin by defining super-rigid partitions, which are so named because they are a class\nof three-dimensional partitions whose generating function is the partition function for the\nDonaldson-Thomas theory of Calabi-Yau threefolds which come from super-rigid rational\ncurves (see [1]).\nDefinition 6.1. A Young diagram is a finite subset of (Z\u22650 )2 which satisfies the following\nclosure properties:\n(1) If (x, y) \u2208 \u03bb and x > 0, then (x \u2212 1, y) \u2208 \u03bb.\n(2) If (x, y) \u2208 \u03bb and y > 0, then (x, y \u2212 1) \u2208 \u03bb.\n14\n\n\fDefinition 6.2. Let \u03bb be a Young diagram. The leg of shape \u03bb is the set\nL\u03bb = \u03bb \u00d7 Z\u22650 \u2286 (Z\u22650 )3 .\nA three-dimensional partition asymptotic to \u03bb is a set \u03c0 satisfying L\u03bb \u2286 \u03c0 \u2286 (Z\u22650 )3 satisfying the following properties:\n(1)\n(2)\n(3)\n(4)\n\nThe set \u03c0 \\ L\u03bb is finite.\nIf (x, y, z) \u2208 \u03c0 and x > 0, then (x \u2212 1, y, z) \u2208 \u03c0.\nIf (x, y, z) \u2208 \u03c0 and y > 0, then (x, y \u2212 1, z) \u2208 \u03c0.\nIf (x, y, z) \u2208 \u03c0 and y > 0, then (x, y, z \u2212 1) \u2208 \u03c0.\n\nWe also define the size of \u03c0, written |\u03c0|, to be the cardinality of the set \u03c0 \\ L\u03bb .\nIf \u03c0 is a three dimensional partition asymptotic to \u03bb, we informally call the elements of \u03c0\n\"boxes\"; one can think of \u03c0 as a stack of boxes in the corner of a large room which has one\n\"baseboard\" whose cross-section is \u03bb.\nDefinition 6.3. A super-rigid partition is a triple (\u03c00 , \u03bb, \u03c0\u221e ), where \u03c00 and \u03c0\u221e are threedimensional partitions asymptotic to \u03bb.\nLemma 6.4 (Lemma 2.9 of [1]). Give the super-rigid partition (\u03c00 , \u03bb, \u03c0\u221e ) the weight z |\u03bb| q N ,\nwhere\nX\nN = |\u03c00 | + |\u03c0\u221e | +\n(i + j + 1).\ni,j\u2208\u03bb\n\nThe generating function for super-rigid partitions under this weighting scheme is\nZX (z, q) = M(1, q)2 M(\u2212z, q)\u22121 .\nDefinition 6.5. Z(\u221e; q0 , q1 ) = ZX (q1 , q0 q1 ).\n\nThere is a \"folklore\" correspondence between 3D partitions and dimer covers of the\nhexagon lattice: if we view a 3D partition from far away along the line x = y = z, it\nappears to be a tiling of the plane by lozenges. Replacing each of these lozenges with a\ndimer, we get a dimer cover of the hexagon lattice. A simple reorientation of the edges of\nthe hexagon lattice shows that it is the same as the \"brickwork\" lattices defined by the heavy\nlines of Figure 10.\nLet us apply this observation to create a correspondence between super-rigid partitions and\npyramid partitions of length \u221e. Starting with (\u03c00 , \u03bb, \u03c0\u221e ), replace both \u03c00 and \u03c0\u221e by their\ndimer versions, and then reorient all of the edges so that the dimers fit onto the brickwork\nlattice (see Figure 12). The fact that \u03c00 and \u03c0\u221e share a common asymptotic leg \u03bb causes the\nfrozen region of vertical dimers to appear in the middle of the figure. The correspondence is\nclearly bijective, and with a little care, we can make this bijection weight-preserving.\n15\n\n\fFigure 12: A super-rigid partition (\u03c00 , \u03bb, \u03c0\u221e ) becoming a pyramid partition of length \u221e\n\n\u03c0\u221e\n\n\u03bb\n\n\u03c00\n\n16\n\n\fFigure 13: Elementary moves for generating elements of P\u221e from \u03b5\u221e\n\n..\n.\n\n\u00d7q1 q t\n\n\u2212\u2192\n\n..\n.\n\u00d7q\n\n\u2212\u2192\n\n(a) Middle region\n\n(b) Upper region\n\n\u00d7q\n\n\u2212\u2192\n\n(c) Lower region\n\nConsider any super-rigid partition (\u03c00 , \u03bb, \u03c0\u221e ). We can construct this partition from the\nempty super-rigid partition (\u2205, \u2205, \u2205) using the following three elementary moves:\n(a) Add a log of boxes in position (i, j) to the asymptotic leg, with weight q1 q i+j+1 .\nRepeat until we have constructed \u03bb.\n(b) Add a box to the left end of the partition, with weight q. Repeat until we have\nconstructed the super-rigid partition (\u03c00 , \u03bb, \u2205).\n(c) Add a box to the right end of the partition, with weight q. Repeat until we have\nconstructed (\u03c00 , \u03bb, \u03c0\u221e ).\nA partition constructed in this manner will be weighted correctly to contribute to Z(\u221e; q0 , q1 ).\nNote that we have deliberately chosen these moves to have the same names as those in Figure 13. Define a bijection\n\u03a6 : P\u221e \u2192 {super-rigid partitions}\nas follows: given \u03c0 \u2208 P\u221e , determine a set of elementary moves to construct \u03c0 from \u03b5\u221e , and\nthen use the corresponding moves in the same order to create a super-rigid partition. This\nsuper-rigid partition is \u03a6(\u03c0).\nSince each of these elementary moves affects the weight in the same manner as the corresponding move on pyramid partitions, \u03a6 is weight-preserving. Thus \u03a6 also preserves the\ngenerating functions:\nX\nw\u221e (\u03c0) = Z(\u221e; q0 , q1 ).\n\u03c0\u2208P\u221e\n\nIn the limit n \u2192 \u221e, Equation 8 now says\nZ(1; q0 , q1 ) =\n\n!\n\u221e\nY\n(1 + q0i q1i\u22121 )i Z(\u221e; q0 , q1 )\ni=1\n\nwhich proves Theorem 1.5.\n\n17\n\n\f7. The generating function for general n\nNext, we shall use the same argument to calculate Z(n; q0 , q1 ). Applying Equation (7) k\ntimes, starting at a = 0 but leaving n arbitrary, we get\n!\nk\nX\nY\nwk (\u03c0).\n(9)\nZ(n; q0 , q1 ) =\n(1 + q0i q1i\u22121 )i+n\u22121\ni=1\n\n\u03c0\u2208Pk+n\n\nTaking the limit as k approaches infinity, we again get a sum over pyramid partitions of\nn\nlength \u221e, but with a slightly modified weight function w\u221e\n:\n!\n\u221e\nY\nX\nn\nw\u221e\n(\u03c0),\n(10)\nZn (; q0 , q1 ) =\n(1 + q0i q1i\u22121 )i+n\u22121\ni=1\n\n\u03c0\u2208P\u221e\n\nn\nw\u221e\nhas the property that the elementary move of type (a) carries the weight q1 q i+j+n . This\nmeans that the corresponding super-rigid partition (\u03c00 , \u03bb, \u03c0\u221e ) has weight q1\u03bb q N (n) , where\nX\n(i + j + 1).\nN(n) = |\u03c00 | + |\u03c0\u221e | + (n \u2212 1)|\u03bb| +\ni,j\u2208\u03bb\n\nWe only need a slight modification to the argument of [1] to compute the sum on the righthand side of Equation 10. We begin with the one-leg formula for the topological vertex (see\n[5]) , which states that\nX\n\u03bb\nq |\u03c0| = M(q)q ( 2 ) s\u03bbt (q),\n\u03c0 asymp. to \u03bb\n\n\u03bb\n2\n\n\u0001\n\nP\n\n\u03bbi\nd\n\n\u0001\n\nt\n\nwhere\n=\n, \u03bb denotes the transpose of \u03bb, and s\u03bbt (q) denotes the principal\n\u03bbi \u2208\u03bb\nspecialization of the Schur function. We have\nX X\nX\nn\nw\u221e\n(\u03c0) =\nq N (n) q1\u03bb\n\u03c0\u2208P\u221e\n\n\u03bb\n\n\u03c00 ,\u03c0\u221e \u2192\u03bb\n\n= M(1, q)2\n\nX\n\n\u03bbt\n\nq1\u03bb q (n\u22121)\u03bb+( 2 )+( 2 )+\n\u03bb\n\nP\n\n(i,j)\u2208\u03bb\n\ni+j\u22121\n\ns\u03bbt (q)s\u03bb (q)\n\n\u03bb\n\n= M(1, q)\n\n2\n\n= M(1, q)2\n\nX\n\n\u03bb\n\u221e\nY\n\nq1\u03bb q n|\u03bb| s\u03bbt (q)s\u03bb (q)\n(1 + q1 q i+j+n\u22122)\n\ni,j=1\n\n= M(1, q)\n\n2\n\n\u221e\nY\n\n(1 + q0k q1k+1 )max(k\u2212n+1,0) .\n\nk=1\n\nThis proves Theorem 2.\n\n\u0003\n\n18\n\n\f8. Future Work\nThere are several possible lines of research suggested by the techniques and results of this\npaper:\n(1) The shuffling procedure still works for certain pyramid partitions which are not asymptotic to \u03b5n . In particular, we can allow pyramid partitions to have up to four\nasymptotic legs, pointing NW, NE, SW, and SE, whose shapes are given by partitions \u03bbN W , \u03bbN E , \u03bbSW , \u03bbSE . It seems possible that we could compute the generating\nfunction for such configurations using the full topological vertex formula of [5]. Such\na result might shed some light on flop transitions in topological string theory.\n(2) It may be possible to compute a somewhat more refined generating function,using\n2n variables rather than just two. This would have the effect of introducing diagonal\n\"stripes\" on the alternate layers of the pyramid partition. Such a count is done in [2]\nusing vertex operator methods.\n(3) This paper shows that there is a direct link between the Donaldson-Thomas partition\nfunction of the conifold, Z(1, q0 , q1 ), and the Donaldson-Thomas partition function\nof the resolution, Z(\u221e, q0 , q1 ). We have proven [2] that there is a similar relationship\nbetween the Donaldson-Thomas partition function of the orbifold C3 /G, (where G is\na finite Abelian subgroup of SO(3)), and the Donaldson-Thomas partition function\nof its resolution; unfortunately, the methods of [2] do not suggest why this should be.\nWe can attempt to look for this type of relationship between other singular threefolds\nand their resolutions.\nAcknowledgements\nThe author would like to thank Dr. Bal\u00e1zs Szendr\u0151i for posing this problem; Dr. Richard\nKenyon for a fruitful conversation which led to its solution; and Dr. Jim Bryan for his careful\nproofreading and helpful suggestions.\nReferences\n[1] Kai Behrend and Jim Bryan. Super-rigid Donaldson-Thomas invariants. Mathematical Research Letters,\n14(4):559\u2013571, 2006.\n[2] Ben Young, with an appendix by Jim Bryan. Generating functions for colored 3D Young diagrams and\nthe Donaldson-Thomas invariants of orbifolds, June 2008. arXiv:0802.3948.\n[3] Noam Elkies, Greg Kuperberg, Michael Larsen, and James Propp. Alternating sign matrices and domino\ntilings ii. Journal of Algebraic Combinatorics, 1(3):219\u2013234, November 1992.\n[4] Richard Kenyon. Talk at the workshop on random partitions and Calabi-Yau crystals, Amsterdam, 2005.\nhttp://www.math.ubc.ca/\u223ckenyon/talks/pyramids.pdf.\n[5] Andrei Okounkov, Nikolai Reshetikhin, and Cumrun Vafa. Quantum Calabi-Yau and classical crystals.\nProgress in Mathematics, 244:597\u2013618, November 2006.\n19\n\n\f[6] Bal\u00e1zs Szendr\u0151i. Non-commutative Donaldson-Thomas theory and the conifold. arXiv:0705.3419v1\n[math.AG], April 2007.\n\n20\n\n\f"}