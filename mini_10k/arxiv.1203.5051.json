{"id": "http://arxiv.org/abs/1203.5051v1", "guidislink": true, "updated": "2012-03-22T17:45:39Z", "updated_parsed": [2012, 3, 22, 17, 45, 39, 3, 82, 0], "published": "2012-03-22T17:45:39Z", "published_parsed": [2012, 3, 22, 17, 45, 39, 3, 82, 0], "title": "Analysing Temporally Annotated Corpora with CAVaT", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1203.4206%2C1203.3730%2C1203.1786%2C1203.2069%2C1203.0970%2C1203.1803%2C1203.4923%2C1203.6689%2C1203.1396%2C1203.0018%2C1203.6790%2C1203.3755%2C1203.2773%2C1203.0043%2C1203.2210%2C1203.6763%2C1203.6269%2C1203.3973%2C1203.4583%2C1203.1409%2C1203.5898%2C1203.1364%2C1203.0435%2C1203.0854%2C1203.3173%2C1203.3167%2C1203.6056%2C1203.6283%2C1203.3007%2C1203.2593%2C1203.0475%2C1203.3388%2C1203.5686%2C1203.0845%2C1203.3683%2C1203.3352%2C1203.4898%2C1203.6074%2C1203.2345%2C1203.0106%2C1203.0058%2C1203.4533%2C1203.5051%2C1203.2619%2C1203.1206%2C1203.3367%2C1203.4532%2C1203.6362%2C1203.3669%2C1203.5097%2C1203.3212%2C1203.1311%2C1203.1697%2C1203.4468%2C1203.0195%2C1203.2126%2C1203.6000%2C1203.1280%2C1203.0343%2C1203.6168%2C1203.3162%2C1203.0508%2C1203.1838%2C1203.3379%2C1203.6558%2C1203.1757%2C1203.5012%2C1203.6704%2C1203.2761%2C1203.2144%2C1203.3380%2C1203.4684%2C1203.2293%2C1203.0989%2C1203.4937%2C1203.0966%2C1203.4469%2C1203.3252%2C1203.0187%2C1203.5409%2C1203.6612%2C1203.0117%2C1203.5576%2C1203.4567%2C1203.1563%2C1203.3696%2C1203.3216%2C1203.4030%2C1203.1584%2C1203.5735%2C1203.6590%2C1203.5159%2C1203.5344%2C1203.3253%2C1203.1694%2C1203.5285%2C1203.0814%2C1203.2631%2C1203.0185%2C1203.3974%2C1203.2264&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Analysing Temporally Annotated Corpora with CAVaT"}, "summary": "We present CAVaT, a tool that performs Corpus Analysis and Validation for\nTimeML. CAVaT is an open source, modular checking utility for statistical\nanalysis of features specific to temporally-annotated natural language corpora.\nIt provides reporting, highlights salient links between a variety of general\nand time-specific linguistic features, and also validates a temporal annotation\nto ensure that it is logically consistent and sufficiently annotated. Uniquely,\nCAVaT provides analysis specific to TimeML-annotated temporal information.\nTimeML is a standard for annotating temporal information in natural language\ntext. In this paper, we present the reporting part of CAVaT, and then its\nerror-checking ability, including the workings of several novel TimeML document\nverification methods. This is followed by the execution of some example tasks\nusing the tool to show relations between times, events, signals and links. We\nalso demonstrate inconsistencies in a TimeML corpus (TimeBank) that have been\ndetected with CAVaT.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1203.4206%2C1203.3730%2C1203.1786%2C1203.2069%2C1203.0970%2C1203.1803%2C1203.4923%2C1203.6689%2C1203.1396%2C1203.0018%2C1203.6790%2C1203.3755%2C1203.2773%2C1203.0043%2C1203.2210%2C1203.6763%2C1203.6269%2C1203.3973%2C1203.4583%2C1203.1409%2C1203.5898%2C1203.1364%2C1203.0435%2C1203.0854%2C1203.3173%2C1203.3167%2C1203.6056%2C1203.6283%2C1203.3007%2C1203.2593%2C1203.0475%2C1203.3388%2C1203.5686%2C1203.0845%2C1203.3683%2C1203.3352%2C1203.4898%2C1203.6074%2C1203.2345%2C1203.0106%2C1203.0058%2C1203.4533%2C1203.5051%2C1203.2619%2C1203.1206%2C1203.3367%2C1203.4532%2C1203.6362%2C1203.3669%2C1203.5097%2C1203.3212%2C1203.1311%2C1203.1697%2C1203.4468%2C1203.0195%2C1203.2126%2C1203.6000%2C1203.1280%2C1203.0343%2C1203.6168%2C1203.3162%2C1203.0508%2C1203.1838%2C1203.3379%2C1203.6558%2C1203.1757%2C1203.5012%2C1203.6704%2C1203.2761%2C1203.2144%2C1203.3380%2C1203.4684%2C1203.2293%2C1203.0989%2C1203.4937%2C1203.0966%2C1203.4469%2C1203.3252%2C1203.0187%2C1203.5409%2C1203.6612%2C1203.0117%2C1203.5576%2C1203.4567%2C1203.1563%2C1203.3696%2C1203.3216%2C1203.4030%2C1203.1584%2C1203.5735%2C1203.6590%2C1203.5159%2C1203.5344%2C1203.3253%2C1203.1694%2C1203.5285%2C1203.0814%2C1203.2631%2C1203.0185%2C1203.3974%2C1203.2264&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We present CAVaT, a tool that performs Corpus Analysis and Validation for\nTimeML. CAVaT is an open source, modular checking utility for statistical\nanalysis of features specific to temporally-annotated natural language corpora.\nIt provides reporting, highlights salient links between a variety of general\nand time-specific linguistic features, and also validates a temporal annotation\nto ensure that it is logically consistent and sufficiently annotated. Uniquely,\nCAVaT provides analysis specific to TimeML-annotated temporal information.\nTimeML is a standard for annotating temporal information in natural language\ntext. In this paper, we present the reporting part of CAVaT, and then its\nerror-checking ability, including the workings of several novel TimeML document\nverification methods. This is followed by the execution of some example tasks\nusing the tool to show relations between times, events, signals and links. We\nalso demonstrate inconsistencies in a TimeML corpus (TimeBank) that have been\ndetected with CAVaT."}, "authors": ["Leon Derczynski", "Robert Gaizauskas"], "author_detail": {"name": "Robert Gaizauskas"}, "author": "Robert Gaizauskas", "links": [{"href": "http://arxiv.org/abs/1203.5051v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1203.5051v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.CL", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.CL", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1203.5051v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1203.5051v1", "arxiv_comment": null, "journal_reference": "Proc. LREC (2010) 398-404", "doi": null, "fulltext": "Analysing Temporally Annotated Corpora with CAVaT\nLeon Derczynski, Robert Gaizauskas\nUniversity of Sheffield\n211 Portobello, S1 4DP, UK\nL.Derczynski@dcs.shef.ac.uk, R.Gaizauskas@dcs.shef.ac.uk\n\narXiv:1203.5051v1 [cs.CL] 22 Mar 2012\n\nAbstract\nWe present CAVaT, a tool that performs Corpus Analysis and Validation for TimeML. CAVaT is an open source, modular checking utility\nfor statistical analysis of features specific to temporally-annotated natural language corpora. It provides reporting, highlights salient links\nbetween a variety of general and time-specific linguistic features, and also validates a temporal annotation to ensure that it is logically\nconsistent and sufficiently annotated. Uniquely, CAVaT provides analysis specific to TimeML-annotated temporal information. TimeML\nis a standard for annotating temporal information in natural language text. In this paper, we present the reporting part of CAVaT, and\nthen its error-checking ability, including the workings of several novel TimeML document verification methods. This is followed by\nthe execution of some example tasks using the tool to show relations between times, events, signals and links. We also demonstrate\ninconsistencies in a TimeML corpus (TimeBank) that have been detected with CAVaT.\n\n1. Introduction\nIn essence, TimeML mandates the mark up of expressions referring to times, expressions denoting events and expressions signalling temporal relations between times and\nevents or events and events; it also allows links to be added\nbetween entities, which are labelled with the temporal relation holding between them.\nExisting TimeML tools can be divided into two categories:\nthose which produce or alter mark-up, for example to assist annotation, and those that perform analysis. Only a\nfew tools have as yet been developed for TimeML, mostly\nfocusing on the annotation task, such as TTK (Verhagen\nand Pustejovsky, 2008), which does not support analysis.\nFrom the second category, in the absence of other software,\nthe TimeML-using community is restricted to generic XML\nanalysis tools, such as Xaira (Burnard and Dodd, 2003) or\nLT-XML1 , as well as similar format-specific tools (TEI).\nThese generic corpus tools are powerful applications, but\nrequire substantial effort to apply to TimeML data.\nWe have constructed CAVaT (Corpus Analysis and Validation for TimeML) to process collections of temporally annotated documents. CAVaT's functionality is divided into\ntwo main parts; an integrated browsing and report generation system, and a modular extensible error checking and\ncorpus validation framework.\nIn this paper, we first describe the technical aspects of the\ntool. We then present the reporting part of CAVaT, and\nthen its error-checking ability, followed by the execution of\nsome example tasks using the tool. We present an overview\nof the tool's operation and capabilities in Section 2. This\nincludes details of the corpus loading and folding process\n(Section 2.1), report generation, and also a detailed explanation of the advanced validation modules that are included\nwith CAVaT (Section 2.3). A brief syntax summary is presented in Section 3; the full guide is on the CAVaT website2 . Next, in Section 4, we present sample queries and\noutput. In Section 5, we show inconsistencies and observations in a TimeML corpus (TimeBank) that have been de1\n2\n\nFrom http://www.ltg.ed.ac.uk/software/ltxml\nAvailable at http://code.google.com/p/cavat/\n\ntected with CAVaT. Finally, Section 6 summarises the tool\nand discusses future work.\n\n2. Overview of the tool\nCAVaT is an open source tool, constructed from a set\nof Python modules and a database. It uses NLTK3 and\nMySQL4 . The interface is a text-based interactive prompt,\nand all operations are performed with text commands.\nCommand syntax strives to be simple, flexible and close\nto natural language. After loading and pre-processing a\nTimeML corpus, one can analyse it using built-in reporting\nfunctions, and perform data validation with one of many\nchecking components.\n2.1. Preprocessing\nCAVaT can work on any TimeML-annotated corpus that is\nstored as a collection of uncompressed files in a single directory, by importing it to a set of database tables. The corpus is initially processed by an XML parser (using Python's\nminidom and expat implementations), which retrieves\ndocument level data as well as all temporally annotated information, and places it into a MySQL database. Temporally annotated data includes all TimeML tags and their attributes, as well any enclosed tokens for EVENT, SIGNAL\nand TIMEX3 tags.\nIn TimeML, events are represented with the EVENT tag,\nand temporal expressions with the TIMEX3 tag. These\nintervals are the elements which CAVaT and the rest of\nthis paper assume as temporal primitives, unless otherwise\nstated. Temporal relations between intervals are described\nwith the TLINK tag, and temporal signals with SIGNAL.\nSee Figure 1 for an example.\nAutomatically classifying the type of temporal relation between intervals is currently a difficult problem in temporal processing of text (Mani et al., 2006; Lapata and Lascarides, 2006; Hepple et al., 2007). The task is often made\nsimpler by reducing the number of temporal link classes.\nTimeML includes BEFORE and AFTER relations, though\n3\n4\n\nSee http://www.nltk.org/\nSee http://www.mysql.com/\n\n\fFigure 1: Example text and TimeML annotation.\nText: \"On Thursday, he took the plane to Copenhagen\"\nTimeML:\n<SIGNAL sid=\"s1\">On</SIGNAL>\n<TIMEX3 tid=\"t1\" type=\"DURATION\">Thursday</TIMEX3>,\nhe <EVENT eid=\"e1\" class=\"I_ACTION\">took</EVENT>\nthe plane to Copenhagen.\n<MAKEINSTANCE eiid=\"ei1\" eventID=\"e1\" pos=\"VERB\"\ntense=\"PAST\" polarity=\"pos\" />\n<TLINK eventInstanceID=\"e1\" relatedToTime=\"t1\"\nsignalID=\"s1\" relType=\"DURING\">\n\nTable 1: Mappings between TimeML relations that can be applied\nin order to reduce the size of the relation set; when applying the\ntransformation in the table, TLINK argument order is swapped.\n\nOriginal relation type\nAFTER\nIS INCLUDED\nIAFTER\nBEGUN BY\nENDED BY\n\nFolds to relation\nBEFORE\nINCLUDES\nIBEFORE\nBEGINS\nENDS\n\nDURING INV\nDURING\n\nSIMULTANEOUS\nSIMULTANEOUS\n\nSIMULTANEOUS\n\nSIMULTANEOUS\n\none may simply reverse the arguments of a BEFORE relation to turn it into an AFTER one - so, June 2008 was\nbefore August 2009 is equivalent to August 2009 was after\nJune 2008. It is thus possible to convert all links of one\nof these types to the other. We call this technique folding.\nGiven a set of mappings, the 13 TimeML relations can be\nreduced.\nCAVaT offers three folds:\n\u2022 CAVaT fold \u2013 Collapses all inverse relations, such as\nmapping INCLUDED BY to INCLUDES (see Table 1).\n\u2022 SputLink fold \u2013 The mapping introduced by Marc\nVerhagen, included in TTK (Verhagen, 2005).\n\u2022 Compact fold \u2013 Reduces TimeML's link relation set\nto 3 classes, using mappings defined in Setzer et al.\n(2005).\nThe first two are lossless, in that no temporal information\nis removed by the folding process. The third is lossy. It is\npossible to perform a lossy fold by, for example, reducing\nthe TimeML BEGUN BY relationship to one of INCLUDES.\n2.2. Querying\nThe reporting part of CAVaT makes analysis of TimeML\ncorpora simpler and easier than working directly with a set\nof XML documents, allowing flexible queries, and catering\nfor inquiries specific to temporally-annotated data.\nThe development of CAVaT has been driven by investigations of TimeML corpora. Many of the operations performed against a corpora had common elements, often centred around the retrieval of class distributions or token frequencies. A tool for TimeML corpus research could encompass all the required operations, while providing access\nto a larger range of reports.\n\nCAVaT uses a report generation system where one can view\nany number of pre-defined features that match conditions of\nthe user's choosing. Queries can produce reports at varying levels of granularity \u2013 one may choose to examine data\nat sentence, document or corpus level. Reports can output\ncounts, distributions, lists or text extracts. Example queries\nare listed in Section 4. Data such as part-of-speech information, tense, aspect, and event recurrence are captured by\nattributes described by TimeML, and any data like this (annotated by tags and their attributes) can be queried. In addition, properties specific to temporal data but not directly\npresent in mark-up are implemented, including:\n\u2022 Event / event instance abstraction In some cases,\none piece of text may refer to two separate events\n(an example is given later in Section 5.1.). To permit annotation of this, TimeML's EVENT tag is placed\naround the text, and then event instances are specified\nusing one or more MAKEINSTANCE tags. Data relating to a piece of event text, such as part of speech,\npolarity and modality, are described in the MAKEINSTANCE tag. However, we would often like to see\nthe part of speech data for an event; indeed, when\ndiscussing temporal entities, the term \"event\" is often\nused in place of \"event instance\". Thus, CAVaT implicitly translates between these two related tags when\nrequested; for example, when one asks to see event\nmodality or cardinality.\n\u2022 Signalled links TLINKs may indicate a textual signal that suggests the type of relationship between their\narguments. For example, in Lydia ate dinner before\nleaving the house, the word before acts as a signal, ordering two events. As signals are explicit indicators\nof temporal association, and correctly typing a temporal link is difficult, it is useful to be able to quickly\nidentify which links employ a signal.\n\u2022 Signal text and TLINKs As SIGNAL text referenced\nfrom a TLINK may be thought of as that TLINK's signal text, CAVaT permits queries that specify signal text\nas an attribute of a TLINK.\n\u2022 Text position and lemma Although not part of the\nTimeML annotation schema, CAVaT logs text position\n(by sentence number and word number), and maintains lemmas of text found within tags.\nOne may view a particular TLINK's location in the original document, showing the link's arguments and their relation type. This helps understand the context of a single\nTLINK. For example, one may often see many links to a\nsingle document date, or discover that most links have arguments within the same paragraph \u2013 something not immediately obvious to humans while browsing the TLINK\nmarkup, and unclear with generic corpus tools.\n2.3. Checking\nTemporal annotation is a complex task, and as a result, a\nrelatively small amount of text has been annotated to date.\nThe largest TimeML corpus is TimeBank (Pustejovsky et\nal., 2003), with less than 200 documents, and around 65000\n\n\fFigure 2: With time flowing from left to right, this represents A\nBEFORE B and B INCLUDES C. It is not possible for C and A to\nbe the same interval.\n\nTable 2: Mapping from TimeML relation types to a simple pointbased temporal algebra. The TimeML relation is of the form a\nRELATION b. Where multiple relations are given, all hold. Similar\nto the table listed in (Verhagen, 2005).\n\nTimeML relation type\nBEFORE\nAFTER\nIAFTER\n\ntokens. Because of the complexity of temporal annotation,\nerrors can arise beyond those that may be detected using\nan XML DTD. CAVaT is both a reporting and validation\ntool, and seeks to automatically detect high-level and complex errors that are rarely immediately obvious. Part of the\nmotivation behind this part of the tool is similar to that of\nwriting unit tests that highlight bugs in an application: to\nimprove quality by automatically detecting previously seen\nerrors. In this section we detail some checks that CAVaT\ncan perform on a TimeML corpus.\nError checks are defined as Python modules, so that one\nmay describe a detection method for an error case and share\nit with other researchers without modifying CAVaT's core\ncode. The modules inherit from the cavatModule class;\ndocumentation is in the source code, and one may view a\nlist of available modules with the command check list.\n2.3.1. Inconsistent closure\nIt is possible to create an inconsistent configuration of temporal links. For example, we may have A BEFORE B and\nB INCLUDES A; this is clearly not possible, as INCLUDES\nstipulates that the start point of A occur after the start point\nof B (see Figure 2). While this example is fairly clear, it\nmay not be at all clear to human annotators that a partial\ntemporal link annotation could imply an inconsistent configuration.\nAutomatically checking the consistency of a temporal network is hard. TimeML's relations are based on those of\nAllen (1983), and it is difficult to guarantee the consistency\nof networks formed using the latter set of relations (Vilain et al., 1989; Tsang, 1987). We re-state the problem\nin a more simple fashion, as follows. Intervals are represented by pairs of endpoints, and we define intervals and\nthe TimeML relations between them in terms of relations\nbetween these points. Our model uses only simultaneous\n(=) and before (<) relations.\nThe consistency checker works in a similar way to the closure algorithm in Setzer et al. (2005). It maintains an\nagenda and database. Assertions are taken from the agenda\nand used to infer further assertions when combined with\nassertions in the database. We initially process intervals in\nthe document (taken from TLINK arguments) \u2013 for each\ninterval I we add Istart < Iend to the database. We then\ngenerate initial data for the agenda based on TLINKs in the\ndocument and a mapping for each TLINK to one or more\nassertions, listed in Table 2.\nThe only inference rules needed with our minimal set of\nrelations are:\n\u2022 If x = y then y = x\n\u2022 If x = y and y = z then x = z\n\u2022 If x < y and y < z then x < z\n\nIBEFORE\nINCLUDES\nIS INCLUDED\nBEGINS\nBEGUN BY\nENDS\nENDED BY\nSIMULTANEOUS\nIDENTITY\nDURING\nDURING INV\n\nRelation added to agenda\naend < bstart\nbend < astart\nbend = astart\naend = bstart\nastart < bstart , bend < aend\nbstart < astart , aend < bend\nastart = bstart , aend < bend\nastart = bstart , bend < aend\naend = bend , bstart < astart\nbend = aend , astart < bstart\nastart = bstart , aend = bend\nastart = bstart , bend = aend\nastart = bstart , aend = bend\nastart = bstart , aend = bend\n\nWe can take items from the agenda. For each such item,\nwe compare it against the database, and deduce new relations using the above rules. If a newly generated relation\nconflicts with anything in the agenda or database, then the\ndocument is inconsistent. Otherwise, we will move the item\nfrom the agenda to the database, and add newly generated\nrelations to the agenda. If we can clear the agenda, then\nthe document is consistent; otherwise, it is not. Whether\nwe add new relations to the top or bottom of the agenda\n(achieving depth- or breadth-first search, respectively) is irrelevant to the success of the algorithm, though computational performance differences have not been measured.\nOur baselines are the results of the tlink loop test (Section 2.3.3.) and also the results of closure success according\nto SputLink (Verhagen, 2005). This algorithm detected all\nknown inconsistencies in TimeBank, and found one more;\nfull details are later in Section 5.2. A test TimeML corpus\nis included with CAVaT for verifying that the consistency\nchecker works, which alternative implementations may use\nfor validation.\nBelow is sample output from a consistency check:\ncavat> check consistent in 3\n# Temporal graph consistency checker v1 loaded\n# Checking wsj_0927.tml (id 3)\n! Inconsistent closure - could not assert\n(ei2415_2 < ei2414_1)\n\n2.3.2. Disconnected sub-graph detection\nAfter inferring a temporal closure (Verhagen, 2005) of a\ndocument, one is usually left with a single interconnected\ntemporal graph, where nodes are TIMEX3s or EVENTs\nand edges represent TLINKs. However, disconnected\ngroups of links may exist post-closure. This should be\nbrought to the attention of the user; it often suggests that\nannotating a small number of additional links can greatly\nincrease the amount of data inferable though closure, and\nthat an annotation is incomplete.\nCAVaT's sub-graph identification module, split graph,\nworks by processing TLINKs from a document sequentially. We maintain a list of sets that will hold intercon-\n\n\fnected intervals, beginning with an empty list. For each\nTLINK, we check to see if either of its arguments (which\nare both intervals) can be found in any set in our list. If\none argument can but the other cannot, the new interval is\nadded to the same set as the found interval. If they are\nboth found in the same set, no action is taken. If they are\nfound in different sets, those two sets are merged. If neither\nTLINK argument can be found anywhere, a new set holding both intervals is created. This process is repeated until\nall TLINKs have been processed, at which point each set in\nthe list represents an independent sub-graph of connected\nintervals.\nThe module will then report statistics about the graph(s)\nfound in the specified document. These include:\n\u2022 Count of sub-graphs, intervals and TLINKs;\n\u2022 The number of \"isolated\" sub-graphs \u2013 that is, those\ndescribed by only one temporal link \u2013 and the proportion of intervals/links used to describe all these isolated sub-graphs;\n\u2022 Mean and maximum sub-graph size, and the proportion of the document's intervals that are in the largest\nsub-graph;\n\u2022 The entropy of sub-graph sizes, which acts as a \"fracturedness\" measure, showing how far the document\nis from having one single totally connected temporal\ngraph including all TLINKs;\n\u2022 The distribution of sub-graph sizes.\nEven though sub-graphs are populated by processing the\ntwo intervals of a TLINK at the same time, it is possible\nto have a sub-graph containing just one node, in the case\nof a TLINK loop (Section 2.3.3.). Note that a document\ncontaining intervals but no temporal links between them is\nmarked as \"un-fractured\", as this check ignores any items\nnot referenced at least once by a temporal link.\nHere is sample output from an attempt to identify disconnected sub-graphs:\ncavat> check split_graph in 3\n# Split graph detection v1 loaded\n# Checking wsj_0927.tml (id 3)\nSubgraphs found: 13 - composed of 69 nodes and linked\nby 65 TLINKS.\nIsolated subgraphs, that contain just one TLINK: 5\n(making up 38.5% of all subgraphs / consuming 14.5%\nof all nodes / described by 7.7% of all TLINKs);\nMean graph size 5.3 nodes; largest subgraph (size 35)\nhas 50.7% of all nodes.\nEntropy of subgraph sizes: 0.448277644573\n2 nodes: ( 5) .....\n3 nodes: ( 4) ....\n4 nodes: ( 3) ...\n35 nodes: ( 1) .\n\n2.3.3. Superfluous TLINKs\nSome TLINKs in TimeML corpora have been specified that\nassociate an event with itself. For example:\n<TLINK lid=\"l67\" relType=\"IDENTITY\"\n\ntency checking, those which specify a SIMULTANEOUS\nor IDENTITY relation will not.\nBelow is sample output, showing some superfluous\nTLINKs:\ncavat> check tlink_loop in 165 159 143\n# TLINK loop checker v1 loaded\n# Checking ABC19980304.1830.1636.tml (id 165)\nTLINK ID l23 may be a loop (eventID match), type\nINCLUDES, event ei286 / ei288 - check document\nmanually\n# Checking wsj_1013.tml (id 159)\nTLINK ID l107 loops directly (instanceID match), type\nIDENTITY, event ei2495 / ei2495\n# Checking wsj_0586.tml (id 143)\nTLINK ID l192 loops directly (instanceID match), type\nBEFORE, event ei1404 / ei1404\n\n2.3.4. Orphaned object details\nThere is not yet a definition for TimeML annotation completeness, that states a minimal satisfactory level of annotation for a document. In the absence of such a definition, it\nis not a mistake to annotate entities without attaching them\nto anything else in the document. However, we believe that\nwherever possible, every interval should be connected to at\nleast one other interval, and that the annotation of entities\nthat do not contribute or relate to any other annotated information is superfluous. For example, if one chooses to\nmark text as a temporal signal, a related link or event instance should reference the signal. In this example, if the\nsignal conveys no temporal information, it should not be\nannotated.\nTo this end, CAVaT includes a module that is aware of five\ncases which describe objects attached to nothing else, and\nreports such orphan objects. Firstly, any TIMEX3 that is\nnot related by any link is deemed to be independent. Also,\nany event instance (from MAKEINSTANCE) that is not\nreferenced by a link is also orphaned. Next, an EVENT\nthat is never instantiated is unattached, as instantiation is\nrequired by current TimeML syntax before EVENTs can\nbe linked to anything else. Instances that come from nonexistent or mislabelled EVENTs are also orphans. Finally,\nSIGNALs that are not referenced by any link or event instance (as in our example above) are included in the list of\norphaned objects.\nHere is the sample output from a check for orphans:\ncavat> check orphans in wsj_0927.tml\n# Orphaned tag detection v1 loaded\nTIMEX3 t104 not in any link\nTIMEX3 t131 not in any link\n\n2.4. Limitations\nCAVaT is currently limited in the number of objects (based\non TimeML tags) that it can store for a single corpus. Objects are stored in MySQL tables, and these are limited by\nthe operating system's maximum file size limit. The maximum number of corpora that CAVaT can stored is restricted\nto the operating system limit of files in a single directory.\n\neventInstanceID=\"ei1241\" relatedToEventInstance=\"ei1241\"\n/>\n\nIn this case, the only information conveyed is that ei1241\nis identical to itself, making this a redundant TLINK. CAVaT includes a check that will identify TLINKs where both\narguments reference the same event instance or event. Although such TLINK loops might be detected by consis-\n\n3.\n\nSyntax\n\nHere we briefly introduce CAVaT's basic top-level commands, and some of their more useful features. A\nfull specification of CAVaT's syntax is available at\nhttp://code.google.com/p/cavat.\n\n\f3.1. Corpus manipulation\nCommands for manipulating TimeML corpora within CAVaT begin with corpus. One may view a list of available\ncorpora with corpus list, and use a name from the resulting list to select a corpus for querying or checking with\nthe corpus use command. It is also possible to view\nany notes attached to the currently selected corpus by using\ncorpus info. Before one can use a corpus, though, a\ndirectory of TimeML files must be imported into CAVaT,\nusing corpus import. One may also opt to fold the\ncorpus on import (see Section 2.1.); a note will be attached\nto the database if this has been done.\n3.2. Querying\nThe show command generates reports from the current corpus. Reports focus on one tag type, and give information\nabout its attributes. One can view all values for a tag with\n\"list\" reports, or the distribution of values with \"distribution\" reports, or simply see how many instances of that tag\nuse a particular field with \"state\" reports.\nThe general format for report generation is:\nshow <report type> of <tag> <field> [as <format>]\n\nFrom the above example, <tag> corresponds to a TimeML\ntag, and is one of event, instance, timex3, signal,\ntlink, slink or alink. As well as the attributes available for each tag, the following extra values for <field>\nare available:\n\u2022 For TLINKs, signaltext refers to the text enclosed by the start and end tags of an associated signal;\n\u2022 For EVENTs, one may reference all the attributes of a\nMAKEINSTANCE tag too;\n\u2022 In TLINKs, SLINKs and ALINKs the arguments are\nreferred to as arg1 and arg2, so that the CAVaT user\ndoes not have to worry about the implicit indication of\ninterval type present in attribute names.\nReports are available in multiple formats. These can be\nspecified by adding as <format> to the end of a show\nquery.\n\u2022 screen - The default choice, screen gives text formatted for display in a fixed-width font.\n\u2022 csv - Output as comma separated values.\n\u2022 tex - TeX table format, including caption.\nThe TeX output of an example report, showing the distribution of TLINK relTypes in TimeBank v1.2, can\nbe generated with show distribution of tlink\nreltype as tex and is shown in Table 3.\nOne may also specify a subset of a corpus to be used for\nreporting, using a simple where clause. For example, one\nmay ask:\ncavat> show state of tlink signalid where reltype is\nafter\n\nto see how many TLINKs of type\none may ask:\n\nAFTER\n\nTable 3: Distribution of Tlink reltype\n\nTlink reltype\nBEFORE\nIS INCLUDED\nAFTER\nIDENTITY\nSIMULTANEOUS\nINCLUDES\nDURING\nENDED BY\nENDS\nBEGUN BY\nBEGINS\nIAFTER\nIBEFORE\nDURING INV\nTotal\n\nFrequency\n1408\n1357\n897\n743\n671\n582\n302\n177\n76\n70\n61\n39\n34\n1\n6418\n\nProportion\n21.9%\n21.1%\n14.0%\n11.6%\n10.5%\n9.07%\n4.71%\n2.76%\n1.18%\n1.09%\n0.95%\n0.608%\n0.53%\n0.0156%\n\nto use and close to natural language, there are multiple valid\nsyntaxes for filled/unfilled attributes.\n3.3. Browsing\nThe ability to examine annotated entities in a TimeML corpus is required as part of investigative research. To enable\nthis, CAVaT includes the browse command.\nBrowsing allows the user to select a document (with\nbrowse doc, followed by a document ID or filename),\nand then view any tag within that document. Associated\ndata is also shown; for example, if one browses an EVENT\ntag, any related MAKEINSTANCE tags will also be listed.\nOne may view the tag in three formats \u2013 screen, the default; csv, as two rows of comma-separated values (the\nfirst with attribute names as column headings); or timeml,\ngiving valid TimeML for the requested object. The syntax\nfor these is the same as that for show commands; simply\nappend as <output type> to the browse command.\nThe document selected for browsing is also used as the\ndefault document for checks, which are detailed in Section 2.3.\n\n4.\n\nExample tasks\n\nBelow are some examples of using CAVaT to address real\nresearch problems. All are based on TimeBank v1.2.\n4.1. Show all temporal links that employ a signal\nAs part of research toward better automatic TLINK annotation, we wanted to know what proportion of TLINKs in a\ncorpus had been annotated as employing a signal.\ncavat> show state of tlink signalid\nCount State of Tlink signalid\n===========================================\n718 signalid filled\n(11.2%)\n5700 signalid unfilled (88.8%)\n\nuse a signal; or,\n\ncavat> show distribution of tlink reltype where signalid\nis not filled\n\nto find out which relTypes are most likely in TLINKs that\ndo not specify a signal. As part of CAVaT's goal to be easy\n\nThe state keyword here treats signalID as having two\nstates \u2013 filled or unfilled. The TLINK's signalid field\nwill either be empty/absent or contain a reference to a signal annotated in text; for this task, we do not care which\nspecific signal is being referenced.\n\n\fTable 4: Distribution of Event part-of-speech\n\nEvent pos\nVERB\nNOUN\nOTHER\nADJECTIVE\nPREPOSITION\nTotal\n\nFrequency\n5122\n2225\n299\n266\n28\n7940\n\nProportion\n64.5%\n28.0%\n3.77%\n3.35%\n0.353%\n\n4.4. Superfluous TLINK checking\nOne may want to find instances where a link has been made\nbetween an entity and itself. We have an error checking\nmodule for this, tlink loop:\ncavat> check tlink_loop in WSJ910225-0066.tml\nTLINK ID l383 matches, type IS_INCLUDED, event ei1482\nTLINK ID l376 matches, type AFTER, event ei1454\nTLINK ID l345 matches, type AFTER, event ei1356\n\nOne can explicitly query in all to search the entire corpus for similar mis-annotations.\n\nTable 5: Distribution of Tlink signal text when Reltype is \"before\"\n\n5.\nSignal text\nbefore\nPreviously\nby\nalready\nEarlier\nuntil\nthen\nfollowed by\nprior to\nOther signals, frequency 1\nTotal\n\nFrequency\n24\n10\n7\n6\n6\n5\n4\n2\n2\n10\n76\n\nProportion\n31.6%\n13.2%\n9.21%\n7.89%\n7.89%\n6.58%\n5.26%\n2.63%\n2.63%\n13.2%\n\n4.2. Dealing with ambiguous \"part of speech\" values\nMany instances of events in TimeBank assert\npos=\"other\". This is a problem when, e.g., using\nWordNet to lemmatise event strings. The distribution in\nTable 4 can be created with the command:\ncavat> show distribution of event pos\n\nAfter this, we would like to view event text that is classified\nas other, using the following query:\ncavat> show list of event text where pos is other\n#10.86\n#39.8 million\n#54.8 million\n$1\n$1.05\n(truncated)\n\nThe result suggests that there are at least some numeric values for these event tokens, as well as the more typical verbs.\nThis led to the substitution of all currency and numeric\nevent strings with representative tokens, as a feature for a\nCRF classifier, yielding a performance increase in TLINK\nclassification (in unpublished results).\n4.3. Which signals does the BEFORE relation use?\nSometimes, particular relation types are strongly suggested\nby related signals. To determine the signal texts used with\nBEFORE TLINKs, one may query:\ncavat> show distribution of tlink signaltext where\n\nValidation of a sample corpus\n\nAs we can now load and process any TimeML corpus,\nand have a set of advanced validation tests, it is logical\nto test existing TimeML annotated corpora and examine\nthem. In this section, we present the results of running CAVaT's check modules on TimeBank v1.2. This corpus is\nnot new and has been amended and improved by the community (Boguraev et al., 2007), so may contain many fewer\nerrors than freshly annotated documents.\n5.1. Checking for loops\nWe used the tlink loop module (Section 2.3.3.) on the\ncorpus. This identifies TLINKs where both arguments are\nthe same event or event instance.\nOf TimeBank's 183 documents, 19 have at least one TLINK\ncontaining such a loop, and there are 26 loops in total. Of\nthese loops, 10 are on TLINKs of type SIMULTANEOUS or\nIDENTITY . Such TLINKs will not make a graph inconsistent, but are certainly redundant. The remaining 16 loops\nof other types will cause an inconsistency. All but one of\nthe loops found are temporal links where both arguments\nreference the same event instance; only one references two\ndifferent instances of the same event (TLINK L23, in document ABC19980304.1830.1636.tml). The TimeML in\nquestion is as follows:\nBut they still have <EVENT eid=\"e28\"\nclass=\"I ACTION\">catching</EVENT> up to do two hundred\nand thirty four Americans have <EVENT eid=\"e30\"\nclass=\"OCCURRENCE\">flown</EVENT> in space, only twenty\nsix of them women.\n<MAKEINSTANCE eventID=\"e30\" eiid=\"ei286\" tense=\"PRESENT\"\naspect=\"PERFECTIVE\" polarity=\"POS\" cardinality=\"234\"\npos=\"VERB\"/>\n<MAKEINSTANCE eventID=\"e30\" eiid=\"ei288\" tense=\"PRESENT\"\naspect=\"PERFECTIVE\" polarity=\"POS\" cardinality=\"26\"\npos=\"VERB\"/>\n<TLINK lid=\"l23\" relType=\"INCLUDES\"\neventInstanceID=\"ei286\" relatedToEventInstance=\"ei288\"/>\n\nIn this case, the annotation suggests that during the flying in\nspace of 234 Americans, 26 women flew, which is a correct\ninterpretation of the text. CAVaT recommends the manual\nexamination of eventID loops upon their detection. All\nthe other tags reported by this check indicate redundant or\nincorrect annotations.\n\nreltype is before\n\nFrom the results in Table 5, we can see that the token \"before\" suggests a BEFORE relation, but that the majority\nof annotated BEFORE relations do not employ this signal\n(from Table 3, there are a total of 1408 such relations, only\n24 of which use the signal). This indicates that building a\nrelation classifier that relies solely on such signals will not\nbe useful.\n\n5.2. Checking for consistent graphs\nSince the consistency checker uses a novel method (see\nSection 2.3.1), we verified its output by comparing it with\nthat of SputLink and CAVaT's loop detection, and finding\nexplanations for every inconsistency. A small test corpus\nof TimeML documents is also included with CAVaT for assuring the accuracy of this tool.\n\n\fSputLink would not report an inconsistency with a TLINK\nloop that was not of type SIMULTANEOUS or IDENTITY;\nmany of the inconsistent documents were found faulty by\nboth SputLink and CAVaT. Some documents had an erroneous initial TLINK configuration; most faults were subtler\nthan this, and their discovery required a closure attempt.\n\nAcknowledgements The first author would like to acknowledge the UK Engineering and Physical Science Research Council for support in the form of a doctoral studentship, and Marc Verhagen of Brandeis University for\nuseful comments on the temporal closure process.\n\n7.\n5.3. Checking for split graphs\nThe split graph module checks for documents whose\ntemporal graphs contain sets disconnected TLINKs. No\nsingle document in TimeBank has a fully-connected temporal graph, with a path traceable between every interval. The \"best-connected\" document (least fractured) is\nwsj 0144.tml, which has 34 intervals split into only two\nsubgraphs; one containing 32 intervals, the other two.\nThe most fractured document is wsj 1033.tml, which is\nsplit into 12 sub-graphs having a mean graph size of only\n2.7 intervals (a single TLINK connected to no other creates a graph of size 2). Despite having 32 intervals in total\nto connect, the largest sub-graphs in this document include\nonly 4 intervals.\n5.4. Replication\nThe results above can be simply replicated by downloading\nCAVaT v1, gathering a copy of TimeBank v1.25 , importing the data/timeml/ subdirectory of TimeBank, and\nrunning check test in all in CAVaT, where test\nis the name of the desired test module.\n\n6.\n\nConclusion and future work\n\nWe have described CAVaT, a language-independent tool\nwhich adds a layer of abstraction between TimeML markup\nand human researchers, making data easier to analyse, and\npatterns easier to spot. It also helps identify trouble spots\nin annotations.\nTimeML corpora are only available at this time in Romanian (For\u0103scu et al., 2007) and English; this makes multilingual testing of the tool difficult. However, the markup\nis not language-specific, and results are likely to be equally\nuseful across many languages; this may be shown using test\ncorpora released for TempEval 26 , which will include English, Italian, Spanish, Chinese, Korean and French.\nFuture work CAVaT may be able to provide repair suggestions. These may include fixes for inconsistent graphs,\nas well as suggestions for missing fields based on lexical resources, third-party tools or heuristics. The modular error\nchecks allow creation of an open database of TimeML validations, to help improve the integrity of all TimeML corpora. Check modules that match the output of rule-based\nhigh confidence tools such as S2T (Verhagen and Pustejovsky, 2008) can be added.\nThe consistency checker is \"a TimeML closure engine that\nuses the precise relations behind the scenes\" (Verhagen,\n2005). Therefore, it may be used to empirically discover\nhow often incorrect links are introduced in closure, when\ncompared with the existing leading closure tool, SputLink.\n5\n6\n\nLDC catalogue number LDC2006T08\nhttp://www.timeml.org/tempeval2/\n\nReferences\n\nJ.F. Allen. 1983. Maintaining Knowledge about Temporal\nIntervals. Communications of the ACM, 26(11).\nB. Boguraev, J. Pustejovsky, R. Ando, and M. Verhagen.\n2007. Timebank evolution as a community resource for\ntimeml parsing. Language Resources and Evaluation,\n41(1):91\u2013115.\nL. Burnard and T. Dodd. 2003. Xara: an XML aware tool\nfor corpus searching. In Proceedings of Corpus Linguistics, pages 142\u20134.\nC. For\u0103scu, R. Ion, and D. Tufi\u015f. 2007. Semi-automatic\nAnnotation of the Romanian TimeBank 1.2. In Proceedings of the RANLP Workshop on Computer-aided language processing, pages 978\u2013954.\nISOTimeML Working Group. 2008. 24617-1: 2008.\nLanguage resources management\u2013Semantic annotation\nframework (SemAF)\u2013Part1: Time and events. ISO/TC\n37/SC 4/WG 2.\nM. Hepple, A. Setzer, and R. Gaizauskas. 2007. USFD:\npreliminary exploration of features and classifiers for the\nTempEval-2007 tasks. In Proceedings of the 4th International Workshop on Semantic Evaluations, pages 438\u2013\n441. Association for Computational Linguistics.\nM. Lapata and A. Lascarides. 2006. Learning sentenceinternal temporal relations. Journal of Artificial Intelligence Research, 27(1):85\u2013117.\nI. Mani, M. Verhagen, B. Wellner, C.M. Lee, and J. Pustejovsky. 2006. Machine learning of temporal relations.\nIn Proceedings of the 44th annual meeting of the Association for Computational Linguistics, page 760.\nJ. Pustejovsky, P. Hanks, R. Sauri, A. See, R. Gaizauskas,\nA. Setzer, D. Radev, B. Sundheim, D. Day, L. Ferro,\net al. 2003. The TimeBank corpus. In Corpus Linguistics, pages 647\u2013656.\nA. Setzer, R. Gaizauskas, and M. Hepple. 2005. The role\nof inference in the temporal annotation and analysis of\ntext. Language Resources and Evaluation, 39(2):243\u2013\n265.\nE.P.K. Tsang. 1987. The consistent labeling problem in\ntemporal reasoning. In Proc. AAAI Conference, Seattle,\npages 251\u2013255.\nM. Verhagen and J. Pustejovsky. 2008. Temporal processing with the TARSQI toolkit. Proceedings of CoLing:\nPosters and Demonstrations, pages 189\u2013192.\nM. Verhagen. 2005. Temporal closure in an annotation environment. Language Resources and Evaluation,\n39(2):211\u2013241.\nM. Vilain, H. Kautz, and P. Van Beek. 1989. Constraint\npropagation algorithms for temporal reasoning: A revised report. Readings in qualitative reasoning about\nphysical systems, 373:381.\n\n\f"}