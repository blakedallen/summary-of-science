{"id": "http://arxiv.org/abs/0903.3696v4", "guidislink": true, "updated": "2014-11-06T17:19:40Z", "updated_parsed": [2014, 11, 6, 17, 19, 40, 3, 310, 0], "published": "2009-03-23T18:55:32Z", "published_parsed": [2009, 3, 23, 18, 55, 32, 0, 82, 0], "title": "Notes on solving and playing peg solitaire on a computer", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0903.0065%2C0903.2557%2C0903.2690%2C0903.3899%2C0903.5376%2C0903.5333%2C0903.0816%2C0903.2414%2C0903.2435%2C0903.3717%2C0903.4853%2C0903.0889%2C0903.4722%2C0903.1372%2C0903.4644%2C0903.2102%2C0903.2537%2C0903.0771%2C0903.4961%2C0903.0103%2C0903.2576%2C0903.0940%2C0903.4428%2C0903.1852%2C0903.1048%2C0903.5009%2C0903.1952%2C0903.4667%2C0903.4183%2C0903.3612%2C0903.2346%2C0903.2814%2C0903.5116%2C0903.5264%2C0903.1215%2C0903.2063%2C0903.3981%2C0903.1633%2C0903.1804%2C0903.4395%2C0903.0616%2C0903.1103%2C0903.4611%2C0903.3342%2C0903.1960%2C0903.1475%2C0903.4923%2C0903.0203%2C0903.1288%2C0903.3065%2C0903.2522%2C0903.1646%2C0903.3819%2C0903.3855%2C0903.1934%2C0903.3690%2C0903.0286%2C0903.0162%2C0903.4484%2C0903.4921%2C0903.4929%2C0903.0295%2C0903.5029%2C0903.3696%2C0903.4049%2C0903.2147%2C0903.0303%2C0903.0830%2C0903.0702%2C0903.1838%2C0903.0942%2C0903.2710%2C0903.1594%2C0903.3331%2C0903.2094%2C0903.1331%2C0903.1737%2C0903.1867%2C0903.2339%2C0903.5326%2C0903.5153%2C0903.2682%2C0903.4492%2C0903.5268%2C0903.1395%2C0903.2604%2C0903.4573%2C0903.0396%2C0903.1853%2C0903.1885%2C0903.2120%2C0903.5040%2C0903.5024%2C0903.5011%2C0903.3762%2C0903.0918%2C0903.0337%2C0903.5158%2C0903.3693%2C0903.5231%2C0903.1776&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Notes on solving and playing peg solitaire on a computer"}, "summary": "We consider the one-person game of peg solitaire played on a computer. Two\npopular board shapes are the 33-hole cross-shaped board, and the 15-hole\ntriangle board---we use them as examples throughout. The basic game begins from\na full board with one peg missing and the goal is to finish at a board position\nwith one peg. First, we discuss ways to solve the basic game on a computer.\nThen we consider the problem of quickly distinguishing board positions where\nthe goal can still be reached (\"winning\" board positions) from those where it\ncannot. This enables a computer to alert the player if a jump under\nconsideration leads to a dead end. On the 15-hole triangle board, it is\npossible to identify all winning board positions (from any single vacancy\nstart) by storing a key set of 437 board positions. For the \"central game\" on\nthe 33-hole cross-shaped board, we can identify all winning board positions by\nstoring 839,536 board positions. By viewing a successful game as a traversal of\na directed graph of winning board positions, we apply a simple algorithm to\ncount the number of ways to traverse this graph, and calculate that the total\nnumber of solutions to the central game is 40,861,647,040,079,968. Our analysis\ncan also determine how quickly we can reach a \"dead board position\", where a\none peg finish is no longer possible.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0903.0065%2C0903.2557%2C0903.2690%2C0903.3899%2C0903.5376%2C0903.5333%2C0903.0816%2C0903.2414%2C0903.2435%2C0903.3717%2C0903.4853%2C0903.0889%2C0903.4722%2C0903.1372%2C0903.4644%2C0903.2102%2C0903.2537%2C0903.0771%2C0903.4961%2C0903.0103%2C0903.2576%2C0903.0940%2C0903.4428%2C0903.1852%2C0903.1048%2C0903.5009%2C0903.1952%2C0903.4667%2C0903.4183%2C0903.3612%2C0903.2346%2C0903.2814%2C0903.5116%2C0903.5264%2C0903.1215%2C0903.2063%2C0903.3981%2C0903.1633%2C0903.1804%2C0903.4395%2C0903.0616%2C0903.1103%2C0903.4611%2C0903.3342%2C0903.1960%2C0903.1475%2C0903.4923%2C0903.0203%2C0903.1288%2C0903.3065%2C0903.2522%2C0903.1646%2C0903.3819%2C0903.3855%2C0903.1934%2C0903.3690%2C0903.0286%2C0903.0162%2C0903.4484%2C0903.4921%2C0903.4929%2C0903.0295%2C0903.5029%2C0903.3696%2C0903.4049%2C0903.2147%2C0903.0303%2C0903.0830%2C0903.0702%2C0903.1838%2C0903.0942%2C0903.2710%2C0903.1594%2C0903.3331%2C0903.2094%2C0903.1331%2C0903.1737%2C0903.1867%2C0903.2339%2C0903.5326%2C0903.5153%2C0903.2682%2C0903.4492%2C0903.5268%2C0903.1395%2C0903.2604%2C0903.4573%2C0903.0396%2C0903.1853%2C0903.1885%2C0903.2120%2C0903.5040%2C0903.5024%2C0903.5011%2C0903.3762%2C0903.0918%2C0903.0337%2C0903.5158%2C0903.3693%2C0903.5231%2C0903.1776&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We consider the one-person game of peg solitaire played on a computer. Two\npopular board shapes are the 33-hole cross-shaped board, and the 15-hole\ntriangle board---we use them as examples throughout. The basic game begins from\na full board with one peg missing and the goal is to finish at a board position\nwith one peg. First, we discuss ways to solve the basic game on a computer.\nThen we consider the problem of quickly distinguishing board positions where\nthe goal can still be reached (\"winning\" board positions) from those where it\ncannot. This enables a computer to alert the player if a jump under\nconsideration leads to a dead end. On the 15-hole triangle board, it is\npossible to identify all winning board positions (from any single vacancy\nstart) by storing a key set of 437 board positions. For the \"central game\" on\nthe 33-hole cross-shaped board, we can identify all winning board positions by\nstoring 839,536 board positions. By viewing a successful game as a traversal of\na directed graph of winning board positions, we apply a simple algorithm to\ncount the number of ways to traverse this graph, and calculate that the total\nnumber of solutions to the central game is 40,861,647,040,079,968. Our analysis\ncan also determine how quickly we can reach a \"dead board position\", where a\none peg finish is no longer possible."}, "authors": ["George I. Bell"], "author_detail": {"name": "George I. Bell"}, "author": "George I. Bell", "arxiv_comment": "25 pages, 11 figures, 8 tables. Some text rewritten, more ancillary\n  material added", "links": [{"href": "http://arxiv.org/abs/0903.3696v4", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0903.3696v4", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "math.CO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "math.CO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.DM", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "math.HO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "00A08, 97A20", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0903.3696v4", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0903.3696v4", "journal_reference": null, "doi": null, "fulltext": "Notes on solving and playing\npeg solitaire on a computer\nGeorge I. Bell\n\narXiv:0903.3696v4 [math.CO] 6 Nov 2014\n\ngibell@comcast.net\n\nAbstract\nWe consider the one-person game of peg solitaire played on a computer. Two\npopular board shapes are the 33-hole cross-shaped board, and the 15-hole triangle\nboard-we use them as examples throughout. The basic game begins from a full\nboard with one peg missing and the goal is to finish at a board position with one peg.\nFirst, we discuss ways to solve the basic game on a computer. Then we consider the\nproblem of quickly distinguishing board positions where the goal can still be reached\n(\"winning\" board positions) from those where it cannot. This enables a computer to\nalert the player if a jump under consideration leads to a dead end. On the 15-hole\ntriangle board, it is possible to identify all winning board positions (from any single\nvacancy start) by storing a key set of 437 board positions. For the \"central game\" on\nthe 33-hole cross-shaped board, we can identify all winning board positions by storing\n839,536 board positions. By viewing a successful game as a traversal of a directed\ngraph of winning board positions, we apply a simple algorithm to count the number\nof ways to traverse this graph, and calculate that the total number of solutions to the\ncentral game is 40,861,647,040,079,968. Our analysis can also determine how quickly\nwe can reach a \"dead board position\", where a one peg finish is no longer possible.\n\n1\n\nIntroduction\n\nPeg solitaire is one of the oldest puzzles, with a 300 year history. The puzzle consists of a\ngame board together with a number of pegs, or more commonly marbles. The board contains\na grid of holes in which these pegs or marbles are placed. Figure 1 shows the most common\nshapes for a peg solitaire board, the 33-hole cross-shaped board, and the 15-hole triangle\nboard.\nThe game is played by jumping one peg over another into an empty hole, removing the peg\nthat was jumped over. On the cross-shaped board of Figure 1a, these jumps must be made\nalong columns or rows, whereas on the triangle board of Figure 1c, jumps are allowed along\nany of the six directions parallel to the sides of the board. The goal is to finish with one\npeg, a more advanced variation is to finish with one peg at a specified hole. The basic game\nbegins from a full board with one peg removed, as in Figure 1a or c. Starting from Figure 1a\nand ending with one peg in the center of the board is known as the \"central game\" [1]. In\nFigure 1b or d we show starting configurations to be referred to later.\n\n1\n\n\fFigure 1: Popular peg solitaire boards: (a,b) the 33-hole cross-shaped board, (c,d) the 15hole triangle board.\nOnly relatively recently in the history of the game have computers been used as an interface\nto play the game, as well as solve the game. There are now dozens of versions of the game\navailable for playing on your computer or even your cell phone.\nA computer version of the game is in many ways less satisfying than a physical game.\nHowever, there are some definite advantages to playing the game on a computer. The board\ncan be reset instantly, and you won't be chasing marbles that fall off the board! You can\ntake back a jump, all the way back to the beginning if desired. This tends to make the game\neasier as you can more easily backtrack from dead ends. The sequence of jumps leading to\na solution can be recorded and played back. The computer can also be programmed to tell\nthe user if the jump they are considering leads to a dead end or not. Adding this ability to\na computer version of the game is tricky, and most versions do not have this ability. It is\nthe goal of this paper to describe efficient techniques to enable a computer to point out all\ngood and bad jumps from the current board position.\n\n2\n\nBoard types and symmetry\n\nWe label the holes in the 33-hole board using Cartesian coordinates (Figure 2a), but with\ny increasing downward. For the triangle boards, we use \"skew-coordinates\" as shown in\nFigure 2b. By adding 1 to each coordinate, and converting the first to a letter, we obtain\nthe standard board labelings used by Beasley [1] and Bell [5] (for example the central hole\n(3, 3) in Figure 2a becomes \"d4\", see Figure 9).\nThe 33-hole board has square symmetry. There are eight symmetry transformations of the\nboard, given by the identity, rotations of 90\u25e6 , 180\u25e6 and 270\u25e6 , and a reflection of the board\nfollowed by these 4 rotations [7] (the dihedral group D4 ). The triangle boards have 6-fold\nsymmetry, with 3 possible rotations of 0\u25e6 , 120\u25e6 or 240\u25e6 , plus a reflection followed by a rotation\n(the dihedral group D3 ).\nTo store a particular board position on a computer, we convert it to an integer by taking\none bit per hole. The most obvious way to do this is to take the board, row by row, top to\nbottom, as in Figure 2c. We will use N to denote the total number of holes on the board\n2\n\n\f2,0 3,0 4,0\n2,1 3,1 4,1\n0,2 1,2 2,2 3,2 4,2 5,2 6,2\n0,3 1,3 2,3 3,3 4,3 5,3 6,3\n0,4 1,4 2,4 3,4 4,4 5,4 6,4\n\n0,0\n0,1 1,1\n0,2 1,2 2,2\n0,3 1,3 2,3 3,3\n0,4 1,4 2,4 3,4 4,4\n0,5 1,5 2,5 3,5 4,5 5,5\n\n20\n1\n2\n2 2\n23 24 25\n6\n2 27 28 29\n210 211 212 213 214\n15\n2 216 217 218 219 220\n\n2,5 3,5 4,5\n2,6 3,6 4,6\n\nFigure 2: Hole coordinates for (a) the 33-hole cross-shaped board, (b) the triangle boards.\n(c) The weighting of each hole to convert a board position to a binary code.\n(the board size), so each board position is represented by an N bit integer. If b is a board\nposition we'll denote this integer representation by code(b). Many computer languages use\na 4-byte integer, the 33-hole board needs one more bit! Beasley [1, p. 249] gives a technique\nfor storing a board position on the 33-hole board using 4 fewer bits. This technique is used\nin the ancillary program \"pegs.cpp\". For boards with more than 32 holes, we usually split\ncode(b) into several 4-byte integers.\nThe complement of a board position b is obtained by replacing every peg by a hole (i.e.\nremoving it), and replacing every hole by a peg. The complement of b will be denoted as b.\nWe note that code(b) = code(f ) \u2212 code(b), where f is the board position where every hole\ncontains a peg, code(f ) = 2N \u2212 1. The starting position for the \"central game\" in Figure 1a\ntherefore has code 233 \u2212 216 \u2212 1.\nTwo board positions are symmetry equivalent if one can be converted to the other by a\nsymmetry transformation. This equivalence relation introduces a set of equivalence classes\nof board positions, which we call symmetry classes. The symmetry class of a board\nposition does not change after it is rotated or reflected. One way to choose a representative\nfrom each symmetry class is to take the one with the smallest code. We use the notation\nmincode(b) to denote this operation. For example, the board position b in Figure 1d has code\n20 + 21 + 22 + 28 + 213 = 8455, and the other 5 codes obtained by symmetry transformation\nare: 2183, 3156, 3904, 25106 and 25280, so mincode(b) = 2183. We also have mincode(b) =\n(215 \u2212 1) \u2212 maxcode(b) = 7487.\n\n3\n\nSingle vacancy to single survivor problems\n\nA peg solitaire problem which begins with one peg missing, with the goal to finish with one\npeg, will be called a single vacancy to single survivor problem, abbreviated SVSS. When\nthe starting vacancy (xs , ys ) and finishing hole (xf , yf ) are the same, the SVSS problem\nis called a complement problem, because the starting and ending board positions are\ncomplements of one another.\nA simple parity argument gives a necessary condition for solvability of a SVSS problem [1,\n3\n\n\fChapter 4]. On a square lattice (like the standard 33-hole board), the requirement is that\nxs and xf must differ by a multiple of 3, or that xs \u2261 xf (mod 3), and ys \u2261 yf (mod 3).\nStarting and ending board positions satisfying the above conditions are said to be in the\nsame position class (a second equivalence class). On a triangular lattice, the requirement\nis weaker: xs + ys \u2261 xf + yf (mod 3)1 . The main result is a peg solitaire jump does not\nchange the position class, thus an entire peg solitaire game is played in the same position\nclass. We will not go into the theory of position classes, the reader should see Beasley [1,\nChapter 4] or Bell [5] for triangular peg solitaire.\nIt is interesting to see what happens to the position class after the board is rotated or\nreflected. For the central game on the 33-hole board (Figure 1a), the position class is not\nchanged by rotations or reflections of the board. If we begin with (3, 3) vacant we can finish at\n(3, 3), or the rotationally equivalent holes (3, 0), (0, 3), (6, 3) and (3, 6). Any board position\nwhich begins from any of these five holes is in the position class of one peg in the center.\nMoreover, if we reflect and/or rotate the board at any time during the game, it remains in\nthe same position class. We call any SVSS problem beginning and ending at any of these\nholes \"Type A\"; their solutions are all interconnected (share the same board positions).\n\n2\n\n7\n4\n4 3\n\n2\n\nType A\n\n1\n\n2\n\n4\n3 4\n\n7\n6\n5\n\n7\n6 5\n\n2\n4 3\n4\nType B\n\n3 4\n4\n\n7\nType C 7\n\n7\n5 6\n\n5\n6\n\n7\n7\n\nFigure 3: The three types of SVSS problem on the standard 33-hole board.\nMore commonly, the position class does change after the board is rotated or reflected. \"Type\nB\" problems are shown in Figure 3b. In this case when we rotate the board, the position\nclass changes, but only among the 4 with single peg representatives in the holes shown in\nFigure 3b. Another way to look at Figure 3b is that we can begin with (xs , ys ) at any \"3\" or\n\"4\", and finish at any \"3\" or \"4\", if we allow peg solitaire jumps plus rotations and reflections\nof the board. The third \"Type C\" problems are shown in Figure 3c. The three problem\ntypes are in a sense completely separate-it is never possible to move from a SVSS problem\nof one type to another, even if you are allowed to rotate or reflect the board.\nWiegleb's board (Figure 4) is an extension of the standard 33-hole board and has 45 holes\n[1, p. 199\u2013201]. Wiegleb's board also has three problem types, but there are more SVSS\nproblems possible (36 in all, see [3]). Figure 5 shows the 6 \u00d7 6 square board, which also has\nthree problem types. In general, any square-lattice board will have three problem types.\n1\n\nBoth these conditions assume that the full and empty boards are in the same position class, a board\nsatisfying this is called a null-class board (see Beasley [1]). All the boards we will consider are null-class,\nexcept for the triangle board of side 4.\n\n4\n\n\f5\n\n5\n\n9\n\n2\n\n8\n4\n4 3\n\n5\n2\n\n1\n\n5\n\n2\n4 3\n\n3 4\n\nType B 4\n5\n\n2\n\n5\n\n7 6\n8\n\nType C 8\n\n4\n5\n\n8\n7\n6\n\n8\n9\n\n5\nType A\n\n4\n3 4\n\n8\n6 7\n\n6\n7\n\n9\n8\n\n8\n9\n\nFigure 4: The three types of SVSS problem on Wiegleb's 45-hole board.\n\n4\n1\n\n3 3\n\n6\n\n1\n3\n3\n\n1\n\n6\n\n4\n\n2 2\n2 2\n\n5 5\n5\n5\n\n3\n3\n6\n\n1\n4\n\n3 3\n\n4\n\n6\n5\n5\n\n5 5\n6\n\nType B\n\nType A\n\n6\n\n6\n6\n\nType C\n\nFigure 5: The three types of SVSS problem on the square 6x6 board.\nIn triangular peg solitaire the situation is somewhat different, for one thing there is only\none type of problem, Type A. On the triangle board of side n, if n \u2261 1 (mod 3), the board\nis not null-class and no complement problem can be solved (see Bell [5]). The only SVSS\nproblem on the 10-hole triangle board that is solvable is of the form: vacate (0, 1) finish at\n(1, 1). This gives only one type of problem that is solvable (see Figure 6a), and any problem\nstarting from an unmarked hole in Figure 6a cannot be solved to one peg.\n\n1 1\n\n2\n1 1\n3 4 3\n1 4 4 1\n2 1 3 1 2\n\n3\n1 1\n2 4 2\n2 5 5 2\n1 4 5 4 1\n3 1 2 2 1 3\n\n1 1\n2 3 2\n1 3 3 1\n1 2 1\n\nType A\n\nType A\n\nType A\n\nType A\n\n1 1\n1\n\n1\n\nFigure 6: SVSS problems on 10, 15, 21 hole triangle boards, and the 12-hole truncated\ntriangle board. The shaded holes show starting vacancies all in the same position class.\nThe 15-hole triangle board is null-class (Figure 6b). Here there are 4 different starting\nlocations, the \"standard starting vacancies\" for each of the 4 are shaded. Again all problems\n5\n\n\fare of type A, in a sense all problems on this board are interrelated (we shall see that they\nall must be considered together).\nThe 21-hole triangle board is also null-class (Figure 6c), and contains 5 different starting\nlocations. On this board it is possible to start with any peg missing, and finish at any hole\nusing peg solitaire jumps, plus rotating and flipping the board. The final board in Figure 6d\nis simply the 15-hole triangle board with the three corner holes removed. This \"12-hole\ntruncated triangle\" board is a good test case because all SVSS problems are solvable on it.\nIt is, in fact, the smallest rotationally symmetric board with this property.\nHere are several peg solitaire problems we are interested in solving:\n1. The complement problem: From a starting vacancy (xs , ys ), execute an arbitrary\nnumber of jumps, then determine if the board position can be reduced to one peg at\n(xs , ys ).\n2. The general SVSS problem: From a starting vacancy (xs , ys ), execute an arbitrary\nnumber of jumps, then determine if the board position can be reduced to one peg\n(anywhere on the board).\n3. The general problem: Given a configuration of pegs, determine if it can be reduced\nto one peg (anywhere on the board).\nWe will consider primarily the first two problems in this paper. We also want to solve these\nproblems quickly-ideally within a web browser. In determining if a jump leads to a dead\nend or not, a delay of one second is unacceptable.\nIt is important to realize that problems #2 and #3 are different. For example, on the 33-hole\nboard, a popular problem to solve is \"cross\" (Figure 1b). This board position is solvable to\none peg, but can never appear in the solution to any SVSS problem. How do we know this?\nBecause the complement of this board position cannot be reduced to one peg. See Bell [4]\nto clarify why SVSS board positions must have this property.\nA subtle point is that problems #1 and #2 are intimately associated with the shape of\nthe board, while problem #3 does not have to be associated with any board-in the most\ngeneral context we could consider problem #3 on an infinite board. In this sense we can\nsee that problem #3 is different and more general. A fair question is, why not go for the\nmost general and difficult problem #3? The reason is that the complement problem #1 and\ngeneral SVSS problem #2 are significantly easier, because we can take advantage of special\nproperties of their solutions.\n\n3.1\n\nComputer solving techniques\n\nThe simplest technique for solving a peg solitaire problem on a computer is to store the\nsequence of completed jumps, together with the current board position. One then performs\na depth-first search by jump (extending the jump sequence and backtracking when no further\njump is possible). The 15-hole triangle board can be easily solved using this technique, but\nit is much slower on the 33-hole board. The reason is that there are a large number of\n6\n\n\fjump sequences that result in the same board position, so there is a tremendous amount of\nduplicated work. This difficulty can be removed by storing board positions seen previously\nin a hash table or binary tree.\nAn improved technique is to stop recording the jump sequence, and look at the whole problem\nas a sequence of board positions (see [1]). Given a set of board positions F , we denote by\nD(F ) the set of board positions that can be obtained by performing every possible jump\nto every element of F . We call D(F ) the descendants of F . As a programming task\ncalculating D(F ) is straightforward. For example the set F can be stored on the disk as\na sequence of integer codes, we read each code and convert it to a board position. From\nthis board position we execute every possible jump, resulting in a large number of board\npositions which are stored in a binary tree (or hash table) to remove duplicates. This binary\ntree can be dumped to a file as a sequence of codes, the set D(F ).\nThe problem that eventually occurs is that the binary tree becomes too large to fit into\nmemory2 . At this point the problem is easily split into p smaller pieces that are calculated\nseparately (or in parallel). Let p be a prime number, chosen so that 1/p of the binary tree\nfits into memory. We now go through the board positions in F as before, but instead of\nstoring each descendant in a binary tree, we convert it to a code and write that code to a\ntemporary file numbered code(b)%p = code(b) (mod p). Here the \"%\" operator represents\nthe remainder upon division by p (as in C). After all board positions in F have been considered, we now go back through each of the p temporary files, filling a binary tree for each p\nto remove duplicates and writing the unique board positions to the disk.\nIn most cases we do not want to store two board positions that are in the same symmetry\nclass. For example, for the central game (Figure 1a), there are four first jumps, but these\nresult in identical board positions which are rotations of one another. A convenient way to\nselect a single representative from the symmetry class is to use the one with the smallest\ncode. In the above algorithms, we use mincode(b) in place of code(b).\nIn what follows, we will denote sets of board positions by capital letters. For a set of\nboard positions F , we denote by |F | the number of elements in the set, and F is the set of\ncomplemented board positions. In other words b \u2208 F if and only if b \u2208 F . Often these sets\nwill contain only board positions with the same number of pegs, so we adopt the convention\nthat a subscript (when present) must be the number of pegs. Fn , by this convention, contains\nonly board positions with n pegs. We can therefore deduce that all boards in D(Fn ) have\nn \u2212 1 pegs and all boards in Fn have N \u2212 n pegs (recall that N is the size of the board). This\nconvention is useful in understanding these sets, for example we can immediately conclude\nthat Fn \u2229 Fm = \u2205 when n 6= m.\nWe can also consider playing the game \"backwards\", which in this notation looks like this:\nlet b be a board position with n pegs, and Bn = {b}. Then D(Bn ) contains all board\npositions where b can be reached by executing one jump. We note that all elements of Bn\nhave N \u2212 n pegs, D(Bn ) have N \u2212 n \u2212 1 pegs, and D(Bn ) have N \u2212 (N \u2212 n \u2212 1) = n + 1\npegs, as expected.\n2\n\nOn Wiegleb's 45-hole board, after 22 jumps the tree contains over 2 billion elements.\n\n7\n\n\fLet bs be the starting board position with one peg missing, and let bf be the target board\nposition with one peg. Let FN \u22121 = {bs } and B1 = {bf }. We then define:\nFn = D(Fn+1 ), n = N \u2212 2, N \u2212 3, . . . , 1\n\n(1)\n\nNote that, as required of our notation, every element of Fn has exactly n pegs. This produces\na \"playing forward\" sequence of sets FN \u22122 , FN \u22123 , . . . , F1 . We are calculating the nodes in\nthe \"game tree\", but have lost all information about the links connecting them (however,\nthis link information is easily recovered). The problem has a solution if and only if bf \u2208 F1 .\nA sequence of sets can also be obtained from the finishing board position bf by \"playing\nbackwards\" from B1 = {bf },\n\u0001\nBn = D Bn\u22121 , n = 2, 3, . . . , N \u2212 1\n\n(2)\n\nAgain, every element of Bn has exactly n pegs, and the problem has a solution if and only\nif bs \u2208 BN \u22121 . It is worth noting that the sets Bn contain every board position which can be\nreduced to bf on this board. Thus, the sets Bn can be used to solve any problem #3 (p. 6)\nwhich finishes at bf . If we calculate Bn over all possible one peg finishes, we can solve any\nproblem #3 (on this board).\nThe set of \"winning board positions\" with n pegs is then defined as\nWn = Fn \u2229 Bn\n\n(3)\n\nIf we have any solution, and play this solution until reaching board b with n pegs, then it\nmust be that b \u2208 Wn . The sets Wn tend to be much smaller than Fn and Bn . These winning\nsets Wn are the nuggets of gold that we seek, because they will enable us to quickly recognize\nwhen a jump leads to a dead end.\nAs a practical matter, to find Wn it is not necessary to calculate every Fn and Bn for each n\nbetween 1 and N \u2212 1 and perform their intersection (intersecting two sets with potentially\nbillions of elements is not a trivial computation). Suppose we can calculate the forward sets\nto Fk , and the backward sets to Bk for some k between N \u2212 1 and 1. If the problem has a\nsolution, then Wk = Fk \u2229 Bk is not empty. We then compute Wk\u22121 , Wk\u22122, . . . , W1 = {bf }\nrecursively using\nWn = D(Wn+1 ) \u2229 Bn for n = k \u2212 1, k \u2212 2, . . . , 1,\n(4)\nand Wk+1 , Wk+2, . . . , WN \u22121 = {bs } using\nWn = Fn \u2229 D(Wn\u22121 ) for n = k + 1, k + 2, . . . , N \u2212 1.\n\n(5)\n\nTo calculate using equation (5), we take each element of Wn\u22121 , complement it, calculate\nall descendants and complement each. This yields the set D(Wn\u22121), and we now save each\nelement which is in common with Fn , giving us Wn . The recursive calculations (4) and (5)\nare much easier than calculating all Fn and Bn because the sets Wn tend to be orders of\nmagnitude smaller. The determination of Wn using (4) and (5) is considerably faster than\nthe initial task of calculating the sets Fk and Bk .\n8\n\n\fEquations (4) and (5) do not follow directly from (3), so here we justify that they are correct.\nFor every board position wn \u2208 Wn , there must exist a sequence of jumps from the starting\nboard position bs to wn (this is a direct consequence of the fact that wn \u2208 Fn ), and a sequence\nof jumps from wn to the finishing board position bf (because wn \u2208 Bn ). Taken all together,\nthese give the sequence of jumps in a solution. Therefore, associated with every wn \u2208 Wn\nthere exists (at least one) sequence of N \u2212 1 board positions,\nbs = wN \u22121 , wN \u22122 , . . . , wn+1 , wn , wn\u22121 , . . . , w2 , w1 = bf\nwhich show the state of the board as the solution is played. For every element wk in this\nsequence, wk \u2208 Wk , wk \u2208 D(Wk+1) and wk \u2208 D(Wk\u22121 ). These last two statements are\nexactly what is needed to prove (4) and (5) from (3).\nFinally, we note that the sets Fn , Bn and Wn can be defined in two subtly different ways.\nFirst, they can simply be sets of board positions. If bs is the starting position for the central\ngame (Figure 1a), then F32 = {bs }, and F31 has 4 elements which are rotations of one another.\nWe will sometimes refer to these sets as \"raw Fn \". In most cases, however, we will consider\nFn , Bn and Wn as sets of symmetry classes. Now the set F31 only has a single element, which\ncan be taken as any representative of this symmetry class, and generally we choose the one\nwith the smallest code(). These sets are called \"symmetry reduced\" Fn . If we refer to an\nunqualified Fn or Wn it can be assumed to be symmetry reduced.\n\n4\n\nThe complement problem\n\nFor a complement problem, we have bs = bf , so that B1 = FN \u22121 , and it follows from (1) and\n(2) that playing the game forward and backward amounts to the same thing,\nBn = FN \u2212n ,\n\n(6)\n\nWn = Fn \u2229 FN \u2212n ,\n\n(7)\n\nWn = WN \u2212n\n\n(8)\n\nand\nEquation (8) states that the sets of winning board positions are complements of one another.\nThis is a remarkable result, it is due to a fundamental symmetry between pegs and holes3 .\nFor a complement problem, we only need to store half the winning board positions. In\norder to calculate Wn the work is halved as well, for we need only calculate the forward sets\nFn down to k = \u230aN/2\u230b. After performing the intersection (7), the remaining Wn are then\ncalculated using Equation (4), which can be written using forward sets as\nWn = D(Wn+1 ) \u2229 FN \u2212n for n = k \u2212 1, k \u2212 2, . . . , 1.\n3\n\n(9)\n\nWhile the forward game jumps one peg over another peg into a hole, we can consider the backward game\nas jumping one hole over another hole into a peg! See \"Playing Backwards and Forwards\" [2, p. 817-8].\n\n9\n\n\fIs storing winning board positions the most efficient technique? During the start of a game,\nit does not seem so, because all board positions that can be reached are winning. Perhaps\nit is better to store \"losing board positions\", or positions from which a one peg finish at the\nstarting hole cannot be reached?\nWe could define the set of \"losing board positions\" with n pegs as those elements of Fn which\nare not in Wn . It would be more efficient to store only losing board positions which are one\njump away from a winning board position. Thus, we define\nLn = D(Wn+1 ) \u2212 Wn\n\n(10)\n\nTable 1 shows the sizes of Fn , Wn and Ln for the 15 and 21-hole triangle boards. All winning\nboard positions for any corner complement problem can be identified by storing just 95 board\npositions (15-hole board) or 26, 401 board positions (21-hole board). If we store losing board\npositions as defined by Equation (10), we need to store more than four times as many board\npositions.\n\nn (pegs)\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\nTotal\n\n15-hole triangle board\nRaw Symmetry reduced\n|Fn |\n|Fn | |Wn | |Ln |\n\n1\n1\n2\n1\n8\n4\n35\n19\n122\n62\n293\n149\n530\n268\n679\n344\n623\n317\n414\n215\n212\n112\n75\n39\n18\n10\n4\n3\n3,016 1,544\n\n1\n1\n2\n9\n18\n29\n35\n35\n29\n18\n9\n2\n1\n1\n\u2020 95\n\n0\n0\n2\n4\n20\n43\n86\n94\n89\n49\n29\n7\n1\n1\n425\n\n21-hole triangle board\nSymmetry reduced\n|Fn |\n|Wn |\n|Ln |\n1\n1\n0\n1\n1\n0\n4\n4\n0\n23\n23\n0\n117\n117\n0\n522\n503\n19\n1,881\n1,690\n185\n5,286\n4,328\n907\n11,754\n8,229 3,288\n20,860\n11,506 8,478\n28,697\n11,506 14,701\n29,784\n8,229 16,856\n23,263\n4,328 13,063\n14,039\n1,690 7,267\n6,683\n503 3,005\n2,545\n117\n935\n774\n23\n211\n168\n4\n34\n28\n1\n4\n5\n1\n1\n146,434 \u2020 26,401 68,954\n\nTable 1: Size of Fn , Wn and Ln for the corner complement problem on the 15 and 21-hole\ntriangle boards. \u2020 Only half of the Wn need to be stored, due to Equation (8).\n\n10\n\n\fFor the corner complement problem on the 15-hole triangle board, the winning board positions are Wn2 . Note that the subscript refers to the number of pegs, while the superscript\nrefers to the number assigned this starting vacancy in Figure 6. The sets Wn2 give us a simple technique for determining if we are \"on track\" to solve the corner complement problem.\nSuppose the current board state is b.\n1. If b contains more than \u230aN/2\u230b = 7 pegs, complement the board position. The board\nposition now has n pegs where 1 \u2264 n \u2264 \u230aN/2\u230b.\n2. Calculate mincode(b).\n3. If mincode(b) \u2208 Wn2 , then the complement problem can be solved from the current\nboard position, otherwise it cannot. Notice that mincode(b) 6\u2208 Wn2 does not necessarily\nimply that the board position cannot be solved to one peg, just not to one peg at the\nstarting location.\nWe also give the above algorithm in pseudocode:\nW[1]\nW[2]\nW[3]\nW[4]\nW[5]\n\n=\n=\n=\n=\n=\n\n{1} ! The set W_1^2\n{10} ! The set W_2^2\n{28, 112} !\nW_3^2\n{23, 58, 85, 120, 1108, 1616, 2076, 2210, 2272}\n{31, 93, 115, 601, 1054, 1138, 1140, 1562, 1648, 2183, 2218,\n2472, 2616, 2728, 2819}\nW[6] = { 125, 633, 1086, 1111, 1594, 1621, 2191, 2253, 2275, 2289,\n2723, 2785, 2841, 2889, 3126, 3250, 3298, 3428, 3634, 3845,\n4691, 4728, 4817}\nW[7] = {1567, 1651, 2235, 2365, 2413, 2537, 2731, 2793, 3159, 3196,\n3607, 3642, 3667, 3669, 3704, 3859, 3921, 4215, 4339, 4341,\n5302, 5350, 5746, 5810, 6881, 6985, 10053, 10065, 12065}\n\n2245, 2280, 2348,\n2343, 2467, 2589,\n4220, 4270, 4282,\n3320, 3374, 3388,\n4469, 4701, 4849,\n\n! board is the current board position\n! side is the triangle board side (must be 5)\nonePegFinishPossible(board, side) {\nn = CountPegs(board)\ntotholes = side*(side+1)/2 ! should evaluate to 15\nif (n > totholes/2) then {\nmincode = 2^totholes - 1 - GetMaxCode(board)\nn = tot - CountPegs(board)\n}\nelse mincode = GetMinCode(board)\nfor (j=0; j<Size(W[n]); j++) {\nif (mincode==W[n][j]) return true\n}\nreturn false\n}\n\nOn boards with less than around 25 holes, this test can easily be executed in a browser.\nFor example, when the user mouses over a peg, we can test out the jumps from this peg\nand report whether the jump is \"good\" or \"bad\", namely leads to a winning or losing board\n11\n\n\fposition. In the web tool I have created [6], the bad jumps are humorously indicated by\nturning a peg into a bomb.\nWe have also calculated Wn1 for the central game on the standard 33-hole board (Figure 3a).\nTable 2 shows the size of Fn1 and Wn1 for the central game on the 33-hole board. These sets\nare large enough that the array search in the algorithm onePegFinishPossible() is too\nslow, and must be replaced by a faster search algorithm for good real-time performance4 .\nThe set of 839, 536 board positions, stored in 4-byte integers, requires 3.2 Megabytes of\nmemory. Table 3 shows results for the central game on Wiegleb's board (Figure 4a). The\nset of 89, 558, 705 board positions W1 to W22 , stored in two 4-byte integers, requires 680\nMegabytes of memory.\nn (pegs)\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\nTotal\n\n|Fn |\n1\n1\n2\n8\n39\n171\n719\n2,757\n9,751\n31,312\n89,927\n229,614\n517,854\n1,022,224\n1,753,737\n2,598,215\n\n|Wn | n (pegs)\n1\n16\n1\n15\n2\n14\n8\n13\n38\n12\n164\n11\n635\n10\n2,089\n9\n6,174\n8\n16,020\n7\n35,749\n6\n5\n68,326\n112,788\n4\n162,319\n3\n204,992\n2\n230,230\n1\n\n|Fn |\n3,312,423\n3,626,632\n3,413,313\n2,765,623\n1,930,324\n1,160,977\n600,372\n265,865\n100,565\n32,250\n8,688\n1,917\n348\n50\n7\n2\n23,475,688 \u2020\n\n|Wn |\n230,230\n204,992\n162,319\n112,788\n68,326\n35,749\n16,020\n6,174\n2,089\n635\n164\n38\n8\n2\n1\n1\n839,536\n\nTable 2: Size of Fn and Wn for the central game on the 33-hole cross-shaped board. \u2020 Only\nhalf of the Wn need to be stored, due to Equation (8).\nWe can now solve all complement problems on the 15-hole triangle board by calculating all\nWni . If we do this, we discover two problems with this technique. The first is a degeneracy of\nthe finishing hole with respect to the board symmetry, while the second storage inefficiency\nis that the sets Wni may not be disjoint for different values of i.\n4\n\nIn the attachments to this paper, the sets Wn1 are given sorted. A good search technique is then a binary\nsearch of a sorted array.\n\n12\n\n\fn (pegs)\n43\n42\n41\n40\n39\n38\n37\n36\n35\n34\n33\n\n|Fn |\n|Wn | n (pegs)\n1\n1\n32\n3\n3\n31\n11\n10\n30\n60\n54\n29\n297\n236\n28\n1,427\n900\n27\n6,459\n3,007\n26\n25\n27,317\n9,056\n106,347 24,990\n24\n379,537 64,182\n23\n1,238,520 154,345\n22\nTotal\n\n|Fn |\n3,702,227\n10,160,129\n25,647,378\n59,620,492\n127,737,457\n252,239,569\n458,623,402\n766,145,054\n1,172,139,707\n1,635,783,432\n2,073,430,928\n6,586,989,754\n\n|Wn |\n348,705\n741,102\n1,483,185\n2,788,600\n4,898,948\n7,981,238\n11,958,747\n16,344,138\n20,224,817\n22,532,441\n22,532,441\n89,558,705\n\nTable 3: Size of Fn and Wn for the central game on Wiegleb's board (Figure 4a). Some\nelements of Fn that cannot appear in Wn have been removed by use of a resource count [1].\n\n4.1\n\nThe symmetry degeneracy\n\nThis problem concerns the way we have reduced the set of board positions by using the\nsymmetry of the board. There is no problem in this regard to the corner vacancy, or the\ncentral vacancy on the 33-hole standard board or Wiegleb's board. But suppose we look\nat the SVSS problem on the 15-hole triangle board starting from (0, 3). According to the\nposition class theory, the possible finishing locations are given in Figure 7a.\nF\n\nF\n\nF\n\nF\nF\n\nF\n\nF\nF\n\nF\n\nF\n\nF\n\ncode = 28 = 4+8+16\n\ncode = 50 = 2+16+32\n\nFigure 7: (a) Possible finishing holes starting with (0, 3) empty (shaded hole). (b) The (0, 3)\nfinish can no longer be reached. (c) This board position is in the same symmetry class as\n(b), but the (0, 3) finish can be reached.\nThe problem occurs because it is possible to finish at the hole (3, 3), and that this hole is\nalso mapped to the starting vacancy (3, 0) by a reflection of the board about the y-axis. The\nboard positions in Figure 7b and 7c have the same mincode (28), because they are reflections\nof one another, and both can be reached starting from (3, 0). The problem is that we can't\nfinish at (3, 0) from Figure 7b but we can from Figure 7c, yet according to our algorithm\nthese board positions are \"the same\" (they lie in the same symmetry class).\nIf we create the sets Wn1 using the symmetry reduction technique of using mincode(b) all will\n13\n\n\fwork perfectly, except that our program will consider the finishing holes (0, 3) and (3, 3) to\nbe the same. One resolution of this degeneracy is to loosen our definition of \"complement\nproblem\" to include any finishing board position which is in the same symmetry class. In\nother words had we defined the problems we are trying to solve differently, the degeneracy\ndisappears!\nBut let us assume we do not want to define the problem away, and stick with our definition\nof complement problem. To resolve the degeneracy we are forced to not to do symmetry\nreduction of the sets, leaving them in their raw state. We then lose the simple check of\ncalculating mincode(b), and checking this against the sets Wn1 . Instead, we must figure out\nthe symmetry transformation S which takes us from the starting board state to one peg\nmissing at (3, 0). Given any board position b, we then check to see if code(S(b)) is in the set\nWn1 . Note that since we have not done symmetry reduction of the sets Wn1 , there can be two\nmembers of this set in the same symmetry class, so with the same mincode(). Unfortunately,\nthis significantly complicates our algorithm for identifying winning board positions.\n\n4.2\n\nThe storage inefficiency\n\nWe note from Figure 7 that the minimum code 28 must lie in W31 , W32 and W33 because\nthis mincode() can appear during all three complement problems. This indicates that winning board positions for different complement problems will share members, and not just\noccasionally. In fact, Wn1 and Wn2 have almost all of their elements in common (we will see\nwhy soon). This is not really a problem on the 15-hole triangle board, because these sets\nare small. It becomes more of a problem for the 21-hole triangle board, and the 33-hole\ncross-shaped board. We will discuss solutions to this problem in the next section.\n\n5\n\nThe general SVSS problem\n\nThe key feature of complement problems which results in Wn = WN \u2212n is that the starting\nset FN \u22121 = {bs } and the finishing set B1 = {bf = bs } are complements of one another. These\ntwo sets need not contain only a single board position. For example, let FN \u22121 be all board\npositions of the same problem type with one peg missing and B1 = FN \u22121 be all one-peg\nboard positions of the same type.\nAs before we will have Wn = Fn \u2229 Bn = Fn \u2229 FN \u2212n and Wn = WN \u2212n . The winning\n\"superset\" Wn contains all board positions that can appear in a SVSS problem of this type.\nWe see, in fact, that Wn is the union of all Wni over all complement problems i of the given\ntype, plus a special set which we call Wn0 containing all board positions which can occur in\nSVSS problems of this type but not in any complement problem. We then have\n[\nWn =\nWni where Wn0 \u2229 Wni = \u2205, i = 1, 2, . . . , p\n(11)\ni=0,1,...,p\n\nWe note that since Wn = WN \u2212n and Wni = WNi \u2212n for i = 1, 2, . . . , p, it must be the case\n14\n\n\fthat Wn0 = WN0 \u2212n .\nWe have already seen how to calculate the complement problem sets Wn1 , Wn2 , . . ., Wnp , but\nhow can we calculate Wn0 ? There really is no easy way. We can calculate Wn directly using\nall possible starting and finishing locations, and then subtract out each Wni for i = 1, 2, . . . , p.\nThis is certainly not difficult for a small board like the 15-hole triangle. Another technique is\nto consider a single vacancy start, but any finishing hole which is of the same type. Winning\nsets calculated in this manner will not satisfy (8), but the winning boards for n \u2265 \u230aN/2\u230b will\ninclude those in Wn0 . We then run this calculation for each starting vacancy and combine\nresults, finally subtracting off all complement problem boards as before.\nn (pegs)\n\nWn0 = Wn\n\n1\ncode = 2\n\n2\ncode = 3\n\n3\ncode = 14\n\ncode = 67\n\ncode = 84\n\ncode = 85\n\ncode = 102 code = 108\n\ncode = 94\n\ncode = 103 code = 174 code = 595\n\n4\n5\nTable 4: The sets Wn0 = Wn for the 10-hole triangle board. All sets are symmetry reduced.\nThe 10-hole triangle board provides a simple example of the sets Wn0 . This board is not\nnull-class, so no complement problem is solvable. What this means is that all sets Wni are\nempty for i > 0 (or that the number of solvable complement problems p = 0), so that the\nonly sets around are Wn0 = Wn . These sets can be calculated quite easily (even by hand),\nand are shown in Table 4. Here we also see a board where the total number of holes N = 10\nis even, so that W50 = W50 is equal to its own complement. We can see that this is in fact\nthe case, as the four board positions in W50 are listed in pairs that are complements of one\nother. We must be careful to interpret the board positions in W50 as symmetry classes, the\ncomplement of the board position with code 94 has code 210 \u2212 1 \u2212 94 = 929, a board position\nin the same symmetry class as the board with code 103. We conclude from Table 4 that only\n10 essentially different board positions (or their complement) can appear during a solution\nto any SVSS problem on this board (we only need half of the set W50 ).\n\n15\n\n\f6\n\nThe complement plus general SVSS problem\n\nWe now show how to solve either the complement problem (#1), or the general SVSS problem\n(#2), with very little additional storage over the general SVSS problem. Equation (11)\nshows that these two problems are closely related. The only difficulty involves storing board\npositions efficiently (without duplicates), and dealing with the degeneracies introduced in\nsection 4.1. In this section we use as an example the 15-hole triangle board.\nWe deal first with the storage problem. How can we store all board positions in Wni without\nduplication? Here we are considering all the problems of a certain type on a board, and\ni = 1, 2, . . . , p ranges over the total number of problems of this type. On the 15-hole triangle\nboard, there is only one type (shown in Figure 6b) with p = 4 different problems. The\nobvious solution is to take all possible combinations of the 4 problems, 2p = 16 possibilities,\nand for each combination we store all boards common to this combination of problems. We\ncan think of these sets Wn with a superscript given not by the problem number i, but the\nindex of the combination of complement problems that this board position can occur in\n(ranging from 0 to 16). Index 0 remains the same as problem 0: Wn0 = Wnindex=0 is the set\nof n-peg board positions that can occur during a SVSS problem, but not in any complement\nproblem.\nPegs (n)\n1\n2\n3\n4\n5\n6\n7\nTotal\n\n0\n1\n1\n3\n5\n10\n7\n4\n31\n\n|Wnindex | for\n1\n2\n1\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n2\n0\n2\n1\n6\n\nindex = 0 to 7\n3\n4\n6\n0\n1\n0\n1\n2\n0\n1\n7\n0\n4\n19\n1\n8\n49\n4\n11\n93\n6\n12 129\n7\n37 300\n18\n\n7 Total\n0\n4\n0\n4\n1\n12\n4\n33\n8\n80\n13\n132\n18\n172\n44\n437\n\nTable 5: A count of winning board positions Wnindex on the 15-hole triangle board. index\nranges from 0 to 15 but 5 and those beyond 7 are all empty.\nFor example, since index = 7 = 0111 in binary, then Wnindex=7 contains all n-peg positions\nthat are common to problems 1, 2 and 3. We note the since problem 4 is unsolvable as a\ncomplement problem [5], Wn4 = \u2205 and all sets Wnindex with index between 8 and 15 are also\nempty.\nA trickier question is how to resolve the degeneracy at the (0, 3) starting location. The sets\nWn1 cannot be symmetry reduced, yet Wn2 and Wn3 are symmetry reduced, and Wn4 = \u2205. We\nsee from Figure 7 that Wn1 contains code 50, while Wn2 contains mincode 28, a board position\nin the same symmetry class. The solution is to use an algorithm which keeps all codes in\nWn1 but removes all symmetry equivalents in the intersecting sets. This is the reason that\nthe degenerate starting locations are indexed first.\n16\n\n\fTable 5 summarizes the number of board positions by index and number of pegs n. The\ntotal number of board positions over all sets is 437, which is only 10 more than are needed\nto solve the general SVSS problem by itself. There are 10 board positions in Wn1 which are\nreflections of other board positions in Wn1 (an example which is useful to check by hand\nare the board positions with codes 93 and 563, these 5-peg board positions end up in index\n7). The first row of Table 5 tells us which complement problems are solvable, namely those\nwith index 1 (problem 1, the (0, 3) complement), 2 (problem 2, the (0, 0) complement) and\n4 (problem 3, the (2, 4) complement). Again, the fact that W18 = \u2205 is equivalent to the\nstatement that problem 4, the (1, 2) complement, is not solvable.\n\n(0,3) complement\nindex=1\n\n(0,0) complement\nindex=2\n\n3272 ~ 31(min)\n\n(empty)\n\nindex=3\n4291 ~ 1138(min)\n\nindex=5\n(empty)\n\n2183(min)\n\nindex=7\n115(min)\n\nindex=6\n(2,4) complement\nnot in any\ncomplement\nindex=0\n\nindex=4\n1480 ~ 181(min)\n\n7304 ~ 59(min)\n\nFigure 8: A Venn diagram showing sample boards with 5 pegs by index.\nFigure 8 shows representative 5-peg board positions in W5index for values of the index 0 to\n7. Let us interpret two of the board positions in this diagram. The board position with\ncode 1480 is in index 0, meaning that this board position cannot appear in any complement\nproblem. This board position has a mincode of 181. We can finish with one peg from this\nboard position at (0, 0) or (0, 3), but we cannot start from either of these holes and reach\nthis board position. But it must be possible to reach this board position from some start,\nand it turns out this start is (2, 4).\nThe board position with index 7 is 2183, which is the mincode. We can play from this board\nposition to finish at (0, 0), (0, 3), (3, 3) or (2, 4), and we can also reach this board position\nstarting from (0, 0), (0, 3) or (2, 4). Therefore, this board position can be reached during any\nof the three (solvable) complement problems.\nThe board position with index 6 is 115, which is the mincode. We can play from this board\nposition to finish at (0, 0), (0, 3) or (2, 4), and we can reach this board position from (0, 0)\n17\n\n\for (2, 4). Therefore, this board position can be reached during the solution to the (0, 0) or\n(2, 4) complements, so is in index 6.\nWe can see in Figure 8 (and Table 5) that the index 1 and index 5 sets are empty, why is\nthat? The reason is that W12 contains a single board position with mincode 10 and pegs at\n(0, 1) and (0, 2). This means that all solutions to the (0, 3) complement must begin and finish\nwith the jump from (0, 1). Therefore, any board position which can be reached during the\n(0, 3) complement (except for the starting board position) can be reached during the (0, 0)\ncomplement5 . This is exactly what it means for the index 1 and index 5 sets to be empty,\nexcept for the one peg starting board position for the (0, 3) complement.\nWe now present pseudocode for identification of winning board positions for either the complement problem (#1) or the general SVSS problem (#2):\nW[5][1] = {16,64,1,8} ! W^1, index=0,1, ... 15, for the 15-hole triangle board\nEnd[5][1] = {1,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4} ! Ends of each index 0-15\n... see TriangleWinning/Triangle5ByIndex.txt ...\n! board is the current board position\n! side is the triangle board side (4,5, or 6)\n! i is the number of this SVSS problem\n! ksym is the symmetry code of the starting board position\n! comp is true for complement problems, otherwise any finish is assumed\nproblemIsSolvable(board, side, i, ksym, comp) {\nint code[6]\ntotholes = side*(side+1)/2\nif (side==4) { ! 10-hole triangle board\ntopindex = 1\ndegen = 0\n}\nif (side==5) { ! 15-hole triangle board\ntopindex = 2^4 ! power set of 4 problems\ndegen = 1 ! number of degenerate problems\n}\nif (side==6) { ! 21-hole triangle board\ntopindex = 2^5 ! power set of 5 problems\ndegen = 2 ! number of degenerate problems\n}\nn = CountPegs(board)\nif (n > tot/2) then {\ncode[0] = 2^tot - 1 - Code(board)\nn = tot - CountPegs(board)\n}\nelse code[0] = Code(board)\n! Get the 6 symmetry codes, code[0] to code[5]\ncode[1] = rotatecode(code[0])\n5\n\nThe converse is not true, do you see why? The (0, 0) complement can begin with a jump from (0, 2),\nbut end with a jump from (2, 2).\n\n18\n\n\fcode[2]\ncode[3]\ncode[4]\ncode[5]\n\n=\n=\n=\n=\n\nrotatecode(code[1])\nreflectcode(code[2])\nrotatecode(code[3])\nrotatecode(code[4])\n\nif (comp) { ! complement problem\nkStart = 0\nkEnd = 6\nif (i<=degen) {\nkStart = kSym\nkEnd = kSym + 1\n}\nfor (index=1; index<topindex; index++) {\nif ((1<<i) & index) { ! true if the i'th bit of index is set\nfor (j=End[side][n][index-1]; j<End[side][n][index]; j++) {\nfor (k=kStart; k<kEnd; k++) if (code[k]==W[side][n][j]) return true\n}\n}\n}\n}\nelse { ! comp=false, finish anywhere\nfor (j=0; j<End[side][n][topindex]; j++) {\nfor (k=0; k<6; k++) if (code[k]==W[side][n][j]) return true\n}\n}\nreturn false\n}\n\n7\n7.1\n\nResults from winning board calculations\nHow badly can you play?\n\nAfter calculating the winning sets Wn we can determine the first possible \"dead end\" for a\ncomplement problem. This is the shortest jump sequence after which the goal can no longer\nbe reached. A well-known sequence of 4 jumps is a dead end for the central game (proved\nin [1, p. 115]). We can find this board position computationally by looking for the first set\nwhere Fn 6= Wn , from Table 2 we can see that this happens after 4 jumps at n = 28 pegs.\nWe have calculated the first dead end for all seven complement problems, the results are\nshown in Table 6. Surprisingly, there are three complement problems that can be lost in\nonly three jumps. All complement problems also have a unique jump sequence leading to\na dead end (up to symmetry and jump order), with the exception of the c3-complement.\nJumps are presented in the alphanumeric format used by John Beasley [1] (Figure 9).\nNote that the jumps shown in Table 6 are dead ends only for the complement problem. As\nindicated in the rightmost column, in many cases it is still possible to finish with one peg,\njust not at the location of the initial vacancy. Suppose we want to find the first time we can\n19\n\n\fc1\nc2\na3 b3 c3\na4 b4 c4\na5 b5 c5\nc6\nc7\n\n2,0 3,0 4,0\n2,1 3,1 4,1\n0,2 1,2 2,2 3,2 4,2 5,2 6,2\n0,3 1,3 2,3 3,3 4,3 5,3 6,3\n0,4 1,4 2,4 3,4 4,4 5,4 6,4\n2,5 3,5 4,5\n2,6 3,6 4,6\n\nd1\nd2\nd3\nd4\nd5\nd6\nd7\n\ne1\ne2\ne3 f3 g3\ne4 f4 g4\ne5 f5 g5\ne6\ne7\n\nC\nB\nC B B\nA C C\nC B B\nB\nC\n\nA\nC\nC\nA\nC\nC\nA\n\nC\nB\nB B C\nC C A\nB B C\nB\nC\n\nFigure 9: For the cross-shaped 33-hole board: hole coordinates, Beasley's notation, and the\nthree types of problem (from Figure 3).\ntype\nA\nB\nC\n\ncomplement\nproblem\n(3, 3) or d4\n(3, 0) or d1\n(2, 2) or c3\n(2, 1) or c2\n(3, 2) or d3\n(3, 1) or d2\n(2, 0) or c1\n\nP\n\n|Wn |\n\n839,536\n99,982\n20,836,420\n12,372,794\n6,420,923\n760,164\n13,918,925\n\njumps\n4\n3\n6\n4\n3\n3\n5\n\ncan still\nfinish at\nd2-d4, d5-d3, b4-d4, d3-d5\nnowhere\nd3-d1, b3-d3, e3-c3\na4, d4, g4\nc1-c3, e2-c2, c3-c1, d4-d2, b4-d4, f3-d3 nowhere\nc4-c2, a4-c4, d4-b4, f4-d4\nc5, f5\nd1-d3, d4-d2, d6-d4\na3, g3\nd4-d2, b4-d4, e4-c4\na5, d5, g5\nc3-c1, e2-c2, d4-d2, c2-e2, b4-d4\nc7\nfirst dead end\n\nTable 6: Shortest dead ends for all complement problems on the 33-hole board. All sets Wn\nare symmetry reduced.\n\nreach a board position from which a single peg finish is impossible? This question can be\nanswered by calculating the winning board sets Wn as we did in section 5, starting from all\nsingle vacancies of the same type.\nTo distinguish from a complement problem \"dead end\", we will now call any board position\nfrom which a single peg finish is impossible a \"dead board position\". For any Type A single\nvacancy (d1, a4, d4, g4 or d7) a sequence of 4 jumps can land you in a dead board position.\nFor d4, these 4 jumps are given in Table 6, and the resulting board position is shown in\nFigure 10a. From the Type B vacancy at c3, we can play the same six jumps as in Table 6\nand reach a dead board position, and many other 6 jumps sequences will also work (but\nnone shorter). From the Type B vacancy at c2, there is a unique sequence of 5 jumps which\nends at a dead board position, shown in Figure 10b. From any Type C vacancy, any 5 jumps\ncan be made, and it is always possible to finish with one peg. There are many combinations\nof 6 jumps which can lead to dead board positions. Figure 10c shows one board position\nwhich can be reached in 6 jumps from c1, c4 or f4. This dead board position, or a rotation\nor reflection of it, can therefore be reached from any Type C single vacancy.\nAt this point we have only a \"computer proof\" that the board positions in Figure 10b and\n10c cannot be reduced to a single peg. By applying some of the techniques in Beasley's book\n20\n\n\fFigure 10: Fastest dead board positions for problems of Type A (starting from d1, a4 or d4,\nafter 4 jumps), Type B (from c2, after 5 jumps), Type C (from c1, c4 or f4, after 6 jumps).\n[1], it is possible to prove this analytically (try resource counts or Conway's balance sheet\n[1, p. 101-116]). Of course, this does not prove that these are the first possible dead board\npositions.\nOne can also calculate fastest dead ends and fastest dead board positions for problems on\nother board types. The central game on Wiegleb's Board can be lost in only three jumps,\nthis can be deduced from Table 3 (see [8] for the three jumps). On the 15-hole triangle\nboard, it is possible to reach a dead board position after only one jump6 !\n\n7.2\n\nHow many wins are there?\n\nWe can also use Wn to count the number of solutions to any SVSS problem. Suppose we take\nthe set of winning board positions, and add directed edges between board positions related\nby peg solitaire jumps. This results in a directed graph of the peg solitaire win, Figure 11\nshows this graph for the 10-hole triangle board.\nThe total number of wins is simply the total number of ways to traverse this graph. Here\nis a simple algorithm for calculating this: we will label each vertex (board position) with a\nnumber, which will be the number of paths from the start to that board position. We first\nlabel the starting board position with a 1. We then consider all descendants of labeled board\npositions, and label each as the sum of all incoming edges. We continue this process until\nwe reach the final board position. As can be seen in Figure 11, the total number of ways to\ntraverse the graph, or the number of solutions, is 14.\nWe have run this counting algorithm on the central game on the 33-hole board, using the\nancillary program \"count.cpp\". In the calculation we have eliminated symmetry considerations to be sure that we calculate every solution. This graph therefore has more than the\n839, 536 nodes of the symmetry reduced winning sets. The program calculates that the total\nnumber of winning games is 40, 861, 647, 040, 079, 968 \u2248 4.1\u00d71016 , in perfect agreement with\nthe figure calculated by Bill Butler [9]. We have counted solutions for all seven complement\nproblems, see Table 7.\n6\n\nStart with (0, 1) vacant, and jump the peg from (2, 3).\n\n21\n\n\f3\n1\n\n2\n\n5\n\n5\n\n3\n\n6\n\n3\n\n3\n\n2\n1\n\n1\n\n1\n\n1\n\n14\n\n14\n\n1\n1\n\n1\n2\n\nFigure 11: A winning game graph for the 10-hole triangle board.\ntype\nA\nB\nC\n\ncomplement\nproblem\n(3, 3) or d4\n(3, 0) or d1\n(2, 2) or c3\n(2, 1) or c2\n(3, 2) or d3\n(3, 1) or d2\n(2, 0) or c1\n\nnumber of solutions\nexact\napprox.\n40,861,647,040,079,968 4.1 \u00d7 1016\n841,594,661,434,808 8.4 \u00d7 1014\n138,409,681,956,904,365,268 1.4 \u00d7 1020\n17,385,498,352,036,301,092 1.7 \u00d7 1019\n8,940,989,276,947,390,168 8.9 \u00d7 1018\n30,997,283,487,697,056 3.1 \u00d7 1016\n2,343,652,440,537,181,612 2.3 \u00d7 1018\n\ncalculation\ntime \u2020\n7 minutes\n8 seconds\n90 minutes\n22 minutes\n20 minutes\n1 minute\n25 minutes\n\nTable 7: The number of solutions to complement problems on the 33-hole cross-shaped\nboard. \u2020 Run time is on a 2.66 GHz Windoze machine (single processor).\n\n8\n\nOnline games and software\n\nI have created a Javascript game [6] for playing peg solitaire on the 10, 15 and 21-hole triangle\nboards, as well as the 12 and 18-hole truncated triangle boards. The game can begin from any\nstarting vacancy, and the program will point out all bad jumps which leave the set of winning\nboard positions (when a user hovers over a peg that can make a jump, the GUI indicates\nthis by turning that peg into a bomb). The game can be specified as either a complement\nproblem or the general problem with a one peg finish anywhere on the board. The algorithm\nused to identify winning board positions is the algorithm problemIsSolvable() in this\npaper converted to Javascript. This program can also find a solution from any (solvable)\nintermediate board position by testing jumps chosen at random.\nThe ancillary files for this paper include the following directories:\n22\n\n\f\u2022 Triangular1.2 \u2013 a collection of html and javascript programs which can solve SVSS\nproblems on triangle boards of arbitrary size.\n\u2022 NeverLose1.5 \u2013 a collection of html and javascript programs which can identify all\nwinning positions on the 10, 12, 15, and 21-hole triangle boards (source files for [6]).\n\u2022 TriangleWinning \u2013 contains text files of the board positions Wn , for triangle and truncated triangle boards. Each subdirectory contains data for each of the 5 boards given\nin Table 8. The data Wn for each board comes in two versions: first an \"AnyFinish\"\nversion which is simply the codes Wn all symmetry reduced and sorted for each n. If\nthis data is used in the simple algorithm onePegFinishPossible() it will point out all\nboard positions for problem #2 which can finish with one peg. The second \"ByIndex\"\nversion of Wn has the board positions sorted by index, and degenerate starting locations\nare not symmetry reduced. When applied in the algorithm problemIsSolvable(), we\ncan identify when a board position can appear in any complement problem #1 as well\nas any one peg finish (problem #2). It is the second set of data that you will find in\nthe Javascript web program NeverLose1.5. Table 8 contains a summary of how many\nboard positions are included in these two data sets, for each of the five boards.\nboard\nTriangle10\nTruncTriangle12\nTriangle15\nTruncTriangle18\nTriangle21\n\nnumber of codes needed to solve\nany finish (#2) any complement problem (#1)\n12 \u2020\n0\n136\n147\n427\n437\n8,621\n11,444\n76,981\n110,647\n\nTable 8: The number of codes needed to solve all problems on a particular board. \u2020 These\nboard positions are shown in Table 4.\n\n\u2022 pegs \u2013 a collection of C++ routines for calculating winning sets Wn for the 33-hole\ncross-shaped board using Equation (9). Table 2 gives the sizes these sets for the\ncentral game. If printed out in a text file, all 839,536 winning board positions for the\ncentral game take up about 9MB. These can be printed out by the above program, the\nbeginning and end of these sets is given below.\nW1 = {65536 = 216 }, W2 = {528 = 24 + 29 },\nW3 = {400 = 24 + 27 + 28 , 212992 = 214 + 216 + 217 },\nW4 = {153, 1680, 16688, 17928, 66432, 82976, 147984, 352256},\nW5 = {158, 692, 793, . . ., 4554760, 6684688, 8601616},\n...\nW14 = {53247, 56831, 57279, . . ., 2651879594, 2655805539, 3098292302},\nW15 = {127999, 128895, 129791, . . ., 3793449102, 3793531059, 3793629859},\nW16 = {126975, 130559, 229359, . . ., 3864553651, 3928764638, 3929805043}.\n\n23\n\n\fThe pegs directory also contains the program \"count.cpp\", which counts the number\nof winning games after \"pegs.cpp\" has been run.\n\u2022 old pegs \u2013 a collection of older C++ routines for calculating winning sets Wn and\nWn for arbitrary board shapes. They can handle triangular boards and even diagonal\njumps, and calculate by move rather than by jump. One version can handle boards\nwith up to 48 holes, a second version can handle boards of unlimited size. These\nprograms calculated the winning sets for the triangle boards. See readme.txt in this\ndirectory for a complete description of these files.\n\u2022 FigGen \u2013 contains the C++ program which generated the figures in this paper. This\nprogram generates text files (.fig extension) which are input files for the free UNIX\ndrawing program Xfig. Simply open the .fig file in Xfig and export to .eps to be used\nby LATEX.\n\n9\n\nSummary\n\nWe have introduced some techniques in peg solitaire for calculating winning board positions.\nThese winning board positions are useful because with them we can create a program which\nwill begin from any single vacancy start and identify all board positions from which\n1. it is possible to finish where we started (the complement problem is still solvable) or\n2. it is possible to finish with one peg.\nWe note that these techniques, by design, work only for board positions which can appear\nduring SVSS problems. Suppose we consider an arbitrary board position b. A reader may\nconclude from Equation (8) that if b is solvable to one peg, then b must also be solvable\nto one peg. This is false! Consider, for example, the board position \"cross\" Figure 1b.\nThe statement of Equation (8) applies only to board positions which can arise during SVSS\nproblems, not any arbitrary board position. This boils down to the difference between solving\nproblems #1 and #2 compared with problem #3 as discussed on page 6 (section 3).\nWe have also shown how the winning board positions can be used to answer some difficult\nquestions about peg solitaire. For the 33-hole board, we have calculated the first possible\ncomplement problem dead end as well as the first possible dead board position. We have\nalso counted the number of solutions to all complement problems.\n\n24\n\n\fReferences\n[1] J. Beasley, The Ins and Outs of Peg Solitaire, Oxford Univ. Press, 1992.\n[2] E. Berlekamp, J. Conway and R. Guy, Purging pegs properly, in Winning Ways for\nYour Mathematical Plays, 2nd ed., Vol. 4, Chap. 23: 803\u2013841, A K Peters, 2004.\n[3] G. Bell and J. Beasley, New problems on old solitaire boards, Board Game Studies,\n8 (2006), http://arxiv.org/abs/math/0611091\n[4] G. Bell, Triangular peg solitaire unlimited, Games and Puzzles J. #36 (2004),\nhttp://www.gpj.connectfree.co.uk/gpjr.htm\nhttp://arxiv.org/abs/0711.0486\n[5] G. Bell, Solving triangular peg solitaire, J. Integer Sequences, 08.4.8, 11 (2008),\nhttp://arxiv.org/abs/math/0703865\n[6] G. Bell, \"Never Lose\" peg solitaire game,\nhttp://home.comcast.net/ gibell/pegsolitaire/Tools/Neverlose/Triang.htm\n\n[7] G. Bell, A fresh look at peg solitaire, Math. Mag. 80 (2007), 16\u201328.\n[8] G. Bell, Peg Solitaire web site, http://home.comcast.net/ gibell/pegsolitaire/\n[9] B. Butler, http://www.durangobill.com/Peg33.html\n\n25\n\n\f"}