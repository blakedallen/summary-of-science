{"id": "http://arxiv.org/abs/0712.2644v1", "guidislink": true, "updated": "2007-12-17T07:07:54Z", "updated_parsed": [2007, 12, 17, 7, 7, 54, 0, 351, 0], "published": "2007-12-17T07:07:54Z", "published_parsed": [2007, 12, 17, 7, 7, 54, 0, 351, 0], "title": "Automata-based Adaptive Behavior for Economical Modelling Using Game\n  Theory", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0712.4096%2C0712.0186%2C0712.0047%2C0712.0303%2C0712.1605%2C0712.1997%2C0712.3859%2C0712.3344%2C0712.3527%2C0712.4350%2C0712.3669%2C0712.2133%2C0712.3140%2C0712.1396%2C0712.2982%2C0712.3225%2C0712.3880%2C0712.0992%2C0712.0886%2C0712.3747%2C0712.0699%2C0712.2894%2C0712.3621%2C0712.1890%2C0712.2530%2C0712.4156%2C0712.3434%2C0712.3336%2C0712.4135%2C0712.4290%2C0712.3093%2C0712.3596%2C0712.3108%2C0712.1298%2C0712.2898%2C0712.1282%2C0712.1376%2C0712.3285%2C0712.1135%2C0712.3766%2C0712.1515%2C0712.1359%2C0712.1739%2C0712.3363%2C0712.1249%2C0712.2263%2C0712.3308%2C0712.4165%2C0712.2538%2C0712.0830%2C0712.0563%2C0712.0006%2C0712.3768%2C0712.3926%2C0712.2732%2C0712.2157%2C0712.0606%2C0712.0039%2C0712.2403%2C0712.0967%2C0712.4033%2C0712.4152%2C0712.0838%2C0712.1446%2C0712.1252%2C0712.2896%2C0712.2944%2C0712.1073%2C0712.1398%2C0712.1310%2C0712.2729%2C0712.2824%2C0712.0353%2C0712.1787%2C0712.3571%2C0712.2135%2C0712.2644%2C0712.1440%2C0712.1768%2C0712.1564%2C0712.0570%2C0712.3610%2C0712.2801%2C0712.1099%2C0712.2044%2C0712.1119%2C0712.2821%2C0712.1548%2C0712.3641%2C0712.2840%2C0712.3799%2C0712.3137%2C0712.3404%2C0712.0212%2C0712.0519%2C0712.2833%2C0712.2446%2C0712.0028%2C0712.2787%2C0712.0800%2C0712.0544&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Automata-based Adaptive Behavior for Economical Modelling Using Game\n  Theory"}, "summary": "In this chapter, we deal with some specific domains of applications to game\ntheory. This is one of the major class of models in the new approaches of\nmodelling in the economic domain. For that, we use genetic automata which allow\nto build adaptive strategies for the players. We explain how the automata-based\nformalism proposed - matrix representation of automata with multiplicities -\nallows to define semi-distance between the strategy behaviors. With that tools,\nwe are able to generate an automatic processus to compute emergent systems of\nentities whose behaviors are represented by these genetic automata.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0712.4096%2C0712.0186%2C0712.0047%2C0712.0303%2C0712.1605%2C0712.1997%2C0712.3859%2C0712.3344%2C0712.3527%2C0712.4350%2C0712.3669%2C0712.2133%2C0712.3140%2C0712.1396%2C0712.2982%2C0712.3225%2C0712.3880%2C0712.0992%2C0712.0886%2C0712.3747%2C0712.0699%2C0712.2894%2C0712.3621%2C0712.1890%2C0712.2530%2C0712.4156%2C0712.3434%2C0712.3336%2C0712.4135%2C0712.4290%2C0712.3093%2C0712.3596%2C0712.3108%2C0712.1298%2C0712.2898%2C0712.1282%2C0712.1376%2C0712.3285%2C0712.1135%2C0712.3766%2C0712.1515%2C0712.1359%2C0712.1739%2C0712.3363%2C0712.1249%2C0712.2263%2C0712.3308%2C0712.4165%2C0712.2538%2C0712.0830%2C0712.0563%2C0712.0006%2C0712.3768%2C0712.3926%2C0712.2732%2C0712.2157%2C0712.0606%2C0712.0039%2C0712.2403%2C0712.0967%2C0712.4033%2C0712.4152%2C0712.0838%2C0712.1446%2C0712.1252%2C0712.2896%2C0712.2944%2C0712.1073%2C0712.1398%2C0712.1310%2C0712.2729%2C0712.2824%2C0712.0353%2C0712.1787%2C0712.3571%2C0712.2135%2C0712.2644%2C0712.1440%2C0712.1768%2C0712.1564%2C0712.0570%2C0712.3610%2C0712.2801%2C0712.1099%2C0712.2044%2C0712.1119%2C0712.2821%2C0712.1548%2C0712.3641%2C0712.2840%2C0712.3799%2C0712.3137%2C0712.3404%2C0712.0212%2C0712.0519%2C0712.2833%2C0712.2446%2C0712.0028%2C0712.2787%2C0712.0800%2C0712.0544&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "In this chapter, we deal with some specific domains of applications to game\ntheory. This is one of the major class of models in the new approaches of\nmodelling in the economic domain. For that, we use genetic automata which allow\nto build adaptive strategies for the players. We explain how the automata-based\nformalism proposed - matrix representation of automata with multiplicities -\nallows to define semi-distance between the strategy behaviors. With that tools,\nwe are able to generate an automatic processus to compute emergent systems of\nentities whose behaviors are represented by these genetic automata."}, "authors": ["Rawan Ghnemat", "Saleh Oqeili", "Cyrille Bertelle", "G\u00e9rard Henry Edmond Duchamp"], "author_detail": {"name": "G\u00e9rard Henry Edmond Duchamp"}, "author": "G\u00e9rard Henry Edmond Duchamp", "links": [{"href": "http://arxiv.org/abs/0712.2644v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0712.2644v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.GT", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.GT", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0712.2644v1", "affiliation": "LIPN", "arxiv_url": "http://arxiv.org/abs/0712.2644v1", "arxiv_comment": null, "journal_reference": "Emergent Properties in Natural and Artificial Dynamical Systems,\n  Springer (Ed.) (2006) 171-183", "doi": null, "fulltext": "arXiv:0712.2644v1 [cs.GT] 17 Dec 2007\n\nAutomata-Based Adaptive Behavior for\nEconomic Modelling Using Game Theory\nRawan Ghnemat1 , Saleh Oqeili1 , Cyrille Bertelle2 , and\nG\u00e9rard H.E. Duchamp3\n1\n\n2\n\n3\n\nAl-Balqa' Applied University,\nAl-Salt, 19117\nJordan\nrawan.ghnemat@gmail.com, saleh@bau.edu.jo\nLITIS - University of Le Havre,\n25 rue Philippe Lebon\n76620 Le Havre cedex, France\ncyrille.bertelle@gmail.com\nLIPN - University of Paris XIII,\n99 avenue Jean-Baptiste Cl\u00e9ment\n93430 Villetaneuse, France\ngheduchamp@gmail.com\n\nSummary. In this paper, we deal with some specific domains of applications to\ngame theory. This is one of the major class of models in the new approaches of\nmodelling in the economic domain. For that, we use genetic automata which allow\nto buid adaptive strategies for the players. We explain how the automata-based\nformalism proposed - matrix representation of automata with multiplicities - allows\nto define a semi-distance between the strategy behaviors. With that tools, we are\nable to generate an automatic processus to compute emergent systems of entities\nwhose behaviors are represented by these genetic automata.\n\nKey words: adaptive behavior, game theory, genetic automata, prisoner\ndilemma, emergent systems computing\n\n1 Introduction: Adaptive Behaviour Modeling for Game\nTheory\nSince the five last decades, game theory has become a major aspect in economic sciences modelling and in a great number of domains where strategical\naspects has to be involved. Game theory is usually defined as a mathematical\n\n\f2\n\nR. Ghnemat, S. Oqeili, C. Bertelle and G.H.E. Duchamp\n\ntool allowing to analyse strategical interactions between individuals.\nInitially funded by mathematical researchers, J. von Neumann, E. Borel\nor E. Zermelo in 1920s, game theory increased in importance in the 1940s\nwith a major work by J. von Neumann and O. Morgenstern and then with\nthe works of John Nash in the 1950s [9]. John Nash has proposed an original\nequilibrium ruled by an adaptive criterium. In game theory, the Nash equilibrium is a kind of optimal strategy for games involving two or more players,\nwhereby the players reach an outcome to mutual advantage. If there is a set of\nstrategies for a game with the property that no player can benefit by changing\nhis strategy while the other players keep their strategies unchanged, then this\nset of strategies and the corresponding payoffs constitute a Nash equilibrium.\nWe can understand easily that the modelization of a player behavior needs\nsome adaptive properties . The computable model corresponding to genetic\nautomata are in this way a good tool to modelize such adaptive strategy .\nThe plan of this paper is the following. In the next section, we present some\nefficient algebraic structures, the automata with multiplicities, which allow to\nimplement powerful operators. We present in section 3, some topological considerations about the definition of distances between automata which induces\na theorem of convergence on the automata behaviors. Genetic operators are\nproposed for these automata in section 4. For that purpose, we show that\nthe relevant \"calculus\" is done by matrix representions unravelling then the\npowerful capabilities of such algebraic structures. In section 5, we focus our attention on the \"iterated prisonner dilemma\" and we buid an original evolutive\nprobabilistic automaton for strategy modeling, showing that genetic automata\nare well-adapted to model adaptive strategies. Section 6 shows how we can\nuse the genetic automata developed previously to represent agent evolving in\ncomplex systems description. An agent behavior semi-distance is then defined\nand allows to propose an automatic computation of emergent systems as a\nkind of self-organization detection.\n\n2 Automata from boolean to multiplicies theory\n(Automata with scalars)\nAutomata are initially considered as theoretical tools. They are created in the\n1950's following the works of A. Turing who previously deals with the definition of an abstract \"machine\". The aim of the Turing machines is to define\nthe boundaries for what a computing machine could do and what it could not\ndo.\nThe first class of automata, called finite state automata corresponds to\nsimple kinds of machines [21]. They are studied by a great number of re-\n\n\fAutomata-based adaptive behavior for economic modelling\n\n3\n\nsearchers as abstract concepts for computable building. In this aspect, we can\nrecall the works of some linguist researchers, for example N. Chomsky who\ndefined the study of formal grammars.\nIn many works, finite automata are associated to a recognizing operator\nwhich allows to describe a language [2, 10]. In such works, the condition of a\ntransition is simply a symbol taken from an alphabet. From a specific state S,\nthe reading of a symbol a allows to make the transitions which are labeled by\na and come f romS (in case of a deterministic automaton - a DFA - there is\nonly one transition - see below). A whole automaton is, in this way, associated\nto a language, the recognized language, which is a set of words. These recognized words are composed of the sequences of letters of the alphabet which\nallows to go from a specific state called initial state, to another specific state,\ncalled final state.\nA first classification is based on the geometric aspect : DFA (Deterministic\nFinite Automata) and NFA (Nondeterministic Finite Automata).\n\u2022\n\u2022\n\nIn Deterministic Finite Automata, for each state there is at most one\ntransition for each possible input and only one initial state.\nIn Nondeterministic Finite Automata, there can be none or more than one\ntransition from a given state for a given possible input.\n\nBesides the classical aspect of automata as machines allowing to recognize languages, another approach consists in associating to the automata a\nfunctional goal. In addition of accepted letter from an alphabet as the condition of a transition, we add for each transition an information which can be\nconsidered as an output data of the transition, the read letter is now called\ninput data. We define in such a way an automaton with outputs or weighted\nautomaton.\nSuch automata with outputs give a new classification of machines. Transducers are such a kind of machines, they generate outputs based on a given\ninput and/or a state using actions. They are currently used for control applications. Moore machines are also such machines where output depends only\non a state, i.e. the automaton uses only entry actions. The advantage of the\nMoore model is a simplification of the behaviour.\nFinally, we focus our attention on a special kind of automata with outputs which are efficient in an operational way. This automata with output are\ncalled automata with multiplicities. An automaton with multiplicities is based\non the fact that the output data of the automata with output belong to a\nspecific algebraic structure, a semiring [13, 22]. In that way, we will be able to\nbuild effective operations on such automata, using the power of the algebraic\nstructures of the output data and we are also able to describe this automaton\nby means of a matrix representation with all the power of the new (i.e. with\n\n\f4\n\nR. Ghnemat, S. Oqeili, C. Bertelle and G.H.E. Duchamp\n\nsemirings) linear algebra.\nDefinition 1. (Automaton with multiplicities)\nAn automaton with multiplicities over an alphabet A and a semiring K is the\n5-uple (A, Q, I, T, F ) where\n\u2022\n\u2022\n\n\u2022\n\u2022\n\nQ = {S1 , S2 * * * Sn } is the finite set of state;\nI : Q 7\u2192 K is a function over the set of states, which associates to each\ninitial state a value of K, called entry cost, and to non- initial state a zero\nvalue ;\nF : Q 7\u2192 K is a function over the set states, which associates to each final\nstate a value of K, called final cost, and to non-final state a zero value;\nT is the transition function, that is T : Q \u00d7 A \u00d7 Q 7\u2192 K which to a state\nSi , a letter a and a state Sj associates a value z of K (the cost of the\ntransition) if it exist a transition labelled with a from the state Si to the\nstate Sj and and zero otherwise.\n\nRemark 1. Automata with multiplicities are a generalisation of finite automata. In fact, finite automata can be considered as automata with multiplicities in the semiring K, the boolan set B = {0, 1} (endowed with the\nlogical \"or/and\"). To each transition we affect 1 if it exists and 0 if not.\nRemark 2. We have not yet, on purpose, defined what a semiring is. Roughly\nit is the least structure which allows the matrix \"calculus\" with unit (one can\nthink of a ring without the \"minus\" operation). The previous automata with\nmultiplicities can be, equivalently, expressed by a matrix representation which\nis a triplet\n\u2022\n\u2022\n\u2022\n\n\u03bb \u2208 K 1\u00d7Q which is a row-vector which coefficients are \u03bbi = I(Si ),\n\u03b3 \u2208 K Q\u00d71 is a column-vector which coefficients are \u03b3i = F (Si ),\n\u03bc : A\u2217 7\u2192 K Q\u00d7Q is a morphism of monoids (indeed K Q\u00d7Q is endowed with\nthe product of matrices) such that the coefficient on the qi th row and qj th\ncolumn of \u03bc(a) is T (qi , a, qj )\n\n3 Topological considerations\nIf K is a field, one sees that the space A(n) of automata of dimension n (with\nmultiplicities in K) is a K-vector space of dimension k.n2 + 2n (k is here the\nnumber of letters). So, in case the ground field is the field of real or complex\nnumbers [3], one can take any vector norm (usually one takes one of the H\u00f6lder\n\u00011\nP\n\u03b1 \u03b1\nfor \u03b1 \u2265 1, but any norm will do) and the\nnorms ||(xi )i\u2208I ||\u03b1 :=\ni\u2208I |xi |\ndistance is derived, in the classical way, by\n\n\fAutomata-based adaptive behavior for economic modelling\n\nd(A1 , A2 ) = norm(V (A1 ) \u2212 V (A2 ))\n\n5\n\n(1)\n\nwhere V (A) stands for the vector of all coefficients of A = (\u03bb, \u03bc, \u03b3) arranged\nin some order one has then the result of Theorem 1. Assuming that K is the\nfield of real or complex numbers, we endow the space of series/behaviours\nwith the topology of pointwise convergence (Topology of F. Treves [23]).\nTheorem 1. Let (An ) be a sequence of automata with limit L (L is an automaton), then one has\nBehaviour(L) = lim Behaviour(An )\nn\u2192\u221e\n\n(2)\n\nwhere the limit is computed in the topology of Treves.\n\n4 Genetic automata as efficient operators\nWe define the chromosome for each automata with multiplicities as the sequence of all the matrices associated to each letter from the (linearly ordered)\nalphabet. The chromosomes are composed with alleles which are here the lines\nof the matrix [6].\nIn the following, genetic algorithms are going to generate new automata\ncontaining possibly new transitions from the ones included in the initial automata.\nThe genetic algorithm over the population of automata with multiplicities\nfollows a reproduction iteration broken up in three steps [14, 18, 17]:\n\u2022\n\u2022\n\n\u2022\n\nDuplication: where each automaton generates a clone of itself;\nCrossing-over: concerns a couple of automata. Over this couple, we consider a sequence of lines of each matrix for all. For each of these matrices,\na permutation on the lines of the chosen sequence is made between the\nanalogue matrices of this couple of automata;\nMutation: where a line of each matrix is randomly chosen and a sequence\nof new values is given for this line.\n\nFinally the whole genetic algorithm scheduling for a full process of reproduction over all the population of automata is the evolutionary algorithm:\n1. For all couple of automata, two children are created by duplication,\ncrossover and mutation mechanisms;\n2. The fitness for each automaton is computed;\n3. For all 4-uple composed of parents and children, the performless automata,\nin term of fitness computed in previous step, are suppressed. The two\nautomata, still living, result from the evolution of the two initial parents.\nRemark 3. The fitness is not defined at this level of abstract formulation, but\nit is defined corresponding to the context for which the automaton is a model,\nas we will do in the next section.\n\n\f6\n\nR. Ghnemat, S. Oqeili, C. Bertelle and G.H.E. Duchamp\n\n5 Applications to competition-cooperation modeling\nusing prisoner dilemma\nWe develop in this section how we can modelize competition-cooperation processes in a same automata-based representation. The genetic computation\nallows to make automatic transition from competition to cooperation or from\ncoopeartion to competition. The basic problem used for this purpose is the\nwell-known prisoner dilemma [1].\n5.1 From adaptive strategies to probabilistic automata\nThe prisoner dilemma is a two-players game where each player has two possible actions: cooperate (C) with its adversary or betray him (C). So, four\noutputs are possible for the global actions of the two players. A relative payoff is defined relatively to these possible outputs, as described in the following\ntable where the rows correspond to one player behaviour and the columns to\nthe other player one.\n\nC\nC\nC (3,3) (0,5)\nC (5,0) (1,1)\nTable 1. Prisoner dilemma payoff\n\nIn the iterative version of the prisoner's dilemma, successive steps can be\ndefined. Each player do not know the action of its adversary during the current step but he knows it for the preceding step. So, different strategies can\nbe defined for a player behaviour, the goal of each one is to obtain maximal\npayoff for himself.\nIn Figures 1 and 2, we describe two strategies with transducers. Each transition is labeled by the input corresponding to the player perception which is\nthe precedent adversary action and the output corresponding to the present\nplayer action. The only inital state is the state 1, recognizable by the incoming arrow labeled only by the output. The final states are the states 1 and 2,\nrecognizable with the double circles.\nIn the strategy of Figure 1, the player has systematically the same behaviour as its adversary at the previous step. In the strategy of Figure 2, the\nplayer chooses definitively to betray as soon as his adversary does it. The previous automaton represents static strategies and so they are not well adapted\nfor the modelization of evolutive strategies. For this purpose, we propose a\n\n\fAutomata-based adaptive behavior for economic modelling\n\n7\n\nmodel based on a probabilistic automaton described by Figure 3 [5].\n\nC:C\n\n1\n\nC\n\n2\n\nC:C\nC:C\n\nC:C\n\nFig. 1. Tit-for-tat strategy automaton\n\nC:C\n1\n\nC\n\n2\n\nC:C\n\nC:C\n\nC:C\n\nFig. 2. Vindictive strategy automaton\n\nC:1\u2212p4\n\nC:p4\n\nC:p5\n\nC:1\u2212p2\n\np1\n\n1\n\n2\n\n1\u2212p1\n\nC:p3\nC:1\u2212p5\nC:p2\n\nC:1\u2212p3\n\nFig. 3. Probabilistic multi-strategies two-states automaton\n\nThis automaton represents all the two-states strategies for cooperation and\ncompetitive behaviour of one agent against another in prisoner's dilemma.\nThe transitions are labeled in output by the probabilities pi of their realization. The first state is the state reached after cooperation action and the\n\n\f8\n\nR. Ghnemat, S. Oqeili, C. Bertelle and G.H.E. Duchamp\n\nsecond state is reached after betrayal.\nFor this automaton, the associated matrix representation, as described\npreviously, is:\n\u0001\nI = p1 1 \u2212 p1 ;\n\u0013\n\u0012\np6\n;\nF =\n1 \u2212 p6\n\u0012\n\u0013\np2 1 \u2212 p2\nT (C) =\n;\np3 1 \u2212 p3\n\u0013\n\u0012\n1 \u2212 p4 p4\nT (C) =\n1 \u2212 p5 p5\n\n(3)\n(4)\n(5)\n(6)\n\n5.2 From probabilistic automata to genetic automata\nWith the matrix representation of the automata, we can compute genetic\nautomata as described in previous sections. Here the chromosomes are the\nsequences of all the matrices associated to each letter. We have to define the\nfitness in the context of the use of these automata. The fitness here is the\nvalue of the payoff.\n5.3 General Genetic Algorithm Process for Genetic Automata\nA population of automata is initially generated. These automata are playing\nagainst a predefined strategy, named S0 .\nEach automaton makes a set of plays. At each play, we run the probabilistic automaton which gives one of the two outputs: (C) or (C). With this\noutput and the S0 's output, we compute the payoff of the automaton, according with the payoff table.\nAt the end of the set of plays, the automaton payoff is the sum of all the\npayoffs of each play. This sum is the fitness of the automaton. At the end\nof this set of plays, each automaton has its own fitness and so the selection\nprocess can select the best automata. At the end of these selection process,\nwe obtain a new generation of automata.\nThis new generation of automata is the basis of a new computation of the\n3 genetics operators.\nThis processus allows to make evolve the player's behavior which is modelized by the probabilistic multi-strategies two-states automaton from cooperation to competition or from competition to cooperation. The evolution of\n\n\fAutomata-based adaptive behavior for economic modelling\n\n9\n\nthe strategy is the expression of an adaptive computation. This leads us to use\nthis formalism to implement some self-organisation processes which occurs in\ncomplex systems.\n\n6 Extension to Emergent Systems Modeling\nIn this section, we study how evolutive automata-based modeling can be used\nto compute automatic emergent systems. The emergent systems have to be\nunderstood in the meaning of complex system paradigm that we recall in the\nnext section. We have previously defined some way to compute the distance\nbetween automata and we use these principles to define distance between\nagents behaviours that are modeled with automata. Finally, we defined a\nspecific fitness that allows to use genetic algorithms as a kind of reinforcement\nmethod which leads to emergent system computation [15].\n6.1 Complex System Description Using Automata-Based Agent\nModel\nAccording to General System Theory [4, 19], a complex system is composed of\nentities in mutual interaction and interacting with the outside environment. A\nsystem has some characteristic properties which confer its structural aspects,\nas schematically described in part (a) of Figure 4:\n\u2022\n\u2022\n\n\u2022\n\nThe set elements or entities are in interactive dependance. The alteration\nof only one entity or one interaction reverberates on the whole system.\nA global organization emerges from interacting constitutive elements. This\norganization can be identified and carries its own autonomous behavior\nwhile it is in relation and dependance with its environment. The emergent\norganization possesses new properties that its own constitutive entities\ndon't have. \"The whole is more than the sum of its parts\".\nThe global organization retro-acts over its constitutive components. \"The\nwhole is less than the sum of its parts\" after E. Morin.\n\nThe interacting entities network as described in part (b) of Figure 4 leads\neach entity to perceive informations or actions from other entities or from the\nwhole system and to act itself.\nA well-adapted modeling consists of using an agent-based representation\nwhich is composed of the entity called agent as an entity which perceives and\nacts on an environment, using an autonomous behaviour as described in part\n(c) of Figure 4.\nTo compute a simulation composed of such entities, we need to describe\nthe behaviour of each agent. This one can be schematically described using\n\n\f10\n\nR. Ghnemat, S. Oqeili, C. Bertelle and G.H.E. Duchamp\nGlobal structures\n\nGlobal Dynamics\nand structures\nAgent\n\nInteracting Entities\nAgent\n\n(a) Global complex system\n\nAgent\n\n(b) Interacting entities network\n\nAgent\nAgent\n\nbehaviour\n\nbehaviour\n\nperceptions\n\nactions\nperceptions\n\nactions\n\nEnvironment\nEnvironment\n(c) Agent\u2212based model for entity\n\n(d) automata\u2212based model for agent behaviour\n\nFig. 4. Multi-scale complex system description: from global to individual models\n\ninternal states and transition processes between these states, as described in\npart (d) of Figure 4.\nThere are several definitions of \"agents\" or \"intelligent agents\" according\nto their behaviour specificities [11, 24]. Their autonomy means that the agents\ntry to satisfy a goal and execute actions, optimizing a satisfaction function to\nreach it.\nFor agents with high level autonomy, specific actions are realized even when\nno perception are detected from the environment. To represent the process of\nthis deliberation, different formalisms can be used and a behaviour decomposed in internal states is an effective approach. Finally, when many agents\noperate, the social aspects must also be taken into account. These aspects are\nexpressed as communications through agent organisation with message pass-\n\n\fAutomata-based adaptive behavior for economic modelling\n\n11\n\ning processes. Sending a message is an agent action and receiving a message is\nan agent perception. The previous description based on the couple: perception\nand action, is well adapted to this.\n6.2 Agent Behavior Semi-Distance\nWe describe in this section the bases of the genetic algorithm used on the\nprobabilistic automata allowing to manage emergent self-organizations in the\nmulti-agent simulation.\nFor each agent, we define e an evaluation function of its own behaviour\nreturning the matrix M of values such that Mi,j is the output series from\nall possible successive perceptions when starting from the initial state i and\nending at the final state j, without cycle. It will clearly be 0 if either i is not\nan initial state or j is not a final one and the matrix Mi,j is indeed a matrix\nof evaluations [2] of subseries of\nX\nM \u2217 := (\n\u03bc(a)a)\u2217\n(7)\na\u2208A\n\nNotice that the coefficients of this matrix, as defined, are computed whatever the value of the perception in the alphabet A on each transition on the\nsuccessful path4 . That means that the contribution of the agent behaviour for\ncollective organization formation is only based, here, on probabilities to reach\na final state from an initial one. This allows to preserve individual characteristics in each agent behaviour even if the agent belongs to an organization.\nLet x and y two agents and e(x) and e(y) their respective evaluations as\ndescribed above. We define d(x, y) a semi-distance (or pseudometrics, see [3]\nch IX) between the two agents x and y as ||e(x) \u2212 e(y)||, a matrix norm of\nthe difference of their evaluations. Let Vx a neighbourhood of the agent x,\nrelatively to a specific criterium, for example a spatial distance or linkage\nnetwork. We define f (x) the agent fitness of the agent x as :\n\uf8f1\nP\ncard(Vx )\n\uf8f4\n\uf8f4\nd(x, yi )2 6= 0\nif\n\uf8f2 X\n2\nd(x,\ny\n)\ny\n\u2208V\ni\nx\ni\nf (x) =\n\uf8f4\nyi \u2208Vx\n\uf8f4\n\uf8f3\n\u221e\notherwise\n6.3 Evolutive Automata for Automatic Emergence of\nSelf-Organized Agent- Based Systems\nIn the previous computation, we defined a semi-distance between two agents.\nThis semi-distance is computed using the matrix representation of the automaton with multiplicities associated to the agent behaviour. This semi-distance\n4\n\nA succesful path is a path from an initial state to a final state\n\n\f12\n\nR. Ghnemat, S. Oqeili, C. Bertelle and G.H.E. Duchamp\n\nis based on successful paths computation which needs to define initial and\nfinal states on the behaviour automata. For specific purposes, we can choose\nto define in some specific way, the initial and final states. This means that\nwe try to compute some specific action sequences which are chararacterized\nby the way of going from some specific states (defined here as initial ones) to\nsome specific states (defined here as final ones).\nBased on this specific purpose which leads to define some initial and final\nstates, we compute a behaviour semi-distance and then the fitness function\ndefined previously. This fitness function is an indicator which returns high\nvalue when the evaluated agent is near, in the sense of the behaviour semidistance defined previously, to all the other agents belonging to a predefined\nneighbouring.\nGenetic algorithms will compute in such a way to make evolve an agent\npopulation in a selective process. So during the computation, the genetic algorithm will make evolve the population towards a newer one with agents more\nand more adapted to the fitness. The new population will contain agents with\nbetter fitness, so the agents of a population will become nearer each others in\norder to improve their fitness. In that way, the genetic algorithm reinforces the\ncreation of a system which aggregates agents with similar behaviors, in the\nspecific way of the definition of initial and final states defined on the automata.\nThe genetic algorithm proposed here can be considered as a modelization\nof the feed-back of emergent systems which leads to gather agents of similar\nbehaviour, but these formations are dynamical and we cannot predict what\nwill be the set of these aggregations which depends of the reaction of agents\nduring the simulation. Moreover the genetic process has the effect of generating a feed- back of the emergent systems on their own contitutive elements\nin the way that the fitness improvement lead to bring closer the agents which\nare picked up inside the emergent aggregations.\nFor specific problem solving, we can consider that the previous fitness\nfunction can be composed with another specific one which is able to measure\nthe capability of the agent to solve one problem. This composition of fitness\nfunctions leads to create emergent systems only for the ones of interest, that\nis, these systems are able to be developed only if the aggregated agents are\nable to satisfy some problem solving evaluation.\n\n7 Conclusion\nThe aim of this study is to develop a powerful algebraic structure to represent\nbehaviors concerning cooperation-competition processes and on which we can\nadd genetic operators. We have explained how we can use these structures\n\n\fAutomata-based adaptive behavior for economic modelling\n\n13\n\nfor modeling adaptive behaviors needed in game theory. More than for this\napplication, we have described how we can use such adaptive computations to\nautomatically detect emergent systems inside interacting networks of entities\nrepresented by agents in a simulation.\n\nReferences\n1. R. Axelrod (1997) The complexity of cooperation, Princeton University Press\n2. J. Berstel and G. Reutenauer (1988) Rational series and their language, EATCS\n3. N. Bourbaki (1998) Elements of Mathematics: General Topology, Chapters 5-10,\nSpringer-Verlag Telos\n4. L. von Bertalanffy (1968) General System Theory, Georges Braziller Ed.\n5. C. Bertelle, M. Flouret, V. Jay, D. Olivier, and J.-L. Ponty (2002) \"Adaptive\nbehaviour for prisoner dilemma strategies based on automata with multiplicities.\"\nIn ESS 2002 Conf., Dresden, Germany\n6. C. Bertelle, M. Flouret, V. Jay, D. Olivier, and J.-L. Ponty (2001) \"Genetic algorithms on automata with multiplicities for adaptive agent behaviour in emergent\norganizations\" In SCI'2001, Orlando, Florida, USA\n7. G.H.E. Duchamp, H. Hadj-Kacem and E. Laugerotte (2005) \"Algebraic elimination of \u01eb-transitions\", DMTCS, 7(1):51-70\n8. G. Duchamp and J-M Champarnaud (2004) Derivatives of rational expressions\nand related theorems, Theoretical Computer Science 313\n9. N. Eber (2004) Th\u00e9orie des jeux, Dunod\n10. S. Eilenberg (1976) Automata, languages and machines, Vol. A and B, Academic\npress\n11. J. Ferber (1999) Multi-agent system, Addison-Wesley\n12. L.J. Fogel, A.J. Owens, M.J. Welsh (1966) Artificial intelligence through simulated evolution, John Wiley\n13. J.S. Golan (1999) Power algebras over semirings, Kluwer Academic Publishers\n14. D.E. Goldberg (1989) Genetic Algorithms, Addison-Wesley\n15. J. H. Holland (1995) Hidden Order - How adaptation builds complexity, Persus\nbooks ed.\n16. J.E. Hopcroft, R. Motwani, J.D. Ullman (2001) Introduction to automata theory,\nLanguages and Computation, Addison-Wesley\n17. J. Koza (1997) Genetic programming, Encyclopedia of Computer Sciences and\nTechnology\n18. M. Mitchell (1996) An introduction to Genetic Algorithms, The MIT Press\n19. J.-L. Le Moigne (1999) La mod\u00e9lisation des syst\u00e8mes complexes, Dunod\n20. I. Rechenberg (1973) Evolution strategies, Fromman-Holzboog\n21. M.P. Schutzenberger (1961) \"On the definition of a family of automata\", Information and Control, 4:245-270\n22. R.P. Stanley (1999) Enumerative combinatorics, Cambridge University Press\n23. F. Treves (1967) Topological Vector Spaces, Distributions and Kernels, Acad.\nPress\n24. G. Weiss, ed. (1999) Multiagent Systems, MIT Press\n\n\f"}