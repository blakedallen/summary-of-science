{"id": "http://arxiv.org/abs/cs/0612060v1", "guidislink": true, "updated": "2006-12-11T12:32:02Z", "updated_parsed": [2006, 12, 11, 12, 32, 2, 0, 345, 0], "published": "2006-12-11T12:32:02Z", "published_parsed": [2006, 12, 11, 12, 32, 2, 0, 345, 0], "title": "The Common Prefix Problem On Trees", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0612138%2Ccs%2F0612072%2Ccs%2F0612122%2Ccs%2F0612132%2Ccs%2F0612134%2Ccs%2F0612032%2Ccs%2F0612069%2Ccs%2F0612127%2Ccs%2F0612001%2Ccs%2F0612047%2Ccs%2F0612095%2Ccs%2F0612062%2Ccs%2F0612089%2Ccs%2F0612118%2Ccs%2F0612124%2Ccs%2F0612065%2Ccs%2F0612066%2Ccs%2F0612038%2Ccs%2F0612121%2Ccs%2F0612086%2Ccs%2F0612025%2Ccs%2F0612053%2Ccs%2F0612060%2Ccs%2F0612130%2Ccs%2F0612143%2Ccs%2F0612104%2Ccs%2F0612057%2Ccs%2F0612007%2Ccs%2F0612081%2Ccs%2F0311006%2Ccs%2F0311003%2Ccs%2F0311039%2Ccs%2F0311008%2Ccs%2F0311015%2Ccs%2F0311033%2Ccs%2F0311004%2Ccs%2F0311049%2Ccs%2F0311012%2Ccs%2F0311011%2Ccs%2F0311009%2Ccs%2F0311048%2Ccs%2F0311030%2Ccs%2F0311037%2Ccs%2F0311051%2Ccs%2F0311036%2Ccs%2F0311021%2Ccs%2F0311045%2Ccs%2F0311031%2Ccs%2F0311024%2Ccs%2F0311041%2Ccs%2F0311010%2Ccs%2F0311044%2Ccs%2F0311022%2Ccs%2F0311043%2Ccs%2F0311005%2Ccs%2F0311027%2Ccs%2F0311052%2Ccs%2F0311040%2Ccs%2F0311018%2Ccs%2F0311038%2Ccs%2F0311013%2Ccs%2F0311042%2Ccs%2F0311054%2Ccs%2F0311025%2Ccs%2F0311035%2Ccs%2F0311029%2Ccs%2F0311007%2Ccs%2F0311014%2Ccs%2F0311023%2Ccs%2F0311028%2Ccs%2F0311026%2Ccs%2F0311050%2Ccs%2F0311034%2Ccs%2F0311020%2Ccs%2F0311001%2Ccs%2F0311046%2Ccs%2F0311019%2Ccs%2F0311053%2Ccs%2F0311002%2Ccs%2F0311017%2Ccs%2F0311016%2Ccs%2F0311047%2Ccs%2F0304011%2Ccs%2F0304040%2Ccs%2F0304044%2Ccs%2F0304009%2Ccs%2F0304004%2Ccs%2F0304039%2Ccs%2F0304042%2Ccs%2F0304046%2Ccs%2F0304019%2Ccs%2F0304026%2Ccs%2F0304001%2Ccs%2F0304014%2Ccs%2F0304007%2Ccs%2F0304006%2Ccs%2F0304021%2Ccs%2F0304033%2Ccs%2F0304045%2Ccs%2F0304020%2Ccs%2F0304022&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The Common Prefix Problem On Trees"}, "summary": "We present a theoretical study of a problem arising in database query\noptimization, which we call as The Common Prefix Problem. We present a\n$(1-o(1))$ factor approximation algorithm for this problem, when the underlying\ngraph is a binary tree. We then use a result of Feige and Kogan to show that\neven on stars, the problem is hard to approximate.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0612138%2Ccs%2F0612072%2Ccs%2F0612122%2Ccs%2F0612132%2Ccs%2F0612134%2Ccs%2F0612032%2Ccs%2F0612069%2Ccs%2F0612127%2Ccs%2F0612001%2Ccs%2F0612047%2Ccs%2F0612095%2Ccs%2F0612062%2Ccs%2F0612089%2Ccs%2F0612118%2Ccs%2F0612124%2Ccs%2F0612065%2Ccs%2F0612066%2Ccs%2F0612038%2Ccs%2F0612121%2Ccs%2F0612086%2Ccs%2F0612025%2Ccs%2F0612053%2Ccs%2F0612060%2Ccs%2F0612130%2Ccs%2F0612143%2Ccs%2F0612104%2Ccs%2F0612057%2Ccs%2F0612007%2Ccs%2F0612081%2Ccs%2F0311006%2Ccs%2F0311003%2Ccs%2F0311039%2Ccs%2F0311008%2Ccs%2F0311015%2Ccs%2F0311033%2Ccs%2F0311004%2Ccs%2F0311049%2Ccs%2F0311012%2Ccs%2F0311011%2Ccs%2F0311009%2Ccs%2F0311048%2Ccs%2F0311030%2Ccs%2F0311037%2Ccs%2F0311051%2Ccs%2F0311036%2Ccs%2F0311021%2Ccs%2F0311045%2Ccs%2F0311031%2Ccs%2F0311024%2Ccs%2F0311041%2Ccs%2F0311010%2Ccs%2F0311044%2Ccs%2F0311022%2Ccs%2F0311043%2Ccs%2F0311005%2Ccs%2F0311027%2Ccs%2F0311052%2Ccs%2F0311040%2Ccs%2F0311018%2Ccs%2F0311038%2Ccs%2F0311013%2Ccs%2F0311042%2Ccs%2F0311054%2Ccs%2F0311025%2Ccs%2F0311035%2Ccs%2F0311029%2Ccs%2F0311007%2Ccs%2F0311014%2Ccs%2F0311023%2Ccs%2F0311028%2Ccs%2F0311026%2Ccs%2F0311050%2Ccs%2F0311034%2Ccs%2F0311020%2Ccs%2F0311001%2Ccs%2F0311046%2Ccs%2F0311019%2Ccs%2F0311053%2Ccs%2F0311002%2Ccs%2F0311017%2Ccs%2F0311016%2Ccs%2F0311047%2Ccs%2F0304011%2Ccs%2F0304040%2Ccs%2F0304044%2Ccs%2F0304009%2Ccs%2F0304004%2Ccs%2F0304039%2Ccs%2F0304042%2Ccs%2F0304046%2Ccs%2F0304019%2Ccs%2F0304026%2Ccs%2F0304001%2Ccs%2F0304014%2Ccs%2F0304007%2Ccs%2F0304006%2Ccs%2F0304021%2Ccs%2F0304033%2Ccs%2F0304045%2Ccs%2F0304020%2Ccs%2F0304022&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We present a theoretical study of a problem arising in database query\noptimization, which we call as The Common Prefix Problem. We present a\n$(1-o(1))$ factor approximation algorithm for this problem, when the underlying\ngraph is a binary tree. We then use a result of Feige and Kogan to show that\neven on stars, the problem is hard to approximate."}, "authors": ["Sreyash Kenkre", "Sundar Vishwanathan"], "author_detail": {"name": "Sundar Vishwanathan"}, "author": "Sundar Vishwanathan", "arxiv_comment": "8 pages", "links": [{"href": "http://arxiv.org/abs/cs/0612060v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cs/0612060v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cs/0612060v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/cs/0612060v1", "journal_reference": null, "doi": null, "fulltext": "arXiv:cs/0612060v1 [cs.DS] 11 Dec 2006\n\nThe Common Prefix Problem On Trees\nSreyash Kenkre\n\nSundar Vishwanathan\n\nDepartment Of Computer Science & Engineering,\nIIT Bombay, Powai-400076, India.\n{srek,sundar}@cse.iitb.ac.in\n\nAbstract\nWe present a theoretical study of a problem arising in database query optimization [1],\nwhich we call as The Common Prefix Problem. We present a (1 \u2212 o(1)) factor approximation algorithm for this problem, when the underlying graph is a binary tree. We then\nuse a result of Feige and Kogan [2] to show that even on stars, the problem is hard to\napproximate.\n\n1\n\nProblem\n\nLet T be a tree with V as its vertex set and E as its edge set. Let each vertex v be associated\nwith a set of labels Sv , taken from an alphabet \u03a3. Suppose that the vertices v and u are\nadjacent and their corresponding labels are given permutations Pv and Pu . We define the\nbenefit of the edge uv as the length of the largest common prefix, denoted by Pv \u2227Pu . The goal\nis to maximize the total benefit by permuting the labels associated with each vertex appropriP\nately. More precisely, find permutations P1 , P2 , . . . , P|V | , so as to maximize uv\u2208E |Pu \u2227 Pv |.\nThe corresponding decision problem is known to be N P \u2212 Complete [1]. It can be solved in\npolynomial time if the tree is a path, and a 1/2-factor approximation is known for the case of\na binary tree [1]. In this paper give a (1 \u2212 o(1)) factor algorithm for this problem on binary\ntrees. We then study the problem when the underlying graph is a star (K1,r ) and prove a\nhardness of approximation result by relating this problem to the Maximum Edge Biclique\n1\n\n\fproblem. Throughout the paper we assume that the size of the alphabet \u03a3 is a constant.\n\n2\n\nOptimal Recursion For Trees\n\nIn this section we give a recursion to optimally solve Common Prefix on trees. This recursion\nmay run in exponential time. In the next section we will run this on sufficiently small trees\nto get the (1 \u2212 o(1)) factor algorithm.\nWe observe that the labels that are common to all vertices can always be put as prefixes to\nthe permutations associated with the vertices. If the first label in the permutation associated\nwith each vertex is the same, then we have a label common to all vertices. Hence, once the\ncommon labels are removed, there will be an edge with zero benefit in the optimal. This we\ncan delete from the tree T , and recurse as follows.\n\nOP TCP (T ) = | \u2229v\u2208V Sv | + max[OP TCP (T1 ) + OP TCP (T2 )]\ne\u2208E\n\n(1)\n\nwhere T1 and T2 are the two connected components of T \\ e. However solving this recursion\nmay involve steps exponential in the number of nodes for example, on a complete binary tree\nof size n. The recursion-(1) can be implemented as a dynamic program for trees which have\na polynomially bounded number of subtrees, for example, paths. We show that binary trees\nof height log log n also have this property.\nClaim: The total number of subtrees in a binary tree of height log log n is at most n2 .\nProof: The total number of nodes in a binary tree of height h is at most 2h . Connecting\neach subset of the vertices to the root yields a subtree containing the root, so there are at\nh\n\nmost 22 such subtrees. Thus the total number of subtrees in a binary tree of height h is at\nmost\nh\n\nh\u22121\n\n22 + 222\nh+1\n\n= 22\n\nh\u22122\n\n+ 22 22\n\n\u2212 2h\n2\n\n+ . . . + 2h\n\n\fh+1\n\n\u2264 22\n\nIf h equals log log n, we get the desired result.\n\n\u2737\n\nIt follows that the recursion-(1) can be solved optimally in time O(n2 ) on binary trees of\nheight log log n. We use this to give a (1 \u2212\n\n1\nlog log n )\n\nfactor approximation for Common Prefix\n\non binary trees.\n\n3\n\n(1 \u2212 O(1)) Factor Algorithm\n\nConsider a binary tree T , of height h on n vertices rooted at vertex r. We split T into sets\nA1 , A2 , . . . , Alog log n , each consisting of subtrees of height at most log log n. A1 consists of\nthe subtrees obtained by deleting the edges joining vertices from heights i log log n \u2212 1 and\nh\ni log log n for 1 \u2264 i \u2264 \u2308 log log\nn \u2309. A2 consists of subtrees obtained by deleting the edges joining\nh\nvertices from heights i log log n and i log log n + 1 for 0 \u2264 i \u2264 \u2308 log log\nn \u2309 and so on. Each\n\nAi consists of vertex disjoint subtrees of height at most log log n. Since each Ai contains no\nmore than n subtrees, we can solve Common Prefix on each Ai optimally. We denote the\noptimal value for Ai by OP TCP (Ai ). Note that each edge occurs in all but one of the Ai 's.\nLet be denote the benefit of the edge e in the optimal, and let A denote the maximum of all\nOP TCP (Ai )'s. Then from the preceding discussion we have,\n(log log n \u2212 1)OP TCP\n\n= (log log n \u2212 1)\n=\n\nX\n\nbe +\n\ne\u2208A1\n\nX\ne\u2208A2\n\nX\n\nbe\n\ne\u2208E\n\nbe + . . . +\n\nX\n\nbe\n\ne\u2208Alog log n\n\n\u2264 OP TCP (A1 ) + OP TCP (A2 ) + . . . + OP TCP (Alog log n )\n\u2264 (log log n)A.\n\nWe thus have a factor (1 \u2212\n\n1\nlog log n )\n\nalgorithm for binary trees by taking the maximum of\n\nthe Ai 's. Since a binary tree of height log log n has at most n2 subtrees, and each Ai can have\nat most\n\nh\nlog log n\n\ntrees, and since there are log log n Ai 's, the total time taken for this algorithm\n\nh\n2\n3\nis O( log log\nn n log log n) = O(n ).\n\n3\n\n\fNote that we can trade the approximation factor for running time as follows. For fixed\n\u01eb < 1, take N = \u2308 1\u01eb \u2309. Now, instead of taking subtrees of height at most log log n in the Ai 's\ntake them to be of height at most N . We can use the recursion-(1) to solve for the subtrees\nN\n\nof height at most N in time O(n22 ). Using the same analysis as above, we get a (1 \u2212 \u01eb)\n\u23081\n\u01eb \u2309+1\n\nfactor algorithm that runs in O( n\u01eb 22\n\n4\n\n) time.\n\nCommon Prefix on Stars\n\nIn this section we prove that the Common Prefix problem on stars is equivalent to a problem of\nfinding large nested neighborhoods in bipartite graphs. We shall use this in the next section\nto prove a hardness of approximation result for Common Prefix . Consider the following\nproblem.\nDefinition 1 Nested Neighborhoods : Given a bipartite graph G = (U, V, E) with U and\nV as its bipartition and E as its edge set, find subsets U \u2032 \u2286 U and V \u2032 \u2286 V , such that the\nelements of U \u2032 can be ordered as u1 , u2 , . . . , u|U \u2032 | , with \u0393(u1 ) \u2229 V \u2032 \u2287 \u0393(u2 ) \u2229 V \u2032 \u2287 . . . \u2287\n\u0393(u|U \u2032 | ) \u2229 V \u2032 , and such that |\u0393(u1 ) \u2229 V \u2032 | + |\u0393(u2 ) \u2229 V \u2032 | + . . . + |\u0393(u|U \u2032 | ) \u2229 V \u2032 | is maximized.\nNote that the above problem is independent of whether we choose the subset from U or from\nV , since V \u2032 can be labeled to get a feasible solution of the same cost. We show that this\nproblem is equivalent to the Common Prefix problem on stars.\nSuppose G = (U, V, E) is an instance of Nested Neighborhoods. Consider a star T with\nleaf nodes corresponding to the vertices in U and a vertex r 6\u2208 U as the non-leaf vertex. We\ntreat the vertex set V as a set of labels to be assigned to vertices of T . The vertex r is given\nthe entire set V as its set of labels, while each of the remaining vertices u \u2208 U is assigned\nthe label set \u0393(u) \u2286 V . We thus have a Common Prefix instance on T . If u1 , u2 , . . . , u|U \u2032 |\nand V \u2032 is feasible for Nested Neighborhoods on G, then we can construct a feasible solution\nfor Common Prefix on T , with the same cost, by choosing a permutation of V that has the\nlabels of \u0393(u|U \u2032 | ) \u2229 V \u2032 first, followed by those of \u0393(u|U \u2032 |\u22121 ) \u2229 V \u2032 \\ \u0393(u|U \u2032 | ) and so on. Thus the\nNested Neighborhoods problem reduces to the Common Prefix problem on stars.\n4\n\n\fConversely, if T is star in an instance of Common Prefix , with \u03a3 as the label set of\nthe non-leaf vertex r and \u03a3i as the label set of each leaf ui , then we construct a Nested\nNeighborhoods instance as follows. The bipartition has the vertex sets U , which consists of\nall the leaf nodes of T , and V which consists of the set of labels \u03a3 on r. A vertex ui \u2208 U is\nconnected by an edge to a vertex vs \u2208 V , if the corresponding label s \u2208 \u03a3 belongs to the label\nset \u03a3i of ui . Using an argument similar to that in the previous paragraph, it can be shown\nthat each feasible solution to Common Prefix on T has a corresponding feasible solution to\nNested Neighborhoods on G, with the same cost. We thus have the following result.\n\nTheorem 1 The Nested neighborhoods problem is equivalent to the Common Prefix problem\non an appropriate star.\n\nWe note that these are approximation preserving reduction. From now on, we deal with\nthe Nested Neighborhoods problem.\n\n5\n\nEdge Bicliques Problem\n\nLet G = (U, V, E) be a bipartite graph with U and V as its bipartition and E as its set of\nedges. If B is a subset of the vertex set (U \u222a V ), the subgraph induced by B is said to be a\nbiclique if uv \u2208 E for all u \u2208 B \u2229 U and v \u2208 B \u2229 V . The Maximum Edge Biclique (EBCS)\nproblem asks for a subgraph of a given bipartite graph, which is a biclique and has the largest\nnumber of edges.\n\nLemma 1 Let G = (U, V, E) be a bipartite graph, and let OP TEBCS and OP TCP be the\noptimal values of the EBCS and the Nested Neighborhoods problem on G. Then OP TEBCS \u2264\nOP TN N .\nProof: Suppose that U \u2032 = {u1 , u2 , . . . , uk } \u2286 U and V \u2032 = {v1 , v2 , . . . , vl } \u2286 V is a biclique.\nSince \u0393(u1 ) \u2229 V \u2032 = \u0393(u2 ) \u2229 V \u2032 = . . . = \u0393(uk ) \u2229 V \u2032 , this corresponds to a feasible solution of\nthe Nested Neighborhoods problem, with the same cost.\n\n5\n\n\u2737\n\n\fNote that the above proof shows the stronger result that every feasible solution to EBCS\nhas a corresponding feasible solution to Nested Neighborhoods with at least as much cost.\nLemma 2 Let G = (U, V, E) be a bipartite graph. If it has a feasible solution to Nested\nNeighborhoods of cost c, then G contains a biclique with at least\n\nc\nHn\n\nedges, where Hn denotes\n\nthe nth harmonic number and |U | = n.\nProof: Let U \u2032 and V \u2032 be a feasible solution to the Nested Neighborhoods problem of cost c,\nwith {u1 , u2 , . . . , uk } = U \u2032 and such that \u0393(u1 ) \u2229 V \u2032 \u2287 \u0393(u2 ) \u2229 V \u2032 \u2287 . . . \u2287 \u0393(uk ) \u2229 V \u2032 . Each\nj=i\nvertex subset of the form u1 , u2 , . . . , ui along with V \u2032 \u2229j=1\n\u0393(ui ) forms a biclique. It is easy\n\nto see that if the largest biclique in the subgraph P , induced by U \u2032 \u222a V \u2032 , contains ui , then it\nalso contains all vertices uj for j \u2264 i. Let \u01eb be the size of the largest biclique in P and let yi\nj=i\ndenote |\u0393(ui ) \u2229 V \u2032 |. The biclique induced by u1 , u2 , . . . , ui and V \u2032 \u2229j=1\n\u0393(ui ) has i \u00d7 yi edges.\n\nHence, for each i = 1, . . . , k, yi \u2264 \u01eb/i. We now have\nc = y1 + y2 + . . . + yk\n\u2264 (1 +\n\n1 1\n1\n+ + . . . + )\u01eb\n2 3\nk\n\n\u2264 Hn \u01eb.\nThis proves the lemma.\n\n\u2737\n\nCombining lemma (1) and lemma (2) we get the following.\n\nOP TEBCS \u2264 OP TN N\n\n\u2264 Hn OP TEBCS\n\nThere are graphs for which the inequality on the right is tight. Consider the bipartite\ngraph G = (U, V, E), with U = {u1 , u2 , . . . , un } and V = {v1 , v2 , . . . , vn } and the edges defined\nby the relation \u0393(ui ) = {v1 , v2 , . . . , v ni }. It is easily seen that every edge occurs in the optimal\nsolution to Nested Neighborhoods . Thus OP TN N = n + (n/2) + (n/3) + . . . + (n/n) = nHn .\nFurther, if k is the largest index of a vertex in U in an optimal solution to EBCS, then every\nvertex ui is in the optimal for i \u2264 k, so that OP TEBCS = k(n/k) = n. Thus\nfor this graph.\n6\n\nOP TNN\nOP TEBCS\n\n= Hn\n\n\f6\n\nHardness of Common Prefix on Stars\n\nWe will need the following result of Feige and Kogan.\n\nTheorem 2 Feige-Kogan [2]\n\u03b4\n\nIf the maximum edge biclique problem can be approximated within a factor of 2(log n) for every\nconstant \u03b4 > 0, then 3-SAT can be solved in time 2n\n\n3/4+\u01eb\n\nfor every constant \u01eb > 0.\n\nSuppose that there is an algorithm that approximates Nested Neighborhoods on stars\nwithin a factor of \u03b1, i.e. if it returns the value A, then OP TCP \u2264 A \u2264 \u03b1OP TN N . Then using\nlemma-(2), we know that the bipartite graph contains a feasible solution to EBCS of size A\u2032 ,\nsuch that A \u2264 Hn A\u2032 . We then get an \u03b1/Hn factor algorithm for EBCS, since\n\nA\u2032 \u2265\n\u2265\n\u2265\n\nA\nHn\n\u03b1\nOP TN N\nHn\n\u03b1\nOP TEBCS .\nHn\n\nThus, using theorems (1) and (2), we get the following hardness result.\n\nTheorem 3 If the Common Prefix problem for stars can be approximated within a factor of\n\u03b4 \u2212log log n\n\n2(log n)\n\nfor every constant \u03b4 > 0, then 3-SAT can be solved in time 2n\n\nconstant \u01eb > 0.\n\n7\n\nAcknowledgments\n\nWe thank Ravindra Guravannavar for posing this problem.\n\n7\n\n3/4+\u01eb\n\nfor every\n\n\fReferences\n[1] Ravindra Guravannavar, S. Sudarshan, Ajit A. Diwan, Ch. Sobhan Babu, Reducing Order\nEnforcement Cost in Complex Query Plans. Manuscript, November 2006. Available at\nhttp://arxiv.org/abs/cs.DB/0611094\n[2] Uriel\n\nFeige,\n\nComplete\n\nShimon\n\nBipartite\n\nKogan,\n\nSubgraph\n\nHardness\nProblem.\n\nof\n\nManuscript,\n\nhttp://research.microsoft.com/theory/feige/.\n\n8\n\nApproximation\nMay\n\nof\n2004.\n\nThe\n\nBalanced\n\nAvailable\n\nat\n\n\f"}