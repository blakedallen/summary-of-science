{"id": "http://arxiv.org/abs/physics/0407003v1", "guidislink": true, "updated": "2004-07-01T09:04:44Z", "updated_parsed": [2004, 7, 1, 9, 4, 44, 3, 183, 0], "published": "2004-07-01T09:04:44Z", "published_parsed": [2004, 7, 1, 9, 4, 44, 3, 183, 0], "title": "Pressure Model of Soft Body Simulation", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=physics%2F0407152%2Cphysics%2F0407084%2Cphysics%2F0407111%2Cphysics%2F0407143%2Cphysics%2F0407102%2Cphysics%2F0407045%2Cphysics%2F0407033%2Cphysics%2F0407133%2Cphysics%2F0407099%2Cphysics%2F0407028%2Cphysics%2F0407056%2Cphysics%2F0407140%2Cphysics%2F0407023%2Cphysics%2F0407001%2Cphysics%2F0407078%2Cphysics%2F0407094%2Cphysics%2F0407016%2Cphysics%2F0407006%2Cphysics%2F0407054%2Cphysics%2F0407040%2Cphysics%2F0407150%2Cphysics%2F0407106%2Cphysics%2F0407138%2Cphysics%2F0407147%2Cphysics%2F0407047%2Cphysics%2F0407109%2Cphysics%2F0407097%2Cphysics%2F0407085%2Cphysics%2F0407043%2Cphysics%2F0407070%2Cphysics%2F0407148%2Cphysics%2F0407061%2Cphysics%2F0407010%2Cphysics%2F0407082%2Cphysics%2F0407027%2Cphysics%2F0407095%2Cphysics%2F0407055%2Cphysics%2F0407005%2Cphysics%2F0407144%2Cphysics%2F0407154%2Cphysics%2F0407038%2Cphysics%2F0407066%2Cphysics%2F0407003%2Cphysics%2F0407024%2Cphysics%2F0407100%2Cphysics%2F0407069%2Cphysics%2F0407108%2Cphysics%2F0407063%2Cphysics%2F0407012%2Cphysics%2F0407051%2Cphysics%2F0407019%2Cphysics%2F0407008%2Cphysics%2F0407093%2Cphysics%2F0407044%2Cphysics%2F0407050%2Cphysics%2F0407096%2Cphysics%2F0407083%2Cphysics%2F0407080%2Cphysics%2F0407151%2Cphysics%2F0407124%2Cphysics%2F0407149%2Cphysics%2F0407132%2Cphysics%2F0407009%2Cphysics%2F0407081%2Cphysics%2F0407146%2Cphysics%2F0407067%2Cphysics%2F0407034%2Cphysics%2F0407131%2Cphysics%2F0407088%2Cphysics%2F0407103%2Cphysics%2F0407030%2Cphysics%2F0407041%2Cphysics%2F0407090%2Cphysics%2F0407130%2Cphysics%2F0407120%2Cphysics%2F0407145%2Cphysics%2F0509073%2Cphysics%2F0509256%2Cphysics%2F0509064%2Cphysics%2F0509200%2Cphysics%2F0509013%2Cphysics%2F0509068%2Cphysics%2F0509214%2Cphysics%2F0509077%2Cphysics%2F0509075%2Cphysics%2F0509157%2Cphysics%2F0509121%2Cphysics%2F0509171%2Cphysics%2F0509234%2Cphysics%2F0509168%2Cphysics%2F0509215%2Cphysics%2F0509192%2Cphysics%2F0509251%2Cphysics%2F0509057%2Cphysics%2F0509022%2Cphysics%2F0509119%2Cphysics%2F0509211%2Cphysics%2F0509129%2Cphysics%2F0509226%2Cphysics%2F0509198%2Cphysics%2F0509148&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Pressure Model of Soft Body Simulation"}, "summary": "Motivated by existing models used for soft body simulation which are rather\ncomplex to implement, we present a novel technique which is based on simple\nlaws of physics and gives high quality results in real-time. We base the\nimplementation on simple thermodynamics laws and use the Clausius-Clapeyron\nstate equation for pressure calculation. In addition, this provides us with a\npressure force that is accumulated into a force accumulator of a 3D mesh object\nby using an existing spring-mass engine. Finally after integration of Newtons\nsecond law we obtain the behavior of a soft body with fixed or non-fixed air\npressure inside of it.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=physics%2F0407152%2Cphysics%2F0407084%2Cphysics%2F0407111%2Cphysics%2F0407143%2Cphysics%2F0407102%2Cphysics%2F0407045%2Cphysics%2F0407033%2Cphysics%2F0407133%2Cphysics%2F0407099%2Cphysics%2F0407028%2Cphysics%2F0407056%2Cphysics%2F0407140%2Cphysics%2F0407023%2Cphysics%2F0407001%2Cphysics%2F0407078%2Cphysics%2F0407094%2Cphysics%2F0407016%2Cphysics%2F0407006%2Cphysics%2F0407054%2Cphysics%2F0407040%2Cphysics%2F0407150%2Cphysics%2F0407106%2Cphysics%2F0407138%2Cphysics%2F0407147%2Cphysics%2F0407047%2Cphysics%2F0407109%2Cphysics%2F0407097%2Cphysics%2F0407085%2Cphysics%2F0407043%2Cphysics%2F0407070%2Cphysics%2F0407148%2Cphysics%2F0407061%2Cphysics%2F0407010%2Cphysics%2F0407082%2Cphysics%2F0407027%2Cphysics%2F0407095%2Cphysics%2F0407055%2Cphysics%2F0407005%2Cphysics%2F0407144%2Cphysics%2F0407154%2Cphysics%2F0407038%2Cphysics%2F0407066%2Cphysics%2F0407003%2Cphysics%2F0407024%2Cphysics%2F0407100%2Cphysics%2F0407069%2Cphysics%2F0407108%2Cphysics%2F0407063%2Cphysics%2F0407012%2Cphysics%2F0407051%2Cphysics%2F0407019%2Cphysics%2F0407008%2Cphysics%2F0407093%2Cphysics%2F0407044%2Cphysics%2F0407050%2Cphysics%2F0407096%2Cphysics%2F0407083%2Cphysics%2F0407080%2Cphysics%2F0407151%2Cphysics%2F0407124%2Cphysics%2F0407149%2Cphysics%2F0407132%2Cphysics%2F0407009%2Cphysics%2F0407081%2Cphysics%2F0407146%2Cphysics%2F0407067%2Cphysics%2F0407034%2Cphysics%2F0407131%2Cphysics%2F0407088%2Cphysics%2F0407103%2Cphysics%2F0407030%2Cphysics%2F0407041%2Cphysics%2F0407090%2Cphysics%2F0407130%2Cphysics%2F0407120%2Cphysics%2F0407145%2Cphysics%2F0509073%2Cphysics%2F0509256%2Cphysics%2F0509064%2Cphysics%2F0509200%2Cphysics%2F0509013%2Cphysics%2F0509068%2Cphysics%2F0509214%2Cphysics%2F0509077%2Cphysics%2F0509075%2Cphysics%2F0509157%2Cphysics%2F0509121%2Cphysics%2F0509171%2Cphysics%2F0509234%2Cphysics%2F0509168%2Cphysics%2F0509215%2Cphysics%2F0509192%2Cphysics%2F0509251%2Cphysics%2F0509057%2Cphysics%2F0509022%2Cphysics%2F0509119%2Cphysics%2F0509211%2Cphysics%2F0509129%2Cphysics%2F0509226%2Cphysics%2F0509198%2Cphysics%2F0509148&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Motivated by existing models used for soft body simulation which are rather\ncomplex to implement, we present a novel technique which is based on simple\nlaws of physics and gives high quality results in real-time. We base the\nimplementation on simple thermodynamics laws and use the Clausius-Clapeyron\nstate equation for pressure calculation. In addition, this provides us with a\npressure force that is accumulated into a force accumulator of a 3D mesh object\nby using an existing spring-mass engine. Finally after integration of Newtons\nsecond law we obtain the behavior of a soft body with fixed or non-fixed air\npressure inside of it."}, "authors": ["Matyka Maciej", "Ollila Mark"], "author_detail": {"name": "Ollila Mark"}, "author": "Ollila Mark", "arxiv_comment": "5 pages, 8 figures, conference - SIGRAD 2003, Umea, Sweden", "links": [{"href": "http://arxiv.org/abs/physics/0407003v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/physics/0407003v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "physics.comp-ph", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "physics.comp-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "physics.ed-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/physics/0407003v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/physics/0407003v1", "journal_reference": "SIGRAD2003, Umea, Sweden", "doi": null, "fulltext": "Pressure Model of Soft Body Simulation\nMark Ollila \u2020\nLink\u00f6ping University, Sweden\n\nMaciej Matyka\u2217\nUniversity of Wroc\u0142aw, Poland\n\nAbstract\nMotivated by existing models used for soft body simulation which\nare rather complex to implement, we present a novel technique\nwhich is based on simple laws of physics and gives high quality\nresults in real-time. We base the implementation on simple thermodynamics laws and use the Clausius-Clapeyron state equation for\npressure calculation. In addition, this provides us with a pressure\nforce that is accumulated into a force accumulator of a 3D mesh\nobject by using an existing spring-mass engine. Finally after integration of Newtons second law we obtain the behavior of a soft\nbody with fixed or non-fixed air pressure inside of it.\n\nThe model which we introduce, is in a fact described by two\nequations and be very easy implemented into existing spring-mass\nsystems by adding one additional force - the pressure force.\n\nCR Categories:\nI.6.8 [Simulation and Modeling]: Types of\nSimulation-Animation; I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling-Physically based modeling I.3.7 [Computer Graphics]: Three-Dimensional Graphics and\nRealism-Animation\nKeywords: physically based modeling, animation\n\n1\n\nIntroduction and Background\n\nIn this paper we present a model for three dimensional deformable\nobjects simulation based on simple and fundamental physics principles.\nWe started our research in deformable object animation because\nof the complexity and cost of solutions with FEM, FEV (see [1; 15])\nand LEM (see [9; 10; 11; 12]) methods. Some attempts with finite\nelements in real time simulations have been made (see [2]), however, the complexity of given algorithms is still high. Also similar\nproblems appear with the Green function approach (see [6]) - complexity of implementation is high. Fast realtime pre-computed datadriven models of interactive physically based deformable scenes\nwere proposed also in [14]. Methods using Navier-Stokes equations\nfor Soft Bodies have been presented in [3]. The authors use NavierStokes equations for compressible fluid to compute properties of\ncompressible fluid enclosed in a mesh. The model gives good soft\nbehavior but solution speed is not efficient to achieve good results\nfor real time animation.\nIn this paper, we introduce a novel idea of using ideal gas law in\ncalculating pressure force. For pressure calculation we use a simple\nideal gas state equation. Using the ideal gas approximation results\nin fast and physically correct animations.\n\u2217 e-mail:maq@panoramix.ift.uni.wroc.pl\n\u2020 e-mail:marol@itn.liu.se\n\nFigure 1: Real time animations created using presented model.\nEach ball object contains: 320 faces (162 vertices). Both examples\nrun realtime on 800Mhz Duron processor machine (approximately\n40-50fps, depending on collision detection configuration).\n\n1.1\n\nParticle System\n\nLet us consider the governing elements of simple Spring-Mass\n(SM) model (see [4]. We will show how to expand it to simulate\na 3D soft body with deformations. A simple SM engine contains a\ncouple of obvious techniques, with the most important features to\nwork with is a simple particle system which uses simple physics\n(Newton Laws), compute forces (Gravity, Hooke's linear spring\nforce with damping) and makes numerical integration of one equation1 :\n2\n~Fi = mi * \u2202 ~ri\n(1)\n\u2202 t2\n\n2\n\nPressure Based Method for Soft Bodies\n\n2.1\n\nMethod\n\nThe method presented in this paper is a soft body model based on\nclassic cloth simulation (see [13]). Applying a wind force to cloth\nsimulation results in very nice, good looking behavior.\n1 Where\n\ni indexes particles.\n\n\fhave to multiply ~P by A[m2 ] - the area of the surface. That gives us\npressure force expression 2 :\n~P = ~P * A [N] ,\nF\n(3)\nNow we will explain how to calculate P - the pressure force\nvalue.\nFigure 2: Cloth rectangle with fixed edges.\n\n2.3\nLets say that we are presented with the situation depicted in figure (2). A cloth rectangle with fixed edges is placed, where wind,\na force vector, is normal to initial surface of rectangle. What we\nobtain from the simulation like this is deformation of cloth under\nwind force.\n\nFigure 3: Cloth deformation under wind force.\nObserving figure (3) it becomes apparent that it seems to be very\nsimilar to part of a deformed three dimensional object. Evolving the\nmodel further, we can \"close the object\" and put the \"wind source\"\nwithin it. Let us define model of shape as sketched in the figure (4).\n\nIn our model, we will use thermodynamic approximation known\nas \"Ideal Gas Approximation\" (see [5] for detailed description of\nthat approximation). We can use this approximation because our\ninterest is more in the macroscopic level effects of gas presence. At\nthis level we can assume that in an object a gas of particles without\ninteractions exist. We are only interested in the statistical properties\n(i.e. average momentum given from particles to the model surfaces\nin a specified incremental time).\nThe ideal gas approximation gives us simple relationship between pressure value, temperature of gas, and macroscopic volume\nof the body which can be expressed i.e. by the well known Clausius\nClapeyron equation:\nPV = nRT,\n(4)\nwhere P is pressure value, V is volume of the body, n is gas mol\nnumber, R is the ideal gas constant (R = Na kb , N - Avogardo number, kb - Boltzmann constants), T is a temperature. From equation\n(4) we can easy get an expression for pressure if we know values of\ntemperature and volume of the body:\nP = V \u22121 nRT,\n(5)\nIn the model presented in this paper we assume that T = const\nand only the volume of a soft body changes. Specified assumptions will give us a very clear and easy to implement algorithm of\npressure force calculation.\n\n2.4\n\nFigure 4: Triangular shape model with both solid and wireframe\nviews presented.\nNow let us imagine that we have some kind of \"wind source\" inside of that shape, which will introduce that nice deformation effect\nfrom figure (3) but in all directions. This is the basic idea of the\nimplementation in this paper.\n\n2.2\n\nThe Pressure Force\n\nThe simplest definition of pressure says that pressure is a force, acting on incremental surface elements and is parallel to normal vector\nof the surface. We would like to apply the force, which will act on\nour shape, and keep the shape geometry, but allow for possible deformations. Pressure, is a force that is always acting in a direction\nof normal vectors to the surface, so the shape will not deform significantly. So far we have only a definition of the pressure force\nvector, and we have to find some expressions for the force value.\nThe expression for pressure in a specified point in the space acting\non a surface is given by:\n\u0014 \u0015\n~P = P * n\u0302 N ,\n(2)\nm2\nwhere P is a pressure value and n\u0302 is normal vector to surface on\nwhich pressure force is acting. For calculating pressure force we\n\nIdeal Gas Approximation\n\nAlgorithm\n\nBefore we dive into implementation details we will show the general algorithm of the presented solution. It will help clarify specific problems which appear during the implementation. The algorithm is based upon an existing particle spring-mass system with\none modification - addition of a pressure force calculation. One\ncomputational step of the algorithm is as follows:\n1 Loop over all particles:\n[1.1] Calculate and accumulate gravity and spring forces\nfor all particles.\n2 Calculate volume of the soft body\n3 Loop over all faces:\n[3.1] Calculate pressure force acting on the face\n[3.1.1] Calculate field of the face\n[3.1.2] Calculate the pressure value\n[3.1.3] Loop over particles which define the face:\n[3.1.3.] Multiply result by field of the face and n\u0302\n[3.1.3.2] Accumulate finally pressure force to the particle.\n4 Integrate momentum equation\n5 Resolve collision handling and response.\n6 Move particles\n2 Where\n\n[N] means simply a force dimension.\n\n\f3\n3.1\n\nImplementation\n\n3.4\n\nCalculate volume of the soft body\n\nIn Step 2 of the presented algorithm we have to calculate volume\nof the body. In the presented solution we used a variety of bounding objects to approximate that value. The implementation is well\nsuited for non-complicated objects, and we will discuss later what\nkind of improvement can be done there. Bounding objects are a\nwell known technique to speed up collision detection systems, and\nhere we have used it to compute volumes. The type of bounding\nobject depends strongly on geometry of simulated soft body (i.e. it\nis not very good to approximate ball by simple bounding box). In\nthe model presented here we implemented three different bounding\nobjects: bounding box, bounding ball, and bounding ellipsoid.\n\nFigure 5: Three different types of bounding objects applied to the\nmodel.\nWe know calculating of volumes for bounding boxes, spheres\nand ellipsoids is fairly easy. For example, for the ellipsoid with rx ,\nry and rz radiuses we have the expression for volume:\nVel =\n\n\u0012 \u0013\n4\n* \u03c0 * rx ry rz\n3\n\n(6)\n\nWe use the term \"bounding volume\" for this technique of volume generation. Bounding volumes are not very accurate, but for\na model, only the general change of body volume is needed. Of\ncourse for the hand model presented in the figure (5) a better approximation has been made with ellipsoid, and generally the ellipsoid has the best properties and is the most usable as a bounding\nvolume.\n\n3.2\n\nFace field computation\n\nFace field computation is quite simple, especially because of triangulated objects which we use as a models in the simulator. Simple\nalgebraic vector multiplication of two edges is used here.\n\n3.3\n\nNumerical Methods\n\nIn the presented solution no special focus on numerical method has\nbeen done. We have used explicit Euler, Midpoint and RKIV integrators to integrate motion equations for every particle. It appears,\nthat best choice is to use Mid Point algorithm, since we found that\nfor some parameters configuration model is stable. All results presented have been calculated using 2nd Mid Point scheme.\n\nSummary of the implementation\n\nCalculation of the body volume is one of the most important. After\nobtaining body volume, and the face field, we are able to calculate\npressure force vector. Then basically accumulation of this force is\nperformed.3\n\n3.5\n\nCollision Detection and Response\n\nExisting techniques for collision detection and response (see [7;\n8]) for deformable objects could be applied to described model of\nsoft body simulation. For our purposes, for collision detection we\nuse simple techniques of collisions with bounding objects. It is\nbig simplification, but works very well for objects such as balls,\ncones, boxes, and other which are similar to the bounding objects.\nHowever, It is not very accurate, and future research needs to be\nperformed here. Fortunately the results are rather good with the\nsample models used here.\nThe algorithm first detects which objects in the scene can collide.\nIn the presented solution we used simple bounding boxes for first\nstep of detection of possible contact.\nThen a simple test of each point - bounding (ellipsoid/ball/box/other) object is applied. For each implicit formulation\nof bounding object, a simple value of the function is to be computed\nwith the tested point. Tests have to be done for every point of one\nsoft body with bounding objects of another soft body4 . After that, if\na point collides, we cut off d~r, the vector of movement (which obviously is to be given by the integration function to collision handling\nprocedure). We have also implemented a simple iterative procedure\nwhich corrects the particle position if a particle intersects. That procedure checks if the point is inside of bounding object of the other\nsoft body, if yes, then iteratively moves that point outside of the\nbody as long as it will be outside of that bounding object.\nWhen we recognize a collision, we implement a fairly simple\ncollision response procedure. We divide the velocity vector of the\nparticle into two velocities (parallel and tangent to collision surface)\nand we reflect the tangent part of it. Then both parts of velocity\nvector are multiplied by scalar coefficient to get effects of energy\nlost of particle during collision.\n\n4\n\nResults\n\nIn this section we present the results of the working application\nwhich was based on presented algorithm. In figures (1), (8) and\n(7) examples of working application are shown. All of these are\ntaken directly from real time working animations. In the first two\nfigures five bouncing balls with collisions, are placed in rotating\nbox. The hanging ball with different pressures is shown in the next\ntwo figures. One ball object in the simulations contains 162 vertices and 320 faces. The third example in the figure (8) is a result of\nsimulation with user interaction, where user can hit the simulated\nsoft body (a hand in this case) with the rigid ball. The hand object\ncontains \u2248370 vertices with 736 triangles implemented into existing particle spring-mass engine. The simulations were computed in\nreal time and run at (40-50 fps) on a Duron 800Mhz with RivaTNT2\ngraphics card.\nIn the figure (6) we present a plot of time needed for computation of pressure force. We prepared tests for an Athlon XP 1.8Ghz\n3 Please note that we have to apply force which is parallel to normal\nvector of the point (simple calculated by average of normal of its neighbor\nfaces) and divide by integer value equal to number of faces, which contain\nthat particle.\n4 Some tests can be done there, if checking first point-bounding box collision, then i.e. point-bounding ellipsoid is faster than checking only pointbounding ellipsoid intersection.\n\n\fTime [ms]\n\nprocessor. The sketch shows times in ms for several different number of particles in the simulation space and average - trend line. We\ndid not apply collision detection during these tests.\n\n[2] Desbrun, M. P. Cani, and A. Barr. 'Adaptive simulation of soft bodies in\nreal-time', Comp. Anim., pages 133\u2013144, May 2000\n\n5\n\n[3] Nixon, D. and Lobb, R., 'A fluid-based soft-object model',Comp. Graph.\nand App., IEEE , Vol. 22 Iss. 4, pages 68\u201375, July-Aug. 2002\n\n4\n\n[4] Witkin, A. and Baraff, D. 'An Introduction to Physically Based Modeling', SIGGRAPH Course Notes, 1993.\n\n3\n\n[5] Callen, H.B. 'Thermodynamics and an Introduction to Thermostatistics',\n2nd edition, John Wiley & Sons, New York, 1985.\n\n2\n\n[6] Doug L. James, Dinesh K. Pai, ' Multiresolution green's function methods for interactive simulation of large-scale elastostatic objects', Jan.\n2003, ACM Transactions on Graphics (TOG), Vol. 22 Iss. 1\n\n0\n0\n\n2000\n\n4000\n\n6000\n\n8000\n\nNumber of Vertices\n\nFigure 6: Time of pressure force calculation in ms in a function\nof number of vertices. Figure shows increasing of calculation cost,\nwhile number of vertices / triangles increases.\n\nConclusions and Future Work\n\nHere we have presented a model on soft bodies using pressure. The\nmost important advantages of the model is that it is fast (see figure\n6), stable and can be easily implemented. However, there is significant future work to be performed. This includes work with more\nadvanced volume calculation where we believe two methods are\nthe most interesting to pursue. This includes development of some\nkind of bounding primitive subdivision algorithm to refine the volume representation. An alternative, is to compute volumes of the\nbodies with a Monte Carlo integration procedure. However, even\nthough Monte Caro methods are accurate and converge to good results, they are rather slow and may not be suitable for real time\napplications. Future work will also include investigation into more\ncomplex objects and the suitability of this model with other forms\nof model representations such as Hypertextures.\n\n6\n\n[1] J. Teran, S. Blemker, V. Ng Thow Hing, R. Fedkiw, 'Cloth & deformable\nbodies: Finite volume methods for the simulation of skeletal muscle',\nEuro. Symp. on Comp. Anim. (SIGGRAPH Proc.), pages 68\u201374, 2003\nG. Debunne, M.\n\n6\n\n1\n\n5\n\nReferences\n\nAcknowledgements\n\nThe hand object presented in results section has been created by\nMariusz Jarosz. Authors wish to also thank Jakub Kominiarczuk\nand Marcin Wojciechowski for support of the work. We are also\ngrateful to an anonymous reviewer who motivated us to make the\npaper much better. The paper is the result of project work in the\nModeling and Animation course at Link\u00f6ping University.\n\n[7] Steve Capell, Seth Green, Brian Curless, Tom Duchamp, Zoran Popovi\u0107,\n'Collisions and deformations: A multiresolution framework for dynamic\ndeformations', Proceedings of the 2002 ACM SIGGRAPH/Eurographics\nsymposium on Computer animation, July 2002\n[8] Matthias M\u00fcller, Julie Dorsey, Leonard McMillan, Robert Jagnow, Barbara Cutler, 'Collisions and deformations: Stable real-time deformations', Proceedings of the 2002 ACM SIGGRAPH/Eurographics symposium on Computer animation, July 2002\n[9] Cotin, S. Delingette, H. Ayache, N. , 'Real-time elastic deformations of\nsoft tissues for surgery simulation ', Visualization and Computer Graphics, IEEE Transactions on , Vol. 5 Iss. 1 , Jan. - March 1999, pages 62\u201373\n[10] Balaniuk, R. Salisbury, K. , 'Dynamic simulation of deformable objects\nusing the Long Elements Method', Haptic Interfaces for Virtual Environment and Teleoperator Systems, 2002. HAPTICS 2002. Proceedings.\n10th Symposium on, 24-25 March 2002, pages 58\u201365\n[11] Costa, I.F. Balaniuk, R., 'LEM-an approach for real time physically\nbased soft tissue simulation', Robotics and Automation, 2001. Proceedings 2001 ICRA. IEEE International Conference on, Vol. 3, 2001, pages\n2337\u20132343\n[12] Sundaraj, K., Laugier, C., Costa, I.F., 'An approach to LEM modeling: construction, collision detection and dynamic simulation', ntelligent Robots and Systems, 2001. Proceedings. 2001 IEEE/RSJ International Conference on , Vol. 4, 29 Oct. - 3 Nov. 2001\n[13] Xiaoming Wei, Ye Zhao, Zhe Fan, Wei Li, Suzanne Yoakum-Stover,\nArie Kaufman, 'Natural phenomena: Blowing in the wind', Proceedings\nof the 2003 ACM SIGGRAPH/Eurographics Symposium on Computer\nAnimation, July 2003\n[14] Doug L. James, Kayvon Fatahalian, 'Precomputing interactive dynamic deformable scenes', ACM Transactions on Graphics (TOG), Vol.\n22 Iss. 3, July 2003\n[15] Ralf Rabaetje, 'Real-time simulation of deformable objects for assembly simulations', Proceedings of the Fourth Australian user interface conference on User interfaces, Vol. 18, 2003\n\n\fFigure 7: Bouncing ball with deformations. Visualization with velocity vectors for better information about physical property of moving\nobject (i.e. momentum). Frame rate: 50fps. Details: 320 faces (162 vertices).\n\nFigure 8: Hand object in gravity field with example of user interaction. Frame rate: 50fps. Details: 768 faces (386 vertices).\n\n\f"}