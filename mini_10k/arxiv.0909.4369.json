{"id": "http://arxiv.org/abs/0909.4369v1", "guidislink": true, "updated": "2009-09-24T06:01:25Z", "updated_parsed": [2009, 9, 24, 6, 1, 25, 3, 267, 0], "published": "2009-09-24T06:01:25Z", "published_parsed": [2009, 9, 24, 6, 1, 25, 3, 267, 0], "title": "Exploration of Periodically Varying Graphs", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0909.1815%2C0909.1524%2C0909.1951%2C0909.2894%2C0909.4008%2C0909.1954%2C0909.3164%2C0909.4072%2C0909.1598%2C0909.3432%2C0909.5373%2C0909.4982%2C0909.3051%2C0909.0009%2C0909.1732%2C0909.4369%2C0909.1278%2C0909.1872%2C0909.4637%2C0909.3323%2C0909.0749%2C0909.2244%2C0909.2322%2C0909.4420%2C0909.0834%2C0909.3522%2C0909.1198%2C0909.4082%2C0909.0648%2C0909.5499%2C0909.1057%2C0909.0833%2C0909.5193%2C0909.3871%2C0909.3498%2C0909.5503%2C0909.4905%2C0909.0254%2C0909.4232%2C0909.3329%2C0909.4833%2C0909.4284%2C0909.5009%2C0909.2373%2C0909.4023%2C0909.2272%2C0909.3074%2C0909.1164%2C0909.0481%2C0909.1009%2C0909.4042%2C0909.3055%2C0909.3492%2C0909.0682%2C0909.3436%2C0909.2652%2C0909.0772%2C0909.0829%2C0909.5494%2C0909.1955%2C0909.3728%2C0909.2858%2C0909.2308%2C0909.5241%2C0909.1819%2C0909.2199%2C0909.3464%2C0909.5618%2C0909.5690%2C0909.4858%2C0909.0920%2C0909.0650%2C0909.5552%2C0909.1090%2C0909.5448%2C0909.3070%2C0909.1324%2C0909.5022%2C0909.1078%2C0909.1659%2C0909.4455%2C0909.0921%2C0909.0381%2C0909.0963%2C0909.2630%2C0909.5098%2C0909.2616%2C0909.1199%2C0909.3033%2C0909.1075%2C0909.1836%2C0909.4441%2C0909.0069%2C0909.3325%2C0909.4199%2C0909.0917%2C0909.1469%2C0909.2015%2C0909.4308%2C0909.0289%2C0909.3173&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Exploration of Periodically Varying Graphs"}, "summary": "We study the computability and complexity of the exploration problem in a\nclass of highly dynamic graphs: periodically varying (PV) graphs, where the\nedges exist only at some (unknown) times defined by the periodic movements of\ncarriers. These graphs naturally model highly dynamic infrastructure-less\nnetworks such as public transports with fixed timetables, low earth orbiting\n(LEO) satellite systems, security guards' tours, etc. We establish necessary\nconditions for the problem to be solved. We also derive lower bounds on the\namount of time required in general, as well as for the PV graphs defined by\nrestricted classes of carriers movements: simple routes, and circular routes.\nWe then prove that the limitations on computability and complexity we have\nestablished are indeed tight. In fact we prove that all necessary conditions\nare also sufficient and all lower bounds on costs are tight. We do so\nconstructively presenting two worst case optimal solution algorithms, one for\nanonymous systems, and one for those with distinct nodes ids. An added benefit\nis that the algorithms are rather simple.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0909.1815%2C0909.1524%2C0909.1951%2C0909.2894%2C0909.4008%2C0909.1954%2C0909.3164%2C0909.4072%2C0909.1598%2C0909.3432%2C0909.5373%2C0909.4982%2C0909.3051%2C0909.0009%2C0909.1732%2C0909.4369%2C0909.1278%2C0909.1872%2C0909.4637%2C0909.3323%2C0909.0749%2C0909.2244%2C0909.2322%2C0909.4420%2C0909.0834%2C0909.3522%2C0909.1198%2C0909.4082%2C0909.0648%2C0909.5499%2C0909.1057%2C0909.0833%2C0909.5193%2C0909.3871%2C0909.3498%2C0909.5503%2C0909.4905%2C0909.0254%2C0909.4232%2C0909.3329%2C0909.4833%2C0909.4284%2C0909.5009%2C0909.2373%2C0909.4023%2C0909.2272%2C0909.3074%2C0909.1164%2C0909.0481%2C0909.1009%2C0909.4042%2C0909.3055%2C0909.3492%2C0909.0682%2C0909.3436%2C0909.2652%2C0909.0772%2C0909.0829%2C0909.5494%2C0909.1955%2C0909.3728%2C0909.2858%2C0909.2308%2C0909.5241%2C0909.1819%2C0909.2199%2C0909.3464%2C0909.5618%2C0909.5690%2C0909.4858%2C0909.0920%2C0909.0650%2C0909.5552%2C0909.1090%2C0909.5448%2C0909.3070%2C0909.1324%2C0909.5022%2C0909.1078%2C0909.1659%2C0909.4455%2C0909.0921%2C0909.0381%2C0909.0963%2C0909.2630%2C0909.5098%2C0909.2616%2C0909.1199%2C0909.3033%2C0909.1075%2C0909.1836%2C0909.4441%2C0909.0069%2C0909.3325%2C0909.4199%2C0909.0917%2C0909.1469%2C0909.2015%2C0909.4308%2C0909.0289%2C0909.3173&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We study the computability and complexity of the exploration problem in a\nclass of highly dynamic graphs: periodically varying (PV) graphs, where the\nedges exist only at some (unknown) times defined by the periodic movements of\ncarriers. These graphs naturally model highly dynamic infrastructure-less\nnetworks such as public transports with fixed timetables, low earth orbiting\n(LEO) satellite systems, security guards' tours, etc. We establish necessary\nconditions for the problem to be solved. We also derive lower bounds on the\namount of time required in general, as well as for the PV graphs defined by\nrestricted classes of carriers movements: simple routes, and circular routes.\nWe then prove that the limitations on computability and complexity we have\nestablished are indeed tight. In fact we prove that all necessary conditions\nare also sufficient and all lower bounds on costs are tight. We do so\nconstructively presenting two worst case optimal solution algorithms, one for\nanonymous systems, and one for those with distinct nodes ids. An added benefit\nis that the algorithms are rather simple."}, "authors": ["Paola Flocchini", "Bernard Mans", "Nicola Santoro"], "author_detail": {"name": "Nicola Santoro"}, "author": "Nicola Santoro", "arxiv_comment": "22 pages. Shorter paper (10 pages) accepted at ISAAC 2009. ISAAC'09,\n  The 20th International Symposium on Algorithms and Computation, December\n  16-18, 2008, Hawaii, USA. Exploration of Periodically Varying Graphs, P.\n  Flocchini, B. Mans and N. Santoro, Springer-LNCS vol. 5878, accepted Aug.\n  2009, Y. Dong, D.-Z. Du, and O. Ibarra (Eds), to appear", "links": [{"href": "http://arxiv.org/abs/0909.4369v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0909.4369v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0909.4369v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0909.4369v1", "journal_reference": null, "doi": null, "fulltext": "Exploration of Periodically Varying Graphs\u2217\nPaola Flocchini\u2020\n\nBernard Mans \u2021\n\nNicola Santoro \u00a7\n\narXiv:0909.4369v1 [cs.DS] 24 Sep 2009\n\nAbstract\nWe study the computability and complexity of the exploration problem in a class of highly dynamic\ngraphs: periodically varying (PV) graphs, where the edges exist only at some (unknown) times defined\nby the periodic movements of carriers. These graphs naturally model highly dynamic infrastructure-less\nnetworks such as public transports with fixed timetables, low earth orbiting (LEO) satellite systems,\nsecurity guards' tours, etc.\nWe establish necessary conditions for the problem to be solved. We also derive lower bounds on the\namount of time required in general, as well as for the PV graphs defined by restricted classes of carriers\nmovements: simple routes, and circular routes.\nWe then prove that the limitations on computability and complexity we have established are indeed\ntight. In fact we prove that all necessary conditions are also sufficient and all lower bounds on costs are\ntight. We do so constructively presenting two worst case optimal solution algorithms, one for anonymous\nsystems, and one for those with distinct nodes ids. An added benefit is that the algorithms are rather\nsimple.\n\nKeywords: time-varying graphs, exploration, dynamic networks, evolving graphs, traversal, mobile networks.\n\n1\n\nIntroduction\n\nGraph exploration is a classical fundamental problem extensively studied since its initial formulation in\n1951 by Shannon [15]. It has various applications in different areas, e.g, finding a path through a maze, or\nsearching a computer network using a mobile software agent. In these cases, the environment to be explored\nis usually modelled as a (di)graph, where a single entity (called agent or robot) starting at a node of the graph,\nhas to visit all the nodes and terminate within finite time. Different instances of the problem exist depending\non a variety of factors, including whether the nodes of the graph are labelled with unique identifiers or\nare anonymous, the amount of memory with which the exploring agent is endowed, the amount of a priori\nknowledge available about the structure of the graph (e.g., it is acyclic) etc. (e.g., see [1, 3, 4, 7, 8, 9]). In\nspite of their differences, all these investigations have something in common: they all assume that the graph\nto be explored is connected.\nThe connectivity assumption unfortunately does not hold for the new generation of networked environments that are highly dynamic and evolving in time. In these infrastructure-less networks, end-to-end\n\u2217\n\nThis work was partially supported by ARC, ANR Project SHAMAN, by COST Action 295 DYNAMO, and by NSERC.\nSITE, University of Ottawa, Ottawa, Canada. flocchin@site.uottawa.ca\n\u2021\nMacquarie University, Sydney, Australia. bmans@science.mq.edu.au\n\u00a7\nSchool of Computer Science, Carleton University, Ottawa, Canada. santoro@scs.carleton.ca\n\u2020\n\n1\n\n\fmulti-hop paths may not exist, and it is actually possible that, at every instant of time, the network is disconnected. However, communication routes may be available through time and mobility, and not only basic\ntasks like routing, but complex communication and computation services could still be performed. See in\nthis regard the ample literature (mostly from the application/engineering community) on these highly dynamic systems, variously called delay tolerant, disruption tolerant, challenged, and opportunistic networks\n(e.g., [5, 6, 10, 11, 12, 13, 14, 16, 17, 18]). Almost all the existing work in this area focuses on the routing\nproblem. In spite of the large amount of literature, no work exists on exploration of such networks, with the\nnoticeable exception of the study of exploration by random walks [2].\nThe highly dynamic features of these networks can be described by means of time-varying graphs, that\nis graphs where links between nodes exist only at some times (a priori unknown to the algorithm designer);\nthus, for example, the static graph defined by the set of edges existing at a given time might not be connected.\nOur research interest is on the deterministic exploration of time-varying graphs, on the computability and\ncomplexity aspects of this problem.\nIn this paper, we start the investigation focusing on a particular class of time-varying graphs: the periodically varying graphs (PV graphs), where the edges of the graphs are defined by the periodic movements of\nsome mobile entities, called carriers. This class models naturally infrastructure-less networks where mobile\nentities have fixed routes that they traverse regularly. Examples of such common settings are public transports with fixed timetables, low earth orbiting (LEO) satellite systems, security guards' tours, etc.; these\nnetworks have been investigated in the application/engineering community, with respect to routing and to\nthe design of carriers' routes (e.g., see [10, 13, 17]).\nWe view the system as composed of n sites and k carriers, each periodically moving among a subset of\nthe sites. The routes of the carriers define the edges of the time-varying graph: a directed edge exists from\nnode u to node v at time t only if there is a carrier that in its route moves from u to v at time t. If all routes\nhave the same period the system is called homogeneous, otherwise it is called heterogeneous. In the system\nenters an explorer agent a that can ride with any carrier along its route, and it can switch to any carrier it\nmeets while riding. Exploring a PV-graph is the process of a visiting all the nodes and exiting the system\nwithin finite time. We study the computability and the complexity of the exploration problem of PV-graphs,\nPVG-Exploration.\nWe first investigate the computability of PVG-Exploration and establish necessary conditions for the\nproblem to be solvable. We prove that in anonymous systems (i.e., the nodes have no identifiers) exploration\nis unsolvable if the agent has no knowledge of (an upper bound on) the size of the largest route; if the nodes\nhave distinct ids, we show that either n or an upper-bound on the system period must be known for the\nproblem to be solvable.\nThese necessary conditions for anonymous systems, summarized in the table below, hold even if the\nroutes are homogeneous (i.e., have the same length), the agent has unlimited memory and knows k 1 .\n\n1\n\nANONYMOUS\nKnowledge\n\nSolution\n\n(Even if)\n\n(bound on) p unknown\n(bound on) p known\n\nimpossible\npossible\n\nn, k known; homogeneous\nn, k unknown; heterogeneous\n\nif anonymous, even if they know n\n\n2\n\n\fDISTINCT IDS\nKnowledge\nn and (bound on) p unknown\nn known\n\nSolution\nimpossible\npossible\n\n(bound on) p known\n\npossible\n\n(Even if)\nk known; homogeneous\np, k unknown; heterogeneous\nO(n log n) bits\nn, k unknown; heterogeneous\nO(log p + k log k) bits\n\nWe then consider the complexity of PVG-Exploration and establish lower bounds on the number of\nmoves. We prove that in general \u03a9(kp) moves are necessary for homogeneous systems and \u03a9(kp2 ) for\nheterogeneous ones, where p is the length of the longest route. This lower bound holds even if a knows\nn, k, p, and has unlimited memory. Notice that the parameter p in the above lower bounds can be arbitrarily\nlarge since the same node can appear in a route arbitrarily many times. A natural question is whether the\nlower bounds do change imposing restrictions on the \"redundancy\" of the routes. To investigate the impact\nof the routes' structure on the complexity of the problem, we consider PV-graphs where all the routes are\nsimple, that is, do not contain self-loops nor multiple edges. We show that the same type of lower bound\nholds also for this class; in fact, we establish \u03a9(kn2 ) lower bound for homogeneous and \u03a9(kn4 ) lower\nbound for heterogeneous systems with simple routes, We then further restrict each route to be circular, that\nis an edge appears in a route at most once. Even in this case, the general lower bound holds; in fact we\nprove lower bounds of \u03a9(kn) moves for homogeneous and \u03a9(kn2 ) for heterogeneous systems with circular\nroutes. Interestingly these lower bounds hold even if a has full knowledge of the entire PV graph, and\nhas unlimited memory. We then prove that the limitations on computability and complexity established so\nfar, are indeed tight. In fact we prove that all necessary conditions are also sufficient and all lower bounds\non costs are tight. We do so constructively presenting two worst case optimal solution algorithms, one for\nanonymous systems and one for those with ids. In the case of anonymous systems, the algorithm solves\nthe problem without requiring any knowledge of n or k; in fact it only uses the necessary knowledge of an\nupper bound B \u2265 p on the size of the longest route. The number of moves is O(kB) for homogeneous\nand O(kB 2 ) for heterogeneous systems. The cost depends on the accuracy of the upperbound B on p. It is\nsufficient that the upper bound B is linear in p for the algorithm to be optimal. In the case of systems with\nids, the algorithm solves the problem without requiring any knowledge of p or k; in fact it only uses the\nnecessary knowledge of n. The number of moves is O(kp) and O(kp2 ) matching the lower bound.\n\nRoutes\nArbitrary\nSimple\nCircular\n\nSystem\nHomogeneous\n\u0398(kp)\n\u0398(kn2 )\n\u0398(kn)\n\nHeterogeneous\n\u0398(kp2 )\n\u0398(kn4 )\n\u0398(kn2 )\n\nAn added benefit is that the algorithms are rather simple and use a limited amount of memory.\nSeveral long proofs are in the Appendix.\n\n3\n\n\f2\n2.1\n\nModel and Terminology\nPeriodically Varying Graphs\n\nThe system is composed of a set S of sites; depending on whether the sites have unique ids or no identifiers,\nthe system will be said to be with ids or anonymous, respectively. In the system operates a set C of mobile\nentities called carriers moving among the sites; |C| = k \u2264 n = |S|. Each carrier c has a unique identifier\nid(c) and an ordered sequence of sites \u03c0(c) =< x0 , x1 , . . . , xp(c)\u22121 >, xi \u2208 S, called route; for any integer\nj we will denote by \u03c0(c)[j] the component xi of the route where i = j mod p(c), and p(c) will be called\nthe period of \u03c0(c). A carrier c \u2208 C moves cyclically along its route \u03c0(c): at time t, c will move from \u03c0(c)[t]\nto \u03c0(c)[t + 1] where the indices are taken modulo p(c). In the following, x0 will be called the starting site\nof c, and the set S(c) = {x0 , x1 , . . . , xp(c)\u22121 }, will be called the domain of c; clearly |S(c)| \u2264 p(c).\n~\n~\nEach route \u03c0(c) =< x0 , x1 , . . . , xp(c)\u22121 > defines a directed edge-labelled multigraph G(c)\n= (S(c), E(c)),\n~\nwhere E(c)\n= {(xi , xi+1 , i), 0 \u2264 i < p(c)} and the operations on the indices are modulo p(c). If (x, y, t\n~\nmod p(c)) \u2208 E(c),\nwe shall say that c activates the edge (x, y) at time t. A site z \u2208 S is the meeting point (or\nconnection) of carriers a and b at time t if \u03c0(a)[t] = \u03c0(b)[t] = z; that is, there exist sites x and y such that, at\ntime t\u22121, a activates the edge (x, z) and b activates the edge (y, z). A route \u03c0(c) =< x0 , x1 , . . . , xp(c)\u22121 >\n~\nis simple if G(c)\ndoes not contain self loops nor multiple edges; that is xi 6= xi+1 , for 0 \u2264 i < p(c)}, and if\n~\n~\n(x, y, i), (x, y, j) \u2208 E(c)\nthen i = j. A simple route \u03c0(c) is irredundant (or cyclic if G(c)\nis either a simple\ncycle or a virtual cycle (i.e., a simple traversal of a tree).\nWe shall denote by R = {\u03c0(c) : c \u2208 C} the set of all routes and by p(R) = Max{p(c) : c \u2208 C} the\nmaximum period of the routes in R. When no ambiguity arises, we will denote p(R) simply as p. The set\n~ R = (S, E),\n~ where E\n~ = \u222ac\u2208C E(c),\n~\nR defines a directed edge-labelled multigraph G\ncalled periodically\nvarying graph (or, shortly, PV graph).\n~ R is a (possibly infinite) ordered sequence \u03c3 =<e0 , e1 , e2 . . .>\nA concrete walk (or, simply, walk) \u03c3 in G\n~ where ei = (ai , ai+1 , i) \u2208 E(c\n~ i ) for some ci \u2208 C, 0 \u2264 i. To each route \u03c0(c) in R corresponds\nof edges in E\n~\nan infinite concrete walk \u03c3(c) in GR where ei = (\u03c0(c)[i], \u03c0(c)[i + 1], i) for i \u2265 0. A concrete walk \u03c3 is a\n~ R if it includes every site: \u222a0\u2264i\u2264|\u03c3|+1 {ai } = S.\nconcrete cover of G\n~ R starting from any carrier. R\nA set of routes R is feasible if there exists at least one concrete cover of G\nis homogeneous if all routes have the same period: \u2200a, b \u2208 C, p(a) = p(b); it is heterogeneous otherwise.\nR is simple (resp. irredundant) if every route \u03c0(c) \u2208 R is simple (resp., irredundant). With an abuse of\n~ R ; hence we will accordingly say that G\n~ R is\nnotation, the above properties of R will be used also for G\nfeasible (or homogeneous, simple, etc.).\n~ R simply as G,\n~ and\nIn the following, when no ambiguity arises, we will denote p(R) simply as p, G\n(x, y, t mod p(c)) simply as (x, y, t).\n\n2.2\n\nExploring Agent and Traversal\n\nIn the system is injected an external computational entity a called exploring agent; the agent is injected at\nthe starting site of some carrier at time t = 0. The only two operations it can perform are: move with a\ncarrier, switch carrier. Agent a can switch from carrier c to carrier c0 at site y at time t iff it is riding with c\nat time t and both c and c0 arrive at y at time t, that is: iff it is riding with c at time t and \u2203x, x0 \u2208 S such\nthat (x, y, t) \u2208 E(c) and (x0 , y, t) \u2208 E(c0 ).\n~ when at a site x at time t, a can however determine the\nAgent a does not necessarily know n, k, nor G;\nidentifier id(c) of each carrier c that arrives at x \u2208 S at time t.\n\n4\n\n\fThe goal of a is to fully explore the system within finite time, that is to visit every site and terminate,\nexiting the system, within finite time, regardless of the starting position. We will call this problem PVGExploration.\nAn exploration protocol A is an algorithm that specifies the exploring agent's actions enabling it to\n~ R ) = {\u03c0(c)[0] : c \u2208 C} be the set of\ntraverse periodically varying graphs. More precisely, let start(G\n~\nstarting sites for a periodically varying graph GR , and let C(t, x) = {\u03c0(c)[t] = x : c \u2208 C}, be the set of\n~ R ). If a is at\ncarriers that arrive at x \u2208 S at time t \u2265 0. Initially, at time t = 0, a is at a site x \u2208 start(G\nnode y at time t \u2265 0, A specifies action\u2208 C(t, x) \u222a {halt}: if action= c \u2208 C(t, x), a will move with c to\n\u03c0(c)[t + 1], traversing the edge (x, \u03c0(c)[t + 1], t) ; if action=halt, a will terminate the execution and exit\n~ R starting from injection site x uniquely defines the (possibly\nthe system. Hence the execution of A in G\ninfinite) concrete walk \u03be(x) =< e0 , e1 , e2 , * * * > of the edges traversed by a starting from x; the walk is\ninfinite if a never executes action=halt, finite otherwise.\n~ R if \u2200x \u2208start(G\n~ R ), \u03be(x) is a finite concrete cover of\nAlgorithm A solves the PVG-Exploration of G\n~ R ; that is, executing A in G\n~ R , a visits all sites of G\n~ R and performs action=halt, regardless of the injection\nG\n~\nsite x \u2208start(GR ). Clearly, we have the following property.\n~ R is possible only if R is feasible.\nProperty 2.1 PVG-Exploration of G\nHence, in the following, we will assume that R is feasible and restrict PVG-Exploration to the class of\nfeasible periodically varying graphs. We will say that problem PVG-Exploration is unsolvable (in a class\nof PV graphs) if there is no deterministic exploration algorithm that solves the problem for all feasible PV\ngraphs (in that class).\n~ R ) denote\nThe cost measure is the number of moves that the exploring agent a performs. Let M(G\nthe number of moves that need to be performed in the worst case by a to solve PVG-Exploration in fea~ R . Given a class G of feasible graphs, let M(G) be the largest M(G\n~ R ) over all G\n~ R \u2208 G; and let\nsible G\n~\nMhomo (n, k) (resp. Mhetero (n, k)) denote the largest M(GR ) in the class of all feasible homogeneous\n~ R with n sites and k carriers.\n(resp. heterogeneous) PV graphs G\n\n3\n3.1\n\nComputability and Lower Bounds\nKnowledge and Solvability\n\nThe availability of a priori knowledge by a about the system has an immediate impact on the solvability\nof the problem PVG-Exploration. Consider first anonymous systems: the sites are indistinguishable to the\nexploring agent a. In this case, the problem is unsolvable if a has no knowledge of (an upper bound on)\nthe system period.\nTheorem 3.1 Let the systems be anonymous. PVG-Exploration is unsolvable if a has no information on (an\nupper bound on) the system period. This result holds even if the systems are restricted to be homogeneous,\na has unlimited memory and knows both n and k.\nProof: By contradiction, let A solve PVG-Exploration in all anonymous feasible PV graphs without any\ninformation on (an upper bound on) the system period. Given n and k, let S = {x0 , . . . , xn\u22121 } be a set\nof n anonymous sites, and let \u03c0 be an arbitrary sequence of elements of S such that all sites are included.\n~ be the correConsider the homogeneous system where k carriers have exactly the same route \u03c0 and let G\nsponding graph. Without loss of generality, let x0 be the starting site. Consider now the execution of A by\n5\n\n\f~ starting from x0 . Since A is correct, the walk \u03be(x0 ) performed by a is a finite concrete cover; let m\na in G\nbe its length. Furthermore, since all carriers have the same route, \u03be(x0 ) is a prefix of the infinite walk \u03c3(c),\nperformed by each carrier c; more precisely it consists of the first m edges of \u03c3(c). Let ti denote the first\ntime when xi is visited in this execution; without loss of generality, let ti < ti+1 , 0 \u2264 i < n \u2212 2.\nLet \u03c0 \u2217 denote the sequence of sites in the order they are visited by a in the walk \u03be(x0 ). Let \u03b1 be the\nfirst tn\u22122 + 1 sites of \u03c0 \u2217 , and \u03b2 be the next m + 1 \u2212 (tn\u22122 + 1) sites (recall, m is the length of \u03be(x0 ) and\nthus m + 1 is that of \u03c0 \u2217 ). Let \u03b3 be the sequence obtained from \u03b2 by substituting each occurrence of xn\u22121\nwith xn\u22122 .\nConsider now the homogeneous system where all the k agents have the same route \u03c0 0 =< \u03b1, \u03b3, \u03b2 >,\n~ 0 be the corresponding graph.\nand let G\n~ 0 by a with injection site x0 results in a performing a concrete walk \u03be 0 (x0 )\nThe execution of A in G\nwhich, for the first m edges, is identical to \u03be(x0 ) except that each edge of the form (x, xn\u22121 , t) and\n(xn\u22121 , x, t) has been replaced by (x, xn\u22122 , t) and (xn\u22122 , x, t), respectively. Because of anonymity of the\nnodes, a will be unable to distinguish xn\u22121 and xn\u22122 ; furthermore, it does not know (an upper bound on)\nthe system's period). Thus a will be unable to distinguish the first m steps of the two executions; it will\n~ 0 . This means that a stops before traversing \u03b2; since xn\u22121 is neither\ntherefore stop after m moves also in G\n0\n~ 0 , contradicting the correctness of A.\nin \u03b1 nor in \u03b3, \u03be (x0 ) is finite but not a concrete cover of G\n\u0003\nIn other words, in anonymous systems, an upper bound on the system period must be available to a for the\nproblem to be solvable.\nConsider now distinct ids systems, i.e. where the sites have distinct identities accessible to a when\nvisiting them; in this case, the problem is unsolvable if a has no knowledge of neither (an upper bound on)\nthe system period nor of the number of sites.\nTheorem 3.2 Let the sites have distinct ids. PVG-Exploration is unsolvable if a has no information on\neither (an upper bound on) the system period or of the number of sites. This result holds even if the systems\nare homogeneous, and a has unlimited memory and knows k.\nProof: By contradiction, let A solve PVG-Exploration in all feasible PV graphs with distinct ids without\nany information on either (an upper bound on) the system period or on the number of sites. Let S =\n{x0 , . . . , xn\u22121 } be a set of n sites with distinct ids, and let \u03c0 be an arbitrary sequence of elements of S such\nthat all sites are included. Consider now the homogeneous system where k carriers have exactly the same\n~ be the corresponding graph. Without loss of generality, let x0 be the starting site.\nroute \u03c0 and let G\n~ starting from x0 . Since A is correct, the walk \u03be(x0 )\nConsider now the execution of A by a in G\nperformed by a is a finite concrete cover; let m be its length and let \u03c0 be the corresponding sequence\nof nodes. Furthermore, since all carriers have the same route, \u03be(x0 ) is a prefix of the infinite walk \u03c3(c),\nperformed by each carrier c; more precisely it consists of the first m edges of \u03c3(c). Consider now the\nhomogeneous system with n + 1 sites S 0 = {x0 , . . . , xn\u22121 , xn } where all the k agents have exactly the\n~ 0 be the corresponding graph. The execution of A with injection site\nsame route \u03c0 0 =< \u03c0xn >, and let G\n0\nx0 will have a perform the walk \u03be (x0 ) which, for the first m edges, is identical to \u03be(x0 ). Since a does not\nknow the number of sites, it will be unable to distinguish the change, and will therefore stop after m moves\n~ 0 . This means that a stops before visiting xn ; that is, \u03be 0 (x0 ) is finite but not a concrete cover,\nalso in G\ncontradicting the correctness of A.\n\u0003\nIn other words, when the sites have unique ids, either n or an upper-bound on the system period must be\nknown for the problem to be solvable.\n\n6\n\n\f3.2\n3.2.1\n\nLower Bounds on Number of Moves\nArbitrary Routes\n\nWe will first consider the general case, where no assumptions are made on the structure of the system routes,\nand establish lower bounds on the number of moves both in homogeneous and heterogeneous systems.\nn\nTheorem 3.3 For any n, k, p, with n \u2265 9, n3 \u2265 k \u2265 3, and p \u2265 max{k \u2212 1, d k\u22121\ne}, there exists a feasible\nn\n~\n~\nhomogeneous graph GR with n sites, k carriers and period p such that M(GR ) \u2265 (k \u2212 2)(p + 1) + b k\u22121\nc.\n~\nThis result holds even if a knows GR , k and p, and has unlimited memory.\n\nProof: Let S = {s0 , . . . , sn\u22121 } and C = {c0 , ..., ck\u22121 }. Partition the set S into k \u2212 1 subsets S0 , . . . , Sk\u22122\nn\nc for 0 \u2264 i \u2264 k \u2212 3 and Sk\u22122 containing the rest of the elements. From each set Si select a\nwith |Si | = b k\u22121\nsite xi ; let X = {x0 , . . . , xk\u22122 }. For each ci , i < k \u2212 1, construct a route \u03c0(ci ) of period p traversing Si and\nsuch that xi is visited only at time t \u2261 i mod p; this can always be done because |Si | \u2265 3, since k \u2264 n3 .\nConstruct for ck\u22121 a route \u03c0(ck\u22121 ) of period p traversing X such that it visits xi at time t \u2261 i mod p (it\nmight visit it also at other times). Thus, by construction, carriers ci and ck\u22121 have only one meeting point,\nxi , and only at time t \u2261 i mod p, while \u03c0(ci ) and \u03c0(cj ) have no meeting points at all, 0 \u2264 i 6= j \u2264 k \u2212 2.\nSee Figure 1 for an example. The agent a must hitch a ride with every ci to visit the disjoint sets Si ,\n0 \u2264 i \u2264 k \u2212 2; however, a can enter route \u03c0(ci ) only at time t \u2261 i mod p and, once it enters it, a can\nleave it only after time p, that is only after the entire route \u03c0(ci ) has been traversed. When traversing the\nn\nlast set Si , a could stop as soon as all its |Si | \u2265 b k\u22121\nc elements are visited. Additionally a must perform\nat least k \u2212 2 moves on \u03c0(ck\u22121 ) to reach each of the other routes. In other words, a must perform at least\nn\n(k \u2212 2)p + b k\u22121\nc + (k \u2212 2) moves.\n\u0003\n\nFigure 1: PV graph of Theorem 3.3 with n = 12, k = 4, p = 6.\nCosts can be significantly higher in heterogeneous systems as shown by the following:\nTheorem 3.4 For any n, k, p, with n \u2265 9, n3 \u2265 k \u2265 3, and p \u2265 max{k \u2212 1, d nk e}, there exists a feasible\n~ R with n sites, k carriers and period p such that M(G\n~ R ) \u2265 (k \u2212 2)(p \u2212 1)p +\nheterogeneous graph G\nn\u22122\n~\nb k\u22121 c \u2212 1. This result holds even if a knows GR , k and p, and has unlimited memory.\n7\n\n\fProof: Let C = {c0 , ..., ck\u22121 }. Partition the set S into k subsets S0 , . . . , Sk\u22121 with |Si | = b n\u22122\nk\u22121 c for\n1 \u2264 i \u2264 k \u2212 1 and S0 containing the rest of the elements. From each set Si (1 \u2264 i \u2264 k \u2212 1) select a site xi ;\nlet X = {x1 , . . . , xk\u22121 }. For each ci (1 \u2264 i < k \u2212 1), generate a route \u03c0(ci ) of length p traversing Si and\nsuch that xi is visited only at time t \u2261 i mod p; this can always be done because, since k \u2264 n3 , we have\n|Si | \u2265 3. Construct for c0 a route \u03c0(c0 ) of period p \u2212 1 traversing S0 \u222a X such that it visits xi \u2208 X only at\ntime t \u2261 i mod (p \u2212 1); this can always be done since |S0 | + |X| \u2265 2 + k \u2212 1 = k + 1. In other words,\nin the system there is a route of period p \u2212 1, \u03c0(c0 ), and k \u2212 1 routes of period p, \u03c0(ci ) for 0 < i < k. Let\na be at x0 at time t = 0; it must hitch a ride with every ci (0 < i < k) to traverse the disjoint sets Si ; let\nti denote the first time when a hitches a ride with ci . Since ci has connection only with c0 , to catch a ride\non ci a must be with c0 when it meets ci at xi at time ti . To move then to a different carrier cj (i, j 6= 0),\na must first return at xi and hitch a ride on c0 . Since c0 is at xi only when t \u2261 i mod (p \u2212 1) while ci is\nthere only when t \u2261 i mod p, and since p \u2212 1 and p are coprime, c0 will meet ci at time t0 > ti if and only\nif t \u2261 ti mod (p (p \u2212 1)). In other words, to move from \u03c0(ci ) to another route \u03c0(cj ) a must perform at\nleast p(p \u2212 1) moves. Since a must go on all routes, at least (k \u2212 2)p(p \u2212 1) moves must be performed until\na hitches a ride on the last carrier, say cl ; a can stop only once the last unvisited sites in \u03c0(cl ) have been\nvisited, i.e., after at least b n\u22122\nk\u22121 c \u2212 1 additional moves. Therefore the number of moves a must perform is at\nn\u22122\nleast (k \u2212 2)(p \u2212 1)p + b k\u22121 c \u2212 1, completing the proof.\n\u0003\nIn other words, by Theorems 3.3 and 3.4, without any restriction on the routes, even if the system is\nhomogeneous, a knows n, k, p, and has unlimited memory\nMhomo (n, k) = \u03a9(kp)\n\n(1)\n\nMhetero (n, k) = \u03a9(kp2 )\n\n(2)\n\nNotice that the parameter p in the above lowerbounds can be arbitrarily large; in fact a route can be\narbitrarily long even if its domain is small. This however can occur only if the carriers are allowed to go\nfrom a site x to a site y an arbitrary amount of times within the same period. Imposing restrictions on the\namount of redundancy in the route the carriers must follow will clearly have an impact on the number of\nmoves the agent needs to make.\n3.2.2\n\nSimple Routes\n\nA natural restriction is that each route is simple: the directed graph it describes does not contain self-loops\nnor multi-edges; that is, \u03c0(c)[i] 6= \u03c0(c)[i + 1] and, if \u03c0(c)[i] = \u03c0(c)[j] for 0 \u2264 i < j, then \u03c0(c)[i + 1] 6=\n\u03c0(c)[j + 1] where the operations on the indices are modulo p(c). If a route \u03c0(c) is simple, then p(c) \u2264\n~ R is not necessarily\nn(n \u2212 1). Let us stress that even if all the routes are simple, the resulting system G\nsimple.\nThe routes used in the proof of Theorems 3.3 and 3.4 were not simple. The natural question is whether\nsimplicity of the routes can lower the cost fundamentally, i.e. to o(kp) \u2286 o(kn2 ) in case of homogeneous\nsystems, and to o(kp2 ) \u2286 o(kn4 ) in the heterogeneous ones. The answer is unfortunately negative in both\ncases.\nWe will first consider the case of homogeneous systems with simple routes.\n~R\nTheorem 3.5 For any n \u2265 4 and n2 \u2265 k \u2265 2 there exists a feasible simple homogeneous PV-graph G\n~ R ) > 1 kn(n \u2212 8). This result holds even if a knows G\n~ R and k,\nwith n sites and k carriers such that M(G\n8\nand has unlimited memory.\n8\n\n\fThe proof can be found in the appendix. Let us consider now the case of heterogeneous systems with\nsimple routes.\nTheorem 3.6 For any n \u2265 36 and n6 \u2212 2 \u2265 k \u2265 4 there exists a feasible simple heterogeneous PV-graph\n~ R with n sites and k carriers such that\nG\n~ R) \u2265\nM(G\n\n1\n16 (k\n\n\u2212 3)(n2 \u2212 2n)2 .\n\n~ R and k, and has unlimited memory.\nThis result holds even if a knows G\nThe proof can be found in the appendix.\n3.2.3\n\nCircular Routes\n\nA further restriction on a route is to be irredundant (or circular): an edge appears in the route only once. In\nother words, the resulting graph is either a cycle or a virtual cycle (i.e., induced by a simple traversal of a\ntree), hence the name circular.\nBy definition, any circular route \u03c0(c) is simple. and p(c) \u2264 2(n \u2212 1). The system is irredundant if all\nthe routes are circular. Let us stress that the fact that the system is irredundant does not imply that the graph\n~ R is irredundant or even simple.\nG\n\nFigure 2: n = 8, k = 3, p = 6.\nThe graph used in the proof of Theorem 3.5 is simple but not irredundant. The natural question is\nwhether irredundancy can lower the cost fundamentally, i.e. to o(kp) \u2286 o(kn) for circular homogeneous\nsystems and to o(kp2 ) \u2286 o(kn2 ) for circular heterogeneous ones. The answer is unfortunately negative also\nin this case, as shown in the following.\nTheorem 3.7 Let the systems be homogeneous. For any n \u2265 4 and\n~ R with n sites and k carriers such that\nirredundant simple graph G\n\nn\n2\n\n\u2265 k \u2265 2 there exists a feasible\n\n~ R ) \u2265 n(k \u2212 1).\nM(G\n~ R , n and k, and has unlimited memory.\nThis result holds even if the system is homogeneous, a knows G\n9\n\n\fProof: Consider the system where S = {x0 , x1 , . . . , xn\u2212k\u22121 , y1 , y2 , . . . , yk }, C = {c1 , . . . , ck }, and the\nset of routes is defined as follows:\n\u001a\n< x0 , \u03b1(1), y1 , \u03b1(1)\u22121 >\nfor i = 1\n\u03c0(ci ) =\n< x0 , \u03b1(i), \u03b2(i), yi , \u03b2(i)\u22121 , \u03b1(i)\u22121 > for 1 < i \u2264 k\nwhere \u03b1(j) = xj , xj+1 , xj+2 , . . . , xn\u2212k\u22121 , \u03b2(j) = x1 , x2 , . . . , xj\u22121 , and \u03b1(j)\u22121 and \u03b2(j)\u22121 denote the\nreverse of \u03b1(j) and \u03b2(j), respectively. In other words, the system is composed of k circular routes of\nperiod p = 2(n \u2212 k), each with a distinguished site (the yj 's); the distinguished sites are reached by the\ncorresponding carriers simultaneously at time t \u2261 n\u2212k mod p. The other n\u2212k \u22121 sites are common to all\nroutes; however there is only a single meeting point in the system, x0 , and all carriers reach it simultaneously\nat time t \u2261 0 mod p. More precisely, for all 1 \u2264 i 6= j \u2264 k, ci and cj meet only at x0 ; this will happen\nwhenever t \u2261 0 mod p.\nLet a start at x0 at time t = 0. To visit yi , a must hitch a ride on ci ; this can happen only at x0 at time\nt \u2261 0 mod p; in other words, until all yi 's are visited, a must traverse all k routes (otherwise will not\nvisit all distinguished sites) returning to x0 ; only once the last distinguished site, say yj has been visited, a\ncan avoid returning to a0 . Each route, except the last, takes 2(n \u2212 k) moves; in the last, the agent can stop\nafter only n \u2212 k moves, for a total of 2k(n \u2212 k) \u2212 (n \u2212 k) moves. Since k \u2264 n2 , 2k(n \u2212 k) \u2212 (n \u2212 k) =\n2nk \u2212 2k 2 \u2212 n + k \u2265 (k \u2212 1) n and the Theorem follows.\n\u0003\nWe are now going to show that the cost can be order of magnitude larger if the system is not homogeneous. The proof can be found in the appendix.\nTheorem 3.8 Let the systems be heterogeneous. For any 0 < \u000f < 1,\n~ R with n sites and k carriers such that\nfeasible irredundant graph G\n~ R) >\nM(G\n\n1\n4\n\n2\n\u000f\n\n\u2264 n and 2 \u2264 k \u2264 \u000f n, there exists a\n\n(1 \u2212 \u000f)2 n2 (k \u2212 2) = \u03a9(n2 k).\n\n~ R , n and k, and has unlimited memory.\nThis result holds even if a knows G\n\n4\n\nOptimal Explorations\n\nIn this section we show that the limitations on computability and complexity presented in the previous\nsection are tight. In fact we prove that all necessary conditions are also sufficient and all lower bounds on\ncosts are tight. We do so constructively presenting worst case optimal solution algorithms. An added benefit\nis that the algorithms are rather simple.\nWe will first introduce the notion of meeting graph, that will be useful in the description and analysis of\nour exploration algorithms. We will then describe and analyze two exploration algorithms, one that does not\nrequire unique node identifiers (i.e., the PV graph could be anonymous), and one for the case when distinct\nsite ids are available.\n~ is the undirected graph H(G)\n~ = (C, E), where each node correThe meeting graph of a PV graph G\nsponds to one of the k carriers, and there is an edge between two nodes if there is at least a meeting point\nbetween the two corresponding carriers.\n\n10\n\n\f4.1\n\nExploration of Anonymous PV Graphs\n\nWe first consider the general problem of exploring any feasible periodically varying graph without making\nany assumption on the distinguishability of the nodes. By Theorem 3.1, under these conditions the problem\nis not solvable if an upper bound on the periods is not known to a (even if a has unbounded memory and\nknows n and k).\nWe now prove that, if such a bound B is known, any feasible periodically varying graph can be explored\neven if the graph is anonymous, the system is heterogeneous, the routes are arbitrary, and n and k are\nunknown to a. The proof is constructive: we present a simple and efficient exploration algorithm for those\nconditions.\nSince the PV graph is anonymous and n and k are not known, to ensure that no node is left unvisited, the\nalgorithm will have a explore all domains, according to a simple but effective strategy; the bound B will be\nused to determine termination.\nLet us now describe the algorithm, H ITCH - A - RIDE. The exploration strategy used by the algorithm is\nbest described as a pre-order traversal of a spanning-tree of the meeting graph H, where \"visiting\" a node of\nthe meeting graph H really consists of riding with the carrier corresponding to that node for B 0 time units,\nwhere B 0 = B if the set of routes is known to be homogeneous, B 0 = B 2 otherwise (the reason for this\namount will be apparent later).\nMore precisely, assume that agent a is riding with c for the first time; it will do so for B 0 time units\nkeeping track of all new carriers encountered (list Encounters). By that time, a has not only visited the\ndomain of c but, as we will show, a has encountered all carriers that can meet with c ( i.e., all the neighbours\nof c in the meeting graph H).\nAt this point a has \"visited\" c in H; it will then continue the traversal of H moving to an unvisited\nneighbour; this is done by a continuing to ride with c until a new carrier c0 is encountered; c will become\nthe \"parent\" of c0 . If all neighbours of c in H have been visited, a will return to its \"parent\" in the traversal;\nthis is done by a continuing the riding with c until its parent is encountered. The algorithm terminates when\na returns to the starting carrier and the list Encounters is empty.\nThe formal recursive description of Algorithm H ITCH - A - RIDE is given below.\nLet a start with carrier c0 .\nInitially: Home = c0 ; parent(Home) := \u2205 V isited := \u2205; Encounters := {c0 }; N (c0 ) = \u2205;\nH ITCH - A - RIDE(c)\nif c = Home and |Encounters| = \u2205 then\nTerminate\nelse\nif c \u2208\n/ V isited then\nV ISIT(c)\nend-if\nc0 \u2190 G O - TO -N EXT(c)\nH ITCH - A - RIDE(c0 )\n\n11\n\n\fV ISIT(c)\nM yP arent \u2190 parent(c); N (c) := {M yP arent}\nride with c for B 0 time units, and while riding\nif meet carrier c0 \u2208\n/ (Encounters \u2229 V isited) then\nEncounters := Encounters \u222a {c0 }\nN (c) := N (c) \u222a {c0 }\nend-if\nV isited := V isited \u222a {c}\nEncounters := Encounters \u2212 {c}\nG O - TO -N EXT(c)\nif (N (c) \u2229 Encounters) 6= \u2205 then\nContinue the ride until meet c0 \u2208 (N (c) \u2229 Encounters)\nparent-of-(c'):= c\nreturn c0\nelse\nContinue the ride until encountering M yP arent\nreturn M yP arent\nTheorem 4.1 Algorithm H ITCH - A - RIDE correctly explores any feasible PV graph in finite time provided\n(an upper bound on) the size of largest route is known.\nProof: First observe that, when executing V ISIT(c), a rides with c for B 0 time units, and by definition\nB 0 \u2265 B \u2265 p(c); thus, a would visit the entire domain of c. Next observe that, after the execution of\nV ISIT(c), N (c) contains the ids of all the carriers that have a meeting point with c. In fact, any two routes\n\u03c0(ci ) and \u03c0(cj ) that have a common meeting point will meet there every pi,j time units, where pi,j is the\nleast common multiple of p(ci ) and p(cj ). If the set of routes is known to be homogeneous, by definition\n\u2200i, j B 0 = B \u2265 pi,j = p(i) = p(j). If instead the set of routes is heterogeneous or it is homogeneous but it\nis not known to be so, by definition \u2200i, j B 0 = B 2 \u2265 p(i) \u00d7 p(j) \u2265 pi,j . Hence by riding B 0 time units with\nc, a will encounter all carriers that have a meeting point with c. In other words, after the \"visit\" of a node\nin H, a knows all its neighbours, and which ones have not yet been visited. Thus, a will correctly perform\na pre-order visit of all the nodes of the spanning tree of H rooted in c0 defined by the relation \"parent-of\".\nSince, as observed, the visit of a node in H consists of a visit of all the node in its domain, the theorem\nholds.\n\u0003\nThis proves that the necessary condition for PVG-Exploration expressed by Theorem 3.1 is also sufficient.\nLet us now consider the cost of the algorithm.\n~ is at\nTheorem 4.2 The number of moves performed by H ITCH - A - RIDE to traverse a feasible PV graph G\n0\n0\nmost (3k \u2212 2)B . where k is the number of carriers and B is the known (upperbound on the) size of the\nlargest route.\nProof: Every time routine VISIT(c) is executed, a performs B 0 moves; since a visit is performed for each\ncarrier, there will be a total of k * B 0 moves. Routine G O - TO -N EXT(c) is used to move from a carrier c to\nanother c0 having a meeting point in common. This is achieved by riding with c until c0 is met; hence its\n12\n\n\fexecution costs at most B 0 moves. The routine is executed to move from a carrier to each of its \"children\",\nas well as to return to its \"parent\" in the post-order traversal of the spanning tree of H defined by the relation\n\"parent-of\". In other words, it will be executed precisely 2(k \u2212 1) times for a total cost of at most 2(k \u2212 1)B 0\nmoves. The theorem then follows.\n\u0003\nThe efficiency of Algorithm H ITCH - A - RIDE clearly depends on the accuracy of the upperbound B on\nthe size p of the longest route in the system, as large values of B affect the number of moves linearly in\nthe case of homogeneous systems, and quadratically in the case of heterogeneous system. However, it is\nsufficient that the upperbound is linear in p for the algorithm to be optimal. In fact, from Theorem 4.2 and\nfrom the lowerbounds of Theorems 3.3-3.8 we have:\nTheorem 4.3 Let B = O(p); then Algorithm H ITCH - A - RIDE is worst-case optimal with respect to the\namount of moves. This optimality holds even if (unknowingly) restricted to the class of feasible PV graphs\nwith ids, and even if the class is further restricted to be simple or circular (anonymous or not).\nIt is interesting to note that the amount of memory used by the algorithm is relatively small: O(k log k)\nbits are used to keep track of all the carriers and O(log B) bits to count up to B 2 , for a total of O(log B +\nk log k) bits.\n\n4.2\n\nNon-Anonymous Systems\n\nWe now consider the case when the nodes have distinct Ids. By Theorem 3.2, under these conditions, either\nn or an upperbound on the system period must be available for the exploration to be possible.\nIf an upperbound on the system period is available, the algorithm presented in the previous section\nwould already solve the problem; furthermore, by Theorem 4.3, it would do so optimally. Thus, we need to\nconsider only the situation when no upperbound on the system period is available, and just n is known.\nThe exploration strategy we propose is based on a post-order traversal of a spanning-tree of the meeting\ngraph H, where \"visiting\" a node c of the meeting graph H now consists of riding with c for an amount of\ntime large enough (1) to visit all the nodes in its domain, and (2) to meet every carrier that has a meeting\npoint in common with c. In the current setting, unlike the one considered previously, an upper bound on the\nsize of the domains is not available, making the correct termination of a visit problematic. To overcome this\nproblem, the agent will perform a sequence of guesses on the largest period p, each followed by a verification\n(i.e., a traversal). If the verification fails, a new (larger) guess is made and a new traversal is started. The\nprocess continues until n nodes are visited, a detectable situation since nodes have ids.\nLet us describe the strategy more precisely. Call a guess g ample if g \u2265 P , where P = p if the graph\nis (known to be) homogeneous, P = p2 otherwise. To explain how the process works, assume first that a\nstarts the exploration riding with c0 with an ample guess g. The algorithm would work as follows. When\na is riding with a carrier c for the first time, it will ride (keeping track of all visited nodes) until either it\nencounters a new carrier c0 or it has made g moves. In the first case, c becomes its \"parent\" and a starts\nriding with c0 . In the latter, a has \"visited\" c, and will returns to its parent. Termination occurs when a\nhas visited n distinct nodes. With a reasonings similar to that used for the algorithm of Section 4.1, it is not\ndifficult to see that this strategy will allow a to correctly explore the graph.\nObserve that this strategy might work even if g is not ample, since termination occurs once a detects\nthat all n nodes have been visited, and this might happen before all nodes of H have been visited. On the\nother hand, if the (current) guess is not ample, then the above exploration strategy might not result in a full\ntraversal, and thus a might not visit all the nodes.\n\n13\n\n\fNot knowing whether the current guess gi is sufficient, a proceeds as follows: it attempts to explore\nfollowing the post-order traversal strategy indicated above, but at the first indication that the guess is not\nlarge enough, it starts a new traversal using the current carrier with a new guess gi+1 > gi . We have three\nsituations when the guess is discovered to be not ample. (1) while returning to its parent, a encounters a\nnew carrier (the route is longer than gi ); (2) while returning to its parent, more than gi time units elapse (the\nroute is longer than gi ); (3) the traversal terminates at the starting carrier, but the number of visited nodes is\nsmaller than n. In these cases the guess is doubled and a new traversal is started. Whenever a new traversal\nis started, all variables are reset except for the set V isited containing the already visited nodes.\nThe formal recursive description of Algorithm H ITCH - A - GUESSING - RIDE is given below.\nInitially: Home = c0 ; parent(Home) := V isited := \u2205 Encountered := {c0 }.\nH ITCH - A - GUESSING - RIDE(c)\nif |V isited| = n then\nTerminate\nelse\nc0 \u2190 G O - TO -N EXT(c)\nH ITCH - A - GUESSING - RIDE(c0 )\nG O - TO -N EXT(c) (* returns new carrier or parent *)\nM yP arent \u2190 parent(c);\nride with c for gi time units, and while riding\nlet x be the current node, V isited := V isited \u222a x\nif meet carrier c0 \u2208\n/ (Encountered) then\nEncountered := Encountered \u222a {c0 }\nparent(c'):=c\nReturn(c')\nend-of-ride\nif (c = Home) then\nif (|V isited| =\n6 n) then\nR ESTART(c)\nelse\nTerminate\nelse\nc0 \u2190BACKTRACK(c)\nReturn(c')\nBACKTRACK(c) (* backtrack unless discover guess is wrong *)\nride with c until meet M yparent\nlet x be the current node, V isited := V isited \u222a x\nif while riding (encounter c0 \u2208\n/ Encountered) or (gi units elapse)\nR ESTART(c)\nend-of-ride\nreturn M yP arent\n14\n\n\fR ESTART(c) (* reset variables except for V isited *)\nguess := 2 * guess (** new guess**)\nHome := c; parent(Home) := \u2205\nEncountered := {c}\nH ITCH - A - GUESSING - RIDE(c)\nTheorem 4.4 Algorithm H ITCH - A - GUESSING - RIDE correctly explores any feasible PV graph with ids in\nfinite time provided the number of nodes is known.\nProof: Consider the case when a starts the algorithm from carrier c0 with an ample guess g. First observe\nthat, when executing G O - TO - NEXT(c), a either encounters a new carrier and hitches a ride with it, or it\ntraverses the entire domain of c (because it rides with it for g \u2265 p(c) time units) before returning to its\n\"parent\". Moreover, while traversing c, it does encounter all the carrier it can possibly meet. In fact, any two\nroutes \u03c0(ci ) and \u03c0(cj ) that have a common meeting point, will meet there every pi,j time units, where pi,j is\nthe least common multiple of p(ci ) and p(cj ). If the set of routes is known to be homogeneous, by definition\n\u2200i, j g \u2265 pi,j = p(i) = p(j). If instead the set of routes is heterogeneous or it is homogeneous but it is\nnot known to be so, by definition \u2200i, j g \u2265 p(i) \u00d7 p(j) \u2265 pi,j . Hence by riding g time units with c, a will\nencounter all carriers that have a meeting point with c. In other words, when executing G O - TO - NEXT(c), if\na does not find new carriers it \"visits\" a node in H, and all its neighbours but its parent have been visited.\nThus, a will correctly perform a post-order visit of all the nodes of a spanning tree of H rooted in c0 . Since,\nas observed, the visit of a node in H consists in a visit of all the node in its domain, the Lemma holds.\nLet the current guess gi be not ample. This fact could be detected by a because while returning to the\nparent, a encounters a new carrier or gi time units elapse without encountering the parent. If this is the case,\na will start a new traversal with the larger guess gi+1 . Otherwise, a will returns to its starting carrier c and\ncomplete its \"visit\" of c. At this time, if all nodes have been visited, a will terminate (even if the guess is\nnot ample); otherwise, a new traversal with the larger guess gi+1 is started. That is, if gi is not ample and\nthere are still unvisited nodes, a will start with a larger guess. Since guesses are doubled at each restart,\nafter at most log P traversals, the guess will be ample.\n\u0003\nThis theorem, together with Theorem 4.1, proves that the necessary condition for PVG-Exploration expressed by Theorem 3.2 is also sufficient.\nLet us now consider the cost of the algorithm.\nTheorem 4.5 The number of moves performed by Algorithm H ITCH - A - GUESSING - RIDE to traverse a fea~ is O(k * P ).\nsible PV graph G\nProof: First note that the worst case occurs when the algorithm terminates with an ample guess g. Let\nus consider such a case. Let g0 , g1 , . . . , gm = g be the sequence of guesses leading to g and consider the\nnumber of moves performed the first time a uses an ample guess.\nEvery time routine G O - TO -N EXT(c) is executed a incurs in at most gi moves. Routine G O - TO - NEXT(c)\neither returns a new carrier (at most k times) or a \"parent\" domain through routine BACKTRACK(c) (again\nat most k times). Routine BACKTRACK(c) spends at most gi moves every time it is called and it is called\nfor each backtrack (at most k times). So the overall move complexity is 3gi * k. Let g0 , g1 , . . . , gm be the\nsequence of guesses performed by the algorithm. Since the Algorithm correctly terminates if a guess is\nample, only gmP\ncan be ample; that is gm\u22121 < P \u2264 gm . Since gi = 2gi\u22121 , then the total number of moves\nwill be at most m\ni=0 3kgi < 6kgm = O(k * P ).\n\u0003\n15\n\n\fTheorem 4.6 Let B = O(p); then Algorithm H ITCH - A - RIDE is worst-case optimal with respect to the\namount of moves. This optimality holds even if (unknowingly) restricted to the class of simple feasible PV\ngraphs with ids, and even if the the graphs in the class are further restricted to be circular.\nThe proof follows from Theorem 4.5 and from the lowerbounds of Theorems 3.3-3.8.\nFinally, notice that the amount of memory used by the algorithm is rather small: O(n log n) bits to keep\ntrack of all the visited nodes.\nAcknowledgments. We would like to thank David Ilcinkas for the helpful comments.\n\nReferences\n[1] S. Albers and M. R. Henzinger, \"Exploring unknown environments\", SIAM Journal on Computing, vol.\n29, 1164-1188, 2000.\n[2] C. Avin, M. Koucky and Z. Lotker \"How to explore a fast-changing world (cover time of a simple\nrandom walk on evolving graphs)\", Proc. 35th International Colloquium on Automata, Languages and\nProgramming (ICALP), 121-132, 2008.\n[3] B. Awerbuch, M. Betke, and M. Singh \"Piecemeal graph learning by a mobile robot\", Information and\nComputation, vol. 152, 155\u2013172, 1999.\n[4] M. A. Bender, A. Fern\u00e1ndez, D. Ron, A. Sahai, and S. P. Vadhan. The power of a pebble: Exploring\nand mapping directed graphs. Information and Computation, 176(1):1\u201321, 2002.\n[5] B. Bui Xuan, A. Ferreira, and A. Jarry, \"Computing shortest, fastest, and foremost journeys in dynamic\nnetworks\", Int. Journal of Foundat. of Comp. Science 14(2), 267-285, 2003.\n[6] J. Burgess, B. Gallagher, D. Jensen, and B. N. Levine, \"MaxProp: Routing for vehicle-based disruptiontolerant networks\", Proc. IEEE INFOCOM, 2006.\n[7] R. Cohen, P. Fraigniaud, D. Ilcinkas, A. Korman, and David Peleg \" Label-guided graph exploration by\na finite automaton\", ACM Transactions on Algorithms 4(4), 2008.\n[8] X. Deng and C. H. Papadimitriou. Exploring an unknown graph. J. Graph Theory 32 (3): 265\u2013297,\n1999.\n[9] A. Dessmark, A. Pelc, \"Optimal graph exploration without good maps\", Theoretical Computer Science\n326, 343-362, 2004.\n[10] S. Guo, S. Keshav, \" Fair and efficient scheduling in data ferrying networks \". Proc. of ACM Int. Conf.\non Emerging Networking Experiments And Technologies, paper 13, 2007.\n[11] P. Jacquet, B. Mans and G. Rodolakis, \"Information propagation speed in mobile and delay tolerant\nnetworks\". IEEE INFOCOM, 244-252, 2009.\n[12] S. Jain, K. Fall, R. Patra, \"Routing in a delay tolerant network\". Proc. ACM SIGCOM, 145-158, 2004.\n[13] C. Liu and J. Wu, \"Scalable Routing in Cyclic Mobile Networks\", IEEE Transactions on Parallel and\nDistributed Systems, vol. 20(9), 1325-1338, 2009.\n\n16\n\n\f[14] R. O'Dell and R. Wattenhofer, \"Information dissemination in highly dynamic graphs\" Proc. 3rd ACM\nWorkshop on Foundations of Mobile Computing (DIALM-POMC), 104-110, 2005.\n[15] CL. E. Shannon. Presentation of a maze-solving machine. In 8th Conf. of the Josiah Macy Jr. Found.\n(Cybernetics), pages 173\u2013180, 1951.\n[16] T. Spyropoulos, K. Psounis, and C. S. Raghavendra, \"Spray and wait: an efficient routing scheme\nfor intermittently connected mobile networks\", Proc. ACM SIGCOMM Workshop on delay-tolerant\nnetworking, 252-259, 2005.\n[17] X. Zhang, J. Kurose, B.N. Levine, D.Towsley, H. Zhang, \"Study of a bus-based disruption-tolerant\nnetwork: mobility modeling and impact on routing\". Proceedings of the 13th annual ACM International\nConference on Mobile Computing and Networking, 195 - 206, 2007.\n[18] Z. Zhang, \"Routing in intermittently connected mobile ad hoc networks and delay tolerant networks:\nOverview and challanges\". IEEE Communication Surveys 8, 2006.\n\n17\n\n\fAPPENDIX\nB: PROOFS OF THEOREMS AND LEMMAS\nProof: (of Theorem 3.5)\nTo prove this theorem we will first construct a system satisfying the theorem's hypothesis. Let C =\n{c1 , . . . , ck }, S = {x0 , . . . , xm\u0304\u22121 , y1 , y2 , . . . , yk , z1 , ..., zn\u0304 }, where m\u0304 = max{i < n \u2212 k: i is prime},\nand let n\u0304 = n \u2212 m\u0304 \u2212 k. Consider the set of indices \u03b9(i, j) defined as follows, where all operations are\nmodulo m\u0304: for 0 \u2264 s \u2264 m\u0304 \u2212 2, 0 \u2264 r \u2264 m\u0304 \u2212 1 and 1 \u2264 i \u2264 k\n\u03b9(i, m\u0304s + r) = i + (s + 1)r\n\n(3)\n\nFor simplicity, in the following we will denote x\u03b9(i,j) simply as x(i, j). Finally, let the set of routes be\ndefined as follows:\n\u03c0(ci ) =< \u03bc, \u03b4(i), yi >\n(4)\nwhere\n\u03bc = z1 , ..., zn\u0304\n\n(5)\n\n\u03b4(i) = x(i, 1), x(i, 2), . . . , x(i, m\u03042 \u2212 m\u0304).\n\n(6)\n\nand\nThe system SiHo so defined is clearly homogeneous,\nClaim 4.7 In SiHo, for 1 \u2264 i \u2264 k, \u03c0(ci ) is simple and p(ci ) = p = m\u03042 \u2212 m\u0304 + 1 + n\u0304.\nProof: That the value of p(ci ) is as stated follows by construction. To prove simplicity we must show\nthat each edge in the route appears only once; that is, for all 1 \u2264 i \u2264 k, 0 \u2264 t0 < t00 \u2264 p \u2212 1, if\n\u03c0(ci )[t0 ] = \u03c0(ci )[t00 ] then \u03c0(ci )[t0 + 1] 6= \u03c0(ci )[t00 + 1]. This is true by construction for t0 < n\u0304 and\nt00 \u2265 p \u2212 1; i.e., for the edges (z1 , z2 ), (z2 , z3 ), ..., (zn\u0304 , z1 ), (z1 , x(1, 1)), (x(i, p \u2212 2), yi ), (yi , z1 ). Consider\nnow the other values of t0 and t00 . Let n\u0304 \u2264 t0 = m\u0304s0 +r0 < m\u0304s00 +r00 = t00 \u2264 p\u22122 with \u03c0(ci )[t0 ] = \u03c0(ci )[t00 ];\nthat is\ni + (s0 + 1)r0 \u2261 i + (s00 + 1)r00 mod m\u0304\n(7)\nBy contradiction, let \u03c0(ci )[t0 + 1] = \u03c0(ci )[t00 + 1]; that is\ni + (s0 + 1)(r0 + 1) \u2261 i + (s00 + 1)(r00 + 1)\n\nmod m\u0304.\n\n(8)\n\nBut (7) and (8) together imply that s0 \u2261 s00 (mod m\u0304), which in turn (by (7)) implies that r0 \u2261 r00 (mod m\u0304).\nHowever, since m\u0304 is prime, this can occur only if s0 = s00 and r0 = r00 , i.e. when t0 = t00 ; a contradiction. \u0003\nClaim 4.8 In SiHo, \u2200i, j (1 \u2264 i < j \u2264 k), ci and cj meet only at the nodes of \u03bc; will happen whenever\nt \u2261 l (mod p), 0 \u2264 l \u2264 n\u0304 \u2212 1\nProof: By definition, the carriers meet at the nodes of \u03bc only at the time stated by the lemma: \u03bc is the\nfirst part of each route, and the sites in \u03bc are different from all the others. To complete the proof we\nmust show that two carriers will never meet anywhere else. Since yi is only in route \u03c0(ci ), carriers never\nmeet there. Let us consider now the xi 's. By contradiction, let \u03c0(ci )[t] = \u03c0(cl )[t] for some i, l, t where\n1 \u2264 i 6= l \u2264 k, n\u0304 \u2264 t \u2264 p \u2212 1; in other words, let x(i, t) = x(l, t). The function \u03b9, by definition, is\nsuch that \u03b9(i + 1, t) = \u03b9(i, t) + 1 mod m\u0304; since m\u0304 is prime, this means that \u03b9(i, j) 6= \u03b9(l, j) mod m\u0304\nfor 1 \u2264 i < l \u2264 k and 1 \u2264 j \u2264 p \u2212 1. Therefore \u03b9(i, t) 6= \u03b9(l, t) mod m\u0304; that is x(i, t) 6= x(l, t): a\ncontradiction.\n\u0003\ni\n\n\fBy Claims 4.7 and 4.8, the SiHo system is composed of k \u2265 2 simple routes of period p = m\u03042 \u2212 m\u0304 +\n1 \u2212 n\u0304, each with a distinguished site (the yj 's). The other n \u2212 k sites are common to all routes; however the\nonly meeting points in the system are those in \u03bc and each of them is reached by all carriers simultaneously.\nLet a start at z1 at time t = 0. Since only ci can reach yi , to visit all the distinguished sites y1 , y2 , . . . , yk ,\na must hitch a ride on all carriers. However, by Lemma 4.8 carriers only connect at the points of \u03bc, each of\nthem reached by all carriers simultaneously. Thus, to visit yi , a must hitch a ride on ci at a site in \u03bc at time\nt \u2261 f mod p for some f \u2208 {0, ..., n\u0304 \u2212 1}. After the visit, a must return to z1 , traverse all of \u03bc hitching\na ride on another carrier and follow that route until the end; only once the last distinguished site has been\nvisited, a could stop, without returning to z1 . In other words, to visit each yi (but the last), a will perform\np moves; in the visit of the last distinguished site a could stop after only p \u2212 n\u0304 moves; in other words, a\nneeds to perform at least (k \u2212 1)p + p \u2212 n\u0304 = kp \u2212 n\u0304 moves. From Lemma 4.7, it follows that\nkp \u2212 (n\u0304) = k (m\u03042 \u2212 m\u0304 + 1 + n\u0304) \u2212 n\u0304 > k (m\u03042 \u2212 m\u0304)\nObserve that, by definition of m\u0304, we have 21 (n \u2212 k \u2212 1) \u2264 m\u0304 \u2264 n \u2212 k \u2212 1; furthermore, by hypothesis\nk \u2264 n2 . Thus\nk (m\u03042 \u2212 m\u0304) \u2265 k ( 14 (n \u2212 k \u2212 1)2 \u2212 12 (n \u2212 k \u2212 1)) = 14 k(n \u2212 k)2 \u2212 k(n \u2212 k) + 43 k\n> 14 k(n \u2212 k)2 \u2212 kn \u2265 18 n2 k \u2212 kn\nand the theorem holds.\n\u0003\n\nProof: (of Theorem 3.6)\nTo prove this theorem we will first construct a system satisfying the theorem's hypothesis. Let C =\n{c0 , . . . , ck\u22121 }, m\u0304 = max{q \u2264 21 (n \u2212 3k \u2212 4) : q is prime}, and let n\u0304 = n \u2212 3k \u2212 4 \u2212 2m\u0304. Observe that,\nby definition,\nn\u0304\nm\u0304 \u2265 d e\n(9)\n2\nPartition S into six sets: U = {u1 , ..., uk\u22121 }, V = {v1 , . . . , vk\u22122 }, W = {w1 , ..., wn\u0304 }, X = {x1 , . . . , xm\u0304 },\nY = {y1 , . . . , ym\u0304 }, and Z = {z1 , ..., zk\u22121 }. Let the set of indices \u03b9(i, j) be as defined in (3); for simplicity,\nin the following we will denote x\u03b9(i,j) and y\u03b9(i,j) simply as x(i, j) and y(i, j), respectively.\nLet the routes R = {\u03c0(c0 ), ..., \u03c0(ck\u22121 )} be defined as follows:\n\u03c0(ci ) =< \u03b1(i), \u03b3(i), \u03b4(i), \u03b6(i) >\n\n(10)\n\nwhere\n\n\u001a\n\u03b1(i) =\n\nx(0, 1), x(0, 2), . . . , x(0, m\u03042 \u2212 m\u0304 \u2212 d n\u03042 e)\ny(i, 1), y(i, 2), . . . , y(i, m\u03042 \u2212 m\u0304 \u2212 b n\u03042 c \u2212 i + 1)\n\nii\n\nfor i = 0\nfor 0 < i < k\n\n\f(\n\u03b3(i) =\n\nw1 , w2 , . . . , wd n\u0304 e\n2\nwd n\u0304 e+1 , wd n\u0304 e+2 , ..., wn\u0304\n2\n\n\u001a\n\u03b4(i) =\n\n2\n\nfor i = 0\nfor 0 < i < k\n\n\u2205\ny(i, m\u03042 \u2212 m\u0304 \u2212 b n\u03042 c \u2212 i + 2), . . . , y(i, m\u03042 \u2212 m\u0304)\n\n\uf8f1\nz1 , z2 , . . . , zk\u22121\n\uf8f4\n\uf8f4\n\uf8f2\nu1 , z1 , v1 , . . . , vk\u22122\n\u03b6(i) =\nu ,v\n, . . . , vk\u22122 , zi , v1 , . . . , vk\u22122\u2212i+1\n\uf8f4\n\uf8f4\n\uf8f3 i k\u22122\u2212i+2\nuk\u22121 , v1 , . . . , vk\u22122 , zk\u22121\n\nfor i \u2264 1\nfor 1 < i < k\n\nfor i = 0\nfor i = 1\nfor 1 < i < k \u2212 1\nfor i = k \u2212 1\n\nand all operations on the indices are modulo m\u0304. The system SiHe so defined has the following properties:\nClaim 4.9 In SiHe, for 0 \u2264 i \u2264 k \u2212 1, \u03c0(ci ) is simple, and\n\u001a 2\nm\u0304 \u2212 m\u0304 + k \u2212 1 if i = 0\np(ci ) =\nm\u03042 \u2212 m\u0304 + k\nif 0 < i < k\nProof: That the value of p(ci ) is as stated follows by construction. To prove simplicity of p(ci ) we must\nshow that, for all 0 \u2264 i \u2264 k \u2212 1 and 0 \u2264 t0 < t00 \u2264 p(ci ) \u2212 1, if \u03c0(ci )[t0 ] = \u03c0(ci )[t00 ] then \u03c0(ci )[t0 + 1] 6=\n\u03c0(ci )[t00 + 1].\nThis is true if one or more of \u03c0(ci )[t0 ], \u03c0(ci )[t0 + 1], \u03c0(ci )[t00 ], \u03c0(ci )[t00 + 1] are in \u03b3(i) or \u03b6(i). In fact,\nby definition, all the sites of \u03b3(i) and \u03b6(i) (Z, half the elements of W , and if i > 0 also ui \u2208 U ) appear in\n\u03c0(ci ) without any repetition, i.e., only once.\nConsider now all the other cases. Let i, t0 , t00 ( 0 \u2264 i \u2264 k \u2212 1 and 0 \u2264 t0 < t00 < p(ci ) \u2212 2) be such that\n\u03c0(ci )[t0 ] = \u03c0(ci )[t00 ] but none of \u03c0(ci )[t0 ], \u03c0(ci )[t0 + 1], \u03c0(ci )[t00 ], \u03c0(ci )[t00 + 1] are in \u03b3(i) or in \u03b6(i). Let\nt0 = m\u0304s0 + r0 and t00 = m\u0304s00 + r00 .\nLet i > 0 (respectively, i = 0); that is, \u03c0(ci )[t0 ] = y(i, t0 ) = y\u03b9(i,t0 ) = yi+(s0 +1)r0 and \u03c0(ci )[t00 ] =\ny(i, t00 ) = y\u03b9(i,t00 ) = yi+(s00 +1)r00 (respectively, \u03c0(ci )[t0 ] = x(0, t0 ) = x\u03b9(0,t0 ) = x(s0 +1)r0 and \u03c0(ci )[t00 ] =\nx(0, t00 ) = x\u03b9(0,t000 ) = x(s00 +1)r00 ). Since \u03c0(ci )[t0 ] = \u03c0(ci )[t00 ] it follows that yi+(s0 +1)r0 = yi+(s00 +1)r00\n(respectively, x(s0 +1)r0 = x(s00 +1)r00 ); that is,\n(s0 + 1)r0 \u2261 (s00 + 1)r00\n\nmod m\u0304\n\n(11)\n\nBy contradiction, let \u03c0(ci )[t0 + 1] = \u03c0(ci )[t00 + 1]; then\n(s0 + 1)(r0 + 1) \u2261 (s00 + 1)(r00 + 1)\n\nmod m\u0304\n\n(12)\n\nBut (11) and (12) together imply that s0 \u2261 s\" (mod m\u0304), which in turn implies that r0 \u2261 r00 (mod m\u0304).\nHowever, since m\u0304 is prime, this can occur only if s0 = s00 and r0 = r00 , i.e. when t0 = t00 ; a contradiction. \u0003\nClaim 4.10 In SiHe, \u2200i, j (1 \u2264 i < j \u2264 k),\n1. ci can meet with c0 only at zi ,\niii\n\n\f2. ci and cj never meet.\nProof: First observe that (1) follows by construction, since zi is the only site in common between \u03c0(c0 ) and\n\u03c0(ci ), i > 0. To complete the proof we must show that any other two carriers, ci and cj (1 \u2264 i < j \u2264 k),\nwill never meet; that is, \u03c0(ci )[t] 6= \u03c0(ci )[t] for all 0 \u2264 t \u2264 p \u2212 1, where p = p(ci ) = p(cj ) = m\u0304(m\u0304 \u2212 1) + k\n(by Lemma 4.9).\nBy contradiction, let \u03c0(ci )[t] = \u03c0(cj )[t] = s \u2208 U \u222a V \u222a Y \u222a Z \u222a W for some t < p.\nFirst observe that, by construction, ci visits only a single distinct element of U , ui 6= uj , and only a single\nsite in Z, zi 6= zj . Thus, s \u2208\n/ U \u222a Z.\nAssume s = vl \u2208 V . By construction, \u03c0(ci )[t] = vl means that t = m\u0304(m\u0304 \u2212 1) + ((i + l) mod (k \u2212 1));\non the other hand, \u03c0(cj )[t] = vl means by construction that t = m\u0304(m\u0304 \u2212 1) + ((j + l) mod (k \u2212 1)). Thus\n(i + l) \u2261 (j + l) mod (k \u2212 1)) implying i \u2261 j mod (k \u2212 1); but since i < j \u2264 k \u2212 1 it follows that i = j,\na contradiction. Hence s \u2208\n/ V.\nAssume now s \u2208 Y . Let t = m\u0304l + r. By definition, \u03c0(ci )[t] = \u03c0(cj )[t] \u2208 Y means that y\u03b9(i,t) = y(i, t) =\n\u03c0(ci )[t] = \u03c0(cj )[t] = y(j, t) = y\u03b9(j,t) ; Thus i + (l + 1)r \u2261 j + (l + 1)r mod m\u0304, that is i \u2261 j mod m\u0304.\nThis however implies i = j since i < j < k \u2264 m\u0304: a contradiction. Therefore s \u2208\n/ Y.\nFinally, assume s = wl \u2208 W . By construction, \u03c0(ci )[t] = wl implies that t = m\u0304(m\u0304\u22121)\u2212b n\u03042 c\u2212(i\u22121)+l\u22122.\nOn the other hand, \u03c0(cj )[t] = wl implies by construction that t = m\u0304(m\u0304 \u2212 1) \u2212 b n\u03042 c \u2212 (j \u2212 1) + l \u2212 2. As a\nconsequence, \u03c0(ci )[t] = \u03c0(ci )[t] = wl implies i = j, a contradiction. Therefore s \u2208\n/ W.\nSummarizing, s \u2208\n/ U \u222a V \u222a Y \u222a Z \u222a W : a contradiction.\n\u0003\n\n~ R be the simple graph of a SiHe system with those values. By\nGiven n \u2265 36 and n6 \u2212 2 \u2265 k \u2265 4, let G\nClaims 4.9 and 4.10, in the SiHe system there is a simple route \u03c0(c0 ) of period q = m\u03042 \u2212 m\u0304 + k \u2212 1, and\nk \u2212 1 simple routes (\u03c0(ci ), 0 < i < k) of period p = q + 1. Each \u03c0(ci ) with i > 0 has a distinguished site,\nui , not present in any other route; furthermore, \u03c0(ci ) has no connection with \u03c0(cj ) for i 6= j, while it has a\nunique meeting point, zi , with \u03c0(c0 ).\nLet a start at x0 at time t = 0 with c0 . Since ui is only in route \u03c0(ci ), and all ui 's must be visited, a\nmust hitch a ride on all ci 's.\nLet ti be the first time a hitches a ride on ci at zi . Notice that once a is hitching a ride on carrier ci ,\nsince route \u03c0(ci ) has no connection with \u03c0(cj ), i 6= j > 0, to hitch a ride on cj a must first return at zi and\nhitch a ride on c0 . Since p and (p \u2212 1) are coprime, this can happen only at a time t0 > ti such that t0 \u2261 ti\nmod (qr); that is, after at least p(p \u2212 1) moves since a hitched a ride on ci .\nSince a must go on all routes (to visit the u0i s), at least (k \u2212 2)p(p \u2212 1) moves must be performed until a\nhitches a ride on the last carrier, say cl ; then, once the last distinguished site zl has been visited, after at least\np \u2212 (k \u2212 1) moves, a can stop. Hence the total number of moves is at least (k \u2212 2) p (p \u2212 1) + p \u2212 k + 1 >\n(k \u2212 3) p2 since p > k.\nRecall that m\u0304 is the largest prime number smaller than 12 (n \u2212 3k \u2212 4); since k \u2264 n6 \u2212 2, we have\nm\u0304 \u2265 14 (n \u2212 3k \u2212 4) > n2 ; thus\np = m\u03042 \u2212 m\u0304 + k >\n\nn2\n4\n\n\u2212 21 (n \u2212 3k \u2212 4) + k > 14 (n2 \u2212 2n)\n\nHence the total number of moves is more than\n(k \u2212 3) p2 >\n\n1\n16 (k\n\n\u2212 3)(n2 \u2212 2n)2 = \u03a9(kn4 )\niv\n\n\f\u0003\n\ncompleting the proof.\n\nProof: (of Theorem 3.8)\nConsider a system where S = {x0 , . . . , xq\u22122 , y1 , . . . , yr\u22121 , z1 , . . . zk\u22121 }, where r < q, and q and r are\ncoprime, C = {c0 , c1 . . . , ck\u22121 }, and the set of routes is defined as follows:\n\u001a\n< x0 , y1 , y2 , . . . , yr\u22121 > for i = 0\n\u03c0(ci ) =\n< \u03b1(i), \u03b2(i), zi >\nfor 1 \u2264 i < k\nwhere \u03b1(j) = xj , xj+1 , . . . , xq\u22122 , and \u03b2(j) = x0 , . . . , xj\u22121 . In other words, in the system there is a\nirredundant route of period r, \u03c0(c), and k \u2212 1 irredundant routes of period q, \u03c0(ci ) for 1 \u2264 i < k. Each\nof the latter has a distinguished site (the zi 's), not present in any other route; furthermore, \u03c0(ci ) has no\nconnection with \u03c0(cj ) for i 6= j. On the other hand, each route \u03c0(ci ) has the same meeting point, x0 , with\n\u03c0(c). Let ti denote the first time c and ci meet at x0 ; notice that if i 6= j then ti 6\u2261 tj mod (q). Further note\nthat since r and q are coprime, c will meet ci at time t if and only if t \u2261 ti mod (q r).\nLet a start at x0 at time t = 0 with c. Since zi is only in route \u03c0(ci ), and all zi 's must be visited, a must\nhitch a ride on all ci 's. Notice that once a is hitching a ride on carrier ci , since route \u03c0(ci ) has no connection\nwith \u03c0(cj ), i 6= j, to hitch a ride on cj a must first return at x0 and hitch a ride on c. To hitch a ride on ci ,\na must have been on c at x0 at some time t0 \u2261 ti mod (qr); hitching again a ride on c at x0 can happen\nonly at a time t0 < t00 \u2261 ti mod (qr); in other words, after at least qr moves since a hitched a ride on ci .\nOnce on c again, to hitch a ride on cj a must continue to move until it reaches x0 at time t00 < t000 \u2261 tj\nmod (qr), requiring at least r moves. In other words, to move from a route \u03c0(ci ) to a different route \u03c0(cj )\na must perform at least pr + r moves. Since a must go on all routes (to visit the yi0 s), at least (k \u2212 2)(pr + r)\nmoves must be performed until a hitches a ride on the last carrier, say cl ; then, once the last distinguished\nsite zl has been visited after q moves, a can avoid returning to a0 and stop. Since at time t=0, x is on x0 and\nno other carrier is there at that time, at least min ti + 1 \u2265 r moves are performed by a before it hitches its\nfirst ride on one of the ci 's. Hence the total number of moves is at least\n(k \u2212 2)(pr + r) + r + p\n\n(13)\n\nWe now have to show how to use this facts to prove our theorem for any n and k \u2264 \u000f n (0 < \u000f < 1).\nWe will consider two cases, depending on whether or not n \u2212 k is even. Let n \u2212 k be even; if we choose\nn\u2212k\nr = n\u2212k\n2 + 1 and q = 2 + 2, then n = k + q + r \u2212 3, and r and k are coprime; hence the total number\nof moves is that of Expression (13). Since k \u2264 \u000f n, then n \u2212 k \u2265 (1 \u2212 \u000f)n; thus\n(1\u2212\u000f)n\nn\u2212k\np r = ( n\u2212k\n+ 1)( (1\u2212\u000f)n\n+ 2)\n2 + 1)( 2 + 2) = (\n2\n2\n\nLet n \u2212 k be odd; if we choose r = n\u2212k+3\n\u2212 1 and q = n\u2212k\u22123\n+ 1, then n = k + q + r \u2212 3, and r and k are\n2\n2\ncoprime. Hence the total number of moves is that of Expression (13). Since k \u2264 \u000f n, then n \u2212 k \u2265 (1 \u2212 \u000f)n;\nit follows that\np r = ( n\u2212k+3\n\u2212 1)( n\u2212k+3\n+ 1) = ( (1\u2212\u000f)n+3\n\u2212 1)( (1\u2212\u000f)n+3\n+ 1)\n2\n2\n2\n2\nThat is, regardless of whether n \u2212 k is even or odd, p r > ( (1\u2212\u000f)n\n)2 . Hence the total number of moves is\n2\nmore than\n1\n(k \u2212 2) p r > (1 \u2212 \u000f)2 (k \u2212 2) n2 .\n(14)\n4\nand the theorem holds.\n\u0003\nv\n\n\f"}