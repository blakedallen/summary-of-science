{"id": "http://arxiv.org/abs/0803.3183v1", "guidislink": true, "updated": "2008-03-21T15:11:43Z", "updated_parsed": [2008, 3, 21, 15, 11, 43, 4, 81, 0], "published": "2008-03-21T15:11:43Z", "published_parsed": [2008, 3, 21, 15, 11, 43, 4, 81, 0], "title": "Deutsch Algorithm on Classical Circuits", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0803.4314%2C0803.0537%2C0803.1304%2C0803.0476%2C0803.0943%2C0803.0143%2C0803.2278%2C0803.3787%2C0803.3505%2C0803.1560%2C0803.0726%2C0803.3548%2C0803.3183%2C0803.1044%2C0803.3819%2C0803.2869%2C0803.3159%2C0803.1095%2C0803.4208%2C0803.0326%2C0803.1357%2C0803.2659%2C0803.1697%2C0803.1346%2C0803.0551%2C0803.2484%2C0803.4154%2C0803.1909%2C0803.2489%2C0803.0787%2C0803.1839%2C0803.0932%2C0803.1784%2C0803.3408%2C0803.1317%2C0803.1872%2C0803.3970%2C0803.1348%2C0803.0569%2C0803.4481%2C0803.2967%2C0803.3253%2C0803.3738%2C0803.2927%2C0803.3272%2C0803.2942%2C0803.3024%2C0803.0262%2C0803.4493%2C0803.0280%2C0803.1966%2C0803.1793%2C0803.1316%2C0803.0285%2C0803.2860%2C0803.0381%2C0803.1036%2C0803.1273%2C0803.0472%2C0803.0304%2C0803.3608%2C0803.2458%2C0803.4296%2C0803.3362%2C0803.0369%2C0803.1429%2C0803.4299%2C0803.4123%2C0803.0196%2C0803.3915%2C0803.3674%2C0803.4370%2C0803.1287%2C0803.4264%2C0803.0187%2C0803.3340%2C0803.3901%2C0803.3008%2C0803.4335%2C0803.2845%2C0803.0290%2C0803.3395%2C0803.0752%2C0803.0748%2C0803.1238%2C0803.2164%2C0803.3830%2C0803.2445%2C0803.3874%2C0803.2269%2C0803.2121%2C0803.3551%2C0803.3356%2C0803.3956%2C0803.0795%2C0803.3019%2C0803.0038%2C0803.3919%2C0803.4442%2C0803.1089%2C0803.2656&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Deutsch Algorithm on Classical Circuits"}, "summary": "The well-known Deutsch Algorithm (DA) and Deutsch-Jozsha Algorithm (DJA) both\nare used as an evidence to the power of quantum computers over classical\ncomputation mediums. In these theoretical experiments, it has been shown that a\nquantum computer can find the answer with certainty within a few steps although\nclassical electronic systems must evaluate more iterations than quantum\ncomputer. In this paper, it is shown that a classical computation system formed\nby using ordinary electronic parts may perform the same task with equal\nperformance than quantum computers. DA and DJA quantum circuits act like an\nanalog computer, so it is unfair to compare the bit of classical digital\ncomputers with the qubit of quantum computers. An analog signal carrying wire\nwill of course carry more information that a bit carrying wire without serial\ncommunication protocols.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0803.4314%2C0803.0537%2C0803.1304%2C0803.0476%2C0803.0943%2C0803.0143%2C0803.2278%2C0803.3787%2C0803.3505%2C0803.1560%2C0803.0726%2C0803.3548%2C0803.3183%2C0803.1044%2C0803.3819%2C0803.2869%2C0803.3159%2C0803.1095%2C0803.4208%2C0803.0326%2C0803.1357%2C0803.2659%2C0803.1697%2C0803.1346%2C0803.0551%2C0803.2484%2C0803.4154%2C0803.1909%2C0803.2489%2C0803.0787%2C0803.1839%2C0803.0932%2C0803.1784%2C0803.3408%2C0803.1317%2C0803.1872%2C0803.3970%2C0803.1348%2C0803.0569%2C0803.4481%2C0803.2967%2C0803.3253%2C0803.3738%2C0803.2927%2C0803.3272%2C0803.2942%2C0803.3024%2C0803.0262%2C0803.4493%2C0803.0280%2C0803.1966%2C0803.1793%2C0803.1316%2C0803.0285%2C0803.2860%2C0803.0381%2C0803.1036%2C0803.1273%2C0803.0472%2C0803.0304%2C0803.3608%2C0803.2458%2C0803.4296%2C0803.3362%2C0803.0369%2C0803.1429%2C0803.4299%2C0803.4123%2C0803.0196%2C0803.3915%2C0803.3674%2C0803.4370%2C0803.1287%2C0803.4264%2C0803.0187%2C0803.3340%2C0803.3901%2C0803.3008%2C0803.4335%2C0803.2845%2C0803.0290%2C0803.3395%2C0803.0752%2C0803.0748%2C0803.1238%2C0803.2164%2C0803.3830%2C0803.2445%2C0803.3874%2C0803.2269%2C0803.2121%2C0803.3551%2C0803.3356%2C0803.3956%2C0803.0795%2C0803.3019%2C0803.0038%2C0803.3919%2C0803.4442%2C0803.1089%2C0803.2656&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The well-known Deutsch Algorithm (DA) and Deutsch-Jozsha Algorithm (DJA) both\nare used as an evidence to the power of quantum computers over classical\ncomputation mediums. In these theoretical experiments, it has been shown that a\nquantum computer can find the answer with certainty within a few steps although\nclassical electronic systems must evaluate more iterations than quantum\ncomputer. In this paper, it is shown that a classical computation system formed\nby using ordinary electronic parts may perform the same task with equal\nperformance than quantum computers. DA and DJA quantum circuits act like an\nanalog computer, so it is unfair to compare the bit of classical digital\ncomputers with the qubit of quantum computers. An analog signal carrying wire\nwill of course carry more information that a bit carrying wire without serial\ncommunication protocols."}, "authors": ["Osman Kaan Erol"], "author_detail": {"name": "Osman Kaan Erol"}, "author": "Osman Kaan Erol", "arxiv_comment": "6 pages, 5 figures, 2 tables", "links": [{"href": "http://arxiv.org/abs/0803.3183v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0803.3183v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "quant-ph", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "quant-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0803.3183v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0803.3183v1", "journal_reference": null, "doi": null, "fulltext": "Deutsch Algorithm on Classical Circuits\nAssist.Prof.Dr. Osman Kaan EROL\nIstanbul Technical University, Electrical-Electronics Faculty, Computer Engineering Dept.\nIstanbul-Turkey\n\nAbstract:\nThe well-known Deutsch Algorithm (DA) and Deutsch-Jozsha Algorithm (DJA) both are\nused as an evidence to the power of quantum computers over classical computation mediums.\nIn these theoretical experiments, it has been shown that a quantum computer can find the\nanswer with certainty within a few steps although classical electronic systems must evaluate\nmore iterations than quantum computer. In this paper, it is shown that a classical computation\nsystem formed by using ordinary electronic parts may perform the same task with equal\nperformance than quantum computers. DA and DJA quantum circuits act like an analog\ncomputer, so it is unfair to compare the bit of classical digital computers with the qubit of\nquantum computers. An analog signal carrying wire will of course carry more information\nthat a bit carrying wire without serial communication protocols.\nKeywords:\nDeutsch Algorithm, Deutsch \u2013 Jozsa Algorithm, quantum computing, superposition, analogue\ncomputers\nI Deutsch Algorithm\nIn Nielsen's and Chuang's book [1], Deutsch Algorithm (DA) is considered as a challenge\nover classical computers. DA poses a challenge to determine with certainty the character of a\nlogic function f having one or more inputs and one output logic variable. For DA this function\nis assumed to give either a constant value (f(0) = f(1) = 0 or 1) or balanced output (f(0) \u2260 f(1)).\nThe challenging part of this experiment is said to lie in using only one evaluation of f. In\nclassical computing theory, it is required to perform at least two measurements for this\nexperiment to precisely make the distinction between constant or balanced type function is\nused. The possible cases for the function f are summarized in table 1.1\nTable 1.1 The three possible logic functions for Deutsch Algorithm\nFunction\nDescription\n0\nConstant output with logic level 0\n1\nConstant output with logic level 1\nBalanced\nf(0) \u2260 f(1)\nA constant output function f is easy to realise: The output is tied to ground level or logic '1'\nlevel. The input signal is discarded. In this case, the output is independent to the input.\n\n1\n\n\fA balanced type function f is easy to realise too: The input to output relation can be either to\nforward the input signal to output or forward the complement of the input signal. All 4 types\nof the possible f functions are given in table 1.2.\nTable 1.2 The four possible logic functions for Deutsch Algorithm\nFunction\nDescription\n0\nOutput = 0\n1\nOutput = 1\nBalanced \u2013 non inverting\nf(0) = 0, f(1) = 1\nBalanced - inverting\nf(0) = 1, f(1) = 0\nQuantum circuit implementation of Deutsch Algorithm is given Figure 1.1.\n\nFigure 1.1 Quantum Circuit for Deutsch Algorithm\nIn this circuit, both inputs x and y to the block Uf receive one qubit of data having a state\nneither pure state |0 nor pure state |1 but in between. This state is called \"bell-state\" and the\ncharacteristic of this state is that a qubit will generate 0 or 1 of equal probability after\nmeasurement. The final result measured at the output of the Hadamard gate at the output\nshows with certainty the nature of f(x). A 0 at the output will prove f(x) is of constant type\nwhile a 1, will show f(x) is of balanced type.\nBy using classical digital computers, to determine the nature of f, one should make two\nmeasurements: First after applying logical 0 to the input of f, then secondly, after applying\nlogical to the input of f. Finally it is easy to determine whether f is produced constant or\nbalanced output. One single measurement and hence one single evaluation of f will not give\nenough information to determine whether f is of constant or balanced type.\nBut what about analogue computers?\nII Deutsch Algorithm (DA) on analogue classical computers.\nA state \u03c8 of a qubit can be expressed as a superposition of base states [1]:\n\u2502\u03c8 = \u03b1 \u25020 + \u03b2\u25021\n\n2.1\n\nand\n\u03b12 + \u03b22 = 1\n\n2.2\n\nA representation of a single qubit is Bloch Sphere [1]. Bloch Sphere is a unit sphere due to Eq\n2.2. Here second norm of distance is used. Different types of unit spheres according the\nmetrics used are given Fig 2.1.\n\n2\n\n\fFig 2.1 Some unit spheres\n||x||1 norm will be used throughout this study to express median logic levels. For example, an\nanalogous bell state will be obtained by setting the line voltage to a level in between logic 0\nand logic 1 voltages. If 5V logic is used, then a bell state will be obtained by using 2.5 V.\nClassical logic gates have voltage transitions very fast. It is therefore difficult to obtain a\nstable median voltage level for all circuit and for every time of operation. Without giving\nsacrifice on the operation around logic levels, buffer and inverter gates will be obtained by\nusing ordinary op-amps and by setting their gain to the unity. The black box f will be\ndesigned according to the Figure 2.2:\n\nFigure 2.2 (a) A buffer circuit having transfer gain = 1\n\nFigure 2.2 (b) An inverting circuit.\n\n3\n\n\fNormally it is also possible not to use Figure 2.2 (a) and tie the output to the input. In Figure\n2.2 (b), inverting is possible if the input voltage is applied to any input of the adder and a\nconstant voltage (For 5V logic, -5V, for 3.3V logic, -3.3 V) to the other input. Here all there\nresistors are set to be equal (For example 10K).\nThe circuits given in Figure 2.2 will perform as classical logic counterparts and generate logic\nsignals conform to logic levels. The difference is that the circuit used in this study will accept\nintermediate voltage levels. Their gain is plus or minus unity. Therefore their output will\nswing freely in between logic 0 and logic 1 voltage levels. These transition voltages will be\nused to obtain a super-position of two logic states through only one wire and at the same time.\nOur goal is to determine with certainty whether this function produce a constant output or\nbalanced output by performing only one measurement.\nIf a constant output function has been chosen, then the output will be constant with voltage\nlevel conform to logic 0 or 1 (e.g. ground level or +5V). On the contrary, if a balanced\nfunction is chosen, then the output will swing from 0 to 1 or vice versa according to the logic\ninput and function type. If a voltage that puts the input in a transition state is applied, (when it\nis driven by superposed data, or 2.5V in 5V logic), then at the output an intermediate voltage\nlevel will be obtained (e.g. 2.5V). It is therefore possible to determine the nature of this blackbox (f function), by checking the voltage level at the output with only one measurement and\nonly one function evaluation.\nIII Deutsch - Jozsa Algorithm on analogue classical computers.\nDeutsch \u2013 Jozsa Algorithm (DJA) is a generalized version of the previous algorithm. In DJA,\nr\nf( x ) is an n input one output logic function. It is assumed that f generates either constant\nr\noutput for all x 's or balanced output, that is 0 for half of the possible inputs and 1 for the\nother half. Our goal is to find out which case f belongs to by performing only one\nmeasurement.\nThe quantum circuit for DJA is given below:\n\nFigure 3.1 Quantum Circuit for Deutsch - Jozsa Algorithm\nTo implement the algorithm by using an analogous classical circuit, it is required to define\nlogical AND and logical OR gates in a similar way given in Figure 2.2 (a) and (b).\n\n4\n\n\fLogic AND equivalent analog circuit can be defined as an analog multiplier circuit. The\nanalog output is the multiplication of the analog inputs. Logic 1 is assumed to be given by\nmeans of a voltage level of 1V. There many IC manufacturers to offer many versions of\nanalog multiplication circuits. Any one having a linear output response in the [0,1] V interval\ncan be used for this purpose. It is important to note that the transfer gain of the multiplier\nmust be or set to unity.\nLogic OR equivalent analog circuit is an adder circuit + an optional limiter. The analog output\nis the sum of the analog inputs upper-limited to 1V if logic 1 is assumed to be given by means\nof a voltage level of 1V. Like multiplier circuits, analog adder circuit can be composed by\nmeans of op-amps or by using any adder IC. The output limitation can be done as given in\n[2]. The multiplier circuit will not need a limiter since the output can not be higher than 1V if\nthe input voltages are within [0,1] V interval.\nBy using the inverter, logic equivalent AND and logic equivalent OR circuits, it is possible\nrealize any logic function with n inputs and one output.\nTo precisely determine the type of the function f, it is therefore required to set all the inputs to\nlogic 0.5V. any logic function can be realised by the sum of product terms or first canonical\nrepresentation such as [3-4]:\nf = x1x2x3..xn + x1'x2x3'...xn + ....\n\n(3.1)\n\nIn the example given in Eq. 3.1, no simplification are carried out that is the product terms are\ncomposed of all input variables either by direct inclusion or by their logical complement. In\nthis case, the output of the multiplier circuits taking part inside of f will drop to a voltage level\nbelow 1V according to the number of inputs. However this is predefined: If there are n inputs,\nthe output of any product term will be either 0V or\n\n1\nV\n(3.2)\n2n\nThe adder circuit must have 2n-1 inputs in order to generate a balanced output. Summing up all\nthe outputs of the multiplier circuits will therefore yield to:\n2 n\u22121\nVout = n = 0.5V\n(3.3)\n2\nAny observer having a multi-meter will precisely decide whether f has a constant output if he\nmeasures 0 or 1V, or f is balanced if he measures 0.5V with only one measurement\nVout =\n\nIV Conclusion\nA qubit is a data that can carry infinite number of information (state) in O(n3), here n denotes\nthe freedom axis in three dimensional space. A spin of a qubit can be positioned in any three\nangles, up or down (base states \u25020 and\u25021 ) being only two of them. In the presented study,\na qubit, superposed data in other terms, can carry information in O(n) since the distance\nmetric used is the norm 1. Anyway, both approaches may have infinite number of states. Both\nsignals can deliver logic 0 or logic 1 with a probability conform to their states. A qubit\n\n5\n\n\fnecessitates a quantum circuit or computer while an analogue electrical signal may be applied\nto classical analogue computer systems.\nSo for DA and DJA, a quantum computer plays a role like an analog computer, and an\nisomorphism can be shown between opamp and other analog circuits and quantum DA and\nDJA circuits.\nReferences\n[1]\nNielsen M.A, Chuang I.L. Quantum Computation and Quantum Information,\nCambridge University Press, pp.13-15, 2000\n[2]\nSilva-Martinez J., \"Adjustable CMOS Voltage Limiters for Low-Voltage\nApplications\", ISCAS'96, IEEE International Symposium on Circuits and Systems, Vol.1, pp.\n465-468, 1996.\n[3]\nMano M.M., Digital Design, 3rd Edition, Prentice-Hall, 2001\n[4]\nRoth Jr. Charles H., Fundamentals of Logic Design, Thomson/Nelson, ISBN 0-49507308-3, pp. 90-93, 2006\n\n6\n\n\f"}