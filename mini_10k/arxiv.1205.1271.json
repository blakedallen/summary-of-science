{"id": "http://arxiv.org/abs/1205.1271v3", "guidislink": true, "updated": "2014-12-02T16:15:16Z", "updated_parsed": [2014, 12, 2, 16, 15, 16, 1, 336, 0], "published": "2012-05-07T02:59:39Z", "published_parsed": [2012, 5, 7, 2, 59, 39, 0, 128, 0], "title": "Directed Subset Feedback Vertex Set is Fixed-Parameter Tractable", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1205.1365%2C1205.1811%2C1205.0884%2C1205.2215%2C1205.1620%2C1205.3957%2C1205.0935%2C1205.2082%2C1205.0830%2C1205.3820%2C1205.3646%2C1205.3723%2C1205.1271%2C1205.0062%2C1205.1043%2C1205.1682%2C1205.0090%2C1205.2210%2C1205.0523%2C1205.0002%2C1205.2559%2C1205.2007%2C1205.2064%2C1205.2764%2C1205.3188%2C1205.3815%2C1205.4227%2C1205.3661%2C1205.1079%2C1205.3804%2C1205.3409%2C1205.2711%2C1205.2361%2C1205.1512%2C1205.2895%2C1205.4366%2C1205.3806%2C1205.2633%2C1205.3488%2C1205.0230%2C1205.4316%2C1205.3506%2C1205.2135%2C1205.2585%2C1205.2915%2C1205.3746%2C1205.0597%2C1205.0171%2C1205.2181%2C1205.0781%2C1205.4473%2C1205.1089%2C1205.4124%2C1205.3178%2C1205.1740%2C1205.3268%2C1205.1489%2C1205.3224%2C1205.1660%2C1205.2976%2C1205.3897%2C1205.2117%2C1205.2013%2C1205.2524%2C1205.2794%2C1205.3559%2C1205.0321%2C1205.2036%2C1205.2207%2C1205.3929%2C1205.1067%2C1205.4265%2C1205.0582%2C1205.3193%2C1205.4291%2C1205.1957%2C1205.1680%2C1205.0500%2C1205.1968%2C1205.2661%2C1205.2326%2C1205.3443%2C1205.1705%2C1205.3707%2C1205.0530%2C1205.2872%2C1205.3507%2C1205.1638%2C1205.1467%2C1205.4301%2C1205.3041%2C1205.0678%2C1205.0707%2C1205.1343%2C1205.0343%2C1205.0832%2C1205.2550%2C1205.4442%2C1205.3222%2C1205.3348%2C1205.2972&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Directed Subset Feedback Vertex Set is Fixed-Parameter Tractable"}, "summary": "Given a graph $G$ and an integer $k$, the Feedback Vertex Set (FVS) problem\nasks if there is a vertex set $T$ of size at most $k$ that hits all cycles in\nthe graph. The fixed-parameter tractability status of FVS in directed graphs\nwas a long-standing open problem until Chen et al. (STOC '08) showed that it is\nFPT by giving a $4^{k}k!n^{O(1)}$ time algorithm. In the subset versions of\nthis problems, we are given an additional subset $S$ of vertices (resp., edges)\nand we want to hit all cycles passing through a vertex of $S$ (resp. an edge of\n$S$). Recently, the Subset Feedback Vertex Set in undirected graphs was shown\nto be FPT by Cygan et al. (ICALP '11) and independently by Kakimura et al.\n(SODA '12). We generalize the result of Chen et al. (STOC '08) by showing that\nSubset Feedback Vertex Set in directed graphs can be solved in time\n$2^{O(k^3)}n^{O(1)}$. By our result, we complete the picture for feedback\nvertex set problems and their subset versions in undirected and directed\ngraphs. Besides proving the fixed-parameter tractability of Directed Subset\nFeedback Vertex Set, we reformulate the random sampling of important separators\ntechnique in an abstract way that can be used for a general family of\ntransversal problems. Moreover, we modify the probability distribution used in\nthe technique to achieve better running time; in particular, this gives an\nimprovement from $2^{2^{O(k)}}$ to $2^{O(k^2)}$ in the parameter dependence of\nthe Directed Multiway Cut algorithm of Chitnis et al. (SODA '12).", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1205.1365%2C1205.1811%2C1205.0884%2C1205.2215%2C1205.1620%2C1205.3957%2C1205.0935%2C1205.2082%2C1205.0830%2C1205.3820%2C1205.3646%2C1205.3723%2C1205.1271%2C1205.0062%2C1205.1043%2C1205.1682%2C1205.0090%2C1205.2210%2C1205.0523%2C1205.0002%2C1205.2559%2C1205.2007%2C1205.2064%2C1205.2764%2C1205.3188%2C1205.3815%2C1205.4227%2C1205.3661%2C1205.1079%2C1205.3804%2C1205.3409%2C1205.2711%2C1205.2361%2C1205.1512%2C1205.2895%2C1205.4366%2C1205.3806%2C1205.2633%2C1205.3488%2C1205.0230%2C1205.4316%2C1205.3506%2C1205.2135%2C1205.2585%2C1205.2915%2C1205.3746%2C1205.0597%2C1205.0171%2C1205.2181%2C1205.0781%2C1205.4473%2C1205.1089%2C1205.4124%2C1205.3178%2C1205.1740%2C1205.3268%2C1205.1489%2C1205.3224%2C1205.1660%2C1205.2976%2C1205.3897%2C1205.2117%2C1205.2013%2C1205.2524%2C1205.2794%2C1205.3559%2C1205.0321%2C1205.2036%2C1205.2207%2C1205.3929%2C1205.1067%2C1205.4265%2C1205.0582%2C1205.3193%2C1205.4291%2C1205.1957%2C1205.1680%2C1205.0500%2C1205.1968%2C1205.2661%2C1205.2326%2C1205.3443%2C1205.1705%2C1205.3707%2C1205.0530%2C1205.2872%2C1205.3507%2C1205.1638%2C1205.1467%2C1205.4301%2C1205.3041%2C1205.0678%2C1205.0707%2C1205.1343%2C1205.0343%2C1205.0832%2C1205.2550%2C1205.4442%2C1205.3222%2C1205.3348%2C1205.2972&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Given a graph $G$ and an integer $k$, the Feedback Vertex Set (FVS) problem\nasks if there is a vertex set $T$ of size at most $k$ that hits all cycles in\nthe graph. The fixed-parameter tractability status of FVS in directed graphs\nwas a long-standing open problem until Chen et al. (STOC '08) showed that it is\nFPT by giving a $4^{k}k!n^{O(1)}$ time algorithm. In the subset versions of\nthis problems, we are given an additional subset $S$ of vertices (resp., edges)\nand we want to hit all cycles passing through a vertex of $S$ (resp. an edge of\n$S$). Recently, the Subset Feedback Vertex Set in undirected graphs was shown\nto be FPT by Cygan et al. (ICALP '11) and independently by Kakimura et al.\n(SODA '12). We generalize the result of Chen et al. (STOC '08) by showing that\nSubset Feedback Vertex Set in directed graphs can be solved in time\n$2^{O(k^3)}n^{O(1)}$. By our result, we complete the picture for feedback\nvertex set problems and their subset versions in undirected and directed\ngraphs. Besides proving the fixed-parameter tractability of Directed Subset\nFeedback Vertex Set, we reformulate the random sampling of important separators\ntechnique in an abstract way that can be used for a general family of\ntransversal problems. Moreover, we modify the probability distribution used in\nthe technique to achieve better running time; in particular, this gives an\nimprovement from $2^{2^{O(k)}}$ to $2^{O(k^2)}$ in the parameter dependence of\nthe Directed Multiway Cut algorithm of Chitnis et al. (SODA '12)."}, "authors": ["Rajesh Chitnis", "Marek Cygan", "MohammadTaghi Hajiaghayi", "D\u00e1niel Marx"], "author_detail": {"name": "D\u00e1niel Marx"}, "author": "D\u00e1niel Marx", "arxiv_comment": "To appear in ACM Transactions on Algorithms. A preliminary version\n  appeared in ICALP '12. We would like to thank Marcin Pilipczuk for pointing\n  out a missing case in the conference version which has been considered in\n  this version. Also, we give an single exponential FPT algorithm improving on\n  the double exponential algorithm from the conference version", "links": [{"href": "http://arxiv.org/abs/1205.1271v3", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1205.1271v3", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1205.1271v3", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1205.1271v3", "journal_reference": null, "doi": null, "fulltext": "Directed Subset Feedback Vertex Set is Fixed-Parameter Tractable\u2217\nRajesh Chitnis\u20201 , Marek Cygan\u20212 , MohammadTaghi Hajiaghayi\u00a71 and D\u00e1niel Marx\u00b63\n\narXiv:1205.1271v3 [cs.DS] 2 Dec 2014\n\n1\n\nDepartment of Computer Science, University of Maryland at College Park, USA. Email:\n{rchitnis,hajiagha}@cs.umd.edu\n2\nInstitute of Informatics, University of Warsaw, Poland. Email: cygan@mimuw.edu.pl\n3\nInstitute for Computer Science and Control, Hungarian Academy of Sciences (MTA\nSZTAKI), Budapest, Hungary. Email: dmarx@cs.bme.hu\nJune 13, 2018\n\nAbstract\nGiven a graph G and an integer k, the Feedback Vertex Set (FVS) problem asks if there\nis a vertex set T of size at most k that hits all cycles in the graph. The first fixed-parameter\nalgorithm for FVS in undirected graphs appeared in a monograph of Mehlhorn in 1984. The\nfixed-parameter tractability status of FVS in directed graphs was a long-standing open problem\nuntil Chen et al. (STOC '08, JACM '08) showed that it is fixed-parameter tractable by giving\na 4k k!nO(1) time algorithm. There are two subset versions of this problems: we are given an\nadditional subset S of vertices (resp., edges) and we want to hit all cycles passing through a\nvertex of S (resp. an edge of S); the two variants are known to be equivalent in the parameterized sense. Recently, the Subset Feedback Vertex Set problem in undirected graphs was\nshown to be FPT by Cygan et al. (ICALP '11, SIDMA '13) and independently by Kakimura\net al. (SODA '12). We generalize the result of Chen et al. (STOC '08, JACM '08) by showing\n3\nthat Subset Feedback Vertex Set in directed graphs can be solved in time 2O(k ) nO(1) ,\ni.e., FPT parameterized by size k of the solution. By our result, we complete the picture for\nfeedback vertex set problems and their subset versions in undirected and directed graphs.\nThe technique of random sampling of important separators was used by Marx and Razgon\n(STOC '11, SICOMP '14) to show that Undirected Multicut is FPT and was generalized by\nChitnis et al. (SODA '12, SICOMP '13) to directed graphs to show that Directed Multiway\nCut is FPT. Besides proving the fixed-parameter tractability of Directed Subset Feedback\nVertex Set, we reformulate the random sampling of important separators technique in an\nabstract way that can be used for a general family of transversal problems. We believe this\ngeneral approach will be useful for showing the fixed-parameter tractability of other problems\nin directed graphs. Moreover, we modify the probability distribution used in the technique to\n\u2217\n\nA preliminary version of this paper appeared in ICALP 2012 [9].\nSupported in part by NSF CAREER award 1053605, ONR YIP award N000141110662, DARPA/AFRL award\nFA8650-11-1-7162, a University of Maryland Research and Scholarship Award (RASA), a Graduate Student International Research Fellowship from the University of Maryland, ERC Starting Grant PARAMTIGHT (No. 280152) and\na Simons Award for Graduate Students in Theoretical Computer Science.\n\u2021\nSupported in part by ERC Starting Grant NEWNET 279352, NCN grant N206567140 and Foundation for Polish\nScience.\n\u00a7\nSupported in part by NSF CAREER award 1053605, ONR YIP award N000141110662, DARPA/AFRL award\nFA8650-11-1-7162, a University of Maryland Research and Scholarship Award (RASA)\n\u00b6\nSupported by ERC Starting Grant PARAMTIGHT (No. 280152) and OTKA grant NK105645.\n\u2020\n\n1\n\n\fO(k)\n\n2\n\nachieve better running time; in particular, this gives an improvement from 22\nto 2O(k ) in the\nparameter dependence of the Directed Multiway Cut algorithm of Chitnis et al. (SODA\n'12, SICOMP '13).\n\n1\n\nIntroduction\n\nThe Feedback Vertex Set (FVS) problem has been one of the most extensively studied problems\nin the parameterized complexity community. Given a graph G and an integer k, it asks if there is\na set T \u2286 V (G) of size at most k which hits all cycles in G. The FVS problem in both undirected\nand directed graphs was shown to be NP-hard by Karp [27]. A generalization of the FVS problem\nis Subset Feedback Vertex Set (SFVS): given a subset S \u2286 V (G) (resp., S \u2286 E(G)), find a\nset T \u2286 V (G) of size at most k such that T hits all cycles passing through a vertex of S (resp., an\nedge of S). It is easy to see that S = V (G) (resp., S = E(G)) gives the FVS problem.\nAs compared to undirected graphs, FVS behaves quite differently on directed graphs. In particular the trick of replacing each edge of an undirected graph G by arcs in both directions does\nnot work: every feedback vertex set of the resulting digraph is a vertex cover of G and vice\nversa. Any other simple transformation does not seem possible either and thus the directed and\nundirected versions are very different problems. This is reflected in the best known approximation ratio for the directed versions as compared to the undirected problems: FVS in undirected\ngraphs has an 2-approximation [1] while FVS in directed graphs has an O(log |V (G)| log log |V (G)|)approximation [19, 44]. The more general SFVS problem in undirected graphs has an 8-approximation\n[20] while the best-known approximation ratio in directed graphs is O(min{log |V (G)| log log |V (G)|,\nlog2 |S|}) [19].\nRather than finding approximate solutions in polynomial time, one can look for exact solutions\nin time that is superpolynomial, but still better than the running time obtained by brute force solutions. In both the directed and the undirected versions of the feedback vertex set problems, brute\nforce can be used to check in time nO(k) if a solution of size at most k exists: one can go through\nall sets of size at most k. Thus the problem can be solved in polynomial time if the optimum is\nassumed to be small. In the undirected case, we can do significantly better: since the first FPT\nalgorithm for FVS in undirected graphs by Mehlhorn [36] almost 30 years ago, there have been a\nnumber of papers [2, 3, 5, 6, 16, 17, 23, 26, 39, 40] giving faster algorithms and the current fastest\n(randomized) algorithm runs in time O\u2217 (3k ) [13] (the O\u2217 notation hides all factors that are polynomial in the size of input). That is, undirected FVS is fixed-parameter tractable parameterized by\nthe size of the solution. Recall that a problem is fixed-parameter tractable (FPT) with a particular\nparameter k if it can be solved in time f (k)nO(1) , where f is an arbitrary function depending only\non k; see [18, 21, 38] for more background. For digraphs, the fixed-parameter tractability status of\nFVS was a long-standing open problem (almost 16 years) until Chen et al. [8] resolved it by giving\nan O\u2217 (4k k!) algorithm. This was recently generalized by Bonsma and Lokshtanov [4] who gave a\nO\u2217 (47.5k k!) algorithm for FVS in mixed graphs, i.e., graphs having both directed and undirected\nedges.\nIn the more general Subset Feedback Vertex Set problem, an additional subset S of\nvertices is given and we want to find a set T \u2286 V (G) of size at most k that hits all cycles passing\nthrough a vertex of S. In the edge version, we are given a subset S \u2286 E(G) and we want to hit\nall cycles passing through an edge of S. The vertex and edge versions are indeed known to be\nequivalent in the parameterized sense in both undirected and directed graphs. Recently, Cygan et\nal. [15] and independently Kakimura et al. [25] have shown that Subset Feedback Vertex Set in\nundirected graphs is FPT parameterized by the size of the solution. Our main result is that Subset\n\n2\n\n\fFeedback Vertex Set in directed graphs is also fixed-parameter tractable parameterized by the\nsize of the solution:\nTheorem 1.1. (main result) Subset Feedback Vertex Set ( Subset-DFVS) in directed\n3\ngraphs can be solved in time O\u2217 (2O(k ) ).\nOur techniques. As a first step, we use the standard technique of iterative compression\n[43] to argue that it is sufficient to solve the compression version of Subset-DFVS, where we\nassume that a solution T of size k + 1 is given in the input and we have to find a solution of\nsize k. Our algorithm for the compression problem uses the technique of \"random sampling of\nimportant separators,\" which was introduced by Marx and Razgon [35] for undirected Multicut\nand generalized to directed graphs by Chitnis et al. [11] to handle Directed Multiway Cut.\nWe contribute two improvements to this technique on directed graphs. First, we abstract out a\nframework that allows the clean and immediate application of this technique for various problems.\nSecond, we modify the random selection process to improve the probability of success. In particular,\nplugging in this improved result to the Directed Multiway Cut algorithm of Chitnis et al. [11],\nk\n2\nthe running time decreases from O\u2217 (22 ) to O\u2217 (2O(k ) ) thus giving an exponential improvement.\n2\n\nTheorem 1.2. Directed Multiway Cut can be solved in time O\u2217 (2O(k ) ), where k is the number\nof vertices to be deleted.\nOur generic framework can be used for the following general family of problems. Let F =\n{F1 , F2 , . . . , Fq } be a set of subgraphs of a graph G. An F-transversal is a set of vertices that\nintersects every Fi . We consider problems that can be formulated as finding an F-traversal. In\nparticular, we will investigate F-transversal problems satisfying the following property: we say\nthat F is T -connected if for every i \u2208 [q], each vertex of Fi can reach some vertex of T by a walk\ncompletely contained in Fi and is reachable from some vertex of T by a walk completely contained\nin Fi .\nF-transversal for T -connected F\nInput: A directed graph G, a positive integer k, and a set T \u2286 V (G).\nParameter : k\nQuestion: Does there exist an F-transversal W \u2286 V (G) with |W | \u2264 k, i.e., a set W such\nthat Fi \u2229 W 6= \u2205 for every i \u2208 [q]?\nWe emphasize here that the collection F is implicitly defined in a problem specific-way and we do\nnot assume that it is given explicitly in the input, in fact, it is possible that F is exponentially\nlarge. For example, in the Directed Multiway Cut problem we take T as the set of terminals\nand F as the set of all walks between different terminals; note that F is clearly T -connected. In\nthe compression version of Subset-DFVS, we take T as the solution that we want to compress\nand F as the set of all cycles containing a vertex of S; again, F is T -connected, since if T is a\nsolution, then every cycle containing a vertex of S goes through T .\nWe define the \"shadow\" of a solution X as those vertices that are disconnected from T (in either\ndirection) after the removal of X. A common idea in [35, 11] is to ensure first that there is a solution\nwhose shadow is empty, as finding such a shadowless solution can be a significantly easier task.\nOur generic framework shows that for the F-transversal problems defined above, we can invoke\nthe random sampling of important separators technique and obtain a set which is disjoint from a\nminimum solution and covers its shadow. What we do with this set, however, is problem specific.\nTypically, given such a set, we can use (some problem-specific variant of) the \"torso operation\" to\nfind an equivalent instance that has a shadowless solution. Therefore, we can focus on the simpler\n3\n\n\ftask of finding a shadowless solution; or more precisely, finding any solution under the guarantee\nthat a shadowless solution exists. We believe our framework will provide a useful opening step in\nthe design of FPT algorithms for other transversal and cut problems on directed graphs.\nIn the case of undirected Multicut [35], if there was a shadowless solution, then the problem\ncould be reduced to an FPT problem called Almost 2SAT [32, 42]. In the case of Directed\nMultiway Cut [11], if there was a solution whose shadow is empty, then the problem could be\nreduced to the undirected version, which was known to be FPT [7, 14, 34]. For Subset-DFVS, the\nsituation turns out to be a bit more complicated. As mentioned above, we first use the technique\nof iterative compression to reduce the problem to an instance where we are given a solution T and\nwe want to find a disjoint solution of size at most k. We define the \"shadows\" with respect to the\nsolution T that we want to compress, whereas in [11], the shadows were defined with respect to\nthe terminal set T . The \"torso\" operation we define in this paper is specific to the Subset-DFVS\nproblem, as it takes into account the set S and modifies it accordingly. Furthermore, even after\nensuring that there is a solution T 0 whose shadow is empty, we are not done unlike in [11]. We\nthen analyze the structure of the graph G \\ T 0 and focus on the last strongly connected component\nin the topological ordering of this graph, i.e., the strongly connected component which can only\nhave incoming edges from other strongly connected components. We would like to find the subset\nof T 0 that separates this component from the rest of the graph. In most cases, a pushing argument\ncan be used to argue that this subset of T 0 is an important separator, and hence we can branch\non removing an important separator from the graph. However, due to the way the set S interacts\nwith the solution T 0 , there is a small number of vertices that behave in a special way. We need\nsurprisingly complex arguments to handle these special vertices.\nThe paper is organized as follows. Section 2 introduces notation and the preliminary steps of\nthe algorithm, including iterative compression. Section 3 presents the general result on covering\nshadows of F-transversals. The remaining sections are specific to the Subset-DFVS problem:\nthey discuss how to use the techniques of Section 3 to reduce the problem to instances where\nthe existence of shadowless solutions is guaranteed (Section 4) and how to find a solution under\nthe guarantee that a shadowless solution exists (Section 5); the full algorithm is summarized in\nSection 6. Finally Section 7 concludes the paper.\n\n2\n\nPreliminaries\n\nObserve that a directed graph contains no cycles if and only if it contains no closed walks; moreover,\nthere is a cycle going through S if and only there is a closed walk going through S. For this reason,\nthroughout the paper we use the term closed walks instead of cycles, since it is sometimes easier\nto show the existence of a closed walk and avoid discussion whether it is a simple cycle or not. A\nfeedback vertex set is a set of vertices that hits all the closed walks of the graph.\nDefinition 2.1. (feedback vertex set) Let G be a directed graph. A set T \u2286 V (G) is a feedback\nvertex set of G if G \\ T does not contain any closed walks.\nThis gives rise to the Directed Feedback Vertex Set (DFVS) problem where we are given\na directed graph G and we want to find if G has a feedback vertex set of size at most k. The DFVS\nproblem was shown to be FPT by Chen et al. [8], answering a long-standing open problem in the\nparameterized complexity community.\nIn this paper, we consider a generalization of the DFVS problem where given a set S \u2286 V (G),\nwe ask if there exists a vertex set of size \u2264 k that hits all closed walks passing through S.\n\n4\n\n\fSubset Directed Feedback Vertex Set (Subset-DFVS)\nInput: A directed graph G, a set S \u2286 V (G), and a positive integer k.\nParameter : k\nQuestion: Does there exist a set T \u2286 V (G) with |T | \u2264 k such that G \\ T has no closed walk\ncontaining a vertex of S?\nIt is easy to see that DFVS is a special case of Subset-DFVS obtained by setting S = V (G).\nWe also define a variant of Subset-DFVS where the set S is a subset of edges. In this variant,\nwe have destroy the following type of closed walks:\nDefinition 2.2. (S-closed-walk) Let G be a directed graph and S \u2286 E(G). A closed walk (starting\nand ending at same vertex) C in G is said to be a S-closed-walk if it contains an edge from S.\nEdge Subset Directed Feedback Vertex Set (Edge-Subset-DFVS)\nInput : A directed graph G, a set S \u2286 E(G), and a positive integer k.\nParameter : k\nQuestion : Does there exist a set T \u2286 V (G) with |T | \u2264 k such that G \\ T has no S-closedwalks?\nThe above two problems can be shown to be equivalent as follows. If (G, S, k) is an instance of\nSubset-DFVS we create an instance (G, S 0 , k) of Edge-Subset-DFVS by taking S 0 as the set of\nedges incident to any vertex of S. Then any closed walk passing through a vertex of S must pass\nthrough an edge of S 0 , and conversely any closed walk passing through an edge of S 0 must contain\na vertex from S.\nOn the other hand, given an instance (G, S 0 , k) of Edge-Subset-DFVS we create an instance\n0\n(G , S, k) of Subset-DFVS where G0 is obtained from G by the following modification: For every\ndirected edge (u, v) \u2208 E(G) we add a new vertex xuv and path u \u2192 xuv \u2192 v of length 2. We set\nS = {xe : e \u2208 S 0 }. Then any closed walk in G passing through an edge of S 0 corresponds to\na closed-walk in G0 which must pass through a vertex of S, and conversely any closed walk in G0\npassing through a vertex of S can be easily converted to a closed walk in G passing through an edge\nof S 0 . Both the reductions work in polynomial time and do not change the parameter. Therefore, in\nthe rest of the paper we concentrate on solving the Edge Subset Directed Feedback Vertex\nSet problem and we shall refer to both the above problems as Subset-DFVS.\n\n2.1\n\nIterative Compression\n\nThe first step of our algorithm is to use the technique of iterative compression introduced by Reed\net al. [43]. It has been used to obtain faster FPT algorithms for various problems [6, 8, 16, 22, 23,\n24, 35, 42]. We transform the Subset-DFVS problem into the following problem:\nSubset-DFVS Compression\nInput: A directed graph G, a set S \u2286 E(G), a positive integer k, and a set T \u2286 V such\nthat G \\ T has no S-closed-walks.\nParameter : k + |T |\nQuestion: Does there exist a set T 0 \u2286 V (G) with |T 0 | \u2264 k such that G \\ T 0 has no S-closedwalks?\nLemma 2.3. (power of iterative compression) Subset-DFVS can be solved by O(n) calls to\nan algorithm for the Subset-DFVS Compression problem with |T | \u2264 k + 1.\n5\n\n\fProof. Let V (G) = {v1 , . . . , vn } and for i \u2208 [n] let Vi = {v1 , . . . vi }. We construct a sequence of\nsubsets Xi \u2286 Vi , such that Xi is a solution for G[Vi ]. Clearly, X1 = \u2205 is a solution for G[V1 ].\nObserve that if Xi is a solution for G[Vi ], then Xi \u222a {vi+1 } is a solution for G[Vi+1 ]. Therefore, for\neach i \u2208 [n \u2212 1], we set T = Xi \u222a {vi+1 } and use, as a blackbox, an algorithm for Subset-DFVS\nCompression, to construct a set Xi+1 that is a solution of size at most k for G[Vi+1 ]. Note that\nif there is no solution for G[Vi ] for some i \u2208 [n], then there is no solution for the whole graph G\nand moreover, since Vn = V (G), if all the calls to the reduction problem are successful, then Xn is\na solution for the graph G.\nNow we transform the Subset-DFVS Compression problem into the following problem whose\nonly difference is that the subset feedback vertex set in the output must be disjoint from the one\nin the input:\nDisjoint Subset-DFVS Compression\nInput: A directed graph G, a set S \u2286 E(G), a positive integer k, and a set T \u2286 V such\nthat G \\ T has no S-closed-walks.\nParameter : k + |T |\nQuestion: Does there exist a set T 0 \u2286 V (G) with |T 0 | \u2264 k such that T \u2229 T 0 = \u2205 and G \\ T 0\nhas no S-closed-walks?\nLemma 2.4. (adding disjointness) Subset-DFVS Compression can be solved by O(2|T | ) calls\nto an algorithm for the Disjoint Subset-DFVS Compression problem.\nProof. Given an instance I = (G, S, T, k) of Subset-DFVS Compression we guess the intersection X of T and the subset feedback vertex set T 0 in the output. We have at most 2|T | choices for\nX. Then for each guess for X, we solve the Disjoint Subset-DFVS Compression problem for\nthe instance IX = (G \\ X, S, T \\ X, k \u2212 |X|). It is easy to see that if T 0 is a solution for instance I\nof Subset-DFVS Compression, then T 0 \\ X is a solution of instance IX of Disjoint SubsetDFVS Compression for X = T 0 \u2229 T . Conversely, if T 00 is a solution to some instance IX , then\nT 00 \u222a X is a solution for X.\nFrom Lemmas 2.3 and 2.4, an FPT algorithm for Disjoint Subset-DFVS Compression\ntranslates into an FPT algorithm for Subset-DFVS with an additional blowup factor of O(2|T | n)\nin the running time.\n\n3\n\nGeneral F-transversal Problems: Covering the Shadow of a Solution\n\nThe purpose of this section is to present the \"random sampling of important separators\" technique\ndeveloped in [11] for Directed Multiway Cut in a generalized way that applies to SubsetDFVS as well. The technique consists of two steps:\n1. First find a set Z small enough to be disjoint from a solution X (of size \u2264 k) but large enough\nto cover the \"shadow\" of X.\n2. Then define a \"torso\" operation that uses the set Z to reduce the problem instance in such\na way that X becomes a shadowless solution of the reduced instance.\n\n6\n\n\fIn this section, we define a general family of problems for which Step 1 can be efficiently\nperformed. The general technique to execute Step 1 is very similar to what was done for Directed\nMultiway Cut [11]. In Section 4, we show how Step 2 can be done for the specific problem\nof Disjoint Subset-DFVS Compression. First we start by defining separators and shadows.\nFollowing [11], we define separators in a generalized setting where we assume that the graph G\nis equipped with a subset V \u221e (G) of undeletable vertices and separators by definition have to be\ndisjoint from this set. This extension will be very convenient in the proofs of Section 3.3.\nDefinition 3.1. (separator) Let G be a directed graph and V \u221e (G) be the set of distinguished\n(\"undeletable\") vertices. Given two disjoint non-empty sets X, Y \u2286 V , we call a set W \u2286 V \\ (X \u222a\nY \u222a V \u221e ) an X \u2212 Y separator if there is no path from X to Y in G \\ W . A set W is a minimal\nX \u2212 Y separator if no proper subset of W is an X \u2212 Y separator.\nNote that here we explicitly define the X \u2212 Y separator W to be disjoint from X and Y .\nDefinition 3.2. (shadows) Let G be graph and T be a set of terminals. Let W \u2286 V (G) \\ V \u221e (G)\nbe a subset of vertices.\n1. The forward shadow fG,T (W ) of W (with respect to T ) is the set of vertices v such that W\nis a T \u2212 {v} separator in G.\n2. The reverse shadow rG,T (W ) of W (with respect to T ) is the set of vertices v such that W is\na {v} \u2212 T separator in G.\nThe shadow of W (with respect to T ) is the union of fG,T (W ) and rG,T (W ).\nThat is, we can imagine T as a light source with light spreading on the directed edges. The\nforward shadow is the set of vertices that remain dark if the set W blocks the light, hiding v from\nT 's sight. In the reverse shadow, we imagine that light is spreading on the edges backwards. We\nabuse the notation slightly and write v \u2212 T separator instead of {v} \u2212 T separator. We also drop\nG and T from the subscript if they are clear from the context. Note that W itself is not in the\nshadow of W (as, by definition, a T \u2212 v or v \u2212 T separator needs to be disjoint from T and v), that\nis, W and fG,T (W ) \u222a rG,T (W ) are disjoint. See Figure 1 for an illustration.\nLet G be a directed graph and T \u2286 V (G). Let F = {F1 , F2 , . . . , Fq } be a set of subgraphs of\nG. We define the following property:\nDefinition 3.3. (T-connected) Let F = {F1 , F2 , . . . , Fq } be a set of subgraphs of G. For a set\nT \u2286 V , we say that F is T -connected if for every i \u2208 [q] , each vertex of the subgraph Fi can reach\nsome vertex of T by a walk completely contained in Fi and is reachable from some vertex of T by\na walk completely contained in Fi .\nFor a set F of subgraphs of G, an F-transversal is a set of vertices that intersects each subgraph\nin F.\nDefinition 3.4. (F-transversal) Let F = {F1 , F2 , . . . , Fq } be a set of subgraphs of G. Then\nW \u2286 V (G) is said to be an F-transversal if \u2200 i \u2208 [q] we have Fi \u2229 W 6= \u2205.\nThe main result of this section is a randomized algorithm for producing a set that covers the\nshadow of some F-transversal:\nTheorem 3.5. (randomized covering of the shadow) Let T \u2286 V (G). There is an algorithm\nRandomSet(G, T, k) that runs in O\u2217 (4k ) time and returns a set Z \u2286 V (G) such that for any set F\nof T -connected subgraphs, if there exists an F-transversal of size \u2264 k, then the following holds with\n2\nprobability 2\u2212O(k ) : there is an F-transversal X of size \u2264 k such that\n7\n\n\fr(W )\n\nf (W )\n\nf (W ) \u2229 r(W )\nW\n\nT\nFigure 1: For every vertex v \u2208 f (W ), the set W is a T \u2212 v separator. For every vertex w \u2208 r(W ),\nthe set W is a w \u2212 T separator. For every vertex y \u2208 f (W ) \u2229 r(W ), the set W is both a T \u2212 y and\ny \u2212 T separator. Finally for every z \u2208 V (G) \\ [W \u222a r(W ) \u222a f (W ) \u222a T ], there are both z \u2212 T and\nT \u2212 z paths in the graph G \\ W .\n1. X \u2229 Z = \u2205 and\n2. Z covers the shadow of X.\nNote that F is not an input of the algorithm described by Theorem 3.5: the set Z constructed\nin the above theorem works for every T -connected set F of subgraphs. Therefore, issues related\nto the representation of F do not arise. Using the theory of splitters, we also prove the following\nderandomized version of Theorem 3.5:\nTheorem 3.6. (deterministic covering of the shadow) Let T \u2286 V (G). We can construct a\n2\n2\nset {Z1 , Z2 , . . . , Zt } with t = 2O(k ) log2 n in time O\u2217 (2O(k ) ) such that for any set F of T -connected\nsubgraphs, if there exists an F-transversal of size \u2264 k, then there is an F-transversal X of size \u2264 k\nsuch that for at least one i \u2208 [t] we have\n1. X \u2229 Zi = \u2205 and\n2. Zi covers the shadow of X.\nSections 3.1\u20133.3 are devoted to the proofs of Theorems 3.5\u20133.6.\nIn the Directed Multiway Cut algorithm of Chitnis et al. [11], the set T was the set of\nterminals and the set F was the set of all walks from one vertex of T to another vertex of T .\nClearly, F is T -connected: every vertex on a walk from T to T satisfies the reachability conditions.\nWith this interpretation, Theorem 3.6 generalizes Theorem 4.11 of [11] with a better running time.\n2\nPlugging Theorem 3.6 into the Directed Multiway Cut algorithm of [11] gives an O\u2217 (2O(k ) )\ntime algorithm, proving Theorem 1.2.\nIn Subset-DFVS, the set T is the solution that we want to compress and F is the set of all\nS-closed-walks passing through some vertex of T . Again, F is T -connected: every S-closed-walk\ngoes through T (as T is a solution), hence any vertex on an S-closed-walk is reachable from T , and\nsome vertex of T is reachable from every vertex of the S-closed-walk.\nWe say that an F-transversal T 0 is shadowless if f (T 0 )\u222ar(T 0 ) = \u2205. Note that if T 0 is a shadowless\nsolution, then each vertex of G \\ T 0 is reachable from some vertex of T and can reach some vertex\n8\n\n\fof T . In Section 4, we show that given an instance of Disjoint Subset-DFVS Compression\nand a set Z as in Theorem 3.5, we are able to transform the instance using the torso operation in a\nway that guarantees the existence of the shadowless solution for the reduced instance. In Section 5,\nwe will see how we can make progress in Disjoint Subset-DFVS Compression if there exists a\nshadowless solution: we identify a bounded-size set of vertices such that every shadowless solution\ncontains at least one vertex of this set. Therefore, we can branch on including one vertex of this\nset into the solution.\n\n3.1\n\nImportant separators and random sampling\n\nThis subsection reviews the notion of important separators and the random sampling technique\nintroduced in [35]. These ideas were later adapted and generalized for directed graphs in [11]. We\nclosely follow [11], but we deviate from it in two ways: we state the results in the framework of\nF-transversal problems and improve the random selection and its analysis to achieve better running\ntime. Unfortunately, this means that we have to go step-by-step through most of the corresponding\narguments of [11]. While some of the statements and proofs are almost the same as in [11], we give\na self-contained presentation without relying on earlier work (with the exception of the proof of\nLemma 3.8).\n3.1.1\n\nImportant separators\n\nMarx [34] introduced the concept of important separators to deal with the Undirected Multiway\nCut problem. Since then it has been used implicitly or explicitly in [7, 8, 11, 28, 31, 33, 35, 42]\nin the design of fixed-parameter algorithms. In this section, we define and use this concept in the\nsetting of directed graphs. Roughly speaking, an important separator is a separator of small size\nthat is maximal with respect to the set of vertices on one side. Recall that, as in Definition 3.1, the\ngraph G has a set V \u221e (G) of undeletable vertices and an X \u2212 Y separator is defined to be disjoint\nfrom X \u222a Y \u222a V \u221e (G).\nDefinition 3.7. (important separator) Let G be a directed graph and let X, Y \u2286 V be two\ndisjoint non-empty sets. A minimal X \u2212 Y separator W is called an important X \u2212 Y separator\n+\n+\n+\nif there is no X \u2212 Y separator W 0 with |W 0 | \u2264 |W | and RG\\W\n(X) \u2282 RG\\W\n0 (X), where RA (X) is\nthe set of vertices reachable from X in the graph A.\nLet X, Y be disjoint sets of vertices of an undirected graph. Then for every k \u2265 0, it is known [7,\n34] that there are at most 4k important X \u2212 Y separators of size at most k for any sets X, Y . The\nnext lemma shows that the same bound holds for important separators even in directed graphs.\nLemma 3.8 ([11]). (number of important separators) Let X, Y \u2286 V (G) be disjoint sets in a\ndirected graph G. Then for every k \u2265 0 there are at most 4k important X \u2212 Y separators of size at\nmost k. Furthermore, we can enumerate all these separators in time O(4k * k(|V (G) + |E(G)|)).\nFor ease of notation, we now define the following collection of important separators:\nDefinition 3.9. Given a graph G, a set T \u2286 V (G), and an integer k, the set Ik contains the set\nW \u2286 V (G) if W is an important v \u2212 T separator of size at most k in G for some vertex v in\nV (G) \\ T .\nRemark 3.10. It follows from Lemma 3.8 that |Ik | \u2264 4k * |V (G)| and we can enumerate the sets\nin Ik in time O\u2217 (4k ).\n9\n\n\fW\n\nZ\n\nw1\n\nz1\n\nx1\n\nt1\nw2\n\nX\n\nz2\n\nT\nt2\n\nx2\nw3\n\nz3\n\nFigure 2: W is a minimal X \u2212 T separator, but it is not an important X \u2212 T separator as Z\n+\n+\nsatisfies |Z| = |W | and RG\\W\n(X) = X \u2282 X \u222a W = RG\\Z\n(X). In fact it is easy to check that the\nonly important X \u2212 T separator of size 3 is Z. If k \u2265 2 then the set {z1 , z2 } is in Ik , since it is\nan important x1 \u2212 T separator of size 2. Finally, x1 belongs to the \"exact reverse shadow\" of each\nof the sets {w1 , w2 }, {w1 , z2 }, {w2 , z1 } and {z1 , z2 }, since they are all minimal x1 \u2212 T separators.\nHowever x1 does not belong to the exact reverse shadow of the set W as it is not a minimal x1 \u2212 T\nseparator.\nWe now define a special type of shadows which we use later for the random sampling:\nDefinition 3.11. (exact shadows) Let G be a directed graph and T \u2286 V (G) a set of terminals.\nLet W \u2286 V (G) \\ V \u221e (G) be a subset of vertices. Then for v \u2208 V (G) we say that\n1. v is in the \" exact forward shadow\" of W (with respect to T ) if W is a minimal T \u2212v separator\nin G, and\n2. v is in the \" exact reverse shadow\" of W (with respect to T ) if W is a minimal v \u2212T separator\nin G.\nWe refer the reader to Figure 2 for examples of Definitions 3.7, 3.9 and 3.11. Note that from\nthe two definitions appearing in Defintion 3.11, we will be using only the exact reverse shadow in\nthe paper; the definition of exact forward shadow is given only for completeness. The exact reverse\nshadow of W is a subset of the reverse shadow of W : it contains a vertex v only if every vertex\nw \u2208 S is \"useful\" in separating v from T , i.e., vertex w can be reached from v and T can be reached\nfrom w. Similarly for the forward shadow. This slight difference between the shadow and the exact\nshadow will be crucial in the analysis of the algorithm (Section 3.3).\nThe weaker version of the random sampling described in Section 3.1.2 (Theorem 3.16) randomly\nselects members of Ik and creates a subset by taking the union of the exact reverse shadows of\nthese sets. The following lemma will be used to give an upper bound on the probability that a\nvertex is covered by the union.\nLemma 3.12. Let z be any vertex. Then there are at most 4k members of Ik that contain z in\ntheir exact reverse shadows.\nFor the proof of Lemma 3.12, we need to establish first the following:\n10\n\n\fLemma 3.13. If W \u2208 Ik and v is in the exact reverse shadow of W , then W is an important v \u2212 T\nseparator.\nProof. Let w be the witness that W is in Ik , i.e., W is an important w \u2212 T separator in G. Let v\nbe any vertex in the exact reverse shadow of W , which means that W is a minimal v \u2212 T separator\nin G. Suppose that W is not an important v \u2212 T separator. Then there exists a v \u2212 T separator\n+\n+\nW 0 such that |W 0 | \u2264 |W | and RG\\W\n(v) \u2282 RG\\W\n0 (v). We will arrive to a contradiction by showing\n+\n+\nthat RG\\W (w) \u2282 RG\\W 0 (w), i.e., W is not an important w \u2212 T separator.\nFirst, we claim that W 0 is a (W \\ W 0 ) \u2212 T separator. Suppose that there is a path P from some\nx \u2208 W \\ W 0 to T that is disjoint from W 0 . As W is a minimal v \u2212 T separator, there is a path\n+\n+\nQ from v to x whose internal vertices are disjoint from W . Furthermore, RG\\W\n(v) \u2282 RG\\W\n0 (v)\n0\nimplies that the internal vertices of Q are disjoint from W as well. Therefore, concatenating Q\nand P gives a path from v to T that is disjoint from W 0 , contradicting the fact that W 0 is a v \u2212 T\nseparator.\nWe show that W 0 is a w \u2212 T separator and its existence contradicts the assumption that W is\nan important w \u2212 T separator. First we show that W 0 is a w \u2212 T separator. Suppose that there is\na w \u2212 T path P disjoint from W 0 . Path P has to go through a vertex y \u2208 W \\ W 0 (as W is a w \u2212 T\nseparator). Thus by the previous claim, the subpath of P from y to T has to contain a vertex of\nW 0 , a contradiction.\n+\n+\n0\n0\nFinally, we show that RG\\W\n(w) \u2286 RG\\W\n0 (w). As W 6= W and |W | \u2264 |W |, this will contradict\nthe assumption that W is an important w \u2212 T separator. Suppose that there is a vertex z \u2208\n+\n+\n+\nRG\\W\n(w) \\ RG\\W\n0 (w) and consider a w \u2212 z path that is fully contained in RG\\W (w), i.e., disjoint\n+\n0\n0\nfrom W . As z 6\u2208 RG\\W\n0 (w), path Q contains a vertex q \u2208 W \\ W . Since W is a minimal v \u2212 T\nseparator, there is a v \u2212T path that intersects W 0 only in q. Let P be the subpath of this path from\nq to T . If P contains a vertex r \u2208 W , then the subpath of P from r to T contains no vertex of W 0\n(as z 6= r is the only vertex of W 0 on P ), contradicting our earlier claim that W 0 is a (W \\ W 0 ) \u2212 T\nseparator. Thus P is disjoint from W , and hence the concatenation of the subpath of Q from w to\nq and the path P is a w \u2212 T path disjoint from W , a contradiction.\nLemma 3.12 easily follows from Lemma 3.13. Let J be a member of Ik such that z is in the\nexact reverse shadow of J. By Lemma 3.13, J is an important z \u2212 T separator. By Lemma 3.8,\nthere are at most 4k important z \u2212 T separators of size at most k and hence z belongs to at most\n4k exact reverse shadows.\nRemark 3.14. It is crucial to distinguish between \"reverse shadow\" and \"exact reverse shadow\":\nLemma 3.13 (and hence Lemma 3.12) does not remain true if we remove the word \"exact.\" Consider\nthe following example (see Figure 3). Let a1 , . . . , ar be vertices such that there is an edge going\nfrom every ai to every vertex of T = {t1 , t2 , . . . , tk }. For every 1 \u2264 i \u2264 r, let bi be a vertex with an\nedge going from bi to ai . For every 1 \u2264 i < j \u2264 r, let ci,j be a vertex with two edges going from ci,j\nto ai and aj . Then every set {ai , aj } is in Ik , since it is an important ci,j \u2212 T separator; and every\nset {ai } is in Ik as well, as it is an important bi \u2212 T separator. Every bi is in the reverse shadow\nof {aj , ai } for 1 \u2264 i 6= j \u2264 r. However, bi is in the exact reverse shadow of exactly one member of\nIk , the set {ai }.\n3.1.2\n\nRandom sampling\n\nIn this subsection, we describe the technique of random sampling of important separators, which\nis crucial to the proof of Theorem 3.5. This technique was introduced in [35] and was adapted to\n11\n\n\fbb1\nbb2\nbb3\n\ncc1,3\n\naa1\n\ncc1,2\n\naa2\n\ncc2,3\n\naa3\n\ntt1\n\ntt2\n\ntt3\n\nT\n\ntt4\n\nFigure 3: An illustration of Remark 3.14 in the special case when k = 4 and r = 3.\ndirected graphs in [11]. We follow it closely and try to present it in a self-contained way that might\nbe useful for future applications. In Section 4, in order to reduce the problem (via the \"torso\"\noperation) to a shadowless instance, we need a set Z that has the following property:\nProperty (*)\nThere is an F-transversal T \u2217 of size at most k such that Z covers the shadow of T \u2217 , but Z\nis disjoint from T \u2217 .\nOf course, when we are trying to construct this set Z, we do not know anything about the\nF-transversals of the instance. In particular we have no way of checking if a given set Z satisfies\nthis property. Nevertheless, we use a randomized procedure that creates a set Z and we give a\nlower bound on the probability that Z satisfies the requirements. For the construction of this set\nZ, one can use a very specific probability distribution that was introduced in [35]. This probability\ndistribution is based on randomly selecting \"important separators\" and taking the union of their\nshadows. In this paper, we modify the selection of important separators in a way that improves\nthe success probability. The precise description of the randomized procedure and the properties of\nthe distribution it creates is described in Theorems 3.16 and 3.17. Using the theory of splitters we\ncan derandomize the randomized selection into a deterministic algorithm that returns a bounded\nnumber of sets such that at least one of them satisfies the required property (Section 3.2).\nFirst we focus on the reverse shadow and try to ensure that (with good probability) Z covers\nthe reverse shadow of T \u2217 . Then in Section 3.3, we argue that, after reversing the orientation of the\nedges of the graph, a second application of the random selection can be used to cover the forward\nshadow. Thus in this section, we consider only the reverse shadow of T \u2217 .\nRoughly speaking, we want to select a random set Z such that for every every (W, Y ) where\nY is in the reverse shadow of W , the probability that Z is disjoint from W but contains Y can be\nbounded from below. We can guarantee such a lower bound only if (W, Y ) satisfies two conditions.\nFirst, it is not enough that Y is in the shadow of W (or in other words, W is an Y \u2212 T separator),\nbut W should contain important separators separating the vertices of Y from T (see Theorems 3.16\nand 3.17 for the exact statement). Second, W and Y have to be disjoint, otherwise there is clearly\nno set covering Y and disjoint from W . In other words, a vertex of W cannot be in the reverse\nshadow of other vertices of W , which is expressed by the following technical definition:\nDefinition 3.15. (thin) Let G be a directed graph. We say that a set W \u2286 V (G) is thin in G if\nthere is no v \u2208 W such that v belongs to the reverse shadow of W \\ v with respect to T .\n12\n\n\fWe first give an easy version of the random sampling, which only gives a double exponentially\nsmall lower bound on the probability of constructing a set Z with the required properties.\nTheorem 3.16. (random sampling) There is an algorithm RandomSet(G, T, k) that produces\na random set Z \u2286 V (G) \\ T in time O\u2217 (4k ) such that the following holds. Let W be a thin set\nwith |W | \u2264 k, and let Y be a set such that for every v \u2208 Y there is an important v \u2212 T separator\nW 0 \u2286 W . For every such pair (W, Y ), the probability that the following two events both occur is\nO(k)\n2\u22122\n:\n1. W \u2229 Z = \u2205, and\n2. Y \u2286 Z.\nProof. The algorithm RandomSet(G, T, k) first enumerates the collection Ik ; let X be the set of all\nexact reverse shadows of these sets. Note that two different sets in Ik have different exact reverse\nshadows: if X is the exact reverse shadow of J \u2208 Ik , then J is exactly the set of vertices not in X\nand having an inneighbor in X. By Lemma 3.8, the size of X is O\u2217 (4k ) and can be constructed\nin time O\u2217 (4k ). Let X 0 be the subset of X where each element from X occurs with probability 12\nindependently at random. Let Z be the union of the exact reverse shadows in X 0 . We claim that\nthe set Z satisfies the requirement of the theorem.\nLet us fix a pair (W, Y ) as in the statement of the theorem. Let X1 , X2 , . . . , Xd \u2208 X be the\nexact reverse shadows of every member of Ik that is a subset of W . As |W | \u2264 k, we have d \u2264 2k .\nBy the assumption that W is thin, we have Xj \u2229W = \u2205 for every j \u2208 [d]. Now consider the following\nevents:\n(E1) W \u2229 Z = \u2205\n(E2) Xj \u2286 Z for every j \u2208 [d]\nFirst we show that (E2) implies that Y \u2286 Z: v \u2208 Y implies there is an important separator\nW 0 \u2286 W , i.e., there is some ` \u2208 [d] such that X` is the exact reverse shadow of W . Also note that\nv \u2208 X` since W 0 is a minimal (in fact important) v \u2212 T separator. Since Xj \u2286 Z for every j \u2208 [d],\nwe have that v \u2208 Z. This shows that Y \u2286 Z.\nO(k)\nOur goal is to show that both events (E1) and (E2) occur with probability 2\u22122\n. Let A =\n{X1 , X2 , . . . , Xd } and B = {X \u2208 X | X \u2229 W 6= \u2205}. By Lemma 3.12, each vertex of W is contained\nin the exact reverse shadows of at most 4k members of Ik . Thus |B| \u2264 |W | * 4k \u2264 k * 4k . If no exact\nreverse shadow from B is selected, then event (E1) holds. If every exact reverse shadow from A is\nselected, then event (E2) holds. Thus the probability that both (E1) and (E2) occur is bounded\nfrom below by the probability of the event that every element from A is selected and no element\nfrom B is selected. Note that A and B are disjoint: A contains only sets disjoint from W , while B\ncontains only sets intersecting W . Therefore, the two events are independent and the probability\nthat both events occur is at least\n\u0010 1 \u00112k \u0010\n1 \u0011k*4k\nO(k)\n1\u2212\n= 2\u22122\n2\n2\n\nWe now give an improved version of the random sampling that gives a stronger lower bound on\nthe success probability than the one guaranteed by Theorem 3.16. Recall that in Theorem 3.16,\nwe randomly selected members of Ik and took Z as the union of the exact reverse shadows of\nthe selected sets. However, we only had single-exponential upper bounds on both types of exact\nreverse shadows: number of shadows intersecting W was at most k * 4k and the number of exact\n13\n\n\freverse shadows of every subset of W is at most 2k . In Theorem 3.17, we take a different view: we\nrandomly select a subset of vertices P and take Z as the union of exact reverse shadows of every\nsubset of P. This will give us a stronger (single exponentially small) lower bound on the probability\nthat the constructed set Z satisfies the required properties.\nTheorem 3.17. (improved random sampling) There is an algorithm RandomSet(G, T, k) that\nproduces a random set Z \u2286 V (G) \\ T in time O\u2217 (4k ) such that the following holds. Let W be a\nthin set with |W | \u2264 k, and let Y be a set such that for every v \u2208 Y there is an important v \u2212 T\nseparator W 0 \u2286 W . For every such pair (W, Y ), the probability that the following two events both\n2\noccur is 2\u2212O(k ) :\n1. W \u2229 Z = \u2205, and\n2. Y \u2286 Z.\nProof. The algorithm RandomSet(G, T, k) picks a subset P of V (G) where each element occurs\nwith probability 4\u2212k uniformly at random. For every S \u2208 Ik with S \u2286 P , let us add the exact\nreverse shadow of S to X 0 . Let Z be the union of the exact reverse shadows in X 0 . We claim that\nthe set Z satisfies the requirement of the theorem.\nFix a pair (W, Y ) as in the statement of the theorem. For each w \u2208 W , we define\nLw = {S | S is an important w \u2212 T separator of size \u2264 k},\n[\nIw =\nS,\nS\u2208Lw\n\nI=\n\n[\n\nIw .\n\nw\u2208W\n\nNote that a vertex w \u2208 W may have an outneighbor in T , in which case Lw and Iw are empty.\nSince |W | \u2264 k and for each w \u2208 W there are at most 4k important w \u2212 T separators of size at most\nk, we have |Iw | \u2264 k * 4k . Since |W | \u2264 k, we have |I| \u2264 k 2 * 4k .\nLet X be the set of exact reverse shadows of every set S \u2208 Ik . Let X1 , X2 , . . . , Xd \u2208 X\nbe the exact reverse shadows of every S \u2208 Ik with S \u2286 W . Let A = {X1 , X2 , . . . , Xd } and\nB = {X \u2208 X | X \u2229 W 6= \u2205}. Now consider the following events:\n(E1) W \u2229 Z = \u2205\n(E2) Xj \u2286 Z for every j \u2208 [d]\nFirst we show that (E2) implies that Y \u2286 Z: v \u2208 Y implies there is an important separator\nW 0 \u2286 W , i.e., there is some ` \u2208 [d] such that X` is the exact reverse shadow of W . Also note that\nv \u2208 X` since W 0 is a minimal (in fact important) v \u2212 T separator. Since Xj \u2286 Z for every j \u2208 [d],\nwe have that v \u2208 Z. This shows that Y \u2286 Z.\n2\nOur goal is to show that both events (E1) and (E2) occur with probability 2\u2212O(k ) . If every\nvertex from W is selected in P , then every reverse shadow from A is selected into X 0 and event (E2)\nholds. We claim that if no vertex from I \\ W is selected in P , then no exact reverse shadow from\nB is selected into X 0 and hence event (E1) will also hold. Suppose to the contrary that an exact\nreverse shadow X \u2208 B was selected into X 0 ; by the definition of B, there is a vertex w \u2208 X \u2229 W .\nLet J \u2208 Ik be the set whose exact reverse shadow is X, which implies by Lemma 3.13 that J \u2208 Lw\nand J \u2286 Iw \u2286 I. If J \\ W 6= \u2205, then the assumption that no vertex of I \\ W was selected into\nP condtradicts the fact that X was selected into X 0 . Suppose therefore that J \u2286 W holds. Since\nX is the exact reverse shadow of J, we know that J is a minimal X \u2212 T separator. But J \u2286 W\n14\n\n\fimplies that W \\ X is also an X \u2212 T separator, i.e., W \u2229 X lies in the reverse shadow of W \\ X.\nThis contradicts the fact that W is a thin set (see Definition 3.15).\nThus the probability that both the events (E1) and (E2) occur is bounded from below by the\nprobability of the event that every vertex from W is selected in P and no vertex from I \\ W is\nselected in P . Note that the sets W and I \\ W are clearly disjoint. Therefore, the two events are\nindependent and the probability that both events occur is at least\n(4\u2212k )k (1 \u2212 4\u2212k )k\n\n2 *4k\n\n2\n\n2\n\n\u2265 4\u2212k * e\u22122k = 2\u2212O(k\nx\n\n2)\n\nwhere we used the inequalities that 1 + x \u2265 e 1+x for every x > \u22121 and 1 \u2212 4\u2212k \u2265\nk \u2265 1.\n\n3.2\n\n1\n2\n\nfor every\n\nDerandomization\n\nWe now derandomize the process of choosing exact reverse shadows in Theorem 3.17 using the\ntechnique of splitters. An (n, r, r2 )-splitter is a family of functions from [n] \u2192 [r2 ] such that for\nevery M \u2286 [n] with |M | = r, at least one of the functions in the family is injective on M . Naor et\nal. [37] give an explicit construction of an (n, r, r2 )-splitter of size O(r6 log r log n) in time poly(n, r).\nTheorem 3.18. (deterministic sampling) There is an algorithm DeterministicSets(G, T, k) that\n2\n2\nproduces t = 2O(k ) log |V (G)| subsets of Z1 , . . . , Zt of V (G) \\ T in time O\u2217 (2O(k ) ) such that the\nfollowing holds. Let W be a thin set with |W | \u2264 k, and let Y be a set such that for every v \u2208 Y\nthere is an important v \u2212 T separator W 0 \u2286 W . For every such pair (W, Y ), there is at least one\n1 \u2264 i \u2264 t with\n1. W \u2229 Z = \u2205, and\n2. Y \u2286 Z.\nProof. In the proof of Theorem 3.17, a random subset P of a universe V (G) of size n is selected.\nWe argued that if every vertex from W is selected in P and no element from I \\ W is selected, then\nboth the events (E1) and (E2) occur. Instead of selecting a random subset P , we will construct\nseveral subsets such that at least one of them will contain every vertex in W and no vertex from\nI \\ W . Let n = |V (G)|, a = |W | \u2264 k, and b = |I \\ W | \u2264 k 2 * 4k . Each subset is defined by a pair\n(h, H), where h is a function in an (n, a + b, (a + b)2 )-splitter family and H is a subset of [(a + b)2 ]\n2 k 2\u0001\n2\u0001\n2\nof size a (there are (a+b)\n= (k+kk*4 ) = 2O(k ) such sets H). For a particular choice of h and\na\nH,\u0010 we select those vertices\u0011v \u2208 V (G) into P for which h(v) \u2208 H. The size of the splitter family is\n2\nO (a+b)6 log(a+b) log(n) = 2O(k) log n and the number of possibilities for H is 2O(k ) . Therefore,\n2\n\nwe construct 2O(k ) log n subsets of V (G). The total time taken for constructing these subsets is\npoly(n, a + b) = poly(n, 4k ).\nBy the definition of the splitter, there is a function h that is injective on W , and there is a\nsubset H such that h(v) \u2208 H for every set v \u2208 W and h(y) 6\u2208 H for every y \u2208 I \\ W . For such an\nh and H, the selection will ensure that (E1) and (E2) hold. Thus at least one of the constructed\nsubsets has the required properties, which is what we had to show.\n\n3.3\n\nProof of Theorem 3.5: The Covering Algorithm\n\nTo prove Theorem 3.5, we show that Algorithm 1 gives a set Z satisfying the properties of Theorem 3.5. Due to the delicate way separators and shadows behave in directed graphs, we construct\nthe set Z in two phases, calling the function RandomSet of Section 3.1 twice and taking Z to be\n15\n\n\fAlgorithm 1: Covering (randomized version)\nInput: A directed graph G1 , integer k.\nOutput: A set Z.\n1: Let Z1 = RandomSet(G1 , T, k).\n2: Let G2 be obtained from G1 by reversing the orientation of every edge and adding every\nvertex of Z1 to V \u221e .\n3: Let Z2 = RandomSet(G2 , T, k).\n4: Let Z = Z1 \u222a Z2 .\nthe union of the two outputs. For consistency of notation, we denote the input graph by G1 . Let\nZ1 be the output of the first call of the function RandomSet, i.e., Z1 = RandomSet(G1 , T, k). We\nbuild a new graph G2 from G1 by reversing the orientation of every edge and adding every vertex\nof Z1 to V \u221e . Since the structure of the graph G2 depends on the set Z1 , the distribution of the\nsecond random sampling depends on the result Z1 of the first random sampling. This means that\nwe cannot make the two calls in parallel. Our aim is to show that there is a transversal T \u2217 such that\nwe can give a lower bound on the probability that Z1 covers rG1 ,T (T \u2217 ) and Z2 covers fG1 ,T (T \u2217 ).\nTo prove the existence of the required transversal T \u2217 , we need the following definition:\nDefinition 3.19. (shadow-maximal transversal) An F-transversal W is minimum if there is\nno F-transversal of size less than |W |. A minimum F-transversal W is called shadow-maximal if\nrG1 ,T (W ) \u222a fG1 ,T (W ) \u222a W is inclusion-wise maximal among all minimum F-transversals.\nFor the rest of the proof, let us fix T \u2217 to be a shadow-maximal F-transversal such that\n|rG1 ,T (T \u2217 )| is maximum possible among all shadow-maximal F-transversals. We bound the probability that Z \u2229 T \u2217 = \u2205 and rG1 ,T (T \u2217 ) \u222a fG1 ,T (T \u2217 ) \u2286 Z. More precisely, we bound the probability\nthat all of the following four events occur:\n1.\n2.\n3.\n4.\n\nZ1 \u2229 T \u2217 = \u2205,\nrG1 ,T (T \u2217 ) \u2286 Z1 ,\nZ2 \u2229 T \u2217 = \u2205, and\nfG1 ,T (T \u2217 ) \u2286 Z2 .\n\nThat is, the first random selection takes care of the reverse shadow, the second takes care of the\nforward shadow, and none of Z1 or Z2 hits T \u2217 . Note that it is somewhat counterintuitive that we\nchoose a T \u2217 for which the shadow is large: intuitively, it seems that the larger the shadow is, the\nless likely that it is fully covered by Z. However, we need this maximality property in order to\nbound the probability that Z \u2229 T \u2217 = \u2205.\nWe want to invoke Theorem 3.17 to bound the probability that Z1 covers Y = rG1 ,T (T \u2217 ) and\nZ1 \u2229 T \u2217 = \u2205. First, we need to ensure that T \u2217 is a thin set, but this follows easily from the fact\nthat T \u2217 is a minimum F-transversal:\nLemma 3.20. If W is a minimum F-transversal for some T -connected F, then no v \u2208 W is in\nthe reverse shadow of some W 0 \u2286 W \\ v.\nProof. Suppose to the contrary that there is a vertex v \u2208 W such that v \u2208 r(W 0 ) for some\nW 0 \u2286 W \\ v. Then we claim that W \\ v is also an F-transversal, contradicting the minimality of\nW . Let F = {F1 , F2 , . . . , Fq } and suppose that there is a i \u2208 [q] such that Fi \u2229 W = {v}. As F is\nT -connected, there is a v \u2192 T walk P in Fi . But P \u2229 W = {v} implies that there is a v \u2192 T walk\nin G \\ (W \\ v), i.e., v cannot belong to the reverse shadow of any W 0 \u2286 W \\ v.\n16\n\n\fMore importantly, if we want to use Theorem 3.17 with Y = rG1 ,T (T \u2217 ), then we have to make\nsure that for every vertex v of rG1 ,T (T \u2217 ), there is an important v \u2212 T separator that is a subset\nof T \u2217 . The \"pushing argument\" of Lemma 3.21 shows that if this is not true for some v, then we\ncan modify the F-transversal in a way that increases the size of the reverse shadow. The extremal\nchoice of T \u2217 ensures that no such modification is possible, thus T \u2217 contains an important v \u2212 T\nseparator for every v.\nLemma 3.21. (pushing) Let W be an F-transversal for some T -connected F. For every v \u2208\nr(W ), either there is a W1 \u2286 W that is an important v \u2212 T separator, or there is an F-transversal\nW 0 such that\n1. |W 0 | \u2264 |W |,\n2. r(W ) \u2282 r(W 0 ),\n3. (r(W ) \u222a f (W ) \u222a W ) \u2286 (r(W 0 ) \u222a f (W 0 ) \u222a W 0 ).\nProof. Let W0 be the subset of W reachable from v without going through any other vertices of\nW . Then W0 is clearly a v \u2212 T separator. Let W1 be the minimal v \u2212 T separator contained in\nW0 (we may note that if W is a minimal F-transversal, then we always have W1 = W0 ). If W1 is\nan important v \u2212 T separator, then we are done as W itself contains W1 . Otherwise, there exists\n+\n+\nan important v \u2212 T separator W10 , i.e., |W10 | \u2264 |W1 | and RG\\W\n(v) \u2282 RG\\W\n0 (v). Now we show that\n1\n1\n0\n0\n0\n0\nW = (W \\ W1 ) \u222a W1 is also an F-transversal. Note that W1 \u2286 W and |W 0 | \u2264 |W |.\nFirst we claim that r(W ) \u222a (W \\ W 0 ) \u2286 r(W 0 ). Suppose that there is a walk P from \u03b2 to T in\nG\\W 0 for some \u03b2 \u2208 r(W )\u222a(W \\W 0 ). If \u03b2 \u2208 r(W ), then walk P has to go through a vertex \u03b2 0 \u2208 W .\nAs \u03b2 0 is not in W 0 , it has to be in W \\ W 0 . Therefore, by replacing \u03b2 with \u03b2 0 , we can assume in the\nfollowing that \u03b2 \u2208 W \\ W 0 \u2286 W1 \\ W10 . By the minimality of W1 , every vertex of W1 \u2286 W0 has an\n+\n+\nincoming edge from some vertex in RG\\W\n(v). This means that there is a vertex \u03b1 \u2208 RG\\W\n(v) such\n+\n+\n+\nthat (\u03b1, \u03b2) \u2208 E(G). Since RG\\W (v) \u2282 RG\\W 0 (v), we have \u03b1 \u2208 RG\\W 0 (v), implying that there is a\n+\n0\nv \u2192 \u03b1 walk in G \\ W 0 . The edge \u03b1 \u2192 \u03b2 also survives in G \\ W 0 as \u03b1 \u2208 RG\\W\n0 (v) and \u03b2 \u2208 W1 \\ W1 .\nBy assumption, we have a walk in G \\ W 0 from \u03b2 to some t \u2208 T . Concatenating the three walks\nwe obtain a v \u2192 t walk in G \\ W 0 , which contradicts the fact that W 0 contains an (important)\nv \u2212 T separator W10 . This proves the claim. Since W 6= W 0 and |W | = |W 0 |, the set W1 \\ W10 is\nnon-empty. Thus r(W ) \u2282 r(W 0 ) follows from the claim r(W ) \u222a (W \\ W 0 ) \u2286 r(W 0 ).\nSuppose now that W 0 is not an F-transversal. Then there is some i \u2208 [q] such that Fi \u2229 W 0 = \u2205.\nAs W is an F-transversal, there is some w \u2208 W \\ W 0 with w \u2208 Fi . As F is T -connected, there\nis a w \u2192 T walk in Fi , which gives a w \u2192 T walk in G \\ W 0 as W 0 \u2229 Fi = \u2205. However, we have\nW \\ W 0 \u2286 r(W 0 ) (by the claim in the previous paragraph), a contradiction. Thus W 0 is also an\nF-transversal.\nFinally, we show that r(W )\u222af (W )\u222aW \u2286 r(W 0 )\u222af (W 0 )\u222aW 0 . We know that r(W )\u222a(W \\W 0 ) \u2286\nr(W 0 ). Thus it is sufficient to consider a vertex v \u2208 f (W ) \\ r(W ). Suppose that v 6\u2208 f (W 0 ) and\nv 6\u2208 r(W 0 ): there are walks P1 and P2 in G \\ W 0 , going from T to v and from v to T , respectively.\nAs v \u2208 f (W ), walk P1 intersects W , i.e., it goes through a vertex of \u03b2 \u2208 W \\ W 0 \u2286 r(W 0 ). However,\nconcatenating the subwalk of P1 from \u03b2 to v and the walk P2 gives a walk from \u03b2 \u2208 r(W 0 ) to T in\nG \\ W 0 , a contradiction.\nNote that if W is a shadow-maximal F-transversal, then the F-transversal W 0 in Lemma 3.21\nis also a minimum F-transversal and shadow-maximal. Therefore, by the extremal choice of T \u2217 ,\napplying Lemma 3.21 on T \u2217 cannot produce a shadow-maximal F-transversal T 0 with rG1 ,T (T \u2217 ) \u2282\nrG1 ,T (T 0 ), and hence T \u2217 contains an important v \u2212 T separator for every v \u2208 rG1 ,T (T \u2217 ). Thus by\nTheorem 3.17 for Y = rG1 ,T (T \u2217 ), we get:\n17\n\n\f2\n\nLemma 3.22. With probability at least 2\u2212O(k ) , both rG1 ,T (T \u2217 ) \u2286 Z1 and Z1 \u2229 T \u2217 = \u2205 occur.\nIn the following, we assume that the events in Lemma 3.22 occur. Our next goal is to bound\nthe probability that Z2 covers fG1 ,T (T \u2217 ). Let us define a collection F 0 of subgraphs of G2 as\nfollows: for every subgraph F \u2208 F of G1 , let us add to F 0 the corresponding subgraph F 0 of\nG2 , i.e., F 0 is the same as F with every edge reversed. Note that F 0 is T -connected in G2 : the\ndefinition of T -connected is symmetric with respect to the orientation of the edges. Moreover, T \u2217\nis an F 0 -transversal in G2 : the vertices in T \u2217 remained finite (as Z1 \u2229 T \u2217 = \u2205 by Lemma 3.22),\nand reversing the orientation of the edges does not change the fact that T \u2217 is a transversal. Set\nT \u2217 is also shadow-maximal as an F 0 -transversal in G2 : Definition 3.19 is insensitive to reversing\nthe orientation of the edges and adding some vertices to V \u221e can only decrease the set of potential\ntransversals. Furthermore, the forward shadow of T \u2217 in G2 is same as the reverse shadow of T \u2217\nin G1 , that is, fG2 ,T (T \u2217 ) = rG1 ,T (T \u2217 ). Therefore, assuming that the events in Lemma 3.22 occur,\nevery vertex of fG2 ,T (T \u2217 ) is in V \u221e in G2 . We show that now it holds that T \u2217 contains an important\nv \u2212 T separator in G2 for every v \u2208 rG2 ,T (T \u2217 ) = fG1 ,T (T \u2217 ):\nLemma 3.23. If W is a shadow-maximal F-transversal for some T -connected F and every vertex\nof f (W ) belongs to V \u221e , then W contains an important v \u2212 T separator for every v \u2208 r(W ).\nProof. Suppose to the contrary that there exists v \u2208 r(W ) such that W does not contain an\nimportant v \u2212T separator. Then by Lemma 3.21, there is a another shadow-maximal F-transversal\nW 0 . As W is shadow-maximal, it follows that r(W ) \u222a f (W ) \u222a W = r(W 0 ) \u222a f (W 0 ) \u222a W 0 . Therefore,\nthe nonempty set W 0 \\ W is fully contained in r(W ) \u222a f (W ) \u222a W . However, it cannot contain any\nvertex of f (W ) (as they are infinite by assumption) and cannot contain any vertex of r(W ) (as\nr(W ) \u2282 r(W 0 )), a contradiction.\nRecall that T \u2217 is a shadow-maximal F 0 -transversal in G2 . In particular, T \u2217 is a minimal F 0 transversal in G2 , hence Lemma 3.20 implies that T \u2217 is thin in G2 also. Thus Theorem 3.17 can\nbe used again (this time with Y = rG2 ,T (T \u2217 )) to bound the probability that rG2 ,T (T \u2217 ) \u2286 Z2 and\nZ2 \u2229 T \u2217 = \u2205. As the reverse shadow rG2 ,T (T \u2217 ) in G2 is the same as the forward shadow fG1 ,T (T \u2217 )\nin G, we can state the following:\nLemma 3.24. Assuming the events in Lemma 3.22 occur, with probability at least 2\u2212O(k\nfG1 ,T (T \u2217 ) \u2286 Z2 and Z2 \u2229 T \u2217 = \u2205 occur.\n2\n\n2)\n\nboth\n\nTherefore, with probability (2\u2212O(k ) )2 , the set Z1 \u222a Z2 covers fG1 ,T (T \u2217 ) \u222a rG1 ,T (T \u2217 ) and it is\ndisjoint from T \u2217 . This completes the proof of Theorem 3.5.\nFinally, to prove Theorem 3.6, the derandomized version of Theorem 3.6, we use the deterministic variant DeterministicSets(G, T, k) of the function RandomSet(G, T, k) that, instead of returning\n2\na random set Z, returns a deterministic set Z1 , . . . , Zt of t = 2O(k ) log n sets in poly(n, 4k ) time\n(Theorem 3.18). Therefore, in Steps 1 and 3 of Algorithm 1, we can replace RandomSet with this\ndeterministic variant DeterministicSets, and branch on the choice of one Zi from the returned sets.\nBy the properties of the deterministic algorithm, if I is a yes-instance, then Z has Property (*)\n2\nin at least one of the 2O(k ) log2 n branches. The branching increases the running time only by a\n2\n2\nfactor of (O\u2217 (2O(k ) ))2 and therefore the total running time is O\u2217 (2O(k ) ). This completes the proof\nof Theorem 3.6.\n\n18\n\n\f4\n\nDisjoint Subset-DFVS Compression: Reduction to Shadowless\nSolutions\n\nWe use the algorithm of Theorem 3.6 to construct a set Z of vertices that we want to get rid of. The\nsecond ingredient of our algorithm is an operation that removes a set of vertices without making\nthe problem any easier. This transformation can be conveniently described using the operation\nof taking the torso of a graph. From this point onwards in the paper, we do not follow [11]. In\nparticular, the torso operation is problem-specific. For Disjoint Subset-DFVS Compression,\nwe define it as follows:\nDefinition 4.1. (torso) Let (G, S, T, k) be an instance of Disjoint Subset-DFVS Compression and C \u2286 V (G). Then torso(G, C, S) is a pair (G0 , S 0 ) defined as follows:\n\u2022 G0 has vertex set C and there is (directed) edge (a, b) in G0 if there is an a \u2192 b walk in G\nwhose internal vertices are not in C,\n\u2022 S 0 contains those edges of S whose endpoints are both in C; furthermore, we add the edge\n(a, b) to S 0 if there is an a \u2192 b walk in G that contains an edge from S and whose internal\nvertices are not in C.\nIn particular, if a, b \u2208 C and (a, b) is a directed edge of G and torso(G, C, S) = (G0 , S 0 ), then\ncontains (a, b) as well. Thus G0 is a supergraph of the subgraph of G induced by C. Figure 4\nillustrates the definition of torso with an example.\nThe following easy statement was proved in [11]: the torso operation preserves whether a set\nW \u2286 C is a separator.\nG0\n\nLemma 4.2 ([11]). (torso preserves separation) Let G be a directed graph and C \u2286 V (G). Let\n(G0 , \u2205) = torso(G, C, \u2205) and W \u2286 C. For a, b \u2208 C \\ W , the graph G \\ W has an a \u2192 b path if and\nonly if G0 \\ W has an a \u2192 b path.\nWe need a very similar statement here: the torso operation preserves whether a set W \u2286 C\nhits every S-closed-walk.\nLemma 4.3. (torso preserves S-closed-walks) Let G be a directed graph with C \u2286 V (G) and\nS \u2286 E(G). Let (G0 , S 0 ) = torso(G, C, S), v \u2208 C, and W \u2286 C. Then G \\ W has an S-closed-walk\npassing through v if and only if G0 \\ W has an S 0 -closed-walk passing through v.\nProof. Let P be an S-closed-walk in G \\ W passing through v. If P is fully contained in C, then\nP also appears in G0 \\ W . Otherwise, P contains vertices from both C and V (G) \\ C. Let u, w\nbe two vertices of C such that every vertex of P between u and w is from V (G) \\ C. Then, by\ndefinition of torso, there is an edge (u, w) in G0 . Using such edges, we can modify P to obtain\nanother closed walk say P 0 passing through v that lies completely in G0 but avoids W . Note that\nsince P is a S-closed-walk, at least one of the edges on some u \u2192 w walk that we short-circuited\nabove must have been from S and by Definition 4.1 we would have put the edge (u, w) edge into\nS 0 , which makes P 0 an S 0 -closed-walk in G0 .\nConversely, suppose that P 0 is an S 0 -closed-walk passing through a vertex v in G0 and it avoids\nW \u2286 C. If P 0 uses an edge (u, w) \u2208\n/ E(G), then this means that there is a u \u2192 w walk Puw whose\ninternal vertices are not in C. Using such walks, we modify P 0 to get a closed walk P passing\nthrough v that only uses edges from G, i.e., P is a closed walk in G \\ W . It remains to show that\nP is an S-closed-walk: since P 0 is an S 0 -closed-walk, either some edge of P 0 was originally in S or\nthere exist some a, b \u2208 P 0 such that there is a a \u2192 b walk does not contain any vertex from C and\nsome edge on this walk was originally in S.\n19\n\n\fv1\n\nv7\n\nv6\n\nv5\n\nv2\n\nv3\n\nv4\n\nv3\n\nv4\n\nThe graph G\n\nv1\n\nv2\n\nThe graph torso(G, C, S)\n\nFigure 4: In the top graph G we have C = {v1 , v2 , v3 , v4 }. The edges in S are given by the dotted\nlines. In the bottom graph we show the graph torso(G, C, S). All edges from G[C] appear in this\ngraph. In addition, we also add the edges (v1 , v2 ), (v2 , v4 ) and (v4 , v2 ). The edge (v2 , v3 ) \u2208 G[C] \u2229 S\nappears in S 0 . In addition, we also add the edge (v4 , v2 ) to S 0 since the v4 \u2192 v7 \u2192 v5 \u2192 v2 path\nin G has an edge (v7 , v5 ) \u2208 S.\nIf we want to remove a set Z of vertices, then we create a new instance by taking the torso on\nthe complement of Z:\nDefinition 4.4. Let I = (G, S, T, k) be an instance of Disjoint Subset-DFVS Compression\nand Z \u2286 V (G) \\ T . The reduced instance I/Z = (G0 , S 0 , T, k) is obtained by setting (G0 , S 0 ) =\ntorso(G, V (G) \\ Z, S).\nThe following lemma states that the operation of taking the torso does not make the Disjoint\nSubset-DFVS Compression problem easier for any Z \u2286 V (G) \\ T in the sense that any solution\nof the reduced instance I/Z is a solution of the original instance I. Moreover, if we perform the\ntorso operation for a Z that is large enough to cover the shadow of some solution T \u2217 and also small\nenough to be disjoint from T \u2217 , then T \u2217 becomes a shadowless solution for the reduced instance\nI/Z.\nLemma 4.5. (creating a shadowless instance) Let I = (G, S, T, k) be an instance of Disjoint\nSubset-DFVS Compression and Z \u2286 V (G) \\ T .\n20\n\n\f1. If I is a no-instance, then the reduced instance I/Z is also a no-instance.\n2. If I has solution T 0 with fG,T (T 0 ) \u222a rG,T (T 0 ) \u2286 Z and T 0 \u2229 Z = \u2205, then T 0 is a shadowless\nsolution of I/Z.\nProof. Let C = V (G) \\ Z and (G0 , S 0 ) = torso(G, C, S). To prove the first statement, suppose that\nT 0 \u2286 V (G0 ) is a solution for I/Z. We show that T 0 is also a solution for I. Suppose to the contrary\nthat G \\ T 0 has an S-closed-walk, which has to pass through some vertex v \u2208 T (since G \\ T has no\nS-closed-walks). Note that v \u2208 T and Z \u2286 V (G) \\ T implies v \u2208 C. Then by Lemma 4.3, G0 \\ T 0\nalso has an S 0 -closed-walk passing through v contradicting the fact that T 0 is a solution for I/Z.\nFor the second statement, let T 0 be a solution of I with T 0 \u2229 Z = \u2205 and fG,T (T 0 ) \u222a rG,T (T 0 ) \u2286 Z.\nWe claim T 0 is a solution of I/Z as well. Suppose to the contrary that G0 \\ T 0 has an S 0 -closed-walk\npassing through some vertex v \u2208 C. As v \u2208 C, Lemma 4.3 implies G \\ T 0 also has an S-closed-walk\npassing through v, which is a contradiction as T 0 is a solution of I.\nFinally, we show that T 0 is a shadowless solution, i.e, rG0 ,T (T 0 ) = fG0 ,T (T 0 ) = \u2205. We only prove\nrG0 ,T (T 0 ) = \u2205: the argument for fG0 ,T (T 0 ) = \u2205 is analogous. Assume to the contrary that there\nexists w \u2208 rG0 ,T (T 0 ) (note that we have w \u2208 V (G0 ), i.e., w \u2208\n/ Z). This means that T 0 is a w \u2212 T\nseparator in G0 , i.e., there is no w \u2212 T walk in G0 \\ T 0 . By Lemma 4.2, it follows that there is no\nw \u2212 T walk in G \\ T 0 either, i.e., w \u2208 rG,T (T 0 ). But rG,T (T 0 ) \u2286 Z and therefore we have w \u2208 Z,\nwhich is a contradiction.\nFor every Zi in the output of Theorem 3.6, we use the torso operation to remove the vertices\nin Zi . We prove that this procedure is safe in the following sense:\nLemma 4.6. Let I = (G, S, T, k) be an instance of Disjoint Subset-DFVS Compression. Let\nthe sets in the output of Theorem 3.6 be Z1 , Z2 , . . . , Zt . For every i \u2208 [t], let Gi be the reduced\ninstance G/Zi .\n1. If I is a no-instance, then Gi is also a no-instance for every i \u2208 [t].\n2. If I is a yes-instance, then there exists a solution T \u2217 of I which is a shadowless solution of\nsome Gj for some j \u2208 [t].\nProof. The first claim is easy to see: any solution T 0 of the reduced instance (Gi , S, T, k) is also a\nsolution of (G, S, T, k) (by Lemma 4.5(1), the torso operation does not make the problem easier by\ncreating new solutions).\nBy the derandomization of Covering algorithm, there is a j \u2208 [t] such that Z has the Property\n(\u2217), i.e., there is a solution T \u2217 of I such that Z \u2229 T \u2217 = \u2205 and Z covers shadow of T \u2217 . Then\nLemma 4.5(2) implies that T \u2217 is a shadowless solution for the instance Gj = I/Zj .\n\n5\n\nDisjoint Subset-DFVS Compression: Finding a Shadowless Solution\n\nConsider an instance (G, S, T, k) of Disjoint Subset-DFVS Compression. First, let us assume\nthat we can reach a start point of some edge of S from each vertex of T , since otherwise we can\nclearly remove such a vertex from the graph (and from the set T ) without changing the problem.\n2\nNext, we branch on all 2O(k ) log2 n choices for Z taken from {Z1 , Z2 , . . . , Zt } (given by Theorem 3.6)\nand build a reduced instance I/Z for each choice of Z. By Lemma 4.6, if I is a no-instance, then\nI/Zj is a no-instance for each j \u2208 [t]. If I is a yes-instance, then by Lemma 4.6 there is at least\none i \u2208 [t] such that I has a shadowless solution for the reduced instance I/Zi .\n21\n\n\fC1\n\nC2\n\nC3\n\nCl\nT0\n\nFigure 5: We arrange the strongly connected components of G \\ T 0 in a topological order so that\nthe only possible direction of edges between the strongly connected components is as shown by the\nblue arrow. We will show later that the last component C` must contain a non-empty subset T0 of\nT and further that no edge of S can be present within C` . This allows us to make some progress\nas we shall see in Theorem 5.5.\nLet us consider the branch where Z = Zi and let T 0 \u2286 V \\ T be a hypothetical shadowless\nsolution for I/Z. We know that each vertex in G\\T 0 can reach some vertex of T and can be reached\nfrom a vertex of T . Since T 0 is a solution for the instance (G, S, T, k) of Disjoint Subset-DFVS\nCompression, we know that G \\ T 0 does not have any S-closed-walks. Consider a topological\nordering C1 , C2 , . . ., C` of the strongly connected components of G \\ T 0 , i.e., there can be an edge\nfrom Ci to Cj only if i \u2264 j. We illustrate this in Figure 5.\nDefinition 5.1. (starting/ending points of S) Let S \u2212 and S + be the sets of starting and ending\npoints of edges in S respectively, i.e., S \u2212 = {u | (u, v) \u2208 S} and S + = {v | (u, v) \u2208 S}.\nLemma 5.2. (properties of C` ) For a shadowless solution T 0 for an instance of Disjoint\nSubset-DFVS Compression, let C` be the last strongly connected component in the topological\nordering of G \\ T 0 (refer to Figure 5). Then\n1.\n2.\n3.\n4.\n\nC` contains a non-empty subset T0 of T .\nNo edge of S is present within C` .\nFor each edge (u, v) \u2208 S with u \u2208 C` , we have v \u2208 T 0 .\nIf T 0 \u2229 S + = \u2205, then C` \u2229 S \u2212 = \u2205.\n\nProof.\n1. If C` does not contain any vertex from T , then the vertices of C` cannot reach any\nvertex of T in G \\ T 0 . This means that C` is in the (reverse) shadow of T 0 , which is a\ncontradiction to the fact that T 0 is shadowless.\n2. If C` contains an edge of S, then we will have an S-closed-walk in the strongly connected\ncomponent C` , which is a contradiction, as T 0 is a solution for the instance (G, S, T, k) of\nDisjoint Subset-DFVS Compression.\n3. Consider an edge (u, v) \u2208 S such that u \u2208 C` and v 6\u2208 T 0 . All outgoing edges from u must\nlie within C` , since C` is the last strongly connected component. In particular v \u2208 C` , which\ncontradicts the second claim of the lemma.\n4. Assume that (u, v) \u2208 S and u \u2208 C` (which means u \u2208 C` \u2229 S \u2212 ). Since T 0 contains no vertex\nof S + we have v 6\u2208 T 0 and by the third property we have u 6\u2208 C` , a contradiction.\nLemma 5.2 suggests that we can start by guessing the (nonempty) subset T0 \u2286 T of vertices\nappearing in the last component C` . Given a set X of removed vertices, we say that edge (u, v) \u2208 S\nis traversable from T0 in G \\ X if u, v 6\u2208 X and vertex u (and hence v) is reachable from T0 in G \\ X.\n22\n\n\fIf T 0 is a shadowless solution, then Lemma 5.2(2) implies that no edge of S is traversable from T0\nin G \\ T 0 . There are two ways of making sure that an edge (u, v) \u2208 S is not traversable: (i) by\nmaking u unreachable from T0 , or (ii) by including v in T 0 . The situation is significantly simpler\nif every edge of S is handled the first way, that is, S \u2212 is unreachable from T0 in G \\ T 0 . Then\nT 0 contains a T0 \u2212 S \u2212 separator, and (as we shall see later) we may assume that T 0 contains an\nimportant T0 \u2212 S \u2212 separator. Therefore, we can proceed by branching on choosing an important\nT0 \u2212 S \u2212 separator of size at most k and including it into the solution.\nThe situation is much more complicated if some edges of S are handled the second way. Given\na set X of vertices, we say that an edge (u, v) \u2208 S is critical (with respect to X) if v \u2208 X and u\nis reachable from T0 in G \\ X. Our main observation is that only a bounded number of vertices\ncan be the head of a critical edge in a solution. Moreover, we can enumerate these vertices (more\nprecisely, a bounded-size superset of these vertices) and therefore we can branch on including one\nof these vertices in the solution. We describe next how to enumerate these vertices.\nLet us formalize the property of the vertices we are looking for:\nDefinition 5.3. (critical vertex) For a fixed non-empty set T0 \u2286 V , a vertex v \u2208 (V \\ T0 ) \u2229 S + is\ncalled an `-critical vertex, with respect to T0 , if there exists an edge (u, v) \u2208 S and a set W \u2286 V \\ T0\nsuch that:\n\u2022 |W | \u2264 `,\n\u2022 edge (u, v) is critical with respect to W (that is, u is reachable from T0 in G \\ W and v \u2208 W ),\n\u2022 no edge of S is traversable from T0 in G \\ W .\nWe say that v is witnessed by u, T0 and W .\nWe need an upper bound on the number of critical vertices, furthermore our proof needs to\nbe algorithmic, as we want to find the set of critical vertices, or at least a bounded-size superset\nof this. Roughly speaking, to test if v is a critical vertex, we need to check if there is a set T 0\nthat \"cuts away\" every edge of S from T0 in a way that some vertex u with (u, v) \u2208 S is still\nreachable from T0 . One could argue that it is sufficient to look at important separators: if there\nis such a separator where u is reachable from T0 , then certainly there is an important separator\nwhere u is reachable from T0 . However, describing the requirement as \"cutting away every edge of\nS from T0 \" is imprecise: what we need is that no edge of S is traversable from T0 , which cannot\nbe simply described by the separation of two sets of vertices. We fix this problem by moving to\nan auxiliary graph G0 by duplicating vertices; whether or not an edge of S is traversable from T0\ntranslates to a simple reachability question in G0 . However, due to technical issues that arise from\nthis transformation, it is not obvious how to enumerate precisely the k-critical vertices. Instead,\nwe construct a set F of bounded size that contains each k-critical vertex, and potentially some\nadditional vertices. Thus if the solution has a critical edge, then we can branch on including a\nvertex of F into the solution.\nTheorem 5.4. (bounding critical vertices) Given a directed graph G, a subset S of its edges,\nand a fixed non-empty subset T0 \u2286 V (G), we can find in time O\u2217 (2O(k) ) a set FT0 of 2O(k) vertices\nthat is a superset of all k-critical vertices with respect to T0 .\nProof. We create an auxiliary graph G0 , where the vertex set of G0 consists of two copies for each\nvertex of V and two extra vertices s and t, i.e., V (G0 ) = {vin , vout : v \u2208 V } \u222a {s, t}. The edges of\nG0 are defined as follows (see also Fig. 6):\n\u2022 For each edge e = (u, v) \u2208 E(G), we add the following edges to E(G0 ): if e \u2208 S, then add to\nE(G0 ) an edge (uout , vin ), otherwise add to E(G0 ) an edge (uout , vout ).\n23\n\n\f6\u2208 S 0\n\n6\u2208 S\nv\n\n\u2208 S0\n\n\u2208S\n\nvin\n\nvout\n\nFigure 6: On the left there is a vertex v of G and on the right the corresponding vertices vin and\nvout of G0 .\n\u2022 For each vertex v \u2208 V , we add to E(G0 ) an edge (vin , vout ).\n\u2022 For each vertex v \u2208 V , we add an edge (vin , t) to E(G0 ).\n\u2022 For each vertex v \u2208 T0 , we add an edge (s, vout ) to E(G0 ).\nLet FT0 0 be the set of vertices of G0 which belong to some important s\u2212t separator of size at most\n2k. By Lemma 3.8 the cardinality of FT0 0 is at most 2k * 42k . We define FT0 as {v \u2208 V : vin \u2208 FT0 0 }.\nClearly, the claimed upper bound of 2O(k) on |FT0 | follows, hence it remains to prove that each\nk-critical vertex belongs to FT0 .\nLet x be an arbitrary k-critical vertex witnessed by u, T0 and W . Define W 0 = {vin , vout :\nv \u2208 W } and note that |W 0 | \u2264 2k. The only out-neighbors of s are {vout | v \u2208 T0 } while the only\nin-neighbors of t are {vin | v \u2208 V }. Hence the existence of an s \u2212 t path in G0 implies that there\nis in fact an edge (a, b) \u2208 S that is traversable from T0 in G \\ W (at some point we have to go\nfrom an \"out\" vertex to an \"in\" vertex, and the only possible way to do this is via an edge from\nS). This is a contradiction to Definition 5.3. Therefore, no in-neighbor of t is reachable from s in\nG0 \\ W 0 , i.e., W 0 is an s \u2212 t separator. Finally, a path from T0 to u in G \\ W translates into a\npath from s to uout in G0 \\ W 0 . Consider an important s \u2212 t separator W 00 , i.e., |W 00 | \u2264 |W 0 | and\n+\n+\n0\n0\nRG\n0 \\W 0 (s) \u2282 RG0 \\W 00 (s). As uout is reachable from s in G \\ W we infer that uout is also reachable\nfrom s in G0 \\ W 00 . Consequently xin \u2208 W 00 , as otherwise there would be an s \u2212 t path in G0 \\ W 00 .\nHence xin belongs to FT0 0 , which implies that x belongs to FT0 and the theorem follows.\nThe following theorem characterizes a solution, so that we can find a vertex contained in it by\ninspecting a number of vertices\nS in V bounded by a function of k. We apply Theorem 5.4 for each\nsubset T0 \u2286 T and let F = T0 \u2286T FT0 . Note that |F | \u2264 2|T | * 2O(k) = 2O(|T |+k) , and we can generate\nF in time 2|T | * O\u2217 (2O(k) ) = O\u2217 (2O(|T |+k) )\nTheorem 5.5. (pushing) Let I = (G, S, T, k) be an instance of Disjoint Subset-DFVS Compression having a shadowless solution and let F be a set generated by the algorithm of Theorem 5.4.\nLet G+ be obtained from G by introducing a new vertex t and adding an edge (u, t) for every u \u2208 S \u2212 .\nThen there exists a solution T 0 \u2286 V \\ T for I such that either\n\u2022 T 0 contains a vertex of F \\ T , or\n\u2022 T 0 contains an important T0 \u2212 ({t} \u222a (T \\ T0 )) separator of G+ for some non-empty T0 \u2286 T .\nProof. Let T 0 be any shadowless solution for I and let T0 be the subset of T belonging to the last\nstrongly connected component of G \\ T 0 ; by Property 1 of Lemma 5.2, T0 is nonempty.\nWe consider two cases: either there is a T0 \u2212 S \u2212 path in G \\ T 0 or not. First assume that there\nis a path from T0 to a vertex u \u2208 S \u2212 in G \\ T 0 . Clearly, u \u2208 C` , since all vertices of T0 belong to C`\n24\n\n\fand no edge from C` can go to previous strongly connected components. Consider any edge from S\nthat has u as its starting point, say (u, v) \u2208 S. By Property 3 of Lemma 5.2, we know that v \u2208 T 0 .\nObserve that v is a k-critical vertex witnessed by u, T0 , and T 0 , since |T 0 | \u2264 k, by definition of u,\nthere is a path from T0 to u in G \\ T 0 ; and by Property 3 of Lemma 5.2, no edge of S is traversable\nfrom T0 . Consequently, by the property of the set F , we know that v \u2208 T 0 \u2229 F 6= \u2205 and the theorem\nholds.\nNow we assume that no vertex of S \u2212 is reachable from T0 in G \\ T 0 . By the definition of T0 , the\nset T 0 is a T0 \u2212 (T \\ T0 ) separator in G, hence we infer that T 0 is a T0 \u2212 ({t} \u222a (T \\ T0 )) separator in\nG+ . Let T \u2217 be the subset of T 0 reachable from T0 without going through any other vertices of T 0 .\nThen T \u2217 is clearly a T0 \u2212({t}\u222a(T \\T0 )) separator in G+ . Let T \u2217\u2217 be the minimal T0 \u2212({t}\u222a(T \\T0 ))\nseparator contained in T \u2217 . If T \u2217\u2217 is an important T0 \u2212 ({t} \u222a (T \\ T0 )) separator, then we are done,\nas T 0 itself contains T \u2217\u2217 .\nOtherwise, there exists an important T0 \u2212 ({t} \u222a (T \\ T0 )) separator T \u2217\u2217\u2217 that dominates T \u2217\u2217 ,\n+\n+\n00 = (T 0 \\ T \u2217\u2217 ) \u222a T \u2217\u2217\u2217\ni.e., |T \u2217\u2217\u2217 | \u2264 |T \u2217\u2217 | and RG\n+ \\T \u2217\u2217 (T0 ) \u2282 RG+ \\T \u2217\u2217\u2217 (T0 ). Now we claim that T\nis a solution for the instance (G, S, T, k) of Disjoint Subset-DFVS Compression. If we show\nthis, then we are done, as |T 00 | \u2264 |T 0 | and T 00 contains the important T0 \u2212 ({t} \u222a (T \\ T0 )) separator\nT \u2217\u2217\u2217 .\nSuppose T 00 is a not a solution for the instance (G, S, T, k) of Disjoint Subset-DFVS Compression. We have |T 00 | \u2264 |T 0 | \u2264 k (as , |T \u2217\u2217\u2217 | \u2264 |T \u2217\u2217 |) and T 00 \u2229 T = \u2205 (as T \u2217\u2217\u2217 is an important\nT0 \u2212({t}\u222a(T \\T0 )) separator of G+ , hence disjoint from T ). Therefore, the only possible problem is\nthat there is an S-closed-walk in G\\T 00 passing through some vertex v \u2208 T \u2217\u2217 \\T \u2217\u2217\u2217 ; in particular, this\nimplies that there is a v\u2212S \u2212 walk in G\\T 00 . Since T \u2217\u2217 is a minimal T0 \u2212({t}\u222a(T \\T0 )) separator and\n+\n+\n+\n\u2217\u2217 \\ T \u2217\u2217\u2217 ) \u2286 R+\n(T ), implying v \u2208 RG\nRG\n+ \\T 00 (T0 ). This\n+ \\T \u2217\u2217 (T0 ) \u2282 RG+ \\T \u2217\u2217\u2217 (T0 ), we have (T\nG+ \\T 00 0\n\u2212\n00\n00\ngives a T0 \u2212S walk via v in G\\T , a contradiction as T contains an (important) T0 \u2212({t}\u222a(T \\T0 ))\nseparator by construction.\nTheorem 5.5 tells us that there is always a minimum solution which either contains some critical\nvertex of F or an important T0 \u2212 ({t} \u222a (T \\ T0 )) separator of G+ where T0 is a non-empty subset\nof T . In the former case, we branch into |F | instances, in each of which we put one vertex of F\nto the solution, generating 2O(|T |+k) instances with reduced budget. Next we can assume that the\nsolution does not contain any vertex of F and we try all 2|T | \u2212 1 choices for T0 . For each guess of\nT0 we enumerate at most 4k important T0 \u2212 ({t} \u222a (T \\ T0 )) separators of size at most k in time\nO\u2217 (4k ) as given by Lemma 3.8. This gives the branching algorithm described in Algorithm 2.\n\n6\n\nDisjoint Subset-DFVS Compression: Summary of Algorithm\n\nLemma 4.6 and the Branch algorithm together combine to give a bounded search tree FPT\nalgorithm for Disjoint Subset-DFVS Compression described in Algorithm 3.\nWe then repeatedly perform Steps 1 and 2. Note that for every instance, one execution of steps\n2\n1 and 2 gives rise to 2O(k ) log2 n instances such that for each instance, either we know that the\nanswer is NO or the budget k has decreased, because we have assumed that from each vertex of T\none can reach the set S \u2212 , and hence each important separator is non-empty. Therefore, considering\na level as an execution of Step 1 followed by Step 2, the height of the search tree is at most k.\n2\nEach time we branch into at most 2O(k ) log2 n directions (as |T | is at most k + 1). Hence the total\n\u0010\n\u0011k\n2\nnumber of nodes in the search tree is 2O(k ) log2 n .\nLemma 6.1. For every n and k \u2264 n, we have (log n)k \u2264 (2k log k)k +\n25\n\nn\n2k\n\n(the logs are to base 2)\n\n\fAlgorithm 2: Branch\nInput: An instance I = (G, S, T, k) of Disjoint Subset-DFVS Compression.\nOutput: A new set of 2O(|T |+k) instances of Disjoint Subset-DFVS Compression\nwhere the budget k is reduced.\n1: for every vertex v \u2208 F \\ T found by Theorem 5.4 do\n2:\nCreate a new instance Iv = (G \\ v, S, T, k \u2212 1) of Disjoint Subset-DFVS Compression.\n3: for every non-empty subset T0 of T : do\n4:\nUse Lemma 3.8 to enumerate all the at most 4k important T0 \u2212 ({t}\u2212 \u222a (T \\ T0 )) separators\nof size at most k in G+ .\n5:\nLet the important separators be B = {B1 , B2 , . . . , Bm }.\n6:\nfor each i \u2208 [m] do\n7:\nCreate a new instance IT0 ,i = (G \\ Bi , S, T, k \u2212 |Bi |) of Disjoint Subset-DFVS\nCompression.\nAlgorithm 3: FPT Algorithm for Subset-DFVS\nStep 1: For a given instance I = (G, S, T, k), use Theorem 3.6 to obtain a set of instances\n2\n{Z1 , Z2 , . . . , Zt } where t = 2O(k ) log2 n and Lemma 4.6 implies\n\u2022 If I is a no-instance, then all the reduced instances Gj = G/Zj are no-instances for\nall j \u2208 [t]\n\u2022 If I is a yes-instance, then there is at least one i \u2208 [t] such that there is a solution T \u2217\nfor I which is a shadowless solution for the reduced instance Gi = G/Zi .\n2\n\nAt this step we branch into 2O(k ) log2 n directions.\nStep 2 : For each of the instances obtained from the above step, we run the Branch\nalgorithm to obtain a set of 2O(k+|T |) instances where in each case either the answer is NO,\nor the budget k is reduced. We solve these instances recursively and return YES if at least\none of them returns YES.\n\nProof. If\n\nlog n\n1+log log n\n\n\u2265 k, then n \u2265 (2 log n)k . Otherwise we have\n\n(2 log n) as follows: 2k log k \u2265\n\n2 log n. But,\n\nk2\n2 log n\n\n=\n\n2 log n log k\n1+log log n .\n\nlog n\n2(1+log log n)2\n\nNow\n\n2 log n log k\n1+log log n\n\nlog n\n1+log log n\n\n< k and then (4k log k) \u2265\n\n\u2265 log n \u21d4 2 log k \u2265 1 + log log n \u21d4 k 2 \u21d4\n7\n\nwhich is greater than 1 for n \u2265 22 .\n\n\u0010\n\u0011k\n\u0010\n\u0011k\n2\n2\nThe total number of nodes in the search tree is 2O(k ) log2 n\n= 2O(k ) (log2 n)k =\n\u0010\n\u00112\n3\n3\n3\n(2O(k ) )(log2 n)k \u2264 (2O(k ) ) (2k log k)k + 2nk \u2264 2O(k ) n2 .\nWe then check the leaf nodes and see if there are any S-closed-walks left even after the budget\nk has become zero. If the graph in at least one of the leaf nodes is S-closed-walk free, then the\n3\ngiven instance is a yes-instance. Otherwise it is a no-instance. This gives an O\u2217 (2O(k ) ) algorithm\n3\nfor Disjoint Subset-DFVS Compression. By Lemma 2.3, we have an O\u2217 (2O(k ) ) algorithm for\nthe Subset-DFVS problem.\n\n26\n\n\f7\n\nConclusion and Open Problems\n\nIn this paper we gave the first fixed-parameter algorithm for Directed Subset Feedback Vertex Set parameterized by the size of the solution. Our algorithm used various tools from the FPT\nworld such as iterative compression, bounded-depth search trees, random sampling of important\nseparators, etc. We also gave a general family of problems for which we can do random sampling\nof important separators and obtain a set which is disjoint from a minimum solution and covers its\nshadow. We believe this general approach will be useful for deciding the fixed-parameter tractability status of other problems in directed graphs, where we do not know that many techniques unlike\nundirected graphs.\nThe next natural question is whether Subset-DFVS has a polynomial kernel or can we rule\nout such a possibility under some standard assumptions? The recent developments [12, 30, 29] in\nthe field of kernelization may be useful in answering this question. In the field of exact exponential\nalgorithms, Razgon [41] gave an O\u2217 (1.9977n ) algorithm for DFVS which was used by Chitnis et\nal. [10] to give an O\u2217 (1.9993n ) algorithm for the more general Subset-DFVS problem. It would\nbe interesting to improve either of this algorithms.\n\nAcknowledgements\nWe thank Marcin Pilipczuk for pointing out a missing case in an earlier version of the algorithm.\n\nReferences\n[1] Bafna, V., Berman, P., Fujito, T.: A 2-Approximation Algorithm for the Undirected Feedback\nVertex Set Problem. SIAM J. Discrete Math. 12(3), 289\u2013297 (1999)\n[2] Becker, A., Bar-Yehuda, R., Geiger, D.: Randomized Algorithms for the Loop Cutset Problem.\nJ. Artif. Intell. Res. (JAIR) 12, 219\u2013234 (2000)\n[3] Bodlaender, H.L.: On Disjoint Cycles. In: WG. pp. 230\u2013238 (1991)\n[4] Bonsma, P., Lokshtanov, D.: Feedback Vertex Set in Mixed Graphs. In: WADS. pp. 122\u2013133\n(2011)\n[5] Cao, Y., Chen, J., Liu, Y.: On Feedback Vertex Set: New Measure and New Structures. In:\nSWAT. pp. 93\u2013104 (2010)\n[6] Chen, J., Fomin, F.V., Liu, Y., Lu, S., Villanger, Y.: Improved algorithms for feedback vertex\nset problems. J. Comput. Syst. Sci. 74(7), 1188\u20131198 (2008)\n[7] Chen, J., Liu, Y., Lu, S.: An Improved Parameterized Algorithm for the Minimum Node\nMultiway Cut Problem. Algorithmica 55(1), 1\u201313 (2009)\n[8] Chen, J., Liu, Y., Lu, S., O'Sullivan, B., Razgon, I.: A fixed-parameter algorithm for the\ndirected feedback vertex set problem. J. ACM 55(5) (2008)\n[9] Chitnis, R.H., Cygan, M., Hajiaghayi, M.T., Marx, D.: Directed subset feedback vertex set is\nfixed-parameter tractable. In: ICALP (1). pp. 230\u2013241 (2012)\n[10] Chitnis, R.H., Fomin, F.V., Lokshtanov, D., Misra, P., Ramanujan, M.S., Saurabh, S.: Faster\nexact algorithms for some terminal set problems. In: IPEC. pp. 150\u2013162 (2013)\n27\n\n\f[11] Chitnis, R.H., Hajiaghayi, M., Marx, D.: Fixed-Parameter Tractability of Directed Multiway\nCut Parameterized by the Size of the Cutset. SIAM J. Comput. 42(4), 1674\u20131696 (2013)\n[12] Cygan, M., Kratsch, S., Pilipczuk, M., Pilipczuk, M., Wahlstr\u00f6m, M.: Clique Cover and Graph\nSeparation: New Incompressibility Results. TOCT 6(2), 6 (2014)\n[13] Cygan, M., Nederlof, J., Pilipczuk, M., Pilipczuk, M., van Rooij, J.M.M., Wojtaszczyk, J.O.:\nSolving Connectivity Problems Parameterized by Treewidth in Single Exponential Time. In:\nFOCS. pp. 150\u2013159 (2011)\n[14] Cygan, M., Pilipczuk, M., Pilipczuk, M., Wojtaszczyk, J.O.: On multiway cut parameterized\nabove lower bounds. TOCT 5(1), 3 (2013)\n[15] Cygan, M., Pilipczuk, M., Pilipczuk, M., Wojtaszczyk, J.O.: Subset feedback vertex set is\nfixed-parameter tractable. SIAM J. Discrete Math. 27(1), 290\u2013309 (2013)\n[16] Dehne, F., Fellows, M.R., Langston, M.A., Rosamond, F.A., Stevens, K.: An O(2O(k) n3 ) FPT\nAlgorithm for the Undirected Feedback Vertex Set Problem. Theory Comput. Syst. 41(3), 479\u2013\n492 (2007)\n[17] Downey, R.G., Fellows, M.R.: Fixed-Parameter Tractability and Completeness I: Basic Results. SIAM J. Comput. 24(4), 873\u2013921 (1995)\n[18] Downey, R.G., Fellows, M.R.: Parameterized Complexity. Springer-Verlag (1999), 530 pp.\n[19] Even, G., Naor, J., Schieber, B., Sudan, M.: Approximating Minimum Feedback Sets and\nMulti-Cuts in Directed Graphs. In: IPCO. pp. 14\u201328 (1995)\n[20] Even, G., Naor, J., Zosin, L.: An 8-Approximation Algorithm for the Subset Feedback Vertex\nSet Problem. SIAM J. Comput. 30(4), 1231\u20131252 (2000)\n[21] Flum, J., Grohe, M.: Parameterized Complexity Theory. Springer-Verlag (2006), 493 pp.\n[22] Fomin, F.V., Gaspers, S., Kratsch, D., Liedloff, M., Saurabh, S.: Iterative compression and\nexact algorithms. Theor. Comput. Sci. 411(7-9), 1045\u20131053 (2010)\n[23] Guo, J., Gramm, J., H\u00fcffner, F., Niedermeier, R., Wernicke, S.: Compression-based fixedparameter algorithms for feedback vertex set and edge bipartization. J. Comput. Syst. Sci.\n72(8), 1386\u20131396 (2006)\n[24] H\u00fcffner, F., Komusiewicz, C., Moser, H., Niedermeier, R.: Fixed-Parameter Algorithms for\nCluster Vertex Deletion. In: LATIN. pp. 711\u2013722 (2008)\n[25] Kakimura, N., Kawarabayashi, K., Kobayashi, Y.: Erd\u00f6s-p\u00f3sa property and its algorithmic\napplications: parity constraints, subset feedback set, and subset packing. In: SODA. pp. 1726\u2013\n1736 (2012)\n[26] Kanj, I.A., Pelsmajer, M.J., Schaefer, M.: Parameterized Algorithms for Feedback Vertex Set.\nIn: IWPEC. pp. 235\u2013247 (2004)\n[27] Karp, R.M.: Reducibility Among Combinatorial Problems. In: Complexity of Computer Computations. pp. 85\u2013103 (1972)\n\n28\n\n\f[28] Kratsch, S., Pilipczuk, M., Pilipczuk, M., Wahlstr\u00f6m, M.: Fixed-parameter tractability of\nmulticut in directed acyclic graphs. In: ICALP (1). pp. 581\u2013593 (2012)\n[29] Kratsch, S., Wahlstr\u00f6m, M.: Compression via matroids: a randomized polynomial kernel for\nodd cycle transversal. In: SODA. pp. 94\u2013103 (2012)\n[30] Kratsch, S., Wahlstr\u00f6m, M.: Representative Sets and Irrelevant Vertices: New Tools for Kernelization. In: FOCS. pp. 450\u2013459 (2012)\n[31] Lokshtanov, D., Marx, D.: Clustering with local restrictions. Inf. Comput. 222, 278\u2013292 (2013)\n[32] Lokshtanov, D., Narayanaswamy, N.S., Raman, V., Ramanujan, M.S., Saurabh, S.: Faster\nparameterized algorithms using linear programming. ACM Transactions on Algorithms 11(2),\n15 (2014)\n[33] Lokshtanov, D., Ramanujan, M.S.: Parameterized Tractability of Multiway Cut with Parity\nConstraints. In: ICALP (1). pp. 750\u2013761 (2012)\n[34] Marx, D.: Parameterized graph separation problems. Theor. Comput. Sci. 351(3), 394\u2013406\n(2006)\n[35] Marx, D., Razgon, I.: Fixed-parameter tractability of multicut parameterized by the size of\nthe cutset. SIAM J. Comput. 43(2), 355\u2013388 (2014)\n[36] Mehlhorn, K.: Data Structures and Algorithms 2: Graph Algorithms and NP-completeness.\nSpringer (1984)\n[37] Naor, M., Schulman, L.J., Srinivasan, A.: Splitters and Near-Optimal Derandomization. In:\nFOCS. pp. 182\u2013191 (1995)\n[38] Niedermeier, R.: Invitation to Fixed-Parameter Algorithms. Oxford University Press (2006)\n[39] Raman, V., Saurabh, S., Subramanian, C.R.: Faster Fixed Parameter Tractable Algorithms\nfor Undirected Feedback Vertex Set. In: ISAAC. pp. 241\u2013248 (2002)\n[40] Raman, V., Saurabh, S., Subramanian, C.R.: Faster fixed parameter tractable algorithms for\nfinding feedback vertex sets. ACM Transactions on Algorithms 2(3), 403\u2013415 (2006)\n[41] Razgon, I.: Computing Minimum Directed Feedback Vertex Set in O(1.9977n ). In: ICTCS.\npp. 70\u201381 (2007)\n[42] Razgon, I., O'Sullivan, B.: Almost 2-SAT is fixed-parameter tractable. J. Comput. Syst. Sci.\n75(8), 435\u2013450 (2009)\n[43] Reed, B.A., Smith, K., Vetta, A.: Finding odd cycle transversals. Oper. Res. Lett. 32(4),\n299\u2013301 (2004)\n[44] Seymour, P.D.: Packing Directed Circuits Fractionally. Combinatorica 15(2), 281\u2013288 (1995)\n\n29\n\n\f"}