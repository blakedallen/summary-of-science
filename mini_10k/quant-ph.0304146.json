{"id": "http://arxiv.org/abs/quant-ph/0304146v1", "guidislink": true, "updated": "2003-04-23T03:39:38Z", "updated_parsed": [2003, 4, 23, 3, 39, 38, 2, 113, 0], "published": "2003-04-23T03:39:38Z", "published_parsed": [2003, 4, 23, 3, 39, 38, 2, 113, 0], "title": "Solving a Maze With a Quantum Computer", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=quant-ph%2F0304092%2Cquant-ph%2F0304020%2Cquant-ph%2F0304180%2Cquant-ph%2F0304012%2Cquant-ph%2F0304022%2Cquant-ph%2F0304179%2Cquant-ph%2F0304111%2Cquant-ph%2F0304101%2Cquant-ph%2F0304047%2Cquant-ph%2F0304045%2Cquant-ph%2F0304006%2Cquant-ph%2F0304147%2Cquant-ph%2F0304063%2Cquant-ph%2F0304169%2Cquant-ph%2F0304013%2Cquant-ph%2F0304004%2Cquant-ph%2F0304057%2Cquant-ph%2F0304038%2Cquant-ph%2F0304070%2Cquant-ph%2F0304009%2Cquant-ph%2F0304138%2Cquant-ph%2F0304064%2Cquant-ph%2F0304008%2Cquant-ph%2F0304157%2Cquant-ph%2F0304177%2Cquant-ph%2F0304081%2Cquant-ph%2F0304048%2Cquant-ph%2F0304146%2Cquant-ph%2F0304075%2Cquant-ph%2F0304182%2Cquant-ph%2F0304124%2Cquant-ph%2F0304118%2Cquant-ph%2F0304058%2Cquant-ph%2F0304044%2Cquant-ph%2F0304025%2Cquant-ph%2F0304096%2Cquant-ph%2F0304069%2Cquant-ph%2F0304073%2Cquant-ph%2F0304171%2Cquant-ph%2F0304024%2Cquant-ph%2F0304097%2Cquant-ph%2F0304173%2Cquant-ph%2F0304115%2Cquant-ph%2F0304143%2Cquant-ph%2F0304200%2Cquant-ph%2F0304007%2Cquant-ph%2F0304204%2Cquant-ph%2F0304175%2Cquant-ph%2F0304176%2Cquant-ph%2F0304154%2Cquant-ph%2F0304001%2Cquant-ph%2F0304148%2Cquant-ph%2F0304133%2Cquant-ph%2F0304071%2Cquant-ph%2F0304003%2Cquant-ph%2F0304078%2Cquant-ph%2F0304193%2Cquant-ph%2F0304141%2Cquant-ph%2F0304061%2Cquant-ph%2F0304080%2Cquant-ph%2F0304072%2Cquant-ph%2F0304202%2Cquant-ph%2F0304109%2Cquant-ph%2F0304102%2Cquant-ph%2F0304131%2Cquant-ph%2F0304110%2Cquant-ph%2F0304035%2Cquant-ph%2F0304113%2Cquant-ph%2F0304029%2Cquant-ph%2F0304049%2Cquant-ph%2F0304040%2Cquant-ph%2F0304201%2Cquant-ph%2F0304034%2Cquant-ph%2F0304178%2Cquant-ph%2F0304136%2Cquant-ph%2F0304105%2Cquant-ph%2F0304203%2Cquant-ph%2F0304206%2Cquant-ph%2F0304160%2Cquant-ph%2F0304056%2Cquant-ph%2F0304153%2Cquant-ph%2F0304114%2Cquant-ph%2F0304149%2Cquant-ph%2F0304031%2Cquant-ph%2F0304156%2Cquant-ph%2F0304002%2Cquant-ph%2F0409010%2Cquant-ph%2F0409111%2Cquant-ph%2F0409109%2Cquant-ph%2F0409082%2Cquant-ph%2F0409013%2Cquant-ph%2F0409162%2Cquant-ph%2F0409158%2Cquant-ph%2F0409074%2Cquant-ph%2F0409105%2Cquant-ph%2F0409202%2Cquant-ph%2F0409066%2Cquant-ph%2F0409014%2Cquant-ph%2F0409150%2Cquant-ph%2F0409019%2Cquant-ph%2F0409199&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Solving a Maze With a Quantum Computer"}, "summary": "It is well known, and appreciated, that quantum computers have the potential\nto be the most powerful computational devices ever created. This newfound power\ncomes from a quantum parallelism effect that allows the computer to be in\nmultiple states at the same time. This property of quantum parallelism, while\nsuited to handle common problems such as factoring and searching an unorganized\ndatabase, is extremely well-suited to handle the task of solving a binary maze.\nI propose an algorithm that can be used to solve a binary maze on a quantum\ncomputer, with guaranteed accuracy. While it does work, it does come with a few\nsetbacks, in that the maze must have no flaws, and that the computer requires a\nnumber of qubits equal to the number of decisions in the maze, plus log 2 of\nthe decisions.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=quant-ph%2F0304092%2Cquant-ph%2F0304020%2Cquant-ph%2F0304180%2Cquant-ph%2F0304012%2Cquant-ph%2F0304022%2Cquant-ph%2F0304179%2Cquant-ph%2F0304111%2Cquant-ph%2F0304101%2Cquant-ph%2F0304047%2Cquant-ph%2F0304045%2Cquant-ph%2F0304006%2Cquant-ph%2F0304147%2Cquant-ph%2F0304063%2Cquant-ph%2F0304169%2Cquant-ph%2F0304013%2Cquant-ph%2F0304004%2Cquant-ph%2F0304057%2Cquant-ph%2F0304038%2Cquant-ph%2F0304070%2Cquant-ph%2F0304009%2Cquant-ph%2F0304138%2Cquant-ph%2F0304064%2Cquant-ph%2F0304008%2Cquant-ph%2F0304157%2Cquant-ph%2F0304177%2Cquant-ph%2F0304081%2Cquant-ph%2F0304048%2Cquant-ph%2F0304146%2Cquant-ph%2F0304075%2Cquant-ph%2F0304182%2Cquant-ph%2F0304124%2Cquant-ph%2F0304118%2Cquant-ph%2F0304058%2Cquant-ph%2F0304044%2Cquant-ph%2F0304025%2Cquant-ph%2F0304096%2Cquant-ph%2F0304069%2Cquant-ph%2F0304073%2Cquant-ph%2F0304171%2Cquant-ph%2F0304024%2Cquant-ph%2F0304097%2Cquant-ph%2F0304173%2Cquant-ph%2F0304115%2Cquant-ph%2F0304143%2Cquant-ph%2F0304200%2Cquant-ph%2F0304007%2Cquant-ph%2F0304204%2Cquant-ph%2F0304175%2Cquant-ph%2F0304176%2Cquant-ph%2F0304154%2Cquant-ph%2F0304001%2Cquant-ph%2F0304148%2Cquant-ph%2F0304133%2Cquant-ph%2F0304071%2Cquant-ph%2F0304003%2Cquant-ph%2F0304078%2Cquant-ph%2F0304193%2Cquant-ph%2F0304141%2Cquant-ph%2F0304061%2Cquant-ph%2F0304080%2Cquant-ph%2F0304072%2Cquant-ph%2F0304202%2Cquant-ph%2F0304109%2Cquant-ph%2F0304102%2Cquant-ph%2F0304131%2Cquant-ph%2F0304110%2Cquant-ph%2F0304035%2Cquant-ph%2F0304113%2Cquant-ph%2F0304029%2Cquant-ph%2F0304049%2Cquant-ph%2F0304040%2Cquant-ph%2F0304201%2Cquant-ph%2F0304034%2Cquant-ph%2F0304178%2Cquant-ph%2F0304136%2Cquant-ph%2F0304105%2Cquant-ph%2F0304203%2Cquant-ph%2F0304206%2Cquant-ph%2F0304160%2Cquant-ph%2F0304056%2Cquant-ph%2F0304153%2Cquant-ph%2F0304114%2Cquant-ph%2F0304149%2Cquant-ph%2F0304031%2Cquant-ph%2F0304156%2Cquant-ph%2F0304002%2Cquant-ph%2F0409010%2Cquant-ph%2F0409111%2Cquant-ph%2F0409109%2Cquant-ph%2F0409082%2Cquant-ph%2F0409013%2Cquant-ph%2F0409162%2Cquant-ph%2F0409158%2Cquant-ph%2F0409074%2Cquant-ph%2F0409105%2Cquant-ph%2F0409202%2Cquant-ph%2F0409066%2Cquant-ph%2F0409014%2Cquant-ph%2F0409150%2Cquant-ph%2F0409019%2Cquant-ph%2F0409199&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "It is well known, and appreciated, that quantum computers have the potential\nto be the most powerful computational devices ever created. This newfound power\ncomes from a quantum parallelism effect that allows the computer to be in\nmultiple states at the same time. This property of quantum parallelism, while\nsuited to handle common problems such as factoring and searching an unorganized\ndatabase, is extremely well-suited to handle the task of solving a binary maze.\nI propose an algorithm that can be used to solve a binary maze on a quantum\ncomputer, with guaranteed accuracy. While it does work, it does come with a few\nsetbacks, in that the maze must have no flaws, and that the computer requires a\nnumber of qubits equal to the number of decisions in the maze, plus log 2 of\nthe decisions."}, "authors": ["Mark A Bashuk"], "author_detail": {"name": "Mark A Bashuk"}, "author": "Mark A Bashuk", "arxiv_comment": "3 Pages, To be presented to the Senior Project Boards on May 9th", "links": [{"href": "http://arxiv.org/abs/quant-ph/0304146v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/quant-ph/0304146v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "quant-ph", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "quant-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/quant-ph/0304146v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/quant-ph/0304146v1", "journal_reference": null, "doi": null, "fulltext": "Solving a maze with a quantum computer\nMark A. Bashuk*\nCenter for Advanced Studies in Math, Science, and Technology, Wheeler High School,\nMarietta, GA 30067\n(January 17, 2003)\nIt is well known, and appreciated, that quantum computers have the potential to be the most powerful\ncomputational devices ever created. This newfound power comes from a 'quantum parallelism' effect that allows\nthe computer to be in multiple states at the same time. This property of quantum parallelism, while suited to\nhandle common problems such as factoring and searching an unorganized database, is extremely well-suited to\nhandle the task of solving a binary maze. I propose an algorithm that can be used to solve a binary maze on a\nquantum computer, with guaranteed accuracy. While it does work, it does come with a few setbacks, in that the\nmaze must have no flaws, and that the computer requires a number of qubits equal to the number of decisions in\nthe maze, plus log2 of the decisions.\n\nQuantum computers have the potential to be the most powerful computational\ndevices ever created [1], and while there are\nnearly infinite ways to use them effectively,\nonly a few are of academic or industrial use\n[2]. It is known that quantum computers are\nfast at searching databases, and that they are\neven faster at factoring prime numbers [3-4].\nWhat I am proposing is a simple, yet effective\nalgorithm that by using minimal resources can\nsolve any binary maze much faster than any\nclassical computer.\nA binary maze is a simple thing. It is\nthe common tree-branching shape\naccompanying any single-elimination bracket\n[5]. But the most important thing about a\nbinary maze, especially for my algorithm, is\nthat there are no exceptions to the design. Each\nline has one input, and two outputs, until we\nreach the end of the \"maze\" in which there is\nno further output. This rule has zero\nexceptions, as any violations of it would cause\nutter chaos in a world where chaos is enough\nof a problem already. This action of one input,\nand two outputs, causes a huge problem for\nclassical computers. Because it doubles in size\neach time, the problem takes exponentially\nmore time to solve as the number of decisions\nincreases [5]. For example, a 100 step binary\nmaze would have 2^100 decisions at the end\nof the maze, a number too large to be easily\ndealt with.\nSolving mazes, while not a tough task\nfor an 8-year old, is not difficult because of the\nsimplicity of the maze. Given a maze of large\nenough size, a computer would be needed to\nsolve the maze quickly. While there are many\nalgorithms for solving a maze, the most noted\n\nand useful algorithm for solving a maze of any\ntype is called depth-first search [6]. Depth-first\nsearch works by exhausting every branch of\nthe maze, while attempting to limit the number\nof tries. Depth-first search is equivalent to\nwalking down a hallway, keeping your right\nhand on the wall, and only turning around at\neach dead-end, keeping track of where you go.\nThis method gets the job done quicker than\nany other non-probabilistic algorithm could,\nbut given a large enough problem, it is\nintractable [6].\nGiven this problem, a beautiful and\nsimple answer arises from the chaos. Use a\nquantum computer. A quantum computer can\ntry all the paths of a binary maze at one time,\nand dramatically reduce the time needed to\nsolve a childish problem like a maze [7].\nWhat I propose is a simple algorithm\nfor solving a maze with a quantum computer.\nA few of the characteristics must be predetermined for this algorithm to work. First,\nthe binary maze must have no defects in it;\nthat is all of the inputs except the last must\nhave two outputs. The last line will not have\nany outputs, because otherwise it would not be\nthe last line. Also, there will be a number of\nqubits in the quantum computer equal to the\nnumber of the decisions in the maze, plus log2\nN, with N being the number of decisions in the\nmaze.\nThe first step in the maze is the most\nobvious. The only reason the state of the first\ngate matters is because of the counting qubits.\nWith a maze of N-decisions, we will have log2\nN + N qubits in the computer. The first log2 N\nqubits (the counting qubits) are for keeping\ntrack of our position in the maze, which is\n\n\fwhat each gate reads to know what part of the\nqubit to change. Besides that, the rest of the\nzeros are just used as reference so that there is\nan obvious starting qubit.\nThe reason log2 N qubits are used for\nthe number of counting qubits is that because\nwith N decisions, you need log2 N binary\ndigits to keep room for every possible number\n[8]. Therefore, step 2 of the algorithm, reads\nthe first log2 N qubits (the counting qubits),\nand prepares to move to that position.\nAfter reading the counting qubits and\ndetermining our position, we move to that\nqubit and perform our transformation on it. At\neach decision, we have a choice of going up or\ngoing down, and that is represented with a 1 or\na 0. The advantage of the quantum computer is\nthat we can simultaneously travel up and down\nat the same time [1]. Along those lines, the 1s\nand 0s of the qubit represent each possible\ndecision. Step 3 puts the qubit into a\nsuperposition of up and down at the point that\nstep 2 declared.\nStep 4 is the simplest of all the steps,\nbut still quite necessary. Step 4 changes the\ncounting qubits by one, so that the next gate\nknows to move along in the maze. That is the\nsmall clause that the extra log2 N qubits allows\nus to do. Otherwise, it would be a guessing\ngame as to what qubits to modify. Step 5 tells\nus to repeat the process described in steps 2, 3,\nand 4 until we reach the \"end\" of the maze.\nThe end of the maze is the last row in the\nmaze, in which there are no decision to be\nmade. We have just traversed through N decisions, and being composed of binary decisions, there are 2N possibilities at the end of\nthe maze.\nStep 6 completes the algorithm. Of\nthe many points at the end of the maze, the\ncreator determines one point to be the end. It is\nat this point that we look at the value of the\nqubit that is in the computer. The order of the\n1s and 0s in the qubit tells us the path that\nleads to the corresponding endpoint. At first\nglance, this seems silly, as knowing the end\npoint of the maze is what appears we are\ntrying to find. But, if we try to solve a normal\nmaze, we are always given a beginning and an\nending point, and our job is to find the path in\nbetween. My algorithm does exactly that.\nWhile this algorithm does work, there\nare several problems associated with it. The\n\napplications of many quantum algorithms are\ninstantaneously obvious [2]. Unfortunately for\nmine, no non maze-related applications seem\nfeasible. While there could be some applications developed in the future, that is a much\nmore difficult problem than creating the algorithm. Also, the accuracy required in discerning the solution to a complicated maze is\nextremely high. On a large maze, possibly\nN=100 decisions, there would be 2^100\ndifferent possibilities, and the differences\nbetween many of them is just a few parts in\n100. While that is the problem for the engineer\nof the quantum computer running this\nalgorithm, it does provide a definite deterrent\nto implementation.\nIn comparison to depth-first search on\na classical computer, this algorithm is\nexponentially faster. In a worst-case scenario,\ndepth-first search would take 59 steps to solve\na maze requiring five decisions [9]. A\nquantum computer could do it in five steps.\nEven on average, the difference of thirty to\nthree is quite large. The difference becomes\nmuch more influential as the size of the maze\nincreases; a maze of 50 decisions would\nrequire 1.125 x 1016 steps, while a quantum\ncomputer could do it in fifty, a percentage\ndifference of 4.4x 10-12%. A modern computer\ncan perform 109 calculations per second,\nmeaning it would take it 13 days to solve what\na quantum computer could solve in seconds.\nAs Vandersypen, et. al. noted, experimental\nrealization of quantum algorithms can already\nbe done on five qubit NMR quantum\ncomputers [10]. While a quantum computer\nwith that few qubits could be used to solve a\ntwo-step maze, a computer of large enough\nsize to solve a maze of difficulty has yet to be\ncreated. Hopefully, by the time I am able to\npursue my own endeavors in this field, either\nmassively qubit quantum computers will be\nbuilt, or new algorithms will be designed to\ntake advantage of my process.\nIn conclusion, I have presented a completely\nnew quantum algorithm that can be used to\nsolve a maze. While it is currently only a\ntheory, a quantum computer of large enough\nsize needs to be built to test this out. My\nalgorithm works with guaranteed accuracy, if\nthe experimenter has enough accuracy on his\n\n\fmeasurement tools, and the maze is designed\nin accordance with my definition.\nI thank D.R. Finkelstein for mentoring\nme and introducing me to this field. I must\nthank Mohsen Shiri, M. Chapman and T.A.B.\nKennedy of GT for their hospitality. I would\nlike to thank Jeff Rosen, Chris Neill, David\nBerta, Rad Fraasa, Ryan Kane, and everyone\nelse at Wheeler with whom I discussed this. I\nwould like to thank Gregg Farmer, Cathie\nBanks, Phyllis Boudreaux, and Pam Diers for\nthe opportunities of my internship.\n* Email Address: CokeisBomb@aol.com.\n[1] M.A. Nielsen, I. Chuang, Quantum\nComputation and Quantum Information (New\nYork: Cambridge University Press, 2000).\n[2] G. Brassard, quant-ph/9602014.\n[3] L. Grover: \"Quantum mechanics helps in\nsearching for a needle in a haystack,\" Phys.\nRev. Lett. 79 (1997) 325 (quant-ph/9706033).\n\n[4] P. Shor: \"Polynomial-time algorithms for\nprime factorization and discrete logarithms on\na quantum computer,\" SIAM J. Computing 26\n(1997) 1484 (quant-ph/9508027).\n[5] Binary mazes.\n[6] S. Aaronson (private communication).\n[7] D. Gottesman,\nhttp://qso.lanl.gov/~gottesma/QComputers.ht\nml.\n[8] H.F. Legard, P.E. Mcquaid, A. Singer,\nFrom Baker Street to Binary: An Introduction\nto Computers and Computer Programming\n(New York : McGraw-Hill, 1983).\n[9] For a binary maze of N-decisions, a\nclassical computer can solve it at in at most\n2N+1 - (N+2) steps.\n[10] L.M.K. Vandersypen, et al., Phy. Rev.\nLet. 25, 5452 (2000).\n\n\f"}