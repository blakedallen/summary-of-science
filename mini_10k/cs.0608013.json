{"id": "http://arxiv.org/abs/cs/0608013v1", "guidislink": true, "updated": "2006-08-02T15:00:02Z", "updated_parsed": [2006, 8, 2, 15, 0, 2, 2, 214, 0], "published": "2006-08-02T15:00:02Z", "published_parsed": [2006, 8, 2, 15, 0, 2, 2, 214, 0], "title": "Pull-Based Data Broadcast with Dependencies: Be Fair to Users, not to\n  Items", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0608057%2Ccs%2F0608017%2Ccs%2F0608106%2Ccs%2F0608029%2Ccs%2F0608084%2Ccs%2F0608008%2Ccs%2F0608061%2Ccs%2F0608096%2Ccs%2F0608081%2Ccs%2F0608094%2Ccs%2F0608101%2Ccs%2F0608107%2Ccs%2F0608016%2Ccs%2F0608013%2Ccs%2F0608045%2Ccs%2F0608069%2Ccs%2F0608010%2Ccs%2F0608001%2Ccs%2F0608050%2Ccs%2F0608015%2Ccs%2F0608030%2Ccs%2F0608046%2Ccs%2F0608098%2Ccs%2F0608053%2Ccs%2F0608038%2Ccs%2F0608093%2Ccs%2F0608033%2Ccs%2F0608074%2Ccs%2F0608072%2Ccs%2F0608105%2Ccs%2F0608028%2Ccs%2F0608117%2Ccs%2F0608064%2Ccs%2F0608089%2Ccs%2F0608082%2Ccs%2F0608119%2Ccs%2F0608073%2Ccs%2F0608055%2Ccs%2F0608019%2Ccs%2F0608027%2Ccs%2F0608060%2Ccs%2F0608009%2Ccs%2F0608039%2Ccs%2F0608095%2Ccs%2F0608120%2Ccs%2F0608062%2Ccs%2F0608023%2Ccs%2F0608066%2Ccs%2F0608002%2Ccs%2F0608007%2Ccs%2F0608006%2Ccs%2F0608024%2Ccs%2F0608018%2Ccs%2F0608051%2Ccs%2F0608005%2Ccs%2F0608112%2Ccs%2F0608048%2Ccs%2F0608014%2Ccs%2F0608111%2Ccs%2F0608052%2Ccs%2F0608003%2Ccs%2F0608077%2Ccs%2F0608122%2Ccs%2F0608080%2Ccs%2F0608070%2Ccs%2F0608092%2Ccs%2F0608086%2Ccs%2F0608054%2Ccs%2F0608022%2Ccs%2F0608025%2Ccs%2F0608068%2Ccs%2F0608020%2Ccs%2F0608044%2Ccs%2F0608063%2Ccs%2F0608099%2Ccs%2F0608116%2Ccs%2F0608026%2Ccs%2F0608125%2Ccs%2F0608021%2Ccs%2F0608104%2Ccs%2F0608108%2Ccs%2F0507024%2Ccs%2F0507003%2Ccs%2F0507036%2Ccs%2F0507010%2Ccs%2F0507018%2Ccs%2F0507061%2Ccs%2F0507052%2Ccs%2F0507007%2Ccs%2F0507072%2Ccs%2F0507054%2Ccs%2F0507037%2Ccs%2F0507040%2Ccs%2F0507050%2Ccs%2F0507053%2Ccs%2F0507044%2Ccs%2F0507048%2Ccs%2F0507001%2Ccs%2F0507005%2Ccs%2F0507011%2Ccs%2F0507060&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Pull-Based Data Broadcast with Dependencies: Be Fair to Users, not to\n  Items"}, "summary": "Broadcasting is known to be an efficient means of disseminating data in\nwireless communication environments (such as Satellite, mobile phone\nnetworks,...). It has been recently observed that the average service time of\nbroadcast systems can be considerably improved by taking into consideration\nexisting correlations between requests. We study a pull-based data broadcast\nsystem where users request possibly overlapping sets of items; a request is\nserved when all its requested items are downloaded. We aim at minimizing the\naverage user perceived latency, i.e. the average flow time of the requests. We\nfirst show that any algorithm that ignores the dependencies can yield arbitrary\nbad performances with respect to the optimum even if it is given arbitrary\nextra resources. We then design a $(4+\\epsilon)$-speed\n$O(1+1/\\epsilon^2)$-competitive algorithm for this setting that consists in 1)\nsplitting evenly the bandwidth among each requested set and in 2) broadcasting\narbitrarily the items still missing in each set into the bandwidth the set has\nreceived. Our algorithm presents several interesting features: it is simple to\nimplement, non-clairvoyant, fair to users so that no user may starve for a long\nperiod of time, and guarantees good performances in presence of correlations\nbetween user requests (without any change in the broadcast protocol). We also\npresent a $ (4+\\epsilon)$-speed $O(1+1/\\epsilon^3)$-competitive algorithm which\nbroadcasts at most one item at any given time and preempts each item broadcast\nat most once on average. As a side result of our analysis, we design a\ncompetitive algorithm for a particular setting of non-clairvoyant job\nscheduling with dependencies, which might be of independent interest.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0608057%2Ccs%2F0608017%2Ccs%2F0608106%2Ccs%2F0608029%2Ccs%2F0608084%2Ccs%2F0608008%2Ccs%2F0608061%2Ccs%2F0608096%2Ccs%2F0608081%2Ccs%2F0608094%2Ccs%2F0608101%2Ccs%2F0608107%2Ccs%2F0608016%2Ccs%2F0608013%2Ccs%2F0608045%2Ccs%2F0608069%2Ccs%2F0608010%2Ccs%2F0608001%2Ccs%2F0608050%2Ccs%2F0608015%2Ccs%2F0608030%2Ccs%2F0608046%2Ccs%2F0608098%2Ccs%2F0608053%2Ccs%2F0608038%2Ccs%2F0608093%2Ccs%2F0608033%2Ccs%2F0608074%2Ccs%2F0608072%2Ccs%2F0608105%2Ccs%2F0608028%2Ccs%2F0608117%2Ccs%2F0608064%2Ccs%2F0608089%2Ccs%2F0608082%2Ccs%2F0608119%2Ccs%2F0608073%2Ccs%2F0608055%2Ccs%2F0608019%2Ccs%2F0608027%2Ccs%2F0608060%2Ccs%2F0608009%2Ccs%2F0608039%2Ccs%2F0608095%2Ccs%2F0608120%2Ccs%2F0608062%2Ccs%2F0608023%2Ccs%2F0608066%2Ccs%2F0608002%2Ccs%2F0608007%2Ccs%2F0608006%2Ccs%2F0608024%2Ccs%2F0608018%2Ccs%2F0608051%2Ccs%2F0608005%2Ccs%2F0608112%2Ccs%2F0608048%2Ccs%2F0608014%2Ccs%2F0608111%2Ccs%2F0608052%2Ccs%2F0608003%2Ccs%2F0608077%2Ccs%2F0608122%2Ccs%2F0608080%2Ccs%2F0608070%2Ccs%2F0608092%2Ccs%2F0608086%2Ccs%2F0608054%2Ccs%2F0608022%2Ccs%2F0608025%2Ccs%2F0608068%2Ccs%2F0608020%2Ccs%2F0608044%2Ccs%2F0608063%2Ccs%2F0608099%2Ccs%2F0608116%2Ccs%2F0608026%2Ccs%2F0608125%2Ccs%2F0608021%2Ccs%2F0608104%2Ccs%2F0608108%2Ccs%2F0507024%2Ccs%2F0507003%2Ccs%2F0507036%2Ccs%2F0507010%2Ccs%2F0507018%2Ccs%2F0507061%2Ccs%2F0507052%2Ccs%2F0507007%2Ccs%2F0507072%2Ccs%2F0507054%2Ccs%2F0507037%2Ccs%2F0507040%2Ccs%2F0507050%2Ccs%2F0507053%2Ccs%2F0507044%2Ccs%2F0507048%2Ccs%2F0507001%2Ccs%2F0507005%2Ccs%2F0507011%2Ccs%2F0507060&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Broadcasting is known to be an efficient means of disseminating data in\nwireless communication environments (such as Satellite, mobile phone\nnetworks,...). It has been recently observed that the average service time of\nbroadcast systems can be considerably improved by taking into consideration\nexisting correlations between requests. We study a pull-based data broadcast\nsystem where users request possibly overlapping sets of items; a request is\nserved when all its requested items are downloaded. We aim at minimizing the\naverage user perceived latency, i.e. the average flow time of the requests. We\nfirst show that any algorithm that ignores the dependencies can yield arbitrary\nbad performances with respect to the optimum even if it is given arbitrary\nextra resources. We then design a $(4+\\epsilon)$-speed\n$O(1+1/\\epsilon^2)$-competitive algorithm for this setting that consists in 1)\nsplitting evenly the bandwidth among each requested set and in 2) broadcasting\narbitrarily the items still missing in each set into the bandwidth the set has\nreceived. Our algorithm presents several interesting features: it is simple to\nimplement, non-clairvoyant, fair to users so that no user may starve for a long\nperiod of time, and guarantees good performances in presence of correlations\nbetween user requests (without any change in the broadcast protocol). We also\npresent a $ (4+\\epsilon)$-speed $O(1+1/\\epsilon^3)$-competitive algorithm which\nbroadcasts at most one item at any given time and preempts each item broadcast\nat most once on average. As a side result of our analysis, we design a\ncompetitive algorithm for a particular setting of non-clairvoyant job\nscheduling with dependencies, which might be of independent interest."}, "authors": ["Julien Robert", "Nicolas Schabanel"], "author_detail": {"name": "Nicolas Schabanel"}, "author": "Nicolas Schabanel", "links": [{"href": "http://arxiv.org/abs/cs/0608013v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cs/0608013v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cs/0608013v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/cs/0608013v1", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "Pull-Based Data Broad ast with Dependen ies:\nBe Fair to Users, not to Items\n\nJulien Robert and Ni olas S habanel\n\u00c9 ole normale sup\u00e9rieure de Lyon\n\narXiv:cs/0608013v1 [cs.DS] 2 Aug 2006\n\nLaboratoire de l'informatique du parall\u00e9lisme\nUMR CNRS ENS-LYON INRIA UCBL n\u25e6 5668\n46 all\u00e9e d'Italie, 69364 Lyon Cedex 07, Fran e\n\nhttp://perso.ens-lyon.fr/{julien.robert, ni olas.s habanel}\n\n22nd September 2018\n\nAbstra t\nBroad asting is known to be an e\u001e ient means of disseminating data in wireless ommuni ation environments (su h as Satellite, mobile phone networks,...). It has been re ently observed\nthat the average servi e time of broad ast systems an be onsiderably improved by taking\ninto onsideration existing orrelations between requests. We study a pull-based data broad ast\nsystem where users request possibly overlapping sets of items; a request is served when all its\nrequested items are downloaded. We aim at minimizing the average user per eived laten y, i.e.\nthe average \u001dow time of the requests. We \u001crst show that any algorithm that ignores the dependen ies an yield arbitrary bad performan es with respe t to the optimum even if it is given\narbitrary extra resour es. We then design a (4 + \u01eb)-speed O(1 + 1/\u01eb2 )- ompetitive algorithm\nfor this setting that onsists in 1) splitting evenly the bandwidth among ea h requested set and\nin 2) broad asting arbitrarily the items still missing in ea h set into the bandwidth the set has\nre eived. Our algorithm presents several interesting features: it is simple to implement, nonlairvoyant, fair to users so that no user may starve for a long period of time, and guarantees\ngood performan es in presen e of orrelations between user requests (without any hange in the\nbroad ast proto ol). We also present a (4 + \u01eb)-speed O(1 + 1/\u01eb3 )- ompetitive algorithm whi h\nbroad asts at most one item at any given time and preempts ea h item broad ast at most on e\non average. As a side result of our analysis, we design a ompetitive algorithm for a parti ular\nsetting of non- lairvoyant job s heduling with dependen ies, whi h might be of independent\ninterest.\nMulti ast s heduling, Pull-based broad ast, Correlation-based, Non- lairvoyant\ns heduling, Resour e augmentation.\nKeywords:\n\nOmitted proofs, lemmas, notes and \u001cgures\nmay be found in appendix.1\n1\n\nThis work is supported by the CNRS Grant\n\n.\n\n\f1 Introdu tion\nMotivations.\n\nBroad asting is known to be an e\u001e ient means of disseminating data in wireless\n\nommuni ation environments (su h as Satellite, mobile phone networks,...).\nobserved in [13, 12, 5\u2104 that the average servi e time of broad ast systems\nproved by taking into\n\nonsideration existing\n\nresear h on data broad asting was\n\nIt has been re ently\n\nan be\n\nonsiderably im-\n\norrelations between requests. Most of the theoreti al\n\nondu t until very re ently under the assumption that user\n\nrequests are for a single item at a time and are independent of ea h other. However, users usually\nrequest several items at a time whi h are, to a large extent,\nserver: users request web pages that are\n\nstyle sheets, title bar, news headers,..., and all these\nwhen any individual page is requested.\nmay\n\norrelated. A typi al example is a web\n\nomposed of a lot of shared\n\nomponents have to be downloaded together\n\nNote that some of these\n\nonstantly vary over time (size and/or\n\nomponents su h as logos,\n\nomponents,\n\ne.g.\n\nnews header,\n\nontent).\n\nPull-based data broad ast with dependen ies.\n\nWe study a pull-based data broad ast\n\nsystem where users request possibly overlapping sets of items. We aim at minimizing the average\n\ni.e.\n\nuser per eived laten y,\n\nthe\n\naverage \u001dow time\n\nof the requests, where the \u001dow time of a request\n\nis de\u001cned as the time elapsed between its arrival and the end of the download of the last requested\nitem.\n\nWe assume that user\n\nannot start downloading an item in the middle of its broad ast.\n\nWhen the broad ast of an item starts, all the outstanding requests asking for this item\nstart downloading it.\n\nSeveral items may be downloaded simultaneously.\n\nsetting where the s heduler is\n\nnon- lairvoyant\n\nWe\n\nonsider the\n\nan\n\nonline\n\nand dis overs ea h request at the time of its arrival;\n\nfurthermore, the s heduler does not even know the lengths of the requested items and is aware of\nthe\n\nompletion of a broad ast only at the time of its\n\nompletion. Items are however labeled with a\n\nunique ID to allow their retrieval. Note that this are the typi al requirements of a real life systems\nwhere items may vary over time.\n\nBa kground.\n\nIt is well known that preemption is required in su h systems in order to a hieve\n\nreasonable performan es.\n\nFurthermore, [7\u2104 proved that even without dependen ies, no algorithm\n\n\u221a\n\u03a9( n)\n\nan guarantee a \u001dow time less than\nalgorithms\n\nonsists then in penalizing the optimum by in reasing the bandwidth given to the al-\n\ngorithm so that its performan es\n\nresour e augmentation\nalgorithms that\n\nbandwidth\n\nould not be\n\nompared to the optimum.\n\nompared dire tly to the optimum\n\ns>1\n\nThis te hnique is known as\n\nost. In our\n\nand show that it a hieves a \u001dow time less than a\n\nost with a bandwidth\n\ns,\n\nan be\n\nand provides interesting insights on the relative performan es of di\u001berent\n\nalgorithm a bandwidth\noptimum\n\ntimes the optimal. The traditional approa h in online\n\n1.\n\nFormally, an algorithm is\n\nits \u001dow time is at most at a fa tor\n\nc\n\nase, we give to our\nonstant times the\n\ns-speed c- ompetitive\n\nif when given a\n\nof the optimum \u001dow time with bandwidth\n\n1.\n\nTo our knowledge the only positive results [7, 9\u2104 in the online setting assume that the requests\nare independent and ask for one single item.\nalgorithms\n\nEqui\n\nand\n\nLWF\n\nalive requested items, is\n\nare\n\nompetitive.\n\nThe authors show that without dependen ies the\n\nEqui\n\n(4 + \u01eb)-speed (2 + 8/\u01eb)-\n\nwhi h splits evenly the bandwidth among the\n\nompetitive, and\n\nLWF,\n\nwhi h broad asts the item\n\n6-speed\nO(1) = 6,000,000). In the\nat time t = 0, the problem is\n\nwhere the aggregate waiting times of the outstanding requests for that item is maximized, is\n\nO(1)-\n\no\u001fine\n\nompetitive (where the bound proved on the\n\nompetitive ratio is\n\nsetting, where the requests and their arrival times are known\n\nalready NP-hard but better bounds\n\nan be obtained using linear programming [14, 10, 11, 1, 2\u2104;\n\nthe latest result, [2\u2104 to our knowledge, is a\nis the number of requests and\n\nT\n\nO(log2 (T + n)/ log log(T + n))-approximation\n\nwhere\n\nn\n\nthe arrival time of the last request. To our knowledge, our results\n\nare the \u001crst provably e\u001e ient algorithms to deal with dependen ies in the online setting.\nCon erning the push-based variant of the problem, where the requests arrival times follow some\nPoisson pro ess and the requested sets are identi ally distributed a\n\nording to a \u001cxed distribution,\n\nonstant fa tor approximations exist in presen e of dependen ies [4, 3, 6\u2104.\n\n1\n\nThe latest result,\n\n\f[6\u2104, obtains a\n\n4-approximation\n\nif the requested sets are drawn a\n\nording to an arbitrary \u001cxed\n\ndistribution over a \u001cnite number of subsets of items.\n\nOur\n\nontribution.\n\nden ies\n\nWe \u001crst show that the performan es of any algorithm that ignores the depen-\n\nan be arbitrarily far from the optimal\n\nost even if it is given\n\narbitrary\n\nextra resour es. We\n\n2\nthen design a (4 + \u01eb)-speed O(1 + 1/\u01eb )- ompetitive algorithm B-EquiSet for the non- lairvoyant\ndata broad ast problem with dependen ies.\n\nB-EquiSet\n\nonsists in 1) splitting evenly the band-\n\nwidth among ea h requested set and in 2) broad asting arbitrarily the items still missing in ea h\nset into the bandwidth the set has re eived. The spirit of the algorithm is that\n\nthe users over the items\n\none should favor\n\nin the sense that it splits the bandwidth evenly among the outstanding re-\n\nquested sets and arbitrarily among the outstanding items within ea h requested set. Our algorithm\npresents several interesting features: it is simple to implement, non- lairvoyant, fair to users so that\nno user may starve for a long period of time, and improves performan es in presen e of\nbetween user requests (without any\n\norrelations\n\nhange in the broad ast proto ol). Presi ely, we prove that:\n\nTheorem 1 (Main result) For all \u03b4 > 0 and \u01eb > 0, B-EquiSet is a (1 + \u03b4)(4 + \u01eb)-speed\n(2 + 8/\u01eb)(1 + 1/\u03b4)- ompetitive algorithm for the online data broad ast problem with dependen ies.\nOne\n\nould obje t that\n\nBut using the same te hni\nalgorithm\n\nB-EquiSet\n\nis unrealisti\n\nas in [7\u2104, it is easy to modify\n\nB-EquiSet-Edf\n\nsin e it\n\nan split the bandwidth arbitrarily.\n\nB-EquiSet to\n\nobtain an other\n\nompetitive\n\n(des ribed at the end of se tion 5) whi h, with a slight in rease of\n\nbandwidth, ensures that at most one item is broad ast at any given time and that ea h broad ast\nis preempted at most on e on average.\n\nFor all \u03b4 > 0 and \u01eb > 0, B-EquiSet-Edf is a\n(1 + \u03b4)2 (4 + \u01eb)-speed (2 + 8/\u01eb)(1 + 1/\u03b4)2 - ompetitive algorithm for the online data broad ast problem\n\nTheorem 2 (Bounded preemption)\n\nwith dependen ies, where ea h broad ast is preempted at most on e on average.\n\nOur analysis takes its inspiration in the methods developed in [7\u2104. In order to extend their analysis to our algorithm, we have also designed a new\n\nompetitive algorithm\n\nEqui\u25e6A\n\nfor a parti ular\n\nsetting of non- lairvoyant job s heduling with dependen ies whi h might be of independent interest\n(Theorem 7).\nThe next se tion gives a formal des ription of the problem and shows that it is required to take\ndependen ies into a\n\nEquiSet\n\nount to obtain a\n\nompetitive algorithm. Se tion 3 exposes the algorithm\n\nand introdu es useful notations. Se tion 4 designs a\n\nompetitive algorithm\n\nvariant of job s heduling with dependen ies that is used in Se tion 5 to analyze the\nof our algorithm\n\nEqui\u25e6A\n\nB-\n\nfor a\n\nompetitiveness\n\nB-EquiSet.\n\n2 De\u001cnitions and notations\nThe problem.\n\n\u2022\n\u2022\n\nA set\nA set\n\nS hedule.\n\nThe input\n\nonsists of:\n\nI of n items I1 , . . . , In ea h of length l1 , . . . , ln\nS of q requests for q non-empty sets of items S1 , . . . , Sq \u2286 I, with arrival times a1 , . . . , aq .\ns-speed s hedule\n\ns to the items of I over\nthe time. Formally, it is des ribed by a fun tion r : I \u00d7 [0, \u221e) \u2192 [0, s] su h that for all time\nP\nt,\nI\u2208I r(I, t) 6 s; r(I, t) represents the rate of the broad ast of I at time t, i.e., the amount\n\u2032\nof bandwidth allotted to item I at time t.\nAn item Ii is broad ast between t and t if its\n\u2032\nbroad ast starts at time t and if the total bandwidth allotted to Ii between t and t sums up\nR t\u2032\nto li , i.e., if\nt r(Ii , t) dt = li . We denote by c(Ii , k) the date of the ompletion of the k th\nA\n\nis an allo ation of a bandwidth of size\n\n2\n\n\fbroad ast of item\n\nIi .\n\nFormally, it is the \u001crst date su h that\n\nc(Ii , 0) = 0). We denote by b(Ii , k) the date\nb(Ii , k) = inf{t > c(Ii , k \u2212 1) : r(Ii , t) > 0}.2\n\nR c(Ii ,k)\n0\n\nof the beginning of the\n\nr(Ii , t)dt = k li (note that\nkth broad ast of item Ii , i.e.\n\nCost.\n\nFor all time t, let B(Ii , t) be the time of the beginning of the \u001crst broad ast of item Ii\nt, i.e. B(Ii , t) = min{b(Ii , k) : b(Ii , k) > t}. For all time t, C(Ii , t) denotes the time of the\nend of the \u001crst broad ast of item Ii starting after t, i.e. C(Ii , t) = min{c(Ii , k) : b(Ii , k) > t}. The\nompletion time cj of request Sj is the \u001crst time su h that every item in Sj has been broad ast\n(or downloaded) after its arrival time aj , i.e., cj = maxIi \u2208Sj C(Ii , aj ). We aim at minimizing the\nP\naverage ompletion time de\u001cned as 1q Sj \u2208S(cj \u2212 aj ), or equivalently the \u001dow time de\u001cned as the\nP\nsum of the waiting times, i.e. B-FlowTime =\nSj \u2208S(cj \u2212 aj ). We denote by BOPTs (S) the \u001dow\ntime of an optimal s-speed s hedule for a given instan e S.\nafter\n\ns-Speed c-Competitive\n\nAlgorithms.\n\nWe\n\nonsider the online setting of the problem, in whi h\n\nthe s heduler gets informed of the existen e of ea h request\ns heduler is not even aware of the lengths\nnumber\n\nn\n\n\u221a\no( n)\n\nand not before.\n\nThe\n\nsee [7\u2104) that in this setting, it is impossible to\n\nonje ture su h as\n\nP = N P ).\n\ns\n\neven if all items\n\nThe traditional approa h in\n\nonsists then in penalizing the optimum by in reasing the bandwidth given to\n\nthe algorithm so that its performan es\n\nresour e augmentation\n\nalgorithms that\n\naj\n\nthe optimum \u001dow time for a given bandwidth\n\nhave unit length (independently of any\nonline algorithms\n\nat time\n\nof the requested items in ea h set nor of the total\n\ne.g.,\n\nof available items. It is well known (\n\napproximate within a fa tor\n\nas\n\n(li )Ii \u2208Sj\n\nSj\n\nould not be\n\nalgorithm a bandwidth\n\nan be\n\nompared to the optimum. This te hnique is known\n\nand provides interesting insights on the relative performan es of di\u001berent\n\ns>1\n\nompared dire tly to the optimum\n\nost. In our\n\nand show that it a hieves a \u001dow time less than a\n\nase, we give to our\nonstant times the\n\ns-speed c- ompetitive if when given\ns times as many resour es as the adversary, its ost is no more than c times the optimum ost.\nIn our ase the resour e is the bandwidth, and we ompare the ost As of a s heduler A with a\nbandwidth s, to the ost BOPT1 of an optimal s hedule on a unit bandwidth. (We denote by As\nthe ost of an algorithm A when given a bandwidth s.)\n\noptimum\n\nost with a bandwidth\n\n1.\n\nFormally, an algorithm is\n\nWe show below that ignoring existing dependen ies\n\nFa t 3 (Dependen ies\n\n2 \u221a\n3s n\n\nConsider \u001crst a deterministi\n\nalgorithm\n\nA\n\nwhi h is given a bandwidth\n\ns\n\nand\n\nonsider the\n\nt = 0. Sin e A ignores the dependen ies, we\n\u221a\nA: one request asks for the n \u2212 n items that have\n\u221a\n\u221a\nn)/s, and n requests ask for ea h of the remaining\nbeen served the most by A at time t = (n \u2212\n\u221a\n\u221a\nn items. Then, algorithm A serves ea h request only after time t = (n \u2212 n)/s and its \u001dow time is\n\u221a\n\u221a\n\u221a\nat least ( n + 1)(n \u2212 n)/s \u223c n n/s. The optimal solution with bandwidth only 1 \u001crst broad asts\n\u221a\n\u221a\nn unit length\nrequests and then broad asts the n \u2212\nn remaining\nthe items orresponding to the\n\u221a\nP n\n3\n2 \u221a\nitems; the optimal \u001dow time is then (n +\nk=1 k) \u223c 2 n. This shows a gap of 3s n between\u221athe\noptimal ost with bandwidth 1 and every deterministi algorithm with bandwidth s = O( n),\ninstan e where\n\nn\n\nies is sNo algorithm A that ignores dependen\n1\u221a\nif A is deterministi , and for any c < 6s n if A is ran-\n\nannot be ignored)\n\nspeed c- ompetitive for any c <\ndomized.\nProof.\n\nan lead to arbitrarily bad solutions.\n\ndi\u001berent items are requested at time\n\nset them after the exe ution of the algorithm\n\n2\n\nRemark that this formalization prevents from broad asting the same item twi e at a given time or from aborting\nthe urrent broad ast of an item. The \u001crst point is not restri tive sin e if two broad asts of the same item overlap,\none redu es the servi e time by using the beginning of the bandwidth allotted to the se ond broad ast to omplete\nearlier the \u001crst, and then the end of the \u001crst to omplete the se ond on time. The se ond point is at our stri t\ndisadvantage sin e it does not penalize an optimal s hedule that would never start a broad ast to abort it later on.\n\n3\n\n\fwhi h ignores the dependen ies. We extend the result to randomized algorithms thanks to Yao's\n\n\u0003\n\nprin iple [16, 15\u2104 (Omitted).\n\n3 The Algorithm\nDe\u001cnitions.\n\nA request\n\nB-EquiSet\n\nSj\n\nfor a subset of items is said to be\n\ndownload of at least one item\n\nIi \u2208 Sj whose\nalive for Sj at time t.\n\nthat an item\n\nIi \u2208 S j\n\ndownload is not yet\n\nThe B-EquiSet Algorithm.\nof alive requests at time\n\nt\n\nis not yet\n\nalive\n\nompleted at time\nompleted (\n\ni.e.,\n\nsu\n\nat time t if t > aj and if the\nt, i.e., t < C(Ii , aj ). We say\nh that aj 6 t < C(Ii , aj )) is\n\ns. Let R(t) be the set\nt, B-EquiSet allo ates\nfor ea h alive request Sj , it\n\nConsider that we are given a bandwidth\n\nduring the exe ution of the algorithm. For all\n\ns/|R(t)|; then,\ns/|R(t)| bandwidth allotted to Sj among its alive items. Pre isely, it allo\nto ea h item Ii alive for Sj at time t, an arbitrary amount of bandwidth, rj,i (t) > 0, su h\nP\nIi aliveP\nfor Sj rj,i (t) = s/|R(t)|. B-EquiSet then broad asts at time t ea h item Ii at a\nri (t) = Sj \u2208R(t) : Ii is alive for Sj at time t rj,i (t).\n\nto ea h alive request the same amount of bandwidth,\nsplits\n\narbitrarily\n\nthe\n\nFigure 1 illustrates an exe ution of the algorithm, in whi h\n\nrequest\n\nSj ,\n\nto divide up the bandwidth allotted to\n\nSj\n\nB-EquiSet\n\nequally among every\n\nates\nthat\nrate\n\nhooses for ea h alive\n\nSj 's\n\nalive items.\n\nThe instan e\n\n1.5\n\nonsists of three\nB-EquiSet allocation\nOptimal allocation\nwith bandwidth s = 1.5\nwith bandwidth s = 1.0\nitems A, B, C of length 1.5 and four Requests\nTime\nFlowTime = 14.67\nFlow Time = 11\nrequests S1 = {A, B, C} (in red),\n0.0\n{ABC}\nS2 = {A} (in green), S3 = {B}\n(in blue), and S4 = {C} (in yelC\nC B A\nlow) with arrival times a1 = 0,\n1.0\n{A}\na2 = 1, a3 = 2, and a4 = 3.\nA CB\nTwo s hedules are presented: BA\nEquiSet with bandwidth s = 1.5\n2.0\n{B}\n(to the left) and an optimal s hedule with unit bandwidth (to the\nCB\nB\nright). Time \u001dies downwards. Four\n3.0\n{C}\nlines to the right of ea h s hedule\nB\nA\nC\nrepresent ea h request's lifetime;\nthe bandwidth allotted to ea h re4.0\nquest is outlined in their respe C\nB\ntive olor. B-EquiSet \u001crst allots all the bandwidth to S1 and\n5.0\nC\nsplits it evenly among its items A,\nC\nB and C (items A, B , and C get\ndarker and darker as their broad6.0\nasts progress). At time 1, S2 arrives and B-EquiSet splits the\nbandwidth\nevenly between S1 and S2 , thus item A is broad ast at a rate: 1.5 \u00d7 ( 21 + 21 \u00d7 31 ) = 1 and its broad ast ompletes at\ntime 2. At time 2, S3 arrives, and B-EquiSet splits the bandwidth evenly between S1 , S2 and S3 ; S1 has ompleted\nits download of A, thus B-EquiSet splits the bandwidth allotted to S1 among B and C only; S2 was too late to\ndownload A, so it starts a new broad ast of A. S1 , S2 , S3 , and S4 are \u001cnally served at time 3 + 23 , 5 + 61 , 5 + 65 and\n6, for a total \u001dow time B-EquiSet1.5 (S) = 14 + 32 whereas BOPT1 = 11.\n2.0\n\n3.67\n\n4.5\n\n4.17\n\n1.5-speed\n\nexe ution of a\n\nB-EquiSet\n\n3.0\n\n3.0\n3.83\n\nFigure 1: An\n\nalgorithm.\n\nNote that bandwidth adjustments for ea h item are ne essary only when new requests arrive or\nwhen the broad ast of some item\n\nompletes.\n\n4\n\n\fB-EquiSet\n\nAs in [7\u2104, we dedu e the performan es of our broad ast algorithm\nof the performan es of an other algorithm,\n\nEqui\u25e6A,\n\nproblem studied in [8\u2104 whi h in ludes dependen ies.\nanalyzes the\nof\n\nompetitiveness of algorithm\n\nB-EquiSet\n\nEqui\u25e6A\nB-EquiSet.\n\nby simulating\n\non the exe ution of\n\nEqui\u25e6A.\n\nfrom the analysis\n\nfor a variant of the non- lairvoyant s heduling\nSe tion 4 presents this later problem and\n\nThen, Se tion 5 dedu es the\n\nompetitiveness\n\non a parti ular instan e of non- lairvoyant s heduling built\n\n4 Non-Clairvoyant Seq-Par Bat h S heduling\nFor the sake of\n\nompleteness we \u001crst sum up the results in [8\u2104, reader may skip this paragraph\n\nin a \u001crst reading.\n\nEdmonds's non- lairvoyant s heduling problem\n\nalgorithm that s hedules jobs on\nbefore its\n\np\n\nonsists in designing an online\n\npro essors without any knowledge of the progress of ea h job\n\nompletion. An instan e of non- lairvoyant job s heduling problem\n\nonsists in a\n\nolle tion\n\nmk\n1\nof jobs (Jk ) with arrival times (ak ); ea h job Jk goes through a series of phases Jk , . . . , Jk ; the\nl\nl\namount of work in ea h phase Jk is wk ; at time t, the algorithm allo ates to ea h un ompleted job\nt\nt\nJk an amount\n(\u03c1k )s are arbitrary non-negative real numbers, su h that at any\nP t \u03c1k of pro essors (the\nl\nl\ntime:\nk \u03c1k 6 p); ea h phase Jk progresses at a rate given by a speed-up fun tion \u0393k (\u03c1k ) of the\nl\namount \u03c1k of pro essors allotted to Jk during phase Jk , that is to say that the amount of work\nt\nl\nl\nl\na omplished between t and t + dt during phase Jk is \u0393k (\u03c1k )dt; let tk denote the ompletion time\nR\n\u2032\nt\nl\n\u2032\n0\nl\nt\nl\nof the l -th phase of Jk , i.e. tk is the \u001crst time t su h that\ntl\u22121 \u0393k (\u03c1k ) dt = wk (with tk = ak ).\nThe overall goal is to minimize the\ntime of ea h job,\noptimal\n\ns-speed s\n\n\u001dow\nP time\n\ni.e. J-FlowTime =\nhedule for\n\nJ.\n\nmk\nk (tk\n\nk\n\nof the jobs, that is to say the sum of the pro essing\n\n\u2212 ak ).\n\nThe algorithm is\n\nWe denote by\n\nnon- lairvoyant\n\nJOPTs (J)\n\nanything about the progress of ea h job and is only informed that a job is\nof its\n\nthe \u001dow time of an\n\nin the sense that it does not know\nompleted at the time\n\nompletion. In parti ular, it is not aware of the di\u001berent phases that the job goes through\n\n(neither of the amount of work nor of the speed-up fun tion). One of the striking results of [8\u2104 is\nthat in spite of this total la k of knowledge, the algorithm\npro essors to ea h un ompleted job is\n\ni.e., su\n\nare arbitrary non-de reasing sub-linear fun tions (\nfor all\n\nEqui\n\n(2+\u01eb)-speed (2+4/\u01eb)-\n\nthat allo ates an equal amount of\n\nompetitive when the speed up fun tions\n\nh that for all\n\nk, l).\n\n\u000e\n\u000e\n\u03c1 < \u03c1\u2032 , \u0393lk (\u03c1) \u03c1 > \u0393lk (\u03c1\u2032 ) \u03c1\u2032 ,\n\nTwo parti ular kinds of phases are of interest for our purposes: sequential and parallel. During\n\na\n\nsequential\n\nphase,\n\n\u0393(\u03c1) = 1,\n\nthat is to say that the job progresses at a unit rate whatever amount\n\nof pro essing power it re eives (even if it re eives no pro essor at all,\n\nparallel\n\ni.e.\n\neven if\n\n\u03c1 = 0)!\n\nphase, the job progresses proportionally to the pro essing power it re eives,\n\nDuring a\n\ni.e. \u0393(\u03c1) = \u03c1.\n\nRemark that these two kinds of speed-up fun tions mat h the requirement of Edmond's theorem\nand thus\n\nEqui\n\nis\n\n(2 + \u01eb)-speed (2 + 4/\u01eb)-\n\nompetitive on instan es\n\nonsisting of a\n\nolle tion of jobs\n\nomposed of sequential and parallel phases.\nAs in [7\u2104, we redu e the analysis of our broad ast algorithm\na non- lairvoyant s heduling algorithm.\n\nB-EquiSet\n\nto the analysis of\n\nFor that purpose, we need to introdu e dependen ies\n\nbetween the jobs in Edmonds's framework. We\n\nonsider the following variant of the non- lairvoyant\n\ns heduling problem.\n\nNon-Clairvoyant Seq-Par Bat hes S heduling.\n\nAn instan e of this variant\n\nonsists in a\n\nol-\n\nB = {B1 , . . . , Bq } of bat hes Bj = {Jj,1 , . . . , Jj,uj } of jobs with arrival times a1 , . . . , aq , where\ns\nea h job Jj,i is omposed of two phases: a sequential phase of work wj,i > 0 followed by a parallel\np\nphase of work wj,i > 0. (Note that this problem is di\u001berent from the lassi al bat h s heduling\nle tion\n\nproblem in whi h\n\nonly one\n\nbat h has to be treated.) The s heduler is non- lairvoyant and dis overs\n\nea h bat h of jobs at the time of its arrival and is in parti ular\n\nof ea h job in ea h bat h.\n\nThe s heduler allo ates to ea h job\n\n5\n\nnot aware of the amounts of work\nJj,i ,\n\narrived and un ompleted at\n\n\ftime\n\ntj,i\n\nt,\n\na\n\nertain amount\n\ndenote the\n\n\u03c1tj,i\n\nt\n\nof the pro essors (\u03c1j,i is an arbitrary non-negative real number). Let\n\nompletion time of job\n\nJj,i ; tj,i\n\nis the \u001crst date verifying\n\nR tj,i\n\ns\naj +wj,i\n\np\n\u03c1tj,i dt = wj,i\n.\n\nWe\n\nompleted as soon as all its jobs are ompleted; let tj denote the ompletion\nBjP\n, tj = maxi=1,...,uj tj,i . The goal is to minimize the \u001dow time of the bat hes, i.e.\nB-FlowTime = Bj \u2208B(tj \u2212 aj ). We denote by BOPTs (B) the \u001dow time of an optimal s-speed\ns hedule for B.\nSimilarly to the broad ast setting, we say that a request Bj (resp., a job Jj,i ) is alive at time t\nif aj 6 t 6 tj (resp., aj 6 t 6 tj,i ).\n\nsay that a bat h is\ntime of bat h\n\nEqui\u25e6A Algorithms Family. Given a job s heduling algorithm A, we de\u001cne the bat hes\ns heduling algorithm Equi\u25e6A as follows. Let R(t) denote the set of bat hes that are alive at\ntime t. Equi\u25e6A allots to ea h bat h alive at time t an equal amount of pro essors, i.e., p/|R(t)|;\nthen, it runs algorithm\n\nalloted to\n\nBj\n\nA\n\non ea h alive bat h\n\namong its own alive jobs\n\nJj,i .\n\nBj\n\nto de ide how to split the amount of pro essors\n\nIn the following, we only require algorithm\n\nA\n\nto be\n\nfully a tive, i.e., that it allots at all time all the amount of pro essors it is given to the alive jobs\n(i.e., never idles on purpose). Under this requirement, our results hold independently of the hoi e\n\nof\n\nA.\n\nExamples of fully a tive algorithms\n\nA\n\nare:\n\nA = Equi\n\nA = MinIdx whi h allots all the amount\nBj , i.e. i = min{i\u2032 : Jj,i\u2032 is alive at time t}.\n\npro essors; or\njob\n\nJj,i\n\nin\n\nAnalysis of Equi\u25e6A.\n\nTo analyze the\n\nwhi h equally splits the amount of\n\nof pro essors to the smallest indexed alive\n\nompetitiveness of\n\n\u2032\ns heduling instan e B, two instan es, J and\n\nEqui\u25e6A,\n\nwe asso iate to ea h bat hes\n\nJ\u2032\u2032 , of job s heduling. We \u001crst bound the performan es\n\u2032\nof our algorithm Equi\u25e6A on B from above by the performan es of Equi on J (Lemma 4). We\n\u2032\u2032\n\u2032\nthen use the \u0010harder\u0011 job instan e J to show that the job instan e J was in fa t \u0010easier\u0011 than the\nbat h instan e\nis\n\nB\n\nompetitive on\n\nif one in reases slightly the number of pro essors (Lemmas 5 and 6). Sin e\n\nJ\u2032 ,\n\nwe\n\nan then\n\non lude on the\n\nompetitiveness of\n\nEqui\u25e6A\n\non\n\nB\n\nEqui\n\n(Theorem 7).\n\nB = {B1 , . . . , Bq } where ea h bat h Bj =\ns\nBj onsists of a sequential phase of work wj,i\np\nfollowed by a parallel phase of work wj,i . Consider the s-speed s hedule obtained by running\nt\nalgorithm Equi\u25e6A on instan e B; let \u03c1j,i denote the amount of pro essors allotted by Equi\u25e6A\nP\nt\nt\nto job Jj,i at time t, and \u03c1j =\nJj,i \u2208Bj \u03c1j,i denote the amount of pro essors allotted to bat h\nBj at time t; let tj,i (resp., tj ) be the ompletion time of job Jj,i (resp., bat h Bj ). We de\u001cne\n\u2032\n\u2032\n\u2032\n\u2032\na Seq-Par job s heduling instan e J = {J1 , . . . , Jq }, where ea h job Jj arrives at time aj , and is\ns\n\u2032\ns\nomposed of a sequential phase of work wj = maxJj,i \u2208Bj wj,i , followed by a parallel phase of work\nRt\nwj\u2032 p = ajj+w\u2032 s \u03c1tj dt; intuitively, wj\u2032 s is the length of the longest sequential phase among the jobs\nConsider a Seq-Par bat hes s heduling instan e\n\n{Jj,1 , . . . , Jj,uj }\n\narrives at time\n\naj\n\nand ea h\n\nJj,i\n\nin\n\nj\n\nin\n\nBj\n\nand\n\nwj\u2032 p\n\nis the total amount of parallel work in\n\nompletion of the last sequential phase among the jobs\n\nBj to\nin Bj .\n\nbe s heduled by\n\nEqui\u25e6A\n\nafter the\n\nThe key to the next lemma is that one gets exa tly the same job s hedule of the jobs in\n\n\u2032\nrunning algorithm Equi on instan e J as by alloting at all time to ea h job\nof pro essors as the jobs in\n\nBj\n\nre eived from\n\nIf A is fully a tive, then Equis \u25e6A(B) = Equis (J\u2032 ).\n\nBj is not ompleted,\n\u2032\nonstru tion, job Jj is also alive as long as this sequential phase is not\n\nAs long as the longest sequential phase among the jobs in bat h\n\nthe bat h\n\nBj\n\nis alive. By\n\nompleted. Sin e the amount of pro essors given to bat h\n\nEqui\n\nis non- lairvoyant,\n\nuntil the\n\nby\n\nJj\u2032 the same amount\n\nEqui\u25e6A.\n\nLemma 4 (Redu tion to job s heduling)\nProof.\n\nJ\u2032\n\nEqui\u25e6A\n\nBj\n\nEqui\u25e6A is given by Equi, and sin e\n\u2032\npro essors to Bj as Equi allots to Jj\n\nin\n\nallots the same amount of\n\nompletion of the longest sequential phase among the jobs in bat h\n\nthe longest sequential phase in bat h\n\nBj\n\nand the sequential phase of\n\n6\n\nJj\u2032\n\nBj .\n\nBy\n\nonstru tion,\n\nend at the same time and at\n\n\fthis moment, all the jobs alive in\n\nBj\n\nBy\n\nbat h\n\nA\n\nare in their parallel phase. Thus by\n\nonstru tion, the overall\n\nJj\u2032 .\n\u2032\nonstru tion, the amount of pro essors given to Jj equals the amount of pro essors alloted to\n\namount of remaining parallel work in\n\nBj\n\nBj\n\nat that time is equal to the parallel work assigned to\n\nwhi h is in turn equal to the total amount alloted to ea h of its remaining alive jobs sin e\n\nis fully a tive. The overall remaining amount of parallel work is thus identi al in\n\nthey\n\nJj\u2032\n\nand\n\nomplete at the same time. Their \u001dow times are thus identi al in both s hedules. We\n\nthe proof by reasoning indu tively on the\n\nBj\n\nompletion times (sorted in non-de reasing order) of ea h\n\n\u0003\n\nphase of ea h job in ea h bat h.\n\n\u2032\u2032\nWe now de\u001cne the job instan e J\nthe bat h instan e\n\nB,\n\ns ,\nwj\u2032\u2032 s = maxJj,i \u2208Bj wj,i\n\nBj .\n\nSin e for all\n\nJob\n\nJj\u2032\u2032\n\narrives at time\n\nJ\u2032\u2032 is a kind of worst\n\nand\n\nj,\n\n\u03b4\n\nBj\n\nase instan e of\n\nhas to be s heduled after the\n\nonsists of a sequential phase of work\n\nwj\u2032\u2032 p =\n\nP\n\nJj,i \u2208Bj\n\np\nwj,i\n.\n\nJ\u2032\u2032 ) JOPTs (J\u2032 ) 6 JOPTs (J\u2032\u2032 ).\n\nthe sequential works of jobs\n\n\u2032\nin Jj is bounded from above by the parallel work in\n\nLemma 6 (J\u2032\u2032 with\n\naj\n\nfollowed by a parallel phase of work\n\nLemma 5 (J\u2032 is easier than\nProof.\n\n=\n\n{J1\u2032\u2032 , . . . , Jq\u2032\u2032 }.\n\nwhere all the parallel work in ea h bat h\n\nlongest sequential phase in\n\nuntil\n\non lude\n\nJj\u2032 and Jj\u2032\u2032 are identi al and the parallel\nJj\u2032\u2032 , any s hedule of J\u2032\u2032 is valid for J\u2032 .\n\nextra pro essors is \u0010almost as easy\u0011 as\n\nwork\n\n\u0003\n\nB) For all \u03b4 > 0,\n\nJOPT1+\u03b4 (J\u2032\u2032 ) 6 (1 + 1/\u03b4)BOPT1 (B).\nProof.\n\nThe proof\n\n\u03b4 extra pro essors are given, delaying\nonstant fa tor, (1 + 1/\u03b4), allows to postpone the s hedule\nthe ompletion of the last sequential phase in Bj , whi h\n\nonsists in showing that when\n\nthe\n\nom-\n\nBj by a\nof all the\nBj after\non ludes\n\u2032\u2032\nthe proof by onstru tion of J .\nSort the bat hes of B by non-in reasing arrival time, i.e., assume a1 > a2 > . . . > aq . Consider\nan optimal s hedule BOPT1 of bat hes B1 , . . . , Bq on one pro essor. We show by indu tion that\n\u2032\u2032\n\u2032\u2032 ompletes before time\nthere exists a s hedule S of J on 1 + \u03b4 pro essors su h that ea h job Jj\ntj + fj /\u03b4, where tj and fj = tj \u2212 aj denote the ompletion time and the \u001dow time of Bj in BOPT,\n\u2032\u2032 an be s heduled between time\nrespe tively. We now show that the parallel phase of ea h job Jj\ntj and tj + fj /\u03b4; this on ludes the proof sin e, by onstru tion, the sequential phase of Jj\u2032\u2032 is\n\u2032\u2032\n\u2032\u2032 p\nne essarily ompleted before tj . Start with the \u001crst job J1 . Clearly, w1 6 f1 . Thus, the total\n\u2032\u2032 an be s heduled on the \u03b4 extra pro essors between time t and t + f /\u03b4 .\nparallel phase of J1\n1\n1\n1\n\u2032\u2032\n\u2032\u2032\nAssume now that the parallel phases of jobs J1 , . . . , Jj\u22121 have been s heduled in S during the time\n\u2032\u2032\nintervals [t1 , t1 + f1 /\u03b4], . . . , [tj\u22121 , tj\u22121 + fj\u22121 /\u03b4] respe tively, and onsider job Jj . Sin e the jobs\n\u2032\u2032\nare onsidered in non-in reasing arrival times, ea h job Jk whose parallel phase has been s heduled\nin S between tj and tj + fj /\u03b4 arrived in the time interval T = [aj , tj + fj /\u03b4] and furthermore\ntk 6 tj + fj /\u03b4. The total parallel work W of all the jobs urrently s heduled in S during T , is\n\u2032\u2032\nthen in fa t s heduled ompletely in BOPT1 during T . Note that the parallel work of Jj was also\ns heduled in BOPT1 during this time interval. Sin e BOPT1 uses only one pro essor, we on lude\n\u2032\u2032 p\nthat W + wj 6 tj + fj /\u03b4 \u2212 aj = (1 + 1/\u03b4)fj . As one an s hedule up to (1 + \u03b4)fj /\u03b4 = (1 + 1/\u03b4)fj\n\u2032\u2032 p\n\u2032\u2032 an be\nparallel work between time tj and tj + fj /\u03b4 on 1 + \u03b4 pro essors, the parallel work wj of Jj\ns heduled in S on time.\n\u0003\nWe an now on lude the analysis of Equi\u25e6A.\npletion of ea h bat h\n\nparallel job phases in\n\nTheorem 7 (Competitiveness of Equi\u25e6A) For all \u01eb > 0 and \u03b4 > 0, Equi\u25e6A is a (2+\u01eb)(1+\u03b4)speed (2 + 4/\u01eb)(1 + 1/\u03b4)- ompetitive algorithm for the Non Clairvoyant Seq-Par Bat hes S heduling\nproblem.\n7\n\n\fProof.\n\nompetitiveness of Equi for the non- lairvoyant\nEqui(2+\u01eb)(1+\u03b4) \u25e6A(B) = Equi(2+\u01eb)(1+\u03b4) (J\u2032 )\n\nWe use the result of [8\u2104 on the\n\ning problem to\n\non lude the proof:\n\n(2 + 4/\u01eb) JOPT(1+\u03b4) (J\u2032 )\n\n6\n\n(Lemma 4)\n\n(2 + 4/\u01eb) JOPT(1+\u03b4) (J\u2032\u2032 )\n\n(Lemma 5)\n\n5 Competitiveness of\n\njob s hedul-\n\n6\n\n(Theorem 1 in [8\u2104)\n\n(2 + 4/\u01eb)(1 + 1/\u03b4) BOPT1 (B).\n\n6\n\n\u0003\n\n(Lemma 6)\n\nB-EquiSet\n\nS = {S1 , . . . , Sq }\nof q requests with arrival times a1 , . . . , aq , over n items I1 , . . . , In of lengths l1 , . . . , ln . Let Es be the\ns-speed s hedule designed by B-EquiSet on instan e S, and B-EquiSets (S) be its \u001dow time.\nLet O1 be a 1-speed optimal s hedule of S, and BOPT1 (S) be its \u001dow time.\nFollowing the steps of [7\u2104, we de\u001cne an instan e B of non- lairvoyant seq-par bat hes s heduling\nfrom Es and O1 , su h that the performan es of B-EquiSet on S an be ompared to the performan es of Equi\u25e6A on B for a parti ular fully-a tive algorithm A. More pre isely, we onstru t B\nsu h that 1) the \u001dow time of Equi\u25e6A on B bounds from above the \u001dow time of B-EquiSet on\nS and 2) the (bat hes) optimal \u001dow time for B is at most the (broad ast) optimal \u001dow time for S if\nit is given extra resour es. Sin e Equi\u25e6A is ompetitive, we an then bound the performan es of\nB-EquiSet with respe t to the (bat hes) optimal \u001dow time of B whi h is by 2) bounded by the\n(broad ast) optimal \u001dow time of S.\nThe intuition behind the onstru tion of B is the following. A bat h of all-new jobs is reated\nfor ea h newly arrived request, with one job per requested item. Ea h job J stays alive until its\norresponding item I is served in Es . J is assigned at most two phases depending on the relative\nservi e times of I in Es and O1 . The sequential phase of J lasts until either I is served in Es ,\nor the broad ast of I starts in O1 . Intuitively, this means that it is useless to assign pro essors\nto J before the optimal s hedule does. At the end of its sequential phase, if J is still alive, its\nparallel phase starts and lasts until the broad ast of I is ompleted in Es ; the parallel work for J\nis thus de\u001cned as the total amount of bandwidth that its orresponding item I re eived within J 's\norresponding (broad ast) request in B-EquiSet. By onstru tion, with a suitable hoi e of A,\nEqui\u25e6A onstru ts the exa t same s hedule as B-EquiSet and laim 1) is veri\u001ced. Con erning\nlaim 2), the key is to onsider the jobs orresponding to the broad ast requests for a given item I\nthat are served by a given broad ast of I in O1 starting at some time t. The only jobs among them\nthat will re eive a parallel phase, are the one for whi h the broad ast of I in Es starts just before or\njust after t. By onstru tion, the total amount of parallel work assigned to these jobs orresponds\nto the bandwidth assigned to the two broad asts of item I by Es that start just before and just\nafter time t, ea h of them being bounded by the length of I . The total amount of parallel work in\nthe jobs for whi h the broad ast of the orresponding item I starts in O1 at some time t, is then\nbounded by twi e the length of I , and an thus be s heduled during the broad ast of I in O1 if one\nConsider an instan e of the online data broad ast problem with dependen ies: a set\n\ndoubles the number of pro essors, whi h proves\n\nlaim 2).\n\nThe following formalizes the reasoning exposed above.\n\nThe Job Set Instan e\nand\n\nO1 ,\n\nJ.\n\nRe all the broad ast instan e\n\nS,\n\nand the two broad ast s hedules\n\nde\u001cned at the beginning of this se tion, as well as the notations given in Se tion 2.\n\nCsE(Ii , t) denote the ompletion time of the broad ast of item Ii that starts just\nB1O(Ii , t) be the time of the beginning of the \u001crst broad ast of item Ii that starts\n\nparti ular, let\n\nt\nt\n\nEs , and\nO1 (see Se\nR(t) be the\n\nin\n\nin\n\nlet\n\ntion 2). Re all the des ription of algorithm\nset of alive requests;\n\nB-EquiSet\n\nB-EquiSet\n\ns\n\nIn\n\nafter\nafter\n\nin Se tion 3: at time\n\nsplits equally the bandwidth\n\nEs\n\nt,\n\namong the alive\n\nrequests and for ea h alive request Sj , it assigns an arbitrary rate rj,i (t) to ea h alive item Ii in\nP\nSj , su h that Ii alive in Sj rj,i (t) = s/|R(t)|; B-EquiSet broad asts then ea h item Ii at a rate\nP\nri (t) = j rj,i (t) at time t.\n8\n\n\fS, Es and O1 , we de\u001cne the non- lairvoyant bat hes s heduling instan e B = {B1 , . . . , Bq },\nBj is released at the same time as Sj , i.e. at time aj , and ontains one seq-par\njob Jj,i for ea h item Ii \u2208 Sj (note that the indi es i of the jobs Jj,i in ea h bat h Bj may not be\nonse utive depending on the ontent of Sj ). Ea h job Jj,i onsists of a sequential phase of work\ns = (min{C E(I , a ), B O(I , a )} \u2212 a ), followed by a parallel phase of work w p . If C E(I , a ) 6\nwj,i\ni j\nj\ns i j\ns i j\n1\nj,i\nR CsE (Ii ,aj ) Es\np\np\nO\nB1 (Ii , aj ), then wj,i = 0; otherwise, wj,i = B O (I ,a ) rj,i (t) dt + \u03b7 where \u03b7 is an in\u001cnitely small\ni j\n1\namount of work, i.e. if the download of item Ii in request Sj is ompleted in Es after it starts in\nO1 , then the amount of parallel work assigned to Jj,i is just slightly higher than the total amount of\nbandwidth allotted to item Ii within the bandwidth allotted to request Sj by B-EquiSets after\nthe beginning of the orresponding broad ast in O1 . Adding an in\u001cnitely small amount of work \u03b7\nto the parallel phase of Jj,i does not hange the optimal bat hes s hedule (ex ept on a negligible\n(dis rete) sets of dates) but sin e the algorithm Equi\u25e6A is non- lairvoyant, this ensures that the job\nJj,i remains alive until the broad ast of item Ii ompletes even if B-EquiSets deliberately hooses\nnot to broad ast item Ii in the bandwidth allotted to request Sj (the introdu tion of in\u001cnitely small\nk\nextra load an be rigorously formalized by adding an exponentially de reasing extra load \u03b3/2 to\nthe k th requested job for a small enough \u03b3 ).\nGiven\n\nwhere ea h bat h\n\nLemma 8\nProof.\n\nThere exists a fully-a tive algorithm A su h that:\n\nB-EquiSets (S) 6 Equis \u25e6A(B).\n\nGiven an amount of pro essors \u03c1 for an alive bat h\nJj,i in Bj at time t the same amount of pro essors as\nB-EquiSets would have assigned at time t to the orresponding alive item Ii of the orresponding\nalive request Sj whi h would have been assigned a bandwidth \u03c1. Sin e B-EquiSets allots all\nthe bandwidth available to alive jobs, A is fully-a tive. Now, sin e \u03b7 is in\u001cnitely small, this extra\nload does not a\u001be t the allo ation of pro essors omputed by Equis \u25e6A ex ept over a negligible\n(dis rete) set of dates. By immediate indu tion, ea h job Jj,i remains alive in the s hedule omputed\nby Equis \u25e6A, as long as item Ii is alive in bat h Bj in Es . This is lear as long as Jj,i is in its\nsequential phase. On e Jj,i enters its parallel phase, as long as the broad ast of item Ii is not\nompleted, either Ii is broad ast by B-EquiSets in bat h Bj and Jj,i is s heduled by Equis \u25e6A\n(A opies B-EquiSets ), or B-EquiSets deliberately hooses not to broad ast the alive item Ii\nand sin e Jj,i has an in\u001cnitely small amount of extra work, Jj,i remains alive in Equis \u25e6A as well.\nThe \u001dow time for ea h job Jj,i is then at least the \u001dow time of the orresponding item Ii in Es ; we\non lude that ea h bat h Bj ompletes in Equis \u25e6A no earlier than its orresponding request Sj in\n\u0003\nB-EquiSets .\n\nBj ,\n\nThe proof follows the lines of [7\u2104.\n\nalgorithm\n\nLemma 9\nProof.\n\nA\n\nassigns to ea h alive job\n\nThere exists a 2-speed bat hes s hedule \u03a52 su h that: \u03a52 (B) 6 B-FlowTime(O1 ).\n\nIi . We partition the requests\nIi in O1 . The k-th lass Ck\nontains all the requests Sj that download Ii in O1 during its k th broad ast, i.e. all requests Sj\nO\nO\nsu h that b1 (Ii , k \u2212 1) < aj 6 b1 (Ii , k) (see Se tion 2 for notations). We show that for all k , the\ntotal parallel phases of the jobs Jj,i su h that Sj \u2208 Ck , an be shoehorned into twi e the area of\nbandwidth allotted by O1 to the k th broad ast of item Ii . Sin e this holds for all i and all k , we\nobtain a 2-speed s hedule \u03a52 su h that \u03a52 (B) 6 B-FlowTime(O1 ).\nO\nLet t1 = b1 (Ii , k) be the time of the beginning of the k th broad ast of Ii in O1 . Consider a\nrequest Sj in lass Ck , learly aj 6 t1 . By onstru tion, job Ji,j is assigned a non-zero parallel\nwork only if Sj ompletes the download of Ii after t1 in B-EquiSets . Sin e Sj arrives before\nt1 , it downloads Ii during one of the two broad asts of Ii in B-EquiSets that start just before\nSj\n\nAgain, the proof follows the lines of [7\u2104. Consider an item\n\nontaining item\n\nIi\n\ninto\n\nlasses\n\nC1 , C2 , . . . ,\n\none for ea h broad ast of\n\n9\n\n\for just after\nbefore\n\nt1\n\nand\n\nW\u2212 =\n\nIi\n\nR2\n\nCk\u2212\n\nCk+ )\n\n(resp.\n\nt1 ).\n\nLet\n\nbe the set of requests served by the broad ast that starts just\n\nt2\n\nand\n\nt3\n\nbe the\n\nthat start just before and just after\n\nt1\n\nompletion times of the broad ast of\n\nrespe tively. By\n\nIi\n\nin\n\nB-\n\nonstru tion, the total amounts\n\nW + of parallel work assigned to the jobs Jj,i su h that Sj \u2208 Ck\u2212 and Ck+ are respe tively:\nX Z t2\nX Z t3\n+\nrj,i (t) dt and W =\nrj,i (t) dt. Let us rewrite W \u2212 + W + = R1 + R2\n\nj : Sj \u2208Ck\u2212\nR t2\nwith R1 =\nt1\nand\n\nlet\n\n(resp. just after\n\nEquiSets\n\nW\u2212\n\nt1 ;\n\nt1\n\nP\n\nj : Sj \u2208Ck rj,i (t) dt\n\nR t2\n\n6\n\nj : Sj \u2208Ck+\n\nt1\n\nRt P\nRt\nR2 = t23 j : Sj \u2208C + rj,i (t) dt 6 t23 ri (t) dt. R1\nk\nto item Ii by B-EquiSets during the broad asts of\n\nri (t) dt\n\nare thus at most the total area alloted\n\nt1\n\nand\n\nthat start just before and just after t1 ; sin e a broad ast is\n\nompleted as soon as the rates sum up\n\nR2 6 li , and thus W \u2212 + W + 6 2li . Sin e O1 allots a total\nbandwidth of li to broad ast item Ii after time t1 , and sin e the parallel works of the jobs Jj,i su h\n\u2212 + W + 6 2l , one an onstru t on\nthat Sj \u2208 Ck are released at time t1 and sum up to a total W\ni\n2 pro essors, a 2-speed s hedule \u03a52 in whi h the parallel phases of ea h of these jobs Jj,i ompletes\nbefore the k th broad ast of Ii ompletes in O1 .\nto the length of the items,\n\nR1 6 l i\n\nand\n\nSin e no pro essor needs to be allotted to the sequential phases, repeating the\nfor ea h item\n\nIi\n\nyields a valid\n\nSj\n\norresponding request\nompleted in\nWe now\n\n\u03a52\n\nbefore its\n\ns hedule\n\norresponding request\n\n\u03a52\n\nin whi h ea h job\n\nSj\n\nIi\n\nin\n\nO1 .\n\nis served by\n\nJi,j\n\nompletes before the\n\nIt follows that ea h bat h\n\nBj\n\nO1 .\n\nis\n\n\u0003\n\non lude with the proof of the main theorem.\n\nProof of Theorem 1.\norem 7)\n\n2-speed\n\nompletes the download of\n\nonstru tion\n\nSetting\n\ns = (4 + \u01eb)(1 + \u03b4),\n\nthe\n\nB-EquiSet(4+\u01eb)(1+\u03b4) (S)\n\non ludes the result:\n\nEqui\u25e6A (TheEqui(4+\u01eb)(1+\u03b4) \u25e6A(B)\n6\n\nompetitiveness of\n\n6\n\n(Lemma 8)\n\n(2 + 8/\u01eb)(1 + 1/\u03b4) BOPT2 (B) 6 (2 + 8/\u01eb)(1 + 1/\u03b4) \u03a52 (B)\n\n6\n\n(Theorem 7)\n\n(2 + 8/\u01eb)(1 + 1/\u03b4) BOPT1 (S).\n\n\u0003\n\n(Lemma 9)\n\nThe B-EquiSet-Edf algorithm.\nand\n\nc = (2 + 8/\u01eb)(1 +\n\nB-EquiSet\n\nIi\u2032\n\nof length\n\nonsidered broad ast\n\nbandwidth\n\ns\n\nWe apply the same method as in [7\u2104. Let\n\nB-EquiSet-Edf\n\nsimulates the\n\ns = (4 + \u01eb)(1 + \u03b4)2\n\ns/(1 + \u03b4)-speed\n\nexe ution of\n\nt su h that the broad ast of an item Ii in B-EquiSet is ompleted,\nli with a deadline t + (t \u2212 t\u2032 )/\u03b4 where t\u2032 is the time of the beginning\nof Ii in B-EquiSet.\nThen, B-EquiSet-Edf s hedules on a\n\nand at ea h time\n\nit releases an item\nof the\n\n1\u03b4)2 .\n\nIi\u2032\n\nea h item\n\nto Lemma 6 or [7\u2104, one\nearliest-deadline-\u001crst\n\na\n\nording the earliest-deadline-\u001crst poli y.\n\nWith an argument similar\n\nIi\u2032 exists and thus that\nB-EquiSet-Edf is s-speed c- ompetitive.\n\nan show that a feasible s hedule of the items\n\nonstru ts it whi h ensures that\n\nSin e earliest-deadline-\u001crst preempts the broad ast of an item only when a new item arrives,\n\nB-EquiSet-Edf\nlong idle period in\n\nB-EquiSet\n\npreempts ea h broad ast at most on e on average.\n\nB-EquiSet-Edf's\n\nat time\n\nt\n\nif no item\n\nCon luding remarks.\n\nIi\u2032\n\nis\n\nNote that one\n\ns hedule by broad asting an arbitrary item\n\nan avoid\n\nIi\n\nalive in\n\nurrently alive.\n\nSeveral dire tions are possible to extend this work. First,\n\nB-EquiSet\n\ndoes not have pre ise poli y to de ide in whi h order one should broad ast the items within ea h\nrequested set; de iding on a parti ular poli y may lead to better performan es (bandwidth and/or\nompetitive ratio). Se ond, it might be interesting to design a longest-wait-\u001crst greedy algorithm in\npresen e of dependen ies;\na\n\nB-EquiSet\n\nshows that the items should not simply re eive bandwidth\n\nording to the number of outstanding requested sets for this item (the allotted bandwidth depends\n\nalso on the number of outstanding items within ea h outstanding set), it is thus a\nquestion to design proper weights to aggregate the\ngiven item.\n\n10\n\nhallenging\n\nurrent waits of the requested sets in luding a\n\n\fReferen es\n[1\u2104 N. Bansal, M. Charikar, S. Khanna, and J. S. Naor.\ntime in broad ast s heduling. In\n\nAlgorithms (SODA 2005), 2005.\n\nApproximating the average response\n\nPro eedings of the 16th ACM-SIAM Symposium on Dis rete\n\n[2\u2104 N. Bansal, D. Coppersmith, and M. Sviridenko. Improved approximation algorithms for broadast s heduling. In\n\nPro . of the An. ACM-SIAM Symp. on Dis rete Algorithms, pages 344\u0015353,\n\n2006.\n[3\u2104 A. Bar-Noy, J. S. Naor, and B. S hieber. Pushing dependent data in\nsystems.\n\nWireless Networks,\n\nlients-providers-servers\n\n9:421\u0015230, 2003.\n\n[4\u2104 Amotz Bar-Noy and Yaron Shilo. Optimal broad asting of two \u001cles over an asymmetri\n\nJ. Parallel Distrib. Comput.,\n\nhannel.\n\n60(4):474\u0015493, 2000. (also published in the Pro . of INFOCOM\n\n1999).\n[5\u2104 K. Cai, H. Lin, and C. Chen.\n\nCorrelation-based data broad asting in wireless networks.\n\nLNCS Pro . of the 2nd British National Conf. on Databases (BNCOD 22),\n\nIn\n\nvolume 3567, Jul.\n\n2005.\n[6\u2104 S. Dey and N. S habanel. Customized newspaper broad ast: Data broad ast with dependen ies.\nIn\n\nPro . of Lat. Am. Conf. on Theor. INformati (LATIN), pages\n\n[7\u2104 J. Edmonds and K. Pruhs.\n\n362\u0015373, 2006.\n\nMulti ast pull s heduling: When fairness is \u001cne.\n\nAlgorithmi a,\n\n36(3):315\u0015330, 2003. (also published in Pro . of SODA 2002).\n[8\u2104 Je\u001b Edmonds. S heduling in the dark. In\n\nSTOC, pages\n\n179\u0015188, 1999.\n\n[9\u2104 Je\u001b Edmonds and Kirk Pruhs. A maiden analysis of longest wait \u001crst.\n\nACM Trans. Algorithms,\n\n1(1):14\u001532, 2005.\n[10\u2104 T. Erleba h and A. Hall. NP-hardness of broad ast s heduling and inapproximability of singlesour e unsplittable min- ost \u001dow. In\n\nPro . of Symp. on Dis rete Algorithms (SODA),\n\npages\n\n194\u0015202, 2002.\n[11\u2104 R. Gandhi, S. Khuller, Y. A. Kim, and Y.-C. J. Wan.\ntime in broad ast s heduling. In\n\nAlgorithms for minimizing response\n\nPro . of Conf. on Int. Prog. and Comb. Opt. (IPCO),\n\npages\n\n425\u0015438, 2002.\n[12\u2104 J.-L. Huang and M.-S. Chen. Broad ast program generation for unordered queries with data\nrepli ation. In\n\nPro . of the ACM symposium on Applied omputing (SAC 2003), pages 866\u0015870,\n\nMar. 2003.\n[13\u2104 J.-L. Huang and M.-S. Chen. Dependent data broad asting for unordered queries in a multiple\nhannel mobile environment.\n\nIEEE Trans. on Konwledge and Data Engineering,\n\n16(9):1143\u0015\n\n1156, Sep. 2004.\n[14\u2104 Bala Kalyanasundaram, Kirk Pruhs, and Mahendran Velauthapillai. S heduling broad asts in\nwireless networks. In\n\nPro . of European Symp. on Algorithms, pages 290\u0015301,\n\n[15\u2104 R. Motwani and P. Raghavan.\n[16\u2104 A. Yao. Probabilisti\n\nRandomized Algorithms.\n\nCambridge university press, 1995.\n\nomputations: Towards a uni\u001ced measure of\n\nSymp. on Fond. of Computer. S ien e (FOCS), pages\n11\n\n2000.\n\nomplexity. In\n\n222\u0015227, 1977.\n\nPro . of17th\n\n\fA Omitted proof\nProof of Fa t 3.\nrithms. We\n\nWe use Yao's prin iple (see [16, 15\u2104) to extend the result to randomized algo-\n\nonsider the following probabilisti\n\nrequests arrive at time\nof the\n\n\u221a\n\nn\n\nn\n\nt = 0;\n\none request asks for an uniform random subset\n\nitems; and ea h of the requests\n\n\u221a\nn items: 1 + n\n\u221a\nS0 of size n \u2212 n\n\ndistribution of requests set over\n\nS1 , . . . , S\u221an\n\nasks for one random distin t item among the\n\nremaining items. Consider again any deterministi\n\nalgorithm\n\nA\n\nwith bandwidth\n\ns.\n\nSin e\n\nA\n\nis\n\nA s hedule is independent of\nt = n/(2s), the broad ast of at least n/2 items is not ompleted.\nThus, the probability that request Sj , for j > 1, asks for one of these items is at least 1/2. Then,\n\u221a\nn/2. We on lude that\nthe expe ted number of unsatis\u001ced request at time t = n/(2s) is at least\nthe expe ted \u001dow time for any deterministi algorithm with bandwidth s under this distribution\n\u221a\nof request is at least n n/(4s). A ording to Yao's prin iple, the worst expe ted \u001dow time of any\n\u221a\nrandomized algorithm over the olle tion of all the onsidered instan es is at least n n/(4s). But\nBOPT1 \u223c 23 n, whi h on ludes that no randomized algorithm is s-speed c- ompetitive, for all s and\n\u221a\nc < n/(6s).\n\u0003\ndeterministi\n\nand ignores the dependen ies, the s hedule designed by\n\nthe random instan e. At time\n\n12\n\n\f"}