{"id": "http://arxiv.org/abs/1111.4372v2", "guidislink": true, "updated": "2012-02-15T18:26:32Z", "updated_parsed": [2012, 2, 15, 18, 26, 32, 2, 46, 0], "published": "2011-11-18T14:27:43Z", "published_parsed": [2011, 11, 18, 14, 27, 43, 4, 322, 0], "title": "An additivity theorem for plain Kolmogorov complexity", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1111.3466%2C1111.5708%2C1111.6092%2C1111.6320%2C1111.5796%2C1111.5283%2C1111.4879%2C1111.0774%2C1111.0289%2C1111.5293%2C1111.0877%2C1111.5887%2C1111.1486%2C1111.2619%2C1111.3770%2C1111.7237%2C1111.2793%2C1111.6847%2C1111.0847%2C1111.2822%2C1111.2306%2C1111.1761%2C1111.0216%2C1111.0345%2C1111.1845%2C1111.5478%2C1111.0790%2C1111.3831%2C1111.3694%2C1111.4372%2C1111.1400%2C1111.0061%2C1111.5959%2C1111.6944%2C1111.2633%2C1111.2558%2C1111.6010%2C1111.1167%2C1111.2767%2C1111.1435%2C1111.4642%2C1111.0318%2C1111.0578%2C1111.1089%2C1111.5302%2C1111.3980%2C1111.2636%2C1111.6167%2C1111.2165%2C1111.6423%2C1111.5180%2C1111.1201%2C1111.0022%2C1111.4824%2C1111.3273%2C1111.5251%2C1111.5673%2C1111.1419%2C1111.0726%2C1111.0132%2C1111.2545%2C1111.5690%2C1111.1754%2C1111.6429%2C1111.3106%2C1111.2102%2C1111.5442%2C1111.5679%2C1111.7284%2C1111.2782%2C1111.7198%2C1111.6964%2C1111.5336%2C1111.1690%2C1111.1618%2C1111.6044%2C1111.6241%2C1111.7226%2C1111.3249%2C1111.3221%2C1111.0455%2C1111.6486%2C1111.2988%2C1111.0391%2C1111.0778%2C1111.0581%2C1111.2718%2C1111.4405%2C1111.1762%2C1111.6398%2C1111.5516%2C1111.1357%2C1111.2482%2C1111.3434%2C1111.5704%2C1111.2956%2C1111.1265%2C1111.6071%2C1111.0670%2C1111.4557%2C1111.4231&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "An additivity theorem for plain Kolmogorov complexity"}, "summary": "We prove the formula C(a,b) = K(a|C(a,b)) + C(b|a,C(a,b)) + O(1) that\nexpresses the plain complexity of a pair in terms of prefix and plain\nconditional complexities of its components.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1111.3466%2C1111.5708%2C1111.6092%2C1111.6320%2C1111.5796%2C1111.5283%2C1111.4879%2C1111.0774%2C1111.0289%2C1111.5293%2C1111.0877%2C1111.5887%2C1111.1486%2C1111.2619%2C1111.3770%2C1111.7237%2C1111.2793%2C1111.6847%2C1111.0847%2C1111.2822%2C1111.2306%2C1111.1761%2C1111.0216%2C1111.0345%2C1111.1845%2C1111.5478%2C1111.0790%2C1111.3831%2C1111.3694%2C1111.4372%2C1111.1400%2C1111.0061%2C1111.5959%2C1111.6944%2C1111.2633%2C1111.2558%2C1111.6010%2C1111.1167%2C1111.2767%2C1111.1435%2C1111.4642%2C1111.0318%2C1111.0578%2C1111.1089%2C1111.5302%2C1111.3980%2C1111.2636%2C1111.6167%2C1111.2165%2C1111.6423%2C1111.5180%2C1111.1201%2C1111.0022%2C1111.4824%2C1111.3273%2C1111.5251%2C1111.5673%2C1111.1419%2C1111.0726%2C1111.0132%2C1111.2545%2C1111.5690%2C1111.1754%2C1111.6429%2C1111.3106%2C1111.2102%2C1111.5442%2C1111.5679%2C1111.7284%2C1111.2782%2C1111.7198%2C1111.6964%2C1111.5336%2C1111.1690%2C1111.1618%2C1111.6044%2C1111.6241%2C1111.7226%2C1111.3249%2C1111.3221%2C1111.0455%2C1111.6486%2C1111.2988%2C1111.0391%2C1111.0778%2C1111.0581%2C1111.2718%2C1111.4405%2C1111.1762%2C1111.6398%2C1111.5516%2C1111.1357%2C1111.2482%2C1111.3434%2C1111.5704%2C1111.2956%2C1111.1265%2C1111.6071%2C1111.0670%2C1111.4557%2C1111.4231&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We prove the formula C(a,b) = K(a|C(a,b)) + C(b|a,C(a,b)) + O(1) that\nexpresses the plain complexity of a pair in terms of prefix and plain\nconditional complexities of its components."}, "authors": ["Bruno Bauwens", "Alexander Shen"], "author_detail": {"name": "Alexander Shen"}, "author": "Alexander Shen", "arxiv_comment": "4 pages", "links": [{"href": "http://arxiv.org/abs/1111.4372v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1111.4372v2", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "68Q30", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "F.1.3", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1111.4372v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1111.4372v2", "journal_reference": null, "doi": null, "fulltext": "arXiv:1111.4372v2 [cs.CC] 15 Feb 2012\n\nAn additivity theorem for plain Kolmogorov complexity \u2217\nBruno Bauwens\u2020\n\nAlexander Shen\u2021\n\nNovember 6, 2018\n\nAbstract\nWe prove the formula C (a, b) = K (a| C (a, b))+C (b|a, C (a, b))+O(1) that expresses the plain complexity of a pair in terms of prefix-free and plain conditional complexities of its components.\n\nThe well known formula from Shannon information theory states that H(\u03be , \u03b7 ) = H(\u03be ) + H(\u03b7 |\u03be ).\nHere \u03be , \u03b7 are random variables and H stands for the Shannon entropy. A similar formula for algorithmic\ninformation theory was proven by Kolmogorov and Levin [5] and says that\nC (a, b) = C (a) + C (b|a) + O(logn),\nwhere a and b are binary strings of length at most n and C stands for Kolmogorov complexity (as defined\ninitially by Kolmogorov [4]; now this version is usually called plain Kolmogorov complexity). Informally,\nC (u) is the minimal length of a program that produces u, and C (u|v) is the minimal length of a program\nthat transforms v to u; the complexity C (u, v) of a pair (u, v) is defined as the complexity of some standard\nencoding of this pair.\nThis formula implies that I(a : b) = I(b : a) + O(logn) where I(u : v) is the amount of information in\nu about v defined as C (v) \u2212 C (v|u); this property is often called \"symmetry of information\". The term\nO(log n), as was noted in [5], cannot be replaced by O(1). Later Levin found an O(1)-exact version of this\nformula that uses the so-called prefix-free version of complexity:\nK (a, b) = K (a) + K (b|a, K (a)) + O(1);\nthis version, reported in [2], was also discovered by Chaitin [1]. In the definition of prefix-free complexity\nwe restrict ourselves to self-delimiting programs: reading a program from left to right, the interpreter\ndetermines where it ends. See, e.g., [7] for the definitions and proofs of these results.\nIn this note we provide a somewhat similar formula for plain complexity (also with O(1)-precision):\nTheorem 1.\nC (a, b) = K (a| C (a, b)) + C (b|a, C (a, b)) + O(1) .\n\nProof. The proof is not difficult after the formula is presented. The \u2264-inequality is a generalization of the\ninequality C (x, y) \u2264 K (x) + C (y) and can be proven in the same way. Assume that p is a self-delimiting\nprogram that maps C (a, b) to a, and q is a (not necessarily self-delimiting) program that maps a and C (a, b)\n\u2217 B. Bauwens is supported by Funda\u00e7ao para a Ci\u00eancia e a Tecnologia by grant (SFRH/BPD/75129/2010), and is also partially\nsupported by project CSI 2 (PTDC/EIAC/099951/2008). A. Shen is supported in part by projects NAFIT ANR-08-EMER-008-01\ngrant and RFBR 09-01-00709a. Author are grateful to their colleagues for interesting discussions and to the anonymous referees for\nuseful comments.\n\u2020 Instituto de Telecomunica\u00e7 \u00f5es Faculdade de Ci\u00eancia at Porto University, R.Campo Alegre, 1021/1055, 4169-007 Porto - Portugal.\n\u2021 Laboratoire d'Informatique, de Robotique et de Microlectronique de Montpellier, UMR 5506 - CC 477, 161 rue Ada, 34095\nMontpellier Cedex 5 France.\n\n1\n\n\fto b. The natural idea is to concatenate p and q; since p is self-delimiting, given pq one may find where p\nends and q starts, and then use p to get a and q to get b. However, this idea needs some refinement: in both\ncases we need to know C (a, b) in advance; one may use the length of pq as a replacement for it, but since\nwe have not yet proven the equality, we have no right to do so.\nSo more caution is needed. Assume that the \u2264-inequality is not true and C (a, b) exceeds K (a| C (a, b))+\nC (b|a, C (a, b)) by some d. Then we can concatenate prefix-free description d \u0304 of d (that has length\nO(log d)), then p and then q. Now we have enough information: first we find d, then C (a, b) = |p|+ |q|+ d,\nthen a, and finally b. Therefore C (a, b) does not exceed O(log d) + |p| + |q| + O(1), therefore d \u2264\nO(log d) + O(1) and d = O(1). The \u2264-inequality is proven.\nLet us prove the reverse inequality. In this proof we use the interpretation of prefix-free complexity\nas the logarithm of a priori probability (see, e.g., [7] for details). If n = C (a, b) is given, one can start\nenumerating all pairs (x, y) such that C (x, y) \u2264 n; there are at most 2n+1 of them and the pair (a, b) is\namong them. For fixed x, for each pair (x, y) in this enumeration we add 2\u2212n\u22121 to the probability of x; in\nthis way we approximate (from below) the semimeasure P(x|n) = Nx 2\u2212n\u22121 . Therefore, we get an upper\nbound for K (a|n):\nK (a|n) \u2264 \u2212 log P(a|n) + O(1) = n \u2212 log2 Na + O(1) ,\nwhere Na is the number of y's such that C (a, y) \u2264 n. On the other hand, given a and n, we can enumerate\nall these y, and b is among them, so b can be described by its ordinal number in this enumeration, therefore\nC (b|a, n) \u2264 log2 Na + O(1) .\nSumming these two inequalities, we get the desired result.\nWe can now get several known O(1)-equalities for complexities as corollaries of Theorem 1.\n\u2022 Recall that C (a, C (a)) = C (a), and K (a, K (a)) = K (a) (the O(1)-additive terms are omitted here\nand below), since the shortest program for a also describes its own length.\n\u2022 For empty b we get C (a) = K (a| C (a)), see also [3, 6].\n\u2022 For empty a we get C (b) = C (b| C (b)), see also [3, 6].\n\u2022 The last two equalities imply that C (u| C (u)) = K (u| C (u)).\nThe direct proof for last three statements is also easy. To show that C (a) \u2264 C (a| C (a)), assume that\nsome program p maps C (a) to a and is d bits shorter than C (a). Then we add a prefix d \u0304 of length\nO(log d) that describes d in a self-delimiting way, and note that d \u0304p determines first C (a) and then\na, so d \u2264 O(log d) + O(1) and d = O(1). To show that K (a| C (a)) \u2264 C (a| C (a)) we note that in the\npresence of C (a) every program of length C (a) can be considered as a self-delimiting one, since its\nlength is known.\nLevin also pointed out that C (a) can be defined in terms of prefix-free complexity as a minimal i\nsuch that K (a|i) \u2264 i. (Indeed, for i = C (a) both sides differ by O(1), and changing right hand side\nby d, we change left hand side by O(log d), so the intersection point is unique up to O(1)-precision.\nIn other terms, K (a|i) = i + O(1) implies C (a) = i + O(1).)\n\u2022 More generally, we may let a be some fixed computable function of b: if a = f (b), we get C (b) =\nK ( f (b)| C (b)) + C (b| f (b), C (b)).\nOne can also see that Theorem 1 can be formally derived from Levin's results mentioned above. To\nshow that\nC (b|a, C (a, b)) = C (a, b) \u2212 K (a| C (a, b))\nwe need to show that the right hand side i = C (a, b)\u2212K (a| C (a, b)) satisfies the equality K (b|a, C (a, b), i) =\ni with O(1)-precision, which implies C (b|a, C (a, b)) = i. (We omit all O(1)-terms, as usual.) In the condition of the last inequality we may replace i by K (a| C (a, b)) since C (a, b) is already in the condition.\nTherefore, we need to show that\nK (b|a, C (a, b), K (a| C (a, b))) = C (a, b) \u2212 K (a| C (a, b))\n2\n\n\for\nK (b|a, C (a, b), K (a| C (a, b))) + K (a| C (a, b)) = C (a, b).\nBut the sum in the left hand side equals K (a, b| C (a, b)) due to the formula for prefix complexity of a pair\n(a, b) relativized to the condition C (a, b), and it remains to note that K (a, b| C (a, b)) = C (a, b). (This\nalternative proof was suggested by Peter Gacs.)\nWe can obtain a different version of Theorem 1:\nProposition 1.\nC (a, b) = K (a| C (a, b)) + C (b|a, K (a| C (a, b))) + O(1) .\nProof. Indeed, the \u2264-inequality can be shown in the same way as the \u2264-inequality in the proof of Theorem 1, hence it remains to show the \u2265-inequality. Let p be a program of length C (b|a, C (a, b)) that computes b given a and C (a, b). (The program p is not assumed to be self-delimiting.) Knowing p, we can also\ncompute b given a and K (a| C (a, b)). First, we compute |p| + K (a| C (a, b)), and this sum equals C(a, b)\n(Theorem 1). Then, using a again, we compute b. Hence C (b|a, C (a, b)) \u2265 C (b|a, K (a| C (a, b))).\nOne may complain that Theorem 1 is a bit strange since it uses prefix-free complexity in one term\nand plain complexity in the second (conditional) part. As we have already noted, one cannot use C in\nboth parts: C (a, b) can exceed even C (a) + C (b) by a logarithmic term. One may then ask whether it\nis possible to exchange plain and prefix-free complexity in the two terms we have and prove that C (a, b)\nequals something like\nC (a| C (a, b)) + K (b|a, C (a, b)).\nIt turns out that it is not possible: even the inequality C (a, b) \u2264 C (a) + K (b|a) + O(1) is not true. At first it\nseems that one could concatenate a self-delimiting program q that produces b given a and a (plain) program\np that produces a, in the hope that the endpoint of q can be reconstructed, and then the rest is p. However,\nthis idea does not work: the program q is self-delimiting only when a is known; to know a we need to have\np, and to know p we need to know where q ends, so there is a vicious circle here.\nLet us show that the problem is unavoidable and that for infinitely many pairs (x, y) we have\nC (x, y) \u2265 C (x) + K (y|x) + logn \u2212 2 loglog n \u2212 O(1),\nwhere n = |x| + |y| is the total length of both strings. To construct such a pair, let n = 2k for some k, and\nchoose a string r of length n and a natural number i < n such that C (r, i) \u2265 n + logn. (For every n, there\nare n2n pairs (r, i), so one of them has high complexity.)\nLet x = r1 . . . ri and y = ri+1 . . . rn . Note that C (x, y) = C (r, i) \u2265 n+logn and that C (x) \u2264 i. Furthermore,\nK (y|x) \u2264 K (y|x, n) + K (n). Here K (y|x, n) \u2264 |y| = n \u2212 i, since x and n determine |y| and K (y | |y|) \u2264 |y|;\non the other hand, K (n) \u2264 2 log log n.1\nThere is still some chance to get a formula for the plain complexity of a pair (x, y) that involves only\nplain complexities, assuming that we add some condition in the left hand side, i.e., to get some formula\nof the type C (a, b|?) =?. Unfortunately, the best result in this direction that we managed to get is the\nfollowing observation:\nProposition 2. For all x, y there exists a (unique up to O(1)-precision) pair (k, l) such that C (x|l) = k,\nC (y|x, k) = l. For such a pair we have C (x|l) = k, C (y|x, k) = l and this implies C (x, y|k, l) = C (x, y|k) =\nC (x, y|l) = l + k (all with O(1)-precision).\nProof. The pair in question is a fixed point of F : (k, l) 7\u2192 (C (x|l), C (y|x, k)). It exists and is unique since\nF maps points at distance d into points at distance O(log d). (Here \"distance\" means geometric distance\nbetween points in Z2 .)\n1 As a byproduct of this example and the discussion above we conclude that K (x|y) cannot be defined as minimal prefix-free\ncomplexity of a program that maps y to x: the value K (y|x) can be smaller than min {K(p) : U(p,x) = y}, where U is the universal\nfunction. Indeed, in this case we would have the inequality C (x,y) \u2264 C (x) + K (y|x), since the prefix-free description of a program\nthat maps x to y and a shortest description for x can be concatenated into a description of the pair (x,y).\n\n3\n\n\fUsing the relativized version of the statement C (z) = C (z| C (z)), we conclude that C (x|k, l) = k and\nC (y|x, k, l) = l. Let us prove now that C (x, y|k, l) = k + l. Indeed, the standard proof of Kolmogorov\u2013Levin\ntheorem shows that for any x, y, k\u2032 , l \u2032 such that\nC (x, y|k\u2032 , l \u2032 ) \u2264 k\u2032 + l \u2032\nwe have either\nC (x|k\u2032 , l \u2032 ) \u2264 k\u2032 or\n\nC (y|x, k\u2032 , l \u2032 ) \u2264 l \u2032 .\n\nHence if C (x|k, l) = k and C (y|x, k, l) = l for some k and l, we have C (x, y|k, l) \u2265 k + l (otherwise k and\nl can be decreased to get a contradiction). By concatenation we obtain also that C (x, y|k, l) \u2264 k + l, so\nC (x, y|k, l) = k + l (all equations with O(1)-precision).\nIt remains to show that C (x, y|k, l) = k + l implies C (x, y|k) = k + l and, similarly, C (x, y|l) = k + l.\nIndeed, a program of length k + l that maps (k, l) to (x, y), can be used to map k (or l) to (x, y): knowing\nthe length of the program and one of the values of k and l, we reconstruct the other value.\nRemark 1. One can ask what can be said about pairs (k\u2032 , l \u2032 ) such that C (x|l \u2032 ) \u2264 k\u2032 and C (y|x, k\u2032 ) \u2264 l \u2032 . The\npair (k, l) given by the theorem is not necessarily coordinate-wise minimal: for example, taking a large\nk\u2032 that contains full information about y we may let l \u2032 = 0. Indeed, C (x|0) \u2264 k\u2032 (since k\u2032 is large) and\nC (y|x, k\u2032 ) \u2264 0 (since k\u2032 determines y). However, to get some decrease in k\u2032 (compared to k) or l \u2032 (compared\nto l) we need to change the other parameter by an exponentially bigger quantity, since the information\ndistance between i and i\u2032 is O(log |i \u2212 i\u2032 |). The change in the other parameter should be its increase,\notherwise we could repeat the arguments exchanging k and l and get a contradiction (each of two changes\ncould not be exponentially big compared to the other one).\n\nReferences\n[1] G. Chaitin, A Theory of Program Size Formally Identical to Information Theory, Journal of the ACM,\n22(3):329\u2013340 (1975).\n[2] P. G\u00e1cs. On the symmetry of algorithmic information. Soviet Math. Dokl., 15(5):1477\u20131480 (1974).\n[3] P.\nG\u00e1cs.\nLecture\nnotes\non\ndescriptional\ncomplexity\nand\nhttp://www.cs.bu.edu/faculty/gacs/papers/ait-notes.pdf, (1988-2012).\n\nrandomness.\n\n[4] A.N. Kolmogorov, Three approaches to the quantitative definition of information, Problemy peredachi\nInformatsii, vol. 1, no. 1, pp. 3\u201311 (1965)\n[5] A.N. Kolmogorov, Logical basis for information theory and probability theory, IEEE Transactions on\nInformation Theory, IT-14(5): 662\u2013664 (1968)\n[6] M. Li and P.M.B. Vit\u00e1nyi. An Introduction to Kolmogorov Complexity and Its Applications. SpringerVerlag, New York, (2008).\n[7] A. Shen, Algorithmic Information theory and Kolmogorov complexity. Technical report TR2000-034,\nUppsala University (2000).\n\n4\n\n\f"}