{"id": "http://arxiv.org/abs/cs/0412017v1", "guidislink": true, "updated": "2004-12-05T03:56:57Z", "updated_parsed": [2004, 12, 5, 3, 56, 57, 6, 340, 0], "published": "2004-12-05T03:56:57Z", "published_parsed": [2004, 12, 5, 3, 56, 57, 6, 340, 0], "title": "An Analysis of the Skype Peer-to-Peer Internet Telephony Protocol", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0412013%2Ccs%2F0412101%2Ccs%2F0412111%2Ccs%2F0412033%2Ccs%2F0412061%2Ccs%2F0412015%2Ccs%2F0412010%2Ccs%2F0412071%2Ccs%2F0412064%2Ccs%2F0412028%2Ccs%2F0412037%2Ccs%2F0412068%2Ccs%2F0412120%2Ccs%2F0412066%2Ccs%2F0412030%2Ccs%2F0412076%2Ccs%2F0412060%2Ccs%2F0412110%2Ccs%2F0412034%2Ccs%2F0412024%2Ccs%2F0412118%2Ccs%2F0412052%2Ccs%2F0412095%2Ccs%2F0412074%2Ccs%2F0412006%2Ccs%2F0412098%2Ccs%2F0412063%2Ccs%2F0412021%2Ccs%2F0412031%2Ccs%2F0412099%2Ccs%2F0412100%2Ccs%2F0412036%2Ccs%2F0412080%2Ccs%2F0412096%2Ccs%2F0412077%2Ccs%2F0412109%2Ccs%2F0412043%2Ccs%2F0412048%2Ccs%2F0412117%2Ccs%2F0412081%2Ccs%2F0412007%2Ccs%2F0412059%2Ccs%2F0412026%2Ccs%2F0412023%2Ccs%2F0412050%2Ccs%2F0412027%2Ccs%2F0412017%2Ccs%2F0412116%2Ccs%2F0412106%2Ccs%2F0412003%2Ccs%2F0412083%2Ccs%2F0412041%2Ccs%2F0412002%2Ccs%2F0412104%2Ccs%2F0412025%2Ccs%2F0412056%2Ccs%2F0412121%2Ccs%2F0412012%2Ccs%2F0412042%2Ccs%2F0412091%2Ccs%2F0209003%2Ccs%2F0209016%2Ccs%2F0209032%2Ccs%2F0209004%2Ccs%2F0209033%2Ccs%2F0209021%2Ccs%2F0209028%2Ccs%2F0209019%2Ccs%2F0209011%2Ccs%2F0209023%2Ccs%2F0209002%2Ccs%2F0209025%2Ccs%2F0209018%2Ccs%2F0209020%2Ccs%2F0209013%2Ccs%2F0209015%2Ccs%2F0209034%2Ccs%2F0209029%2Ccs%2F0209010%2Ccs%2F0209006%2Ccs%2F0209026%2Ccs%2F0209009%2Ccs%2F0209008%2Ccs%2F0209024%2Ccs%2F0209005%2Ccs%2F0209012%2Ccs%2F0209014%2Ccs%2F0209017%2Ccs%2F0209030%2Ccs%2F0209031%2Ccs%2F0209001%2Ccs%2F0209027%2Ccs%2F0612055%2Ccs%2F0612117%2Ccs%2F0612013%2Ccs%2F0612135%2Ccs%2F0612107%2Ccs%2F0612101%2Ccs%2F0612014%2Ccs%2F0612111%2Ccs%2F0612103&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "An Analysis of the Skype Peer-to-Peer Internet Telephony Protocol"}, "summary": "Skype is a peer-to-peer VoIP client developed by KaZaa in 2003. Skype claims\nthat it can work almost seamlessly across NATs and firewalls and has better\nvoice quality than the MSN and Yahoo IM applications. It encrypts calls\nend-to-end, and stores user information in a decentralized fashion. Skype also\nsupports instant messaging and conferencing. This report analyzes key Skype\nfunctions such as login, NAT and firewall traversal, call establishment, media\ntransfer, codecs, and conferencing under three different network setups.\nAnalysis is performed by careful study of Skype network traffic.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0412013%2Ccs%2F0412101%2Ccs%2F0412111%2Ccs%2F0412033%2Ccs%2F0412061%2Ccs%2F0412015%2Ccs%2F0412010%2Ccs%2F0412071%2Ccs%2F0412064%2Ccs%2F0412028%2Ccs%2F0412037%2Ccs%2F0412068%2Ccs%2F0412120%2Ccs%2F0412066%2Ccs%2F0412030%2Ccs%2F0412076%2Ccs%2F0412060%2Ccs%2F0412110%2Ccs%2F0412034%2Ccs%2F0412024%2Ccs%2F0412118%2Ccs%2F0412052%2Ccs%2F0412095%2Ccs%2F0412074%2Ccs%2F0412006%2Ccs%2F0412098%2Ccs%2F0412063%2Ccs%2F0412021%2Ccs%2F0412031%2Ccs%2F0412099%2Ccs%2F0412100%2Ccs%2F0412036%2Ccs%2F0412080%2Ccs%2F0412096%2Ccs%2F0412077%2Ccs%2F0412109%2Ccs%2F0412043%2Ccs%2F0412048%2Ccs%2F0412117%2Ccs%2F0412081%2Ccs%2F0412007%2Ccs%2F0412059%2Ccs%2F0412026%2Ccs%2F0412023%2Ccs%2F0412050%2Ccs%2F0412027%2Ccs%2F0412017%2Ccs%2F0412116%2Ccs%2F0412106%2Ccs%2F0412003%2Ccs%2F0412083%2Ccs%2F0412041%2Ccs%2F0412002%2Ccs%2F0412104%2Ccs%2F0412025%2Ccs%2F0412056%2Ccs%2F0412121%2Ccs%2F0412012%2Ccs%2F0412042%2Ccs%2F0412091%2Ccs%2F0209003%2Ccs%2F0209016%2Ccs%2F0209032%2Ccs%2F0209004%2Ccs%2F0209033%2Ccs%2F0209021%2Ccs%2F0209028%2Ccs%2F0209019%2Ccs%2F0209011%2Ccs%2F0209023%2Ccs%2F0209002%2Ccs%2F0209025%2Ccs%2F0209018%2Ccs%2F0209020%2Ccs%2F0209013%2Ccs%2F0209015%2Ccs%2F0209034%2Ccs%2F0209029%2Ccs%2F0209010%2Ccs%2F0209006%2Ccs%2F0209026%2Ccs%2F0209009%2Ccs%2F0209008%2Ccs%2F0209024%2Ccs%2F0209005%2Ccs%2F0209012%2Ccs%2F0209014%2Ccs%2F0209017%2Ccs%2F0209030%2Ccs%2F0209031%2Ccs%2F0209001%2Ccs%2F0209027%2Ccs%2F0612055%2Ccs%2F0612117%2Ccs%2F0612013%2Ccs%2F0612135%2Ccs%2F0612107%2Ccs%2F0612101%2Ccs%2F0612014%2Ccs%2F0612111%2Ccs%2F0612103&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Skype is a peer-to-peer VoIP client developed by KaZaa in 2003. Skype claims\nthat it can work almost seamlessly across NATs and firewalls and has better\nvoice quality than the MSN and Yahoo IM applications. It encrypts calls\nend-to-end, and stores user information in a decentralized fashion. Skype also\nsupports instant messaging and conferencing. This report analyzes key Skype\nfunctions such as login, NAT and firewall traversal, call establishment, media\ntransfer, codecs, and conferencing under three different network setups.\nAnalysis is performed by careful study of Skype network traffic."}, "authors": ["Salman A. Baset", "Henning Schulzrinne"], "author_detail": {"name": "Henning Schulzrinne"}, "author": "Henning Schulzrinne", "links": [{"href": "http://arxiv.org/abs/cs/0412017v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cs/0412017v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.MM", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "C.2.2", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cs/0412017v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/cs/0412017v1", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "An Analysis of the Skype Peer-to-Peer Internet Telephony\nProtocol\nSalman A. Baset and Henning Schulzrinne\nDepartment of Computer Science\nColumbia University, New York NY 10027\n{salman,hgs}@cs.columbia.edu\nSeptember 15, 2004\n\nABSTRACT\nSkype is a peer-to-peer VoIP client developed by KaZaa in 2003.\nSkype claims that it can work almost seamlessly across NATs and\nfirewalls and has better voice quality than the MSN and Yahoo\nIM applications. It encrypts calls end-to-end, and stores user\ninformation in a decentralized fashion. Skype also supports\ninstant messaging and conferencing.\n\nensures that Skype login names are unique across the Skype name\nspace. Figure 1 illustrates the relationship between ordinary hosts,\nsuper nodes and login server.\nApart from the login server, there is no central server in the Skype\nnetwork. Online and offline user information is stored and\npropagated in a decentralized fashion and so are the user search\nqueries.\n\nThis report analyzes key Skype functions such as login, NAT and\nfirewall traversal, call establishment, media transfer, codecs, and\nconferencing under three different network setups. Analysis is\nperformed by careful study of Skype network traffic.\n\nCategories and Subject Descriptors\nC.2.2\n[Computer-Communication\nProtocols-Applications\n\nNetworks]:\n\nNetwork\n\nGeneral Terms\nAlgorithms, Design, Measurement, Performance, Experimentation, Security,\n\nKeywords\nPeer-to-peer (p2p), Voice over IP (VoIP), Super Node (SN),\nInternet telephony, conferencing\n\n1. INTRODUCTION\nSkype is a peer-to-peer VoIP client developed by KaZaa [17] that\nallows its users to place voice calls and send text messages to\nother users of Skype clients. In essence, it is very similar to the\nMSN and Yahoo IM applications, as it has capabilities for voicecalls, instant messaging, audio conferencing, and buddy lists.\nHowever, the underlying protocols and techniques it employs are\nquite different.\nLike its file sharing predecessor KaZaa, Skype is an overlay peerto-peer network. There are two types of nodes in this overlay\nnetwork, ordinary hosts and super nodes (SN). An ordinary host is\na Skype application that can be used to place voice calls and send\ntext messages. A super node is an ordinary host's end-point on the\nSkype network. Any node with a public IP address having\nsufficient CPU, memory, and network bandwidth is a candidate to\nbecome a super node. An ordinary host must connect to a super\nnode and must register itself with the Skype login server for a\nsuccessful login. Although not a Skype node itself, the Skype\nlogin server is an important entity in the Skype network. User\nnames and passwords are stored at the login server. User\nauthentication at login is also done at this server. This server also\n\nFigure 1. Skype Network. There are three main entities:\nsupernodes, ordinary nodes, and the login server.\nNAT and firewall traversal are important Skype functions. We\nbelieve that each Skype node uses a variant of STUN [1] protocol\nto determine the type of NAT and firewall it is behind. We also\nbelieve that there is no global NAT and firewall traversal server\nbecause if there was one, the Skype node would have exchanged\n\n\ftraffic with it during login and call establishment in the many\nexperiments we performed.\n\n2.3 Codecs\n\nThe Skype network is an overlay network and thus each Skype\nclient (SC) should build and refresh a table of reachable nodes. In\nSkype, this table is called host cache (HC) and it contains IP\naddress and port number of super nodes. It is stored in the\nWindows registry for each Skype node.\n\nThe white paper [7] observes that Skype uses iLBC [8], iSAC [9],\nor a third unknown codec. GlobalIPSound [10] has implemented\nthe iLBC and iSAC codecs and their website lists Skype as their\npartner. We believe that Skype uses their codec implementations.\nWe measured that the Skype codecs allow frequencies between\n50-8,000 Hz to pass through. This frequency range is the\ncharacteristic of a wideband codec.\n\nSkype claims to have implemented a '3G P2P' or 'Global Index'\n[2] technology (Section 4.3), which is guaranteed to find a user if\nthat user has logged in the Skype network in the last 72 hours.\n\n2.4 Buddy List\n\nSkype uses wideband codecs which allows it to maintain\nreasonable call quality at an available bandwidth of 32 kb/s. It\nuses TCP for signaling, and both UDP and TCP for transporting\nmedia traffic. Signaling and media traffic are not sent on the same\nports.\n\nSkype stores its buddy information in the Windows registry.\nBuddy list is digitally signed and encrypted. The buddy list is\nlocal to one machine and is not stored on a central server. If a user\nuses SC on a different machine to log onto the Skype network,\nthat user has to reconstruct the buddy list.\n\n2.5 Encryption\n\nThe rest of this report is organized as follows. Section 2 describes\nkey components of the Skype software and the Skype network.\nSection 3 describes the experimental setup. Section 4 discusses\nkey Skype functions like startup, login, user search, call\nestablishment, media transfer and codecs, and presence timers.\nFlow diagrams based on actual network traffic are used to\nelaborate on the details. Section 5 discusses conferencing. Section\n6 discusses other experiments.\n\nThe Skype website [13] explains: \"Skype uses AES (Advanced\nEncryption Standard) \u2013 also known as Rijndel \u2013 which is also\nused by U.S. Government organizations to protect sensitive\ninformation. Skype uses 256-bit encryption, which has a total of\n1.1 x 1077 possible keys, in order to actively encrypt the data in\neach Skype call or instant message. Skype uses 1536 to 2048 bit\nRSA to negotiate symmetric AES keys. User public keys are\ncertified by Skype server at login.\"\n\n2. KEY COMPONENTS OF THE SKYPE\nSOFTWARE\n\n2.6 NAT and Firewall\n\nA Skype client listens on particular ports for incoming calls,\nmaintains a table of other Skype nodes called host cache, uses\nwideband codecs, maintains a buddy list, encrypts messages endto-end, and determines if it is behind a NAT or a firewall. This\nsection discusses these components and functionalities in detail.\n\n2.1 Ports\nA Skype client (SC) opens a TCP and a UDP listening port at the\nport number configured in its connection dialog box. SC\nrandomly chooses the port number upon installation. In addition,\nSC also opens TCP listening ports at port number 80 (HTTP\nport), and port number 443 (HTTPS port). Unlike many Internet\nprotocols, like SIP [5] and HTTP [6], there is no default TCP or\nUDP listening port. Figure 15 shows a snapshot of the Skype\nconnection dialog box. This figure shows the ports on which a SC\nlistens for incoming connections.\n\n2.2 Host Cache\nThe host cache (HC) is a list of super node IP address and port\npairs that SC builds and refreshes regularly. It is the most critical\npart to the Skype operation. At least one valid entry must be\npresent in the HC. A valid entry is an IP address and port number\nof an online Skype node. A SC stores host cache in the Windows\nregistry at HKEY_CURRENT_USER / SOFTWARE / SKYPE /\nPHONE / LIB / CONNECTION / HOSTCACHE. After running a\nSC for two days, we observed that HC contained a maximum of\n200 entries. Host and peer caches are not new to Skype. Chord\n[19], another peer-to-peer protocol has a finger table, which it\nuses to quickly find a node.\n\nWe conjecture that SC uses a variation of the STUN [1] and\nTURN [18] protocols to determine the type of NAT and firewall it\nis behind. We also conjecture that SC refreshes this information\nperiodically. This information is also stored in the Windows\nregistry.\nUnlike its file sharing counter part KaZaa, a SC cannot prevent\nitself from becoming a super node.\n\n3. EXPERIMENTAL SETUP\nAll experiments were performed for Skype version 0.97.0.6.\nSkype was installed on two Windows 2000 machines. One\nmachine was a Pentium II 200MHz with 128 MB RAM, and the\nother machine was a Pentium Pro 200 MHz with 128 MB RAM.\nEach machine had a 10/100 Mb/s Ethernet card and was\nconnected to a 100 Mb/s network.\nWe performed experiments under three different network setups.\nIn the first setup, both Skype users were on machines with public\nIP addresses; in the second setup, one Skype user was behind\nport-restricted NAT; in the third setup, both Skype users were\nbehind a port-restricted NAT and UDP-restricted firewall. NAT\nand firewall machines ran Red Hat Linux 8.0 and were connected\nto 100 Mb/s Ethernet network.\nEthereal [3] and NetPeeker [4] were used to monitor and control\nnetwork traffic, respectively. NetPeeker was used to tune the\nbandwidth so as to analyze the Skype operation under network\ncongestion.\nFor each experiment, the Windows registry was cleared of any\nSkype entries and Skype was reinstalled on the machine.\nAll experiments were performed between February and April,\n2004.\n\n\f4. SKYPE FUNCTIONS\nSkype functions can be classified into startup, login, user search,\ncall establishment and tear down, media transfer, and presence\nmessages. This section discusses each of them in detail.\n\n4.1 Startup\nWhen SC was run for the first time after installation, it sent a\nHTTP 1.1 GET request to the Skype server (skype.com). The first\nline of this request contains the keyword 'installed'.\nDuring subsequent startups, a SC only sent a HTTP 1.1 GET\nrequest to the Skype server (skype.com) to determine if a new\nversion is available. The first line of this request contains the\nkeyword 'getlatestversion'.\nSee the Appendix for complete messages.\n\n4.2 Login\nLogin is perhaps the most critical function to the Skype operation.\nIt is during this process a SC authenticates its user name and\npassword with the login server, advertises its presence to other\npeers and its buddies, determines the type of NAT and firewall it\nis behind, and discovers online Skype nodes with public IP\naddresses. We observed that these newly discovered nodes were\nused to maintain connection with the Skype network should the\nSN to which SC was connected became unavailable.\n\n4.2.1 Login Process\nAs discussed in Section 2, the HC must contain a valid entry for a\nSC to be able to connect to the Skype network. If the HC was\nfilled with only one invalid entry, SC could not connect to the\nSkype network and reported a login failure. However, we gained\nuseful insights in the Skype login process by observing the\nmessage flow between SC and this invalid HC entry. The\nexperimental setup and observations for the login process are\ndescribed below.\nFirst, we flushed the SC host cache and filled it with only one\nentry which was the IP address and port number of a machine on\nwhich no Skype client was running. The SC was then started and\na login attempt was made. Since HC had an invalid entry, SC\ncould not connect to the Skype network. We observed that the SC\nfirst sent a UDP packet to this entry. If there was no response after\nroughly five seconds, SC tried to establish a TCP connection with\nthis entry. It then tried to establish a TCP connection to the HC IP\naddress and port 80 (HTTP port). If still unsuccessful, it tried to\nconnect to HC IP address and port 443 (HTTPS port). SC then\nwaited for roughly 6 seconds. It repeated the whole process four\nmore times after which it reported a login failure.\nWe observed that a SC must establish a TCP connection with a\nSN in order to connect to the Skype network. If it cannot connect\nto a super node, it will report a login failure.\nMost firewalls are configured to allow outgoing TCP traffic to\nport 80 (HTTP port) and port 443 (HTTPS port). A SC behind a\nfirewall, which blocks UDP traffic and permits selective TCP\ntraffic, takes advantage of this fact. At login, it establishes a TCP\nconnection with another Skype node with a public IP address and\nport 80 or port 443.\n\nFigure 2. Skype login algorithm. Only one entry is present in the\nHC. If there is more than one entry, SC sends UDP packets to\nthem before attempting a TCP connection. Authentication with\nthe login server is not shown.\n\n4.2.2 Login Server\nAfter a SC is connected to a SN, the SC must authenticate the user\nname and password with the Skype login server. The login server\nis the only central component in the Skype network. It stores\nSkype user names and passwords and ensures that Skype user\nnames are unique across the Skype name space. SC must\n\n\fauthenticate itself with login server for a successful login. During\nour experiments we observed that SC always exchanged data over\nTCP with a node whose IP address was 80.160.91.11. We believe\nthat this node is the login server. A reverse lookup of this IP\naddress retrieved NS records whose values are ns14.inet.tele.dk\nand ns15.inet.tele.dk. It thus appears from the reverse lookup that\nthe login server is hosted by an ISP based in Denmark.\n\nconnection with the login server, exchanges authentication\ninformation with it, and finally closes the TCP connection. The\ninitial TCP data exchange with the bootstrap SN and the login\nserver shows the existence of a challenge-response mechanism.\nThe TCP connection with the SN persisted as long as SN was\nalive. When the SN became unavailable, SC establishes a TCP\nconnection with another SN.\n\n4.2.3 Bootstrap Super Nodes\nAfter logging in for the first time after installation, HC was\ninitialized with seven IP address and port pairs. We observed that\nupon first login, HC was always initialized with these seven IP\naddress and port pairs except for a rare random occurrence. In the\ncase where HC was initialized with more than seven IP addresses\nand port pairs, it always contained those seven IP address and port\npairs. It was with one of these IP address and port entries a SC\nestablished a TCP connection when a user used that SC to log\nonto the Skype network for the first time after installation. We call\nthese IP address and port pairs bootstrap super nodes. Figure 16\nshows a snapshot of the host cache of the SC that contains IP\naddress and port numbers of these bootstrap super nodes. These\nIP address and port pairs and their corresponding host names\nobtained using a reverse lookup are:\nIP address:port\n66.235.180.9:33033\n66.235.181.9:33033\n80.161.91.25:33033\n80.160.91.12:33033\n64.246.49.60:33033\n64.246.49.61:33033\n64.246.48.23:33033\n\nReverse lookup result\nsls-cb10p6.dca2.superb.net\nip9.181.susc.suscom.net\n0x50a15b19.boanxx15.adsl-dhcp.tele.dk\n0x50a15b0c.albnxx9.adsl-dhcp.tele.dk\nrs-64-246-49-60.ev1.net\nrs-64-246-49-61.ev1.net\nns2.ev1.net\n\nFrom the reverse lookup, it appears that bootstrap SNs are\nconnected to the Internet through four ISPs. Superb [14], Suscom\n[15], ev1.net [16] are US-based ISPs.\nAfter installation and first time startup, we observed that the HC\nwas empty. However upon first login, the SC sent UDP packets to\nat least four nodes in the bootstrap node list. Thus, either\nbootstrap IP address and port information is hard coded in the SC,\nor it is encrypted and not directly visible in the Skype Windows\nregistry, or this is a one-time process to contact bootstrap nodes.\nWe also observed that if the HC was flushed after the first login,\nSC was unable to connect to the Skype network. These\nobservations suggest that we perform separate experiments to\nanalyze the first-time and subsequent login processes.\n\n4.2.4 First-time Login Process\nThe SC host cache was empty upon installation. Thus, a SC must\nconnect to well known Skype nodes in order to log on to the\nSkype network. It does so by sending UDP packets to some\nbootstrap super nodes and then waits for their response over UDP\nfor some time. It is not clear how SC selects among bootstrap SNs\nto send UDP packets to. SC then established a TCP connection\nwith the bootstrap super node that responded. Since more than\none node could respond, a SC could establish a TCP connection\nwith more than one bootstrap node. A SC, however, maintains a\nTCP connection with at least one bootstrap node and may close\nTCP connections with other nodes. After exchanging some\npackets with SN over TCP, it then perhaps acquired the address of\nthe login server (80.160.91.11). SC then establishes a TCP\n\nFigure 3. Message flow for the first login after installation for\nSC on a public IP address. 'B' stands for bytes and 'N' stands\n\n\ffor node. SYN and ACK packets are shown to indicate who\ninitiated TCP connection. Message flows are not strictly\naccording to time. Messages have been grouped together to\nprovide a better picture. Message size corresponds to size of\nTCP or UDP payload. Not all messages are shown.\nFor the login process, we observed message flow for the same\nSkype user id for the three different network setups described in\nSection 3.\nThe message flow for the first-time login process for a SC running\non a machine with public IP address is shown in Figure 3. The\ntotal data exchanged between SC, SN, login server, and other\nnodes during login is about 9 kilobytes.\n\nFigure 4. Message flow for first login after installation for SC\nbehind a simple NAT. 'B' stands for bytes and 'N' stands for\nnode. SYN and ACK packets are shown to indicate who\ninitiated TCP connection. Message flows are not strictly\naccording to time. Messages have been grouped together to\nprovide a better picture. Message size corresponds to size of\nTCP or UDP payload. Not all messages are shown in the\nmessage flow.\nFor a SC behind a port-restricted NAT, the message flow for login\nwas roughly the same as for a SC on a public IP address.\nHowever, more data was exchanged. On average, SC exchanged\n10 kilobytes of data with SN, login server, and other Skype nodes.\nThe message flow is shown in Figure 4.\nA SC behind a port-restricted NAT and a UDP-restricted firewall\nwas unable to receive any UDP packets from machines outside the\nfirewall. It therefore could send and receive only TCP traffic. It\nhad a TCP connection with a SN and the login server, and it\nexchanged information with them over TCP. On average, it\nexchanged 8.5 kilobytes of data with SN, login server, and other\nSkype nodes. The message flow is shown in Figure 5.\n\n\fThe following inferences can be drawn by careful observation of\ncall flows in Fig 3, 4, and 5.\n\n4.2.4.1 NAT and Firewall Determination\nWe conjecture that a SC is able to determine at login if it is\nbehind a NAT and firewall. We guess that there are at least two\nways in which a SC can determine this information. One\npossibility is that it can determine this information by exchanging\nmessages with its SN using a variant of the STUN [1] protocol.\nThe other possibility is that during login, a SC sends and possibly\nreceives data from some nodes after it has made a TCP connection\nwith the SN. We conjecture that at this point, SC uses its variation\nof STUN [1] protocol to determine the type of NAT or firewall it\nis behind. Once determined, the SC stores this information in the\nWindows registry. We also conjecture that SC refreshes this\ninformation periodically. We are not clear on how often a SC\nrefreshes this information since Skype messages are encrypted.\n\n4.2.4.2 Alternate Node Table\nSkype is a p2p client and p2p networks are very dynamic. SC,\ntherefore, must keep track of online nodes in the Skype network\nso that it can connect to one of them if its SN becomes\nunavailable.\nFrom Figure 3 and 4, it can be seen that SC sends UDP packets to\n22 distinct nodes at the end of login process and possibly receives\na response from them if it is not behind a UDP-restricted firewall.\nWe conjecture that SC uses those messages to advertise its arrival\non the network. We also conjecture that upon receiving a response\nfrom them, SC builds a table of online nodes. We call this table\nalternate node table. It is with these nodes a SC can connect to, if\nits SN becomes unavailable. The subsequent exchange of\ninformation with some of these nodes during call establishment\nconfirms that such a table is maintained.\nIt can be seen from Figure 3, 4, and 5, that SC sends ICMP\nmessages to some nodes in the Skype network. The reason for\nsending these messages is not clear.\n\n4.2.5 Subsequent Login Process\nThe subsequent login process was quite similar to the first-time\nlogin process. The SC built a HC after a user logged in for the\nfirst time after installation. The HC got periodically updated with\nthe IP address and port number of new peers. During subsequent\nlogins, SC used the login algorithm to determine at least one\navailable peer out of the nodes present in the HC. It then\nestablished a TCP connection with that node. We also observed\nthat during subsequent logins, SC did not send any ICMP packets.\n\n4.2.6 Login Process Time\n\nFigure 5. Message flow for first login after installation for a\nSC behind a firewall, which blocks UDP packets. 'B' stands\nfor bytes and 'N' stands for node. SYN and ACK packets are\nshown to indicate who initiated TCP connection. Message\nflows are not strictly according to time. Messages have been\ngrouped together to provide a better picture. Message size\ncorresponds to size of TCP or UDP payload. Not all messages\nare shown in the message flow.\n\nWe measured the time to login on the Skype network for the three\ndifferent network setups described in Section 3. For this\nexperiment, the HC already contained the maximum of two\nhundred entries. The SC with a public IP address and the SC\nbehind a port-restricted NAT took about 3-7 seconds to complete\nthe login procedures. The SC behind a UDP-restricted firewall\ntook about 34 seconds to complete the login process. For SC\nbehind a UDP-restricted firewall, we observed that it sent UDP\npackets to its thirty HC entries. At that point it concluded that it is\nbehind UDP-restricted firewall. It then tried to establish a TCP\nconnection with the HC entries and was ultimately able to connect\nto a SN.\n\n\f4.3 User Search\nSkype uses its Global Index (GI) [2] technology to search for a\nuser. Skype claims that search is distributed and is guaranteed to\nfind a user if it exists and has logged in during the last 72 hours.\nExtensive testing suggests that Skype was always able to locate\nusers who logged in using public or private IP address in the last\n72 hours.\nSkype is a not an open protocol and its messages are encrypted.\nWhereas in login we were able to form a reasonably precise\nopinion about different entities involved, it is not possible to do\nso in search, since we cannot trace the Skype messages beyond a\nSN. Also, we were unable to force a SC to connect to a particular\nSN. Nevertheless, we have observed and present search message\nflows for the three different network setups.\n6&\n\n7&3\n7&3\n\n\u0011\n\u0011\n\n8'3\n8'3\n8'3\n8'3\n\nlogin process and responses were received from them. Message\nsize corresponds to payload size of TCP or UDP packets.\nA SC behind a port-restricted NAT exchanged data between SN,\nand some of the nodes which responded to its UDP request during\nlogin process. The message flow is shown in Figure 7.\nA SC behind a port-restricted NAT and UDP-restricted firewall\nsent the search request over TCP to its SN. We believe that SN\nthen performed the search query and informed SC of the search\nresults. Unlike user search by SC on a public IP address, SC did\nnot contact any other nodes. This suggests that SC knew that it\nwas behind a UDP-restricted firewall. The message flow is shown\nFigure 8.\n\n61\n\u0014\u0019%\n\u0018\u0015%\n\u001a\u001a%\u00031\u0014\n\u001a\u001a%\u00031\u0015\n\u0017\u0017%\u00031\u0016\n\u0017\u0017%\u00031\u0017\n\nFigure 6. Message flow for user search when SC has a public\nIP address. 'B' stands for bytes and 'N' stands for node.\nMessage sizes correspond to payload size of TCP or UDP\npackets.\nA SC has a search dialog box. After entering the Skype user id\nand pressing the find button, SC starts its search for a particular\nuser. For SC on a public IP address, SC sent a TCP packet to its\nSN. It appears that SN gave SC the IP address and port number of\nfour nodes to query, since after that exchange with SN, SC sent\nUDP packets to four nodes. We also observed that SC had not\nexchanged any information with these four nodes during login.\nSC then sent UDP packets to those nodes. If it could not find the\nuser, it informed the SN over TCP. It appears that the SN now\nasked it to contact eight different nodes, since SC then sent UDP\npackets to eight different nodes. This process continued until the\nSC found the user or it determined that the user did not exist. On\naverage, SC contacted eight nodes. The search took three to four\nseconds. We are not clear on how SC terminates the search if it is\nunable to find a user.\n\nFigure 8. User search by a SC behind a UDP-restricted\nfirewall. 'B' stands for bytes. Data is exchanged with SN only.\nMessage size corresponds to payload size of TCP/UDP packets.\n\n4.3.1 Search Result Caching\nTo observe if search results are cached at intermediate nodes, we\nperformed the following experiment. User A was behind a portrestricted NAT and UDP-restricted firewall, and he logged on the\nSkype network. User B logged in using SC running on machine B,\nwhich was on public IP address. User B (on public IP) searched\nfor user A, who is behind port-restricted NAT and UDP-restricted\nfirewall. We observed that search took about 6-8 seconds. Next,\nSC on machine B was uninstalled, and Skype registry cleared so\nas to remove any local caches. SC was reinstalled on machine B\nand user B searched for user A. The search took about 3-4\nseconds. This experiment was repeated four times on different\ndays and similar results were obtained.\nFrom the above discussion we infer that the SC performs user\ninformation caching at intermediate nodes.\n\n4.4 Call Establishment and Teardown\nFigure 7. Message flow for user search when SC is behind a\nport-restricted NAT. 'B' stands for bytes and 'N' stands for\nnode. UDP packets were sent to N1, N2, N3, and N4 during\n\nWe consider call establishment for the three network setups\ndescribed in Section 3. Further, for each setup, we consider call\nestablishment for users that are in the buddy list of caller and for\n\n\fusers that are not present in the buddy list. It is important to note\nthat call signaling is always carried over TCP.\nFor users that are not present in the buddy list, call placement is\nequal to user search plus call signaling. Thus, we discuss call\nestablishment for the case where callee is in the buddy list of\ncaller.\nIf both users were on public IP addresses, online and were in the\nbuddy list of each other, then upon pressing the call button, the\ncaller SC established a TCP connection with the callee SC.\nSignaling information was exchanged over TCP. The message\nflow between caller and callee is shown in Figure 9.\nThe initial exchange of messages between caller and callee\nindicates the existence of a challenge-response mechanism. The\ncaller also sent some messages (not shown in Figure 9) over UDP\nto alternate Skype nodes, which are online Skype nodes\ndiscovered during login. For this scenario, three kilobytes of data\nwas exchanged.\n&DOOHU\u0003SUHVV\u0003GLDO\n&DOOHU\n7&3\u001d6<1\n7&3\u001d$&.\n7&3\n7&3\n7&3\n7&3\n7&3\n7&3\n7&3\n7&3\n7&3\n\n&DOOHH\n\u0014\u0017%\n\u0014\u0017%\n\u001a\u001a%\n\u0017%\n\u0017%\n\u0018\u0015\u001b%\n\u0017%\n\u001c\u0017\u0019%\n\u0017\u001a\u001c%\n&DOOHH\u0003ULQJV\n\nFigure 9. Message flow for call establishment when caller and\ncallee SC are on machines with public IP addresses and callee\nis present in the buddy lists of caller. 'B' stands for bytes. Not\nall messages are shown.\nIn the second network setup, where the caller was behind portrestricted NAT and callee was on public IP address, signaling and\nmedia traffic did not flow directly between caller and callee.\nInstead, the caller sent signaling information over TCP to an\nonline Skype node which forwarded it to callee over TCP. This\nonline node also routed voice packets from caller to callee over\nUDP and vice versa. The message flow is shown in Figure 10.\n\nFigure 10. Message flow for call establishment when caller SC\nis behind a port-restricted NAT and callee SC is on public IP\naddress. 'B' stands for bytes and 'N' stands for node. Not all\nmessages are shown. Caller SC sent UDP messages to nodes 5,\n6, 7, and 8 during login and received responses from them. We\nthus believe caller SC stored the IP address and port of these\nnodes in its internal tables, which we call the alternate node\ntable.\nFor the third setup, in which both users were behind portrestricted NAT and UDP-restricted firewall, both caller and callee\nSC exchanged signaling information over TCP with another\nonline Skype node. Caller SC sent media over TCP to an online\nnode, which forwarded it to callee SC over TCP and vice versa.\nThe message flow is shown in Figure 11.\n\n\fgenerally do not want that arbitrary traffic should flow across their\nmachines.\nDuring call tear-down, signaling information is exchanged over\nTCP between caller and callee if they are both on public IP\naddresses, or between caller, callee and their respective SNs. The\nmessages observed for call tear down between caller and callee on\npublic IP addresses are shown in Figure 12.\n\nFigure 12. Call tear down message flow for caller and callee\nwith public IP addresses\nFor the second, and third network setups, call tear down signaling\nis also sent over TCP. We, however, do not present these message\nflows, as they do not provide any interesting information.\n\n4.5 Media Transfer and Codecs\nIf both Skype clients are on public IP address, then media traffic\nflowed directly between them over UDP. The media traffic flowed\nto and from the UDP port configured in the options dialog box.\nThe size of voice packet was 67 bytes, which is the size of UDP\npayload. For two users connected to Internet over 100 Mb/s\nEthernet with almost no congestion in the network, roughly 140\nvoice packets were exchanged both ways in one second. Thus, the\ntotal uplink and downlink bandwidth used for voice traffic is 5\nkilobytes/s. This bandwidth usage corresponds with the Skype\nclaim of 3-16 kilobytes/s.\nIf either caller or callee or both were behind port-restricted NAT,\nthey sent voice traffic to another online Skype node over UDP.\nThat node acted as a media proxy and forwarded the voice traffic\nfrom caller to callee and vice versa. The voice packet size was 67\nbytes, which is the size of UDP payload. The bandwidth used was\n5 kilobytes/s.\nIf both users were behind port-restricted NAT and UDP-restricted\nfirewall, then caller and callee sent and received voice traffic over\nTCP from another online Skype node. The TCP packet payload\nsize for voice traffic was 69 bytes. The total uplink and downlink\nbandwidth used for voice traffic is about 5 kilobytes/s. For media\ntraffic, SC used TCP with retransmissions.\nThe Skype protocol seems to prefer the use of UDP for voice\ntransmission as much as possible. The SC will use UDP for voice\ntransmission if it is behind a NAT or firewall that allows UDP\npackets to flow across.\nFigure 11. Message flow for call establishment when caller and\ncallee SC are behind a port-restricted NAT and UDPrestricted firewall. 'B' stands for bytes and 'N' stands for a\nnode. Not all messages are shown. Voice traffic flows over\nTCP.\nThere are many advantages of having a node route the voice\npackets from caller to callee and vice versa. First, it provides a\nmechanism for users behind NAT and firewall to talk to each\nother. Second, if users behind NAT or firewall want to participate\nin a conference, and some users on public IP address also want to\njoin the conference, this node serves as a mixer and broadcasts the\nconferencing traffic to the participants. The negative side is that\nthere will be a lot of traffic flowing across this node. Also, users\n\n4.5.1 Silence Suppression\nNo silence suppression is supported in Skype. We observed that\nwhen neither caller nor callee was speaking, voice packets still\nflowed between them. Transmitting these silence packets has two\nadvantages. First, it maintains the UDP bindings at NAT and\nsecond, these packets can be used to play some background noise\nat the peer. In the case where media traffic flowed over TCP\nbetween caller and callee, silence packets were still sent. The\npurpose is to avoid the drop in TCP congestion window size,\nwhich takes some RTT to reach the maximum level again.\n\n\f4.5.2 Putting a Call on Hold\nSkype allows peers to hold a call. Since a SC can operate behind\nNATs, it must ensure that UDP bindings are mak at a NAT. On\naverage, a SC sent three UDP packets per second to the call peer,\nSN, or the online Skype node acting as a media proxy when a call\nis put on hold. We also observed that in addition to UDP\nmessages, the SC also sent periodic messages over TCP to the\npeer, SN, or online Skype node acting as a media proxy during a\ncall hold.\n\n4.5.3 Codec Frequency Range\nWe performed experiments to determine the range of frequencies\nSkype codecs allow to pass through. A call was established\nbetween two Skype clients. Tones of different frequencies were\ngenerated using the NCH Tone Generator [11] on the caller SC\nand output was observed on the callee SC and vice versa. We\nobserved that the minimum and maximum audible frequency\nSkype codecs allow to pass through are 50 Hz and 8,000 Hz\nrespectively.\nUsing Net Peeker [4], we reduced the uplink and downlink\nbandwidth available to Skype application to 1500 bytes/s,\nrespectively. We observed that the minimum and maximum\naudible frequencies Skype codecs allowed to pass through\nremained unchanged i.e. 50 Hz and 8,000 Hz, respectively.\n\n4.5.4 Congestion\nWe checked Skype call quality in a low bandwidth environment\nby using Net Peeker [4] to tune the upload and download\nbandwidth available for a call. We observed that uplink and\ndownlink bandwidth of 2 kilobytes/s each was necessary for\nreasonable call quality. The voice was almost unintelligible at an\nuplink and downlink bandwidth of 1.5 kilobytes/s.\n\n4.6 Keep-alive Messages\nWe observed in for three different network setups that the SC sent\na refresh message to its SN over TCP every 60s.\n\nFigure 13. Skype refresh message to SN\n\n5. CONFERENCING\nWe observed the Skype conferencing features for a three-user\nconference for the three network setups discussed in Section 3.\nWe use the term user and machine interchangeably. Let us name\nthe three users or machines as A, B, and C. Machine A was a 2\nGHz Pentium 4 with 512 MB RAM while machine B, and C were\nPentium II 300MHz with 128 MB RAM, and Pentium Pro 200\nMHz with 128 MB RAM, respectively. In the first setup, the three\nmachines had a public IP address. A call was established between\nA and B. Then B decided to include C in the conference. From the\nethereal dump, we observed that B and C were sending their voice\ntraffic over UDP to SC on machine A, which was acting as a\nmixer. It mixed its own packets with those of B and sent them to\nC over UDP and vice versa as shown in Figure 14. The size of the\nvoice packet was 67 bytes, which is the size of UDP packet\npayload.\n\nFigure 14. Skype three user conferencing\nIn the second setup, B and C were behind port-restricted NAT,\nand A was on public Internet. Initially, user A and B established\nthe call. Both A and B were sending media to another Skype\nonline node, which forwarded A's packets to B over UDP and\nvice versa. User A then put B on hold and established a call with\nC. It then started a conference with B and C. We observed that\nboth B and C were now sending their packets to A over UDP,\nwhich mixed its own packets with those coming from B and C,\nand forwarded it to them appropriately.\nIn the third setup, B and C were behind port-restricted NAT and\nUDP-restricted firewall and A was on public Internet. User A\nstarted the conference with B and C. We observed that both B and\nC were sending their voice packets to A over TCP. A mixed its\nown voice packets with those coming from B and C and\nforwarded them to B and C appropriately.\nWe also observed that even if user B or C started a conference,\nA's machine, which was the most powerful amongst the three,\nalways got elected as conference host and mixer.\nThe white paper [7] observes that if iLBC [8] codec is used, then\nthe total call 36 kb/s for a two-way call. For three-user\nconference, it jumps to 54 kb/s for the machine hosting the\nconference.\nFor a three party conference, Skype does not do full mesh\nconferencing [12].\n\n6. OTHER EXPERIMENTS\nUnlike MSN Messenger, which signs out the user if that user logs\nin on other machine, Skype allows a user to log in from multiple\nmachines simultaneously. The calls intended for that user are\nrouted to all locations. Upon user picking a call at one location,\nthe call is immediately cancelled at other locations. Similarly,\ninstant messages for a user who is logged in at multiple machines\nare delivered to all the locations.\nA voice call was established between a SC in the IRT Lab [20]\nand a SC connected to a 56 kb/s modem. Modem users were in\nChina, Pakistan, and Singapore. The experiment was then\nrepeated with MSN, and Yahoo messengers. In all three cases, the\nmodem users reported better quality for Skype.\n\n\fThe SN is selected by the Skype protocol based on a number of\nfactors like CPU and available bandwidth. It is not possible to\narbitrarily select a SN by filling the HC with IP address of an\nonline SC. This conclusion was drawn from the following\nexperiment. Consider two online Skype nodes A and B. A is\nconnected to Skype network and has only one entry in its HC. We\ncall super node of A as SN_A. Now we modify the HC of SC on\nmachine B, such that it only contains the IP address and port\nnumber of SC running at A. When B logged onto the Skype\nnetwork, we observed that it connected to A's super node rather\nthan connecting to A.\n\n7. CONCLUSION\nSkype is the first VoIP client based on peer-to-peer technology.\nWe think that three factors are responsible for its increasing\npopularity. First, it provides better voice quality than MSN and\nYahoo IM clients; second, it can work almost seamlessly behind\nNATs and firewalls; and third, it is extremely easy to install and\nuse. We believe that Skype client uses its version of STUN [1]\nprotocol to determine the type of NAT or firewall it is behind. The\nNAT and firewall traversal techniques of Skype are similar to\nmany existing applications such as network games. It is by the\nrandom selection of sender and listener ports, the use of TCP as\nvoice streaming protocol, and the peer-to-peer nature of the Skype\nnetwork, that not only a SC traverses NATs and firewalls but it\ndoes so withhout any explicit NAT or firewall traversal server.\nSkype uses TCP for signaling. It uses wide band codecs and has\nprobably licensed them from GlobalIPSound [10]. Skype\ncommunication is encrypted.\nThe underlying search technique that Skype uses for user search is\nstill not clear. Our guess is that it uses a combination of hashing\nand periodic controlled flooding to gain information about the\nonline Skype users.\nSkype has a central login server which stores the login name and\npassword of each user. Since Skype packets are encrypted, it is\nnot possible to say with certainty what other information is stored\non the login server. However, during our experiments we did not\nobserve any subsequent exchange of information with the login\nserver after a user logged onto the Skype network.\n\nmod_ssl/2.0.47 OpenSSL/0.9.7b\nX-Powered-By: PHP/4.3.5\nCache-control: no-cache, must revalidate\nPragma: no-cache\nExpires: 0\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nContent-Language: en\n\nDuring subsequent startups, SC sent a a HTTP 1.1 GET request\ncontaining the keyword getlatestversion to skype.com:\nGET /ui/0/97/en/getlatestversion?ver=0.97.0.6 HTTP/1.1\nUser-Agent: SkypeTM Beta 0.97\nHost: ui.skype.com\nCache-Control: no-cache\n\nThe 200 OK response SC received for this GET request:\nHTTP/1.1 200 OK\nDate: Tue, 20 Apr 2004 04:51:40 GMT\nServer:\nApache/2.0.47\n(Debian\nGNU/Linux)\nPHP/4.3.5 mod_ssl/2.0.47 OpenSSL/0.9.7b\nX-Powered-By: PHP/4.3.5\nCache-control: no-cache, must revalidate\nPragma: no-cache\nExpires: 0\nTransfer-Encoding: chunked\nContent-Type: text/html; charset=utf-8\nContent-Language: en\n2\n96\n0\n\nREFERENCES\n[1] J. Rosenberg, J. Weinberger, C. Huitema, and R. Mahy.\nSTUN: Simple Traversal of User Datagram Protocol (UDP)\nThrough Network Address Translators (NATs). RFC 3489,\nIETF, Mar. 2003.\n[2] Global Index (GI):\nhttp://www.skype.com/skype_p2pexplained.html\n[3] Ethereal. http://www.ethereal.com\n\nAPPENDIX\n\n[4] Net Peeker. http://www.net-peeker.com\n\nThe Appendix shows the message dump of HTTP 1.1 GET\nrequests that a SC sent to skype.com and the responses it received,\nwhen it was started by the user.\n\n[5] J. Rosenberg, H. Schulzrinne, G. Camarillo, A. R. Johnston,\nJ. Peterson, R. Sparks, M. Handley, and E. Schooler. SIP:\nsession initiation protocol. RFC 3261, IETF, June 2002.\n\nWhen SC was started for the first time after installation, it sent a\nHTTP 1.1 GET request containing the keyword installed to\nskype.com. This request was not sent in subsequent Skype runs.\nThe request is shown below:\n\n[6] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P.\nLeach, T. Berners-Lee. HTTP: hyper text transfer protocol.\nRFC 2616, IETF, June 1999.\n\nGET /ui/0/97/en/installed HTTP/1.1\nUser-Agent: SkypeTM Beta 0.97\nHost: ui.skype.com\nCache-Control: no-cache\n\nThe 200 OK response SC received for this GET request:\n\nHTTP/1.1 200 OK\nDate: Tue, 20 Apr 2004 04:51:39 GMT\nServer: Apache/2.0.47 (Debian GNU/Linux) PHP/4.3.5\n\n[7] Skype conferencing white paper by PowerModeling:\nhttp://www.powermodeling.com/files/whitepapers/Conferenc\ne%20Test%20feb%2009.pdf\n[8] ILBC codec.\nhttp://www.globalipsound.com/pdf/gips_iLBC.pdf\n[9] iSAC codec.\nhttp://www.globalipsound.com/pdf/gips_iSAC.pdf\n[10] Global IP Sound. http://www.globalipsound.com/partners/\n[11] NCH Tone Generator. http://www.nch.com.au/tonegen/\n\n\f[12] J. Lennox and H. Schulzrinne. A protocol for reliable\ndecentralized conferencing. ACM International Workshop on\nNetwork and Operating Systems Support for Digital Audio\nand Video (NOSSDAV), Monterrey, California, June 2003.\n[13] Skype FAQ. http://www.skype.com/help_faq.html\n[14] Superb Internet. http://www.superb.net/\n[15] Susquehanna Communications. http://www.suscom.net/\n[16] Everyones Internet. http://www.ev1.net/\n\n[18] J. Rosenberg, R. Mahy, C. Huitema. TURN: traversal using\nrelay NAT. Internet draft, Internet Engineering Task Force,\nJuly 2004. Work in progress.\n[19] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, H.\nBalakrishnan. Chord: A scalable peer-to-peer lookup service\nfor internet applications. In Proc. ACM SIGCOMM (San\nDiego, 2001).\n[20] IRT lab. http://www.cs.columbia.edu/IRT\n\n[17] KaZaa. http://www.kazaa.com\n\nFigure 16. Skype connection tab. It shows the ports on which Skype listens for incoming connections.\n\nFigure 17. Skype host cache list\n\n\f"}