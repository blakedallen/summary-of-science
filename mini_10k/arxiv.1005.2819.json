{"id": "http://arxiv.org/abs/1005.2819v1", "guidislink": true, "updated": "2010-05-17T06:58:07Z", "updated_parsed": [2010, 5, 17, 6, 58, 7, 0, 137, 0], "published": "2010-05-17T06:58:07Z", "published_parsed": [2010, 5, 17, 6, 58, 7, 0, 137, 0], "title": "SABRE: A Tool for Stochastic Analysis of Biochemical Reaction Networks", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1005.0077%2C1005.0579%2C1005.5635%2C1005.2700%2C1005.3931%2C1005.2819%2C1005.2959%2C1005.4796%2C1005.4729%2C1005.4509%2C1005.0283%2C1005.1428%2C1005.2971%2C1005.2680%2C1005.1819%2C1005.3669%2C1005.4084%2C1005.3461%2C1005.0263%2C1005.0158%2C1005.3281%2C1005.1421%2C1005.4852%2C1005.1849%2C1005.3596%2C1005.4100%2C1005.5319%2C1005.5216%2C1005.3246%2C1005.1277%2C1005.2993%2C1005.4058%2C1005.3707%2C1005.1978%2C1005.4083%2C1005.2751%2C1005.0641%2C1005.3156%2C1005.5099%2C1005.0429%2C1005.3880%2C1005.4412%2C1005.4045%2C1005.1892%2C1005.3305%2C1005.3604%2C1005.4326%2C1005.3023%2C1005.0215%2C1005.1418%2C1005.0751%2C1005.0209%2C1005.3646%2C1005.5115%2C1005.2455%2C1005.5466%2C1005.5202%2C1005.1551%2C1005.1884%2C1005.5293%2C1005.0306%2C1005.3663%2C1005.0879%2C1005.3888%2C1005.3766%2C1005.1530%2C1005.1807%2C1005.2879%2C1005.0245%2C1005.2328%2C1005.0725%2C1005.5591%2C1005.3036%2C1005.5610%2C1005.4541%2C1005.0610%2C1005.0704%2C1005.5279%2C1005.1586%2C1005.2646%2C1005.4844%2C1005.2386%2C1005.2299%2C1005.3718%2C1005.3215%2C1005.5133%2C1005.5493%2C1005.4135%2C1005.2416%2C1005.0423%2C1005.5659%2C1005.0956%2C1005.3260%2C1005.1630%2C1005.5262%2C1005.3235%2C1005.5121%2C1005.1947%2C1005.1340%2C1005.1264%2C1005.3982&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "SABRE: A Tool for Stochastic Analysis of Biochemical Reaction Networks"}, "summary": "The importance of stochasticity within biological systems has been shown\nrepeatedly during the last years and has raised the need for efficient\nstochastic tools. We present SABRE, a tool for stochastic analysis of\nbiochemical reaction networks. SABRE implements fast adaptive uniformization\n(FAU), a direct numerical approximation algorithm for computing transient\nsolutions of biochemical reaction networks. Biochemical reactions networks\nrepresent biological systems studied at a molecular level and these reactions\ncan be modeled as transitions of a Markov chain. SABRE accepts as input the\nformalism of guarded commands, which it interprets either as continuous-time or\nas discrete-time Markov chains. Besides operating in a stochastic mode, SABRE\nmay also perform a deterministic analysis by directly computing a mean-field\napproximation of the system under study. We illustrate the different\nfunctionalities of SABRE by means of biological case studies.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1005.0077%2C1005.0579%2C1005.5635%2C1005.2700%2C1005.3931%2C1005.2819%2C1005.2959%2C1005.4796%2C1005.4729%2C1005.4509%2C1005.0283%2C1005.1428%2C1005.2971%2C1005.2680%2C1005.1819%2C1005.3669%2C1005.4084%2C1005.3461%2C1005.0263%2C1005.0158%2C1005.3281%2C1005.1421%2C1005.4852%2C1005.1849%2C1005.3596%2C1005.4100%2C1005.5319%2C1005.5216%2C1005.3246%2C1005.1277%2C1005.2993%2C1005.4058%2C1005.3707%2C1005.1978%2C1005.4083%2C1005.2751%2C1005.0641%2C1005.3156%2C1005.5099%2C1005.0429%2C1005.3880%2C1005.4412%2C1005.4045%2C1005.1892%2C1005.3305%2C1005.3604%2C1005.4326%2C1005.3023%2C1005.0215%2C1005.1418%2C1005.0751%2C1005.0209%2C1005.3646%2C1005.5115%2C1005.2455%2C1005.5466%2C1005.5202%2C1005.1551%2C1005.1884%2C1005.5293%2C1005.0306%2C1005.3663%2C1005.0879%2C1005.3888%2C1005.3766%2C1005.1530%2C1005.1807%2C1005.2879%2C1005.0245%2C1005.2328%2C1005.0725%2C1005.5591%2C1005.3036%2C1005.5610%2C1005.4541%2C1005.0610%2C1005.0704%2C1005.5279%2C1005.1586%2C1005.2646%2C1005.4844%2C1005.2386%2C1005.2299%2C1005.3718%2C1005.3215%2C1005.5133%2C1005.5493%2C1005.4135%2C1005.2416%2C1005.0423%2C1005.5659%2C1005.0956%2C1005.3260%2C1005.1630%2C1005.5262%2C1005.3235%2C1005.5121%2C1005.1947%2C1005.1340%2C1005.1264%2C1005.3982&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The importance of stochasticity within biological systems has been shown\nrepeatedly during the last years and has raised the need for efficient\nstochastic tools. We present SABRE, a tool for stochastic analysis of\nbiochemical reaction networks. SABRE implements fast adaptive uniformization\n(FAU), a direct numerical approximation algorithm for computing transient\nsolutions of biochemical reaction networks. Biochemical reactions networks\nrepresent biological systems studied at a molecular level and these reactions\ncan be modeled as transitions of a Markov chain. SABRE accepts as input the\nformalism of guarded commands, which it interprets either as continuous-time or\nas discrete-time Markov chains. Besides operating in a stochastic mode, SABRE\nmay also perform a deterministic analysis by directly computing a mean-field\napproximation of the system under study. We illustrate the different\nfunctionalities of SABRE by means of biological case studies."}, "authors": ["Frederic Didier", "Thomas A. Henzinger", "Maria Mateescu", "Verena Wolf"], "author_detail": {"name": "Verena Wolf"}, "author": "Verena Wolf", "links": [{"href": "http://arxiv.org/abs/1005.2819v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1005.2819v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.CE", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.CE", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.MS", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "q-bio.MN", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1005.2819v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1005.2819v1", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "arXiv:1005.2819v1 [cs.CE] 17 May 2010\n\nSABRE: A Tool for Stochastic Analysis of\nBiochemical Reaction Networks\nFrederic Didier\n\nThomas A. Henzinger\n\nMaria Mateescu\n\nVerena Wolf\n\nSchool of Computer and\nCommunication Sciences,\nEPFL, Switzerland\n\nIST Austria\nInstitute of Science and\nTechnology Austria\n\nSchool of Computer and\nCommunication Sciences,\nEPFL, Switzerland\n\nDepartment of Computer Science,\nSaarland University,\nSaarbr\u00fccken, Germany\n\nAbstract-The importance of stochasticity within biological\nsystems has been shown repeatedly during the last years and has\nraised the need for efficient stochastic tools. We present SABRE,\na tool for stochastic analysis of biochemical reaction networks.\nSABRE implements fast adaptive uniformization (FAU), a direct\nnumerical approximation algorithm for computing transient\nsolutions of biochemical reaction networks. Biochemical reactions\nnetworks represent biological systems studied at a molecular\nlevel and these reactions can be modeled as transitions of a\nMarkov chain. SABRE accepts as input the formalism of guarded\ncommands, which it interprets either as continuous-time or as\ndiscrete-time Markov chains. Besides operating in a stochastic\nmode, SABRE may also perform a deterministic analysis by\ndirectly computing a mean-field approximation of the system\nunder study. We illustrate the different functionalities of SABRE\nby means of biological case studies.\n\nI. I NTRODUCTION\nMarkov chains are an omnipresent modeling approach in the\napplied sciences. Often, they describe population processes,\nthat is, they operate on a multidimensional discrete state space,\nwhere each dimension of a state represents the number of\nindividuals of a certain type. Depending on the application\narea, \"individuals\" may be customers in a queuing network,\nmolecules in a chemically reacting volume, servers in a\ncomputer network, actual individuals in a population, etc.\nHere, we are particularly interested in dynamical models of\nbiochemical reaction networks, such as signaling pathways,\ngene expression networks, and metabolic networks. Biochemical reaction networks operate on an abstraction level where\na state of the system is given by an n-dimensional vector of\nchemical populations, that is, the system involves n different\ntypes of molecules and the i-th element of the state vector\nrepresents the number of molecules of type i. Molecules\ncollide randomly and may undergo chemical reactions, which\nchange the state of the system. Classical modeling approaches\nin biochemistry are based on a system of ordinary differential\nequations that assume a continuous deterministic change of\nchemical concentrations. During the last decade, stochastic\nanalysis of biochemical reaction networks has seen growing\ninterest because it captures molecular noise [13], which arises\nfrom the randomness of the discrete events in the cell. Molecular noise is of interest because it significantly influences\nThis research has been partially funded by the Swiss National Science\nFoundation under grant 205321-111840 and by the Cluster of Excellence on\nMultimodal Computing and Interaction at Saarland University.\n\nfundamental biological processes such as gene expression\n[12, 35], decisions of the cell fate[2, 29], and circadian\noscillations[3, 16].\nWithin the setting of stochastic analysis, biochemical reaction networks are modeled as discrete-state continuous-time\nMarkov processes(CTMC) as suggested by Gillespie within\nthe theory of stochastic chemical kinetics [14]. The evolution\nof a CTMC is given by a system of linear ordinary differential\nequations, known as the chemical master equation (CME). A\nsingle equation in the CME describes the time-derivative of\nthe probability of a certain state at all times t \u2265 0. Thus,\nthe solution of the CME is the probability distribution over\nall states of the CTMC at a particular time t, that is, the\ntransient state probabilities at time t. The solution of the\nCME is then used to derive measures of interest such as the\ndistribution of switching delays [30], the distribution of the\ntime of DNA replication initiation at different origins [31], or\nthe distribution of gene expression products [37]. Moreover,\nmany parameter estimation methods require the computation\nof the posterior distribution because means and variances do\nnot provide enough information to calibrate parameters [19].\nStatistical estimation procedures such as Monte Carlo simulation are widely used to estimate the probability distribution\nof the underlying Markov process, because for realistic systems the size of the CME is very large or even infinite, and\nnumerical methods become infeasible. Several tools for Monte\nCarlo simulation have been developed [18, 25, 32]. Recent\nwork, however, indicates that numerical approximation methods for the CME can be used to compute the transient state\nprobabilities more accurately and, depending on the measures\nof interest, with shorter running times [9]. Especially if the\nprobabilities of interest are small, numerical approximations\nturn out to be superior to Monte Carlo simulation, because\nthe later requires a large number of simulation runs in order\nto bound the statistical error appropriately. For estimating\nevent probabilities, a higher precision level is necessary than\nfor estimating cumulative measures such as expectations, and\nsimulation based methods have a slow convergence because\ndoubling the precision requires four times more simulation\nruns to be performed.\nIn the case of discrete-time Markov chains (DTMCs), the\ntransient stochastic analysis gives the probability distribution\nover all states of the DTMC after k steps. For population\n\n\fmodels, a step is interpreted as a triggered transition. The\ntransient solution for DTMCs is the result of k matrix-vector\nproducts, and can be used for the solution of CTMCs, as shown\nlater in Section III-A.\nNumerical analysis tools for discrete-state Markov processes\nsuch as PRISM[28], INFAMY[17], ETMCC[22], MRMC[26],\nAPNNtoolbox[5], SHARPE[23], SPNP[24], or M\u00f6bius[8]\nhave been introduced (see Section VII). However, except for\nINFAMY, these tools do not accept models with possibly\ninfinite state space. It is important to note that many population\nmodels have an infinite state space, that is, the number of\nreachable states is infinite. Even when in the real system\nthe number of molecules, or more generally, individuals is\nfinite, no a priori bound is known, and models do not include\nany constraints on the number of molecules, for example in\nproduction rules such as \u2205 \u2192 A. Another issue is that existing\ntools usually implement algorithms that are not optimized\nspecifically for population models, and do not scale well on\nsuch models.\nSABRE is a tool for the transient analysis of Markov\npopulation models. In other words, SABRE analysis discretetime, or continuous-time Markov processes that have a structured discrete state space and state-depended rate functions. In\nSection II we give more details on the space structure and the\nstate dependency of rate functions that are present in Markov\nprocesses that represent population models.\nSABRE offers both stochastic and deterministic analysis\nof population models. For stochastic analysis, SABRE implements three algorithms: standard uniformization, fast adaptive\nuniformization and Runge-Kutta fourth order method. The\ndifferent configurations in which SABRE may operate are\ndepicted in Figure 2. The focus of the tool is on the fast\nadaptive uniformization method, while the remaining methods\nare given for completeness and comparison.\nFast adaptive uniformization is a variant of the uniformization method[34, 36] which is, an efficient method to compute\nprobability distributions if the number of states of the Markov\nprocess is manageable. However, the size of a Markov process\nthat represents a biochemical reaction network is usually far\nbeyond what is feasible.\nFast adaptive uniformization[10] improves the original uniformization method at the cost of a small approximation error.\nThe main ideas for this improvement are the on-the-fly construction of the state space and the restriction imposed on the\nstate space to contain only states with significant probabilities,\ne.g. states that have a probability larger than 10\u221215 . Even\nthough fast adaptive uniformization can treat larger models\nthan the previous uniformization methods could, as expected,\nmodels with remarkably high expected populations remain\nunsolvable and should be studied using deterministic analysis\nof simulation tools. A second down side of fast adaptive\nuniformization is that, due to the approximation error, it can\noverlook rare events of the model, e.g. events that occur with\na very small probability.\nSABRE\nis\navailable\non-line\nat\nhttp://mtc.epfl.ch/ \u0303mateescu/sabre. First, the user gives\n\nan input model (either in SBML format or in guarded\ncommands format) and a time horizon and than the transient\nanalysis of the system starts (see Figure 1). More details on\nthe usage of the tool are given in Section IV.\nII. G UARDED C OMMANDS\nGuarded-command models (GCM) is the input formalism\nof SABRE. GCMs are a textual description of processes\nand are given in the style of Dijkstra's guarded-command\nlanguage[11]. Their syntax has subsequently been used by\nlanguages such as Reactive Modules [1] and by the language\nfor specifying PRISM models[33]. The basic unit within\nGCMs is a transition class, which is expressed as a guarded\ncommand that operates on the state variables of the system.\nA transition class encodes for a possibly infinite number of\nstate transitions. Within population models, the state variables\nof the system are non-negative integers representing numbers\nof molecules for each species. A guarded command takes the\nform\nguard |- rate -> update\nwhere the guard is a Boolean predicate over the variables that\ndetermines in which states the corresponding transitions are\nenabled. The update is a rule that describes the change of the\nsystem variables if the transition is performed. Syntactically,\nupdate is a list of statements, each assigning to a variable\nan expression over variables. Assume that x is a variable. If,\nfor instance, the update rule is that x is incremented by 1, we\nwrite x:=x+1. We assume that variables that are not listed in\nthe update rule do not change if the transition is taken. Each\nguarded command also assigns a rate to the corresponding\ntransitions, which is a function on the state variables. Within\nSABRE, rate is given in infix notation. In the case of\npopulation models, the update function is incrementing or\ndecrementing each variable by a constant integer.\nFor a population model with m reactions, the GCM description is a set of m guarded commands, which we index as\nguardj ` ratej \u2192 updatej , where each of the commands\nj, with 1 \u2264 j \u2264 m, describe the j-th reaction of the model.\nGCMs are used to express both CTMCs and DTMCs. The\ndifference between the two interpretations comes from the\nsemantic given to the rate function of each command. In the\ncase of CTMCs, for a given reaction j, the rate function ratej\nassigns to each state s, a positive real value that represents the\nrate of the outgoing transition j.\nIn the case of DTMCs, the rate function ratej assigns to\neach state s, a positive real value that represents the transition\nprobability from state s to its successor on reaction j. The\nfunctions ratej must define probability distribution over the\ndirect successor state, that is, for each state s we impose that\n\u03a3j ratej (s) = 1. If the input is not given in this manner,\nSABRE will automatically normalize the rate functions such\nthat the probability distribution condition to be fulfilled. Note\nthat this is equivalent to interpreting the input as a CTMC and\nthan considering its embedded DTMC.\n\n\fTABLE I\nS IMPLE TOGGLE SWITCH EXAMPLE\nReaction\n\u2205\u2192A\nA\u2192\u2205\n\u2205\u2192B\nB\u2192\u2205\n\nGuarded\ntrue\nA>0\ntrue\nB>0\n\ncommand\n` c1 /(c2 + x2B )\n` c 3 * x1\n` c4 /(c5 + x2A )\n` c 6 * x2\n\n\u2192 xA\n\u2192 xA\n\u2192 xB\n\u2192 xB\n\n:= xA + 1\n:= xA \u2212 1\n:= xB + 1\n:= xB \u2212 1\n\nGCMs are used to model systems that exhibit a finite number of transition types, but possibly an unbounded number of\nstates. For example, in a computer network, the number of type\nof events is finite (send message, receive message, add node,\netc.) but the number of states is countably infinite, because\nit depends on the number of nodes in the network and on\nthe number of requests each of them has. The same holds for\nbiochemical reaction networks, each reaction type generates a\ntransition class, but the number of states is countably infinite,\nas we do not have any a-priori bound on the variables of\nthe system, due to productions rules of the type \u2205 \u2192 A.\nWe therefore conclude that GCMs are a natural formalism\nfor describing population models[20]\nExample 2.1: The bistable toggle switch is a prototype of\na genetic switch with two competing repressor proteins and\nfour reactions. We call the species A and B and we let x =\n(xA , xB ) \u2208 N20 be a vector describing a state of the system.\nThe reactions are given in Table I.\nIII. S TOCHASTIC AND D ETERMINISTIC A NALYSIS\nSABRE performs a transient analysis of the input system,\nthat is, SABRE computes the state of the system at time t\ngiven the state of the system at time 0. SABRE may execute\neither a stochastic analysis or a deterministic analysis of the\ninput system; and in the first case the state of the system\nat time t is actually given as a probability distribution over\nthe discrete states of the system. The second type of analysis\n\u2013the deterministic analysis\u2013 is done over a continuous state\nspace, and its result is a single state of this continuous space.\nThe result of the deterministic analysis, also known as mean\nfield analysis, is an approximation of the expectation of the\nstochastic analysis. Each of the two analysis (stochastic and\ndeterministic) may be applied on each of the two semantics\n(CTMC and DTMC), and we will now give short interpretations for the results of the four possible combinations.\nA. Stochastic Analysis\nCTMC semantics: We note that the behavior of the\nCTMC is described as a differential equation (known in\nbiochemistry as the chemical master equation) and that p(t) is\nthe solution of that differential equation at time t. The transient\nstochastic analysis at time t, given the initial state y0 with\nprobability 1, computes the solution of the chemical master\nequation at time t. Within SABRE, the solution p(t) may be\ncomputed either by uniformization or by Runge-Kutta explicit\nfourth order method.\nWe focus on two uniformization methods for CTMCs,\nstandard uniformization [34] and on its generalization called\nadaptive unifomization [36]. Standard uniformization splits the\n\ngiven CTMC into a discrete-time Markov chain (DTMC) and\na Poisson process, whereas adaptive uniformization splits the\nCTMC into a DTMC and a birth process. SABRE implements\nthe optimized algorithm called fast adaptive uniformization\nthat has previously been proposed[10]. One main strength of\nthis algorithm is that it closely tracks the set of significant\nstates of the state space, where by a significant state we mean\na state with significant probability. Secondly, another strength\nof the fast adaptive uniformization lies in the on-the-fly\nconstruction of a non-explicit matrix used in the computation\nof the solution of the DTMC (remember that uniformization\nsplits the given CTMC into a DTMC and a birth process).\nDTMC semantics: DTMC semantics are to be used when\nthe number of triggered transitions, rather than the elapsed\ntime, is of interest. Such situations may arrive, for example, in\npopulation genetics models or as a part of the uniformization\nmethod. A transient analysis of a DTMC consists in a series\nof matrix-vector products:\np(k + 1) = p(k) * P,\nwith P being the probability transition matrix of the DTMC\nand p(k) being a row vector representing the probability\ndistribution after k steps. In our algorithm[10], the main phase\nof the DTMC transient analysis is called the propagation\nphase. The propagation phase completes the equivalent of a\nmatrix-vector product by moving probability mass from on\nstate x to all direct successors of x (including x itself if any\nself-loops are present). SABRE approximates the probability\ndistribution over the states of the system after k reactions\nhave happened, given the state y0 of the system before any\nreaction happens. Formally, SABRE approximates the vector\np(k) = \u03b4y0 * P k , where \u03b4y0 is a dirac probability distribution\nin point y0 .\nB. Deterministic Analysis\nCTMC semantics: We can give an approximate solution\nof the mean field of the CTMC by using the forth order\nRunge-Kutta method to solve a set of ordinary differential\nequations simpler than the CME. This set of equations are\nknown as the reaction rate equations[15] and express the\nchange in the expectation of each variable over time. In the\nthermodynamic limit (that is, the number of molecules and the\nvolume of the system approach infinity) the Markov model and\nthe macroscopic ODE description are equal [27]. Therefore,\nfor large populations, the deterministic analysis can be used\nto approximate the mean field of the CTMC.\nDTMC semantics: As in the case of CTMCs, for computing the first moment of the transient solution of a DTMC, we\ncan directly solve a simpler set of equations that are written\ndirectly over variables that represent the expectancies of the\nstochastic solution of the input DTMC model [27].\nThe expected number of molecules changes deterministically over discrete time, as described by the following\nequation:\nx(k + 1) = x(k) * A,\n\n\fwhere A is a probability matrix, and each of its entries ai,j\ngive the probability for a species i to modify into a species\nj. Such analysis are useful for discrete-time models as those\nused to validate communication protocols.\nIV. T OOL I NTERFACE\n\n36 </sbml>\nOnce the model is chosen, we choose a configuration of\nthe analysis by choosing the semantics, the mode and, if\nneeded, the type of stochastic solution. Finally, we choose\na time horizon, or the number of steps for which we want the\nsystem to run. We also give as an input a dump time td , which\ncorresponds to the intermediate results, that is, the system\nwill compute the distributions for td , 2 * td , * * * t. The program\ncomputes the intermediates and the final results which are then\ndynamically plotted for each species, as the computation runs\n(see Figure 1). If the uniformization method is selected, the\nuser also needs to provide an estimate of the maximal exit\nrate over all reachable states. If the estimate is too small, the\ncompuation needs to be restarted, and if the estimate is too\nlarge, the computation is likely to take longer. It is standard\nuniformization which is especially touched by choosing a too\nlarge upper bound on the maximal exit rate. Estimating this\nupper bound by heuristics such as those used for the sliding\nwindow algorithm[21] is an on going work.\n\nFrom the tool's interface, we have several ways of selecting\na model for analysis. One can load an existing model, upload\nan SBML file or introduce a GCM text description of the\nsystem to analyze. SBML is a standardized format for representing models of biological processes, such as metabolism\nor cell signaling and is the input to SABRE's core program.\nGCMs that have update functions with constant increment (or\ndecrement) have a straight forward translation to SBML.\nExample 4.1: We continue the toggle switch example with\nits SBML description. For brevity, we only give one reaction\nof the model. We observe that the rate function is not restricted\nto a particular template and is written following the mathML\nstandard.\n0 <sbml ...>\n1 <model>\nV. S OFTWARE A RCHITECTURE\n1 ...\n3 <listOfSpecies>\nSABRE is available on line, assuring this was a fast and\n4\n<species id=\"A\" initialAmount=\"133\"/> portable release of our implementation. The core of our tool\n5\n<species id=\"B\" initialAmount=\"133\"/> is implemented in C++, while the website that hosts it is\n6 </listOfSpecies>\nimplemented using PHP and Javascript. The user provides\n7 <listOfReactions>\nthe desired input through the web interface, than a query is\n8\n<reaction id=\"R1\">\ngenerated to the 3GHz Linux machine on which SABRE is\n9\n<listOfProducts>\ninstalled. The server sends back to the user intermidiate results\n10\n<speciesReference species=\"A\"/>\nwhich are then plotted as we show in Section IV.\n11\n</listOfProducts>\nA. Components\n12\n<listOfModifiers>\n13\n<speciesReference species=\"B\"/>\nSABRE's different components are activated as shown in\n14\n</listOfModifiers>\nFigure 2. Depending on the chosen semantics, analysis mode\n15\n<kineticLaw>\nand, if necessary, stochastic solution type, SABRE calls the\n16\n<math ...>\ncoresponding method. Some of the functionalities are shared\n17\n<apply> <divide/>\namong different methods, for example the DTMC solution is\n18\n<ci> c1 </ci>\naccessed either directly from choosing the DTMC semantics,\n19\n<apply> <plus/>\neither indirectly, by the uniformization algorithm. As well,\n20\n<ci> c2 </ci>\nRunge-Kutta method, is used both as a solver of the CME\n21\n<apply> <times/>\nor as the solver of the reaction rate equations.\n22\n<ci> B </ci>\nB. Data Structure\n23\n<ci> B </ci>\nWe present an efficient data structure used by SABRE when\n24\n</apply>\nused in stochastic analysis mode. SABRE's main focus is\n25\n</apply>\non a fast implementation of the fast adaptive algorithm, so\n26\n</apply>\nwe will use this algorithm to motivate the choice of our\n27\n</math>\ndata structure. However, the same kind of reasoning works\n28\n<listOfParameters>\n29\n<parameter id=\"c1\" value=\"3000\"/> if one wants to optimize the Runge-Kutta implementation.\n30\n<parameter id=\"c2\" value=\"11000\"/>The most computationally demanding part of fast adaptive\nuniformization is the probability propagation phase, which\n31\n</listOfParameters>\nperforms the equivalent of one matrix-vector product in a\n32\n</kineticLaw>\nDTMC. We therefore need a data structure that is efficient\n33\n</reaction>\nduring this step.\n34\n...\n35 </listOfReactions>\nFirst, we mention that, for each state, along with the state\n36 </model>\ndescription, we need to record additional information about\n\n\fst\n\nic\n\nFig. 1. Dynamic update of the plots within the web interface. The evoluation of the probability distribution over the number of monomers in Goutsias'\nmodel, as given in[10].\n\np(td ), p(2td ) * * * p(t)\n\nStandard\nuniformization\n\np(td ), p(2td ) * * * p(t)\n\nst\n\noc\nha\n\n\u03bb\n\nFast adaptive\nuniformization\n\nRunge Kutta\n\np(td ), p(2td ) * * * p(t)\n\nstic\n\nRunge Kutta\n\nm(td ), m(2td ) * * * m(t)\n\nic\n\nMatrix vector product.\n\np(kd ), p(2kd ) * * * p(k)\n\nstic\n\nMatrix vector product.\n\nm(kd ), m(2kd ) * * * m(k)\n\nMC\n\ntd or kd\nini\n\nCT\n\nt or k\n\ndet\nerm\n\nGCM\n\nParser\n\nSBML\n\nC\n\nM\nDT\n\nast\n\nch\nsto\ndet\n\nerm\n\nini\n\nFig. 2. Software architecture. Depending on the selected semantics, analysis\nmode and, eventually, type of stochastic solution, SABRE computes the\ndesired results. The vector p(t) is the transient probability distribution after\ntime t, while the vector p(k) is the transient probability distribution after k\nsteps. For the deterministic analysis, the values m(t) and m(k) correspond\nto the mean field of the corresponding CTMC, respectively DTMC. The value\n\u03bb represents the maximum exit rate of the CTMC and is required only by\nuniformization.\n\nthe probability of the state, about its successors, and about the\nrates/probabilities of the reactions that lead to those respective\nsuccessors. We gather all this information in a structure called\nnode. During the propagate phase we iterate over all nodes of\nthe state space, and for each node we move probability mass\nalong all of its outgoing transitions. Note that, initially the state\nspace has a single state, and that states are dynamically added\nto the state space as they are discovered. That is, some of the\ndirect successors of n may be newly discovered, and in this\ncase they are added to the state space data structure. Therefore,\nideally, the data structure used for storing information about\nthe state space would have the following characteristics.\n\u2022\n\n\u2022\n\n\u2022\n\n[Fast sequential access.] For enumerating all nodes. We\nnote that this is a property of the array primitive type of\nmost programming languages.\n[Fast search.] For quickly finding the successors of a\nnode. We note that this is a property of map or hash\ntype of many programming languages.\n[Fast add.] For dynamically adding newly discovered\n\nstates to the current state space.\n[Fast delete.] For dynamically removing states that have\nclose to zero probability.\nWe summarize the comparison between arrays and hashes\nin Table II. Arrays allow fast sequential access, fast add\nbut slow search and delete operations. Hashes allow fast add,\ndelete, search, but slow sequential access. We propose a hybrid\nsolution that has the advantages of each data structure at the\nexpense of extra memory usage.\nOur hybrid data structure is composed of:\n\u2022 array nodes that acts as a function from index \u2192 node\n\u2022 hash index that acts as a function from state \u2192 index\n\u2022 vector inactive_nodes of indices of nodes that have\nbecome inactive as a result of a delete.\nThis mixture of structures lets us give fast implementations\nfor each of the required operations:\n\u2022 Sequential access Simple iteration over the elements of\nnodes.\n\u2022 Search Search within index followed by an access in\nnodes.\n\u2022 Delete state The nodes array is allocated statically,\nso physically erasing a node would be expensive. The\nalternative is to mark the node for deletion by inactivating\nit \u2013setting its probability to zero\u2013 and adding it to the\ninactive_nodes vector. Because of their zero probability, inactive nodes are ignored when iterating over all\nstates. An inactive node has two possible futures: either\nit will be reoccupied by a newly added state, either it will\nbe deleted during a compress phase. The compress phase\nis initiated when the number of inactive nodes covers\nmore then 20% of the number of both active nodes and\ninactive nodes and it consists of eliminating all inactive\nnodes and rearranging the active nodes in a contiguous\nregion.\n\u2022 Add state When we add a state to the state space, we\nneed to assign it to a node within the nodes array.\nThe nodes array is allocated statically and during the\nprogram's initialization phase, it is initialized to 220 free\nnodes. When we add a new state, if inactive_nodes\nis non-empty, that is, if an inactive node exist, assign\nthe state to this node, which now becomes active. If\ninactive_nodes is empty, we check whether we still\nhave free allocated nodes, that is, we check whether the\n\u2022\n\n\fTABLE II\nDATA STRUCTURE COMPARISON\nData Structure\nArrays\nMaps\nHybrid solution\n\nSequential access\nfast\nslow\nfast\n\nSearch\nslow\nfast\nfast\n\nAdd\nfast\nfast\ncomplex, but fast\n\nDelete\nslow\nfast\ncomplex, but fast\n\nTABLE III\nC ASE S TUDIES S UMMARY\nAnalysis\nStochastic\nDeterministic\nStochastic\n\nModel\nExclusive switch\nEnzymatic reaction\nMoran's model\n\nTime\n94s\n< 1s\n49s\n\n20\n\nError\n9e \u2212 8\n\u2212\n0\n\nStates\n3047\n1\n1001\n\n15\n\n10\n\n0.02\n0.018\n0.016\n0.014\n0.012\n0.01\n0.008\n0.006\n0.004\n0.002\n0\n\n5\n\nnumber of active nodes has reached the size allocated\nto nodes. If free nodes exist, we assign the new state\nto a free node, if free nodes do not exist we need to\nallocate extra 220 nodes to nodes and then pick a\nnewly created free node. We note that the reallocation\noperation is expensive but happens only rarely, e.g. when\nthe state space first reaches one million, two millions,\nthree millions states and so on.\nVI. C ASE S TUDIES\nWe present case studies for stochastic and deterministic\nanalysis of CTMCs and for the stochastic analysis of DTMCs.\nFor more and larger experiments on stochastic analysis of\nCTMCs we refer the reader to the paper giving the fast\nadaptive uniformization algorithm[10]. All our experiments are\nperformed on a 3GHz Intel Linux PC, with 6 GB of RAM.\nWe give the results of our experiments in Table III.\nA. Genetic exclusive switch\nThe exclusive genetic switch we analyze involves two\nspecies of proteins that may bound to the same promoter site.\nWe denote the unbounded proteins by N1 and N2 and the\nbounded ones by r1 and r2 [4]. The guarded commands for this\nmodel are given in Table IV. The rate functions are evaluated\nfor the state (xN1 , xr1 , xN2 , xr2 ), where xN1 is the number of\nmolecules of type N1 and so on.\nWhen it is bounded to the promotor site, a protein represses\nthe production of the other protein. And so, for example,\nproduction of N1 only happens if no N2 molecule is bounded\nto the promoter site (see rate function of first reaction). N1 or\nN2 may bound only to a free promotor site (see rate functions\nof the third and seventh reaction). Note that it always holds\nthat xr1 + xr2 \u2264 1.\nWe run the system from initial state (25, 0, 0, 0) for a period\nof time of 10000 units with constants: g1 = g2 = 0.05, d1 =\nd2 = 0.005, b1 = b2 = 0.1, u1 = u2 = 0.005, and present the\nsolution in Figure 3\nB. Enzymatic reaction\nWe use enzyme-catalyzed substrate conversion to exemplify\nhow to perform a deterministic analysis under continuoustime semantics. The enzymatic reaction is described by three\n\n0\n0\n\n5\n\n10\n\n15\n\n20\n\nFig. 3. Exclusive switch at time 10000. The x-axis gives the number of N1\nmolecules and the y-axis gives the number of N2 molecules. Each point of the\nplot corresponds to the states of systems that have the have the corresponding\nnumber of N1 and N2 molecules. The darker the point is, the more probability\nmass it holds. We can notice the bistable behaviour from the two regions of\nblack points, one for N1 = 0 and one for N2 = 0.\n\nreactions (see Table V), that involve four chemical species,\nnamely, enzyme (E), substrate (S), complex (C), and product\n(P ) molecules. The state of the system is described by the\nvector (xE , xS , xC , xP ), which gives the existing number of\nmolecules of each type.\nFor our experimental results, we chose the same parameters\nas in [6], that is, initial state y = (1000, 100, 0, 0), time\nhorizon t = 70, and rate constants c1 = c2 = 1 and c3 = 0.1.\nFor the case deterministic analysis we can not give any error\nbounds, as shown in Table III.\nC. Moran's population model\nAs a simple example of how SABRE operates on DTMC\nmodels we choose Moran's genetic population model, which\ncan be seen as a set of biochemical reactions, more specifically\nas one reversible reaction.\nFor a population of N individuals, with two alleles, A1\nand A2 , we are interested to find the probability of fixation\nof A1 , that is, the probability for A1 individuals to be equal\nto N after a certain time. We have two reactions: A2 \u2192 A1\nand A1 \u2192 A2 . For xA1 individuals with A1 allele and xA2\nindividuals with A2 allele, the probability of the first reaction\nxA1\nAs for the second\nis 1\u2212s\n2 +s* N , where s is a small constant.\nxA2\nreaction, its probability is 1\u2212s\n+\ns\n*\n.\n2\nN\nWe choose N = 1000 and s = 2e \u2212 3, the initial state\nof xA1 = 1 and we perform a transient analysis until time\nk = 106 , at this time, the probability of fixation is 0.00049.\nIn this case the error we obtain is 0 because no cutting is\nperformed, the state space is kept at its complete size of 1001.\n\n\fTABLE IV\nG ENETIC EXCLUSIVE SWITCH\nReaction\n\u2205 \u2192 N1\nN1 \u2192 \u2205\nN1 \u2192 r1\nr1 \u2192 N1\n\u2205 \u2192 N2\nN2 \u2192 \u2205\nN2 \u2192 r2\nr2 \u2192 N2\n\nGuarded Command\ntrue\n` g1 * (1 \u2212 xr2 )\nx N1 > 0\n` d1 * xN1\nx N1 > 0\n` b1 * (1 \u2212 xr1 \u2212 xr2 )\n` u1 * xr1\nxr1 > 0\ntrue\n` g2 * (1 \u2212 xr1 )\nx N2 > 0\n` d2 * xN2\nx N2 > 0\n` b2 * (1 \u2212 xr1 \u2212 xr2 )\nxr2 > 0\n` u2 * xr2\n\n\u2192 x N1\n\u2192 x N1\n\u2192 x N1\n\u2192 x N1\n\u2192 x N2\n\u2192 x N2\n\u2192 x N2\n\u2192 x N2\n\n:= xN1\n:= xN1\n:= xN1\n:= xN1\n:= xN2\n:= xN2\n:= xN2\n:= xN2\n\n+1\n\u22121\n\u2212 1; xr1\n+ 1; xr1\n+1\n\u22121\n\u2212 1; xr2\n+ 1; xr2\n\n:= xr1 + 1\n:= xr1 \u2212 1\n:= xr2 + 1\n:= xr2 \u2212 1\n\nDescription\nProduction of N1\nDegradation of N1\nBinding of N1\nUnbinding of N1\nProduction of N2\nDegradation of N2\nBinding of N2\nUnbinding of N2\n\nTABLE V\nE NZYMATIC REACTION\nReaction\nE+S \u2192C\nC \u2192E+S\nC \u2192E+P\n\nGuarded Command\nxE > 0 and xS > 0\nxC > 0\nxC > 0\n\n` c 1 * xE * xS\n` c 2 * xC\n` c 3 * xC\n\n\u2192 xE := xE \u2212 1; xS := xS \u2212 1; xC := xC + 1\n\u2192 xE := xE + 1; xS := xS + 1; xC := xC \u2212 1\n\u2192 xE := xE + 1; xC := xC \u2212 1; xP := xP + 1\n\nVII. C OMPARISON WITH OTHER TOOLS\nSeveral tools for stochastic analysis of Markov chains have\nbeen developed by communities such as probabilistic verification, computational biology and performance evaluation\namong others. Here, we provide a comparison with the tools\nthat are the closest to SABRE. The PRISM tool [28], which\nis widely used in probabilistic verification, considers a more\ngeneral class of Markov processes than population models.\nFor instance, it does not restrict the update function such that\nit allows only a constant change of the state variables. The\nmodels addressed by PRISM are less structured and typically\nthey do not have state dependent rate functions. PRISM uses\npowerful minimization techniques such as bisimulation that do\nnot result in significant reductions in the case of population\nmodel. PRISM requires that upper bounds on the state variables are given as an input by the user. As opposed to that\nthe SABRE tool finds appropriate bounds automatically and\navoids an exhaustive state space exploration. The drawback\nis that the SABRE tool cannot guarantee the validity of\nproperties such as \"Is the probability to reach state x within\nt time greater than p?\" but gives an approximate solution. As\nopposed to that PRISM can guarantee such properties. On the\nother hand, since SABRE avoids an exhaustive state space\nexploration it is able to handle much larger models with statedependent rates. Infamy is a model-checking tool for infinitestate CTMCs by Zhang et al. [17]. Depending on the desired\nprecision, their algorithm simply explores the reachable states\nup to a finite path depth. In contrast, our approach takes into\naccount the direction into which the probability mass moves,\nand constructs a sequence of abstract models \"on-the-fly,\"\nduring the verification process. Similar approaches have also\nbeen used in the context of biochemical reaction networks [6].\nOther tools for stochastic analysis of Markov chains, such\nas ETMCC[22], MRMC[26], APNNtoolbox[5], SHARPE[23],\nSPNP[24], and M\u00f6bius[8], are conceived for answering performance analysis questions and as PRISM, due to their\nexhaustive state space exploration can not be applied to infinite\nmodels.\n\nDescription\nFormation of complex\nDissociation of complex\nProduct production\n\nDizzy[32], Snoopy[18] and Copasi[25] are tools for stochastic simulation alone and not do not compute probability\ndistributions over states.[9] Bio-PEPA[7] is a language for\nmodeling and analysis of biochemical networks. For numerical\nanalysis and verification problems Bio-PEPA uses PRISM's\nengine.\nVIII. C ONCLUSION\nWe have introduced SABRE, a tool for stochastic analysis\nof biochemical reaction networks and of population models in\ngeneral. We have motivated the choice of guarded commands\nas input formalism for our tool and the need for a stochastic\nanalyzer specialized on biological systems. SABRE currently\nhas the form of an accessible web tool, which was chosen\nout of the need to deliver our algorithms and optimizations in\na fast and portable way. However, an offline version release\nis planned for the future. For completeness and comparison,\nSABRE also performs deterministic analysis of the input\nsystem.\nACKNOWLEDGMENT\nWe thank Marius Mateescu for valuable advices on the web\ninterface and Nick Barton for an introduction to population\ngenetics.\nR EFERENCES\n[1] R. Alur and T. A. Henzinger. Reactive modules. Formal\nMethods in System Design, 15(1):7\u201348, 1999.\n[2] A. Arkin, J. Ross, and H. H. McAdams. Stochastic\nkinetic analysis of developmental pathway bifurcation\nin phage \u03bb-infected escherichia coli cells. Genetics,\n149:1633\u20131648, 1998.\n[3] N. Barkai and S. Leibler. Biological rhythms: Circadian\nclocks limited by noise. Nature, 403:267\u2013268, 2000.\n[4] B. Barzel and O. Biham. Calculation of switching times\nin the genetic toggle switch and other bistable systems.\nPhys. Rev. E, 78(4):041919, Oct 2008.\n\n\f[5] P. Buchholz, J.-P. Katoen, P. Kemper, and C. Tepper.\nModel-checking large structured markov chains. J. Log.\nAlgebr. Program., 56(1-2):69\u201397, 2003.\n[6] K. Burrage, M. Hegland, F. Macnamara, and B. Sidje. A\nKrylov-based finite state projection algorithm for solving\nthe chemical master equation arising in the discrete\nmodelling of biological systems. In A. N. Langville and\nW. J. Stewart, editors, Proceedings of the Markov 150th\nAnniversary Conference, pages 21\u201338. Boson Books,\n2006.\n[7] F. Ciocchetta and J. Hillston. Bio-pepa: A framework for\nthe modelling and analysis of biological systems. Theor.\nComput. Sci., 410(33-34):3065\u20133084, 2009.\n[8] D. Daly, D. D. Deavours, J. M. Doyle, P. G. Webster,\nand W. H. Sanders. M\u00f6bius: An extensible tool for\nperformance and dependability modeling. In Computer\nPerformance Evaluation / TOOLS, pages 332\u2013336, 2000.\n[9] F. Didier, T. A. Henzinger, M. Mateescu, and V. Wolf.\nApproximation of event probabilities in noisy cellular\nprocesses. In Proc. of CMSB'09, volume 5688 of LNCS,\npages 173\u2013188. Springer, 2009.\n[10] F. Didier, T. A. Henzinger, M. Mateescu, and V. Wolf.\nFast adaptive uniformization of the chemical master\nequation. In Proceedings of the 1st workshop on High\nPerformance Computational Systems Biology (HIBI'09).\nIEEE Computer Societys Conference Publishing Services, 2009.\n[11] E. W. Dijkstra. Guarded commands, nondeterminacy\nand formal derivation of programs. Commun. ACM,\n18(8):453\u2013457, 1975.\n[12] M. B. Elowitz, M. J. Levine, E. D. Siggia, and P. S.\nSwain. Stochastic gene expression in a single cell.\nScience, 297:1183\u20131186, 2002.\n[13] N. Fedoroff and W. Fontana. Small numbers of big\nmolecules. Science, 297:1129\u20131131, 2002.\n[14] D. T. Gillespie. Exact stochastic simulation of coupled\nchemical reactions. J. Phys. Chem., 81(25):2340\u20132361,\n1977.\n[15] D. T. Gillespie. Simulation methods in systems biology.\nIn SFM, pages 125\u2013167, 2008.\n[16] D. Gonze, J. Halloy, and A. Goldbeter. Robustness of\ncircadian rhythms with respect to molecular noise. PNAS,\nUSA, 99(2):673\u2013678, 2002.\n[17] E. M. Hahn, H. Hermanns, B. Wachter, and L. Zhang.\nInfamy: An infinite-state markov model checker. In CAV,\npages 641\u2013647, 2009.\n[18] M. Heiner, R. Richter, and M. Schwarick. Snoopy - a tool\nto design and animate/simulate graph-based formalisms.\nIn In Proc. PNTAP 2008, associated to SIMUTools 2008.\nACM digital library, 2008.\n[19] D. A. Henderson, R. J. Boys, C. J. Proctor, and D. J.\nWilkinson. Linking systems biology models to data:\na stochastic kinetic model of p53 oscillations. In\nA. O'Hagan and M. West, editors, Handbook of Applied\nBayesian Analysis. Oxford University Press, 2009.\n[20] T. Henzinger, B. Jobstmann, and V. Wolf. Formalisms\n\n[21]\n\n[22]\n\n[23]\n\n[24]\n\n[25]\n\n[26]\n[27]\n\n[28]\n\n[29]\n\n[30]\n\n[31]\n\n[32]\n\n[33]\n\n[34]\n[35]\n\n[36]\n\n[37]\n\nfor specifying markovian population models. In Springer,\neditor, LIX Colloquium Reachability Problems'09, pages\n3\u201323, 2009.\nT. Henzinger, M. Mateescu, and V. Wolf. Sliding window\nabstraction for infinite Markov chains. In Proc. CAV,\nvolume 5643 of LNCS, pages 337\u2013352. Springer, 2009.\nH. Hermanns, J.-P. Katoen, J. Meyer-Kayser, and\nM. Siegle. A tool for model-checking markov chains.\nSTTT, 4(2):153\u2013172, 2003.\nC. Hirel, R. A. Sahner, X. Zang, and K. S. Trivedi.\nReliability and performability modeling using sharpe\n2000. In Computer Performance Evaluation / TOOLS,\npages 345\u2013349, 2000.\nC. Hirel, B. Tuffin, and K. S. Trivedi. Spnp: Stochastic\npetri nets. version 6.0. In Computer Performance Evaluation / TOOLS, pages 354\u2013357, 2000.\nS. Hoops, S. Sahle, R. Gauges, C. Lee, J. Pahle,\nN. Simus, M. Singhal, L. Xu, P. Mendes, and U. Kummer. Copasi - a complex pathway simulator. Bioinformatics, 22(24):3067\u20133074, 2006.\nJ.-P. Katoen, M. Khattri, and I. S. Zapreev. A markov\nreward model checker. In QEST, pages 243\u2013244, 2005.\nT. G. Kurtz. The relationship between stochastic and\ndeterministic models for chemical reactions. J. Chem.\nPhys., 57(7):2976 \u20132978, 1972.\nM. Z. Kwiatkowska, G. Norman, and D. Parker. Prism\n2.0: A tool for probabilistic model checking. In QEST,\npages 322\u2013323, 2004.\nH. Maamar, A. Raj, and D. Dubnau. Noise in gene expression determines cell fate in Bacillus subtilis. Science,\n317(5837):526 \u2013 529, 2007.\nH. H. McAdams and A. Arkin. Stochastic mechanisms in\ngene expression. Proceedings of the National Academy\nof Science, USA, 94:814\u2013819, 1997.\nP. Patel, B. Arcangioli, S. Baker, A. Bensimon, and\nN. Rhind. DNA replication origins fire stochastically in\nfission yeast. Mol. Biol. Cell, 17:308\u2013316, 2006.\nS. Ramsey, D. Orrell, and H. Bolouri. Journal of\nbioinformatics and computational biology c imperial\ncollege press dizzy: Stochastic simulation of large-scale\ngenetic regulatory networks.\nJ. Rutten, M. Kwiatkowska, G. Norman, and D. Parker.\nMathematical Techniques for Analyzing Concurrent and\nProbabilistic Systems, volume 23 of CRM Monograph\nSeries. American Mathematical Society, 2004.\nW. J. Stewart. Introduction to the Numerical Solution of\nMarkov Chains. Princeton University Press, 1995.\nM. Thattai and A. van Oudenaarden. Intrinsic noise in\ngene regulatory networks. PNAS, USA, 98(15):8614\u2013\n8619, July 2001.\nA. van Moorsel and W. Sanders. Adaptive uniformization. ORSA Communications in Statistics: Stochastic\nModels, 10(3):619\u2013648, 1994.\nA. Warmflash and A. Dinner. Signatures of combinatorial regulation in intrinsic biological noise. PNAS,\n105(45):17262\u201317267, 2008.\n\n\f"}