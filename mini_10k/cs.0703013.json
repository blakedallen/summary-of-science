{"id": "http://arxiv.org/abs/cs/0703013v1", "guidislink": true, "updated": "2007-03-03T06:44:57Z", "updated_parsed": [2007, 3, 3, 6, 44, 57, 5, 62, 0], "published": "2007-03-03T06:44:57Z", "published_parsed": [2007, 3, 3, 6, 44, 57, 5, 62, 0], "title": "NLC-2 graph recognition and isomorphism", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0703145%2Ccs%2F0703058%2Ccs%2F0703039%2Ccs%2F0703035%2Ccs%2F0703008%2Ccs%2F0703129%2Ccs%2F0703111%2Ccs%2F0703028%2Ccs%2F0703109%2Ccs%2F0703017%2Ccs%2F0703090%2Ccs%2F0703018%2Ccs%2F0703105%2Ccs%2F0703069%2Ccs%2F0703150%2Ccs%2F0703148%2Ccs%2F0703086%2Ccs%2F0703141%2Ccs%2F0703143%2Ccs%2F0703044%2Ccs%2F0703068%2Ccs%2F0703059%2Ccs%2F0703108%2Ccs%2F0703120%2Ccs%2F0703052%2Ccs%2F0703025%2Ccs%2F0703117%2Ccs%2F0703083%2Ccs%2F0703091%2Ccs%2F0703022%2Ccs%2F0703014%2Ccs%2F0703131%2Ccs%2F0703144%2Ccs%2F0703036%2Ccs%2F0703030%2Ccs%2F0703110%2Ccs%2F0703133%2Ccs%2F0703047%2Ccs%2F0703155%2Ccs%2F0703038%2Ccs%2F0703061%2Ccs%2F0703125%2Ccs%2F0703137%2Ccs%2F0703048%2Ccs%2F0703151%2Ccs%2F0703098%2Ccs%2F0703100%2Ccs%2F0703040%2Ccs%2F0703021%2Ccs%2F0703007%2Ccs%2F0703146%2Ccs%2F0703013%2Ccs%2F0703045%2Ccs%2F0703016%2Ccs%2F0703119%2Ccs%2F0703088%2Ccs%2F0703085%2Ccs%2F0703050%2Ccs%2F0703003%2Ccs%2F0703074%2Ccs%2F0703096%2Ccs%2F0703149%2Ccs%2F0703051%2Ccs%2F0703057%2Ccs%2F0703005%2Ccs%2F0703032%2Ccs%2F0703076%2Ccs%2F0703010%2Ccs%2F0703029%2Ccs%2F0703128%2Ccs%2F0703031%2Ccs%2F0703116%2Ccs%2F0703104%2Ccs%2F0703080%2Ccs%2F0703106%2Ccs%2F0703037%2Ccs%2F0703063%2Ccs%2F0703127%2Ccs%2F0703001%2Ccs%2F0703023%2Ccs%2F0703115%2Ccs%2F0703019%2Ccs%2F0703136%2Ccs%2F0703153%2Ccs%2F0703026%2Ccs%2F0703002%2Ccs%2F0703066%2Ccs%2F0703009%2Ccs%2F0703060%2Ccs%2F0703049%2Ccs%2F0703034%2Ccs%2F0703072%2Ccs%2F0703081%2Ccs%2F0703070%2Ccs%2F0703099%2Ccs%2F0703024%2Ccs%2F0703062%2Ccs%2F0703094%2Ccs%2F0703147%2Ccs%2F0703097%2Ccs%2F0703079&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "NLC-2 graph recognition and isomorphism"}, "summary": "NLC-width is a variant of clique-width with many application in graph\nalgorithmic. This paper is devoted to graphs of NLC-width two. After giving new\nstructural properties of the class, we propose a $O(n^2 m)$-time algorithm,\nimproving Johansson's algorithm \\cite{Johansson00}. Moreover, our alogrithm is\nsimple to understand. The above properties and algorithm allow us to propose a\nrobust $O(n^2 m)$-time isomorphism algorithm for NLC-2 graphs. As far as we\nknow, it is the first polynomial-time algorithm.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0703145%2Ccs%2F0703058%2Ccs%2F0703039%2Ccs%2F0703035%2Ccs%2F0703008%2Ccs%2F0703129%2Ccs%2F0703111%2Ccs%2F0703028%2Ccs%2F0703109%2Ccs%2F0703017%2Ccs%2F0703090%2Ccs%2F0703018%2Ccs%2F0703105%2Ccs%2F0703069%2Ccs%2F0703150%2Ccs%2F0703148%2Ccs%2F0703086%2Ccs%2F0703141%2Ccs%2F0703143%2Ccs%2F0703044%2Ccs%2F0703068%2Ccs%2F0703059%2Ccs%2F0703108%2Ccs%2F0703120%2Ccs%2F0703052%2Ccs%2F0703025%2Ccs%2F0703117%2Ccs%2F0703083%2Ccs%2F0703091%2Ccs%2F0703022%2Ccs%2F0703014%2Ccs%2F0703131%2Ccs%2F0703144%2Ccs%2F0703036%2Ccs%2F0703030%2Ccs%2F0703110%2Ccs%2F0703133%2Ccs%2F0703047%2Ccs%2F0703155%2Ccs%2F0703038%2Ccs%2F0703061%2Ccs%2F0703125%2Ccs%2F0703137%2Ccs%2F0703048%2Ccs%2F0703151%2Ccs%2F0703098%2Ccs%2F0703100%2Ccs%2F0703040%2Ccs%2F0703021%2Ccs%2F0703007%2Ccs%2F0703146%2Ccs%2F0703013%2Ccs%2F0703045%2Ccs%2F0703016%2Ccs%2F0703119%2Ccs%2F0703088%2Ccs%2F0703085%2Ccs%2F0703050%2Ccs%2F0703003%2Ccs%2F0703074%2Ccs%2F0703096%2Ccs%2F0703149%2Ccs%2F0703051%2Ccs%2F0703057%2Ccs%2F0703005%2Ccs%2F0703032%2Ccs%2F0703076%2Ccs%2F0703010%2Ccs%2F0703029%2Ccs%2F0703128%2Ccs%2F0703031%2Ccs%2F0703116%2Ccs%2F0703104%2Ccs%2F0703080%2Ccs%2F0703106%2Ccs%2F0703037%2Ccs%2F0703063%2Ccs%2F0703127%2Ccs%2F0703001%2Ccs%2F0703023%2Ccs%2F0703115%2Ccs%2F0703019%2Ccs%2F0703136%2Ccs%2F0703153%2Ccs%2F0703026%2Ccs%2F0703002%2Ccs%2F0703066%2Ccs%2F0703009%2Ccs%2F0703060%2Ccs%2F0703049%2Ccs%2F0703034%2Ccs%2F0703072%2Ccs%2F0703081%2Ccs%2F0703070%2Ccs%2F0703099%2Ccs%2F0703024%2Ccs%2F0703062%2Ccs%2F0703094%2Ccs%2F0703147%2Ccs%2F0703097%2Ccs%2F0703079&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "NLC-width is a variant of clique-width with many application in graph\nalgorithmic. This paper is devoted to graphs of NLC-width two. After giving new\nstructural properties of the class, we propose a $O(n^2 m)$-time algorithm,\nimproving Johansson's algorithm \\cite{Johansson00}. Moreover, our alogrithm is\nsimple to understand. The above properties and algorithm allow us to propose a\nrobust $O(n^2 m)$-time isomorphism algorithm for NLC-2 graphs. As far as we\nknow, it is the first polynomial-time algorithm."}, "authors": ["Vincent Limouzy", "Fabien De Montgolfier", "Micha\u00ebl Rao"], "author_detail": {"name": "Micha\u00ebl Rao"}, "author": "Micha\u00ebl Rao", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1007/978-3-540-74839-7_9", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/cs/0703013v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cs/0703013v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "soumis \\`{a} WG 2007; 12p", "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cs/0703013v1", "affiliation": "LIAFA", "arxiv_url": "http://arxiv.org/abs/cs/0703013v1", "journal_reference": "Dans Lecture Notes In Computer Science - Graph-Theoretic Concepts\n  in Computer Science 33rd International Workshop, WG 2007, Dornburg, Germany,\n  June 21-23, 2007., Dornburg : Allemagne (2007)", "doi": "10.1007/978-3-540-74839-7_9", "fulltext": "NLC-2 graph re ognition and isomorphism\n\nFabien de Montgol\u001cer1\n\nVin ent Limouzy1\n\nMi ha\u00ebl Rao1\n\narXiv:cs/0703013v1 [cs.DS] 3 Mar 2007\n\nAbstra t\n\nNLC-width is a variant of lique-width with many appli ation in graph algorithmi . This\npaper is devoted to graphs of NLC-width two. After giving new stru tural properties of the\nlass, we propose a O(n2 m)-time algorithm, improving Johansson's algorithm [14\u2104. Moreover,\nour alogrithm is simple to understand. The above properties and algorithm allow us to propose\na robust O(n2 m)-time isomorphism algorithm for NLC-2 graphs. As far as we know, it is the\n\u001crst polynomial-time algorithm.\n\n1\n\nIntrodu tion\n\nNLC-width is a graph parameter introdu ed by Wanke [16\u2104.\nlique-width introdu ed by Cour elle\nthe well known tree-width.\nwhen the width (NLC-,\nproblems\n\nThis notion is tightly related to\n\net al. [2\u2104. Both parameters were introdu ed to generalise\n\nThe motivation on resear h about su h\n\nlique- or tree-width) is bounded by a\n\nwidth parameter is that,\n\nonstant, then many NP- omplete\n\nan be solved in polynomial (even linear) time, if the de omposition is provided.\n\nSu h parameters give insights on graph stru tural properties.\n\nUnfortunately, \u001cnding the\n\nminimum NLC-width of the graph was shown to be NP-hard by Gurski\nhowever are known.\n\nLet NLC-k be the\n\nexa tly the\n\nographs.\n\nlass of\n\net al. [12\u2104. Some results\n\nlass of graph of NLC width bounded by\n\nk.\n\nNLC-1 is\n\nProbe- ographs, bi- ographs and weak-bisplit graphs [9\u2104 belong\n\nto NLC-2. Johansson [14\u2104 proved that re ognising NLC-2 graphs is polynomial and provided an\n\nO(n4 log(n)) re\n\nognition algorithm. Complexity for re ognition of NLC-k ,\n\nk \u2265 3, is still unknown.\n\n2\nIn this paper we improve Johansson's result down to O(n m). Our approa h relies on graph\nde ompositions. We establish the tight links that exist between NLC-2 graphs and the so- alled\nmodular de omposition, split de omposition, and bi-join de omposition.\nNLC-2\n\nan be de\u001cned as a graph\n\nUnlike NLC-k\n\nolouring problem.\n\nlasses, for\n\nk \u2265 3,\n\nre olouring is useless for prime NLC-2 graphs. That allow us to propose a anoni al de omposition\nof bi- oloured NLC-2 graphs, de\u001cned as\nan be\n\nomputed in\n\nO(nm)\n\ntime if the\n\nertain bi- oloured split operations. This de omposition\nolouring is provided.\n\nsplit and bi-join de ompositions, we show that there is at most\n\nIf a graph is\n\nO(n)\n\nprime, there using\n\nolourings to\n\nhe k. Finally,\n\nmodular de omposition properties allow to redu e NLC-2 graph de omposition to prime NLC-2\ngraph de omposition. Se tion 3 explains this\n\nO(n2 m)-time\n\nde omposition algorithm.\n\nIn Se tion 4 is proposed an isomorphism algorithm. Using modular, split and bi-join de ompositions and the\nbe tested in\n\n2\n\nanoni al NLC-2 de omposition, isomorphism between two NLC-2 graphs\n\nO(n2 m)\n\nan\n\ntime.\n\nPreliminaries\n\nA graph\n\nG = (V, E) is pair of a set of verti es V and a set of edges E . For a graph G, V (G) denote\nE(G) its set of edges, n(G) = |V (G)| and m(G) = |E(G)| (or V , E , n and m if\n\nits set of verti es,\n1\n\nLIAFA, Universit\u00e9 Paris 7.\n\n{limouzy,fm,rao}\bliafa.jussieu.fr.\n\nproje t \u0010Graph De ompositions and Algorithms (GRAAL)\u0011\n\n1\n\nResear h supported by the Fren h ANR\n\n\flear in the ontext). N (x) = {y \u2208 V : {x, y} \u2208 E} denotes the neighbourhood of the\nx, and N [x] = N (v) \u222a {v}. For W \u2286 V , G[W ] = (W, E \u2229 W 2 ) denote the graph indu ed by\nW . Let A and B be two disjoint subsets of V . Then we note A 1 B if for all (a, b) \u2208 A \u00d7 B , then\n{a, b} \u2208 E , and we note A 0 B if for all (a, b) \u2208 A \u00d7 B , then {a, b} 6\u2208 E . Two graphs G = (V, E)\n\u2032\n\u2032\n\u2032\n\u2032\n\u2032\nand G = (V , E ) are isomorphi (noted G \u2243 G ) if there is a bije tion \u03c6 : V \u2192 V su h that\n\u2032\n{x, y} \u2208 E \u21d4 {\u03c6(x), \u03c6(y)} \u2208 E , for all u, v \u2208 V .\nA k -labelling (or labelling ) is a fun tion l : V \u2192 {1, . . . , k}. A k -labelled graph is a pair\nof a graph G = (V, E) and a k -labelling l on V . It is denoted by (G, l) or by (V, E, l). Two\n\u2032\n\u2032 \u2032\n\u2032\nlabelled graphs (V, E, l) and (V , E , l ) are isomorphi if there is a bije tion \u03c6 : V \u2192 V su h\n\u2032\n\u2032\nthat {u, v} \u2208 E \u21d4 {\u03c6(x), \u03c6(y)} \u2208 E and l(u) = l (\u03c6(u)) for all u, v \u2208 V .\nthe graph is\nvertex\n\nNLC-k lasses.\n\nLet\n\nk\n\nlass of NLC-k graphs is de\u001cned re ursively\n\nbe a positive integer. The\n\nby the following operations.\n\n\u2022\n\nFor all\n\n\u2022\n\nLet\n\ni \u2208 {1, . . . , k}, *(i)\n\nis in NLC-k , where\n\n*(i)\n\nis the graph with one vertex labelled\n\nG1 = (V1 , E1 , l1 ) and G2 = (V2 , E2 , l2 ) be NLC-k and let S \u2286 {1, . . . , k}2 .\nG1 \u00d7S G2 is in NLC-k, where G1 \u00d7S G2 = (V, E, l) with V = V1 \u222a V2 ,\n\ni.\n\nThen\n\nE = E1 \u222a E2 \u222a {{u, v} : u \u2208 V1 , v \u2208 V2 , (l1 (u), l2 (v)) \u2208 S}\n(\nl1 (u) if u \u2208 V1\nand for all u \u2208 V , l(u) =\nl2 (u) if u \u2208 V2 .\n\u2022\n\nR : {1, . . . , k} \u2192 {1, . . . , k} and G = (V, E, l) be NLC-k. Then \u03c1R (G)\n\u2032\n\u2032\nwhere \u03c1R (G) = (V, E, l ) su h that l (u) = R(l(u)) for all u \u2208 V .\nLet\n\nA graph is NLC-k if there is a\nis\n\nNLC-k\n\n\u03c1-free\n\nif it\n\nan be\n\nk-labelling\n\nof\n\nModules and modular de omposition.\nsu h that for all\n\nG\n\nsu h that\n\nonstru ted without the\n\nu \u2208 V \\ X,\n\nthen either\n\nA\n\n\u03c1R\n\n(G, l)\n\nis in NLC-k . A\n\nis in NLC-k ,\n\nk-labelled\n\ngraph\n\noperation.\n\nmodule in a graph is a non-empty subset\n\nN (u) \u2229 X = \u2205\n\nor\n\nX \u2286 N (u).\n\nA module is\n\nX\u2286V\n\ntrivial if\n\n|X| \u2208 {1, |V |}. A graph is prime (w.r.t. modular de omposition) if all its modules are trivial.\n\u2032\n\u2032\n\u2032\n\u2032\nTwo sets X and X overlap if X \u2229 X ,X \\ X and X \\ X are non-empty. A module X is strong\n\u2032\n\u2032\n\u2032\nif there is no module X su h that X and X overlap. Let M (G) be the set of modules, let\nM(G) be the set of strong modules of G, and let P(G) = {M1 , . . . , Mk } be the maximal (w.r.t.\nin lusion) members of M(G) \\ {V }.\n\nTheorem 1.\n\n[11\u2104 Let\n\nG = (V, E) be a graph su h that |V | \u2265 2. Then:\n\n\u2022 if G is not onne ted, then P(G) is the set of onne ted omponents of G,\n\u2022 if G is not onne ted, then P(G) is the set of onne ted omponents of G,\n\u2022 if G and G are onne ted, then P(G) is a partition of V and is formed with the maximal\nmembers of M\u2032 \\ {V }.\nP(G) is a partition of V , and G an be de omposed into G[M1 ], . . . , G[Mk ]. The\nhara teristi graph G\u2217 of a graph G is the graph of vertex set P(G) and two P, P \u2032 \u2208 P(G)\n\u2032\nare adja ent if there is an edge between P and P in G (and so there is no non-edges sin e\nP and P \u2032 are two modules). The re ursive de omposition of a graph by this operation gives\nIn all\n\nthe\n\nases,\n\nmodular de omposition of the graph, and\n\nan be represented by a rooted tree,\n\n2\n\nalled the\n\n\fmodular de omposition tree. It an be\n\nomputed in linear time [15\u2104. The nodes of the modular\n\nde omposition tree are exa tly the strong modules, so in the following we make no distin tion\n\nG\n\nbetween the modular de omposition of\n\nM \u2208 M(G),\n\nlet\n\nLemma 2.\n\n[14\u2104 Let\n\nGM = G[M ]\n\n\u2217\nand GM its\n\nand\n\nM(G).\n\nhara teristi\n\nNote that\n\n|M(G)| \u2264 2 \u00d7 n \u2212 1.\n\nFor\n\ngraph.\n\nG be a graph. G is NLC-k if and only if every hara teristi graph in the\nmodular de omposition of G is NLC-k .\nMoreover, a NLC-k expression for\n\nG\n\nan be easily\n\nonstru ted from the modular de omposition\n\nand from NLC-k expressions of prime graphs. On prime graphs, NLC-2 re ognition is easier:\n\nLemma 3.\n\nG be a prime graph. Then G is NLC-2 if and only if there is a 2-labelling l\nsu h that (G, l) is NLC-2 \u03c1-free.\n[14\u2104 Let\n\nBi-partitive family.\n\nA bipartition of V is a pair {X, Y } su h that X \u2229 Y = \u2205, X \u222a Y = V\nX and Y are both non empty. Two bipartitions {X, Y } and {X \u2032 , Y \u2032 } overlap if X \u2229 Y ,\nX \u2229 Y \u2032 , X \u2032 \u2229 Y and X \u2032 \u2229 Y \u2032 are non empty. A family F of bipartitions of V is bipartitive if (1)\n\u2032\n\u2032\nfor all v \u2208 V , {{v}, V \\ {v}} \u2208 F and (2) for all {X, Y } and {X , Y } in F su h that {X, Y } and\n\u2032\n\u2032\n\u2032\n\u2032\n\u2032\n\u2032\n{X , Y } overlap, then {X \u2229 X , Y \u222a Y }, {X \u2229 Y , Y \u222a X }, {Y \u2229 X \u2032 , X \u222a Y \u2032 }, {Y \u2229 Y \u2032 , X \u222a X \u2032 }\n\u2032\n\u2032\nand {X\u2206X , X\u2206Y } are in F (where X\u2206Y = (X \\ Y ) \u222a (Y \\ X)). Bipartitive families are very\nand\n\nlose to partitive families [1\u2104, whi h generalise properties of modules in a graph.\nA member\n\n{X, Y }\n\nof a bipartitive family\n\nF\n\nis\n\n{X \u2032 , Y \u2032 } su h that {X, Y }\n{Ce1 , Ce2 } denote the bipartition\n\nstrong if there is no\n\n{X \u2032 , Y \u2032 } overlap. Let T be a tree. For an edge e in the tree,\nof leaves of T su h that two leaves are in the same set if and only if the path between them avoids\nd(\u03b1)\ne. Similarly, for an internal node \u03b1, {C\u03b11 , . . . , C\u03b1 } denote the partition of leaves of T su h that\ntwo leaves are in the same set if and only if the path between them avoid \u03b1.\nand\n\nTheorem 4.\n\n[3\u2104 Let\n\nF be a bipartitive family on V . Then there is an unique unrooted tree T ,\nF , su h that the set of leaves of T is V , the internal nodes of T\nare labelled degenerate or prime, and\n- for every edge e of T , {Ce1 , Ce2 } is a strong member of F , and there is no other strong\nmember in F ,\n- for every node \u03b1 labelled degenerate, and for every \u2205 ( I ( {1, . . . , d(\u03b1)},\n{\u222ai\u2208I C\u03b1i , V \\ \u222ai\u2208I C\u03b1i } is in F , and there is no other member in F .\nalled the representative tree of\n\nSplit de omposition.\n\nA split in a graph G = (V, E) is a bipartition {X, Y } of V su h that\nX having a neighbour in Y have the same neighbourhood in Y (i.e., for all\nu, v \u2208 X su h that N (u) \u2229 Y 6= \u2205 and N (v) \u2229 Y 6= \u2205, then N (u) \u2229 Y = N (v) \u2229 Y ). A o-split in a\ngraph G is a split in G. The family of split in a onne ted graph is a bipartitive family [4\u2104. The\nthe set of verti es in\n\nsplit de omposition tree is the representative tree of the family of splits, and\n\nan be\n\nomputed in\n\n\u03b1 be an internal node of the split de omposition tree of a onne ted graph\nG. For all i \u2208 {1, . . . , d(\u03b1)} let vi \u2208 C\u03b1i su h that N (vi ) \\ C\u03b1i 6= \u2205. Sin e G is onne ted, su h a\nvi always exists. G[{v1 , . . . , vd(\u03b1) }] denote the hara teristi graph of \u03b1. The hara teristi graph\nof a degenerate node is a omplete graph or a star [4\u2104.\nlinear time [5\u2104. Let\n\nBi-join de omposition.\n\nA\n\nbi-join in a graph is a bipartition\n\n{N (u)\u2229 Y, Y \\N (u)} = {N (v)\u2229 Y, Y \\N (v)}.\n\n{X, Y } su\n\nh that for all\n\nu, v \u2208 X ,\n\nThe family of bi-joins in a graph is bipartitive. The\n\nbi-join de omposition tree is the representative tree of the family of bi-joins, and an be omputed\nin linear time [7, 8\u2104. Let\nFor all\n\ni \u2208 {1, . . . , d(\u03b1)}\n\nhara teristi\ntwo\n\n\u03b1\n\nC\u03b1i .\n\nvi \u2208\nG[{v1 , . . . , vd(\u03b1) }] denote the hara teristi\ndegenerate node is a omplete bipartite graph or a\n\nlet\n\ngraph of a\n\nbe an internal node of the bi-join de omposition tree of a graph\n\nomplete graphs [7, 8\u2104.\n\n3\n\ngraph of\n\n\u03b1.\n\nG.\n\nThe\n\ndisjoint union of\n\n\fFigure 1: A module, a bi-join, a split and a\n\n3\n\no-split\n\nRe ognition of NLC-2 graphs\n\n3.1\n\nNLC-2\n\n\u03c1-free\n\nanoni al de omposition\n\nG = (V, E, l) is a 2-labelled graph su h that every mono- oloured module (i.e. a\nM su h that \u2200v, v \u2032 \u2208 M , l(v) = l(v \u2032 )) has size 1. A ouple (X, Y ) is a ut if X \u222a Y = V ,\nX \u2229 Y = \u2205, X 6= \u2205 and Y 6= \u2205. Let S \u2286 {1, 2} \u00d7 {1, 2}. A ut (X, Y ) is a S - ut of G if for all\nu \u2208 X and v \u2208 Y , then {u, v} \u2208 E if and only if (l(u), l(v)) \u2208 S . For S \u2286 {1, 2} \u00d7 {1, 2} let\nFS (G) be the set of S - ut of G.\nIn this se tion,\nmodule\n\nDe\u001cnition 5\n(2, 1) \u2208 S ,\n\nDe\u001cnition 6\nP\n\na partition\nothers\n\n.\n\n(Symmetry)\n\nWe say that\n\notherwise we say that\n\nut in\n\nLemma 7.\n\nS\n\nis\n\nS \u2208 {1, 2} \u00d7 {1, 2}\n\nis\n\nsymmetri\n\nif\n\n(1, 2) \u2208 S \u21d0\u21d2\n\nnon-symmetri .\n\nof uts has the degenerate property if there is\n. A family F S\nS\n\u2205 ( X ( P , ( X\u2208X X, Y \u2208P\\X Y ) is in F , and there is no\n\n(Degenerate property)\nof\n\nV\n\nsu h that for all\n\nF.\n\nS \u2286 {1, 2} \u00d7 {1, 2}, FS (G) has the degenerate property.\n\nFor every symmetri\n\nProof. The family\n\nF{} (G)\n\nhas the degenerate property sin e (X, Y ) is a {}- ut if and only if\nX and Y (P is exa tly the onne ted omponents). For W \u2286 V , let\nG|W = (V, E\u2206W 2 , l). For i \u2208 {1, 2} let Vi = {v \u2208 V : l(v) = i}. Let G1 = G|V1 , G2 = G|V2 and\nG12 = (G|V1 )|V2 .\n\nthere is no edges between\n\n\u2022 F{(1,1)} (G) = F{} (G1 ), F{(2,2)} (G) = F{} (G2 ), F{(1,1),(2,2)} (G) = F{} (G12 ),\n\u2022 F{(1,1),(1,2),(2,1),(2,2)} (G) = F{} (G), F{(1,2),(2,1),(2,2)} (G) = F{} (G1 ),\nF{(1,1),(1,2),(2,1)} (G) = F{} (G2 ), F{(1,2),(2,1)} (G) = F{} (G12 ).\nThus for every symmetri\n\nS \u2286 {1, 2} \u00d7 {1, 2}, FS (G)\n\nDe\u001cnition 8 (Linear property).\n(X \u2032 , Y \u2032 )\n\nin\n\nF,\n\nLemma 9.\n\neither\n\nX \u2286 X\u2032\n\nor\n\nA family\n\nF\n\nof\n\nhas the degenerate property.\n\nuts has the\n\nlinear property if for all\n\n(X, Y )\n\nand\n\nX\u2032 \u2286 X.\n\nFor every non-symmetri\n\nS \u2286 {1, 2} \u00d7 {1, 2}, FS (G) has the linear property.\n\nS = {(1, 2)}: suppose that X \\ X \u2032 and X \u2032 \\ X are both non-empty. Then if u \u2208\nX \\ X \u2032 is labelled 1 and v \u2208 X \u2032 \\ X is labelled 2, u and v has to be adja ent and non-adja ent,\n\u2032\n\u2032\nontradi tion. Thus X \\ X and X \\ X are mono- oloured. Now suppose w.l.o.g. that all verti es\n\u2032\n\u2032\n\u2032\nin X\u2206X are labelled 1. Then X\u2206X is adja ent to all verti es labelled 2 in Y \u2229 Y and non\n\u2032\n\u2032\nadja ent to all verti es labelled 1 in Y \u2229 Y . Moreover X\u2206X is non adja ent to all verti es in\n\u2032\n\u2032\nX \u2229 X . Thus X\u2206X is a mono- oloured module, and |X\u2206X \u2032 | \u2265 2. Contradi tion. For others\nnon-symmetri S , we bring ba k to ase {(1, 2)} like in the proof of lemma 7.\nProof. Case\n\n4\n\n\f1\n2\n3\n4\n5\n6\n7\n8\n\nInput: A 2-labelled graph G = (V, E, l)\nOutput: A NLC-2 \u03c1-free de omposition tree, or fail if G is not NLC-2 \u03c1-free\nif |V | = 1 then return the leaf *(l(v)) (where V = {v})\nLet\n\nS\n\n{1, 2} \u00d7 {1, 2} and \u03c3 be the lexi ographi order\nS \u2208 S w.r.t. \u03c3 do\n\u2032\nCompute PS (G), and PS (G) if S is non-symmetri (see algorithm 2)\nif |PS (G)| > 1 then\nCreate a new \u00d7S node \u03b2\nforea h P \u2208 PS (G) (w.r.t. PS\u2032 (G) if S is non-symmetri ) do\nmake NLC-2 \u03c1-free de omposition tree of G[P ] be a hild of \u03b2 .\nbe the set of subsets of\n\nforea h\n\nS\n\nreturn the tree rooted at \u03b2\n\n9\n10\n\nof\n\nfail with Not NLC-2 \u03c1-free\nAlgorithm 1: Computation of the NLC-2 \u03c1-free\n\nanoni al de omposition tree\n\nS \u2286 {1, 2} \u00d7 {1, 2}, let PS (G) denote the unique partition of V su h that (1) for all\n(X, Y ) \u2208 FS (G) and P \u2208 PS (G), P \u2286 X or P \u2286 Y , and (2) for all P, P \u2032 \u2208 P , P 6= P \u2032 , there is\n\u2032\n\u2032\na (X, Y ) \u2208 FS (G) su h that P \u2286 X and P \u2286 Y , or P \u2286 Y and P \u2286 X . For a non-symmetri\n\u2032\nS \u2208 {1, 2} \u00d7 {1, 2}, let PS (G) = (P1 , . . . , Pk ) denote the unique ordering of elements in PS (G)\nsu h that for all (X, Y ) \u2208 FS (G), there is a l su h that X = \u222ai\u2208{1,...,l} Pi .\nFor\n\nLemma 10.\n\nIf\n\nG is in NLC-2 \u03c1-free, then there is a S \u2286 {1, 2} \u00d7 {1, 2} su h that FS (G) is\n\nnon-empty.\nProof. If\nthat\n\nG is NLC-2 \u03c1-free, then there is a S \u2286 {1, 2} \u00d7 {1, 2}, and two graphs G1\nG = G1 \u00d7S G2 . Thus (V (G1 ), V (G2 )) \u2208 FS (G) and FS (G) is non empty.\n\nLemma 11.\n\nLet\n\nand\n\nG2\n\nsu h\n\nG = (V, E, l) 2-labelled graph and let S \u2286 {1, 2} \u00d7 {1, 2}. If G is NLC-2 \u03c1-free\nP \u2208 PS (G), G[P ] has no mono- oloured\n\nand has no mono- oloured non-trivial module, then for all\nnon-trivial module.\nProof. If\n\nM\n\nis a mono- oloured module of\n\nG[P ],\n\nthen\n\nM\n\nis a mono- oloured module of\n\nG.\n\nCon-\n\ntradi tion.\n\nLemma 12.\n\nLet G = (V, E, l) 2-labelled graph and let S \u2286 {1, 2} \u00d7 {1, 2}. Then G is NLC-2\n\u03c1-free if and only if for all P \u2208 PS (G), G[P ] is NLC-2 \u03c1-free.\nProof. The \u0010only if \u0011 is immediate. Now suppose that for all\n\nP \u2208 PS (G), G[P ] is NLC-2 \u03c1-free. If\nS is symmetri , let PS (G) = {P1 , . . . , P|PS (G)| }. Then G = ((G[P1 ]\u00d7S G[P2 ])\u00d7S . . .\u00d7S G[P|PS (G)| ],\n\u2032\nand G is NLC-2 \u03c1-free. Otherwise, if S is non-symmetri , let PS (G) = (P1 , . . . , P|P (G)| ). Then\nS\nG = ((G[P1 ] \u00d7S G[P2 ]) \u00d7S . . . \u00d7S G[P|PS (G)| ], and G is NLC-2 \u03c1-free.\n\u03c1-free de omposition tree of a 2-labelled graph G is a rooted tree su h that the\nG, and the internal nodes are labelled by \u00d7S , with S \u2286 {1, 2} \u00d7 {1, 2}.\nAn internal node is degenerated if S is symmetri , and linear if S is non-symmetri . By\nlemmas 10, 11 and 12, G is NLC-2 \u03c1-free if and only if it has a NLC-2 \u03c1-free de omposition tree.\nThe\n\nNLC-2\n\nleaves are the verti es of\n\nThis de omposition tree is not unique. But we\na total order on the subsets of\n\n{1, 2} \u00d7 {1, 2}\n\nare isomorphi , then they have the same\nthe\n\nanoni al de omposition tree of a\nAlgorithm 2\n\nomputes\n\nPS\n\nand\n\nPS\u2032\n\nan de\u001cne a\n\nanoni al de omposition tree if we \u001cx\n\n(for example, the lexi ographi\n\norder). If two graphs\n\nanoni al de omposition tree. Algorithm 1\n\nomputes\n\n2-labelled prime graph, or fails if G is not NLC-2 \u03c1-free.\nfor a 2-labelled prime graph G and S \u2286 {1, 2} \u00d7 {1, 2} in\n\nlinear time. We need some additional de\u001cnitions for this algorithm and its proof of\n\n5\n\norre tness. A\n\n\fInput: A 2-labelled graph G, and S \u2286 {1, 2} \u00d7 {1, 2}\nOutput: PS if S is symmetri , PS\u2032 if S is non-symmetri\n\n1 Vi \u2190 {v : v \u2208 V and l(v) = i} ;\n2 if (1, 1) \u2208 S then C1 \u2190 o- onne ted omponents of G[V1 ];\n3 else C1 \u2190 onne ted omponents of G[V1 ];\n4 if (2, 2) \u2208 S then C2 \u2190 o- onne ted omponents of G[V2 ];\n5 else C2 \u2190 onne ted omponents of G[V2 ];\n6 B = (C1 , C2 , Ej , Em ) \u2190 the bipartite trigraph between the elements\n7 if S \u2229 {(1, 2), (2, 1)} = \u2205 then\n8\nreturn onne ted omponents of (C1 , C2 , Ej \u222a Em )\n9\n10\n11\n\nof\n\nC1\n\nand\n\nC2\n\n;\n\nelse if S \u2229 {(1, 2), (2, 1)} = {(1, 2), (2, 1)} then\nreturn onne ted omponents of the bi- omplement of (C1 , C2 , Ej )\nelse Sear h all semi-joins of B (see appendix) ;\nAlgorithm 2: Computation of PS and PS\u2032\n\nbipartite graph is a triplet\n\n(X, Y, E) su h that E \u2286 X \u00d7Y . The bi- omplement of a bipartite graph\n(X, Y, (X \u00d7 Y ) \\ E). A bipartite trigraph (BT) is a bipartite graph\nwith two types of edges: the join edges and the mixed edges. It is denoted by B = (X, Y, Ej , Em )\nwhere Ej are the set of join edges, and Em the set of mixed edges. A BT-module in a BT\nis a M \u2286 X or M \u2286 Y su h that M is a module in (X, Y, Ej ) and there is no mixed edges\nbetween M and (X \u222a Y ) \\ M . For v \u2208 X \u222a Y , let Nj (v) = {u \u2208 X \u222a Y : {u, v} \u2208 Ej } and\nNm (v) = {u \u2208 X \u222a Y : {u, v} \u2208 Em }. Let dj (v) = |Nj (v)| and dm (v) = |Nm (v)|. A semi-join\nin a BT (X, Y, Ej , Em ) is a ut (A, B) of X \u222a Y , su h that there is no edges between A \u2229 Y and\nB \u2229 X , and there is only join edges between A \u2229 X and B \u2229 Y .\nIn algorithm 2, B is obtained from the graph G. Verti es of X orrespond to subsets of verti es\norrespond to subsets of verti es labelled 2. There is a join\nlabelled 1 in G, and verti es of Y\n\u2032\n\u2032\nedge between M and M in B if M 1 M in G, and there is a mixed edge between M \u2208 X and\nM \u2032 \u2208 Y in B if there is at least an edge and a non-edge between M and M \u2032 in G. Su h a graph\nB an easily be built in linear time from a given graph G. It su\u001e es to onsider a list and an\narray bounded by the number of omponent in G with the same olour. The following lemmas\n(X, Y, E)\n\nare\n\nis the bipartite graph\n\nlose to observations in [9\u2104, but deal with BT instead of bipartite graphs (proofs are given in\n\nappendix).\n\nLemma 13. Let G = (X, Y, Ej , Em ) be a BT su h that every BT-module has size 1. Let\n(x1 , . . . , x|X| ) be X sorted by (dj (x), dm (x)) in lexi ographi de reasing order. If (A, B) is a\nsemi-join of G, then there is a k \u2208 {0, . . . , |X|} su h that A \u2229 X = {x1 , . . . , xk }.\nLemma 14.\n\nk \u2208 {0, . . . , |X|} and k\u2032 \u2208 {0, . . . , |Y |}. Then (A, (X \u222a Y ) \\ A), where A =\nP\nP \u2032\n{x1 , . . . , xk , y1 , . . . , yk\u2032 }, is a semi-join of G if and only if ki=1 dj (xi )\u2212 ki=1 dj (yi ) = k\u00d7(|Y |\u2212k\u2032 )\nPk \u2032\nPk\nand\ni=1 dm (yi ) = 0.\ni=1 dm (xi ) \u2212\nLet\n\nTheorem 15.\n\nAlgorithm 2 is orre t and runs in linear time.\n\nCorre tness: Suppose that (A, B) is a S - ut. If (1, 1) 6\u2208 S , then there is no edge between\nA\u2229V1 and B \u2229V1 , thus (A, B) annot ut a omponent C1 (and similarly for (1, 1) \u2208 S , and for C2 ).\nNow we work on the BT B = (C1 , C2 , Ej , Em ). If S \u2229 {(1, 2), (2, 1)} = \u2205, then S - uts orrespond\nexa tly to onne ted omponents of B , and if S \u2229 {(1, 2), (2, 1)} = {(1, 2), (2, 1)} then S - uts\norrespond exa tly to onne ted omponents of the BT of G, whi h is (C1 , C2 , (C1 \u00d7 C2 ) \\ (Ej \u222a\nEm ), Em ). Finally, if S is non-symmetri , S - uts orrespond to semi-joins of B (see appendix).\n\nProof.\n\n6\n\n\fComplexity:\n\nIt is well admitted that we\n\nan perform a BFS on a graph or its\n\nin linear time [13, 6\u2104. The instru tions on lines [2-5,8\u2104\nomplement. It is easy to see that we\nBFS on a\n\nomplement\n\nan be done with a BFS on a graph or its\n\nan do a BFS on the bi- omplement in linear time (like a\n\nomplement graph, with two vertex lists for\n\nX\n\nand\n\nY ),\n\nso instru tion line 10\n\nan be\n\ndone in linear time. Finally, the operations at line 11 are done in linear time (see appendix).\nThese results\n\nTheorem 16.\ngraph in\n3.2\n\nan be summarized as:\n\nAlgorithm 1 omputes the anoni al NLC-2 \u03c1-free de omposition tree of a 2-labelled\n\nO(nm) time.\n\nNLC-2 de omposition of a prime graph\n\nIn this se tion,\n\nG\n\nis an unlabelled prime (w.r.t. modular de omposition) graph, with\n\n|V | \u2265 3.\n\n(2-bimodule ). A bipartition {X, Y } of V is a 2-bimodule if X an be partitioned\nX1 and X2 , and Y into Y1 and Y2 su h that for all (i, j) \u2208 {1, 2}\u00d7 {1, 2}, then either Xi 0 Yj\nor Xi 1 Yj . It is easy to see that if {X, Y } is a 2-bimodule if and only if {X, Y } is a split, a\no-split or a bi-join. Moreover, if min(|X|, |Y |) > 1 then {X, Y } annot be both of them in the\nsame time (sin e G is prime).\n\nDe\u001cnition 17\ninto\n\nLet l : V \u2192 {1, 2} be a 2-labelling. Then s(l)\nv \u2208 V , s(l)(v) = 1 if and only if l(v) = 2.\n\ndenote the 2-labelling on\n\nV\n\nsu h that for all\n\ned by a 2-bimodule). Let {X, Y } be a 2-bimodule. We de\u001cne the\nl : V \u2192 {1, 2} of G indu ed by {X, Y }. If |X| = |Y | = 1, then l(x) = 1 and l(y) = 2,\nwhere X = {x} and Y = {y}. If |X| = 1, then l(v) = 1 i\u001b v \u2208 N [x]. Similarly if |Y | = 1,\nthen l(v) = 1 i\u001b v \u2208 N [y]. Now we suppose min(|X|, |Y |) > 1. If {X, Y } is a split, then the\nset of verti es in X with a neighbour Y and the set of verti es in Y with a neighbour in X is\nlabelled 1, others verti es are labelled 2. If {X, Y } is a o-split, then a labelling of G indu ed by\n{X, Y } is a labelling of G indu ed by the split {X, Y }. Finally if {X, Y } is a bi-join, l is su h\nthat {v \u2208 X : l(v) = 1} is a join with {v \u2208 Y : l(v) = 1} and {v \u2208 X : l(v) = 2} is a join with\n{v \u2208 Y : l(v) = 2}. Note that if {X, Y } is a bi-join, then there is two possibles labelling l1 and l2 ,\nwith l1 = s(l2 ). If {X, Y } is a 2-bimodule of G and l a labelling indu ed by {X, Y }, then every\nmono- oloured module has size 1 (sin e G is prime and |V | \u2265 3).\n\nDe\u001cnition 18 (Labelling indu\nlabelling\n\nDe\u001cnition 19 (Good 2-bimodule).\nindu ed by\n\n{X, Y } is NLC-2 \u03c1-free.\n\nProposition 20.\nLemma 21.\n\nIf\n\nA\n\n2-bimodule {X, Y } is good\n\nThe following proposition\n\nif the graph\n\nG with the labelling\n\nomes immediately from lemma 3.\n\nG is NLC-2 if and only if G has a good 2-bimodule.\n\nG has a good 2-bimodule {X, Y } whi h is a split, then G has a good 2-bimodule\n\nwhi h is a strong split.\nProof. There is a node\n\n\u03b1\n\nin the split de omposition tree and\n\n\u2205 ( I ( {1, . . . , d(\u03b1)}\n\nsu h that\n\n{X, Y } = {\u222ai\u2208I C\u03b1i , \u222ai6\u2208I C\u03b1i }. Let l : V \u2192 {1, 2} be the labelling of G indu ed by {X, Y }. For all\ni \u2208 {1, . . . , d(\u03b1)}, (G[C\u03b1i ], l|C\u03b1i ) is NLC-2 \u03c1-free (where l|W is the fun tion l restri ted at W ).\n\u2032\ni\nLet l be the 2-labelling of V su h that for all i, and v \u2208 C\u03b1 , l(v) = 1 if and only if v has\ni\n\u2032\ni\na neighbour outside of C\u03b1 . For all i, either l|C i = l |C i , or \u2200v \u2208 C\u03b1 , l(v) = 2. Then for all i,\n\u03b1\n\u03b1\n(G[C\u03b1i ], l\u2032 |C\u03b1i ) is NLC-2 \u03c1-free, and thus (G, l\u2032 ) is NLC-2 \u03c1-free. Sin e there is a dominating vertex\nin the\n\nhara teristi\n\n{C\u03b1j , V \\ C\u03b1j }\n\nis\n\nl\u2032 .\n\ngraph of\n\n\u03b1,\n\nj su h that the labelling\n{C\u03b1j , V \\ C\u03b1j } is good.\n\nthere is a\n\nThus the strong split\n\n7\n\nindu ed by the strong split\n\n\fInput: A graph G\nResult: Yes i\u001b G is NLC-2\nS\u2190\n\nthe set of strong splits,\n\no-splits and bi-joins of\n\nforea h {X, Y } \u2208 S do\nl\u2190\n\nthe labelling of\n\nG\n\nindu ed by\n\n{X, Y }\n\nG\n\n;\n\n;\n\nif (G[X], G[Y ], l) is NLC-2 \u03c1-free then return Yes ;\nreturn No ;\nAlgorithm 3: Re ognition of prime NLC-2 graphs\nPrevious lemma on\nhas a good\n\n2-bimodule\n\nLemma 22.\n\nIf\n\nG\n\nsay that if\n\nG\n\nhas a good\n\nwhi h is a strong\n\n2-bimodule {X, Y }\n\nwhi h is a\n\no-split, then\n\nG\n\no-split. The following lemma is similar to Lemma 21.\n\nG has a good 2-bimodule {X, Y } whi h is a bi-join, then G has a good 2-bimodule\n\nwhi h is a strong bi-join.\n\nTheorem 23.\n\nAlgorithm 3 re ognises prime NLC-2 graphs, and its time omplexity is\n\nProof. Trivially if the algorithm return Yes, then\ntion 20, and lemmas 21 and 22, if\n\nG\n\nG\n\nO(n2 m).\n\nis NLC-2. On the other hand, by proposi-\n\nis NLC-2, then it has a good strong\n\n2-bimodule\n\nand the\n\nalgorithm returns Yes.\nThe set\n\nS\n\nan be\n\nomputed using algorithms for\n\nand bi-join de omposition on\n\nG.\n\nomputing split de omposition on\n\nsplit de omposition [5\u2104: some simpler algorithms run in\nde omposition\n\nan be\n\nO(n2 m)\n\nis\n\nand\n\nG,\n\n[4, 10\u2104. [7, 8\u2104 show that bi-join\n\nomputed in linear time, using a redu tion to modular de omposition. But\n\nthere also, modular de omposition algorithms simpler than [15\u2104 may be used. The set\nelements. Testing if a\n\nG\n\nNote that it is not required to use a linear time algorithm for\n\n2-bimodule\n\nis good takes\n\nO(nm)\n\nS\n\nhas\n\nO(n)\n\nusing algorithm 1. So total running time\n\nO(n2 m).\n\n3.3\n\nNLC-2 de omposition\n\nUsing lemma 2, modular de omposition and algorithm 3, we get:\n\nTheorem 24.\n\nNLC-2 graphs an be re ognised in\n\nO(n2 m), and a NLC-2 expression an be gen-\n\nerated in the same time.\n\n4\n\nGraph isomorphism on NLC-2 graphs\n\n4.1\n\nGraph Isomorphism on NLC-2\n\nThe following propositions are dire t\n\nProposition 25.\n\nprime graphs\n\nonsequen es of properties (linear and degenerate) of\n\nS-\n\nuts.\n\nS \u2208 {1, 2}\u00d7{1, 2}. Two graphs G and H are isomorphi\n\u03c0 between PS (G) and PS (H) su h that for all P \u2208 PS (G), G[P ]\n\nConsider a symmetri\n\nif and only if there is a bije tion\nis isomorphi to\n\n\u03c1-free\n\nH[\u03c0(P )].\n\nProposition 26. Let a non-symmetri S \u2208 {1, 2} \u00d7 {1, 2} and let G and H be two graphs. Let\nPS\u2032 (G) = (P1 , . . . , Pk ) and PS\u2032 (H) = (P1\u2032 , . . . , Pk\u2032 \u2032 ) then G and H are isomorphi if and only if\nk = k\u2032 and for all i \u2208 {1, . . . , k}, G[Pi ] is isomorphi to H[Pi\u2032 ].\nBy the previous 2 propositions, two NLC-2\n\n\u03c1-free\n\nif and only if there is an isomorphism between their\nwhi h respe ts the order of\n\nhildren of\n\ntime, thus isomorphism of NLC-2\n\nlinear\n\n\u03c1-free\n\n2-labelled graphs\nanoni al NLC-2\n\nG and H are isomorphi\n\u03c1-free de omposition tree\n\nnodes. This isomorphism\n\ngraphs\n\nan be done in\n\n8\n\nO(nm)\n\nan be tested in linear\n\ntime.\n\n\fInput: Two prime NLC-2 graphs G and H\nResult: Yes if G \u2243 H , No otherwise\nS \u2190 the set of strong splits, o-splits and bi-joins of G ;\nS \u2032 \u2190 the set of strong splits, o-splits and bi-joins of H ;\nif there is no good 2-bimodule in S then fail with \u0010 G is not NLC-2\u0011;\n{X, Y } \u2190 a good 2-bimodule in S ;\nl \u2190 the labelling of G indu ed by {X, Y } ;\nforea h {X \u2032 , Y \u2032 } \u2208 S \u2032 su h that {X \u2032 , Y \u2032 } is good do\nl\u2032 \u2190 the labelling of H indu ed by {X \u2032 , Y \u2032 } ;\nif |X| > 1 and |Y | > 1 and {X, Y } is a bi-join then\nif (G, l) \u2243 (H, l\u2032 ) or (G, l) \u2243 (H, s(l\u2032 )) then return Yes ;\nelse if (G, l) \u2243 (H, l\u2032 ) then return Yes ;\n\nreturn No\n\n4.2\n\n;\n\nAlgorithm 4:\n\nIsomorphism for prime NLC-2 graphs\n\nGraph isomorphism on prime NLC-2 graphs\n\nTheorem 27.\n\nAlgorithm 4 test isomorphism between two prime NLC-2 graphs in time\n\nO(n2 m).\n\nProof. If the algorithm returns \u0010yes\u0011, then trivially G \u2243 H . On the other hand suppose that\nG \u2243 H and let \u03c0 : V (G) \u2192 V (H) be a bije tion su h that {u, v} \u2208 E(G) i\u001b (\u03c0(u), \u03c0(v)) \u2208 E(H).\n\u2032\n\u2032\n\u2032\n\u2032\nThen {X , Y } with X = \u03c0(X) and Y = \u03c0(Y ) is a good 2-bimodule if H . If min(|X|, |Y |) > 1\n\u2032\n\u2032\nand {X , Y } is a bi-join, then by de\u001cnition there is two labelling indu ed by {X, Y }, and (G, l) \u2243\n\u2032\n(H, l ) or (G, l) \u2243 (H, s(l\u2032 )). Otherwise the labelling is unique and (G, l) \u2243 (H, l\u2032 ).\n\u2032 an be omputed in O(n2 ) time using linear time algorithms for omputing\nThe sets S and S\n\u2032\nsplit de omposition on G and G, and bi-join de omposition on G. The sets S and S have O(n)\nelements. Test if a 2-bimodule is good take O(nm) using algorithm 1, and test if two 2-labelled\n2\nprime graphs are isomorphi take also O(nm). Thus the total running time is O(n m).\n4.3\n\nGraph isomorphism on NLC-2 graphs\n\nIt is easy to show that graph isomorphism on prime NLC-2 graphs with an additional labels into\n\n{1, . . . , q}\n\nan be done in\n\norresponding to\n\nv\n\nin the\n\nWe show that we\n\nO(n2 m) time. For that, we add\nNLC-2 \u03c1-free de omposition tree.\n\nthe additional label of\n\nan do graph isomorphism on NLC-2 graphs in time\n\nv\n\nat the leaf\n\nO(n2 m),\n\nusing the\n\nM(G) and M(H) be the modular de omposition\nG and H . For M \u2208 M(G), let GM be G[M ], and for M \u2208 M(H), let HM be H[M ].\n\u2217\n\u2217\nLet GM be the hara teristi graph of GM (note that |V (GM )| is the number of hildren of\nM in the modular de omposition tree). Let M(i,\u2217) = {M \u2208 M(G) \u222a M(H) : |M | = i}, let\n\u2217\nM(\u2217,j)\nPn= {M \u2208 M(G) \u222a M(H) : |V (GM )| = j} and let M(i,j) = M(i,\u2217) \u2229 M(\u2217,j) . Note\nthat\nj=1 (M(\u2217,j) \u00d7 j) is the number of verti es in G plus the number of edges in the modular\nde omposition tree, and thus is at most 3n \u2212 2.\nmodular de omposition and algorithm 4. Let\nof\n\nTheorem 28.\nProof. The\nsu h that\n\nAlgorithm 5 tests isomorphism between two NLC-2 graphs in time\n\norre tness\n\nl(M )\n\nand\n\nomes from the fa t that at ea h step, for all\n\nl(M \u2032 )\n\nare set,\n\nGM\n\nand\n\nGM \u2032\n\nare isomorphi\n\n9\n\nif and\n\nO(n2 m).\n\nM, M \u2032 \u2208 M(G) \u222a M(H)\n\u2032\nonly if l(M ) = l(M ). The\n\n\fInput: Two NLC-2 graphs G and H\nResult: Yes if G \u2243 H , No otherwise\nfor every M \u2208 M(G) \u222a M(H) su h that |M | = 1 do l(M ) \u2190 1 ;\nfor i from 2 to n do\nfor j from 2 to i do\nP of M(i,j)\n\u2243 (G\u2217M \u2032 , l). ;\n\nCompute the partition\n\n\u2217\nif and only if (GM , l)\n\nforea h P\na\u2190\n\n\u2208P\n\ndo\n\na new label (an integer not in\n\nFor all\n\nM \u2208 P , l(M ) \u2190 a\n\nAlgorithm 5:\ntotal time\n\nf (n, m)\n\nsu h that\n\nof this algorithm is\n\nf (n, m) \u2264\n\nXX\ni\n\nj\n\n\u2264m\n\nX\nj\n\nM\n\nImg(l))\n\nand\n\nM\u2032\n\nare in the same\n\nlass of\n\nP\n\n;\n\n;\nIsomorphism on NLC-2 graphs\n\nO(n2 m)\n\nsin e (\u0010big Oh\u0011 is omitted):\n\nX\nX\n\u0001\n\u0001\nj 2 m|M(i,j) |2 \u2264 m\nj2\n|M(i,j) |2\nj\n\ni\n\n!\n\nX\u0010\n\u0001\n\u00012 \u0011\nj 2 |M(\u2217,j) |2 \u2264 m\n\u2264 n2 m.\nj|M(\u2217,j) |\nj\n\nReferen es\n[1\u2104 M. Chein, M. Habib, and M.C. Maurer. Partitive hypergraphs. Dis rete Math., 37(1):35\u001550, 1981.\n[2\u2104 B. Cour elle, J. Engelfriet, and G. Rozenberg. Handle-rewriting hypergraph grammars. J. Comput.\nSyst. S i., 46(2):218\u0015270, 1993.\n[3\u2104 W. H. Cunnigham and J. Edmonds. A ombinatorial de omposition theory. Canad. J. Math., 32:734\u0015\n765, 1980.\n[4\u2104 William H. Cunningham. De omposition of dire ted graphs. SIAM J. Algebrai Dis rete Methods,\n3(2):214\u0015228, 1982.\n[5\u2104 E. Dahlhaus. Parallel algorithms for hierar hi al lustering and appli ations to split de omposition\nand parity graph re ognition. J. Algorithms, 36(2):205\u0015240, 2000.\n[6\u2104 E. Dahlhaus, J. Gustedt, and R. M. M Connell. Partially omplemented representations of digraphs.\nDis rete Math. Theor. Comput. S i., 5(1):147\u0015168, 2002.\n[7\u2104 F. de Montgol\u001cer and M. Rao. The bi-join de omposition. In ICGT, volume 22 of ENDM, pages\n173\u0015177, 2005.\n[8\u2104 F. de Montgol\u001cer and M. Rao. Bipartitives families and the bi-join de omposition. Te hni al report,\nhttps://hal.ar hives-ouvertes.fr/hal-00132862, 2005.\n[9\u2104 J.-L. Fouquet, V. Giakoumakis, and J.-M. Vanherpe. Bipartite graphs totally de omposable by\nanoni al de omposition. Internat. J. Found. Comput. S i., 10(4):513\u0015533, 1999.\n[10\u2104 C. P. Gabor, K. J. Supowit, and W.-L. Hsu. Re ognizing ir le graphs in polynomial time. J. ACM,\n36(3):435\u0015473, 1989.\n[11\u2104 T. Gallai. Transitiv orientierbare Graphen. A ta Math. A ad. S i. Hungar., 18:25\u001566, 1967.\n[12\u2104 F. Gurski and E. Wanke. Minimizing NLC-width is NP-Complete. In WG, volume 3787 of LNCS,\npages 69\u001580, 2005.\n[13\u2104 M. Habib, C. Paul, and L. Viennot. Partition re\u001cnement te hniques: An interesting algorithmi tool\nkit. Internat. J. Found. Comput. S i., 10(2):147\u0015170, 1999.\n[14\u2104 \u00d6. Johansson. NLC2 -de omposition in polynomial time. Internat. J. Found. Comput. S i., 11(3):373\u0015\n395, 2000.\n[15\u2104 R. M. M Connell and J. P. Spinrad. Modular de omposition and transitive orientation. Dis rete\nMath., 201(1-3):189\u0015241, 1999.\n[16\u2104 E. Wanke. k-NLC Graphs and Polynomial Algorithms. Dis rete Appl. Math., 54(2-3):251\u0015266, 1994.\n\n10\n\n\fAppendix\nA.1\n\nProof of lemma 13\n\nG = (X, Y, Ej , Em ) be a BT su h that every BT-module has size 1. Let (x1 , . . . , x|X| )\nX sorted by (dj (x), dm (x)) in lexi ographi de reasing order. If (A, B) is a semijoin of G, then there is a k \u2208 {0, . . . , |X|} su h that A \u2229 X = {x1 , . . . , xk }.\nLet\n\nbe\n\nProof. For all\n\nv \u2208 A \u2229 X , dj (v) \u2265 |B \u2229 Y |, and for all v \u2208 B \u2229 X , dj (v) \u2264 |B \u2229 Y |. Moreover,\nv \u2208 B \u2229 X with dj (v) = |B \u2229 Y |, then dm (v) = 0. Let C = {v \u2208 X : dj (v) =\n|B \u2229 Y | and dm (v) = 0}. Then C is a BT-module of G, and thus |C| \u2264 1. Every vertex in\nA \u2229 X \\ C are before every vertex in B \u2229 X \\ C in the ordering. Moreover, if |C| > 0, then verti es\nin A \u2229 X \\ C are before the vertex in C , and verti es in B \u2229 X \\ C are after the vertex in C in\n\nif there is a\n\nthe ordering.\n\nA.2\n\nProof of lemma 14\n\nk \u2208 {0, . . . , |X|} and k\u2032 \u2208 {0, . . . , |Y |}. Then (A, (X \u222a Y ) \\ A), where A =\nP\nP \u2032\n{x1 , . . . , xk , y1 , . . . , yk\u2032 }, is a semi-join of G if and only if ki=1 dj (xi ) \u2212 ki=1 dj (yi ) =\nP\nP \u2032\nk \u00d7 (|Y | \u2212 k\u2032 ) and ki=1 dm (xi ) \u2212 ki=1 dm (yi ) = 0.\nLet\n\nProof. The \u0010If \u0011 part is by de\u001cnition. Now let us onsider the \u0010Only if \u0011 part. Let us assume that\nthe degree ondition holds. We will denote a the number of join edges between A \u2229 X and B \u2229 Y ,\nb the number of join edges between A \u2229 X and A \u2229 Y , andPc the number of mixed\nbetween\nPkedges\n\u2032\nk\n\u2032\nA \u2229 X and A \u2229 Y . Note that a \u2264 k(|Y | \u2212 k ), a + b = i=1 dj (xi ) and b \u2264 i=1 dj (yi ), thus\nP \u2032\na \u2265 k(|Y | \u2212 k\u2032 ). So we have a = k(|Y | \u2212 k\u2032 ), and ki=1 dj (yi ) \u2212 b = 0. In other words, there is\nonly join edges between A \u2229 X and B \u2229 Y , and there is no join edges between A \u2229 Y and B \u2229 X .\nPk \u2032\nPk\nNow sin e there is only join edges between A \u2229 X and B \u2229 Y , c =\ni=1 dm (yi ),\ni=1 dm (xi ) =\nthus there is no mixed edges between A \u2229 Y and B \u2229 X .\n\nA.3\n\nAlgorithm to\n\nCorre tness:\n\nompute\n\nPS\u2032\n\nwhen\n\nS\n\nis non-symmetri\n\nP\nB . At any time, sj = ki=1 dj (xi ),\nP\nP \u2032\nP \u2032\nsm = ki=1 dm (xi ), s\u2032j = ki=1 dj (yi ) and s\u2032m = ki=1 dm (yi ). In B , every BT-module has size 1,\notherwise there is a mono- oloured module in G of size at least 2. If (A, B) is a semi-join, then by\nlemma 13 on (C1 , C2 , Ej , Em ) and (C2 , C1 , Ej , Em ), there is a a and b su h that A\u2229C1 = {x1 , . . . , xa }\n\u2032\n\u2032\n\u2032\nand A \u2229 C2 = {y1 , . . . , yb }. At any time, (A , (C1 \u222a C2 ) \\ A ) with A = {x1 , . . . , xl , y1 , . . . , yl\u2032 } is\n\u2032\n\u2032\nthe last semi-join found. At k = a, the while line 12 will stop when sj \u2212 sj = k \u00d7 (|C2 | \u2212 k )\n\u2032\n\u2032\n\u2032\nsin e for every v \u2208 A \u2229 C2 , dj (v) \u2264 k , and sj + k \u00d7 (|C2 | \u2212 k ) de rease with k . Moreover, when\n\u2032\n\u2032\n\u2032\n\u2032\nthe while loop stops, sm = sm sin e sm in rease with k . Thus if b 6= k , then {yk \u2032 +1 , . . . yb } is a\n\u2032\nBT-module and b = k + 1 (sin e every BT-module has size 1). In all ases the algorithm \u001cnds\n(A, B), and adds the partition in P \u2032 .\n\nProof.\n\nComplexity:\n\nlinear time, and\nrunning time is\n\nAlgorithm 6 generates all the semi-joins of\n\nAs we see in proof of theorem 15, every instru tion lines [2-5\u2104\nlearly every instru tion lines [6-22\u2104\n\nO(n + m).\n\n11\n\nan be done in\n\nan be done in linear time, thus the total\n\n\fInput: A 2-labelled graph G, and a non-symmetri\nOutput: PS\u2032\n\nS \u2286 {1, 2} \u00d7 {1, 2}\n\n1 Vi \u2190 {v : v \u2208 V and l(v) = i} ;\n2 if (1, 1) \u2208 S then C1 \u2190 o- onne ted omponents of G[V1 ];\n3 else C1 \u2190 onne ted omponents of G[V1 ];\n4 if (2, 2) \u2208 S then C2 \u2190 o- onne ted omponents of G[V2 ];\n5 else C2 \u2190 onne ted omponents of G[V2 ];\n6 B = (C1 , C2 , Ej , Em ) \u2190 the bipartite trigraph between the elements of C1\n7 (x1 , . . . , x|C1 | ) \u2190 C1 sorted by lexi ographi order on (\u2212dj (v), \u2212dm (v)) ;\n\nand\n\nC2\n\n8 (y1 , . . . , y|C2 | ) \u2190 C2 sorted by lexi ographi order on (dj (v), dm (v)) ;\n9 P \u2032 \u2190 () ; l \u2190 0; l\u2032 \u2190 0; k \u2032 \u2190 0 ; k \u2190 0 ;\n10 sj \u2190 0 ; sm \u2190 0 ; s\u2032j \u2190 0 ; s\u2032m \u2190 0 ;\n11 while k \u2264 |C1 | do\nwhile sj \u2212 s\u2032j < k \u00d7 (|C2 | \u2212 k\u2032 ) or ( sj \u2212 s\u2032j = k \u00d7 (|C2 | \u2212 k\u2032 ) and sm > s\u2032m )\n12\nk\u2032 \u2190 k\u2032 + 1 ; s\u2032j \u2190 s\u2032j + dj (yk\u2032 ) ; s\u2032m \u2190 s\u2032m + dm (yk\u2032 ) ;\n13\n14\n15\n16\n17\n18\n\nif\n\n19\n\nk \u2190 k + 1 ; sj \u2190 sj + dj (xk ) ; sm \u2190 sm + dm (xk )\n\n20\n21\n22\n\ndo\n\nsj \u2212 s\u2032j = k \u00d7 (|C2 | \u2212 k\u2032 ) and sm = s\u2032m then\n\u2032\n\u2032\n\u2032\nadd {xl+1 , . . . , xk } \u222a {yl\u2032 +1 . . . , yk \u2032 } at the end of P ; l \u2190 k ; l \u2190 k ;\nif sj \u2212 s\u2032j \u2212 dj (yk+1 ) = k \u00d7 (|C2 | \u2212 k\u2032 \u2212 1) and sm = s\u2032m + dm (yk+1 ) then\nk\u2032 \u2190 k\u2032 + 1 ; s\u2032j \u2190 s\u2032j + dj (yk\u2032 ) ; s\u2032m \u2190 s\u2032m + dm (yk\u2032 ) ;\n\u2032\n\u2032\n\u2032\nadd {yk \u2032 } at the end of P ; l \u2190 k ;\n\n\u2205 form P \u2032 , if any ;\nif (2, 1) \u2208 S then reverse P \u2032 ;\nreturn P \u2032\n\n;\n\nremove\n\nAlgorithm 6:\n\nComputation of\n\nPS\u2032\n\n12\n\nwhen\n\nS\n\nis non-symmetri\n\n;\n\n\f"}