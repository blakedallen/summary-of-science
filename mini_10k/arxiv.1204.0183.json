{"id": "http://arxiv.org/abs/1204.0183v1", "guidislink": true, "updated": "2012-04-01T09:24:19Z", "updated_parsed": [2012, 4, 1, 9, 24, 19, 6, 92, 0], "published": "2012-04-01T09:24:19Z", "published_parsed": [2012, 4, 1, 9, 24, 19, 6, 92, 0], "title": "Neural Network Model for Path-Planning of Robotic Rover Systems", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1204.3565%2C1204.0183%2C1204.4472%2C1204.3533%2C1204.1601%2C1204.5565%2C1204.2059%2C1204.3576%2C1204.0605%2C1204.3414%2C1204.6228%2C1204.1656%2C1204.5355%2C1204.3707%2C1204.4815%2C1204.1494%2C1204.3462%2C1204.2995%2C1204.1905%2C1204.4767%2C1204.4530%2C1204.1410%2C1204.6383%2C1204.2617%2C1204.4587%2C1204.4731%2C1204.3109%2C1204.5567%2C1204.2154%2C1204.5758%2C1204.2750%2C1204.2536%2C1204.2139%2C1204.6320%2C1204.1764%2C1204.0259%2C1204.5853%2C1204.4766%2C1204.2829%2C1204.3754%2C1204.2943%2C1204.2496%2C1204.4424%2C1204.3553%2C1204.3608%2C1204.6329%2C1204.1462%2C1204.1609%2C1204.4820%2C1204.0613%2C1204.1255%2C1204.2654%2C1204.0337%2C1204.5643%2C1204.4879%2C1204.4313%2C1204.6007%2C1204.0057%2C1204.5392%2C1204.6514%2C1204.4193%2C1204.2717%2C1204.6694%2C1204.1268%2C1204.2484%2C1204.3065%2C1204.1729%2C1204.4381%2C1204.5673%2C1204.1377%2C1204.4903%2C1204.4666%2C1204.6150%2C1204.0242%2C1204.6105%2C1204.2821%2C1204.5702%2C1204.4578%2C1204.5881%2C1204.5847%2C1204.3179%2C1204.5188%2C1204.5834%2C1204.0644%2C1204.2985%2C1204.6040%2C1204.0604%2C1204.2452%2C1204.4818%2C1204.3696%2C1204.4888%2C1204.4737%2C1204.4297%2C1204.1251%2C1204.1472%2C1204.2254%2C1204.4600%2C1204.3532%2C1204.1503%2C1204.5802%2C1204.3564&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Neural Network Model for Path-Planning of Robotic Rover Systems"}, "summary": "Today, robotics is an auspicious and fast-growing branch of technology that\ninvolves the manufacturing, design, and maintenance of robot machines that can\noperate in an autonomous fashion and can be used in a wide variety of\napplications including space exploration, weaponry, household, and\ntransportation. More particularly, in space applications, a common type of\nrobots has been of widespread use in the recent years. It is called planetary\nrover which is a robot vehicle that moves across the surface of a planet and\nconducts detailed geological studies pertaining to the properties of the\nlanding cosmic environment. However, rovers are always impeded by obstacles\nalong the traveling path which can destabilize the rover's body and prevent it\nfrom reaching its goal destination. This paper proposes an ANN model that\nallows rover systems to carry out autonomous path-planning to successfully\nnavigate through challenging planetary terrains and follow their goal location\nwhile avoiding dangerous obstacles. The proposed ANN is a multilayer network\nmade out of three layers: an input, a hidden, and an output layer. The network\nis trained in offline mode using back-propagation supervised learning\nalgorithm. A software-simulated rover was experimented and it revealed that it\nwas able to follow the safest trajectory despite existing obstacles. As future\nwork, the proposed ANN is to be parallelized so as to speed-up the execution\ntime of the training process.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1204.3565%2C1204.0183%2C1204.4472%2C1204.3533%2C1204.1601%2C1204.5565%2C1204.2059%2C1204.3576%2C1204.0605%2C1204.3414%2C1204.6228%2C1204.1656%2C1204.5355%2C1204.3707%2C1204.4815%2C1204.1494%2C1204.3462%2C1204.2995%2C1204.1905%2C1204.4767%2C1204.4530%2C1204.1410%2C1204.6383%2C1204.2617%2C1204.4587%2C1204.4731%2C1204.3109%2C1204.5567%2C1204.2154%2C1204.5758%2C1204.2750%2C1204.2536%2C1204.2139%2C1204.6320%2C1204.1764%2C1204.0259%2C1204.5853%2C1204.4766%2C1204.2829%2C1204.3754%2C1204.2943%2C1204.2496%2C1204.4424%2C1204.3553%2C1204.3608%2C1204.6329%2C1204.1462%2C1204.1609%2C1204.4820%2C1204.0613%2C1204.1255%2C1204.2654%2C1204.0337%2C1204.5643%2C1204.4879%2C1204.4313%2C1204.6007%2C1204.0057%2C1204.5392%2C1204.6514%2C1204.4193%2C1204.2717%2C1204.6694%2C1204.1268%2C1204.2484%2C1204.3065%2C1204.1729%2C1204.4381%2C1204.5673%2C1204.1377%2C1204.4903%2C1204.4666%2C1204.6150%2C1204.0242%2C1204.6105%2C1204.2821%2C1204.5702%2C1204.4578%2C1204.5881%2C1204.5847%2C1204.3179%2C1204.5188%2C1204.5834%2C1204.0644%2C1204.2985%2C1204.6040%2C1204.0604%2C1204.2452%2C1204.4818%2C1204.3696%2C1204.4888%2C1204.4737%2C1204.4297%2C1204.1251%2C1204.1472%2C1204.2254%2C1204.4600%2C1204.3532%2C1204.1503%2C1204.5802%2C1204.3564&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Today, robotics is an auspicious and fast-growing branch of technology that\ninvolves the manufacturing, design, and maintenance of robot machines that can\noperate in an autonomous fashion and can be used in a wide variety of\napplications including space exploration, weaponry, household, and\ntransportation. More particularly, in space applications, a common type of\nrobots has been of widespread use in the recent years. It is called planetary\nrover which is a robot vehicle that moves across the surface of a planet and\nconducts detailed geological studies pertaining to the properties of the\nlanding cosmic environment. However, rovers are always impeded by obstacles\nalong the traveling path which can destabilize the rover's body and prevent it\nfrom reaching its goal destination. This paper proposes an ANN model that\nallows rover systems to carry out autonomous path-planning to successfully\nnavigate through challenging planetary terrains and follow their goal location\nwhile avoiding dangerous obstacles. The proposed ANN is a multilayer network\nmade out of three layers: an input, a hidden, and an output layer. The network\nis trained in offline mode using back-propagation supervised learning\nalgorithm. A software-simulated rover was experimented and it revealed that it\nwas able to follow the safest trajectory despite existing obstacles. As future\nwork, the proposed ANN is to be parallelized so as to speed-up the execution\ntime of the training process."}, "authors": ["Youssef Bassil"], "author_detail": {"name": "Youssef Bassil"}, "author": "Youssef Bassil", "arxiv_comment": "LACSC - Lebanese Association for Computational Sciences,\n  http://www.lacsc.org/; International Journal of Science and Technology\n  (IJST), Vol. 2, No. 2, February 2012", "links": [{"href": "http://arxiv.org/abs/1204.0183v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1204.0183v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.NE", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.NE", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1204.0183v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1204.0183v1", "journal_reference": null, "doi": null, "fulltext": "International Journal of Science and Technology (IJST), E-ISSN: 2224-3577, Vol. 2, No. 2, February, 2012\nhttp://ejournalofsciences.org/archive/vol2no2/vol2no2_6.pdf\n\nNeural Network Model for Path-Planning\nOf Robotic Rover Systems\nYoussef Bassil\nLACSC \u2013 Lebanese Association for Computational Sciences\nRegistered under No. 957, 2011, Beirut, Lebanon\nyoussef.bassil@lacsc.org\n\nABSTRACT\nToday, robotics is an auspicious and fast-growing branch of technology that involves the manufacturing, design, and\nmaintenance of robot machines that can operate in an autonomous fashion and can be used in a wide variety of applications\nincluding space exploration, weaponry, household, and transportation. More particularly, in space applications, a common\ntype of robots has been of widespread use in the recent years. It is called planetary rover which is a robot vehicle that\nmoves across the surface of a planet and conducts detailed geological studies pertaining to the properties of the landing\ncosmic environment. However, rovers are always impeded by obstacles along the traveling path which can destabilize the\nrover's body and prevent it from reaching its goal destination. This paper proposes an ANN model that allows rover\nsystems to carry out autonomous path-planning to successfully navigate through challenging planetary terrains and follow\ntheir goal location while avoiding dangerous obstacles. The proposed ANN is a multilayer network made out of three\nlayers: an input, a hidden, and an output layer. The network is trained in offline mode using back-propagation supervised\nlearning algorithm. A software-simulated rover was experimented and it revealed that it was able to follow the safest\ntrajectory despite existing obstacles. As future work, the proposed ANN is to be parallelized so as to speed-up the\nexecution time of the training process.\nKeywords: Neural Network, Robotics, Space Rover, Back-propagation Algorithm\n\n1.\n\nINTRODUCTION\n\nRobotics technology is emerging at a rapid pace,\noffering new possibilities for automating tasks in many\nchallenging applications, especially in space explorations,\nmilitary operations, underwater missions, domestic\nservices, and medical procedures. Particularly, in space\nexploration, robotic devices are formally known as\nplanetary rovers or simply rovers and they are aimed at\nconducting physical analysis of planetary terrains and\nastronomical bodies, and collecting data about air pressure,\nclimate, temperature, wind, and other atmospheric\nphenomena surrounding the landing sites [1]. Basically,\nrovers can be autonomous capable of operating with little\nor no assistance from ground control or they can be\nremotely controlled from earth ground stations called RCC\nshort for Remote Collaboration Center [2].\nIn essence, the movement of autonomous rovers is not\ndirected by human operators; instead, it is controlled by\ncomplex algorithms that allow the rover to traverse paths\non multiple terrains while avoiding obstacles and path\nerrors. This capability is more formally known as pathplanning in which a rover or any robotic vehicle can\nperform terrain analysis and select the safest route to travel\nacross [3]. The rover can then proceed towards the goal\nlocation over the selected trajectory while avoiding\nobstacles without previous knowledge of their existence.\nThis paper proposes a path-planning solution for\nautonomous robotic planetary rover systems based on\nartificial neural network (ANN) [4]. The proposed neural\nnetwork is multi-layer consisting of three consecutive\nlayers: an input, a hidden, and an output layer. The input\nlayer is made out of two neurons that are fed by the\nrover's sensors which are designed to detect obstacles of\n\nany size and shape. The hidden layer is made out of three\nneurons and its purpose is to read input data and multiply\nthem by a certain weight and then forward the results to\nthe next layer. The output layer is made out of two\nneurons that are directly linked to the rover's motors\nwhich control its movement and its mechanical operation.\nThe proposed ANN uses a mix of activation functions\nincluding Sigmoid for the hidden neurons and linear for\nthe output neurons. Moreover, the model employs a\nsupervised learning approach using the back-propagation\nalgorithm [5] to train the network in offline mode.\nThe proposed artificial neural network is meant to\nallow the rover system selects the best path through any\ngiven ground by predicting the existing obstacles along the\npath and the harsh structure of the landing terrain. This\nwould allow the rover to navigate autonomously and\nsafely toward its goal location and complete its designed\ntask.\n\n2.\n\nSPACE EXPLORATION ROVERS\n\nFundamentally, a rover is a space exploration robotic\nvehicle used particularly in exploring the land of a planet.\nIt has the capability to travel across the surface of a\nlandscape and other cosmic bodies. A rover has many\nfeatures: It can generate power from solar panels; capture\nhigh-resolution images; move in 360 degrees with the help\nof a navigation camera (Navcam); walk across obstacles\nsuch as bumps and rocks; conduct deep analysis and\nrecord measurements using multiple types of\nspectrometers; find properties of materials to identify their\ntypes and their composition; search for geological clues\nsuch as water to detect any presence of life on the landing\n\n\fInternational Journal of Science and Technology (IJST), E-ISSN: 2224-3577, Vol. 2, No. 2, February, 2012\nhttp://ejournalofsciences.org/archive/vol2no2/vol2no2_6.pdf\n\nenvironment; and inspect the mineralogy and texture of\nthe local terrain using panoramic cameras (Pancam) [6][7].\nFinancially, robotic rovers can cost to build, test, and\ndeploy hundreds of millions of dollars sometimes billions\nof dollars [8]. Historically, Lunokhod and Marsokhod\nwere two space rovers designed and launched by the\nsoviets in the 70s [9]; while, Spirit and Opportunity were\ntwo US rovers produced by NASA, the space agency of\nthe United States, between year 2004 and 2010 as part of\nNASA's ongoing Mars Exploration Rover Mission (MER).\nInherently, there exist two types of rover vehicles: The\nfirst type is the human-controlled rovers which are\nremotely manipulated from earth and usually guided to\nperform a particular operation. Communication between\nthe rover and the earth control occurs through the Deep\nSpace Network (DSN), which is an international network\nof large antennas with communication facilities that\nsupports interplanetary spacecraft missions. Currently,\nDSN comprises three deep-space communications\nfacilities located in Mojave Desert in California, west of\nMadrid in Spain, and south of Canberra in Australia.\nThe second type is the autonomous rovers which can\ncomplete their desired tasks without constant human\ndirection. Space exploration rovers are distinguished by a\nhigh degree of autonomy as they can cope with their\nchanging environment, automatically gain information\nabout the landing sites, survive a disaster or a failure,\noperate for prolonged periods of time, execute predefined\noperations, and navigate across unstructured terrains\nwithout human assistance.\nIn practice, autonomous rovers are most of the time\nbased on artificial evolution to reinforce learning within\ntheir environments. This method of learning is known as\nmachine learning in which a system can learn from\nexperience data to generalize so that it performs correctly\nin new and unseen situations. Predominantly, artificial\nneural network (ANN), one of the most successfully\napplied machine learning approaches in robotics field, is\nused to control autonomous rover systems and provide\nthem an intelligent navigation behavior [10]. In effect,\nANN allows the rover to plan and execute collision-free\nmotions within its environment and to reach its goal\nlocation while avoiding obstacles and dangerous cosmic\nobjects.\n\n3.\n\nARTIFICIAL NEURAL NETWORKS\n\nArtificial neural networks or ANNs for short are very\ninfluential brain-inspired computational models, which\nhave been employed in various areas such as computing,\nmedicine, engineering, economics, and many others.\nANNs are composed of a certain number of simple\ncomputational elements called neurons, organized into a\nstructured graph topology made out of several consecutive\nlayers and immensely interconnected through a series of\nlinks called the synaptic weights. Synaptic weights are\noften associated with variable numerical values that can be\nadapted so as to allow the ANN to change its behavior\nbased on the problem being tackled [11].\nTraining an artificial neural network is usually done by\nfeeding the network's input with a pattern to learn. The\nnetwork then transmits the pattern through its weights and\nneurons until it generates a final output value. Afterwards,\n\na training or a learning algorithm compares the produced\noutput value to an expected output and if the error range is\nhigh, the algorithm marginally alters the network's\nweights so that if the same pattern is fed again to the\nnetwork, the output error would be smaller than the\nprevious iteration. This process gets repeated for many\ncycles called epochs using different set of input patterns\nuntil the network produces acceptable outputs for all\ninputs [12]. This learning progression allows the network\nto identify many patterns and further generalize to new\nand unseen patterns. Such type of training is called\nsupervised learning which uses classified pattern\ninformation to train the network in offline mode. On the\nother hand, there exists what so called the unsupervised\nlearning which uses only minimum information without\npre-classification to train the network while being in\nonline mode [13]. Some of the most successful supervised\nlearning approaches are feed-forward and backpropagation; while, the most successful unsupervised\nlearning approaches are the Hebbian and the competitive\nlearning rule.\n\n4. ADVANTAGES OF ANN IN SPACE\nAPPLICATIONS\nArtificial neural networks have many advantages in\nspace applications due to the following reasons [14]:\nGenerality: Usually, a space rover system is required to\nprocess a very high number of parameters that are variable,\ncomplex, and received from multiple sources. Neural\nnetworks can handle such large-scale problems as it is able\nto classify objects well even when the distribution of\nobjects in the N-dimensional parameter space is very\ncomplex.\nPerformance: Due to the nature of neural networks in\nexecuting in a parallel fashion, they can solve problems\nwith multiple constraints and large number of data\nelements at high-speed and simultaneously. Using parallel\ntechnology, rover systems can increase their\nresponsiveness and quickness in detecting, identifying,\nand handling new patterns behaviors.\nAdaptability: Due to the dynamic and always-evolving\nconditions and challenges in space exploration missions,\nspace rovers are always faced with new trends and patterns.\nNeural networks can cope with such circumstances as they\nare adaptable to unseen situations and have the capability\nto learn data, identify new patterns, and detect trends. A\nprocess that is too complex to be achieved by traditional\ncomputational techniques\nLow energy consumption: Commonly, rovers are\npowered by solar panels which generate energy from light\nand photons particles, and then store it into internal\nbatteries with limited lifetime and capacity. A supervisedtrained neural network often learns and adjusts its synaptic\nweights in offline mode; thus, relieving the rover from\ncarrying out insensitive mathematical computations at\nruntime and consequently reducing processing power,\nenergy, and power consumption.\nRobustness & Fault Tolerance: Since in a space\napplications a cosmic ray can be very destructive, it has\nhowever a little impact on neural networks as it can only\ndestroy a few of the neurons, but not the thousands and the\nmillions of neurons which would be able to compensate\n\n\fInternational Journal of Science and Technology (IJST), E-ISSN: 2224-3577, Vol. 2, No. 2, February, 2012\nhttp://ejournalofsciences.org/archive/vol2no2/vol2no2_6.pdf\n\nfor the damage, and therefore the output of the network\nwould not be significantly affected.\n\n6. THE PROPOSED NEURAL NETWORK\nMODEL\n\n5.\n\nThis paper proposes an artificial neural network (ANN)\nmodel for robotic planetary rover systems to accomplish\npath-planning on harsh and bumpy terrains. Its aim is to let\nthe rover vehicle navigates through and follows its\nintended goal location while avoiding collisions with\nobstacles, rocks, holes, and sharp slopes of arbitrary shape\nand size. The movement of the rover is fully autonomous\nas it is totally controlled by the neural network without\nany human assistance except when training the network in\noffline mode.\nThe proposed ANN is a three layers \"2-3-2\" network\ncomposed of an input, a hidden, and an output layer. The\ninput layer is made out of 2 input source nodes x and y\nwith two corresponding neurons which are physically fed\nby the rover's sensors. The hidden layer is made out of 3\nneurons which receive input data from the input layer and\nmultiply them by the values of the synaptic weights\ndenoted by Wij and then forward the resulted values to the\noutput layer. The output layer is made out of 2 neurons\nthat are directly linked to the rover's motors which control\nits movement and its mechanical operation.\nThe employed activation function is Sigmoid for the\nhidden neurons; whereas, it is linear for the output neurons.\nThe synaptic weights range from W00 to W13 and they\nrepresent the interconnection between the different\nneurons of the network. Additionally, two biases are\nemployed in the hidden and the output layers to regulate\nand limit the output of the network and they are denoted\nby bh and bo.\nFormally, the proposed neural network can be defined\nas follows:\nNN = { I, T, W, A } where I denotes the set of input\nnodes, T denotes the topology of the network including the\nnumber of layers and the number of their neurons, W\ndenotes the set of synaptic weights values, and A denotes\nthe activation function.\nI = {x, y}\nT ={ Lin-2, Lh0-3, Lout-2 }\nWLin = { W00, W01, W02, W10, W11, W12, W20, W21, W22 }\nWh0-3 = { W00, W01, W02, W03, W10, W11, W12, W13 }\nA = {1/1+e\u2013t , 1}\n\nRELATED WORK\n\nThere are a large variety of solutions already developed\nfor robotic rover systems that are based on artificial neural\nnetworks. Several of them are examined in this section:\n[15] proposed a neural network model for robust\ncontrol of space robots. The proposed ANN uses a radialbasis-function (RBF) to handle the various system\nuncertainties. Besides, the Lyapunov unsupervised\nlearning algorithm is used to train the network and adapt\nits parameters in online mode. [16] proposed an adaptive\napproach for controlling robot manipulators using neural\nnetworks. The controller is based on the Gaussian radialbasis-function (GRF) which is meant to provide uniformly\nstable adaptation and asymptotically tracking for the\nrobotic vehicle. The system features a robust controller to\novercome the neural network modeling errors and the\nbounded instabilities. [17] proposed a robust model for\nspace robots based on fuzzy neural network (FNN)\ncontroller. The tracking controller can attain very accurate\ngoals in the presence of uncertainties without using linear\nparameterization and fixed-base robot manipulators. [18]\nproposed a model for solving the wheel slip problem in\nspace rover exploration devices. The model employs a\nhigh fidelity traversability analysis (HFTA) algorithm with\npath and energy cost functions to predict and detect\npossible slips while the rover is moving. As a result, the\nrover can choose the best route via any given topography\nby avoiding high slip paths. [19] proposed an intelligent\nmodel for moving robots with translational and rotational\nmotion deployed in partially structured environment. The\nmodel is based on using two neural networks: The first\nnetwork is utilized to identify the open space using\nultrasound range finder data; while, the second network is\nutilized to identify a safe route for the robot to move\nacross while avoiding the nearby obstacles. [20] presented\nan advanced robotic architecture for the Rover Mars robot.\nThe system uses advanced infrared sensors coupled with\nan artificial neural network which is trained using a\nsupervised learning technique. The property of this model\nis that it uses evolutionary robotics techniques in which an\nevolvable threshold is used for the rover's sensors. Its\npurpose is to alter the activation range of infrared sensors\nin order to differentiate between rocks and holes from the\nnoise originating from landing terrain. The results were a\nsuccessful rover able of doing several autonomous\noperations. [21] proposed a neural network approach for\nrobotic systems based on the Jordan architecture. In this\napproach, the robot can learn at runtime the different\npatterns of the environment using an internal recurrent\nartificial neural network. The robot can predict through a\nseries of input sensors the different objects before it. It can\nthen generate navigation steps based on the output signal\nof the network that would drive the rover's motors devices.\n\nFigure 1 illustrates the architecture of the proposed\nANN.\n\nFigure 1: ANN architecture\n\n\fInternational Journal of Science and Technology (IJST), E-ISSN: 2224-3577, Vol. 2, No. 2, February, 2012\nhttp://ejournalofsciences.org/archive/vol2no2/vol2no2_6.pdf\n\nneuron) * (1-Output (this current hidden\nneuron)) * \u2211k errork * weight kj ]\n\n6.1 The Back-Propagation Algorithm\nThe proposed ANN model is trained through a\nsupervised learning approach using the back-propagation\nalgorithm [5]. The back-propagation algorithm comprises\ntwo passes: A forward pass which propagates the input\ndata in the forward direction from the input layer to output\nlayer of the network. The pass eventually ends up by\ngenerating an output value and computing an error value\nwhile leaving synaptic weights intact. In effect, the error is\ncalculated by subtracting the desired output from the\nactual output just generated. If the error is within an\nacceptable range, then the network is trained with new set\nof input data; otherwise, a backward pass is executed. The\nbackward pass is a reverse pass which propagates the error\nsignal backward through the network layers so as to\nupdate the synaptic weights of the network. The different\nsteps of the back-propagation algorithm can be\nsummarized as follows:\n1. Feed the network with an input vector and a\ncorresponding desired output vector.\n2. Calculate the output of the network using forward\npass.\n3. Calculate the output error signal.\n4. If error is within an acceptable range, move to the\nnext input vector, otherwise go backward and\nupdate the weights of the network.\n5. Keep repeating the above steps until all input\nvectors are consumed\nAdditionally, and in order to attain more accurate\nresults, the back-propagation algorithm was fine-tuned\nwith extra parameters whose purpose is to regulate and\nadd more accuracy to the learning process by shifting the\nactivation function to the left or to the right. The\ncontrolling parameters are listed below:\n\u2022 Biases: bh and bo\n\u2022 Learning Parameter: \u03b7\n\u2022 Momentum Alpha Parameter: \uf061\n6.2 Computing the Back-Propagation Algorithm\nComputationally, the proposed model is governed by\nthe following steps and mathematical equations:\n1. Perform the forward propagation and calculate\nthe output signal using (X1 * W1)+(X2 *\nW2)+...+(Xi * Wi)+...+ (Xn * Wn)\n2. Calculate the Sigmoid activation function (1 /\n1+e\u2013input) for the hidden neurons and the linear\nactivation function (y = v) for the output neurons.\n3. Calculate the error using error = desired output \u2013\nactual output\n4. Perform the back propagation algorithm using the\nfollowing equations to update the weights of the\nnetwork:\nCase1: For the output neurons:\nWeight (n+1) = Weight (n) +\n\uf061[\u0394Weight(n-1)] +\n(N * Output\n(previous neuron) * error)\nCase2: For hidden neurons:\nWeight (n+1) = Weight (n) +\n\uf061[\u0394Weight(n-1)] + [N * Output (previous\nneuron) * Output (this current hidden\n\n6.3 The Learning Process\nAlthough the back-propagation algorithm looks simple,\ncomputing it is quite an intensive task as it requires a\nseries of arithmetic operations executed for hundreds of\niterations. Below are the various calculations required to\ntrain the proposed network using the back-propagation\nalgorithm.\nInitial Weights:\nW00 = 0.17 ; W01 = 0.33 ; W02 = 0.1 ; W10 = 0.3 ; W11\n= 0.71 ; W12 = 0.21 ; W20 = 0.15 ; W21 = 0.43 ; W22 =\n0.69\nW00 = 0.11 ; W01 = 0.03 ; W02 = 0.52 ; W03 = 0.41 ; W10\n= 0.93 ; W11 = 0.14 ; W12 = 0.79 ; W13 = 0.66\nInput Vector: [0 , 0]\nDesired Output Vector: [1 , 1]\nLearning parameter: 0.25\nBiases: +1\nForward Pass:\nInput of h0: (0*0.17) + (0*0.33) + (1*0.1) = 0.1\nOutput of h0: 1/ 1+exp-0.1 = 0.524\nInput of h1: (0*0.3) + (0*0.71) + (1*0.21) = 0.21\nOutput of h1: 1/ 1+exp-0.21 = 0.552\nInput of h2: (0*0.15) + (0*0.43) + (1*0.69) = 0.69\nOutput of h2: 1/ 1+exp-0.69 = 0.665\nInput of O0: (output of h0 * 0.11) + (output of h1 * 0.03)\n+ (output of h2 * 0.52) + (1 * 0.41) = (0.524*0.11) +\n(0.552*0.03) + (0.665*0.52) + (1*0.41) = 0.05764 +\n0.01656 + 0.3458 + 0.41 = 0.83\nOutput of O0: 0.83 *1 = 0.83 (Linear activation\nFunction)\nInput of O1:\n= (0.524*0.93) + (0.552*0.14) +\n(0.665*0.79) + (1*0.66) = 0.48732 + 0.07728 +\n0.52535 + 0.66 = 1.74995\nOutput of O1: = 1.74995 * 1 = 1.74995 (Linear\nactivation Function)\nCalculating Error for O0: desired \u2013 actual = 1 - 0.83 =\n0.17\nCalculating Error for O1: desired \u2013 actual = 1 - 1.74994\n= 0. 74994\nBack Propagation:\nStarting with output Neuron \uf0e0 Case 1 in the algorithm\nFor W00: weight (new) = weight (old) + ( \u03b7 *\noutput(previous neuron) * error)= 0.11 + (0.25 * output\n(h0) * error (O0)) = 0.11 + (0.25 * 0.524*0.17) =\n0.13227\nFor W10: 0.93 + (0.25 * 0.524 * error (O1))= 0.93 +\n(0.25 * 0.524 * (-0.74994)) = 0.83176\n\n\fInternational Journal of Science and Technology (IJST), E-ISSN: 2224-3577, Vol. 2, No. 2, February, 2012\nhttp://ejournalofsciences.org/archive/vol2no2/vol2no2_6.pdf\n\nFor W01: 0.03 + (0.25 * output (h1) * error (O0))= 0.03\n+ (0.25 * 0.552* 0.17) = 0.05346\n.....etc\nNow dealing with the hidden Neurons \uf0e0 Case 2 in the\nalgorithm\nFor W00:\nWeight (new) = weight (old) + [\u03b7 *output (previous\nneuron) * output (this neuron) * (1 - output(this\nneuron)) * \u03a3k errork * weghtkj]\nWeight (n+1) = 0.17 + [0.25 * input x * output(h 0) *\n(1-output(h0)) * (error (O0) * W10 + error (O1) * W10)]\n= 0.17 + [0.25 * 0 * 0.524 * (1- 0.524)\n*((0.17*0.13227) + (-0.74994 * 0.83176)) = 0.17 + 0 =\n0.17 = W00(n+1)\n\nan obstacle was set along the x-axis preventing the rover\nfrom heading directly toward its destination goal in a\nstraight line. The test case was executed and it clearly\nrevealed that the rover was able to reach its goal location\nwithout passing through the introduced obstacle. In fact,\nthe rover followed two levels of routes. One ascending\nthat started from [x=0.8287 ; y=0.8287] and ended at\n[x=5.672 ; y=5.898], and one descending that started from\n[x=5.672 ; y=5.898] and ended at B[x=11.73 ; y=0], the\nactual goal location. Figure 3 graphically plots the passage\ntaken by the rover from its initial position A to its goal\nlocation B.\n\n.....etc\n\n7.\n\nIMPLEMENTATION\n\nThe proposed neural network model was implemented\nusing MS C#.NET 2008 with over 600 lines of code. It\nwas compiled under the MS Visual Studio 2008 and the\nMS .NET Framework 3.5. It encompasses a training\nengine that can be fed with various static and dynamic\nparameters including initial weights, input data, learning\nrate, momentum, and the number of epochs to execute.\nFigure 2 depicts the GUI interface of the training engine\nwhile executing the back-propagation algorithm to train\nthe neural network.\n\nFigure 3: Simulation for Path-Planning\n\nDue to the large code base behind the training engine\nand the rover simulation software, only the\nimplementation of the function responsible for performing\nthe backward pass of the back-propagation algorithm is\nlisted below:\nprivate void BackPropagation()\n{\n// Case 1: BACKPROPAGATION for OUTPUT NEURONS\ndouble learningRate = Convert.ToDouble(learningRateTextbox.Text.Trim());\ndouble momentum = Convert.ToDouble(momentumTextbox.Text.Trim());\nfor (int i = 0; i < matrix2.GetLength(0); i++)\n{\nfor (int j = 0; j < matrix2.GetLength(1); j++)\n{\nif (j < 3) // j<3 --> 3 hidden neurons\n{\n// Calculating \u0394W(n)\ndouble deltaWeight = (momentum * delta2[i, j]) + (learningRate *\noutputOfHiddenNeurons[j] * error[i]);\n// Calculating W(n+1)\nmatrix2[i, j] = matrix2[i, j] + deltaWeight;\n// Updating the \u0394W(n) matrix\ndelta2[i, j] = deltaWeight;\n}\nelse\n{\n// Calculating \u0394W(n)\ndouble deltaWeight = (momentum * delta2[i, j]) + (learningRate * bias *\nerror[i]);\n\nFigure 2: Training Engine for the Proposed ANN\n\nFurthermore, and in order to validate the proposed\nneural network, the rover vehicle was simulated using a\nsoftware model able to plot trajectories, plan for a certain\npath, and move towards its goal location.\nA sample test case was tested to verify if the rover is\nable to move from a given point A to a given point B\nwhile avoiding obstacles. A random point A was selected\nas the rover's initial position and is denoted by A[x=0 ;\ny=0]. Another point B was selected as the rover's goal\nlocation and is denoted by B[x=11.73 ; y=0]. Additionally,\n\n// Calculating W(n+1)\nmatrix2[i, j] = matrix2[i, j] + deltaWeight;\n// Updating the \u0394W(n) matrix\ndelta2[i, j] = deltaWeight;\n}\nif (traceON == true)\noutputTextbox.AppendText(\"matrix2[\" + i + \"][\" + j + \"] = \" + matrix2[i, j] + \" \");\n}\nif (traceON == true)\noutputTextbox.AppendText(\"\\r\\n\");\n}\nif (traceON == true)\noutputTextbox.AppendText(\"\\r\\n\\r\\n\");\n\n\fInternational Journal of Science and Technology (IJST), E-ISSN: 2224-3577, Vol. 2, No. 2, February, 2012\nhttp://ejournalofsciences.org/archive/vol2no2/vol2no2_6.pdf\n// Case 2: BACKPROPAGATION for HIDDEN NEURONS\nfor (int i = 0; i < matrix1.GetLength(0); i++)\n{\nfor (int j = 0; j < matrix1.GetLength(1); j++)\n{\n// Calculating \u0394W(n)\ndouble deltaWeight = (momentum * delta1[i, j]) + (learningRate * input[index, j] *\noutputOfHiddenNeurons[i] * (1 - outputOfHiddenNeurons[i]) * (error[0] *\nmatrix2[0, i] + error[1] * matrix2[1, i]));\n// Calculating W(n+1)\nmatrix1[i, j] = matrix1[i, j] + deltaWeight;\n// Updating the \u0394W(n) matrix\ndelta1[i, j] = deltaWeight;\nif (traceON == true)\noutputTextbox.AppendText(\"matrix1[\" + i + \"][\" + j + \"] = \" + matrix1[i, j] + \" \");\n}\nif (traceON == true)\noutputTextbox.AppendText(\"\\r\\n\");\n}\n}\n\n8.\n\nCONCLUSIONS & FUTURE WORK\n\nThis paper presented an artificial neural network model\nfor robotic rover systems to perform autonomous pathplanning during space exploration missions. The proposed\nANN is a three-layer network composed of three layers: an\ninput, a hidden, and an output layer. The network is\ntrained through a supervised learning approach using the\nback-propagation algorithm. The purpose of the model is\nto control the movement of space rovers allowing them to\ntravel across planetary surfaces while avoiding obstacles\nin a complete autonomous manner. Experiments\nconducted showed that a software-simulated rover was\nable to avoid collision with obstacles and reached its goal\nlocation through the safe and correct trajectory.\nAs future work, the back-propagation algorithm, used\nin training the proposed network, is to be parallelized so as\nto take advantage of parallel and distributed computing\nplatforms and speed-up the execution time of the training\nprocess.\n\n[6]\n\nMars Exploration Rover, NASA Facts, National\nAeronautics and Space Administration, Jet Propulsion\nLaboratory, California Institute of Technology Pasadena,\n2004.\n\n[7]\n\nSarah Loff, NASA's Space Exploration Vehicle (SEV),\nNASA Official: Rocky Lind, 2011.\n\n[8]\n\nAmy Svitak, \"Cost of NASA's Next Mars Rover Hits\nNearly $2.5 Billion.\", 2011, http://www.space.com/10762nasa-mars-rover-overbudget.html\n\n[9]\n\nWesley T. Huntress JR., Mikhail Ya Marov, Soviet Robots\nin the Solar System: Mission Technologies and Discoveries,\nSpringer, 2011.\n\n[10] Jun Wang, Xiaofeng Liao, Zhang Yi, \"Advances in Neural\nNetworks\", Second International Symposium on Neural\nNetworks, Chongqing, China, 2005.\n[11] Simon Haykin, Neural Networks: A Comprehensive\nFoundation, Prentice Hall, 2 ed, 1998.\n[12] Simon Haykin, Neural Networks and Learning Machines,\n3rd ed., Prentice Hall, 2008.\n[13] Sotiris B. Kotsiantis, \"Supervised Machine Learning: A\nReview of Classification Techniques\", Informatica, Vol.\n31, No. 3, pp. 249-268, 2007.\n[14] Martin Anthony, Peter L. Bartlett, Neural Network\nLearning: Theoretical Foundations, Cambridge University\nPress, 2009.\n[15] Baomin Feng, Guangcheng Ma, Weinan Xie, Changhong\nWang, \"Robust tracking control of space robot via neural\nnetwork\", 1st International Symposium on Systems and\nControl in Aerospace and Astronautics, 2006.\n[16] Shuzhi S. Ge Hang, C.C. Woon, L.C., \"Adaptive neural\nnetwork control of robot manipulators in task space\", IEEE\nTransactions on Industrial Electronics, 1997.\n[17] Changhong Wang,Baomin Feng, Guangcheng Ma, Chuang\nMa, \"Robust tracking control of space robots using fuzzy\nneural network\", IEEE International Symposium on\nComputational Intelligence in Robotics and Automation,\n2005.\n\nACKNOWLEDGMENTS\n\n[18] Livianu, Mathew Joseph, \"Human-in-the-loop neural\nnetwork control of a planetary rover on harsh terrain\",\nThesis, Georgia Institute of Technology, 2008.\n\nThis research was funded by the Lebanese Association\nfor Computational Sciences (LACSC), Beirut, Lebanon,\nunder the \"Service Oriented Architecture Robotics\nResearch Project \u2013 SOARRP2012\".\n\n[19] Danica Janglov\u00e1, \"Neural Networks in Mobile Robot\nMotion\", International Journal of Advanced Robotic\nSystems, Vol. 1, No 1, pp. 15-22, 2004.\n\nREFERENCES\n[1]\n\nAmel Zerigui, Xiang Wu, Zong-Quan Deng, \"A Survey of\nRover Control Systems\", International Journal of\nComputer Sciences and Engineering Systems, Vol. 1, No. 4,\npp. 105-109, 2007.\n\n[2]\n\nRoland Siegwart, Illah R. Nourbakhsh, Davide\nScaramuzza, Introduction to Autonomous Mobile Robots,\n2nd ed, The MIT Press, 2011.\n\n[3]\n\nJean-Claude Latombe, Robot Motion Planning, Kluwer\nAcademic Publishers, 1991.\n\n[4]\n\nChowdhury, F.N., Wahi, P., Raina, R., Kaminedi, S., \"A\nsurvey of neural networks applications in automatic\ncontrol\", Proceedings of the 33rd Southeastern Symposium\non System Theory, 2001.\n\n[5]\n\nPaul J. Werbos, Beyond Regression: New Tools for\nPrediction and Analysis in the Behavioral Sciences, PhD\nthesis, Harvard University, 1974.\n\n[20] Martin Peniak, Davide Marocco, Angelo Cangelosi,\n\"Autonomous Robot Exploration Of Unknown Terrain: A\nPreliminary Model Of Mars Rover Robot\", In Proceedings\nof 10th ESA Workshop on Advanced Space Technologies\nfor Robotics and Automation, Noordwijk, The Netherlands,\n2008.\n[21] Tani.J, \"Model-based Learning for Mobile Robot\nNavigation from the Dynamical Systems Perspective\",\nIEEE Trans. on Syst., Man and Cyb., Vol. 26, No.3, pp.\n421-436, 1996.\n\n\f"}