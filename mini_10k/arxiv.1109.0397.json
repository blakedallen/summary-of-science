{"id": "http://arxiv.org/abs/1109.0397v2", "guidislink": true, "updated": "2014-07-30T12:22:44Z", "updated_parsed": [2014, 7, 30, 12, 22, 44, 2, 211, 0], "published": "2011-09-02T10:08:38Z", "published_parsed": [2011, 9, 2, 10, 8, 38, 4, 245, 0], "title": "Auction-Based Resource Allocation in Digital Ecosystems", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1109.0854%2C1109.4892%2C1109.3141%2C1109.2375%2C1109.1573%2C1109.3170%2C1109.5390%2C1109.2752%2C1109.0982%2C1109.2484%2C1109.3631%2C1109.6830%2C1109.5553%2C1109.6422%2C1109.0292%2C1109.5048%2C1109.3562%2C1109.3769%2C1109.0909%2C1109.6100%2C1109.4445%2C1109.5600%2C1109.4089%2C1109.0822%2C1109.2033%2C1109.4196%2C1109.5865%2C1109.6275%2C1109.0750%2C1109.5629%2C1109.1217%2C1109.1446%2C1109.0067%2C1109.5449%2C1109.6690%2C1109.6790%2C1109.1381%2C1109.2179%2C1109.3866%2C1109.4158%2C1109.3282%2C1109.3429%2C1109.1963%2C1109.1837%2C1109.0011%2C1109.4023%2C1109.6918%2C1109.1599%2C1109.2951%2C1109.1628%2C1109.3731%2C1109.5162%2C1109.0063%2C1109.2531%2C1109.3665%2C1109.2775%2C1109.4154%2C1109.4656%2C1109.2280%2C1109.1854%2C1109.5220%2C1109.3441%2C1109.3223%2C1109.6414%2C1109.2863%2C1109.0405%2C1109.0397%2C1109.1193%2C1109.2847%2C1109.4456%2C1109.4638%2C1109.0168%2C1109.2198%2C1109.2488%2C1109.0243%2C1109.3659%2C1109.0680%2C1109.6302%2C1109.5464%2C1109.0529%2C1109.5205%2C1109.5912%2C1109.1567%2C1109.0159%2C1109.4277%2C1109.5497%2C1109.0320%2C1109.0779%2C1109.6292%2C1109.4765%2C1109.0608%2C1109.3474%2C1109.5091%2C1109.2128%2C1109.2785%2C1109.2417%2C1109.6716%2C1109.1540%2C1109.0938%2C1109.0703%2C1109.1685&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Auction-Based Resource Allocation in Digital Ecosystems"}, "summary": "The proliferation of portable devices (PDAs, smartphones, digital multimedia\nplayers, and so forth) allows mobile users to carry around a pool of computing,\nstorage and communication resources. Sharing these resources with other users\n(\"Digital Organisms\" -- DOs) opens the door to novel interesting scenarios,\nwhere people trade resources to allow the execution, anytime and anywhere, of\napplications that require a mix of capabilities. In this paper we present a\nfully distributed approach for resource sharing among multiple devices owned by\ndifferent mobile users. Our scheme enables DOs to trade computing/networking\nfacilities through an auction-based mechanism, without the need of a central\ncontrol. We use a set of numerical experiments to compare our approach with an\noptimal (centralized) allocation strategy that, given the set of resource\ndemands and offers, maximizes the number of matches. Results confirm the\neffectiveness of our approach since it produces a fair allocation of resources\nwith low computational cost, providing DOs with the means to form an altruistic\ndigital ecosystem.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1109.0854%2C1109.4892%2C1109.3141%2C1109.2375%2C1109.1573%2C1109.3170%2C1109.5390%2C1109.2752%2C1109.0982%2C1109.2484%2C1109.3631%2C1109.6830%2C1109.5553%2C1109.6422%2C1109.0292%2C1109.5048%2C1109.3562%2C1109.3769%2C1109.0909%2C1109.6100%2C1109.4445%2C1109.5600%2C1109.4089%2C1109.0822%2C1109.2033%2C1109.4196%2C1109.5865%2C1109.6275%2C1109.0750%2C1109.5629%2C1109.1217%2C1109.1446%2C1109.0067%2C1109.5449%2C1109.6690%2C1109.6790%2C1109.1381%2C1109.2179%2C1109.3866%2C1109.4158%2C1109.3282%2C1109.3429%2C1109.1963%2C1109.1837%2C1109.0011%2C1109.4023%2C1109.6918%2C1109.1599%2C1109.2951%2C1109.1628%2C1109.3731%2C1109.5162%2C1109.0063%2C1109.2531%2C1109.3665%2C1109.2775%2C1109.4154%2C1109.4656%2C1109.2280%2C1109.1854%2C1109.5220%2C1109.3441%2C1109.3223%2C1109.6414%2C1109.2863%2C1109.0405%2C1109.0397%2C1109.1193%2C1109.2847%2C1109.4456%2C1109.4638%2C1109.0168%2C1109.2198%2C1109.2488%2C1109.0243%2C1109.3659%2C1109.0680%2C1109.6302%2C1109.5464%2C1109.0529%2C1109.5205%2C1109.5912%2C1109.1567%2C1109.0159%2C1109.4277%2C1109.5497%2C1109.0320%2C1109.0779%2C1109.6292%2C1109.4765%2C1109.0608%2C1109.3474%2C1109.5091%2C1109.2128%2C1109.2785%2C1109.2417%2C1109.6716%2C1109.1540%2C1109.0938%2C1109.0703%2C1109.1685&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The proliferation of portable devices (PDAs, smartphones, digital multimedia\nplayers, and so forth) allows mobile users to carry around a pool of computing,\nstorage and communication resources. Sharing these resources with other users\n(\"Digital Organisms\" -- DOs) opens the door to novel interesting scenarios,\nwhere people trade resources to allow the execution, anytime and anywhere, of\napplications that require a mix of capabilities. In this paper we present a\nfully distributed approach for resource sharing among multiple devices owned by\ndifferent mobile users. Our scheme enables DOs to trade computing/networking\nfacilities through an auction-based mechanism, without the need of a central\ncontrol. We use a set of numerical experiments to compare our approach with an\noptimal (centralized) allocation strategy that, given the set of resource\ndemands and offers, maximizes the number of matches. Results confirm the\neffectiveness of our approach since it produces a fair allocation of resources\nwith low computational cost, providing DOs with the means to form an altruistic\ndigital ecosystem."}, "authors": ["Moreno Marzolla", "Stefano Ferretti", "Gabriele D'Angelo"], "author_detail": {"name": "Gabriele D'Angelo"}, "author": "Gabriele D'Angelo", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1109/Mobilware.2013.16", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1109.0397v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1109.0397v2", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "Proceedings of the 6th International Conference on MOBILe Wireless\n  MiddleWARE, Operating Systems, and Applications (MobilWare 2013). Bologna,\n  Italy, November 11-12, 2013", "arxiv_primary_category": {"term": "cs.DC", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DC", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "C.2.4; H.m", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1109.0397v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1109.0397v2", "journal_reference": null, "doi": "10.1109/Mobilware.2013.16", "fulltext": "Auction-Based Resource Allocation in Digital Ecosystems\n\n\u2217\n\nMoreno Marzolla\nmarzolla@cs.unibo.it\n\nStefano Ferretti\nsferrett@cs.unibo.it\n\nGabriele D'Angelo\ng.dangelo@unibo.it\n\narXiv:1109.0397v2 [cs.DC] 30 Jul 2014\n\nDipartimento di Scienze dell'Informazione\nUniversit\u00e0 di Bologna\nMura A. Zamboni 7, I-40127 Bologna, Italy\n\nABSTRACT\nThe proliferation of portable devices (PDAs, smartphones,\ndigital multimedia players, and so forth) allows mobile users\nto carry around a pool of computing, storage and communication resources. Sharing these resources with other users\n(\"Digital Organisms\" \u2013 DOs) opens the door to novel interesting scenarios, where people trade resources to allow the\nexecution, anytime and anywhere, of applications that require a mix of capabilities. In this paper we present a fully\ndistributed approach for resource sharing among multiple\ndevices owned by different mobile users. Our scheme enables DOs to trade computing/networking facilities through\nan auction-based mechanism, without the need of a central\ncontrol. We use a set of numerical experiments to compare our approach with an optimal (centralized) allocation\nstrategy that, given the set of resource demands and offers,\nmaximizes the number of matches. Results confirm the effectiveness of our approach since it produces a fair allocation of\nresources with low computational cost, providing DOs with\nthe means to form an altruistic digital ecosystem.\n\nCategories and Subject Descriptors\nC.2.4 [Computer-Communication Networks]: Distributed\nSystems; H.m [Information Systems]: Miscellaneous\n\nKeywords\nResource Allocation, Optimization, Peer-to-Peer Systems,\nAd-hoc Networks\n\n1.\n\nINTRODUCTION\n\nMobile users are evolving: while in the recent past people used their mobile devices just for \"simple\" tasks such as\nchecking e-mail or browsing the Web, the rise of novel social applications fosters a massive use of ubiquitous services.\nCurrent Operating Systems for mobile devices (e.g., Android, iOS) allow the execution of applications that, for instance, publish user's geographical position and other contextaware information on social networking services. However,\n0\nThe publisher version of this paper is available at\nhttp://dx.doi.org/10.1109/Mobilware.2013.16. Please\ncite this paper as: Moreno Marzolla, Stefano Ferretti, Gabriele D'Angelo. Auction-Based Resource\nAllocation in Digital Ecosystems. Proceedings of\nthe 6th International Conference on MOBILe Wireless MiddleWARE, Operating Systems, and Applications (MobilWare 2013), Bologna (Italy), November, 2013.\n\nthese forms of interaction are usually based on the classic\nclient-server approach, i.e., the mobile device connects to a\ncentral service through its own Internet connection. The\nproliferation of heterogeneous devices with different capabilities (computation, communication, data storage, sensors\nand actuators) gives rise to new scenarios that promote the\ncooperation among individuals in order to guarantee the provision of \"always on\" services [6].\nAs an example, consider a medical doctor who receives an\nurgent call while attending a meeting with other colleagues.\nHe needs to check some medical data to diagnose a particular\nillness; unfortunately, the tablet PC he carried with him has\nnot enough memory and computational power to execute\nthe job. Therefore, he \"rents\" CPU power from one of his\ncolleagues high-end laptop to carry on the analysis.\nAs another example, consider a user that wants to upload\nsome pictures made with her smart-phone/camera on Flickr\nor on the wall of her social Web application, but she is not\nprovided with network connectivity. Hence she exploits the\n3G mobile connection of a neighboring friend using that as\na gateway to the net via an ad-hoc short range connection\n(e.g., Bluetooth).\nIn general, mobile users have many different devices in\ntheir pockets and suitcase, each of them with specific hardware and software characteristics. Quite often such devices\nare not enabled for seamless interaction with other devices\nbelonging to the same owner; sharing resources among different people is even more challenging. The possibility for a\nuser to exploit, in a Peer-to-Peer (P2P) and altruistic way,\ncomputing facilities owned by (known and trusted) neighbors requires mechanisms for automatic service discovery\nand negotiation, and for access control.\nA system architecture supporting the scenarios above has\nbeen recently proposed [6]. Each mobile user is considered\nas a \"digital organism\" (DO), composed by many different devices belonging to the same human being. Each DO\nmay share resources with peer DOs using auto-configuration\nstrategies. Then, a community of interacting DOs can be\nthought of as a \"digital ecosystem\". Each DO in the ecosystem contributes by providing its own unused resources to\nits (friend/trusted) neighbors. Therefore, the community of\nDOs exploits self-organization protocols and P2P strategies\nto create a cooperating, altruistic ecosystem.\nOf course, privacy and security issues should be carefully\nconsidered, especially if data are to be distributed to other\nusers. Addressing these issues in a mobile environment is\nhighly nontrivial, especially when the remote nodes are completely untrusted. Therefore, we assume that each DO will\n\n\fpreferably connect to other DOs towards which there is explicit trust (e.g., because users know each other). For example, a user traveling by train shall be willing to share a\nnetwork connection with some (known and trusted) traveling companions.\nIn this paper we address the problem of optimizing the allocation of resources in a digital ecosystem, by matching resource requests and offers. We consider a P2P overlay which\nconnects DOs; each DO may offer and/or require resources,\nwhich are traded with neighboring DOs. We present a fully\ndistributed scheme that can match demands and offers, allowing resources to be provisioned efficiently and fairly. We\nuse a market-based approach in which requests are handled\nthrough ascending clock auctions [1]. We assume that each\nDO can use some form of \"virtual currency\" (tokens) as a\nform of payment for resources usage: this allows a fair allocation that balances supply and demand [15, 21]. First,\nwe describe a distributed algorithm to carry on the auction; then, we formulate the resource allocation problem as\na Mixed Integer Programming (MIP) optimization problem,\nwhich is used to compute the maximum number of requests\nthat can be matched. We compare the optimal allocation\nwith the one provided by our our cheap, local strategy. Results show that our approach produces good allocations and\nrequires low computational cost: this makes the auctionbased allocation strategy particularly appropriate for sharing resources among devices with very limited computational\npower.\nThe rest of this paper is organized as follows. In Section 2\nwe give a precise formulation of the problem we are addressing. Section 3 presents our auction-based resource allocation\nscheme. In Section 4 we discuss numerical results obtained\nfrom a set of synthetic simulation experiments. In Section 5\nwe revise the literature and contrast our approach with some\nrelated work. Finally, concluding remarks are provided in\nSection 6. Additional details on the auction algorithm, and\nthe MIP formulation of the optimization problem, are given\nin the Appendix.\n\n2.\n\nPROBLEM FORMULATION\n\nWe consider a set R = {1, . . . , R} of R different resource\ntypes (e.g., network connectivity, processing power, storage,\nand so on). N = {1, . . . , N } denotes a set of N users trading these resources: each user can be either a buyer (if he\nrequests resources) or a seller (if he offers resources). The\nsame user may play the role of buyer and seller at the same\ntime, offering surplus resources while buying those he needs.\nFor each user i \u2208 N, we denote with Req ri the amount of\ntype r resource requested by i; for each j \u2208 N, we denote\nwith Off rj the amount of type r resource offered by j; quantities are not restricted to be integer. The vectors Req \u2022i and\nOff \u2022j are called resource bundles 1 .\nAs an example, if there are two resource types (\"CPU\" and\n\"Network Bandwidth\"), then a resource bundle (0.1 MIPS,\n200 KB/s) can be interpreted as a request (or an offer) for\n0.1 MIPS of CPU power and 200 KB/s of network bandwidth. Unit of measures will be omitted in the following.\nWe assume that each user (node) is equipped with some\nform of wireless connectivity which enables short range in1\n\nWe use the symbol \u2022 as a shortcut to denote a slice of a\nmulti-dimensional vector; therefore, Req \u2022i denotes the slice\n(Req 1i , Req 2i , . . . , Req Ri )\n\nN :=\nR :=\nReq ri :=\nOff rj :=\nRP i :=\nSP rj :=\nMij :=\nXirj :=\n\n{1, . . . , N } set of users\n{1, . . . , R} set of resource types\nAmount of resource r requested by user i\nAmount of resource r offered by user j\nReserve price of buyer i: maximum amount\ni is willing to pay for his requested bundle\nUnitary selling price of resource r offered by\nuser j\n1 iff i can interact with j\n1 iff i obtains resource type r from j\n\nTable 1: Notation used in this paper\nteraction with a set of neighbors using an ad-hoc network\ntopology. We model this with an N \u00d7 N adjacency matrix\nMij , where users i and j can interact iff Mij = Mji = 1;\nmatrix Mij is symmetric, so that interactions are always\nbidirectional.\nEach user can get resources from, or provide resources to,\none of his direct neighbors; multi-hop interactions are not\nallowed. Multi-hop interactions would be much harder to\nhandle, since appropriate routing strategies should be employed to ensure connectivity in spite of individual users\nmoving and losing contact with neighbors. We introduce\nthe binary decision variable Xirj which equals 1 iff user i\nobtains resource r from user j. If Xirj = 1, then i must obtain exactly Req ri items of resource r from j. The allocation\nXirj must satisfy the following constraints:\n1. Each buyer i must obtain the requested quantities Req ri\nof all resources r in his bundle, or none at all. Partially\nfulfilled requests are not allowed.\n2. For each r, the requested quantity Req ri must be provided by a single seller j (if the request is satisfied at\nall).\n3. For each r, the offered quantity Off rj can be fractioned\nacross multiple buyers (i.e., a seller is not forced to\nprovide all items of resource r to a single buyer).\n4. If user i gets resource r from j, then the amount requested by i must not exceed the amount offered by j:\nReq ri \u2264 Off rj .\nP\n5. For all r \u2208 R,\ni\u2208N Req ri Xirj \u2264 Off rj , where the\nleft-hand side represents the total amount of resource r\nprovided by seller j. This means that the total amount\nof resource r provided by j to all buyers must not exceed his capacity.\n6. Xirj can be 1 only if Mij = 1: interactions are only\nallowed between neighbors.\nThe notation used in this paper is summarized in Table 1\n(additional symbols shown in the table will be introduced in\nthe next section).\nThe problem of finding an optimal allocation Xirj which\nmaximizes the number of matched requests (i.e., maximizing\nthe number of requests which can be satisfied by some seller)\ncan be formulated as a MIP optimization problem (details\nare given in Appendix B). However, solving the optimization\nproblem is impractical for several reasons: (i) global knowledge of all parameters is required, whereas each peer has\n\n\fFigure 1: Auction-based resource allocation\nonly local knowledge; (ii) solving large instances of the optimization problem using general-purpose MIP solvers is time\ncosuming; (iii) the optimal allocation may not even be desirable, since the constraints above do not take into account\nany measure of fairness between users. The lack of fairness\nis a particularly serious limitation, since it gives users no\nincentive to share their resources. While it would be possible to extend the optimization problem to take fairness into\naccount, the other limitations would still apply.\nIn the next section we propose a distributed algorithm\nfor binding resource requests with resource availability; our\nalgorithm is fully decentralized and uses an economic model\nbased on ascending auctions; \"virtual currency\" is used to\ncompensate transactions and stop free riders.\n\n3.\n\nAUCTION-BASED RESOURCE ALLOCATION\n\nWe propose a fully distributed algorithm to compute a fair\nallocation of the resources offered by sellers. The algorithm\nis lightweight and fully decentralized, since it will be executed on portable devices (smartphones, PDAs, notebooks)\nconnected through an ad-hoc network infrastructure.\nOur algorithm is based on ascending clock auctions [1];\nin this type of auctions, the auctioneer defines the price of\ngoods, and the bidders reply with the quantities they want\nto buy. In case of excess demand, the auctioneer raises the\nprice and calls for new bids. This mechanism is iterated\nuntil there is no excess demand. Successful bidders pay the\nlast announced price. In our scenario, each seller engages an\nauction with all potential buyers and adjusts the resource\nprices independently of other sellers.\nResource allocation works as a sequence of steps, as depicted in Figure 1. Each step is divided into three phases.\nDuring the auction phase, all users engage an auction which\nconsists of multiple rounds; during each round, sellers broadcast the unitary prices and quantities of the resources they\noffer, and potential buyers place bids. The sellers which receive excess demand raise the selling price and start a new\nround. At the end of the auction, successful buyers pay their\ndues to the sellers and can access the provided resources. At\nthis point, usage is granted for some amount of time, after\nwhich a new step is initiated.\nEach user has some amount of virtual currency (tokens),\nwhich can be spent to acquire resources provided by other\npeers, or earned by selling access to his resources. In the\nfollowing we assume that an adequate scheme exists to employ virtual concurrency; dealing with the details is out of\nthe scope of this paper, since several proposals exist such as\nthose described in [18, 20, 24, 25].\n\nEach node i autonomously computes a slice of the allocation matrix Xirj , i.e., decides from which sellers to buy\nthe resources in his request bundle. Each\n\u0001 seller j broadcasts\nthe vector Off \u2022i = Off 1j , . . . , Off Rj of the amounts of\nresources offered, together with the unitary selling prices\nSP \u2022j = (SP 1j , . . . , SP Rj ). Each seller can define initial\nprices at the beginning of an auction phase; such prices are\ncalled reserve prices, and represent the minimum prices at\nwhich a seller is willing to offer his resources.\nEach buyer i can place bids to all sellers j in his neighborhood from which he wants to acquire resources. A bid is a Rdimensional vector with elements Req ri Xirj . Each element\nof the bid is a proposal to acquire Req ri Xirj items of resource\nr from seller j at the unitary price SP rj . Buyer i places a\nbid for resource r of j provided that (i) Off rj \u2265 Req ri (the\namount requested does not exceed the amount offered), and\n(ii) the unitary price SP rj of seller j is the minimum over\nall potential sellers. Each buyer i tries to acquire resource r\nfrom the seller providing a sufficient quantity, at the lower\nprice.\nSince there is a finite amount of each resource type, it\nis necessary to handle the situation in which the demand\nis larger than the supply provided by a seller. We employ\na mechanism based on ascending auctions, which eventually produces an allocation Xirj satisfying the constraints\ndescribed in Section 2.\nIf all bids placed by i were to be accepted from the sellers,\nthe total cost for the buyer would be\nXX\nSP rj Req ri Xirj\nr\u2208R j\u2208N\n\nEach buyer i has a maximum reserve price RP i , which represents the total maximum amount of money he is willing\nto spend for the bundle Req \u2022i 2 . Buyer i places bids as long\nas the cost (3) is not greater than his reserve price RP i .\nEach seller j collects all bids he receives, and replies back\nto the buyers with\n\u0001 a new vector of (possibly updated) prices\nSP \u20321j , . . . , SP \u2032Rj , where:\n(\nP\nSP rj\nif i\u2208N Req rj Xirj \u2264 Off rj\nSP \u2032rj =\nSP rj + \u2206P otherwise\nThis means that j increases the price by some quantity \u2206P\nof each resource r for which there is excess demand. Potential buyers who placed bids resulting in excess demands\nmust either issue a new bid at the new prices, or give up.\nThe pseudo-code of the seller and buyer algorithms are given\nin Appendix A.\nFigure 2 shows a simple example with N = 4 nodes and\nR = 2 resource types. Nodes 1 and 2 are buyers, and can\ninteract with sellers {3, 4}, and 4 respectively. The amounts\nof resources requested or offered is shown next to each node:\nfor example, node 1 requests 3 items of resource 1 and 5\nitems of resource 2.\nAfter the sellers broadcast the offered quantities and selling prices (in this case, unitary prices are initially set to\n1), buyers make their initial bids (Figure 2(a)). Specifically,\nuser 1 requests 3 items of resource 1 to user 3, and 5 items\nof resource 2 to user 4. User 2 requests 2 items of resource\n1 and 10 items of resource 2 to user 4. If all bids were\naccepted, both nodes 1 and 2 would spend $8.\n2\nNote that the meaning of reserve price is different for buyers and sellers.\n\n\fMatches\nN\n\nR\n\nAuction\n\nOptimal\n\nAuction/Optimal\n\n10\n20\n50\n\n3\n3\n3\n\n14.60 \u00b1 1.48\n46.10 \u00b1 2.33\n162.50 \u00b1 4.55\n\n14.70 \u00b1 1.45\n47.80 \u00b1 2.41\n172.50 \u00b1 3.14\n\n0.99\n0.96\n0.94\n\n10\n20\n50\n\n5\n5\n5\n\n10.40 \u00b1 1.07\n33.50 \u00b1 2.93\n149.80 \u00b1 4.44\n\n10.40 \u00b1 1.07\n34.10 \u00b1 3.12\n161.20 \u00b1 2.58\n\n1.00\n0.98\n0.93\n\n10\n20\n50\n\n7\n7\n7\n\n6.30 \u00b1 1.64\n26.40 \u00b1 3.30\n126.80 \u00b1 6.41\n\n6.30 \u00b1 1.64\n27.80 \u00b1 3.50\n141.70 \u00b1 5.38\n\n1.00\n0.95\n0.89\n\nTable 2: Number of matches (higher is better).\n200\n\nNumber of matches\n\nAuction\nOptimal\n\nFigure 2: Example of resource allocation through\nascending auction\n\n150\n\n100\n\n50\n\n0\n10 / 3\n\nAccording to the bids above, user 4 has excess demand\non resource 2 since 11 items are requested but only 10 are\navailable. Therefore, node 4 increases the unitary price of\nresource 2 to $2 (we use \u2206P = $1); seller 3 has no excess\ndemand, so he replies with the same unitary prices (Figure 2(b)).\nWith the new prices, the bundle requested by user 1 would\ncost $3 \u00d7 1 + $2 \u00d7 5 = $13 (which is below the reserve price\nRP 1 = $15), and the requested bundle of user 2 would cost\n$14, which is above the reserve price RP 2 = $10. Therefore,\nuser 2 gives up, while user 1 resubmit his bids (Figure 2(c)).\nSince there is no excess demands, the auction ends and user\n1 can finally acquire his bundle (Figure 2(d)).\n\n4.\n\nEXPERIMENTAL EVALUATION\n\nIn this section we analyze the performance of the auctionbased resource allocation algorithm using a set of numerical experiments. We consider different network sizes (with\nN = 10, 20, 50 users, respectively) and different numbers of\nresource types (R = 3, 5, 7). For each combination of N\nand R we perform T = 10 allocation steps. Each step involves the definition of requested and offered bundles (see\nbelow), and running an auction to match them. At the\nvery beginning, each user is given a budget of 100 tokens;\nfurthermore, before starting each step several initializations\nare performed, as follows.\nFirst, we generate a random network with link density\n0.3 (this means that on average, 30% of the elements of the\nadjacency matrix Mij are nonzero). 20% of the users are\nrandomly assigned the role of pure buyers (the offered bundles are set to zero), while the others are pure sellers (the\nrequested bundles are set to zero). Each user is also assigned\na random demand or offer vector: the number of items of\neach resource type that are offered/requested are drawn with\n\n20 / 3\n\n50 / 3\n\n10 / 5\n\n20 / 5\n\n50 / 5\n\n10 / 7\n\n20 / 7\n\n50 / 7\n\nUsers (N) / Resource Types (R)\n\nFigure 3: Performance results: number of matches\n(higher is better)\n\nuniform probability from the discrete set {1, 2, . . . , 10}. The\ninitial reserve prices for sellers are set to 1, and the price\nincrement\nP is \u2206P = 1. The reserve price for buyer i is set\nto\n\u01eb\n\u00d7\ni\nr\u2208R Req ri , where \u01ebi is uniformly chosen in [1.5, 2];\nP\nr\u2208R Req ri is the cost of bundle Req \u2022i when all items have\nunitary cost. With the setup above we ensure that each\nnode has sufficient liquidity to satisfy requests for resources,\nsince each user will act most of the time as seller. In order\nto cope with statistical fluctuations, we executed 20 independent replications of each sequence of T steps; at the end\nof all replications, average values and confidence intervals at\n(1 \u2212 \u03b1) = 0.9 confidence level are computed.\n\nNumber of matches. We first analyze the total number of\nmatches, i.e., the total number of requests which can be\nsatisfied at the end of the sequence of T allocation steps.\nWe compare the value obtained using the auction with the\noptimal value obtained by matching requests using the MIP\nproblem on Appendix B; the optimization problem has been\nsolved using GLPK [16].\nRaw results are reported in Table 2. The column labeled\n\"Auction\" shows the total number of matches at the end of\nthe T auctions, computed with the ascending auction algorithm proposed in this paper. Column labeled \"Optimal\"\nshows the maximum number of matches computed using the\noptimization problem. The results has been plotted in Figure 3): we can see that the number of matches produced\nby the auction algorithm is only slightly less than the optimum value. It is important to report that for the larger\n\n\fAfter 5 steps\n\nMatches\n\nNumber of users\n\n12\n\nDensity\n\nAuction\n\nOptimal\n\nPrice\n\nMax Iter.\n\n0.20\n0.40\n0.60\n0.80\n\n103.40 \u00b1 4.96\n141.00 \u00b1 3.98\n132.30 \u00b1 3.21\n89.60 \u00b1 2.78\n\n113.70 \u00b1 4.14\n165.60 \u00b1 3.27\n183.60 \u00b1 1.82\n190.40 \u00b1 1.57\n\n1.07\n1.15\n1.28\n1.48\n\n6\n18\n29\n56\n\n10\n8\n6\n4\n2\n0\n0\n\n20\n\n40\n\n60\n\n80\n\n100\n\n120\n\n140\n\n160\n\nAfter 10 steps\n\nTable 3: Number of matches for different connection\ndensities; N = 50, R = 7\n200\nAuction\nOptimal\n\n10\n8\n6\n4\n2\n0\n0\n\n20\n\n40\n\n60\n\n80\n\n100\n\n120\n\n140\n\n160\n\nNumber of matches\n\nNumber of users\n\n12\n\n150\n\n100\n\n50\n\nBudget\n\nFigure 4: Distribution of users budget, after 5 simulation steps (top) and at the end of the simulation\n(bottom); N = 50, R = 7\n\n0\n0.20\n\n0.40\n\n0.60\n\n0.80\n\nDensity of connections (\u03c1)\n\nFigure 5: Number of matches for different connection densities; N = 50, R = 7\nsystems (N = 50, R = 7), GLPK required up to 10s to\ncompute the optimal allocation (we used GLPK v4.45 on\nan AMD Athlon 64 X2 3800+ Dual Core Processor with\n4 GB of RAM running Linux 2.6.32). The auction, implemented as a script in GNU Octave 3.2.3 [11], consistently\nrequires less than a second on the same platform. We recall\nthat the mechanism works on resource-constrained mobile\ndevices composing DOs; hence, it is important to reduce as\nmuch as possible the overhead to perform the allocation. In\npractice we should expect some slowdown due to requestresponse messages sent through wireless links.\nWe show in Figure 4 rhe distribution of the users budget\nafter 5 steps, and at the end of a simulation run (10 steps).\nRemember that each user is assigned an initial budget of\n100 tokens. The budget distribution spreads over a larger\ninterval as users trade resources, due to the nature of the\nexperiments carried out. Each user has the same probability\nof being a buyer or a seller at each step as any other user.\n\nBehavior on crowded markets. We also investigated the\nimpact of the connection density (i.e., number of links between users) on the total number of matches. We consider\nN = 50 users and R = 7 resource types, and different values for the connection density \u03c1 of the ad-hoc network. The\nvalue of \u03c1 is the fraction of nonzero elements of the adjacency matrix Mij . We considered \u03c1 = 0.2, 0.4, 0.6, 0.8; for\neach value, we executed T = 10 allocation, and each sequence was independently repeated 20 times.\nThe raw data is shown in Table 3. As the connection\ndensity increases, each buyer can interact with more sellers,\nsince each node has more neighbors. Therefore, we expect\nthat the total number of matches increases because a buyer\nhas more chances to find a seller with enough resources to\nmatch his demand.\nAs we can see from Figure 5, the maximum number of\nmatches indeed increases as \u03c1 becomes larger. However, the\n\ntotal number of matches obtained from the auction has a\nmaximum at about \u03c1 \u2208 [0.4, 0.6], and starts decreasing afterwards. The bad behavior of the auction-based allocation can be explained by the fact that for large values of \u03c1,\nmany buyers are likely to share the same neighboring sellers. Therefore, many buyers are likely also to share with\nother buyers the seller offering the lowest price: given that\nall buyers will bid the best (lowest) price, this will cause\ncontention to the \"best\" seller.\nTo substantiate this claim, we show in Figure 6 the average price for a single resource item, and the average number\nof rounds which are necessary for the auction to settle to\nthe final prices. We observe that both the average resource\nprice and the number of rounds increases as the connection\ndensity \u03c1 becomes larger. For \u03c1 = 0.8, about 60 rounds\nare requested to conclude the auctions, resulting in higher\nunitary prices on average.\nSeveral strategies can be used to mitigate the problem\nbelow: raising the prices by a quantity proportional to the\nexcess demand or adding randomization in the choice of sellers (such that a buyer may occasionally bid to sub-optimal\nsellers) are possible extensions which are currently under\ninvestigation. However, we remark that large connection\ndensities are somewhat unlikely in the scenario we are considering, as it would require a large number of people sharing\nresources within a limited area. And furthermore, in such\nenvironments short-range communication technologies are\npreferred for their transmission power efficiency.\n\n5. RELATED WORKS\nThe development of interaction mechanisms among wireless devices is a well studied area. For instance, the project\n\"seamless computing\" [4] proposed by Microsoft in 2003, and\nJini, which is a part of the Java technology originally devel-\n\n\fUnitary res. prices\nNumber of rounds\n\n1.4\n1.2\n1\n0.8\n0.6\n0.4\n0.2\n0\n0.2\n\n0.4\n\n0.6\n\n0.8\n\n0.2\n\n0.4\n\n0.6\n\n0.8\n\n60\n50\n40\n30\n20\n10\n0\n\nsults show that this approach represents a viable and effective strategy promoting sharing of resources, thus providing\nDOs with the means to form an altruistic digital ecosystem.\nAs concerns the general deployment of the proposed scheme\nin a real distributed system, there are some open problems\nthat require further investigation. Security issues are particularly important: for instance, authentication must be\nenforced in order to verify the identity of users that try to\nutilize resources of other DOs. We will also consider more\ngeneral notations to describe requests for resources, e.g., resource bundles as intervals rather than single values.\n\nDensity of connections (\u03c1)\n\n7. REFERENCES\nFigure 6: Average price for any single resource item\n(top) and average number of rounds to complete\nan auction (bottom) as a function of the connection\ndensity\n\noped by Sun Microsystems, have addressed issues related to\nthe definition and implementation of ubiquitous computing\nparadigms. Today, the notion of \"digital ecosystem\" is generally used to refer to any distributed system with properties\nof adaptability, self-organization, scalability and sustainability [3]. In this paper, we use this term in a slightly different\nacceptation, since we give more emphasis to issues concerned\nwith mobile networks and interaction among constrained devices [6].\nAccording to our view, there are two kinds of problems\nwhich need to be considered. The first one refers to the distributed resource utilization. In this sense, several works\nrelated to resource discovery, allocation and organization\n(mostly in ad-hoc fashion) are available in the literature,\ne.g. [5, 10, 13].\nAnother main problem is concerned with optimizing the\ncommunication capabilities of a DO. In general, this issue\nturns to allow a mobile node, having multiple wireless network interfaces, to change network points of attachment\n(handover) without disrupting existing connections, combined with the ability to disseminate messages in multi-hop\ntransmissions (i.e., communication in a MANET). Examples\nof works on seamless host mobility are [2, 9, 17, 23]\nAs to the use of auctioning systems to allocate discrete\ncomputational resources, works have been already proposed,\nbut usually employed on different use case scenarios, such\nas cluster and classic distributed systems [12, 8, 15, 19, 21].\nOther works employ auction-based mechanisms in wireless\nnetworks; however, usually these are schemes that allow\nusers to dynamically negotiate their agreed service levels\nwith their service provider [7, 22], to define an optimal channel allocation or for scheduling. Hence, it is something very\ndifferent from the P2P dynamic resource allocation we are\nconsidering in this work. For example, in [14], auction mechanisms are proposed to distributively coordinate and determine which nodes in a wireless network must act as relay\nnodes.\n\n6.\n\nCONCLUSIONS\n\nIn this paper we presented a fully distributed algorithm for\nresource allocation between DOs. Our algorithm is based on\nascending clock auctions, and allows users to trade resources\nin exchange for some form of digital currency. Numerical re-\n\n[1] L. M. Ausubel and P. Cramton. Auctioning many\ndivisible goods. Journal of the European Economic\nAssociation, 2(2-3):480\u2013493, 2004.\n[2] M. Bonola, S. Salsano, and A. Polidoro. Upmt:\nuniversal per-application mobility management using\ntunnels. In Proceedings of the 28th IEEE conference\non Global telecommunications, GLOBECOM'09, pages\n2811\u20132818, Piscataway, NJ, USA, 2009. IEEE Press.\n[3] G. Briscoe. Complex adaptive digital ecosystems. In\nProc. International Conference on Management of\nEmergent Digital EcoSystems, MEDES'10, pages\n39\u201346, New York, NY, USA, 2010. ACM.\n[4] M. Chalmers and I. Maccoll. Seamful and seamless\ndesign in ubiquitous computing. In Proceedings of\nWorkshop At the Crossroads: The Interaction of HCI\nand Systems Issues in UbiComp. 2003, 2003.\n[5] B. F. Cooper. An optimal overlay topology for routing\npeer-to-peer searches. In Middleware '05: Proceedings\nof the ACM/IFIP/USENIX 2005 International\nConference on Middleware, pages 82\u2013101, New York,\nNY, USA, 2005. Springer-Verlag New York, Inc.\n[6] G. D'Angelo, S. Ferretti, V. Ghini, and F. Panzieri.\nMobile computing in digital ecosystems: Design issues\nand challenges. volume Proceedings of the 7th\nInternational Wireless Communications and Mobile\nComputing Conference (IWCMC 2011), July 2011.\n[7] M. Dramitinos, G. D. Stamoulis, and C. Courcoubetis.\nAuction-based resource allocation in umts high speed\ndownlink packet access (hsdpa. In in Proceedings of\nthe First EuroNGI Conference on Traffic Engineering\n(NGI 2005), 2005.\n[8] D. F. Ferguson, C. Nikolaou, J. Sairamesh, and\nY. Yemini. Economic models for allocating resources\nin computer systems, pages 156\u2013183. World Scientific\nPublishing Co., Inc., River Edge, NJ, USA, 1996.\n[9] S. Ferretti and V. Ghini. A web 2.0, location-based\narchitecture for a seamless discovery of points of\ninterests. In Proceedings of the 2009 Fifth Advanced\nInternational Conference on Telecommunications,\npages 226\u2013231, Washington, DC, USA, 2009. IEEE\nComputer Society.\n[10] G. H. L. Fletcher and H. A. Sheth. Unstructured\npeer-to-peer networks: Topological properties and\nsearch performance. In 3rd International Conference\non Autonomous Agents and MUlti-Agent Systems,\npages 14\u201327. Springer, 2004.\n[11] GNU Octave. http://www.octave.org/.\n[12] D. Grosu and A. Das. Auction-based resource\nallocation protocols in grids. In In Proceedings of the\n\n\f[13]\n\n[14]\n\n[15]\n\n[16]\n\n[17]\n\n[18]\n\n[19]\n\n[20]\n\n[21]\n\n[22]\n\n[23]\n\n16th IASTED International Conference on Parallel\nand Distributed Computing and Systems, pages 20\u201327.\nACTA Press, 2004.\nI. Gruber, R. Schollmeier, and W. Kellerer.\nPeer-to-peer communication in mobile ad hoc\nnetworks. Ad Hoc & Sensor Wireless Networks, 2(3),\n2006.\nJ. Huang, Z. Han, M. Chiang, and H. V. Poor.\nAuction-based distributed resource allocation for\ncooperation transmission in wireless networks. In\nProceedings of the Global Communications Conference,\nGLOBECOM '07, pages 4807\u20134812. IEEE, 2007.\nT. Kelly. Generalized knapsack solvers for multi-unit\ncombinatorial auctions: Analysis and application to\ncomputational resource allocation. In Agent-Mediated\nElectronic Commerce VI, Theories for and\nEngineering of Distributed Mechanisms and Systems,\nvolume 3435 of Lecture Notes in Computer Science,\npages 73\u201386. Springer, 2005.\nA. Makhorin. GNU Linear Programming\nKit\u2013Reference Manual for GLPK version 4.45, draft\nedition, Dec. 2010. Available at\nhttp://www.gnu.org/software/glpk/glpk.html.\nA. Mitseva, N. Prasad, P. Todorova, R. Aguero,\nA. Garcia Armada, C. Panayioto, A. Timm-Giel, and\nL. Maccari. CRUISE research activities towards\nUbiquitous Intelligent Sensing Environments. IEEE\nWireless Communications Magazine, 15(4):52\u201360,\nAugust 2008.\nS. Nair, E. Zentveld, B. Crispo, and A. Tanenbaum.\nFloodgate: A micropayment incentivized p2p content\ndelivery network. In Computer Communications and\nNetworks, 2008. ICCCN '08. Proceedings of 17th\nInternational Conference on, pages 1 \u20137, aug. 2008.\nS. Reddy and A. Gupta. Auction based resource\nallocation in grids. In S. Chaudhuri, S. Das, H. Paul,\nand S. Tirthapura, editors, Distributed Computing and\nNetworking, volume 4308 of Lecture Notes in\nComputer Science, pages 145\u2013156. Springer, 2006.\nM. Sirivianos, J. H. Park, X. Yang, and S. Jarecki.\nDandelion: cooperative content distribution with\nrobust incentives. In 2007 USENIX Annual Technical\nConference on Proceedings of the USENIX Annual\nTechnical Conference, pages 12:1\u201312:14, Berkeley, CA,\nUSA, 2007. USENIX Association.\nM. Stokely, J. Winget, E. Keyes, C. Grimes, and\nB. Yolken. Using a Market Economy to Provision\nCompute Resources Across Planet-wide Clusters. In\nParallel and Distributed Processing Symposium, 2009.\nT. Taleb and A. Nafaa. A fair and dynamic\nauction-based resource allocation scheme for wireless\nmobile networks. In Proceedings of IEEE International\nConference on Communications, ICC 2008, pages\n306\u2013310. IEEE, 2008.\nK. Tsukamoto, T. Yamaguchi, S. Kashihara, and\nY. Oie. Implementation design of handover\nmanagement scheme for efficient multimodal\ncommunication. In Proceedings of the 2008 IEEE\nInternational Conference on Wireless & Mobile\nComputing, Networking & Communication, pages\n684\u2013689, Washington, DC, USA, 2008. IEEE\nComputer Society.\n\nAlgorithm 1 Buyer(i)\nRequire: RP i Reserve price of buyer i\nRequire: Req \u2022i Resource bundle requested by i\n1: Receive SP \u2022j , Off \u2022j from all j \u2208 neighbors(i)\n2: loop\n3:\np := 0\n{Total cost of the bundle}\n4:\nbr := 0, for all r \u2208 R\n5:\nfor all r \u2208 R do\n6:\nSr := {j \u2208 neighbors(i) | Off rj \u2265 Req ri }\n7:\nif (Sr = \u2205) then\n8:\nAbort\n{Not enough items of r available}\n9:\nend if\n10:\nk := arg minj {SP rj | j \u2208 Sr }\n11:\nbr := k\n{This means Xirk := 1}\n12:\np := p + SP rbr \u00d7 Req ri\n13:\nif (p > RP i ) then\n14:\nAbort\n{Reserve price RP i exceeded}\n15:\nend if\n16:\nend for\n17:\nSend bid Req ri to br , for all r \u2208 R\n18:\nReceive SP \u2032\u2022j from all j \u2208 neighbors(i)\n19:\nif (SP rbr = SP \u2032rbr , for all r \u2208 R) then\n20:\nBreak\n{Bid successful}\n21:\nend if\n22:\nSP\u2022j := SP \u2032\u2022j , for all j \u2208 neighbors(i)\n23: end loop\n24: Send Req rbr \u00d7 SP rbr tokens to, and use resource r from\nseller br , r \u2208 R\n\n[24] K. Wei, A. J. Smith, Y.-F. R. Chen, and B. Vo.\nWhopay: A scalable and anonymous payment system\nfor peer-to-peer environments. In Proceedings of the\n26th IEEE International Conference on Distributed\nComputing Systems, ICDCS '06, pages 13\u2013,\nWashington, DC, USA, 2006. IEEE Computer Society.\n[25] B. Yang and H. Garcia-Molina. Ppay: micropayments\nfor peer-to-peer systems. In Proceedings of the 10th\nACM conference on Computer and communications\nsecurity, CCS '03, pages 300\u2013310, New York, NY,\nUSA, 2003. ACM.\n\nAPPENDIX\nA.\n\nAUCTION ALGORITHM\n\nAlgorithms 1 and 2 show the behavior of the generic buyer\ni and seller j, respectively. We remark that the same user\nmay act as buyer and seller at the same time, so the algorithms above could also be executed concurrently by the\nsame node (for clarity, we neglect synchronization issues in\nthe pseudocode).\nAlgorithm Buyer(i) requires some additional parameters,\nnamely the reserve price RP i of user i, and the number of\nitems of the requested bundle Req \u2022i . After receiving the\ninitial price and offered resource amounts from all neighbors\n(line 1), the main loop starts. At each iteration, we use\nvariable p to keep track of the cost of the bid; if p becomes\nlarger than the reserve price RP i , then i resigns and the\nprocedure stops (line 14). We use the variable br to denote\nthe index j of the seller from which i gets resource r. To\nplace a bid, user i first identifies the set Sr of neighbors\nwhich are offering enough items of resource r (line 6). If Sr\n\n\fAlgorithm 2 Seller(j)\nRequire: Off \u2022j Resource bundle offered by j\nRequire: SP \u2022j Reserve prices of seller j\nRequire: \u2206P price increment\n1: Send SP \u2022j , Off \u2022j to all i \u2208 neighbors(j)\n2: repeat\n3:\ndr := 0 for all r \u2208 R\n{Demand for resource r}\n4:\nfor all bids Req ri received from i do\n5:\ndr := dr + Req ri\n6:\nend for\n7:\nexc := false\n8:\nfor all r \u2208 R do\n9:\nif (dr > Off rj ) then\n{Excess demand?}\n10:\nSP rj := SP rj + \u2206P\n11:\nexc := true\n12:\nend if\n13:\nend for\n14:\nSend SP \u2022j , Off \u2022j to all i \u2208 neighbors(j)\n15: until (exc = true)\n16: Receive Req ri \u00d7 SP rj tokens and allocate Req ri items of\nresource r to buyer i, r \u2208 R\n\nis empty, buyer i gives up since we require that all items in\nthe requested bundle be available. If Sr is not empty, buyer\ni will bid for resource r to the seller k \u2208 Sr which advertises\nthe minimum unitary price SP rk for r (line 10). After all\nbids are placed, buyer i listens for the new selling prices\nSP \u2032\u2022j from each neighbor j. If the new prices advertised by\nsellers to which i placed a bid match the previous prices,\n(line 19), the auction is successful; otherwise, a new round\nis performed using the updated selling prices.\nAlgorithm Seller(j) describes the behavior of the generic\nseller j. The required input parameters are the initial reserve\nprices SP rj (the minimum unitary price at which j is willing\nto sell resource r), the offered quantity Req rj and the price\nincrement \u2206P . First, selling prices SP rj are advertised to\nall neighbors (line 1). Then, the main loop starts; we use\nthe vector dr to keep track of the total demand of resource\nr, so that if excess demand for r is detected, its price SP rj\nis incremented (line 10). The loop breaks only when there\nis no longer excess demand.\n\nB.\n\nOPTIMIZATION PROBLEM\n\nIn this section we formulate the problem of computing\nthe maximum number of requests that can be satisfied as\na MIP optimization problem. The optimization problem is\nthe following:\n\nGiven:\nN := {1, . . . , N } Set of users\nR := {1, . . . , R} Set of resource types\nReq ri := Amount of resource r requested by i\nOff rj := Amount of resource r offered by j\nMij := 1 iff user i can interact with user j\nDefine:\nXirj = 1 iff user i gets resource r from user j\n\nMaximize:\nXXX\n\nXirj\n\n(1)\n\ni\u2208N r\u2208R j\u2208N\n\nSubject to:\nX\nReq ri Xirj \u2264 Off rj\n\nr \u2208 R, j \u2208 N\n\n(2)\n\ni \u2208 N, r \u2208 R\n\n(3)\n\ni \u2208 N, r \u2208 R\n\n(4)\n\ni \u2208 N, r \u2208 R, j \u2208 N\n\n(5)\n\ni\u2208N\n\nX\n\nXirj \u2264 1\n\nj\u2208N\n\nX\n\nXirj =\n\nX\n\nXi1j\n\nj\u2208N\n\nj\u2208N\n\nXirj \u2264 Mij\n\nThe optimization problem above is a MIP problem since\nit involves binary decision variables Xirj .\nConstraint (2) ensures that the total capacity of each\nseller j is not violated: the total amount of type r resource\nprovided by j to all other users must not exceed its capacity Off rj . Constraint (3) requires that each user i acquires resource type r from at most a single provider j;\nnote that i may be unable to acquire any resource at all,\nso the constraint is an inequality rather than an equality.\nConstraint (4) requires that, for each user i, either all the\nresources it needs are obtained, or none at all. Finally, constraint (5) requires that user i can request resources from\nuser j (Xirj = 1) only if i and j are neighbors (Mij = 1).\nFrom constraint (4) we have that\nXX\nXirj = 0 or R, for all i \u2208 N\nr\u2208R j\u2208N\n\ntherefore, the total number of matches, i.e., the total number\nof buyers which can be satisfied, is\nX X X Xirj\n(6)\nR\ni\u2208N r\u2208R j\u2208N\nSince R is a constant, each assignment of Xirj maximizing (6) also maximizes the somewhat simpler expression (1)\nwhich we use as objective function.\n\n\f"}