{"id": "http://arxiv.org/abs/cond-mat/0404728v1", "guidislink": true, "updated": "2004-04-30T04:39:10Z", "updated_parsed": [2004, 4, 30, 4, 39, 10, 4, 121, 0], "published": "2004-04-30T04:39:10Z", "published_parsed": [2004, 4, 30, 4, 39, 10, 4, 121, 0], "title": "Enumeration of self-avoiding walks on the square lattice", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cond-mat%2F0404360%2Ccond-mat%2F0404499%2Ccond-mat%2F0404425%2Ccond-mat%2F0404501%2Ccond-mat%2F0404469%2Ccond-mat%2F0404275%2Ccond-mat%2F0404694%2Ccond-mat%2F0404225%2Ccond-mat%2F0404640%2Ccond-mat%2F0404328%2Ccond-mat%2F0404541%2Ccond-mat%2F0404058%2Ccond-mat%2F0404728%2Ccond-mat%2F0404582%2Ccond-mat%2F0404279%2Ccond-mat%2F0404577%2Ccond-mat%2F0404611%2Ccond-mat%2F0404232%2Ccond-mat%2F0404089%2Ccond-mat%2F0404249%2Ccond-mat%2F0404169%2Ccond-mat%2F0404668%2Ccond-mat%2F0404022%2Ccond-mat%2F0404357%2Ccond-mat%2F0404015%2Ccond-mat%2F0404156%2Ccond-mat%2F0404710%2Ccond-mat%2F0404202%2Ccond-mat%2F0404269%2Ccond-mat%2F0404288%2Ccond-mat%2F0404575%2Ccond-mat%2F0404690%2Ccond-mat%2F0404235%2Ccond-mat%2F0404116%2Ccond-mat%2F0404580%2Ccond-mat%2F0404673%2Ccond-mat%2F0404591%2Ccond-mat%2F0404649%2Ccond-mat%2F0404589%2Ccond-mat%2F0404600%2Ccond-mat%2F0404437%2Ccond-mat%2F0404102%2Ccond-mat%2F0404568%2Ccond-mat%2F0404502%2Ccond-mat%2F0404222%2Ccond-mat%2F0404408%2Ccond-mat%2F0404432%2Ccond-mat%2F0404087%2Ccond-mat%2F0404147%2Ccond-mat%2F0404061%2Ccond-mat%2F0404528%2Ccond-mat%2F0404316%2Ccond-mat%2F0404314%2Ccond-mat%2F0404373%2Ccond-mat%2F0404489%2Ccond-mat%2F0404033%2Ccond-mat%2F0404605%2Ccond-mat%2F0404429%2Ccond-mat%2F0404594%2Ccond-mat%2F0404371%2Ccond-mat%2F0404617%2Ccond-mat%2F0404529%2Ccond-mat%2F0404399%2Ccond-mat%2F0404724%2Ccond-mat%2F0404423%2Ccond-mat%2F0404177%2Ccond-mat%2F0404746%2Ccond-mat%2F0404456%2Ccond-mat%2F0404145%2Ccond-mat%2F0404413%2Ccond-mat%2F0404098%2Ccond-mat%2F0404507%2Ccond-mat%2F0404431%2Ccond-mat%2F0404240%2Ccond-mat%2F0404518%2Ccond-mat%2F0404583%2Ccond-mat%2F0404217%2Ccond-mat%2F0404465%2Ccond-mat%2F0404327%2Ccond-mat%2F0404317%2Ccond-mat%2F0404511%2Ccond-mat%2F0404041%2Ccond-mat%2F0404173%2Ccond-mat%2F0404734%2Ccond-mat%2F0404454%2Ccond-mat%2F0404433%2Ccond-mat%2F0404158%2Ccond-mat%2F0404362%2Ccond-mat%2F0404650%2Ccond-mat%2F0404272%2Cnucl-ex%2F0303010%2Cnucl-ex%2F0303016%2Cnucl-ex%2F0303003%2Cnucl-ex%2F0303011%2Cnucl-ex%2F0303015%2Cnucl-ex%2F0303008%2Cnucl-ex%2F0303007%2Cnucl-ex%2F0303012%2Cnucl-ex%2F0303001%2Cnucl-ex%2F0303006%2Cnucl-ex%2F0303009&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Enumeration of self-avoiding walks on the square lattice"}, "summary": "We describe a new algorithm for the enumeration of self-avoiding walks on the\nsquare lattice. Using up to 128 processors on a HP Alpha server cluster we have\nenumerated the number of self-avoiding walks on the square lattice to length\n71. Series for the metric properties of mean-square end-to-end distance,\nmean-square radius of gyration and mean-square distance of monomers from the\nend points have been derived to length 59. Analysis of the resulting series\nyields accurate estimates of the critical exponents $\\gamma$ and $\\nu$\nconfirming predictions of their exact values. Likewise we obtain accurate\namplitude estimates yielding precise values for certain universal amplitude\ncombinations. Finally we report on an analysis giving compelling evidence that\nthe leading non-analytic correction-to-scaling exponent $\\Delta_1=3/2$.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cond-mat%2F0404360%2Ccond-mat%2F0404499%2Ccond-mat%2F0404425%2Ccond-mat%2F0404501%2Ccond-mat%2F0404469%2Ccond-mat%2F0404275%2Ccond-mat%2F0404694%2Ccond-mat%2F0404225%2Ccond-mat%2F0404640%2Ccond-mat%2F0404328%2Ccond-mat%2F0404541%2Ccond-mat%2F0404058%2Ccond-mat%2F0404728%2Ccond-mat%2F0404582%2Ccond-mat%2F0404279%2Ccond-mat%2F0404577%2Ccond-mat%2F0404611%2Ccond-mat%2F0404232%2Ccond-mat%2F0404089%2Ccond-mat%2F0404249%2Ccond-mat%2F0404169%2Ccond-mat%2F0404668%2Ccond-mat%2F0404022%2Ccond-mat%2F0404357%2Ccond-mat%2F0404015%2Ccond-mat%2F0404156%2Ccond-mat%2F0404710%2Ccond-mat%2F0404202%2Ccond-mat%2F0404269%2Ccond-mat%2F0404288%2Ccond-mat%2F0404575%2Ccond-mat%2F0404690%2Ccond-mat%2F0404235%2Ccond-mat%2F0404116%2Ccond-mat%2F0404580%2Ccond-mat%2F0404673%2Ccond-mat%2F0404591%2Ccond-mat%2F0404649%2Ccond-mat%2F0404589%2Ccond-mat%2F0404600%2Ccond-mat%2F0404437%2Ccond-mat%2F0404102%2Ccond-mat%2F0404568%2Ccond-mat%2F0404502%2Ccond-mat%2F0404222%2Ccond-mat%2F0404408%2Ccond-mat%2F0404432%2Ccond-mat%2F0404087%2Ccond-mat%2F0404147%2Ccond-mat%2F0404061%2Ccond-mat%2F0404528%2Ccond-mat%2F0404316%2Ccond-mat%2F0404314%2Ccond-mat%2F0404373%2Ccond-mat%2F0404489%2Ccond-mat%2F0404033%2Ccond-mat%2F0404605%2Ccond-mat%2F0404429%2Ccond-mat%2F0404594%2Ccond-mat%2F0404371%2Ccond-mat%2F0404617%2Ccond-mat%2F0404529%2Ccond-mat%2F0404399%2Ccond-mat%2F0404724%2Ccond-mat%2F0404423%2Ccond-mat%2F0404177%2Ccond-mat%2F0404746%2Ccond-mat%2F0404456%2Ccond-mat%2F0404145%2Ccond-mat%2F0404413%2Ccond-mat%2F0404098%2Ccond-mat%2F0404507%2Ccond-mat%2F0404431%2Ccond-mat%2F0404240%2Ccond-mat%2F0404518%2Ccond-mat%2F0404583%2Ccond-mat%2F0404217%2Ccond-mat%2F0404465%2Ccond-mat%2F0404327%2Ccond-mat%2F0404317%2Ccond-mat%2F0404511%2Ccond-mat%2F0404041%2Ccond-mat%2F0404173%2Ccond-mat%2F0404734%2Ccond-mat%2F0404454%2Ccond-mat%2F0404433%2Ccond-mat%2F0404158%2Ccond-mat%2F0404362%2Ccond-mat%2F0404650%2Ccond-mat%2F0404272%2Cnucl-ex%2F0303010%2Cnucl-ex%2F0303016%2Cnucl-ex%2F0303003%2Cnucl-ex%2F0303011%2Cnucl-ex%2F0303015%2Cnucl-ex%2F0303008%2Cnucl-ex%2F0303007%2Cnucl-ex%2F0303012%2Cnucl-ex%2F0303001%2Cnucl-ex%2F0303006%2Cnucl-ex%2F0303009&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We describe a new algorithm for the enumeration of self-avoiding walks on the\nsquare lattice. Using up to 128 processors on a HP Alpha server cluster we have\nenumerated the number of self-avoiding walks on the square lattice to length\n71. Series for the metric properties of mean-square end-to-end distance,\nmean-square radius of gyration and mean-square distance of monomers from the\nend points have been derived to length 59. Analysis of the resulting series\nyields accurate estimates of the critical exponents $\\gamma$ and $\\nu$\nconfirming predictions of their exact values. Likewise we obtain accurate\namplitude estimates yielding precise values for certain universal amplitude\ncombinations. Finally we report on an analysis giving compelling evidence that\nthe leading non-analytic correction-to-scaling exponent $\\Delta_1=3/2$."}, "authors": ["Iwan Jensen"], "author_detail": {"name": "Iwan Jensen"}, "author": "Iwan Jensen", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1088/0305-4470/37/21/002", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/cond-mat/0404728v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cond-mat/0404728v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "24 pages, 6 figures", "arxiv_primary_category": {"term": "cond-mat.stat-mech", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cond-mat.stat-mech", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cond-mat/0404728v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/cond-mat/0404728v1", "journal_reference": "J. Phys. A 37, 5503-5524 (2004)", "doi": "10.1088/0305-4470/37/21/002", "fulltext": "arXiv:cond-mat/0404728v1 [cond-mat.stat-mech] 30 Apr 2004\n\nEnumeration of self-avoiding walks on the square\nlattice\nIwan Jensen\nARC Centre of Excellence for Mathematics and Statistics of Complex Systems,\nDepartment of Mathematics and Statistics,\nThe University of Melbourne, Victoria 3010, Australia\n\nFebruary 2, 2008\nAbstract\nWe describe a new algorithm for the enumeration of self-avoiding walks on the\nsquare lattice. Using up to 128 processors on a HP Alpha server cluster we have enumerated the number of self-avoiding walks on the square lattice to length 71. Series\nfor the metric properties of mean-square end-to-end distance, mean-square radius\nof gyration and mean-square distance of monomers from the end points have been\nderived to length 59. Analysis of the resulting series yields accurate estimates of\nthe critical exponents \u03b3 and \u03bd confirming predictions of their exact values. Likewise\nwe obtain accurate amplitude estimates yielding precise values for certain universal amplitude combinations. Finally we report on an analysis giving compelling\nevidence that the leading non-analytic correction-to-scaling exponent \u22061 = 3/2.\n\n1\n\nIntroduction\n\nThe self-avoiding walk (SAW) on regular lattices is one of the most important and classic\ncombinatorial problems in statistical mechanics [24]. SAWs are often considered in the\ncontext of lattice models of polymers. The fundamental problem is the calculation (up\nto translation) of the number of SAWs, cn , with n steps. As most interesting combinatorial problems, SAWs have exponential growth, cn \u223c A\u03bcn n\u03b3\u22121 , where \u03bc is the connective\nconstant, \u03b3 = 43/32 is a (known) critical exponent [25, 26], and A is a critical amplitude.\nSo one major problem is the calculation, or at least accurate estimation of, \u03bc and \u03b3 in\norder to check the theoretical prediction. A second major problem is the calculation of\ncritical amplitudes, such as A, in order to test predictions for various universal amplitude\ncombinations for two-dimensional SAWs [4, 2, 3]. This requires, in addition to the calculation of cn , the calculation of metric properties such as the end-to-end distance and the\nradius of gyration. Furthermore the enumeration of SAWs have traditionally served as a\nbenchmark for both computer performance and algorithm design.\nAn n-step self-avoiding walk \u03c9 on a regular lattice is a sequence of distinct vertices\n\u03c90 , \u03c91 , . . . , \u03c9n such that each vertex is a nearest neighbour of it predecessor. SAWs are\nconsidered distinct up to translations of the starting point \u03c90 . We shall use the symbol\n\u03a9n to mean the set of all SAWs of length n.\n1\n\n\fIn addition we also consider self-avoiding polygons (SAPs). A SAP can be viewed\nas a SAW whose end-points \u03c90 and \u03c9n are nearest-neighbors and which therefore can be\nconnected to form a closed loop by the addition of a single step. Notice that there are\n2(n + 1) SAWs which give rise to a given (n + 1) step SAP. Each vertex of the SAP can\nbe used as \u03c90 and we could walk clockwise or counter-clockwise around the perimeter of\nthe SAP.\nThe enumeration of SAWs and SAPs has a long and glorious history, which for the\nsquare lattice has recently been reviewed in [12]. Suffice to say that early calculations were\nbased on various direct counting algorithms of exponential complexity, with computing\ntime T (n) growing asymptotically as \u03bbn , where \u03bb = \u03bc \u223c 2.638, the connective constant\nfor SAWs. Enting [8] was the first to produce a major breakthrough by applying transfer\nmatrix (TM) methods to the enumeration of SAPs on finite lattices. This so called\nfinite lattice\nmethod (FLM) led to a very significant reduction in complexity to 3n/4 ,\n\u221a\n4\nso \u03bb = 3 = 1.316 . . .. More recently we [18] refined the algorithm using the method\nof pruning and reduced the complexity to 1.2n . The extension of the FLM to SAW\nenumeration had to wait until 1993 when Conway, Enting and Guttmann [5] implemented\nan algorithm with complexity 3n/4 . The algorithm is difficult to implement and requires\nlarge amounts of physical memory. However, the algorithm cannot be used to calculate\nmetric properties. In this paper we pursue a different FLM algorithm based on the same\nideas used to improve the SAP algorithm. It appears that this pruning algorithm has\na computational complexity of 1.334n very close to the CEG algorithm. So the CEG\nwill ultimately beat the pruning algorithm for large enough n. For small n the pruning\nalgorithm actually uses significantly less memory as we shall show in Section 2.4, and it\ncan in addition be used to calculate metric properties. To our knowledge this is the first\ntime TM methods has been used to calculate metric properties of SAWs.\nThe quantities we consider in this paper are.\n\u2022 The number of SAWs of length n, believed to have the asymptotic behaviour\ncn = A\u03bcn n\u03b3\u22121 [1 + o(1)],\n\n(1.1a)\n\nwhere \u03bc is the connective constant and \u03b3 is a critical exponent. We shall also study\nthe associated generating function\nC(u) =\n\n\u221e\nX\nn=0\n\ncn un = A\u0393(\u03b3)(1 \u2212 u\u03bc)\u2212\u03b3 [1 + o(1)],\n\n(1.1b)\n\nso the generating function has a singularity at u = uc = 1/\u03bc.\n\u2022 The number of SAPs of length n, believed to grow asymptotically as\npn = B\u03bcn n\u03b1\u22123 [1 + o(1)],\n\n(1.2a)\n\nwhere \u03b1 is another critical exponent. In this case the generating function behaves\nas\n\u221e\nX\nP(u) =\npn un = B\u0393(\u03b1 \u2212 2)((1 \u2212 u\u03bc)2\u2212\u03b1 [1 + o(1)].\n(1.2b)\nn=0\n\n2\n\n\f\u2022 The mean-square end-to-end distance of n step SAWs\nhRe2 in =\n\n1 X\n(\u03c90 \u2212 \u03c9n )2 = Cn2\u03bd [1 + o(1)],\ncn \u03a9\n\n(1.3a)\n\nn\n\nwhere \u03bd is a new critical exponent. We also look at the generating function\nX\nRe (u) =\ncn hRe2 in un = AC\u0393(\u03b3 + 2\u03bd)(1 \u2212 u\u03bc)\u2212(\u03b3+2\u03bd) [1 + o(1)].\n(1.3b)\nn\n\n\u2022 The mean-square radius of gyration of n step SAWs\n\"\n#\nn\nX\nX\n1\n1\n(\u03c9i \u2212 \u03c9j )2 = Dn2\u03bd [1 + o(1)],\nhRg2 in =\ncn \u03a9 2(n + 1)2 i,j=0\n\n(1.4a)\n\nn\n\nwith the associated generating function\nX\nRg (u) =\n(n+1)2 cn hRg2 in un = AD\u0393(\u03b3 +2\u03bd +2)(1\u2212u\u03bc)\u2212(\u03b3+2\u03bd+2)[1+o(1)], (1.4b)\nn\n\nwhere the factors under the sum ensure that the coefficients are integer valued.\n\u2022 The mean-square distance of a monomer from the end-points of n step SAWs\n\"\n#\nn\nX\n\u0002\n\u0003\n1 X\n1\n2\n2\n2\nhRm in =\n= En2\u03bd [1 + o(1)], (1.5a)\n(\u03c90 \u2212 \u03c9j ) + (\u03c9n \u2212 \u03c9j )\ncn \u03a9 2(n + 1) i=0\nn\n\nwith the associated generating function\nX\n2\nRm (u) =\n(n+1)cn hRm\nin un = AE\u0393(\u03b3 +2\u03bd +1)(1\u2212u\u03bc)\u2212(\u03b3+2\u03bd+1) [1+o(1)]. (1.5b)\nn\n\nThe critical exponents are believed to be universal in that they only depend on the\ndimension of the underlying lattice. \u03bc on the other hand is non-universal. For SAWs\nin two dimensions the critical exponents \u03b3 = 43/32, \u03b1 = 1/2 and \u03bd = 3/4 have been\npredicted exactly, though non-rigorously, using Coulomb-gas arguments [25, 26].\nWhile the amplitudes are non-universal, there are many universal amplitude ratios.\nAny ratio of the metric amplitudes, e.g. D/C and E/C, is expected to be universal [4].\nMany other universal amplitude combinations in particular involving SAPs can be found\nin [3, 29]. Of particular interest is the linear combination [4, 2] (which we shall call the\nCSCPS relation)\n\u0012\n\u0013\nyt D\nE\n1\nF \u2261 2+\n\u22122 + ,\n(1.6)\nyh C\nC\n2\nwhere yt = 1/\u03bd and yh = 1 + \u03b3/(2\u03bd) are the thermal and magnetic renormalization-group\neigenvalues, respectively, of the n-vector model at n = 0. In two dimensions (yt = 4/3 and\nyh = 91/48, hence 2 + yt /yh = 246/91) Cardy and Saleur [4] (as corrected by Caracciolo,\nPelissetto and Sokal [2]) have predicted, using conformal field theory, that F = 0. This\nconclusion has been confirmed by previous high-precision Monte Carlo work [2] as well as\nby series extrapolations [13].\n3\n\n\fPrivman and Redner [28] proved that the combination BC/\u03c3a0 is universal. \u03c3 is\nan integer constant such that pn is non-zero when n is divisible by \u03c3. So \u03c3 = 1 for\nthe triangular lattice and 2 for the square and honeycomb\nlattices. a0 is the area per\n\u221a\nlattice\u221asite and a0 = 1 for the square lattice, a0 = 3 3/4 for the honeycomb lattice, and\na0 = 3/2 for the triangular lattice.\nThe asymptotic form (1.1a) for cn only explicitly gives the leading contribution. In\ngeneral one would expect corrections to scaling so\n\u0014\n\u0015\na1 a2\nb0\nb1\nb2\nn \u03b3\u22121\n1+\ncn = A\u03bc n\n+ 2 + . . . + \u22061 + \u22061 +1 + \u22061 +2 + . . .\n(1.7)\nn\nn\nn\nn\nn\nIn addition to \"analytic\" corrections to scaling of the form ak /nk , there are \"non-analytic\"\ncorrections to scaling of the form bk /n\u22061 +k , where the correction-to-scaling exponent\n\u22061 isn't an integer. In fact one would expect a whole sequence of correction-to-scaling\nexponents \u22061 < \u22062 . . ., which are both universal and also independent of the observable,\nthat is, the same for cn , pn , and so on. Much effort has been devoted to determining the\nleading non-analytic correction-to-scaling exponent \u22061 for two-dimensional SAWs and\nSAPs. At least two different theoretical predictions have been made for the exact value\nof this exponent: \u22061 = 3/2 based on Coulomb-gas arguments [25, 26], and \u22061 = 11/16\nbased on conformal-invariance methods [30].\nIn a recent paper [1] we studied the amplitudes and the correction-to-scaling exponents\nfor two-dimensional SAWs, using a combination of series-extrapolation and Monte Carlo\nmethods. We enumerated all self-avoiding walks up to 59 steps on the square lattice, and\nup to 40 steps on the triangular lattice, measuring the metric properties mentioned above,\nand then carried out a detailed and careful analysis of the data in order to accurately\nestimate the amplitudes and correction-to-scaling exponent. In this paper we give a\ndetailed account of the algorithm used to calculate the square lattice series analysed in\n[1], report on a further extension of the SAW counts up to 71 steps, analyse the series\nand confirm to great accuracy the predicted exact values of the critical exponents, and\nfinally we briefly summarise the results of the analysis from [1].\n\n2\n\nEnumeration of self-avoiding walks\n\nThe algorithm we use to enumerate SAWs on the square lattice builds on the pioneering\nwork of Enting [8] who enumerated square lattice self-avoiding polygons using the finite\nlattice method. More specifically our algorithm is based in large part on the one devised\nby Conway, Enting and Guttmann [5] for the enumeration of SAWs. The basic idea of\nthe finite lattice method is to calculate partial generating functions for various properties\nof a given model on finite pieces, say W \u00d7 L rectangles of the square lattice, and then\nreconstruct a series expansion for the infinite lattice limit by combining the results from\nthe finite pieces. The generating function for any finite piece is calculated using transfer\nmatrix (TM) techniques.\n\n2.1\n\nBasic transfer matrix algorithm\n\nThe most efficient implementation of the TM algorithm generally involves bisecting the\nfinite lattice with a boundary (this is just a line in the case of rectangles) and moving\n4\n\n\fthe boundary in such a way as to build up the lattice cell by cell. The sum over all\ncontributing graphs is calculated as the boundary is moved through the lattice. Due to\nthe symmetry of the square lattice we need only consider rectangles with L \u2265 W . SAWs\nin a given rectangle are enumerated by moving the intersection so as to add one vertex at\na time, as shown in Fig. 1. For each configuration of occupied or empty edges along the\nintersection we maintain a generating function for partial walks cutting the intersection\nin that particular pattern. If we draw a SAW and then cut it by a line we observe that\nthe partial SAW to the left of this line consists of a number of loops connecting two edges\n(we shall refer to these as loop ends) in the intersection, and pieces which are connected\nto only one edge (we call these free ends). The other end of the free piece is an end point\nof the SAW so there are at most two free ends. In applying the transfer matrix technique\nto the enumeration of SAWs we regard them as sets of edges on the finite lattice with the\nproperties:\n(1) A weight u is associated with an occupied edge. In some cases one gives different\nweights u and v to occupied horizontal and vertical edges, respectively.\n(2) All vertices are of degree 0, 1 or 2.\n(3) There are at most two vertices of degree 1 and the final graph has exactly two\nvertices of degree 1 (the end points of the SAW).\n(4) Apart from isolated sites, the final graph has a single connected component.\n(5) In some implementations each graph must span the rectangle from left to right,\nwhile in other implementations each graph must span the rectangle from left to\nright and from bottom to top.\nWe are not allowed to form closed loops, so two loop ends can only be joined if they\nbelong to different loops. To exclude loops which close on themselves we need to label the\noccupied edges in such a way that we can easily determine whether or not two loop ends\nbelong to the same loop. The most obvious choice would be to give each loop a unique\nlabel. However, on two-dimensional lattices there is a more compact scheme relying on the\nfact that two loops can never intertwine. Each end of a loop is assigned one of two labels\ndepending on whether it is the lower end or the upper end of a loop. Each configuration\nalong the boundary line can thus be represented by a set of edge states {\u03c3i }, where\n\uf8f1\n0\nempty edge,\n\uf8f4\n\uf8f4\n\uf8f2\n1\nlower loop end,\n\u03c3i =\n(2.1)\n2\nupper loop end.\n\uf8f4\n\uf8f4\n\uf8f3\n3\nfree end.\n\nIf we read from the bottom to the top, the configuration along the intersection of the\npartial SAW in Fig. 1 is {011212320}. It is easy to see that this encoding uniquely\ndescribes which loop ends are connected. In order to find the upper loop end, matching a\ngiven lower end, we start at the lower end and work up wards in the configuration counting\nthe number of '1's and '2's we pass (the '1' of the initial lower end is not included in the\ncount). We stop when the number of '2's exceeds the number of '1's. This '2' marks\nthe matching upper end of the loop. It is worth noting that there are some restrictions\non the possible configurations. Firstly, every lower loop end must have a corresponding\n5\n\n\f2\n3\n2\n1\n2\n1\n1\n0\nFigure 1: A snapshot of the boundary line (dashed line) during the transfer matrix\ncalculation on the square lattice. SAWs are enumerated by successive moves of the kink\nin the boundary line, as exemplified by the position given by the dotted line, so that one\nvertex at a time is added to the rectangle. To the left of the boundary line we have drawn\nan example of a partially completed SAW.\nupper end, and it is therefore clear that the total number of '1's is equal to the total\nnumber of '2's. Secondly, as we look through the configuration starting from the bottom\nthe number of '1's is never smaller than the number of '2's. Ignoring the '0's the '1's\nand '2's can be viewed as perfectly balanced parenthesis. Those familiar with algebraic\nlanguages will immediately recognize that each configuration (for now treating free ends\nand empty edges in the same way) of labeled loop ends forms a Motzkin word [7].\n2.1.1\n\nDerivation of updating rules\n\nThe updating of a partial generating function depends on the states of the edges to the\nleft and above the new vertex. When the kink is moved we insert the edges to the right\nand below the new vertex. The way to avoid situations leading to graphs with more than\na single connected component is to forbid free ends from terminating (or joining) at the\nvertex being processed unless the boundary line intersects no other occupied edges. In\nTable 1 we have listed the possible local 'input' states and the 'output' states which arise\nas the kink in the boundary is propagated by one step. The rows in this table are labeled\nby the state of the left edge while the columns are labeled by the state of the top edge.\nEach panel in the table contains the possible states of the bottom and right edges (in\nthat order). We shall refer to the configuration before the move as the 'source' and a\nconfiguration produced as a result of the move as a 'target'. In each move the source\ngenerating function is multiplied by uk , where k is the number of new occupied edges\n(just the number of non-zero entries in the local output state), and is then added to the\ntarget generating function.\n6\n\n\fTable 1: The various local 'input' states and the 'output' states which arise as the\nboundary line is moved in order to include one more vertex of the lattice.\n0\n0\n1\n2\n3\n\n00\n01\n02\n03\n\n12\n03\n30\n10\n00\n20\n00\n30 ADD\n\n1\n01 10 00\n00\n00\n00\n\n2\n02 20 00\nNOT allowed\n00\n00\n\n3\n03\n30\nADD\n00\n00\nADD\n\nIn the following we give the details of how some of these updating rules are derived.\n00: The left and top edges are empty. We have four possible outputs. We can leave the\nbottom and right edges empty (00), insert a new partial loop (12), or add a new\nfree end on the right (03) or bottom (30) edge. Adding a free end increases by one\nthe number of degree-1 vertices, so this is only allowed provided the source has at\nmost one free end. Throughout, this restriction is indicated by the use of boldface\nentries.\n01,10,02,20: The left or top edge is occupied by a loop end. We can continue this loop\nend along either the right or bottom edge. Note that we cannot occupy both new\nedges since this would lead to vertices of degree 3. We can also leave both edges\nempty. This creates a new degree-1 vertex and we have to relabel the matching end\nof the discontinued loop as free. Relabeling is indicated by over-lining. The way to\nidentify the matching loop end is described below (2.1) in the previous section.\n03,30: The left or top edge is occupied by a free end. We can continue the free end\nalong either the right or bottom edge. We can also leave both edges empty. This\ncreates a separate component and is only allowed if the resulting graph is a valid\nSAW. That is, the source contains no other occupied edges (and if required both the\nbottom and top of the rectangle has been touched). The partial generating function\nis added to the running total. We mark this possibility by the entry ADD.\n11,22: Two lower (upper) loop ends are joined and the output edges must be empty\n(otherwise we would create vertices of degree greater than 2). The matching upper\n(lower) loop end of the inner-most loop is relabeled as the new lower (upper) end\nof the combined loop.\n12: A closed loop would be formed. This is not allowed.\n21: Upper and lower loop ends are joined and the output edges must be empty.\n13,31,23,32: A free end is joined to a lower (upper) loop end. The output edges are\nempty and the matching loop end is relabeled free.\n33: Two free ends are joined. This results is a separate component. If the resulting\ngraph is a valid SAW we add it to the generating function.\n7\n\n\f2.2\n\nThe Conway-Enting-Guttmann algorithm\n\nThe algorithm used by Conway, Enting and Guttmann [5] to enumerate SAWs is ingenious but also quite complicated and relies heavily on manipulations of various generating\nfunctions. Here we shall only give the briefest of outlines of the algorithm sufficient for\nthe reader to appreciate the differences between this algorithm and the one we used for\nthe enumerations reported in this paper.\nThe CEG algorithm leads to the enumeration of anisotropic SAWs, that is the number\nof SAWs cm,n with m steps parallel to the y-axis and n-steps parallel to the x-axis.\nObviously, cm,n = cn,m . The major 'trick' of the algorithm [5] is the realisation that any\nSAW can be constructed by combining irreducible components. An irreducible component\nhas at least two steps along the y-axis in each position, e.g., any line parallel to the x-axis\nwill intersect the component at least twice (or not at all if the line lies beyond the extent\nof the component). There are 5 different types of irreducible component. The irreducible\ncomponents are obtained from enumerations of anisotropic SAWs in rectangles. The\nSAWs span the rectangle in the x-direction but not necessarily in the y-direction. For\neach rectangle 4 enumerations are done with different restrictions on the allowed positions\nof the end-points, e.g., the end-points may be allowed to lie only on the top border, on\nthe top and/or bottom border etc. The enumeration of SAWs in a rectangle is done using\nthe basic transfer matrix algorithm and updating rules as described above. The only\ndifference is that we have to take care when creating a new free end that it is allowed\nunder the restrictions imposed on the end-points.\nIf one enumerates anisotropic SAWs in rectangles up to width W it is possible to\ngenerate the series correctly to order Nmax = 4W \u2212 1. Note that this requires the calculation of a two parameter generating function since variables u and v must be kept for\nhorizontal and vertical steps, respectively. The generating functions can be truncated if\nm + n > Nmax .\nThe CEG algorithm requires the calculation of the anisotropic generating function\neven though one may ultimately only be interested in the isotropic SAW counts. However\nanisotropic series can be very useful and most importantly can yield valuable insights into\nthe analytic properties of the generating function. In recent papers [9, 11] a numerical\nprocedure was given (using anisotropic series) that indicates whether or not a given statistical mechanics problem is solvable in terms of D-finite functions. A D-finite function\ncan be expressed as the solution to a linear ordinary differential equation of finite order\nwith polynomial coefficients.\n\n2.3\n\nThe pruning algorithm\n\nThe use of pruning to obtain more efficient TM algorithms was used for SAPs in [18]. We\nrequired valid SAPs to span the rectangle in both directions and directly enumerate SAPs\nof width exactly W and length L rather than of width \u2264 W and length L as done in [8].\nAt first glance this appears inefficient since we have to keep 4 distinct generating functions\ndepending on which borders have been touched. However, for SAPs [18] it actually leads\nto an algorithm which is both exponentially faster and whose memory requirement is\nexponentially smaller. Experimentally it was found that the computational complexity\nwas close to 2n/4 , much better than the 3n/4 of the original approach. We have used\nsimilar techniques for the enumerations of SAWs carried out for this paper.\n8\n\n\fPruning, details of which are given in [18] for the SAP case, allows us to discard most\nof the possible configurations for large W because they only contribute to SAWs of length\ngreater than Nmax , where Nmax is the maximal length to which we choose to carry out\nour calculations. The value of Nmax is limited by the available computational resources,\nbe they CPU time or physical memory. Briefly pruning works as follows. Firstly, for\neach configuration we keep track of the current minimum number of steps Ncur already\ninserted to the left of the boundary line in order to build up that particular configuration.\nSecondly, we calculate the minimum number of additional steps Nadd required to produce\na valid SAW. There are three contributions, namely the number of steps required to\nconnect the loops and free ends, the number of steps needed (if any) to ensure that the\nSAW touches both the lower and upper border, and finally the number of steps needed\n(if any) to extend at least W edges in the length-wise direction (remember we only need\nrectangles with L \u2265 W ). If the sum Ncur + Nadd > Nmax we can discard the partial\ngenerating function for that configuration, and of course the configuration itself, because\nit won't make a contribution to the SAW count up to the perimeter lengths we are trying\nto obtain.\nThere are no principal differences between pruning SAWs and SAPs though the detailed implementation is more complicated for the SAW case. We found it necessary to\nexplicitly write subroutines to handle the three distinct cases where the TM configuration\ncontains zero, one and two free ends, respectively. But in all cases we essentially have to go\nthrough all the possible ways of completing a SAW in order to find the minimum number\nof steps required. This is a fairly straight forward task though quite time consuming.\nNote that the pruning algorithm can be used to generate either isotropic or anisotropic\nseries. That is, unlike the CEG algorithm, we need only maintain isotropic generating\nfunctions if we are after isotropic counts for SAWs. But if we wish to do so, say in order\nto perform the \"solvability\" check mentioned above [9, 11], we could calculate anisotropic\ngenerating functions (at the expense of greatly increased memory requirements).\nInspired by Knuth's algorithm for the enumeration of polyominoes [20], we implemented a couple of further enhancements to our SAW algorithm. The first improvement\nuses a further symmetry of the square lattice. When a column has been completed the\nconfiguration are symmetric under reflection. That is the generating functions for the\nconfigurations such as, {010122030} and {030112020}, are identical. This symmetry also\nextends to the touching of the upper/lower borders of the rectangle. The second improvement is superior memory management. A given boundary line configuration only\ncontributes from order n = Ncur + Nadd , so we need only retain the first Nmax \u2212 n terms\nin the associated generating function. In our case the maximum memory consumption\noccur at W = 27. Here there are approximately 1.12 billion distinct configurations and a\ntotal of about 4 billion terms in the generating functions. So on average there is a little\nless than 4 terms per configuration. At smaller widths there are fewer configurations but\nmore terms per configuration. At larger widths both the number of configurations and\nthe number of terms per configuration decrease. The important thing to note is that as\nNmax is increased the maximal number of terms seems to approach a constant (with a\nvalue less than 4) times the maximal number of configurations.\n\n9\n\n\f10\n\nMaximal Number of Configurations\n\n10\n\n8\n\n10\n\n6\n\n10\n\n4\n\n10\n\n2\n\n10\n\n0\n\n10 0\n\n10\n\n20\n\n30\n\n40\n\n50\n\n60\n\n70\n\n80\n\nNumber of Terms\nFigure 2: Lin-log plot of the maximal number of TM configurations from the pruned\nalgorithm with increasing n.\n\n2.4\n\nComputational complexity\n\nThe time T (n) required to obtain the number of walks of length n grows exponentially\nwith n, T (n) \u221d \u03bbn . For the CEG algorithm the complexity can be calculated exactly.\nTime (and memory) requirements are basically proportional to a polynomial (in n) times\nthe maximal number of configurations, NConf , generated during a calculation. When\nthe boundary line is straight and intersects W + 1 edges we can find the exact number\nof configurations. First look at the situation with no free ends. The configurations\ncorrespond to Motzkin paths [7] (just map 0 to a horizontal step, 1 to a north-east step,\nand 2 to a south-east step) and the number of such paths Mn with n steps is easily derived\nfrom the generating function\nX\nMn xx = [1 \u2212 x \u2212 (1 \u2212 2x \u2212 3x2 )1/2 ]/2x2 .\n(2.2)\nM(x) =\nn\n\nThe number of transfer matrix configurations NS (W ) in the CEG algorithm is simply\nobtained by inserting 0, 1 or 2 free ends into a Motzkin path and eliminating the path\ncorresponding to a configuration of all 0's, hence\nNS (W ) = MW +1 + (W + 1)MW + (W + 1)W MW \u22121 /2 \u2212 1.\n\n(2.3)\n\nWhen the boundary line has a kink (such as in fig. 1) NConf is no longer given exactly\nby (2.3). However, it is obvious that NS (W + 1) \u2264 NConf \u2264 NS (W ) so from (2.2) we\nsee that asymptotically NConf (W ) grows like 3W . Since a calculation using rectangles of\nwidths \u2264 W yields the number of SAW\nup to n = 4W it follows that the complexity of\n\u221a\n4\nn\nthe algorithm is T (n) \u221d \u03bb with \u03bb = 3 = 1.316 . . ..\n10\n\n\fThe pruned algorithm is much too difficult to analyse exactly. So all we can give\nis a numerical calculation of the growth in the number of configurations with n. That\nis obtained by just running the SAW algorithm and measuring the maximal number of\nconfigurations generated for different values of n. The resulting\u221agraph is shown in fig. 2.\nThe straight line, drawn as a guide to the eye, has slope \u03bb = 4 3 and thus corresponds\nto the exponential growth of the CEG algorithm. From this figure it is clear that the\ncomputational complexities of the two algorithms are almost identical. A closer look at\nthe actual numbers does however reveal that the pruned algorithm appears to have a\nslightly higher value of \u03bbp . Indeed it appears that increasing n by 8 increases the\n\u221a number\nof configurations by close to a factor of 10 (rather\u221athan the 9 expected if \u03bbp = 4 3). This\nwould mean that for the pruned algorithm \u03bbp \u2248 8 10 = 1.3335 . . ..\nThe observed value of \u03bbp means that the CEG algorithm is asymptotically superior\nto the pruning algorithm, so that for very large values of n it will be not only be faster\nbut require less memory as well. However for small n the pruning algorithm is highly\ncompetitive and can in fact use significantly less memory. This is because the CEG\nalgorithm uses a two parameter generating function so memory requirements are \u221d n2 \u03bbn .\nFor the pruning algorithm memory growth is \u221d \u03bbnp , rather than what one may naively\nhave thought \u221d n\u03bbnp (see comments at the end of the previous section). More concretely,\nwe can mention that the calculation in [6] of SAWs up to to n = 51 required 10GB of\nmemory. The pruning algorithm can do the same job using less than 150MB of memory.\n\n2.5\n\nParallelization\n\nThe transfer-matrix algorithms used in the calculations of the finite lattice contributions\nare eminently suited for parallel computations. The bulk of the calculations for this paper\nwere performed on the facilities of the Australian Partnership for Advanced Computing\n(APAC). The APAC facility is a HP Alpha server cluster with 125 ES45's each with four\n1 Ghz chips for a total of 500 processors in the compute partition. Each server node has\nat least 4 Gb of memory. Nodes are interconnected by a low latency high bandwidth\nQuadrics network.\nThe most basic concern in any efficient parallel algorithm is to minimise the communication between processors and ensure that each processor does the same amount of\nwork and uses the same amount of memory. In practice one naturally has to strike some\ncompromise and accept a certain degree of variation across the processors.\nOne of the main ways of achieving a good parallel algorithm using data decomposition\nis to try to find an invariant under the operation of the updating rules. That is we seek\nto find some property of the configurations along the boundary line which does not alter\nin a single iteration. The algorithm for the enumeration of SAWs is quite complicated\nsince not all possible configurations occur due to pruning and an update at a given set\nof edges might change the state of an edge far removed, e.g., when two lower loop ends\nare joined we have to relabel one of the associated upper loop ends as a lower loop end\nin the new configuration. However, there is still an invariant since any edge not directly\ninvolved in the update cannot change from being empty to being occupied and vice versa.\nThat is only the kink edges can change their occupation status. This invariant allows\nus to parallelise the algorithm in such a way that we can do the calculation completely\nindependently on each processor with just two redistributions of the data set each time an\nextra column is added to the lattice. We have already used this scheme for SAPs [16] and\n11\n\n\flattice animals [15] and refer the interested reader to these publications for further detail.\nOur parallelisation scheme is also very similar to that used by Conway and Guttmann\n[6, 12].\n\n2.6\n\nMetric properties\n\nIn a recent paper [14] we demonstrated that one can use transfer matrix techniques to\ncalculate the radius of gyration of SAPs. Below we show how this work can be extended\nto calculate the metric properties of SAWs.\n2.6.1\n\nRadius of gyrations\n\nWe define the radius of gyration according to the vertices of the SAW. Note that the\nnumber of vertices is one more than the number of steps. The radius of gyration of n + 1\npoints at positions ri is\nX\nX\nX\n(xi xj + yi yj ).\n(2.4)\n(x2i + yi2) \u2212 2\n(n + 1)2 hRg2 in =\n(ri \u2212 rj )2 = n\ni>j\n\ni\n\ni>j\n\nThis last expression is suitable for a transfer matrix calculation. We actually calculate the coefficients of the generating function (1.4b), (n + 1)2 cn hRg2 in . In order to\ndo this we have to maintain five partial generating functions for each possible boundary\nconfiguration, namely\n\u2022 C(u), the number of (partially completed) SAWs.\n\u2022 Xg2 (u), the sum over SAWs of the squared components of the distance vectors.\n\u2022 Xg (u), the sum of the x-component of the distance vectors.\n\u2022 Yg (u), the sum of the y-component of the distance vectors.\n\u2022 XYg (u),P\nthe sum of the 'cross' product of the components of the distance vectors,\nthat is, i>j (xi xj + yi yj ).\n\nAs the boundary line is moved to a new position each target configuration S might\nbe generated from several sources S \u2032 in the previous boundary position. The partial\ngeneration functions are updated as follows, with (x, y) being the coordinates of the\nnewly added vertex:\nC(u, S) =\n\nX\n\n\u2032\n\nun C(u, S \u2032),\n\nS\u2032\n\nXg2 (u, S) =\n\nX\n\n\u2032\n\nun [Xg2 (u, S \u2032) + \u03b4g (x2 + y 2)C(u, S \u2032)],\n\nS\u2032\n\nXg (u, S) =\n\nX\n\n\u2032\n\nun [Xg (u, S) + \u03b4g xC(u, S \u2032 )],\n\nS\u2032\n\nYg (u, S) =\n\nX\n\n\u2032\n\nun [Yg (u, S) + \u03b4g yC(u, S \u2032)],\n\nS\u2032\n\nXYg (u, S) =\n\nX\n\n\u2032\n\nun [XYg (u, S \u2032 ) + \u03b4g xXg (u, S \u2032) + \u03b4g yYg (u, S \u2032)],\n\nS\u2032\n\n12\n\n(2.5)\n\n\fwhere n\u2032 is the number of steps added to the SAW and \u03b4g = 0 if the new vertex is empty\n(has degree 0), \u03b4g = 1 if the new vertex is occupied (has degree > 0).\nFinally, when valid SAWs are completed, the partial generating functions are added\nto running totals for each case, and the results for coefficients in the generating function\nfor the radius of gyration is:\n(n + 1)2 cn hRg2 in = nhXg2 in \u2212 2hXYg in .\n2.6.2\n\n(2.6)\n\nEnd-to-end distance\n\nThe updating rules for the end-to-end distance are very similar to those for the radius of\ngyration except that we 'count' only the degree-1 vertices. We again maintain five partial\ngenerating functions for each possible boundary configuration, namely\n\u2022 C(u), the number of (partially completed) SAWs.\n\u2022 Xe2 (u), the sum over SAWs of the squared components of the end-point vectors.\n\u2022 Xe (u), the sum of the x-component of the end-point vectors.\n\u2022 Ye (u), the sum of the y-component of the end-point vectors.\n\u2022 XYe (u), the sum of the 'cross' product of the components of the end-point vectors.\nThe partial generation functions are updated as described above (2.5) except that the\ncorresponding quantity \u03b4e = 0 if the new vertex has degree 0 or 2, while \u03b4e = 1 if the new\nvertex has degree 1.\nThe results for coefficients in the generating function for the end-to-end distance is:\ncn hRe2 in = hXe2 in \u2212 2hXYe in .\n2.6.3\n\n(2.7)\n\nMean-square monomer distance from end points\n\nIn order to calculate the mean-square distance of a monomer from the end points we have\nto introduce an additional partial generating function\n\u2022 XYm (u), the sum of the 'cross' product of the components of the end-points and\ndistance vectors.\nThis is updated as follows:\nXYm (u, S) =\n\nX\n\n\u2032\n\nun [XYm (u, S \u2032) + \u03b4g xXe (u, S \u2032) + \u03b4g yYe (u, S \u2032)\n\nS\u2032\n\n+ \u03b4e xXg (u, S \u2032) + \u03b4e yYg (u, S \u2032)].\n\n(2.8)\n\nThe results for the coefficients in the generating function for the mean-square monomer\ndistance from end points is :\ncn hRe2 im = (n \u2212 1)hXe2 in + 2hXg2in \u2212 2hXYmin .\n13\n\n(2.9)\n\n\f2.7\n\nFurther details\n\nFinally a few remarks of a more technical nature. The number of contributing configurations becomes very sparse in the total set of possible states along the boundary line and\nas is standard in such cases one uses a hash-addressing scheme. Since the integer coefficients occurring in the series expansion become very large, the calculation was performed\nusing modular arithmetic [19]. This involves performing the calculation modulo various\nintegers pi and then reconstructing the full integer coefficients at the end. The pi are\ncalled moduli and must be chosen so they are mutually prime, e.g., none of the pi have a\ncommon divisor. The Chinese remainder theorem ensures that any integer has a unique\nrepresentation in terms of residues. If the largest absolute values occurring in the final\nexpansion is m, then we have to use a number of moduli k such that p1 p2 * * * pk /2 > m.\nSince we are using a heavily loaded shared facility CPU time was more of an immediate\nlimitation than memory. So we used the moduli p0 = 262 and p1 = 262 \u2212 1, which allowed\nus to represent pn correctly just using these two moduli.\nThe calculation of the metric properties require a lot more memory for the generating\nfunctions, and involves multiplication with quite large integers, so in this case we used\nprime numbers of the form 230 \u2212 ri for the moduli pi . Up to 4 primes were needed to\nrepresent the coefficients correctly.\nWe were able to extend the series for the square lattice SAW generating function from\n51 terms to 71 terms using at most 100Gb of memory. The calculations requiring the most\nresource were at widths 24\u201329. These cases were done using 128 processors and took from\n16 to 26 hours each. We also calculated the metric properties of SAWs up to length 59,\nthus extending these series from length 32 obtained previously using direct enumeration.\nIn total the calculations used about 50000 CPU hours.\nIn table 2 we list the number of SAWs from length 52 to 71. The number of SAWs up\nto length 51 are tabulated in [12] and [1] (this paper also tabulates the metric properties\nand several other series). The numbers are also available from our home page.\nTable 2: The number, cn , of embeddings of n-step SAWs on the square lattice. Only\nterms for n > 51 are listed.\nn\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\ncn\n37325046962536847970116\n99121668912462180162908\n263090298246050489804708\n698501700277581954674604\n1853589151789474253830500\n4920146075313000860596140\n13053884641516572778155044\n34642792634590824499672196\n91895836025056214634047716\n243828023293849420839513468\n\nn\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n14\n\ncn\n646684752476890688940276172\n1715538780705298093042635884\n4549252727304405545665901684\n12066271136346725726547810652\n31992427160420423715150496804\n84841788997462209800131419244\n224916973773967421352838735684\n596373847126147985434982575724\n1580784678250571882017480243636\n4190893020903935054619120005916\n\n\f3\n\nAnalysis of the series\n\nTo obtain the singularity structure of the generating functions we used the numerical\nmethod of differential approximants [10]. The functions have critical points at uc with\nexponents as in (1.1b)-(1.5b). Our main objective is to obtain accurate estimates for the\nconnective constant \u03bc and the critical exponents \u03b3 and \u03bd. In particular we confirm to a\nvery high degree of precision the conjectured exact values of the exponents.\nOnce the exact values of the exponents have been confirmed we turn our attention\nto the \"fine structure\" of the asymptotic form of the coefficients. In particular we are\ninterested in obtaining accurate estimates for the amplitudes A, C, D and E. We do this\nby fitting the coefficients to the form given by (1.1a)-(1.5a). In this case our main aim\nis to test the validity of the predictions for the amplitude combinations mentioned in the\nIntroduction.\n\n3.1\n\nThe SAW generating function\n\nIn Table 3 we list estimates for the critical point uc and exponent \u03b3 of the series for\nthe square lattice SAW generating function. The estimates were obtained by averaging\nvalues obtained from second and third order differential approximants. For each order\nL of the inhomogeneous polynomial we averaged over those approximants to the series\nwhich used at least the first 60 terms of the series. The error quoted for these estimates\nreflects the spread (basically one standard deviation) among the approximants. Note that\nthese error bounds should not be viewed as a measure of the true error as they cannot\ninclude possible systematic sources of error. Based on these estimates we conclude that\nuc = 0.379052274(4) and \u03b3 = 1.343745(15). The estimate for uc is compatible with the\nmuch more accurate estimate uc = 0.37905227773(7) obtained from the analysis of the\nSAP generating function [16]. The analysis adds further support to the already convincing\nevidence that the critical exponent \u03b3 = 43/32 = 1.34375 exactly. However, we do observe\nthat both the central estimates for both uc and \u03b3 are systematically very slightly lower\nthan the expected values.\nTable 3: Estimates for the critical point uc and exponent \u03b3 obtained from second and third\norder differential approximants to the series for square lattice SAW generating function.\nL is the order of the inhomogeneous polynomial.\nL\n0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n\nSecond order DA\nuc\n\u03b3\n0.3790522679(60)\n1.343735(29)\n0.3790522729(11)\n1.3437388(23)\n0.3790522720(13)\n1.3437387(32)\n0.37905227192(81)\n1.3437369(24)\n0.3790522733(15)\n1.3437395(24)\n0.3790522739(30)\n1.343744(12)\n0.3790522740(19)\n1.3437404(34)\n0.3790522738(13)\n1.3437398(22)\n0.3790522739(12)\n1.3437403(20)\n0.3790522734(14)\n1.3437398(25)\n0.3790522749(32)\n1.3437437(87)\n\nThird order DA\nuc\n\u03b3\n0.3790522735(11)\n1.3437397(18)\n0.3790522752(11)\n1.3437427(22)\n0.3790522756(27)\n1.3437438(61)\n0.3790522751(27)\n1.3437429(61)\n0.3790522752(27)\n1.3437434(63)\n0.3790522751(22)\n1.3437430(39)\n0.3790522755(63)\n1.343748(11)\n0.3790522738(25)\n1.3437406(37)\n0.3790522733(39)\n1.3437408(53)\n0.3790522753(19)\n1.3437433(41)\n0.3790522755(25)\n1.3437435(78)\n\nWhen analysing series it is always problematic to get a reliable error estimate. So in\ntrying to confirm, as we are here, the exact value of a critical exponent, it is often useful\n15\n\n\f1.34380\n\n1.34376\n\n1.34375\n1.34375\n\n1.34370\n\n\u03b3\n\n1.34374\n\n1.34365\n\n1.34373\n0.379052270\n\n0.379052275\nuc\n\n0.379052280\n\n1.34360\n40\n\n45\n\n50\n\n55\n\n60\n\n65\n\n70\n\n75\n\nNumber of Terms\n\nFigure 3: Estimates for \u03b3 vs. uc (left panel) and \u03b3 vs. the number of terms used by the\ndifferential approximant (right panel).\nto plot the behaviour of the estimates against both uc and the number of terms used by\nthe differential approximants. In this way it often possible to gauge more clearly whether\nor not the high-order approximants have settled down to the limiting value of the true\nexponent. In fig. 3 we carry out such an analysis. Each point in the left panel correspond\nto estimates for uc and \u03b3 obtained from a third order differential approximant. The right\npanel shows the estimates of \u03b3 but now plotted against the number of terms used by the\ndifferential approximant. The straight lines indicate the expected exact value of \u03b3 and\nthe highly accurate estimate of uc obtained from the analysis of the SAP series. From\nthe plot in the right panel we can see that the estimates of \u03b3 still exhibits a certain up\nwards drift as the number of terms in the approximants increase. So the estimates of \u03b3\nhave not yet settled at their limiting value, but there can be no doubt that the predicted\nexact value of \u03b3 is fully consistent with the estimates. In the left panel we observe that\nthe (uc , \u03b3)-estimates fall in a narrow range. Note that this range does not include the\nintersection point between the exact \u03b3 and the precise uc estimate. This is probably a\nreflection of the lack of 'convergence' to the true limiting values. This view is further\nsupported by repeating the plot of fig. 3, but only using those approximants using a\nnumber of terms is a prescribed interval, which we choose as 51-55, 56-60, 61-65, and\n65-71. This corresponds to looking at the plots one would have obtained had the series\nonly been known up to the lengths 55, 60, 65 and 71, respectively. These plots show that\nas more terms are included the (uc , \u03b3)-estimates move closer and closer to the expected\nintersection point. This drift is again a clear indication that the estimates have not yet\nsettled at the true limiting values.\n\n3.2\n\nThe metric properties\n\nWe now turn our attention to the metric properties. The generating functions are expected to have a singularity at uc where the end-to-end distance (1.3b) has exponent\n\u03b3+2\u03bd = 91/32 = 2.84375, the radius of gyration (1.4b) has exponent \u03b3+2\u03bd+2 = 155/32 =\n16\n\n\fTable 4: Estimates for the critical point uc and critical exponents obtained from second\nand third order differential approximants to the series for the end-to-end distance, radius\nof gyration, and monomer distance from the end point.\nL\n0\n2\n4\n6\n8\n10\nL\n3\n0\n2\n4\n6\n8\n10\nL\n0\n2\n4\n6\n8\n10\n\nRe (u)\nSecond order DA\nuc\n\u03b3 + 2\u03bd\n0.379052003(90)\n2.84324(62)\n0.379051985(57)\n2.84301(96)\n0.379052046(81)\n2.84345(18)\n0.379052034(80)\n2.84329(39)\n0.379052054(69)\n2.8430(19)\n0.379052035(67)\n2.84329(23)\nRg (u)\nSecond order DA\nuc\n\u03b3 + 2\u03bd + 2\n0.3790522317(19)\n4.8436019(22)\n0.3790522317(26)\n4.8436017(29)\n0.3790522324(41)\n4.8436024(45)\n0.3790522290(94)\n4.843598(11)\n0.379052225(15)\n4.843595(16)\n0.3790522282(21)\n4.8435978(24)\nRm (u)\nSecond order DA\nuc\n\u03b3 + 2\u03bd + 1\n0.379052045(58)\n3.84321(11)\n0.379052056(37)\n3.843256(63)\n0.379052044(70)\n3.84323(10)\n0.379052050(73)\n3.84322(10)\n0.379052081(99)\n3.84329(17)\n0.379052069(95)\n3.84326(17)\n\nThird order DA\nuc\n\u03b3 + 2\u03bd\n0.379052101(69)\n2.84333(19)\n0.379052116(58)\n2.84336(11)\n0.379052113(75)\n2.84336(10)\n0.379052119(86)\n2.84334(19)\n0.379052115(75)\n2.84337(33)\n0.379052138(66)\n2.84338(11)\nThird order DA\nuc\n\u03b3 + 2\u03bd + 2\n0.3790522289(11)\n4.8435986(13)\n0.3790522295(10)\n4.8435992(11)\n0.3790522289(22)\n4.8435986(23)\n0.3790522284(23)\n4.8435980(26)\n0.3790522294(43)\n4.8435992(48)\n0.3790522301(20)\n4.8436000(24)\nThird order DA\nuc\n\u03b3 + 2\u03bd + 1\n0.379052131(39)\n3.843345(61)\n0.379052118(57)\n3.843327(93)\n0.379052107(68)\n3.84332(10)\n0.379052088(51)\n3.843281(96)\n0.379052081(52)\n3.843274(95)\n0.379052135(55)\n3.843370(86)\n\n4.84375, and the mean square monomer distance from the end points (1.5b) has exponent\n\u03b3 +2\u03bd +1 = 123/32 = 3.84375. In table 4 we list the estimates obtained from a differential\napproximant analysis of these series. In summary we see that applying differential approximants to the metric series yields for the end-to-end distance uc = 0.37905205(15) and\n2\u03bd = 2.8434(4), the radius of gyration yields uc = 0.379052230(5) and 2\u03bd +2 = 4.84360(2),\nand the monomer distance yields uc = 0.3790521(1) and 2\u03bd + 1 = 3.84335(15). We immediately note that the exponent estimates are systematically lower that the expected exact\nvalues. Only the end-to-end distance is marginally consistent with the expected value,\nwhile there is a considerable discrepancy between the radius of gyration estimate and the\nexpected value (similar though less pronounced for the monomer distance). However, we\nalso note that the uc estimates are quite far from the SAP estimate (in which we have\nconsiderable confidence) uc = 0.37905227773(7). So obviously the metric series are not\nthat well behaved and might have large corrections to scaling.\nAs for the SAW generating function, we find it useful to plot the estimates for the\ncritical exponents vs. uc and the number of terms. This we have done in fig. 4. Clearly\nthe estimates from the end-to-end distance have not yet converged and it is quite possible\nthat the exponent estimates will eventually converge to the expected value (see top left\npanel). Also in the top right panel it is quite possible that the estimates will approach\nthe point given by the intersection of the exact exponent value and the precise uc value.\nThe behaviour of the estimates for radius of gyration and monomer distance series are far\nmore unsettling. In particular, the exponent estimates from the radius of gyration series\nappears well converged to a value 4.84360 with a narrow spread which clearly does not\n17\n\n\f2.8438\n\n2.8440\n\n2.8436\n\n2.8435\n\n\u03b3 +2\u03bd\n\n2.8434\n\n2.8430\n\n2.8432\n\n2.8425\n\n2.8430\n0.3790519 0.3790520 0.3790521 0.3790522 0.3790523\n\n2.8420\n30\n\n4.8438\n\n4.8440\n\n40\n\n50\n\n60\n\n40\n\n50\n\n60\n\n40\n\n50\n\n60\n\n4.8439\n4.8437\n4.8438\n\u03b3 +2\u03bd +2\n\n4.8437\n4.8436\n4.8436\n\n4.8435\n0.3790521 0.3790522 0.3790523 0.3790524 0.3790525\n\n4.8435\n30\n\n3.8438\n\n3.8440\n\n3.8437\n3.8435\n3.8436\n\u03b3 +2\u03bd +1\n\n3.8430\n\n3.8435\n3.8434\n\n3.8425\n3.8433\n3.8432\n0.3790520 0.3790521 0.3790522 0.3790523 0.3790524\nuc\n\n3.8420\n30\n\nNumber of Terms\n\nFigure 4: Plots of estimates for the critical exponents vs. the critical point (left panels)\nand critical exponents vs. number of terms (right panels) obtained form third order\ndifferential approximants to the generating functions Re (u) (top panels), Rg (u) (middle\npanels) and Rm (u) (bottom panels).\n18\n\n\finclude the expected exact value 4.84375 and in the plot of the exponent vs. uc (middle\nleft panel) the estimates are quite far from the expected intersection. Similar remarks\nhold for the monomer distance (bottom panels) though convergence and discrepancy with\nexpected values is less pronounced. Furthermore, the behaviour of the radius of gyration\nseries is very different to the other series. In particular we note that in the plots of the\nexponents vs. the number of terms (left panels) the estimates from the end-to-end and\nmonomer distance seems to increase monotonically to wards the expected value, while\nthe estimates from the radius of gyration starts out above the expected value, then cross\nthe expected value before apparently settling below the expected value. This behaviour is\nquite puzzling. Let us just note that if we look at the similar plots for the SAW generating\nfunction (fig. 3) it is clear that convergence has not been achieved at n = 59 and not yet\neven at n = 71. It would therefore be surprising if we should not see a further drift in the\nexponent estimates for the metric properties with longer series.\n\n1.50006\n\n3.505\n3.504\n\n1.50004\n\n3.503\n1.50002\n\n2\u03bd +2\n\n2\u03bd\n\n3.502\n\n1.50000\n3.501\n1.49998\n\n1.49996\n20\n\n3.500\n\n30\n\n40\n\n50\n\n60\n\nNumber of Steps\n\n3.499\n20\n\n30\n\n40\n\n50\n\n60\n\nNumber of Steps\n\nFigure 5: Plots of estimates of the critical exponents versus the number of terms obtained\nform third order differential approximants to the functions Re (u)/(uC(u)) (left panel) and\nRg (u)/(uC(u)) (right panel).\nFortunately, we have the possibility of analysing other series involving the metric\nproperties. We can look directly at the generating function with coefficients hRe2 in , and\nso on. While this has the advantage that we know that these series have a critical point\nat uc = 1 it turns out that the estimates of the critical exponents, \u22122\u03bd \u2212 1 in all cases,\nbehave in exactly the same manner as the series for the original generating functions.\nA second, and as we shall see much more successful approach, is to take the original\nseries and divide them by the SAW generating function. That is we study the series\nRe (u)/(u \u2217 C(u)) \u221d (u \u2212 uc )\u22122\u03bd , and so on, where again uc = 1/\u03bc. We won't go through\nall the details here. Suffice to say that applying differential approximants to the resulting\nseries yields for the end-to-end distance series uc = 0.37905229(2) and 2\u03bd = 1.50002(3),\nthe radius of gyration series yields uc = 0.3790526(4) and 2\u03bd + 2 = 3.5006(4), and the\nmonomer distance series yields uc = 0.3790524(2) and 2\u03bd + 1 = 2.5002(4). This clearly\nconfirms that \u03bd = 3/4, exactly. We notice that the error estimates of the modified series\n19\n\n\fis quite different to the original series. The original end-to-end series has the largest error\nestimate of the three while the modified end-to-end series has the smallest error estimate.\nThe opposite happens for the radius of gyration series. The quite different behaviour of\nthese series, as compared to the original ones, is probably even more clearly illustrated\nin fig. 5 where we have plotted the exponent estimates vs. the number of terms for the\nmodified end-to-end and radius of gyration series. Clearly, the estimates from both of\nthese series appear not yet to have settled at their limiting values, but it would seem\nthat they are converging to wards the expected exponent values. Note the very different\nbehaviour of the original and modified radius of gyration series. So obviously dividing\nby the SAW generating function has a dramatic effect on the metric series. We can only\nguess that this procedure leads to modifications in the correction-to-scaling behaviour\nthus altering dramatically the convergence properties of the series.\n\n3.3\n\nNon-physical singularities\n\nThe generating functions have singularities on the negative axis at u\u2212 = \u22121/\u03bc = \u2212xc .\nThe exponents at u\u2212 are compatible with simple exact values. For the SAW generating\nfunction the exponent is 1/2, for the end-to-end generating function (1.3b) the exponent\nis also 1/2, for the radius of gyration generating function (1.3b) the exponent is \u22123, while\nfor the monomer distance generating function (1.5b) the exponent is \u22122.\n\n3.4\n\nCorrection-to-scaling exponent\n\nThe correction-to-scaling exponent for SAWs is exhaustively studied in a recent paper\n[1] using series analysis and Monte Carlo simulations. In particular we performed a very\ncareful and detailed analysis of the of the 59 step series for the square lattice SAW counts\nand metric properties and a 40 step series for the triangular lattice. In that study of\nthe SAW correction-to-scaling exponents, a consistent picture emerged. We presented\ncompelling evidence that the first non-analytic correction term in the generating function\nfor SAWs and SAPs is \u22061 = 3/2, as predicted by Nienhuis [25, 26]. We found no evidence\nfor the presence of an exponent \u22061 = 11/16 in SAWs and SAPs on the square and\ntriangular lattices, as proposed by Saleur [30].\nOur method of analysis, both here and in [1], is based on direct fitting to the expected asymptotic form. Obviously (1.1a) only gives the leading term in the asymptotic\nexpansion. We have to add in both analytic and non-analytic corrections to scaling. Furthermore, we have to take account of the presence of the singularity at u\u2212 = \u22121/\u03bc. We\nthus expect cn to have an asymptotic expansion of the form\ncn \u223c \u03bcn n\u03b3\u22121 [a0 +\n\nk\nm\nX\nX\nai\nbi\nn \u03b1\u22122\n]\n+\n(\u2212\u03bc)\nn\n[b\n+\n],\n0\n\u2206i\n\u0393i\nn\nn\ni=1\ni=1\n\n(3.1)\n\nwhere \u03b1 is the critical exponent occurring in the polygon generating function.\nWe estimate the coefficients ai and bi , by inserting the estimated value of \u03bc, the\nexact values of \u03b3 and \u03b1, and assumed values of \u2206i and \u0393i . The coefficients can then\nbe fitted to the assumed asymptotic form by solving a system of linear equations. By\nsteadily increasing the number of series coefficients, many estimates for the {ai } and {bi }\nare found. Provided the different estimates are consistent over series of different lengths\n20\n\n\fwe assume that they provide an acceptably accurate estimate of the actual asymptotic\ncoefficients.\nA noteworthy feature of the method is that, if a blatantly false exponent is given as\ninput (for example, specifying \u22061 = 1/2 for the two-dimensional SAW), the sequence of\namplitude estimates for the term corresponding to that exponent will converge rapidly\nto zero, giving a very strong signal that the exponent in question is absent. It was this\nfeature which was used to rule out \u22061 = 11/16.\nNote that one would expect a whole sequence \u2206j > \u22061 of non-analytic corrections\nto scaling, as well as so-called mixing terms involving the exponents \u03b3 and \u03b1 (see [1] for\ndetails). The first expected mixing term would give a contribution n\u221259/32 [1]. However,\nin practice this is indistinguishable from the n\u22122 term. Higher order corrections can\nlikewise not be detected since they make contributions well beyond the range of reasonable\nextrapolation.\n\n3.5\n\nAmplitudes\n\nIn our paper [1] we also obtained accurate amplitude estimates. Here we shall therefore\nonly briefly review these results then report on the slightly improved estimates for the\namplitudes of the SAW counts based on the extended 71 term series.\nGiven the value for the non-analytic correction-to-scaling exponent we more concretely\nchoose to fit fit to the form used in [1]:\ncn \u223c \u03bcn n11/32 [a0 + a1 /n + a2 /n3/2 + a3 /n2 + a4 /n5/2 + * * * ]\n+ (\u22121)n \u03bcn n\u22123/2 [b0 + b1 /n + b2 /n2 + b3 /n3 + * * * ].\n\n(3.2)\n\nFitting to this form we found [1], using the 59 term SAW counts, a0 = A = 1.1770425(5)\nas well as reasonably accurate estimates for a1 \u2013a3 and b0 \u2013b2 . For the metric properties\nwe found C = 0.77124(8), D = 0.108227(58)(5) and E = 0.33913(14). A similar analysis\nof the triangular lattice data yielded A = 1.183966(2), C = 0.71176(66), D = 0.09987(5)\nand E = 0.3130(5).\nTable 5: Estimates of universal amplitude combinations on some two-dimensional lattices.\nLattice\nD/C\nSquare [1, 16]\n0.140299(6)\nTriangular [1, 17] 0.140296(6)\nHoneycomb [21]\n0.1403(1)\nKagom\u00e9 [22, 23]\n0.140(1)\n\nE/C\n0.439647(6)\n0.439649(9)\n0.4397(2)\n0.440(1)\n\nBC/\u03c3a0\n0.21683(4)\n0.2169(2)\n0.2170(3)\n0.2144(25)\n\nF\n-0.000024(28)\n-0.000036(34)\n-0.00013(67)\n-0.0015(47)\n\nThe ratios D/C and E/C were also estimated by direct extrapolation of the relevant\nquotient sequence, using the following method [27]: Given a sequence {an } defined for\nn \u2265 1, assumed to converge to a limit a\u221e with corrections of the\nQnform an \u223c a\u221e (1 + b/n +\n. . .), we first\nconstruct\na\nnew\nsequence\n{h\n}\ndefined\nby\nh\n=\nn\nn\nm=1 am . The generating\nP\nn\n\u2212(1+b)\nfunction\nhn x \u223c (1 \u2212 a\u221e x)\n. Estimates for a\u221e and the parameter b can then\nbe obtained from differential approximants. In this way, we obtained the estimates [1],\n21\n\n\f1.1770430\n\n1.1770428\n\n1.1770430\n(4,4)\n(5,5)\n(6,6)\n(7,7)\n\n1.1770428\n\n1.1770426\n\n(6,6)\n(6,5)\n(6,4)\n\n1.1770426\n\nA\n\nA\n\n1.1770424\n\n1.1770424\n\n1.1770422\n\n1.1770422\n\n1.1770420\n0.000\n\n0.005\n\n0.010\n\n0.015\n\n0.020\n\n0.025\n\n0.030\n\n1.1770420\n0.010\n\n1/n\n\n0.015\n\n0.020\n\n1/n\n\nFigure 6: Plots of estimates for the leading amplitude A from various fits of cn to the\nassumed asymptotic expansion (3.1).\nD/C = 0.140299(6) and E/C = 0.439647(6) for the square lattice and D/C = 0.140296(6)\nand E/C = 0.439649(9) for the triangular lattice.\nThe amplitude estimates leads to a high precision confirmation of the CSCPS relation\n(1.6) F = 0.000024(25).\nIn Table 5 we have listed the estimates of various universal amplitude combinations,\nobtained from the work reported in this paper and elsewhere. As can be seen the estimates\nfor all lattices are in perfect agreement strongly confirming the universality of the various\ncombinations.\nFinally we turn to the estimation of the amplitude A using the new extended 71 term\nseries. As in previous work [14, 16] we find it very useful to plot the amplitude estimates\nvs. 1/n where cn is the last coefficient used by the fit. In fig. 6 we plot the estimates\nfor the leading amplitude A from various fits. The legend numbers (k, m) indicates the\nnumber of terms used in the fit by each part of the asymptotic expansion (3.1), using the\nexponents given in the explicit form (3.2). From the left panel we see a consistent trend\nemerging. As the number of terms used in (k, k)-fits is increased we see that the estimates\nsettle down and that fits using more terms display less curvature. We take this as a clear\nindication that the fitting procedure is robust and that the assumed asymptotic expansion\nis correct. The fits using 5, 6, and 7 terms each can clearly be extrapolated to a value\nA = 1.770423(1). In the right panel we plot amplitude estimates from (k, m)-fits with\nk = 6 and m = 6, 5 and 4. We do this merely to point out that clearly only (k, m)-fits\nwith m close to k are reliable. The (6, 4)-fit displays a pronounced oscillatory behaviour.\n\n4\n\nSummary and conclusion\n\nWe have presented a new algorithm for the enumeration of self-avoiding walks. Numerical data show that it has computational complexity only slightly worse than the\nConway-Enting-Guttmann algorithm [5]. This means that the CEG algorithm will be\nsuperior for enumerating very long SAWs. However, the new algorithm uses much less\n\n22\n\n\fmemory at shorter lengths and remains competitive at lengths attainable at present and\nin the foreseeable future. Furthermore the new algorithm can be used to calculate metric\nproperties such as the end-to-end distance, radius of gyration, and average distance of\nmonomers from the end points. We have used the algorithm to extend the series for the\nnumber of SAWs on the square lattice up to 71 steps and calculate the metric properties\nof SAWs up to 59 steps.\nAnalysis of the series yielded estimates of the critical exponents \u03b3 and \u03bd which confirmed to a high degree of accuracy the predicted exact values \u03b3 = 43/32 and \u03bd = 3/4.\nWe reported on results from a comprehensive analysis [1] of the series providing very firm\nand convincing evidence that the leading non-analytic correction to scaling is \u22061 = 3/2,\nas well as giving accurate estimates for the critical amplitudes. The amplitude estimates\nled to a high precision confirmation of the CSCPS relation (1.6) F = 0.\n\n5\n\nAcknowledgments\n\nIt is a pleasure to thank Tony Guttmann for a careful reading of the manuscript and many\nhelpful suggestions. The calculations presented in this paper would not have been possible\nwithout a generous grant of computer time on the server cluster of the Australian Partnership for Advanced Computing (APAC). We also used the computational resources of\nthe Victorian Partnership for Advanced Computing (VPAC). We gratefully acknowledge\nfinancial support from the Australian Research Council.\n\nReferences\n[1] Caracciolo S, Guttmann A J, Jensen I, Pelissetto A, Rogers A N and Sokal A D 2004\nCorrection-to-scaling exponents for two-dimensional self-avoiding walks in preparation\n[2] Caracciolo S, Pelissetto A and Sokal A D 1990 Universal distance ratios for twodimensional self-avoiding walks: corrected conformal invariance predictions J. Phys.\nA: Math. Gen. 23 L969\u2013L974\n[3] Cardy J L and Guttmann A J 1993 Universal amplitude combinations for selfavoiding walks, polygons and trails J. Phys. A: Math. Gen. 26 2485\u20132494\n[4] Cardy J L and Saleur H 1989 Universal distance ratios for two-dimensional polymers\nJ. Phys. A: Math. Gen. 22 L601\u2013L604\n[5] Conway A R, Enting I G and Guttmann A J 1993 Algebraic techniques for enumerating self-avoiding walks on the square lattice J. Phys. A: Math. Gen. 26 1519\u20131534\n[6] Conway A R and Guttmann A J 1996 Square lattice self-avoiding walks and corrections to scaling Phys. Rev. Lett. 77 5284\u20135287\n[7] Delest M P and Viennot G 1984 Algebraic languages and polyominoes enumeration\nTheor. Comput. Scie. 34 169\u2013206\n\n23\n\n\f[8] Enting I G 1980 Generating functions for enumerating self-avoiding rings on the\nsquare lattice J. Phys. A: Math. Gen. 13 3713\u20133722\n[9] Enting I G and Guttmann A J 1996 On the solvability of some statistical mechanics\nsystems Phys. Rev. Lett. 76 344\u2013377\n[10] Guttmann A J 1989 Asymptotic analysis of power-series expansions in Phase Transitions and Critical Phenomena (eds. C Domb and J L Lebowitz) (New York: Academic) vol. 13 pp. 1\u2013234\n[11] Guttmann A J 2000 Indicators of solvability for lattice models Discrete Math. 217\n167\u2013189\n[12] Guttmann A J and Conway A R 2001 Square lattice self-avoiding walks and polygons\nAnn. Comb. 5 319\u2013345\n[13] Guttmann A J and Yang Y S 1990 Universal distance ratios for 2d saws: series\nresults J. Phys. A: Math. Gen. 23 L117\u2013L119\n[14] Jensen I 2000 Size and area of square lattice polygons J. Phys. A: Math. Gen. 33\n3533\u20133543\n[15] Jensen I 2003 Counting polyominoes: A parallel implementation for cluster computing in Computational Science \u2013 ICCS 2003 (eds. P M A Sloot, D Abramson, A V\nBogdanov, J J Dongarra, A Y Zomaya and Y E Gorbachev) (Berlin: Springer) vol.\n2659 of Lecture Notes in Computer Science pp. 203\u2013212\n[16] Jensen I 2003 A parallel algorithm for the enumeration of self-avoiding polygons on\nthe square lattice J. Phys. A: Math. Gen. 36 5731\u20135745\n[17] Jensen I 2004 Self-avoiding walks and polygons on the triangular lattice In preparation\n[18] Jensen I and Guttmann A J 1999 Self-avoiding polygons on the square lattice J.\nPhys. A: Math. Gen. 32 4867\u20134876\n[19] Knuth D E 1969 Seminumerical Algorithms. The Art of Computer Programming, Vol\n2. (Reading, Mass: Addison Wesley)\n[20] Knuth D E 2001 Polynum and Polyslave the program is available from Knuth's Homepage at http://Sunburn.Stanford.EDU/\u223c knuth/programs.html#polyominoes\n[21] Lin K Y 2000 Universal amplitude combinations for self-avoiding walks and polygons\non the honeycomb lattice Physica A 275 197\u2013206\n[22] Lin K Y and Huang J X 1995 Universal amplitude ratios for self-avoiding walks on\nthe kagome lattice J. Phys. A: Math. Gen. 28 3641\u20133643\n[23] Lin K Y and Lue S J 1999 Universal amplitude combinations for self-avoiding polygons on the kagome lattice Physica A 270 453\u2013461\n[24] Madras N and Slade G 1993 The self-avoiding walk (Boston: Birkh\u00e4user)\n24\n\n\f[25] Nienhuis B 1982 Exact critical point and critical exponents of O(n) models in two\ndimensions Phys. Rev. Lett. 49 1062\u20131065\n[26] Nienhuis B 1984 Critical behavior of two-dimensional spin models and charge asymmetry in the coulomb gas J. Stat. Phys. 34 731\u2013761\n[27] Owczarek A L, Prellberg T, Bennett-Wood D and Guttmann A J 1994 Universal\ndistance ratios for interacting two-dimensional polymers J. Phys. A: Math. Gen. 27\nL919\u2013L925\n[28] Privman V and Redner S 1985 Tests of hyperuniversality for self-avoiding walks J.\nPhys. A: Math. Gen. 18 L781\u2013L788\n[29] Richard C, Guttmann A J and Jensen I 2001 Scaling function and universal amplitude\ncombinations for self-avoiding polygons J. Phys. A: Math. Gen. 34 L495\u2013L501\n[30] Saleur H 1987 Conformal invariance for polymers and percolation J. Phys. A: Math.\nGen. 20 455\u2013470\n\n25\n\n\f"}