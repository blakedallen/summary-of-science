{"id": "http://arxiv.org/abs/1106.5016v2", "guidislink": true, "updated": "2012-06-06T16:48:49Z", "updated_parsed": [2012, 6, 6, 16, 48, 49, 2, 158, 0], "published": "2011-06-24T17:07:12Z", "published_parsed": [2011, 6, 24, 17, 7, 12, 4, 175, 0], "title": "Calculating the renormalisation group equations of a SUSY model with\n  Susyno", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1106.5343%2C1106.2296%2C1106.3014%2C1106.6110%2C1106.0158%2C1106.3274%2C1106.6343%2C1106.3493%2C1106.3279%2C1106.1968%2C1106.4578%2C1106.0508%2C1106.2115%2C1106.4278%2C1106.5135%2C1106.1118%2C1106.3445%2C1106.0476%2C1106.4644%2C1106.0311%2C1106.5108%2C1106.2325%2C1106.5089%2C1106.3151%2C1106.0722%2C1106.2837%2C1106.4964%2C1106.2621%2C1106.3864%2C1106.4223%2C1106.0421%2C1106.1201%2C1106.2276%2C1106.2556%2C1106.4903%2C1106.5146%2C1106.1235%2C1106.0580%2C1106.2971%2C1106.4873%2C1106.4727%2C1106.0691%2C1106.0954%2C1106.3234%2C1106.4464%2C1106.1835%2C1106.4172%2C1106.2695%2C1106.2737%2C1106.3197%2C1106.1813%2C1106.5824%2C1106.0963%2C1106.2752%2C1106.4397%2C1106.2956%2C1106.0573%2C1106.2536%2C1106.0618%2C1106.0706%2C1106.5671%2C1106.2324%2C1106.0164%2C1106.4734%2C1106.1075%2C1106.6015%2C1106.5426%2C1106.5219%2C1106.5281%2C1106.5484%2C1106.3494%2C1106.5757%2C1106.5016%2C1106.0712%2C1106.1204%2C1106.4674%2C1106.3315%2C1106.4683%2C1106.4805%2C1106.5555%2C1106.0005%2C1106.4068%2C1106.5062%2C1106.5556%2C1106.5598%2C1106.0359%2C1106.4968%2C1106.5894%2C1106.3965%2C1106.3266%2C1106.2804%2C1106.6058%2C1106.4412%2C1106.5087%2C1106.2152%2C1106.2313%2C1106.5170%2C1106.3711%2C1106.4064%2C1106.5998%2C1106.0048&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Calculating the renormalisation group equations of a SUSY model with\n  Susyno"}, "summary": "Susyno is a Mathematica package dedicated to the computation of the 2-loop\nrenormalisation group equations of a supersymmetric model based on any gauge\ngroup (the only exception being multiple U(1) groups) and for any field\ncontent.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1106.5343%2C1106.2296%2C1106.3014%2C1106.6110%2C1106.0158%2C1106.3274%2C1106.6343%2C1106.3493%2C1106.3279%2C1106.1968%2C1106.4578%2C1106.0508%2C1106.2115%2C1106.4278%2C1106.5135%2C1106.1118%2C1106.3445%2C1106.0476%2C1106.4644%2C1106.0311%2C1106.5108%2C1106.2325%2C1106.5089%2C1106.3151%2C1106.0722%2C1106.2837%2C1106.4964%2C1106.2621%2C1106.3864%2C1106.4223%2C1106.0421%2C1106.1201%2C1106.2276%2C1106.2556%2C1106.4903%2C1106.5146%2C1106.1235%2C1106.0580%2C1106.2971%2C1106.4873%2C1106.4727%2C1106.0691%2C1106.0954%2C1106.3234%2C1106.4464%2C1106.1835%2C1106.4172%2C1106.2695%2C1106.2737%2C1106.3197%2C1106.1813%2C1106.5824%2C1106.0963%2C1106.2752%2C1106.4397%2C1106.2956%2C1106.0573%2C1106.2536%2C1106.0618%2C1106.0706%2C1106.5671%2C1106.2324%2C1106.0164%2C1106.4734%2C1106.1075%2C1106.6015%2C1106.5426%2C1106.5219%2C1106.5281%2C1106.5484%2C1106.3494%2C1106.5757%2C1106.5016%2C1106.0712%2C1106.1204%2C1106.4674%2C1106.3315%2C1106.4683%2C1106.4805%2C1106.5555%2C1106.0005%2C1106.4068%2C1106.5062%2C1106.5556%2C1106.5598%2C1106.0359%2C1106.4968%2C1106.5894%2C1106.3965%2C1106.3266%2C1106.2804%2C1106.6058%2C1106.4412%2C1106.5087%2C1106.2152%2C1106.2313%2C1106.5170%2C1106.3711%2C1106.4064%2C1106.5998%2C1106.0048&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Susyno is a Mathematica package dedicated to the computation of the 2-loop\nrenormalisation group equations of a supersymmetric model based on any gauge\ngroup (the only exception being multiple U(1) groups) and for any field\ncontent."}, "authors": ["Renato M. Fonseca"], "author_detail": {"name": "Renato M. Fonseca"}, "author": "Renato M. Fonseca", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1016/j.cpc.2012.05.017", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1106.5016v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1106.5016v2", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "Describes version 1.1 of the program (matches published version). The\n  program's webpage is in http://web.ist.utl.pt/renato.fonseca/susyno.html", "arxiv_primary_category": {"term": "hep-ph", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "hep-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1106.5016v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1106.5016v2", "journal_reference": null, "doi": "10.1016/j.cpc.2012.05.017", "fulltext": "CFTP/11-011\nJune 7, 2012\n\nCalculating the renormalisation group equations of a SUSY\nmodel with Susyno\n\narXiv:1106.5016v2 [hep-ph] 6 Jun 2012\n\nRenato M. Fonseca\nCentro de F\u00edsica Te\u00f3rica de Part\u00edculas, Instituto Superior T\u00e9cnico,\nUniversidade T\u00e9cnica de Lisboa, Av. Rovisco Pais 1, 1049-001 Lisboa, Portugal\nE-mail address: renato.fonseca@ist.utl.pt\n\nAbstract\nSusyno is a Mathematica package dedicated to the computation of the 2-loop renormalisation group equations of a supersymmetric model based on any gauge group (the only exception\nbeing multiple U(1) groups) and for any field content.\n\n1\n\nIntroduction\n\nSupersymmetry (SUSY) is an elegant and well known extension of the Standard Model (SM)\nwhich aims at solving or softening some of the SM theoretical and experimental shortcomings.\nSupersymmetric models based on Grand Unified Theories (GUTs) offer the appealing feature of\nbeing described by a unique gauge group and coupling constant; furthermore, the potential new\nsuperfields, as well as their dynamics, can provide answers to fundamental problems. For example\nSO(10) based models offer a natural explanation for neutrino masses and mixings via a type-I\nseesaw. This occurs since the spinor representation of the group contains a SM singlet superfield\n(with the appropriate quantum numbers). Even larger and/or more complex groups are often\nconsidered, for example E6 in string inspired models.\nThe analysis of the theoretical and phenomenological implications of SUSY GUT models requires a careful study of the evolution of the fundamental parameters from the high-energy scale\ndown to the electroweak scale, at which observables are computed and constraints applied. As\nsuch, knowledge of the renormalisation group equations (RGEs) is necessary. Although the RGEs\nof several models (e.g., MSSM, NMSSM) are already known [1, 3], for other SUSY extensions of\nthe SM complicated general equations must be used [1, 2].\nHere we describe Susyno, a Mathematica-based package that addresses this issue. The program\ntakes as input the gauge group, the representations (i.e., the chiral superfield content), the number\nof flavours/copies1 of each representation, and any abelian discrete symmetries (e.g., R-parity).\nSusyno then constructs the most general superpotential and soft-SUSY-breaking Lagrangian consistent with the field content and symmetries imposed. Once these elements have been derived,\nSusyno then computes the 2-loop \u03b2-functions of all the parameters of the model, which is its main\noutput.\n1\nThroughout this document, the word flavours is meant to convey the sense of copies or repetitions of a given\nrepresentation/field.\n\n1\n\n\fThere is another Mathematica package, SARAH [4], which works in a similar way for models\nbased on SU(n) gauge factor groups. However, Susyno is prepared to accept as working input any\ngauge group that does not contain more that one U(1) factor2 .\nThis document is organised as follows. Section 2 explains how to install the program and\nrun a first simple example (the MSSM). Sections 3 and 4 explain how to prepare the input and\nhow to read and interpret the output, also using as example the MSSM case. Finally, Section 5\nsummarises the tests conducted to validate the code.\n\n2\n\nInstallation and quick start\n\nSusyno works on Windows, Linux and Mac OS provided that Mathematica 7 (or a latter version)\nis installed. The program is obtainable from\nhttp://web.ist.utl.pt/renato.fonseca/susyno.html\nThe files LieGroups.m, SusyRGEs.m and Susyno.m are the core of the program. These and\nother auxiliary files can be found inside the folder Susyno, which must be extracted from the\ndownloaded Susyno-1.1.tar file to a location that is visible to Mathematica. Typing $Path in\nMathematica will show a complete list of acceptable locations. A good choice is to place the whole\nfolder (not just its contents) in\n(Mathematica base directory)/AddOns/Applications\n(note that in a Windows system the slashes \"/\" must be replaced by backslashes \"\\\"). The package\ncan be loaded by typing\n<\u200c< Susyno`\nin Mathematica's front end. A text message is returned, informing that a built-in help system\nprovides a detailed description of the program and its functions (see A). A tutorial is also included.\nThe Susyno lines below allow a simple and easy first run: the example consists of a possible\nway of writing the MSSM input.\nnormalisation = Sqrt[3/5];\nQ = {U1->1/6 normalisation, SU2->{1}, SU3->{1, 0}, NFlavours->3, DiscreteSym->-1};\nu = {U1->-2/3 normalisation, SU2->{0}, SU3->{0, 1}, NFlavours->3, DiscreteSym->-1};\nd = {U1->1/3 normalisation, SU2->{0}, SU3->{0, 1}, NFlavours->3, DiscreteSym->-1};\nL = {U1->-1/2 normalisation, SU2->{1}, SU3->{0, 0}, NFlavours->3, DiscreteSym->-1};\ne = {U1->normalisation, SU2->{0}, SU3->{0, 0}, NFlavours->3, DiscreteSym->-1};\nHu = {U1->1/2 normalisation, SU2->{1}, SU3->{0, 0}, NFlavours->1, DiscreteSym->1};\nHd = {U1->-1/2 normalisation, SU2->{1}, SU3->{0, 0}, NFlavours->1, DiscreteSym->1};\nmodel = {Q, u, d, L, e, Hu, Hd};\nBetaFunctions2L[model];\n2\n\nMultiple U(1) groups lead to \"U(1) mixing\" [5] which requires special care [6].\n\n2\n\n\fEvaluation of this simple code generates the 2-loop \u03b2-functions of the model (MSSM in this case).\nNotice that no external input or output files are used - everything happens on Mathematica's front\nend.\n\n3\n\nDefining a model\n\nA SUSY model contains two building blocks: a superpotential and a soft-SUSY-breaking Lagrangian. For a simple gauge group, a general superpotential can be written as\nW =\n\n1\n1 ijk\nY \u03a6i \u03a6j \u03a6k + \u03bcij \u03a6i \u03a6j + Li \u03a6i ,\n6\n2\n\n(1)\n\nwith \u03a6 denoting a chiral superfield, and where Y , \u03bc and L are dimensionless, mass, and mass2\nparameters, respectively. A generic soft-SUSY-breaking Lagrangian reads\n\u0013\n\u0012\n\u0013\n\u0012\n\u0001\n1\n1 ij\n1 ijk\ni\n2 i\n\u2217\nh \u03c6i \u03c6j \u03c6k + b \u03c6i \u03c6j + s \u03c6i + h.c. + m j \u03c6i \u03c6j +\nM \u03bb\u03bb + h.c.\n(2)\n\u2212 Lsof t =\n6\n2\n2\nwhere \u03bb is a gaugino field and \u03c6 denotes scalar fields. M (m2 ) correspond to gaugino (scalar) soft\nbreaking masses, while h, b and s denote trilinear, bilinear and linear soft breaking parameters.\nSusyno requires as input the list of chiral superfields (just fields from now on) of a model:\nmodel={field1, field2,...};\nFor each field, the user only needs to provide its defining elements. The syntax is\nfield={g1->g1_rep, g2->g2_rep, ..., NFlavours->nf, DiscreteSym->q};\nwhere the values to be filled are the following:\n\u2022 g1, g2, ... (gauge factor groups);\n\u2022 g1_rep, g2_rep, ... (representations of the field under each of the gauge factor groups);\n\u2022 nf (number of flavours);\n\u2022 q (charge under some discrete abelian symmetry).\nTo obtain the \u03b2-functions, the user must call BetaFunctions1L (or BetaFunctions2L for 2-loop\nresults):\nBetaFunctions1L[model]\nBetaFunctions2L[model]\nor\nBetaFunctions1L[model,Verbose->False];\nBetaFunctions2L[model,Verbose->False];\nif we do not wish to have the results printed on Mathematica's front end.\n3\n\n\fWith this information the program then builds internally the superpotential and the soft-SUSYbreaking Lagrangian using an algorithm to automatically name the parameters of the model (see\nSection 4). Assuming that the model contains parameters named X1, X2, ..., the program's output is\n(1)\n\n(1)\n\n(BetaFunctions1L)\n(BetaFunctions2L)\n\n{{X1, \u03b2X1 },{X2, \u03b2X2 },...}\n(2)\n(1)\n(2)\n(1)\n{{X1, \u03b2X1 , \u03b2X1 },{X2, \u03b2X2 , \u03b2X2 },...}\n\nthat is, a set of sublists each containing a parameter Xi, and the one-loop (one- and two-loop)\n(2)\n(1)\n(1)\n\u03b2-functions for its RG evolution: \u03b2Xi (\u03b2Xi , \u03b2Xi ).\nIn the following, we will look at each of the input elements mentioned above in greater detail.\n\n3.1\n\nGauge factor groups\n\nThe program needs to know the model's gauge group3 , which it extracts from each field object\nmentioned above. Therefore the gauge factor groups should be presented in the same order in all\nfields. In addition, U(1)'s must always come first. For the MSSM (for completeness, the superpotential and soft-SUSY-breaking Lagrangian of the MSSM are presented in B) we could write each\nfield as\nfield = {U1->U1_charge,SU2->SU2_rep,SU3->SU3_rep,...};\nWe may change the order of SU(2) and SU(3) but the U(1) factor must always come first.\nAny group can be used: all the possible gauge factor groups, as well as their corresponding Susyno\ninput are collected in Table 1.\nGauge factor group\nU(1)\nSU(n)\nSO(n)\nSp(2n)\nG2\nF4\nE6 , E7 , E8\n\nSusyno input\nU1\nSU2, SU3, SU4, SU5, ...\nSO3, SO5, SO6, SO7, ...\nSP2, SP4, SP6, ...\nG2\nF4\nE6, E7, E8\n\nTable 1: Gauge factor groups\nKeep in mind that despite its generality, Susyno only assigns to variables a finite number of\ngroups (for instance variable SO100 is not set). Should this ever become a problem, there is an\neasy method of circumventing it, discussed in C.\n\n3.2\n\nRepresentations\n\nAs mentioned before, Susyno is designed to accept an arbitrary field content so any representation\nof any gauge group is allowed. For U(1) factor groups, all we need are the hypercharges of each\nfield, which are just numbers4 . On the other hand, the representations of simple gauge groups\n3\nWe emphasise here that we are actually dealing with algebras, not groups. Nevertheless, we will adopt the\ncommon practice in high-energy physics of using the word group for both these concepts.\n4\nNotice that, while it is possible to have more than one hypercharge (i.e. more than one U(1) factor group), the\nformalism of Susyno is based on [1, 2], which do not include the effects of a possible U(1) mixing.\n\n4\n\n\fmust be specified by their Dynkin coefficients (see C for details). In Table 2 we list some of\nthe representations of SU(2), SU(3), SU(5) and SO(10) (Dynkin coefficients and corresponding\ndimensions).\nGroup\nSU(2)\n\nSU(3)\n\nSU(5)\n\nSO(10)\n\nRepresentation\nDynkin coefficients Dimension (Name)\n{0} 1 (Trivial/Singlet)\n{1} 2 (Fundamental/Doublet)\n{2} 3 (Adjoint/Triplet)\n{0,0} 1 (Trivial/Singlet)\n{1,0} 3 (Fundamental)\n{0,1} 3 (Anti-fundamental)\n{1,1} 8 (Adjoint)\n{0,0,0,0} 1 (Trivial/Singlet)\n{1,0,0,0} 5 (Fundamental)\n{0,0,0,1} 5 (Anti-fundamental)\n{0,1,0,0} 10\n{2,0,0,0} 15\n{0,0,0,2} 15\n{1,0,0,1} 24 (Adjoint)\n{0,0,0,0,0} 1 (Trivial/Singlet)\n{1,0,0,0,0} 10 (Fundamental)\n{0,0,0,0,1} 16 (Spinor)\n{0,0,0,1,0} 16 (Spinor's conjugate)\n{0,1,0,0,0} 45 (Adjoint)\n{2,0,0,0,0} 54\n{0,0,1,0,0} 120\n{0,0,0,0,2} 126\n{0,0,0,2,0} 126\n\nTable 2: List of some of the representations of SU(2), SU(3), SU(5) and SO(10)\nTo understand how the MSSM was specified in the example of Section 2, we just need the\nfollowing information from Table 2:\n\u2022 the Dynkin coefficients of the trivial and fundamental representations of SU(2): {0} and {1};\n\u2022 the Dynkin coefficients of the trivial, fundamental (3) and anti-fundamental (3) representations of SU(3): {0,0}, {1,0}, {0,1}.\nHence\nQ = {U1->1/6 normalisation, SU2->{1}, SU3->{1, 0}, ...};\nu = {U1->-2/3 normalisation, SU2->{0}, SU3->{0, 1}, ...};\nd = {U1->1/3 normalisation, SU2->{0}, SU3->{0, 1}, ...};\nL = {U1->-1/2 normalisation, SU2->{1}, SU3->{0, 0}, ...};\ne = {U1->normalisation, SU2->{0}, SU3->{0, 0}, ...};\nHu = {U1->1/2 normalisation, SU2->{1}, SU3->{0, 0}, ...};\nHd = {U1->-1/2 normalisation, SU2->{1}, SU3->{0, 0}, ...};\n\n5\n\n\fNotice that Susynoq\naccepts any normalisation of the hypercharges. In the sample code of Section 2,\n\nwe used the usual\n\n3.3\n\n3\n5\n\nfactor (from an embedding of the MSSM in an SU(5) based model).\n\nNumber of flavours and abelian discrete symmetries\n\nMany models contain repetitions of some of the representations of the gauge group. Instead of\nconsidering them distinct fields, we usually view these as different flavours of a single field and\nSusyno needs to know how many flavours there are in order to compute the \u03b2-functions. The user\nshould use the syntax NFlavours->... for this purpose. For example, in the MSSM we have\nQ = {..., NFlavours->3, ...};\nu = {..., NFlavours->3, ...};\nd = {..., NFlavours->3, ...};\nL = {..., NFlavours->3, ...};\ne = {..., NFlavours->3, ...};\nHu = {..., NFlavours->1, ...};\nHd = {..., NFlavours->1, ...};\nLet us consider another example: if we were to modify the MSSM to include m copies of Hu\nand Hd , we would write\nHu = {..., NFlavours->m, ...};\nHd = {..., NFlavours->m, ...};\nFinally, there are models in which we must forbid some couplings and in order to do that some\nabelian discrete symmetry is introduced. These symmetries are also a defining element of these\nmodels and as such each field's charge must be passed on to the program using the expression\nDiscreteSym->.... The MSSM is one such case; there is a Z2 symmetry known as R-parity so\nwe should write\nQ = {..., DiscreteSym->-1};\nu = {..., DiscreteSym->-1};\nd = {..., DiscreteSym->-1};\nL = {..., DiscreteSym->-1};\ne = {..., DiscreteSym->-1};\nHu = {..., DiscreteSym->1};\nHd = {..., DiscreteSym->1};\nFor the most general (R-parity violating) MSSM the first 5 lines must be replaced by\nQ\nu\nd\nL\ne\n\n=\n=\n=\n=\n=\n\n{...,\n{...,\n{...,\n{...,\n{...,\n\nDiscreteSym->1};\nDiscreteSym->1};\nDiscreteSym->1};\nDiscreteSym->1};\nDiscreteSym->1};\n\n6\n\n\fNote that the expressions NFlavours->... and DiscreteSym->... can be placed anywhere\nalong the definition of each field. They can even be omitted: if no NFlavours is written, the\nprogram will use the symbolic value nf[i] where i is the order by which a field is given; if there is\nno DiscreteSym then Susyno will consider that the field transforms trivially (charge equal to 1).\n\n4\n\nThe output of Susyno\n\nOnce all the input is provided, Susyno automatically builds the Lagrangian of a model, asking\nneither for names of fields nor names of parameters. On the one hand, inputting a model becomes\nvery easy, since it is not even necessary to know the exact number of its parameters. On the other\nhand, this renders the output hard to read (and hence not particularly user-friendly), since the\nnames of the parameters are chosen by the program.\nStill, provided we know the conventions used by the program, the notation used by Susyno can\nbe manually changed by the user (after the code is executed). We notice that in the present version\nof Susyno there are no custom built-in functions to export the results. Users who wish to do so\nmust do it manually or with the help of Mathematica's built-in functions CForm and FortranForm.\n\n4.1\n\nNaming of parameters\n\nSusyno assigns names to the parameters of a model in such a way that the user can identify which\nfields they are multiplying:\ny[field1, field2, field3, InvIndex, <flav1>, <flav2>, <flav3>]\nmu[field1, field2, InvIndex, <flav1>, <flav2>]\nl[field1, InvIndex, <flav1>]\nh[field1, field2, field3, InvIndex, <flav1>, <flav2>, <flav3>]\nb[field1, field2, InvIndex, <flav1>, <flav2>]\ns[field1, InvIndex, <flav1>]\nm2[field1, field2, InvIndex, <flav1>, <flav2>]\nA few comments concerning the above (output) tensors are in order:\n\u2022 y, mu, l, h, b, s and m2 can be easily identified with the different types of couplings and\ndimensionful parameters of the superpotential and the soft-SUSY-breaking Lagrangian;\n\u2022 field1, field2, field3 are the indices of the fields entering a given coupling, or soft breaking\nterm. For example, with model={Q, u, d, L, e, Hu, Hd} we have Q=1, u=2, d=3, L=4,\ne=5, Hu=6, Hd=7. The up-quark Yukawa couplings would then be y[1,2,6,...];\n\u2022 There is the possibility that the product of 3 representations, R1 \u2297 R2 \u2297 R3 , contains more\nthan one invariant. Therefore we need InvIndex=1,2,... to distinguish them. This is rare\nthough, so in most cases (e.g., the MSSM) InvIndex=1 for all parameters. Notice that in\nlinear and bilinear terms, R1 and R1 \u2297 R2 , this problem does not arise since there is at most\none invariant. However, for consistency Susyno still uses InvIndex in this case, although\nsetting its value to 1;\n\u2022 <flav1>, <flav2> , <flav3> are the flavour indices of field1, field2, field3. If any of\nthese fields has only one flavour, the corresponding index is omitted. Consider again the\nexample of the up-quark Yukawa couplings: we would have y[1,2,6,1,i,j,k] where i =\n7\n\n\fflavour of Q, j = flavour of u, k = flavour of Hu. Yet Hu only has one flavour so the correct\nparameter name is y[1,2,6,1,i,j].\nAdditionally, there are also the coupling constants and the gaugino masses:\ng[1], g[2], ...\nM[1], M[2], ...\nA list containing the matching of MSSM's standard notation parameters and Susyno assignements can be found in B.\n\n4.2\n\nThe full Lagrangian as used by the program\n\nKnowing the full Lagrangian can be important. As an example, consider a possible normalisation\nissue: how can we be sure that Susyno is correctly taking \u03bcHu * Hd as mu[6,7,1]Hu * Hd , and not\n-mu[6,7,1]Hu * Hd , 2mu[6,7,1]Hu * Hd or any other multiple? The way to solve such problems\nrelated to the normalisation of the parameters is to check the Lagrangian. This can be done using\nthe ShowLagrangian function:\nShowLagrangian[model]\n\b\nThis function returns the list of tensors Y, \u03bc, L, h, b, s, m2 . Note that Susyno never expands\nthe flavour indices of these tensors so the first, second and third indices are assumed to carry\nsymbolic flavours i (or none), j (or none), k (or none)5 . The argument (model) is the same as\nin the BetaFunctions1L and BetaFunctions2L functions. There is also a Verbose option (set to\nTrue by default) that prints the different parts of W and Lsof t :\n\u2022\n\n1 ijk\n\u03a6i \u03a6j \u03a6k\n6Y\n\n\u2022\n\n1 ijk\n\u03c6i \u03c6j \u03c6k\n6h\n\n(Y part), 21 \u03bcij \u03a6i \u03a6j (\u03bc part), Li \u03a6i (L part);\n\n(H part), 21 bij \u03c6i \u03c6j (B part), si \u03c6i (S part) and m2\n\n\u0001i\n\nj\n\n\u03c6i \u03c6\u2217j (M2 part).\n\nShowLagrangian is completely independent of BetaFunctions1L and BetaFunctions2L, so it can\nbe called at any time to generate the superpotential and soft-SUSY-breaking Lagrangian of a given\nmodel.\nFinally, notice that in order to build L it is necessary to assume a particular basis for the\nrepresentations/fields of the model. Quantities such as the \u03b2-functions clearly do not depend on\nthis choice. However, it is important to know that Susyno can use unconventional basis for the\nrepresentations. The following is a good example. According to the program, two fields, A={a[1],\na[2], a[3]} and B={b[1], b[2], b[3]}, transforming as 3 and 3 of SU(3) will form the invariant a[1]b[3]\n- a[2] b[2] + a[3]b[1], not a[1]b[1] + a[2] b[2] + a[3]b[3]. Both are valid expressions as long as they\nare used in a consistent way - it is just a matter of basis choice. Thus, when analysing the output of\nShowLagrangian we must distinguish between irrelevant basis choices and relevant normalisation\nconventions for the parameters. The \u03b2-functions are only sensitive to the latter ones.\n5\n\nThese flavour indices do not show up if the particular entry of the tensors we are considering is unflavoured. For\nexample the entry of the Y tensor related to the fields Q, d, Hd will depend on i (flavour of the first field, Q) and\nj (flavour of the second field, d) but not on k since the third field (Hd) is unflavoured. Notice also that exchanging\nfor example Hd with Q corresponds to having a different entry of the Y tensor: this is because the flavour of Q\n(now the third field) is assumed to be symbolically k instead of i.\n\n8\n\n\f5\n\nTests/validation of Susyno\n\nThe output of Susyno was confronted with the analysis of some models available in the literature.\nIn particular, the RGEs generated by Susyno were compared with the results for the MSSM [1],\nthe R-parity violating MSSM [7], the general NMSSM [3] and some SU(5)-based models [8].\nIn general the program's RGEs are consistent with the results collected in the above publications, but in some cases differences were found. These have been collected in the program's\nwebpage.\n\nAcknowledgments\nThe author would like to thank Jorge Rom\u00e3o and Ana M. Teixeira for the many suggestions and\nencouragement given. This work was supported by the Funda\u00e7\u00e3o para a Ci\u00eancia e a Tecnologia\nunder the grant SFRH/BD/47795/2008.\n\nA\n\nList of available functions\n\nAs in most programs, the code Susyno is spread over many internal functions. Due to their nature,\nsome of these functions may be useful on their own, and they were thus built in a user-friendly\nway, and are documented.\nBelow is the list of functions that can be called directly by the user in Mathematica's front-end,\nfollowed by a brief description. The built-in help system describes in detail how to use them.\n\u2022 Adjoint - Computes the Dynkin coefficients of the adjoint representation of a group;\n\u2022 BetaFunctions1L - Computes the 1-loop \u03b2-functions of a SUSY model;\n\u2022 BetaFunctions2L - Computes the 2-loop \u03b2-functions of a SUSY model;\n\u2022 CanonicalForm - Simplifies an expression written in Einstein's notation;\n\u2022 Casimir - Computes the quadratic Casimir of a representation;\n\u2022 CartanMatrix - Computes the Cartan matrix of any simple group;\n\u2022 DimR - Computes the dimension of a representation;\n\u2022 Invariants - Computes (in some basis) the invariant combination(s) of a product of one,\ntwo or three representations;\n\u2022 ListContract - Efficiently calculates traces of multi-index sparse tensors;\n\u2022 PositiveRoots - Computes the positive roots of a group;\n\u2022 ReduceRepProduct - Decomposes a direct product representation in its irreducible parts [9];\n\u2022 RepMatrices - Computes (in some basis) the explicit representation matrices;\n\u2022 ShowLagrangian - Generates the Lagrangian (W and Lsof t ) of a SUSY model;\n\u2022 Weights - Computes the weights of a representation, including degeneracy.\n\n9\n\n\fParameter\ng1 , g2 , g3\nM1 , M2 , M3\n(Yu )ij\n(Yd )ij\n(Ye )ij\n\u03bc\n(hu )ij\n(hd )ij\n(he )ij\n\u0010 B\u0011\nm2Q\n\u0001 ij\nm2u ij\n\u0001\nm2d ij\n\u0001\nm2L ij\n\u0001\nm2e ij\nm2Hu\nm2Hd\n\nSusyno's notation\ng[1], g[2], g[3]\nM[1], M[2], M[3]\ny[1,2,6,1,j,i]\ny[1,3,7,1,j,i]\ny[4,5,7,1,j,i]\nmu[6,7,1]\nh[1,2,6,1,j,i]\nh[1,3,7,1,j,i]\nh[4,5,7,1,j,i]\nb[6,7,1]\nm2[1,1,1,j,i]\nm2[2,2,1,i,j]\nm2[3,3,1,i,j]\nm2[4,4,1,j,i]\nm2[5,5,1,i,j]\nm2[6,6,1]\nm2[7,7,1]\n\nTable 1: Parameters of the MSSM assuming the field ordering {Q,u,d,L,e,Hu,Hd} and the group\nordering {U1,SU2,SU3}.\n\nB\n\nParameters of the MSSM\n\nFor completeness, we include here the superpotential and soft-SUSY-breaking Lagrangian of the\nMSSM, following the conventions of [1].\nW\n\u2212Lsof t\n\n\u02c6 d Q\u0302 * \u0124d + \u00eaYe L\u0302 * \u0124d + \u03bc\u0124u * \u0124d\n= \u00fbYu Q\u0302 * \u0124u + dY\n\u0010\n\u0011\n \u0303 d Q\u0303 * Hd + \u1ebdhe L\u0303 * Hd + BHu * Hd + h.c.\n=\n\u0169hu Q\u0303 * Hu + dh\n\n(3)\n\n \u0303 2 d \u0303\u2020 + \u1ebdm2 \u1ebd\u2020 + m2 H \u2020 Hu + m2 H \u2020 Hd\n+Q\u0303\u2020 m2Q Q\u0303 + L\u0303\u2020 m2L L\u0303 + \u0169m2u \u0169\u2020 + dm\nHd d\ne\nHu u\nd\n\u0013\n\u0012\n1\nMa \u03bba \u03bba + h.c.\n(4)\n+\n2\n\nIn the above, and as usual, hats denote superfields and tildes the scalar component of each chiral\nsuperfield. The contraction of two SU(2) doublets (denoted by *) follows the convention Hu * Hd =\nHu+ Hd\u2212 \u2212 Hu0 Hd0 . In addition to the parameters entering W and Lsof t , one still has the gauge\ncouplings ga . Table 1 summarises the matching of the physical notation of Eqs. (3,4) with the one\nused by Susyno.\n\nC\n\nMore on groups and representations\n\nA simple complex Lie algebra is specified by a Cartan matrix [10] which is a square matrix with\ndiagonal entries all equal to 2 and off-diagonal entries equal to 0, -1, -2 or -3. For example, the\n\n10\n\n\fCartan matrix of SO(10) is\n\uf8eb\n\uf8ec\n\uf8ec\n\uf8ec\n\uf8ec\n\uf8ed\n\n\uf8f6\n2 \u22121 0\n0\n0\n\u22121 2 \u22121 0\n0 \uf8f7\n\uf8f7\n0 \u22121 2 \u22121 \u22121 \uf8f7\n\uf8f7\n0\n0 \u22121 2\n0 \uf8f8\n0\n0 \u22121 0\n2\n\n(5)\n\nThe Cartan matrix is the ingredient required by Susyno whenever a group is being asked as input\n(the exception is U(1), which is taken to be just U1 or {}). Although the user can manually\nprovide the Cartan matrices, the program already has a built-in function, CartanMatrix, that can\ncompute them for any simple group. The syntax is\nCartanMatrix[\"group name\",familyIndex]\nwhere \"group name\" can be \"SO\", \"SU\", \"SP\", \"G\", \"F\" or \"E\" and familyIndex should be an\ninteger. For example\nCartanMatrix[\"SO\",10]\nwill return the above 5 \u00d7 5 Cartan matrix. This function will work for virtually any simple group.\nHowever, this is still a heavy syntax, so the program assigns to some variables (SU2, SU3, SU5, SO10,\netc.) the corresponding Cartan matrices (e.g., SO10 is the same as CartanMatrix[\"SO\",10]). For\nthe case of SO(n), SU(n) with n > 32 and Sp(2m) with m > 16 no variables were set, and the\nCartanMatrix function should be used.\nAs mentioned in the text, Susyno requires that each field be specified as a list of hypercharges\nand representations under the simple gauge factor groups. We will focus now on this last element:\nrepresentations of simple groups.\nA representation of a (simple) group is often labeled by its dimension (e.g., 3 of SU(3), 54 of\nSO(10), ...) but this can be ambiguous. To avoid the problem, we should use Dynkin coefficients\nwhich are a list of n non-negative integers. This number n is known as the group rank and is equal\nto the size of the (square) Cartan matrix of the group. For instance, since the Cartan matrix of\nSO(10) is 5 \u00d7 5, all representations of the group are of the form\n{i1,i2,i3,i4,i5}\n(i1,..., i5 are non-negative integers).\nThere are functions in Susyno that compute properties of the representations (e.g., DimR calculates the dimension of a representation, ReduceRepProduct reduces products of representations)\nand they are documented in the built-in help files (see also A). These should be enough to allow\nrecognising a representation by its Dynkin coefficients; however, should the user wish to consult\nlists of representations, these are available in the literature [11]. Some of the most frequently used\nrepresentations were shown in table 2.\n\nD\n\nRenormalisation group equations of a general model\n\nSusyno uses the generic two loop RGEs of [1, 2]. For completeness these results are reproduced\nhere (for a model based on a simple gauge group G).\n11\n\n\fIn general a parameter X evolves according to the equation\nd\nX =\ndt\n\n1\n1\n(2)\n(1)\n\u03b2 +\n2 \u03b2X\n2\n16\u03c0 2 X\n(16\u03c0 )\n\n(6)\n\nwhere t = log Q (Q being the renormalisation scale parameter). The \u03b2-functions for the several\nparameters (gauge coupling constants, superpotential parameters and soft-SUSY-breaking parameters) are as follows.\n\nGauge coupling constants\n\u03b2g(1) = g3 [S (R) \u2212 3C (G)]\nn\no\nC (k) ijk\n\u03b2g(2) = g5 \u22126 [C (G)]2 + 2C (G) S (R) + 4S (R) C (R) \u2212 g3\nY Yijk\nd (G)\n\n(7)\n(8)\n\nSuperpotential parameters\ni\n(1) ijk\n\u03b2Y\n= Y ijp \u03b3p(1)k + (k \u2194 i) + (k \u2194 j)\ni\nh\n(2) ijk\n\u03b2Y\n= Y ijp \u03b3p(2)k + (k \u2194 i) + (k \u2194 j)\n\nh\n\nh\n\nh\n\n\u03b2\u03bc(1)\n\u03b2\u03bc(2)\n\nh\n\nh\n\niij\n\niij\n\ni\n(1) i\n\n\u03b2L\n\n(2)\n\n\u03b2L\n\nii\n\n(9)\n(10)\n\n= \u03bcip \u03b3p(1)j + (j \u2194 i)\n\n(11)\n\n= \u03bcip \u03b3p(2)j + (j \u2194 i)\n\n(12)\n\n= Lp \u03b3p(1)i\n\n(13)\n\n= Lp \u03b3p(2)i\n\n(14)\n\nwhere\n(1)j\n\n\u03b3i\n\n(2)j\n\n\u03b3i\n\n1\nYipq Y jpq \u2212 2g 2 \u03b4ij C (i)\n2\n1\n= \u2212 Yimn Y npq Ypqr Y mrj + g2 Yipq Y jpq [2C (p) \u2212 C (i)]\n2\nh\ni\n=\n\n+2\u03b4ij g4 C (i) S (R) + 2C (i)2 \u2212 3C (G) C (i)\n\n(15)\n\n(16)\n\nSoft-SUSY-breaking Lagrangian parameters\n(1)\n\n\u03b2M\n\n(2)\n\n\u03b2M\n\n= g2 [2S (R) \u2212 6C (G)] M\n(17)\nh\ni\n\u0011\n\u0010\nC (k) ijk\n= g4 \u221224C (G)2 + 8C (G) S (R) + 16S (R) C (R) M + 2g2\nh \u2212 M Y ijk Yijk\nd (G)\n(18)\n\n12\n\n\f\u0010\n\u0011\n1 ijl\nh Ylmn Y mnk + Y ijl Ylmn hmnk \u2212 2 hijk \u2212 2M Y ijk g2 C(k) + (k \u2194 i) + (k \u2194 j)\n2\n(19)\n1\n= \u2212 hijl Ylmn Y npq Ypqr Y mrk \u2212 Y ijl Ylmn Y npq Ypqr hmrk \u2212 Y ijl Ylmn hnpq Ypqr Y mrk\n2\u0010\n\u0011\n\ni\n(1) ijk\n\nh\n\n\u03b2h\n\nh\n\n\u03b2h\n\n=\n\ni\n(2) ijk\n\n+ hijl Ylpq Y pqk + 2Y ijl Ylpq hpqk \u2212 2M Y ijl Ylpq Y pqk g2 [2C(p) \u2212 C(k)]\n\u0010\n\u0011 \u0002\n\u0003\n+ 2hijk \u2212 8M Y ijk g4 C(k)S(R) + 2C(k)2 \u2212 3C(G)C(k) + (k \u2194 i) + (k \u2194 j)\n\n(20)\n\ni\n(1) ij\n\nh\n\n\u03b2b\n\nh\n\n\u03b2b\n\nh\n\nh\n\ni\n(2) ij\n\n\u03b2s(1)\n\u03b2s(2)\n\nii\n\nii\n\n\u0001\n1 il\n1\nb Ylmn Y mnj + Y ijl Ylmn bmn + \u03bcil Ylmn hmnj \u2212 2 bij \u2212 2M \u03bcij g2 C(i) + (i \u2194 j)\n2\n2\n(21)\n1\n1\n1\n= \u2212 bil Ylmn Y pqn Ypqr Y mrj \u2212 Y ijl Ylmn bmr Ypqr Y pqn \u2212 Y ijl Ylmn \u03bcmr Ypqr hpqn\n2\n2\n2\n\u2212\u03bcil Ylmn hnpq Ypqr Y mrj \u2212 \u03bcil Ylmn Y npq Ypqr hmrj + 2Y ijl Ylpq (bpq \u2212 \u03bcpq M ) g2 C(p)\n\u0010\n\u0011\n+ bil Ylpq Y pqj + 2\u03bcil Ylpq hpqj \u2212 2\u03bcil Ylpq Y pqj M g 2 [2C(p) \u2212 C(i)]\n\u0001 \u0002\n\u0003\n+ 2bij \u2212 8\u03bcij M g4 C(i)S(R) + 2C(i)2 \u2212 3C(G)C(i) + (i \u2194 j)\n(22)\n\n=\n\n1 ipq\nY Ypqr sr + hipq Ypqr Lr + \u03bcir Yrpq bpq + 2Y imn (m2 )lm \u03bcnl + hipq bpq\n(23)\n2\n\u0001\n1\n= 2g2 C (q) Y ipq Ypqr sr \u2212 Y irn Ynpq Y pqm Ymrl sl \u2212 4g2 C (q) Y ipq M \u2212 hipq Ypql Ll\n2\n\u0001\nimn\npqr\n\u2212 Y\nYnpq h Yrml + himn Ynpq Y pqr Yrml Ll \u2212 4g 2 C (q) \u03bcil Ylpq (\u03bcpq M \u2212 bpq )\n\u0002\n\u2212\u03bcil (Ylmn hnpq Ypqr \u03bcrm + Ylmn Y npq Ypqr brm ) + 4g 2 C (q) 2Y ipq \u03bcpq |M |2 \u2212 Y ipq bpq M\n\u0003\n\u2212hipq \u03bcpq M \u2217 + hipq bpq + Y ipq (m2 )rp \u03bcrq + Y ipr (m2 )qr \u03bcpq \u2212 Y imn Ynpq hpql blm\n\n=\n\n\u2212himn Ynpq Y pql blm \u2212 Y imn hnpq hpql \u03bclm \u2212 himn hnpq Y pql \u03bclm \u2212 Y imn (m2 )lm \u03bclr Y rpq Ypqn\n\u2212Y imn Ynpq Y pql (m2 )rl \u03bcrm \u2212 Y imn (m2 )ln Ylpq Y pqr \u03bcrm \u2212 2Y imn Ynpq (m2 )qr Y rpl \u03bclm\n\n(24)\ni\n(1) j\n\nh\n\n\u03b2m2\n\nh\n\n\u03b2m2\n\ni\n\ni\n(2) j\ni\n\n1\n1\nj\nn\nq\nYipq Y pqn (m2 )n + Y jpq Ypqn (m2 )i + 2Yipq Y jpr (m2 )r + hipq hjpq\n2\n2\n\u0001\nA 2\n\u22128\u03b4ij |M |2 g2 C(i) + 2g 2 tAj\n(25)\ni Tr t m\n1\n1\nl\nj\nl\n= \u2212 (m2 )i Ylmn Y mrj Ypqr Y pqn \u2212 (m2 )l Y lmn Ymri Y pqr Ypqn \u2212 Yilm Y jnm (m2 )r Ynpq Y rpq\n2\n2\nl\nq\njnm\n2 r\nlpq\n\u2212Yilm Y\n(m )n Yrpq Y \u2212 Yilm Y jnr (m2 )n Ypqr Y pqm \u2212 2Yilm Y jln Ynpq Y mpr (m2 )r\n=\n\n\u2212Yilm Y jln hnpq hmpq \u2212 hilm hjln Ynpq Y mpq \u2212 hilm Y jln Ynpq hmpq \u2212 Yilm hjln hnpq Y mpq\n\u0014\nq\nj\nl\n+ (m2 )i Ylpq Y jpq + Yipq Y lpq (m2 )l + 4Yipq Y jpl (m2 )l + 2hipq hjpq \u2212 2hipq Y jpq M\n\u0015\n2 2\njpq\n\u2217\njpq\nA 2 l\nrpq\n\u22122Yipq h M + 4Yipq Y\n|M | g [C(p) + C(q) \u2212 C(i)] \u2212 2g 2 tAj\ni (t m )r Ylpq Y\n\u0002 A\n\u0003\n\u0003\nj 4\n2\u0002\n2\n2\n+8g 4 tAj\ni Tr t C(r)m + \u03b4i g |M | 24C(i)S(R) + 48C(i) \u2212 72C(G)C(i)\nn \u0002\no\n\u0003\n+8\u03b4ij g4 C(i) Tr S(r)m2 \u2212 C(G) |M |2\n(26)\n13\n\n\fA few comments and clarifications are still in order concerning the variables appearing in the\ndifferent \u03b2-functions:\n\u0001\u2217\n\u0001\u2217\n\u0001\u2217\n\u0001\u2217\n\u2022 Yijk = Y ijk , hijk = hijk , \u03bcij = \u03bcij and bij = bij ;\n\u2022 d (G) = Dimension of the adjoint representation of group G;\n\n\u2022 C (i) = Quadratic Casimir invariant of the representation of the chiral superfield with index\ni;\n\u2022 C (G) = Quadratic Casimir invariant of the adjoint representation of group G;\n\u2022 S (R) = Dynkin index summed over all chiral multiplets. However S (R) C (R) should be\ninterpreted as the sum of Dynkin indices weighted by the quadratic Casimir invariant;\n\u2022 tA = Representation matrices under the gauge group G. Terms with tA are only relevant\nfor U(1) groups;\n(1)\n\n(2)\n\n\u2022 In \u03b2m2 and \u03b2m2 , the traces should be understood as traces over all chiral superfields.\nIf the gauge group is not simple but rather a direct product of simple groups and U(1) factors, the\nequations shown here must be adapted. The modifications are fairly straightforward, and can be\nfound in [1].\n\nReferences\n[1] S. P. Martin and M. T. Vaughn, Phys. Rev. D 50 (1994) 2282 [Erratum-ibid. D 78 (2008)\n039903] [arXiv:hep-ph/9311340].\n[2] Y. Yamada, Phys. Rev. D 50 (1994) 3537 [arXiv:hep-ph/9401241].\n[3] U. Ellwanger, C. Hugonie and A. M. Teixeira, Phys. Rept. 496 (2010) 1 [arXiv:0910.1785\n[hep-ph]].\n[4] F. Staub, Comput. Phys. Commun. 182 (2008) 808 [arXiv:hep-ph/0806.0538].\n[5] F. del Aguila, G.D. Coughlan and M. Quir\u00f3s, Nucl. Phys. B 307 (1988) 633;\nM. x. Luo and Y. Xiao, Phys. Lett. B 555 (2003) 279 [arXiv:hep-ph/0212152];\nI. Jack and D. R. T. Jones, Phys. Rev. D 63 (2001) 075010 [arXiv:hep-ph/0010301].\n[6] R. M. Fonseca, M. Malinsky, W. Porod and F. Staub, [arXiv:1107.2670 [hep-ph]].\n[7] B.C. Allanach, A. Dedes and H.K. Dreiner,\n[arXiv:hep-ph/9902251].\n\nPhys. Rev. D 60 (1999) 056002\n\n[8] F. Borzumati and T. Yamashita, Prog. Theor. Phys. 124 (2009) 761 [arXiv:hep-ph/0903.2793].\n[9] D.M. Snow, ACM Trans. Math. Softw. 16 (1990) 94; ACM Trans. Math. Softw. 19 (1993) 95.\n[10] R.N. Cahn, Semi-Simple Lie Algebras and Their Representations (Dover Publications, 2006).\n[11] R. Slansky, Phys. Rept. 79 (1981) 1.\n\n14\n\n\f"}