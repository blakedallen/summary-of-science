{"id": "http://arxiv.org/abs/cs/0509035v2", "guidislink": true, "updated": "2007-10-24T15:45:10Z", "updated_parsed": [2007, 10, 24, 15, 45, 10, 2, 297, 0], "published": "2005-09-13T10:44:31Z", "published_parsed": [2005, 9, 13, 10, 44, 31, 1, 256, 0], "title": "Cryptanalysis of an MPEG-Video Encryption Scheme Based on Secret Huffman\n  Tables", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0509025%2Ccs%2F0509052%2Ccs%2F0509090%2Ccs%2F0509022%2Ccs%2F0509007%2Ccs%2F0509092%2Ccs%2F0509068%2Ccs%2F0509074%2Ccs%2F0509084%2Ccs%2F0509013%2Ccs%2F0509078%2Ccs%2F0509033%2Ccs%2F0509060%2Ccs%2F0509064%2Ccs%2F0509047%2Ccs%2F0509044%2Ccs%2F0509058%2Ccs%2F0509100%2Ccs%2F0509014%2Ccs%2F0509020%2Ccs%2F0509019%2Ccs%2F0509029%2Ccs%2F0509038%2Ccs%2F0509099%2Ccs%2F0509016%2Ccs%2F0509086%2Ccs%2F0509039%2Ccs%2F0509001%2Ccs%2F0509088%2Ccs%2F0509053%2Ccs%2F0509055%2Ccs%2F0509063%2Ccs%2F0509056%2Ccs%2F0509002%2Ccs%2F0509036%2Ccs%2F0509030%2Ccs%2F0509087%2Ccs%2F0509075%2Ccs%2F0509011%2Ccs%2F0509098%2Ccs%2F0509032%2Ccs%2F0509095%2Ccs%2F0509097%2Ccs%2F0509049%2Ccs%2F0509034%2Ccs%2F0509004%2Ccs%2F0509015%2Ccs%2F0509073%2Ccs%2F0509043%2Ccs%2F0509061%2Ccs%2F0509021%2Ccs%2F0509031%2Ccs%2F0509010%2Ccs%2F0509027%2Ccs%2F0509045%2Ccs%2F0509017%2Ccs%2F0509024%2Ccs%2F0509037%2Ccs%2F0509042%2Ccs%2F0509006%2Ccs%2F0509091%2Ccs%2F0509093%2Ccs%2F0509072%2Ccs%2F0509023%2Ccs%2F0509096%2Ccs%2F0509070%2Ccs%2F0509041%2Ccs%2F0509089%2Ccs%2F0509005%2Ccs%2F0509012%2Ccs%2F0509067%2Ccs%2F0509009%2Ccs%2F0509018%2Ccs%2F0509071%2Ccs%2F0509003%2Ccs%2F0509069%2Ccs%2F0509008%2Ccs%2F0509046%2Ccs%2F0509028%2Ccs%2F0509057%2Ccs%2F0509076%2Ccs%2F0509035%2Ccs%2F0509026%2Ccs%2F0509082%2Ccs%2F0509048%2Ccs%2F0208001%2Ccs%2F0208022%2Ccs%2F0208024%2Ccs%2F0208033%2Ccs%2F0208027%2Ccs%2F0208025%2Ccs%2F0208009%2Ccs%2F0208003%2Ccs%2F0208016%2Ccs%2F0208023%2Ccs%2F0208011%2Ccs%2F0208029%2Ccs%2F0208020%2Ccs%2F0208007%2Ccs%2F0208042%2Ccs%2F0208018&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Cryptanalysis of an MPEG-Video Encryption Scheme Based on Secret Huffman\n  Tables"}, "summary": "This paper studies the security of a recently-proposed MPEG-video encryption\nscheme based on secret Huffman tables. Our cryptanalysis shows that: 1) the key\nspace of the encryption scheme is not sufficiently large against\ndivide-and-conquer (DAC) attack and known-plaintext attack; 2) it is possible\nto decrypt a cipher-video with a partially-known key, thus dramatically\nreducing the complexity of the DAC brute-force attack in some cases; 3) its\nsecurity against the chosen-plaintext attack is very weak. Some experimental\nresults are included to support the cryptanalytic results with a brief discuss\non how to improve this MPEG-video encryption scheme.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0509025%2Ccs%2F0509052%2Ccs%2F0509090%2Ccs%2F0509022%2Ccs%2F0509007%2Ccs%2F0509092%2Ccs%2F0509068%2Ccs%2F0509074%2Ccs%2F0509084%2Ccs%2F0509013%2Ccs%2F0509078%2Ccs%2F0509033%2Ccs%2F0509060%2Ccs%2F0509064%2Ccs%2F0509047%2Ccs%2F0509044%2Ccs%2F0509058%2Ccs%2F0509100%2Ccs%2F0509014%2Ccs%2F0509020%2Ccs%2F0509019%2Ccs%2F0509029%2Ccs%2F0509038%2Ccs%2F0509099%2Ccs%2F0509016%2Ccs%2F0509086%2Ccs%2F0509039%2Ccs%2F0509001%2Ccs%2F0509088%2Ccs%2F0509053%2Ccs%2F0509055%2Ccs%2F0509063%2Ccs%2F0509056%2Ccs%2F0509002%2Ccs%2F0509036%2Ccs%2F0509030%2Ccs%2F0509087%2Ccs%2F0509075%2Ccs%2F0509011%2Ccs%2F0509098%2Ccs%2F0509032%2Ccs%2F0509095%2Ccs%2F0509097%2Ccs%2F0509049%2Ccs%2F0509034%2Ccs%2F0509004%2Ccs%2F0509015%2Ccs%2F0509073%2Ccs%2F0509043%2Ccs%2F0509061%2Ccs%2F0509021%2Ccs%2F0509031%2Ccs%2F0509010%2Ccs%2F0509027%2Ccs%2F0509045%2Ccs%2F0509017%2Ccs%2F0509024%2Ccs%2F0509037%2Ccs%2F0509042%2Ccs%2F0509006%2Ccs%2F0509091%2Ccs%2F0509093%2Ccs%2F0509072%2Ccs%2F0509023%2Ccs%2F0509096%2Ccs%2F0509070%2Ccs%2F0509041%2Ccs%2F0509089%2Ccs%2F0509005%2Ccs%2F0509012%2Ccs%2F0509067%2Ccs%2F0509009%2Ccs%2F0509018%2Ccs%2F0509071%2Ccs%2F0509003%2Ccs%2F0509069%2Ccs%2F0509008%2Ccs%2F0509046%2Ccs%2F0509028%2Ccs%2F0509057%2Ccs%2F0509076%2Ccs%2F0509035%2Ccs%2F0509026%2Ccs%2F0509082%2Ccs%2F0509048%2Ccs%2F0208001%2Ccs%2F0208022%2Ccs%2F0208024%2Ccs%2F0208033%2Ccs%2F0208027%2Ccs%2F0208025%2Ccs%2F0208009%2Ccs%2F0208003%2Ccs%2F0208016%2Ccs%2F0208023%2Ccs%2F0208011%2Ccs%2F0208029%2Ccs%2F0208020%2Ccs%2F0208007%2Ccs%2F0208042%2Ccs%2F0208018&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "This paper studies the security of a recently-proposed MPEG-video encryption\nscheme based on secret Huffman tables. Our cryptanalysis shows that: 1) the key\nspace of the encryption scheme is not sufficiently large against\ndivide-and-conquer (DAC) attack and known-plaintext attack; 2) it is possible\nto decrypt a cipher-video with a partially-known key, thus dramatically\nreducing the complexity of the DAC brute-force attack in some cases; 3) its\nsecurity against the chosen-plaintext attack is very weak. Some experimental\nresults are included to support the cryptanalytic results with a brief discuss\non how to improve this MPEG-video encryption scheme."}, "authors": ["Shujun Li", "Guanrong Chen", "Albert Cheung", "Kwok-Tung Lo"], "author_detail": {"name": "Kwok-Tung Lo"}, "author": "Kwok-Tung Lo", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1007/978-3-540-92957-4_78", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/cs/0509035v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cs/0509035v2", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "8 pages, 4 figures", "arxiv_primary_category": {"term": "cs.MM", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.MM", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.CR", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cs/0509035v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/cs/0509035v2", "journal_reference": "Advances in Image and Video Technology - Third Pacific Rim\n  Symposium, PSIVT 2009, Tokyo, Japan, January 13-16, 2009. Proceedings,\n  Lecture Notes in Computer Science, vol. 5414, pp. 898-909, 2009", "doi": "10.1007/978-3-540-92957-4_78", "fulltext": "1\n\nCryptanalysis of an MPEG-video Encryption\nScheme Based on Secret Huffman Tables\narXiv:cs/0509035v2 [cs.MM] 24 Oct 2007\n\nShujun Li, Guanrong Chen, Albert Cheung and Kwok-Tung Lo\n\nAbstract- This paper studies the security of a recentlyproposed MPEG-video encryption scheme based on secret\nHuffman tables. Our cryptanalysis shows that: 1) the key\nspace of the encryption scheme is not sufficiently large against\ndivide-and-conquer (DAC) attack and known-plaintext attack;\n2) it is possible to decrypt a cipher-video with a partiallyknown key, thus dramatically reducing the complexity of the\nDAC brute-force attack in some cases; 3) its security against\nthe chosen-plaintext attack is very weak. Some experimental\nresults are included to support the cryptanalytic results with a\nbrief discuss on how to improve this MPEG-video encryption\nscheme.\nKeywords: MPEG video; data encryption; cryptanalysis;\nHuffman table; ciphertext-only attack; known-plaintext attack;\nchosen-plaintext attack; divide-and-conquer (DAC) attack;\nbrute-force attack; partial-key attack\n\nI. I NTRODUCTION\nThe extensive use of digital images and videos in today's\ndigital world makes the security and privacy issues more\nand more important. To fulfill such an increasing demand,\nvarious encryption algorithms have been proposed in recent\nyears as possible solutions to content protection of digital\nimages and videos [1]\u2013[11], among which MPEG videos\nattract special attention due to its prominent prevalence in\nconsumer electronic markets [12]\u2013[14]. As an important\nway of designing MPEG-video encryption schemes, secret\nHuffman tables have been suggested in some designs [3],\n[8], [15]\u2013[19].\nThe MPEG-video encryption scheme proposed in [15]\n(i.e., Algorithm 1 in [3]) is a light-weight scheme, which\nThe first author was partially supported by the Alexander von Humboldt\nFoundation, Germany, and by The Hong Kong Polytechnic University's\nPostdoctoral Fellowships Scheme under grant no. G-YX63. The work of\nK.-T. Lo was supported by the Research Grants Council of the Hong Kong\nSAR Government under Project no. 523206 (PolyU 5232/06E).\nShujun Li is the corresponding author. Contact him via his personal web\nsite: http://www.hooklee.com\nShujun Li is with FernUniversit\u00e4t in Hagen, Lehrgebiet Informationstechnik, Universit\u00e4tsstrasse 27, 58084 Hagen, Germany.\nGuanrong Chen is with the Department of Electronic Engineering, City\nUniversity of Hong Kong, 83 Tat Chee Avenue, Kowloon Tong, Hong Kong\nSAR, China.\nAlbert Cheung is with the Department of Building and Construction and\nShenzhen Applied R&D Centres, City University of Hong Kong, 83 Tat\nChee Avenue, Kowloon Tong, Hong Kong SAR, China.\nKwok-Tung Lo is with the Department of Electronic and Information\nEngineering, The Hong Kong Polytechnic University, Hung Hom, Kowloon,\nHong Kong SAR, China.\n\nencrypts the plain-video by shuffling VLC (variable-length\ncoding) entries of same size in each Huffman table. However, because the bit length of each VLC codeword does not\nchange, the position of each VLC codeword in the video\nstream does not change either. Thus, an attacker can uniquely\nlocate (and thus determine) all VLC codewords contained\nin the cipher-video stream, if the plain-video stream or an\nindependent part (such as a picture or a slice) is known. Once\nall distinct VLC codewords are obtained, the whole secret\nHuffman table is uniquely reconstructed and the encryption\nscheme is broken. That is, this light-weight scheme is not\nsecure against known/chosen-plaintext attacks. In addition,\nas pointed out in [3], the key space of this encryption scheme\nis very limited (especially for Huffman tables with a small\nnumber of VLC entries), so even a brute-force attack may\nbecome feasible.\nThe MPEG-video encryption scheme proposed in [16] can\nbe considered as an enhanced version of that in [15]. In this\nscheme, five different Huffman tables are shuffled separately\nand the shuffling operations are generalized to work on VLC\nentries with different sizes, in the hope that the key space\ncan be enlarged and the security against plaintext attacks can\nbe improved. Furthermore, as a second guard on the security,\nrandom bit flipping operations are also introduced to further\nencrypt each secret Huffman table.\nIn [8], [17]\u2013[19], multiple Huffman tables (MHT) are\nintroduced, from which one table is secretly chosen for the\nencryption of each VLC codeword. A so-called \"Huffman\ntree mutation process\" is also proposed in [8], [17], [18] to\nderive more candidate Huffman tables from several original\ntables.\nThis paper mainly focuses on security problems with\nthe MPEG-video encryption scheme proposed in [16]. Our\ncryptanalysis shows that this scheme is not sufficiently\nsecure against DAC (divide-and-conquer) ciphertext-only\nattack, partial-key attack and known-plaintext attack, and\nvery weak against chosen-plaintext attack.\nThe rest of this paper is organized as follows. In the next\nsection, a brief introduction to the MPEG-video encryption\nscheme under study is given. Then, the main cryptanalysis\nresults are presented in detail in Sect. III, with some experimental results. Finally Section IV gives a discussion on\nhow to improve the security of the MPEG-video encryption\nscheme, and the last section concludes this paper.\n\n\f2\n\nII. MPEG-V IDEO E NCRYPTION S CHEME U NDER S TUDY\n\nspecific flag defined in MPEG-2 standard (which is\nalways set to be 0 for MPEG-1 videos);\nTable B-15 (not used in MPEG-1 standard): for encoding all AC coefficients of intra blocks with intra vlc format=1.\n\nGiven an uncompressed video as the input, an MPEG1\nencoder compresses the video stream frame by frame in the\nfollowing steps [12], [13]:\n1) (optional, for interlaced MPEG-2 videos only) separate\na frame into two field-pictures: a top field and a bottom\nfield;\n2) employ differential encoding and motion compensation techniques to remove most redundancy existing\nbetween adjacent pictures;\n3) divide the current picture into a number of slices,\neach of which is composed of one or more 16 \u00d7 16\nmacroblocks;\n4) decompose each macroblock into 6, 8 or 12 blocks\nof size 8 \u00d7 8: 4 luminance blocks; 1, 2 or 4 Cb\nchrominance blocks; 1, 2 or 4 Cr chrominance blocks;\n5) perform DCT (discrete cosine transform) for each 8\u00d78\nblock, and then quantize the 64 DCT coefficients with\na quantiser marix;\n6) transform the 8 \u00d7 8 block into a 1-D vector in one\nof two possible zigzag scanning orders, and then\nrepresent all 64 quantized DCT coefficients (except\nDC coefficients in intra-blocks) with a number of RLE\n(run-length encoding) pairs;\n7) encode most DCT coefficients (i.e., RLE pairs) and\nall motion vectors using VLC (variable-length-coding)\ncodewords under the control of some Huffman tables,\nand represent other DCT coefficients with fix-length\nbits strings.\nA Huffman table is a two-column tale for realizing the\nHuffman coding algorithm [20], [21], which is an entropy\nencoding algorithm and transforms an input value into a\nVLC-codeword with the following rule: the more frequently\nthe input value occurs, the shorter the corresponding VLCcodeword should be, and vice versa. In such a way, one\ncan compress the input data in a lossless form. There are in\ntotal 15 Huffman tables used in MPEG-2 standards [13] (less\ntables are used in MPEG-1 standard [12]), among which ten\ntables are used to encode data elements in various headers\nand the following five tables are used to encode visual\ninformation \u2013 DCT coefficients in each block and motion\nvectors in each macroblock:\n\u2022 Table B-10: for encoding motion vectors;\n\u2022 Table B-12: for encoding the bit size of the differential\nvalues of DC coefficients in intra luminance blocks;\n\u2022 Table B-13: for encoding the bit size of the differential\nvalues of DC coefficients in intra chrominance blocks;\n\u2022 Table B-14: for encoding all DCT coefficients of nonintra blocks and AC coefficients of intra blocks with\nintra vlc format=0, where intra vlc format is a picture-\n\nAfter encrypting all the five Huffman tables with both of the\nabove two methods, the bit length of some VLC-codewords\nshould be slightly changed to enhance the security against\nplaintext attacks (as discussed in Sect. I of this paper) but\nshould not be changed too much, to avoid a large influence\non compression efficiency.\nIn [16], the key space was estimated by enumerating all\n\"good\" encryption methods2 of the shuffling operation and\nthe random bit flipping operation, as shown in Table II. Then,\nthe key space size was calculated to be the product of the\nfive numbers given in the table:\n\u0001\n\u0001\n(3!)\u00d7 7! \u00d7 26 \u00d7 6! \u00d7 28 \u00d7(6!)\u00d7(16!) \u2248 5.37\u00d71027 \u2248 292 .\n\n1 To keep the description simpler, here we mainly considers MEPG-1/2\nencoder. For special features of MPEG-4 encoder with respect to MPEG1/2, see [14] for more details.\n\n2 An encryption method is \"good\" if it can produce unintelligible images.\nNote that the number of \"good\" encryption methods may be larger if a\nlooser definition of \"unintelligible images\" is used.\n\n\u2022\n\nAs an example of the Huffman tables, Table I shows Table\nB-12 used in MPEG-2 standard.\nTABLE I\nTABLE B-12 IN MPEG-2 STANDARD : VARIABLE LENGTH CODES FOR\ndct dc size luminance\nVariable length code\n100\n00\n01\n101\n110\n1110\n11110\n111110\n1111110\n11111110\n111111110\n111111111\n\ndct dc size luminance\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\nThe encryption scheme proposed in [16] is designed by\nencrypting the original Huffman tables, i.e., using different\n(secret) Huffman tables to replace the original ones. The\naforementioned five Huffman tables, B-10, B-12, B-13, B14 and B-15, are chosen to be encrypted separately. These\nsecret Huffman tables are derived from the original ones by\ncombining the following two encryption operations.\n\u2022\n\n\u2022\n\nShuffling VLC-codewords: grouping all VLCcodewords into several subsets according to their\nbit lengths, and then randomly shuffling these\nVLC-codewords within each subset.\nRandom bit flipping: randomly flipping the last bit of\neach VLC-codeword, and adjusting (if needed) other\nVLC-codewords to keep the prefix rule valid.\n\n\f3\n\nTABLE II\nT HE NUMBER OF GOOD ENCRYPTION METHODS OF EACH H UFFMAN\nTABLE (TABLE 3.6 OF [16]).\nHuffman table\nB-10\nB-12\nB-13\nB-14\nB-15\n\nNumber of good encryption methods\n3!\n7! \u00d7 26\n6! \u00d7 28\n6!\n16!\n\nAs a result of the large key space, it was claimed that the\nscheme is sufficiently secure. In the next section, we will\npoint out that this claim is not grounded.\nIn [16], an additional measure is also suggested to further\nenhance the security against plaintext attacks \u2013 reshuffling\nthe Huffman tables after a certain number of frames. In the\nfollowing, we will mainly consider the basic scheme without\nthe reshuffling mechanism. The effect of the reshuffling\nmechanism will be discussed later in Sect. IV.\nIII. C RYPTANALYSIS\nIn this section, we re-study the security of the aforementioned MPEG-video encryption scheme based on secret\nHuffman tables, and point out that it is not so secure\nas claimed in [16], especially against the chosen-plaintext\nattack. In this section, the terms and notations in MPEG-2\nstandard [13] will be used, except those existing in MPEG-1\nvideos only. The following terms are used throughout this\nsection to facilitate the description: 1) the term \"picture\"\nis used instead of \"frame\", since the encryption scheme is\nindependent of the syntax differences between a picture and\na frame; 2) macroblock is abbreviated as \"MB\"; 3) a selfdefined term \"MB header\" is used to denote the set of all\ndata elements occurring before the first encoded block in an\nMB (if none of the blocks is coded, the MB header is the\nMB itself).\n\nencryption scheme under study, the occurrence of syntax\nerrors can serve as such a criterion for detecting wrong\nkeys (i.e., wrongly guessed Huffman tables). When a wrong\nHuffman table is used to decrypt a cipher-video, syntax\nerrors may occur in the decoding procedure due to (but not\nlimited to) the following reasons.\n\u2022\n\n\u2022\n\n\u2022\n\n\u2022\n\n\u2022\n\nA. Ciphertext-only attack\nThe ciphertext-only attack is the most common attack\nin practice, since in general the communication channels\nare open to the public, which means that an attacker can\nobserve a number of ciphertexts and use them to break\nan encryption scheme [22], [23]. There are two different\ngoals in a ciphertext-only attack: recovering the plaintexts\nand recovering the secret key. The latter means that the\nencryption scheme can be completely broken. This paper\nmainly focuses on the recovery of the secret key, i.e.,\nthe secret Huffman tables in the MPEG-video encryption\nscheme under study.\nThe simplest ciphertext-only attack is to exhaustively\nsearch all possible keys to find the unique correct one, which\nis called the brute-force attack [22], [23]. Here, a criterion\nis needed to verify each searched key. For the MPEG-video\n\n\u2022\n\n\u2022\n\n\u2022\n\nAs mentioned in Sect. I of this paper, to ensure the\nsecurity against plaintext attacks, there are at least two\ndifferent bit lengths in a Huffman table. However, once\nthe bit length of a data element (i.e., the bit length\nof the corresponding VLC-codeword) is wrong, all the\nfollowing data elements in the current slice cannot be\ncorrectly decoded. For example, if dct dc size3 is not\ndecoded correctly in an intra-block, all the following\ndata elements in the current slice cannot be correctly\nlocated and decoded.\nFor each Huffman table, not all VLC-codewords are\nvalid. For example, in Table B-10, all VLC-codewords\nhave less than 7 zero bits and the prefix \"0000 0010\"\nnever occurs.\nThere always exist 23 continuous zero bits between two\nadjacent MBs.\nThere may exist some marker bits (must be \"1\") in the\nbit stream:\n\u2013 (not valid for MPEG-1 videos) when\nconcealment motion vectors = 1 in an\nintra-block, there exists a marker bit in the MB\nheader;\n\u2013 (for MPEG-1 videos only) in D-picture, the last\nbit of each MB must be a marker bit named\nend of macroblock.\nThere exist some constraints on the decoded data elements:\n\u2013 each decoded DCT coefficient should not be out\nof the range [\u22122048, +2047] after quantization;\n\u2013 each decoded motion vector should not be out of\nthe range defined in Table 7-8 of the MPEG-2\nstandard [13], and must be within the reference\npicture after adding the coordinates of the predicted\nMB.\nThere must be an EOB VLC-codeword at the end of\neach block, before which the total number of decoded\nDCT coefficients must not be greater than 64.\nThe number of MBs within each picture should not be\ngreater than a maximal value.\nSome slice headers may be skipped when the video is\ndecoded with wrong Huffman tables, which is forbidden for most videos (for example, the MPEG-1 video\nand the MPEG-2 video with a restricted slice structure).\n\n3 Italic symbols mean data elements defined in the MPEG-2 standard, or\nin the MPEG-1 standard if it does not defined in the MPEG-2 standard.\nFor example, here \"dct dc size\" denotes the bit size of a DC differential\nvalue, as defined in Sect. 7.2.1 of [13].\n\n\f4\n\nBy detecting the above syntax errors occurring in the decoding procedure, one can distinguish most wrong Huffman\ntables. In addition, there generally exist a lot of information\nredundancies in each decoded block, MB, slice, picture\nand between adjacent blocks, MBs, pictures and frames.\nTherefore, even when no syntax error is detected, one can\nstill distinguish the wrong Huffman table if a meaningless\npicture or a number of slices are decoded or if there exists\nexcessive noise between many adjacent blocks.\nNow, let us see how frequently these syntax errors occur.\nTo make things simpler, denote the average probability of\noccurrence of a syntax error at each syntax element by p.\nThen, for a picture with L syntax elements, the probability\nthat at least one syntax error occurs within this picture will\nbe P (L) = 1 \u2212 (1 \u2212 p)L . For an MPEG-1 video of size\nM \u00d7 N , the number of syntax elements is about 6M N \u03bb,\nwhere \u03bb is a factor determined by the average number of\nsyntax elements in each block and ranges roughly from\n1/64 to 1. As an example, taking M = 176, N = 144,\n\u03bb = 1/64 and p = 0.001, one can easily calculate and\nobtain L = 2376 and P (L) \u2248 0.9072. Since the value of\n\u03bb is generally larger than 1/64 and the value of p might\nnot be so small, it is generally a high-probability event to\nobserve at least one syntax error within one MPEG-picture.\nNote that in reality the values of p and \u03bb vary in a wide\nrange due to the following reasons: 1) there are a lot of\npossibilities of encoding a video within the framework of\nMPEG standards; 2) there are some optional data elements in\nMEPG standards; 3) the occurrence of some kinds of syntax\nelements depends on the contents of the encoded blocks\nor other syntax elements; 4) different blocks correspond to\ndifferent distributions of DCT coefficients, which directly\ninfluence the values of \u03bb and p; 5) different Huffman tables\n(especially these short VLC-entries) correspond to different\nvalue of p. Therefore, instead of estimating the values of p\nand L, the efficiency of the syntax-error detection process\nwill be shown by carrying out experiments on some sample\nvideos.\nBecause the five Huffman tables are used for different\nparts of the whole video bit-stream, it is possible to separately guess them one by one. This means that one can use\nthe so-called divide-and-conquer (DAC) attack [22], [23] to\nbreak the MPEG-video encryption scheme. In other words,\nthe key space of the encryption scheme will be the sum, not\nthe product, of the sub-spaces of the five tables. Next, let\nus see how to separately break the five Huffman tables by\ndetecting syntax errors in the video decoding procedure.\n1) Reconstructing Table B-10: Following the MPEG-2\nstandard, Tables B-12/13/14/15 are all independent of the\ndecoding of the first MB header in a slice4 , which makes\nthe separate reconstruction of Table B-10 possible. When a\nwrong Table B-10 is used, the following syntax errors may\noccur when the first MB header of a slice is decoded.\n4 All\n\nother MBs cannot be located without knowing Tables B-12/13/14/15.\n\nSome decoded motion vectors may be invalid, especially for those MBs near the picture edge.\n\u2022 When concealment motion vectors = 1 in an intrablock, the marker bit in the MB will be wrong (i.e.,\nequal to 0) with a probability of 0.5 (under the assumption that each bit in the video stream is distributed\nuniformly).\n\u2022 When macroblock pattern = 1, \"0000 0000 0\" never\noccurs in coded block pattern encoded by Table B-9.\nNote that in each slice only the first MB header can be used\nto detect syntax errors about Table B-10, so the average\nnumber of involved syntax elements in each block (i.e.,\nthe value of \u03bb corresponding to this table) may be too\nsmall, especially for pictures with a small number of slices\nand/or slow motion. When such an event happens, one has to\nexhaustively search through Table B-10 and other Huffman\ntables. Experiments showed that this event really happened\nfor many MPEG videos.\n2) Reconstructing Table B-14: Since all DCT coefficients\nin a non-intra MB are encoded with Table B-14, syntax\nerrors may occur when continuous non-intra MBs in a slice\nare decoded with a wrong Table B-14. Because most MBs in\na P/B-picture are non-intra MBs, the occurrence probability\nof syntax errors (i.e., the value of p corresponding to this\ntable) will be relatively high.\nTo test how frequently syntax errors of this kind occur\nin real attacks, we observed the decoding process by exchanging the following two VLC-entries in Table B-14 \u2013\n\"11s\" and \"011s\", which represent RLE-codewords (0,1) and\n(1,1), respectively5. For a large number of test MPEG-1/2\nvideos, syntax errors started to occur after a few number of\nMBs were decoded. See Fig. 1 for the decoding results of\nan MPEG-1 video \"Carphone\" (of size 176 \u00d7 144) and an\nMPEG-2 video \"Tennis\"6 (of size 704 \u00d7 576). If the whole\nHuffman table is heavily shuffled, syntax errors will occur\neven more frequently.\n3) Reconstructing Table B-12: Once Table B-14 is reconstructed, Table B-12 can be further exhaustively searched\nin intra MBs with intra vlc f ormat = 0. If the attacker\ncan get at least one MPEG-1 cipher-video, Table B-12 can\nalways be broken separately (Table B-15 is not used in\nMPEG-1 videos, which means intra vlc f ormat = 0). If\nall intra MBs in all known plain-videos are encoded with\nintra vlc f ormat = 1, Table B-12 has to be exhaustively\nsearched together with Table B-15 (see below), which is\ngenerally a rare event when an attacker can collect a number\nof cipher-pictures to carry the ciphertext-only attack.\nIn the case that only two VLC-codewords, \"00\" and\n\"01\", in Table B-12 were swapped, we tested the decoding\nresults of some MPEG-1/2 videos. Figure 2 gives the results\n\u2022\n\n5 The two VLC-codewords were chosen due to their frequent occurrence\nin the MPEG-1/2 video stream.\n6 The 1st picture of \"Tennis\" is encoded with intra vlc f ormat = 1,\nwhile the 2nd picture with intra vlc f ormat = 0.\n\n\f5\n\na)\n\nb)\n\nc)\n\nd)\n\nFig. 1. The decoded results of an MPEG-1 video \"Carphone\" and an\nMPEG-2 video \"Tennis\", when only two VLC-codewords were exchanged\nin Table B-14: a) the 2nd picture of \"Carphone\"; b) the decoded 2nd\npicture of \"Carphone\"; c) the 2nd picture of \"Tennis\"; d) the decoded 2nd\npicture of \"Tennis\". The light grey areas in the decoded frames denote\ndecoding failures caused by syntax errors (the same hereinafter). Note that\nthe decoded pictures are displayed as raw data (i.e., the differential pictures)\nsince the reference I-pictures are normally unknown at this stage.\n\nof the MPEG-1 video \"Carphone\" and the MPEG-2 video\n\"Tennis\". One can see that the syntax errors still occur very\nfrequently. Note that the swapped VLC-codewords have the\nsame bit length, so a stronger shuffling of Table B-12 shall\ncause much more syntax errors.\n4) Reconstructing Table B-15: If Table B-12 has\nbeen successfully guessed, Table B-15 can be exhaustively searched in luminance blocks of intra MBs with\nintra vlc f ormat = 1, just like the case of reconstructing\nTable B-14. If Table B-12 cannot be separately broken,\nTables B-12 and B-15 have to be exhaustively searched\ntogether.\nBy swapping \"10s\" and \"010s\", which represent (0,1) and\n(1,1), respectively, in Table B-15, we tested the decoding\nresults of some MPEG-2 videos (note that this table is not\nused in the MPEG-1 standard). Figure 3 gives the results of\nthe MPEG-2 video \"Tennis\". It can be seen again that many\nsyntax errors still occur.\n5) Reconstructing Table B-13: After Tables B-12, 14 and\n15 are broken, Table B-13 can be exhaustively searched in\nchrominance blocks of intra MBs. If there are intra MBs\nwith intra vlc f ormat = 0, Table B-13 can be exhaustively\nbroken immediately after Table B-14 is broken, without\nknowing Table B-15.\nBy exchanging two VLC-codewords, \"01\" and \"10\", in\nTable B-13, we tested the decoding results of some MPEG1/2 videos. The results corresponding to the MPEG-1 video\n\na)\n\nb)\n\nc)\n\nd)\n\nFig. 2. The decoded results of the MPEG-1 video \"Carphone\" and the\nMPEG-2 video \"Tennis\", when only two VLC-codewords were exchanged\nin Table B-12: a) the 1st picture of \"Carphone\"; b) the decoded 1st picture\nof \"Carphone\"; c) the 1st picture of \"Tennis\"; d) the decoded 1st picture\nof \"Tennis\".\n\na)\n\nb)\n\nFig. 3. The decoded result of the MPEG-2 video \"Tennis\", when only\ntwo VLC-codewords were exchanged in Table B-15: a) the 1st picture of\nthe original video; b) the decoded 1st picture.\n\n\"Carphone\" and the MPEG-2 video \"Tennis\" are shown in\nFig. 4. Again, many syntax errors can be observed. Due to a\nsimilar reason in the case of Table B-12, even more syntax\nerrors are expected in a real shuffling of Table B-13.\nFinally, based on the above analysis and experimental\nresults, let us estimate the complexity of the above DAC\nattack under four different conditions as follows:\n\u2022 when Table B-10 is separately reconstructed:\n\u2013 when Table B-12 is separately searched: (3!) +\n(7! \u00d7 26 ) + (6! \u00d7 28 ) + (6!) + (16!) \u2248 244.3 ;\n\u2013 when Table B-12 is searched together with Table B15: (3!)+(7!\u00d726 )\u00d7(16!)+(6!\u00d728 )+(6!) \u2248 262.5 ;\n\u2022 when Table B-10 is not separately reconstructed:\n\u2013 when Table B-12 is separately searched: (3!) \u00d7\n((7! \u00d7 26 ) + (6! \u00d7 28 ) + (6!) + (16!)) \u2248 246.8 ;\n\u2013 when Table B-12 is searched together with Table\n\n\f6\n\na)\n\nb)\n\ndoes not contain Escape DCT coefficients. Thus, the complexity of finding a practicable Huffman table is generally\nsmaller than the complexity of exactly recovering the whole\nHuffman table itself, where the word \"practicable\" means\nthat a partially-reconstructed Huffman table can be used\nto decrypt some specific target ciphertexts, though not all\npossible ciphertexts.\nFurthermore, Table B-15 is a very special Huffman table,\nsince it never occurs in MPEG-1 videos and may not occur\nin some MPEG-2 videos as well. So, Table B-15 can be\nsimply neglected when breaking such videos, which means\nthat Table B-12 can always be searched separately. In this\ncase, the key space under the DAC ciphertext-only attack\nbecomes even smaller:\n\u2022\n\n\u2022\n\nc)\n\nd)\n\nFig. 4. The decoded results of the MPEG-1 video \"Carphone\" and the\nMPEG-2 video \"Tennis\", when only two VLC-codewords were exchanged\nin Table B-13: a) the 1st picture of \"Carphone\"; b) the decoded 1st picture\nof \"Carphone\"; c) the 1st picture of \"Tennis\"; d) the decoded 1st picture\nof \"Tennis\".\n\nB-15: (3!) \u00d7 ((7! \u00d7 26) \u00d7 (16!) + (6! \u00d7 28) + (6!)) \u2248\n265.1 .\nOne can see that in all cases the complexity will be much\nsmaller than the one given in [16]: (3!) \u00d7 (7! \u00d7 26 ) \u00d7 (6! \u00d7\n28 ) \u00d7 (6!) \u00d7 (16!) \u2248 292 . Considering that Table B-12 can\nbe separately searched in most cases, this Huffman table\nbased encryption can be easily broken with a practically\nsmall complexity.\nAs discussed above, since each picture of a cipher-video\ncontains a large number of VLC data elements, syntax errors\nabout Tables B-12, B-13, B-14 and B-15 will generally\noccur in each picture with a relatively high probability.\nThat is, except Table B-10, all other Huffman tables can\nbe separately broken in most cases, where note that Table\nB-10 makes the smallest contribution to the whole key space\namong all the five tables. So, it is expected that only a\nfew number of cipher-pictures (or even a few number of\nconsecutive cipher-slices) is enough to carry out the above\nDAC attack effectively.\nB. Partial-key attack\nThere exists another serious defect in the MPEG-video\nencryption scheme under study: with a partially-recovered\nkey (i.e., partial entries of the Huffman tables), it is still\npossible to decrypt a cipher-video, if this cipher-video does\nnot contain any undetermined entries in the Huffman tables.\nFor example, if the \"Escape\" entry in Table B-14 or B15 is not reconstructed, one can still use the partiallyreconstructed Huffman tables to decrypt a cipher-video that\n\nwhen Table B-10 is separately reconstructed: (3!) +\n(7! \u00d7 26 ) + (6! \u00d7 28 ) + (6!) = 507606 \u2248 219.0 ;\nwhen Table B-10 is not separately reconstructed: (3!)\u00d7\n((7! \u00d7 26 ) + (6! \u00d7 28 ) + (6!)) = 3045600 \u2248 221.5 .\n\nOne can see that the key space is so small that it is even\npossible to find the secret Huffman tables within seconds on\na PC with a 1GHz CPU (note that 1G= 230 \u226b 221.5 ).\n\nC. Chosen-plaintext attack\nThe chosen-plaintext attack is a very strong attack, in\nwhich one can (intentionally) choose some plaintexts and\nobserve the corresponding ciphertexts to break an encryption\nscheme [22], [23]. With the help of some chosen plaintexts\nand ciphertexts, it is possible to directly determine the secret\nHuffman tables without exhaustively guessing them in all\npossible candidates. In the following, we show how to\nchoose the data elements in a plain-video to carry out a\nsuccessful chosen-plaintext attack.\n1) Reconstructing Table B-10: Choose a P/B-picture so\nthat all MBs are encoded as \"Not Coded\", i.e., only MB\nheaders occur in this picture and all blocks are skipped.\nGiven any two MBs in a slice, one can easily locate the\n23 zero bits between the two MBs and all data elements\noccurring before motion vectors in the first MB header. Note\nthat the data elements in the second MB header can be\nintentionally chosen to facilitate such a locating procedure.\nThen, one can extract a bit segment from the first MB\nheader, which is composed of two or four motion vectors. In\nthe extracted bit segment, the values of motion residuals,\ndmvectors and the sign bits of the motion vectors can\nbe chosen to uniquely distinguish each motion code, i.e.,\neach VLC-codeword encoded with the secret Table B-10.\nIf necessary, f code[r][s] can also be intentionally chosen\nto help the extraction of the VLC-encoded motion codes.\nBy choosing the values of 17 consecutive motion codes to\nbe 0, ..., 16, respectively, all entries in Table B-10 can be\nuniquely determined. Apparently, to completely break Table\nB-10, only a few MBs (not a full picture) are needed.\n\n\f7\n\n2) Reconstructing Table B-14: After reconstructing Table\nB-10, one can continue to break Table B-14 in non-intra\nMBs. The entries in Table B-14 can be reconstructed as\nfollows:\n\u2022 EOB and Escape entries: At the beginning of the first\nMB in a slice, choose the following two plain-blocks (in\nthe zigzag scanning order, the same hereinafter): block\nrune\nrune\nz }| {\nz }| {\n#1 \u2013 \"0, * * * , 0, levele , 0, * * *\", block #2 \u2013 \"0, * * * , 0,\n\u2212levele , 0, * * *\", where (rune , levele ) forms an Escape\nRLE-codeword (i.e., not a valid entry in Table B-14).\nThen, the video bitstream corresponding to the two\nplain-blocks will be: \"Escape, rune , levele , EOB, Escape, rune , \u2212levele , EOB\". By choosing rune , levele\nto be some special values and locating the two fixedlength bit strings: \"rune , levele \" and \"rune , \u2212levele \",\nit is easy to determine the Escape and EOB VLCcodewords of Table B-14.\n\u2022 Other entries: Choose a block with two RLErune\nrun\nz }| {\nz }| {\ncodewords: \"0, * * * , 0, level, 0, * * * , 0, levele , 0, * * *\"\nwhere (run, level) is a valid entry in Table B-14\nand (rune , levele ) is an Escape RLE-codeword. By\nchoosing (rune , levele ) properly, one can easily extract\nthe VLC-codeword of (run, level) from the bit stream.\nRepeating this process for all RLE-codewords in Table\nB-14, one can completely recover the whole Table B14.\nIn the above reconstruction process, the number of required\nblocks is equal to the number of entries in Table B-14, which\nmeans only tens of MBs.\n3) Reconstructing Tables B-12 and B-13: Since AC coefficients of intra-blocks are encoded in a similar way to the\nmotion vectors, the method of reconstructing Table B-10 can\nalso be used to break Tables B-12 and B-13. To break the\nentry corresponding to dct dc size = s, choose an intra63\nz }| {\nblock as follows: \"level, 0, * * * , 0\", where level has s significant bits. Then, the video bitstream corresponding to this\nblock will be \"dct dc size, dc dct dif f erential, EOB\".\nSince EOB and dc dct dif f erential are both known, it is\neasy to determine the VLC-encoded dct dc size. Given 12\nluminance blocks with s = 0 \u223c 11, Table B-12 can be\ncompletely reconstructed. Similarly, given 12 chrominance\nblocks with s = 0 \u223c 11, Table B-13 can be completely\nreconstructed. Apparently, the number of required chosen\nMBs is 3, 6 or 12 according to the value of chroma f ormat\n(4, 2 or 1).\n4) Reconstructing Table B-15: After reconstructing Tables B-12 and B-13, one can break Table B-15 by choosing\nsome intra-blocks, in the same way of reconstructing Table\nB-14.\nAs a whole, one can see that only tens of chosen MBs\nare enough to break all the five secret Huffman tables. When\nthe picture is not too small, this means that only one chosen\n\npicture is enough to break the whole encryption scheme. So\nthe MPEG-video encryption scheme is very weak against\nchosen-plaintext attack.\nD. Known-plaintext attack\nThe known-plaintext attack is a weak version of chosenplaintext attack, in which one can only passively observe a\nnumber of plaintexts and the corresponding ciphertexts to\nbreak an encryption scheme [22], [23].\nApparently, if some chosen blocks mentioned in the\nabove-mentioned chosen-plaintext attack are observed in\na known-plaintext attack, the corresponding entries in the\ninvolved Huffman tables can be immediately reconstructed.\nIn addition, the FLC (fixed-length coding) data element\nfollowing dct dc size can be used in known-plaintext attack\nto uniquely locate dct dc size. This means that Tables\nB-12 and B-13 may be reconstructed directly. Also, the\nreconstructed VLC-entries in a Huffman table can be used to\nlocate other undetermined VLC-entries and to detect wrong\ncandidate entries, which can further reduce the attack complexity. Generally speaking, the complexity of the knownplaintext attack shall be much smaller than the complexity\nof the DAC brute-force attack, though more plain-MBs are\nrequired as compared with chosen-plaintext attack.\nIV. I MPROVING\n\nTHE\n\nMPEG-V IDEO E NCRYPTION\nS CHEME\n\nThough the main focus of this cryptanalysis paper is to\npoint out some security flaws of the MPEG video encryption\nscheme proposed in [16], in this section we give a brief\ndiscussion on how to improve the security of the MPEG\nvideo encryption scheme under study, hoping that more\nsequential studies in this research area can be motivated.\nTo improve the security of the MPEG-video encryption\nscheme, a simple way is to change the Huffman tables\nfrequently. In [16], it was suggested to reshuffle the Huffman\ntables after certain number of frames. Generally speaking,\nthese reshuffling operations might be enough to provide an\nacceptable resistance against ciphertext-only attack. However, even reshuffling these Huffman tables frame by frame\nis generally not sufficient for the security against the above\nchosen-plaintext attack, since a few number of slices may be\nenough to break the secret Huffman tables. From the most\nconservative point of view, one has to reshuffle the Huffman\ntables for each VLC-codeword. Such a heavy reshuffling\nprocess will dramatically reduce the speed of the whole\nsystem and become impractical in many real applications.\nAnother possible solution is to use multiple Huffman\ntables as suggested in [8], [17]\u2013[19]. As a typical implementation of this kind of MHT-encryption schemes, a stream\ncipher (or a secure PRNG) is adopted to determine the secret\nHuffman table from multiple candidate tables for each VLCcodeword. However, as is well known in cryptology, a stream\n\n\f8\n\ncipher is not secure against plaintext attacks if the key is\nreused to encrypt more than two plain messages. Thus, in\nreal applications, to further guarantee the security of this\nMHT-encryption scheme against plaintext attacks, one of\nthe following practical measures may be adopted to avoid\npotential security defects that may arise from the embedded\nstream cipher.\n\u2022 Avoiding reuse of the same secret key to encrypt two\nvideos, i.e., changing the secret key for different videos:\nthis measure has to be used together with a key management system and may not be very useful in low-cost\nvideo applications (such as storage of private videos in\npersonal computers and mobile devices).\n\u2022 Assigning a unique ID (UID) for each video (by the\nmanufacturer or by the end user), and then using the\nUID to initialize the stream cipher together with the\nsecret key: this measure can be considered as a special\ncase of the above measure, but it can work without a\nkey management system.\n\u2022 Using plaintext or ciphertext feedback to make the\nstream cipher dependent on the whole plain-video: this\nmeasure will bring up an error-propagation problem,\nbut can work well in error-free environments.\n\u2022 Combining the secret selection of the Huffman tables\nwith a block cipher to construct a product cipher: the\nblock cipher should be sufficiently simple and fast,\nand can even be insecure when used separately (for\nexample, with a small block size). This measure may\nlead to some new designs of MPEG video encryption\nschemes and needs future studies.\nFinally, note that the security defects about the DAC bruteforce attack and the partial-key attack cannot be essentially\navoided even with the above countermeasures, since they are\nactually caused by the inherent feature of an MPEG-video's\nsyntax structure. This implies that only using secret Huffman\ntables is not sufficient to provide an acceptable security level\nfor all MPEG-videos. Some more powerful techniques, such\nas secret permutation of DCT coefficients and encryption\nof VLC indices [9]\u2013[11], have to be introduced to achieve\nsuch a goal for MPEG-video encryption. In future, we will\ninvestigate how to combine different encryption methods to\ndesign MPEG-video encryption scheme with high level of\nsecurity.\nV. C ONCLUSIONS\nThis paper has analyzed the security of a recentlyproposed MPEG-video encryption scheme, which bases its\nsecurity of the use of some secret Huffman tables. As\na result, it is found that the scheme is not sufficiently\nsecure against DAC (divide-and-conquer) brute-force attack\nand known-plaintext attack, and is very weak against the\nchosen-plaintext attack. Another serious security defect of\nthis scheme is that a partially-known key may be used to\ndecrypt some cipher-videos, which further causes a reduction\n\nof the key space. Based on our cryptanalytic results, a brief\ndiscussion is also given on how to further improve the\nsecurity of the MPEG-video encryption scheme under study.\nR EFERENCES\n[1] H. Cheng and X. Li, \"Partial encryption of compressed images and\nvideos,\" IEEE Trans. Signal Processing, vol. 48, no. 8, pp. 2439\u20132451,\n2000.\n[2] L. Qiao and K. Nahrsted, \"Comparison of MPEG encryption algorithms,\" Comput. Graph., vol. 22, no. 4, pp. 437\u2013448, 1998.\n[3] B. Bhargava, C. Shi, and S.-Y. Wang, \"MPEG video encryption\nalgorithms,\" Multimedia Tools Appl., vol. 24, no. 1, pp. 57\u201379, 2004.\n[4] B. Furht and D. Kirovski, Eds., Multimedia Security Handbook. CRC\nPress, LLC, 2004.\n[5] B. Furht, E. Muharemagic, and D. Socek, Eds., Multimedia Encryption\nand Watermarking. Springer, 2005.\n[6] A. Uhl and A. Pommer, Image and Video Encryption: From Digital\nRights Management to Secured Personal Communication. Springer,\n2005.\n[7] W. Zeng, H. Yu, and C.-Y. Lin, Eds., Multimedia Security Technologies for Digital Rights Management. Academic Press, 2006.\n[8] C.-P. Wu and C.-C. J. Kuo, \"Design of integrated multimedia compression and encryption systems,\" IEEE Trans. Multimedia, vol. 7,\nno. 5, pp. 828\u2013839, 2005.\n[9] J. Wen, M. Severa, W. Zeng, M. H. Luttrell, and W. Jin, \"A formatcompliant configurable encryption framework for access control of\nvideo,\" IEEE Trans. Circuits Syst. Video Technol., vol. 12, no. 6, pp.\n545\u2013557, 2002.\n[10] W. Zeng and S. Lei, \"Efficient frequency domain selective scrambling\nof digital video,\" IEEE Trans. Multimedia, vol. 5, no. 1, pp. 118\u2013129,\n2003.\n[11] Y. Mao and M. Wu, \"A joint signal processing and cryptographic\napproach to multimedia encryption,\" IEEE Trans. Image Processing,\nvol. 15, no. 7, pp. 2061\u20132075, 2006.\n[12] ISO/IEC, \"Information technology \u2013 coding of moving pictures and\nassociated audio for digital storage media at up to about 1,5 Mbit/s\n\u2013 Part 2: Video,\" MPEG-1 standard: ISO/IEC 11172-2, 1993.\n[13] ISO/IEC and ITU-T, \"Information technology \u2013 generic coding of\nmoving pictures and associated audio information: Video,\" MPEG-2\nstandard: ISO/IEC 13818-2 and ITU-T Rec. H.262, 2000.\n[14] ISO/IEC, \"Information technology \u2013 coding of audio-visual objects \u2013\nPart 2: Visual,\" ISO/IEC 14496-2 (MPEG-4), 2004.\n[15] C. Shi and B. Bhargava, \"Light-weight MPEG video encryption algorithm,\" in Shaping the Future: Proc. Int. Conference on Multimedia\n(Multimedia'98), 1998, pp. 55\u201361.\n[16] M. S. Kankanhalli and T. T. Guan, \"Compressed-domain scrambler/descrambler for digital video,\" IEEE Trans. Consumer Electron.,\nvol. 48, no. 2, pp. 356\u2013365, 2002.\n[17] C.-P. Wu and C.-C. J. Kuo, \"Fast encryption methods for audiovisual\ndata confidentiality,\" in Multimedia Systems and Applications III, ser.\nProc. SPIE, vol. 4209, 2001, pp. 284\u2013295.\n[18] --, \"Efficient multimedia encryption via entropy codec design,\"\nin Security and Watermarking of Multimedia Contents III, ser. Proc.\nSPIE, vol. 4314, 2001, pp. 128\u2013138.\n[19] D. Xie and C.-C. J. Kuo, \"An enhanced MHT encryption scheme for\nchosen plaintext attack,\" in Internet Multimedia Management Systems\nIV, ser. Proc. SPIE, vol. 5242, 2003, pp. 175\u2013183.\n[20] D. A. Huffman, \"A method for the construction of minimumredundancy codes,\" Proc. I.R.E., vol. 40, no. 9, pp. 1098\u20131091, 1952.\n[21] Wikipedia, \"Huffman coding,\" online document, available at\nhttp://en.wikipedia.org/wiki/Huffman coding, 2006.\n[22] B. Schneier, Applied Cryptography \u2013 Protocols, Algorithms, and\nSouce Code in C, 2nd ed. New York: John Wiley & Sons, Inc.,\n1996.\n[23] A. Menezes, P. van Oorschot, and S. Vanstone, Handbook of Applied\nCryptography. CRC Press, 1996.\n\n\f"}