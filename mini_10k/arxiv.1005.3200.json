{"id": "http://arxiv.org/abs/1005.3200v3", "guidislink": true, "updated": "2011-04-25T15:43:16Z", "updated_parsed": [2011, 4, 25, 15, 43, 16, 0, 115, 0], "published": "2010-05-18T13:41:16Z", "published_parsed": [2010, 5, 18, 13, 41, 16, 1, 138, 0], "title": "Real-time and Probabilistic Temporal Logics: An Overview", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1005.4395%2C1005.2536%2C1005.1321%2C1005.4379%2C1005.2594%2C1005.0978%2C1005.4576%2C1005.5573%2C1005.3664%2C1005.4425%2C1005.0356%2C1005.2526%2C1005.5234%2C1005.0162%2C1005.0111%2C1005.3505%2C1005.4183%2C1005.2650%2C1005.0242%2C1005.1998%2C1005.2278%2C1005.3060%2C1005.2527%2C1005.0503%2C1005.5576%2C1005.3583%2C1005.3377%2C1005.0118%2C1005.3093%2C1005.3200%2C1005.4037%2C1005.1768%2C1005.4529%2C1005.4661%2C1005.1269%2C1005.2190%2C1005.0914%2C1005.1799%2C1005.5464%2C1005.4561%2C1005.1738%2C1005.1574%2C1005.1325%2C1005.1498%2C1005.0729%2C1005.2906%2C1005.3634%2C1005.2359%2C1005.0923%2C1005.0775%2C1005.4184%2C1005.3658%2C1005.2030%2C1005.2880%2C1005.4626%2C1005.0210%2C1005.4502%2C1005.3890%2C1005.5126%2C1005.2892%2C1005.4479%2C1005.1960%2C1005.4004%2C1005.2407%2C1005.2172%2C1005.1908%2C1005.2514%2C1005.0631%2C1005.3070%2C1005.1173%2C1005.2392%2C1005.5341%2C1005.5236%2C1005.0993%2C1005.3504%2C1005.5265%2C1005.5418%2C1005.1281%2C1005.4258%2C1005.1206%2C1005.2711%2C1005.5197%2C1005.5285%2C1005.2130%2C1005.3944%2C1005.0632%2C1005.3938%2C1005.1644%2C1005.5355%2C1005.3029%2C1005.1155%2C1005.2830%2C1005.4794%2C1005.2613%2C1005.5321%2C1005.0904%2C1005.5174%2C1005.2083%2C1005.4989%2C1005.5624%2C1005.5557&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Real-time and Probabilistic Temporal Logics: An Overview"}, "summary": "Over the last two decades, there has been an extensive study on logical\nformalisms for specifying and verifying real-time systems. Temporal logics have\nbeen an important research subject within this direction. Although numerous\nlogics have been introduced for the formal specification of real-time and\ncomplex systems, an up to date comprehensive analysis of these logics does not\nexist in the literature. In this paper we analyse real-time and probabilistic\ntemporal logics which have been widely used in this field. We extrapolate the\nnotions of decidability, axiomatizability, expressiveness, model checking, etc.\nfor each logic analysed. We also provide a comparison of features of the\ntemporal logics discussed.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1005.4395%2C1005.2536%2C1005.1321%2C1005.4379%2C1005.2594%2C1005.0978%2C1005.4576%2C1005.5573%2C1005.3664%2C1005.4425%2C1005.0356%2C1005.2526%2C1005.5234%2C1005.0162%2C1005.0111%2C1005.3505%2C1005.4183%2C1005.2650%2C1005.0242%2C1005.1998%2C1005.2278%2C1005.3060%2C1005.2527%2C1005.0503%2C1005.5576%2C1005.3583%2C1005.3377%2C1005.0118%2C1005.3093%2C1005.3200%2C1005.4037%2C1005.1768%2C1005.4529%2C1005.4661%2C1005.1269%2C1005.2190%2C1005.0914%2C1005.1799%2C1005.5464%2C1005.4561%2C1005.1738%2C1005.1574%2C1005.1325%2C1005.1498%2C1005.0729%2C1005.2906%2C1005.3634%2C1005.2359%2C1005.0923%2C1005.0775%2C1005.4184%2C1005.3658%2C1005.2030%2C1005.2880%2C1005.4626%2C1005.0210%2C1005.4502%2C1005.3890%2C1005.5126%2C1005.2892%2C1005.4479%2C1005.1960%2C1005.4004%2C1005.2407%2C1005.2172%2C1005.1908%2C1005.2514%2C1005.0631%2C1005.3070%2C1005.1173%2C1005.2392%2C1005.5341%2C1005.5236%2C1005.0993%2C1005.3504%2C1005.5265%2C1005.5418%2C1005.1281%2C1005.4258%2C1005.1206%2C1005.2711%2C1005.5197%2C1005.5285%2C1005.2130%2C1005.3944%2C1005.0632%2C1005.3938%2C1005.1644%2C1005.5355%2C1005.3029%2C1005.1155%2C1005.2830%2C1005.4794%2C1005.2613%2C1005.5321%2C1005.0904%2C1005.5174%2C1005.2083%2C1005.4989%2C1005.5624%2C1005.5557&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Over the last two decades, there has been an extensive study on logical\nformalisms for specifying and verifying real-time systems. Temporal logics have\nbeen an important research subject within this direction. Although numerous\nlogics have been introduced for the formal specification of real-time and\ncomplex systems, an up to date comprehensive analysis of these logics does not\nexist in the literature. In this paper we analyse real-time and probabilistic\ntemporal logics which have been widely used in this field. We extrapolate the\nnotions of decidability, axiomatizability, expressiveness, model checking, etc.\nfor each logic analysed. We also provide a comparison of features of the\ntemporal logics discussed."}, "authors": ["Savas Konur"], "author_detail": {"name": "Savas Konur"}, "author": "Savas Konur", "links": [{"href": "http://arxiv.org/abs/1005.3200v3", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1005.3200v3", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1005.3200v3", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1005.3200v3", "arxiv_comment": null, "journal_reference": "Frontiers of Computer Science 7(3): 370-403 (2013)", "doi": null, "fulltext": "Real-time and Probabilistic Temporal Logics: An Overview\n\narXiv:1005.3200v3 [cs.LO] 25 Apr 2011\n\nSavas Konur\nDepartment of Computer Science, University of Liverpool\n\nAbstract\nOver the last two decades, there has been an extensive study on logical formalisms\nfor specifying and verifying real-time systems. Temporal logics have been an important\nresearch subject within this direction. Although numerous logics have been introduced\nfor the formal specification of real-time and complex systems, an up to date comprehensive analysis of these logics does not exist in the literature. In this paper we\nanalyse real-time and probabilistic temporal logics which have been widely used in\nthis field. We extrapolate the notions of decidability, axiomatizability, expressiveness,\nmodel checking, etc. for each logic analysed. We also provide a comparison of features\nof the temporal logics discussed.\n\n1\n\nIntroduction\n\nTemporal logics have been extensively used in the specification of various systems, such as\nreal-time and control systems, for more than two decades. They provide a mathematical\nfoundation to formally analyse these systems. Many industrial applications and case studies\nproved the usability of temporal logics within this context.\nA system behaviour is usually described by a set of 'events', and their associated 'temporal\nconstraints'. Temporal logics allow us to express such a behaviour by means of 'logical formulas' [12]. In general, temporal logics have been introduced for specific types of problems.\nThe general trade-off is between the complexity and simplicity. In certain applications\nsimple logics are preferred to the complex ones [12]. Complex logics are generally difficult\nto deal with practically.\nNumerous logics have been introduced for the formal specification of real-time and complex systems, and various aspects of logics have been studied. Some surveys [83, 9, 12, 38]\nmake a comprehensive analysis of specific logics. In this paper we outline main and recent\ndevelopments in the field in a broad sense. Namely, we give an overview on most-known\ntemporal logics introduced up to now. All these logics are different in terms of 'expressiveness', 'order', 'time metric', 'temporal modalities', 'time model' and 'time structure'. They\nalso have different capabilities for the specification and verification of real-time systems.\nIn this paper we survey the following aspects: 'basic temporal framework', 'real-time' and\n'probability'. Real-time aspect of temporal logics is important to express timing requirements of real-time systems. Probabilistic aspect is needed in order to reason about systems\nwhich include uncertainty and probabilistic assumptions.\nIn the following we will analyse well-known real-time and probabilistic temporal logics. We\nwill summarize important results on decidability, axiomatizability, expressiveness, model\n1\n\n\fchecking, etc. for each logic analysed. We will also provide a comparison of features of the\ntemporal logics discussed.\nNote that in some instances we think it is more convenient to refer to the original text for\nclarification purposes. In the following, we will use quotation marks to use the text from\nthe original resources.\n\nPreliminaries1\n\n2\n\nWe can classify temporal logics based on several criteria. The common dimensions are\n'propositional versus first-order', 'point-based versus interval-based', 'linear versus branching', 'discrete versus continuous', etc [24, 105, 12]. Below we discuss the most important\ncriteria to classify temporal logics.\nPoint versus interval structures: There are two structure types to model time in a\ntemporal logic: points (instants) and intervals. A point structure T can be represented\nas hT, <i, where T is a nonempty time points, and < is a 'precedence' relation on T .\nDifferent temporal relationships can be described using different modal operators. Some\nlogics include modal operators which can express quantification over time. However, a\nrelationship between intervals is difficult to express using a point-based temporal logic [32].\nInterval temporal logics are expressive, since these logics can express a relationship between\ntwo events, which are represented by intervals. Also, interval logics [95, 96, 78, 66, 76, 92,\n43] have a simpler and neater syntax to define a relationship between intervals, which\nprovides a higher level abstraction than a point-based logic when modeling a system. This\nmakes interval logic formulas much simpler and more comprehensive than point-based logic\nformulas.\nSome of the known interval operators are meets, before, during [2], which denote the ordering\nof intervals; chop modality [104], which denotes combining two intervals; and duration,\nwhich denotes a length of an interval [16].\nInterval structures can be considered in two ways: (i) intervals are 'primitive' objects (ii)\nintervals are composed from points. [103, 77, 106] consider intervals as primitive objects\nof time. [103] defines a 'period structure' as the tuple hI, \u2286, \u227ai, where I is a non-empty\nset of intervals, \u2286 is a sub-interval relation, and \u227a is a precedence relation. One particular\nproblem of this approach is that theoretical analyses are usually very difficult. Also, although it is very easy to define properties linearity, density, discreteness, unboundedness in\na point-based logic, it is very difficult to define these properties in an interval logic where\nintervals are primitive objects.\n[38, 43, 104] consider intervals as set of points, where the time flow is assumed as \"a strict\npartial ordering of time points\". Namely, an interval structure is defined as hT , I(T )i,\nwhere T = hT, <i is a strict partial ordering and I(T ) is a set of intervals. The properties\nmentioned above can be defined in an interval logic where intervals are composed of time\ninstants.\n1\n\nThis section is taken verbatim from [60].\n\n2\n\n\fWe conclude this section with the historical development of interval-based temporal logics.\nThe concept of time intervals was first studied by Walker [107]. Walker considered a nonempty set of intervals, which is partially orderd. However, his work does not cover aspects\nof temporal logic in a general sense. In [44] philosophical aspects of an interval ontology\nwas analysed. In [53] an interval tense logic was introduced. [23, 59, 93, 15, 102, 34, 99]\nstudied interval logics within the natural language domain. It was argued that intervalbased semantics are more convenient for human language and reasoning, and interval-based\napproach is more suitable than point-based approach for temporal constructions of natural\nlanguage. [2, 3, 5, 4] studied event relations and interval ordering. The authors introduced\nso-called Allen's thirteen interval relations and worked on axiomatisation and representation\nof interval structures. Some further works on Allen's algebra were carried out by [66, 35].\nRecently, [94] investigated the relation between Allen's logic and LTL. Interval based-logics\nhave been also applied to other fields in computer science. [86, 90, 49] worked on process\nlogic, where intervals are used as representation of information. Another important work\nwas the development of interval temporal logic (ITL), and its application to design of\nhardware components [78, 42]. Since the development of ITL, various variations have been\nproposed so far. In particular, Duration Calculus [16] is an extension of interval temporal\nlogic with \"a calculus to specify and reason about properties of state durations\".\nTemporal Structure: There are important properties regarding the time flow and temporal domain structure. Some properties are summarized below:\nAssume hT, <i represents a temporal structure, where T is a nonempty time points, and <\nis a 'precedence' relation on T . In a temporal logic the structure of time is linear if any two\npoints can be compared. Mathematically, a strict partial ordering is called linear if any two\ndistinct points satisfy the condition: \u2200x, y : x < y \u2228 x = y \u2228 x > y. This definition suggests\nthat in linear temporal logics each time point is followed by only one successor point.\nAnother class is the branching-time structures, where the underlying temporal structure is\nbranching-like, and each point may have more than one successor points. The structure\nof time can be considered as a tree. A tree is a set of time points T ordered by a binary\nrelation < which satisfies the following requirements [33]:\n\u2022 hT, <i is irreflexive;\n\u2022 hT, <i is transitive;\n\u2022 \u2200t, u, v \u2208 T u < t and v < t \u2192 u < v, u = v or u > v (i.e. the past of any point is\nlinear);\n\u2022 \u2200x, y \u2208 T, \u2203z \u2208 T such that z < x and z < y (i.e. hT, <i is connected).\nOne important characteristics of branching logics is that the syntax of these logics include\npath quantification which allows formulas to be evaluated over paths. However, linear\ntemporal logics are restricted to only one path.\nA temporal domain is discrete with respect to the precedence relation < if each non-final\npoint is followed by a successor point. This can be formulated as follows: \u2200x, y (x < y \u2192 \u2203z\n(x < z \u2227 \u00ac\u2203w(x < w \u2227 w < z))) [100]. Majority of temporal logics used for system\nspecification are defined on discrete time, where points represent system states. A state\n3\n\n\fsequence, as a result of a program execution, can be considered as isomorphic to discrete\nseries of positive integers.\nA temporal domain is dense if, between any two distinct points, there is another point.\nThis can be formally denoted \u2200x, y(x < y \u2192 \u2203z(x < z < y)) [100]. Above we mentioned\nthat flow of discrete time can be represented as positive integers. Similarly, density can\nbe represented as real numbers. It is noteworthy to mention that there is a distinction\nbetween density and continuity: \"A model of dense time is isomorphic to a dense series of\nrational numbers, meaning that there is always a rational number between any two rational\nnumbers; whereas a model of continuous time is isomorphic to a continuous series of real\nnumbers\" [105].\nA temporal domain is bounded above (bounded below ) if the temporal domain is bounded in\nthe future (past) time. This can be formulated as follows: \u2203x\u00ac\u2203y(x < y (\u2203x\u00ac\u2203y(y < x)))\n[100]. Similarly, a temporal domain is unbounded above (unbounded below ) if each point\nhas a successor (predecessor) point, which is formally denoted \u2200x\u2203y(x < y (\u2200x\u2203y(y < x)))\n[100].\nA temporal domain is Dedekind complete if all time point sets (non-empty) are bounded\nabove, and they have a least upper bound.\nBased on differences in temporal domain properties logics have different characteristics.\nFor example, we can consider a temporal domain which is linear or branched; discrete or\ndense; finite/infinite in future and/or past, etc. All these choices result in different syntax,\nsemantics, decidability and complexity.\n\n3\n\nReal-Time Temporal Logics\n\nOver the last two decades, temporal logics have been used as a mathematical foundation\nto formally analyse real-time systems. System behaviours are usually expressed in terms\nof a logical formula. Although this depends on the richness of the language, in general,\ntemporal logics are very expressive to specify important aspects of the systems. Generally\nspeaking real-time temporal logics have been defined for specific purposes. In certain cases,\ntemporal logics with a simple syntax are used in order to make them practically feasible.\nBelow we give a brief account of well-known real-time temporal logics (summarised from\n[83, 9, 12]). All these logics are different in terms of 'expressiveness', 'order', 'time metric', 'temporal modalities', 'time model' and 'time structure'. They also have different\ncapabilities for the specification and verification of real-time systems.\n\n3.1\n\nReal-time Extensions of CTL\n\nIn [25] a real-time extension of CTL, called RTCTL, was introduced. RTCTL has \"pointbased strictly-monotonic integer-time semantics\" [9]. RTCTL includes a metric for time.\nThe satisfiability problem of RTCTL is 2-EXPTIME-complete [25]. The model-checking\nproblem is linear [25].\n[6] introduced the real-time logic TCTL, which extends CTL with hidden clock bounded\noperators. It has \"point-based strictly-monotonic real-time semantics\" [9]. The satisfiability\nchecking of a TCTL formula is undecidable if it is interpreted over dense time domains; but\n4\n\n\fthe model checking problem still remains decidable [6]. [6] finds that the model checking\ncomplexity of TCTL is \"exponential in the number of clocks, exponential in the length of\ntiming constraints, linear in the size of the node-transition graph, linear in the number of\noperators in the formula and exponential in the length of the subscripts in the formula\".\n[6] also shows that the upper bound can be improved to PSPACE, and the model checking problem is PSPACE-complete. [67] considers the model checking problem of different\nsubclasses of TCTL.\nAnother branching time logic called TPCTL is introduced in [47]. TPCTL is a probabilistic\nextension of CTL. The underlying time structure is represented by discrete time. TPCTL\nsemantics is defined over non-deterministic probabilistic transition systems. TPCTL can\nexpress both hard and soft deadline properties, such as 'an error occur with a probability of\n0.1 within 100 seconds'. [47] shows that TPCTL model checking has EXPTIME complexity.\n[11] proves that the model checking problem is polynomial.\n\n3.2\n\nReal-Time Logic (RTL):\n\nRTL is a first-order temporal logic, introduced in [56] to reason about events and their\nrelations. The logic includes a so-called occurrence function which maps each event to a\ntime stamp. Existence of occurrence function allows RTL to express periodic and nonperiodic real-time properties.\nIn RTL, time is measured with an 'absolute' clock whose value can be referenced in a\nformula. RTL is defined over a linear sequence of discrete time points, which are bounded\nin the past, but unbounded in the future. [8] shows that under these semantics RTL is\nundecidable.\nSince absolute clocks are used, and clock values can be explicitly referenced in formulas,\nRTL can be used to express ordering and quantitative temporal constraints. One disadvantage of this functionality is that using explicit reference to time results in complex formulas\ndifficult to understand. For example, the temporal constraint \"for each occurrence of an\nevent B which happens at a time instant t0 , the predicates startA and endA hold (marking\nan interval [startA, endA] at which A is true), and the interval [startA, endA] is subsumed\nby the interval [t0 , t0 +tb ] (where t0 \u2264startA \u2264 endA\u2264t0 +tb )\" is specified in RTL as follows\n[12]:\n\u2022 \u2200t.\u2200i.@(\u03a9B, i) = t \u2192 (\u2203j.(t \u2264 @(\u2191 A, j)) \u2227 (@(\u2193 A, j) \u2264 t + tb ))\nwhere \u03a9B denotes the occurrence of the event B, t denotes time, \u2191 A denotes the beginning\nof the action A, \u2193 A denotes the completion of the action A, and i and j are the occurrences\nof the events marked with the operator @. Time is captured by the occurrence function @\nwhich assigns time values to event occurrences; @(\u03a9B, i) is defined as the time of the i -th\noccurrence of \u03a9B [83].\nDecision procedures devised for RTL in general are not practical. To increase the efficiency\nsome methods were deployed. In [57], RTL formulas are re-structured into \"computational\ngraphs\" using a formalism called \"modecharts\", which resulted in \"an exponential time\ndecision procedure (in the worst case)\" [83].\n\n5\n\n\f3.3\n\nReal-Time Temporal Logic (RTTL):\n\nRTTL [84, 82] is a first-order explicit clock logic. Discrete linear time points are employed\nas temporal structure. The sequence of time points are bounded in the past, but unlimited\nin the future. In an RTTL formula the clock variable t is explicitly referred. RTTL is a\nfirst-order logic because any arbitrary quantification is allowed over time variables. As an\nexample, \"the bounded response time\" is expressed in RTTL as follows [83]:\n\u2022 \u0003T [(red \u2227 t = T ) \u2192 \u2666(green \u2227 T + 3 \u2264 t \u2264 T + 5)]\nwhich means that \"if the traffic light is red at time T, then eventually within 3 to 5 ticks\nfrom T the light must turn green\". Above t is the clock variable, and T is time variable,\nwhich is quantified in the formula.\nRTTL provides an explicit reference to clock value and indirect quantification to time values.\nThis results in a very expressive language, and allows to write very complex quantitative\nconstraints. This makes this logic very useful in real-time system specification. However,\nundecidability is a major problem. In addition, due to explicit clock reference, formulas\nbecome too complex and difficult to understand.\nIn addition to discrete semantics, RTTL formulas can be also interpreted over dense time\ndomains. The logic is undecidable in both discrete and dense semantics [8]. The model\nchecking in RTTL is also undecidable. RTTL has a sound proof system [82].\nSome decidable fragments of RTTL are presented in the literature. Some well-known fragments are as follows:\nXCTL [50] is a propositional fragment of RTTL. It is an explicit clock logic, and it is\ninterpreted over discrete time. XCTL has a less restricted quantification than RTTL in\nthe sense that time variables can be quantified with only one outermost quantification; but\nthe syntax of XCTL allows expressions with arithmetic operations. The satisfiability and\nmodel checking problems for XCTL with dense time semantics are both undecidable [50].\nHowever, these problems are PSPACE-complete for XCTL without quantification [50]. [50]\nprovides a \"single exponent decision procedure for the validity of XCTL formulas\" and a\n\"double exponent procedure\" for XCTL model checking.\nTPTL [8] is also a propositional fragment of RTTL, which is interpreted over discrete time.\nTPTL allows expressions with arithmetic operations; but this is only allowed for integer\nconstants (not for variables). In TPTL explicit reference to clock is replaced by \"freezing\"\nquantification, and clock values are recorded through \"auxiliary static timing variables\" [83].\nThe satisfiability and model checking problems for TPTL with discrete time semantics\nare EXPSPACE-complete; but they become undecidable with dense time semantics [5].\n[5] presents a doubly-exponential-time decision procedure for TPTL. The model checking\nalgorithm for the logic is \"exponential on the value of the product of all time constants\"\n[83]. [8] shows that if past operators are added to the logic, the satisfiability problem for\nTPTL becomes non-elementary. [52] proves that there is a complete finite axiomatization\nfor TPTL with discrete time semantics.\n\n3.4\n\nMetric Temporal Logic (MTL):\n\nMTL [61] is a propositional bounded-operator logic, which is a fragment of RTTL such\nthat time references are added to temporal operators ('until', 'next' and 'since'). In MTL\n6\n\n\fexplicit reference to clock is not allowed, which makes the logic more practical because\nquantifications on a temporal domain are no longer needed. For example, the formula\nA \u2192 \u2666\u226410 B asserts that if A occurs then B occurs within 10 time units.\nMTL is interpreted over linearly ordered discrete time points. In [61], dense time domain\nis assumed. This allows MTL to express properties which cannot be precisely expressed\nin discrete-time domain, such as variables based on continuous time (e.g temperature and\npressure) [83].\n[8] states that both the satisfiability and model checking problems for MTL over dense\ntime domain are undecidable, but a deductive proof system exists. [8] also shows that in\ncase of discrete time they reduce to EXPSPACE-complete. [8] also introduces a decision\nprocedure for MTL over discrete time domain, which has 2-EXPTIME complexity, and a\nmodel checking algorithm, which is exponential on the value of the largest time constant.\n[61] provides a sound axiomatic system for MTL. In [48] it is shown that XCTL and MTL\ncannot be compared; namely, for both logics, there is a property which is expressible in\none logic, but not in the other [83]. However, in case of discrete time, \"TPTL and MTL\nare equally expressive (it is shown that this is not valid in dense domains [52])\" [83]. [85]\nfinds that \"the satisfiability problem for MTL over finite timed words is decidable, with\nnon-primitive recursive complexity\".\nIn [7] MTL is restricted to \"interval-based strictly-monotonic real-time semantics\". This\nlogic is called MITL, which uses operators with bound. In MITL point intervals are not\nallowed. For example, the formula \u0003(p \u2192 \u2666[3,3] q) is not a valid formula because equality\nconstraints are not allowed [9]. MITL cannot formalise punctuality properties2 . Undecidability of logics interpreted over dense time is related to punctuality properties [9]. [7]\nshows that the satisfiability and model checking problems for MITL were shown to be\nEXPSPACE-complete. There is also a model checking algorithm, which is 2-EXPTIME.\nRecently, [85, 68] showed that restricting MTL to positive-length intervals is not necessary\nto achieve the decidability. They show that \"MTL over finitary event-based semantics\" are\ndecidable without this restriction. [71] compares the past and future fragments of MITL\nwith respect to the \"recognizability of their models by deterministic timed automata\". The\nauthors show that \"timed languages specified by the past fragment of MITL, can be accepted\nby deterministic timed automata; but certain languages expressed in the future fragment\nof MITL are not deterministic.\"\n\n3.5\n\nReal-Time Interval Logic (RTIL):\n\nRTIL [92] is a real-time interval logic with metric for time. RTIL a propositional logic which\nallows to assign numerical values to interval bounds and to measure interval durations. It\nalso allows quantification over finite domains. Time points can be specified explicitly or\nrelative to the beginning of the interval [12]. These characteristics make RTIL to be useful\nin formalise specifications in a neater syntax.\nThe specification in Section 3.2 is specified in RTIL as follows [12]:\n\u2022 \u0003 [\u2299B \u0592\u2192 tb ]\u2217 (\u2299startA \u21d2 \u2299endA)\n2\n\nA punctuality property states that the event B follows A in exactly t seconds; for any formal language\nthat can express punctuality, the satisfiability problem is undecidable for a dense time domain [83].\n\n7\n\n\fwhere \u2299A extracts the time point at which A becomes true, and the operator\u2217 means there\nexists a subinterval.\n\n3.6\n\nTemporal Interval Logic with Compositional Operators (TILCO):\n\nTILCO [73, 74] is an extension of first-order logic with temporal operators, which do not\nhave explicit temporal quantification. TILCO is an interval logic; that is, the logic is\ninterpreted over linear intervals.\nTILCO can specify events and their relations (e.g. ordering, delay, etc.) in either qualitative\nor quantitative manner. Namely, end points of an interval at which an action or an event\nholds can be specified with respect to that of other events of actions; in addition, this can\nbe done with an absolute numerical measure. This makes TILCO a very expressive logic,\nand very useful to specify complex behaviours of real-time systems.\nSince TILCO is an interval-based logic, it is more natural to specify temporal constraints\nwith time bounds. Therefore, TILCO is very efficient to express \"invariants, precedence\namong events, periodicity, liveness and safety conditions, etc.\" [12].\nThe specification in Section 3.2 can be expressed in TILCO as follows [12]:\n\u2022 B \u2192 endA?(0, tb ) \u2227 \u00acuntil(endA, \u00acstartA)\nwhere ? denotes universal temporal quantification.\n[73, 75] provides a sound sound deductive system. This proof system is used along with\nthe Isabelle theorem prover [87] to provide an automatic proof tool for TILCO. The logic is\nunsurprisingly undecidable, because it extends the first-order logic. However, a decidable\nsubset can be obtained if we restrict ourselves to quantifications on finite sets.\n\n4\n\nProbabilistic Logics\n\nProbabilistic reasoning has been the subject of computer science for a long time. There is\nan extensive study about formal systems with uncertainty. There are two main approaches:\nextending classical logic with probabilistic operators (such as modal logic of knowledge in\n[27]); combining probabilistic approach with non-classical logics (probabilistic extension of\nintuitionistic logic [72]). Below we review well-known probabilistic temporal logics.\n\n4.1\n4.1.1\n\nProbabilistic Temporal Logics\nThe Logics PCTL and PCTL*\n\nProbabilistic Computation Tree Logic, PCTL [45, 46], is a probabilistic extension of the\nbranching time temporal logic CTL [20]. PCTL is interpreted over discrete-time Markov\nchains. Each transition in a path corresponds to one time step. The path quantifiers in\nclassical branching-time temporal logics are replaced with probabilities. Namely, universal\nand existential quantification over paths is a subset of probabilistic quantification. PCTL's\n8\n\n\fprobabilistic operator provides a more general quantification, because as well as expressing\na property is true at all/some paths, we can also express a property is true at more than\n50% of the paths.\nPCTL is very convenient to specify so-called soft deadline properties, e.g. \"after a request\nfor a service, there is at least a 98% probability that the service will be carried out within\n2 seconds\" [46]. Soft deadline properties are important in real-time system specification.\nSome real-time requirements are specified in PCTL as follows [46]:\n\u2264\u221e\n\u2022 (i) \u2200\u0003f \u2261 f U\u22651\nf alse\n\n\u2264\u221e\n(ii) \u2203\u2666f \u2261 trueU>0\nf.\n\n\u2264p\nwhere f1 U\u2265t\nf2 asserts that \"there is at least a probability p that either f1 will remain true\nfor at least t time units, or that both f2 will become true within t time units and that\n\u2264p\nf1 will be true from now on until f2 becomes true\"; and f1 U\u2265t\nf2 asserts that \"there is at\nleast a probability p that both f2 will become true within t time units and that f1 will be\ntrue from now on until f2 becomes true\" [46]. Therefore, \"\u2200\u0003f intuitively means that f is\nalways true (in all states that can be reached with non-zero probability)\", and \"\u2203\u2666f means\nthat there exists a state where f holds which can be reached with non-zero probability\"\n[46].\n\n[46] presents a model checking algorithm for PCTL, which is polynomially bounded by the\nsize of the formula and the Markov chain 3 model.\n[10] defines another probabilistic variant of CTL [20]. This new logic is called PCTL*, which\ncan specify quantitative probabilistic properties of systems, modelled as discrete Markov\nprocesses 4 . [20] also extends discrete Markov processes to generalized Markov processes 5 ,\nwhere transition probability function is not total. Generalized Markov processes are convenient to model ''abstraction\" and \"refinement\". [10] also presents an elementary model\nchecking algorithm for PCTL* over discrete Markov processes, which is then extended for\ngeneralized discrete Markov processes. This algorithm can also be used to determine the\nsatisfiability of PCTL* formulas. In fact, [10] shows that the decision problem for PCTL*\nformulas on generalized Markov processes is decidable. However, no efficient computational\nmethod is given for this problem. In addition, no sound and complete axiomatisation of\nthe logic is given.\n[14] shows that model-checking algorithms for extensions of PCTL and PCTL* to probabilisticnondeterministic models have a polynomial-time complexity in the size of the model, which\nis same as the model checking complexity on Markov chains [45, 46, 10]. This result shows\nthat adding nondeterminism does not increase model checking complexity in the size of the\nmodel. When we consider time bounds expressed in terms of the size of the formula, the situation is different. The model checking complexity of PCTL is linearly bounded in the size\nof the formula for both Markov chains and probabilistic-nondeterministic systems. However, while model checking complexity of PCTL* on Markov chain is exponentially bounded\n3\n\nA Markov chain is a tuple (S, P P\n) where S is a set of states and P : S \u00d7 S \u2192 [0,1] is the transition\nprobability matrix such that (\u2200s \u2208 S) s\u2032 \u2208S P (s, s\u2032 ) = 1 [91].\n4\nA (finite) Markov process is a 4-tuple (AP, S, P, L), where AP is a finite set of atomic propositions, S\nis a countable\nnonempty set of states, P : S \u00d7 S \u2192 [0,1] is the transition probability function such that\nP\n(\u2200s \u2208 S) s\u2032 \u2208S P (s, s\u2032 ) = 1 and L : S \u2192 2AP is a labeling function [10].\n5\nA generalized Markov process is a 3-tuple (AP, S, L) (where AP, S and L are defined as in Markov\nprocesses) and a finite set of constraints on the transition probabilities [10].\n\n9\n\n\fin the size of formula, it is in double exponential time on probabilistic-nondeterministic systems.\n4.1.2\n\nThe Logic PTCTL\n\nA probabilistic extension of the real-time branching logic TCTL is defined in [65]. The logic\nis called PTCTL, which combines both the logics TCTL and PCTL. PTCTL can formalize\nproperties such as 'with a probability higher than 0.9 the message is delivered within 5\nseconds'. This can be expressed in PTCTL as follows: P>0.9 [true U\u22645 rcv]. PTCTL\nincludes a set of clock variables in its syntax in order to specify timing properties.\nSince PTCTL is a probabilistic extension of TCTL, PTCTL is also an undecidable logic.\n[65] shows that the model checking problem is \"polynomial in the size of region graph and\nlinear in the size of formula\". It follows that the model checking problem is EXPTIME\ndue to the size of region graph. [58] shows that the model checking problem is EXPTIMEcomplete. [58] also considers the model checking problems of some subclasses of PTCTL.\n4.1.3\n\nThe Logic PLTL\n\nA propositional probabilistic discrete-linear temporal logic, called Probabilistic Propositional Temporal Logic (PLTL), is introduced in [80]. PLTL allows probabilistic reasoning,\nwhich is extended with temporal aspects. The logic is interpreted over linear time points,\nand includes standard temporal operators, such as 'next', 'until', 'sometime' and 'always'.\nPLTL can express sentences such as \"(according to the current set of information) the\nprobability that sometime in the future \u03b1 is true is at least n\" [80].\nGiven that , \u2666 and \u0003 are the 'next', 'sometime' and 'always' operators, respectively, and\nP\u223c\u03b1 (\u223c\u2208 {<, \u2264, =, \u2265, >}) is a probabilistic operator, an example of a PLTL formula is [80]\n\u2022\n\nP\u2265r p \u2227 \u2666P<s (p \u2192 q) \u2192 \u0003P=t q\n\nwhich aserts \"if the probability of p in the next moment is at least r and sometime in the\nfuture q follows from p with the probability less than s, then the probability of q will always\nbe equal to t\" [80].\n[80] analyses completeness, decidability and complexity of the logic PLTL. It describes a\nclass of so-called 'measurable models'. It is proved that \"PLTL restricted to the class of\nall measurable models (P LT LM eas )\" has a sound and complete (infinitary) axiomatisation.\nThe term infinitary means that the language and formulas are finite, but proofs can be\ninfinite (The completeness cannot be proved with finitary axiomatisation). [80] shows that\n\"a P LT LM eas -satisfiable formula is satisfiable in an ultimately periodic model in which\nvarious parameters are bounded by functions depending on the size of the formula\". [80]\nalso shows that \"the satisfiability problem for P LT LM eas is PSPACE-hard, and that it\nbelongs to NEXPTIME\".\nIn [80] also introduces First-order Probabilistic Temporal Logic (FOPLTL), which is the\nfirst-order version of PLTL. The complete infinitary axiomatisation is extended for the logic\nFOPLTL (No complete finitary axiomatisation is possible). The set of all FOPLTL-valid\nsentences is not recursively enumerable [33].\n10\n\n\f4.1.4\n\nThe Logics P T Lf and P T Lb\n\n[51] introduces two probabilistic branching time temporal logics P T Lf and P T Lb , which\nare interpreted over finite Markov chains and stochastic processes, respectively. P T Lf and\nP T Lb can express properties, such as \"invariant and liveness without explicit reference to\nthe values of the transition probabilities\" [51]. P T Lf is a suitable logic for the specification\nof sequential programs. P T Lb is an extension of P T Lf , which can be used to reason about\nconcurrent programs.\nTo show the syntax of the logics, let us consider the formula p \u2200U q. This formula asserts\nthat \"along all paths w starting with the initial state and consisting only of transitions with\nnonzero probability, p holds at all states of w up to the first state, if any, at which q holds\"\n[51].\nThe satisfiability problems of P T Lf and P T Lb are decidable. [51] provides an EXPTIME\ndecision procedure based on the tableau techniques of [13] and [19]. [51] provides proof\nsystems for both logics. The paper also shows that P T Lb does not have a finite-model\nproperty, and there is a connection between \"satisfiable formulas of P T Lb and finite state\nconcurrent probabilistic programs\".\nIn literature, we can find similar formal systems to P T Lf and P T Lb . [88] proposes a linear\ntime probabilistic logic to reason about concurrent probabilistic programs; but it is not a\ncomplete logic. [69] introduces a similar logic which is more expressive than P T Lb ; but its\ndecision procedure is less efficient. [22] determines \"the complexity of testing whether a finite\nstate (sequential or concurrent) probabilistic program satisfies its specification expressed in\nlinear temporal logic LTL\". [22] shows that this problem is decidable and it is in PSPACE.\n[22] also provides an EXPTIME procedure for sequential programs. This is a more efficient\nmethod than that of P T Lf and P T Lb . For concurrent programs it is shown that the\nproblem is complete in 2-EXPTIME.\n4.1.5\n\nThe Logic PDC\n\nThe Probabilistic Duration Calculus (PDC ) [70] is an extension of Duration Calculus [17]\nwith probabilities. PDC allows us to reason about probabilistic systems, and enables to\nexpress requirements such as a property holds with a certain probability. In PDC the\nsystem model is described as a finite automaton with fixed transition probabilities, which\nactually defines a discrete Markov process. The main idea is described in [70] is to express\nproperties in DC, define satisfaction probabilities for formulas, and define a calculus to\ncalculate the probability of a formula from its subformulas' probabilities.\nPDC satisfiability is described in [70] as follows: \"Consider some finite probabilistic timed\nautomata A. The behaviours of A can be represented as a set of M of DC models. The\nprobabilistic principles that manage the working of A used to introduce probability on the\nsubsets of M. Given a DC formula D, the term \u03c0(D)(t) denotes the probability of those\nmodels from M that satisfy D at the interval [0, t]. A term of this sort is the component\nof PDC language\" [70]. An example PDC formulas is given below:\n\u2022 \u03c0s0 ((true; \u2308s\u2309); (\u2308s\u2032 \u2309; true))(t) = 0\n\n11\n\n\fIn [70] PDC is interpreted over discrete time; i.e. discrete transitions are assumed in models,\ndefined as probabilistic time automata. In a later work, [54], PDC was defined for the case\nof continuous time, in which transitions in probabilistic automata take place in continuous\ntime. In this logic, properties are written in terms of DC formulas. \"Implementations of\ngiven requirements are modelled by continuous semi-Markov processes with finite space,\nwhich are expressed as finite automata with stochastic delays of state transitions (such\nan automaton is called continuous time probabilistic automaton)\" [54]. [54] also defines a\nprobabilistic model for DC formulas and a set of axioms/rules to calculate the satisfaction\nprobabilities of DC formulas with respect to probabilistic automata. To our best knowledge,\nthere is no complete proof system for PDC. As for the decidability, PDC is, not surprisingly,\nan undecidable logic.\n[55] defines the logic Simple Probabilistic Duration Calculus (SPDC), which is another probabilistic extension of Duration Calculus. The syntax of SPDC allows us \"to reason about\nthe probability of the satisfaction of a duration formula by a probabilistic timed automaton\nas well as to specify real-time properties of the system itself\". SPDC is interpreted over\nbehavioural models 6 , proposed in [64], which are variant of probabilistic timed automata.\n[55] proposes a model checking technique which is an extension of the technique introduced\nin [101] \"to check if a timed automaton satisfies a DC formula in the form of linear duration\ninvariants or discretisable DC formulas based on searching the integral reachability graph\nof the timed automaton\" [55] . The model checking problem is decidable \"for a class of\nSPDC formulas of the form linear duration invariants, or a formula for bounded liveness\"\n[55].\n4.1.6\n\nThe Logic PNL\n\n[40] introduces the Probabilistic Neighbourhood Logic (PNL), which extends Neighbourhood Logic. [40] provides a complete proof system by extending the proof system of NL.\nIn PNL, a more generalised version of probabilistic timed automata (defined in [54]) is\nassumed.\nPNL has a similar grammar to the logic NL. It contains duration operators and probabilistic operators. The function symbols take a duration as argument and return a term\nof the probability. We now consider an example. Let b denote a formula which is true\nat any interval between two consecutive processes. The following formula expresses \"the\nassumption that the probability for the duration of such a period to be no bigger than x is\na function of x which is the interpretation of the function symbol F in the model\" [41]:\n\u2022 p(b \u2227 l \u2264 x = F (x))\nPNL has the same expressive power with PDC, except for state expressions and their\ndurations. Since PNL is an extension of NL, it is an undecidable logic.\n6\n\nA behavioural model is a variant of probabilistic timed automata, where probabilistic transitions are\ndiscrete. \"To resolve the nondeterminism between the passage of time and discrete transitions they use the\nconcept of adversary which is essentially a deterministic schedule policy. Then, the set of executions of a\nprobabilistic time automaton according to an adversary forms a Markov chain, and hence the satisfaction\nof a probabilistic CTL formula by this set can be defined, and then based on the region graph of the timed\nautomaton the satisfaction of a probabilistic CTL formula by the timed automaton can be also verified\"\n[18].\n\n12\n\n\f4.2\n\nProbabilistic Dynamic Logics\n\nSince Kozen's definition of formal semantics of probabilistic programs [62], some work\nhas been done in this direction. Several systems have been introduced to formally study\nprobabilistic programs. In particular, probabilistic dynamic logics received considerable\nattention. Some historical development in this area is given below:\nIn [31], Feldman and Harel introduced a first-order probabilistic dynamic logic, called\nPr(DL), which can express properties of probabilistic programs. The syntax of this logic is\nsimilar to that of Pratt's first-order dynamic logic [89]. The semantics of Pr(DL) is based\non extension of Kozen's formal semantics of probabilistic programs [62]. [31] provides a\ncomplete proof system for Pr(DL) relative to first-order analysis. [31] shows that for discrete probabilities the logic reduces to first-order analysis with integer variables. Since the\nunderlying theory is highly undecidable, the logic Pr(DL) is also undecidable.\nOn propositional level, the well-known logics are Feldman's P-Pr(DL) [29] and Kozen's\nPPDL [63]. [29] defines the logic P-Pr(DL), which is a propositional fragment of the firstorder dynamic logic Pr(DL). P-Pr(DL) has many important characteristics of Pr(DL), such\nas \"the ability to use full first-order real-number theory for dealing with probabilities, and\ndeterministic regular programs, while still being decidable\" [29]. Neither the complexity of\nthe decision procedure, nor a proof system is provided.\nIn [63] a probabilistic analog PPDL of Propositional Dynamic Logic is introduced. [63]\nproves the finite model property by showing that models can be reduced to an equivalent\nfinite model with a bound on the number of states. A polynomial-space decision procedure\nis given to decide the validity of programs. [63] also provides \"a deductive calculus\" and\nshows its usefulness on an example program.\nIn [30] a Propositional Dynamic Logic with explicit probabilities is introduced. The language allows formulas of propositional probabilistic programs, where probabilistic operators\nare applied in a limited form. [30] provides a 2-EXSPACE decision procedure for the logic\nby reducing it to \"the decision problem of the theory of real closed fields\".\n[97] introduces a family of propositional calculi of qualitative probabilities (QP) with one\nbinary operator \u2264. \u2264 intuitively means \"at least as probable as\". Given that \u03c6 and \u03c8 are\ntwo arbitrary QP formulas, \u03c6 \u2264 \u03c8 means that \"the probability of \u03c6 is not greater than the\nprobability of \u03c8\" [39]. [97] presents a complete deductive system for QP, and shows that\nQP is decidable.\n[39] extends QP with \"many \u2264-operators and operations among them that are analogous\nto the operations of composition, union, and iteration on modal operators known in propositional dynamic logic\". The resulting logic (DQP) allows us to reason about probabilistic\nprocesses. The formula w |= \u03c6 \u2264t \u03c8 intuitively means that \"the probability for a transition\n(experiment) t to transform w into a possible world that satisfies \u03c6 is smaller or equal\nto the probability for t to transform w into a possible world that satisfies \u03c8\" [39]. An\n\u03c9-complete proof system is presented for DQP in [39], which requires to build an infinite\ncanonical model. This implies that DQP is undecidable.\n\n4.3\n\nProbabilistic Mu-Calculus\n\n[21] presents the logic Generalised Probabilistic Logic (GPL), which is a Mu-Calculus-based\nmodal logic, in order to reason about \"reactive probabilistic labelled transition systems\n13\n\n\f(RPLTSs)\". An RPLTS structure includes (probabilistic) transitions and (nonprobabilistic)\nactions, where nonprobabilistic actions are chosen externally, in contrary to Markov decision\nprocesses where nonprobabilistic choices are done internally.\nTo show the syntax of GPL, we consider the following example: P\u22651 (\u03bdX.\u03c6 \u2227 [.][.]X) informally\nmeans that \"it is almost always true that \u03c6 holds at all even time instants\" ([.]\u03c6 \u2261\nV\na\u2208Act [a]\u03c6, where Act denotes a set of actions) [21].\nGPL can be considered as a framework to define temporal logics on reactive models. GPL is\nan expressive logic. Some standard probabilistic (modal/temporal) logics, such as PCTL*,\nare subsumed by the logic GPL. [21] presents a model-checking algorithm which employs\ntechniques to solve non-linear equations.\n\n4.4\n\nProbabilistic Instuitionistic Logics\n\nA probabilistic extension of propositional instuitionistic logic is introduced in [72], where\na view of instuitionistic logic is described as \"in addition to propositions which are proved\nto be true and those which are proved to be false, there is a third class of propositions\nwhich may turn out either way and intuitionism allows us to reason about them\". The\npropositional instuitionistic language is enriched with probabilistic operator, resulting in\nthe operator P\u2265n \u03b1, which informally means that \"the probability of truthfulness of \u03b1 is\nat least n\" [72]. The logic does not allow nested probabilistic operators. Probabilistic\ninstuitionistic logic is interpreted over a combined model of instuitionistic Kripke models\nand probabilities. [72] proves that the logic is decidable, and presents a sound and complete\nproof system.\n\n4.5\n\nProbabilistic Logics with New Types of Probability Operators\n\n[81] introduces a family of probabilistic logics, called LPP,Q,O , with new types of probabilistic operators, which have the form QF , where \"F is a set from a recursive family O of\nrecursive rational subsets of [0, 1]\". QF \u03b1 states that the probability of \u03b1 is within the set\nF. The authors assume the so called measurable models, different from probabilistic models\nbased on Kripke structures.\nLPP,Q,O 's unique operator QF can specify richer probabilistic expressions, which cannot be\nexpressed by standard probabilistic logics, such as PCTL, because operator QF cannot be\ntranslated into P\u2265 -like operators. For example, assume the model describes tossing a coin\nfinitely many times. Given that \u03b1 means that 'it comes up heads', and F = { 12 , 212 , 213 , ...}\n[81]. Clearly, QF \u03b1 is true in the model. However, QF \u03b1 cannot be expressed in classical\nprobabilistic logics, such as PCTL, because QF cannot be translated into P\u2265 -like operators.\nThe choice of the family O of recursive rational subsets of [0, 1] appearing in Q is very\nimportant, because this choice determines the language of the logic. The choice is also\nimportant for the decidability and expressiveness of the resulting logic. Although the logic\nLPP,Q,O is not decidable in general, [81] provides a sublanguage which is shown to be\ndecidable. [81] also provides a sound and complete axiomatic systems for LPP,Q,O .\n\n14\n\n\f4.6\n\nProbabilistic Logics for Reasoning About Knowledge and Uncertainty\n\nHalpern et. al., in a series of articles, studied reasoning about knowledge and probability.\nIn [28] a language is defined which can express statements such as \"the probability of E1\nis less than 1/3 and the probability of E1 is at least twice the probability of E2 \", where\nE1 and E2 are events. [28] considers both the situations where all events are measurable\nor all events are nonmeasurable (i.e. events that are not assigned a probability). A sound\nand complete proof system is presented for both measurable and nonmeasurable cases. The\nsatisfiability problem is NP-complete for both cases.\nSome related works to that of [28] is as follows: [36] presents a less expressive logic, which\nis shown to be NP-complete. The measurable case of the logic proposed by [28] can be\nconsidered as a fragment of the Probabilistic PDL by [30]. [63] also considers a Probabilistic\nPDL, which is PSPACE-complete; but this logic is not closed under Boolean combination,\nand it does not allow nonlinear combinations.\n[26] introduces a new approach to deal with uncertainty. Namely, it does not require assigning a probability value to every event. For nonmeasurable events the paper considers the\ninner measure and outer measure of events. The paper states that \"inner measures induced\nby probability measures turn out to correspond in a precise sense to Dempster-Shafer belief\nfunctions [98]; hence, in addition to providing promising new conceptual tools for dealing\nwith uncertainty, this approach shows that a key part of the important Dempster-Shafer\ntheory of evidence is firmly rooted in classical probability theory.\"\n[27] presents a probabilistic logic which is an extension of the logic defined in [28] (which\nis itself a formalisation of Nilsson's probability logic [79]). Indeed, the logic of [27] is a\nprobabilistic extension of the logic of knowledge, which can express the statements such as\n\"according to agent t, formula \u03c6 holds with probability at least b\" [28]. The language allows\none to compare the probabilities of events for each agent. [27] provides a complete proof\nsystem. It proves the decidability through some decision procedures. [27] also considers\nthe extended language with \"common knowledge and a probabilistic variant of common\nknowledge\".\n[1] analyses decidability and expressiveness of probabilistic first-order logics. It is shown\nthat for discrete probabilities such logics are undecidable. If arbitrary probability distributions are assumed, the situation becomes even worse. Not surprisingly, sound and complete\nproof systems are not available for such logics. [1] shows that for the following cases complete axiomatic systems can be found: \"the language consists only of unary predicates and\nthe case where we restrict to bounded domains; in particular, when combined with the\nstandard axioms for reasoning about first-order logic, the axioms for reasoning about probabilities over the domain are complete for a language if it contains only unary predicates;\nwhen combined with axioms for equality and an axiom that says that the domain has\nat most n elements, the axioms are complete for the language if we restrict attention to\ndomains with at most n elements.\"\n\n5\n\nConclusion\n\nIn this paper we have analysed well-known real-time temporal logics and probabilistic temporal logics. We extrapolated the notions of decidability, axiomatizability, expressiveness,\n15\n\n\fmodel checking, etc. for each logic analysed, whenever possible. For a comparison of\nfeatures of the temporal logics we discussed see Table 1. Note that we use the following\nabbreviations: No* : Undecidable in general, but decidable for some fragments or specific\ncases; No** : No deduction system in general, but available for some fragments or specific\ncases; No*** : No model checking algorithm in general, but available for some fragments\nor specific cases; Yes* : Decidable for some time domains; Yes** : Available for some time\ndomains; Yes*** : Available for some time domains.\n\n16\n\n\fTable 1: A comparison of features of temporal logics.\n\n17\n\nLogic\nTCTL\nRTCTL\nTPCTL\nRTL\nRTIL\nRTTL\nTPTL\nMTL\nMTIL\nXCTL\nTILCO\nPCTL\nPCTL*\nPLTL\nP T Lf\nP T Lb\nPDC\nPNL\n\nLogic Order\nPropositional\nPropositional\nPropositional\nFirst-order\nPropositional\nFirst-order\nPropositional\nPropositional\nPropositional\nPropositional\nFirst-order\nPropositional\nPropositional\nPropositional\nPropositional\nPropositional\nFirst-order\nFirst-order\n\nFund. Entity\nPoint\nPoint\nPoint\nInterval\nInterval\nPoint\nPoint\nPoint\nInterval\nPoint\nInterval\nPoint\nPoint\nPoint\nPoint\nPoint\nInterval\nInterval\n\nTemp. Struc.\nBranching\nBranching\nBranching\nLinear\nLinear\nLinear\nLinear\nLinear\nLinear\n?\nLinear\nBranching\nBranching\nLinear\nBranching\nBranching\nLinear\nLinear\n\nMetric for Time\nYes\nYes\nYes\nYes\nYes\nYes\nYes\nYes\nYes\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nYes\nYes\n\nDecidability\nNo\nYes\nYes\nNo*\nYes\nNo\nYes*\nYes*\nYes\nYes*\nNo*\nYes\nYes\nNo*\nYes\nYes\nNo\nNo\n\nDeductive Sys.\n?\n?\n?\nNo\nNo\nYes\nYes**\nYes\n?\n?\nYes\n?\n?\nNo**\nYes\nYes\n?\nYes\n\nModel Checking\nYes\nYes\nYes\nNo***\n?\nNo\nYes***\nYes***\nYes\nYes***\nNo***\nYes\nYes\nNo\n?\n?\n?\n?\n\n\fAcknowledgements.\nThis work was partially supported by EPSRC research project EP/F033567.\n\nReferences\n[1] M. Abadi and J. Y. Halpern. Decidability and expressiveness for first-order logics\nof probability. In Proceedings of the 30th Annual Symposium on Foundations of\nComputer Science, pages 148\u2013153. IEEE Computer Society Press, 1994.\n[2] J. F. Allen. Maintaining knowledge about temporal intervals. Communications of\nthe ACM, 26:832\u2013843, 1983.\n[3] J. F. Allen. Towards a general theory of action and time. Artificial Intelligence,\n23:123\u2013154, 1984.\n[4] J. F. Allen and G. Ferguson. Actions and events in interval temporal logic. Journal\nof Logic and Computation, 4(5):531\u201357, 1994.\n[5] J. F. Allen and J. P. Hayes. Moments and points in an interval-based temporal logic.\nIn Computational Intelligence, pages 225\u2013238. Blackwell Publishers, 1989.\n[6] R. Alur, C. Courcoubetis, and D. L. Dill. Model checking for real-time systems.\nIn Proceedings 5th Conference on Logic in Computer Science, pages 12\u201321. IEEE\nComputer Society Press, 1990.\n[7] R. Alur, T. Feder, and T.A. Henzinger. The benefits of relaxing punctuality. In Proceedings of the 10th Annual ACM Symposium on Principles of Distributed Computing.\nACM, 1991.\n[8] R. Alur and T. A. Henzinger. Real-time logics: Complexity and expressiveness. In\nProceedings of the 5th Annual IEEE Symposium on Logic in Computer Science, pages\n390\u2013401. IEEE Computer Society Press, 1990.\n[9] Rajeev Alur and Thomas A. Henzinger. Logics and models of real time: A survey.\nIn Proceedings of the Real-Time: Theory in Practice, REX Workshop, pages 74\u2013106.\nSpringer-Verlag, 1992.\n[10] A. Aziz, V. Singhal, and F. Balarin. It usually works: The temporal logic of stochastic systems. In Proceedings of the 7th International Conference on Computer Aided\nVerification, pages 155\u2013165. Springer-Verlag, 1995.\n[11] Daniele Beauquier and Anatol Slissenko. Polytime model checking for timed probabilistic computation tree logic. Acta Informatica, 35:645\u2013664, 1998.\n[12] P. Bellini, R. Mattolini, and P. Nesi. Temporal logics for real-time system specification. ACM Computing Surveys, 32(1), 2000.\n[13] M. Ben-Ari, Z. Manna, and A. Pnueli. The temporal logic of branching time. In\nProceedings of the 8th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 164\u2013176. ACM, 1981.\n18\n\n\f[14] A. Bianco and L. D. Alfaro. Model checking of probabilistic and nondeterministic\nsystems. In Foundations of Software Technology and Theoretical Computer Science,\npages 499\u2013513. Springer-Verlag, 1995.\n[15] J. P. Burgess. Axioms for tense logic 2: Time periods. Notre Dame Journal of Formal\nLogic, 23(2):375\u2013383, 1982.\n[16] Z. Chaochen and M. Hansen. Duration Calculus: A Formal Approach to Real-Time\nSystems. EATCS Series of Monographs in Theoretical Computer Science. Springer,\n2004.\n[17] Z. Chaochen, C. Hoare, and A. P. Ravn. A calculus of durations. Information\nProcessing Letters, 40:269\u2013276, 1991.\n[18] Dang Van Hung Choe Changil. Model checking durational probabilistic systems\nagainst probabilistic linear duration invariants. Research Report 337, UNU/IIST,\n2006.\n[19] E. M. Clarke and E. A. Emerson. Design and synthesis of synchronization skeletons\nusing branching-time temporal logic. In Logic of Programs, Workshop, pages 52\u201371.\nSpringer-Verlag, 1982.\n[20] E. M. Clarke, E. A. Emerson, and A. P. Sistla. Automatic verification of finite\nstate concurrent systems using temporal logic. ACM Transactions on Programming\nLanguages and Systems, 2(8):244\u2013263, 1986.\n[21] R. Cleaveland, S. P. Iyer, and M. Narasimha. Probabilistic temporal logics via the\nmodal mu-calculus. Theoretical Computer Science, 342(2-3):316\u2013350, 2005.\n[22] C. Courcoubetis and M. Yannakakis. Verifying temporal properties of finite-state\nprobabilistic programs. In Proceedings of the 29th Annual Symposium on Foundations\nof Computer Science, pages 338\u2013345. IEEE Computer Society, 1988.\n[23] D. Dowty. Word Meaning and Montague Grammar. Dordrecht: D. Reidel, 1979.\n[24] E. A. Emerson. Temporal and modal logic. In Handbook of Theoretical Computer\nScience. North-Holland Pub. Co., 1995.\n[25] E. A. Emerson, A. K. Mok, A. P. Sistla, and J. Srinisvan. Quantitative temporal\nreasoning. In E. M. Clarke, A. Pnueli, and J. Sifakis, editors, Proceedings of the\nWorkshop on Automatic Verification Methods for Finite State Systems. LNCS, 1989.\n[26] R. Fagin and J. Y. Halpern. Uncertainty, belief and probability. Computational\nIntelligence, 7(3):160\u2013173, 1991.\n[27] R. Fagin and J. Y. Halpern. Reasoning about knowledge and probability. Journal of\nthe ACM, 41(2):340\u2013367, 1994.\n[28] R. Fagin, J. Y. Halpern, and N. Megiddo. A logic for reasoning about probabilities.\nInformation and Computation, 87:78\u2013128, 1990.\n[29] Y. A. Feidman. A decidable propositional probabilistic dynamic logic. In Proceedings\nof the Fifteenth Annual ACM Symposium on Theory of Computing, pages 298\u2013309.\nACM, 1983.\n19\n\n\f[30] Y. A. Feldman. A decidable propositional dynamic logic with explicit probabilities.\nInformation Control, 63(1-2):11\u201338, 1984.\n[31] Y. A. Feldman and D. Harel. A probabilistic dynamic logic. In Proceedings of the\nFourteenth Annual ACM Symposium on Theory of Computing, pages 181\u2013195. ACM,\n1982.\n[32] J. L. Fiaderio and T. Maibum. Action refinement in a temporal logic of objects. In\nTemporal Logic. LNCS, 1994.\n[33] D. Gabbay, I. Hodkinson, and M. Reynolds. Temporal Logic: Mathematical Foundations and Computational Aspects, volume 1. Clarendon Press, Oxford, 1994.\n[34] A. Galton. The Logic of Aspect. Claredon Press, Oxford, 1984.\n[35] A. Galton. A critical examination of Allen's theory of action and time. Artificial\nIntelligence, 42:159\u2013198, 1990.\n[36] G. Georgakopoulos, D. Kavvadias, and C. H. Papadimitriou. Probabilistic satisfiability. Journal of Complexity, 4(1):1\u201311, 1988.\n[37] C. Ghezzi, D. Mandrioli, and A. Morzenti. TRIO, a logic language for executable\nspecifications of real-time systems. Journal of Systems and Software, pages 107\u2013123,\n1990.\n[38] V. Goranko, A. Montanari, and G. Sciavicco. A road map of interval temporal and\nduration calculi. Journal of Applied Non-Classical Logics, 14, 2004.\n[39] D. P. Guelev. A propositional dynamic logic with qualitative probabilities. Journal\nof Philosophical Logic, 28:575\u2013604, 1999.\n[40] D. P. Guelev. Probabilistic neighbourhood logic. In Proceedings of the 6th International Symposium on Formal Techniques in Real-Time and Fault-Tolerant Systems,\npages 264\u2013275. Springer-Verlag, 2000.\n[41] Dimitar Guelev. Probabilistic neighbourhood logic. Research Report 196, UNU/IIST,\n2000.\n[42] J. Y. Halpern, Z. Manna, and B. Moszkowski. A high-level semantics based on interval\nlogic. In Proceedings of 10th ICALP, pages 274\u2013291, 1983.\n[43] J. Y. Halpern and Y. Shoham. A propositional modal logic of time intervals. Journal\nof the ACM, 38(4):935\u2013962, 1991.\n[44] C. L. Hamblin. Instants and intervals. Stadium Generale, 27:127\u2013134, 1971.\n[45] H. Hansson and B. Jonsson. A framework for reasoning about time and reliability.\nIn Proceedigns of Real-time Systems Symposium, pages 102\u2013111. IEEE, 1989.\n[46] H. Hansson and B. Jonsson. A logic for reasoning about time and reliability. Formal\nAspects of Computing, 6:102\u2013111, 1994.\n[47] H. A. Hansson. Time and Probability in Formal Design and Distributed Systems.\nPhD thesis, Department of Computer Science, Uppsala University, Sweden, 1991.\n20\n\n\f[48] D. Harel, H. Lachover, A. Naamad, A. Pnueli, M. Politi, R. Sherman, and M. Trachtenbrot. Statemate: A working environment for the development of complex reactive\nsystems. IEEE Transactions on Software Engineering, 16:403\u2013414, 1990.\n[49] D. Harel, A. Pnueli, and Y. Stavi. Process logic: Expressiveness, decidability, completeness. Journal of Computer and System Sciences, 25:145\u2013180, 1983.\n[50] E. Harel, O. Lichtenstein, and A. Pnueli. Explicit clock temporal logic. In Proceedings\nof the Fifth Annual Symposium on Logic in Computer Science, pages 402\u2013413. IEEE\nComputer Society Press, 1990.\n[51] S. Hart and M. Sharir. Probabilistic temporal logics for finite and bounded models.\nIn Proceedings of the Sixteenth Annual ACM Symposium on Theory of Computing,\npages 1\u201313. ACM, 1984.\n[52] T. A. Henzinger. The Temporal Specification and Verification of Real-Time Systems.\nPhD thesis, Department of Computer Science, Stanford University, 1991.\n[53] L. Humberstone. Interval semantics for tense logic: Some remarks. Journal of Philosophical Logic, 8:171\u2013196, 1979.\n[54] D. V. Hung and Z. Chaochen. Probabilistic duration calculus for continuous time. In\nFormal Aspects of Computing, pages 21\u201344, 1994.\n[55] D. V. Hung and M. Zhang. On verification of probabilistic timed automata against\nprobabilistic duration properties. In Proceedings of the 13th IEEE International Conference on Embedded and Real-Time Computing Systems and Applications, pages 165\u2013\n172. IEEE Computer Society, 2007.\n[56] F. Jahanian and A. K. Mok. Safety analysis of timing properties in real-time systems.\nIEEE Transactions on Software Engineering SE-12, 9:890\u2013904, 1986.\n[57] F. Jahanian and D. Stuart. A method for verifying properties of modechart specifications. In Proceedings 9th Real-time Systems Symposium, pages 12\u201321. IEEE Computer\nSociety Press, 1988.\n[58] M. Jurdzinski, F. Laroussinie, and J. Sproston. Model checking probabilistic timed\nautomata with one or two clocks. In Tools and Algorithms for the Construction\nand Analysis of Systems, volume 4424 of Lecture Notes in Computer Science, pages\n170\u2013184. Springer Berlin / Heidelberg, 2007.\n[59] H. Kamp. Events, instants and temporal reference. In Semantics from Different\nPoints of View, pages 376\u2013417. Springer, 1979.\n[60] Savas Konur. A survey on temporal logics. CoRR, abs/1005.3199, 2010.\n[61] R. Koymans. Specifying real-time properties with metric temporal logic. Real-Time\nSystems, 2:255\u2013299, 1990.\n[62] D. Kozen. Semantics of probabilistic programs. In Proceedings of the 20th Annual\nSymposium on Foundations of Computer Science, pages 101\u2013114. IEEE Computer\nSociety, 1979.\n\n21\n\n\f[63] D. Kozen. A probabilistic pdl. In Proceedings of the fifteenth annual ACM symposium\non Theory of Computing, pages 291\u2013297. ACM, 1983.\n[64] M. Kwiatkowska, G. Norman, R. Segala, and J. Sproston. Automatic verification\nof real-time systems with discrete probability distributions. Theoretical Computer\nScience, 282(1):101\u2013150, 2002.\n[65] Marta Kwiatkowska, Gethin Norman, Roberto Segala, and Jeremy Sproston. Automatic verification of real-time systems with discrete probability distributions. In\nFormal Methods for Real-Time and Probabilistic Systems, volume 1601 of Lecture\nNotes in Computer Science, pages 75\u201395. Springer Berlin / Heidelberg, 1999.\n[66] P. Ladkin. Logical time pieces. AI Expert, 2(8):58\u201367, 1987.\n[67] F. Laroussinie, N. Markey, and Ph. Schnoebelen. Model checking timed automata\nwith one or two clocks. In CONCUR 2004 \u00d0 Concurrency Theory, volume 3170 of\nLecture Notes in Computer Science, pages 387\u2013401. Springer Berlin / Heidelberg,\n2004.\n[68] S. Lasota and I. Walukiewicz. Alternating timed automata. ACM Transactions on\nComputational Logic, 9(2):1\u201327, 2008.\n[69] D. J. Lehmann and S. Shelah. Reasoning with time and chance (extended abstract).\nIn Proceedings of the 10th Colloquium on Automata, Languages and Programming,\npages 445\u2013457. Springer-Verlag, 1983.\n[70] Z. Liu, A. P. Ravn, E. V. Sorensen, and C. Zhou. A probabilistic duration calculus.\nTechnical report, University of Warwick, 1992.\n[71] O. Maler, D. Nickovic, and A. Pnueli. Real time temporal logic: Past, present, future.\nIn Formal Modeling and Analysis of Timed Systems, pages 2\u201316. Springer-Verlag,\n2005.\n[72] Z. Markovi\u0107, Z. Ognjanovi\u0107, and M. Raskovi\u0107. A probabilistic extension of intuitionistic logic. Mathematical Logic Quarterly, 49:415\u2013424, 2003.\n[73] R. Mattolini. TILCO: A Temporal Logic for the Specification of Real-Time Systems\n(TILCO: una Logica Temporale per la Specifica di Sistemi di Tempo Reale). PhD\nthesis, University of Florence, 1996.\n[74] R. Mattolini and P. Nesi. Compositional inductive verification of duration properties\nof real-time systems. In Proceedings of the Second IEEE International Conference on\nEngineering of Complex Computer Systems, pages 18\u201325. Chapman and Hall, 1996.\n[75] R. Mattolini and P. Nesi. An interval logic for real-time system specification. IEEE\nTransactions on Software Engineering, 2000.\n[76] P. M. Melliar-Smith. Extending interval logic to real time systems. In Proceedings of\nthe Conference on Temporal Logic Specification, pages 224\u2013242. Springer, 1987.\n[77] A. Montanari, G. Sciavicco, and N. Vitacolonna. Decidability of interval temporal\nlogics over split-frames via granularity. In Proceedings of the 8th Europian Conference\non Logics in AI, pages 259\u2013270. Springer, 2002.\n22\n\n\f[78] B. Moszkowski. Reasoning about Digital Circuits. PhD thesis, Computer Science\nDepartment, Stanford University, 1983.\n[79] N. Nilsson. Probabilistic logic. Artificial Intelligence, 28:71\u201387, 1986.\n[80] Z. Ognjanovi\u0107. Discrete linear-time probabilistic logics: Completeness, decidability\nand complexity. Journal of Logic and Computation, 16(2):257\u2013285, 2006.\n[81] Z. Ognjanovi\u0107 and M. Raskovi\u0107. Some probability logics with new types of probability\noperators. Journal of Logic and Computation, 9(2):181\u2013195, 1999.\n[82] J. S. Ostroff. Temporal Logic for Real-Time Systems. Advanced Software Development\nSeries. Research Studies Press Limited, 1989.\n[83] J. S. Ostroff. Formal methods for the specification and design of real-time safety\ncritical systems. Journal of Systems and Software, 18(1):33\u201360, 1992.\n[84] J. S. Ostroff and W. Wonham. Modeling and verifying real-time embedded computer\nsystems. In Proceedings of the 8th IEEE Real-Time Systems Symposium, pages 124\u2013\n132. IEEE Computer Society Press, 1987.\n[85] J. Ouaknine and J. Worrell. On the decidability of metric temporal logic. In Proceedings 20th Annual IEEE Symposium on Logic in Computer Science, pages 188\u2013197.\nIEEE Computer Society Press, 2005.\n[86] R. Parikh. A decidability result for second order process logic. In Proceedings of 19th\nFOCS, pages 177\u2013183. IEEE Computer Society Press, 1978.\n[87] L. C. Paulson. Isabelle: A Generic Theorem Prover. LNCS, 1994.\n[88] A. Pnueli. On the extremely fair treatment of probabilistic algorithms. In Proceedings\nof the Fifteenth Annual ACM Symposium on Theory of Computing, pages 278\u2013290.\nACM, 1983.\n[89] V. R. Pratt. Semantical consideratiosn on floyd-hoare logic. Technical report, 1976.\n[90] V. R. Pratt. Process logic. In Proceedings of 6th POPL, pages 93\u2013100. ACM, 1979.\n[91] Alexander Rabinovich. Quantitative analysis of probabilistic lossy channel systems.\nIn Jos Baeten, Jan Lenstra, Joachim Parrow, and Gerhard Woeginger, editors, Automata, Languages and Programming, volume 2719 of Lecture Notes in Computer\nScience, pages 189\u2013189. Springer, 2003.\n[92] R. Razouk and M. Gorlick. Real-time interval logic for reasoning about executions\nof real-time programs. SIGSOFT Software Engineering Notes 14, 8:10\u201319, 1989.\n[93] P. Roper. Intervals and tenses. Journal of Philosophical Logic, pages 451\u2013469, 1980.\n[94] Grigore Ro?u and Saddek Bensalem. Allen linear (interval) temporal logic \u00d0 translation to ltl and monitor synthesis. In Computer Aided Verification, volume 4144\nof Lecture Notes in Computer Science, pages 263\u2013277. Springer Berlin / Heidelberg,\n2006.\n\n23\n\n\f[95] R. L. Schwartz and P. M. Melliar-Smith. From state machines to temporal logic:\nSpecification methods for protocol standards. IEEE Trans. Commun. 30, pages 2486\u2013\n2496, 1982.\n[96] R. L. Schwartz, P. M. Melliar-Smith, and F. H. Voght. An interval logic for higherlevel temporal reasoning. In Proceedings of the Second ACM Symposium on Principles\nof Distributed Computing, pages 173\u2013186. ACM Press, 1983.\n[97] K. Segerberg. Qualitative probability in a modal setting. Proceedings of the Second\nScandinavian Logic Symposium, pages 575\u2013604, 1971.\n[98] G. Shafer. A Mathematical Theory of Evidence. Princeton University Press, 1976.\n[99] P. Simons. Parts, A Study in Ontology. Claredon Press, Oxford, 1987.\n[100] S. Spranger. Representation of temporal knowledge for web-based applications. Master's thesis, Ludwig Maximilians Universitaet Munchen, 2002.\n[101] P. H. Thai and D. V. Hung. Verifying linear duration constraints of timed automata.\nIn Proceedings of ICTAC'04, pages 295\u2013309. Springer-Verlag, 2004.\n[102] J. F. van Benthem. The Logic of Time. Kluwer Academic Publishers, Dordrecht,\n1983.\n[103] J. F. van Benthem. The Logic of Time: A Model-Theoretic Investigation into the\nVarieties of Temporal Ontology and Temporal Discourse. Kluwer, second edition,\n1991.\n[104] Y. Venema. A modal logic for choppping intervals. Journal of Logic and Computation,\n1:453\u2013476, 1991.\n[105] Y. Venema. Temporal Logic. Blackwell Guide to Philosophical Logic, Blacwell Publishers, 1998.\n[106] N. Vitacolonna. Intervals: Logics, Algorithms and Games. PhD thesis, Department\nof Mathematics and Computer Science, University of Udine, 2005.\n[107] A. G. Walker. Durees et instants. La Revue Scientifique, (3266), 1947.\n\n24\n\n\f"}