{"id": "http://arxiv.org/abs/1012.1796v1", "guidislink": true, "updated": "2010-12-08T16:33:02Z", "updated_parsed": [2010, 12, 8, 16, 33, 2, 2, 342, 0], "published": "2010-12-08T16:33:02Z", "published_parsed": [2010, 12, 8, 16, 33, 2, 2, 342, 0], "title": "Spans of Preference Functions for De Bruijn Sequences", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1012.1138%2C1012.6042%2C1012.4549%2C1012.3509%2C1012.4244%2C1012.0438%2C1012.3295%2C1012.0609%2C1012.5342%2C1012.4080%2C1012.3197%2C1012.5235%2C1012.3662%2C1012.4517%2C1012.5116%2C1012.5306%2C1012.4325%2C1012.0806%2C1012.2063%2C1012.3433%2C1012.5040%2C1012.0523%2C1012.0054%2C1012.1082%2C1012.4627%2C1012.2692%2C1012.5753%2C1012.1913%2C1012.3036%2C1012.2421%2C1012.1290%2C1012.5783%2C1012.3550%2C1012.3284%2C1012.1796%2C1012.1460%2C1012.2250%2C1012.1229%2C1012.5278%2C1012.6045%2C1012.1742%2C1012.0716%2C1012.5512%2C1012.0736%2C1012.2528%2C1012.0657%2C1012.4016%2C1012.1829%2C1012.1800%2C1012.0117%2C1012.5622%2C1012.1991%2C1012.0144%2C1012.4020%2C1012.1328%2C1012.0915%2C1012.5089%2C1012.3668%2C1012.6018%2C1012.4844%2C1012.1193%2C1012.5423%2C1012.4926%2C1012.3586%2C1012.3923%2C1012.5021%2C1012.1601%2C1012.0103%2C1012.4870%2C1012.0490%2C1012.3238%2C1012.1634%2C1012.0883%2C1012.4441%2C1012.1338%2C1012.0124%2C1012.2873%2C1012.1422%2C1012.0871%2C1012.2973%2C1012.5688%2C1012.4132%2C1012.5638%2C1012.1099%2C1012.1580%2C1012.0098%2C1012.5415%2C1012.5384%2C1012.1024%2C1012.1147%2C1012.3220%2C1012.4415%2C1012.5698%2C1012.4856%2C1012.4538%2C1012.5912%2C1012.1025%2C1012.4910%2C1012.3364%2C1012.3459%2C1012.5605&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Spans of Preference Functions for De Bruijn Sequences"}, "summary": "A nonbinary Ford sequence is a de Bruijn sequence generated by simple rules\nthat determine the priorities of what symbols are to be tried first, given an\ninitial word of size $n$ which is the order of the sequence being generated.\nThis set of rules is generalized by the concept of a preference function of\nspan $n-1$, which gives the priorities of what symbols to appear after a\nsubstring of size $n-1$ is encountered. In this paper we characterize\npreference functions that generate full de Bruijn sequences. More\nsignificantly, We establish that any preference function that generates a de\nBruijn sequence of order $n$ also generates de Bruijn sequences of all orders\nhigher than $n$, thus making the Ford sequence no special case. Consequently,\nwe define the preference function complexity of a de Bruijn sequence to be the\nleast possible span of a preference function that generates this de Bruijn\nsequence.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1012.1138%2C1012.6042%2C1012.4549%2C1012.3509%2C1012.4244%2C1012.0438%2C1012.3295%2C1012.0609%2C1012.5342%2C1012.4080%2C1012.3197%2C1012.5235%2C1012.3662%2C1012.4517%2C1012.5116%2C1012.5306%2C1012.4325%2C1012.0806%2C1012.2063%2C1012.3433%2C1012.5040%2C1012.0523%2C1012.0054%2C1012.1082%2C1012.4627%2C1012.2692%2C1012.5753%2C1012.1913%2C1012.3036%2C1012.2421%2C1012.1290%2C1012.5783%2C1012.3550%2C1012.3284%2C1012.1796%2C1012.1460%2C1012.2250%2C1012.1229%2C1012.5278%2C1012.6045%2C1012.1742%2C1012.0716%2C1012.5512%2C1012.0736%2C1012.2528%2C1012.0657%2C1012.4016%2C1012.1829%2C1012.1800%2C1012.0117%2C1012.5622%2C1012.1991%2C1012.0144%2C1012.4020%2C1012.1328%2C1012.0915%2C1012.5089%2C1012.3668%2C1012.6018%2C1012.4844%2C1012.1193%2C1012.5423%2C1012.4926%2C1012.3586%2C1012.3923%2C1012.5021%2C1012.1601%2C1012.0103%2C1012.4870%2C1012.0490%2C1012.3238%2C1012.1634%2C1012.0883%2C1012.4441%2C1012.1338%2C1012.0124%2C1012.2873%2C1012.1422%2C1012.0871%2C1012.2973%2C1012.5688%2C1012.4132%2C1012.5638%2C1012.1099%2C1012.1580%2C1012.0098%2C1012.5415%2C1012.5384%2C1012.1024%2C1012.1147%2C1012.3220%2C1012.4415%2C1012.5698%2C1012.4856%2C1012.4538%2C1012.5912%2C1012.1025%2C1012.4910%2C1012.3364%2C1012.3459%2C1012.5605&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "A nonbinary Ford sequence is a de Bruijn sequence generated by simple rules\nthat determine the priorities of what symbols are to be tried first, given an\ninitial word of size $n$ which is the order of the sequence being generated.\nThis set of rules is generalized by the concept of a preference function of\nspan $n-1$, which gives the priorities of what symbols to appear after a\nsubstring of size $n-1$ is encountered. In this paper we characterize\npreference functions that generate full de Bruijn sequences. More\nsignificantly, We establish that any preference function that generates a de\nBruijn sequence of order $n$ also generates de Bruijn sequences of all orders\nhigher than $n$, thus making the Ford sequence no special case. Consequently,\nwe define the preference function complexity of a de Bruijn sequence to be the\nleast possible span of a preference function that generates this de Bruijn\nsequence."}, "authors": ["Abbas Alhakim"], "author_detail": {"name": "Abbas Alhakim"}, "author": "Abbas Alhakim", "arxiv_comment": "10 pages, four tables, first draft", "links": [{"href": "http://arxiv.org/abs/1012.1796v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1012.1796v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "math.CO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "math.CO", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1012.1796v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1012.1796v1", "journal_reference": null, "doi": null, "fulltext": "arXiv:1012.1796v1 [math.CO] 8 Dec 2010\n\nSPANS OF PREFERENCE FUNCTIONS FOR DE BRUIJN\nSEQUENCES\nABBAS ALHAKIM DEPARTMENT OF MATHEMATICS\nAMERICAN UNIVERSITY OF BEIRUT\nBEIRUT, LEBANON\nAbstract. A nonbinary Ford sequence is a de Bruijn sequence generated by simple rules that determine the priorities of what symbols are to be tried first, given\nan initial word of size n which is the order of the sequence being generated. This\nset of rules is generalized by the concept of a preference function of span n \u2212 1,\nwhich gives the priorities of what symbols to appear after a substring of size n \u2212 1\nis encountered. In this paper we characterize preference functions that generate full\nde Bruijn sequences. More significantly, We establish that any preference function\nthat generates a de Bruijn sequence of order n also generates de Bruijn sequences\nof all orders higher than n, thus making the Ford sequence no special case. Consequently, we define the preference function complexity of a de Bruijn sequence to\nbe the least possible span of a preference function that generates this de Bruijn\nsequence.\n\n1. Introduction\nGiven a positive integer t > 1 and an alphabet A = {0, 1, . . . , t \u2212 1} of size t, a\nde Bruijn sequence of order n over the alphabet A is a sequence of symbols such\nthat every pattern of size n appears exactly once as a block of contiguous symbols.\nFor example, 00110 and 0011221020 are two de Bruijn sequences of order 2 over the\nalphabets {0, 1} and {0, 1, 2} respectively. The existence of these sequences for any\nfinite size alphabet and any order is a well known fact [3].\nFor the binary alphabet, a classical but rather curious algorithm that generates a\nde Bruijn sequence for any order n is called the \"prefer-one\" algorithm. It consists of\nthe following simple steps. Begin by writing n zeros. Then for k > n, write a one for\nthe k th bit of the sequence if the newly formed n-tuple has not previously appeared\nin the sequence, otherwise write a zero. This is repeated, preferring one every step of\nthe way, until neither appending one nor zero puts a new n-tuple, at which time the\nalgorithm halts.\nThe prefer-one sequence is traced back to Martin [9]. But it has been rediscovered\nby many authors, see Fredricksen [5] for an exposition.\nThe prefer-one algorithm is generalized to an alphabet of size t > 2 by preferring a\nhigher value over a lower value. That is, once the initial n zeros are written, the value\nt \u2212 1 is appended if the word formed by the n most recent symbols is new, otherwise\nt \u2212 2 is proposed, otherwise t \u2212 3, etc. This sequence was proposed by Ford [4] and it\nKey words and phrases. De Bruijn Sequence, Ford sequence, preference function, prefer-one algorithm, linear complexity.\n1\n\n\f0\n1\n2\n3\n\n0 \u2192 2, 1, 0\n1 \u2192 2, 1, 0\n2 \u2192 2, 1, 0\n\u2192 3, 2, 1,\n\u2192 3, 2, 1,\n\u2192 3, 2, 1,\n\u2192 3, 2, 1,\n\n0\n0\n0\n0\n\n0\n1\n2\n3\n\n0 \u2192 1, 2, 0\n1 \u2192 1, 0, 2\n2 \u2192 2, 1, 0\n\u2192 1, 2, 3,\n\u2192 3, 1, 0,\n\u2192 0, 2, 1,\n\u2192 2, 3, 1,\n\n0\n2\n3\n0\n\n0\n1\n2\n3\n\n0 \u2192 1, 2, 0\n1 \u2192 2, 1, 0\n2 \u2192 0, 2, 1\n\u2192 3, 2, 1,\n\u2192 3, 2, 1,\n\u2192 0, 2, 3,\n\u2192 0, 2, 3,\n\n0\n0\n1\n1\n\nTable 1. Some preference diagrams of de Bruijn sequences with alphabet sizes 3 and 4.\n\ntherefore bears his name. We will refer to this generalization as the \"prefer-higher\"\nalgorithm.\nIn this paper, we show that preferring higher values is not necessary to obtain full\nde Bruijn sequences. In fact, a binary algorithm similar to the prefer-one was recently\nproposed in [1]. This algorithm is called the prefer opposite as it proposes a bit that\nis opposite to the bit most recently appended to the sequence. Although the prefer\nopposite sequence is not a de Bruijn sequence, it only misses the constant word 1n . In\nthe non-binary case, other preferences can be constructed that yield full sequences.\nFor example, each diagram in Table 1 can generate a full de Bruijn sequence of\narbitrary order n that starts with the initial word 0n . Each row in a diagram displays\nthe digits to be proposed, in decreasing priority, when the rightmost digit of the\nsequence being constructed is the digit that appears on the left side of the arrow of\nthat row. A proposed digit is accepted if the most recently formed word of size n has\nnot appeared earlier in the sequence, otherwise the next digit in that row is proposed.\nIt is worth noticing here that the upper and lower left diagrams give the same\ndecreasing preference regardless of the previous digit. Thus they display the preferhigher rules for alphabet sizes 3 and 4 respectively.\nThe following are respectively all the sequences of order 2 that are generated using\nthe diagrams in Table 1.\n00221201100; 00110221200; 00120221100;\n003323130221201100; 001320221103312300; 003020132233121100;\nIn the sequel it will be proven that these diagrams generate de Bruijn sequences\nof all orders. More generally, we will characterize all such diagrams that produce full\nsequences.\n2. Main Results\nThe idea of generating a de Bruijn sequence by making preferences is formalized in\nthe concept of preference functions, defined in Golomb [6] who attributes it to Welsh.\nIn any de Bruijn sequence of order n, a word of size (n\u22121) appears exactly t times. A\npreference function gives the priority list of what digits is to come first, second, third,\netc. after a word of size n \u2212 1 appears in the sequence. Here is a precise definition.\nDefinition 2.1. A preference function P of span n\u22121 is a t-dimensional vector valued\nfunction of n \u2212 1 variables such that, for each choice of the vector a = (a1 , . . . , an\u22121 )\nfrom the set An\u22121 , the entries of the vector (P1 (a), . . . , Pt (a)) form a permutation of\nthe elements of A.\n2\n\n\fDefinition 2.2. Given a preference function P , the least preference function induced\nby P is a function g from An\u22121 to An\u22121 defined as\ng(a1, . . . , an\u22121 ) = (a2 , . . . , an\u22121 , Pt (a1 , . . . , an\u22121 )).\nThe following process is given in Golomb [6] and it shows how a preference function\nof span s \u2212 1 is used to construct recursive periodic sequences of order s.\nDefinition 2.3. For any word (I1 , . . . , In ) and preference function P of span n \u2212 1,\nthe following inductive definition determines a unique finite sequence {ai }:\n1. a1 = I1 , . . . , an = In .\n2. If aN +1 , . . . , aN +n\u22121 have been defined, then aN +n = Pi (aN +1 , . . . , aN +n\u22121 ),\nwhere i is the smallest integer such that the word\n(aN +1 , . . . , aN +n\u22121 , Pi (aN +1 , . . . , aN +n\u22121 )\nhas not previously appeared as a segment of the sequence (provided that there\nis such i).\n3. Let L = L{ai } be the first value of N such that no i can be found to satisfy\nitem 2. Then aL+n\u22121 is the last digit of the sequence and L is called the cycle\nperiod.\nConversely, we remark that any periodic sequence induces at least one preference\nfunction whose corresponding sequence is the periodic sequence itself. To see this,\nconsider a periodic sequence S started at the word J1 , . . . , Jn , where n is the smallest\nword size such that every pattern of size n occurs at most once in S. Now consider\nall occurrences (if any) of a pattern w of size n \u2212 1 in a single period of S. Since\nevery pattern of size n occurs at most once, the number of occurrences r(w) of the\npattern w is bounded above by t. For i = 1 to r(w) let Pi (w) be the digit that occurs\nright after the ith occurrence of w. If r(w) < t let Pr(w)+1 (w), . . . , Pt (w) be any\npermutation of the digits which do not appear as entries of (P1 (w), . . . , Pr(w) ).\nBy the above construction, it is evident that the preference function P along with\nthe initial word J1 , . . . , Jn produces the sequence S. The next proposition follows\nimmediately by the above discussion.\nProposition 2.4. Fixing an initial word (I1 , . . . , In ), there is a one to one correspondence between the set of de Bruijn sequences of order n and the set of preference\nfunctions of span n \u2212 1 which generate de Bruijn sequences of order n started at\n(I1 , . . . , In ).\nGiven an arbitrary preference function, a natural question is whether or not this\npreference function generates a full de Bruijn sequence. In this section, we take on\nthe problem of characterizing such complete preference functions.\nFor completeness, we now state two theorems, given in Golomb [6], which present\nconditions on a preference function to produce a de Bruijn sequence.\nDefinition 2.5. For 0 \u2264 r \u2264 n \u2212 1, we say that (x1 , . . . , xn\u22121 ) has an r-overlap with\n(I1 , . . . , In ) if (xn\u2212r , . . . , xn\u22121 ) = (I1 , . . . , Ir ). Notice that any (n \u2212 1)-digit word at\nleast has a zero overlap with (I1 , . . . , In ).\nTheorem 16. (of Golomb's Chapter VI) For any initial word (I1 , . . . , In ), if P is a\npreference function of span n \u2212 1 that satisfies Pt (x1 , . . . , xn\u22121 ) = Ir+1 , when r is the\n3\n\n\flargest integer such that (x1 , . . . , xn\u22121 ) has an r-overlap with (I1 , . . . , In ), then the\nsequence generated by (I1 , . . . , In ) and P has length tn , i.e., it is a de Bruijn sequence\nof order n.\nWhile the previous theorem states a condition that guarantees that a preference\nfunction of span n \u2212 1 produces a de Bruijn sequence of order n, the next theorem\nstarts with a preference function that is known to generate a de Bruijn sequence of\norder n \u2212 1 and provides a way to construct a preference function of span n \u2212 1 that\nproduces a de Bruijn sequence f order n. This recursive construction is stated and\nproved for the binary case in Golomb [6], although it is claimed that the theorem can\nbe easily generalized to the non-binary case.\nTheorem 17. (of Golomb's Chapter VI) The following hypotheses are adopted:\n1. Let (I1 , . . . , In ) be an arbitrary initial word.\n2. Let P (x1 , . . . , xn\u22122 ) = (P1 , P2 ) be the preference function for the binary de Bruijn\nsequence of order n\u22121, {bi }, and initial word (I1 , . . . , In\u22121), such that P1 (I1 , . . . , In\u22122) =\n1 + In\u22121 mod 2.\n3. Let x1 \u2295 F (x2 , . . . , xn\u22121 ) be the feedback formula for {bi }. That is, bi = bi\u2212n+1 \u2295\nF (xi\u2212n+2 , . . . , xi\u22121 ) for all i\n4. Let P \u2217(x1 , . . . , xn\u22121 ) = (P1\u2217, P2\u2217 ) which satisfies P2\u2217 = 1 \u2295 P1\u2217 and\n0 = [P1\u2217 (x1 , . . . , xn\u22121 )\u22951\u2295x1 \u2295F (x2 , . . . , xn\u22121 )]\u00d7[x1 \u2295F (x2 , . . . , xn\u22121 )\u2295P1 (x2 , . . . , xn\u22121 )].\nwhere the \u2295 is taken as addition modulo 2. It follows from these hypotheses that\nthe sequence {ai }, generated by (I1 , . . . , In ) and P \u2217 , is a de Bruijn sequence of order\nn.\nWhile the conditions stated in Theorem 17 indeed generate a complete binary\npreference table, these conditions are in a sense artificially designed to make possible\nthe inductive proof given in Golomb [6]. In what follows we will show that, for any\nalphabet size t, a preference function of span n \u2212 1 is itself capable of generating\nde Bruijn sequences of all orders larger than or equal to n. Before we do this we will\ncharacterize preference functions of span n \u2212 1 that generate de Bruijn sequences of\norder n, i.e., complete preference functions.\nA de Bruijn sequence of order n can be started with any of its words of size n.\nUnless otherwise stated, in the rest of this paper we will only be concerned with an\ninitial word (I1 , . . . , In ) = 0n , i.e. the constant string of n zeros.\nDefinition 2.6. Let E be a finite set, let f be a function from E to itself and let\nl \u2265 1 be an integer. By a cycle of length l induced by f we mean a sequence of\nelements x1 , . . . , xl such that f (xi ) = xi+1 for i = 1 to l \u2212 1 and f (xl ) = x1 .\nWe now state our first main result.\nTheorem 2.7. Let P be a complete preference function of span n \u2212 1 that corresponds to a de Bruijn sequence started at the string 0n . Then the least preference\nfunction g(x1 , . . . , xn\u22121 ) has no cycles of any length except the self-loop (0n\u22121 , 0n\u22121),\ni.e. g(0n\u22121) = 0n\u22121 , which must be a cycle of g.\nProof. Let S be the de Bruijn sequence starting with 0n and resulting from P . If\n(0n\u22121 , 0n\u22121) is not a cycle of g then Pt (0n\u22121 ) = a 6= 0 and hence 0 has a higher\npreference over a, that is Pi (0n\u22121 ) = 0 for some i < t. Since S is a de Bruijn\nsequence of order n, the word 0n\u22121 a must be a substring. This means that the word\n4\n\n\f(0n\u22121 , Pi (0n\u22121) = 0n must have been proposed and accepted earlier in the sequence.\nSo that 0n occurs twice in the sequence, which is a contradiction. Suppose now that\ng has a cycle of length i, 1 \u2264 i \u2264 tn\u22121 \u2212 1 other than the self loop at 0n\u22121 . Namely,\nsuppose that for some y1 , . . . , yi+n\u22121\n(2.1)\n\ng(y1, . . . , yn\u22121 ) = (y2 , . . . , yn )\ng(y2 , . . . , yn ) = (y3 , . . . , yn+1 )\n..\n.\ng(yi, . . . , yi+n\u22122 ) = (yi+1 , . . . , yi+n\u22121).\n\nwhere (yi+1 , . . . , yi+n\u22121) = (y1, . . . , yn\u22121 ) but (yj , . . . , yj+n\u22122) 6= (yk , . . . , yk+n\u22122) for\nall pairs (j,k) such that 1 \u2264 j < k \u2264 i + 1 and (j, k) 6= (1, i + 1).\nSince S is a de Bruijn sequence of order n, (y1 , . . . , yn ) occurs in S. By definition\nof g and the first equation in Display (2.1), yn = Pt (y1 , . . . , yn\u22121). It follows that\nall the words (y1 , . . . , yn\u22121, z), z 6= yn must have occurred earlier in the sequence.\nThis implies that all the predecessors (y, y1, . . . , yn\u22121 ), for y \u2208 A have occurred before\n(y1 , . . . , yn ). In particular (yi , . . . , yi+n\u22121) = (yi , y1 , . . . , yn\u22121) has occurred before\n(y1 , . . . , yn ).\nNow, g(yi , . . . , yi+n\u22122) = (yi+1 , . . . , yi+n\u22121) is equivalent to Pt (yi , . . . , yi+n\u22122 ) =\nyi+n\u22121 . Using the above argument, we see that all the words (yi , . . . , yi+n\u22122, z), z 6=\nyi+n\u22121 , and therefore all their predecessors (y, yi , . . . , yi+n\u22122 ) must have occurred earlier in the sequence. In particular, (yi\u22121 , yi , . . . , yi+n\u22122 ) occurs before (yi , . . . , yi+n\u22121),\nwhich was just shown to occur before (y1 , . . . , yn ). Repeating the same reasoning a\ntotal of i times, we see that (y1 , . . . , yn ) must have occurred earlier in the sequence\nS. That is, (y1 , . . . , yn ) occurs more than once in S, contradicting the assumption\nthat the latter is a de Bruijn sequence. This establishes that g has no cycles besides\n(0n\u22121 , 0n\u22121).\n\u0003\nIt is important to remark here that in the above theorem, the initial word must\nbe 0n or\u2013of course\u2013a constant string in (in which case the self loop of g must be\n(in\u22121 , in\u22121 )). Indeed, Table 2 displays a de Bruijn sequence of alphabet size 3 and\norder 3 with its corresponding preference function. Noting that the initial word is 001,\nwe can see that the induced least preference function g has the cycle (00, 01, 10, 00).\n00 \u2192 0,2,1 10 \u2192 1,2,0 20 \u2192 1,0,2\n01 \u2192 1,2,0 11 \u2192 0,1,2 21 \u2192 2,1,0\n02 \u2192 0,1,2 12 \u2192 1,2,0 22 \u2192 2,0,1\n\nTable 2. Preference rules for the sequence 00110121222010200021112022100.\nThe converse of Theorem 2.7 is also true. That is, if a given preference function of\nspan n \u2212 1 induces a least preference function g that has no cycles except the self loop\nat 0n\u22121 , then the preference function produces a de Bruijn cycle of order n started at\nthe word 0n . However, the next result is much stronger than this converse. We state\nit after the following algorithm.\nAlgorithm P\nInput: Two integers s > 1 and n \u2265 s and a preference function P of span s \u2212 1.\nOutput: a unique de Bruijn sequence S = {ai } of order n.\n5\n\n\f1. a1 = 0, . . . , an = 0.\n2. If aN +1 , . . . , aN +n\u22121 have been defined, then aN +n = Pi (aN +n\u2212s+1 , . . . , aN +n\u22121 ),\nwhere i is the smallest integer between 1 and t such that the word\n(aN +1 , . . . , aN +n\u22121 , Pi (aN +n\u2212s+1 , . . . , aN +n\u22121 )\nhas not previously appeared as a segment of the sequence (provided that there\nare such i).\n3. Let L = L{ai } be the smallest value of N such that no i can be found to\nsatisfy the condition in (2). Then aL+n\u22121 is the last digit of the sequence and\nL is called the cycle period.\nTheorem 2.8. Let P be a preference function of span s \u2212 1 that induces a least\npreference function g which admits no cycles except the self loop (0s\u22121, 0s\u22121 ). Then\nfor any integer n \u2265 s the sequence given by Algorithm P is a de Bruijn sequence of\norder n.\nWe observe that this theorem establishes that the Ford sequence is rather the norm\nthan the exception. For the Ford sequence, the permutation (t \u2212 1, t \u2212 2, . . . , 0)\u2013\nwhich is a de Bruijn sequence of order 1\u2013generates de Bruijn sequences of all orders.\nUsing Theorem 2.8, given any de Bruijn sequence of order s, we can construct the\ncorresponding preference function of span s \u2212 1 which in turn can generate a unique\nde Bruijn sequence of any order higher than s. The proof of this theorem will be\ngiven after a few lemmas are formulated and proved.\nLemma 2.9. The sequence S in Theorem 2.8 ends just after the word a0n\u22121 is encountered, for some a \u2208 A, a 6= 0.\nProof. First, it is immediate by the construction in Algorithm P that a word of size\nn occurs at most once in the constructed sequence. Suppose now that the algorithm\nterminates just after the word (x1 , . . . , xn ) 6= a0n\u22121 is realized. That is, (x2 , . . . , xn , y)\nmust have appeared earlier in the sequence for all y \u2208 A. This implies that (x2 , . . . , xn )\nappeared t + 1 times. Since (x2 , . . . , xn ) is not equal to 0n\u22121 , it is not the initial block\nof the sequence so that every time it appeared it was preceded by something. The\npigeon hole principle thus implies that there exists an element z \u2208 A such that\n(z, x2 , . . . , xn ) occurs twice in the sequence, which is a contradiction.\n\u0003\nLemma 2.10. All words of the form b0n\u22121 occur in the sequence S of Theorem 2.8.\nProof. By Lemma 2.9 the sequence ends with the word a0n\u22121 . The word 0n = 0n\u22121 0,\nwhich already occurs in the beginning, can not be appended after a0n\u22121 . Since\nPt (0n\u22121) = 0, no other symbol z can be appended either. This implies that all\nwords of the form 0n\u22121 z have occurred earlier in the sequence. It follows that all the\nwords of the form b0n\u22121 , where b 6= 0 must occur in the sequence.\n\u0003\nLemma 2.11. If X1 = (x1 , . . . , xn ) is a word that does not occur in S then neither\ndoes the word X2 = (x2 , . . . , xn , c), where c = Pt (xn\u2212s+2 , . . . , xn ).\nProof. Suppose that X2 occurs in S. X2 can not be the zero string 0n because the\nlatter occurs as the first string. Hence X2 is preceded by some string. Since c =\nPt (xn\u2212s+2 , . . . , xn ) has the least preference, it follows that all the words (x2 , . . . , xn , z)\nmust have occurred earlier in the sequence. Therefore the set of all predecessors\n6\n\n\f(y, x2 , . . . , xn ) must have occurred for all values of y. In particular, X1 = (x1 , . . . , xn )\nmust have occurred, which is a contradiction.\n\u0003\nProof. (of Theorem 2.8) Suppose that (x1 , . . . , xn ) is a pattern that does not appear\nin S.\nCase 1. Let us first suppose that (xn\u2212s+2 , . . . , xn ) = 0s\u22121 . Since (x1 , . . . , xn ) can\nnot be all zeros, there must exist an integer i, 1 \u2264 i \u2264 n \u2212 s + 1 such that xi 6= 0 but\nxj = 0 for all j, i + 1 \u2264 j \u2264 n. Since g(0s\u22121) = 0s\u22121 it is clear that Pt (0s\u22121 ) = 0. It\nfollows by applying Lemma 2.11 that (x2 , . . . , xi , 0n\u2212i+1) does not occur in S. By the\nsame argument, applying Lemma 2.11 another (i \u2212 2) times, we see that the word\nxi , 0n\u22121 does not occur. This contradicts Lemma 2.10.\nCase 2. Suppose now that (xn\u2212s+2 , . . . , xn ) 6= 0s\u22121. Then by Lemma 2.11 the word\n(x2 , . . . , xn , xn+1 ) does not appear either, where xn+1 = Pt (xn\u2212s+2 , . . . , xn ). Moreover,\n(xn\u2212s+2 , . . . , xn ) 6= (xn\u2212s+3 , . . . , xn+1 ) for otherwise the least preference function g\nwould have a cycle of length 1 that is distinct from the self loop (0s\u22121 , 0s\u22121 ), namely\n(xn\u2212s+1 , . . . , xn , g(xn\u2212s+1, . . . , xn )) = (xn\u2212s+2 , . . . , xn+1 ),\nwhich can not be the case by the given.\nIf (xn\u2212s+3 , . . . , xn+1 ) = 0s\u22121 , Case 1 above leads to a contradiction. So it is safe\nto assume that this is not the case. We claim that, by applying this argument\nrepeatedly, we eventually get a word ending with 0s\u22121 that does not occur in S. To\nsee this note that, after i repetitions of Lemma 2.11\u2013with i \u2264 ts\u22121 , we conclude that\nthe word (xn+i\u2212s+2 , . . . , xn+i ) does not occur in S, where for j = n + 1 to n + i,\nxj = Pt (xj\u2212s+1, . . . , xj\u22121 ) and (xj\u2212s+2, . . . , xj ) 6= 0s\u22121 . Since g(xj\u2212s+1, . . . , xj\u22121 ) =\n(xj\u2212s+2 , . . . , xj ) and since g has no cycles of any length (namely, no cycles of length\n1, 2, . . . , ts\u22121 \u2212 1) other than the self loop at 0s\u22121 , we see that (xj\u2212s+1, . . . , xj ) 6=\n(xj \u2032 \u2212s+2 , . . . , xj \u2032 ) for all j < j \u2032 and n \u2264 j, j \u2032 \u2264 n + i. Otherwise, the sequence\n(xj\u2212s+1 , . . . , xj ), (xj\u2212s+2 , . . . , xj+1 ), * * * , (xj \u2032 \u2212s+1 , . . . , xj \u2032 )\nwould form a cycle of length j \u2032 \u2212 j.\nFor any i such that 1 \u2264 i \u2264 ts\u22121 \u2212 2, if the right tail (xn+i\u2212s+2 , . . . , xn+i ) = 0s\u22121\nthen applying Case 1 leads to a contradiction. Suppose then that the right tail is\ndistinct from 0s\u22121 for all i = 1 to ts\u22121 \u2212 2. Then, for i = ts\u22121 \u2212 1, the facts that all\nthe words are distinct and that there are i + 1 = ts\u22121 words imply that the last word\nof size s \u2212 1 is necessarily equal to 0s\u22121, thus leading to a contradiction, by Case 1.\nThis establishes the theorem.\n\u0003\n3. Preference Function Complexity\nIn the vast literature on de Bruijn sequences, there has been more than one method\nto classify these sequences. One well known criterion for binary de Bruijn sequences is\nthe number of ones in the truth table of the corresponding feedback function, (namely,\nthe function F defined in the statement of item (3) in Theorem 17 above).\nAlso, de Bruijn sequences have been classified according to their linear complexity,\nwhich is defined as the minimal span of a linear shift register that generates the\nde Bruijn sequence. In other words, it is the minimal integer N such that there\nexists a linear feedback function F = F (x2 , . . . , xN ) that can generate the de Bruijn\nsequence.\n7\n\n\fIt was proven by Chan, Games and Key [2] that the linear complexity of a binary\nde Bruijn sequence of order n is between 2n\u22121 + n and 2n \u2212 1.\nIn this section, we use Theorem 2.8 to introduce a new notion of complexity of\nde Bruijn sequences of any alphabet size that relates to the preference function which\ngenerates the sequence. We thus obtain another classification of de Bruijn sequences\nbased on this complexity.\nTo fix ideas, we observe that, by Theorem 2.8, it is clear that an algorithm such\nas the one that generates the Ford sequence (for general alphabet size t) is rather\nthe norm than the exception. For the latter algorithm, a preference function that\ngenerates a de Bruijn sequence of order 1 also generates a de Bruijn sequence of any\norder n larger than 1 when started with the initial word 0n .\nLet us also observe that the preference function of the Ford sequence\u2013with the\n\"prefer-higher\" algorithm\u2013is a constant function of span 0 that is given by P (x) =\n(t \u2212 1, t \u2212 2, . . . , 0) for all x in A. See Table 1. The corresponding least preference\nfunction is given by g(x) \u2261 0, which admits the only cycle g(0) = 0. In fact, the\ntwo preference diagrams in the leftmost column of Table 1 have span zero while the\nremaining diagrams have span one.\nDefinition 3.1. Given an order n de Bruijn sequence S that starts with the fixed\nword 0n we define the preference function complexity comp0 (S) as the smallest integer\ns, 0 \u2264 s \u2264 n such that there exists a preference function of span s that generates the\nsequence S with the initial word 0n .\nThe sixteen binary de Bruijn sequences of order four are given in Table 3 while their\ncorresponding preference functions are given in Table 4. Notice that sequence (3)\u2013the\nFord sequence\u2013does not depend on any of the previous three bits so it has preference\nfunction span 0 while sequence (6) depends only on the previous two bits so it has\nspan 2. all other sequences have preference function span 3. Thus they have full\nspan. There are no sequences with span 1, due to the binary alphabet. Sequence (2)\ncomes close. In fact, changing the preference of '111' to 1 then 0 makes the preference\nfunction depend only on the previous bit but this introduces a self loop 111 \u2192 111 in\nthe corresponding least preference function so the resulting sequence misses the word\n1111. Note that this sequence is the prefer opposite sequence mentioned earlier.\nProposition 3.2. The distribution of de Bruijn sequences of order n according to\ntheir preference function complexity is given by N0 (n) = (t \u2212 1)!, N1 (n) = ((t \u2212 1)!)t *\ni\ni\ni\u22121\ni\u22121\ntt\u22122 , and for i > 1 Ni (n) = ((t \u2212 1)!)t * tt \u2212i\u22121 \u2212 ((t \u2212 1)!)t * tt \u2212i where, for i = 0\nto n \u2212 1,\nNi (n) = card{S : S is a de Bruijn sequence of order n such that comp(S) = i}.\nProof. For i = 0 the order of preference does not depend on any of the previous digits,\nin particular it does not depend on the immediately previous digit. Since the only\nallowed cycle in the induced least preference function g of is the self loop from 0 to 0\nit follows that g(i) = 0 for all digits i. The remaining t \u2212 1 digits can be given any of\n(t \u2212 1)! orders of preference.\nFor i \u2265 1, it is evident that the complexity of a de Bruijn sequence of order i\ndoes not exceed i \u2212 1. Moreover, it is well known, see [8], that the total number of\ni\u22121\ni\u22121\nde Bruijn sequences of order i is given by the formula M(t, i) = [(t \u2212 1)!]t * tt \u2212i .\nHence N1 (1) is M(t, 1) minus the number of sequences of complexity 0.\n8\n\n\f1\n2\n3\n4\n5\n6\n7\n8\n\n0000100110101111000\n0000101001101111000\n0000111101100101000\n0000111101011001000\n0000100111101011000\n0000101001111011000\n0000110111100101000\n0000110101111001000\n\n9\n10\n11\n12\n13\n14\n15\n16\n\n0000101111001101000\n0000101111010011000\n0000101100111101000\n0000110010111101000\n0000111101001011000\n0000110100101111000\n0000101101001111000\n0000111100101101000\n\nTable 3. Binary de Bruijn sequences of order 4.\nSimilarly, Ni (i) is M(t, i) minus the number of sequences whose complexity is less\nthan i. Since Theorem 2.8 implies that every preference function of span i < n also\nproduces a de Bruijn sequence of order n, it follows that Ni (n) = Ni (i).\n\u0003\nWe will say that two sequences {ai } and {bi } are equivalent if bi = \u03c3(ai ) for some\npermutation \u03c3 of the alphabet A. Our last result relates to de Bruijn sequences with\ncomplexity zero. Notice that while the binary case allows only one preference function\nwith zero span, higher values of t yield (t \u2212 1)! cases. The following proposition shows\nthat in fact all of these cases yield equivalent de Bruijn sequences.\nProposition 3.3. All de Bruijn sequences of preference function complexity zero are\nequivalent, up to a permutation of the digits, to the Ford sequence.\nProof. Let Q be an arbitrary complete preference function of span zero. Evidently,\nthere exists a permutation \u03c3 such that Qi = (\u03c3(t\u22121), . . . , \u03c3(0)) for all i \u2208 A. Let {bi }\nbe the sequence of order n-started at 0n -that corresponds to Q. Consider now the\nsequence {ai } defined by ai = \u03c3 \u22121 (bi ), which is obviously a de Bruijn sequence. We\nclaim that {ai } is the Ford sequence of order n. To see this, let i1 < i2 < . . . < it be\nthe positions of a pattern x1 , . . . , xn\u22122 in the sequence {ai }. It follows that i1 , . . . , it\nare the positions of the pattern \u03c3(x1 ), . . . , \u03c3(xn\u22122 ) in the sequence {bi }. By definition\nof Q, the substrings\n(bi1 , . . . , bi1 +n\u22122 ), . . . , (bit , . . . , bit +n\u22122 )\nare followed respectively by \u03c3(t \u2212 1), . . . , \u03c3(0). Therefore, the substrings\n(ai1 , . . . , ai1 +n\u22122 ), . . . , (ait , . . . , ait +n\u22122 )\nof {ai } are followed by t \u2212 1, t \u2212 2, . . . , 0.\nSince this is true for any pattern (x1 , . . . , xn\u22121 ), the proof is complete.\n\n\u0003\n\nReferences\n[1] A. Alhakim, A Simple Combinatorial Algorithm for de Bruijn Sequences, The American Mathematical Monthly, 117, Number 8, (2010) 728-732.\n[2] A. H. Chan, R. A. Games, and E. L. Key, On the Complexities of de Bruijn Sequences, Journal\nof Combinatorial Theory, Series A, 33, (1982) 233-246.\n[3] N. G. de Bruijn, A Combinatorial Problem, Koninklijke Nederlandse Akademie v. Wetenschappen 49 (1946) 758-764.\n[4] L. R. Ford, A Cyclic Arrangement of m-tuples, Report P-1071, Rand Corp., 1957.\n[5] H. Fredricksen, A Survey of Full Length Nonlinear Shift Register Cycle Algorithms, SIAM\nReview, 24 (1982) 195-221.\n9\n\n\f1\n000 1,0\n001 0,1\n010 0,1\n011 0,1\n100 1,0\n101 0,1\n110 1,0\n111 1,0\nspan 3\n\n2\n1,0\n0,1\n1,0\n0,1\n1,0\n0,1\n1,0\n1,0\n3\n\n3\n1,0\n1,0\n1,0\n1,0\n1,0\n1,0\n1,0\n1,0\n0\n\n4\n1,0\n1,0\n1,0\n1,0\n1,0\n0,1\n1,0\n1,0\n3\n\n5\n1,0\n0,1\n0,1\n1,0\n1,0\n0,1\n1,0\n1,0\n3\n\n6\n1,0\n0,1\n1,0\n1,0\n1,0\n0,1\n1,0\n1,0\n2\n\n7\n1,0\n1,0\n1,0\n0,1\n1,0\n1,0\n0,1\n1,0\n3\n\nsequence\n8\n9\n1,0 1,0\n1,0 0,1\n1,0 1,0\n1,0 1,0\n1,0 1,0\n0,1 1,0\n1,0 0,1\n1,0 1,0\n3\n3\n\n10\n1,0\n0,1\n1,0\n1,0\n1,0\n1,0\n1,0\n1,0\n3\n\n11\n1,0\n0,1\n1,0\n0,1\n1,0\n1,0\n0,1\n1 ,0\n3\n\n12\n1,0\n1,0\n1,0\n0,1\n1,0\n1,0\n0,1\n1,0\n3\n\n13\n1,0\n1,0\n0,1\n1,0\n1,0\n0,1\n1,0\n1,0\n3\n\n14\n1,0\n1,0\n0,1\n0,1\n1,0\n0,1\n1,0\n1,0\n3\n\n15\n1,0\n0,1\n1,0\n0,1\n1,0\n1,0\n1,0\n1,0\n3\n\n16\n1,0\n1,0\n1,0\n1,0\n1,0\n1,0\n0,1\n1,0\n3\n\nTable 4. preference functions of order 4 binary de Bruijn sequences\nand their spans.\n[6] S. Golomb, Shift Register Sequences, Holden-Day, San Francisco, 1967.\n[7] D. Knuth, The Art of Computer Programming, vol. 4 (to appear).\n[8] Flye-Sainte Marie, Solution to Problem number 58, L'intermediare des Mathematiciens, 1, 1894,\n107-110.\n[9] M. H. Martin, A Problem in Arrangements, Bulletin of the American Mathematical Society, 40\n(1934) 859-864.\nE-mail address: aa145@aub.edu.lb\n\n10\n\n\f"}