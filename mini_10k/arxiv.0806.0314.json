{"id": "http://arxiv.org/abs/0806.0314v1", "guidislink": true, "updated": "2008-06-02T15:57:55Z", "updated_parsed": [2008, 6, 2, 15, 57, 55, 0, 154, 0], "published": "2008-06-02T15:57:55Z", "published_parsed": [2008, 6, 2, 15, 57, 55, 0, 154, 0], "title": "GuiLiner: A Configurable and Extensible Graphical User Interface for\n  Scientific Analysis and Simulation Software", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0806.3593%2C0806.0413%2C0806.1417%2C0806.2908%2C0806.3886%2C0806.3471%2C0806.1385%2C0806.1966%2C0806.0601%2C0806.2121%2C0806.1186%2C0806.0832%2C0806.2274%2C0806.2377%2C0806.3817%2C0806.4003%2C0806.3096%2C0806.4389%2C0806.4601%2C0806.1148%2C0806.4194%2C0806.4429%2C0806.2425%2C0806.3863%2C0806.2795%2C0806.0314%2C0806.4489%2C0806.4634%2C0806.4521%2C0806.0209%2C0806.1015%2C0806.4006%2C0806.0497%2C0806.3374%2C0806.3226%2C0806.3986%2C0806.2202%2C0806.4667%2C0806.1761%2C0806.1425%2C0806.3946%2C0806.1911%2C0806.0117%2C0806.2484%2C0806.4758%2C0806.0961%2C0806.4616%2C0806.3360%2C0806.3141%2C0806.2440%2C0806.4366%2C0806.4677%2C0806.4587%2C0806.3816%2C0806.1037%2C0806.3421%2C0806.4945%2C0806.0299%2C0806.0440%2C0806.2974%2C0806.4009%2C0806.1334%2C0806.3738%2C0806.2778%2C0806.0257%2C0806.0099%2C0806.3488%2C0806.1265%2C0806.0160%2C0806.4728%2C0806.3426%2C0806.0922%2C0806.3343%2C0806.2098%2C0806.4925%2C0806.2899%2C0806.2768%2C0806.1076%2C0806.1625%2C0806.1672%2C0806.1445%2C0806.2812%2C0806.3545%2C0806.0092%2C0806.0155%2C0806.3762%2C0806.2944%2C0806.3557%2C0806.4324%2C0806.0211%2C0806.3157%2C0806.1196%2C0806.4451%2C0806.2229%2C0806.1152%2C0806.4523%2C0806.4067%2C0806.4707%2C0806.1212%2C0806.2071%2C0806.1731&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "GuiLiner: A Configurable and Extensible Graphical User Interface for\n  Scientific Analysis and Simulation Software"}, "summary": "The computer programs most users interact with daily are driven by a\ngraphical user interface (GUI). However, many scientific applications are used\nwith a command line interface (CLI) for the ease of development and increased\nflexibility this mode provides. Scientific application developers would benefit\nfrom being able to provide a GUI easily for their CLI programs, thus retaining\nthe advantages of both modes of interaction. GuiLiner is a generic, extensible\nand flexible front-end designed to ``host'' a wide variety of data analysis or\nsimulation programs. Scientific application developers who produce a correctly\nformatted XML file describing their program's options and some of its\ndocumentation can immediately use GuiLiner to produce a carefully implemented\nGUI for their analysis or simulation programs.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0806.3593%2C0806.0413%2C0806.1417%2C0806.2908%2C0806.3886%2C0806.3471%2C0806.1385%2C0806.1966%2C0806.0601%2C0806.2121%2C0806.1186%2C0806.0832%2C0806.2274%2C0806.2377%2C0806.3817%2C0806.4003%2C0806.3096%2C0806.4389%2C0806.4601%2C0806.1148%2C0806.4194%2C0806.4429%2C0806.2425%2C0806.3863%2C0806.2795%2C0806.0314%2C0806.4489%2C0806.4634%2C0806.4521%2C0806.0209%2C0806.1015%2C0806.4006%2C0806.0497%2C0806.3374%2C0806.3226%2C0806.3986%2C0806.2202%2C0806.4667%2C0806.1761%2C0806.1425%2C0806.3946%2C0806.1911%2C0806.0117%2C0806.2484%2C0806.4758%2C0806.0961%2C0806.4616%2C0806.3360%2C0806.3141%2C0806.2440%2C0806.4366%2C0806.4677%2C0806.4587%2C0806.3816%2C0806.1037%2C0806.3421%2C0806.4945%2C0806.0299%2C0806.0440%2C0806.2974%2C0806.4009%2C0806.1334%2C0806.3738%2C0806.2778%2C0806.0257%2C0806.0099%2C0806.3488%2C0806.1265%2C0806.0160%2C0806.4728%2C0806.3426%2C0806.0922%2C0806.3343%2C0806.2098%2C0806.4925%2C0806.2899%2C0806.2768%2C0806.1076%2C0806.1625%2C0806.1672%2C0806.1445%2C0806.2812%2C0806.3545%2C0806.0092%2C0806.0155%2C0806.3762%2C0806.2944%2C0806.3557%2C0806.4324%2C0806.0211%2C0806.3157%2C0806.1196%2C0806.4451%2C0806.2229%2C0806.1152%2C0806.4523%2C0806.4067%2C0806.4707%2C0806.1212%2C0806.2071%2C0806.1731&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The computer programs most users interact with daily are driven by a\ngraphical user interface (GUI). However, many scientific applications are used\nwith a command line interface (CLI) for the ease of development and increased\nflexibility this mode provides. Scientific application developers would benefit\nfrom being able to provide a GUI easily for their CLI programs, thus retaining\nthe advantages of both modes of interaction. GuiLiner is a generic, extensible\nand flexible front-end designed to ``host'' a wide variety of data analysis or\nsimulation programs. Scientific application developers who produce a correctly\nformatted XML file describing their program's options and some of its\ndocumentation can immediately use GuiLiner to produce a carefully implemented\nGUI for their analysis or simulation programs."}, "authors": ["N. C. Manoukis", "E. C. Anderson"], "author_detail": {"name": "E. C. Anderson"}, "author": "E. C. Anderson", "arxiv_comment": "4 pages; for the current version of this software, please visit\n  http://guiliner.sourceforge.net/", "links": [{"href": "http://arxiv.org/abs/0806.0314v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0806.0314v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.HC", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.HC", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.SE", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "D.2.2; H.1.2; I.3.6", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0806.0314v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0806.0314v1", "journal_reference": null, "doi": null, "fulltext": "GuiLiner: A Configurable and Extensible Graphical User Interface for\nScientific Analysis and Simulation Software\n\narXiv:0806.0314v1 [cs.HC] 2 Jun 2008\n\nNicholas C. Manoukis\u2020\n\nEric C. Anderson\u00a7\n\n\u2020Section\n\nof Vector Biology, Laboratory of Malaria and Vector Research\nNational Institute of Allergy and Infectious Diseases, National Institutes of Health\n12735 Twinbrook Parkway, Bethesda, MD 20892 USA\n\u00a7Fisheries\n\nEcology Division, Southwest Fisheries Science Center\nNational Oceanic and Atmospheric Administration\n110 Shaffer Road, Santa Cruz, CA 95060 USA\n\nmanoukisn@niaid.nih.gov\n\nEric.Anderson@noaa.gov\n\nAbstract\nThe computer programs most users interact with daily are driven by a graphical user interface (GUI). However, many scientific applications are used with a command line interface (CLI)\nfor the ease of development and increased flexibility this mode provides. Scientific application\ndevelopers would benefit from being able to provide a GUI easily for their CLI programs, thus\nretaining the advantages of both modes of interaction. GuiLiner is a generic, extensible and\nflexible front-end designed to \"host\" a wide variety of data analysis or simulation programs.\nScientific application developers who produce a correctly formatted XML file describing their\nprogram's options and some of its documentation can immediately use GuiLiner to produce a\ncarefully implemented GUI for their analysis or simulation programs.\n\nKey-Words\n\n: Graphical user interfaces, XML, Computer applications, Software interfaces\n\n1 Introduction\n\ndesigned to bridge the gap between CLI and GUI\nmodes for computer programs used in scientific research. GuiLiner is a generic, extensible and flexible\nfront-end designed to \"host\" a wide variety of data\nanalysis or simulation applications. It is geared primarily toward the scientific application development\ncommunity, which can realize several unique benefits\nfrom its use, beginning with the elimination of time\nspent writing code to generate a GUI.\n\nComputer applications for scientific research generally receive user input through a command line interface (CLI) or through a graphical user interface\n(GUI). Each has advantages and shortcomings. For\nexample, GUIs provide immediate accessibility and\na familiar mode of interaction for most users. On\nthe other hand, the CLI allows for batch processing,\ninclusion of the program in shell scripts, and the reThe task of creating a generic GUI for biological\ntention of execution parameters. CLI programs also scientific applications is made simpler by the fact that\nrequire less development time and are more portable most of them follow a simple interaction model: 1)\nacross different computer operating systems.\nthe user provides data and parameters to the appliIn this paper we present guiLiner, an application cation 2) the algorithm is executed on these and 3)\n1\n\n\fFigure 1: Schematic diagram showing how GuiLiner, the\nhosted analysis application and the XML confiuration file are\nused together to present a single GUI-driven application to the\nuser.\n\nthe results of the analysis are returned. Each of these\nsteps is generally atomic.\nSince step 1) can involve many options, it is here\nthat CLI based applications can become cumbersome\nto use or may be intimidating to inexperienced users.\nGuiLiner focuses on this step and on step 2). Without modifying the original CLI program, guiLiner\nprovides a way for users to quickly see the available program options, read documentation and set\nthe value of each option, and then execute the program, all from within a familiar \"point-and-click\" environment.\n\nFigure 2: GuiLiner hosting a sample program, in Editing\nmode.\n\nsual summary of which options are required, set, or\nunset in a color-coded option tree; integrated display\nof documentation specific to each program option; facilities for saving the values of options used for a particular execution of the hosted application; and the\nability to view and save to disk program run-time\noutput and/or errors.\nIn addition to the rapid display of selected and required options, efficient option information retrieval\nand runtime results, guiLiner's layout is designed to\nput commonly used functions within easy each. Besides the usual menu bar (Figure 2 #1) containing\na custom help browser and XML save-open options\namong other settings, there is also a button bar for\nfunctions commonly used during option setting (Figure 2 #2). These include functions to preview the\ncommand line, rest all options, manipulate the option tree and run the hosted program. Use of these\nis described in more detail in the next section.\nWe have found few other efforts to create a generic\nuser interface. Some of these are not focused on the\nscientific computing community, and so aim to accommodate a wider variety of CLI programs. These\nusually take the form of widget sets that can be configured to create a GUI. While this approach is more\n\n2 Implementation\nGuiLiner is written in the Java programing language,\nand virtual machines capable of executing it are\navailable for current versions of Microsoft Windows,\nMac OS X and many types of UNIX based operating\nsystems such as GNU/Linux (for a full list, please\nsee\nhttp://www.java.com:80/en/download/manual.jsp).\nGuiLiner operates by parsing an XML configuration\nfile which contains information on the CLI-based\napplication being hosted, its options, documentation\nand some details about how guiLiner itself should\ndisplay this information (Figure 1). This scheme\nallows almost unlimited extensibility, so that the\nfeature-set of guiLiner can be increased with later\nreleases.\nThe GUI provided by guiLiner features a rapid vi2\n\n\fflexible it is usually also more time consuming and\nless extensible. Other generic GUI programs use a\n\"Wizard\" interface, which is both flexible and easy\nto deploy, but lack the visual summary and interactivity that guiLiner offers. The advantage of guiLiner\nover either of these approaches is that it is designed\nto represent a single mode of interaction that is common in scientific computing, which allows it to be\nemployed very quickly and at the same time makes it\nvery effective for hosting these types of programs. To\ndate we have not found any other applications which\nfill this exact niche.\n\nWhen the RUN PROGRAM button (Figure. 2\n#2) is clicked, guiLiner uses a system call to execute the CLI program with the options assembled by\nthe user in guiLiner. Program output to stdout goes\nto the console panel from where it may be viewed or\nsaved to disk as a text file. Program output to stderr\nis directed to the Errors panel and the user is notified of errors in the status bar (Figure. 2 #6). Any\nprogram output directed to files goes to those files\nspecified either by an absolute path or by a path relative to the current working directory (exactly as if\nthe program were run from the CLI). guiLiner is not\ndesigned for interactive display of program output,\nthough future versions could allow simple GUI-driven\noutput display using developer provided scripts and,\nfor example, the R statistical computing environment\n[1].\nFor ease of distribution and installation to enduser machines guiLiner, the XML configuration file\nand the CLI executable can be distributed as an\ninstaller. There are several excellent installer platforms available which could streamline this process,\nsuch as the platform independent IzPack (available\nat http://izpack.org/).\nDetails on the XML file specification, option types, the application executable and source\ncode, and discussion forums are available at\nhttp://guiliner.sourceforge.net. Also at this web site\nthere are sample XML configuration files for a variety of bioinformatic and population genetic analysis\nprograms including Exonerate [2], IM [3], Makesamples [4] and Spip [5]. A Document Type Definition\n(DTD) file is distributed with guiLiner to automate\nXML configuration file generation and to allow error\nchecking.\nWe also distribute there a small C library for C\nor C++ programmers that simplifies command-line\nparsing and error checking, and allows the documentation for each option to be written and stored in the\nsource code. This documentation may be printed by\nthe program in short-help format, long-help format,\nUNIX man page format, and guiLiner XML format.\nThe guiLiner XML format can be read directly by\nguiLiner so that any updates to the program can be\nimmediately translated to the guiLiner GUI.\nWe encourage contributions to the source code or\n\n3 Usage Overview\nMost user interaction with guiLiner involves selecting\noptions from the option tree (Figure 2 #4) by clicking\non them. When selected, an interface to manipulate\nthat option is displayed in the options pane (Figure\n2 #3). The exact interface will vary depending on\nwhich type of option is being displayed: it may have\na text box where a value can be input, a set of buttons\nthat allows the user to set the option to one of several\ngiven values, or a dialog box for navigating the file\ndirectory to find an input file, etc. In all cases the\nuser is able to get more information on the option by\nclicking the \"Information\" tab in the option pane.\nThe colors in the option tree give a quick visual\nguide to the run settings. Red = option is required,\nvalue not yet specified; Black = option not required,\nvalue not yet specified; Blue = a value for the option has been specified and will be used for program\nexecution.\nClicking the Preview button (Figure. 2 #2) causes\nthe command line to be assembled from the values\ncurrently specified by the user and prints it to the\nconsole panel (Figure. 2 #5). This is particularly\nuseful for \"transitional\" users who are gaining familiarity with the command line environment, but are\nnot yet fully comfortable with it. Using this facility\nthen saving the console contents is an easy way to\nsave run settings. An alternative method it to save\nthe entire XML file with the selected options already\nset. Though this is more cumbersome to read, it does\nallow guiLiner to automatically load the settings used\nin that particular execution.\n3\n\n\fcomments on guiLiner.\n\nin age-structured populations,\" Molecular Ecology Notes, vol. 5, no. 2, pp. 459\u2013461, 2005.\n\n4 Conclusions\nGuiLiner is an effective \"wrapper\" for a wide variety\nof biological analysis and simulation software. Application developers will be able to offer a functional\nand carefully implemented GUI to their CLI-driven\nsoftware with little effort. At the same time, guiLiner\nshould make a wider variety of applications immediately available for the analyses of researchers who are\nnot familiar with the CLI or are beginning to learn\nabout it.\n\n5 Acknowledgements\nThis research was supported in part by the Intramural Research Program of the NIH, NIAID. The\nauthors would like to thank J. Hey, R. Hudson and\nJ Garza for graciously permitting us to present their\nprograms bundled with guiLiner to serve as examples.\nReferences\n[1] R Development Core Team, R: A Language and\nEnvironment for Statistical Computing, R Foundation for Statistical Computing, Vienna, Austria, 2007, ISBN 3-900051-07-0.\n[2] G. S. C. Slater and E. Birney, \"Automated generation of heuristics for biological sequence comparison.\" BMC Bioinformatics, vol. 6, p. 31, 2005.\n[3] J. Hey and R. Nielsen, \"Multilocus methods for\nestimating population sizes, migration rates and\ndivergence time, with applications to the divergence of Drosophila pseudoobscura and D. persimilis.\" Genetics, vol. 167, no. 2, pp. 747\u2013760,\nJun 2004.\n[4] R. R. Hudson, \"Generating samples under a\nwright-fisher neutral model of genetic variation.\"\nBioinformatics, vol. 18, no. 2, pp. 337\u2013338, Feb\n2002.\n[5] E. Anderson and K. Dunham, \"spip 1.0: a program for simulating pedigrees and genetic data\n4\n\n\f"}