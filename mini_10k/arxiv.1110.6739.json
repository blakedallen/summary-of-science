{"id": "http://arxiv.org/abs/1110.6739v2", "guidislink": true, "updated": "2012-06-28T14:08:44Z", "updated_parsed": [2012, 6, 28, 14, 8, 44, 3, 180, 0], "published": "2011-10-31T10:17:52Z", "published_parsed": [2011, 10, 31, 10, 17, 52, 0, 304, 0], "title": "The Binary Perfect Phylogeny with Persistent characters", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1110.2840%2C1110.2868%2C1110.1006%2C1110.2572%2C1110.3765%2C1110.1741%2C1110.3918%2C1110.2750%2C1110.0472%2C1110.3287%2C1110.3005%2C1110.1194%2C1110.3503%2C1110.6556%2C1110.2889%2C1110.5355%2C1110.5625%2C1110.1265%2C1110.4147%2C1110.0266%2C1110.5098%2C1110.1820%2C1110.1501%2C1110.2984%2C1110.4854%2C1110.4353%2C1110.0905%2C1110.4169%2C1110.6569%2C1110.1554%2C1110.6658%2C1110.6355%2C1110.0630%2C1110.6591%2C1110.4798%2C1110.5468%2C1110.5861%2C1110.3845%2C1110.3281%2C1110.4650%2C1110.0655%2C1110.3505%2C1110.0964%2C1110.2713%2C1110.5329%2C1110.0613%2C1110.0447%2C1110.5427%2C1110.1391%2C1110.4222%2C1110.0845%2C1110.4969%2C1110.3133%2C1110.4628%2C1110.1485%2C1110.1805%2C1110.3874%2C1110.0043%2C1110.4626%2C1110.6739%2C1110.4132%2C1110.4977%2C1110.1420%2C1110.1201%2C1110.2782%2C1110.3772%2C1110.4188%2C1110.6442%2C1110.0712%2C1110.0620%2C1110.6689%2C1110.0410%2C1110.1347%2C1110.0962%2C1110.3267%2C1110.5956%2C1110.6866%2C1110.3250%2C1110.5886%2C1110.2120%2C1110.5116%2C1110.1255%2C1110.5014%2C1110.6459%2C1110.0368%2C1110.4912%2C1110.6450%2C1110.3348%2C1110.3434%2C1110.5004%2C1110.0537%2C1110.1213%2C1110.0471%2C1110.0752%2C1110.1344%2C1110.6814%2C1110.3842%2C1110.5719%2C1110.2224%2C1110.3203%2C1110.5379&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The Binary Perfect Phylogeny with Persistent characters"}, "summary": "The binary perfect phylogeny model is too restrictive to model biological\nevents such as back mutations. In this paper we consider a natural\ngeneralization of the model that allows a special type of back mutation. We\ninvestigate the problem of reconstructing a near perfect phylogeny over a\nbinary set of characters where characters are persistent: characters can be\ngained and lost at most once. Based on this notion, we define the problem of\nthe Persistent Perfect Phylogeny (referred as P-PP). We restate the P-PP\nproblem as a special case of the Incomplete Directed Perfect Phylogeny, called\nIncomplete Perfect Phylogeny with Persistent Completion, (refereed as IP-PP),\nwhere the instance is an incomplete binary matrix M having some missing\nentries, denoted by symbol ?, that must be determined (or completed) as 0 or 1\nso that M admits a binary perfect phylogeny. We show that the IP-PP problem can\nbe reduced to a problem over an edge colored graph since the completion of each\ncolumn of the input matrix can be represented by a graph operation. Based on\nthis graph formulation, we develop an exact algorithm for solving the P-PP\nproblem that is exponential in the number of characters and polynomial in the\nnumber of species.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1110.2840%2C1110.2868%2C1110.1006%2C1110.2572%2C1110.3765%2C1110.1741%2C1110.3918%2C1110.2750%2C1110.0472%2C1110.3287%2C1110.3005%2C1110.1194%2C1110.3503%2C1110.6556%2C1110.2889%2C1110.5355%2C1110.5625%2C1110.1265%2C1110.4147%2C1110.0266%2C1110.5098%2C1110.1820%2C1110.1501%2C1110.2984%2C1110.4854%2C1110.4353%2C1110.0905%2C1110.4169%2C1110.6569%2C1110.1554%2C1110.6658%2C1110.6355%2C1110.0630%2C1110.6591%2C1110.4798%2C1110.5468%2C1110.5861%2C1110.3845%2C1110.3281%2C1110.4650%2C1110.0655%2C1110.3505%2C1110.0964%2C1110.2713%2C1110.5329%2C1110.0613%2C1110.0447%2C1110.5427%2C1110.1391%2C1110.4222%2C1110.0845%2C1110.4969%2C1110.3133%2C1110.4628%2C1110.1485%2C1110.1805%2C1110.3874%2C1110.0043%2C1110.4626%2C1110.6739%2C1110.4132%2C1110.4977%2C1110.1420%2C1110.1201%2C1110.2782%2C1110.3772%2C1110.4188%2C1110.6442%2C1110.0712%2C1110.0620%2C1110.6689%2C1110.0410%2C1110.1347%2C1110.0962%2C1110.3267%2C1110.5956%2C1110.6866%2C1110.3250%2C1110.5886%2C1110.2120%2C1110.5116%2C1110.1255%2C1110.5014%2C1110.6459%2C1110.0368%2C1110.4912%2C1110.6450%2C1110.3348%2C1110.3434%2C1110.5004%2C1110.0537%2C1110.1213%2C1110.0471%2C1110.0752%2C1110.1344%2C1110.6814%2C1110.3842%2C1110.5719%2C1110.2224%2C1110.3203%2C1110.5379&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The binary perfect phylogeny model is too restrictive to model biological\nevents such as back mutations. In this paper we consider a natural\ngeneralization of the model that allows a special type of back mutation. We\ninvestigate the problem of reconstructing a near perfect phylogeny over a\nbinary set of characters where characters are persistent: characters can be\ngained and lost at most once. Based on this notion, we define the problem of\nthe Persistent Perfect Phylogeny (referred as P-PP). We restate the P-PP\nproblem as a special case of the Incomplete Directed Perfect Phylogeny, called\nIncomplete Perfect Phylogeny with Persistent Completion, (refereed as IP-PP),\nwhere the instance is an incomplete binary matrix M having some missing\nentries, denoted by symbol ?, that must be determined (or completed) as 0 or 1\nso that M admits a binary perfect phylogeny. We show that the IP-PP problem can\nbe reduced to a problem over an edge colored graph since the completion of each\ncolumn of the input matrix can be represented by a graph operation. Based on\nthis graph formulation, we develop an exact algorithm for solving the P-PP\nproblem that is exponential in the number of characters and polynomial in the\nnumber of species."}, "authors": ["Paola Bonizzoni", "Chiara Braghin", "Riccardo Dondi", "Gabriella Trucco"], "author_detail": {"name": "Gabriella Trucco"}, "author": "Gabriella Trucco", "arxiv_comment": "13 pages, 3 figures", "links": [{"href": "http://arxiv.org/abs/1110.6739v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1110.6739v2", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.CE", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1110.6739v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1110.6739v2", "journal_reference": null, "doi": null, "fulltext": "The Binary Perfect Phylogeny with Persistent Characters\nPaola Bonizzoni1 , Chiara Braghin2 , Riccardo Dondi3 , and Gabriella Trucco2\n\narXiv:1110.6739v2 [cs.DS] 28 Jun 2012\n\n1\n\nDipartimento di Informatica Sistemistica e Comunicazione\nUniv. degli Studi di Milano - Bicocca\nViale Sarca 336, 20126 Milano - Italy\nbonizzoni@disco.unimib.it\n2\nDipartimento di Tecnologie dell'Informazione Univ. degli Studi di Milano, Crema\nchiara.braghin@unimi.it;gabriella.trucco@unimi.it\n3\nDipartimento di Scienze dei Linguaggi, della Comunicazione e degli Studi Culturali\nUniv. degli Studi di Bergamo, Bergamo\nriccardo.dondi@unibg.it.\n\nAbstract. The binary perfect phylogeny model is too restrictive to model biological events\nsuch as back mutations. In this paper we consider a natural generalization of the model that\nallows a special type of back mutation. We investigate the problem of reconstructing a near\nperfect phylogeny over a binary set of characters where characters are persistent: characters\ncan be gained and lost at most once. Based on this notion, we define the problem of the\nPersistent Perfect Phylogeny (referred as P-PP). We restate the P-PP problem as a special\ncase of the Incomplete Directed Perfect Phylogeny, called Incomplete Perfect Phylogeny\nwith Persistent Completion, (refereed as IP-PP), where the instance is an incomplete binary\nmatrix M having some missing entries, denoted by symbol ?, that must be determined (or\ncompleted) as 0 or 1 so that M admits a binary perfect phylogeny. We show that the IP-PP\nproblem can be reduced to a problem over an edge colored graph since the completion of\neach column of the input matrix can be represented by a graph operation. Based on this\ngraph formulation, we develop an exact algorithm for solving the P-PP problem that is\nexponential in the number of characters and polynomial in the number of species.\n\n1\n\nIntroduction\n\nThe perfect phylogeny is one of the most investigated models in different areas of computational\nbiology. This model derives from a restriction of the parsimony methods used to reconstruct the\nevolution of species (taxa). Such methods assume that each taxon is characterized by a set of\nof attributes, called characters. In this paper we focus on the binary perfect phylogeny model;\ncharacters can take only the values (or states) zero or one, usually interpreted as the presence or\nabsence of the attribute in the taxa. Restrictions on the type of changes from zero to one and vice\nversa lead to a variety of specific models (Felsenstein, [6]). In the Dollo parsimony, a character may\nchange state from zero to one only once, but from one to zero multiple times [13]. In the variant of\nCamin-Sokal parsimony [2], characters are directed, only changes from zero to one are admissible\non any path from the root to a leaf. This fact means that the root is assumed to be labeled by\nthe ancestral state with all zero values for each character, and no character change back to 0 is\nallowed. This last variant is known as the binary directed perfect phylogeny, and it has a linear\ntime solution [8].\nSuch a model has been successfully applied in the context of haplotype inference, starting\nfrom the seminal work by Gusfield on the Perfect Phylogeny Haplotyping Problem [9]. This last\nproblem has been widely investigated, and very efficient polynomial time solutions have been\nproposed, including linear-time algorithms [4], [16], [1]. However, the real data usually do not fit\nthe simple model of the binary perfect phylogeny and thus in the past years generalizations of the\nmodel have been proposed. Some models are surveyed in [7].\nA central goal in this investigation of the binary perfect phylogeny model is to extend its applicability by taking into account the biological complexity of data, while retaining the computational\nefficiency where possible. More precisely, the binary perfect phylogeny model though allowing a\n\n\fvery efficient reconstruction is quite restrictive to explain the evolution of data where homoplasy\nevents such as back mutations, also called reversals, are present. In order to include such events,\nthe problem of reconstructing the near-perfect phylogeny has been formalized and investigated.\nSome work has been done to produce algorithmic solutions to the problem, mainly fixed-parameter\nalgorithms have been provided [15], [18]. However, the near-perfect phylogeny model appears to be\ntoo general for some biological applications. The model does not distinguish the main two types of\nhomoplasy occurring in a phylogenetic tree: recurrent mutation and back mutations. Back mutations are changes in the state of the character that only occur along the same path from the root of\nthe tree. On the contrary, recurrent mutations are changes in the state of the character that occur\nalong different paths of the tree, since the character is allowed to label multiple edges of the tree.\nIn this paper we address the problem of constructing a perfect-phylogeny under the assumption\nthat only a special type of back mutation may occur in the tree. A character may change state only\ntwice in the tree, precisely from 0 to 1 and from 1 to 0, and the changes occur along the same path\nfrom the root of the tree T . These characters have already been considered in the literature and\ncalled persistent by T. Przytycka [14] in a general framework of tree inference. More precisely, in\n[14], the change of a character from state 0 to 1 models the gain of the character, while the change\nfrom 1 to 0 models the loss of the character. The use of the notion of persistent character is quite\nrelevant when reconstructing phylogenies that describe the gain and loss of genomic characters\n[19]. An example of a promising class of genomic characters (also called rare genomic changes RGC - ) is given by insertion and deletion of introns in protein-coding genes during the evolution\nof eukaryotes. In this framework, persistent characters allow to infer phylogenies by using the gain\nand loss of introns [19].\nWe define a generalization of the (rooted) binary directed perfect phylogeny where each character may be persistent. Clearly our model is a restriction of the Dollo parsimony, where characters\ncan be lost several times, i.e. a character can be lost along different paths from a root to a leaf.\nAcquisition or loss of characters (i.e. attributes) when unrestricted could make the reconstruction\nof an evolutionary tree difficult, if not possible.\nAssume that S = {s1 , . . . , sn } is a set of species and C = {c1 , . . . , cm } is a set of characters.\nIn the paper we consider binary matrices representing species and characters. More precisely, a\nbinary matrix M of size n \u00d7 m has columns associated with the set C of characters, i.e. column\nj represents character cj \u2208 C, while rows of M are associated with the set S of species, i.e.\nrow i represents species si . Then M [i, j] = 1 if and only if species si has character cj , otherwise\nM [i, j] = 0.\nIn the rest of the paper, to simplify the notation, we identify rows with species and columns\nwith characters.\nThe gain of a character in a phylogenetic tree is usually represented by an edge labeled by the\ncharacter. In order to model the presence of persistent characters, the loss of a character c in the\ntree is represented by an edge that is labeled by the negation of c, or negated character, denoted\nby c\u0304 . Clearly, an edge labeled by a negated character follows an edge labeled by the character\nalong a path from the root to a leaf. The following definition is based on the general coalescent\nmodel given in [5] to represent the evolution of haplotype sequences and assume that nodes are\nlabeled by vector states of characters.\nFormally, we have:\nPersistent Perfect Phylogeny Let M be a binary matrix of size n \u00d7 m. Then a persistent\nperfect phylogeny, in short p-pp tree for M , is a rooted tree T that satisfies the following properties:\n1. each node x of T is labeled by a vector lx of length m;\n2. the root of T is label by a vector of all zeros, while for each node x of T the value lx [j] = 0, 1\nrepresents the state, 0 or 1 respectively, of character cj in tree T ;\n3. for each character cj there are at most two edges e = (x, y) and e\u2032 = (u, v) such that lx [j] 6= ly [j]\nand lu [j] 6= lv [j] (representing a change in the state of cj ) such that e, e\u2032 occur along the same\npath from the root of T to a leaf of T ; if e is closer to the root than e\u2032 , then the edge e where\ncj changes from 0 to 1 is labeled cj , while edge e\u2032 is labeled c \u0304j ,\n4. each row of M labels exactly one leaf of T .\n2\n\n\fIn the classical definition of a Perfect Phylogeny Tree, in short pp tree, no negated characters\nare allowed in the tree (see [17]) (see definition in Section 2). Observe that by the above definition\nof p-pp tree, for each leaf s of tree T , the positive characters that label edges that are along the\nunique path from the root to s and do not occur as negated along the same path, specify exactly\nthe characters that have value 1 in the row s of M .\nThus, let us state the main problem investigated in the paper.\nThe Persistent Perfect Phylogeny problem (P-PP): Given a binary matrix M , returns\na p-pp tree for M if such a tree exists.\nIn the paper we investigate the solution of the P-PP problem. Our main contribution is a\ngraph-based restatement of the problem that allows us to provide an exact algorithm for the\nproblem having a worst time complexity that is polynomial in the number n of rows of the matrix\nand exponential in the number m of characters. Since in real data the number of characters is\nusually small, while the number of species may be very large, the algorithm could be efficient even\non large instances as shown by an experimental analysis illustrated in Section 6.\nThe graph-based solution of the P-PP problem is obtained by restating the problem as a variant\nof the Incomplete Directed Perfect Phylogeny [12], called Incomplete Perfect Phylogeny with\nPersistent Completion (IP-PP), where the input data of this last problem is a specific incomplete\nmatrix M over values 0, 1, ? and the goal is to complete values ? into 0 or 1 so that M admits a\nclassical perfect phylogenetic tree. Then we show that the IP-PP problem reduces to the problem\nof reducing a colored graph by a graph operation that represents a completion of a column of the\ninput matrix. Based on these ideas we discuss our exact algorithm for the P-PP problem.\nWe believe that the graph-based formulation of the problem could help in investigating polynomial time solutions to the problem.\n\n2\n\nThe Perfect Phylogeny model: preliminaries\n\nLet us give the definition of a perfect phylogeny for a binary matrix and some relevant basic results\nthat will be used in the paper.\nPerfect Phylogeny\nLet M be a binary matrix of size n \u00d7 m. Then a directed perfect phylogeny, in short pp tree for\nM , is a rooted tree T that satisfies the following properties:\n1. each node x of T is labeled by a vector lx of length m;\n2. the root is labeled by a vector of zeros, while for each node x, the value lx [j] = 0, 1 represents\nthe state, 0 or 1 respectively, of character cj in tree T ;\n3. for each character cj there is at most one edge e = (u, v), labeled cj , such that lu [j] 6= lv [j]\n(notice that lu [j] = 0, while lv [j] = 1); edge e represents a changing of state of cj ;\n4. each row of matrix M labels exactly one leaf of T .\nThe algorithmic solution of the Perfect Phylogeny model has been investigated in [8], where a\nlinear time algorithm is provided. In particular, the paper [8] provides a well known characterization of matrices admitting a perfect phylogeny. A binary matrix M admits a perfect phylogeny\nif and only if it does not contain a pair of columns and three rows inducing the configurations\n(0, 1), (1, 0) and (1, 1), also known as forbidden matrix (see Figure 1 (b)). We will use this characterization in the paper.\nIn particular, the forbidden matrix has a representation by means of a graph consisting of a\npath of length four containing three species and two characters; this graph is called \u03a3-graph. Such\na graph is obtained by drawing an edge between every pair of species and characters having value\n1 in the matrix (see Figure 1 (c)).\nNotice that the forbidden matrix is the smallest matrix that does not admit a pp tree. However,\nby allowing a character to be persistent, the matrix admits a persistent perfect phylogeny, as shown\nin Figure 1 (a).\n3\n\n\fa\n(1,0)\ns1\n\nb\n(1,1)\n\u0101\n\ns3\n\na\na\ns1 1\ns2 0\ns3 1\n\nb\n0\n1\n1\n\ns1\n\nb\n\ns3\n\ns2\n\ns2 (0,1)\n(a)\n\n(b)\n\n(c)\n\nFig. 1. The Figure (a) illustrates the perfect persistent phylogeny for the forbidden matrix reported in\nFigure (b) and the \u03a3-graph for the forbidden matrix in Figure (c).\n\nA well known concept that has been used several times in the framework of the perfect phylogeny is a graph representation of the four configurations (0, 1), (1, 1), (1, 0) and (0, 0) (called four\ngametes): the conflict graph. We say that two positive characters c, c\u2032 of matrix M are in conflict\nin matrix M , if and only if the pair of columns u, v of M induces the four gametes.\nDefinition 1 (conflict graph). Let M be a binary matrix. The conflict graph associated with\nmatrix M is the undirected graph Gc = (C, E \u2286 C \u00d7 C) where a pair (u, v) \u2208 E if and only if u, v\nare in conflict in matrix M .\nNotice that when M has a conflict graph with no edges, M does not necessarily admit a rooted\nperfect phylogeny, since M could contain an occurrence of the forbidden matrix. For example, the\nforbidden matrix has a conflict-graph with no edges.\nIn this paper we define a variant of the the Incomplete Directed Perfect Phylogeny (in short\nIDP) [12]. The input data of the IPP problem is a matrix over symbols 0, 1, ? where symbol ? is\nused to denote an entry of the matrix that is not determined. Then the IPP problem is finding\na completion of the matrix, i.e. assigning values 0, 1 to ? symbols so that the matrix admits a\nperfect phylogeny.\nFor basic notions of graph theory used in the paper see [3].\n\n3\n\nThe Incomplete Perfect Phylogeny with Persistent Completion\n\nLet M be a binary n \u00d7 m matrix which is an instance of the P-PP problem. The extended matrix\nassociated with M is a matrix Me of size n \u00d7 2m over alphabet {0, 1, ?} which is obtained by\nreplacing each column c of M by a pair of columns (c, c\u0304), where c is the positive character, while\nc\u0304 is the negated character, moreover for each row s of M , it holds:\n1. if M [s, c] = 1, then Me [s, c] = 1 and Me [s, c\u0304] = 0,\n2. if M [s, c] = 0, then Me [s, c] =? and Me [s, c\u0304] =?.\nInformally, the assignment of the pair (?, ?) in a species row s for the pair of entries in columns\nc and c\u0304 means that character c could be persistent in species s, i.e. it is gained and then lost. On\nthe contrary, by definition of a persistent perfect phylogeny, the pair (1, 0) assigned in a species\nrow s for the pair of entries in columns c and c\u0304, means that character c is only gained by the\nspecies s.\nIn the paper, we will use the term extended matrix to denote an extended matrix associated\nwith a binary matrix and defined as above. A completion of a character c of matrix Me is obtained\n4\n\n\fby solving the pair (?, ?) given in the pair of columns c, c\u0304 by the value (0, 0) or (1, 1). If a character\nc is completed, then it is called active.\nA completion of matrix Me is a completion of all characters of Me , while a partial completion\nof Me is a completion of zero or more characters of Me .\nFigure 2 (a) shows an example of input matrix M for the P-PP problem. Then Figure 2 (b)\nshows the incomplete matrix Me associated with M . A possible completion of Me is given in\nFigure 2 (c).\na\n0\n0\n1\n1\n1\n\nbcd\n011\n100\n000\n000\n110\n(a)\n\ne\n0\n0\n0\n1\n0\n\na\n?\n?\n1\n1\n1\n\n\u0101\n?\n?\n0\n0\n0\n\nb\n?\n1\n?\n?\n1\n\nb\u0304\n?\n0\n?\n?\n0\n\nc c\u0304\n10\n??\n??\n??\n10\n(b)\n\nd\n1\n?\n?\n?\n?\n\nd \u0304 e\n0?\n??\n??\n?1\n??\n\n\u0113\n?\n?\n?\n0\n?\n\na \u0101\n11\n00\n10\n10\n10\n\nb\n1\n1\n1\n1\n1\n\nb\u0304\n1\n0\n1\n1\n0\n\nc c\u0304\n10\n00\n11\n11\n10\n(c)\n\nd\n1\n0\n0\n0\n0\n\nd \u0304 e\n00\n00\n00\n01\n00\n\n\u0113\n0\n0\n0\n0\n0\n\nFig. 2. The figure illustrates a binary matrix M (a) and its extended matrix Me (b) and a completion of\nMe (c).\n\nWe introduce below a problem to which we reduce P-PP, as shown in Theorem 1.\nIncomplete Perfect Phylogeny with Persistent Completion Problem (IP-PP)\nInstance: An extended matrix Me over {0, 1, ?}.\nQuestion: give a completion M \u2032 of the extended matrix Me such that M \u2032 admits a perfect\nphylogeny, if it exists.\nThus we state the first result of the paper. In order to prove the result we assume that the\ninput matrix M does not have columns consisting of zeros, that is for each character c, there must\nexist a species having the character. As a consequence of this assumption, given the extended\nmatrix Me of M , it must be that for each positive character c there is a species having the positive\ncharacter c and not the negated character c\u0304.\nTheorem 1. Let M be a binary matrix and Me the extended matrix associated with M . Then M\nadmits a p-pp tree if and only if there exists a completion of Me admitting a pp tree.\nProof. (If ) Let M \u2032 be a completion of matrix Me such that M \u2032 admits a perfect phylogeny T .\nIn the following we show that apart from the labeling of internal nodes of tree T , the tree T\nis a p-pp tree for matrix M . More precisely, we obtain a p-pp tree T \u2032 for matrix M by changing\nthe labeling of tree T as follows. In order to distinguish the labeling of node x in tree T from the\nnew labeling of the same node x in tree T \u2032 , we denote the new labeling of x in T \u2032 by the vector\nlx\u2032 . Given a node x of tree T labeled by a 2m vector lx , then the label lx\u2032 of node x in tree T \u2032 is\ndefined as follows:\nfor each j, with 1 \u2264 j \u2264 m, lx\u2032 [j] = 1 if and only if lx [2j \u2212 1] = 1 and lx [2j] = 0, otherwise\nlx\u2032 [j] = 0. Informally, a character cj has value 1 in vector lx\u2032 if and only if cj occurs as 1 in vector\nlx and it is does not occur as negated in lx , that is character c \u0304j has value 0 in lx .\nWe first show that property (4) of the definition of a persistent perfect phylogeny holds for\ntree T \u2032 for matrix M , i.e. each row s of M labels a leaf in tree T \u2032 . Now, row s of the completion\nM \u2032 labels a leaf ls of tree T . We can easily show that ls\u2032 is equal to row s in matrix M . This fact\nfollows from the observation that characters that have value 1 in row s of M still have value 1\nin row s of the completion M \u2032 . By definition of a completion, only a character having value 0 in\nM may be persistent along a path of tree T , i.e. it labels an edge of the path and its negated\ncharacter labels another edge of the same path. Consequently, the characters associated with the\nedges along the unique path of T from the root to s and which are not negated are exactly those\nhaving value 1 in row s of M , that is ls\u2032 is equal to row s of M , as required.\n5\n\n\fNow, properties (1) to (3) given by definition of a persistent perfect phylogeny T \u2032 for matrix\nM follow from the fact that T is a perfect phylogeny for matrix M \u2032 , and thus each character is\nassociated with exactly one edge of the tree, which implies the same property for each negated\ncharacter c\u0304. Observe that by definition of extended matrix a negated character occurs in a row\nif and only if its positive character occurs in the same row. Moreover, since we assume that for\neach character c matrix M must have a a species that contains the positive character c, but not\nthe negated character c\u0304, it is immediate to verify that every negated character c\u0304 follows character\nc along a path from the root to a leaf, thus proving that change of state of c\u0304 from 0 to 1 (that\nis from 1 to 0 in tree T \u2032 ) occurs after the change of state from 0 to 1 of character c. In fact, by\ndefinition of a completion the set of species having character c includes the set of species having\ncharacter c\u0304, since columns c and c\u0304 both have values 1 or c has value 1 and c\u0304 has value 0.\n(Only if ) Vice versa, let us now show that if there exists a persistent perfect phylogeny T for\nmatrix M , then there exists a completion M \u2032 of Me such that M \u2032 admits a perfect phylogeny. We\ncan associate to tree T a matrix MT of size n \u00d7 2m as follows. For each character c of M add a\nnew column c\u0304. Then consider each row s of matrix MT such that a negated character c\u0304 occurs\nalong the path from the root to s. Then set value 1 for row s in columns c and c\u0304 of matrix MT .\nNotice that MT is a completion of Me and clearly T is a perfect phylogeny for MT .\n\u2293\n\u2294\n\n4\n\nThe red-black graph\n\nIn this section we give a graph representation of an extended matrix, and we define a graph operation that represents a special type of completion of the pair of columns of the matrix associated\nwith a character.\nLet Me be an extended matrix Me , then the red-black graph GRB for matrix Me consists of\nthe edge colored graph (V, E) where V = C \u222a S, given C = {c1 , * * * , cm } and S = {s1 , * * * , sn } the\nset of positive characters and species of matrix Me , while E is defined as follows: (s, c) \u2208 E is a\nblack edge if and only if Me [s, c] = 1 and Me [s, c\u0304] = 0.\nThen we define a graph operation on nodes (characters) of the graph GRB that represents a\ncanonical completion of characters and consists of adding red edges, removing black or red edges.\nThis graph operation over characters (nodes) of the red-black graph may be iterated till the graph\nhas only active characters, as defined below.\nRealization of a character c and its canonical completion\nLet C(c) be the connected component of graph GRB containing node c. The realization of\ncharacter c in graph GRB consists of:\n\u2013 (a) adding red edges connecting character c to all species nodes s that are in C(c) and such\nthat (c, s) is not an edge of GRB ,\n\u2013 (b) removing all black edges (c, s) in graph GRB , Then c is labeled active.\n\u2013 (c) if a character c\u2032 is connected by red edges to all species of C(c), then c\u2032 is called free. Then\nits outgoing edges are deleted from the graph.\nThe realization of a character c is associated with a special completion in matrix Me of the\ngiven character, called canonical. The canonical completion of character c in matrix Me is defined\nby completing each pair (?, ?) occurring in the pair of columns c and c\u0304 as follows: the pair (?, ?)\nis completed by (1, 1) in every species s that is in the component C(c) of graph GRB , while value\n(0, 0) is assigned in the remaining rows.\nExample 1. Figure 3 (a) illustrates the red-black graph of the extended matrix associated with\nmatrix M consisting of rows 1000, 1100, 0101, 0011, numbered 1, 2, 3 and 4, respectively. Characters of M are denoted by letters a, b, c and d. Then Figure 3 (b) illustrates the red-black graph\nobtained after the realization of character a, while Figure 3 (c) reports the corresponding canonical\ncompletion in Me of character a.\nInformally, the red edges of graph GRB incident to a character c that has been realized represent\nthe pairs (?, ?) in columns (c, c\u0304) that are completed as (1, 1) in matrix Me .\nIn the following we call e-empty a red-black graph without edges.\n6\n\n\fa \u0101 b b\u0304 c c\u0304 d d \u0304\na\n\nb\n\nc\n\nd\n\na\n\nc\n\nb\n\nd\n\n1 0 ? ? ? ? ? ?\n1 0 1 0 ? ? ? ?\n1 1 1 0 ? ? 1 0\n\n1\n\n2\n\n3\n\n4\n\n1\n\n(a)\n\n2\n\n3\n\n4\n\n1 1 ? ? 1 0 1 0\n\n(b)\n\n(c)\n\nFig. 3. The Figure (a) illustrates the graph GRB of the extended matrix associated with the matrix of\nExample 1. Then (b) illustrates the graph GRB after the realization of character a. Then (c) illustrates\nMe after the completion of a.\nc1 c \u03041 c2 c \u03042 c3 c \u03043 c4 c \u03044\nc1\n\nc2\n\nc3\n\nc4\n\nc1\n\nc2\n\nc3\n\nc4\n\n1 0 1 0 0 0 0 0\n1 1 1 0 1 0 1 1\n1 1 1 1 1 0 1 0\n\n1\n\n2\n\n3\n(a)\n\n4\n\n1\n\n2\n\n3\n\n4\n\n1 0 1 1 1 1 1 0\n\n(b)\n\n(c)\n\nFig. 4. The Figure (a) illustrates the red-black graph of the Example 2 . Then (b) illustrates graph GR\nof the example, while (c) illustrates the completion of Me induced by the realization of sequence r.\n\nRemark 1. Let r be a sequence of all characters of a red-black graph for an extended matrix Me ,\nand let Gr be the graph produced after the realization of the characters in r one after another.\nClearly, the realization of characters in r produces a completion of the matrix Me . Then, either\nGr is e-empty or Gr contains two nodes inducing a \u03a3-graph. Observe that if Gr is not e-empty, it\nmust have only red edges that are incident to at least two characters of the graph. In fact, assume\non the contrary that Gr has a single character c that is incident to red edges. Then c must be\nconnected to all species nodes in the same connected component of the graph. But, this fact leads\nto a contradiction since c is free and all red edges incident to c are deleted from the graph. By\ninspection of the possible cases, it is easy to verify that the minimum size connected component\nof Gr induces a \u03a3-graph consisting of two characters and three species. Such a graph represents\nthe presence of a forbidden matrix in the completion M \u2032 of matrix Me , and hence M \u2032 does not\nadmit a perfect phylogeny (see Section 2).\nThe following example illustrates an application of the previous Remark 1.\nExample 2. Let M be a matrix having the four characters c1 , c2 , c3 and c4 and rows (1, 1, 0, 0),\n(0, 1, 1, 0), (0, 0, 1, 1) and (1, 0, 0, 1), numbered 1, 2, 3 and 4, respectively. Let GR be the graph\nobtained after the realization of the sequence r =< c1 , c2 , c3 , c4 > of characters. Then GR consists\nof the path < c4 , 2, c1 , 3, c2 , 4, c3 > with red edges. Then graph GR induces the \u03a3-graph consisting\nof path < 2, c1 , 3, c2 , 4 >. Observe that the completion M \u2032 of the extended matrix Me of M consists\nof rows (1, 0, 1, 0, 0, 0, 0, 0), (1, 1, 1, 0, 1, 0, 1, 1), (1, 1, 1, 1, 1, 0, 1, 0) and (1, 0, 1, 1, 1, 1, 1, 0) and such\na matrix does not admit a perfect phylogeny as characters c1 and c2 and species 2, 3, 4 induce the\nforbidden matrix in the completion M \u2032 . Figure 4 illustrates the example.\nSince we are interested in computing canonical completions of the matrix that admit a pp\ntree by the previous Remark 1 only canonical completions that are obtained by the realization of\nspecial sequences of characters of the red-black graph are considered, as defined below.\n7\n\n\fDefinition 2. Given a graph GRB for an extended matrix Me , a successful reduction of GRB is\nan ordering r =< ci1 , * * * , cim > of the set of positive characters {c1 , * * * , cm } of the matrix such\nthat the consecutive realization of each character in r (which removes black edges from graph GRB )\nleaves an e-empty red-black graph.\nIn Section 4.1, we show that finding a solution to an instance of the IP-PP problem is equivalent\nto computing the existence of a successful reduction for the red-black graph for the input matrix.\nMore precisely, let Me be an instance of the IP-PP problem. In the following Theorem 2, we prove\nthat if Me admits a pp tree T , then there exists a successful reduction of graph GRB . Vice-versa,\nwe show that a successful reduction of the red-black graph for Me provides a completion M \u2032 of\nthe matrix Me that admits a pp tree, thus giving a solution to the IP-PP instance..\nTheorem 2. Let Me be an extended matrix. Then Me admits a perfect phylogeny, if and only\nif there exists a successful reduction of the graph GRB for Me .\n4.1\n\nBuilding a successful reduction from a pp tree\n\nThis section is devoted to the proof of one direction of Theorem 2, that is showing how to get\na successful reduction from a pp tree. We will use the following remark that holds for extended\nmatrices.\nIn this section, given a node v of tree T , by T (v) we denote the subtree of T having root v.\nMoreover, we assume that edges of a tree T are oriented. The orientation of edges is from the root\nto a leaf node.\nRemark 2. Let T be a pp tree for a completion of an extended matrix Me . Then by definition of\na perfect phylogeny is immediate to verify that the root of tree T is a 02m binary vector of size\n2m, moreover each internal node x is labeled by a 2m-vector lx defined as follows: each entry i\nhas value 1 if and only if the corresponding ith character (positive or negated) occurs along the\npath from the root of the tree T to node x.\nExample 3. Figure 5 (a) illustrates the pp tree for matrix M \u2032 of Figure 2 (c). Notice that rows of\nmatrix M \u2032 are numbers 1, 2, 3, 4, 5, while the positive characters are a, b, c, d, e. Then Figure 5 (b)\nillustrates the vectors labeling each internal node of tree T .\nThen we need to state some technical lemmas and introduce a normal form for a pp tree, called\nstandard. A tree T is in standard form when it is in simple form as defined below and satisfies the\nproperties stated in Definition 3.\nA pp tree T is in simple form if and only if each edge of the tree is exactly labeled by one\ncharacter and T does not contain two edges e, e\u2032 incident to the same node, one labeled by character\nc and the other labeled by c\u0304, respectively.\nGiven T a pp tree for a completion M , we can show that tree T can be reduced to one in\nsimple form. This fact implies that we can obtain from M a completion M \u2032 that admits a tree in\nsimple form. Then the completion M \u2032 is called simple completion.\nLemma 1. If Me has a completion that admits a pp tree, then there exists a simple completion\nM \u2032 of Me .\nProof. Let T be the pp tree for a completion of Me and assume that T is not in simple form.\nWe first transform the tree T into a tree T \u2032 such that each edge has only one label. Tree T \u2032 is\nobtained by replacing each edge with k > 1 labels with a path of k edges each one labeled with a\ndistinct label of the replaced edge e. On the contrary, an edge without labels is contracted, in the\nsense that the two end nodes of the edge are collapsed to a unique node. Clearly, the above two\noperations do not change the completion M .\nAssume now that there exists two edges e, e\u2032 in tree T \u2032 that are incident to the same node and\nare labeled by characters c and c\u0304, respectively. Assume that e = (x, v) and e\u2032 = (v, u).\n8\n\n\f(0,0,0,0,0,0,0,0,0,0)\nb\n\nb\n(0,0,1,0,0,0,0,0,0,0)\n\na, c\n\na, c\n\n2\n\n2\n(1,0,1,0,1,0,0,0,0,0)\n\n5\n\nb\u0304\n\n5\n\nb\u0304\n\n(1,0,1,1,1,0,0,0,0,0)\n\u0101, d\n\n\u0101, d\n\nc\u0304\n\nc\u0304\n\n(1,1,1,1, 1,0,1,0,0,0)\ne\n\ne\n\n3\n\n1\n\n(b)\n\n4\n\n3\n\n(1,0,1,1, 1,1,0,0,1,0)\n\n1\n(a)\n\n(1,0,1,1, 1,1,0,0,0,0)\n\n4\n\nFig. 5. The Figure (a) illustrates a perfect persistent phylogeny T for the matrix of Example 3. Figure\n(b) reports the vector lx for each node x of the tree T .\n\nThen we can move tree T (u) as a subtree of node x by removing edge (v, u) and making the\nroot u adjacent with node x. Then change the completion M by replacing all pairs (1, 1) induced\nby the columns c and c\u0304 and species row in subtree T (u), by the pair (0, 0), obtaining the completion\nM \u2032 . It is easy to verify that T \u2032 is the tree representation of the completion M \u2032 . We can iterate the\nabove operation and obtain a tree in standard form, as required by the lemma.\n\u2293\n\u2294\nLet GRB be the red-black graph for an extended matrix Me and let T be the pp tree of a\ncompletion of Me .\nWe require that a tree T that is in simple form satisfies an additional property that relates the\ntree T to the red-black graph GRB . Observe that we associate to each node u of T the red-black\ngraph that is obtained by the realization of the positive characters that have value 1 in vector lu\nwhere if a negated character c is free, then its incident red edges are removed from the graph if\nand only if c has value 1 in vector lu . We define such a graph, denoted as Gu , the red-black graph\nfor node u of T .\nDefinition 3 (standard property). Let T be a pp tree in simple form for a completion Me .\nThen T is in standard form if and only if the following property holds: for each node u of T such\nthat (u, x) is an edge of the tree T labeled c or c\u0304, all species of tree T (x) are the same species that\nare in the connected component of graph Gu containing node c.\nLemma 2. Let Me be an extended matrix admitting a pp tree. Then, matrix Me admits a completion that is represented by a tree T in standard form.\nProof. By Lemma 1 we can assume that the matrix Me has a simple completion Mc that is\nrepresented by a tree T in simple form. To prove the existence of a tree in standard form, we\niterate the application of the following procedure to T till it is in standard form. Each iteration\nof the procedure corresponds to changes to the completion Mc , such that the final computed\n9\n\n\fcompletion M \u2032 is represented by the new tree in standard form. Let u be the node that is closest\nto the root r of T , such that u does not satisfy the property stated in Definition 3. Eventually,\nu may be the root of T . Let C(c) be the connected component of the red-black graph Gu having\nnode c. Since property of Definition 3 is violated then the following two cases are possible. Case\n1: there exists a species s\u2032 in component C(c) and s\u2032 is not in subtree T (x). Case 2: there exists a\nset S \u2032 of species in the subtree T (x) that are not in C(c).\nIn the following we show that Case 1 leads to a contradiction, while in Case 2 we built from\ntree T a new pp tree T \u2032 for a completion of matrix Me where node u does not verify Case 2 and\nthus u must satisfy Definition 3.\nCase 1.\nAssume that there exists a species in component C(c) that is not in subtree T (x). In the\nfollowing we show that we obtain a contradiction. If Case 1 holds, then there must exist a species\ns\u2032 that is not in tree T (x) and is connected in component C(c) (by red or black edges) to a species\ns of tree T (x) by means of character c1 . More precisely, in component C(c) s is connected to\ncharacters c and c1 , while s\u2032 is connected to character c1 . Since s\u2032 is not in tree T (x), species\ns and s\u2032 must have a common ancestor that is a node v along the path \u03c0ru from the root r to\nnode u. Then character c1 labels an edge that occur on path \u03c0ru and thus v occurs before node u.\nConsequently, c1 is realized in graph Gu , thus implying that c1 is connected only by red edges to\nspecies s and s\u2032 . This fact implies that both s, s\u2032 do not have character c1 and thus it holds that\nc \u03041 labels an edge that occurs along the path from the root of T to the common ancestor node v\nof s and s\u2032 . Since Definition 3 holds for each node that precedes u, it follows that all species in\nT (u) are in a connected component C(c\u2032 ) that contains c1 , where c1 is connected to all species\nin T (u) by red edges. Consequently, c1 is free in Gu and thus all red edges connecting s to s\u2032\nare removed from the red-black graph Gu , by definition of red-black graph associated to a node,\na contradiction with the previous assumption. It follows that species s\u2032 cannot be in component\nC(c), thus implying that no other species different from the ones in T (x) can be in component\nC(c).\nCase 2.\nAssume that S \u2032 is the largest set of species that are in T (x) and are not in the component\nC(c). By definition of pp tree, it must be that the set of species S \u2032 is in the subtree T (v) for a\nnode v of degree at least 2 that is along the path from node x to a leaf and is the end node of the\nedge (z, v) labeled c\u0304. In fact, since S \u2032 contains species that are not in C(c), by definition of graph\nGRB it means that such species do not have character c and consequently they must occur in the\nsubtree induced by the end node of the edge labeled c\u0304.\nNow, consider the path \u03c0xv from node x to the node v. Let y be the node on path \u03c0xv such\nthat given the unique path \u03c0yv from node y to v, it consists of only degree 2 nodes. If such y does\nnot exist, then pose y = z.\nLet Ty be the subtree of T consisting of path \u03c0yv and subtree T (v). Clearly, all species s\u2032 of\nTy are the ones of subtree T (v), by construction of Ty .\nConsider subtree Ty\u2032 which is obtained from subtree Ty after removing the edge labeled c\u0304 (see\nFigure 6). In the following we show that subtree Ty\u2032 can be moved as a subtree of node u thus\nobtaining a new tree T \u2032 such that is a pp tree for a completion of matrix Me . By construction,\nin tree T \u2032 subtree T (x) does not contain the set S \u2032 of species that are not in component C(c)\nand thus Case 2 does not hold for node u in tree T \u2032 . Moreover, by application of the constructive\nprocedure given in the proof of Lemma 1, tree T \u2032 can be reduced to a simple form, thus proving\nwhat required.\nAssume to the contrary that tree Ty\u2032 cannot be moved as subtree of node u to obtain a pp\ntree for a completion of matrix Me . Observe that a species s in subtree Ty of T has all positive\ncharacters of the path from the root r to node x that are not negated along the path \u03c0xy . Moreover\ns has positive characters that occur in \u03c0xy . Thus, tree Ty\u2032 cannot be moved as subtree of node u\nin T \u2032 , if two cases hold: (i) tree Ty\u2032 has a species s containing a positive character e that belongs\nto path \u03c0xy or (ii) s does not have a character e that occurs as negated in path \u03c0xy and occurs as\npositive in the path from the root r to node x. Let us consider case (i). Thus assume first that tree\nTy has a species s having character e that is on the path \u03c0xy . Since y has degree bigger than 2,\n10\n\n\fFig. 6. The figure illustrates Case 2 of Lemma 2, more precisely it represents the operation of moving tree\nTy\u2032 as subtree of node u. Observe that tree Ty\u2032 consists of subtree T (v) and the path \u03c0yv where edge (z, v)\nlabeled c\u0304 has been removed.\n\nthere exists a species s\u2032 such that e is a character of s\u2032 and s\u2032 occurs at the end of a path leaving\nnode y that is distinct from the path \u03c0yv from node y to node v. Moreover, c must be a character\nin s\u2032 , since the character c\u0304 occurs after node y along path \u03c0yv . Consequently, in the red-black\ngraph GRB species s\u2032 is connected to characters c and e, where e is connected to character s. It\nfollows that s is connected to c by means of character e. This situation of the red-black graph\nGRB is also present in the graph Gu , as both e, c are not realized in graph Gu , being c, e labels of\nedges that occur after node u. Consequently, s is in the connected component C(c), thus obtaining\na contradiction with the fact that s \u2208 S \u2032 . Let us consider case (ii). Thus assume now that tree Ty\nhas a species s that does not have character e, where e occurs as positive on the path from the root\nr to node x, while character \u0113 occurs on the path \u03c0xy . Similarly as above, since y has degree bigger\nthan 2, there exists a species s\u2032 occurring at the end of a path leaving node y that is distinct from\npath \u03c0yv and s\u2032 contains characters \u0113 and character c. Clearly, e labels an edge (l1 , v) that occurs\nbefore node u and since the standard property holds for each node above u, it follows that s\u2032 and\ns are in the same connected component of graph Gl1 having character e and character c. Thus,\nwhen character e is realized in graph Gl1 , both species s, s\u2032 are connected to e by red-edges, thus\nimplying that s is in the same connected component of node c. Observe that this property holds\nalso for graph Gu . In fact, \u0113 occurs after node u, and thus red-edges incident to node e cannot be\nremoved from graph Gu . Consequently, s is in the connected component C(c), thus contradicting\nthe assumption that s \u2208 S \u2032 . Since case (i) and (ii) are not possible, it follows that all species in\nsubtree Ty\u2032 do not have (positive or negated) characters of path \u03c0xy in the completion of matrix\nMe . It follows that tree Ty\u2032 can be moved as a subtree of node u to obtain tree T \u2032 where T \u2032 is a pp\ntree for the completion M \u2032 of matrix Me obtained by replacing in all rows S \u2032 of the completion\nMc the entry (1, 1) in columns c and c\u0304 by the pair (0, 0). In fact, species in S \u2032 will not have the\ncharacter c and its negated character in the new tree T \u2032 and thus T \u2032 is the pp tree for the new\ncompletion M \u2032 . This observation completes the proof of Case 2.\n\u2293\n\u2294\nWe show the first preliminary lemma that allows us to prove the main Theorem of the paper.\nLemma 3. Let T be a tree in standard form representing the completion M \u2032 of an extended matrix\nMe . Let Gx be the red-black graph for a node x of T . Then, given C \u2032 the set of positive characters\nhaving value 1 in vector lx , the completion of C \u2032 in M \u2032 is canonical, i.e. it is given by the realization\nof characters C \u2032 in graph GRB . Moreover, a negated character c changes value from 0 to 1 in lx\nif and only if it is free in graph Gx . Then edges incident to c are removed from Gx .\n11\n\n\fProof. Let GRB the red-black graph for the extended matrix Me . We show the lemma by induction\non the number k of ones occurring in a node lx of tree T . Assume first that k = 1 and c is the\ncharacter that has value 1 in vector lx . Clearly, c is the label of the edge (r, x) where r is the root\nof tree T and c is a positive character. Observe that the completion of columns c and c\u0304 in M \u2032 is a\ncanonical completion, i.e. it is obtained by the realization of node c in graph GRB . In fact, since\nby Definition 3 of a standard tree the species of tree T (x) are the same ones of the connected\ncomponent of graph GRB having character c, it holds that they must have value (1, 1) or (1, 0) in\nthe pair of columns (c, c\u0304) of matrix M \u2032 .\nNow, assume that the number of entries with value 1 in vector lx is k > 1 and the edge (u, x)\nis incident to node x (assuming that edges are oriented following every path from the root r) .\nGiven vector lu , since the number of entries that are 1 in lu is less than the number of entries\nthat are 1 in lx , by induction, the completion of all characters C \u2032 that are in lu is given by the\nrealization of the set C \u2032 in graph GRB , thus obtaining the red-black graph Gu for node u. Since\nT is in a standard form, two cases are possible: (1) edge (u, x) is labeled by a positive character c\nor (2) a negated character c\u0304.\nLet us consider case (1) first. Clearly, character c is non active in Gu as it has 0 value in\nvector lu . By Definition 3 of a standard tree all species in T (x) are the same ones that are in the\nconnected component of graph Gu having character c. Notice that species in T (x) specify the rows\nwhere column c and c\u0304 must have the value (1, 1) or (1, 0) in the completion M \u2032 . Consequently, the\ncompletion of c in matrix M \u2032 corresponds to the realization of c in the red-black graph Gu . Thus\nthe completion in matrix M \u2032 of the set C \u2032 \u222a {c} of characters in lx is given by the realization of\nsuch characters in graph GRB , thus proving that the lemma holds in this case.\nLet us consider case (2). Assume that edge (u, x) is labeled by the negated character c\u0304. Then\nby induction the completion of all columns for positive characters in lu is given by their realization\nin graph GRB . Since edge (u, x) is labeled by a negated character, it follows that the red-black\ngraph Gx is obtained by the realization of positive characters in lu . Consequently, Gu and Gx\nare the same graph, thus showing that the completion of positive characters in lx is given by the\nrealization of positive characters in Gx . Since c\u0304 has value 1 in node lx and value 0 in node u, we\nmust show that c is free in graph Gu . In fact, all species in T (x) do not have character c, and by\nLemma 2 these species are exactly the species that are in the connected component of node c in\ngraph Gu . This fact implies that character c is free in graph Gu .\nNow, let us show that character c cannot be free in graph Gv , for v a node that is an ancestor\nof u. In fact, since tree T is in standard form, it must be that all species in subtree T (v) are in the\nsame connected component of a character c1 where c1 labels an edge (v, z). But, since c\u0304 occurs\nafter node z, it follows that there exists a species s in subtree T (v) that has the positive character\nc and therefore no red edge incident to s a node c is given in graph Gv . This fact implies that c\nis not free in graph Gv .\nThis fact completes the proof of the lemma.\n\u2293\n\u2294\nBy Lemma 3, the completion of characters in an extended matrix Me that admits a tree in\nstandard form is a canonical one.\nCorollary 1. Let T be a tree in standard form representing the completion M \u2032 of an extended\nmatrix Me . Then M \u2032 is a canonical completion.\nProof. The result is a direct consequence of the previous Lemma 3. In fact, given a node x of tree\nT , by induction on the number of 0 that are in vector lx , it is easy to show by direct application\nof Lemma 3 that the completion of all characters in tree T (x) is given by their realization in the\nred-black graph Gx for node x. This fact implies that the completion of all characters in tree T is\ncanonical.\n\u2293\n\u2294\nIn the following we can show that a pp tree T represents a successful reduction of the red-black\ngraph.\nLemma 4. Let GRB be the red-black graph for an extended matrix Me . If Me admits a pp tree,\nthen there exists a successful reduction of graph GRB .\n12\n\n\fProof. By Lemma 2, there is a completion M for Me that admits a tree T in standard form. Let\nGx be the red-black graph for node x of T . Then we prove that there exists a successful reduction\nof Gx , by induction on the number k \u2265 0 of 0 entries that are left in the root vector of tree\nT (x). Assume first that k = 0, i.e. all entries of the root have value 1. This fact implies that all\ncharacters have been realized in the red-black graph. By construction, the red-black graph can\nonly have red edges. By Remark 1, if it is not e-empty it means that it has a \u03a3-graph. But, this\nfact implies a contradiction with the existence of the tree T . In fact, the \u03a3-graph represents the\nexistence in M of the induced forbidden matrix. Assume that a and b are the two characters of the\nforbidden matrix. Since by Corollary 1, the completion of columns for a and b in M is canonical,\ni.e. is associated with the realization of a and b in graph GRB , we obtain a contradiction. Thus\nGx must reduce to the e-empty graph, i.e. a successful reduction of Gx must exist.\nAssume now that the number of entries 0 in vector lx is equal to k, with k = m and m > 0.\nThen the root x of tree T (x) has an outgoing edge (x, u) that is labeled by a character c which\nmeans that the entry of c in vector lu is 1, while it is 0 in lx . Two distinct cases must be considered\n(1) either c is positive or (2) c is negated.\nCase 1. Assume c is positive. Since vector lu has one zero less than the root of tree T , that is\nk = m \u2212 1. By induction it holds that the red-black graph Gu reduces to the e-empty graph. Since\ngraph Gx differs from graph Gu by the realization of c, it follows that Gx reduces to the e-empty\ngraph by the realization of c and non active characters in Gu .\nCase 2. If c is negated, by Lemma 3 the red-black graph Gx for node x is equal to the red-black\ngraph Gu and c is free in Gu . Since vector lu has a 0 entry less than the number of 0 entries in lx ,\nby induction Gu reduces to the e-empty graph and consequently also Gx reduces to the e-empty\ngraph. Thus, both cases prove that there exists a successful reduction of graph Gx .\n\u2293\n\u2294\nThe previous Lemma 4 provides the proof of the Only if direction of Theorem 2.\n4.2\n\nBuilding a pp tree from a successful reduction\n\nIn this section we complete the proof of Theorem 2 by showing that a successful reduction provides\na completion for a matrix M e admitting a pp tree.\nTheorem 3. Let Me an extended matrix. If there exists a successful reduction of the graph GRB ,\nthen Me admits a perfect phylogeny.\nProof. Let M be the completion of matrix Me obtained from a successful reduction of the redblack graph for Me . In the following we show that M has no forbidden matrix. This fact will prove\nthat M admits a pp tree. Let GR be the red-black obtained after the realization of the characters\nof the successful reduction. Assume to the contrary that M has two characters c, c1 that induce\na forbidden matrix F , and let s1 , s2 , s3 be the species of M having the configuration (1, 1), (1, 0)\nand (0, 1) in F , respectively.\nWe must consider the following cases.\nCase 1. Assume that the forbidden matrix is induced by two negated characters. This fact\nimplies that GR will have an induced \u03a3-graph, thus contradicting the fact that GR is e-empty.\nCase 2. Assume that the forbidden matrix is induced by two positive characters.\nThen c, c1 must be in the same connected component of the red-black graph before their\nrealization, as species s1 is connected to both characters (we do not know if s1 is connected by\na black or red edge). Now, the realization of c produces the red edge (c, s3 ), since Me [s3 , c] =?.\nThen M [s3 , c] = 1 in the completion M , a contradiction with the assumption.\nCase 3. Assume that the forbidden matrix is induced by a positive and negated character.\nAssume that c is the negated character. Since c and c1 share a species in the forbidden matrix\nF , it means that c and c1 are in the same connected component of the red-black graph when c1\nand c are realized in the graph. Since (0, 1) is given in the matrix F in row s2 , by definition of\nrealization of c1 , it must be that M [s2 , c1 ] = 1 and M [s2 , c \u03041 ] = 1 as Me [s2 , c1 ] = 0. But this is a\ncontradiction.\n\u2293\n\u2294\n13\n\n\fa\n\nb\n\n1\n\n2\n\nc\n\nd\n\ne\n\na\n\nb\n\nc\n\nd\n\ne\n\n3\n\n4\n\n5\n\n1\n\n(2)\n\n3\n(e)\n\n4\n\n(5)\n\n(a)\na\n\nb\n\nc\n\nd\n\ne\n\na\n\nb\n\nc\n\nd\n\ne\n\n1\n\n(2)\n\n3\n\n4\n\n5\n\n1\n\n(2)\n\n(3)\n\n4\n\n(5)\n\n(f)\n\n(b)\na\n\nb\n\nc\n\nd\n\ne\n\n1\n\n(2)\n\n3\n(c)\n\n4\n\n5\n\na\n\nb\n\nc\n\n(1)\n\n(2)\n\n(3)\n\nd\n\ne\n\n4\n\n(5)\n\n(g)\n\na\n\nb\n\nc\n\nd\n\ne\n\na\n\nb\n\nc\n\nd\n\ne\n\n1\n\n(2)\n\n3\n\n4\n\n(5)\n\n(1)\n\n(2)\n\n(3)\n\n(4)\n\n(5)\n\n(d)\n\n(h)\n\nFig. 7. The main steps of the successful realization of graph GRB described in Example 4.\n\nExample 4. Let us consider the 5 \u00d7 5 input matrix Me shown in Figure 2 (b). In the following\nwe detail the realization of characters of a successful reduction r =< b, a, c, d, e > of graph GRB .\nFirst of all, observe that Figure 7 (a) illustrates the initial red-black graph GRB . In the following\nwe say that a species is realized when it is a singleton in the red-black graph.\nFirst character b is realized (Figure 7(b)) and then the species 2 is realized. Then character a\nis realized (Figure 7(c)). Note that we do not add any edge incident to species 2, since it has been\nalready realized. Then character c is realized (Figure 7(d)). and species 5 is realized. Moreover,\ncharacter b is free since it is connected by red edges to all species of the same connected component\nof b (Figure 7(e)). Since character a is connected to all species of its connected component with\nred edges, a is free. The same fact holds for character c. At this point, species 3 is a singleton,\nso it is realized (Figure 7(f)). Then character d is realized (Figure 7(g)) and species 1 is realized.\nFinally, character e is realized and so species 4 is realized. At this point (Figure 7(h)), GRB does\nnot contain any edge.\nNotice that the successful reduction provides the completion that is given in Figure 2 (c).\nObserve that a successful reduction of the red-black graph provides the main steps of the\nprocess of building a pp tree. More precisely, the realization of a single character leads to an\noperation in the pp tree, which is either adding an edge labeled by a character or adding a leaf\nnode corresponding to a species node.\n\n5\n\nAn exact algorithm for the P-PP problem\n\nIn this section we propose an algorithm for the P-PP problem that is based on Theorems 1 and\n2. The algorithm reduces an instance M of P-PP to an instance Me of the IP-PP problem. By\nthe proof of Theorem 1 Me admits a pp tree T if and only if T is a solution of matrix M . Then\n14\n\n\fby the characterization given by Theorem 2, Me admits a pp tree T if and only if there exists a\nsuccessful reduction of the red-black graph for Me . We design an algorithm, called Decide-pp\nthat builds a decision tree that explores all permutations of the set C of characters of Me in order\nto find one that is a successful reduction, if it exists. More precisely, each edge of the decision tree\nrepresents a character and each path of the tree from the root to a leaf is a distinct permutation of\nthe set C. The algorithm works in a branch and bound like manner, in the sense that if a branch\nof the decision tree ending in node x does not lead to a solution, then the decision tree below\nx is discarded. More precisely, each branch ending in node x gives a partial permutation \u03c0 that\nconsists of all characters labeling the path from root r to node x. A partial completion M\u03c0 is\ncomputed by realizing characters provided by the partial permutation \u03c0. Whenever M\u03c0 contains\nthe forbidden matrix, then the branch ending in x does not lead to a solution, and x is labeled as\na fail node.\nBelow we give a general procedure for the realization of a single character in the red-black\ngraph built during the realization of characters.\nProcedure Realize(c, M \u2032 ,GRB )\nInput: a character c, a partial completion M \u2032 and a red-black graph GRB\nOutput: character c is realized in graph GRB and c is completed in M \u2032\n\u2013 Step 1. Mark character c as active.\n\u2013 Step 2. Compute the connected component C of graph GRB containing character c\n\u2013 Step 3. Realize character c:\n- add red edges connecting character c to all species nodes s\u2032 in C such that c is not connected\nto s\u2032 ,\n- remove all black edges (c, s) in C,\n- update the graph GRB by removing all red-edges outgoing from a character c\u2032 of GRB that\nis free.\n\u2013 Step 4. Complete the columns of characters c and c\u0304 in M \u2032 as follows: in every row s such that\n(c, s) is a red edge in GRB , , replace the pairs (?, ?) by (1, 1), otherwise by (0, 0).\nLet us now describe the main algorithm that consists of Decide-pp(Me , r, {r}) call, where r\nis the root of the decision tree, and initially the visited tree consists of set {r}.\nAlgorithm Decide-pp(M \u2032 , x, T )\nInput: a partial depth-first visit tree T of the decision tree T and a leaf node x of T , a partial\ncompletion M \u2032 obtained by the realization of the characters labeling a path \u03c0 from r to node x\nOutput: the tree T extended with the depth-first visit of T from node x. The procedure eventually outputs a successful reduction or a complete visit of T that fails to find such a successful\nreduction.\n\u2013 Step 1. if the edge incident to node x is labeled c, then Realize(c, M \u2032 , GRB ).\nIf the matrix M \u2032 has a forbidden matrix, then label x as a fail node. Otherwise, if x is a leaf\nnode, then mark x as a successful node and output the permutation labeling the path from\nthe root r of tree T and leaf node x.\n\u2013 Step 2. For each node xi that is a child of node x in tree T and is labeled by a non active\ncharacter, apply Decide-pp(M \u2032 , xi , T \u222a {xi }).\n5.1\n\nComplexity\n\nThe worst case time of the algorithm is achieved when the whole permutation tree T is visited.\nGenerating all permutations requires m! time. Each time a character c is realized all species of the\nmatrix are examined in the worst scenario. Moreover, the connected components of the red-black\ngraph must be updated each time. Thus, the realization of m characters has a time complexity\nthat is O(n * m) \u00d7 O(g(n, m)), where g(n, m) is the cost of maintaining connected components of\na graph whose size is O(n2 \u00d7 m). Since red edges are added to the graph, in the worst scenario\neach species will have O(n) incident red-edges.\n15\n\n\fA trivial implementation of the connected component update would require \u03b1(n2 * m) each\ntime a character is realized, \u03b1 being the inverse of the Ackerman function. More efficient implementations can be obtained by using dynamic algorithms [10]. Thus totally, the time is O(m! * n *\nm * \u03b1(n2 * m)). This time improves over the complexity of a trivial algorithm that tries all possible\nsubstitutions for the pairs (?, ?), and would require a worst time that is exponential in both the\nnumber of species and columns of the input matrix.\n\n6\n\nAn experimental analysis\n\nIn this section we discuss an implementation of the Decide-pp algorithm. In order to optimize\nthe time complexity, an ad hoc iterative version of the algorithm has been implemented.\nWe have implemented and tested the Decide-pp algorithm over simulated data produced by\nthe tool ms by Hudson [11]. The test set consisted in a random data set of matrices generated\nwith a recombination rate of 1 over 15. The main goal of the experimental analysis has been to\ntest the applicability of the algorithm to matrices with different complexities in terms of size and\nnumber of conflicts (i.e. edges) in the conflict graph.\nWe have implemented the algorithm in C++ and the experiments have been run on a standard\nwindows workstation with 4 GB of main memory.\nA preliminary experiment has been done to evaluate the performance of the algorithm with\nrespect to specific parameters related to the complexity of the input matrix under mutation events.\nTable 1 reports the time computation to solve sets of 50 matrices for each dimension (50, 15),\n(100, 15), (200, 15), and (500, 15) with a recombination rate 1 over 15. The table has additional\nentries to specify the average time to solve a single matrix (calculated as the ratio between the\ntotal time and the number of considered matrices), the number of matrices that do not admit a\np-pp tree, the total number of conflicts in the conflict graphs of the matrices of each set, and the\naverage number of conflicts for each matrix of the set. Notice that conflicts are measured as the\nnumber of edges in graph Gc . Each considered matrix has a conflict graph Gc that consists of a\nsingle non trivial component. The sets contain only matrices that are solved within 5 minutes.\nClearly, the number of unsolved matrices increases with the size of the input matrices.\nTable 1. Summary table\nnxm total time in sec. average time in sec. no p-pp total conflicts average conflicts\n50x15\n32.323\n0.646\n6\n236\n4.72\n100x15\n194.625\n3.893\n4\n175\n3.5\n200x15\n43.212\n0.864\n3\n147\n2.94\n500x15\n889.433\n17.789\n7\n219\n4.38\n\nObserve that in general the average running time of the algorithm increases with the size of\nthe input matrix but also with the number of conflicts that are present in the conflict graph. This\nlast behavior is suggested by the results reported in Table 2 .\nTable 2. Average execution time in seconds to solve 10 matrices with a single conflict.\n50x15 100x15 200x15 500x15\n0.015 0.031\n0.047\n0.093\n\nAnother experiment has been done with 10 matrices of the same size 50 \u00d7 15 and different\nnumber of edges in the conflict graph. The average time was 0.015, 0.031 and 0.051, respectively\nfor the case of 1, 5 and 10 conflicts.\nIn order to test the performance of the algorithm for large matrices in terms of number of\nspecies we have processed a matrix of size 1000 \u00d7 15 with a conflict graph having 9 conflicts\n(edges). It took 35.5 seconds to find the solution to the matrix.\n16\n\n\f7\n\nConclusions\n\nIn this paper, we formalize the problem of reconstructing a Persistent Perfect Phylogeny over\nbinary values (P-PP problem); the problem generalizes the classical directed perfect phylogeny by\nallowing each character to change from 1 to 0 at most once in the tree. Then, we show that solving\nthe problem P-PP reduces to a graph-reduction problem. Based on this combinatorial interpretation of the problem of the persistent perfect phylogeny problem, we give an exact algorithm for the\nP-PP problem that has a worst time complexity that is exponential in the number of characters,\nbut polynomial in the number of species. An experimental analysis of the implemented algorithm\nfor the P-PP problem shows the applicability of the model to incorporate biological complexity\ndue to back mutation events in the data.\n\n8\n\nAcknowledgement\n\nThe first author, PB would like to thanks Russel Schwartz for indicating applications of the model.\nMoreover, the authors would like to thank Gianluca Della Vedova for comments on a preliminary\nversion of the paper and Francesca Scoglio for technical support in the experimental analysis. All\nauthors are grateful to the anonymous referees for helpful suggestions on the presentation of the\npaper.\n\nReferences\n1. P. Bonizzoni. A linear time algorithm for the Perfect Phylogeny Haplotype problem. Algorithmica,\n48(3):267\u2013285, 2007.\n2. J. Camin and R. Sokal. A method for deducting branching sequences in phylogeny. Evolution, 19:311\u2013\n326, 1965.\n3. T. H. Cormen, C. Stein, R. L. Rivest, and C. E. Leiserson. Introduction to Algorithms. McGraw-Hill\nHigher Education, 2001.\n4. Z. Ding, V. Filkov, and D. Gusfield. A linear time algorithm for Perfect Phylogeny Haplotyping (pph)\nproblem. Journal of Computational Biology, 13(2):522\u2013553, 2006.\n5. E. Eskin, E. Halperin, and R. Karp. Efficient reconstruction of haplotype structure via perfect phylogeny. Journal of Bioinformatics and Computational Biology, 1:1\u201320, 2003.\n6. J. Felsenstein. Inferring Phylogenies. Sinauer Associates, 2004.\n7. D. Fernandez-Baca. The perfect phylogeny problem. Kluwer Academic Publishers, Du, D.Z., Cheng,\nX. (eds.) Steiner Trees in Industries, 2000.\n8. D. Gusfield. Efficient algorithms for inferring evolutionary trees. Networks, pages 19\u201328, 1991.\n9. D. Gusfield. Haplotyping as perfect phylogeny: Conceptual framework and efficient solutions. In\nProc. 6th Annual Conference on Research in Computational Molecular Biology (RECOMB 2002),\npages 166\u2013175, 2002.\n10. J. Holm, K. de Lichtenberg, and M. Thorup. Poly-logarithmic deterministic fully-dynamic algorithms\nfor connectivity, minimum spanning tree, 2-edge, and biconnectivity. J. ACM, 48(4):723\u2013760, 2001.\n11. R. R. Hudson. Generating samples under a wright-fisher neutral model of 31 genetic variation. Bioinformatics, 18(2):337\u2013338, 2002.\n12. I. Peer, T. Pupko, R. Shamir, and R. Sharan. Incomplete directed perfect phylogeny. Siam Journal\non Computing, 33(3):590\u2013607, 2004.\n13. T. Przytycka, G. Davis, N. Song, and D. Durand. Graph theoretical insights into dollo parsimony and\nevolution of multidomain proteins. Journal of Computational Biology, 13(2):351\u2013363, 2006.\n14. T. M. Przytycka. An important connection between network motifs and parsimony models. In Proc.\n10th Annual Conference on Research in Computational Molecular Biology (RECOMB 2006), pages\n321\u2013335, 2006.\n15. R. Satya, A. Murkherjee, G. Alexe, L. Parida, and G. Bhanot. Constructing near-perfect phylogenies\nwith multiple homoplasy events. Bioinformatics, 22(14):514\u2013522, 2006.\n16. V. Satya and A. Mukherjee. An optimal algorithms for perfect phylogeny haplotyping. Journal of\nComputational Biology, 13(4):897\u2013928, 2006.\n17. J. C. Setubal and J. Meidanis. Introduction to computational molecular biology. PWS Publishing\nCompany, 1997.\n\n17\n\n\f18. S. Sridhar, k. Dhamdhere, G. E. Blelloch, E. Halperin, R. Ravi, and R. Schwartz. Algorithms for\nefficient near-perfect phylogenetic tree reconstruction in theory and practice. IEEE/ACM Transections\non Computational Biology and Bioinformatics, 4:561\u2013571, 2007.\n19. J. Zheng, I. B. Rogozin, E. V. Koonin, and T. M. Przytycka. Support for the Coelomata Clade of\nAnimals from a Rigorous Analysis of the Pattern of Intron Conservation. Mol. Biol. Evol., 24(11):2583\u2013\n2592, 2007.\n\n18\n\n\f"}