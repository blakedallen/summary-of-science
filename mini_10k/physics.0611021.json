{"id": "http://arxiv.org/abs/physics/0611021v2", "guidislink": true, "updated": "2007-01-09T17:19:57Z", "updated_parsed": [2007, 1, 9, 17, 19, 57, 1, 9, 0], "published": "2006-11-02T13:01:05Z", "published_parsed": [2006, 11, 2, 13, 1, 5, 3, 306, 0], "title": "HoloTrap: Interactive hologram design for multiple dynamic optical\n  trapping", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=physics%2F0611094%2Cphysics%2F0611133%2Cphysics%2F0611139%2Cphysics%2F0611035%2Cphysics%2F0611238%2Cphysics%2F0611046%2Cphysics%2F0611233%2Cphysics%2F0611242%2Cphysics%2F0611120%2Cphysics%2F0611033%2Cphysics%2F0611156%2Cphysics%2F0611151%2Cphysics%2F0611143%2Cphysics%2F0611036%2Cphysics%2F0611142%2Cphysics%2F0611186%2Cphysics%2F0611219%2Cphysics%2F0611092%2Cphysics%2F0611161%2Cphysics%2F0611255%2Cphysics%2F0611199%2Cphysics%2F0611267%2Cphysics%2F0611236%2Cphysics%2F0611234%2Cphysics%2F0611072%2Cphysics%2F0611075%2Cphysics%2F0611108%2Cphysics%2F0611128%2Cphysics%2F0611261%2Cphysics%2F0611252%2Cphysics%2F0611067%2Cphysics%2F0611118%2Cphysics%2F0611148%2Cphysics%2F0611141%2Cphysics%2F0611266%2Cphysics%2F0611299%2Cphysics%2F0611087%2Cphysics%2F0611076%2Cphysics%2F0611042%2Cphysics%2F0611230%2Cphysics%2F0611086%2Cphysics%2F0611208%2Cphysics%2F0611201%2Cphysics%2F0611162%2Cphysics%2F0611122%2Cphysics%2F0611011%2Cphysics%2F0611081%2Cphysics%2F0611223%2Cphysics%2F0611134%2Cphysics%2F0611271%2Cphysics%2F0611250%2Cphysics%2F0611272%2Cphysics%2F0611123%2Cphysics%2F0611239%2Cphysics%2F0611127%2Cphysics%2F0611289%2Cphysics%2F0611264%2Cphysics%2F0611235%2Cphysics%2F0611170%2Cphysics%2F0611027%2Cphysics%2F0611218%2Cphysics%2F0611268%2Cphysics%2F0611256%2Cphysics%2F0611225%2Cphysics%2F0611213%2Cphysics%2F0611025%2Cphysics%2F0611147%2Cphysics%2F0611253%2Cphysics%2F0611196%2Cphysics%2F0611189%2Cphysics%2F0611007%2Cphysics%2F0611154%2Cphysics%2F0611209%2Cphysics%2F0611291%2Cphysics%2F0611109%2Cphysics%2F0611281%2Cphysics%2F0611226%2Cphysics%2F0611021%2Cphysics%2F0611179%2Cphysics%2F0611060%2Cphysics%2F0611257%2Cphysics%2F0611245%2Cphysics%2F0611130%2Cphysics%2F0611227%2Cphysics%2F0611074%2Cphysics%2F0611200%2Cphysics%2F0611050%2Cphysics%2F0611096%2Cphysics%2F0611055%2Cphysics%2F0611283%2Cphysics%2F0611221%2Cphysics%2F0611259%2Cphysics%2F0611051%2Cphysics%2F0611045%2Cphysics%2F0611093%2Cphysics%2F0611039%2Cphysics%2F0611269%2Cphysics%2F0611273%2Cphysics%2F0611178%2Cphysics%2F0611054%2Cphysics%2F0611005&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "HoloTrap: Interactive hologram design for multiple dynamic optical\n  trapping"}, "summary": "This work presents an application that generates real-time holograms to be\ndisplayed on a holographic optical tweezers setup; a technique that allows the\nmanipulation of particles in the range from micrometres to nanometres. The\nsoftware is written in Java, and uses random binary masks to generate the\nholograms. It allows customization of several parameters that are dependent on\nthe experimental setup, such as the specific characteristics of the device\ndisplaying the hologram, or the presence of aberrations. We evaluate the\nsoftware's performance and conclude that real-time interaction is achieved. We\ngive our experimental results from manipulating 5 micron-diametre microspheres\nusing the program.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=physics%2F0611094%2Cphysics%2F0611133%2Cphysics%2F0611139%2Cphysics%2F0611035%2Cphysics%2F0611238%2Cphysics%2F0611046%2Cphysics%2F0611233%2Cphysics%2F0611242%2Cphysics%2F0611120%2Cphysics%2F0611033%2Cphysics%2F0611156%2Cphysics%2F0611151%2Cphysics%2F0611143%2Cphysics%2F0611036%2Cphysics%2F0611142%2Cphysics%2F0611186%2Cphysics%2F0611219%2Cphysics%2F0611092%2Cphysics%2F0611161%2Cphysics%2F0611255%2Cphysics%2F0611199%2Cphysics%2F0611267%2Cphysics%2F0611236%2Cphysics%2F0611234%2Cphysics%2F0611072%2Cphysics%2F0611075%2Cphysics%2F0611108%2Cphysics%2F0611128%2Cphysics%2F0611261%2Cphysics%2F0611252%2Cphysics%2F0611067%2Cphysics%2F0611118%2Cphysics%2F0611148%2Cphysics%2F0611141%2Cphysics%2F0611266%2Cphysics%2F0611299%2Cphysics%2F0611087%2Cphysics%2F0611076%2Cphysics%2F0611042%2Cphysics%2F0611230%2Cphysics%2F0611086%2Cphysics%2F0611208%2Cphysics%2F0611201%2Cphysics%2F0611162%2Cphysics%2F0611122%2Cphysics%2F0611011%2Cphysics%2F0611081%2Cphysics%2F0611223%2Cphysics%2F0611134%2Cphysics%2F0611271%2Cphysics%2F0611250%2Cphysics%2F0611272%2Cphysics%2F0611123%2Cphysics%2F0611239%2Cphysics%2F0611127%2Cphysics%2F0611289%2Cphysics%2F0611264%2Cphysics%2F0611235%2Cphysics%2F0611170%2Cphysics%2F0611027%2Cphysics%2F0611218%2Cphysics%2F0611268%2Cphysics%2F0611256%2Cphysics%2F0611225%2Cphysics%2F0611213%2Cphysics%2F0611025%2Cphysics%2F0611147%2Cphysics%2F0611253%2Cphysics%2F0611196%2Cphysics%2F0611189%2Cphysics%2F0611007%2Cphysics%2F0611154%2Cphysics%2F0611209%2Cphysics%2F0611291%2Cphysics%2F0611109%2Cphysics%2F0611281%2Cphysics%2F0611226%2Cphysics%2F0611021%2Cphysics%2F0611179%2Cphysics%2F0611060%2Cphysics%2F0611257%2Cphysics%2F0611245%2Cphysics%2F0611130%2Cphysics%2F0611227%2Cphysics%2F0611074%2Cphysics%2F0611200%2Cphysics%2F0611050%2Cphysics%2F0611096%2Cphysics%2F0611055%2Cphysics%2F0611283%2Cphysics%2F0611221%2Cphysics%2F0611259%2Cphysics%2F0611051%2Cphysics%2F0611045%2Cphysics%2F0611093%2Cphysics%2F0611039%2Cphysics%2F0611269%2Cphysics%2F0611273%2Cphysics%2F0611178%2Cphysics%2F0611054%2Cphysics%2F0611005&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "This work presents an application that generates real-time holograms to be\ndisplayed on a holographic optical tweezers setup; a technique that allows the\nmanipulation of particles in the range from micrometres to nanometres. The\nsoftware is written in Java, and uses random binary masks to generate the\nholograms. It allows customization of several parameters that are dependent on\nthe experimental setup, such as the specific characteristics of the device\ndisplaying the hologram, or the presence of aberrations. We evaluate the\nsoftware's performance and conclude that real-time interaction is achieved. We\ngive our experimental results from manipulating 5 micron-diametre microspheres\nusing the program."}, "authors": ["E. Pleguezuelos", "A. Carnicer", "J. Andilla", "E. Martin-Badosa", "M. Montes-Usategui"], "author_detail": {"name": "M. Montes-Usategui"}, "author": "M. Montes-Usategui", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1016/j.cpc.2007.03.003", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/physics/0611021v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/physics/0611021v2", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "17 pages, 6 figures", "arxiv_primary_category": {"term": "physics.optics", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "physics.optics", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "physics.comp-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/physics/0611021v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/physics/0611021v2", "journal_reference": null, "doi": "10.1016/j.cpc.2007.03.003", "fulltext": "arXiv:physics/0611021v2 [physics.optics] 9 Jan 2007\n\nHoloTrap: Interactive hologram design for\nmultiple dynamic optical trapping\nE. Pleguezuelos, A. Carnicer, J. Andilla, E. Mart\u0131\u0301n-Badosa,\nM. Montes-Usategui\nUniversitat de Barcelona\nDepartament de F\u0131\u0301sica Aplicada i \u00d2ptica\nMart\u0131\u0301 i Franqu\u00e8s 1, 08028 Barcelona, Spain\n\nAbstract\nThis work presents an application that generates real-time holograms to be displayed on a holographic optical tweezers setup; a technique that allows the manipulation of particles in the range from micrometres to nanometres. The software\nis written in Java, and uses random binary masks to generate the holograms. It\nallows customization of several parameters that are dependent on the experimental\nsetup, such as the specific characteristics of the device displaying the hologram,\nor the presence of aberrations. We evaluate the software's performance and conclude that real-time interaction is achieved. We give our experimental results from\nmanipulating 5 \u03bcm microspheres using the program.\nKey words: Optical tweezers, Interactive manipulation, Digital Holography,\nSpatial Light Modulators\nPACS: 87.80.Cc, 87.80.y, 42.40.Jv, 42.79.Kr\n\nPROGRAM SUMMARY\nTitle of program: HoloTrap\nComputer for which the program is designed and others on which it has been\ntested: General computer\nOperating systems or monitors under which the program has been tested:\nWindows, Linux\nProgramming language used: Java\nMemory required to execute with typical data: up to 34 Mb including the\nJava Virtual Machine\nNo. of bits in a word:8 bits\nEmail address: encarni.pleguezuelos@ub.edu (E. Pleguezuelos,).\n\nPreprint submitted to Elsevier Science\n\n2 February 2008\n\n\fNo. of processors used: 1\nHas the code been vectorized or parallelized?: No\nNo. of bytes in distributed program, including test data, etc.: 1118 KB\nDistribution format: jar file\nNature of physical problem: To calculate and display holograms for\ngenerating multiple and dynamic optical tweezers to be reconfigured\ninteractively\nMethod of solution: Fast random binary mask for the simultaneous\ncodification of multiple phase functions into a phase modulation device\nTypical running time: Up to 10 frames per second\nUnusual features of the program: None\nReferences: The method for calculating holograms can be found in [M.\nMontes-Usategui, et al. Opt. Express, 14 (2006) 2101-2107.]\n\n1\n\nIntroduction\n\nIn this paper we describe an application that interactively generates multiple\ndynamic holographic optical tweezers. The program allows the user to compute\nholograms displayed in an optical tweezers setup, resulting in trap patterns\nthat are reconfigurable in real time. Experimental setup factors are application\nparameters resulting in a completely customizable program.\nOptical tweezers are generated by strongly focusing a laser beam, thus creating\nan optical gradient that traps dielectric particles from micrometric samples\ndown to the nanometric scale [1], due to the transfer of light momentum to the\ntrapped particle. This technique has many applications in the manipulation\nof biological samples [2] because it is harmless and the forces involved in\nmolecular and biological processes (which are in the same range as the forces\napplied by optical tweezers -about pN) can be measured.\nHolography allows the synthesis of a light wavefront by spatially modifying\nthe amplitude and phase of the beam [3]. Knowing how light propagates in the\nsetup allows us to determine the relationship between the field amplitudes in\nany two planes along the optical train. In this way, we can calculate the hologram that reconstructs a desired light distribution on another plane. The use\nof digital holography in optical tweezers provides a lot of flexibility in the design of trap patterns. This technique has resulted in the introduction of large\narrays of optical traps and three-dimensional control [4], [5]. Moreover, the\nshape and properties of the beam can be modified to generate non-Gaussian\nbeams such as vortex beams, which are capable of transferring angular momentum to the trapped particle [6], or non-diffracting beams [7].\nSpatial Light Modulators (SLMs), which are used to display digital holograms,\n2\n\n\fallow dynamic, computer-controlled modification of the complex transmittance/ reflectance of the device. The relationship between the sample plane\nand the hologram plane is an inverse Fourier transform, so, in general, the\nhologram is complex. These devices are constrained to display a set of complex transmittance values, so we should limit our hologram values to those\navailable from the modulator. Algorithms have to be designed to find an optimal solution constraining the hologram to the discrete set of values accessible. These algorithms are based on iterative methods [8], [9] or on extensive\nsearch procedures [10]. Both approaches are time consuming and do not allow\nreal-time interaction with the sample, since they cannot be calculated and\ndisplayed as fast as necessary. We recently proposed a method for calculating\nholograms in order to generate optical tweezers. It is based on the random\nmask encoding method for multiplexing phase-only filters [11], and is, to our\nknowledge, the fastest method with 3D control of the trap. This is because it\nis not iterative and the number of operations involved is lower than in other\ndirect methods, such as the gratings and lenses (or prisms and lenses) method\n[12]. Another advantage of the algorithm is that it does not produce the ghost\ntraps or replicas reported in other methods [13].\n\nOther possibilities \u2013such as the generalized phase contrast approach [14] or\ntime sharing of the laser beam\u2013 allow real-time interaction with the sample,\nbut are limited to two-dimensional trap patterns and do not allow generation of non-Gaussian beams. The gratings and lenses method has also been\nused to calculate the desired trap pattern for interactive hologram generation\napplications[15], [16]. It has also been proposed direct programming of the\ngraphics card, allowing a faster update rate [17]. Other applications are designed to be used with their commercial setup and do not allow customization\n[18].\n\nWe present software developed to interact with trapped particles in real time.\nThe application calculates and displays the holograms that generate the trap\npattern according to the user's commands. In section 2 we outline the experimental setup, emphasizing the aspects that have to be taken into account in\nthe software design. The implemented algorithm is explained in section 3. The\ndeveloped application, written in JavaT M 2 Platform Standard Edition 5.0 is\ndetailed in section 4. The sample plane is be visualized on another monitor,\nusing the camera. The camera image can be integrated in the program. We\nshow how to do that in section 4.3. However, the camera driver is proprietary\nand cannot be attached due to licensing restrictions. The performance of the\nsoftware and experimental results are given in section 5.\n3\n\n\f2\n\nHolographic optical tweezers\n\nIn optical trapping, a highly focused laser beam exerts gradient forces on the\nsample. Typically, an inverted microscope is modified to focus the beam, while\nstill being able to image the sample. Figure 1 shows our experimental setup.\nThe laser is a frequency-doubled Nd:YVO4 laser from Viasho Technologies.\nThe laser beam is expanded and collimated before being reflected by the Spatial Light Modulator, a HoloEye LCR-2500. On reflection, the SLM modulates\nthe phase of the wavefront. The beam size is reduced using an auxiliary telescopic system (lenses L1 and L2 in figure 1, to adapt it to cover the whole of\nthe objective's aperture; which is important for stable trapping [1]. The beam\nis fed into the inverted microscope (a Nikon TE2000) through a rear aperture,\nusually used in fluorescence imaging, and focused in the sample plane by the\nmicroscope objective (a Plan Fluor 100X Nikon oil-immersion objective with\nnumerical aperture 1.3).\nIllumination\nSample\nAnalyzer\n\nObjective\n\nMirror\n\nLaser\n\nL1 L2\nTelescope\nCCD\n\nCollimator\nSLM\n\nMirror\n\nMicroscope\n\nPolarizer\n\nFig. 1. Holographic optical tweezers setup\n\nThe sample is placed at the focal plane of the objective, so the relationship\nbetween the device and the sample is an inverse Fourier transform except for\nmultiplicative phase terms that do not affect our discussion [19]:\nH(u, v) =\n\n\u221e\nx\n\n2\u03c0\n\u2212i \u03bbf\n\u2032 (xu+yv)\n\ng(x, y)e\n\ndxdy,\n\n(1)\n\n\u2212\u221e\n\nwhere H(u, v) is the hologram, g(x, y) the trap pattern, \u03bb the wavelength of the\nlight and f \u2032 the focal length of the objective. The wavelength, the telescope, the\nmodulator and the objective determine the scale factor between our sample\nplane and the hologram. This is left as a parameter in the application, as\nexplained in section 4.\nThe introduction of the Spatial Light Modulator allows us to design the shape\nof the beam by spatially modifying the amplitude and phase of the light distribution in the plane where the modulator is placed. There are different kinds\n4\n\n\fof SLM, such as liquid crystal displays (LCDs) in which the grey level sent\nto each pixel of the modulator is translated into a change in amplitude and\nphase of the incident beam at that point, thus achieving spatial control of\nthe light distribution. The modulation also depends on the polarization of the\ninput and output light. It is necessary to know the modulation response for\neach grey level. This can be achieved by characterizing the device modulation\nwith the polarization conditions [20] in which it will be used. The most common configuration is phase-only modulation, which has the least amplitude\nvariation.\nLCDs are unable to modulate the whole complex plane [21]. Figure 2 shows\nthe experimental characterization of the LCD we use, a HoloEye LCR-2500. It\nshows the complex transmittance value that corresponds to each grey level. It\nis almost a phase modulation from 0 to 2\u03c0, although there is a small amplitude\nmodulation. The hologram values have to be built using the available modulation values. To do this, the minimum Euclidean distance between the phase in\neach pixel and the available phase values is calculated, and the nearest phase\nmodulation value is used to display the theoretical hologram value.\n\n1,0\n\nGray levels\n\nImaginary\n\n0,5\n\n0,0\n-1,0\n\n-0,8\n\n-0,6\n\n-0,4\n\n-0,2\n\n0,0\n\n0,2\n\n0,4\n\n0,6\n\n0,8\n\n1,0\n\nReal\n\n-0,5\n\n-1,0\n\nFig. 2. Experimental complex modulation values of the SLM as a function of the\ngray level\n\nTo summarize, our synthesized hologram is a grey-level image that results in\na local modification of the phase of the incident wavefront, and will generate\na given trapping pattern in the focal plane of the objective (where the sample\nis located).\n5\n\n\f3\n\nFast method of hologram calculation\n\nIn order to generate holograms in real time we have to use direct methods of\ncalculation as opposed to iterative methods. Direct methods consist of generating the hologram from analytic solutions, that is, determining analytically\nthe inverse Fourier transform of the trap pattern taking into account that one\nis limited in general to phase functions due to modulation constraints. Holographically we have the ability to set the three-dimensional position of each\ntrap. A trap centred at (a, b) can be described as g(x, y) = \u03b4(x \u2212 a, y \u2212 b). The\nhologram that generates this distribution is its Fourier transform, that is:\nHD (u, v) = F \u22121 (g(x, y)) = exp (i\n\n2\u03c0\n(u * a + v * b)).\n\u03bbf\n\n(2)\n\nIf the trap is focused at a depth z from the focal plane, the required function\nis a quadratic phase term such as:\nHZ (u, v) = exp (i\n\n2\u03c0 2\n(u + v 2 )),\n\u03bbz\n\n(3)\n\nwhose Fourier transform is another quadratic phase function.\nTo generate a vortex, which can transfer angular momentum to the trapped\nparticle [22], the following phase function is needed:\nv\nHV (u, v) = exp (i * l tan\u2212 1( )),\nu\n\n(4)\n\nthis function modifies the wavefront to convert it to a Laguerre-Gaussian\nmode, which carries angular momentum. The quantity l is called the topological charge and is related to the orbital angular momentum of each photon\nby L = l~.\nIn these examples the solution is a pure phase function, so codifying it using phase-only modulation is straightforward: simply choose the closest phase\ngiven by the device. However, if N traps are required, the hologram is a sum\nof as many phases as traps displayed, resulting in a complex function that\ncannot be directly displayed with a phase-only modulation:\nH(u, v) =\n\nN\nX\n\n(HDk + HLk + HV k ) 6= exp (i\u03c6(u, v)).\n\n(5)\n\nk=0\n\nThe method for the codification of the hologram cannot be time-consuming\nif we require it to be implemented in real time. Our approach, more detailed\n6\n\n\fin [11], defines as many different domains Ik of the modulator as traps to be\ndisplayed. Each domain consists of a set of modulator pixels that shows a phase\nfunction. In this way, each set is in charge of generating a single trap. The\nhologram (equation 6) consists in the multiplication of the phase functions,\nHk (u, v), (as in equations 2 and 3) by spatially disjoint binary masks, mk (u, v)\n- the set of pixels of the domains Ik .\n\nH(u, v) =\n\nN\nX\n\nmk (u, v) * Hk (u, v),\n\n(6)\n\nk=0\n\nwhere\nmk (u, v) =\n\n\uf8f1\n\uf8f4\n\uf8f21\n\n\uf8f4\n\uf8f30\n\nif (u, v) \u2208 Ik\nelsewhere.\n\nThe domains Ik do not overlap, and together they cover the whole modulator.\nFor example, we can generate the domains by randomly deciding which pixels\nwill belong to each trap. This is a good choice since the mask that defines\nevery sub-hologram is not a geometric function: the convolution of the shape\nof the trap with the Fourier transform of the mask would result in noise\ndistributed through the resulting plane [11]. As can be seen, the solution is\nas fast as generating the Ik domains each time a trap is added or deleted,\nand computing the arguments of the complex exponentials Hk (u, v) to display\nthe hologram. Figure 3 shows an example of a hologram in which half of the\npixels display a linear phase function and the other half a quadratic phase.\nThe resulting light distribution would be two different traps placed off-centre,\nat two different depths.\n\nFig. 3. Hologram calculated using the random binary masks method\n\nThis method is \u2013to our knowledge\u2013 the fastest way to generate simple trap\npatterns. The most common fast method for the generation of optical tweezers\n(the gratings and lenses method) consists of generating the analytic hologram\n7\n\n\ffrom equation 5 and discarding the amplitude information. This method is\nslower than our random binary masks method because the calculation time\nincreases with the number of traps and requires the computation of trigonometric functions [12]. Due to the discarded amplitude information, the intensity distribution among the traps may be different from that expected.\nAnother advantage of our random binary masks method is that the trap pattern generated does not present replicas [13]. While other methods tend to\nconcentrate the energy not located in the traps in bright spots, resulting in\nfalse traps, the random binary masks method distributes the remaining energy\nin noise, due to the convolution with each random mask. The downside is that\nthe efficiency of the traps is lower than that achieved with other methods.\n\n4\n\nDescription of the program\n\nThe software we present calculates and displays holograms to generate optical tweezers allowing real-time interaction with samples. Each change in the\nnumber or position of the trap requires recalculation of the hologram. The\nprogram responds quickly enough to provide close to video-rate feedback from\nthe sample.\nThe reason for using Java is that development costs are low. Moreover Java\nallows easy generation of the Graphical User Interface (GUI) and easy integration with C++ generated dlls; the most generalized hardware driver distribution method. Another advantage of using Java is simple remote control\nof the experiment over the Internet. If the computer controlling the camera\nacts as a web server, you just have to transform the program generated into\na servlet and use the Remote Method Invocation (RMI) classes.\nThe source code is distributed into three different classes. The first class,\nTRBase, generates the GUI and handles the events related to the input parameters. It also initiates the second class, PanelCoord, the panel in which the\nuser clicks and drags to generate and move a trap, and so this class monitors\nthese mouse events and calls to the third class, FrameHolo. This third class\ncalculates and displays the hologram using the mouse coordinates and the\ninput parameters. The documentation of the application, in which the different classes and implemented methods are detailed, can be found in the folder\n/html zipped within the application jar file. This documentation can be also\nfound in our website [23].\n8\n\n\f4.1 Graphical User Interface\n\nA screen capture of the GUI can be found in figure 4. This program allows\nuser control of several variables and initial data:\n\u2022 The hologram size, in pixels. If the size is set to 1024\u00d7768, which is our\nSLM full resolution, the hologram is calculated with half the number of and\nzoomed to fill the modulator, reducing computation time.\n\u2022 The scale factor between the Spatial Light Modulator plane and the visualization plane. The scale can be modified by changing the Row and Column\nfactors. This scale factor can be found experimentally, or deduced from the\ndifferent experimental parameters: telescope, SLM, objective, and field of\nview [24].\n\u2022 The Init button asks for a file containing a precalculated map of the phase\nmodulation and a phase aberration correction (see section 4.2). In our case,\nthe aberration is a distortion of the wavefront due to the curvature of the\nmodulator surface. There is an example of a phase-only function map and\na null aberration correction attached in the .jar file to check the required\nformat. To run the application using these two ideal condition files, after\npressing the Init button, just press OK on the dialog box \"Use the default\naberration and modulation files\". Each time a hologram is generated, the\ncorrection is added and then the nearest grey value is assigned using the\nprecalculated map.\n\u2022 A selector allows you to choose the manipulated trap if more than one trap\nis generated. The selected trap is indicated by a red circle, whereas the\nunselected traps are in green.\n\u2022 A slider allows you to modify the trap depth, from -5\u03bcm to 5\u03bcm. The\n\"Depth Factor\" text field allows you to modify the available depth range.\n\u2022 By changing the integer in the \"lvortex\" text field (see figure 4) an optical\nvortex carrying angular momentum is generated by adding a vortex phase\nfunction (equation 4) with the specified topological charge.\n\u2022 The Delete trap button deletes the selected trap. This involves a reconfiguration of the random binary masks, which have to be recalculated.\n\u2022 The hologram is calculated by the method selected in the Radio Button.\nThe default calculation method is random binary masks, but gratings and\nlenses is also available.\n\n4.2 Calculating and displaying a hologram\n\nThis section details the computational process of generating a hologram, see\nfigure 5. First, the application is initiated and the user enters the desired parameters (such as hologram size or scale factors). The central panel in the ap9\n\n\fFig. 4. Application user interface\n\nplication controls the event handling of the user interaction. When the mouse\nis clicked on the panel, the mouse coordinates are obtained. The random mask\nis calculated, resulting in the whole modulator, because there is one single trap\nin this first step. With the mouse coordinates, a phase grating corresponding\nto the trap is calculated (equation 2) and the hologram is displayed. Each time\nanother trap is added, the random binary masks have to be calculated and\nthen each set of pixels show the corresponding phase function. If the mouse\nis dragged or the depth slider is moved, the coordinates of the selected trap\nchange. A change in the coordinates of a single trap means that only the pixels\nof the mask corresponding to that trap have to be recalculated.\nTo generate traps in real time, the algorithm has to be fast, but there are\nalso other considerations that affect the performance of the process. We have\noptimized the process of adaptation of the hologram to the modulation values\nby generating a map of the correspondence between all the possible phase\nvalues between 0 and 2\u03c0 and the nearest phase given by a grey level. In\ngeneral this is not a linear relationship. The phase value assigned to each grey\nlevel is stored in a file that the program reads as an initial parameter. An\nexample of an ideal phase assignment can be found in the map ideal.txt file\ndistributed in the jar. Once the analytical phase value is calculated, the map\nprovides the grey level to be displayed. An incorrect assignment can cause\nvariations in the reconstructed trap pattern.\nAnother experimental issue that affects the calculation time is the possible existence of aberrations in the optical system, which can be corrected with the\nSLM when generating the trap pattern. In our case, the modulator reflected\nwavefront is distorted because the device is not flat. We can correct this aber10\n\n\fInit\napplication\n\nEnter\nparameters\n\non mouse\nclicked\n\nGet mouse\ncoordinates\n\nGenerate\nrandom mask\n\nMove trap\n\non mouse\ndragged\n\nAdd new trap\n\nCalculate\nhologram based\non coordinates\n\nDisplay\nhologram\n\nGet mouse\ncoordinates\n\non mouse\nclicked\nGet mouse\ncoordinates\n\nFig. 5. Program Flowchart\n\nration by adding a fixed phase pattern to each hologram. As an example, the\nfile phaberr 1024x768.txt is a null aberration correction attached in the jar\nfile, that shows the format of the aberration file for the specified hologram\nsize.\nIn order to ensure a fast response of the displayed hologram, two main factors have to be taken into account. First, the hologram generation has to be\nas fast as possible, including algorithm calculation, addition of the aberration correction and adaptation to the modulation. Second, speed of access to\nthe graphic hardware has to be ensured. Our approach is to take advantage\nof the V olatileImage class in the Java SDK. The hologram is stored as a\nhardware-accelerated off-screen image, in such a way that rendering operations are accelerated through the graphics card. Thus, hologram is displayed\nwithout using the CPU. This class parallelizes the display of the hologram\nand the calculation processes, with the CPU performing the calculation.\n\n4.3 Camera control\nThe image of the sample can be displayed on another monitor to control manipulation. Our program is enhanced if the camera image is incorporated into\nthe interactive interface, although it can be used with the image separated\n11\n\n\ffrom it. In this section we explain how we integrated our video stream management, as a guide for users on how to embed their own. We used a QICam\nFast 1934 from QImaging Corp. [25] camera. It is not compliant with the\nIIDC Digital Camera Specification (DCAM), which is the standard protocol\nFireWire cameras should follow, so the SDK provided by the manufacturer had\nto be used. This is a drawback to distributing the camera-integrated version\nof the program, and so a version without a camera accompanies the paper. If\na DCAM-compliant camera is used, the Java API for FireWire jlibdc1394 [26]\ncan be incorporated into the program instead of the camera SDK, making it\nsuitable for all DCAM-compliant cameras.\nThe Qimaging libraries have to be used with a C++ compiler, so the Java\nNative Interface (JNI) class [27] is needed to embed the camera library into\nthe Java structure. JNI is a common trick for gaining compatibility with native\nmethods across a Java virtual machine. We need the following native functions:\npublic\npublic\npublic\npublic\n\nnative int initCamera(); (Detects the camera)\nnative int initGrab(); (Initiates the recording)\nnative int doGrab(byte[] pix); (Saves the image into a pixel array)\nnative int StopGrab(); (Stops recording)\n\nEach native Java method has its corresponding function in C++. The process\nof calling from a Java program code contained in the proprietary library is\n[27]:\n- Declaration of the native methods in the Java application, in our case the\nmethods listed above.\n- The loading of the library containing the native code implementation, by\ncalling the function System.load(\"JNIQCam.dll\"), where 'JNIQCam.dll' is\nour generated library name (even it does not exist yet). The Java application\nhas to be compiled at this point without being executed. This library is not\nthe proprietary library, but one generated by the user, defining what each\nnative method does.\n- Generation of the header (.h) file that contains the interface assigning the\nJava methods to the C native functions. As an example, the functions are\ndefined in this header as:\nJNIEXPORT jint JNICALL Java initCamera(JNIEnv *, jobject);\nJNIEXPORT jint JNICALL Java initGrab(JNIEnv *, jobject);\nJNIEXPORT jint JNICALL Java doGrab(JNIEnv *, jobject, jbyteArray);\nJNIEXPORT jint JNICALL Java StopGrab(JNIEnv *, jobject);\nThis file is the communication channel between the two languages.\n- Creation of the C++ functions. The library (JNIQCam.dll) has to contain\nthe C++ source calling to the camera library. As an example, our C++\nmethod that disconnects the camera is:\n12\n\n\fJNIEXPORT jint JNICALL Java tr StopGrab(JNIEnv *, jobject){\ndelete [] pixels;\nif(hCamera != NULL)\n{\nQCam CloseCamera( hCamera );\n}\nQCam ReleaseDriver();\nreturn 0;\n}\nIn this example we free the image memory through the delete order. The\ncalling to CloseCamera(hCamera) frees the hCamera object, hCamera is\nthe object initiated in the method initCamera, which contains the camera\nproperties and prevents other applications accessing the camera. Next, the\ncamera driver is released with the command ReleaseDriver().\n- Compilation and execution of the code.\nIf the user had the same camera, a .dll file should be generated and the commented lines in the .java source, marked as \"//Comment if there is no QICam\navailable\", should be uncommented.\n\n5\n\nPerformance of the software\n\nFigure 4 shows a screen capture of the program. The tests were carried out\non a Pentium IV HT, 3.2 Ghz, with lite versions of the program, where not\nall the options were available. These lite versions can be obtained from our\nwebsite [23].\nThe speed of the software when generating holograms in response to a mouse\ndrag is about 10 fps (frames per second). This value measures the number of\nholograms displayed per second on the modulator. The full resolution sized\nholograms are achieved by calculating holograms of 512\u00d7384 pixels and resizing them into 1024\u00d7768 pixels. The adaptation mapping that we have created\nfrom the experimental phase modulation values does not affect the speed of\nthe hologram generation. In contrast, the inclusion of the aberration correction affects slightly the performance by decreasing the hologram calculation\nspeed. The time response does not increase with the number of traps, because\nthe number of pixels the phases have to be computed for (the number of pixels\ndefining each mask) decreases as the number of traps increases.\nFigure 6 shows screen shots of experimental manipulation of polystyrene beads\nof 5\u03bcm diameter. A first microsphere is captured and dragged close to another,\nwhich is trapped and moved with a second trap.\n13\n\n\f(a)\n\n(b)\n\n(c)\nFig. 6. Screen shots showing the experimental manipulation of polystyrene beads,\n5\u03bcm diameter\n\n6\n\nConcluding remarks\n\nWe have presented an application for calculating and displaying holograms in\nreal time to generate multiple reconfigurable optical tweezers. The application allows the user to generate, delete or modify optical traps interactively.\nWe used the random binary masks method because of its speed. The software takes into account different parameters given by the experimental setup,\n14\n\n\fand so it is not limited to a single configuration. The different options have\nbeen detailed, including the adaptation to the modulation and the correction\nof possible aberrations. The scale factor and the hologram size can also be\nmodified. Some strategies for accelerating hologram calculation and display\nare explained. A second version of the program takes advantage of the proprietary libraries of the camera used in order to embed the image provided by\nthe camera and the program. The viability of the software is comparable to\nthat of other applications in the literature. We include an example of optical\nmanipulation using this program. In future work we would like to make the\nsoftware compatible with IICAM-compliant FireWire cameras.\nACKNOWLEDGMENTS\nThis work has been funded by the Spanish Ministry of Education and Science,\nunder grants FIS2004-03450 and NAN2004-09348-C04-03.\n\nReferences\n[1] A. Ashkin, Optical trapping and manipulation of neutral particles using lasers,\nProc. Natl. Acad. Sci. USA, 94 (1997) 4853-4860.\n[2] K. C. Neuman and S. M. Block, Optical trapping, Rev. Sci. Instrum., 75, (2004)\n2787-2809.\n[3] R. Tudela, I. Labastida, E. Mart\u0131\u0301n-Badosa, S. Vallmitjana, I. Juvells, and A.\nCarnicer. A simple method for displaying Fresnel holograms on liquid crystal\npanels, Opt. Commun., 214 (2002) 107-114.\n[4] G. Sinclair, P. Jordan, J. Courtial, M. Padgett, J. Cooper, and Z. Laczik,\nAssembly of 3-dimensional structures using programmable holographic optical\ntweezers, Opt. Express, 12 (2004) 5475-5480.\n[5] Y. Roichman and D. Grier, Holographic assembly of quasicrystalline photonic\nheterostructures, Opt. Express, 13 (2005) 5434-5439.\n[6] P. Prentice, M. MacDonald, T. Frank, A. Cuschier, G. Spalding, W. Sibbett, P.\nCampbell, and K. Dholakia. Manipulation and filtration of low index particles\nwith holographic Laguerre-Gaussian optical trap arrays. Opt. Express, 12 (2004)\n593-600.\n[7] S. H. Tao, X.-C. Yuan and B. S. Ahluwalia. The generation of an array of\nnondiffracting beams by a single composite computer generated hologram. J.\nOpt. A.: Pure Appl.Opt. 7 (2005) 40-46.\n[8] R. W. Gerchberg and W. O. Saxton, A practical algorithm for the determination\nof the phase from image and diffraction plane pictures, Optik, 35 (1972) 237246.\n\n15\n\n\f[9] V. Soifer, V. Kotlyar, and L. Doskolovich, Iterative Methods for Diffractive\nOptical Elements Computation (Taylor & Francis Ltd, London, 1997).\n[10] M. A. Seldowitz, J. P. Allebach, and D. W. Sweeney, Synthesis of digital\nholograms by direct binary search, App. Opt., 26 (1987) 2788-2798.\n[11] M. Montes-Usategui, E. Pleguezuelos, J. Andilla, and E. Mart\u0131\u0301n-Badosa, Fast\ngeneration of holographic optical tweezers by random mask encoding of Fourier\ncomponents. Opt. Express, 14 (2006) 2101-2107.\n[12] J. Liesener, M. Reicherter, T. Haist and H. J. Tiziani, Multi-functional optical\ntweezers using computer-generated hologram, Opt. Comm., 185 (2000) 77-82.\n[13] M. Polin, K. Ladavac, S.-H. Lee, Y. Roichman and D. Grier, Optimized\nholographic optical traps, Opt. Express, 19 (2005) 5831-5845.\n[14] P. Rodrigo, V. Daria, and J. Glckstad. Real-time interactive optical\nmicromanipulation of a mixture of high-and low-index particles. Opt. Express,\n12 (2004) 1417-1425.\n[15] J. Leach, K. Wulff, G. Sinclair, P. Jordan, J. Courtial, L. Thomson, G. Gibson,\nK. Karunwi, J. Cooper, ZJ. Laczik, M. Padgett. Interactive approach to optical\ntweezers control. Appl. Opt., 10 (2006) 897-903.\n[16] G. Whyte, G. Gibson, J. Leach and M. Padgett. An optical trapped microhand\nfor manipulating micron-sized objects. Opt. Express, 14 (2006) 12497-12502.\n[17] M. Reicherter, S. Zwick, T. Haist, C. Kohler, H. Tiziani and W. Osten. Fast\ndigital hologram generation and adaptative force measurement in liquid-crystaldisplay-based holographic tweezers. Appl. Opt., 45 (2006) 888-896.\n[18] BioRyx R 200 http://www.arryx.com/bioryxsoftware.html\n[19] J. W. Goodman, Introduction to Fourier Optics (McGraw-Hill, 1996).\n[20] E. Mart\u0131\u0301n-Badosa, A. Carnicer, I. Juvells, and S. Vallmitjana, Complex\nmodulation characterization of liquid crystal devices by interferometric data\ncorrelation, Meas. Sci. Technol., 8 (1997) 764-772.\n[21] R. Tudela, E. Mart\u0131\u0301n-Badosa, I. Labastida, S. Vallmitjana, I. Juvells, and A.\nCarnicer. Full complex Fresnel holograms displayed on liquid crystal devices, J.\nOpt. A: Pure Appl. Opt., 5 (2003) S189-S194.\n[22] J. E. Curtis, B. A. Koss and D. G. Grier, Dynamic holographic optical tweezers,\nOptic Communications, 207 (2002) 169-175.\n[23] Holotrap documentation http://www.ub.edu/optics/holotrap\n[24] E. Mart\u0131\u0301n-Badosa, M. Montes-Usategui, A. Carnicer, J. Andilla, E. Pleguezuelos\nand I. Juvells, Design strategies for optimizing holographic optical tweezers\nsetups. Submitted to JOPA, available at http://arxiv.org/abs/physics/0701037\n[25] Qimaging Coorporation, http://www.qimaging.com/\n\n16\n\n\f[26] Java API for FireWire, http://jlibdc1394.sourceforge.net/\n[27] Java Native Interface,\nhttp://java.sun.com/j2se/1.4.2/docs/guide/jni/index.html\n\n17\n\n\f"}