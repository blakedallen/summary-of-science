{"id": "http://arxiv.org/abs/nlin/0505009v3", "guidislink": true, "updated": "2006-02-09T22:09:59Z", "updated_parsed": [2006, 2, 9, 22, 9, 59, 3, 40, 0], "published": "2005-05-03T19:23:35Z", "published_parsed": [2005, 5, 3, 19, 23, 35, 1, 123, 0], "title": "A General Methodology for Designing Self-Organizing Systems", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=nlin%2F0405060%2Cnlin%2F0405063%2Cnlin%2F0405025%2Cnlin%2F0405042%2Cnlin%2F0405049%2Cnlin%2F0405003%2Cnlin%2F0405010%2Cnlin%2F0405053%2Cnlin%2F0405026%2Cnlin%2F0405031%2Cnlin%2F0405030%2Cnlin%2F0405047%2Cnlin%2F0405055%2Cnlin%2F0405005%2Cnlin%2F0405018%2Cnlin%2F0405002%2Cnlin%2F0405019%2Cnlin%2F0405058%2Cnlin%2F0405036%2Cnlin%2F0405032%2Cnlin%2F0405051%2Cnlin%2F0405020%2Cnlin%2F0405008%2Cnlin%2F0405056%2Cnlin%2F0405016%2Cnlin%2F0405039%2Cnlin%2F0405022%2Cnlin%2F0405054%2Cnlin%2F0405033%2Cnlin%2F0405069%2Cnlin%2F0405048%2Cnlin%2F0405013%2Cnlin%2F0405015%2Cnlin%2F0405040%2Cnlin%2F0405023%2Cnlin%2F0405052%2Cnlin%2F0405014%2Cnlin%2F0405012%2Cnlin%2F0405024%2Cnlin%2F0405065%2Cnlin%2F0405037%2Cnlin%2F0405006%2Cnlin%2F0405045%2Cnlin%2F0405001%2Cnlin%2F0405027%2Cnlin%2F0405021%2Cnlin%2F0405011%2Cnlin%2F0405059%2Cnlin%2F0405057%2Cnlin%2F0405044%2Cnlin%2F0405043%2Cnlin%2F0405066%2Cnlin%2F0405068%2Cnlin%2F0405009%2Cnlin%2F0505046%2Cnlin%2F0505037%2Cnlin%2F0505019%2Cnlin%2F0505013%2Cnlin%2F0505026%2Cnlin%2F0505018%2Cnlin%2F0505007%2Cnlin%2F0505023%2Cnlin%2F0505014%2Cnlin%2F0505024%2Cnlin%2F0505053%2Cnlin%2F0505001%2Cnlin%2F0505059%2Cnlin%2F0505032%2Cnlin%2F0505002%2Cnlin%2F0505040%2Cnlin%2F0505009%2Cnlin%2F0505049%2Cnlin%2F0505008%2Cnlin%2F0505042%2Cnlin%2F0505029%2Cnlin%2F0505034%2Cnlin%2F0505039%2Cnlin%2F0505041%2Cnlin%2F0505045%2Cnlin%2F0505010%2Cnlin%2F0505036%2Cnlin%2F0505048%2Cnlin%2F0505016%2Cnlin%2F0505056%2Cnlin%2F0505043%2Cnlin%2F0505058%2Cnlin%2F0505054%2Cnlin%2F0505006%2Cnlin%2F0505015%2Cnlin%2F0505025%2Cnlin%2F0505031%2Cnlin%2F0505021%2Cnlin%2F0505052%2Cnlin%2F0505030%2Cnlin%2F0505055%2Cnlin%2F0505004%2Cnlin%2F0505011%2Cnlin%2F0505028%2Cnlin%2F0505020%2Cnlin%2F0505003%2Cnlin%2F0505044&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "A General Methodology for Designing Self-Organizing Systems"}, "summary": "Our technologies complexify our environments. Thus, new technologies need to\ndeal with more and more complexity. Several efforts have been made to deal with\nthis complexity using the concept of self-organization. However, in order to\npromote its use and understanding, we must first have a pragmatic understanding\nof complexity and self-organization. This paper presents a conceptual framework\nfor speaking about self-organizing systems. The aim is to provide a methodology\nuseful for designing and controlling systems developed to solve complex\nproblems. First, practical notions of complexity and self-organization are\ngiven. Then, starting from the agent metaphor, a conceptual framework is\npresented. This provides formal ways of speaking about \"satisfaction\" of\nelements and systems. The main premise of the methodology claims that reducing\nthe \"friction\" or \"interference\" of interactions between elements of a system\nwill result in a higher \"satisfaction\" of the system, i.e. better performance.\nThe methodology discusses different ways in which this can be achieved. A case\nstudy on self-organizing traffic lights illustrates the ideas presented in the\npaper.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=nlin%2F0405060%2Cnlin%2F0405063%2Cnlin%2F0405025%2Cnlin%2F0405042%2Cnlin%2F0405049%2Cnlin%2F0405003%2Cnlin%2F0405010%2Cnlin%2F0405053%2Cnlin%2F0405026%2Cnlin%2F0405031%2Cnlin%2F0405030%2Cnlin%2F0405047%2Cnlin%2F0405055%2Cnlin%2F0405005%2Cnlin%2F0405018%2Cnlin%2F0405002%2Cnlin%2F0405019%2Cnlin%2F0405058%2Cnlin%2F0405036%2Cnlin%2F0405032%2Cnlin%2F0405051%2Cnlin%2F0405020%2Cnlin%2F0405008%2Cnlin%2F0405056%2Cnlin%2F0405016%2Cnlin%2F0405039%2Cnlin%2F0405022%2Cnlin%2F0405054%2Cnlin%2F0405033%2Cnlin%2F0405069%2Cnlin%2F0405048%2Cnlin%2F0405013%2Cnlin%2F0405015%2Cnlin%2F0405040%2Cnlin%2F0405023%2Cnlin%2F0405052%2Cnlin%2F0405014%2Cnlin%2F0405012%2Cnlin%2F0405024%2Cnlin%2F0405065%2Cnlin%2F0405037%2Cnlin%2F0405006%2Cnlin%2F0405045%2Cnlin%2F0405001%2Cnlin%2F0405027%2Cnlin%2F0405021%2Cnlin%2F0405011%2Cnlin%2F0405059%2Cnlin%2F0405057%2Cnlin%2F0405044%2Cnlin%2F0405043%2Cnlin%2F0405066%2Cnlin%2F0405068%2Cnlin%2F0405009%2Cnlin%2F0505046%2Cnlin%2F0505037%2Cnlin%2F0505019%2Cnlin%2F0505013%2Cnlin%2F0505026%2Cnlin%2F0505018%2Cnlin%2F0505007%2Cnlin%2F0505023%2Cnlin%2F0505014%2Cnlin%2F0505024%2Cnlin%2F0505053%2Cnlin%2F0505001%2Cnlin%2F0505059%2Cnlin%2F0505032%2Cnlin%2F0505002%2Cnlin%2F0505040%2Cnlin%2F0505009%2Cnlin%2F0505049%2Cnlin%2F0505008%2Cnlin%2F0505042%2Cnlin%2F0505029%2Cnlin%2F0505034%2Cnlin%2F0505039%2Cnlin%2F0505041%2Cnlin%2F0505045%2Cnlin%2F0505010%2Cnlin%2F0505036%2Cnlin%2F0505048%2Cnlin%2F0505016%2Cnlin%2F0505056%2Cnlin%2F0505043%2Cnlin%2F0505058%2Cnlin%2F0505054%2Cnlin%2F0505006%2Cnlin%2F0505015%2Cnlin%2F0505025%2Cnlin%2F0505031%2Cnlin%2F0505021%2Cnlin%2F0505052%2Cnlin%2F0505030%2Cnlin%2F0505055%2Cnlin%2F0505004%2Cnlin%2F0505011%2Cnlin%2F0505028%2Cnlin%2F0505020%2Cnlin%2F0505003%2Cnlin%2F0505044&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Our technologies complexify our environments. Thus, new technologies need to\ndeal with more and more complexity. Several efforts have been made to deal with\nthis complexity using the concept of self-organization. However, in order to\npromote its use and understanding, we must first have a pragmatic understanding\nof complexity and self-organization. This paper presents a conceptual framework\nfor speaking about self-organizing systems. The aim is to provide a methodology\nuseful for designing and controlling systems developed to solve complex\nproblems. First, practical notions of complexity and self-organization are\ngiven. Then, starting from the agent metaphor, a conceptual framework is\npresented. This provides formal ways of speaking about \"satisfaction\" of\nelements and systems. The main premise of the methodology claims that reducing\nthe \"friction\" or \"interference\" of interactions between elements of a system\nwill result in a higher \"satisfaction\" of the system, i.e. better performance.\nThe methodology discusses different ways in which this can be achieved. A case\nstudy on self-organizing traffic lights illustrates the ideas presented in the\npaper."}, "authors": ["Carlos Gershenson"], "author_detail": {"name": "Carlos Gershenson"}, "author": "Carlos Gershenson", "arxiv_comment": "Related work at http://homepages.vub.ac.be/~cgershen/sos/", "links": [{"href": "http://arxiv.org/abs/nlin/0505009v3", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/nlin/0505009v3", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "nlin.AO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "nlin.AO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.GL", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.SE", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "physics.soc-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/nlin/0505009v3", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/nlin/0505009v3", "journal_reference": null, "doi": null, "fulltext": "A General Methodology for Designing\nSelf-Organizing Systems\n\narXiv:nlin/0505009v3 [nlin.AO] 9 Feb 2006\n\nCARLOS GERSHENSON\nVrije Universiteit Brussel\n\nOur technologies complexify our environments. Thus, new technologies need to deal with more and\nmore complexity. Several efforts have been made to deal with this complexity using the concept\nof self-organization. However, in order to promote its use and understanding, we must first have\na pragmatic understanding of complexity and self-organization. This paper presents a conceptual\nframework for speaking about self-organizing systems. The aim is to provide a methodology\nuseful for designing and controlling systems developed to solve complex problems. First, practical\nnotions of complexity and self-organization are given. Then, starting from the agent metaphor, a\nconceptual framework is presented. This provides formal ways of speaking about \"satisfaction\" of\nelements and systems. The main premise of the methodology claims that reducing the \"friction\"\nor \"interference\" of interactions between elements of a system will result in a higher \"satisfaction\"\nof the system, i.e. better performance. The methodology discusses different ways in which this\ncan be achieved. A case study on self-organizing traffic lights illustrates the ideas presented in\nthe paper.\nCategories and Subject Descriptors: D.2.10 [Software Engineering]: Design-methodologies;\nI.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-multiagent systems\nGeneral Terms: Design\nAdditional Key Words and Phrases: complexity, control, self-organization\n\n1. INTRODUCTION\nOver the last half a century, much research in different areas has employed selforganizing systems to solve complex problems, e.g. [Ashby 1956; Beer 1966; Bonabeau\net al. 1999; Di Marzo Serugendo et al. 2004; Zambonelli and Rana 2005]. Recently,\nparticular methodologies using the concepts of self-organization have been proposed\nin different areas, such as software engineering [Wooldridge et al. 2000; Zambonelli\net al. 2003], electrical engineering [Ramamoorthy et al. 1993], and collaborative\nsupport [Jones et al. 1994]. However, there is as yet no general framework for constructing self-organizing systems. Different vocabularies are used in different areas,\nand with different goals. In this paper, I present an attempt to develop a general\nmethodology that will be useful for designing and controlling complex systems [BarYam 1997]. The proposed methodology, as with any methodology, does not provide\nready-made solutions to problems. Rather, it provides a conceptual framework, a\nlanguage, to assist the solution of problems. Also, many current problem solutions\ncan be described as proposed. I am not suggesting new solutions, but an alternative\nway of thinking about them.\nAs an example, many standardization efforts have been advanced in recent years,\n\nAuthor's address: Krijgskundestraat 33 B-1160 Brussel, Belgium\ncgershen@vub.ac.be http://homepages.vub.ac.be/ \u0303cgershen\nACM Journal Name, Vol. V, No. N, M 20YY, Pages 1\u20130??.\n\n\f2\n\n*\n\nCarlos Gershenson\n\nsuch as ontologies required for the Semantic Web [Berners-Lee et al. 2001], or FIPA\nstandards. I am not insinuating that standards are not necessary. Without them\nengineering would be chaos. But as they are now, they cannot predict future\nrequirements. They are developed with a static frame of mind. They are not\nadaptive. What this work suggests is a way of introducing the expectation of change\ninto the development process to be able to cope with the unexpected beforehand,\nin problem domains where this is desired.\nThe paper is organized as follows: in the next section, notions of complexity\nand self-organization are discussed. In Section 3, original concepts are presented.\nThese will be used in the Methodology, exposed in Section 4. In Section 5, a case\nstudy concerning self-organizing traffic lights is used to illustrate the steps of the\nMethodology. Discussion and conclusions follow in Sections 6 and 7.\n2. COMPLEXITY AND SELF-ORGANIZATION\nThere is no general definition of complexity, since the concept achieves different\nmeanings in different contexts [Edmonds 1999]. Still, we can say that a system\nis complex if it consists of several interacting elements [Simon 1996], so that the\nbehavior of the system will be difficult to deduce from the behavior of the parts.\nThis occurs when there are many parts, and/or when there are many interactions\nbetween the parts. Typical examples of complex systems are a living cell, a society,\nan economy, an ecosystem, the Internet, the weather, a brain, and a city. These\nall consist of numerous elements whose interactions produce a global behavior that\ncannot be reduced to the behavior of their separate components [Gershenson and\nHeylighen 2005]. For example, a cell is considered a living system, but the elements\nthat conform it are not alive. The properties of life arise from the complex dynamical interactions of the components. The properties of a system that are not present\nat the lower level (such as life), but are a product of the interactions of elements,\nare sometimes called emergent [Anderson 1972]. Another example can be seen with\ngold: it has properties, such as temperature, malleability, conductivity, and color,\nthat emerge from the interactions of the gold atoms, since atoms do not have these\nproperties.\nEven when there is no general definition or measure of complexity, a relative\nnotion of complexity can be useful:\nNotion 2.1. The complexity of a system scales with the number of its elements,\nthe number of interactions between them, the complexities of the elements, and the\ncomplexities of the interactions [Gershenson 2002]:1\nCsys \u223c #E#I\n\n#E\nX\nj=0\n\nCej\n\n#I\nX\n\nCik\n\n(1)\n\nk=0\n\nThe complexity on an interaction Ci can be measured as the number of different\npossible interactions two elements can have.2\n1 This\n\ncan be confirmed mathematically in certain systems. As a general example, random Boolean\nnetworks [Kauffman 1969; 1993; Gershenson 2004b] show clearly that the complexity of the network increases with the number of elements and the number of interactions.\n2 Certainly, the number of possible interactions for certain elements is impossible to enumerate or\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n3\n\nThe problem of a strict definition of complexity lies in the fact that there is\nno way of drawing a line between simple and complex systems independently of a\ncontext. For example, the dynamics of a system can be simple (ordered), complex,\nor chaotic, having a complex structure. Cellular automata and random Boolean\nnetworks are a clear example of this, where moreover, the interactions of their\ncomponents are quite simple. On the other hand, a structurally simple system\ncan have complex and chaotic dynamics. For this case, the damped pendulum is\na common example. Nevertheless, for practical purposes, the above notion will\nsuffice, since it allows the comparison of the complexity of one system with another\nunder a common frame of reference. Notice that the notion is recursive, so a basic\nlevel needs to be set contextually for comparing two systems.\nThe term self-organization has been used in different areas with different meanings, as is cybernetics [von Foerster 1960; Ashby 1962], thermodynamics [Nicolis\nand Prigogine 1977], biology [Camazine et al. 2003], mathematics [Lendaris 1964],\ncomputing [Heylighen and Gershenson 2003], information theory [Shalizi 2001], synergetics [Haken 1981], and others [Sk\u00e5r and Coveney 2003] (for a general overview,\nsee [Heylighen 2003b]). However, the use of the term is subtle, since any dynamical\nsystem can be said to be self-organizing or not, depending partly on the observer\n[Gershenson and Heylighen 2003; Ashby 1962]: If we decide to call a \"preferred\"\nstate or set of states (i.e. attractor) of a system \"organized\", then the dynamics\nwill lead to a self-organization of the system.\nIt is not necessary to enter into a philosophical debate on the theoretical aspects\nof self-organization to work with it, so a practical notion will suffice:\nNotion 2.2. A system described as self-organizing is one in which elements interact in order to achieve dynamically a global function or behavior.\nThis function or behavior is not imposed by one single or a few elements, nor\ndetermined hierarchically. It is achieved autonomously as the elements interact\nwith one another. These interactions produce feedbacks that regulate the system.\nAll the previously mentioned examples of complex systems fulfill the definition of\nself-organization. More precisely, the question can be formulated as follows: when\nis it useful to describe a system as self-organizing? This will be when the system\nor environment is very dynamic and/or unpredictable. If we want the system to\nsolve a problem, it is useful to describe a complex system as self-organizing when\nthe \"solution\" is not known beforehand and/or is changing constantly. Then, the\nsolution is dynamically strived for by the elements of the system. In this way,\nsystems can adapt quickly to unforeseen changes as elements interact locally. In\ntheory, a centralized approach could also solve the problem, but in practice such\nan approach would require too much time to compute the solution and would not\nbe able to keep the pace with the changes in the system and its environment.\nIn engineering, a self-organizing system would be one in which elements are designed in order to solve dynamically a problem or perform a function at the system\nlevel. Thus, the elements need to divide, but also integrate, the problem. For example, the parts of a car are designed to perform a function at the system level: to\ndrive. However, the parts of a (normal) car do not change their behavior in time,\nmeasure.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f4\n\n*\n\nCarlos Gershenson\n\nso it might be redundant to call a car self-organizing. On the other hand, a swarm\nof robots [Dorigo et al. 2004] will be conveniently described as self-organizing, since\neach element of the swarm can change its behavior depending on the current situation. It should be noted that all engineered self-organizing systems are to a certain\ndegree autonomous, since part of their actual behavior will not be determined by a\ndesigner.\nIn order to understand self-organizing systems, two or more levels of abstraction\n[Gershenson 2002] should be considered: elements (lower level) organize in a system\n(higher level), which can in turn organize with other systems to form a larger system\n(even higher level). The understanding of the system's behavior will come from the\nrelations observed between the descriptions at different levels. Note that the levels,\nand therefore also the terminology, can change according to the interests of the\nobserver. For example, in some circumstances, it might be useful to refer to cells\nas elements (e.g. bacterial colonies); in others, as systems (e.g. genetic regulation);\nand in others still, as systems coordinating with other systems (e.g. morphogenesis).\nA system can cope with an unpredictable environment autonomously using different but closely related approaches:\n-Adaptation (learning, evolution) [Holland 1995]. The system changes its behavior to cope with the change.\n-Anticipation (cognition) [Rosen 1985]. The system predicts a change to cope\nwith, and adjusts its behavior accordingly. This is a special case of adaptation,\nwhere the system does not require to experience a situation before responding to\nit.\n-Robustness [von Neumann 1956; Jen 2005]. A system is robust if it continues\nto function in the face of perturbations [Wagner 2005]. This can be achieved with\nmodularity [Simon 1996; Watson 2002], degeneracy [Fern\u00e1ndez and Sol\u00e9 2004],\ndistributed robustness [Wagner 2004], or redundancy [Gershenson et al. 2006].\nSuccessful self-organizing systems will use combinations of the these approaches to\nmaintain their integrity in a changing and unexpected environment. Adaptation\nwill enable the system to modify itself to \"fit\" better within the environment.\nRobustness will allow the system to withstand changes without losing its function\nor purpose, and thus allowing it to adapt. Anticipation will prepare the system for\nchanges before these occur, adapting the system without it being perturbed. We can\nsee that all of them should be taken into account while engineering self-organizing\nsystems.\nIn the following section, further concepts will be introduced that will be necessary\nto apply the methodology .\n3. THE CONCEPTUAL FRAMEWORK\nElements of a complex system interact with each other. The actions of one element\ntherefore affect other elements, directly or indirectly. For example, an animal can\nkill another animal directly, or indirectly cause its starvation by consuming its\nresources. These interactions can have negative, neutral, or positive effects on the\nsystem [Heylighen and Campbell 1995].\nNow, intuitively thinking, it may be that the \"smoothening\" of local interactions,\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n5\n\ni.e. the minimization of \"interferences\" or \"friction\" will lead to global improvement. But is this always the case? To answer this question, the terminology of\nmulti-agent systems [Maes 1994; Wooldridge and Jennings 1995; Wooldridge 2002;\nSchweitzer 2003] can be used. We can say that:\nNotion 3.1. An agent is a description of an entity that acts on its environment.\nExamples of this can be a trader acting on a market, a school of fish acting\non a coral reef, or a computer acting on a network. Thus, every element, and\nevery system, can be seen as agents with goals and behaviors thriving to reach\nthose goals. The behavior of agents can affect (positively, negatively, or neutrally)\nthe fulfillment of the goals of other agents, thereby establishing a relation. The\nsatisfaction or fulfillment of the goals of an agent can be represented using a variable\n\u03c3 \u2208 [0, 1].3 Relating this to the higher level, the satisfaction of a system \u03c3sys can\nbe recursively represented as a function f : R \u2192 [0..1] of the satisfaction of the n\nelements conforming it:\n\u03c3sys = f (\u03c31 , \u03c32 , ..., \u03c3n , w0 , w1 , w2 , ..., wn )\n\n(2)\n\nwhere w0 is a bias and the other weights determine the importance given to each\n\u03c3i . If the system is homogeneous, then f will be the weighted sum of \u03c3i , wi =\n1\nn \u2200i 6= 0, w0 = 0. Note that this would be very similar to the activation function\nused in many artificial neural networks [Rojas 1996]. For heterogenous systems,\nf may be a nonlinear function. Nevertheless, the weights wi 's are determined\ntautologically by the importance of the \u03c3 of each element to the satisfaction of\nthe system. Thus, it is a useful tautology to say that maximizing individual \u03c3's,\nadjusting individual behaviors (and thus relations), will maximize \u03c3sys . If several\nelements decrease \u03c3sys as they increase their \u03c3, we would not consider them as part\nof the system. It is important to note that this is independent of the potential\nnonlinearity of f . An example can be seen with the immune system. It categorizes\nmolecules and micro-organisms as akin or alien [Vaz and Varela 1978]. If they\nare considered as alien, they are attacked. Auto-immune diseases arise when this\ncategorization is erroneous, and the immune system attacks vital elements of the\norganism. On the other hand, if pathogens are considered as part of the body, they\nare not attacked. Another example is provided by cancer. Carcinogenic cells can\nbe seen as \"rebel\", and no longer part of the body, since their goals differ from\nthe goal of the organism. Healthy cells are described easily as part of an organism.\nBut when they turn carcinogenic, they can better be described as parasitic. The\ntautology is also useful because it gives a general mathematical representation for\nsystem satisfaction, which is independent of a particular system.\nA reductionist approach would assume that maximizing the satisfaction of the\nelements of a system would also maximize the satisfaction of the system. However,\nthis is not always the case, since some elements can \"take advantage\" of other\nelements. Thus, we need to concentrate also on the interactions of the elements.\n3 In some cases, \u03c3 could be seen as a \"fitness\" [Heylighen and Campbell 1995]. However, in most\ngenetic algorithms [Mitchell 1996] a fitness function is imposed from the outside, whereas \u03c3 is a\nproperty of the agents, that can change with time.\n\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f6\n\n*\n\nCarlos Gershenson\n\nIf the model of a system considers more than two levels, then the \u03c3 of higher\nlevels will be recursively determined by the \u03c3's of lower levels. However, the f 's\nmost probably will be very different on each level.\nCertainly, an important question remains: how do we determine the function f\nand the weights wi 's? To this question there is no complete answer. One option\nwould be to approximate f numerically [De Wolf et al. 2005]. An explicit f may\nbe difficult to find, but an approximation can be very useful. Another method\nconsists of lesioning the system4 : removing or altering elements of the system, and\nobserving the effect on \u03c3sys . Through analyzing the effects of different lesions, the\nfunction f can be reconstructed and the weights wi 's obtained. If a small change\n\u2206\u03c3i in any \u03c3i produces a change \u2206\u03c3sys \u2265 \u2206\u03c3i , the system can be said to be fragile.\nWhat could then be done to maximize \u03c3sys ? How can we relate the \u03c3i 's and avoid\nconflicts between elements? This is not an obvious task, for it implies bounding the\nagents' behaviors that reduce other \u03c3i 's, while preserving their functionality. Not\nonly should the interference or friction between elements be minimized, but the\nsynergy [Haken 1981] or \"positive interference\" should also be promoted. Dealing\nwith complex systems, it is not feasible to tell each element what to do or how to do\nit, but their behaviors need to be constrained or modified so that their goals will be\nreached, blocking the goals of other elements as little as possible. These constraints\ncan be called mediators [Michod 2003; Heylighen 2003a]. They can be imposed\nfrom the top down, developed from the bottom up, be part of the environment, or\nbe embedded as an aspect [Ten Haaf et al. 2002, Ch. 3] of the system. An example\ncan be found in city traffic: traffic lights, signals and rules mediate among drivers,\ntrying to minimize their conflicts, which result from the competition for limited\nresources, i.e. space to drive through. The role of a mediator is to arbitrate among\nthe elements of a system, to minimize interferences and frictions and maximize\nsynergy. Therefore, the efficiency of the mediator can be measured directly using\n\u03c3sys . Individually, we can measure the \"friction\" \u03c6i \u2208 [\u22121, 1] that agent i causes\nin the rest of the system, relating the change in satisfaction \u2206\u03c3i of element i and\nthe change in satisfaction of the system \u2206\u03c3sys :\n\u2212\u2206\u03c3i \u2212 \u2206\u03c3sys (n \u2212 1)\n.\n(3)\nn\nFriction occurs when the increase of satisfaction of one element causes a decrease\nin the satisfaction of some other elements that is greater than the increase. Note\nthat \u03c6i = 0 does imply that there is no conflict, since one agent can \"get\" the satisfaction proportionally to the \"loss\" of satisfaction of (an)other agent(s). Negative\nfriction would imply synergy, e.g. when \u2206\u03c3i \u2265 0 while other elements also increase\ntheir \u03c3. The role of a mediator would be to maximize \u03c3sys by minimizing \u03c6i 's.\nWith this approach, friction can be seen as a type of interaction between elements.\nThus, the problem can be put in a different way: how can we find/develop/evolve\nefficient mediators for a given system? One answer to this question is the methodology proposed in this paper. The answer will not be complete, since we cannot\nhave precise knowledge of f for large evolving complex systems. This is because the\n\u03c6i =\n\n4 This\n\nmethod has been used widely to detect functions in complex systems such as genetic regulatory networks and nervous systems.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n7\n\nevolution of the system will change its own f [Kauffman 2000], and the relationships among different \u03c3i 's. Therefore, predictions cannot be complete. However,\nthe methodology proposes to follow steps to increase the understanding (and consequently the control) of the system and the relations between its elements. The\ngoal is to identify conflicts and diminish them without creating new ones. This\nwill increase the \u03c3i 's and thus \u03c3sys . The precision of f is not so relevant if this is\nachieved.\nIt should be noted that the timescale chosen for measuring \u2206\u03c3i is very important,\nsince at short timescales the satisfaction can decrease, while on the long run it\nwill increase. In other words, there can be a short term \"sacrifice\" to harvest a\nlong term \"reward\". If the timescale is too small, a system might get stuck in a\n\"local optimum\", since all possible actions would decrease its satisfaction on the\nshort term. But in some cases the long term benefit should be considered for\nmaximization. A way of measuring the slow change of \u03c3i would be with its integral\nover time for a certain interval \u2206t:\nZ\n\nt+\u2206t\n\n\u03c3i dt.\n\n(4)\n\nt\n\nAnother way of dealing with the local optima is to use neutral changes to explore\nalternative solutions [Kimura 1983].\nBefore going into further detail, it is worth noting that this is not a reductionist\napproach. Smoothing out local interactions will not provide straightforward clues as\nto what will occur at the higher level. Therefore, the system should be observed at\nboth levels: making local and global changes, observing local and global behaviors,\nand analyzing how one affects the other.\nConcurrently, the dependence \u01eb \u2208 [\u22121, 1] of an element to the system can be measured by calculating the difference of the satisfaction \u03c3i when the element interacts\nwithin the system and its satisfaction \u03c3ei when the element is isolated.\n\u01eb = \u03c3i \u2212 \u03c3ei .\n\n(5)\n\nIn this way, full dependence is given when the satisfaction of the element within\nthe system \u03c3i is maximal and its satisfaction \u03c3ei is minimal when the element is\nisolated. A negative \u01eb would imply that the element would be more satisfied on its\nown and is actually \"enslaved\" by the system. Now we can use the dependences of\nthe elements to a system to measure the integration \u03c4 \u2208 [\u22121, 1] of a system, which\ncan be seen also as a gradual measure of a meta-system transition (MST) [Turchin\n1977].\nn\n\n\u03c4=\n\n1X\n\u01ebi .\nn i=1\n\n(6)\n\nA MST is a gradual process, but it will be complete when elements are not able to\nreach their goals on their own, i.e. \u03c3i \u2192 0. Examples include cells in multi-cellular\norganisms and mitochondria in eukaryotes.\nIn an evolutionary process, natural (multilevel [Michod 1997; Lenaerts 2003])\nselection will tend to increase \u03c4 because this implies higher satisfaction both for\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f8\n\n*\n\nCarlos Gershenson\n\nFig. 1. Diagram relating different stages of methodology\n\nthe system and its elements (systems with a negative \u03c4 are not viable). Relations\nand mediators that contribute to this process will be selected, since higher \u03c3's\nimply more chances of survival and reproduction. Human designers and engineers\nalso select relations and mediators that increase the \u03c3's of elements and systems.\nTherefore, we can see that evolution will tend, in the long run, towards synergetic\nrelationships [Corning 2003], even if resources are scarce.\nIn the next section, the steps suggested for developing a self-organizing system\nare presented, using the concepts described in this section.\n\n4. THE METHODOLOGY\nThe proposed methodology meets the requirements of a system, i.e. what the system should do, and enables the designer to produce a system that fulfills the requirements. The methodology includes the following steps: Representation, Modeling,\nSimulation, Application, and Evaluation, which will be exposed in the following\nsubsections. Figure 1 presents these steps. These steps should not necessarily be\nfollowed one by one, since the stages merge with each other. There is also backtracking, when the designer needs to return to an earlier stage for reconsideration\nbefore finishing a cycle.\nThis methodology should not be seen as a recipe that provides ready-made solutions, but rather as a guideline to direct the search for them. The stages proposed\nare not new, and similar to those proposed by iterative and incremental development methodologies. Still, it should be noted that the active feedback between\nstages within each iteration can help in the design of systems ready to face uncertainties in complex problem domains. The novelty of the methodology lies in the\nvocabulary used to describe self-organizing systems.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n9\n\n4.1 Representation\nThe goal of this step is to develop a specification (which might be tentative) of the\ncomponents of the system.\nThe designer should always remember the distinction between model and modeled. A model is an abstraction/description of a \"real\" system. Still, there can be\nseveral descriptions of the same system [Gershenson 2002; Gershenson and Heylighen 2005], and we cannot say that one is better than another independently of a\ncontext.\nThere are many possible representations of a system. According to the constraints and requirements, which may be incomplete, the designer should choose an\nappropriate vocabulary (metaphors to speak about the system), abstraction levels,\ngranularity, variables, and interactions that need to be taken into account. Certainly, these will also depend on the experience of the designer. The choice between\ndifferent approaches can depend more on the expertise of the designer than on the\nbenefits of the approaches.\nEven when there is a wide diversity of possible systems, a general approach for\ndeveloping a Representation can be abstracted. The designer should try to divide a\nsystem into elements by identifying semi-independent modules, with internal goals\nand dynamics, and with few interactions with their environment. Since interactions\nin a model will increase the complexity of the model, we should group \"clusters\" of\ninteracting variables into elements, and then study a minimal number of interactions\nbetween elements. The first constraints that help us are space and time. It is useful\nto group variables that are close to each other (i.e. interacting constantly) and\nconsider them as elements that relate to other elements in occasional interactions.\nMultiscale analysis [Bar-Yam 2005] is a promising method for identifying levels and\nvariables useful in a Representation. Since the proposed methodology considers\nelements as agents, another useful criterion for delimiting them is the identification\nof goals. These will be useful in the Modeling to measure the satisfaction \u03c3 of the\nelements. We can look at genes as an example: groups of nucleotides co-occur and\ninteract with other groups and with proteins. Genes are identified by observing\nnucleotides that keep close together and act together to perform a function. The\nfulfillment of this function can be seen as a goal of the gene. Dividing the system\ninto modules also divides the problem it needs to solve, so a complex task will be\nable to be processed in parallel by different modules. Certainly, the integration\nof the \"solutions\" given by each module arises as a new problem. Nevertheless,\nmodularity in a system also increases its robustness and adaptability [Simon 1996;\nWatson 2002; Fern\u00e1ndez and Sol\u00e9 2004].\nThe representation should consider at least two levels of abstraction, but if there\nare many variables and interactions in the system, more levels can be contemplated.\nSince elements and systems can be seen as agents, we can refer to all of them as\nx-agents, where x denotes the level of abstraction relative to the simplest elements.\nFor example, a three-layered abstraction would contemplate elements (0-agents)\nforming systems that are elements (subsystems, 1-agents) of a greater system (metasystem, 2-agents). If we are interested in modeling a research institute, 0-agents\nwould be researchers, 1-agents would be research groups, and the research institute\nwould be a 2-agent. Each of these have goals and satisfactions (\u03c3 x ) that can be\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f10\n\n*\n\nCarlos Gershenson\n\ndescribed and interrelated. For engineering purposes, the satisfaction of the highest\nlevel, i.e. the satisfaction of the system that is being designed, will be determined by\nthe tasks expected from it. If these are fulfilled, then it can be said that the system\nis \"satisfied\". Thus, the designer should concentrate on engineering elements that\nwill strive to reach this satisfaction.\nIf there are few elements or interactions in the Representation, there will be low\ncomplexity, and therefore stable dynamics. The system might be better described\nusing traditional approaches, since the current approach might prove redundant. A\nlarge variety of elements and/or interactions might imply a high complexity. Then,\nthe Representation should be revised before entering the Modeling stage.\n4.2 Modeling\nIn science, models should ideally be as simple as possible, and predict as much as\npossible [Shalizi 2001]. These models will provide a better understanding of a phenomenon than complicated models. Therefore, a good model requires a good Representation. The \"elegance\" of the model will depend very much on the metaphors\nwe use to speak about the system. If the model turns out to be cumbersome, the\nRepresentation should be revised.\nThe Modeling should specify a Control mechanism that will ensure that the\nsystem does what it is required to do. Since we are interested in self-organizing\nsystems, the Control will be internal and distributed. If the problem is too complex,\nit can be divided into different subproblems. The Modeling should also consider\ndifferent trade-offs for the system.\n4.2.1 Control mechanism. The Control mechanism can be seen as a mediator\n[Heylighen 2003a] ensuring the proper interaction of the elements of the system,\nand one that should produce the desired performance. However, one cannot have\na strict control over a self-organizing system. Rather, the system should be steered\n[Wiener 1948]. In a sense, self-organizing systems are like teenagers: they cannot\nbe tightly controlled since they have their own goals. We can only attempt to steer\ntheir actions, trying to keep their internal variables under certain boundaries, so\nthat the systems/teenagers do not \"break\" (in Ashby's sense [Ashby 1947]).\nTo develop a Control, the designer should find aspect systems, subsystems, or\nconstraints that will prevent the negative interferences between elements (friction)\nand promote positive interferences (synergy). In other words, the designer should\nsearch for ways of minimizing frictions \u03c6i 's that will result in maximization of the\nglobal satisfaction \u03c3sys . The performance of different mediators can be measured\nusing equation (2).\nThe Control mechanism should be adaptive. Since the system is dynamic and\nthere are several interactions within the system and with its environment, the\nControl mechanism should be able to cope with the changes within and outside\nthe system, in other words, robust. An adaptive Control will be efficient in more\ncontexts than a static one. In other words, the Control should be active in the\nsearch of solutions. A static Control will not be able to cope with the complexity\nof the system. There are several methods for developing an adaptive Control, e.g.\n[Sastry and Bodson 1994]. But these should be applied in a distributed way, in an\nattempt to reduce friction and promote synergy.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n11\n\nDifferent methods for reducing friction in a system can be identified. In the\nfollowing cases, an agent A negatively affected by the behavior of an agent B will\nbe considered5 :\n-Tolerance. This can be seen as the acceptance of others and their goals. A can\ntolerate B by modifying itself to reduce the friction caused by B, and therefore\nincrease \u03c3A . This can be done by moving to another location, finding more\nresources, or making internal changes.\n-Courtesy. This would be the opposite case to Tolerance. B should modify its\nbehavior not to reduce \u03c3A .\n-Compromise. A combination of Courtesy and Tolerance: both agents A and B\nshould modify their behaviors to reduce the friction. This is a good alternative\nwhen both elements cause friction to each other. This will be common when A\nand B are similar, as in homogeneous systems.\n-Imposition. This could be seen as forced Courtesy. The behavior of B could be\nchanged by force. The Control could achieve this by constraining B or imposing\ninternal changes.\n-Eradication. As a special case of Imposition, B can be eradicated. This certainly would decrease \u03c3B , but can be an alternative when either \u03c3B does not\ncontribute much to \u03c3sys , or when the friction caused by B in the rest of the\nsystem is very high.\n-Apoptosis. B can \"commit suicide\". This would be a special case of Courtesy,\nwhere B would destroy itself for the sake of the system.\nThe difference between Compromise/Apoptosis and Imposition/Eradication is\nthat in the former cases, change is triggered by the agent itself, whereas in the\nlatter the change is imposed from the \"outside\" by a mediator. Tolerance and\nCompromise could be generated by an agent or by a mediator.\nDifferent methods for reducing friction can be used for different problems. A\ngood Control will select those in which other \u03c3's are not reduced more than the\ngain in \u03c3's. The choice of the method will also depend on the importance of different\nelements for the system. Since more important elements contribute more to \u03c3sys ,\nthese elements can be given preference by the Control in some cases.\nDifferent methods for increasing synergy can also be identified. These will consist\nof taking measures to increase \u03c3sys , even if some \u03c3's are reduced:\n-Cooperation. Two or more agents adapt their behavior for the benefit of the\nwhole. This might or might not reduce some \u03c3's.\n-Individualism. An agent can choose to increase its \u03c3 if it increases \u03c3sys . A\nmediator should prevent increases in \u03c3's if these reduce \u03c3sys , i.e. friction.\n-Altruism. An agent can choose to sacrifice an increase of its \u03c3 or to reduce its\n\u03c3 in order to increase \u03c3sys . This would make sense only if the relative increase\nof \u03c3sys is greater than the decrease of the \u03c3 of the altruistic agent. A mediator\nshould prevent wasted altruism.\n5 Even when equation 3 relates the satisfaction of an element to the satisfaction of the system,\nthis can also be used for the relation between satisfactions of two elements, when \u2206\u03c3i = 0 for all\nother elements.\n\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f12\n\n*\n\nCarlos Gershenson\n\n-Exploitation. This would be forced Altruism: an agent is driven to reduce its\n\u03c3 to increase \u03c3sys .\nA common way of reducing friction is to enable agents to learn via reinforcement\n[Kaelbling et al. 1996]. With this method, agents tend to repeat actions that bring\nthem satisfaction and avoid the ones that reduce it. Evolutionary approaches, such\nas genetic algorithms [Mitchell 1996], can also reduce friction and promote synergy.\nHowever, these tend to be \"blind\", in the sense that variations are made randomly,\nand only their effects are evaluated. With the criteria presented above, the search\nfor solutions can be guided with a certain aim. However, if the relationship between\nthe satisfaction of the elements and the satisfaction of the system is too obscure,\n\"blind\" methods remain a good alternative.\nIn general, the Control should explore different alternatives, trying to constantly\nincrease \u03c3sys by minimizing friction and maximizing synergy. This is a constant\nprocess, since a self-organizing system is in a dynamic environment, producing\n\"solutions\" for the current situation. Note that a mediator will not necessarily\nmaximize the satisfaction of the agents. However, it should try to do so for the\nsystem.\n4.2.2 Dividing the problem. If the system is to deal with many parameters,\nthen it can be seen as a cognitive system [Gershenson 2004a]. It must \"know\" or\n\"anticipate\" what to do according to the current situation and previous history.\nThus, the main problem, i.e. what the elements should do, could be divided into\nthe problems of communication, cooperation, and coordination [Gershenson and\nHeylighen 2004].\nFor a system to self-organize, its elements need to communicate: they need to\n\"understand\" what other elements, or mediators, \"want\" to tell them. This is easy\nif the interactions are simple: sensors can give meaning to the behaviors of other\nelements. But as interactions turn more complex, the cognition [Gershenson 2004a]\nrequired by the elements should also be increased. New meanings can be learned\n[Steels 1998; de Jong 2000] to adapt to the changing conditions. These can be\nrepresented as \"concepts\" [G\u00e4rdenfors 2000], or encoded, e.g., in the weights of a\nlearning neural network [Rojas 1996]. The precise implementation and philosophical\ninterpretations are not relevant if the outcome is the desired one.\nThe problem of cooperation has been widely studied using game theory [Axelrod\n1984]. There are several ways of promoting cooperation, especially if the system is\ndesigned. To mention mention only two of them: the use of tags [Riolo et al. 2001;\nHales and Edmonds 2003] and multiple levels of selection [Michod 1997; Lenaerts\n2003] have proven to yield cooperative behavior. This will certainly reduce friction\nand therefore increase \u03c3sys .\nElements of a system should coordinate while reducing friction, not to obstruct\neach other. An important aspect of coordination is the division of labour. This can\npromote synergy, since different elements can specialize in what they are good at\nand trust6 others to do what they are good at [Gaines 1994; Di Marzo Serugendo\n2004]. This process will yield a higher \u03c3sys compared to the case when every element\nis meant to perform all functions independently of how well each element performs\n6 Trust\n\nis also important for communication and cooperation.\n\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n13\n\neach function. A good Control will promote division of labour by mediating a\nbalance between specialization and integration: elements should devote more time\ndoing what they are best at, but should still take into account the rest of the system.\nAnother aspect of coordination is the workflow : if some tasks are prerequisites of\nother tasks, a mediator should synchronize the agents to minimize waiting times.\n4.2.3 Trade-offs. A system needs to be able to cope with the complexity of its\ndomain to achieve its goals. There are several trade-offs that can be identified to\nreach a balance and cope better with this complexity:\n-Complexity of Elements/Interactions. The complexity of the system required to cope with the complexity of its domain can be tackled at one end of\nthe spectrum by complex elements with few/simple interactions, and at the other\nby simple elements with several/complex interactions.\n-Quality/Quantity. A system can consist at one extreme of a few complex\nelements, and at the other of several simple elements.\n-Economy/Redundancy. Solving a problem with as few elements as possible\nis economical. But a minimal system is very fragile. Redundancy is one way of\nfavoring the robustness of the system [von Neumann 1966; Fern\u00e1ndez and Sol\u00e9\n2004; Wagner 2004; Gershenson et al. 2006]. Still, too much redundancy can also\nreduce the speed of adaptation and increase costs for maintaining the system.\n-Homogeneity/Heterogeneity. A homogeneous system will be easier to understand and control. A heterogenous system will be able to cope with more\ncomplexity with less elements, and will be able to adapt more quickly to sudden changes. If there is a system of ten agents each able to solve ten tasks,\na homogeneous system will be able to solve more than ten tasks robustly. A\nfully heterogeneous system would be able to solve more than a hundred tasks,\nbut it would be fragile if one agent failed. Heterogeneity also brings diversity,\nthat can accelerate the speed of exploration, adaptation, and evolution, since\ndifferent solutions can be sought in parallel. The diversity is also related to the\namount of variety of perturbations that the system can cope with [Ashby 1956],\ni.e. robustness.\n-System/Context. The processing and storage of information can be carried out\ninternally by the system, or the system can exploit its environment \"throwing\"\ncomplexity into it, i.e. allow it to store or process information [Gershenson et al.\n2003].\n-Ability/Clarity. A powerful system will solve a number of complex problems,\nbut it will not be very useful if the functioning of the system cannot be understood. Designers should be able to understand the system in order to be able to\ncontrol it [Schweitzer 2003].\n-Generality/Particularity. An abstract Modeling will enable the designer to\napply the Modeling in different contexts. However, particular details should be\nconsidered to make the implementation feasible.\nThere are only very relative ways of measuring the above mentioned trade-offs.\nHowever, they should be kept in mind during the development of the system.\nIn a particular system, the trade-offs will become clearer once the Simulation is\nunderway. They can then be reconsidered and the Modeling updated.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f14\n\n*\n\nCarlos Gershenson\n\n4.3 Simulation\nThe aim here is to build computer simulation(s) that implement the model(s) developed in the Modeling stage, and test different scenarios and mediator strategies.\nThe Simulation development should proceed in stages: from abstract to particular. First, an abstract scenario should be used to test the main concepts developed\nduring the Modeling. Only when these are tested and refined, should details be\nincluded in the Simulation. This is because particular details take time to develop,\nand there is no sense in investing before knowing wether the Modeling is on the\nright track. Details can also influence the result of the Simulation, so they should\nbe put off until a time when the main mechanisms are understood.\nThe Simulation should compare the proposed solutions with traditional approaches.\nThis is to be sure that applying self-organization in the system brings any benefit.\nIdeally, the designer should develop more than one Control to test in the simulation.\nA rock-scissors-paper situation could arise, where no Control is best in all situations (also considering classic controls). The designer can then adjust or combine\nthe Controls, and then compare again in the Simulation.\nExperiments conducted with the aid of the Simulation should go from simple to\nextensive. Simple experiments will show proof of concepts, and their results can\nbe used to improve the Modeling. Once this is robust, extensive studies should be\nmade to be certain of the performance of the system under different conditions.\nBased on the Simulation results and insights, the Modeling and Representation\ncan be improved. A Simulation should be mature before taking the implementation\ninto the real world.\n4.4 Application\nThe role of this stage is basically to use the developed and tested model(s) in a\nreal system. If this is a software system, the transition will not be so difficult.\nOn the other hand, the transition to a real system can expose artifacts of a naive\nSimulation. A useful way to develop robust Simulations consists in adding some\nnoise into the system [Jakobi 1997].\nGood theoretical solutions can be very difficult/expensive/impossible to implement (e.g. if they involve instantaneous access to information, mind reading, teleportation, etc.). The feasibility of the Application should be taken into account\nduring the whole design process. In other words, the designer should have an implementation bias in all the Methodology stages. If the proposed system turned\nout to be too expensive or complicated, all the designer's efforts would be fruitless.\nIf the system is developed for a client, there should be feedback between developers\nand clients during the whole process [Cotton 1996] to avoid client dissatisfaction\nonce the system is implemented. The legacy of previous systems should also be considered for the design [Valckenaers et al. 2003]: if the current implementation is to\nbe modified but not completely replaced, the designer is limited by the capabilities\nof the old system.\nConstraints permitting, a pilot study should be made before engaging in a full\nApplication, to detect incongruences and unexpected issues between the Simulation\nor Modeling stages and the Application. With the results of this pilot study, the\nSimulation, Modeling, and Representation can be fine-tuned.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n15\n\n4.5 Evaluation\nOnce the Application is underway, the performance of new system should be measured and compared with the performances of the previous system(s).\nConstraints permitting, efforts should be continued to try to improve the system,\nsince the requirements it has to meet will certainly change with time (e.g. changes\nof demand, capacity, etc.). The system will be more adaptive if it does not consider\nits solution as the best once and for all, and is able to change itself according to its\nperformance and the changing requirements.\n4.6 Notes on the methodology\n-All returning arrows in the Figure 1 are given because it is not possible to predict\nthe outcome of strategies before they have been tried out. All information and\neventualities cannot be abstracted, nor emergent properties predicted before they\nhave been observed. Emergent properties are a posteriori.\n-The proposed Methodology will be useful for unpredictable problem domains,\nwhere all the possible system's situations cannot be considered beforehand. It\ncould also be useful for creative tasks, where a self-organizing system can explore\nthe design space in an alternative way.\n-Most methodologies in the literature apply to software systems, e.g. [Jacobson\net al. 1999; Jennings 2000]. This one is more general, since it is domain independent. The principles presented are such that can be applied to any domain\nfor developing a functioning self-organizing system: Any system can be modeled\nas a group of agents, with satisfactions depending on their goals. The question\nis when is it useful to use this Methodology. Only application of the Methodology will provide an answer to this question. It should be noted that several\napproaches have been proposed in parallel, e.g. [Capera et al. 2003; De Wolf and\nHolvoet 2005], that, as the present work, and are part of the ongoing effort by\nthe research community to understand self-organizing systems.\n-The proposed Methodology is not quite a spiral model [Boehm 1988], because\nthe last stage does not need to be reached to return to the first. This is, there is\nno need to deploy a working version (finish a cycle/iteration) before revisiting a\nprevious stage, as for example in extreme programming. Rather, the Methodology is a \"backtracking model\", where the designer can always return to previous\nstages.\n-It is not necessary to understand a solution before testing it. In many cases\nunderstanding can come only after testing, i.e., the global behavior of the system\nis irreducible. Certainly, understanding the causes of a phenomenon will allow\nthe modelers to have a greater control over it.\nA detailed diagram of the different substeps of the Methodology can be appreciated in Figure 2.\n5. CASE STUDY: SELF-ORGANIZING TRAFFIC LIGHTS\nRecent work on self-organizing traffic lights [Gershenson 2005] will be used to illustrate the flow through the different steps of the Methodology. These traffic lights\nare called self-organizing because the global performance is given by the local rules\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f16\n\n*\n\nCarlos Gershenson\n\nFig. 2. Detailed diagram of Methodology\nfollowed by each traffic light: they are unaware of the state of other intersections\nand still manage to achieve global coordination.\nTraffic modeling has increased the understanding of this complex phenomenon\n[Prigogine and Herman 1971; Wolf et al. 1996; Schreckenberg and Wolf 1998; Helbing et al. 2000; Helbing 1997; Helbing and Huberman 1998]. Even when vehicles\ncan follow simple rules, their local interactions generate global patterns that cannot\nbe reduced to individual behaviors. Controlling traffic lights in a city is not an easy\ntask: it requires the coordination of a multitude of components; the components\naffect one another; furthermore, these components do not operate at the same pace\nover time. Traffic flows and densities change constantly. Therefore, this problem is\nsuitable to be tackled by self-organization. A centralized system could also perform\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n17\n\nthe task, but in practice the amount of computation required to process all the data\nfrom a city is too great to be able to respond in real time. Thus, a self-organizing\nsystem seems to be a promising alternative.\nRequirements. The goal is to develop a feasible and efficient traffic light control\nsystem.\nRepresentation. The traffic light system can be modelled on two levels: the\nvehicle level and the city level. These are easy to identify because vehicles are\nobjects that move through the city, establishing clear spatiotemporal distinctions.\nThe goal of the vehicles is to flow as fast as possible, so their \"satisfaction\" \u03c3 can be\nmeasured in terms of their average speed and average waiting time at a red light.\nCars will have a maximum \u03c3 if they go as fast as they are allowed, and do not stop\nat intersections. \u03c3 would be zero if a car stops indefinitely. The goal of the traffic\nlight system on the city level is to enable vehicles to flow as fast as possible, while\nmediating their conflicts for space and time at intersections. This would minimize\nfuel consumption, noise, pollution, and stress in the population. The satisfaction of\nthe city can be measured in terms of the average speeds and average waiting times\nof all vehicles (i.e. average of \u03c3i , \u2200i), and with the average percentage of stationary\ncars. \u03c3sys will be maximum if all cars go as fast as possible, and are able to flow\nthrough the city without stopping. If a traffic jam occurs and all the vehicles stop,\nthen \u03c3sys would be minimal.\nModeling. Now the problem for the Control can be formulated: find a mechanism that will coordinate traffic lights so that these will mediate between vehicles\nto reduce their friction (i.e. try to prevent them from arriving at the same time at\ncrossings). This will maximize the satisfactions of the vehicles and of the city (\u03c3i 's\nand \u03c3sys ). Since all vehicles contribute equally to \u03c3sys , ideally the Control should\nminimize frictions via Compromise.\nSimulation. A simple simulation was developed in NetLogo [Wilensky 1999], a\nmulti-agent modeling environment. The \"Gridlock\" model [Wilensky and Stroup\n2002] was extended to implement different traffic control strategies. It consists of\nan abstract traffic grid with intersections between cyclic single-lane arteries of two\ntypes: vertical or horizontal (similar to the scenarios of [Biham et al. 1992; Brockfeld et al. 2001]). Cars only flow in a straight line, either eastbound or southbound.\nEach crossroad has traffic lights that allow traffic flow in only one of the intersecting arteries with a green light. Yellow or red lights stop the traffic. The light\nsequence for a given artery is green-yellow-red-green. Cars simply try to go at a\nmaximum speed of 1 \"patch\" per timestep, but stop when a car or a red or yellow\nlight is in front of them. Time is discrete, but not space. A \"patch\" is a square\nof the environment the size of a car. The simulation can be tested at the URL\nhttp://homepages.vub.ac.be/ \u0303cgershen/sos/SOTL/SOTL.html . At first, a tentative model was implemented. The idea was unsuccessful. However, after refining\nthe model, an efficient method was discovered, named sotl-request.\nModeling. In the sotl-request method, each traffic light keeps a count \u03bai of the\nnumber of cars times time steps (c\u2217ts) approaching only the red light, independently\nof the status or speed of the cars (i.e. moving or stopped). \u03bai can be seen as the\nintegral of waiting/approaching cars over time. When \u03bai reaches a threshold \u03b8, the\nopposing green light turns yellow, and the following time step it turns red with\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f18\n\n*\n\nCarlos Gershenson\n\n\u03bai = 0 , while the red light which counted turns green. In this way, if there are\nmore cars approaching or waiting before a red light, the light will turn green faster\nthan if there are only few cars. This simple mechanism achieves self-organization\nas follows: if there is a single or just a few cars, these will be made to stop for a\nlonger period before a red light. This gives time for other cars to join them. As\nmore cars join the group, cars will be made to wait shorter periods before a red\nlight. Once there are enough cars, the red light will turn green even before the\noncoming cars reach the intersection, thereby generating \"green waves\". Having\n\"platoons\" or \"convoys\" of cars moving together improves traffic flow, compared\nto a homogeneous distribution of cars, since there are large empty areas between\nplatoons, which can be used by crossing platoons with few interferences. The sotlrequest method has no phase or internal clock. Traffic lights change only when the\nabove conditions are met. If no cars are approaching a red light, the complementary\nlight can remain green.\nRepresentation. It becomes clear now that it would be useful to consider traffic\nlights as agents as well. Their goal is to \"get rid\" of cars as quickly as possible. To do\nso, they should avoid having green lights on empty streets and red lights on streets\nwith high traffic density. Since the satisfactions of the traffic lights and vehicles\nare complementary, they should interact via Cooperation to achieve synergy. Also,\n\u03c3sys could be formulated in terms of the satisfactions of traffic lights, vehicles, or\nboth.\nModeling. Two classic methods were implemented to compare their performance with sotl-request : marching and optim.\nMarching is a very simple method. All traffic lights \"march in step\": all green\nlights are either southbound or eastbound, synchronized in time. Intersections have\na phase \u03c6i , which counts time steps. \u03c6i is reset to zero when the phase reaches a\nperiod value p. When \u03c6i == 0, red lights turn green, and yellow lights turn red.\nGreen lights turn yellow one time step earlier, i.e. when \u03c6 == p \u2212 1. A full cycle\nof an intersection consists of 2p time steps. \"Marching\" intersections are such that\n\u03c6i == \u03c6j , \u2200i, j.\nThe optim method is implemented trying to set phases \u03c6i of traffic lights so\nthat, as soon as a red light turns green, a car that was made to stop would find the\nfollowing traffic lights green. In other words, a fixed solution is obtained so that\ngreen waves flow to the southeast. The simulation environment has a radius of r\nsquare patches, so that these can be identified with coordinates (xi , yi ), xi , yi \u2208\n[\u2212r, r]. Therefore, each artery consists of 2r + 1 patches. In order to synchronize\nall the intersections, red lights should turn green and yellow lights should turn red\nwhen\n2r + xi \u2212 yi\n)\n(7)\n4\nand green lights should turn to yellow the previous time step. The period should\nbe p = r+3. The three is added as an extra margin for the reaction and acceleration\ntimes of cars (found to be best, for low densities, by trial and error).\nThese two methods are non-adaptive, in the sense that their behavior is dictated\nbeforehand, and they do not consider the actual state of the traffic. Therefore,\nthere cannot be Cooperation between vehicles and traffic lights, since the latter\n\u03c6i == round(\n\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n19\n\nones have fixed behaviors. On the other hand, traffic lights under the sotl-request\nmethod are sensitive to the current traffic condition, and can therefore respond to\nthe needs of the incoming vehicles.\nSimulation. Preliminary experiments have shown that sotl-request, compared\nwith the two traditional methods, achieves very good results for low traffic densities,\nbut very poor results for high traffic densities. This is because depending on the\nvalue of \u03b8, high traffic densities can cause the traffic lights to change too fast. This\nobstructs traffic flow. A new model was developed, taking this factor into account.\nModeling. The sotl-phase method takes sotl-request and only adds the following\nconstraint: a traffic light will not be changed if the time passed since the last light\nchange is less than a minimum phase, i.e. \u03c6i < \u03c6min . Once \u03c6i \u2265 \u03c6min , the lights\nwill change if/when \u03bai \u2265 \u03b8. This prevents the fast changing of lights7 .\nSimulation. Sotl-phase performed a bit less effectively than sotl-request for very\nlow traffic densities, but still much better than the classic methods. However, sotlphase outperformed them also for high densities. An unexpected phenomenon was\nobserved: for certain traffic densities, sotl-phase achieved full synchronization, in\nthe sense that no car stopped. Therefore, speeds were maximal and there were no\nwaiting times nor sopped cars. Thus, satisfaction was maximal for vehicles, traffic\nlights, and the city. Still, this is not a realistic situation, because full synchronization is achieved due to the toroidal topology of the simulation environment.\nThe full synchronization is achieved because platoons are promoted by the traffic\nlights, and platoons can move faster through the city modulating traffic lights. If\ntwo platoons are approaching an intersection, sotl-phase will stop one of them, and\nallow the other to pass without stopping. The latter platoon keeps its phase as it\ngoes around the torus, and the former adjusts its speed until it finds a phase that\ndoes not cause a conflict with another platoon.\nModeling. Understanding the behavior of the platoons, it can be seen that there\nis a favorable system/context trade-off. There is no need of direct communication\nbetween traffic lights, since information can actually be sent via platoons of vehicles.\nThe traffic lights communicate stigmergically [Theraulaz and Bonabeau 1999], i.e.\nvia their environment, where the vehicles are conceptualized as the environment of\ntraffic lights.\nSimulation. With encouraging results, changes were made to the Simulation to\nmake it more realistic. Thus, a scenario similar to the one of [Faieta and Huberman\n1993] was developed. Traffic flow in four directions was introduced, alternating\nstreets. This is, arteries still consist of one lane, but the directions alternate:\nsouthbound-northbound in vertical roads, and eastbound-westbound in horizontal\nroads. Also, the possibility of having more cars flowing in particular directions was\nintroduced. Peak hour traffic can be simulated like this, regulating the percentages\nof cars that will flow in different roads. An option to switch off the torus in the\nsimulation was added. Finally, a probability of turning at an intersection Pturn was\nincluded. Therefore, when a car reaches an intersection, it will have a probability\nPturn of reducing its speed and turning in the direction of the crossing street. This\ncan cause cars to leave platoons, which are more stable when Pturn = 0.\n7A\n\nsimilar method has been used successfully in the United Kingdom for some time, but for\nisolated intersections [Vincent and Young 1986].\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f20\n\n*\n\nCarlos Gershenson\n\nThe results of experiments in the more realistic Simulation confirmed the previous ones: self-organizing methods outperform classic ones. There can still be full\nsynchronization with alternating streets, but not without a torus or with Pturn > 0.\nModeling. Another method was developed, sotl-platoon, adding two restrictions\nto sotl-phase for regulating the size of platoons. Before changing a red light to\ngreen, sotl-platoon checks if a platoon is not crossing through, not to break it.\nMore precisely, a red light is not changed to green if on the crossing street there is\nat least one car approaching at \u03c9 patches from the intersection. This keeps platoons\ntogether. For high densities, this restriction alone would cause havoc, since large\nplatoons would block the traffic flow of intersecting streets. To avoid this, a second\nrestriction is introduced. The first restriction is not taken into account if there\nare more than \u03bc cars approaching the intersection. Like this, long platoons can be\nbroken, and the restriction only comes into place if a platoon will soon be through\nan intersection.\nSimulation. Sotl-platoon manages to keep platoons together, achieving full\nsynchronization commonly for a wide density range, more effectively than sotlphase (when the torus is active). This is because the restrictions of sotl-platoon\nprevent the breaking of platoons when these would leave few cars behind, with a\nsmall time cost for waiting vehicles. Still, this cost is much lower than breaking\na platoon and waiting for separated vehicles to join back again so that they can\nswitch red lights to green before reaching an intersection. However, for high traffic\ndensities platoons aggregate too much, making traffic jams more probable. The\nsotl-platoon method fails when a platoon waiting to cross a street is long enough\nto reach the previous intersection, but not long enough to cut its tail. This will\nprevent waiting cars from advancing, until more cars join the long platoon. This\nfailure could probably be avoided introducing further restrictions. In more realistic\nexperiments (four directions, no torus, Pturn = 0.1), sotl-platoon gives on average\n30% (up to 40%) more average speed, half the stopped cars, and seven times less\naverage waiting times than non-responsive methods. Complete results and graphics\nof the experiments discussed here can be found in [Gershenson 2005].\nRepresentation. If priority is to be given to certain vehicles (e.g. public transport, emergency), weights can be added to give more importance to some \u03c3i 's.\nA meso-level might be considered, where properties of platoons can be observed:\ntheir behaviors, performance, and satisfaction and the relationships of these with\nthe vehicle and city levels could enhance the understanding of the self-organizing\ntraffic lights and even improve them.\nSimulation. Streets of varying distances between crossings were tested, and all\nthe self-organizing methods maintained their good performance. Still more realistic\nsimulations should be made before moving to the Implementation, because of the\ncost of such a system. At least, multiple-street intersections, multiple-lane streets,\nlane changing, different driving behaviors, and non homogeneous streets should be\nconsidered.\nApplication. The proposed system has not been implemented yet. Still, it is\nfeasible to do so, since there is the sensor technology to implement the discussed\nmethods in an affordable way. Currently, a more realistic simulation is being developed in cooperation with the Brussels Ministry of Mobility and Public Works\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n21\n\nto study its potential application in the city of Brussels. A pilot study should be\nmade before applying it widely, to fine tune different parameters and methods. External factors, e.g. pedestrians and cyclists, could also affect the performance of\nthe system.\nPedestrians could be taken into account considering them as cars approaching a\nred light. For example, a button could be used to inform the intersection of their\npresence, and this would contribute to the count \u03bai .\nA mixed strategy between different methods could be considered, e.g. sotl-platoon\nfor low and medium densities, and sotl-phase or marching for high densities.\nEvaluation. If a city deploys a self-organizing traffic light system, it should\nbe monitored and compared with previous systems. This will help to improve the\nsystem. If the system would be an affordable success, its implementation in other\ncities would be promoted.\n6. DISCUSSION\nAs could be seen in the case study, the backtracking between different steps in the\nMethodology is necessary because the behavior of the system cannot be predicted\nfrom the Modeling, i.e. it is not reducible. It might be possible to reason about\nall possible outcomes of simple systems, and then to implement the solution. But\nwhen complexity needs to be dealt with, a mutual feedback between experience\nand reasoning needs to be established, since reasoning alone cannot process all the\ninformation required to predict the behavior of a complex system [Edmonds 2005].\nFor this same reason, it would be preferable for the Control to be distributed.\nEven when a central supercomputer could possibly solve a problem in real time,\nthe information delay caused by data transmission and integration can reduce the\nefficiency of the system. Also, a distributed Control will be more robust, in as\nmuch as if a module malfunctions, the rest of the system can still provide reliable\nsolutions. If a central Control fails, the whole system will stop working.\nThe Simulation and Experiments are strictly necessary in the design of selforganizing systems [Edmonds 2005]. This is because their performance cannot be\nevaluated by purely formal methods [Edmonds and Bryson 2004]. Still, formal\nmethods are necessary in the first stages of the Methodology. I am not suggesting\na trial-and-error search. But since the behavior of a complex system in a complex\nenvironment cannot be predicted completely, the models need to be contrasted\nwith experimentation before they can be validated. This Methodology suggests\none possible path for finding solutions.\nNow the reader might wonder whether the proposed Methodology is a top-down\nor a bottom-up approach. And the answer is: it is both and neither, since (at least)\nhigher and lower levels of abstraction need to be considered simultaneously. The\napproach tests different local behaviors, and observes local and global (and meso)\nperformances, for local and global (and meso) requirements. Thus, the Methodology\ncan be seen as a multi-level approach.\nSince \"conflicts\" between agents need to be solved at more than one level, the\nControl strategies should be carefully chosen and tested. A situation as in the\nprisoner's dilemma [Axelrod 1984] might easily arise, when the \"best\" solution on\none level/timescale is not the best solution on another level/timescale.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f22\n\n*\n\nCarlos Gershenson\n\nMany frictions between agents are due to faulty communication, especially in\nsocial and political relations. If agents do not \"know\" the goals of others, it will\nbe much more difficult to coordinate and increase \u03c3sys . For example, in a social\nsystem, knowing what people or corporations need to fulfill their goals is not so\nobvious. Still, with emerging technologies, social systems perform better in this\nrespect. Already in the early 1970s, the project Cybersin in Chile followed this path\n[Miller Medina 2005]: it kept a daily log of productions and requirements from all\nover the country (e.g. mines, factories, etc.), in order to distribute products where\nthey were needed most; and as quickly as possible. Another step towards providing\nfaster response to the needs of both individuals and social systems can be found in egovernment [Layne and Lee 2001]. A company should also follow these principles to\nbe able to adapt as quickly as possible. It needs to develop \"sensors\" to perceive the\nsatisfactions and conflicts of agents at different levels of abstraction, and needs to\ndevelop fast ways of adapting to emerging conflicts, as well as to changing economic\nenvironment. A tempting solution might be to develop a homogeneous system since,\ne.g., homogeneous societies have fewer conflicts [Durkheim 1984]. This is because all\nthe elements of a homogeneous system pursue the same goals. Thus, less diversity\nis easier to control. However, less diversity will be less able to adapt to sudden\nchanges. Nevertheless, societies cannot be made homogeneous without generating\nconflicts since people are already diverse, and therefore already have a diversity of\ngoals. The legacy [Valckenaers et al. 2003] of social systems gives less freedom to a\ndesigner, since some goals are already within the system. A social Control/mediator\nneeds to satisfy these while trying to satisfy those of the social system.\n7. CONCLUSIONS\nThis paper suggests a conceptual framework and a general methodology for designing and controlling self-organizing systems. The Methodology proposes the\nexploration for proper Control mechanisms/mediators/constraints that will reduce\nfrictions and promote synergy so that elements will dynamically reach a robust and\nefficient solution. The proposed Methodology is general, but certainly it is not the\nonly way to describe self-organizing systems.\nEven if this paper is aimed mainly at engineers, it is rather philosophical. It\npresents no concrete results, but ideas that can be exploited to produce them.\nCertainly, these ideas have their roots in current practices, and many of them are\nnot novel. Still, the aim of this work is not for novelty but for synthesis.\nThe Methodology strives to build artificial systems. Still, these could be used to\nunderstand natural systems using the synthetic method [Steels 1993]. Therefore,\nthe ideas presented here are potentially useful not only for engineering, but also for\nscience.\nThe backtracking ideology is also applicable to this Methodology: it will be\nimproved once applied, through learning from experience. This Methodology is not\nfinal, but evolving. The more this Methodology is used, and in a wider variety of\nareas, the more potentially useful its abstractions will be. For example, would it\nbe a good strategy to minimize the standard deviation of \u03c3's? This might possibly\nincrease stability and reduce the probability of conflict, but this strategy, as any\nother, needs to be tested before it can be properly understood. It is worth noting\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n23\n\nthat apart from self-organizing traffic lights [Gershenson 2005], the Methodology\nis currently being used to develop Ambient Intelligence protocols [Gershenson and\nHeylighen 2004] and to study self-organizing bureaucracies.\nAny system is liable to make mistakes (and will make them in an unpredictable\nenvironment). But a good system will learn from its mistakes. This is the basis\nfor adaptation. It is pointless to attempt to build a \"perfect\" system, since it is\nnot possible to predict future interactions with its environment. What should be\ndone is to build systems that can adapt to their unexpected future and are robust\nenough not to be destroyed in the attempt. Self-organization provides one way to\nachieve this, but there is still much to be done to harness its full potential.\nACKNOWLEDGMENTS\n\nI should like to thank Hugues Bersini, Marco Dorigo, Erden G\u00f6ktepe, Dirk Helbing,\nFrancis Heylighen, Diana Mangalagiu, Peter McBurney, Juan Juli\u00e1n Merelo, Marko\nRodriguez, Frank Schweitzer, Sorin Solomon, and Franco Zambonelli for interesting\ndiscussions and comments. I also wish to thank Michael Whitburn for proof-reading\nan earlier version of the manuscript. This research was partly supported by the\nConsejo Nacional de Ciencia y Teconolg\u0131\u0301a (CONACyT) of M\u00e9xico.\nREFERENCES\nAnderson, P. W. 1972. More is different. Science 177, 393\u2013396.\nAshby, W. R. 1947. The nervous system as physical machine: With special reference to the origin\nof adaptive behavior. Mind 56, 221 (January), 44\u201359.\nAshby, W. R. 1956.\nAn Introduction to Cybernetics.\nhttp://pcp.vub.ac.be/ASHBBOOK.html.\n\nChapman & Hall, London.\n\nAshby, W. R. 1962. Principles of the self-organizing system. In Principles of Self-Organization,\nH. V. Foerster and J. G. W. Zopf, Eds. Pergamon, 255\u2013278.\nAxelrod, R. M. 1984. The Evolution of Cooperation. Basic Books, New York.\nBar-Yam, Y. 1997. Dynamics of Complex Systems. Studies in Nonlinearity. Westview Press.\nhttp://www.necsi.org/publications/dcs/.\nBar-Yam, Y. 2005. About engineering complex systems: Multiscale analysis and evolutionary\nengineering. See Edmonds [2005], 16\u201331. http://necsi.org/projects/yaneer/ESOA04.pdf.\nBeer, S. 1966. Decision and Control. John Wiley and Sons, New York.\nBerners-Lee, T., Hendler, J., and Lassila, O. 2001. The semantic web link to this article\ne-mail this article printer-friendly version subscribe the semantic web link to this article email this article printer-friendly version subscribe the semantic web. Scientific American.\nhttp://www.sciam.com/article.cfm?articleID=00048144-10D2-1C70-84A9809EC588EF21.\nBiham, O., Middleton, A. A., and Levine, D. 1992.\nSelf-organization and a dynamical transition in traffic-flow models.\nPhysical Review A 46, R6124\u2013R6127.\nhttp://dx.doi.org/10.1103/PhysRevA.46.R6124.\nBoehm, B. W. 1988. A spiral model of software development and enhancement. Computer 21, 5,\n61\u201372. http://dx.doi.org/10.1109/2.59.\nBonabeau, E., Dorigo, M., and Theraulaz, G. 1999. Swarm Intelligence: From Natural to\nArtificial Systems. Santa Fe Institute Studies in the Sciences of Complexity. Oxford University\nPress, New York.\nBrockfeld, E., Barlovic, R., Schadschneider, A., and Schreckenberg, M. 2001. Optimizing\ntraffic lights in a cellular automaton model for city traffic. Physical Review E 64, 056132.\nhttp://dx.doi.org/10.1103/PhysRevE.64.056132.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f24\n\n*\n\nCarlos Gershenson\n\nCamazine, S., Deneubourg, J.-L., Franks, N. R., Sneyd, J., Theraulaz, G., and\nBonabeau, E. 2003. Self-Organization in Biological Systems. Princeton University Press.\nhttp://www.pupress.princeton.edu/titles/7104.html.\nCapera, D., Georg\u00e9, J.-P., Gleizes, M.-P., and Glize, P. 2003.\nThe AMAS\ntheory for complex problem solving based on self-organizing cooperative agents.\nIn 1st International Workshop on Theory and Practice of Open Computational\nSystems TAPOCS 2003 at IEEE 12th International Workshop on Enabling\nTechnologies: Infrastructure for Collaborative Enterprises WETICE 2003. 383.\nhttp://csdl.computer.org/comp/proceedings/wetice/2003/1963/00/19630383abs.htm.\nCorning, P. A. 2003. Nature's Magic: Synergy in Evolution and the Fate of Humankind. Cambridge University Press. http://www.complexsystems.org/magic.html.\nCotton, T. 1996. Evolutionary fusion: A customer-oriented incremental life-cycle for Fusion.\nHewlett Packard Journal 47, 4. http://www.hpl.hp.com/hpjournal/96aug/aug96a3.htm.\nde Jong, E. D. 2000. Autonomous formation of concepts and communication. Ph.D. thesis, Vrije\nUniversiteit Brussel. http://www.cs.uu.nl/%7Edejong/thesis/.\nDe Wolf, T. and Holvoet, T. 2005. Towards a methodolgy for engineering self-organising\nemergent systems. In Self-Organization and Autonomic Informatics (I), H. Czap, R. Unland,\nC. Branki, and H. Tianfield, Eds. Frontiers in Artificial Intelligence and Applications, vol. 135.\nIOS Press, 18\u201334. http://www.cs.kuleuven.ac.be/ tomdw/publications/pdfs/2005soas.pdf.\nDe Wolf, T., Samaey, G., and Holvoet, T. 2005.\nEngineering self-organising emergent systems with simulation-based scientific analysis.\nIn Proceedings of the International Workshop on Engineering Self-Organising Applications. Utrecht, The Netherlands,.\nhttp://www.cs.kuleuven.ac.be/ tomdw/publications/pdfs/2005esoa05proc.pdf.\nDi Marzo Serugendo, G. 2004. Trust as an interaction mechanism for self-organising systems.\nIn International Conference on Complex Systems (ICCS'04), Y. Bar-Yam, Ed.\nDi Marzo Serugendo, G., Karageorgos, A., Rana, O. F., and Zambonelli, F., Eds. 2004.\nEngineering Self-Organising Systems, Nature-Inspired Approaches to Software Engineering.\nLecture Notes in Computer Science, vol. 2977. Springer. Revised and extended papers presented\nat the Engineering Self-Organising Applications Workshop, ESOA 2003, held at AAMAS 2003\nin Melbourne, Australia, in July 2003 and selected invited papers from leading researchers in\nself-organisation.\nDorigo, M., Trianni, V., \u015eahin, E., Gross, R., Labella, T. H., Baldassarre, G., Nolfi,\nS., Deneubourg, J.-L., Mondada, F., Floreano, D., and Gambardella, L. 2004. Evolving self-organizing behaviors for a swarm-bot.\nAutonomous Robots 17, 2-3, 223\u2013245.\nhttp://www.swarm-bots.org.\nDurkheim, \u00c9. 1893 (1984). The Division of Labor in Society. The Free Press, New York.\nTranslated by George Simpson.\nEdmonds, B. 1999. What is complexity?: the philosophy of complexity per se with application\nto some examples in evolution. In The Evolution of Complexity, F. Heylighen, J. Bollen, and\nA. Riegler, Eds. Kluwer, Dordrecht, 1\u201318. http://bruce.edmonds.name/evolcomp/.\nEdmonds, B. 2005. Using the experimental method to produce reliable self-organised systems. In Engineering Self Organising Sytems: Methodologies and Applications, S. Brueckner,\nG. Serugendo-Di Marzo, A. Karageorgos, and R. Nagpal, Eds. Lecture Notes in Artificial Intelligence, vol. 3464. Springer, 84\u201399. http://cfpm.org/cpmrep131.html.\nEdmonds, B. and Bryson, J. 2004. The insufficiency of formal design methods - the necessity of\nan experimental approach for the understanding and control of complex mas. In Proceedings\nof the 3rd International Joint Conference on Autonomous Agents & Multi Agent Systems\n(AAMAS'04), N. Jennings, C. Sierra, L. Sonenberg, and M. Tambe, Eds. ACM Press, New\nYork, 938\u2013945. http://cfpm.org/cpmrep128.html.\nFaieta, B. and Huberman, B. A. 1993. Firefly: A synchronization strategy for urban traffic\ncontrol. Tech. Rep. SSL-42, Xerox PARC, Palo Alto.\nFern\u00e1ndez, P. and Sol\u00e9, R. 2004. The role of computation in complex regulatory networks. In\nPower Laws, Scale-Free Networks and Genome Biology, E. V. Koonin, Y. I. Wolf, and G. P.\nKarev, Eds. Landes Bioscience. http://arxiv.org/abs/q-bio.MN/0311012.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n25\n\nGaines, B. R. 1994. The collective stance in modeling expertise in individuals and organizations.\nInt. J. Expert Systems 71, 22\u201351.\nG\u00e4rdenfors, P. 2000. Conceptual Spaces: The Geometry of Thought. Bradford Books. MIT\nPress. http://mitpress.mit.edu/0262572192.\nGershenson, C. 2002. Complex philosophy. In Proceedings of the 1st Biennial Seminar on Philosophical, Methodological & Epistemological Implications of Complexity Theory. La Habana,\nCuba. http://arXiv.org/abs/nlin.AO/0109001.\nGershenson, C. 2004a. Cognitive paradigms: Which one is the best? Cognitive Systems Research 5, 2 (June), 135\u2013156. http://dx.doi.org/10.1016/j.cogsys.2003.10.002.\nGershenson, C. 2004b. Introduction to random boolean networks. In Workshop and Tutorial\nProceedings, Ninth International Conference on the Simulation and Synthesis of Living Systems (ALife IX), M. Bedau, P. Husbands, T. Hutton, S. Kumar, and H. Suzuki, Eds. Boston,\nMA, 160\u2013173. http://uk.arxiv.org/abs/nlin.AO/0408006.\nGershenson, C. 2005.\nSelf-organizing traffic lights.\nComplex Systems 16, 1, 29\u201353.\nhttp://uk.arxiv.org/abs/nlin.AO/0411066.\nGershenson, C., Broekaert, J., and Aerts, D. 2003. Contextual random Boolean networks. In Advances in Artificial Life, 7th European Conference, ECAL 2003 LNAI 2801,\nW. Banzhaf, T. Christaller, P. Dittrich, J. T. Kim, and J. Ziegler, Eds. Springer-Verlag, 615\u2013\n624. http://arxiv.org/abs/nlin.AO/0303021.\nGershenson, C. and Heylighen, F. 2003. When can we call a system self-organizing? In Advances in Artificial Life, 7th European Conference, ECAL 2003 LNAI 2801, W. Banzhaf,\nT. Christaller, P. Dittrich, J. T. Kim, and J. Ziegler, Eds. Springer-Verlag, 606\u2013614.\nhttp://arxiv.org/abs/nlin.AO/0303020.\nGershenson, C. and Heylighen, F. 2004. Protocol requirements for self-organizing artifacts: Towards an ambient intelligence. In Proceedings of International Conference on\nComplex Systems ICCS2004, Y. Bar-Yam, Ed. Boston, MA. Also AI-Lab Memo 04-04,\nhttp://uk.arxiv.org/abs/nlin.AO/0404004.\nGershenson, C. and Heylighen, F. 2005. How can we think the complex? In Managing Organizational Complexity: Philosophy, Theory and Application, K. Richardson, Ed. Information\nAge Publishing, Chapter 3. http://uk.arxiv.org/abs/nlin.AO/0402023.\nGershenson, C., Kauffman, S. A., and Shmulevich, I. 2006. The role of redundancy in\nthe robustness of random boolean networks. In Artificial Life X, Proceedings of the Tenth\nInternational Conference on the Simulation and Synthesis of Living Systems. MIT Press.\nhttp://uk.arxiv.org/abs/nlin.AO/0511018.\nHaken, H. 1981. Synergetics and the problem of selforganization. In Self-Organizing Systems:\nAn Interdisciplinary Approach, G. Roth and H. Schwegler, Eds. Campus Verlag, 9\u201313.\nHales, D. and Edmonds, B. 2003. Evolving social rationality for MAS using \"tags\". In Proceedings of the 2nd International Conference on Autonomous Agents and Multiagent Systems,\nJ. S. Rosenschein, T. Sandholm, M. Wooldridge, and M. Yokoo, Eds. ACM Press, 497\u2013503.\nHelbing, D. 1997. Verkehrsdynamik. Springer, Berlin.\nHelbing, D., Herrmann, H. J., Schreckenberg, M., and Wolf, D. E., Eds. 2000. Traffic and\nGranular Flow '99: Social, Traffic, and Granular Dynamics. Springer, Berlin.\nHelbing, D. and Huberman, B. A. 1998. Coherent moving states in highway traffic. Nature 396,\n738\u2013740.\nHeylighen, F. 2003a.\nMediator evolution.\nTech. rep., Principia Cybernetica.\nhttp://pcp.vub.ac.be/Papers/MediatorEvolution.pdf.\nHeylighen, F. 2003b. The science of self-organization and adaptivity. In The Encyclopedia\nof Life Support Systems. EOLSS Publishers. http://pespmc1.vub.ac.be/Papers/EOLSS-SelfOrganiz.pdf.\nHeylighen, F. and Campbell, D. T. 1995. Selection of organization at the social level: Obstacles\nand facilitators of metasystem transitions. World Futures: the Journal of General Evolution 45,\n181\u2013212. http://pcp.vub.ac.be/Papers/SocialMST.pdf.\nHeylighen, F. and Gershenson, C. 2003. The meaning of self-organization in computing. IEEE\nIntelligent Systems, 72\u201375. http://pcp.vub.ac.be/Papers/IEEE.Self-organization.pdf.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f26\n\n*\n\nCarlos Gershenson\n\nHolland, J. H. 1995. Hidder Order: How Adaptation Builds Complexity. Helix books. AddisonWesley.\nJacobson, I., Booch, G., and Rumbaugh, J. 1999. The Unified Software Development Process. Addison-Wesley Object Technology Series. Addison-Wesley Longman Publishing Co.,\nInc., Boston, MA.\nJakobi, N. 1997. Evolutionary robotics and the radical envelope of noise hypothesis. Adaptive\nBehavior 6, 2, 325\u2013368.\nJen, E., Ed. 2005. Robust Design: A Repertoire of Biological, Ecological, and Engineering Case\nStudies. Santa Fe Institute Studies on the Sciences of Complexity. Oxford University Press.\nhttp://www.santafe.edu/research/publications/bookinforev/jen-info.php.\nJennings, N. R. 2000. On agent-based software engineering. Artificial Intelligence 117, 2, 277\u2013\n296. http://dx.doi.org/10.1016/S0004-3702(99)00107-1.\nJones, P. M., Contractor, N., O'Keefe, B., and Lu, S. C.-Y. 1994. Competence models\nand self-organizing systems: Towards intelligent, evolvable, collaborative support. In Systems,\nMan, and Cybernetics, 1994. 'Humans, Information and Technology'., 1994 IEEE International Conference on. Vol. 1. 367 \u2013 372, vol. 1. http://dx.doi.org/10.1109/ICSMC.1994.399866.\nKaelbling, L. P., Littman, M. L., and Moore, A. W. 1996. Reinforcement learning: A survey.\nJournal of Artificial Intelligence Research 4, 237\u2013285. http://arxiv.org/abs/cs.AI/9605103.\nKauffman, S. A. 1969. Metabolic stability and epigenesis in randomly constructed genetic nets.\nJournal of Theoretical Biology 22, 437\u2013467.\nKauffman, S. A. 1993. The Origins of Order. Oxford University Press.\nKauffman, S. A. 2000. Investigations. Oxford University Press.\nKimura, M. 1983. The Neutral Theory of Molecular Evolution. Cambridge University Press,\nCambridge.\nLayne, K. and Lee, J. 2001. Developing fully functional E-government: A four stage model. Government Information Quarterly 18, 122\u2013136. http://dx.doi.org/10.1016/S0740-624X(01)000661.\nLenaerts, T. 2003. Different levels of selection in artificial evolutionary systems: Analysis and simulation of selection dynamics.\nPh.D. thesis, Vrije Universiteit Brussel.\nhttp://iridia.ulb.ac.be/%7Etlenaert/phd/index.html.\nLendaris, G. G. 1964. On the definition of self-organizing systems. Proceedings of the IEEE .\nMaes, P. 1994. Modeling adaptive autonomous agents. Artificial Life 1, 1&2, 135 \u2013 162. citeseer.ist.psu.edu/maes94modeling.html.\nMichod, R. E. 1997.\nCooperation and conflict in the evolution of individuality. i. multi-level selection of the organism.\nAmerican Naturalist 149, 607\u2013645.\nhttp://eebweb.arizona.edu/Michod/Downloads/Cooperationn0the\nMichod, R. E. 2003. Cooperation and conflict mediation during the origin of multicellularity. In\nGenetic and Cultural Evolution of Cooperation, P. Hammerstein, Ed. MIT Press, Cambridge,\nMA, Chapter 16, 261\u2013307. http://eebweb.arizona.edu/Michod/Downloads/Dahlem\nMiller Medina, E. 2005. The state machine: Politics, ideology, and computation in Chile, 19641973. Ph.D. thesis, MIT. http://stuff.mit.edu/people/eden/proj.html.\nMitchell, M. 1996. An Introduction to Genetic Algorithms. MIT Press.\nNicolis, G. and Prigogine, I. 1977. Self-Organization in Non-Equilibrium Systems: From Dissipative Structures to Order Through Fluctuations. Wiley.\nPrigogine, I. and Herman, R. 1971. Kinetic Theory of Vehicular Traffic. Elsevier, New York.\nRamamoorthy, P., Zhang, S., Fubao, C., and Ramachandran, D. 1993. A new paradigm\nfor the design of nonlinear dynamical systems and self-organizing systems. In Intelligent Control, 1993., Proceedings of the 1993 IEEE International Symposium on. 571\u2013576.\nhttp://dx.doi.org/10.1109/ISIC.1993.397634.\nRiolo, R., Cohen, M. D., and Axelrod, R. M. 2001. Evolution of cooperation without reciprocity. Nature 414, 441\u2013443.\nRojas, R. 1996. Neural Networks: A Systematic Introduction. Springer, Berlin.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\fA General Methodology for Designing Self-Organizing Systems\n\n*\n\n27\n\nRosen, R. 1985. Anticipatory Systems: Philosophical, Mathematical and Methodological Foundations. Pergamon Press. http://www.panmere.com/rosen/det\nSastry, S. and Bodson, M. 1989-1994. Adaptive Control: Stability, Convergence, and Robustness. Prentice-Hall. http://www.ece.utah.edu/%7Ebodson/acscr/.\nSchreckenberg, M. and Wolf, D. E., Eds. 1998. Traffic and Granular Flow '97. Springer,\nSingapore.\nSchweitzer, F. 2003. Brownian Agents and Active Particles. Collective Dynamics in the Natural\nand Social Sciences. Springer Series in Synergetics. Springer, Berlin.\nShalizi, C. R. 2001.\nCausal architecture, complexity and self-organization in time\nseries and cellular automata.\nPh.D. thesis, University of Wisconsin at Madison.\nhttp://www.santafe.edu/projects/CompMech/papers/crs-thesis.html.\nSimon, H. A. 1996. The Sciences of the Artificial , 3rd ed. MIT Press.\nSk\u00e5r, J. and Coveney, P. V., Eds. 2003.\nSelf-Organization: The Quest\nfor the Origin and Evolution of Structure. Phil. Trans. R. Soc. Lond. A\n361(1807).\nProceedings of the 2002 Nobel Symposium on self-organization,\nhttp://www.pubs.royalsoc.ac.uk/phil%5Ftrans%5Fphys%5Fcontent/news/selforg.html.\nSteels, L. 1993. Building agents out of autonomous behavior systems. In The Artificial Life\nRoute to Artificial Intelligence: Building Embodied Situated Agents, L. Steels and R. A. Brooks,\nEds. Lawrence Erlbaum.\nSteels, L. 1998. Synthesising the origins of language and meaning using co-evolution, selforganisation and level formation. In Approaches to the Evolution of Language, J. R. Hurford,\nM. Studdert-Kennedy, and C. Knight, Eds. Cambridge University Press, 384\u2013404.\nTen Haaf, W., Bikker, H., and Adriaanse, D. J. 2002. Fundamentals of Business Engineering\nand Management, A Systems Approach to People and Organisations. Delft University Press.\nTheraulaz, G. and Bonabeau, E. 1999. A brief history of stimergy. Artificial Life 5, 2 (Spring),\n97 \u2013 116. http://mitpress.mit.edu/catalog/item/default.asp?sid=F2804878-FE00-422F-BF582AAA736DA1C6&ttype=6&tid=116.\nTurchin, V. 1977. The Phenomenon of Science. A Cybernetic Approach to Human Evolution.\nColumbia University Press, New York. http://pespmc1.vub.ac.be/POSBOOK.html.\nValckenaers, P., Van Brussel, H., Hadeli, Bochmann, O., Saint Germain, B., and Zamfirescu, C. 2003. On the design of emergent systems: An investigation of integration and\ninteroperability issues. Engineering Applications of Artificial Intelligence 16, 4, 377\u2013393.\nhttp://dx.doi.org/10.1016/S0952-1976(03)00080-0.\nVaz, N. M. and Varela, F. J. 1978. Self and non-sense: An organism-centered approach to\nimmunology. Medical Hypothesis 4, 3, 231\u2013267. http://dx.doi.org/10.1016/0306-9877(78)900051.\nVincent, R. A. and Young, C. P. 1986. Self optimising traffic signal control using microprocessors - the TRRL MOVA strategy for isolated intersections. Traffic Engineering and\nControl 27, 7-8 (July/August), 385\u2013387.\nvon Foerster, H. 1960. On self-organizing systems and their environments. In Self-Organizing\nSystems, M. C. Yovitts and S. Cameron, Eds. Pergamon, 31\u201350.\nvon Neumann, J. 1956. Probabilistic logics and the synthesis of reliable organisms from unreliable\ncomponents. In Automata Studies, C. Shannon and J. McCarthy, Eds. Princeton University\nPress, Princeton.\nvon Neumann, J. 1966. The Theory of Self-Reproducing Automata. University of Illinois Press.\nEdited by A. W. Burks.\nWagner,\nA.\n2004.\nDistributed\nrobustness\nversus\nredundancy\nas\ncauses\nof\nmutational\nrobustness.\nTech.\nRep.\n04-06-018,\nSanta\nFe\nInstitute.\nhttp://www.santafe.edu/research/publications/wpabstract/200406018.\nWagner, A. 2005. Robustness and Evolvability in Living Systems. Princeton University Press,\nPrinceton, NJ. http://www.pupress.princeton.edu/titles/8002.html.\nWatson, R. A. 2002.\nCompositional evolution: Interdisciplinary investigations\nin evolvability, modularity, and symbiosis.\nPh.D. thesis, Brandeis University.\nhttp://demo.cs.brandeis.edu/papers/watson%5Fthesis%5F2002.pdf.\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f28\n\n*\n\nCarlos Gershenson\n\nWiener, N. 1948. Cybernetics; or, Control and Communication in the Animal and the Machine.\nWiley and Sons, New York.\nWilensky, U. 1999. NetLogo. http://ccl.northwestern.edu/netlogo.\nWilensky, U. and Stroup, W. 2002.\nNetLogo HubNet Gridlock model.\nhttp://ccl.northwestern.edu/netlogo/models/HubNetGridlock.\nWolf, D. E., Schreckenberg, M., and Bachem, A., Eds. 1996. Traffic and Granular Flow '95.\nWorld Scientific, Singapore.\nWooldridge, M. 2002. An Introduction to MultiAgent Systems. John Wiley and Sons, Chichester, England. http://www.csc.liv.ac.uk/%7Emjw/pubs/imas/.\nWooldridge, M. and Jennings, N. R. . 1995.\nIntelligent agents: Theory and practice.\nThe Knowledge Engineering Review\n10, 2, 115\u2013152.\nhttp://www.ecs.soton.ac.uk/%7Enrj/download-files/KE-REVIEW-95.ps.\nWooldridge, M., Jennings, N. R., and Kinny, D. 2000. The Gaia methodology for agentoriented analysis and design. Journal of Autonomous Agents and Multi-Agent Systems 3, 3,\n285\u2013312. http://www.ecs.soton.ac.uk/%7Enrj/download-files/jaamas2000.pdf.\nZambonelli, F., Jennings, N. R., and Wooldridge, M. 2003. Developing multiagent systems:\nThe Gaia methodology. ACM Trans on Software Engineering and Methodology 12, 3, 317\u2013370.\nhttp://www.ecs.soton.ac.uk/%7Enrj/download-files/tosem03.pdf.\nZambonelli, F. and Rana, O. F. 2005. Self-organization in distributed systems engineering:\nIntroduction to the special issue. Systems, Man and Cybernetics, Part A, IEEE Transactions\non 35, 3 (May), 313 \u2013 315. http://dx.doi.org/10.1109/TSMCA.2006.846372.\n\nACM Journal Name, Vol. V, No. N, M 20YY.\n\n\f"}