{"id": "http://arxiv.org/abs/physics/0306092v1", "guidislink": true, "updated": "2003-06-12T11:21:06Z", "updated_parsed": [2003, 6, 12, 11, 21, 6, 3, 163, 0], "published": "2003-06-12T11:21:06Z", "published_parsed": [2003, 6, 12, 11, 21, 6, 3, 163, 0], "title": "Simulation in ALICE", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=physics%2F0306153%2Cphysics%2F0306097%2Cphysics%2F0306081%2Cphysics%2F0306114%2Cphysics%2F0306172%2Cphysics%2F0306167%2Cphysics%2F0306181%2Cphysics%2F0306126%2Cphysics%2F0306133%2Cphysics%2F0306012%2Cphysics%2F0306142%2Cphysics%2F0306176%2Cphysics%2F0306066%2Cphysics%2F0306124%2Cphysics%2F0306149%2Cphysics%2F0306127%2Cphysics%2F0306065%2Cphysics%2F0306016%2Cphysics%2F0306175%2Cphysics%2F0306182%2Cphysics%2F0306111%2Cphysics%2F0306085%2Cphysics%2F0306152%2Cphysics%2F0306001%2Cphysics%2F0306042%2Cphysics%2F0306057%2Cphysics%2F0306032%2Cphysics%2F0306185%2Cphysics%2F0306135%2Cphysics%2F0306071%2Cphysics%2F0306138%2Cphysics%2F0306020%2Cphysics%2F0306010%2Cphysics%2F0306080%2Cphysics%2F0306197%2Cphysics%2F0306025%2Cphysics%2F0306095%2Cphysics%2F0306155%2Cphysics%2F0306030%2Cphysics%2F0306190%2Cphysics%2F0306027%2Cphysics%2F0306063%2Cphysics%2F0306091%2Cphysics%2F0306150%2Cphysics%2F0306103%2Cphysics%2F0306022%2Cphysics%2F0306072%2Cphysics%2F0306188%2Cphysics%2F0306023%2Cphysics%2F0306105%2Cphysics%2F0306040%2Cphysics%2F0306183%2Cphysics%2F0306067%2Cphysics%2F0306073%2Cphysics%2F0306192%2Cphysics%2F0306113%2Cphysics%2F0306064%2Cphysics%2F0306171%2Cphysics%2F0306169%2Cphysics%2F0306130%2Cphysics%2F0306087%2Cphysics%2F0306011%2Cphysics%2F0306047%2Cphysics%2F0306120%2Cphysics%2F0306116%2Cphysics%2F0306121%2Cphysics%2F0306074%2Cphysics%2F0306131%2Cphysics%2F0306036%2Cphysics%2F0306100%2Cphysics%2F0306005%2Cphysics%2F0306139%2Cphysics%2F0306045%2Cphysics%2F0306013%2Cphysics%2F0306108%2Cphysics%2F0306002%2Cphysics%2F0306015%2Cphysics%2F0306099%2Cphysics%2F0306004%2Cphysics%2F0306077%2Cphysics%2F0306054%2Cphysics%2F0306156%2Cphysics%2F0306084%2Cphysics%2F0306125%2Cphysics%2F0306101%2Cphysics%2F0306187%2Cphysics%2F0306078%2Cphysics%2F0306033%2Cphysics%2F0306157%2Cphysics%2F0306137%2Cphysics%2F0306049%2Cphysics%2F0306184%2Cphysics%2F0306082%2Cphysics%2F0306191%2Cphysics%2F0306198%2Cphysics%2F0306028%2Cphysics%2F0306196%2Cphysics%2F0306151%2Cphysics%2F0306092%2Cphysics%2F0306170%2Cphysics%2F0306038&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Simulation in ALICE"}, "summary": "ALICE, the experiment dedicated to the study of heavy ion collisions at the\nLHC, uses an object-oriented framework for simulation, reconstruction and\nanalysis (AliRoot) based on ROOT. Here, we describe the general ALICE\nsimulation strategy and those components of the framework related to\nsimulation. Two main requirements have driven the development of the simulation\ncomponents. First, the possibility to run different transport codes with the\nsame user code for geometry and detector response has led to the development of\nthe Virtual Monte Carlo concept. Second, simulation has to provide tools to\nefficiently study events ranging from low-multiplicity pp collisions to Pb-Pb\ncollisions with up to 80000 primary particles per event. This has led to the\ndevelopment of a variety of collaborating generator classes and specific\nclasses for event merging.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=physics%2F0306153%2Cphysics%2F0306097%2Cphysics%2F0306081%2Cphysics%2F0306114%2Cphysics%2F0306172%2Cphysics%2F0306167%2Cphysics%2F0306181%2Cphysics%2F0306126%2Cphysics%2F0306133%2Cphysics%2F0306012%2Cphysics%2F0306142%2Cphysics%2F0306176%2Cphysics%2F0306066%2Cphysics%2F0306124%2Cphysics%2F0306149%2Cphysics%2F0306127%2Cphysics%2F0306065%2Cphysics%2F0306016%2Cphysics%2F0306175%2Cphysics%2F0306182%2Cphysics%2F0306111%2Cphysics%2F0306085%2Cphysics%2F0306152%2Cphysics%2F0306001%2Cphysics%2F0306042%2Cphysics%2F0306057%2Cphysics%2F0306032%2Cphysics%2F0306185%2Cphysics%2F0306135%2Cphysics%2F0306071%2Cphysics%2F0306138%2Cphysics%2F0306020%2Cphysics%2F0306010%2Cphysics%2F0306080%2Cphysics%2F0306197%2Cphysics%2F0306025%2Cphysics%2F0306095%2Cphysics%2F0306155%2Cphysics%2F0306030%2Cphysics%2F0306190%2Cphysics%2F0306027%2Cphysics%2F0306063%2Cphysics%2F0306091%2Cphysics%2F0306150%2Cphysics%2F0306103%2Cphysics%2F0306022%2Cphysics%2F0306072%2Cphysics%2F0306188%2Cphysics%2F0306023%2Cphysics%2F0306105%2Cphysics%2F0306040%2Cphysics%2F0306183%2Cphysics%2F0306067%2Cphysics%2F0306073%2Cphysics%2F0306192%2Cphysics%2F0306113%2Cphysics%2F0306064%2Cphysics%2F0306171%2Cphysics%2F0306169%2Cphysics%2F0306130%2Cphysics%2F0306087%2Cphysics%2F0306011%2Cphysics%2F0306047%2Cphysics%2F0306120%2Cphysics%2F0306116%2Cphysics%2F0306121%2Cphysics%2F0306074%2Cphysics%2F0306131%2Cphysics%2F0306036%2Cphysics%2F0306100%2Cphysics%2F0306005%2Cphysics%2F0306139%2Cphysics%2F0306045%2Cphysics%2F0306013%2Cphysics%2F0306108%2Cphysics%2F0306002%2Cphysics%2F0306015%2Cphysics%2F0306099%2Cphysics%2F0306004%2Cphysics%2F0306077%2Cphysics%2F0306054%2Cphysics%2F0306156%2Cphysics%2F0306084%2Cphysics%2F0306125%2Cphysics%2F0306101%2Cphysics%2F0306187%2Cphysics%2F0306078%2Cphysics%2F0306033%2Cphysics%2F0306157%2Cphysics%2F0306137%2Cphysics%2F0306049%2Cphysics%2F0306184%2Cphysics%2F0306082%2Cphysics%2F0306191%2Cphysics%2F0306198%2Cphysics%2F0306028%2Cphysics%2F0306196%2Cphysics%2F0306151%2Cphysics%2F0306092%2Cphysics%2F0306170%2Cphysics%2F0306038&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "ALICE, the experiment dedicated to the study of heavy ion collisions at the\nLHC, uses an object-oriented framework for simulation, reconstruction and\nanalysis (AliRoot) based on ROOT. Here, we describe the general ALICE\nsimulation strategy and those components of the framework related to\nsimulation. Two main requirements have driven the development of the simulation\ncomponents. First, the possibility to run different transport codes with the\nsame user code for geometry and detector response has led to the development of\nthe Virtual Monte Carlo concept. Second, simulation has to provide tools to\nefficiently study events ranging from low-multiplicity pp collisions to Pb-Pb\ncollisions with up to 80000 primary particles per event. This has led to the\ndevelopment of a variety of collaborating generator classes and specific\nclasses for event merging."}, "authors": ["F. Carminati", "A. Morsch"], "author_detail": {"name": "A. Morsch"}, "author": "A. Morsch", "arxiv_comment": "Talk from the 2003 Computing in High Energy and Nuclear Physics\n  (CHEP03), La Jolla, Ca, USA, March 2003, 6 pages, LaTeX, 5 eps figures. PSN\n  TUMT004", "links": [{"href": "http://arxiv.org/abs/physics/0306092v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/physics/0306092v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "physics.comp-ph", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "physics.comp-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/physics/0306092v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/physics/0306092v1", "journal_reference": null, "doi": null, "fulltext": "Computing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003\n\nSimulation in ALICE\nF. Carminati, A. Morsch\non behalf of the ALICE Offline Project\n\narXiv:physics/0306092v1 [physics.comp-ph] 12 Jun 2003\n\nCERN, 1211 Geneva 23, Switzerland\n\nALICE, the experiment dedicated to the study of heavy ion collisions at the LHC, uses an object-oriented\nframework for simulation, reconstruction and analysis (AliRoot) based on ROOT. Here, we describe the general ALICE simulation strategy and those components of the framework related to simulation. Two main\nrequirements have driven the development of the simulation components. First, the possibility to run different\ntransport codes with the same user code for geometry and detector response has led to the development of the\nVirtual Monte Carlo concept. Second, simulation has to provide tools to efficiently study events ranging from\nlow-multiplicity pp collisions to Pb-Pb collisions with up to 80000 primary particles per event. This has led to\nthe development of a variety of collaborating generator classes and specific classes for event merging.\n\n1. Introduction\nALICE, is the experiment dedicated to the study\nof heavy ion collisions at the LHC. It is a multipurpose detector with excellent tracking and secondary\nvertex capabilities, electron and muon detection and\na high resolution \u03b3-spectrometer. Although smaller in\nsize as compared to the large LHC detectors ATLAS\nand CMS, ALICE is of similar complexity. Instead\nof a complete description of the detector we mention\nhere exemplarily that close to the vertex six layers\nof silicon trackers (pixel-, drift-, and strip-detectors)\nare used mainly for secondary vertex reconstruction.\nThe main tracking device is a very large Time Projection Chamber (TPC) covering approximatively two\nunits of pseudo-rapidity. Moreover, ALICE uses almost all known particle identification techniques including Cerenkov and Transition Radiation detectors\nwhose detailed response simulation is a demanding\ntask.\nHeavy ion collisions produce a very large number of\nparticles in the final state. Current predictions range\nfrom 1400-8000 charged particles in the central unit\nof rapidity. This is a challenge for the reconstruction\nand analysis algorithms. The development of these\nalgorithms requires a predictive and precise simulation. Particles have to be transported in the detectors and structural elements. The latter produce secondary particles which can increase significantly the\ndetector occupancy and their correct prediction is important. For those particles passing through sensitive\ndetector areas a detailed detector response simulation\nis necessary.\nTransport and detector response simulation is only\none part of the simulation task. Of comparable complexity and diversity is the primary event simulation.\nIt comprises both the heavy ion physics specific soft\nphysics and the hard probes like heavy flavor and jet\nproduction. In addition, ALICE has to simulate all\npossible collision systems ranging from pp, p-A, intermediate mass A\u2013A, to Pb\u2013Pb as well as collision geometries ranging from central to peripheral collisions.\nTUMT004\n\nBefore we describe the different components of the\nsimulation framework we outline in the following section the ALICE simulation strategy as it has been\ndeveloped on the basis of the above mentioned challenges and requirements.\n\n2. ALICE simulation strategy\nIn order to cope with the challenges described in\nthe introduction, the ALICE Offline Project has developed a coherent simulation framework as an integral part of the AliRoot [1] object oriented (C++)\nframework for simulation, reconstruction and analysis based on ROOT [2]. It comprises primary event\n(physics) simulation, particle transport, detailed detector response simulation and fast simulation. Its\nmain components are the Virtual MC, the detector\nclasses containing the user code, a set of collaborating classes for primary particle simulation, and base\nclasses for fast simulation.\nSince the complex description of the detector geometries and of the detector responses has to be accomplished by a relatively small community of physicists it is essential to provide a stable framework which\ndoes not require rewriting of the user code in the\ncase that one of its underlying components changes.\nThe most important of these underlying components\nis the transport MC. However, in traditional simulation environments the user code for geometry description, and detector response simulation (hit generation) depends entirely on the transport MC. ALICE uses currently Geant3 [3] in production, FLUKA\n[4] and Geant4 [5] are both options for simulations in\nthe near future. Other alternatives might come up after LHC start-up. For this reason the ALICE Offline\nProject has developed the concept of the Virtual MC\nwhich provides an insulation layer between the user\ncode and the underlying MC.\nAs already outlined in the introduction also primary\nevent generation is a complex task. It requires the\ngeneration of uncorrelated underlying events, corre-\n\n1\n\n\f2\n\nComputing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003\n\nFigure 1: Component view of the AliRoot simulation framework.\n\nlation between particles and a multitude of so called\nhard probes as well as any possible mixture between\nthese components. Generators come as external generators packages like Pythia and HIJING as well as\nsimple user written generators based on parameterisations or so called afterburners which introduce particle correlations in existing events. The simulation\nframework provides a set of collaborating base classes\nas building blocks for this variety of generators. These\nwill be described in section 5.\nThe size of events produced in heavy ion collisions\nand the variety of physics signals and collision systems\nwhich have to be studied require enormous amounts\nof computing time and data storage. The framework\nhas to help to reduce the required resources as much\nas possible. One such tool is known as merging or embedding and will be described in the following section.\nAnother tool is fast simulation, which is needed\nfor high statistics studies of signals and backgrounds\nfor which the detector acceptances, reconstruction efficiencies, and resolutions have been already determined and parameterised using detailed simulations.\nThe framework provides a set of base classes providing a uniform interface and facilitating the realisation\nof fast simulation applications.\nLast not least it should be mentioned that the ALICE simulation framework provides a rigorous approach concerning MC truth using the class AliStack\ndeveloped for this purpose. The history of each particle resulting into a detector hit and all primary partiTUMT004\n\ncles are recorded. The user has the possibility to write\nadditional information if needed.\n\n3. Simulation in the AliRoot framework\n3.1. Components\nFig. 1 shows a component view of the AliRoot simulation framework. The central module, STEER, provides the interface classes for the detector description\nand data structures. It also provides the run steering\nand particle stack implementations required by the\nVirtual MC. The run steering communicates with the\nevent generator module via the interface class AliGenerator, with the detector specific modules via AliDetector, and with the transport MC via the Virtual\nMC main interface class TVirtualMC. The user code\nis structured according to the different sub-detectors.\nNo dependencies between these detector modules are\nallowed. The detector modules contain their specific\nimplementations of AliDetector and data structures\nlike AliHit and AliDigit.\nGenerator packages like HIJING and the TVirtualMC implementations TGeant3, TGeant4 and\nTFluka appear as external modules. They are not\nneeded for compilation and linking. The choice for\ntheir usage can be made by the user during runtime.\n\n\fComputing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003\n\n3.2. Simulated data\nThe AliRoot simulation framework generates data\nat different stages of the simulation process. First,\nthere are the so-called hits that represent the precise information about a particle passing a detector\nobtained from the transport MC, i.e. in most cases\nenergy deposition and position. These hits are then\ntransformed into the signal produced by the detector,\nsummable digits that correspond to the raw data before addition of noise and threshold subtraction. The\nintroduction of summable digits was necessary in order\nto realise the event merging strategy in which a underlying signal free event is combined with a signal event\nbefore completing the digitization process producing\nthe digits which contain the information of raw data.\nThe importance of this procedure for the simulation\nof heavy ion collisions lies in the fact that one underlying event can be used for several signal events thus\nreducing computation time and data storage space.\n\n4. The Virtual Monte Carlo\nThe VirtualMC interface has been developed by the\nALICE Offline project in order to make the user code\nfor detector simulation independent from the underlying transport MC. A detailed description can be found\nin Ref. [6].\nAn illustration of the VirtualMC concept is shown\nin Fig. 2. A development that is ongoing (see Ref.\n[7]) is to separate the physics and transport part of\nthe VirtualMC from the geometry modeler. This has\nthe advantage that the geometry can be used independently from transport for reconstruction and visualisation. Moreover, the implementation of the geometry modeler can be optimised independently from the\ntransport MC.\nCurrently ALICE uses TGeant3, the Geant3 implementation of TVirtualMC in production. TGeant4 is\nused for simulations related to Geant4 physics validations. The TFluka implementation is almost completed and an intensive testing phase will follow before\nthe first release. Currently it uses FLUGG [8] for geometry navigation. This is expected to be be replaced\nby the ROOT geometry modeler.\n\n5. Event generators\n5.1. Simulation of heavy ion collisions\nThe simulations of physical processes are confronted\nwith several problems:\n\u2022 Existing generators give different answers on parameters such as expected multiplicities, transverse momentum dependence and rapidity dependence at LHC energies.\nTUMT004\n\n\u2022 Most of the physics signals, like Hyperon decays, high transverse momentum phenomena,\nopen charm and beauty, quarkonia etc., are not\nproperly reproduced by the existing generators.\n\u2022 Simulation of small cross sections would demand\nprohibitively long runs to simulate a number of\nevents that is commensurable with the expected\nnumber of detected events in the experiment.\n\u2022 The existing generators do not provide for\nevent topologies like momentum correlations,\nazimuthal flow etc.\nTo allow nevertheless efficient simulations ALICE\nhas adopted a framework that allows for a number of\noptions:\n\u2022 The simulation framework provides an interface\nto external generators, like HIJING and DPMJET.\n\u2022 A parameterised \"signal free\" underlying event\nwith multiplicity as a parameter is provided.\n\u2022 Rare signals can be generated using the interface\nto external generators like PYTHIA or simple\nparameterisations of transverse momentum and\nrapidity spectra defined in function libraries.\n\u2022 The framework provides a tool to assemble\nevents from different signal generators (event\ncocktails).\n\u2022 The framework provides tools to combine underlying events and signal events on the primary\nparticle level (cocktail) and on the digit level\n(merging).\n\u2022 After-Burners are used to introduce particle correlations in a controlled way.\nThe main parts of the implementation of this strategy are described below.\n\n5.2. Interfaces\nTo facilitate the usage of different generators we\nhave developed an abstract generator interface called\nAliGenerator, see Fig. 3. The objective is to provide\nthe user with an easy and coherent way to study a\nvariety of physics signals as well as full set of tools for\ntesting and background studies. This interface allows\nthe study of full events, event-by-event analysis, single\nprocesses and a mixture of both, Cocktail Events.\nDuring creation of a AliGenerator object it registers itself to the run steering object. The latter owns\nand provides access to the particle stack of type AliStack, so that the method AliGenerator::Generate()\ncan write particles to it. Alternatively a stack can be\n\n3\n\n\f4\n\nComputing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003\n\nFigure 2: Illustration of the Virtual MC concept.\n\nFigure 3: AliGenerator is the base class which has the\nresponsibility to generate the primary particles of an\nevent. Some realisations of this class do not generate the\nparticles themselves but delegate the task to an external\ngenerator like PYTHIA through the TGenerator\ninterface.\n\ndirectly connected to the AliGenerator object in order\nto use particle production stand-alone for fast simulation tasks or in order to create several events before a\ncombination of them is written to the main stack.\n5.2.1. External generators\n\nSeveral event generators are available via the abstract ROOT class that implements the generic generator interface, TGenerator. Through implementations of this abstract base class we wrap FORTRAN MonteCarlo codes like PYTYIA, HERWIG\nTUMT004\n\nand HIJING that are thus accessible from the AliRoot classes. In particular the interface to PYTHIA\nused with PDFLIB includes the use of nuclear structure functions.\nAliGenerator derived classes like AliGenPythia or\nAliGenHijing combine the external particle production by delegation to TGenerator with their main task\nwriting particles to the stack. In addition simplified configuration of the external generators is provided. Predefined simulation configurations like minimum bias or jet-production help the user to perform\neasily simple simulation tasks.\nAn interesting byproduct of this design is that\nin a ROOT session the external generators can be\nused interactively. Run time configuration, particle\nproduction and analysis can be performed from the\ncommand-line interface.\n5.2.2. Parameterisations\n\nIn many cases, the expected transverse momentum\nand rapidity distributions of particles are known. In\nother cases the effect of variations in these distributions must be investigated. In both situations it is\nappropriate to use generators that produce primary\nparticles and their decays sampling from parametrised\nspectra. To meet the different physics requirements in\na modular way, the parameterisations are stored in independent function libraries wrapped into classes that\ncan be plugged into the generator. This is schematically illustrated in Fig. 4 where four different genera-\n\n\fComputing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003\nof the slow nucleon generator with a generator that\ncan provide a collision geometry using AliGenCocktail. Communication between the two is via the class\nAliCollisionGeometry.\n5.2.4. Afterburner\nFigure 4: AliGenParam is a realisation of AliGenerator\nthat generates particles using parameterised transverse\nmomentum and pseudo rapidity distributions. Instead of\ncoding a fixed number of parameterisations directly into\nthe class implementations, user defined parametrisation\nlibraries (AliGenLib) can be connected at run time\nallowing for maximum flexibility.\n\nFigure 5: The AliCocktail generator is a realisation of\nAliGenerator which does not generate particles itself but\ndelegates this task to a list of objects of type\nAliGenerator that can be connected as entries\n(AliGenCocktailEntry) at run time. In this way different\nphysics channels can be combined in one event.\n\ntor libraries can be loaded via the abstract generator\ninterface.\n5.2.3. Event cocktails\n\nIt is customary in heavy ion event generation to superimpose different signals on an event to tune the reconstruction algorithms. In other cases the user needs\nthe possibility to assemble events by combining different particle types and parameterisations.\nThis is possible in AliRoot via the so-called cocktail generator (Fig. 5). This creates events from userdefined particle cocktails by choosing as \"ingredients\"\na list of generators. Through its recursive design AliGenCocktail is at the same time a generator and a\ncontainer class for generators. The generation task is\nperformed by delegating to the registered generators.\nAnother important application of AliGenCocktail\nhas been found for the simulation of p-A collisions.\nGenerators like HIJING can simulate p-A collisions\nbut they do not simulate slow nucleons. The detection\nof these slow nucleons is important for the determination of the centrality of the collisions (event geometry). Simple parameterisations exist for their production we have designed base classes AliGenSlowNucleons and AliSlowNucleonModel for this purpose. They\nneed, however, the event collision geometry as an input. An easy solution was to combine the instance\nTUMT004\n\nThe modularity of the event generator implementation allows at the same time easy integration with\nthe simulation steering class AliRun and with the objects that are responsible for changing the output of\nevent generators or for assembling new events making\nuse of the input of several events. These processors\nare generally called Afterburners. They are especially\nneeded to introduce a controlled (parameterised) particle correlation into an otherwise uncorrelated particle sample. In AliRoot this task is further simplified\nby the implementation of the stack class AliStack that\ncan be connected to both AliRun and AliGenerator.\nCurrently afterburners are used for two particle correlation simulations and analysis and for the simulation\nof azimuthal flow.\n\n6. Fast simulation\nDetailed detector simulation is needed together\nwith reconstruction to evaluate the acceptance, efficiency and resolution for specific physics probes. Owing to the high particle multiplicity per event this\nanalysis can be based on a few thousand events. Many\ntypes of physics analysis, such as D meson reconstruction from hadronic decay channels, and trigger studies have to make use of millions of events. Computing\nresources are in general not available for such high\nstatistics simulations.\nTo reach the required sample size, fast simulation\nmethods based on meaningful parameterisations of the\nresults from detailed and consequently slow simulations are applied. The systematic error introduced by\nthe parameterisations is in general small compared to\nthe reduction of the statistical error. This is particularly true for the studies of the invariant mass continuum below a resonance.\nIt is hard to find a common denominator for fast\nsimulation methods since they are very specific to the\nanalysis task. As a minimum abstraction, we have designed base classes that allow for a representation of\nthe detector or detector systems as a set of parameterisations of acceptance, efficiency and resolution. The\nMuon Spectrometer fast simulation has been implemented using these classes.\nAnother interesting development concerns the fast\nsimulation of the resolution and efficiency of tracking\nin the central barrel. In this approach full tracking is\nperformed for the inner tracking system (ITS), which\nis needed for detailed secondary vertex reconstruction\nstudies. After this, TPC resolution and efficiency are\n\n5\n\n\f6\n\nComputing in High Energy and Nuclear Physics, La Jolla, California, March 24-28, 2003\nobtained from the track parameters at the inner radius\nof the TPC, using a parameterisation.\n\n7. Conclusions\nThe ALICE Offline Project has developed a coherent simulation framework for detector and physics performance studies in the AliRoot Framework based on\nROOT. The main simulation components are the Virtual MC Interface and event generator interfaces tailored to the needs of the heavy ion community\nThe framework has proven its maturity and functionality in the large MC production that has been\nperformed for the studies related to the ALICE\nPhysics Performance Report. The framework is still\nconfronted with new requirements from both physics\nstudies and new detector elements under study, most\nrecently the proposed electromagnetic calorimeter together with the ideas of studying jet physics with the\nALICE detector. The easiness with which such new\nelements can be introduced are the consequence of our\nmodular approach.\n\nReferences\n[1] R. Brun, P. Buncic, F. Carminati, A. Morsch,\nF. Rademakers, K. Safarik on behalf of the ALICE collaboration, \"The AliRoot framework, status and perspectives\", in these proceedings.\n[2] http://root.cern.ch\n[3] R. Brun, F. Bruyant, M. Maire, A.C. McPherson,\nP. Zanarini, GEANT3 User Guide, CERN Data\nHandling Division DD/EE/84-1 (1985)\n\nTUMT004\n\n[4] A.Fass\u00f2, A.Ferrari, P.R.Sala, \"Electron-photon\ntransport in FLUKA: status\", Proceedings of\nthe MonteCarlo 2000 Conference, Lisbon, October 23-26 2000, A.Kling, F.Barao, M.Nakagawa,\nL.Tavora, P.Vaz - eds., Springer-Verlag Berlin,\np.159-164 (2001).\nA.Fass\u00f2, A.Ferrari, J.Ranft, P.R.Sala, \"FLUKA:\nStatus and Prospective for Hadronic Applications\",\nProceedings of the MonteCarlo 2000 Conference,\nLisbon, October 23-26 2000, A.Kling, F.Barao,\nM.Nakagawa, L.Tavora, P.Vaz - eds. , SpringerVerlag Berlin, p.955-960 (2001).\n[5] S. Agostinelli et al., \"Geant4 - A Simulation Toolkit\", CERN-IT-20020003, KEK Preprint\n2002-85, SLAC-PUB-9350, submitted to Nuclear\nInstruments and Methods A.\n[6] D. Adamova, V. Berejnoi, R. Brun, F. Carminati, A. Fass\u00f2, E. Fut\u00f3, I. Gonzalez, I. Hrivnacova,\nA. Morsch on behalf of the ALICE Offline Project,\n\"The Virtual MonteCarlo\", in these proceedings.\n[7] R. Brun, A. Gheata, and M. Gheata on behalf of\nthe ALICE Offline Project, \"A geometrical modeler for HEP\", in these proceedings.\n[8] M. Campanella, A. Ferrari, P.R. Sala, and\nS. Vanini, \"Reusing Code from FLUKA and\nGEANT4 geometry\", ATLAS Internal Note ATLSOFT 98-039 (1998)\nM. Campanella, A. Ferrari, P.R. Sala and\nS. Vanini, \"First Calorimeter Simulation with the\nFLUGG prototype\", ATLAS Internal Note ATLSOFT-99-004 (1999)\n\n\f"}