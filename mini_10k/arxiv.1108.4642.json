{"id": "http://arxiv.org/abs/1108.4642v1", "guidislink": true, "updated": "2011-08-23T15:54:02Z", "updated_parsed": [2011, 8, 23, 15, 54, 2, 1, 235, 0], "published": "2011-08-23T15:54:02Z", "published_parsed": [2011, 8, 23, 15, 54, 2, 1, 235, 0], "title": "A note on efficient computation of hybridization number via softwired\n  clusters", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1108.0020%2C1108.2877%2C1108.4247%2C1108.5724%2C1108.3545%2C1108.1561%2C1108.2043%2C1108.0789%2C1108.2898%2C1108.2349%2C1108.4642%2C1108.2692%2C1108.1143%2C1108.3177%2C1108.3685%2C1108.5408%2C1108.3818%2C1108.3976%2C1108.1123%2C1108.5149%2C1108.1082%2C1108.3873%2C1108.3937%2C1108.4592%2C1108.0475%2C1108.4571%2C1108.2025%2C1108.1487%2C1108.1165%2C1108.0053%2C1108.4693%2C1108.5682%2C1108.0978%2C1108.3037%2C1108.0865%2C1108.5464%2C1108.1641%2C1108.2485%2C1108.1939%2C1108.0545%2C1108.0973%2C1108.1205%2C1108.1913%2C1108.5867%2C1108.5079%2C1108.2954%2C1108.0299%2C1108.0533%2C1108.2016%2C1108.3034%2C1108.3786%2C1108.4334%2C1108.4617%2C1108.3750%2C1108.2855%2C1108.4348%2C1108.3967%2C1108.3530%2C1108.0837%2C1108.2306%2C1108.4461%2C1108.5633%2C1108.3187%2C1108.4972%2C1108.4836%2C1108.1727%2C1108.1455%2C1108.1580%2C1108.2637%2C1108.5714%2C1108.1741%2C1108.3853%2C1108.1851%2C1108.3348%2C1108.2292%2C1108.3886%2C1108.4963%2C1108.5212%2C1108.2006%2C1108.0182%2C1108.2706%2C1108.3098%2C1108.2477%2C1108.2364%2C1108.4208%2C1108.3604%2C1108.5604%2C1108.4071%2C1108.3908%2C1108.5869%2C1108.5181%2C1108.2457%2C1108.5621%2C1108.2860%2C1108.3950%2C1108.5685%2C1108.0032%2C1108.1886%2C1108.0746%2C1108.2960%2C1108.4691&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "A note on efficient computation of hybridization number via softwired\n  clusters"}, "summary": "Here we present a new fixed parameter tractable algorithm to compute the\nhybridization number r of two rooted binary phylogenetic trees on taxon set X\nin time (6r)^r.poly(n), where n=|X|. The novelty of this approach is that it\navoids the use of Maximum Acyclic Agreement Forests (MAAFs) and instead\nexploits the equivalence of the problem with a related problem from the\nsoftwired clusters literature. This offers an alternative perspective on the\nunderlying combinatorial structure of the hybridization number problem.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1108.0020%2C1108.2877%2C1108.4247%2C1108.5724%2C1108.3545%2C1108.1561%2C1108.2043%2C1108.0789%2C1108.2898%2C1108.2349%2C1108.4642%2C1108.2692%2C1108.1143%2C1108.3177%2C1108.3685%2C1108.5408%2C1108.3818%2C1108.3976%2C1108.1123%2C1108.5149%2C1108.1082%2C1108.3873%2C1108.3937%2C1108.4592%2C1108.0475%2C1108.4571%2C1108.2025%2C1108.1487%2C1108.1165%2C1108.0053%2C1108.4693%2C1108.5682%2C1108.0978%2C1108.3037%2C1108.0865%2C1108.5464%2C1108.1641%2C1108.2485%2C1108.1939%2C1108.0545%2C1108.0973%2C1108.1205%2C1108.1913%2C1108.5867%2C1108.5079%2C1108.2954%2C1108.0299%2C1108.0533%2C1108.2016%2C1108.3034%2C1108.3786%2C1108.4334%2C1108.4617%2C1108.3750%2C1108.2855%2C1108.4348%2C1108.3967%2C1108.3530%2C1108.0837%2C1108.2306%2C1108.4461%2C1108.5633%2C1108.3187%2C1108.4972%2C1108.4836%2C1108.1727%2C1108.1455%2C1108.1580%2C1108.2637%2C1108.5714%2C1108.1741%2C1108.3853%2C1108.1851%2C1108.3348%2C1108.2292%2C1108.3886%2C1108.4963%2C1108.5212%2C1108.2006%2C1108.0182%2C1108.2706%2C1108.3098%2C1108.2477%2C1108.2364%2C1108.4208%2C1108.3604%2C1108.5604%2C1108.4071%2C1108.3908%2C1108.5869%2C1108.5181%2C1108.2457%2C1108.5621%2C1108.2860%2C1108.3950%2C1108.5685%2C1108.0032%2C1108.1886%2C1108.0746%2C1108.2960%2C1108.4691&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Here we present a new fixed parameter tractable algorithm to compute the\nhybridization number r of two rooted binary phylogenetic trees on taxon set X\nin time (6r)^r.poly(n), where n=|X|. The novelty of this approach is that it\navoids the use of Maximum Acyclic Agreement Forests (MAAFs) and instead\nexploits the equivalence of the problem with a related problem from the\nsoftwired clusters literature. This offers an alternative perspective on the\nunderlying combinatorial structure of the hybridization number problem."}, "authors": ["Steven Kelk"], "author_detail": {"name": "Steven Kelk"}, "author": "Steven Kelk", "links": [{"href": "http://arxiv.org/abs/1108.4642v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1108.4642v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "q-bio.PE", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "q-bio.PE", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1108.4642v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1108.4642v1", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "A note on efficient computation of hybridization number\nvia softwired clusters\nSteven Kelk\n\narXiv:1108.4642v1 [q-bio.PE] 23 Aug 2011\n\nDepartment of Knowledge Engineering (DKE), Maastricht University\nP.O. Box 616, 6200 MD Maastricht, The Netherlands. steven.kelk@maastrichtuniversity.nl\n\nAbstract. Here we present a new fixed parameter tractable algorithm to compute the\nhybridization number r of two rooted binary phylogenetic trees on taxon set X in time\n(6r)r * poly(n), where n = |X |. The novelty of this approach is that it avoids the use\nof Maximum Acyclic Agreement Forests (MAAFs) and instead exploits the equivalence\nof the problem with a related problem from the softwired clusters literature. This offers\nan alternative perspective on the underlying combinatorial structure of the hybridization\nnumber problem.\n\n1\n\nIntroduction\n\nFor notation and background we refer the reader to [2,1]. Let T = {T1 , T2 } be a set of two rooted\nbinary phylogenetic trees on X , where |X | = n. We may assume without loss of generality that T1\nand T2 do not have any non-trivial common subtrees, so |X | \u2265 3. Let C = Cl(T ) = Cl(T1 )\u222aCl(T2 )\nbe the set of clusters obtained from T . Clearly, every taxon in X appears in at least one cluster\nin C, and |C| \u2264 4(n \u2212 1), because a binary tree on n taxa contains exactly 2(n \u2212 1) edges.\nNow, we know from [3] that r(C) = h(T ) where h(T ) is the hybridization number of the two\ntrees T1 and T2 . That is, the minimum number of reticulations required to display the two trees,\nh(T ), is equal to the minimum number of reticulations required to represent the union of the\nclusters obtained from the two trees, r(C). Hence we can concentrate on computing r(C). In [2,3]\nit is also proven that there exists a binary network N that represents C such that r(C) = r(N ), so\nwe can further restrict our attention to binary networks.\nIn [1] an algorithm with running time f (r(C))*poly(n) is given to compute r(C) for an arbitrary\nset of clusters, where f (r(C)) is a function of r(C) that does not depend on n and poly(n) is a\nfunction of the form nO(1) . However, the running time of the algorithm in [1] is purely theoretical.\nIn the case of clusters obtained from two binary trees the running time can be more heavily\noptimized, which is the motivation for this note.\n\n2\n\nA fixed parameter tractable algorithm for computing the\nhybridization number of two binary trees\n\nGiven a cluster set C and x, y \u2208 X , we write x \u2192C y if and only if every non-singleton cluster in\nC containing x, also contains y 1 . We say that a taxon x \u2208 X is a terminal if there does not exist\nx0 \u2208 X such that x 6= x0 and x \u2192C x0 . In [2] it is proven that \u2205 \u2282 X 0 \u2282 X is an ST-set of C if\nand only if X 0 \u2208 Cl(T1 ) \u2229 Cl(T2 ) and the two subtrees induced by X 0 in T1 and T2 are identical.\nGiven that T1 and T2 are assumed to have no non-trivial common subtrees it follows that C has\nno non-singleton ST-sets, a property we call ST-collapsed [1].\nObservation 1. Let C be an ST-collapsed set of clusters on X such that r(C) \u2265 1. Then the\nrelation \u2192C is a partial order on X , the terminals are the maximal elements of the partial order\nand there is at least one terminal.\n1\n\nNote that, if a taxon x appears in only one cluster, {x}, then (vacuously) x\u2192C y for all y 6= x.\n\n\fProof. The relation \u2192C is clearly reflexive and transitive. To see that it is anti-symmetric, suppose\nthere exist two elements x 6= y \u2208 X such that x\u2192C y and y\u2192C x. Then we have that, for every\nnon-singleton cluster C \u2208 C, C \u2229{x, y} is either equal to \u2205 or {x, y} i.e. C is compatible with {x, y}.\nFurthermore, the only clusters that can possibly be in C|{x, y} are {x}, {y} and {x, y} and these\nare all mutually compatible. So {x, y} is an ST-set, contradicting the fact that C is ST-collapsed.\nHence \u2192C is a partial order. The fact that the terminals are the maximal elements of the partial\norder then follows immediately from their definition. Finally, it is well known that every partial\norder on a finite set of elements contains at least one maximal element (because otherwise a cycle\nexists which contradicts the anti-symmetry property).\nLet T be a phylogenetic tree on X . For a vertex u of T we define X (u) \u2286 X to be the set of\nall taxa that can be reached from u by directed paths. For a taxon x \u2208 X we define W T (x), the\nwitness set for x in T , as X (u) \\ {x}, where u is the parent of x. A critical property of W T (x) is\nthat, for any non-singleton cluster C \u2208 Cl(T ) that contains x, W T (x) \u2286 C [2].\nObservation 2. Let C = Cl(T ) be a set of clusters on X , where T = {T1 , T2 } is a set of two\nbinary trees on X with no non-trivial common subtrees, and r(C) \u2265 1. Then for any x \u2208 X the\nfollowing statements are equivalent: (1) x is a terminal of C; (2) there exist incompatible clusters\nC1 , C2 \u2208 C such that C1 \u2229 C2 = {x}; (3) W T1 (x) \u2229 W T2 (x) = \u2205.\nProof. We first prove that (2) implies (1). For x0 6\u2208 C1 \u222aC2 it holds that x6\u2192C x0 , because x \u2208 C1 but\nx0 6\u2208 C1 . For x0 \u2208 C1 \\ C2 it cannot hold that x\u2192C x0 , because x \u2208 C2 but x0 6\u2208 C2 , and this holds\nsymmetrically for x0 \u2208 C2 \\ C1 . Hence x is a terminal. We now show that (1) implies (3). Suppose\n(3) does not hold. Then there exists some taxon x0 \u2208 W T1 (x) \u2229 W T2 (x). So every non-singleton\ncluster in C that contains x also contains x0 , irrespective of whether the cluster came from T1 or\nT2 . But then x\u2192C x0 , so (1) does not hold. Hence (1) implies (3). Finally, we show that (3) implies\n(2). Note that (3) implies that in both T1 and T2 the parent of x is not the root. If this was not\nso, then (wlog) W T1 (x) = X \\ {x}, and combining this with the fact that W T1 (x), W T2 (x) 6= \u2205\nwould contradict (3). Hence W T1 (x) \u222a {x} \u2208 Cl(T1 ) and W T2 (x) \u222a {x} \u2208 Cl(T2 ), from which (2)\nfollows.\nObservation 3. Let C = Cl(T ) be a set of clusters on X , where T = {T1 , T2 } is a set of two\nbinary trees on X with no non-trivial common subtrees, and r(C) \u2265 1. Then, for any two taxa\nx 6= y \u2208 X , x\u2192C y if and only if y \u2208 W T1 (x) \u2229 W T2 (x).\nProof. Suppose x\u2192C y, but (wlog) y 6\u2208 W T1 (x). The parent of x in T1 cannot be the root, because\nthen W T1 (x) = X \\ {x} which contains y. So there is an edge in T1 whose head is the parent of\nx. Let C \u2208 C be the cluster represented by this edge, then C = {x} \u222a W T1 (x). W T1 (x) is nonempty and contains neither x nor y, so C is a non-singleton cluster which contains x but not y. So\nx6\u2192C y. In the other direction, suppose y \u2208 W T1 (x) \u2229 W T2 (x). Let C \u2208 C be a non-singleton cluster\nthat contains x. Every non-singleton cluster C \u2208 C is from Cl(T1 ) or Cl(T2 ), so W T1 (x) \u2286 C or\nW T2 (x) \u2286 C. In any case it follows that y \u2208 C.\nLemma 1. Let C = Cl(T ) be a set of clusters on X , where T = {T1 , T2 } is a set of two binary\ntrees on X with no non-trivial common subtrees, and r(C) \u2265 1. Let x be any taxon in C. If x is\nnot a terminal of C then there exists a terminal y such that x\u2192C y.\nProof. C is ST-collapsed because T1 and T2 contain no non-trivial common subtrees. Hence, by\nObservation 1, we know that \u2192C is a partial order on X and the terminals, of which there is at\nleast one, are the maximal elements of the partial order. The result then follows immediately from\nthe transitivity and anti-symmetry property of partial orders.\nLemma 2. Let C = Cl(T ) be a set of clusters on X , where T = {T1 , T2 } is a set of two binary\ntrees on X with no non-trivial common subtrees, and r(C) \u2265 1. Then there exists x \u2208 X such that\nr(C \\ {x}) < r(C).\n\n\fProof. Consider a binary network N which represents C, where r(N ) = r(C). By acyclicity N\ncontains at least one Subtree Below a Reticulation (SBR) [2], i.e. a node u with indegree-1 whose\nparent is a reticulation, and such that no reticulation can be reached by a directed path from u.\nLet X 0 be the set of taxa reachable from u by directed paths. X 0 is an ST-set, so |X 0 | = 1 (because\nC is ST-collapsed). Let x be the single taxon in X 0 . Deleting x and its reticulation parent from N\n(and tidying up the resulting network in the usual fashion) creates a network N 0 on X \\ {x} with\nr(N 0 ) < r(N ) that represents C \\ {x}.\nLemma 3. Let C = Cl(T ) be a set of clusters on X , where T = {T1 , T2 } is a set of two binary\ntrees on X with no non-trivial common subtrees, and r(C) \u2265 1. Then for each x \u2208 X it holds that\nr(C) \u2212 1 \u2264 r(C \\ {x}) \u2264 r(C).\nProof. The second \u2264 is immediate because removing a taxon from a cluster set cannot raise the\nreticulation number of the cluster set. The first \u2264 holds because in [2] it is shown how, given any\nnetwork N 0 on X \\ {x} that represents C \\ {x}, we can extend N 0 to obtain a network N on X\nthat represents C such that r(N ) \u2264 r(N 0 ) + 1.\nRecall from [2] the definition of an ST-set tree sequence of a cluster set C. Let (S1 , S2 , ..., Sp )\nbe an ST-set tree sequence of C of minimum length, where C = Cl(T ) = Cl(T1 ) \u222a Cl(T2 ). In [2] it\nis proven that p = r(C).\nLemma 4. Let C = Cl(T ) be a set of clusters on X , where T = {T1 , T2 } is a set of two binary\ntrees on X with no non-trivial common subtrees, and r(C) \u2265 1. Suppose there exist distinct taxa\na, b, c \u2208 X such that {a, b} and {b, c} are both clusters in C. Then there exists x \u2208 {a, b, c} such\nthat r(C \\ {x}) = r(C) \u2212 1.\nProof. We know from [2] that there exists an ST-set tree sequence (S1 , ..., Sp ) of C where p = r(C).\nIt is clear that at least one of {a, b, c} has to occur in one of the Si sets, because otherwise the\ntwo clusters {a, b} and {b, c} survive even after Sp has been removed, contradicting the fact that\nit is a tree sequence. Now, let 1 \u2264 i \u2264 p be the smallest i such that Si \u2229 {a, b, c} 6= \u2205. Note\nthat, at the point just before the ST-set Si is removed, none of {a, b}, {b, c}, {a, c}, {a, b, c} are\nST-sets (because of the incompatible pair of clusters {a, b} and {b, c}). So |Si \u2229 {a, b, c}| < 3.\nFurthermore, |Si \u2229 {a, b, c}| =\n6 2 because at least one of the two clusters {a, b} and {b, c} will be\nincompatible with Si . So |Si | = 1 and Si \u2286 {a, b, c}. Let x be the single taxon in Si . This means\nthat (S1 , ..., Si\u22121 , Si+1 , ..., Sp ) is an ST-set tree sequence of C \\ {x} of length p \u2212 1. We conclude\nthat r(C \\ {x}) < r(C) and (by Lemma 3) we have that r(C \\ {x}) = r(C) \u2212 1.\nTheorem 1. Let C = Cl(T ) be a set of clusters on X , where T = {T1 , T2 } is a set of two binary\ntrees on X with no non-trivial common subtrees, and r(C) \u2265 1. Then at least one of the following\ntwo conditions holds: (1) there exist distinct taxa a, b, c \u2208 X such that {a, b} and {b, c} are both\nclusters in C; (2) there exists a taxon x \u2208 X such that r(C \\ {x}) = r(C) \u2212 1 and x is either a\nterminal of C or is in some size-2 cluster with a terminal of C.\nProof. Towards a counter-example, assume that the claim does not hold for C. For each x \u2208 X\nthat is not a terminal, let M (x) be an arbitrary terminal such that x\u2192C M (x), which must exist\nby Lemma 1. The mapping M will remain unchanged for the rest of the proof.\nLet N be an arbitrary binary network that represents C such that r(N ) = r(C). Due to the\nfact that C is ST-collapsed, every SBR consists of exactly one taxon, so we can unambiguously\nidentify each SBR by its corresponding taxon. Let R(N ) \u2286 X be the set of SBRs of N . Clearly, if\nR(N ) contains a terminal we are done (by the same argument as used in the proof of Lemma 2).\nFor x \u2208 R(N ), we define the detach and re-hang above a terminal (DRHT) operation as follows.\nWe first delete x and tidy up the resulting network in the usual fashion, which causes the parent\nreticulation of x and its reticulation edges to disappear. This creates a network N 0 on X \\ {x}\nthat represents C \\ {x}, where r(N 0 ) = r(N ) \u2212 1 (by Lemma 3).2 Let \u03b4 be the root of N 0 and\n2\n\nNote that Lemma 3 also prevents that, prior to the tidying-up phase, a multi-edge is created, because\nthen both the parent reticulation of x and the reticulation at the end of the multi-edge would disappear\nin the tidying-up phase, meaning that r(N 0 ) \u2264 r(N ) \u2212 2.\n\n\fp be the parent of M (x) in N 0 . We construct a new network N 00 from N 0 by deleting the edge\n(p, M (x)), introducing new nodes p0 , r, r0 , adding the edges (p, p0 ), (p0 , M (x)), (p0 , r), (\u03b4, r), (r, r0 )\nand finally labelling r0 with x. This potentially raises the outdegree of the root above 2 (i.e. makes\nthe network non-binary) but this could easily be addressed by replacing the root with a chain of\nnodes of indegree at most 1 and outdegree 2 (see e.g. [3]); the exposition is easier to follow if we\npermit a high-degree root. As observed in [2] N 00 represents C. To summarise the argument from\n[2], let C \u2208 C be a non-singleton cluster such that x 6\u2208 C. Clearly C is represented by N 0 . The edge\nin N 0 that represents C will still represent C in N 00 if we switch the reticulation edge (p0 , r) off\nand the reticulation edge (\u03b4, r) on. So suppose C is a non-singleton cluster that does contain x.\nIn this case M (x) \u2208 C \\ {x}. So the edge in N 0 that represents C \\ {x} can represent C in N 00 by\nswitching the reticulation edge (p0 , r) on and the reticulation edge (\u03b4, r) off. Hence N 00 represents\nall clusters C \u2208 C and r(N 00 ) = r(N ). Note that, in general, R(N 00 ) 6= R(N ).\nWe will repeatedly apply the DRHT operation to transform N into a network with a \"canonical\" form. Specifically, choose an arbitrary x \u2208 R(N ) and let R0 = {x}. Let N 0 = N and let\nN 1 be the network obtained by applying the DRHT operation to x in N . We apply the following\nprocedure, starting with i = 0:\n(1) If R(N i+1 ) contains a terminal then stop.\n(2) If R(N i+1 ) \\ Ri = \u2205 then stop.\n(3) Otherwise, let y be an arbitrary taxon in R(N i+1 ) \\ Ri , let Ri+1 = Ri \u222a {y} and let N i+2 be\nobtained by applying the DRHT operation to y in N i+1 . Increment i and go back to (1).\nThe procedure will definitely stop because with each new iteration |Ri+1 | > |Ri |. Let N \u2217 be\nthe final network obtained. Note that if the procedure stops at line (1) the proof is complete: N \u2217\nis a network that represents C with r(C) reticulations that has a terminal as a SBR. So we can\nassume that the procedure stops at line (2). Clearly, there are no terminals in R(N \u2217 ). Furthermore,\nfor each x \u2208 R(N \u2217 ) we know that at some iteration a DRHT operation was performed on x, because otherwise the procedure could continue for at least one more iteration. In the iteration when\nthis happens, the tail of one reticulation edge (of the parent reticulation of x) is attached to the\nroot, and the other \"just above\" M (x) i.e. at p0 . In subsequent iterations M (x) will never undergo\na DRHT operation, because it is a terminal. Also, x is not a terminal (and thus is not in the range\nof M ) so the edge between x and its parent reticulation will never be subdivided by a DRHT operation. Furthermore, both reticulation edges will remain intact because, after the tidying-up phase,\nthe DRHT operation only subdivides edges whose head is a taxon. In fact, the only relevant change\nthat can happen is that the edge (p0 , M (x)) is subdivided by later DRHT operations; specifically,\nDRHT operations applied to some non-terminal y 6= x such that M (x) = M (y). Whether or not\nthis happens, it follows that in N \u2217 for every x \u2208 R(N \u2217 ) one parent of the (parent reticulation of)\nx is the root, and the other parent is a node t(x) such that a directed tree-path (i.e. a path that\ncontains no reticulations) exists from t(x) to M (x).\nWe will continue to focus on N \u2217 . We say that a directed path is a root-reticulation path if it\nstarts at the root and terminates at a reticulation. The reticulation length of such a path is the\nnumber of reticulations in it (including the end node). Observe that the last node r on a rootreticulation path of maximum length must be (the parent reticulation of) an SBR. If this was not\nso then a previously unvisited reticulation r\u2217 6= r is reachable by a directed path from r, thus\ncontradicting the assumption that the root-reticulation path had maximum reticulation length.\nConsider an arbitrary x0 \u2208 R(N \u2217 ) corresponding to the SBR at the end of a root-reticulation\npath of maximum reticulation length. Let x be the taxon in R(N \u2217 ) such that M (x) = M (x0 ) and,\namongst all such taxa, most recently underwent a DRHT operation; it might be that x = x0 . Note\nthat, by construction, x is also at the end of a root-reticulation path of maximum reticulation\nlength. Furthermore, one parent of (the parent reticulation of) x is the root, and the other is a\nnode t(x) such that (t(x), M (x)) is an edge in N \u2217 . We are now ready for the core argument in the\nproof. We walk backwards from t(x) towards the root until we encounter a vertex u for which one\nof the following three mutually exclusive cases holds: (a) u is a reticulation; (b) u is a tree-node\n\n\f(i.e. a node that is not a reticulation) from which some taxon y \u2208 X \\ M (x) can be reached by a\ndirected tree-path; (c) u is the root and (b) does not hold.\nBefore commencing with the case analysis we argue that N \u2217 has a specific form. Let t be an\nintermediate node on the directed path from u to t(x). We know t is a tree-node from which no\ntaxon (other than M (x)) can be reached by a directed tree-path. So all maximal directed treepaths starting at t that do not terminate at M (x), must terminate at the parent of a reticulation\nr. But then there exists a root-reticulation path of maximum reticulation length terminating at r,\nso r is actually the parent of an SBR. Let x0 be the taxon corresponding to this SBR. We know\n(by construction of N \u2217 ) that the non-root parent of r can reach M (x0 ) by a directed tree-path. If\nM (x0 ) 6= M (x) then (b) would actually have held for node t, because merging the two directed\ntree-paths would create a directed tree-path from t to M (x0 ), and the backwards walk would have\nterminated earlier. So M (x) = M (x0 ) and hence (t, r) is an edge in N \u2217 . From this we can conclude\nthat, for each intermediate node t, the child of t that does not lie on the path from u to t(x), is (the\nparent reticulation of) an SBR, and moreover all such SBRs map to M (x). We now commence\nthe case analysis.\nCase (a). In this case M (x) is the only taxon reachable by directed tree-paths from the child of\nreticulation u. This is depicted in Figure 1. Consider the network N \u2217\u2217 obtained from N \u2217 by deleting M (x) and suppressing its parent; in particular, consider how this changes Figure 1. Clearly,\nN \u2217\u2217 represents C \\ {M (x)}. Now, there is some ST-set tree sequence of C \\ {M (x)} that begins\n({x}, {x0 }, . . . , {x00 }, because singletons are always ST-sets. Each time one of these ST-sets is removed from N \u2217\u2217 the reticulation number of N \u2217\u2217 drops by exactly one, except at the point when\n{x00 } is removed, because at this point the reticulation u will also disappear, causing the reticulation number of the network to drop by two. Hence we can conclude that C \\ {M (x)} has an ST-set\ntree sequence of length r(N \u2217 ) \u2212 1 = r(C) \u2212 1, and we are done.\nCase (b). Let y 6= M (x) be the taxon that can be reached by a directed tree-path from u.\nThis is depicted in Figure 2. M (x) is a terminal, so there must exist some non-singleton cluster\nC \u2208 C such that M (x) is in C, but y is not in C. Critically, the only edges that can represent such\na cluster lie on the path from u to t(x). Hence there exists R0 \u2286 R(N \u2217 ) such that C = R0 \u222a M (x)\nand for all x0 \u2208 R0 , M (x0 ) = M (x). So for each x0 \u2208 R0 we know that x0 \u2192C M (x). Hence in both T1\nand T2 the parent of M (x) must be reachable by a directed path from the parent of x0 (possibly of\nlength 0). Suppose there exist y 0 , z 0 \u2208 X such that y 0 \u2208 W T1 (M (x)), z 0 \u2208 W T2 (M (x)) and neither\ny 0 nor z 0 is in R0 . But then every non-singleton cluster in C that contains M (x), contains either y 0\nor z 0 . Hence C 6\u2208 C, which is obviously not possible. So there must be some element x00 of R0 that\nappears in (wlog) W T1 (M (x)). But there must also be a directed path from the parent of x00 in T1\nto the parent of M (x) in T1 . So x00 must be a sibling of M (x), i.e. {x00 , M (x)} \u2208 C. Furthermore,\nx00 is an SBR, and M (x) is a terminal, so we are done.\nCase (c). In this case the network must look like Figure 3, because the maximum reticulation\nlength of a root-reticulation path is 1. M (x) is in at least one non-singleton cluster C (otherwise\nit would not be a terminal) so there again exists R0 \u2286 R(N \u2217 ) such that C = R0 \u222a M (x) and for\nall x0 \u2208 R0 , M (x0 ) = M (x). (In this case R(N \u2217 ) = X \\ {M (x)}). The rest of the analysis is the\nsame as case (b).\nLemma 5. Let C be an ST-collapsed set of clusters on X such that r(C) \u2265 1. Then C contains at\nmost 3 * r(C) terminals.\nProof. Given that C is ST-collapsed, we know that there exists a binary network N with r(N ) =\nr(C) that represents C such that N can be obtained by performing the leaf-hanging operation to\nsome r(C)-reticulation generator [1]. The 1-reticulation and 2-reticulation generators are shown\nin Figure 4. Recall that the edges of a generator are called edge sides and that the nodes of a\ngenerator with indegree-2 and outdegree-0 are called node sides. For a generator G we let I(G) be\n\n\froot\nu\n\nx \u0301 \u0301\nt(x)\nx \u0301\nM(x)\nx\n\nFig. 1. This is case (a) in the proof of Theorem 1. Here u is a reticulation and the only taxon\nreachable by a directed tree-path from the child of u is M (x). Each intermediate node on the path\nfrom u to M (x) is the tail of a reticulation edge that feeds into (the parent reticulation of) an\nSBR; the other reticulation edge is attached to the root. All these SBRs x, x0 ,...,x00 are such that\nM (x) = M (x0 ) = ... = M (x00 ).\n\nroot\n\nu\ny\n\nx \u0301 \u0301\nt(x)\nx \u0301\nM(x)\n\nx\n\nFig. 2. This is case (b) in the proof of Theorem 1. Here u is a tree-node and there is a taxon\ny 6= M (x) reachable by a directed tree-path from u. Each intermediate node on the path from\nu to M (x) is the tail of a reticulation edge that feeds into (the parent reticulation of) an SBR;\nthe other reticulation edge is attached to the root. All these SBRs x, x0 ,...,x00 are such that\nM (x) = M (x0 ) = ... = M (x00 ).\n\n\froot = u\n\nx \u0301 \u0301\nt(x)\nx \u0301\nM(x)\n\nx\n\nFig. 3. This is case (c) in the proof of Theorem 1. Here u is the root and X = {x, x0 , . . . , x00 } \u222a\n{M (x)}. Each intermediate node on the path from u to M (x) is the tail of a reticulation edge\nthat feeds into (the parent reticulation of) an SBR; the other reticulation edge is attached to the\nroot. All these SBRs x, x0 ,...,x00 are such that M (x) = M (x0 ) = ... = M (x00 ).\nany maximum size subset of edge sides such that, for every two sides s 6= s0 in I(G), there is no\ndirected path from the head of s to the tail of s0 such that all nodes on the path (including the\nhead of s and the tail of s0 ) are tree-nodes. We let R(G) be the set of node sides of G, and we\ndefine t(G) as |R(G)| + |I(G)|. We define t(r) (where r \u2265 1) as the maximum value of t(G) ranging\nover all r-reticulation generators G. Observe that, if r(C) = r, then t(r) is an upper bound on the\nnumber of terminals in C. This follows because there can be at most one terminal per edge side\nand, more generally, it is not possible to place two terminals x 6= y on the sides of the generator\nsuch that a directed tree-path exists from the parent of x to the parent of y, because then x\u2192C y.\nTo prove the lemma we will show that t(r) \u2264 3r for r \u2265 1.\nWe will prove this by induction. The base case r = 1 is straightforward. There can be\nat most three terminals placed on the 1-reticulation generator: one on the node side and one\non each of the two edges whose head is the node side, see Figure 4. (The cluster set C =\n{{a, b}, {b, c}, {d, c}, {e, d}}, for which r(C) = 1, shows that three terminals is actually possible).\nObserve that, by acyclicity, every generator has at least one node side. Furthermore, if we (1)\ndelete a node side s from an r-reticulation generator, (2) delete all leaves that are created (nodes\nwith indegree-1 and outdegree-0) and (3) suppress all nodes with indegree and outdegree both\nequal to 1, we obtain an (r \u2212 1)-reticulation generator. For example, observe how applying steps\n(1)-(3) to any 2-reticulation generator creates the unique 1-reticulation generator.\nNow, for the sake of contradiction assume that r > 1 is the smallest value such that t(r) > 3r.\nLet G be an r-reticulation generator such that t(G) \u2265 3r + 1. Let I(G) be a subset of the edge\nsides, as defined above, such that t(G) = |R(G)| + |I(G)|. Locate an arbitrary node side s of G.\nWe will show that deleting s and applying steps (1)-(3) as described above will create an (r \u2212 1)generator G0 such that t(G0 ) \u2265 t(G) \u2212 3, yielding a contradiction on the assumed minimality of r.\nThere are several cases, conditional on the positions of the tails of the two edges that enter s.\nIn case (i) the two tails are distinct and both have indegree-2 and outdegree-1. In this case,\nby the maximality of I(G), both the edges entering s will be in I(G). Hence, |I(G0 )| = |I(G)| \u2212 2\nand |R(G0 )| = |R(G)| + 1, so t(G0 ) = t(G) \u2212 1.\nIn case (ii) the two tails are distinct and both have indegree-1 and outdegree-2. Clearly |R(G0 )| =\n|R(G)| \u2212 1. Let u be the tail of the first edge that enters s. Let p(u) be the parent of u and c(u) the\nchild of u not equal to s. The critical observation is that at most one of (u, c(u)) and (p(u), u) is\n\n\fin I(G). So deleting s will delete the edge (u, s) from I(G), if it is there, and if one of (u, c(u)) and\n(p(u), u) is in I(G) then this can be deleted and replaced by the new edge (p(u), c(u)). The same\nanalysis holds for the second edge (v, s) entering s. Hence |I(G0 )| \u2265 |I(G)| \u2212 2, and this completes\nthis case. Note that the analysis still holds if (wlog) p(v) = u, because then at most one of the\nthree edges (p(u), u), (u, v), (v, c(v)) will be in I(G), and if this occurs this edge can be replaced\nby the new edge (p(u), c(v)).\nIn case (iii) both tails are distinct, one tail has indegree-2 and outdegree-1 and the other\ntail has indegree-1 and outdegree-2. Then, by combining the insights from the first two cases,\n|R(G0 )| = |R(G)| and |I(G0 )| \u2265 |I(G)| \u2212 2.\nFinally, in case (iv) the two tails are the same vertex u i.e. s is the head of a multi-edge.\nNote that at most two of the three edges (p(u), u), (u, s), (u, s) can be in I(G). Now, suppose p(u)\nhas indegree-2 and outdegree-1. Then |R(G0 )| = |R(G)| and |I(G0 )| \u2265 |I(G)| \u2212 2. In the case that\np(u) has indegree-1 and outdegree-2 we have that |R(G0 )| = |R(G)| \u2212 1, and let p0 be the parent\nof p(u) and c0 be the child of p(u) not equal to u. Again, at most one of the two edges (p0 , p(u))\nand (p(u), c0 ) will be in I(G), and if necessary this can be replaced by the new edge (p0 , c0 ). So\n|I(G0 )| \u2265 |I(G)| \u2212 2.\n\n1\n\n2a\n\n2e\n\n2b\n\n2c\n\n2f\n\n2d\n\n2g\n\nFig. 4. The single 1-reticulation generator and the seven 2-reticulation generators.\n\nLemma 6. Let C = Cl(T ) be a set of clusters on X , where T = {T1 , T2 } is a set of two binary\ntrees on X with no non-trivial common subtrees, and r(C) \u2265 1. Then there exists X 0 \u2286 X such\nthat (1) |X 0 | \u2264 6 * r(C) and (2) there exists x \u2208 X 0 such that r(C \\ {x}) = r(C) \u2212 1. Furthermore\nsuch a set X 0 can be computed in polynomial time.\n\n\fProof. If situation (1) from the statement of Theorem 1 holds then we can simply take X 0 =\n{a, b, c}, so |X 0 | = 3 \u2264 6 * r(C). Otherwise we are in situation (2) and we take X 0 to be the union\nof all terminals of C plus all taxa that appear in some size-2 cluster of C with some terminal. From\nLemma 5 we know that there are at most 3 * r(C) terminals in C. Observe that each such terminal\ncan be in at most one size-2 cluster, because otherwise there would exist two incompatible size-2\nclusters i.e. situation (1) of Theorem 1 would hold. Hence there can be at most 3 * r(C) nonterminals that appear in size-2 clusters with terminals, from which |X 0 | \u2264 6 * r(C) follows. Given\nthe characterisation described in Observation 2, and the fact that |C| \u2264 4(n \u2212 1), it is easy to see\nthat the set X 0 can be computed in (low-order) polynomial time.\nTheorem 2. Let C = Cl(T ) be a set of clusters on X , where T = {T1 , T2 } is a set of two binary\ntrees on X . Then r(C) = h(T ) can be computed in time (6r)r * poly(n) time, where r = r(C) and\nn = |X |.\nProof. The algorithm is simple. We repeat the following steps until a compatible cluster set (i.e.\na set of clusters that can be represented by a tree) is created: (1) collapse any common subtrees\ninto single taxa (adjusting C as necessary), this can be done in (low-order) polynomial time, (2)\nconstruct the set X 0 described in Lemma 6 and then (3) \"guess\" an element x \u2208 X 0 such that\nr(C \\ {x}) = r(C) \u2212 1.\nAt each iteration the guessing can be simulated simply by trying all (at most) 6r elements in\nX 0 . (Note that the X 0 sets that arise will never have more than 6r elements because removing taxa\nfrom a cluster set cannot raise the reticulation number of the cluster set). If we traverse this search\ntree in breadth-first fashion and stop as soon as we have created a compatible cluster set then the\ndepth of the search tree will equal r = r(C), requiring at most \u0398((6r)r ) guesses in total.\n\n3\n\nConclusion\n\nWe have presented a new fixed parameter tractable algorithm for computing the hybridization\nnumber of two binary phylogenetic trees. The algorithm is unusual in the sense that it attacks the\nproblem indirectly: it works within the softwired clusters model (which does not require the full\ntopology of the input trees to be preserved) and links the optima together using the unification\nresults in [3,2]. We hope that this will stimulate new insights into the underlying combinatorial\nstructure of the hybridization number problem.\n\nReferences\n1. S. M. Kelk and C. Scornavacca. Constructing minimal phylogenetic networks from softwired clusters is\nfixed parameter tractable, 2011. Submitted, preprint available at http://arxiv.org/abs/1108.3653.\n2. S. M. Kelk, C. Scornavacca, and L. J. J. van Iersel. On the elusiveness of clusters, 2011. To appear in\nIEEE/ACM Transactions on Computational Biology and Bioinformatics, preprint available at http:\n//arxiv.org/abs/1103.1834.\n3. L. J. J. van Iersel and S. M. Kelk. When two trees go to war. Journal of Theoretical Biology, 269(1):245\u2013\n255, 2011.\n\n\f"}