{"id": "http://arxiv.org/abs/0907.0404v1", "guidislink": true, "updated": "2009-07-02T15:19:39Z", "updated_parsed": [2009, 7, 2, 15, 19, 39, 3, 183, 0], "published": "2009-07-02T15:19:39Z", "published_parsed": [2009, 7, 2, 15, 19, 39, 3, 183, 0], "title": "Agent based Model for providing optimized, synchronized and failure free\n  execution of workflow process", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0907.4219%2C0907.0991%2C0907.3637%2C0907.3579%2C0907.1882%2C0907.1198%2C0907.2669%2C0907.0520%2C0907.3199%2C0907.3066%2C0907.0404%2C0907.5594%2C0907.3400%2C0907.4518%2C0907.3639%2C0907.3740%2C0907.0307%2C0907.0625%2C0907.1420%2C0907.0666%2C0907.1210%2C0907.4713%2C0907.5286%2C0907.1762%2C0907.5109%2C0907.4051%2C0907.0978%2C0907.3969%2C0907.2754%2C0907.3245%2C0907.5466%2C0907.3634%2C0907.3928%2C0907.0915%2C0907.0264%2C0907.0027%2C0907.2026%2C0907.3009%2C0907.4093%2C0907.3337%2C0907.4472%2C0907.5133%2C0907.4095%2C0907.0682%2C0907.1406%2C0907.1844%2C0907.1644%2C0907.2882%2C0907.3233%2C0907.3393%2C0907.5509%2C0907.0245%2C0907.4328%2C0907.5564%2C0907.4904%2C0907.3488%2C0907.0784%2C0907.4261%2C0907.5004%2C0907.0270%2C0907.3538%2C0907.1458%2C0907.4939%2C0907.4240%2C0907.1733%2C0907.2565%2C0907.2718%2C0907.5421%2C0907.5353%2C0907.0559%2C0907.3383%2C0907.3911%2C0907.2140%2C0907.0542%2C0907.2243%2C0907.3720%2C0907.4951%2C0907.0817%2C0907.1007%2C0907.0362%2C0907.1179%2C0907.4140%2C0907.5071%2C0907.1505%2C0907.5000%2C0907.0088%2C0907.0131%2C0907.0086%2C0907.0462%2C0907.2777%2C0907.2912%2C0907.3078%2C0907.4617%2C0907.3719%2C0907.4080%2C0907.4989%2C0907.3840%2C0907.1637%2C0907.1786%2C0907.2905%2C0907.4040&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Agent based Model for providing optimized, synchronized and failure free\n  execution of workflow process"}, "summary": "The main objective of this paper is to provide an optimized solution and\nalgorithm for the execution of a workflow process by ensuring the data\nconsistency, correctness, completeness among various tasks involved. The\nsolution proposed provides a synchronized and failure free flow of execution\namong various tasks involved in a workflow process. A synchronizing agent is\nbound at a very low level, i.e. with the workflow activity or task to get the\ndesired goals to be done and an algorithm is provided to show the execution of\nworkflow process completely.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0907.4219%2C0907.0991%2C0907.3637%2C0907.3579%2C0907.1882%2C0907.1198%2C0907.2669%2C0907.0520%2C0907.3199%2C0907.3066%2C0907.0404%2C0907.5594%2C0907.3400%2C0907.4518%2C0907.3639%2C0907.3740%2C0907.0307%2C0907.0625%2C0907.1420%2C0907.0666%2C0907.1210%2C0907.4713%2C0907.5286%2C0907.1762%2C0907.5109%2C0907.4051%2C0907.0978%2C0907.3969%2C0907.2754%2C0907.3245%2C0907.5466%2C0907.3634%2C0907.3928%2C0907.0915%2C0907.0264%2C0907.0027%2C0907.2026%2C0907.3009%2C0907.4093%2C0907.3337%2C0907.4472%2C0907.5133%2C0907.4095%2C0907.0682%2C0907.1406%2C0907.1844%2C0907.1644%2C0907.2882%2C0907.3233%2C0907.3393%2C0907.5509%2C0907.0245%2C0907.4328%2C0907.5564%2C0907.4904%2C0907.3488%2C0907.0784%2C0907.4261%2C0907.5004%2C0907.0270%2C0907.3538%2C0907.1458%2C0907.4939%2C0907.4240%2C0907.1733%2C0907.2565%2C0907.2718%2C0907.5421%2C0907.5353%2C0907.0559%2C0907.3383%2C0907.3911%2C0907.2140%2C0907.0542%2C0907.2243%2C0907.3720%2C0907.4951%2C0907.0817%2C0907.1007%2C0907.0362%2C0907.1179%2C0907.4140%2C0907.5071%2C0907.1505%2C0907.5000%2C0907.0088%2C0907.0131%2C0907.0086%2C0907.0462%2C0907.2777%2C0907.2912%2C0907.3078%2C0907.4617%2C0907.3719%2C0907.4080%2C0907.4989%2C0907.3840%2C0907.1637%2C0907.1786%2C0907.2905%2C0907.4040&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The main objective of this paper is to provide an optimized solution and\nalgorithm for the execution of a workflow process by ensuring the data\nconsistency, correctness, completeness among various tasks involved. The\nsolution proposed provides a synchronized and failure free flow of execution\namong various tasks involved in a workflow process. A synchronizing agent is\nbound at a very low level, i.e. with the workflow activity or task to get the\ndesired goals to be done and an algorithm is provided to show the execution of\nworkflow process completely."}, "authors": ["Sohail Safdar", "Jamil Ahmad", "Shaftab Ahmed", "M. Tayyab Asghar", "Saqib Saeed"], "author_detail": {"name": "Saqib Saeed"}, "author": "Saqib Saeed", "arxiv_comment": "This paper was published in the proceedings of 4th International\n  Conference on New Exploratory Technology (NEXT 2007) Seoul, Korea 25-27\n  October 2007", "links": [{"href": "http://arxiv.org/abs/0907.0404v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0907.0404v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.SE", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.SE", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0907.0404v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0907.0404v1", "journal_reference": null, "doi": null, "fulltext": "Agent based Model for providing optimized, synchronized and\nfailure free execution of workflow process.\nSohail Safdar1, Dr. Jamil Ahmad2, Shaftab Ahmed3, M. Tayyab Asghar4, Saqib\nSaeed5\n1\n\nDepartment of Computer Science & Engineering, Bahria University, Islamabad, Pakistan\n2\nDepartment of Computer Science, Iqra University, Islamabad, Pakistan\n3\nDepartment of Computer Science & Engineering, Bahria University, Islamabad, Pakistan\n4\nProsol, Pi Sigma Groups, Islamabad, Pakistan\n5\nDepartment of Computer Science & Engineering, Bahria University, Islamabad, Pakistan\nCorresponding email: sagi_636@yahoo.com\n\nAbstract:\nThe main objective of this paper is\nto provide an optimized solution and\nalgorithm for the execution of a workflow\nprocess by ensuring the data consistency,\ncorrectness, completeness among various\ntasks involved. The solution proposed\nprovides a synchronized and failure free\nflow of execution among various tasks\ninvolved in a workflow process. A\nsynchronizing agent is bound at a very low\nlevel, i.e. with the workflow activity or task\nto get the desired goals to be done and an\nalgorithm is provided to show the execution\nof workflow process completely.\nKey words\nWorkflow process, task or workflow\nactivity, synchronizing agent, worklist and\nworkflow server.\n\nI.\n\nIntroduction:\n\nWorkflow Management Systems are\nthose systems that are used to automate,\nmanage, monitor and control the execution\nof the workflow processes [1,8]. Workflow\nprocess is a business process for an\nenterprise.\nEnterprise\nhas\ndifferent\ndepartments and each department carries out\nsome set of required processes to ensure the\nsuccessful completion of the whole work\nand achieve the required goals. A process is\na composition of a set of related activities\n\n1 of 8\n\nknown as workflow activities or tasks. The\nprocesses as well as the composed tasks are\nused to share information among each other\nfor their individual execution. These\nprocesses and tasks may reside at same\nlocation or may be at some remote location\nas in the case of distributed environment.\nThe workflows in the distributed\nenvironment must provide correctness and\nconsistency of data [3] that is shared among\ndifferent tasks. For achieving the required\nbusiness goal, the execution of the\ndistributed workflows should be made\nfailure free. Workflow task is the focal point\nin the current research, as the successful\nexecution of the task will ensure the success\nof the whole workflow process.\nThe workflow management systems\nare very compelling area of study in the\nenterprise perspective. Workflow processes\nhave to be defined for business activities and\ntheir successful execution is done to\naccomplish the overall goal for that\nenterprise. Following diagram shows the\nbasic workflow process.\n\n\fterminologies need to be discussed before\nfocusing to the actual context of the\nresearch.\n\nA\n\nB\n\nC\n\nD\n\nE\n\nF\nFigure 1a: Basic workflow process\n\nIn the above mentioned figure A, B, C, D, E\nand F are the tasks or workflow activities\nthat need to be executed to complete the\nworkflow process. In case of distributed\nenvironment each task may be located at\ndifferent location, hence the local storage is\nprovided at each task level.\nThe objectives of the research are the\nidentification of key issues regarding\nprocess synchronization, data correctness,\ncompleteness and consistency among\ndifferent tasks associated with the\ndistributed workflow process. Analyzing the\nexisting solutions to extract the idea for the\npossible optimized solution that will provide\nfailure preventive execution of workflow\nprocess by ensuring data consistency, data\ncorrectness and task synchronization. To\ndevelop an algorithm for the proposed\nsolution mentioned above.\nOrganization of the paper: The rest of the\npaper is organized as follows.\nSection II discusses related works and useful\nconcepts in workflow management systems.\nIn section III the identified issues regarding\nconsistency and correctness of the data or\ninformation are discussed. The proposed\nsolution and its application to the existing\nworkflow tasks are discussed in section IV.\nIn section V the algorithm for the proposed\nsolution is discussed. The conclusion will be\ndrawn from the research and limitations\nalong with the future work will be explained\nafterwards.\n\nII. Related Work and Useful\nConcepts:\nVarious researchers are working on\nworkflow\n\nmanagement\n\nsystems.\n\nFew\n\n2 of 8\n\nWorkflow Management Systems: The\nworkflow management systems are used to\nautomate, manage, monitor and control the\nexecution of the workflows in different\nbusiness domains.\nDifferent approaches are followed in\nworkflow management systems i.e. Active\nDatabase Management Systems that act\nupon changes of persistent but its weakness\nlies in maintaining the consistent nature\nwhen the event occurs, Component based\nsystems is based on small well defined\ncomponents written in ActiveX, Agent\nTechnology is the third approach and is the\nmost intelligent approach, in which different\nagents collaborate together for the\nsuccessful execution of the workflows in\ndistributed environment [1, 8].\nComponents of Distributed Workflows:\nWorkflow Process Specification: A\npredefined set of tasks to be carried out in a\nspecific workflow process.\nWorkflow Server: The server that responds\nto events by initiating the respective\nworkflows according to the process\nspecification hence manages, monitors and\ncontrol overall workflow.\nWorkflow Process: A process that defines a\nbusiness activity.\nTask: Also known as workflow activity that\nis a component of a workflow process. The\ntask may consist of single or multiple\ninstructions.\nActor: Also known as workflow participant,\nit might be a human user or an application or\nanother task that performs a workflow\nactivity.\nWorklist: List that contains a set of activities\nto be performed and is handed over to the\nworkflow handler.\nWorkflow Agent: It is a procedure that takes\nthe worklists from the workflow server and\nsends them to workflow handler.\nWorkflow Handler: It is software that\ninteracts with the end-user through Worklist\nbrowser and plug-ins to execute the\nworkflow activity.\n\n\fWorkflow Engine: It is a service that\nprovides the execution environment for the\nworkflow process.\nResource Manager: The service that\nprovides the required resources on demand.\nIt works along with workflow handler.\nWorklist browser and plug-in: This works\nas an interface between user and workflow\ntasks. [1, 2]\nThe predefined workflow processes\nin distributed environment can be initiated\nthrough workflow server using agents that\nwill give the handle of worklist, to the\nworkflow handlers which along with\nresource manager and workflow engine\nresults in the execution of that workflow [1]\nas shown in the figure 1b.\n\nWorkflow\nServer\n\n...\n\nThe next section will discuss the\nvarious synchronization and consistency\nissues among workflow tasks.\n\nIII. Synchronization and\nConsistency related issues:\nMismatched Data: The data or information\ngenerated by one task must be of appropriate\nformat for another task that requires it as an\ninput, otherwise it will provide unacceptable\nresults at later stages. Hence mismatched\ndata should be identified and resolved.\nInconsistent Data: In case of replicated data\nover a number of locations, the possibility of\ninconsistency exists. Hence adequate\nmethod has to be used to resolve the\ninconsistency.\nCompleteness of Data: Complete data\nshould be available before the execution of\nthe next task started. Hence a method is\nrequired to verify and ensure the\ncompleteness of the data.\n\nProcess Agents\n\nIV. Need of an existing research:\n\nResource\nManager\n\nWorkflow\nHandler\n\nThere is a need to avoid any flaw in\nthe execution of the workflows by ensuring\nan efficient mechanism to bear the above\nmentioned issues and hence to make the\nexecution flow successful. The workflow\nneeds to be fault tolerant in case of hardware\nfailure, but in this paper much of the\nconsideration will be given to the execution\nof workflows on software grounds.\n\nWorklist Browsers & Plug-ins\n\nActors\nFigure 1b: Architectural\nManagement Systems [1]\n\nDiagrams\n\nof\n\nWorkflow\n\nSuggested technique for the\ndistribution of data in the distributed\nenvironment is Distributing Only Static\nData i.e. the data which can persist only to\nthat location rather then a variable or most\nchanging data, to lessen the network traffic\ncongestion. In that case only request has\nbeen made for the static data while variable\ndata has to be operated locally [2].\nWe propose to use agent based\ntechnology to optimize the workflow by\nimplementing a transactional like behavior\namong the tasks.\n\n3 of 8\n\nIV. Proposed Solution:\nKeeping in view the abovementioned issues and objectives, an\noptimized solution is proposed that all the\nworkflow activities within the workflow\nprocess will be bound with an agent that will\nensure the correctness, consistency and\ncompleteness of data along with the\nsynchronization among different tasks. The\nthreads are also provided at different levels\nof an agent to do certain tasks\nsimultaneously. This agent will be termed as\nsynchronizing agent and is locally available\nto all workflow activities involved in a\nprocess. This means at each task level within\nthe workflow process we have a\nsynchronizing agent. Each synchronizing\n\n\fagent consists of three components as shown\nin figure 2a.\n\nData validation\nprocedure and\nConsistency threads\n\nData validation\nprocedure and\nConsistency threads\n\nTask committer\n\nWorkflow Activity /\nTask Execution\nStatements\n\nRouting method and\nconsistency threads\n\nTask Committer\n\nFigure 2a: Synchronizing\nAgent\n\nLocal\nStorage\n\nRouting method and\nconsistency threads\nFigure 2b: Workflow\nActivity\n\nEach workflow activity has locally available\nsynchronizing agent and a local storage as\nshown in figure 2b.\nComponents\nand\nsynchronizing agent:\n\nworking\n\nof\n\ni) Data validation procedure and\nconsistency threads: It acts as the\ninitialization condition for the workflow\nactivity, Data validation procedure is used to\ncheck and ensure whether:\na)- The required data is completely available\nin the local storage associated with the task.\nb)- The format of the required data is valid\nor not, if not valid then signals to the\npreceding task for valid format of data.\nc)- When the task has to get required the\ndata from two or more preceding tasks or\nsources then it waits to get the complete\ndata.\nd)- Once the complete data is available then\nthe consistency check has been made to\ndecide for the latest version of the data\namong multiple copies of same data and\nmakes it available for use in the task. It also\nroutes the selected copy of data to those\ntasks or sources that have inconsistent copy\nof that data. This routing is done with the\nhelp of consistency thread available.\ne)- If the task requires the resources\navailable locally then the above checks are\nbypassed.\nOnce the above conditions are\nsatisfied then the execution of the task can\nbe started.\n\n4 of 8\n\nii) Task committer: It is a procedure used to\ncheck whether the current task has\ncompleted its execution successfully or not.\nThere are two counter variables associated\nwith the workflow task. One variable say\n\"te\" contained the total number of executable\nstatements of that task and is available\nbefore the execution of that task. Another\nvariable say \"texec\" is used to increase with\nthe execution of each statement. Task\nCommitter verifies the condition i.e. texec <\nte, if the condition yields true then it means\nthat number of executed statements are less\ntotal number of executable statement. Hence\nthe task could not be committed and the\ncontrol has been shifted to the statement at\noffset given by texec. If condition yields false\nthen this means the task is successfully\nexecuted and hence the task committer\ncommits the task and signals the routing\nmethod that task has been completed.\niii) Routing methods and consistency\nthreads: Once the routing method gets a\nsignal from task committer then it signals\nthe next coming task about its successful\ncompletion and sends all of the required data\nas requested by the next coming task at the\ntime of loading that workflow process. The\nconsistency threads at this level are\nresponsible for making the data consistent\nby updating the inconsistent data with the\nacquired consistent data from the next task.\nThe workflow activity is initiated\nfor the new task as described above.\nComponents and working of Workflow\nActivities:\nThe representation of workflow\nactivity in figure 2b also follows ECA Rule\n[1, 9] i.e. Event- Condition-Action Rule as\nshown in figure 3a.\n\nCondition\n\nEvents\n\nActions\n\nFigure 3a: Workflow Activity under ECA Rule [9]\n\n\fInitialization\nCondition\n\nCompletion\nExecution\n\nFailure\n\nFigure 3b: Internal States of workflow activity in the\nproposed solution\n\nFigure 3b shows the internal states\nin workflow activity that is started by\ninitializing condition based on data\nvalidation procedure, then its execution\nstarted, if the execution is successful then\ntask is committed other wise task committer\nwill shift the control to the desired offset to\ncontinue. The committer counts the number\nof attempts made by the task to be\ncommitted. If the count exceeds a preset\nvalue, then the committer interrupts the\nworkflow agent by sending a signal of\nexecution failure. The agent sends that\nsignal to the workflow server where possible\nhardware failure should be detected and\nalternative should be provided to resume the\ntask execution. Finally the completion of the\ntask is the last desirable state.\nThe process starvation or deadlock\ncondition can be avoided by the use of\nSemaphores or Monitors within the tasks so\nthat critical section can be locked to achieve\nmutual exclusion [7, 11].\n\nV. Model and Algorithm for\nworkflow execution:\nIn this section, proposed algorithm\nis discussed, that includes three major steps\nrequired for execution of workflow in\ndistributed system.\nStep 1: Loading and configuring a\nworkflow process:\nThe workflow process is configured\nin this phase, the configuration can be done\nagain if the changes are made to the\nworkflow process. As shown in figure 1, the\nprocess agents are responsible for taking the\nworklists to the workflow handlers. The\n\n5 of 8\n\nfollowing sub steps are involved to initialize\nthe workflow engine for execution.\ni) The number of instructions per task as\nmentioned by \"te\" has been calculated and\nmapped with that worklist. The workflow\nserver also keeps a list of tasks and there\nnumber of executable statements in its local\ndatabase.\nii) The synchronizing agent is bound with\neach of the workflow task as shown in figure\n3b.\niii) NTP protocol [10] is applied to provide\ntime synchronization among the tasks.\niv) The request for data to be used by a task\nis stored in the preceding task i.e. (Pre-fetch\nactive)[2,6] for data requests. This will\nlower the network traffic at the time of\nexecution of that workflow as one should\nnot send requests for the data all the time it\nis required but the only emphasize will be to\nprovide that data.\niv) Resource scheduling [7] for each task\nhas been done, so that every task knows the\nsequence of resources it requires. For every\nresource the resource handler will need to\ncontain the priority list of tasks that will\nconsume a specific resource.\nStep 2: Execution of the workflow process:\nThe following sub steps need to be\nfollowed to make sure the successful and\noptimized execution of the workflow\nprocess.\ni) First task is ready for execution by having\nall the required data including its total\nnumber of instructions i.e. \"te\" available in\nits local storage.\nii) Data validation procedure activates and\nensures the availability of correct, complete\nand consistent data, so that the task can start\nits execution.\niii) Once the data is validated then a counter\nvariable as explained previously i.e. \"texec\" is\ninitialized to zero.\niv) Now the task starts to execute and as the\nstatements being executed then \"texec\" is\nincreased at thread level.\nv) Once the task completes its execution\nthen the task committer will check whether\nthe task is completely executed and commits\nthat task.\nvi) If the task is not completed then task\ncommitter directs the control to the place\nwithin that task from where the execution\n\n\ftruncates. This would be done by getting the\noffset from \"texec\".\nvi) If the task is unable to be completed in\nten attempts then committer signals the\nworkflow server to provide an alternate\nresource for the successful execution.\nvii) Once the task is committed, then the\nactivity would be in wait state for the control\nto be shifted to the next task. The routing\nmethod is called to fulfill the pre-fetch\nrequest for the data by sending the requested\ndata to the next task. Once the\nacknowledgment [4] is received from the\nnext task then the task gets into a completed\nstate.\nviii) The next task will perform the data\nvalidation step and if found multiple copies\nof same data then it will select the consistent\ndata and the consistency threads at this level\nwill transfer the consistent data to all those\nlocations where the data needs to be updated\nto get consistency.\nix) If the format of the data is not\nappropriate the new task failed to start and\nsignal the previous task to send the correct\nformatted data.\nx) The task will only start its execution once\nit gets all of its requested data completely,\ncorrectly and consistently.\nxi) The above mechanism will be repeated\nfor all of the coming tasks and completed\nwhen there is no task left to execute. The\ncomplete execution is shown in figure 4.\n\nStarting\npoint\nRoute a signal to\nprevious task/s\n\nData Validation\nAcknowledge\nprevious task\n\nNo\n\nValidated\nYes\nTask Execution\n\nChecking and\ncommitting a task\n\nNo\n\nCommitted\nYes\nRouting of\nrequested data\nto new task\n\nEnding\npoint\nFigure 4: Flow chart of the task execution\n\nStep 3: Signaling the completion of the task\nto workflow server:\nThe successful completion of a\nworkflow process is signaled to the\nworkflow handler, which is then routed\nthrough the agent that initiates the process to\nthe workflow server.\nThe above algorithm ensures the\ncomplete execution of a workflow process.\nA sample workflow process can be seen in\nthe following figure 5 where A, B, C, D and\nE are Workflow activities.\nStarting\npoint\n\nLocal Storage\n\nA\n\nEnding point\n\nConsistency\nIssue\nB\n\nC\n\nD\n\nE\n\nF\nFigure 5: Sample workflow\n\n6 of 8\n\n\fVI. Conclusion:\nThe proposed solution is very\nbeneficial to acquire an optimized execution\nof a workflow process in distributed\nenvironment\nbecause\nprocess\nsynchronization, data consistency and data\ncorrectness within the process is achieved at\nworkflow task or workflow activity level.\nMoreover binding the synchronizing agent\nwith the workflow task provides a fault\ntolerant and failure free execution of a\nworkflow process as no task starts its\nexecution with out the completion of\npreceding task and availability of required\ndata. The model provides scalability to a\nworkflow process as every new activity\ncould be added to a process by updating\nonly the list of tasks at workflow server. The\nwhole process is synchronized due to the\nconfiguration done before the execution of\nthe workflow process at both server and\nworkflow task level. The solution behaves\nlike a transaction as it does not allow any\nactivity to start before committing the\nprevious one but the thing that makes it\nmore powerful is that, the whole activity\ndoes not need to repeat but the execution\nstarts from the place where the task\ntruncates in case if a task failed to commit.\nThe model works well for the tasks having\nsingle or multiple instructions.\n\nVII. Limitations and Future\nWork:\nThere are few limitations and\npossible future work aspects in the proposed\nsolution. The system is failure free but\neffective techniques to hardware failure\nmust be incorporated to make the system\nrobust, though one can detect the hardware\nfailure\nusing\nthe\ncount\nand\nacknowledgement mechanism provided at\ntask level. As the task become heavy by the\nuse of synchronizing agent even they are\nthread based, so there is a need to find out\nthe ways to make these workflow tasks light\nweight. Another aspect to consider is that\nthe proposed model works fine in the multiinstruction tasks but how can it be useful\neither in case of single-instruction task.\nMore over the possible solution needs to be\n\n7 of 8\n\ndiscovered regarding how the workflow\nprocess execution is made more efficient\nusing the existing solution. It needs to be\nfound out, how this solution is effective for\nthe workflows in a grid environment.\n\nReferences:\n[1] Sull, Wonhee. (1998) \"A Distributed\nEnvironment for Enabling Lightweight\nFlexible Workflows\", IEEE Computer\nSociety, volume 4, pp 355.\n[2] Leon Zhao, J., Kumar, Akhil. (1998)\n\"Data management issues for large scale,\ndistributed workflow systems on the\nInternet\", ACM Press, volume 29, issue 4,\npp 22-32.\n[3] Sadiq, Shazia., Orlowska, Maria., Sadiq,\nWasim., Foulger, Cameron. (2004) \"Data\nflow and validation in workflow modelling\",\nACM Conference, volume 27, Australian\nComputer Society, Inc, pp 22-32.\n[4] Manolescu, Dragos A.\n(2002)\n\"Workflow enactment with continuation and\nfuture objects\", ACM Press, pp 40-51.\n[5] Rusinkiewicz, Marek, Sheth, Amit.\n(1995) \"Specification and execution of\ntransactional\nworkflows\",\nACM\nPress/Addison-Wesley Publishing Co, pp\n592-620.\n[6] Shrivastava, Santosh K., Wheater, Stuart\nM. (1998) \"A transactional workflow based\ndistributed application composition and\nexecution environment\", ACM Press, pp 7481.\n[7] Alonso, G., Agrawal, D., El Abbadi, A.\n(1996)\n\"Process Synchronization in\nWorkflow Management Systems\", IEEE\nComputer Society, pp 581.\n[8] Alonso, G., Agrawal, D., El Abbadi, A.,\nKamath, M., Guenthoer, R., Mohan, C.\n(1995). \"Advanced Transaction Models in\nWorkflow Contexts\", IBM Almaden\nResearch Center.\n\n\f[9] Chen, Lin., Li, Minglu., Cao, Jian.\n(2006).\n\"ECA Rule-Based Workflow\nModeling and Implementation for Service\nComposition\", Oxford University Press,\nVolume E89-D, Issue 2, pp: 624-630.\n\n[10] Bulut, Hasan., Pallickara, Shrideep.,\nFox, Geoffrey. (2004). \"Implementing a\nNTP-based time service within a distributed\nmiddleware system\", Trinity College Dublin,\npp: 126 - 134.\n\n[11] Silberschatz, A., Galvin, P., Gayne,\nG. (2006). \"Operating System Concepts\",\nEdition: 6th, Chapter 6, pp: 193-209.\n\n8 of 8\n\n\f"}