{"id": "http://arxiv.org/abs/1204.5429v1", "guidislink": true, "updated": "2012-04-24T16:58:20Z", "updated_parsed": [2012, 4, 24, 16, 58, 20, 1, 115, 0], "published": "2012-04-24T16:58:20Z", "published_parsed": [2012, 4, 24, 16, 58, 20, 1, 115, 0], "title": "Understanding differential equations through diffusion point of view", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1204.3243%2C1204.1269%2C1204.3122%2C1204.2989%2C1204.0341%2C1204.1120%2C1204.5177%2C1204.6063%2C1204.1070%2C1204.2685%2C1204.2146%2C1204.4784%2C1204.4498%2C1204.2754%2C1204.1261%2C1204.6279%2C1204.6672%2C1204.5978%2C1204.1292%2C1204.0045%2C1204.1923%2C1204.0422%2C1204.2281%2C1204.3448%2C1204.6432%2C1204.5615%2C1204.0573%2C1204.5750%2C1204.0340%2C1204.6276%2C1204.1273%2C1204.3241%2C1204.4489%2C1204.4896%2C1204.1249%2C1204.3492%2C1204.2897%2C1204.4222%2C1204.3344%2C1204.4535%2C1204.5012%2C1204.3774%2C1204.2841%2C1204.4190%2C1204.1840%2C1204.1442%2C1204.5704%2C1204.2302%2C1204.1950%2C1204.0936%2C1204.3965%2C1204.5611%2C1204.5514%2C1204.3879%2C1204.3891%2C1204.2696%2C1204.6173%2C1204.5394%2C1204.3921%2C1204.3932%2C1204.0246%2C1204.6282%2C1204.3336%2C1204.5325%2C1204.3104%2C1204.4254%2C1204.5469%2C1204.0113%2C1204.4987%2C1204.2572%2C1204.4567%2C1204.1322%2C1204.1405%2C1204.0406%2C1204.3922%2C1204.4350%2C1204.6223%2C1204.6243%2C1204.1632%2C1204.3936%2C1204.5429%2C1204.0577%2C1204.5545%2C1204.5163%2C1204.2301%2C1204.5724%2C1204.2659%2C1204.3670%2C1204.1834%2C1204.4847%2C1204.2184%2C1204.3440%2C1204.5132%2C1204.0702%2C1204.5804%2C1204.0184%2C1204.3319%2C1204.2880%2C1204.3404%2C1204.2646%2C1204.4590&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Understanding differential equations through diffusion point of view"}, "summary": "In this paper, we propose a new adaptation of the D-iteration algorithm to\nnumerically solve the differential equations. This problem can be reinterpreted\nin 2D or 3D (or higher dimensions) as a limit of a diffusion process where the\nboundary or initial conditions are replaced by fluid catalysts. Pre-computing\nthe diffusion process for an elementary catalyst case as a fundamental block of\na class of differential equations, we show that the computation efficiency can\nbe greatly improved. The method can be applied on the class of problems that\ncan be addressed by the Gauss-Seidel iteration, based on the linear\napproximation of the differential equations.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1204.3243%2C1204.1269%2C1204.3122%2C1204.2989%2C1204.0341%2C1204.1120%2C1204.5177%2C1204.6063%2C1204.1070%2C1204.2685%2C1204.2146%2C1204.4784%2C1204.4498%2C1204.2754%2C1204.1261%2C1204.6279%2C1204.6672%2C1204.5978%2C1204.1292%2C1204.0045%2C1204.1923%2C1204.0422%2C1204.2281%2C1204.3448%2C1204.6432%2C1204.5615%2C1204.0573%2C1204.5750%2C1204.0340%2C1204.6276%2C1204.1273%2C1204.3241%2C1204.4489%2C1204.4896%2C1204.1249%2C1204.3492%2C1204.2897%2C1204.4222%2C1204.3344%2C1204.4535%2C1204.5012%2C1204.3774%2C1204.2841%2C1204.4190%2C1204.1840%2C1204.1442%2C1204.5704%2C1204.2302%2C1204.1950%2C1204.0936%2C1204.3965%2C1204.5611%2C1204.5514%2C1204.3879%2C1204.3891%2C1204.2696%2C1204.6173%2C1204.5394%2C1204.3921%2C1204.3932%2C1204.0246%2C1204.6282%2C1204.3336%2C1204.5325%2C1204.3104%2C1204.4254%2C1204.5469%2C1204.0113%2C1204.4987%2C1204.2572%2C1204.4567%2C1204.1322%2C1204.1405%2C1204.0406%2C1204.3922%2C1204.4350%2C1204.6223%2C1204.6243%2C1204.1632%2C1204.3936%2C1204.5429%2C1204.0577%2C1204.5545%2C1204.5163%2C1204.2301%2C1204.5724%2C1204.2659%2C1204.3670%2C1204.1834%2C1204.4847%2C1204.2184%2C1204.3440%2C1204.5132%2C1204.0702%2C1204.5804%2C1204.0184%2C1204.3319%2C1204.2880%2C1204.3404%2C1204.2646%2C1204.4590&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "In this paper, we propose a new adaptation of the D-iteration algorithm to\nnumerically solve the differential equations. This problem can be reinterpreted\nin 2D or 3D (or higher dimensions) as a limit of a diffusion process where the\nboundary or initial conditions are replaced by fluid catalysts. Pre-computing\nthe diffusion process for an elementary catalyst case as a fundamental block of\na class of differential equations, we show that the computation efficiency can\nbe greatly improved. The method can be applied on the class of problems that\ncan be addressed by the Gauss-Seidel iteration, based on the linear\napproximation of the differential equations."}, "authors": ["Dohy Hong"], "author_detail": {"name": "Dohy Hong"}, "author": "Dohy Hong", "arxiv_comment": "8 pages", "links": [{"href": "http://arxiv.org/abs/1204.5429v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1204.5429v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.NA", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.NA", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "math.NA", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "G.1.3", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1204.5429v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1204.5429v1", "journal_reference": null, "doi": null, "fulltext": "Understanding differential equations through diffusion\npoint of view\nDohy Hong\nAlcatel-Lucent Bell Labs\nRoute de Villejust\n91620 Nozay, France\n\narXiv:1204.5429v1 [cs.NA] 24 Apr 2012\n\ndohy.hong@alcatel-lucent.com\n\nABSTRACT\nIn this paper, we propose a new adaptation of the D-iteration\nalgorithm to numerically solve the differential equations.\nThis problem can be reinterpreted in 2D or 3D (or higher dimensions) as a limit of a diffusion process where the boundary or initial conditions are replaced by fluid catalysts. Precomputing the diffusion process for an elementary catalyst\ncase as a fundamental block of a class of differential equations, we show that the computation efficiency can be greatly\nimproved. The method can be applied on the class of problems that can be addressed by the Gauss-Seidel iteration,\nbased on the linear approximation of the differential equations.\n\nCategories and Subject Descriptors\nG.1.3 [Mathematics of Computing]: Numerical Analysis-Numerical Linear Algebra\n\nGeneral Terms\nAlgorithms, Performance\n\nKeywords\nNumerical computation; Iteration; Linear operator; Dirichlet; Laplacian; Gauss-Seidel; Differential equation.\n\n1.\n\nINTRODUCTION\n\nThe iterative methods to solve differential equations based\non the linear approximation are very well studied approaches\n[13], [1], [15], [4], [17], [5], [16]. The approach we propose\nhere (D-iteration) is a new approach initially applied to numerically solve the eigenvector of the PageRank type equation [11], [10], [9], [7], [8], [12].\nThe D-iteration, as diffusion based iteration, is an iteration method that can be understood as a column-vector\nbased iteration as opposed to a row-vector based approach.\nJacobi and Gauss-Seidel iterations are good examples of\nrow-vector based iteration schemes. While our approach\ncan be associated to the diffusion vision, the existing ones\ncan be associated to the collection vision.\nIn this paper, we are interested in the numerical solution\nfor linear equation:\nA.X\n\n= B\n\n(1)\n\nwhere A and B are the matrix and vector associated to\nthe linear approximation of differential equations with initial\nconditions or boundary conditions.\n\nIn [6], it has been shown how simple adaptations can make\nthe diffusion approach an interesting candidate as an alternative iterative scheme to numerically solve differential\nequations. In this paper, we propose a new approach based\non the pre-computation of the elementary diffusion limit.\nThis limit can be then used for a given class of differential\nequations, for instance for 2D and 3D case, or for higher\ndimension.\nIn Section 2, we introduce the 2D problem formulation.\nIn Section 3, we define the notion of catalyst position and\nelementary solution. Section 4 describes the algorithm with\nthe use of the elementary solution. Finally, Section 5 gives\nan illustration of the application and an evaluation of the\nrun time gain.\n\n2. FROM THE HEAT EQUATION\nA typical linearized equation of the stationary heat equation in 2D is of the form:\n1\nT (n, m) = (T (n \u2212 1, m) + T (n, m \u2212 1)\n4\n+T (n + 1, m) + T (n, m + 1))\nwhich can be obtained by the discretization of the Laplacian\noperator in Cartesian coordinates:\n\u2206T (x, y) =\n\n\u22022T\n\u22022T\n+\n= 0.\n2\n\u2202x\n\u2202y 2\n\n(2)\n\ninside the surface \u03a9 (for instance, \u03a9 = [0, Lx ] \u00d7 [0, Ly ]).\nThen additive terms appear for the initial or boundary conditions (Dirichlet) on the frontier \u2202\u03a9 (for instance, for x = 0\nor y = 0 etc).\nMore generally, we consider here linear equations of the\nform:\n1\nT (n, m) = (T (n \u2212 1, m) + T (n, m \u2212 1)\n(3)\n4\n+T (n + 1, m) + T (n, m + 1))\n(4)\nwhen (n, m) \u2208 \u03a90 = \u03a9 \\ \u2202\u03a9 and\nT (n, m) = g(n, m).\n\n(5)\n\nwhen (n, m) \u2208 \u2202\u03a9. For the general case, \u2202\u03a9 is not necessarily only the boundary of \u03a9 (at least for discrete formulation,\nits asymptotic limit to the initial continuous problem is another story) and we may add any set of points included in\n\u03a9.\nWe recall that the D-iteration requires updating two vectors (cf. [10]): the fluid vector F and the history vector H\n\n\finstead of a single vector for the Gauss-Seidel. The above\nequation can be solved or by iterating the equation (4) on\n\u03a90 or by applying the diffusion process associated to the\nD-iteration.\n\n3.\n\nELEMENTARY SOLUTION\n\n3.1 Diffusion on 1D\nFor the purpose of illustration, let's consider the 1D case\nwith the following equations (from differential equation of\norder two):\nT (n) =\n\n1\n(T (n \u2212 1) + T (n + 1))\n2\n\n(6)\n\nThen let's consider the limit of (6) when we have an elementary catalyst: by symmetry, we can just explore the\nspace IN:\n\u2022 at the first iteration, the half of 1 is sent to the position\n1;\n\u2022 at the second iteration, half of 1/2 (1/4) is sent to\npositions 2 and 0: 0 is a catalyst, therefore the 1/4 it\nreceives disappears;\n\u2022 at the thirst iteration, 1/8 is sent to 1 and 3, and so\non.\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n1\n\nwhen n \u2208 \u03a90 and\n\n1/2\n1/4\n\nT (n) = g(n).\n\n(7)\n\nwhen n \u2208 \u2202\u03a9.\nThe solution can be found by iteration of equation (6) on\n\u03a90 with boundary condition:\n\n1/16\n\n1/8\n1/8\n\n1/16\n1/32\n\n1/16\n3/32\n\n5/64\n\n1/32\n1/16\n\n1/64\n\n5/128\n\nT (n) = g(n) when n \u2208 \u2202\u03a9\nT (n) = 0 when n \u2208\n/ \u2202\u03a9.\n\n5/256\n\nThis is exactly the Gauss-Seidel iteration if we always use\nthe latest updated values of T and the limit is the piecewise\nlinear function joining the points (n, g(n)) at n \u2208 \u2202\u03a9.\nThe diffusion based iteration would apply the equations:\nH(n)+ = F (n); F (n) = 0,\n1\n1\nF (n + 1)+ = F (n), F (n \u2212 1)+ = F (n).\n2\n2\n\n1/4\n1/8\n\n(8)\n(9)\n\n3.2 Catalyst position\nWe first introduce the notion of catalyst node: a node\n(position n) is a catalyst if it diffuses once its initial fluid\nvalue F (n), then behaves as a black hole, i.e., it absorbs all\nfluids it receives without retransmitting them to its neighbour positions (so that we have H(n) is constant to F (n)\nafter its diffusion).\nTheorem 1. If we associate \u2202\u03a9 to catalyst positions with\nthe boundary conditions (7) defining their initial fluid values, the D-iteration diffusion's limit is equal to the limit of\nthe iteration of the equation 6.\nProof. This theorem is a direct consequence of the equation on H which does exactly (6) (cf. [12]).\nTo solve efficiently such an iteration scheme (of course,\nthe interest is for 2D/3D or more complex mix of differential equations of higher order in 2D/3D), we introduce the\nnotion of elementary solution for the fluid diffusion process:\nthe elementary solution is the limit of the diffusion process\nwhen we put a fluid 1 at position (0, 0) and with boundary\ncondition zero on the frontier. If we impose that (0, 0) is a\ncatalyst, the solution can be obtained from the elementary\nsolution by re-normalizing all values by 1/(1 \u2212 H(0, 1)).\nWe call elementary catalyst when we have \u2202\u03a9 = {0, N }\nand g(0) = 1, g(N ) = 0 with \u03a9 = [0, N ].\nWe can compare this idea to the use of the Green's function to solve linear differential equations. The difference is\nthat the function we define here is much easier to compute\nand not dependent on the boundary shape.\n\nFigure 1: Elementary catalyst on 1D: diffusion on\nIN.\nIf we iterates the diffusion, at the limit we find a discrete\nfunction which can be used to solve all equations of type (6)\n(see Section 4). What's interesting is that when we don't\nput the boundary N , we can prove that the amount of fluid\nthat disappeared in the black hole is associated to the limit\nof hypergeometric series defined by:\nxn+1 =\n\n2n + 1\nxn\n2n + 4\n\nand converges to 1/2 (use of Gamma function, [2]). Since\n1/2 is the fluid sent to the direction IN, that means that all\nfluid are finally absorbed by the black hole and that each\nvalue H(n) is convergent (non-decreasing and bounded).\nWhat's even more interesting is that at the limit we have\nH(n) = 1 for all n \u2208 IN (proof by induction from what's\nreceived at 0), which means that all positions will receive\nand send exactly 1 fluid: this is a consequence of the fact\nthat the associated random walk is recurrent (only for 1D\nand 2D). However the convergence speed to the limit of this\nprocess (by diffusion or by collection) is very slow (for large\nn). This is why it may be interesting to pre-compute those\niterations once, but not up to its limit (which is the constant\nfunction), but with a boundary condition at N .\nIn the equation we consider, we'll always have the frontier of \u03a9 that are all catalysts, therefore all fluid reaching\nthe border of \u03a9 will disappear and this guarantees a faster\nconvergence compared to the case without boundary. Since\nthe limit is the limit of the diffusion iterations when all catalysts have injected exactly g(n) and when |F (n)| = 0, we\ncan use the catalyst limit we pre-compute on a finite set as\na common block for faster diffusion (see Section 4).\nFigure 2 shows the limit function we obtained after 105 \u00d7\n2000 iterations (105 cycles over [1, ..2000]): note that this is\nfar from linear function! As mentioned above, the limit is in\nthis case the piecewise linear function that joins (\u22122000, 0)\nto (0, 1) and (0, 1) to (2000, 0).\n\n\f1\n\n\u2022 then use the catalyst pre-diffusion to:\n\nDiffusion limit of elementary catalyst: 1D\n\n\u2013 for each position n, diffuse \u01eb2 fn ;\n\ndiffusion limit\n\n0.8\n\n\u2013 solve the diffusion problem with boundary y(0)\nand y(Lx ).\n\n0.6\n\n0.4\n\nFor the diffusion of \u01eb2 fn we can use a pre-diffusion as for\nelementary catalyst but without the constraint of the initial\nposition behaving as a black hole. Then the elementary\ncatalyst diffusion limit can be obtained by normalizing all\nvalues by H(0).\n\n0.2\n\n0\n-2000\n\n-1500\n\n-1000\n\n-500\n\n0\n\n500\n\n1000\n\n1500\n\n2000\n\nx\n\nFigure 2: Diffusion of the 1D elementary catalyst on\n[\u22122000, 2000].\nFrom the linear algebra point of view, this means that\nwe have a matrix associated to the equation (6) with initial\ncondition g(0) = 1 and that its spectral radius is strictly less\nthan 1 thanks to the boundary condition.\nWe can also interpret this limit (after normalization) as\nthe average sojourn time of a random walker when starting\nfrom position 0 and to which we forbid to return to 0 or\nreach the boundary position N .\nRemark that, if 0 was not a catalyst and sends back the\nfluid it receives, we end up with unbounded quantities (for\nH) when the boundary N is not set, since the initial fluid 1\nnever disappears (null-recurrent random walk, stating from\n0).\nFinally, note that in the general case, we will have equation of the form (instead of Equation (6)):\nT (n) = \u03b1T (n \u2212 1) + \u03b2T (n + 1).\n\n(10)\n\nAn example is given in the next section. We may have also\nequations where \u03b1 and \u03b2 may depends on n. An example\nof this is the discretization of the Laplacian in polar coordinates, invariant by rotation:\n\u22022T\n1 \u2202T\n+\n,\n\u2202r 2\nr \u2202r\n\n(11)\n\n2n + 1\n2n \u2212 1\nT (n + 1) +\nT (n \u2212 1).\n4n\n4n\n\n(12)\n\n\u2206T =\nwhich gives:\nT (n) =\n\nConsider a differential equation of 2nd order:\ny \u2032\u2032 (x) + \u03b1y \u2032 (x) + \u03b2y(x) = f (x)\n\n(13)\n\nwith boundary condition y(0) and y(Lx ). The naive corresponding iteration scheme (from discretization) is:\n1\n\u00d7\n2 + \u03b1\u01eb \u2212 \u03b2\u01eb2\n(1 + \u03b1\u01eb)yn+1 + yn\u22121 \u2212 \u01eb2 fn\nor\nyn =\n\nAssume we want to solve the equation:\ny \u2032\u2032 (x) = f (x)\nwith f (x) = (\u22120.99cos(x) + 0.2sin(x)) exp\u2212x/10 and with\nboundary conditions: y(0) = 1, y(50) = 0 (the solution is\ny(x) = cos(x)e\u2212x/10 ).\nThe discretized equation is (from Equation (16) with \u03b1 =\n\u03b2 = 0):\n1\n\u01eb2\nyn = (yn+1 + yn\u22121 ) \u2212 fn\n2\n2\n\n(18)\n\nSince the catalyst limit of (6) is the piecewise linear function, we can solve the equation as follows:\n\u2022 for each position n, diffuse \u01eb2 gn /2, which means adding\nthe linear function (multiplied by Lx = 1/(1 \u2212 (Lx \u2212\n1)/Lx ), because (Lx \u22121)/Lx is the quantity that comes\nback to the diffusion initialization point and here there\nis no black hole behaviour):\nfor (int i=1; i < Lx-1; ++i){\ntransit = - step*step/2 * g(step*i) * (Lx-1);\nfor (int j=-i; j < Lx-i; ++j){\nint x = i+j;\nY[x] += transit * (Lx-1 - abs(j)) / (Lx-1);\n}\n}\n(where step is \u01eb);\n\n3.3 Application on 1D\n\nyn =\n\n3.3.1 Simple example\n\n(14)\n\u0001\n\n(15)\n\n1\n\u00d7\n(2 \u2212 \u03b2\u01eb2 )\n(1 + \u03b1\u01eb/2)yn+1 + (1 \u2212 \u03b1\u01eb/2)yn\u22121 \u2212 \u01eb2 fn\n\n(16)\n\u0001\n\n(17)\n\nfor increment \u01eb (yn = y(n\u01eb) and fn = f (n\u01eb)). To solve this\niteration scheme, we can:\n\u2022 solve the elementary catalyst pre-diffusion;\n\n\u2022 solve the diffusion problem with boundary y(0) and\ny(Lt ):\ntransit = 1.0 - Y[0];\nfor (int i=0; i < Lx; ++i){\nY[i] += transit * (Lx-1 - i) / (Lx-1);\n}\ntransit = 0.0 - Y[Lx-1];\nfor (int i=0; i < Lx; ++i){\nY[i] += transit * i / (Lx-1);\n}\nFor any \u01eb we obtain directly the limit as a superposition\nof fluids diffusion from fn and the boundary conditions and\nthere is no need to do any iterations thanks to the explicit\nform of the catalyst limit. The results are shown on Figure\n3.\n\n\f1\nLimit\nLx=50\nLx=500\n\n0.8\n\nDiffusion limit of elementary catalyst: 2D\n\n0.6\n\n0.2\ny\n\n1\n0.9\n0.8\n0.7\n0.6\n0.5\n0.4\n0.3\n0.2\n0.1\n0\n\n1\n0.9\n0.8\n0.7\n0.6\n0.5\n0.4\n0.3\n0.2\n0.1\n0\n\n0.4\n\n0\n-0.2\n-0.4\n-0.6\n\n100\n\n-100\n\n50\n\n-50\n\n0\n\n0\n\n-0.8\n\nx\n\n50\n\n-50\n\ny\n\n100 -100\n\n-1\n0\n\n10\n\n20\n\n30\n\n40\n\n50\n\nx\n\nFigure 3: Example of 1D.\n\nFigure 4: Limit of the 2D elementary catalyst on\n[\u2212100, 100] \u00d7 [\u2212100, 100].\n\nThe explicit theoretical formulation of the algorithm in\nthis example is:\ny(\u03b1Lx ) = (1 \u2212 \u03b1)y(0) + \u03b1y(Lx )\n+\n\nN\u22121\nL2x X\n(2\u03b1i\n2\n2N i=1\n\n(19)\n\n\u2212 i + |N/Lx \u03b1 \u2212 i| \u2212 \u03b1N ) f (Lx /N i)\n(20)\n\nwhich in the limit (N \u2192 \u221e) is for Lx = 1:\ny(x) = (1 \u2212 x)y(0) + xy(1)\nZ\n1 1\n(2xt \u2212 t \u2212 x + |x \u2212 t|) y \u2032\u2032 (t)dt.\n+\n2 0\n\n(21)\n(22)\n\nThis formulation can be directly solved if we look for an\nexpression of y(x) asR a function of x, y(0), y(1) and of the\nintegral of the form u(t, x)y \u2032\u2032 (t)dt. We'll see how such a\nformulation can be generalized. In this case, the diffusion\napproach is equivalent to the usual discretization of the integral in the equation (21).\n\n3.4 Diffusion on 2D\nIn this section, we consider linear equations associated to:\nT (n, m) =\n\n1\n(T (n \u2212 1, m) + T (n, m \u2212 1)\n4\n+T (n + 1, m) + T (n, m + 1))\n\n(23)\n(24)\n\n0\n\nwhen (n, m) \u2208 \u03a9 and\nT (n, m) = g(n, m).\n\n(25)\n\nwhen (n, m) \u2208 \u2202\u03a9.\nFor 2D, we consider as for 1D, the diffusion limit of the\nelementary catalyst at position (0, 0). Figure 4 shows the\nlimit function we obtained.\nThe computation of this limit on a large space is computation costly. Using the rotation invariant polar Laplacian\nequation, we can in fact find the explicit solution, which is\nof the form:\nC\u2212\n\nlog(r)\n.\nB\n\nThis function has a singularity at 0 (because the limit to\nthe continuous case must be a density or a measure). An\n\nempirical interesting candidate to approximate the diffusion\nlimit of the elementary catalyst in 2D is:\n\u0012\n\u0013\nlog(n)\nT (n) = \u03b1 1 \u2212\n,\nlog(Lr )\nwhere \u03b1 has been evaluate from the explicit diffusion iterations. T (n) is then such that T (0) = 1 by definition,\nT (1) = \u03b1 and T (Lr ) = 0. In fact, we found that it was\nbetter to use the iteration of Equation (12) which was close\nto the above close formula, except the tails. However, those\nlimits are in polar coordinates, which introduce a bias when\napplied on the Cartesian coordinates and which we can not\neliminate (because diffusion on grid is not rotation invariant!). In this paper (Section 5), we used first the iteration\nof Equation (12) (which is 1D, so very fast), then from this\nwe defined the starting point of the iteration on 2D, using\nalso the symmetry of 2D (computation on 1/8 of the plane),\nwhich accelerated the full naive 2D scheme iteration by factor 10-50.\nAnother alternative is to apply the ideas of Section 4 during the pre-computation: after iterations on a smaller space\n(for instance, N \u2032 = N/2), we can save the results H 0 , F 0 ,\nthen we can replace the elementary diffusion by directly\ncopying the results of N iterations as a block. This is interesting to gain an order of precision quickly, exploiting the\nfact that F 0 has fluids concentrated at the border. However,\nafter one block copy operations, we find again a configuration where the fluids are spread more uniformly. Optimizing\nthe pre-computation phase is an independent problem which\nwe don't analyse further here.\n\n4. ALGORITHM\nWe consider the 2D problem \u2206y = f on \u03a9 with boundary\ncondition g on \u2202\u03a9 for illustration. The method should be\neasily extended to a much general linear operator associated\nto other differential equations.\nWe assume the elementary catalyst's limit is pre-computed\non a finite set [\u2212Lx , Lx ] \u00d7 [\u2212Ly , Ly ] with boundary condition g(0, 0) = 1 and g(x, y) = 0 if |x| = Lx or |y| = Ly .\nFor the sake of simplicity, we will consider \u03a9 of the form\n[0, Lx ] \u00d7 [0, Ly ] (if not, we can choose Lx the maximal xdistance between two points of \u03a9 and similarly for Ly ). For\n\n\fthe practical computation, we iterate the D-iteration until\nthe remaining fluid |F | is below the targeted error. Then,\nwe store in a file the last states on H and F (in the following\ndenoted H 0 and F 0 ).\nThen we apply the following process:\n\u2022 load the above results H 0 and F 0 ;\n\nrewrite the algorithm under the form:\ny(x) \u223c y(n, m)\n\u03b42 X\ny(n, m) = \u2212\nf (i)\u03c6i (x)\n4 i\u2208\u03a9\n+\n\n\u2022 define a new variable H[Lx ][Ly ] and F [Lx ][Ly ] (initialized to 0);\n0\n\n\u2022 set the initial fluid F equal to f in \u03a9 ;\n\u2022 diffuse F on \u03a9 (including \u2202\u03a9): here, diffusion means\nadding H 0 and F 0 on H and F respectively at translated position (by x and y);\n\u2022 diffuse fluid g(x, y) \u2212 H[x][y] on \u2202\u03a9 (choose positions\nwhere |g(x, y)\u2212H[x][y]| is the largest or above a certain\nthreshold; here, diffusion means adding H 0 and F 0 on\nH and F respectively at translated position (by x and\ny):\nDiffusion of \"g(x,y)-H[x][y]\" :\nfor (int x=0; x < Lx; ++x){\nfor (int y=0; y < Ly; ++y){\nif ( bound[x][y] ){// boundary position\ntransit = g[x][y] - H[x][y];\nif ( abs(transit) > Thresh_ ){\nfor (int i=0; i < n_x; i++){\nfor (int j=0; j < n_y; j++){\nH[i][j] +=\ntransit*H0[abs(i-x)][abs(j-y)];\nF[i][j] +=\ntransit*F0[abs(i-x)][abs(j-y)];\n}\n}\n}\n}\n}\n}\n\u2022 the previous step is repeated until the threshold is below the targeted error;\n\u2022 if required, we may also diffuse fluid F which are above\na given threshold (we may also decide not to use F at\nall), because as far as we keep F and H, all operations\nare invertible in the sense that we can inject the surplus\nor the deficit fluid to make the exact convergence in\nany order.\nThe numerical solution to our problem is then given by\nH. If H is exactly equal to the boundary condition g on \u2202\u03a9,\nthen H on \u03a9 is the exact limit.\nAs for the 1D case, we can express this approach by\nthe projection method where the elementary catalyst limit\nserves as a unique base. It can be also understood as an application of calculus of variations or a Lagrangian approach.\nLet's call \u03c6 the limit of the elementary catalyst (for instance\non a square surface that's bigger than \u03a9). Then, we can\n\nX\n\nxb \u2208\u2202\u03a9\n\n(26)\n(27)\n\n!\n\u03b42 X\ng(i)\u03c6i (xb ) \u03c6\u0303xb (x),\ny(xb ) \u2212 \u03b1(xb ) \u2212\n4 i\u2208\u03a9\n(28)\n\nwhere x = (\u03b4n, \u03b4m) \u2208 \u03a9 (regular grid of \u03b4), \u03c6i (x) the\nvalue of \u03c6 at point x when the origin is set at i and \u03c6\u0303 =\n\u03c6/(1 \u2212 \u03c6(0, 1)), and \u03b1(xb ) is term expressing all diffusion received from other boundary condition related diffusion. Our\napproach can be understood as an iterative approach to find\nthe coefficients \u03b1(xb ).\nIts limit (if existence) for \u03b4 \u2192 0 can be formulated as:\nZ\ny(x) =\n(y(xb ) \u2212 \u03b1(xb ))\u03c6\u0303(xb \u2212 x)dxb\n(29)\n\u2202\u03a9\nZ\n1\n\u2212\n\u2206y(t)\u03c6(x \u2212 t)dt\n(30)\n4 \u03a9\nZ Z\n1\n\u2206y(t)\u03c6(xb \u2212 t)\u03c6\u0303(xb \u2212 x)dtdxb\n(31)\n\u2212\n4 \u2202\u03a9 \u03a9\nwhere the second term comes from the diffusion of fluid inside \u03a9 and the two other from the correction for the boundary conditions. This formula assume in particular that we\nhave a limit of \u03c6 when N goes to infinity. We can interpret \u03c6(n, m) as the probability for 2D random walk to reach\n(n, m) before touching the boundary starting from (0, 0).\nWhen N goes to infinity, the random walk tends to the 2D\nBrownian motion and \u03c6(x) in the continuous space is the\nprobability that from (0, 0) we reach [x, x + dx] \u00d7 [y, y + dy]\nbefore the boundary is touched.\nIn a particular case when f = 0, they is a very nice theory\nof probability which shows that y is given by an explicit\nintegration formula ([18, 14, 3]):\ny(x) = h(x) = IEx [g(B(T ))]\nwhere B is the Brownian motion, T the stopping time when\nthe boundary is touched. If the boundary is a sphere, we\nhave a more explicit formula of the form:\nZ\n1 \u2212 |x|2\ny(x) = h(x) =\ng(y)\u03c3d (dy).\nd\nS d\u22121 |x \u2212 y|\nFrom the diffusion point of view, we can understand why\nwith the sphere we can have a simpler formula: the diffusion\nfrom one point of the sphere to all others points of the sphere\nfollows exactly the same process, meaning that in our approach the terms \u03b1(xb ) can be eliminated if \u03c6 is associated\nto this diffusion model.\nOur approach can be understood as an explicit practical\nsolution, not only in presence of f , but also for a general operators (so not only harmonic functions) associated to the\ndifferential equations, using a specific choice of \u03c6. When the\ndiffusion operator is not symmetrical in the four directions,\nthe very nice theory of harmonic function does no more apply. However, the idea of exploiting the pre-diffusion (\u03c6) can\nbe also compared to the use of the Green's function G(x, s)\n(when it is known!) and express the solution as:\nZ\ny(x) = G(x, s)f (s)ds\n\n\fBut while this is an exact solution, the computation of the\nGreen's function may be even more complex than solving\ndirectly by an iterative scheme in a general case.\nNote that our algorithm has no guarantee of convergence\n(on \u03b1(xb )). We hope address this point in a future paper, if\nsuch a consideration is not already proposed in the past.\n\n4.1 Error estimate\nThe distance to the limit can be estimated from\nX\nX\n|g(x, y) \u2212 H[x][y]|.\nr=\n|F [x][y]| +\nx,y\u2208\u03a90\n\nx,y\u2208\u2202\u03a9\n\nThe first component of r is the residual fluid resulting from\nthe diffusion by catalysts and the second component is the\nsurplus or the deficit fluid that are injected to \u03a9. If r = 0,\nH is the exact limit of the problem.\n\n5.\n\nEVALUATION\n\n5.1 Convergence comparison\nFor the evaluation purpose, we considered the following\n(too simple!) scenario:\n\u2022 S1: a 2D diffusion problem (f = 0) with Lx = Ly\nand boundary condition on the border: g(x, y) = 100.\nThe solution of this problem is obviously a constant\nfunction equal to 100 on every point of \u03a9.\nThe results are shown on Table 1: we used 2 Linux laptop: Intel(R) Core(TM)2 CPU, U7600, 1.20GHz, cache size\n2048 KB (Linux1, g + + \u2212 4.4) and Intel(R) Core(TM) i5\nCPU, M560, 2.67GHz, cache size 3072 KB (Linux2, g + + \u2212\n4.6). The pre-computation of the elementary catalyst on\n[\u2212Lx , Lx ] \u00d7 [\u2212Ly , Ly ] has been done for a given target error\n(target, on the remaining fluid); the runtime for this precomputation is given by pre-comp. The results have been\nsaved in a simple ASCII file, its loading time is given by Init.\nWe observed that the limitation of the error of our approach\nwas about 10\u22125 (which means for g(x) = 100 a relative precision of 10\u22127 ), resulting probably from the double precision\n(about 10\u221215 )) we have on F 0 (relatively to H 0 ). Through,\nthis school case, we just want to illustrate the potential of\nour approach.\n\n5.2 Stationary heat diffusion in 2D\nLet's consider a simple variant of S1: we set\n\u2022 S2: a very simple diffusion problem with Lx = Ly =\n2000 and boundary condition on the border: g(0, y) =\n100 and g(x, 0) = g(x, Ly ) = g(Lx , y) = 0.\nResults are on Figure 6, 7, 8, 9, 10, 11 and 12: for the\nD-iteration, we use the pre-computation \u03c6 that is generated\nin the previous section. We can see that with the naive\niterative method, the convergence to the limit may be really\nslow when a large grid is considered. The result obtained in\n30s with our approach has in this case a better convergence\nthan with 16 hours with Gauss-Seidel (the gain is reaching\na factor 2000). But of course, the gain was obtained thanks\nto the previous pre-computation \u03c6 which took about 1 day.\n\n6.\n\nCONCLUSION\n\nIn this paper we addressed a first analysis of the potential of the D-iteration when applied in the context of the\n\nLx\nLinux 1\nPre-comp\ntarget\nInit\nerror\nerror2\ntime\ngain\nerror\nerror2\ntime\ngain\n\nGS\n100\n\n200\n\nDI\n100\n\n200\n\nx\nx\nx\n1.0\n1e\u22123\n0.6\n1\n0.1\n1e\u22124\n0.9\n1\n\nx\nx\nx\n1.0\n2e\u22124\n10\n1\n0.1\n2e\u22125\n15\n1\n\n1.2\n1e\u22123\n0.1\n0.8\n200\n0.02\n\u00d730\n0.1\n30\n0.07\n\u00d713\n\n20\n1e\u22123\n0.3\n1.0\n400\n0.12\n\u00d780\n0.09\n53\n0.5\n\u00d730\n\nTable 1: Comparison of computation cost. Precomp: pre-computation time of the elementary catalyst. target: target error on the remaining fluid for\npre-computation. Init: initialization time. error:\ndistance to the limit. error2: maximum increment\nof the last iteration for GS, r for DI. Lx = 100, 200.\n\nLx\nLinux 1\nPre-comp\ntarget\nInit\nerror\nerror2\ntime\ngain\nerror\nerror2\ntime\ngain\n\nGS\n300\n\n400\n\nDI\n300\n\n400\n\nx\nx\nx\n1.0\n10\u22124\n53\n1\n0.1\n1e\u22125\n80\n1\n\nx\nx\nx\n1.0\n5e\u22125\n170\n1\n0.1\n5e\u22126\n250\n1\n\n100\n1e\u22123\n0.7\n1.0\n560\n0.5\n\u00d7100\n0.1\n77\n2.2\n\u00d735\n\n330\n1e\u22123\n1.2\n1.0\n700\n1.3\n\u00d7130\n0.1\n100\n6\n\u00d742\n\nTable 2: Comparison of computation cost: Lx =\n300, 400.\n\n\fLx\nLinux 1\nPre-comp\ntarget\nInit\nerror\nerror2\ntime\ngain\nerror\nerror2\ntime\ngain\nLinux 2\nPre-comp\ntarget\nInit\nerror\nerror2\ntime\ngain\nerror\nerror2\ntime\ngain\n\nGS\n1000\n\n2000\n\nDI\n1000\n\n2000\n\nx\nx\nx\n1.0\n1e\u22125\n6500\n1\n0.1\n1e\u22126\n9500\n1\n\nx\nx\nx\n1.0\n2e\u22126\n105000\n1\n0.4\n1e\u22126\n123700\n1\n\nx\nx\n8\n1.4\n2000\n10\n\u00d7650\n0.14\n260\n53\n\u00d7180\n\nx\nx\n15\n0.7\n2000\n90\n\u00d71200\n0.09\n270\n500\n\u00d7250\n\nx\nx\nx\n1.0\n1e\u22125\n2800\n1\n0.1\n1e\u22126\n4200\n1\n\nx\nx\nx\n1.0\n1e\u22126\n50000\n1\n0.1\n1e\u22127\n55000\n1\n\n6900\n10\u22123\n3\n1.0\n1500\n5\n\u00d7560\n0.11\n140\n30\n\u00d7140\n\n93000\n10\u22123\n10\n0.7\n2000\n30\n\u00d71600\n0.09\n270\n150\n\u00d7370\n\nTable 3: Comparison of computation cost: Lx =\n1000, 2000. Pre-computation is only done on Linux2.\n\nnumerical solving of differential equations. We showed that\nusing the regularity of the diffusion process, we can exploit\nthe idea of the pre-diffusion. The diffusion approach gives\na new way of understanding the differential and integration\nassociated operator iteration at a fundamental level and offers a great potential for a very fast numerical computation.\nFurther exploitation of this will be addressed in a future\npaper.\n\n[7] D. Hong. D-iteration based asynchronous distributed\ncomputation. arXiv, http://arxiv.org/abs/1202.3108,\nFebruary 2012.\n[8] D. Hong. D-iteration: Evaluation of a dynamic\npartition strategy. arXiv,\nhttp://arxiv.org/abs/1203.1715, March 2012.\n[9] D. Hong. D-iteration: Evaluation of the asynchronous\ndistributed computation. submitted,\nhttp://arxiv.org/abs/1202.6168, February 2012.\n[10] D. Hong. D-iteration method or how to improve\ngauss-seidel method. arXiv,\nhttp://arxiv.org/abs/1202.1163, February 2012.\n[11] D. Hong. Optimized on-line computation of pagerank\nalgorithm. submitted, http://arxiv.org/abs/1202.6158,\n2012.\n[12] D. Hong. Revisiting the d-iteration method: from\ntheoretical to practical computation cost. arXiv,\nhttp://arxiv.org/abs/1203.6030, March 2012.\n[13] C. Johnson. Numerical solution of partial differential\nequations by the finite element method, volume 32.\nCambridge University Press, 1987.\n[14] I. Karatzas and S. Shreve. Brownian Motion and\nStochastic Calculus. Graduate Texts in Mathematics.\nSpringer, 1991.\n[15] I. Podlubny. Fractional differential equations: an\nintroduction to fractional derivatives, fractional\ndifferential equations, to methods of their solution and\nsome of their applications. Mathematics in Science\nand Engineering. Academic Press, London, 1999.\n[16] Y. Saad. Iterative Methods for Sparse Linear Systems.\nSociety for Industrial and Applied Mathematics,\nPhiladelphia, PA, USA, 2nd edition, 2003.\n[17] G. D. Smith. Numerical Solution of Partial\nDifferential Equations: Finite Difference Methods,\nvolume 22. Oxford University Press, 1985.\n[18] D. Stroock. An Introduction To Markov Processes.\nGraduate Texts in Mathematics. Springer, 2005.\nGS: 4min\n\n7.\n\nREFERENCES\n\n100\n\n90\n\n90\n\n80\n\n80\n\n70\n\n70\n\n60\n\n60\n50\ny\n\n[1] U. M. Ascher and L. R. Petzold. Computer Methods\nfor Ordinary Differential Equations and\nDifferential-Algebraic Equations. Society for Industrial\nand Applied Mathematics, Philadelphia, PA, USA, 1st\nedition, 1998.\n[2] J. de F\u00e9riet. La Fonction Hyperg\u00e9om\u00e9trique, Par J.\nKamp\u00e9 de F\u00e9riet. M\u00e9morial des sciences\nmath\u00e9matique, fasc. 85. 1937.\n[3] C. Dellacherie and P. Meyer. Probabilit\u00e9s et potentiel:\nChapitres I \u00e0 IV. Probabilit\u00e9s et potentiel. Hermann,\n1975.\n[4] C. W. Gear. Numerical Initial Value Problems in\nOrdinary Differential Equations. Prentice Hall PTR,\nUpper Saddle River, NJ, USA, 1971.\n[5] G. H. Golub and C. F. V. Loan. Matrix Computations.\nThe Johns Hopkins University Press, 3rd edition,\n1996.\n[6] D. Hong. D-iteration: application to differential\nequations. arXiv, http://arxiv.org/abs/1204.1423,\nMarch 2012.\n\n50\n40\n40\n30\n\n30\n\n20\n\n20\n\n10\n\n10\n0\n\n0\n0\n\n10\n\n20\n\n30\n\n40\n\n50\nx\n\n60\n\n70\n\n80\n\n90\n\n100\n\nFigure 5: Gauss-Seidel. Run time: 4 min.\n\n\fy\n\nGS: 60min\n100\n\n100\n\n90\n\n90\n\n80\n\n80\n\n70\n\n70\n\n100\n\n90\n\n60\n\n60\n\n90\n\n80\n\n50\n\n50\n\n80\n\n40\n\n40\n\n70\n\n30\n\n30\n\n60\n\n20\n\n20\n\n50\n\n10\n\n10\n\n40\n\n0\n\n0\n\n30\n\nDI: 2s\n\n70\n60\n\ny\n\n50\n40\n\n0\n\n10\n\n20\n\n30\n\n40\n\n50\n\n60\n\n70\n\n80\n\n90\n\n30\n\n100\n\n20\n\n20\n\nx\n\n10\n\n10\n0\n\n0\n0\n\n10\n\n20\n\n30\n\n40\n\nFigure 6: Gauss-Seidel. Run time: 1 hour.\n\n70\n\n80\n\n90\n\n100\n\n90\n\n90\n\n80\n\n80\n\n70\n\n70\n\n60\n\n60\n\n50\n\n50\n\n40\n\n40\n\n30\n\n30\n\n20\n\n20\n\n10\n\n10\n\n100\n\n100\n\n0\n\n90\n\n90\n\n80\n\n80\n\n70\n\n70\n\n60\n\n60\n\n50\n\n50\n\n40\n\n40\n\n30\n\n30\n\n20\n\n20\n\n0\n0\n\n10\n\n20\n\n30\n\n40\n\n50\nx\n\n60\n\n70\n\n80\n\n90\n\nDI: 8s\n\n100\n\nFigure 7: Gauss-Seidel. Run time: 2 hours.\nGS: 4 hours\n100\n\n100\n\n10\n\n90\n\n90\n\n0\n\n80\n\n80\n\n70\n\n70\n\n60\n\n60\n\n50\n\n50\n\n40\n\n40\n\n30\n\n30\n\n20\n\n20\n\n10\n\n10\n0\n0\n\n10\n\n20\n\n30\n\n40\n\n50\nx\n\n60\n\n70\n\n80\n\n90\n\n100\n\nFigure 11: D-iteration: 8 s.\n\n10\n\n0\n\n0\n0\n\n10\n\n20\n\n30\n\n40\n\n50\nx\n\n60\n\n70\n\n80\n\n90\n\n100\n\nFigure 8: Gauss-Seidel. Run time: 4 hours.\n\nDI: 30s\n\nGS: 16 hours\n\ny\n\n100\n\n100\n\ny\n\ny\n\n60\n\nFigure 10: D-iteration: 2 s.\n\nGS: 2 hours\n\ny\n\n50\nx\n\n100\n\n100\n\n90\n\n90\n\n80\n\n80\n\n100\n\n70\n\n70\n\n90\n\n90\n\n60\n\n60\n\n80\n\n80\n\n50\n\n50\n\n70\n\n70\n\n40\n\n40\n\n60\n\n60\n\n30\n\n30\n\n50\n\n50\n\n20\n\n20\n\n40\n\n40\n\n10\n\n10\n\n30\n\n30\n\n0\n\n20\n\n20\n\n10\n\n10\n\ny\n\n100\n\n0\n0\n\n0\n\n10\n\n20\n\n30\n\n40\n\n50\nx\n\n60\n\n70\n\n80\n\n90\n\n0\n0\n\n10\n\n20\n\n30\n\n40\n\n50\nx\n\n60\n\n70\n\n80\n\n90\n\n100\n\nFigure 9: Gauss-Seidel. Run time: 16 hours.\n\nFigure 12: D-iteration: 30 s.\n\n100\n\n\f"}