{"id": "http://arxiv.org/abs/1008.3320v1", "guidislink": true, "updated": "2010-08-19T14:59:34Z", "updated_parsed": [2010, 8, 19, 14, 59, 34, 3, 231, 0], "published": "2010-08-19T14:59:34Z", "published_parsed": [2010, 8, 19, 14, 59, 34, 3, 231, 0], "title": "Efficient Wrapper/TAM Co-Optimization for SOC Using Rectangle Packing", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1008.1875%2C1008.0789%2C1008.4526%2C1008.4542%2C1008.0892%2C1008.3258%2C1008.1754%2C1008.2217%2C1008.5192%2C1008.2722%2C1008.4606%2C1008.2220%2C1008.1783%2C1008.3389%2C1008.4560%2C1008.4607%2C1008.4929%2C1008.4483%2C1008.1522%2C1008.2676%2C1008.4364%2C1008.2012%2C1008.3041%2C1008.4856%2C1008.3617%2C1008.2316%2C1008.0146%2C1008.0152%2C1008.2178%2C1008.3843%2C1008.5032%2C1008.2352%2C1008.1571%2C1008.0103%2C1008.4042%2C1008.4170%2C1008.3171%2C1008.4424%2C1008.0882%2C1008.3093%2C1008.3968%2C1008.0653%2C1008.2262%2C1008.0995%2C1008.5003%2C1008.2355%2C1008.1800%2C1008.1092%2C1008.0832%2C1008.2094%2C1008.4932%2C1008.5170%2C1008.0686%2C1008.3028%2C1008.3981%2C1008.2765%2C1008.2375%2C1008.4103%2C1008.3575%2C1008.1131%2C1008.1833%2C1008.2349%2C1008.3845%2C1008.0750%2C1008.3377%2C1008.3191%2C1008.1083%2C1008.1645%2C1008.1158%2C1008.0177%2C1008.3768%2C1008.1621%2C1008.0503%2C1008.3320%2C1008.5328%2C1008.1678%2C1008.1790%2C1008.4816%2C1008.2550%2C1008.2686%2C1008.4548%2C1008.4776%2C1008.5261%2C1008.4768%2C1008.3916%2C1008.4311%2C1008.1302%2C1008.0627%2C1008.4917%2C1008.4899%2C1008.0090%2C1008.4008%2C1008.5226%2C1008.1650%2C1008.3855%2C1008.4554%2C1008.0012%2C1008.4757%2C1008.1613%2C1008.2294%2C1008.1000&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Efficient Wrapper/TAM Co-Optimization for SOC Using Rectangle Packing"}, "summary": "The testing time for a system-on-chip(SOC) largely depends on the design of\ntest wrappers and the test access mechanism(TAM).Wrapper/TAM co-optimization is\ntherefore necessary to minimize SOC testing time . In this paper, we propose an\nefficient algorithm to construct wrappers that reduce testing time for cores.\nWe further propose a new approach for wrapper/TAM co-optimization based on\ntwo-dimensional rectangle packing. This approach considers the diagonal length\nof the rectangles to emphasize on both TAM widths required by a core and its\ncorresponding testing time.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1008.1875%2C1008.0789%2C1008.4526%2C1008.4542%2C1008.0892%2C1008.3258%2C1008.1754%2C1008.2217%2C1008.5192%2C1008.2722%2C1008.4606%2C1008.2220%2C1008.1783%2C1008.3389%2C1008.4560%2C1008.4607%2C1008.4929%2C1008.4483%2C1008.1522%2C1008.2676%2C1008.4364%2C1008.2012%2C1008.3041%2C1008.4856%2C1008.3617%2C1008.2316%2C1008.0146%2C1008.0152%2C1008.2178%2C1008.3843%2C1008.5032%2C1008.2352%2C1008.1571%2C1008.0103%2C1008.4042%2C1008.4170%2C1008.3171%2C1008.4424%2C1008.0882%2C1008.3093%2C1008.3968%2C1008.0653%2C1008.2262%2C1008.0995%2C1008.5003%2C1008.2355%2C1008.1800%2C1008.1092%2C1008.0832%2C1008.2094%2C1008.4932%2C1008.5170%2C1008.0686%2C1008.3028%2C1008.3981%2C1008.2765%2C1008.2375%2C1008.4103%2C1008.3575%2C1008.1131%2C1008.1833%2C1008.2349%2C1008.3845%2C1008.0750%2C1008.3377%2C1008.3191%2C1008.1083%2C1008.1645%2C1008.1158%2C1008.0177%2C1008.3768%2C1008.1621%2C1008.0503%2C1008.3320%2C1008.5328%2C1008.1678%2C1008.1790%2C1008.4816%2C1008.2550%2C1008.2686%2C1008.4548%2C1008.4776%2C1008.5261%2C1008.4768%2C1008.3916%2C1008.4311%2C1008.1302%2C1008.0627%2C1008.4917%2C1008.4899%2C1008.0090%2C1008.4008%2C1008.5226%2C1008.1650%2C1008.3855%2C1008.4554%2C1008.0012%2C1008.4757%2C1008.1613%2C1008.2294%2C1008.1000&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The testing time for a system-on-chip(SOC) largely depends on the design of\ntest wrappers and the test access mechanism(TAM).Wrapper/TAM co-optimization is\ntherefore necessary to minimize SOC testing time . In this paper, we propose an\nefficient algorithm to construct wrappers that reduce testing time for cores.\nWe further propose a new approach for wrapper/TAM co-optimization based on\ntwo-dimensional rectangle packing. This approach considers the diagonal length\nof the rectangles to emphasize on both TAM widths required by a core and its\ncorresponding testing time."}, "authors": ["Md. Rafiqul Islam", "Muhammad Rezaul Karim", "Abdullah Al Mahmud", "Md. Saiful Islam", "Hafiz Md. Hasan Babu"], "author_detail": {"name": "Hafiz Md. Hasan Babu"}, "author": "Hafiz Md. Hasan Babu", "arxiv_comment": "4 pages, 6 figures, 2 tables", "links": [{"href": "http://arxiv.org/abs/1008.3320v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1008.3320v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.OH", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.OH", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1008.3320v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1008.3320v1", "journal_reference": "10th International Symposium on Integrated Circuits, Devices and\n  Systems, pp. 397-400, 2004", "doi": null, "fulltext": "Efficient Wrapper/TAM Co-Optimization for SOC Using Rectangle Packing\nMd. Rafiqul Islam, Muhammad Rezaul Karim, Abdullah Al Mahmud,\nMd. Saiful Islam, Hafiz Md. Hasan Babu\nDepartment of Computer Science and Engineering\nUniversity of Dhaka, Dhaka-1000, Bangladesh\nrafik@udhaka.net ,{r_karimcs,aamrubel,sohel_csdu}@yahoo.com, hafizbabu@hotmail.com\n\nAbstract : The testing time for a system-on-chip(SOC) largely depends on the design of test wrappers and the test\naccess mechanism(TAM).Wrapper/TAM co-optimization is therefore necessary to minimize SOC testing time . In this\npaper, we propose an efficient algorithm to construct wrappers that reduce testing time for cores. We further propose a\nnew approach for wrapper/TAM co-optimization based on two-dimensional rectangle packing. This approach considers\nthe diagonal length of the rectangles to emphasize on both TAM widths required by a core and its corresponding testing\ntime.\n1.Introduction\nPre-designed and pre-verified intellectual property(IP)\ncores are being increasingly used in complex systemon-a-chip. However, testing these systems is difficult,\nand manufacturing test is widely recognized as a major\nbottleneck in SOC design. The general problem of SOC\ntest integration includes the design of TAM\narchitectures, optimization of the core wrappers, and\ntest scheduling. Test wrappers form the interface\nbetween cores and test access mechanisms (TAMs),\nwhile TAMs transport test data between SOC pins and\ntest wrappers [3]. We address the problem of designing\ntest wrappers and TAMs to minimize SOC testing time.\nWhile optimized wrappers reduce test application times\nfor the individual cores, optimized TAMs lead to more\nefficient test data transport on-chip. Since wrappers\ninfluence TAM design, and vice versa, a cooptimization strategy is needed to jointly optimize the\nwrappers and the TAM for an SOC.\nIn this paper we propose a new approach to\nintegrated wrapper/TAM co-optimization and test\nscheduling based on a general version of rectangle\npacking considering diagonal length of the rectangles to\nbe packed. The main advantages of our approach are\nthat it minimizes the test application time as well as\nTAM utilization.\nThe rest of the paper is organized as follows. Related\nwork is described in section 2 and a new approach to\nwrapper design is given in section 3. In Section 4,we\nformulate the wrapper/TAM co-optimization problem\nas a generalized version of rectangle packing. In section\n5,we integrate the wrapper design algorithm with the\ntest scheduling algorithm to obtain an effective\nwrapper/TAM architecture and a test schedule that\nminimizes testing time. Finally, in Section 6, we present\nexperimental results on one academic SOC.\n2.Related work\nMost prior research has either studied wrapper design\nand TAM optimization as independent problems, or not\n\naddressed the issue of sizing TAMs to minimize SOC\ntesting time [1,9,10]. Alternative approaches that\ncombine TAM design with test scheduling [2,8] do not\naddress the problem of wrapper design and its\nrelationship to TAM optimization.\nThe first integrated method for Wrapper/TAM cooptimization was proposed in [5,6,7].[5,7] are based on\nfixed-width TAMs which are inflexible and result in\ninefficient usage of TAM wires. An approach to\nwrapper/TAM co-optimization based on a generalized\nversion of rectangle packing was proposed in [6].This\napproach provides more flexible partitioning of the total\nTAM width among the cores.\n3. Proposed Wrapper Design\nThe purpose of our wrapper design algorithm is to\nconstruct a set of wrapper chains at each core. A\nwrapper chain includes a set of the scanned elements\n(scan-chains, wrapper input cells and wrapper output\ncells).The test time at a core is given by:\nTcore = p \u00d7 [1+max{si,so}] + min{si,so}\nwhere p is the number of test vectors to apply to the\ncore and si (so) denotes the number of scan cycles\nrequired to load (unload) a test vector (test response)[5].\nSo, to reduce test time , we should minimize the longest\nwrapper chain (internal or external or both), i.e. max{si,\nso}.Recent research on wrapper design has stressed the\nneed for balanced wrapper scan chains [5,10] to\nminimize the longest wrapper chain. Balanced wrapper\nscan chains are those that are as equal in length to each\nother as possible.\nThe proposed Wrapper_Design algorithm tries to\nminimize core testing time as well as the TAM width\nrequired for the test wrapper. The objectives are\nachieved by balancing the lengths of the wrapper scan\nchains and imposing an upper bound on the total\nnumber of scanned elements.\nOur heuristic can be divided in two main parts; the\nfirst one for combinational cores and the second one for\nsequential cores. For combinational cores, there are two\npossibilities. If I+O(where I is the number of functional\n\n\finputs and O the number of functional outputs) is\nbelow or equal to the TAM bandwidth limit, Wmax, then\nnothing is done and the number of connections to the\nTAM is I+O. If I+O is above Wmax , then some of the\ncells on the I/Os are chained together in order to reduce\nthe number of needed connections to the TAM.\n{\n\nthe selected rectangles in a bin of fixed height and\nunbounded width such that no two rectangle overlap\nand the width to which the bin is filled is minimized.\nUnlike in [6], each rectangle selected is not allowed to\nbe split vertically in our rectangle packing.\nTAM size\n\nprocedure Wrapper_Design (int Wmax, Core C)\n\n//Wmax =TAM width\nTotal_Scan_Element= total IO+\n\u2211 C.Scan_Chain_Length[i](1 \u2264 i \u2264 #SC);\n1. If C.#SC=0\nIf ( Total_Scan_Element \u2264 Wmax )\nAssign one bit on every I/O wrapper cell;\nElse\nDesign Wmax wrapper scan chains;\n2.Else\nMid_Lines = Wmax / 2;\nPeak_Scan_Element = Total_Scan_Element /\nMid_Lines ;\nSort the internal scan chains in descending order of\ntheir length;\nFor each scan chain SC\nFor each wrapper scan chain W already created\nIf ( Length(W)+Length(SC) \u2264\nPeak_Scan_Element )\nAssign the scan chain to this wrapper scan\nchain W ;\nElse\nCreate a new Wrapper scan chain Wnew ;\nAssign the scan chain to this wrapper scan\nchain Wnew ;\nAdd functional I/O to balance the wrapper chains ;\n}\nFigure 1: algorithm for wrapper design\n\nFor sequential cores, at first an upper bound is\nspecified(Peak_Scan_Element).The internal scan chains\nare then sorted in descending order. After that, Each\ninternal scan chain is successively assigned to the\nwrapper scan chain, whose length after this assignment\nis closest to, but not exceeding the length of the upper\nbound. In our algorithm, a new wrapper scan chain is\ncreated only when it is not possible to fit an internal\nscan chain into one of the existing wrapper scan chains\nwithout exceeding the length of the upper bound. At\nlast, functional inputs and outputs are added to balance\nthe wrapper scan chains.\nOur wrapper design algorithm gives results like table\n1.Unlike [5], our Pareto-optimal points and their\ncorresponding TAM utilized values (TAMu) are not\nsame.\n4.The Rectangle Packing Problem\nThe concept of using rectangles for core test\nrepresentation has been used before in [4,6,8]. Consider\na SOC having N cores and let Ri be the set of rectangles\nfor core i, 1\u2264 i \u2264N. Generalized version of rectangle\npacking problem PROBLEM-RP is as follows: select a\nrectangle R from Ri for each set Ri, 1\u2264 i \u2264N and pack\n\n50-64\n48-49\n32-47\n24-31\n20-23\n16-19\n14-15\n12-13\n10-11\n8-9\n6-7\n4-5\n2-3\n1\n\nTAM\nutilized\n(TAMu)\n47\n39\n24\n16\n12\n10\n8\n7\n6\n5\n4\n3\n2\n1\n\nLongest\nScan chain\n521\n1021\n1042\n1563\n2084\n2605\n3126\n3647\n4689\n5729\n7809\n11969\n23789\n24278\n\nTable 1:result of Wrapper_Design for core 6 of p93791 [11]\n\nIn this paper, the wrapper/TAM co-optimization\nproblem PROBLEM-OPT that we consider is as follows:\ndetermine the TAM width to be assigned and design a\nwrapper for each core and schedule the tests for the\nSOC in such a way that minimizes the total testing time\nand the total number of TAM wires utilized at any\nmoment does not exceed total TAM width when a set of\nparameters for each core is given. The set of parameters\nfor each core includes the number of primary I/Os, test\npatterns, scan chains and scan chain lengths.\nData structure\n\ntest_schedule\n\n1.width[i]\n//TAM width assigned to core i\n2.finish[i]\n//end time of core i\n3.scheduled[i] //boolean indicates core i is\nscheduled\n4.start[i]\n//begin time of core i\n5.complete[i] //boolean indicates test for core\ni has finished\n6.peak_tam[i] //equals to MAX_TAMu\nFigure 2:Data structure for the test schedule\n\nWe solve the PROBLEM-OPT by generalized version\nof rectangle packing or two-dimensional packing\nProblem-RP .We use the Wrapper_Design algorithm to\nobtain the different test times for each core for varying\nvalues of TAM width. A set of rectangles for a core can\nnow be constructed, such that the height of each\nrectangle corresponds to a different TAM width and the\nwidth of the rectangle represents the core test\napplication time for this value of TAM width.\nPROBLEM-RP relates to PROBLEM-OPT as follows\n:The height of the rectangle selected for a core\ncorresponds to the TAM width assigned to the core,\nwhile the rectangle width corresponds to its testing\ntime. The height of the bin corresponds to the total SOC\nTAM width, and the width to which the bin is\n\n\fultimately filled corresponds to the system testing time\nthat is to be minimized. The unfilled area of the bin\ncorresponds to the idle time on TAM wires during test.\nFurthermore, the distance between the left edge of each\nrectangle and the left edge of the bin corresponds to the\nbegin time of each core test.\nOur approach emphasizes on both testing time of a\ncore and the TAM width required to achieve that testing\ntime by considering the diagonal length of rectangles.\nConsider three rectangles R[1] = {H=32, W=7.1,\nDL=32.78}, R[2] = {H=16, W=13.8,DL=21.13}, R[3]\n= {H=32, W=5.4,DL=32.45) where W,H, DL denotes\nwidth, height and diagonal length of the rectangles\nrespectively . Here if we take into account testing\ntime(W), then we should pack R[2] first ,followed by\nR[1]and R[3] . We found that this does not produce\nbest result in rectangle packing. But when we consider\ndiagonal lengths, we pack R[1], R[3], R[2] in sequence,\nand get the result that is extremely efficient.\nAlgorithm Test_Scheduling (Wmax, Core C[1...NC])\n{\n1.For each core C[i] ,construct a set of rectangles\ntaking TAMu as rectangle height and its corresponding\ntesting time as rectangle width such that TAMu <=\nWmax\n2. Find the smallest(Tmin) among the testing time\ncorresponding to MAX_TAMu of all cores\n3. For each core C[i] , divide the width T[i] of all\nrectangles constructed in line 1 with Tmin.\n4. For each core C[i] ,calculate Diagonal Length DL[i]\n= \u221a ( (W[i])2 + (T[i]2)) where W[i] denotes\nMAX_TAMu and T[i] denotes corresponding reduced\ntesting time.\n5.Sort the Cores in descending order of diagonal\nlength calculated in line 4 and keep in list\nINITIAL[NC]\n6. Next_Schedule_Time = 0\ncurrent_Time = 0;\nWavail = Wmax;\n// TAM available\nIdle_Flag=False;\n// peak_tam[c] is equal to MAX_TAMu of core c\n// PENDING is a queue.\n7. While (INITIAL and PENDING not Empty)\n{\n8 If (Wavail > 0 and Idle_Flag=False )\n{\n9.If (INITIAL is not empty)\n{\nc=delete(INITIAL);\nIf ( Wavai \u2265 peak_tam[c])\nUpdate(c,peak_tam(c));\nElse If(Possible_TAM \u2265 0.5*peak_tam[c])\nUpdate(c, Possible_TAM);\nElse\nadd(PENDING,c);\nif(peak_tam[PENDING[front]] \u2264 Wavail)\nUpdate(PENDING[front],\npeak_tam[PENDING[front]]);\ndelete(PENDING) ;\n}\n10.Else //if INITIAL is empty\n\n{\nIf(peak_tam[PENDING[front]] \u2264 Wavail)\nUpdate(PENDING[front],\npeak_tam[PENDING[front]]);\ndelete(PENDING) ;\nElse\nIdle_Flag=True;\n}\n}\n11.Else //TAM available < 0 or idle\n{\nCalculate Next_Schedule_Time = Finish[i],\nSuch that Finish[i]> This_Time and Finish[i] is\nminimum;\nSet This_Time=Next_Schedule_Time;\n12.For every Core i, such that finish[i] = This_Time\nWavail = Wavail + Width[i];\n13. Set Complete[i] = TRUE;\nIdle_Flag=False;\n}\n} //end of while\nreturn test_schedule;\n}\nFigure3: proposed Test scheduling algorithm with TAM\noptimization\n\nProcedure update( i , w)\n1.Let i be the core to be updated in the test schedule\n2.Start[i]=Current_Time;\n3.Set scheduled[i] = TRUE;\n4.finish[i] = Current_Time + Ti(w);\n5.width[i]=w;\n6. Wavail=Wavail- w;\nFigure 4:Data structure for the update algorithm\n\n5.Proposed Test Scheduling\nRectangle construction: In our proposed test\nscheduling algorithm (figure 3), after getting the result\nof Wrapper_Design, for each core, we construct a set of\nrectangles taking TAMu as rectangle height and its\ncorresponding testing time as rectangle width such that\nTAMu \u2264 Wmax (figure 5) rather than constructing the\ncollection of Pareto-optimal rectangles like [5].\nMAX_TAMu is the largest among the TAMu values\nsatisfying the above constraint. In figure 5,\nMAX_TAMu.=24 and Wmax=32 .For combinational core,\nMAX_TAMu is always equal to Wmax. Note that, In\ncase of TAM wire assignment to that particular\nscheduling of p93791 (figure 5), TAM wires that are to\nbe assigned to core 6 must be selected from values\n24,16,12,10,8-1 depending on TAM width available\nDiagonal length calculation: In line 2, we find the\nsmallest(Tmin) among the testing time corresponding to\nMAX_TAMu for all cores . In line 3,for each core we\ndivide width(testing time) of all constructed rectangles (\nline 3) with Tmin. Then in line 4,for each core we\n\n\fcalculate the diagonal length of the rectangle where\nrectangle height W[i] =MAX_TAMu and rectangle\nwidth T[i] is reduced testing time corresponding to\nMAX_TAMu . We then sort the cores in descending\norder of diagonal length calculated in line 4.\n\nWavail is begun .Line 13 increases Wavail by the width\nof all cores ending at the new value of This_Time and\nLine 13 sets complete[i] to true for all cores whose test\nhas completed at This_Time.\n6. Experimental results\nIn this section, we present experimental results for one\nexample SOC: d695. This SOC is a part of the ITC'02\nSOC benchmarking initiative[11].In our algorithm we\nconsidered TAM wire sharing as test conflict. The\nresults for SOC d695 are given in Table 2. In this Table\nwe compare the testing times obtained using our\nproposed approach and previous approaches of\nwrapper/TAM co-optimization for a given TAM width.\nNote that none of the previous approaches consider\nmore test conflicts than TAM wire sharing.\n\nFigure 5: example of some rectangles for core 6 of SOC\np93791(figure drawn not to scale) when Wmax= 32\n\nTAM assignment: While executing the main While\n\nloop(line 7),if there are Wavail TAM wires available\nfor assignment and list INITIAL is not empty, we\nselect a core c from the list in sorted order. If TAM\navailable at that moment ( Wavail ) is greater than or\nequal to peak_tam[c],we schedule the tests of that core\nand assign TAM wires to c equal to peak_tam[c].Note\nthat ,peak_tam[c] is equal to MAX_TAMu of core c. If\nWavail is less than peak_tam[c],it tries to find a TAMu\nvalue such that TAMu \u2264 Wavail and TAMu greater\nthan half of peak_tam[c]. If it fails to assign TAM wires\nto c satisfying these conditions, it add the core c into\nqueue PENDING.It then deletes a core p from the\nqueue PENDING for scheduling only if Wavail is\ngreater than or equal to peak_tam[p].\nIf list INITIAL is empty, the algorithm deletes the\ncore c at the front of queue PENDING only if Wavail\n\u2265 peak_tam[c].Otherwise it waits until sufficient TAM\nwires become available. If Wavail>0 and INITIAL is\nempty, these Wavail wires are declared idle and\nIdle_Flag is set if Wavail cannot satisfy the condition\nWavail \u2265 peak_tam[c] where c is the core at the front of\nqueue PENDING .\n\nFigure 6:Test scheduling for d695 using our algorithm (Tmin=1109\nand TAM width=24)\n\nIf there are Wavail idle wires or Wavail=0,the\nexecution proceeds to line 12 where the process of\nupdating This_Time to Next_Schedule_Time and\n\n7. Conclusion\nIn this paper, we have presented a new technique based\non rectangle packing for Wrapper/TAM cooptimization and test scheduling .We have emphasized\non both time and TAM width by considering diagonal\nlengths. The experimental results show the efficiency of\nour algorithm.\nTAM\nWidth\n\n[5]\n\n[6]\n\n[7]\n\nProposed\n\n64\n56\n48\n40\n32\n24\n16\n\n12941\n13207\n16975\n17901\n21566\n28292\n42568\n\n11604\n13415\n15698\n18459\n23021\n30317\n43723\n\n12941\n12941\n15300\n18448\n22268\n30032\n42644\n\n14914\n16242\n16317\n20207\n20402\n27829\n39572\n\nTable 2:Experimental result for d695\n\n8.References\n[1]J. Aerts and E. J. Marinissen. Scan chain design for test time\nreduction in core-based ICs. Proc. Int. Test Conf., pp. 448-457, 1998.\n[2] E. Larsson and Z. Peng. An integrated system-on-chip test\nframework. Proc. Design Automation and Test in Europe Conf.,\npp. 138-144, 2001\n[3] E. J. Marinissen et al. A structured and scalable mechanism for\ntest access to embedded reusable cores. Proc. Int. Test Conf., pp. 284293,1998\n[4] R. Chou, K. Saluja, V. Agrawal: \"Scheduling Tests for VLSI\nSystems under Power Constraints\", IEEE Trans. On VLSI\nSystems, Vol. 5, No. 2, pp. 175-185, 1997\n[5] V. Iyengar, K. Chakrabarty and E. J. Marinissen. Test wrapper\nand test access mechanism co-optimization for system-on-chip. J.\nElectronic Testing: Theory and Applications, vol. 18, pp. 211\u2013228,\nMarch 2002.\n[6] V. Iyengar, K. Chakrabarty, E. J. Marinissen: \"On Using\nRectangle Packing for SoC Wrapper/TAM co-optimization\",\nVTS'02,pp. 3- 258, 2002.\n[7] V. Iyengar, K. Chakrabarty, and E. J. Marinissen. Efficient\nwrapper/TAM co-optimization for large SOCs. Proc. Design\nAutomation and Test in Europe (DATE) Conf., 2002.\n[8] Y. Huang et al. Resource allocation and test scheduling for\nconcurrent test of core-based SOC design. Proc. Asian Test Symp.,\npp. 265-270,2001.\n[9] V. Iyengar and K. Chakrabarty. Test bus sizing for system-on-achip.IEEE Trans. Computers, vol. 51, May 2002, i\n[10] E. J. Marinissen, S.K. Goel and M. Lousberg. Wrapper design\nfor embedded core test. Proc. Int. Test Conf., pp. 911\u2013920, 2000.\n[11] E.J. Marinissen, V. Iyengar and K. Chakrabarty. ITC 2002 SOC\nbenchmarking initiative.\nhttp://www.extra.research.philips.com/itc02socbenchm\n\n\f"}