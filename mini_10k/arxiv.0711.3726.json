{"id": "http://arxiv.org/abs/0711.3726v1", "guidislink": true, "updated": "2007-11-23T13:44:55Z", "updated_parsed": [2007, 11, 23, 13, 44, 55, 4, 327, 0], "published": "2007-11-23T13:44:55Z", "published_parsed": [2007, 11, 23, 13, 44, 55, 4, 327, 0], "title": "Let's get the student into the driver's seat", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0711.4487%2C0711.2842%2C0711.1082%2C0711.1256%2C0711.2942%2C0711.3730%2C0711.3555%2C0711.3559%2C0711.2064%2C0711.0647%2C0711.4023%2C0711.2201%2C0711.2200%2C0711.3726%2C0711.4134%2C0711.1087%2C0711.0175%2C0711.3368%2C0711.3635%2C0711.3969%2C0711.2649%2C0711.2866%2C0711.2659%2C0711.4931%2C0711.3804%2C0711.0724%2C0711.1494%2C0711.3510%2C0711.3889%2C0711.2861%2C0711.1842%2C0711.3205%2C0711.3817%2C0711.3066%2C0711.1153%2C0711.2114%2C0711.2726%2C0711.2546%2C0711.2981%2C0711.4810%2C0711.2424%2C0711.0124%2C0711.4713%2C0711.3547%2C0711.3662%2C0711.0404%2C0711.0814%2C0711.2783%2C0711.4246%2C0711.0222%2C0711.1136%2C0711.3125%2C0711.0010%2C0711.4144%2C0711.0439%2C0711.3361%2C0711.0211%2C0711.2823%2C0711.1396%2C0711.4263%2C0711.1960%2C0711.0249%2C0711.4464%2C0711.2375%2C0711.0721%2C0711.4346%2C0711.1583%2C0711.3349%2C0711.3020%2C0711.3401%2C0711.3096%2C0711.0442%2C0711.3786%2C0711.1018%2C0711.3199%2C0711.3416%2C0711.1448%2C0711.3796%2C0711.0978%2C0711.1853%2C0711.1397%2C0711.2180%2C0711.4719%2C0711.1209%2C0711.3968%2C0711.1718%2C0711.1885%2C0711.2896%2C0711.3534%2C0711.0984%2C0711.3286%2C0711.2313%2C0711.4500%2C0711.2091%2C0711.2679%2C0711.4315%2C0711.0846%2C0711.3350%2C0711.4226%2C0711.3369%2C0711.4447&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Let's get the student into the driver's seat"}, "summary": "Speaking a language and achieving proficiency in another one is a highly\ncomplex process which requires the acquisition of various kinds of knowledge\nand skills, like the learning of words, rules and patterns and their connection\nto communicative goals (intentions), the usual starting point. To help the\nlearner to acquire these skills we propose an enhanced, electronic version of\nan age old method: pattern drills (henceforth PDs). While being highly regarded\nin the fifties, PDs have become unpopular since then, partially because of\ntheir lack of grounding (natural context) and rigidity. Despite these\nshortcomings we do believe in the virtues of this approach, at least with\nregard to the acquisition of basic linguistic reflexes or skills (automatisms),\nnecessary to survive in the new language. Of course, the method needs\nimprovement, and we will show here how this can be achieved. Unlike tapes or\nbooks, computers are open media, allowing for dynamic changes, taking users'\nperformances and preferences into account. Building an electronic version of\nPDs amounts to building an open resource, accomodatable to the users' ever\nchanging needs.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0711.4487%2C0711.2842%2C0711.1082%2C0711.1256%2C0711.2942%2C0711.3730%2C0711.3555%2C0711.3559%2C0711.2064%2C0711.0647%2C0711.4023%2C0711.2201%2C0711.2200%2C0711.3726%2C0711.4134%2C0711.1087%2C0711.0175%2C0711.3368%2C0711.3635%2C0711.3969%2C0711.2649%2C0711.2866%2C0711.2659%2C0711.4931%2C0711.3804%2C0711.0724%2C0711.1494%2C0711.3510%2C0711.3889%2C0711.2861%2C0711.1842%2C0711.3205%2C0711.3817%2C0711.3066%2C0711.1153%2C0711.2114%2C0711.2726%2C0711.2546%2C0711.2981%2C0711.4810%2C0711.2424%2C0711.0124%2C0711.4713%2C0711.3547%2C0711.3662%2C0711.0404%2C0711.0814%2C0711.2783%2C0711.4246%2C0711.0222%2C0711.1136%2C0711.3125%2C0711.0010%2C0711.4144%2C0711.0439%2C0711.3361%2C0711.0211%2C0711.2823%2C0711.1396%2C0711.4263%2C0711.1960%2C0711.0249%2C0711.4464%2C0711.2375%2C0711.0721%2C0711.4346%2C0711.1583%2C0711.3349%2C0711.3020%2C0711.3401%2C0711.3096%2C0711.0442%2C0711.3786%2C0711.1018%2C0711.3199%2C0711.3416%2C0711.1448%2C0711.3796%2C0711.0978%2C0711.1853%2C0711.1397%2C0711.2180%2C0711.4719%2C0711.1209%2C0711.3968%2C0711.1718%2C0711.1885%2C0711.2896%2C0711.3534%2C0711.0984%2C0711.3286%2C0711.2313%2C0711.4500%2C0711.2091%2C0711.2679%2C0711.4315%2C0711.0846%2C0711.3350%2C0711.4226%2C0711.3369%2C0711.4447&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Speaking a language and achieving proficiency in another one is a highly\ncomplex process which requires the acquisition of various kinds of knowledge\nand skills, like the learning of words, rules and patterns and their connection\nto communicative goals (intentions), the usual starting point. To help the\nlearner to acquire these skills we propose an enhanced, electronic version of\nan age old method: pattern drills (henceforth PDs). While being highly regarded\nin the fifties, PDs have become unpopular since then, partially because of\ntheir lack of grounding (natural context) and rigidity. Despite these\nshortcomings we do believe in the virtues of this approach, at least with\nregard to the acquisition of basic linguistic reflexes or skills (automatisms),\nnecessary to survive in the new language. Of course, the method needs\nimprovement, and we will show here how this can be achieved. Unlike tapes or\nbooks, computers are open media, allowing for dynamic changes, taking users'\nperformances and preferences into account. Building an electronic version of\nPDs amounts to building an open resource, accomodatable to the users' ever\nchanging needs."}, "authors": ["Michael Zock", "Stergos D. Afantenos"], "author_detail": {"name": "Stergos D. Afantenos"}, "author": "Stergos D. Afantenos", "arxiv_comment": "6 pages", "links": [{"href": "http://arxiv.org/abs/0711.3726v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0711.3726v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.CL", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.CL", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0711.3726v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0711.3726v1", "journal_reference": "The Seventh International Symposium on Natural Language Processing\n  (SNLP 2007). Chonburi, Thailand", "doi": null, "fulltext": "Let's get the student into the driver's seat\nMichael Zock\n\nStergos D. Afantenos\n\nLIF, CNRS (UMR 6166)\nUniversit\u00e9 de la M\u00e9diterran\u00e9e, Facult\u00e9 des Sciences de Luminy\n163, Avenue de Luminy - Case 901, 13288 Marseille C\u00e9dex 9 - France\n{michael.zock,stergos.afantenos}@lif.univ-mrs.fr\n\narXiv:0711.3726v1 [cs.CL] 23 Nov 2007\n\nAbstract\nSpeaking a language and achieving proficiency in another one is a highly complex\nprocess which requires the acquisition of various kinds of knowledge and skills, like the\nlearning of words, rules and patterns and their\nconnection to communicative goals (intentions), the usual starting point. To help the\nlearner to acquire these skills we propose\nan enhanced, electronic version of an age\nold method: pattern drills (henceforth PDs).\nWhile being highly regarded in the fifties,\nPDs have become unpopular since then, partially because of their lack of grounding (natural context) and rigidity. Despite these\nshortcomings we do believe in the virtues of\nthis approach, at least with regard to the acquisition of basic linguistic reflexes or skills\n(automatisms), necessary to survive in the\nnew language. Of course, the method needs\nimprovement, and we will show here how\nthis can be achieved. Unlike tapes or books,\ncomputers are open media, allowing for dynamic changes, taking users' performances\nand preferences into account. Building an\nelectronic version of PDs amounts to building an open resource, accomodatable to the\nusers' ever changing needs.\n\n1\n\nIntroduction\n\nSpontaneous speech is a cyclic process involving a\nloosely ordered set of tasks: conceptual preparation,\nformulation, articulation. Given a goal one has to decide what to say (conceptualization) and how to say it\n(formulation), making sure that the chosen elements,\nwords, can be integrated into a coherent whole (sentence frame) and conform to the grammar rules of the\nlanguage (syntax, morphology). During vocal delivery (articulation), in itself already a quite demanding\ntask, the speaker may decide to initiate the next cycle,\nnamely starting to plan the subsequent ideational fragment.\nObviously, smooth execution of such a complex task\nrequires not only access to a huge library of ready made\nfragments in more or less abstract or concrete form (patterns vs. words, or larger units), but also excellent organizational skills. Speed and knowledge are not all;\nproficient speakers are also flexible, capable to change\n\non the fly incompatible elements (dynamic accommodation). Not everything is necessarily planned in advance, local adjustments may become necessary.\nIf speaking is already a complex task, to do so in a\nforeign language can be even more daunting or overwhelming. There are at least three, probably related\nreasons for this: lack of knowledge, lack of assurance\nand lack of remembrance. Indeed, learning to speak a\nnew language requires not only learning a stock of new\nwords and rules, but also to have the necessary confidence to dare to speak, which supposes, of course,\nquick access (for example, words) and remembrance of\nwhat has been learned.\nTo achieve these goals (increase/consolidation of\nknowledge, fixation/memorisation, boosting of confidence) we have enhanced an age-old method, pattern\ndrills, by building an electronic version of it. While\nthe drill tutor (henceforth DT) is built for learning\nJapanese, we believe that the method is general enough\nto be applied to other languages.\nPDs are a special kind of exercise based on notions\nlike: analogy, task decomposition (small steps), systematicity, repetition and feedback. Important as they\nmay be, PDs, or exercices in general, are but one of\nthe many tools teachers rely on for teaching a language. Dictionaries, grammars, video and textbook being other means. None of them, except the first one\nwill be taken into consideration in this paper. PDs\nare typically used in audio-oral lessons. Such lessons\nare generally composed of the following steps: 1) Presentation of a little drama, involving people trying to\nsolve a communication problem at a given place and\ntime (hotel, train station). The student hears the story\nand is encouraged to play one of the characters; 2)\nPresentation of contrastive examples for rule induction. 3) A phase of rule fixation. This is where the\nPDs come into play. 4) Re-use of the learned rules\nor pattern in a new and similar, yet different situation.\nThese four stages fulfill, roughly speaking, the following functions (a) symbol grounding, i.e. illustration of\nthe pragmatic usage of the structure; (b) conceptualization, i.e. explanation/understanding of the rule (c)\nmemorization/automation of the patterns, and (d) transposition/consolidation of the learned material.\nObviously, there are many ways to learn a language,\nyet, one of them has proven to be quite efficient, at least\nfor survival purposes: PDs.1\n1\n\nAfter having been very popular for many years, PDs\nand instrumental conditioning on which they rely upon have\n\n\fSince PDs are neither a new nor an uncontroversial\nmethod, let us show how some, if not practically all, of\ntheir shortcomings can be overcome.\nLinguists describe languages in terms of rules, but\npeople hardly ever learn such descriptions, at least not\nat the initial stages of acquiring a new language. What\npeople do learn though are patterns complying with\nthese rules.2 This is definitely the case for beginners\nand this holds both for first and second language acquisition. R. Weir (Weir, 1962) provided evidence for\nthis by showing that children do spontaneously what\nwe do when being asked, rehearse linguistic structures.\nRecording her daughter at bedtime, she heard her doing\nspontaneously, what we do in school: drilling patterns.\nThis kind of behavior has been confirmed by other studies. As the learner makes progress, i.e. acquires more\nknowledge about the language, s/he will see the limitations of the pattern (overgeneralisation), possibly refining it such as to accommodate for the exceptions. Of\ncourse, people learn not only patterns, but also the situations (context) in which they occur. The latter can be\nseen as goals: seeing someone introduce himself, hearing him ask for a favor or offering help, the learner realizes that the person s/he is observing uses over and\nover the same pattern though not necessarily always in\nthe same situation. Given this tight connection between\nmeans (patterns) and ends (goals), we have decided to\nintegrate it in our DT: the fact that patterns are indexed\nin terms of goals, allows the user to choose the means\n(patterns) as a function of the end (goal, input). People\nare generally little motivated to do something, unless\nthey perceive its use, that is, the end a given action is\nserving for (means).\nAs pointed out elsewhere (Zock and Quint, 2004),\none of the drawbacks of traditional PDs is their material\nsupport. Books or audio cassettes being closed media,\neverything they contain has to be anticipated in all its\ndetails prior to their release. Yet anticipation can never\nbe perfect for at least two reasons. Different people\nhave different needs (for example, the specific words\nsomeone would like to learn, i.e. with which to drill\nbeen discredited by linguists (see Chomsky's violent criticism (Chomsky, 1959) of Skinner's book Verbal Behavior,\nan attempt to provide an operational account of language),\nand more directly by psychologists and pedagogues (Rivers,\n1964; Savignon, 1983). While we do agree with these criticisms, when the process of language production or the architecture of the human mind are at stake, we do not share\nthem at all, when habit formation or the acquisition of automatisms are the learning goal. For this specific task we\ndo believe that principled ways of staging the repetition of\nstimulus-response patterns together with feedback are a valuable learning method. Interestingly enough, patterns have\nbeen rehabilitated by one of Chomsky's best known students\n(Jackendoff, 1993).\n2\nIn our case, a pattern can be seen as the frozen instance\nof a step in the derivational process. Which step we want to\nfocus on depends on the task (describing data, support the language user). The main function patterns serve in this context\nis to support the speaker at the next step/level in the process,\nwhatever this level may be. Hence, patterns can be produced\nby a generative grammar, and they may be hybrid.\n\na given pattern), and peoples' needs change over time.\nThis being so, we must take individual differences and\nthe users' ever evolving needs into account. Yet this is\nprecisely what is precluded in the case of closed media.\nThey do not accept any change, update or accommodation after the product's release. In addition they ignore user preferences, or personal learning history: the\nroad to \"success\" (the method offered) is the same for\nall, forcing the learner into a straightjacket which, technologically speaking, is not justified anymore. Indeed,\nnone of these constraints are very problematic for open\nmedia like computers. The lexical values with which\nto instantiate the patterns' variables can be changed at\nany moment, so can the order of examples, the speed\nof their presentation and the number of repetitions be\nchanged at will. As a result, the same exercise can be\nused by a much larger group, or over a longer period of\ntime.\n\n2\n\nAn example of the Process\n\nBefore showing how the resource is built, let us see how\nit is meant to work and in what respect it differs from\nconventional PDs used in a language lab. Let's start\nwith the latter, illustrating it with the simplest case, substitution drills requiring no morphological changes.\nThe student receives a model, which could be composed of a question (let's say, \"what is this?\"), a stimulus (\"a pen\") and the answer (\"This is a pen\"). From\nthen on, he will only be given the stimulus and feedback\nconcerning his answer (the machine producing the correct sentence). Of course, the user has to produce the\nanswer in the first place.\nWhile being similar to classical PDs, our approach is\nnevertheless quit a bit different in various respects. First\nof all, it is the student who chooses the pattern he'd like\nto work on, as he knows (arguably) best what his needs\nare. Next, we have indexed patterns in terms of goals.\nThis is necessary in order to allow the learner to find the\npattern he'd like to work on. With the system growing,\ngrows the list of patterns. Hence, access becomes an\nissue. Also, associating patterns with goals allows the\nstudent to realize the pattern's communicative function.\nThird, since we don't have a parser or speech recognizer, we have a problem concerning the user's output.\nActually, the learner does not type at all. Since the focus is on speed (fluency), we'd like to avoid slowinging\ndown the process by having the input provided via the\nkeyboard. Hence we ask the user to produce the sentence mentally or to speak it out loud, and to check then\nwhether their result corresponds to the system's output.\nFourth, the system's output is also written. This can be\nconsidered as a disadvantage, yet it can also be turned\ninto a big advantage if, as planned, a speech synthesizer is added. Doing so would allow not only to discover grapheme-phoneme mappings, hence support the\nlearning of reading and writing, but also allow to support memorization by showing intonation curves and\nto control the speed of the vocal output, which leads\nus to the last point. Unlike tapes, which are a closed\n\n\fA\n\nChoose one of the patterns\n\nGoal Tree (list of goals)\n\nsomebody\nPresent\n\nPresent\nsomebody\n\nJapanese pattern\n\nEnglish pattern\n\nGoal\n\nKore wa <name> <title> desu\n\n1 This is <title> <name>\n2 This is <title> <name> from <origine>\n\nyourself\n\nSono kata wa doitsu no Sumisu desu\nSono kata wa <origin> no <name> <title>desu\n\nname\nQuestion\n\nProvide values (words) for the variables\n\ndirection\n\n<name> Matsumoto, Schmidt, Tanaka, Tsuji\n<origin> Japan, Germany, France\n\nprice\nCompare\n\nSet of possible outputs\n\nobject\npeople\n\nMr, Mrs, Dr., professor\n\n<title>\n\nprice\n\nThis is Mr. Smith from Germany.\n\nSono kata wa <doitsu> no <Sumisu> <san> desu\n\nThis is Prof. Tsuji from Japan\n\nSono kata wa <nihon> no <Tsuji> <sensei> desu\n\nFigure 1: The basic interaction process between the DT and the student.\n\nmedium, we can change at any moment certain parameters like (a) speed; (b) order of examples, (c) number\nof repetitions after which an element is taken from the\nlist (staging of repetitions and maximal presentation of\nproblematic cases), etc.\nFigure 1 here above illustrates the way how the student gets from the starting point, a goal (frame A), to its\nlinguistic realization, the endpoint (frame D) by using\nthe DT. The process is initiated via the choice of a goal\n(present somebody, step 1, frame A) to which the system answers with a set of patterns (step 2, frame B). The\nuser chooses one of them (B1 vs. B2, step 3), signalling\nthen the specific lexical values with which he would like\nthe pattern to be instantiated (frame C, step 4). The system has now all the information needed to create the exercise (frame D), presenting sequentially a model,3 the\nstimulus (chosen word), followed by the student's answer and the system's confirmation/information (normally also a sentence, implying that the student's answer is correct if the two sentences match and incorrect\nin the opposite case). The process continues until the\nstudent decides to stop, or until s/he has done all the\nexercices.\nGoal : Present Somebody\nPattern in English\nPattern in Japanese\nStimulus\nInstantiated Sentence\n\nThis is <title>\n<name> from <origin>.\nKono kata wa <origin>\nno <name> <title> desu.\nMr, Schmidt, Germany\nKono kata wa doitsu\nno Shimito san desu.\n\nTable 1: Model given by the system\n3\nThe latter is basically composed of a sentence (step 1),\na stimulus (the lexical value of the variable, step 2), and the\nnew sentence based on the model and the stimulus (step 3, see\nTable 1).\n\nNote that, if the values of the variables <title>,\n<name>, <origin> were (professor, Tsuji, Japan)\nrather than (Mr, Smith, Germany), then the outputs\nwould vary, of course, accordingly (see Table 2).\nGoal : Present Somebody\nS YSTEM (stimulus)\nU SER (response)\n\nProf, Tsuji, Japan\nKono kata wa nihon no\nTsuji sensei desu.\n\nS YSTEM (verification)\n\ncorrect\n\nTable 2: Interaction with the user in the training session\nTwo points might be worth mentioning: (1) Conceptual input is distributed over time, specification taking\nplace in several steps: first by choosing the abstract\noverall structure or pattern (steps 1 and 2) and then by\nproviding the variables' concrete lexical values: 'Mr,\nMrs, Dr, or professor' for the variable <title> (step\n4). (2) At the moment, we do not rely on any morphological component which obviously limits the system's\nscope. Any question-answer pair or sentence transformation may require such a component, and we will\nsurely integrate it later on. For the time being, the idea\nis just to illustrate the system's basic mechanism and\nthe interaction between the system and the student.\n\n3\n\nCurrent State of the Drill Tutor\n\nThe DT is a client/server web application written in\nPHP4 and sitting atop an Apache server5 in a Linux\nmachine. The DT is divided into two separate areas:\none reserved for data acquisition linking words, patterns and goals (the \"Expert Area\"), the other being reserved for exercising (the \"Student Area\"). The implemented operations are as follows.\n4\n5\n\nhttp://www.php.net/\nhttp://httpd.apache.org/\n\n\f3.1\n\nExpert Area\n\nPeople entitled to make changes\nto the database (henceforth called experts) have to authenticate themselves, via a user name and a password.\nThis is necessary in order to make sure that people work\non their own data and to avoid inconsistencies/noise in\nthe database.\nUser Authentication\n\nCurrently the system has about 30 patterns.6 To allow for quick access,\npatterns need to be indexed. This is done here via goals.\nOf course, other criteria could or should be used. In order to provide new data (typically a new goal and its\nassociated patterns and words) the expert can either use\nthe system's graphical user interface (henceforth GUI),\nor upload a file containing the necessary information.\nThis implies in the first case (a) naming the goal and\nspecifying its parent (see also the next paragraph), (b)\nproviding, in the source and target languages, all patterns likely to achieve this goal, and (c) providing values (words) for the variables. Once this is done, the\nsystem presents the expert all possible sentences computable on the basis of the input, allowing him to check\nthem for well formedness. After this the expert can provide additional input. If the data are communicated via\na file, care must be taken that the latter complies with\nthe syntactic rules.\nCreation of New Patterns and Goals\n\nStructuring Goals into Trees Learners knowing their\nneeds prefer to make their own choices rather than being told what patterns to work on. To do so, we must\ngive them the means to express their needs, or, in this\nparticular case, to locate the patterns. We do this via an\nindex (goals). Indexing can be done from various points\nof view (pragmatic, semantic, syntactic). We have chosen the first (pragmatic), leaving syntactic/semantic indexing (i.e. composing the message) for later on. As\ngoals can contain other goals, we have a tree or a hierarchy of goals. Hence, in order to find the wanted pattern, the student has to navigate in such goal tree (see\nalso Figure 1). To enable the system to create this kind\nof structure, experts have to state with their input where\nin the hierarchy fits their new goal and its associated\npattern(s). This is done via the parent node.\n\nThe data given to the system\n(goals, patterns and lexical values) can be modified at\nany time. In other words, experts can add, delete or\nmodify the patterns and values for any goal inserted.\nModification of Goals\n\nThe data given can be visualized as a table which can be useful for checking\ncompleteness and consistency of the patterns, or for appreciating the adequacy of the metalanguage.\n\nVisualization of the database\n\n6\nActually, the number of patterns is not really what counts\nat this stage, as the focus is on the implementation of an editor\ndesigned for building, modifying and using a database. Also,\nwhile it would have been easy to copy patterns from one of\nthe many text books, we have refrained from doing so, not\nonly for reasons of copyright, but also for reasons of metalanguage. The terms in which these patterns are defined are\nneither always consistent nor very felicitous.\n\nComputers are notorious for crashing, causing users to loose the work of days or even\nmonths. To circumvent this we allow experts to create\nbackups of their work, so that it can be restored at any\npoint in time.\nCreating Backups\n\nThe learning of a\nnew language should be independent of the used interface language, i.e. the language in which the information relevant for teaching/learning takes place. In order\nto accomplish this, the DT allows the expert to translate the interface and the linguistic data into a chosen\nsource language (usually, the learner's mother tongue).\nThe same holds true for the transliteration table, whose\nequivalents of the Hiragana symbols have to be given in\nthe new language. This can easily be done via the GUI.\nProviding a new interface language\n\n3.2\n\nThe Student Area\n\nAs mentioned already, the\nstudents can choose the pattern they'd like to work on.\nTo find the wanted pattern they navigate in the goal hierarchy. Once they've found the goal they will be presented with all its associated patterns, meaning that they\nhave to choose again, though, this time from a much\nsmaller set. Of course, they could also choose to work\nwith all of the goals, but this is rather atypical at the\nbeginning stages. Regardless of the user's choice (one\nvs. several patterns), the process develops as follows.\nFirst, students are shown an example sentence (model)\nin which a single element will be replaced. In the simplest case (substitution drill), only one element will be\nreplaced, no morphological changes taking place. Next\nare given, in random order, the elements (stimulus) to\nbe inserted into the proper slot. Doing so should help\nthe students not only to memorize words, but also use\n(or produce) them in the proper syntactic context.\nAfter this, students are shown the correct sentence\nboth in roman characters as well as in their transliterated Japanese form (for the time being only in Hiragana). The process iterates until the student has acquired the patterns or has decided to stop. It should\nbe noted that the transliteration of the Hiragana appears\nin the interface language chosen by the user. If it were\nGreek, then the transliterated sentence would also be in\nGreek characters, next to the Hiragana, of course.\nThe whole process is presented in a sober graphical\nuser interface. In addition, users are allowed to define\nkeyboard shortcuts, using keystrokes rather than moving the mouse over radio buttons. This increases speed\nand confort for telling the system that one has been able\nto produce the expected output, information necessary\nto decide whether a given combination (pattern + specific word) should be kept on the exercise list.\nWorking on the exercises\n\nOf course, the whole process\nwould be of little use if the students were not given\nsome means (feedback) to assess the quality of their\nwork. Actually, the system keeps track of the users'\nperformance (errors made during the training session),\npresenting them at the end statistics concerning the patMonitoring of Errors\n\n\fterns they have worked on. This allows the students to\ndevote more time to problematic cases.\nOne of the many problems foreigners have when learning Japanese is their\ncounting system, as the words expressing numerical\nvalues depend not only on these values, but also on\nthe nature (or certain features) of the counted object.\nTo this end, quanfiers (-bon, -mai, -biki, etc.) are\nadded to the counters. While western languages use the\nsame word, let's say 'three' to talk about given number\nof 'pencils, tickets, or dogs', japanese use a different\nquantifier for each case : san-bon, san-mai, san-biki,\netc. In order to account for this fact, we have created\nexercises allowing for selective variation of the number,\nthe object or both. Similarly, we have created specific\nexercises for learning the expression of time or family\nrelationships.\nExercises for specific problems\n\nAt some\npoint experts will have to decide how to refer to a goal\nor a variable, that is, how to call or name them. Any of\nthe following could be used to refer to a given object:\nsubject, noun , food . Still, students might not like any\nof them. After all, what counts is that they can find what\nthey are looking for, and to this end they have to rely on\n(or navigate by using) concepts that are meaningful to\nthem. Hence, we should give them the means to name\nthings the way they want, possibly even using several\nterms. In order to allow for this we provide a GUI allowing students to change the names of the variables\nand goals to their likings. With respect to the implementation, this information is kept in form of cookies\non the learner's side.\n\ndictionary to the DT is but the first step towards the\ncreation of a richer environment, enabling the expert to\nprovide example pattern(s) for a given goal, and to find\ngood lexical candidates to fill the patterns' variables.\nThe chosen words would, of course, be automatically\ntranslated into the \"target language\".\nSearching for Instances of Patterns in a corpus\nWhen providing a pattern for a goal, the expert has\nalso to provide a list of values with which to fill the pattern's variables. Imagine the following pattern, along\nwith its equivalent in Japanese (see Table 3).\nEnglish Pattern\n\nJapanese Pattern\n\nA : What is that?\nB : This is a <object>.\n\nA : soreha nan desu ka\nB : koreha <object> desu\n\nTable 3: A pattern in English and Japanese.\n\nLet the students use their own metalanguage\n\nChoosing the interface language As mentioned already\nin section 3.1, experts have the possibility to provide\nother interface languages than the default one, English.\nThis allows people to study Japanese via a language\nthey feel most comfortable with. If it were Russian,\nall the menus, scripts (transliterated Hiragana), goals\nand patterns would also be in this language at the GUI\nlevel.\n\n4\n\nFuture work\n\nThere are several ways to speed up data acquisition and\nconceptual input: (a) integration of a multilingual dictionary, (b) automatic detection of pattern instances in\ncorpora and (c) automatic pattern abstraction on the basis of concrete input (sentences).\nIntegration of a Dictionary\nWith every new goal the expert has to provide not\nonly its associated patterns, but also a list of values for the variables' values along with their translation. This puts a lot of work on the experts' shoulders. To alleviate this burden we could integrate an\nelectronic dictionary. A multilingual resource like Papillon (http://www.papillon-dictionary.\norg/Home.po) with its dozen of languages would\ndefinitely be a good candidate. Adding an electronic\n\nThe following could be a list of candidate values :\ndesk (tsukue), chair (isu), lamp (denki), etc. Even if\nthis list is open, the real problems are errors and scaling. With the list growing, grows the danger of making\nerrors. Anyhow, keying-in words is certainly not a very\nenticing task. This being so, we have decided to offer the expert another solution: instead of having him\nimagine and type in all these words, we provide him\nwith a set of candidates from which he can choose. The\nmethod is quite simple. Knowing the goal, we know the\npattern, and knowing the pattern we can use it, filtering a corpus to find instances of the variables. In other\nwords, searching potential values of the variables of a\npattern amounts to making a generic grep-like search\nover a well chosen text (say, the electronic version of a\ntext book, a teaching method, etc.), replacing the variables by the values' wild-card characters *. Thus, the\nsearch for values for the pattern of Table 3 could take\nthe following form: \"This is a *\".\nObviously, the success of this approach hinges critically on the quality of the corpus and (the generality of)\nthe query. Indeed, if the query is too general, we will\nget too many hits, which, even though compatible with\nthe pattern, they are not really what the expert is looking for. For example, the pattern here above could yield\nnot only \"this is a house\", which is fine, but also \"this is\na QBitmap object\", and \"this is a chair that Louis XIV\nused to have in one of his bedrooms\", which are by no\nmeans what we were looking for.\nThe procedure just described could be useful not only\nfor the expert, but also for the student. Indeed, the same\ntechniques could be used to search for instances of a\npattern, i.e. a \"similar\" sentences in context to the one\nprovided as input. To this end the system could perform\na grep search in a corpus, large enough to yield interesting examples, while being sufficiently accessible to be\nmeaningful for the user. Hence, rather than resorting to\nthe web which contains too much noise, we could use\nas corpus texts that the user is familiar with, composed\nof sentences he has either encountered or is likely to\nunderstand. The coursebook used for teaching the lan-\n\n\fguage would be a good candidate. This would not only\nexpand the students' experience of the patterns and the\nlanguage, by illustrating words in the context of sentences and discourse, it would also help them to memorize the words by learning new connections.\nGuessing Patterns from concrete Sentences\nHere we would like to take the whole process one\nstep further and describe how users could get the system\nto guess the pattern they have in mind when producing a\nspecific utterance. The input could even be given in the\nusers' mother tongue, provided that the lexical database\nknows the corresponding lexical values. Suppose you\nproduced \"quiero una cerveza\", wanting the system to\nunderstand, not only literally that you'd like a beer, but\nmore generically, that \"there is a person, who desires to\nget a certain kind of drink\", in order to retrieve then, as\ndiscussed already, instances of this pattern.\nThere are at least three issues here at stake: (1) determine the elements to be replaced by a variable (in\ntheory, nearly all words could be replaced); (2) determine the adequate level of naming the variable (while\nthe notion of NP is meaningful for linguists, categories\nlike \"people, fruit, means of transportation,\" etc. are\nfar more meaningful for \"ordinary\" people.); (3) massage the data (by annotating them) to ensure that the\nprogram will find instances of the abstracted word (category, variable).\nEnrichment of the Database\nAt the moment of writing this paper, we have mainly\nbeen concerned with the implementation of the basic\ninfrastructure. Though little effort has been put until\nnow into actually feeding the database with data (goals,\npatterns and values), this is vital information. While\nthere are many sources we can draw upon (Chino, 2004;\nKamiya, 2005), we must make careful choices. Increasing the number of patterns is not all, we must also make\nsure to choose only those that are really useful. In addition, we should be careful about the metalanguage\nwhich ideally should be meaningful even for the linguistically innocent users.\n\n5\n\nConclusions\n\nBecoming fluent in a language requires not only learning words and methods for accessing them quickly, but\nalso learning how to place them and how to make the\nnecessary morphological adjustments. This is not a\nsmall feat, considering that all this has to be done fast,\nand on top of it, content must be planned.\nThe work presented here is the result of less than 12\nmonths' work. It is implemented in PHP, and the supported languages are English at the interface level and\nJapanese as the language to be learned. We plan to add\nother languages, a speech synthesizer and a morphological component. We also intend to make the system\navailable on the web in the near future.\nHaving linked patterns to goals should help users to\nperceive the function of a given structure (i.e which\ngoal(s) can be reached by using a particular pattern).\n\nYet, most importantly, this linkage offers the possibility\nto get instances of the pattern from a document (corpus). This is interesting not only for data acquisition\n(building the resource by feeding it with lexical entries\nlikely to occur in a given pattern), but also for remembrance. In addition, presenting patterns with new material allows expanding the learner's experience of the\nlanguage. The fact that most goals are associated with\nmultiple patterns allows to extend the range of the exercise, reducing thus boredom. Instead of drilling one\nsingle pattern in response to a chosen goal, the system\ncan prompt the user by presenting him various patterns.\nObviously, PDs are not a panacea, yet used in the\nright way they can do wonders. Just like a tennis player\nmight want to go back to the court and train his basic\nstrokes, a language learner may feel the need to drill resisting patterns. We must beware though that patterns\nare just one element of a long chain. They need to be\nlearned, but once interiorized they must be placed back\ninto the context where they have come from, a real communicative scene. Without this additional experience\nthey will simply fail to produce the wanted effect, that\nis, help us achieve our communicative goals.\nComputers are a medium escaping many of the constraints (rigidity, closedness) other media (tapes or\nbooks) are condemned to. They allow for variable order\nof presentation, dynamic updating of words and much\nmore. Learning a language does not mean memorizing sentences, actually, we tend to forget those sooner\nor later. What usually remains are ideas, words and\npatterns, rather than full fledged sentences and rules.\nHence, forgetting sentences is not a problem anymore,\nsince we know now how to build them. This is the goal\nto which the DT contributes.\n\nReferences\nNaoko Chino. 2004. A Dictionary of Basic Japanese Sentence Patterns. Kodansha, Tokyo. patterns.\nNoam Chomsky. 1959. A review of B. F. Skinner's Verbal\nBehavior. Language, 31(1):26\u201358.\nRay Jackendoff. 1993. Patterns in the Mind: Language and\nHuman Nature. Harvester-Wheatsheaf.\nTaeko Kamiya. 2005. Japanese Sentence Patterns for effective communication. Kodansha, Tokyo.\nWilga Rivers. 1964. The Psychologist and the Foreign Language Teacher. University of Chicago Press, Chicago.\nSandra Savignon. 1983. Communicative Competence: Theory and Classroom Practice. Addison-Wesley, Reading,\nMA.\nRuth Weir. 1962. Language in the Crib. Mouton, La Haye.\nMichael Zock and Julien Quint. 2004. Why have them work\nfor peanuts, when it is so easy to provide reward? Motivations for converting a dictionary into a drill tutor. In\n5th workshop on Multilingual Lexical Databases, Grenoble, France.\n\n\f"}