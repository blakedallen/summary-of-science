{"id": "http://arxiv.org/abs/1204.5666v1", "guidislink": true, "updated": "2012-04-25T14:20:23Z", "updated_parsed": [2012, 4, 25, 14, 20, 23, 2, 116, 0], "published": "2012-04-25T14:20:23Z", "published_parsed": [2012, 4, 25, 14, 20, 23, 2, 116, 0], "title": "A new point of NP-hardness for 2-to-1 Label Cover", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1204.0127%2C1204.6091%2C1204.1393%2C1204.5666%2C1204.4942%2C1204.5341%2C1204.5078%2C1204.5440%2C1204.3700%2C1204.6697%2C1204.5850%2C1204.1050%2C1204.6480%2C1204.3049%2C1204.2997%2C1204.3635%2C1204.5954%2C1204.4897%2C1204.4385%2C1204.0125%2C1204.3327%2C1204.4807%2C1204.6723%2C1204.4162%2C1204.3043%2C1204.2781%2C1204.4859%2C1204.6260%2C1204.2193%2C1204.5882%2C1204.2520%2C1204.4797%2C1204.3302%2C1204.1734%2C1204.3431%2C1204.4838%2C1204.4583%2C1204.1721%2C1204.1951%2C1204.0039%2C1204.6415%2C1204.4564%2C1204.1898%2C1204.2577%2C1204.5588%2C1204.6344%2C1204.0177%2C1204.2835%2C1204.5744%2C1204.4083%2C1204.4780%2C1204.5884%2C1204.1982%2C1204.5006%2C1204.3782%2C1204.4612%2C1204.2438%2C1204.1655%2C1204.4097%2C1204.5486%2C1204.3614%2C1204.4145%2C1204.1505%2C1204.2219%2C1204.2621%2C1204.4497%2C1204.4361%2C1204.0189%2C1204.4520%2C1204.4420%2C1204.4690%2C1204.1509%2C1204.4078%2C1204.4828%2C1204.4481%2C1204.5675%2C1204.6553%2C1204.5059%2C1204.2035%2C1204.2623%2C1204.4355%2C1204.6463%2C1204.5574%2C1204.0533%2C1204.3460%2C1204.4983%2C1204.1706%2C1204.0672%2C1204.5792%2C1204.3484%2C1204.0449%2C1204.1859%2C1204.0762%2C1204.0990%2C1204.3602%2C1204.1117%2C1204.1233%2C1204.4642%2C1204.4485%2C1204.6031%2C1204.1997&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "A new point of NP-hardness for 2-to-1 Label Cover"}, "summary": "We show that given a satisfiable instance of the 2-to-1 Label Cover problem,\nit is NP-hard to find a $(23/24 + \\eps)$-satisfying assignment.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1204.0127%2C1204.6091%2C1204.1393%2C1204.5666%2C1204.4942%2C1204.5341%2C1204.5078%2C1204.5440%2C1204.3700%2C1204.6697%2C1204.5850%2C1204.1050%2C1204.6480%2C1204.3049%2C1204.2997%2C1204.3635%2C1204.5954%2C1204.4897%2C1204.4385%2C1204.0125%2C1204.3327%2C1204.4807%2C1204.6723%2C1204.4162%2C1204.3043%2C1204.2781%2C1204.4859%2C1204.6260%2C1204.2193%2C1204.5882%2C1204.2520%2C1204.4797%2C1204.3302%2C1204.1734%2C1204.3431%2C1204.4838%2C1204.4583%2C1204.1721%2C1204.1951%2C1204.0039%2C1204.6415%2C1204.4564%2C1204.1898%2C1204.2577%2C1204.5588%2C1204.6344%2C1204.0177%2C1204.2835%2C1204.5744%2C1204.4083%2C1204.4780%2C1204.5884%2C1204.1982%2C1204.5006%2C1204.3782%2C1204.4612%2C1204.2438%2C1204.1655%2C1204.4097%2C1204.5486%2C1204.3614%2C1204.4145%2C1204.1505%2C1204.2219%2C1204.2621%2C1204.4497%2C1204.4361%2C1204.0189%2C1204.4520%2C1204.4420%2C1204.4690%2C1204.1509%2C1204.4078%2C1204.4828%2C1204.4481%2C1204.5675%2C1204.6553%2C1204.5059%2C1204.2035%2C1204.2623%2C1204.4355%2C1204.6463%2C1204.5574%2C1204.0533%2C1204.3460%2C1204.4983%2C1204.1706%2C1204.0672%2C1204.5792%2C1204.3484%2C1204.0449%2C1204.1859%2C1204.0762%2C1204.0990%2C1204.3602%2C1204.1117%2C1204.1233%2C1204.4642%2C1204.4485%2C1204.6031%2C1204.1997&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We show that given a satisfiable instance of the 2-to-1 Label Cover problem,\nit is NP-hard to find a $(23/24 + \\eps)$-satisfying assignment."}, "authors": ["Per Austrin", "Ryan O'Donnell", "John Wright"], "author_detail": {"name": "John Wright"}, "author": "John Wright", "links": [{"href": "http://arxiv.org/abs/1204.5666v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1204.5666v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1204.5666v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1204.5666v1", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "A new point of NP-hardness for 2-to-1 Label Cover\nPer Austrin\u2217\n\nRyan O'Donnell\u2020\n\nJohn Wright\u2021\n\narXiv:1204.5666v1 [cs.CC] 25 Apr 2012\n\nOctober 25, 2018\n\nAbstract\nWe show that given a satisfiable instance of the 2-to-1 Label Cover problem, it is NP-hard\n23\n+ \u000f)-satisfying assignment.\nto find a ( 24\n\n\u2217\n\nDepartment of Computer Science, University of Toronto. Funded by NSERC.\nDepartment of Computer Science, Carnegie Mellon University. Supported by NSF grants CCF-0747250 and\nCCF-0915893, and by a Sloan fellowship.\n\u2021\nDepartment of Computer Science, Carnegie Mellon University.\n\u2020\n\n\f1\n\nIntroduction\n\nOver the past decade, a significant amount of progress has been made in the field of hardness of\napproximation via results based on the conjectured hardness of certain forms of the Label Cover\nproblem. The Unique Games Conjecture (UGC) of Khot [Kho02] states that it is NP-hard to\ndistinguish between nearly satisfiable and almost completely unsatisfiable instances of Unique, or\n1-to-1, Label Cover. Using the UGC as a starting point, we now have optimal inapproximability\nresults for Vertex Cover [KR03], Max-Cut [KKMO07], and many other basic constraint satisfaction\nproblems (CSP). Indeed, assuming the UGC we have essentially optimal inapproximability results\nfor all CSPs [Rag08]. In short, modulo the understanding of Unique Label Cover itself, we have\nan excellent understanding of the (in-)approximability of a wide range of problems.\nWhere the UGC's explanatory powers falter is in pinning down the approximability of satisfiable\nCSPs. This means the task of finding a good assignment to a CSP when guaranteed that the CSP\nis fully satisfiable. For example, we know from the work of H\u00e5stad [H\u00e5s01] that given a fully\nsatisfiable 3Sat instance, it is NP-hard to satisfy 87 + \u000f of the clauses for any \u000f > 0. However\ngiven a fully satisfiable 1-to-1 Label Cover instance, it is completely trivial to find a fully satisfying\nassignment. Thus the UGC can not be used as the starting point for hardness results for satisfiable\nCSPs. Because of this, Khot additionally posed his d-to-1 Conjectures:\nConjecture 1.1 ([Kho02]). For every integer d \u2265 2 and \u000f > 0, there is a label set size q such that\nit is NP-hard to (1, \u000f)-decide the d-to-1 Label Cover problem.\nHere by (c, s)-deciding a CSP we mean the task of determining whether an instance is at least csatisfiable or less than s-satisfiable. It is well known (from the Parallel Repetition Theorem [FK94,\nRaz95]) that the conjecture is true if d is allowed to depend on \u000f. The strength of this conjecture,\ntherefore, is that it is stated for each fixed d greater than 1.\nThe d-to-1 Conjectures have been used to resolve the approximability of several basic \"satisfiable\nCSP\" problems. The first result along these lines was due to Dinur, Mossel, and Regev [DMR09]\nwho showed that the 2-to-1 Conjecture implies that it is NP-hard to C-color a 4-colorable graph\nfor any constant C. (They also showed hardness for 3-colorable graphs via another Unique Games\nvariant.) O'Donnell and Wu [OW09] showed that assuming the d-to-1 Conjecture for any fixed d\nimplies that it is NP-hard to (1, 85 + \u000f)-approximate instances a certain 3-bit predicate - the\n\"Not Two\" predicate. This is an optimal result among all 3-bit predicates, since Zwick [Zwi98]\nshowed that every satisfiable 3-bit CSP instance can be efficiently 58 -approximated. In another\nexample, Guruswami and Sinop [GS09] have shown that the 2-to-1 Conjecture implies that given\na q-colorable graph, it is NP-hard to find a q-coloring in which less than a ( 1q \u2212 O( lnq2q )) fraction of\nthe edges are monochromatic. This result would be tight up to the O(*) by an algorithm of Frieze\nand Jerrum [FJ97]. It is therefore clear that settling the d-to-1 Conjectures, especially in the most\nbasic case of d = 2, is an important open problem.\nRegarding the hardness of the 2-to-1 Label Cover problem, the only evidence we have is a\nfamily of integrality gaps for the canonical SDP relaxation of the problem, in [GKO+ 10]. Regarding algorithms for the problem, an important recent line of work beginning in [ABS10] (see\nalso [BRS11, GS11, Ste10]) has sought subexponential-time algorithms for Unique Label Cover\nand related problems. In particular, Steurer [Ste10] has shown that for any constant \u03b2 > 0 and\nlabel set size, there is an exp(O(n\u03b2 ))-time algorithm which, given a satisfiable 2-to-1 Label Cover\ninstance, finds an assignment satisfying an exp(\u2212O(1/\u03b2 2 ))-fraction of the constraints. E.g., there is\n.001\na 2O(n ) -time algorithm which (1, s0 )-approximates 2-to-1 Label Cover, where s0 > 0 is a certain\nuniversal constant.\n\n1\n\n\fIn light of this, it is interesting not only to seek NP-hardness results for certain approximation\nthresholds, but to additionally seek evidence that nearly full exponential time is required for these\nthresholds. This can done by assuming the Exponential Time Hypothesis (ETH) [IP01] and by\nreducing from the Moshkovitz\u2013Raz Theorem [MR10], which shows a near-linear size reduction\nfrom 3Sat to the standard Label Cover problem with subconstant soundness. In this work, we\nshow reductions from 3Sat to the problem of (1, s + \u000f)-approximating several CSPs, for certain\nvalues of s and for all \u000f > 0. In fact, though we omit it in our theorem statements,\n\u0010 it can be\n\u0011\n1\nchecked that all of the reductions in this paper are quasilinear in size for \u000f = \u000f(n) = \u0398 (log log\n,\nn)\u03b2\nfor some \u03b2 > 0.\n\n1.1\n\nOur results\n\nIn this paper, we focus on proving NP-hardness for the 2-to-1 Label Cover problem. To the best\nof our knowledge, no explicit NP-hardness factor has previously been stated in the literature.\nHowever it is \"folklore\" that one can obtain an explicit one for label set sizes 3 & 6 by performing the \"constraint-variable\" reduction on an NP-hardness result for 3-coloring (more precisely,\nMax-3-Colorable-Subgraph). The best known hardness for 3-coloring is due to Guruswami and\n32\nSinop [GS09], who showed a factor 33\n-hardness via a somewhat involved gadget reduction from the\n3-query adaptive PCP result of [GLST98]. This yields NP-hardness of (1, 65\n66 + \u000f)-approximating\n2-to-1 Label Cover with label set sizes 3 & 6. It is not known how to take advantage of larger label\nset sizes. On the other hand, for label set sizes 2 & 4 it is known that satisfying 2-to-1 Label Cover\ninstances can be found in polynomial time.\nThe main result of our paper gives an improved hardness result:\n23\nTheorem 1.2. For all \u000f > 0, (1, 24\n+ \u000f)-deciding the 2-to-1 Label Cover problem with label set sizes\n3 & 6 is NP-hard.\n\nBy duplicating labels, this result also holds for label set sizes 3k & 6k for any k \u2208\n\nN+.\n\nLet us describe the high-level idea behind our result. The folklore constraint-variable reduction\nfrom 3-coloring to 2-to-1 Label Cover would work just as well if we started from \"3-coloring with\nliterals\" instead. By this we mean the CSP with domain 3 and constraints of the form \"vi \u2212 vj 6= c\n(mod 3)\". Starting from this CSP - which we call 2NLin( 3 ) - has two benefits: first, it is at\nleast as hard as 3-coloring and hence could yield a stronger hardness result; second, it is a bit more\n\"symmetrical\" for the purposes of designing reductions. We obtain the following hardness result\nfor 2NLin( 3 ).\n\nZ\n\nZ\n\nZ\n\n11\nTheorem 1.3. For all \u000f > 0, it is NP-hard to (1, 12\n+ \u000f)-decide the 2NLin problem.\n\nZ\n\n32\nAs 3-coloring is a special case of 2NLin( 3 ), [GS09] also shows that (1, 33\n+ \u000f)-deciding 2NLin is\nNP-hard for all \u000f > 0, and to our knowledge this was previously the only hardness known for\n2NLin( 3 ). The best current algorithm achieves an approximation ratio of 0.836 (and does not\nneed the instance to be satisfiable) [GW04]. To prove Theorem 1.3, we proceed by designing an\nappropriate \"function-in-the-middle\" dictator test, as in the recent framework of [OW12]. Although\nthe [OW12] framework gives a direct translation of certain types of function-in-the-middle tests into\nhardness results, we cannot employ it in a black-box fashion. Among other reasons, [OW12] assumes\nthat the test has \"built-in noise\", but we cannot afford this as we need our test to have perfect\ncompleteness.\nThus, we need a different proof to derive a hardness result from this function-in-the-middle test.\nWe first were able to accomplish this by an analysis similar to the Fourier-based proof of 2Lin( 2 )\n\nZ\n\nZ\n\n2\n\n\fhardness given in Appendix F of [OW12]. Just as that proof \"reveals\" that the function-in-themiddle 2Lin( 2 ) test can be equivalently thought of as H\u00e5stad's 3Lin( 2 ) test composed with the\n3Lin( 2 )-to-2Lin( 2 ) gadget of [TSSW00], our proof for the 2NLin( 3 ) function-in-the-middle test\nrevealed it to be the composition of a function test for a certain four-variable CSP with a gadget.\nWe have called the particular four-variable CSP 4-Not-All-There, or 4NAT for short. Because it\nis a 4-CSP, we are able to prove the following NP-hardness of approximation result for it using a\nclassic, H\u00e5stad-style Fourier-analytic proof.\n\nZ\n\nZ\n\nZ\n\nZ\n\nZ\n\nTheorem 1.4. For all \u000f > 0, it is NP-hard to (1, 32 + \u000f)-decide the 4NAT problem.\nThus, the final form in which we present our Theorem 1.2 is as a reduction from Label-Cover\nto 4NAT using a function test (yielding Theorem 1.4), followed by a 4NAT-to-2NLin( 3 ) gadget\n(yielding Theorem 1.3), followed by the constraint-variable reduction to 2-to-1 Label Cover. Indeed,\nall of the technology needed to carry out this proof was in place for over a decade, but without\nthe function-in-the-middle framework of [OW12] it seems that pinpointing the 4NAT predicate as\na good starting point would have been unlikely.\n\nZ\n\n1.2\n\nOrganization\n\nWe leave to Section 2 most of the definitions, including those of the CSPs we use. The heart of\nthe paper is in Section 3, where we give both the 2NLin( 3 ) and 4NAT function tests, explain how\none is derived from the other, and then perform the Fourier analysis for the 4NAT test. The actual\nhardness proof for 4NAT is presented in Section 4, and it follows mostly the techniques put in place\nby H\u00e5stad in [H\u00e5s01].\n\nZ\n\n2\n\nPreliminaries\n\nZ\nZ\n\nWe primarily work with strings x \u2208 K\n3 for some integer K. We write xi to denote the ith coordinate\ndK\nof x. Oftentimes, our strings y \u2208 3 are \"blocked\" into K \"blocks\" of size d. In this case, we\nwrite y[i] \u2208 d3 for the ith block of y, and (y[i])j \u2208 3 for the jth coordinate of this block. Define\nthe function \u03c0 : [dK] \u2192 [K] such that \u03c0(k) = i if k falls in the ith block of size d (e.g., \u03c0(k) = 1\nfor 1 \u2264 k \u2264 d, \u03c0(k) = 2 for d + 1 \u2264 k \u2264 2d, and so on).\n\nZ\n\n2.1\n\nZ\n\nDefinitions of problems\n\nAn instance I of a constraint satisfaction problem (CSP) is a set of variables V , a set of labels D, and\na weighted list of constraints on these variables. We assume that the weights of the constraints are\nnonegative and sum to 1. The weights therefore induce a probability distribution on the constraints.\nGiven an assignment to the variables f : V \u2192 D, the value of f is the probability that f satisfies a\nconstraint drawn from this probability distribution. The optimum of I is the highest value of any\nassignment. We say that an I is s-satisfiable if its optimum is at least s. If it is 1-satisfiable we\nsimply call it satisfiable.\nWe define a CSP P to be a set of CSP instances. Typically, these instances will have similar\nconstraints. We will study the problem of (c, s)-deciding P. This is the problem of determining\nwhether an instance of P is at least c-satisfiable or less than s-satisfiable. Related is the problem\nof (c, s)-approximating P, in which one is given a c-satisfiable instance of P and asked to find\nan assignment of value at least s. It is easy to see that (c, s)-deciding P is at least as easy as\n(c, s)-approximating P. Thus, as all our hardness results are for (c, s)-deciding CSPs, we also prove\nhardness for (c, s)-approximating these CSPs.\n3\n\n\fWe now state the three CSPs that are the focus of our paper.\n\nZ3):\n\n2-NLin(\n\nZ3 and the constraints are of the form\nvi \u2212 vj 6= a (mod 3), a \u2208 Z3 .\n\nIn this CSP the label set is\n\nZ\n\nThe special case when each RHS is 0 is the 3-coloring problem. We often drop the ( 3 ) from this\nnotation and simply write 2NLin. The reader may think of the 'N' in 2NLin( 3 ) as standing for\n'N'on-linear, although we prefer to think of it as standing for 'N'early-linear. The reason is that\nwhen generalizing to moduli q > 3, the techniques in this paper generalize to constraints of the\nform \"vi \u2212 vj (mod q) \u2208 {a, a + 1}\" rather than \"vi \u2212 vj 6= a (mod q)\". For the ternary version\nof this constraint, \"vi \u2212 vj + vk (mod q) \u2208 {a, a + 1}\", it is folklore1 that a simple modification of\nH\u00e5stad's work [H\u00e5s01] yields NP-hardness of (1, 2q )-approximation.\n\nZ\n\nZ\n\n4-Not-All-There: For the 4-Not-All-There problem, denoted 4NAT, we define 4NAT : 43 \u2192 {0, 1}\nto have output 1 if and only if at least one of the elements of 3 is not present among the four\ninputs. The 4NAT CSP has label set D = 3 and constraints of the form 4NAT(v1 + k1 , v2 + k2 , v3 +\nk3 , v4 + k4 ) = 1, where the ki 's are constants in 3 .\nWe additionally define the \"Two Pairs\" predicate TwoPair : 43 \u2192 {0, 1}, which has output 1\nif and only if its input contains two distinct elements of 3 , each appearing twice. Note that an\ninput which satisfies TwoPair also satisfies 4NAT.\n\nZ\n\nZ\n\nZ\n\nZ\n\nZ\n\nd-to-1 Label Cover: An instance of the d-to-1 Label Cover problem is a bipartite graph G =\n(U \u222a V, E), a label set size K, and a d-to-1 map \u03c0e : [dK] \u2192 [K] for each edge e \u2208 E. The elements\nof U are labeled from the set [K], and the elements of V are labeled from the set [dK]. A labeling\nf : U \u222a V \u2192 [dK] satisfies an edge e = (u, v) if \u03c0e (f (v)) = f (u). Of particular interest is the d = 2\ncase, i.e., 2-to-1 Label Cover.\nLabel Cover serves as the starting point for most NP-hardness of approximation results. We\nuse the following theorem of Moshkovitz and Raz:\nTheorem 2.1 ([MR10]). For any \u000f = \u000f(n) \u2265 n\u2212o(1) there exists K, d \u2264 2poly(1/\u000f) such that the\nproblem of deciding a 3Sat instance of size n can be Karp-reduced in poly(n) time to the problem\nof (1, \u000f)-deciding d-to-1 Label Cover instance of size n1+o(1) with label set size K.\n\n2.2\n\nGadgets\n\nA typical way of relating two separate CSPs is by constructing a gadget reduction which translates\nfrom one to the other. A gadget reduction from CSP1 to CSP2 is one which maps any CSP1\nconstraint into a weighted set of CSP2 constraints. The CSP2 constraints are over the same set of\nvariables as the CSP1 constraint, plus some new, auxiliary variables (these auxiliary variables are\nnot shared between constraints of CSP1 ). We require that for every assignment which satisfies the\nCSP1 constraint, there is a way to label the auxiliary variables to fully satisfy the CSP2 constraints.\nFurthermore, there is some parameter 0 < \u03b3 < 1 such that for every assignment which does not\nsatisfy the CSP1 constraint, the optimum labeling to the auxiliary variables will satisfy exactly \u03b3\nfraction of the CSP2 constraints. Such a gadget reduction we call a \u03b3-gadget-reduction from CSP1\nto CSP2 . The following proposition is well-known:\n1\n\nVenkatesan Guruswami, Subhash Khot personal communications.\n\n4\n\n\fProposition 2.2. Suppose it is NP-hard to (c, s)-decide CSP1 . If there exists a \u03b3-gadget-reduction\nfrom CSP1 to CSP2 , then it is NP-hard to (c + (1 \u2212 c)\u03b3, s + (1 \u2212 s)\u03b3)-decide CSP2 .\nWe note that the notation \u03b3-gadget-reduction is similar to a piece of notation employed by\n[TSSW00], but the two have different (though related) definitions.\n\n2.3\n\nFourier analysis on\n\nZ3\n\nZ\n\nZ\n\nLet \u03c9 = e2\u03c0i/3 and set U3 = {\u03c9 0 , \u03c9 1 , \u03c9 2 }. For \u03b1 \u2208 n3 , consider the Fourier character \u03c7\u03b1 : n3 \u2192 U3\ndefined as \u03c7\u03b1 (x) = \u03c9 \u03b1*x . Then it is easy to see that E[\u03c7\u03b1 (x)\u03c7\u03b2 (x)] = 1[\u03b1 = \u03b2], where here and\nthroughout x has the uniform probability distribution on n3 unless otherwise specified.. As a\nresult, the Fourier characters form an orthonormal basis for the set of functions f : n3 \u2192 U3 under\nthe inner product hf, gi = E[f (x)g(x)]; i.e.,\nX\nf=\nf\u02c6(\u03b1)\u03c7\u03b1 ,\n\nZ\n\nZ\n\n\u03b1\u2208Zn\n3\n\nZ\n\nwhere the f\u02c6(\u03b1)'s are complex\nnumbers defined as f\u02c6(\u03b1) = E[f (x)\u03c7\u03b1 (x)]. For \u03b1 \u2208 n3 , we use the\nP\nnotation |\u03b1| to denote\n\u03b1i and #\u03b1 to denote the number of nonzero coordinates in \u03b1. When d is\nK\nclear from context and \u03b1 \u2208 dK\n3 , define \u03c03 (\u03b1) \u2208 3 so that (\u03c03 (\u03b1))i \u2261 |\u03b1[i]| (mod 3) (recall the\nnotation \u03b1[i] from the beginning of this section).\nP\nWe have Parseval's identity: for every f : n3 \u2192 U3 it holds that \u03b1\u2208Zn |f\u02c6(\u03b1)|2 = 1. Note\n3\nthat this implies that |f\u02c6(\u03b1)| \u2264 1 for all \u03b1, as otherwise f\u02c6(\u03b1)2 would be greater than 1. A function\n\nZ\n\nZ\n\nZ\n\nZ\n\nZ\n\nf : n3 \u2192 3 is said to be folded if for every x \u2208\nwhere (x + c)i = xi + c.\nProposition 2.3. Let f :\n\nZn3 and c \u2208 Z3, it holds that f (x + c) = f (x) + c,\n\nZn3 \u2192 U3 be folded. Then f\u02c6(\u03b1) 6= 0 \u21d2 |\u03b1| \u2261 1 (mod 3).\n\nProof.\nf\u02c6(\u03b1) = E[f (x + 1)\u03c7\u03b1 (x + 1)] = E[\u03c9f (x)\u03c7\u03b1 (x)\u03c7\u03b1 (1, 1, . . . , 1)] = \u03c9\u03c7\u03b1 (1, 1, . . . , 1)f\u02c6(\u03b1).\nThis means that \u03c9\u03c7\u03b1 (1, 1, . . . , 1) must be 1. Expanding this quantity,\n\u03c9\u03c7\u03b1 (1, 1, . . . , 1) = \u03c9 1\u2212\u03b1*(1,1,...,1) = \u03c9 1\u2212|\u03b1| .\nSo, |\u03b1| \u2261 1 (mod 3), as promised.\n\n3\n\n2-to-1 hardness\n\nIn this section, we give our hardness result for 2-to-1 Label Cover, following the proof outline\ndescribed at the end of Section 1.1.\nTheorem 1.2 (restated). For all \u000f > 0, it is NP-hard to (1, 23\n24 + \u000f)-decide the 2-to-1 Label Cover\nproblem.\nFirst, we state a pair of simple gadget reductions:\nLemma 3.1. There is a 3/4-gadget-reduction from 4NAT to 2NLin.\nLemma 3.2. There is a 1/2-gadget-reduction from 2NLin to 2-to-1.\n5\n\n\fTogether with Proposition 2.2, these imply the following corollary:\nCorollary 3.3. There is a 7/8-gadget-reduction from 4NAT to 2-to-1. Thus, if it is NP-hard to\n(c, s)-decide the 4NAT problem, then it is NP-hard to ((7 + c)/8, (7 + s)/8)-decide the 2-to-1 Label\nCover problem.\nThe gadget reduction from 4NAT to 2NLin relies on the simple fact that if a, b, c, d \u2208\n4NAT predicate, then there is some element of 3 that none of them equal.\n\nZ\n\nZ3 satisfy the\n\nProof of Lemma 3.1. A 4NAT constraint C on the variables S = (v1 , v2 , v3 , v4 ) is of the form\n4NAT(v1 + k1 , v2 + k2 , v3 + k3 , v4 + k4 ),\n\nZ\n\nwhere the ki 's are all constants in 3 . To create the 2NLin instance, introduce the auxiliary variable\nyC and add the four 2NLin equations\nvi + ki 6= yC\n\n(mod 3),\n\ni \u2208 [4].\n\n(1)\n\nZ\n\nZ\n\nIf f : S \u2192 3 is an assignment which satisfies the 4NAT constraint, then there is some a \u2208 3\nsuch that f (vi ) + ki 6= a (mod 3) for all i \u2208 [4]. Assigning a to yC satisfies all four equations (1).\nOn the other hand, if f doesn't satisfy the 4NAT constraint, then {f (vi ) + ki }i\u2208[4] = 3 , so no\nassignment to yC satisfies all four equations. However, it is easy to see that there is an assignment\nwhich satisfies three of the equations. This gives a 43 -gadget-reduction from 4NAT to 2NLin, which\nproves the lemma.\n\nZ\n\nThe reduction from 2NLin to 2-to-1 Label Cover is the well-known constraint-variable reduction,\nand uses the fact that in the equation vi \u2212 vj 6= a (mod 3), for any assignment to vj there are two\nvalid assignments to vi , and vice versa.\nProof of Lemma 3.2. An 2NLin constraint C on the variables S = (v1 , v2 ) is of the form\nv1 \u2212 v2 6= a\n\nZ\n\n(mod 3),\n\nfor some a \u2208 3 . To create the 2-to-1 Label Cover instance, introduce the variable yC which will\nbe labeled by one of the six possible functions g : S \u2192 3 which satisfies C. Finally, introduce the\n2-to-1 constraints yC (v1 ) = f (v1 ) and yC (v2 ) = f (v2 ).\nIf f : S \u2192 3 is an assignment which satisfies the 2NLin constraint, then we label yC with f .\nIn this case,\nyC (vi ) = f (vi ), i = 1, 2.\n\nZ\n\nZ\n\nThus, both equations are satisfied. On the other hand, if f does not satisfy the 2NLin constraint,\nthen any g which yC is labeled with disagrees with f on at least one of v1 or v2 . It is easy to see,\nthough, that a g can be selected to satisfy one of the two equations. This gives a 12 -gadget-reduction\nfrom 2NLin to 2-to-1, which proves the lemma.\n\n3.1\n\nA pair of tests\n\nNow that we have shown that 2NLin hardness results translate into 2-to-1 Label Cover hardness\nresults, we present our 2NLin function test. Even though we don't directly use it, it helps explain\nhow we were led to consider the 4NAT CSP. Furthermore, the Fourier analysis that we eventually\nuse for the 4NAT Test could instead be performed directly on the 2NLin Test without any direct\nreference to the 4NAT predicate. The test is:\n6\n\n\f2NLin Test\nGiven folded functions f :\n\u2022 Let x \u2208\n\nZK3 \u2192 Z3, g, h : ZdK\n3 \u2192 Z3 :\n\nZK3 and y \u2208 ZdK\nbe independent and uniformly random.\n3\n\n\u2022 For each i \u2208 [K], j \u2208 [d], select (z[i])j independently and uniformly from the elements of\n3 \\ {xi , (y[i])j }.\n\nZ\n\n\u2022 With probability 41 , test f (x) 6= h(z); with probability 43 , test g(y) 6= h(z).\nx\n\n0\n\n1\n\n2\n\n1\n\nf\n\n2\n\nz\n\n2\n\n1\n\n1\n\n0\n\n0\n\n2\n\n1\n\n0\n\n0\n\n2\n\n0\n\n2\n\n1\n\n0\n\n1\n\nh\n\ny\n\n1\n\n2\n\n0\n\n2\n\n1\n\n1\n\n0\n\n2\n\n1\n\n0\n\n2\n\n0\n\n2\n\n1\n\n0\n\ng\n\nFigure 1: An illustration of the 2NLin test distribution; d = 3, K = 5\nAbove is an illustration of the test. We remark that for any given block i, z[i] determines xi\n(with very high probability), because as soon as z[i] contains two distinct elements of 3 , xi must\nbe the third element of 3 . Notice also that in every column of indices, the input to h always\ndiffers from the inputs to both f and g. Thus, \"matching dictator\" assignments pass the test with\nprobability 1. (This is the case in which f (x) = xi and g(y) = (y[i])j for some i \u2208 [K], j \u2208 [d].) On\nthe other hand, if f and g are \"nonmatching dictators\", then they succeed with only 11\n12 probability.\nThis turns out to be essentially optimal among functions f and g without \"matching influential\ncoordinates/blocks\". We will obtain the following theorem:\n\nZ\n\nZ\n\nTheorem 1.3 restated. For all \u000f > 0, it is NP-hard to (1, 11\n12 + \u000f)-decide the 2NLin problem.\nBefore proving this, let us further discuss the 2NLin test. Given x, y, and z from the 2NLin test,\nconsider the following method of generating two additional strings y 0 , y 00 \u2208 dK\n3 which represent h's\n\"uncertainty\" about y. For j \u2208 [d], if xi = (y[i])j , then set both (y 0 [i])j and (y 00 [i])j to the lone element of 3 \\{xi , (z[i])j }. Otherwise, set one of (y 0 [i])j or (y 00 [i])j to xi , and the other one to (y[i])j .\nIt can be checked that TwoPair(xi , (y[i])j , (y 0 [i])j , (y 00 [i])j ) = 1, a more stringent requirement than\nsatisfying 4NAT. In fact, the marginal distribution on these four variables is a uniformly random\nassignment that satisfies the TwoPair predicate. Conditioned on x and z, the distribution on y 0 and\ny 00 is identical to the distribution on y. To see this, first note that by construction, neither (y 0 [i])j\nnor (y 00 [i])j ever equals (z[i])j . Further, because these indices are distributed as uniformly random\nsatisfying assignments to TwoPair, Pr[(y 0 [i])j = xi ] = Pr[(y 00 [i])j = xi ] = 31 , which matches the\ncorresponding probability for y. Thus, as y, y 0 , and y 00 are distributed identically, we may rewrite\nthe test's success probability as:\n\nZ\n\nZ\n\nPr[f (x) 6= h(z)] + 34 Pr[g(y) 6= h(z)]\n\uf8f1\n\uf8fc\nPr[f (x) 6= h(z)], \uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f2\n\uf8fd\nPr[g(y) 6= h(z)],\n= avg\nPr[g(y 0 ) 6= h(z)], \uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f3\n\uf8fe\nPr[g(y 00 ) 6= h(z)]\n3 1\n\u2264 + E[4NAT(f (x), g(y), g(y 0 ), g(y 00 ))].\n4 4\n\nPr[f , g, and h pass the test] =\n\n1\n4\n\n7\n\n\fThis is because if 4NAT fails to hold on the tuple (f (x), g(y), g(y 0 ), g(y 00 )), then h(z) can disagree\nwith at most 3 of them.\nAt this point, we have removed h from the test analysis and have uncovered what appears to\nbe a hidden 4NAT test inside the 2NLin Test: simply generate four strings x, y, y 0 , and y 00 as\ndescribed earlier, and test 4NAT(f (x), g(y), g(y 0 ), g(y 00 )). With some renaming of variables, this is\nexactly what our 4NAT Test does:\n4NAT Test\nGiven folded functions f :\n\u2022 Let x \u2208\n\nZK3 \u2192 Z3, g : ZdK\n3 \u2192 Z3 :\n\nZK3 be uniformly random.\n\n\u2022 Select y, z, w as follows: for each i \u2208 [K], j \u2208 [d], select ((y[i])j , (z[i])j , (w[i])j ) uniformly at\nrandom from the elements of 3 satisfying TwoPair(xi , (y[i])j , (z[i])j , (w[i])j ).\n\nZ\n\n\u2022 Test 4NAT(f (x), g(y), g(z), g(w)).\nx\n\n0\n\n1\n\n2\n\n1\n\nf\n\n2\n\ny\n\n1\n\n2\n\n0\n\n2\n\n1\n\n1\n\n0\n\n2\n\n1\n\n0\n\n2\n\n0\n\n2\n\n1\n\n0\n\ng\n\nz\n\n0\n\n2\n\n2\n\n2\n\n2\n\n0\n\n0\n\n1\n\n2\n\n0\n\n2\n\n0\n\n0\n\n1\n\n2\n\ng\n\nw\n\n1\n\n0\n\n2\n\n1\n\n2\n\n0\n\n2\n\n1\n\n1\n\n1\n\n1\n\n1\n\n0\n\n2\n\n0\n\ng\n\nFigure 2: An illustration of the 4NAT test distribution; d = 3, K = 5\nAbove is an illustration of this test. In this illustration, the strings z and w were derived\nfrom the strings in Figure 1 using the process detailed above for generating y 0 and y 00 . Note that\neach column is missing one of the elements of 3 , and that each column satisfies the TwoPair\npredicate. Because satisfying TwoPair implies satisfying 4NAT, matching dictators pass this test\nwith probability 1. On the other hand, it can be seen that nonmatching dictators pass the test with\nprobability 32 . In the next section we show that this is optimal among functions f and g without\n\"matching influential coordinates/blocks\".\n(As one additional remark, our 2NLin Test is basically the composition of the 4NAT Test with\nthe gadget from Lemma 3.1. In this test, if we instead performed the f (x) 6= h(z) test with\nprobability 31 and the g(y) 6= h(z) test with probability 23 , then the resulting test would basically\nbe the composition of a 3NLin test with a suitable 3NLin-to-2NLin gadget.)\n\nZ\n\n3.2\n\nAnalysis of 4NAT Test\n\nLet \u03c9 = e2\u03c0i/3 , and set U3 = {\u03c9 0 , \u03c9 1 , \u03c9 2 }. In what follows, we identify f and g with the functions\n\u03c9 f and \u03c9 g , respectively, whose range is U3 rather than 3 . Set L = dK. The remainder of this\nsection is devoted to the proof of the following lemma:\n\nZ\n\n8\n\n\fLemma 3.4. Let f :\n\nZK3 \u2192 U3 and g : ZdK\n3 \u2192 U3 . Then\n\nE[4NAT(f (x), g(y), g(z), g(w))] \u2264\n\n2\n3\n\n+\n\n2\n3\n\nX\n\n|f\u02c6(\u03c03 (\u03b1))| * |\u011d(\u03b1)|2 * (1/2)#\u03b1\n\n\u03b1\u2208ZL\n3\n\nThe first step is to \"arithmetize\" the 4NAT predicate. It is not hard to verify that\n4NAT(a1 , a2 , a3 , a4 ) =\n\n5 1 X ai aj 1 X ai aj ak 1 X ai aj ak\n\u03c9 \u03c9 \u03c9\n+\n\u03c9 \u03c9 \u2212\n\u03c9 \u03c9 \u03c9 \u2212\n9 9\n9\n9\ni6=j\n\ni<j<k\n\ni<j<k\n\n5 2X\n2 X\n= +\n<[\u03c9 ai \u03c9 aj ] \u2212\n<[\u03c9 ai \u03c9 aj \u03c9 ak ].\n9 9\n9\ni<j\n\ni<j<k\n\nUsing the symmetry between y, z, and w, we deduce\nE[4NAT(f (x), g(y), g(z), g(w))]\n=\n\n5\n9\n\n+ 23 < E[f (x)g(y)] + 23 < E[g(y)g(z)] \u2212 32 < E[f (x)g(y)g(z)] \u2212 92 < E[g(y)g(z)g(w)]. (2)\n\nIn the second term in the RHS of (2) we in fact have E[f (x)g(y)] = 0. This is because x and y are\nindependent, and hence E[f (x)g(y)] = E[f (x)] E[g(y)] = 0 * 0 since f and g are folded. Regarding\nthe third term of the RHS in (2), this also turns out to be 0 by virtue of g being folded. This can\nbe proven using a Fourier-analytic argument; we present here an alternate combinatorial argument:\nLemma 3.5. E[g(y)g(z)] = 0.\n\nZ\n\nZ\n\nZ\n\nZ\n\nZ\n\nK \u00d7 L \u2192\nK \u00d7 L defined as\nProof. Fix any value y \u2208 L\n3 for y. Consider the function t :\n3\n3\n3\n3\nt(x, z) = (x + 1, z \u2212 1), where all arithmetic is performed modulo 3. Note that t has order 3,\nmeaning that t(t(t(x, z))) = (x, z). This allows us to group values for x and z into sets of size\nL\nthree as follows: put (x, z) \u2208 K\n3 \u00d7 3 into the set T (x, z) = {(x, z), t(x, z), t(t(x, z))}. Because t\nis invertible and of order 3, each pair (x, z) is a member of only one set: T (x, z).\nConditioned on y = y, if (x, z) is in the support of the test, then all (x0 , z 0 ) \u2208 T (x, z) are also in\nthe support of the test. This is because the strings which are in the support of the test are exactly\nthe strings x and z for which the set {(x\u03c0 )i , yi , zi } \u2286 3 is of size 2, for all i \u2208 [L]. These strings,\nin turn, are exactly those for which x\u03c0 + y + z 6\u2261 0 (mod 3). But if (x0 , z 0 ) = t(x, z), then\n\nZ\n\nZ\n\nZ\n\nx0\u03c0 + y + z 0 \u2261 (x\u03c0 + 1) + y + (z \u2212 1) \u2261 x\u03c0 + y + z 6\u2261 0\n\n(mod 3).\n\nThis shows that t(x, z) is in the support of the test, conditioned on y = y. As T (x0 , z 0 ) = T (x, z),\nthe same holds for t(t(x, z)).\nWhen conditioned on y = y, each pair (x, z) in the support of the test occurs with equal\nprobability. To see this, first note that x is pairwise independent from y. In other words, any value\nx for x is equally likely, regardless of y. Then, conditioned on x = x and y = y, there are exactly\ntwo possibilities for each index of z, both of which occur with half probability. Thus, the event\n(x, z) occurs with the same probability, no matter the values of x or z.\nConsider an arbitrary set T (x, z). Conditioned on (x, z) falling in T (x, z), the value of (x, z) is\na uniformly random element of this set. This means that z is equally likely to be z, z \u2212 1, or z \u2212 2.\nBy the folding of g, g(z) is therefore equally likely to be one of \u03c9 0 , \u03c9 1 , or \u03c9 2 . As this happens\nfor any choice of the set T (x, z), g(z) is uniform on U3 , even when conditioned on y = y. Thus,\nE[g(y)g(z)] = 0 as desired.\n\n9\n\n\fEquation (2) has now been reduced to\n(2) =\n\n5\n9\n\n\u2212 23 < E[f (x)g(y)g(z)] \u2212 92 < E[g(y)g(z)g(w)].\n\n(3)\n\nAs g(y)g(z)g(w) is always in U3 , < E[g(y)g(z)g(w)] is always at least \u2212 21 . Therefore,\n(3) \u2264\n\n2\n3\n\n\u2212 32 < E[f (x)g(y)g(z)].\n\n(4)\n\nIt remains to handle the E[f (x)g(y)g(z)] term, which is the subject of our next lemma. This is\ndone through a standard argument in the style of H\u00e5stad [H\u00e5s01].\n\u0001#\u03b1\nP\nLemma 3.6. E[f (x)g(y)g(z)] = \u03b1\u2208ZL f\u02c6(\u03c03 (\u03b1))\u011d(\u03b1)2 \u2212 12\n.\n3\n\nProof. Begin by expanding out E[f (x)g(y)g(z)]:\nX\nE[f (x)g(y)g(z)] =\n\nf\u02c6(\u03b1)\u011d(\u03b2)\u011d(\u03b3) E[\u03c7\u03b1 (x)\u03c7\u03b2 (y)\u03c7\u03b3 (z)].\n\n(5)\n\nL\n\u03b1\u2208ZK\n3 ,\u03b2,\u03b3\u2208Z3\n|\u03b1|\u2261|\u03b2|\u2261|\u03b3|\u22611 (mod 3)\n\nWe focus on the products of the Fourier characters:\nY\nE[\u03c7\u03b1 (x)\u03c7\u03b2 (y)\u03c7\u03b3 (z)] =\nE[\u03c7\u03b1i (xi )\u03c7\u03b2[i] (y[i])\u03c7\u03b3[i] (z[i])]\n\n(6)\n\ni\u2208[K]\n\nWe can attend to each block separately:\ni\nh\nE[\u03c7\u03b1i (xi )\u03c7\u03b2[i] (y[i])\u03c7\u03b3[i] (z[i])] = E \u03c9 \u03b1i *xi +\u03b2[i]*y[i]+\u03b3[i]*z[i]\n\uf8ee\n\uf8ef\n\uf8ef\n= E \uf8ef\u03c9 \u03b1i *a\nx\uf8f0\n\n\uf8f9\n\ni\uf8fa\nh\n\uf8fa\nE \u03c9 \u03b2j yj +\u03b3j zj | xi = a \uf8fa .\ny,z\n\uf8fb\n{z\n}\nj:\u03c0(j)=i |\nY\n\n(7)\n\n(\u2217)\n\nNow, consider the expectation (\u2217). The distribution on the values for (y j , z j ) is uniform on the\nsix possibilities (a + 1, a + 1), (a + 2, a + 2), (a, a + 1), (a, a + 2), (a + 1, a), and (a + 2, a). We\nclaim that (\u2217) is nonzero if and only if \u03b2j \u2261 \u03b3j (mod 3). If, on the other hand, \u03b2j 6\u2261 \u03b3j (mod 3),\nthen either only one of \u03b2j or \u03b3j is zero, or neither is zero, and \u2212\u03b2j \u2261 \u03b3j (mod 3). In the first case,\nthe expectation is either E[\u03c9 \u03b2j yj | xi = a] or E[\u03c9 \u03b3j zj | xi = a] for a nonzero \u03b2j or a nonzero \u03b3j ,\nrespectively. Both of these expectations are zero, as both y j and z j are uniform on 3 . In the\nsecond case,\n\nZ\n\nE[\u03c9 \u03b2j yj +\u03b3j zj | xi = a] = E[\u03c9 \u03b2j yj \u2212\u03b2j zj | xi = a]\n= E[\u03c9 \u03b2j (yj \u2212zj ) | xi = a],\n\nZ\n\nwhich is zero, because \u03b2j is nonzero, and y j \u2212 z j is uniformly distributed on 3 .\nThus, when (\u2217) and Equation (6) are nonzero, \u03b2 \u2261 \u03b3 (mod 3). This means that (\u2217) =\nE[\u03c9 \u03b2j (yj +zj ) | xi = a]. When \u03b2j = 0, this is clearly 1. Otherwise, as either y j + z j \u2261 2a + 1\n(mod 3) or y j + z j \u2261 2a + 2 (mod 3), each with probability half, this is equal to\n(\u2217) =\n\n\u0011 \u03c9 2a\u03b2j\n\u03c9 2a\u03b2j\n1 \u0010 \u03b2j (2a+1)\n\u03c9\n+ \u03c9 \u03b2j (2a+2) =\n(\u03c9 1 + \u03c9 2 ) = \u2212\n.\n2\n2\n2\n10\n\n\f\u0001#\u03b2j 2a\u03b2\nIn summary, when \u03b2 = \u03b3, (\u2217) = \u2212 12\n\u03c9 j.\nWe can now rewrite Equation (7) as\n\uf8f9\n\uf8ee\n\"\u0012 \u0013\n#\n#\u03b2[i]\nY \u0012 1 \u0013#\u03b2j\n1\n\u03c9 2a\u03b2j \uf8fb = E \u2212\n\u03c9 (\u03b1i +2|\u03b2[i]|)a .\n\u2212\n(7) = E \uf8f0\u03c9 \u03b1i *a\nx\nx\n2\n2\nj:\u03c0(j)=i\n\nNote that the exponent of \u03c9, (\u03b1i + 2|\u03b2[i]|)a, is zero if \u03b1i \u2261 |\u03b2[i]| (mod 3), in which case the\nexpectation is just the constant (\u22121/2)#\u03b2[i] . This occurs for all i \u2208 [K] exactly when \u03b1 = \u03c03 (\u03b2).\nIf, on the other hand, \u03b1i + 2|\u03b2[i]| is nonzero, then the entire expectation is zero because a, the\nvalue of xi , is uniformly random from 3 . Thus, Equation (6) is nonzero only when \u03b1 = \u03c03 (\u03b2) and\n\u03b2 = \u03b3, in which case it equals\n\u0012 \u0013#\u03b2\n1\n(6) = \u2212\n.\n2\n\nZ\n\nWe may therefore conclude with\n(5) =\n\n\u0012 \u0013#\u03b1\n1\n2\n\u02c6\nf (\u03c03 (\u03b1))\u011d(\u03b1) \u2212\n.\n2\nL\n\nX\n\n\u03b1\u2208Z3\n\nSubstituting this result into (4) yields\nE[4NAT(f (x), g(y), g(z), g(w))] \u2264\n\u2264\n\n2\n3\n2\n3\n\n\u2212 23 <\n+\n\n2\n3\n\n\u0012 \u0013#\u03b1\n1\nf\u02c6(\u03c03 (\u03b1))\u011d(\u03b1)2 \u2212\n2\nL\n\nX\n\n\u03b1\u2208Z3\n\nX\n\n|f\u02c6(\u03c03 (\u03b1))| * |\u011d(\u03b1)|2 * (1/2)#\u03b1 ,\n\n\u03b1\u2208ZL\n3\n\ncompleting the proof of Lemma 3.4.\n\n4\n\nHardness of 4NAT\n\nIn this section, we show the following theorem:\nTheorem 1.4 (detailed). For all \u000f > 0, it is NP-hard to (1, 32 + \u000f)-decide the 4NAT problem. In\nfact, in the \"yes case\", all 4NAT constraints can be satisfied by TwoPair assignments.\nCombining this with Lemma 3.1 yields Theorem 1.3, and combining this with Corollary 3.3\nyields Theorem 1.2. It is not clear whether this gives optimal hardness assuming perfect completeness. The 4NAT predicate is satisfied by a uniformly random input with probability 95 , and by the\nmethod of conditional expectation this gives a deterministic algorithm which (1, 59 )-approximates\nthe 4NAT CSP. This leaves a gap of 91 in the soundness, and to our knowledge there are no better\nknown algorithms.\nOn the hardness side, consider a uniformly random satisfying assignment to the TwoPair predicate. It is easy to see that each of the four variables is assigned a uniformly random value from 3 ,\nand also that the variables are pairwise independent. As any satisfying assignment to the TwoPair\npredicate also satisfies the 4NAT predicate, the work of Austrin and Mossel [AM09] immediately\nimplies that (1 \u2212 \u000f, 95 + \u000f)-approximating the 4NAT problem is NP-hard under the Unique Games\nconjecture. Thus, if we are willing to sacrifice a small amount in the completeness, we can improve\n\nZ\n\n11\n\n\fthe soundness parameter in Theorem 1.4. Whether we can improve upon the soundness without\nsacrificing perfect completeness is open.\nWe now arrive at the proof of Theorem 1.4. The proof is entirely standard, and proceeds by\nreduction from d-to-1 Label Cover. It makes use of our analysis of the 4NAT Test, which is presented\nin Appendix 3.2. One preparatory note: most of the proof concerns functions f : K\n3 \u2192 3 and\ng : dK\n\u2192\n.\nHowever,\nwe\nalso\nbe\nmaking\nuse\nof\nFourier\nanalytic\nnotions\ndefined\nin\nSection 2.3,\n3\n3\nand this requires dealing with functions whose range is U3 rather than 3 . Thus, we associate f\nand g with the functions \u03c9 f and \u03c9 g , and whenever Fourier analysis is used it will actually be with\nrespect to the latter two functions.\n\nZ\n\nZ\n\nZ\n\nZ\n\nZ\n\nProof. Let G = (U \u222a V, E) be a d-to-1 Label Cover instance with alphabet size K and d-to-1 maps\n\u03c0e : [dK] \u2192 [K] for each edge e \u2208 E. We construct a 4NAT instance by replacing each vertex\nin G with its Long Code and placing constraints on adjacent Long Codes corresponding to the\ntests made in the 4NAT Test. Thus, each u \u2208 U is replaced by a copy of the hypercube K\n3 and\nlabeled by the function fu : K\n\u2192\n.\nSimilarly,\neach\nv\n\u2208\nV\nis\nreplaced\nby\na\ncopy\nof\nthe\nBoolean\n3\n3\nhypercube dK\nand\nlabeled\nby\nthe\nfunction\ngv : dK\n\u2192 3 . Finally, for each edge {u, v} \u2208 E, a\n3\n3\nset of 4NAT constraints is placed between fu and gv corresponding to the constraints made in the\n4NAT Test, and given a weight equal to the probability the constraint is tested in the 4NAT Test\nmultiplied by the weight of {u, v} in G. This produces a 4NAT instance whose weights sum to 1\nwhich is equivalent to the following test:\n\nZ\n\nZ\n\nZ\n\nZ\n\nZ\n\nZ\n\n\u2022 Pick an edge e = (u, v) \u2208 E uniformly at random.\n\u2022 Reorder the indices of gv so that the kth group of d indices corresponds to \u03c0e\u22121 (k).\n\u2022 Run the 4NAT test on fu and gv . Accept iff it does.\nCompleteness If the original Label Cover instance is fully satisfiable, then there is a function\nF : U \u222a V \u2192 [dK] for which val(F ) = 1. Set each fu to the dictator assignment fu (x) = xF (u)\nand each gv to the dictator assignment gv (y) = yF (v) . Let e = {u, v} \u2208 E. Because F satisfies the\nconstraint \u03c0e , F (u) = \u03c0e (F (v)). Thus, fu and gv correspond to \"matching dictator\" assignments,\nand above we saw that matching dictators pass the 4NAT Test with probability 1. As this applies\nto every edge in E, the 4NAT instance is fully satisfiable.\nSoundness Assume that there are functions {fu }u\u2208U and {gv }v\u2208V which satisfy at least a 32 + \u000f\nfraction of the 4NAT constraints. Then there is at least an \u000f/2 fraction of the edges e = {u, v} \u2208 E\nfor which fu and gv pass the 4NAT Test with probability at least 23 + \u000f/2. This is because otherwise\nthe fraction of 4NAT constraint satisfied would be at most\n\u0012\n\u0013\n\u0010\n\u000f\u0011 2 \u000f\n\u000f\n2 2\u000f \u000f2\n2\n+\n+ (1) = +\n\u2212\n< + \u000f.\n1\u2212\n2\n3 2\n2\n3\n3\n4\n3\nLet E 0 be the set of such edges, and consider {u, v} \u2208 E 0 . Set L = dK. By Lemma 3.4,\n\uf8eb\n\uf8f6\n\u0012 \u0013#\u03b1\n2 \u000f\n2 2\uf8edX \u02c6\n1\n\uf8f8,\n+ \u2264 Pr[fu and gv pass the 4NAT test] \u2264 +\nfu (\u03c03 (\u03b1)) |\u011dv (\u03b1)|2\n3 2\n3 3\n2\nL\n\u03b1\u2208Z3\n\nmeaning that\n\u0012 \u0013#\u03b1\nX\n3\u000f\n1\n2\n\u2264\nf\u02c6u (\u03c03 (\u03b1)) |\u011dv (\u03b1)|\n.\n4\n2\nL\n\u03b1\u2208Z3\n\n12\n\n(8)\n\n\fParseval's equation tells us that\ndistribution on the elements of\n\n|\u011dv (\u03b1)|2 = 1. The function \u011dv therefore induces\n\u03b1\u2208ZL\n3\nL . As a result, we can rewrite Equation (8) as\n3\n\nP\n\nZ\n\n3\u000f\n\u2264 E\n\u03b1\u223c\u011dv\n4\n\n\"\n\na probability\n\n\u0012 \u0013#\u03b1 #\n1\n.\nf\u02c6u (\u03c03 (\u03b1))\n2\n\n(9)\n\nAs previously noted, |f\u02c6u (\u03c03 (\u03b1))| is less than 1 for all \u03b1, so the expression in this expectation as\nnever greater than 1. We can thus conclude that\n\"\n#\n\u0012 \u0013#\u03b1\n3\u000f\n1\n3\u000f\n,\n\u2265\n\u2264 Pr f\u02c6u (\u03c03 (\u03b1))\n\u03b1\u223c\u011dv\n8\n2\n8\n{z\n}\n|\nGOOD\u03b1\n\nas otherwise the expectation in Equation (9) would be less than 3\u000f/4. Call the event in the\nprobability GOOD\u03b1 . When GOOD\u03b1 occurs, the following happens:\n\u2022 |f\u02c6u (\u03c03 (\u03b1))|2 \u2265 9\u000f2 /64.\n\u2022 #\u03b1 \u2264 log2 (8/3\u000f). Furthermore, as fu is folded, #\u03b1 > 0.\nThis suggests the following randomized decoding procedure for each u \u2208 U : pick an element\n2\n\u02c6\n\u03b2\u2208 K\n3 with probability |fu (\u03b2)| and choose one of its nonzero coordinates uniformly at random.\n2\nSimilarly, for each v \u2208 V , pick an element \u03b1 \u2208 L\n3 with probability |\u011dv (\u03b1)| and choose one of its\nnonzero coordinates uniformly at random. In both cases, nonzero coordinates are guaranteed to\nexist because all the fu 's and gv 's are folded.\nNow we analyze how well this decoding scheme performs for the edges e = {u, v} \u2208 E 0 (we\nL\nmay assume the other edges are unsatisfied). Suppose that when the elements of K\n3 and 3 were\nrandomly chosen, gv 's set \u03b1 was in Good\u03b1 , and fu 's set \u03b2 equals \u03c03 (\u03b1). Then, as #\u03b1 \u2264 log2 (8/3\u000f),\nand each label in \u03c03 (\u03b1) has at least one label in \u03b1 which maps to it, the probability that matching\nlabels are drawn is at least 1/ log2 (8/3\u000f). Next, the probability that such an \u03b1 and \u03b2 are drawn is\n\nZ\n\nZ\n\nZ\n\nX\n\u03b1\u2208GOOD\n\n|f\u02c6u (\u03c03 (\u03b1))|2 |\u011dv (\u03b1)|2 \u2265\n\n9\u000f2\n64\n\nX\n\n|\u011dv (\u03b1)|2 \u2265\n\n\u03b1\u2208GOOD\n\nZ\n\n27\u000f3\n9\u000f2 3\u000f\n=\n.\n64 8\n512\n\nCombining these, the probability that this edge is satisfied is at least 27\u000f3 /512 log2 (8/3\u000f). Thus,\nthe decoding scheme satisfies at least\n27\u000f3\n|E 0 |\n27\u000f4\n*\n\u2265\n512 log2 (8/3\u000f) |E|\n1024 log2 (8/3\u000f)\nfraction of the Label Cover edges in expectation. By the probabilistic method, an assignment to\nthe Label Cover instance must therefore exist which satisfies at least this fraction of the edges.\nWe now apply Theorem 2.1, setting the soundness value in that theorem equal to O(\u000f5 ), which\nconcludes the proof.\n\nReferences\n[ABS10]\n\nSanjeev Arora, Boaz Barak, and David Steurer. Subexponential algorithms for Unique\nGames and related problems. In Proceedings of the 51st Annual IEEE Symposium on\nFoundations of Computer Science, pages 563\u2013572, 2010. 1\n13\n\n\f[AM09]\n\nPer Austrin and Elchanan Mossel. Approximation resistant predicates from pairwise\nindependence. Computational Complexity, 18(2):249\u2013271, 2009. 4\n\n[BRS11]\n\nBoaz Barak, Prasad Raghavendra, and David Steurer. Rounding semidefinite programming hierarchies via global correlation. In Proceedings of the 52nd Annual IEEE\nSymposium on Foundations of Computer Science, 2011. 1\n\n[DMR09]\n\nIrit Dinur, Elchanan Mossel, and Oded Regev. Conditional hardness for approximate\ncoloring. SIAM Journal on Computing, 39(3):843\u2013873, 2009. 1\n\n[FJ97]\n\nAlan Frieze and Mark Jerrum. Improved approximation algorithms for MAX k-CUT\nand MAX BISECTION. Algorithmica, 18(1):67\u201381, 1997. 1\n\n[FK94]\n\nUriel Feige and Joe Kilian. Two prover protocols: low error at affordable rates. In\nProceedings of the 26th Annual ACM Symposium on Theory of Computing, pages 172\u2013\n183, 1994. 1\n\n[GKO+ 10] Venkatesan Guruswami, Subhash Khot, Ryan O'Donnell, Preyas Popat, Madhur Tulsiani, and Yi Wu. SDP gaps for 2-to-1 and other Label-Cover variants. In Proceedings of\nthe 37th Annual International Colloquium on Automata, Languages and Programming,\npages 617\u2013628, 2010. 1\n[GLST98]\n\nVenkatesan Guruswami, Daniel Lewin, Madhu Sudan, and Luca Trevisan. A tight\ncharacterization of NP with 3 query PCPs. In Proceedings of the 39th Annual IEEE\nSymposium on Foundations of Computer Science, pages 8\u201317, 1998. 1.1\n\n[GS09]\n\nVenkatesan Guruswami and Ali Kemal Sinop. Improved inapproximability results for\nMaximum k-Colorable Subgraph. In Proceedings of the 12th Annual International\nWorkshop on Approximation Algorithms for Combinatorial Optimization Problems,\npages 163\u2013176, 2009. 1, 1.1, 1.1\n\n[GS11]\n\nVenkatesan Guruswami and Ali Sinop. Lasserre hierarchy, higher eigenvalues, and\napproximation schemes for quadratic integer programming with PSD objectives. In\nProceedings of the 52nd Annual IEEE Symposium on Foundations of Computer Science,\n2011. 1\n\n[GW04]\n\nMichel X. Goemans and David P. Williamson. Approximation algorithms for MAX3-CUT and other problems via complex semidefinite programming. J. Comput. Syst.\nSci., 68(2):442\u2013470, 2004. 1.1\n\n[H\u00e5s01]\n\nJohan H\u00e5stad. Some optimal inapproximability results. Journal of the ACM, 48(4):798\u2013\n859, 2001. 1, 1.2, 2.1, 3.2\n\n[IP01]\n\nRussell Impagliazzo and Ramamohan Paturi. On the complexity of k-SAT. Journal of\nComputer and System Sciences, 62(2):367\u2013375, 2001. 1\n\n[Kho02]\n\nSubhash Khot. On the power of unique 2-prover 1-round games. In Proc. 34th ACM\nSymposium on Theory of Computing, pages 767\u2013775, 2002. 1, 1.1\n\n[KKMO07] Subhash Khot, Guy Kindler, Elchanan Mossel, and Ryan O'Donnell. Optimal inapproximability results for Max-Cut and other 2-variable CSPs? SIAM Journal on\nComputing, 37(1):319\u2013357, 2007. 1\n14\n\n\f[KR03]\n\nSubhash Khot and Oded Regev. Vertex Cover might be hard to approximate to within\n2 \u2212 \u000f. In Proc. 18th IEEE Conference on Computational Complexity, pages 379\u2013386,\n2003. 1\n\n[MR10]\n\nDana Moshkovitz and Ran Roz. Two-query PCP with subconstant error. Journal of\nthe ACM, 57(5):29, 2010. 1, 2.1\n\n[OW09]\n\nRyan O'Donnell and Yi Wu. Conditional hardness for satisfiable 3-CSPs. In Proceedings\nof the 41st Annual ACM Symposium on Theory of Computing, pages 493\u2013502, 2009. 1\n\n[OW12]\n\nRyan O'Donnell and John Wright. A new point of NP-hardness for Unique-Games. In\nProceedings of the 44th Annual ACM Symposium on Theory of Computing, 2012. 1.1,\n1.1\n\n[Rag08]\n\nPrasad Raghavendra. Optimal algorithms and inapproximability results for every CSP?\nIn Proceedings of the 40th Annual ACM Symposium on Theory of Computing, pages\n245\u2013254, 2008. 1\n\n[Raz95]\n\nRan Raz. A parallel repetition theorem. In Proceedings of the 27th Annual ACM\nSymposium on Theory of Computing, pages 447\u2013456, 1995. 1\n\n[Ste10]\n\nDavid Steurer. Subexponential algorithms for d-to-1 two-prover games and for certifying almost perfect expansion. Available at the author's website, 2010. 1\n\n[TSSW00] Luca Trevisan, Gregory Sorkin, Madhu Sudan, and David Williamson. Gadgets, approximation, and linear programming. SIAM Journal on Computing, 29(6):2074\u20132097,\n2000. 1.1, 2.2\n[Zwi98]\n\nUri Zwick. Approximation algorithms for constraint satisfaction problems involving\nat most three variables per constraint. In Proceedings of the 9th Annual ACM-SIAM\nSymposium on Discrete Algorithms, pages 201\u2013210, 1998. 1\n\n15\n\n\f"}