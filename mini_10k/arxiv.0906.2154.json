{"id": "http://arxiv.org/abs/0906.2154v7", "guidislink": true, "updated": "2011-04-27T16:46:20Z", "updated_parsed": [2011, 4, 27, 16, 46, 20, 2, 117, 0], "published": "2009-06-11T16:34:51Z", "published_parsed": [2009, 6, 11, 16, 34, 51, 3, 162, 0], "title": "From formulas to cirquents in computability logic", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0906.3662%2C0906.2510%2C0906.4720%2C0906.0970%2C0906.3832%2C0906.4901%2C0906.2125%2C0906.0800%2C0906.3614%2C0906.5124%2C0906.3954%2C0906.2421%2C0906.3536%2C0906.0382%2C0906.0565%2C0906.5539%2C0906.3760%2C0906.2046%2C0906.2523%2C0906.3960%2C0906.3432%2C0906.2852%2C0906.5599%2C0906.5543%2C0906.0704%2C0906.3030%2C0906.3595%2C0906.5608%2C0906.1050%2C0906.2440%2C0906.3722%2C0906.4161%2C0906.2823%2C0906.4073%2C0906.2513%2C0906.0440%2C0906.3989%2C0906.0894%2C0906.3803%2C0906.0308%2C0906.4604%2C0906.3473%2C0906.2393%2C0906.1801%2C0906.4104%2C0906.2354%2C0906.1926%2C0906.2908%2C0906.3871%2C0906.0849%2C0906.3650%2C0906.1298%2C0906.0354%2C0906.0493%2C0906.4524%2C0906.0994%2C0906.1408%2C0906.5436%2C0906.3611%2C0906.3819%2C0906.0649%2C0906.0484%2C0906.4590%2C0906.2759%2C0906.2976%2C0906.3898%2C0906.2154%2C0906.5529%2C0906.5352%2C0906.0733%2C0906.2161%2C0906.3461%2C0906.1277%2C0906.4126%2C0906.5228%2C0906.1871%2C0906.0411%2C0906.0634%2C0906.5607%2C0906.5326%2C0906.4917%2C0906.0980%2C0906.4177%2C0906.4627%2C0906.2331%2C0906.0688%2C0906.4615%2C0906.1084%2C0906.2054%2C0906.5414%2C0906.3498%2C0906.2193%2C0906.3443%2C0906.1016%2C0906.4003%2C0906.3483%2C0906.2654%2C0906.3719%2C0906.0163%2C0906.5440%2C0906.4923&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "From formulas to cirquents in computability logic"}, "summary": "Computability logic (CoL) (see http://www.cis.upenn.edu/~giorgi/cl.html) is a\nrecently introduced semantical platform and ambitious program for redeveloping\nlogic as a formal theory of computability, as opposed to the formal theory of\ntruth that logic has more traditionally been. Its expressions represent\ninteractive computational tasks seen as games played by a machine against the\nenvironment, and \"truth\" is understood as existence of an algorithmic winning\nstrategy. With logical operators standing for operations on games, the\nformalism of CoL is open-ended, and has already undergone series of extensions.\nThis article extends the expressive power of CoL in a qualitatively new way,\ngeneralizing formulas (to which the earlier languages of CoL were limited) to\ncircuit-style structures termed cirquents. The latter, unlike formulas, are\nable to account for subgame/subtask sharing between different parts of the\noverall game/task. Among the many advantages offered by this ability is that it\nallows us to capture, refine and generalize the well known\nindependence-friendly logic which, after the present leap forward, naturally\nbecomes a conservative fragment of CoL, just as classical logic had been known\nto be a conservative fragment of the formula-based version of CoL. Technically,\nthis paper is self-contained, and can be read without any prior familiarity\nwith CoL.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0906.3662%2C0906.2510%2C0906.4720%2C0906.0970%2C0906.3832%2C0906.4901%2C0906.2125%2C0906.0800%2C0906.3614%2C0906.5124%2C0906.3954%2C0906.2421%2C0906.3536%2C0906.0382%2C0906.0565%2C0906.5539%2C0906.3760%2C0906.2046%2C0906.2523%2C0906.3960%2C0906.3432%2C0906.2852%2C0906.5599%2C0906.5543%2C0906.0704%2C0906.3030%2C0906.3595%2C0906.5608%2C0906.1050%2C0906.2440%2C0906.3722%2C0906.4161%2C0906.2823%2C0906.4073%2C0906.2513%2C0906.0440%2C0906.3989%2C0906.0894%2C0906.3803%2C0906.0308%2C0906.4604%2C0906.3473%2C0906.2393%2C0906.1801%2C0906.4104%2C0906.2354%2C0906.1926%2C0906.2908%2C0906.3871%2C0906.0849%2C0906.3650%2C0906.1298%2C0906.0354%2C0906.0493%2C0906.4524%2C0906.0994%2C0906.1408%2C0906.5436%2C0906.3611%2C0906.3819%2C0906.0649%2C0906.0484%2C0906.4590%2C0906.2759%2C0906.2976%2C0906.3898%2C0906.2154%2C0906.5529%2C0906.5352%2C0906.0733%2C0906.2161%2C0906.3461%2C0906.1277%2C0906.4126%2C0906.5228%2C0906.1871%2C0906.0411%2C0906.0634%2C0906.5607%2C0906.5326%2C0906.4917%2C0906.0980%2C0906.4177%2C0906.4627%2C0906.2331%2C0906.0688%2C0906.4615%2C0906.1084%2C0906.2054%2C0906.5414%2C0906.3498%2C0906.2193%2C0906.3443%2C0906.1016%2C0906.4003%2C0906.3483%2C0906.2654%2C0906.3719%2C0906.0163%2C0906.5440%2C0906.4923&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Computability logic (CoL) (see http://www.cis.upenn.edu/~giorgi/cl.html) is a\nrecently introduced semantical platform and ambitious program for redeveloping\nlogic as a formal theory of computability, as opposed to the formal theory of\ntruth that logic has more traditionally been. Its expressions represent\ninteractive computational tasks seen as games played by a machine against the\nenvironment, and \"truth\" is understood as existence of an algorithmic winning\nstrategy. With logical operators standing for operations on games, the\nformalism of CoL is open-ended, and has already undergone series of extensions.\nThis article extends the expressive power of CoL in a qualitatively new way,\ngeneralizing formulas (to which the earlier languages of CoL were limited) to\ncircuit-style structures termed cirquents. The latter, unlike formulas, are\nable to account for subgame/subtask sharing between different parts of the\noverall game/task. Among the many advantages offered by this ability is that it\nallows us to capture, refine and generalize the well known\nindependence-friendly logic which, after the present leap forward, naturally\nbecomes a conservative fragment of CoL, just as classical logic had been known\nto be a conservative fragment of the formula-based version of CoL. Technically,\nthis paper is self-contained, and can be read without any prior familiarity\nwith CoL."}, "authors": ["Giorgi Japaridze"], "author_detail": {"name": "Giorgi Japaridze"}, "author": "Giorgi Japaridze", "links": [{"title": "doi", "href": "http://dx.doi.org/10.2168/LMCS-7(2:1)2011", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/0906.2154v7", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0906.2154v7", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "LMCS 7 (2:1) 2011", "arxiv_primary_category": {"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.AI", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "math.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "F.1.1, F.1.2, F.1.3", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0906.2154v7", "affiliation": "School of Computer Science and Technology, Shandong University, Department of Co", "arxiv_url": "http://arxiv.org/abs/0906.2154v7", "journal_reference": "Logical Methods in Computer Science, Volume 7, Issue 2 (April 21,\n  2011) lmcs:1121", "doi": "10.2168/LMCS-7(2:1)2011", "fulltext": "Logical Methods in Computer Science\nVol. 7 (2:1) 2011, pp. 1\u201355\nwww.lmcs-online.org\n\nSubmitted\nPublished\n\nJul. 12, 2010\nApr. 21, 2011\n\nFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\nGIORGI JAPARIDZE\nSchool of Computer Science and Technology, Shandong University, China; and Department of\nComputing Sciences, Villanova University, USA\ne-mail address: giorgi.japaridze@villanova.edu\n\nAbstract. Computability logic (CoL) is a recently introduced semantical platform and\nambitious program for redeveloping logic as a formal theory of computability, as opposed to\nthe formal theory of truth that logic has more traditionally been. Its expressions represent\ninteractive computational tasks seen as games played by a machine against the environment, and \"truth\" is understood as existence of an algorithmic winning strategy. With\nlogical operators standing for operations on games, the formalism of CoL is open-ended,\nand has already undergone series of extensions. This article extends the expressive power\nof CoL in a qualitatively new way, generalizing formulas (to which the earlier languages of\nCoL were limited) to circuit-style structures termed cirquents. The latter, unlike formulas,\nare able to account for subgame/subtask sharing between different parts of the overall\ngame/task. Among the many advantages offered by this ability is that it allows us to\ncapture, refine and generalize the well known independence-friendly logic which, after the\npresent leap forward, naturally becomes a conservative fragment of CoL, just as classical\nlogic had been known to be a conservative fragment of the formula-based version of CoL.\nTechnically, this paper is self-contained, and can be read without any prior familiarity with\nCoL.\n\n1998 ACM Subject Classification: F.1.1, F.1.2, F.1.3.\n2000 Mathematics Subject Classification: primary: 03B47; secondary: 03F50; 03B70; 68Q10; 68T27;\n68T30; 91A05.\nKey words and phrases: Computability logic; Abstract resource semantics; Independence-friendly logic;\nGame semantics; Interactive computation.\nThis material is based upon work supported by the National Science Foundation under Grant No.\n0208816.\n\nl\n\nLOGICAL METHODS\nIN COMPUTER SCIENCE\n\nc\nDOI:10.2168/LMCS-7 (2:1) 2011\n\nCC\n\nG. Japaridze\nCreative Commons\n\n\f2\n\nG. JAPARIDZE\n\nContents\n1. Introduction\n2. Games\n3. The simplest kind of cirquents\n4. Selectional gates\n5. Clustering selectional gates\n6. Clustering \u2228-gates\n7. Clustering all gates; ranking\n8. General ports\n9. Abstract resource semantics\n10. Accomplishability and strong validity are equivalent\n11. Conclusion\nReferences\n\n2\n5\n8\n12\n19\n26\n28\n36\n40\n48\n53\n53\n\n1. Introduction\nComputability logic (CoL), introduced in [12, 17, 24], is a semantical platform and ambitious\nprogram for redeveloping logic as a formal theory of computability, as opposed to the formal\ntheory of truth that logic has more traditionally been. Its expressions stand for interactive\ncomputational tasks seen as games played by a machine against its environment, and \"truth\"\nis understood as existence of an effective solution, i.e., of an algorithmic winning strategy.\nWith this semantics, CoL provides a systematic answer to the fundamental question\n\"what can be computed?\", just as classical logic is a systematic tool for finding what is true.\nFurthermore, as it turns out, in positive cases \"what can be computed\" always allows itself to\nbe replaced by \"how can be computed\", which makes CoL of potential interest in not only\ntheoretical computer science, but many more applied areas as well, including interactive\nknowledge base systems, resource oriented systems for planning and action, or declarative\nprogramming languages. On the logical side, CoL promises to be an appealing, constructive\nand computationally meaningful alternative to classical logic as a basis for applied theories.\nThe first concrete steps towards realizing this potential have been made very recently in\n[26, 29, 30], where CoL-based versions of Peano arithmetic were elaborated. The system\nconstructed in [26] is an axiomatic theory of effectively solvable number-theoretic problems\n(just as the ordinary Peano arithmetic is an axiomatic theory of true number-theoretic\nfacts); the system constructed in [29] is an axiomatic theory of efficiently solvable (namely,\nsolvable in polynomial time) number-theoretic problems; in the same style, [30] constructs\nsystems for polynomial space, elementary recursive, and primitive recursive computabilities.\nIn all cases, a solution for a problem can be effectively - in fact, efficiently - extracted\nfrom a proof of it in the system, which reduces problem-solving to theorem-proving.\nThe formalism of CoL is open-ended. It has already undergone series of extensions\n([23]-[27]) through introducing logical operators for new, actually or potentially interesting,\noperations on games, and this process will probably still continue in the future. The present\nwork is also devoted to expanding the expressive power of CoL, but in a very different way.\nNamely, while the earlier languages of CoL were limited to formulas, this paper makes a\nleap forward by generalizing formulas to circuit-style structures termed cirquents. These\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n3\n\nstructures, in a very limited form (compared with their present form), were introduced\nearlier [16, 22] in the context of the new proof-theoretic approach called cirquent calculus.\nCirquent-based formalisms have significant advantages over formula-based ones, including\nexponentially higher efficiency and substantially greater expressive power. Both [16] and\n[22] pointed out the possibility and expediency of bringing cirquents into CoL. But a CoLsemantics for cirquents had never really been set up until now.\nUnlike most of its predecessors, from the technical (albeit perhaps not philosophical or\nmotivational) point of view, the present paper is written without assuming that the reader\nis already familiar with the basic concepts and techniques of computability logic. It is\norganized as follows.\nSection 2 reintroduces the concept of games and interactive computability on which the\nsemantics of CoL is based. A reader familiar with the basics of CoL may safely skip this\nsection.\nSection 3 introduces the simplest kind of cirquents, containing only the traditional \u2228 and\n\u2227 sorts of gates (negation, applied directly to inputs, is also present). These are nothing but\n(possibly infinite) Boolean circuits in the usual sense, and the semantics of CoL for them\ncoincides with the traditional, classical semantics. While such cirquents - when finite\n- do not offer higher expressiveness than formulas do, they do offer dramatically higher\nefficiency. This fact alone, in our days of logic being increasingly CS-oriented, provides\nsufficient motivation for considering a switch from formulas to cirquents in logic, even if we\nare only concerned with classical logic. The first steps in this direction have already been\nmade in [22], where a cirquent-based sound and complete deductive system was set up for\nclassical logic. That system was shown to provide an exponential speedup of proofs over its\nformula-based counterparts.\nEach of the subsequent Sections 4-8 conservatively generalizes the cirquents and the\nsemantics of the preceding sections.\nSection 4 strengthens the expressiveness of cirquents by allowing new, so called selectional, sorts of gates, with the latter coming in three - choice \u2294, \u2293, sequential \u25bd, \u25b3 and\ntoggling \u2228, \u2227 - flavors of disjunction and conjunction. Unlike \u2228 and \u2227 which stand for\nparallel combinations of (sub)tasks, selectional gates model decision steps in the process\nof interaction of the machine with its environment. Cirquents with such gates, allowing\nus to account for the possibility of sharing nontrivial subgames/subtasks, have never been\nconsidered in the past. They, even when finite, are more expressive (let alone efficient) than\nformulas with selectional connectives.\nSection 5 introduces the idea of clustering selectional gates. Clusters are, in fact,\ngeneralized gates - switch-style devices that permit to select one of several n-tuples of\ninputs and connect them, in a parallel fashion, with the n-tuple of outputs, with ordinary\ngates being nothing but the special cases of clusters where n = 1. Clustering makes it\npossible to express a new kind of sharing, which can be characterized as \"sharing children\nwithout sharing grandchildren\" - that is, sharing decisions (associated with child gates)\nwithout sharing the results of such decisions (the children of those gates). The ability to\naccount for this sort of sharing yields a further qualitative increase in the expressiveness of\nthe associated formalism.\nSections 6 and 7 extend clustering from selectional gates to the traditional sorts \u2228, \u2227\nof gates. It turns out that the resulting cirquents - even without selectional gates - are\nexpressive enough to fully capture the well known and extensively studied independencefriendly (IF) logic introduced by Hintikka and Sandu [5, 6]. At the same time, cirquents\n\n\f4\n\nG. JAPARIDZE\n\nwith clustered \u2228, \u2227-gates yield substantially higher expressiveness than IF logic does. Due to\nthis fact, they overcome a series of problems emerging within the earlier known approaches\nto IF logic. One of such problems is the inability of the traditional formalisms of IF logic to\naccount for independence from conjunctions and disjunctions in the same systematic way as\nthey account for independence from quantifiers. Correspondingly, attempts to develop IF\nlogic at the purely propositional level have not been able to go beyond certain very limited\nand special syntactic fragments of the language. In contrast, our approach saves classical\nlogic's nice phenomenon of quantifiers being nothing but \"long\" conjunctions and disjunctions, so that one can do with the latter everything that can be done with the former, and\nvice versa. As a result, we can now (at last) meaningfully talk about propositional IF logic\nin the proper sense without any unsettling syntactic restrictions. Another problem arising\nwith IF logic is the \"unplayability\" (cf. [34]) of the incomplete-information games traditionally associated with its formulas, as such games violate certain natural game-theoretic\nprinciples such as perfect recall. Attempts to associate reasonable game-theoretic intuitions\nwith imperfect-information games typically have to resort to viewing the two parties not as\nindividual players but rather as teams of cooperating but non-communicating players. This\napproach, however, may often get messy, and tends to give rise to series of new sorts of\nproblems. V\u00e4\u00e4n\u00e4nen [37] managed to construct a semantics for IF logic based on perfectinformation games. This, however, made games unplayable for a new reason: moves in\nV\u00e4\u00e4n\u00e4nen's games are second-order objects and hence are \"unmakable\". Our approach\navoids the need to deal with imperfect-information, second-order-move, or multiple-player\ngames altogether.\nSection 7 also introduces a further generalization of cirquents through what is termed\nranking. Cirquents with ranking (and with only \u2228, \u2227 gates) allow us to further capture the\nso called extended IF logic (cf. [35]), but are substantially more expressive than the latter.\nThey also overcome one notable problem arising in extended IF logic, which is the (weak)\nnegation's not being able to act as an ordinary connective that can be meaningfully applied\nanywhere within a formula.\nSection 8 extends the formalism of cirquents by allowing additional sorts of inputs\ntermed general, as opposed to the elementary inputs to which the cirquents of the earlier\nsections are limited. Unlike elementary inputs that are interpreted just as \u22a4 (\"true\") or\n\u22a5(\"false\"), general inputs stand for any, possibly nontrivial, games. This way, cirquents\nbecome and can be viewed as (complex) operations on games, only very few of which are\nexpressible through formulas.\nSection 9 sets up an alternative semantics for cirquents termed abstract resource semantics (ARS). It is a companion and faithful technical assistant of CoL. ARS also has good\nclaims to be a materialization and generalization of the resource intuitions traditionally -\nbut somewhat wrongly - associated with linear logic and its variations. Unlike CoL, ARS\nhas already met cirquents in the past, namely, in [16, 22]. The latter, however, unlike the\npresent paper, elaborated ARS only for a very limited class of cirquents - cirquents with\njust \u2228, \u2227 gates and without clustering or ranking.\nSection 10 proves that CoL and ARS validate exactly the same cirquents. Among\nthe expected applications of this theorem is facilitating soundness/completeness proofs for\nvarious deductive systems for (fragments of) CoL, as technically it is by an order of magnitude easier to deal with (the simple and \"naive\") ARS than to deal with (the complex and\n\"serious\") CoL directly.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n5\n\n2. Games\nAs noted, computability logic understands interactive computational problems as games\nplayed between two players: machine and environment. The symbolic names for these\ntwo players are \u22a4 and \u22a5, respectively. \u22a4 is a deterministic mechanical device (thus) only\ncapable of following algorithmic strategies, whereas there are no restrictions on the behavior\nof \u22a5, which represents a capricious user, the blind forces of nature, or the devil himself.\nOur sympathies are with \u22a4, and by just saying \"won\" or \"lost\" without specifying a player,\nwe always mean won or lost by \u22a4. \u2118 is always a variable ranging over {\u22a4, \u22a5}, with \u00ac\u2118\nmeaning \u2118's adversary, i.e. the player which is not \u2118.\nBefore getting to a formal definition of games, we agree that a move is always a finite\nstring over the standard keyboard alphabet. A labeled move (labmove) is a move prefixed\nwith \u22a4 or \u22a5, with its prefix (label) indicating which player has made the move. A run\nis a (finite or infinite) sequence1 of labmoves, and a position is a finite run. Runs will be\noften delimited by \"h\" and \"i\", with hi thus denoting the empty run.\nThe following is a formal definition of the concept of a game, combined with some less\nformal conventions regarding the usage of certain terminology. It should be noted that\nthe concept of a game considered in CoL is more general than the one defined below, with\ngames in our present sense called constant games. Since we (for simplicity) only consider\nconstant games in this paper, we omit the word \"constant\" and just say \"game\".\nDefinition 2.1. A game is a pair A = (LrA , WnA ), where:\n1. LrA is a set of runs satisfying the condition that a finite or infinite run is in LrA iff\nall of its nonempty finite - not necessarily proper - initial segments are in LrA (notice\nthat this implies hi \u2208 LrA ). The elements of LrA are said to be legal runs of A, and all\nother runs are said to be illegal runs of A. We say that \u03b1 is a legal move for \u2118 in a\nposition \u03a6 of A iff h\u03a6, \u2118\u03b1i \u2208 LrA ; otherwise \u03b1 is an illegal move. When the last move of\nthe shortest illegal initial segment of \u0393 is \u2118-labeled, we say that \u0393 is a \u2118-illegal run of A.\n2. WnA is a function that sends every run \u0393 to one of the players \u22a4 or \u22a5, satisfying\nthe condition that if \u0393 is a \u2118-illegal run of A, then WnA h\u0393i = \u00ac\u2118.2 When WnA h\u0393i = \u2118,\nwe say that \u0393 is a \u2118-won (or won by \u2118) run of A; otherwise \u0393 is lost by \u2118. Thus, an\nillegal run is always lost by the player who has made the first illegal move in it.\nIt is clear from the above definition that, when defining a particular game A, it would\nbe sufficient to specify what positions (finite runs) are legal, and what legal runs are won\nby \u22a4. Such a definition will then uniquely extend to all - including infinite and illegal -\nruns. We will implicitly rely on this observation in the sequel.\nA game is said to be elementary iff it has no legal runs other than (the always legal) empty run hi. That is, an elementary game is a \"game\" without any (legal) moves,\nautomatically won or lost. There are exactly two such games, for which we use the same\nsymbols \u22a4 and \u22a5 as for the two players: the game \u22a4 automatically won by player \u22a4, and\nthe game \u22a5 automatically won by player \u22a5.3 Computability logic is a conservative extension of classical logic, understanding classical propositions as elementary games. And, just\nas classical logic, it sees no difference between any two true propositions such as \"0 = 0\"\n1Throughout this paper, by a sequence we mean a \u03ba-sequence for some \u03ba \u2264 \u03c9.\n2We write WnA h\u0393i for WnA (\u0393).\n3Precisely, we have Wn\u22a4 hi = \u22a4 and Wn\u22a5 hi = \u22a5.\n\n\f6\n\nG. JAPARIDZE\n\nand \"Snow is white\", and identifies them with the elementary game \u22a4; similarly, it treats\nfalse propositions such as \"0 = 1\" or \"Snow is black\" as the elementary game \u22a5.\nThe negation \u00acA of a game A is understood as the game obtained from A by interchanging the roles of the two players, i.e., making \u22a4's (legal) moves and wins \u22a5's moves\nand wins, and vice versa. Precisely, let us agree that, for a run \u0393, \u00ac\u0393 means the result of\nchanging in \u0393 each label \u22a4 to \u22a5 and vice versa. Then:\nDefinition 2.2. The negation \u00acA of a game A is defined by stipulating that, for any run\n\u0393,\n\u2022 \u0393 \u2208 Lr\u00acA iff \u00ac\u0393 \u2208 LrA ;\n\u2022 Wn\u00acA h\u0393i = \u22a4 iff WnA h\u00ac\u0393i = \u22a5.\nObviously the negation of an elementary game is also elementary. Generally, when applied\nto elementary games, the meaning of \u00ac fully coincides with its classical meaning. So, \u00ac is\na conservative generalization of classical negation from elementary games to all games.\nNote the relaxed nature of our games. They do not impose any regulations on when\neither player can or should move. This is entirely up to the players. Even if we assume that\nillegal moves physically cannot be made, it is still possible that in certain (or all) positions\nboth of the players have legal moves, and then the next move will be made (if made at all)\nby the player who wants or can act sooner. This brings us to the next question to clarify:\nhow are our games really played, and what does a strategy mean here?\nIn traditional game-semantical approaches, including those of Lorenzen [31], Hintikka\n[4] or Blass [2], player's strategies are understood as functions - typically as functions from\ninteraction histories (positions) to moves, or sometimes (Abramsky and Jagadeesan [1]) as\nfunctions that only look at the latest move of the history. This strategies-as-functions\napproach, however, is inapplicable in the context of computability logic, whose relaxed\nsemantics, in striving to get rid of any \"bureaucratic pollutants\" and only deal with the\nremaining true essence of games, has no structural rules and thus does not regulate the\norder of moves. As noted, here often either player may have (legal) moves, and then it\nis unclear whether the next move should be the one prescribed by \u22a4's strategy function\nor the one prescribed by the strategy function of \u22a5. In fact, for a game semantics whose\nambition is to provide a comprehensive, natural and direct tool for modeling interactive\ncomputations, the strategies-as-functions approach would be less than adequate, even if\ntechnically possible. This is so for the simple reason that the strategies that real computers\nfollow are not functions. If the strategy of your personal computer was a function from\nthe history of interaction with you, then its performance would keep noticeably worsening\ndue to the need to read the continuously lengthening - and, in fact, practically infinite -\ninteraction history every time before responding. Fully ignoring that history and looking\nonly at your latest keystroke in the spirit of [1] is also certainly not what your computer does,\neither. The inadequacy of the strategies-as-functions approach becomes especially evident\nwhen one tries to bring computational complexity issues into interactive computation, the\nnext natural target towards which CoL has already started making its first steps ([?, 29, 30]).\nIn computability logic, (\u22a4's effective) strategies are defined in terms of interactive\nmachines, where computation is one continuous process interspersed with - and influenced\nby - multiple \"input\" (environment's moves) and \"output\" (machine's moves) events. Of\nseveral, seemingly rather different yet equivalent, machine models of interactive computation\nstudied in CoL, here we will consider the most basic, HPM (\"Hard-Play Machine\") model.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n7\n\nAn HPM is nothing but a Turing machine with the additional capability of making\nmoves. The adversary can also move at any time, with such moves being the only nondeterministic events from the machine's perspective. Along with the ordinary read/write work\ntape, the machine also has an additional tape4 called the run tape. The latter, at any time,\nspells the \"current position\" of the play. The role of this tape is to make the interaction\nhistory fully visible to the machine. It is read-only, and its content is automatically updated\nevery time either player makes a move.\nIn these terms, an algorithmic solution (\u22a4's winning strategy) for a given game\nA is understood as an HPM M such that, no matter how the environment acts during its\ninteraction with M (what moves it makes and when), the run incrementally spelled on the\nrun tape is a \u22a4-won run of A. When this is the case, we say that M wins, or solves, A,\nand that A is a computable, or algorithmically solvable, game.\nAs for \u22a5's strategies, there is no need to define them: all possible behaviors by \u22a5 are\naccounted for by the different possible nondeterministic updates of the run tape of an HPM.\nIn the above outline, we described HPMs in a relaxed fashion, without being specific\nabout technical details such as, say, how, exactly, moves are made by the machine, how\nmany moves either player can make at once, what happens if both players attempt to move\n\"simultaneously\", etc. As it turns out (cf. [12]), all reasonable design choices yield the same\nclass of winnable games as long as we consider a certain natural subclass of games called\nstatic.\nIntuitively, static games are interactive tasks where the relative speeds of the players\nare irrelevant, as it never hurts a player to postpone making moves. In other words, they are\ngames that are contests of intellect rather than contests of speed. And one of the theses that\ncomputability logic philosophically relies on is that static games present an adequate formal\ncounterpart of our intuitive concept of \"pure\", speed-independent interactive computational\nproblems. Correspondingly, computability logic restricts its attention (more specifically,\npossible interpretations of the atoms of its formal language) to static games. Below comes\na formal definition of this concept.\nFor either player \u2118, we say that a run \u03a5 is a \u2118-delay of a run \u0393 iff:\n\u2022 for both players \u2118\u2032 \u2208 {\u22a4, \u22a5}, the subsequence of \u2118\u2032 -labeled moves of \u03a5 is the same as\nthat of \u0393, and\n\u2022 for any n, k \u2265 1, if the nth \u2118-labeled move is made later than (is to the right of) the kth\n\u00ac\u2118-labeled move in \u0393, then so is it in \u03a5.\nThe above conditions mean that in \u03a5 each player has made the same sequence of moves as\nin \u0393, only, in \u03a5, \u2118 might have been acting with some delay.\nLet us say that a run is \u2118-legal iff it is not \u2118-illegal. That is, a \u2118-legal run is either\nsimply legal, or the player responsible for (first) making it illegal is \u00ac\u2118 rather than \u2118.\nNow, we say that a game A is static iff, whenever a run \u03a5 is a \u2118-delay of a run \u0393, we\nhave:\n\u2022 if \u0393 is a \u2118-legal run of A, then so is \u03a5;5\n4An HPM often also has a third tape called the valuation tape. Its function is to provide values for the\n\nvariables on which a game may depend. However, as we remember, in this paper we only consider constant\ngames - games that do not depend on any variables. This makes it possible to safely remove the valuation\ntape from the HPM model (or leave it there but fully ignore), as this tape is no longer relevant.\n5In most papers on CoL, the concept of static games is defined without this (first) condition. In such\ncases, however, the existence of an always-illegal move \u2660 is stipulated in the definition of games. The first\n\n\f8\n\nG. JAPARIDZE\n\n\u2022 if \u0393 is a \u2118-won run of A, then so is \u03a5.\nThe class of static games is closed under all game operations studied in CoL, and all games\nthat we shall see in this paper are static. Throughout this paper, we use the term \"computational problem\", or simply \"problem\", is a synonym of \"static game\".\nA simplest example of a non-static game would be the game where all moves are legal,\nand which is won by the player who moves first. The chances of a player to succeed\nonly depend on its relative speed, that is. Such a game hardly represents any meaningful\ncomputational problem.\n3. The simplest kind of cirquents\nWe fix some infinite collection of finite alphanumeric expressions called atoms, and use p,\nq, r, s, p1 , p2 , p(3, 6), q7 (1, 1, 8), . . . as metavariables for them. If p is an atom, then the\nexpressions p and \u00acp are said to be literals.\nLet us agree that, in this section, by a graph we mean a directed acyclic multigraph\nwith countably many nodes and edges, where the outgoing edges of each node are arranged\nin a fixed left-to-right order (edges #1, #2, etc.), and where each node is labeled with either\na literal or \u2228 or \u2227. Since the sets of nodes and edges are countable, we assume that they\nare always subsets of {1, 2, 3, . . .}. For a node n of the graph, the string representing n in\nthe standard decimal notation is said to be the ID number, or just the ID, of the node.\nSimilarly for edges.\nThe nodes labeled with \u2227 or \u2228 we call gates, and the nodes labeled with literals we call\nports. Specifically, a node labeled with a literal L is said to be a an L-port; a \u2227-labeled\nnode is said to be a \u2227-gate; and a \u2228-labeled node is said to be a \u2228-gate. When there is\nan edge from a node a to a node b, we say that b is a child of a and a is a parent of b.\nThe relations \"descendant\" and \"ancestor\" are the transitive closures of the relations\n\"child\" and \"parent\", respectively. The meanings of some other standard relations such as\n\"grandchild\", \"grandparent\", etc. should also be clear.\nThe outdegree of a node of a graph is the quantity of outgoing edges of that node,\nwhich can be finite or infinite. Since there are only countably many edges, any two infinite\noutdegrees are equal. Similarly, the indegree of a node is the quantity of the incoming\nedges of that node.\nWe say that a graph is well-founded iff there is no infinite sequence a1 , a2 , a3 , . . . of\nnodes where each ai is a predecessor of ai+1 . Of course, any (directed acyclic) graph with\nfinitely many nodes is well-founded.\nWe say that a graph is effective iff the following basic predicates and partial functions\ncharacterizing it are recursive: \"x is a node\", \"x is an edge\", \"the label of node x\", \"the\noutdegree of node x\", \"the y'th outgoing edge of node x\", \"the origin of edge x\", \"the\ndestination of edge x\".\nDefinition 3.1. A cirquent is an effective, well-founded graph satisfying the following two\nconditions:\n(1) Ports have no children.\n(2) There is a node, called the root, which is an ancestor of all other nodes in the graph.\ncondition of our present definition of static games turns out to be simply derivable from that stipulation.\nThis and a couple of other minor technical differences between our present formulations from those given in\nother pieces of literature on CoL only signify presentational and by no means conceptual variations.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n9\n\nWe say that a cirquent is finite iff it has only finitely many edges (and hence nodes);\notherwise it is infinite.\nWe say that a cirquent is tree-like iff the indegree of each of its non-root node is 1.\nGraphically, we represent ports through the corresponding literals, \u2228-gates through \u2228inscribed circles, and \u2227-gates through \u2227-inscribed circles. We agree that the direction of\nan edge is always upward, which allows us to draw lines rather than arrows for edges. It\nis understood that the official order of the outgoing edges of a gate coincides with the (left\nto right) order in which the edges are drawn. Also, typically we do not indicate the IDs of\nnodes unless necessary. In most cases, what particular IDs are assigned to the nodes of a\ncirquent is irrelevant and such an assignment can be chosen arbitrarily. Similarly, edge IDs\nare usually irrelevant, and they will never be indicated.\nBelow are a few examples of cirquents. Note that cirquents may contain parallel edges,\nas we agreed that \"graph\" means \"multigraph\". Note also that not only ports but also\ngates can be childless.\n\u00acp\n\np\n\n\u00acp\n\np\n\n\u00acp\n\n\u2745\n\u2745\n\u2745\n\u2745\np\n\u2228\u2766\n\u2228\u2766\n\u2773\u2773\u2773\n\u2718\n\u2718\n\u25d7\n\u2711\n\u2718\n\u2773\u2773 \u25d7\n\u2711 \u2718\u2718\n\u2773\u2773\u2773\n\u25d7\u2711\n\u2718\u2718\u2718\n\u2227\u2766\n\n\u00acp\n\np\n\n\u2745\n\u2745\n\u2228\u2766\n\u2745 \u2766\n\u2227\n\nFigure 1: Finite cirquents\np(1, 1) p(1, 2) . . .\n\u270f\u270f . . .\n\u272d\u272d\n\u270f\n\u272d\u270f\n\u2228\u2766\n\np(2, 1) p(2, 2) . . .\n\u270f\u270f . . .\n\u272d\u272d\n\u270f\n\u272d\u270f\n\u2228\u2766\n\n\u2718\n\u2718\u2718\u2718\n\u2718\u272d\n\u2718\n\u2718\n\u2718 \u272d\u272d\n\u272d\u272d\u272d\n\u272d\u2718\n\u272d\u2718\n\u272d\u2718\n\u2718\n\u2227\u2766\n\n\u2228\u2766 p1 p2\n\n...\n\n...\n\np3 . . .\n\n\u2745 \u2766\n...\n\u2228\n\u275c \u2766\n\u2701\u2701 \u2727\u2228 \u2773 \u2228\u2766\n\u270f \u2764...\n\u2701\u2727\u2727\n\u270f\u270f\n\u270f\n\u272d\n\u270f\u272d . . .\n\u2727\n\u2701 \u272d\n\u270f\n\u272d\n\u2228\u2766\n\nFigure 2: Infinite cirquents\nBy an interpretation6 in this and the following few sections we mean a function \u2217 that\nsends each atom p to one of the values (elementary games) p\u2217 \u2208 {\u22a4, \u22a5}. It immediately\nextends to a mapping from all literals to {\u22a4, \u22a5} by stipulating that (\u00acp)\u2217 = \u00ac(p\u2217 ); that is,\n\u2217 sends \u00acp to \u22a4 iff it sends p to \u22a5.\nEach interpretation \u2217 induces the predicate of truth with respect to (w.r.t.) \u2217 for\ncirquents and their nodes, as defined below. This definition, as well as similar definitions\ngiven later, silently but essentially relies on the fact that the graphs that we consider are\nwell-founded.\nDefinition 3.2. Let C be a cirquent and \u2217 an interpretation. With \"port\" and \"gate\"\nbelow meaning those of C, and \"true\" to be read as \"true w.r.t. \u2217 \", we say that:\n6This concepts is termed \"perfect interpretation\" in the other pieces of literature on CoL, where the\n\nword \"interpretation\" is reserved for a slightly more general concept. Since we only deal with perfect\ninterpretations in this paper, we omit the word \"perfect\" and just say \"interpretation\".\n\n\f10\n\nG. JAPARIDZE\n\n\u2022 An L-port is true iff L\u2217 = \u22a4 (any literal L).\n\u2022 A \u2228-gate is true iff so is at least one of its children (thus, a childless \u2228-gate is never true).\n\u2022 A \u2227-gate is true iff so are all of its children (thus, a childless \u2227-gate is always true).\nFinally, we say that the cirquent C is true iff so is its root.\nDefinition 3.3. Let C be a cirquent and \u2217 an interpretation. We define C \u2217 to be the\nelementary game the (only) legal run hi of which is won by \u22a4 iff C is true w.r.t. \u2217 .\nThus, every interpretation \u2217 \"interprets\" a cirquent C as one of the elementary games \u22a4\nor \u22a5. This will not necessarily be the case for the more general sorts of cirquents introduced\nin later sections though.\nWe say that two cirquents C1 and C2 are extensionally identical iff, for every interpretation \u2217 , C1\u2217 = C2\u2217 . For instance, the two cirquents of Figure 1 are extensionally identical.\nOccasionally we may say \"equivalent\" instead of \"extensionally identical\", even though one\nshould remember that equivalence often (in other pieces of literature) may mean something\nweaker than extensional identity.\nIt should be pointed out that the above definition of extensional identity applies not\nonly to cirquents in the sense of the present section. It extends, without any changes in\nphrasing, to cirquents in the more general sense of any of the subsequent sections of this\npaper as well.\nFinally, we say that a cirquent C is valid iff, for any interpretation \u2217 , C \u2217 = \u22a4.\nObviously the semantics that we have defined in this section is nothing but the kind\nold semantics of classical logic. Computability logic fully agrees with and adopts the latter.\nThis is exactly what makes computability logic a conservative extension of classical logic.\nLet us agree that, whenever we speak about formulas of classical logic, they are assumed\nto be written in negation normal form, that is, in the form where the negation symbol \u00ac\nis only applied to atoms. If an expression violates this condition, it is to be understood\njust as a standard abbreviation. Similarly, if we write E \u2192 F , it is to be understood as\nan abbreviation of \u00acE \u2228 E. Also, slightly deviating from the tradition, we allow any finite\nnumbers of arguments for conjunctions and disjunctions in classical formulas. The symbol\n\u22a4 will be understood as an abbreviation of the empty conjunction, \u22a5 as an abbreviation of\nthe empty disjunction, the expression \u2227{E} will be used for the conjunction whose single\nconjunct is E, and similarly for \u2228{E}. More generally, for any n \u2265 0, \u2227{E1 , . . . , En } can\n(but not necessarily will) be written instead of E1 \u2227. . .\u2227En , and similarly for \u2228{E1 , . . . , En }.\nEvery formula of classical propositional logic then can and will be seen as a finite treelike cirquent, namely, the cirquent which is nothing but the parse tree for that formula. For\ninstance, we shall understand the formula \u00acp \u2227 (\u00acp \u2228 p) \u2227 (\u00acp \u2228 p) \u2227 p as the left cirquent\nof Figure 1.\nEvery finite - not necessarily tree-like - cirquent can also be translated into an\nequivalent formula of classical propositional logic. This can be done by first turning the\ncirquent into an extensionally identical tree-like cirquent by duplicating and separating\nshared nodes, and then writing the formula whose parse tree such a cirquent is. For instance,\napplying this procedure to the right cirquent of Figure 1 turns it into the left cirquent of\nthe same figure and thus the formula \u00acp \u2227 (\u00acp \u2228 p) \u2227 (\u00acp \u2228 p) \u2227 p.\nWithout loss of generality, we assume that, unless otherwise specified, the universe of\ndiscourse in all cases that we consider - i.e., the set over which the variables of classical first\norder logic range - is {1, 2, 3, . . .}. Then, from the perspective of classical first order logic,\nthe universal quantification of E(x) is nothing but the \"long conjunction\" E(1) \u2227 E(2) \u2227\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n11\n\nE(3) \u2227 . . ., and the existential quantification of E(x) is nothing but the \"long disjunction\"\nE(1) \u2228 E(2) \u2228 E(3) \u2228 . . .. To emphasize this connection, let us agree to use the expression\n\u2227xE(x) for the former and \u2228xE(x) for the latter, instead of the more usual \u2200 xE(x)\nand \u2203 xE(x) (computability logic reserves \u2200 x and \u2203 x for another, so called blind, sort of\nquantifiers; semantically they, just like \u2227x and \u2228x, are conservative generalizations of the\nclassical quantifiers).\nSince quantifiers are conjunctions or disjunctions, it is obvious that all formulas of\nclassical first order logic can also be seen as tree-like (albeit no longer finite) cirquents. For\ninstance, the formula \u2227x\u2228y p(x, y) is nothing but the left cirquent of Figure 2.\nOn the other hand, unlike the case with finite cirquents, obviously not all infinite\ncirquents can be directly and adequately translated into formulas of classical logic. Of\ncourse, the great expressive power achieved by infinite cirquents, by itself, does not mean\nmuch, because such cirquents are generally \"unwritable\" or \"undrawable\". The cirquents of\nFigure 2 are among the not many lucky exceptions, but even there, the usage of the ellipsis is\nvery informal, relying on a human reader's ability to see patterns and generalize. In order\nto take advantage of the expressiveness of cirquents, one needs to introduce notational\nconventions allowing to represent certain infinite patterns and (sub)cirquents through finite\nmeans. The quantifiers \u2227x and \u2228x are among such means. Defining new, ever more\nexpressive means (not reducible to \u2227x, \u2228x) is certainly possible. Among the advantages of\nconsidering all - rather than only finitely represented - cirquents as we do in this paper\nis that a semantics for them has to be set up only once. If and when various abbreviations\nand finite means of expression are introduced, one will only need to explain what kinds\nof cirquents or subcirquents they stand for, without otherwise redefining or extending the\nalready agreed-upon general semantics for cirquents.\nBut higher expressiveness is not the only advantage of cirquents over formulas. Another\nvery serious advantage is the higher efficiency of cirquents. Let us for now talk only about\nfinite cirquents. As we know, all such cirquents can be written as formulas of classical\npropositional logic. So, they do not offer any additional expressive power. But they do\noffer dramatically improved efficiency in representing Boolean functions. In Section 8 of\n[22] one can find examples of naturally emerging sets of Boolean functions which can be\nrepresented through polynomial size cirquents but require exponential sizes if represented\nthrough formulas. The higher efficiency of cirquents is achieved due to the possibility to\nshare children between different parents - the mechanism absent in formulas, because of\nwhich an exponential explosion may easily occur when translating a (non-tree-like) cirquent\ninto an equivalent formula. Imagine where the computer industry would be at present if, for\nsome strange reason, the computer engineers had insisted on tree-like (rather than graphlike) circuitries!\nCirquents offer not only improved efficiency of expression, but also improved efficiency\nof proofs in deductive systems. In [22], a cirquent-based analytic deductive system CL8\nfor classical propositional logic is set up which is shown to yield an exponential improvement (over formula-based analytic deductive systems) in proof efficiency. For instance, the\nnotorious propositional Pigeonhole principle, which is known to have no polynomial size\nanalytic proofs in traditional systems, has been shown to have such proofs in CL8.\n\n\f12\n\nG. JAPARIDZE\n\n4. Selectional gates\nWe now start a series of generalizations for cirquents and their semantics. We agree that,\nthroughout the rest of this paper, unless otherwise specified, \"cirquent\" and all related\nterms are always to be understood in their latest, most general, sense.\nIn this section we extend the concept of cirquents defined in the previous section\nby allowing, along with \u2228 and \u2227, the following six additional possible labels for gates:\n\u2228, \u2227, \u25bd, \u25b3, \u2294, \u2293. Gates labeled with any of these new symbols we call selectional gates.\nAnd gates labeled with the old \u2228 or \u2227 we call parallel gates.\nSelectional gates, in turn, are subdivided into three groups:\n\u2022 {\u2228, \u2227}, referred to as toggling gates;\n\u2022 {\u25bd, \u25b3}, referred to as sequential gates;\n\u2022 {\u2294, \u2293}, referred to as choice gates.\nThe eight kinds of gates are also divided into the following two groups:\n\u2022 {\u2228, \u2228, \u25bd, \u2294}, termed disjunctive gates (or simply disjunctions);\n\u2022 {\u2227, \u2227, \u25b3, \u2293}, termed conjunctive gates (or simply conjunctions).\nThus, \u2227 is to be referred to as \"parallel conjunction\", \u2294 as \"choice disjunction\", etc.\nThe same eight symbols can be used to construct formulas in the standard way. Of\ncourse, in the context of formulas, these symbols will be referred to as operators or connectives rather than as gates. Formulas of computability logic accordingly may also use\neight sorts of quantifiers. They are written as symbols of the same shape as the corresponding connectives, but in a larger size. Two of such quantifiers - \u2227x and \u2228x - have\nalready been explained in the previous section. The remaining quantifiers are understood\nin the same way: \u2293 xE(x) is the infinite choice conjunction E(1) \u2293 E(2) \u2293 . . ., \u2294 xE(x)\nis the infinite choice disjunction E(1) \u2294 E(2) \u2294 . . ., and similarly for \u2227, \u2228, \u25b3, \u25bd. Since\nquantifiers are again nothing but \"long\" conjunctions and disjunctions, as pointed out in\nthe previous section, there is no necessity to have special gates for them, as our approach\nthat permits gates with infinite outdegrees covers them all. For similar reasons, there is no\nnecessity to have special gates for what computability logic calls (co)recurrence operators.\nThe parallel recurrence \u2227| E of E is defined as the infinite parallel conjunction E \u2227 E \u2227 . . .,\nthe parallel corecurrence \u2228| E of E is defined as the infinite parallel disjunction E \u2228 E \u2228 . . .,\n|\nand similarly for toggling recurrence \u2227| , toggling corecurrence \u2228| , sequential recurrence \u2212\n\u2227 and\n\u2212\nsequential corecurrence \u2228| (choice recurrence and corecurrence are not considered because,\nsemantically, both E \u2293 E \u2293 . . . and E \u2294 E \u2294 . . . are simply equivalent to E).\nAll of the operators \u2228, \u2227, \u2228, \u2227, \u25bd, \u25b3, \u2294, \u2293, including their quantifier and recurrence versions, have been already motivated, defined and studied in computability logic. This, however, has been done only in the context of formulas. In this paper we extend the earlier\napproach and concepts of computability logic from formulas to cirquents as generalized\nformulas.\nAs before, an interpretation is an assignment \u2217 of \u22a4 or \u22a5 to each atom, extended to all\nliterals by commuting with \u00ac. And, as before, such an assignment induces a mapping that\nsends each cirquent C to a game C \u2217 . When C is a cirquent in the sense of the previous\nsection, C \u2217 is always an elementary game (\u22a4 or \u22a5). When, however, C contains selectional\ngates, the game C \u2217 is no longer elementary.\nTo define such games C \u2217 , let us agree that, throughout this paper, positive integers\nare identified with their decimal representations, so that, when we say \"number n\", we\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n13\n\nmay mean either the number n as an abstract object, or the string that represents n in\nthe decimal notation. Among the benefits of this convention is that it allows us to identify\nnodes of a cirquent with their IDs.\nDefinition 4.1. Let C be a cirquent, \u2217 an interpretation, and \u03a6 a position. \u03a6 is a legal\nposition of the game C \u2217 iff, with a \"gate\" below meaning a gate of C, the following\nconditions are satisfied:\n(1) Each labmove of \u03a6 has one of the following forms:\n(a) \u22a4g.i, where g is a \u2228-, \u25bd- or \u2294-gate and i is a positive integer not exceeding the\noutdegree of g;\n(b) \u22a5g.i, where g is a \u2227-, \u25b3- or \u2293-gate and i is a positive integer not exceeding the\noutdegree of g.\n(2) Whenever g is a choice gate, \u03a6 contains at most one occurrence of a labmove of the\nform \u2118g.i.\n(3) Whenever g is a sequential gate and \u03a6 is of the form h. . . , \u2118g.i, . . . , \u2118g.j, . . .i, we have\ni < j.\nNote that the set of legal runs of C \u2217 does not depend on \u2217 . Hence, in the sequel, we can\nunambiguously omit \"\u2217 \" and simply say \"legal run of C\".\nThe intuitive meaning of a move of the form g.i is selecting the ith outgoing edge -\ntogether with the child pointed at by such an edge - of (in) the selectional gate g. In a\ndisjunctive selectional gate, a selection is always made by player \u22a4; and in a conjunctive\nselectional gate, a selection is always made by player \u22a5. The difference between the three\ntypes of selectional gates is only in how many selections and in what order are allowed to be\nmade in the same gate. In a choice gate, a selection can be made only once. In a sequential\ngate, selections can be reconsidered any number of times, but only in the left-to-right order\n(once an edge #i is selected, no edge #j with j \u2264 i can be (re)selected afterwards). In a\ntoggling gate, selections can be reconsidered any number of times and in any order. This\nincludes the possibility to select the same edge over and over again.\nDefinition 4.2. In the context of a given cirquent C and a legal run \u0393 of C, we will say\nthat a selectional gate g is unresolved iff either no moves of the form g.j have been made\nin \u0393, or infinitely many such moves have been made.7 Otherwise g is resolved and, where\ng.i is the last move of the form g.j made in \u0393, the child pointed at by the ith outgoing edge\nof g is said to be the resolvent of g.\nIntuitively, the resolvent is the \"final\", or \"ultimate\" selection of a child made in gate\ng by the corresponding player. There is no such \"ultimate\" selection in unresolved gates.\nThe following definition conservatively generalizes Definition 3.2 of truth. Now we have\na legal run \u0393 of the cirquent as an additional parameter, which was trivial (namely, \u0393 = hi)\nin Definition 3.2 and hence not mentioned there.\nDefinition 4.3. Let C be a cirquent, \u2217 an interpretation, and \u0393 a legal run of C. In this\ncontext, with \"true\" to be read as \"true w.r.t. (\u2217 , \u0393)\", we say that:\n\u2022 An L-port is true iff L\u2217 = \u22a4.\n\u2022 A \u2228-gate is true iff so is at least one of its children.\n\u2022 A \u2227-gate is true iff so are all of its children.\n7The latter, of course, may not be the case if g is a choice gate, or a sequential gate with a finite outdegree.\n\n\f14\n\nG. JAPARIDZE\n\n\u2022 A resolved selectional gate is true iff so is its resolvent.\n\u2022 No unresolved disjunctive selectional gate is true.\n\u2022 Each unresolved conjunctive selectional gate is true.\nFinally, we say that C is true iff so is its root.\nAs we just did in the above definition, when \u2217 and \u0393 are fixed in a context or are\notherwise irrelevant, we may omit \"w.r.t. (\u2217 , \u0393)\" and just say \"true\".\nDefinition 4.4. Let C be a cirquent, \u2217 an interpretation, and \u0393 a legal run of C. Then \u0393\nis a \u22a4-won run of the game C \u2217 iff C is true w.r.t. (\u2217 , \u0393).\nDefinitions 4.1 and 4.4, together, provide a definition of the game C \u2217 , for any cirquent\nC and interpretation \u2217 . To such a game C \u2217 we may refer as \"the game represented by C\nunder interpretation \u2217 \", or as \"C under interpretation \u2217 \", or - when \u2217 is fixed or irrelevant\n- as \"the game represented by C\". We may also say that \"\u2217 interprets C as C \u2217 \". Similarly\nfor atoms and literals instead of cirquents. Also, in informal contexts we may identify a\ncirquent C or a literal L with a (the) game represented by it, and write C or L where,\nstrictly speaking, C \u2217 or L\u2217 is meant. These and similar terminological conventions apply\nnot only to the present section, but the rest of the paper as well.\nWe now need to generalize the definition of validity given in the previous section to\ncirquents in the sense of the present section. As it turns out, such a generalization can be\nmade in two, equally natural, ways:\nDefinition 4.5. Let C be a cirquent in the sense of the present or any of the subsequent\nsections. We say that:\nmedskip\n1. C is weakly valid iff, for any interpretation \u2217 , there is an HPM M such that M\nwins the game C \u2217 .\n2. C is strongly valid iff there is an HPM M such that, for any interpretation \u2217 , M\nwins the game C \u2217 .\nWhen M and C satisfy the second clause of the above definition, we say that M\nis a uniform solution for C. Intuitively, a uniform solution M for a cirquent C is an\ninterpretation-independent winning strategy: since the \"intended\" or \"actual\" interpretation \u2217 is not visible to the machine, M has to play in some standard, uniform way that\nwould be successful for any possible interpretation of C. To put it in other words, a uniform\nsolution is a purely logical solution, which is based only on the form of a cirquent rather\nthan any extra-logical meaning (interpretation) we have or could have associated with it.\nIt is obvious that for cirquents of the previous section, the weak and strong forms of\nvalidity coincide with what we simply called \"validity\" there. In general, however, not every\nweakly valid cirquent would also be strongly valid. A simplest example of such a weakly\nvalid cirquent is \u00acp \u2294 p.8 Under any interpretation \u2217 , the game represented by this cirquent\nis won by one of the two HPMs M1 or M2 , where M1 is the machine that selects the\nleft disjunct and rests, while M2 is the machine that selects the right disjunct and rests.\nHowever, which of these two machines wins the game depends on whether \u2217 interprets p as \u22a5\n8If, however, we do not limit our considerations to perfect interpretations (see the footnote on page 9)\n\nand allow all interpretations in the definition of weak validity, this cirquent will no longer be weakly valid.\nIn fact, for all well studied fragments of CoL, when interpretations are not required to be perfect, the weak\nand the strong versions of validity have been shown to yield the same classes of formulas. Strong validity in\nthe CoL literature is usually referred to as uniform validity, and weak validity as (simply) validity.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n15\n\nor \u22a4. In general, there is no one machine that wins the game for any possible interpretation.\nThat is, the cirquent \u00acp \u2294 p has no uniform solution, and thus it is not strongly valid.\nWhich of the two versions of validity is more interesting depends on the motivational\nstandpoint. Weak validity tells us what can be computed in principle. So, a computabilitytheoretician would focus on this concept. On the other hand, it is strong rather than weak\nvalidity that would be of interest in all application areas of CoL. There we want a logic on\nwhich a universal problem-solving machine can be based. Such a machine would or should\nbe able to solve problems represented by logical expressions without any specific knowledge\nof the meanings of their atoms, i.e. without knowledge of the actual interpretation, which\nmay vary from situation to situation or from application to application. Strong validity is\nexactly what fits the bill in this case. Throughout this paper, our primary focus will be on\nstrong rather than weak validity.\nTo appreciate the difference between the parallel and choice groups of gates or connectives, let us compare the two cirquents of Figure 3.\n\u00acp(1) p(1)\n\n\u00acp(2) p(2)\n\n\u2745\n\u2745\n\u2228\u2766\n\n\u00acp(3) p(3)\n\n\u2745\n\u2745\n\u2745\n\u2745\n\u2228\u2766\n\u2228\u2766\n\u2718\n\u2718\n\u2718\n\u271f\n\u2718\n...\n\u2718 \u272d\u272d\n\u271f\n\u2718\u272d\n\u272d \u272d\n\u2718\u272d\n\u2718\u272d\n\u2718\u272d\n\u271f\u271f\n\u2718\n\u272d\n\u2718\u272d\n\u271f\n\u2718\u272d\n\u272d\n\u2718\u272d\n\u271f\n\u2227\u2766\n\n\u2227x\n\n\u0001\n\u00acp(x) \u2228 p(x)\n\n\u00acp(1) p(1)\n\n\u00acp(2) p(2)\n\n\u00acp(3) p(3)\n\n\u2745\n\u2745\n\u2294\u2766\n\n\u2745\n\u2745\n\u2745\n\u2745\n\u2294\u2766\n\u2294\u2766\n\u2718\n\u2718\n\u2718\n\u271f\n\u2718\n...\n\u2718 \u272d\u272d\n\u271f\n\u2718\u272d\n\u272d \u272d\n\u2718\u272d\n\u2718\u272d\n\u2718\u272d\n\u271f\u271f\n\u2718\n\u272d\n\u2718\u272d\n\u271f\n\u2718\u272d\n\u272d\n\u2718\u272d\n\u271f\n\u2293\u2766\n\n\u2293x\n\n\u0001\n\u00acp(x) \u2294 p(x)\n\nFigure 3: Parallel versus choice gates\nThe game represented by the left cirquent of Figure 3 is elementary, where no moves can\nor should be made by either player. It is also easy to see that this game (the only legal\nrun hi of it, that is) is automatically won by \u22a4, no matter what interpretation \u2217 is applied,\nso, it is both weakly and strongly valid. On the other hand, the game represented by the\nright cirquent of the same figure is not elementary. And it is neither strongly valid nor\nweakly valid. A legal move by \u22a5 in this game consists in selecting one of the infinitely\nmany outgoing edges (and hence children) of the\u0001 root, intuitively corresponding to choosing\na value for x in the formula \u2293 x \u00acp(x) \u2294 p(x) . And a(ny) legal move by \u22a4 consists in\nselecting one of the two outgoing edges (and hence children) of one of the \u2294-gates. Making\nmore than one selection in the same choice (unlike toggling or sequential) gate is not allowed,\nso that a selection automatically also is the resolvent of the gate. The overall game is won\nby \u22a4 iff either \u22a5 failed to make a selection in the root, or else, where i is the outgoing edge\nof the root selected by \u22a5 and ai is the corresponding (ith, that is) child of the root, either\n(1) \u22a4 has selected the left outgoing edge of ai and \u00acp(i) is true, or (2) \u22a4 has selected the\nright outgoing edge of ai and p(i) is true. There are no conditions on when the available\nmoves should be made, and generally they can be made by either player at any time and in\nany order. So, in the present example, \u22a4 can legally make selections in several or even all\n\u2294-gates. But, of course, a reasonable strategy for \u22a4 is to first wait till \u22a5 resolves the root\n(otherwise \u22a4 wins), and then focus only on the resolvent of the root (what happens in the\nother \u2294-gates no longer matters), trying to select the true child of it.\n\n\f16\n\nG. JAPARIDZE\n\nFrom the above explanation it should be clear that the right cirquent of Figure 3\nexpresses the problem of deciding (in the traditional sense) the predicate p(x). That is,\nunder any given interpretation \u2217 , the game represented \u0001by that cirquent has an algorithmic\n\u2217\nwinning strategy by \u22a4 if and only if the predicate p(x) - which we simply write as p(x)\n- is decidable. As not all predicates are decidable, the cirquent is not weakly valid, let\nalone being strongly valid.\nTo get a feel for sequential and toggling gates, let us look at Figure 4.\n\u00acp(1) p(1)\n\n\u00acp(2) p(2)\n\n\u2745\n\u2745\n\u25bd\u2766\n\n\u00acp(3) p(3)\n\n\u2745\n\u2745\n\u2745\n\u2745\n\u25bd\u2766\n\u25bd\u2766\n\u2718\n\u2718\n\u271f\n\u2718\n\u2718 \u272d\n...\n\u2718\u272d\n\u2718\u272d\n\u272d\u272d\n\u271f\u271f\u2718\u2718\u272d\n\u271f\n\u272d\n\u2718\n\u272d\n\u2718\n\u272d\n\u271f\n\u2718\u272d\n\u2718\u272d\n\u271f\n\u272d\n\u2718\u272d\n\u2293\u2766\n\n\u2293x\n\n\u0001\n\u00acp(x) \u25bd p(x)\n\n\u00acp(1) p(1)\n\n\u00acp(2) p(2)\n\n\u00acp(3) p(3)\n\n\u2745\n\u2745\n\u2745\n\u2745\n\u2228\u2766\n\u2228\u2766\n\u2718\n\u2718\n\u271f\n\u2718\n\u2718 \u272d\n...\n\u2718\u272d\n\u2718\u272d\n\u272d \u272d\n\u271f\u271f\u2718\u2718\u272d\n\u271f\n\u272d\n\u2718\n\u272d\n\u2718\n\u272d\n\u271f\n\u2718\u272d\n\u2718\u272d\n\u271f\n\u272d\n\u2718\u272d\n\u2293\u2766\n\n\u2745\n\u2745\n\u2228\u2766\n\n\u2293x\n\n\u0001\n\u00acp(x) \u2228 p(x)\n\nFigure 4: Sequential versus toggling gates\nThe cirquents of Figure 4 look similar to the right cirquent of Figure 3. And the latter, as\nwe know, represents the problem of deciding p(x). Then what are the problems represented\nby the cirquents of Figure 4?\nThe left cirquent of Figure 4 represents the problem of semideciding p(x). That is,\nunder any given interpretation, the game represented by this cirquent is computable if and\nonly if the predicate p(x) is semidecidable (recursively enumerable). Indeed, suppose p(x)\nis semidecidable. Then an algorithmic winning strategy for the game represented by the\ncirquent goes like this. Wait till the environment selects the ith child ai of the root for some\ni. Then select the left child of ai , after which start looking for a certificate of the truth of\np(i). If and when such a certificate is found, select the right child of ai , and rest your case.\nIt is obvious that this strategy indeed wins. For the opposite direction, suppose M is an\nHPM that wins the game represented by the cirquent. Then a semidecision procedure for\nthe predicate p(x) goes like this. After receiving an input i, simulate the work of M in the\nscenario where, at the beginning of the play, the environment selected the ith child ai of the\nroot. If and when you see in this simulation that M selected the right child of ai , accept\nthe input.\nAs for the right cirquent of Figure 4, it also represents a decision-style problem, which\nis further weaker than the problem of semideciding p(x). This problem is known in the\nliterature as recursive approximation (cf. [3], Definition 8.3.9). Recursively approximating\np(x) means telling whether p(x) is true or not, but doing so in the same style as semideciding does in negative cases: by correctly saying \"Yes\" or \"No\" at some point (after perhaps\ntaking back previous answers several times) and never reconsidering this answer afterwards.\nObserve that semideciding p(x) can be seen as always saying \"No\" at the beginning and\nthen, if this answer is incorrect, changing it to \"Yes\" at some later time; so, when the answer is negative, this will be expressed by saying \"No\" and never taking back this answer,\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n17\n\nyet without ever indicating that the answer is final and will not change.9 Thus, the difference between semideciding and recursively approximating is that, unlike a semidecision\nprocedure, a recursive approximation procedure can reconsider both negative and positive\nanswers, and do so several times rather than only once. In perhaps more familiar terms, according to Shoenfield's Limit Lemma (Cf. [3], Lemma 8.3.12), a predicate p(x) is recursively\napproximable (the problem of its recursive approximation has an algorithmic solution) iff\np(x) is of arithmetical complexity \u22062 , i.e., both p(x) and its negation can be written in the\nform \u2203 z \u2200 y s(z, y, x), where s(z, y, x) is a decidable predicate.\nWe could go on and on illustrating how our formalism - even at the formula level -\nmakes it possible to express various known and unknown natural and interesting properties,\nrelations and operations on predicates or games as generalized predicates, but this can\ntake us too far. Plenty of examples and discussions in that style can be found in, say,\n[12, 23, 24, 27]. Here we only want to point out the difference between our treatment\nof \u2228, \u2227 (including quantifiers as infinite versions of \u2228, \u2227) and the more traditional gamesemantical approaches, most notably that of Hintikka's [4] game-theoretic semantics. The\nlatter essentially treats \u2228, \u2227 as we treat \u2294, \u2293 - namely, associates \u22a4's moves/choices with \u2228\nand \u22a5's moves/choices with \u2227. Computability logic, on the other hand, in the style used by\nBlass [2] for the multiplicatives of linear logic, treats A\u2228B and A\u2227B as parallel combinations\nof games: these are simultaneous plays on \"two boards\" (within the two components). In\norder to win A \u2227 B, \u22a4 needs to win in both components, while in order to win A \u2228 B, it\nis sufficient for \u22a4 to win in just one component. No choice between A and B is expected\nto be made at any time by either player. Note that otherwise strong validity would not at\nall be an interesting concept: there would be no strongly valid cirquents except for some\npathological cases such as the cirquent whose root is a childless conjunctive gate.\nAnother crucial difference between our approach and that of Hintikka, as well as the\napproach of Blass, is that we insist on the effectiveness of strategies while the latter allow\nany strategies. It is not hard to see that, if we allowed any (rather than only algorithmic)\nstrategies, the system of our gates would semantically collapse to merely the parallel group.\nThat is, a cirquent C (under whatever interpretation) would have a winning strategy by \u22a4\nif and only if C \u2032 does, where C \u2032 is the result of replacing in C every disjunctive selectional\ngate by \u2228 and every conjunctive selectional gate by \u2227.\nAnyway, an important issue for the present paper is that of the advantages of cirquents\nover formulas. As we remember, finite cirquents without selectional gates are more efficient\ntools of expression than formulas of classical logic are, but otherwise their expressive power\nis the same as that of formulas. How about finite cirquents in the more general sense of this\nsection - ones containing selectional gates? In this case, finite (let alone infinite) cirquents\nare not only more efficient but also more expressive than formulas. To get some insights,\nlet us look at Figure 5.\n9Unless, of course, the procedure halts by good luck. Halting without saying \"Yes\" can then be seen as\n\nan explicit indication that the original answer \"No\" was final.\n\n\f18\n\nG. JAPARIDZE\n\np\n\u00acp\n\nq\n\n\u2745\n\u2745\n\u2294\u2766\n\n\u2745\n\u2745\n\np\n\np\n\nq\n\n\u2745\n\u2745\n\u2294\u2766 \u00acq\n\n\u2745\n\u2745\n\u2228\u2766\n\u25d7\u25d7\n\u2711\n\u2711\n\u25d7\n\u2711\n\u25d7\u2711\n\u2227\u2766\n\n\u2228\u2766\n\n\u0001\n\u0001\n\u00acp \u2228 (p \u2294 q) \u2227 (p \u2294 q) \u2228 \u00acq\n\n\u00acp\n\nq\n\n\u2745\n\u2745\n\u00acq\n\u2294\u2766\n\u270f PP\n\u270f\nP\n\u270f\n\u2745\nP\n\u2745\u270f\n\u2228\u2766\n\u2228\u2766\n\u25d7\u25d7\n\u2711\n\u2711\n\u25d7\n\u2711\n\u25d7\u2711\n\u2227\u2766\n\nNo formula\n\nFigure 5: Unshared versus shared gates\nOn the left of Figure 5 we see a tree-like cirquent obtained from the non-tree-like cirquent\non the right by duplicating and separating shared descendants in the same style as we\nobtained the left cirquent of Figure 1 from the right cirquent. The two cirquents of Figure\n5, however, are not extensionally identical - after all, every legal run of the right cirquent\ncontains at most one move while legal runs of the left cirquent may contain two moves. The\ntwo cirquents are different in a much stronger sense than extensional non-identity though.\nA machine that selects the left outgoing edge of the left \u2294-gate and the right outgoing edge\nof the right \u2294-gate wins the game represented by the left cirquent of Figure 5 under any\ninterpretation, so that the cirquent is strongly valid. On the other hand, the right cirquent\nof Figure 5 is obviously not strongly valid. Morally, the difference between the two cirquents\nis that, in the right cirquent, unlike the left cirquent, the subcirquent (\"resource\") p \u2294 q is\nshared between the two \u2227-conjuncted parents. Sharing means that only one resolution can\nbe made in the \u2294-gate - a resolution that \"works well\" for both parents. There is no such\nresolution though, because the two parents \"want\" two different choices of a \u2294-disjunct.\nIn contrast, in the left cirquent, both of these conflicting \"desires\" can be satisfied as each\nparent has its own \u2294-child, so that there is no need to coordinate resolutions.\nIn layman's terms, a shared resource (subcirquent) can be explained using the following\nmetaphor. Imagine Victor and his wife Peggy own a joint bank account, with a balance of $\n20,000, reserved for family needs. This resource can be seen as a shared choice combination\nof truck, furniture, and anything of family use that $20,000 can buy.10 However, if Victor\nprefers a truck while Peggy prefers furniture (and both cost $20,000), then they will have\nto sit down and decide together whether furniture is more important for the family or a\ntruck, as their budget does not allow to get both. The situation would be very different\nif both Victor and Peggy had their own accounts, each worth $20,000. After all, the total\nbalance in this case would be $40,000 rather than $20,000.\nAs we saw, the right cirquent of Figure 5 cannot be adequately translated into a formula\nusing the standard way of turning non-trees into trees. However, using some non-standard\nand creative ways, a formula which is extensionally identical to that cirquent can still be\nfound. For instance, one can easily see that (p \u2294 q) \u2228 (\u00acp \u2227 \u00acq) is such a formula (as long\nas its \u2294-gate is given the same ID as the ID of the original cirquent's \u2294-gate, of course).\nWell, we just got lucky in this particular case. \"Luck\" would not have been on our side if\nthe cirquent under question was slightly more evolved, such as the one of Figure 6.\n10If Victor and Peggy may change their mind several times, and the sellers' return policies are flexible\nenough, then this is a toggling combination rather than a choice one.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\np1\n\np2\n\np3\n\np4\n\np5\n\n19\n\np6\n\n\u2745\n\u2745\n\u2745\n\u2745\n\u2745\n\u2745\n\u2766\n\u2766\n\u2294\u2766\n\u2294\n\u2775 \u2775\u2725\n\u2725\u2294\n\u2725 \u2775 \u2775\u2725\n\u2725\n\u2725\n\u2725\n\u2775\n\u2775\n\u2725\n\u2775\n\u2775\n\u2725\n\u2725\n\u2775\n\u2775\u2725\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2775 \u2775\u2775\n\u2725\n\u2725\n\u2725\n\u2725\n\u2775\u2775\u2725\u2725\n\u2228\u2766\n\nFigure 6: A more evolved example of sharing\n\n5. Clustering selectional gates\nWe now further generalize cirquents by adding an extra parameter to them, called clustering (for selectional gates). The latter is nothing but a partition of the set of all selectional\ngates into subsets, called clusters, satisfying the condition that all gates within any given\ncluster have the same label (all are \u2294-gates, or all are \u2227 -gates, or . . . ) and the same outdegree. Due to this condition, we can talk about the outdegree of a cluster meaning the\ncommon outdegree of its elements, or the type of a cluster meaning the common type (label) of its elements. An additional condition that we require to be satisfied by all cirquents\nis that the question on whether any two given selectional gates are in the same cluster be\ndecidable.\nJust like nodes do, each cluster also has its own ID. For clarity, we assume that the ID\nof a cluster is the same as the smallest of the IDs of the elements of the cluster. The extended\nID of a selectional gate is the expression nk , where n is the ID of the gate and the subscript k\nis the ID of the cluster to which the gate belongs. When representing cirquents graphically,\none could require to show the extended ID of each selectional gate and (just) the ID of any\nother node. More often, however, we draw cirquents in a lazy yet unambiguous way, where\nonly cluster IDs are indicated; furthermore, such IDs can be (though not always will be)\nomitted for singleton clusters. Figure 7 shows the same cirquent, on the left represented\nfully and on the right represented in a lazy way, with the identical cluster ID \"7\" attached\nto two \u2294-gates indicating that they are in the same cluster, while the absence of a cluster\nID for the middle \u2294-gate indicating that it is in a different, singleton cluster (and so would\nbe any other selectional gate if drawn without a cluster ID). Thus, altogether there are two\nclusters here, one - cluster 8 - containing gate 8, and the other - cluster 7 containing\ngates 7 and 9.\n\n\f20\n\nG. JAPARIDZE\n\n1\np1\n\n2\np2\n\n3\np3\n\n4\np4\n\n5\np5\n\n6\np6\n\np1\n\np2\n\np3\n\np4\n\np5\n\np6\n\n\u2745\n\u2745\n\u2745\n\u2745\n\u2294\u2766\n\u2294\u27667\n\u274d\n\u271f\n\u271f\n\u274d\n\u274d\u274d\n\u271f\u271f\n\u271f\n\u274d\n\u2227\u2766\n\u2227\u2766\n\u274d\n\u271f\n\u271f\n\u274d\u274d\n\u271f\u271f\n\u274d\u274d\u271f\u271f\n\u2228\u2766\n\n\u2745\n\u2745\n\u2294\u2766\n\n\u2745\n\u2745\n\n\u2745\n\u2745\n\u2745\n\u2745\n\u2294\u2766\n\u2294\u276697\n\u274d\n\u271f\n\u271f 88 \u274d\n\u274d\u274d\n\u271f\u271f\n\u271f\n\u274d\n\u2766\n\u2227\u276611\n10 \u2227\u274d\n\u274d\n\u271f\n\u274d\u274d\n\u271f\n12 \u271f\u271f\n\u274d\u274d\n\u271f\n\u2228\u2766\n\n77 \u2294\u2766\n\n7\n\nFigure 7: A cirquent with clustered selectional gates\nIt may be helpful for one's intuition to think of each cluster as a single gate-style physical\ndevice rather than a collection of individual gates. Namely, a cluster consisting of n gates\nof outdegree m, as a single device, would have n outputs and m n-tuples of inputs. Figure\n8 depicts this new kind of a \"gate\" for the case when n = 3, m = 2 and the type of the\ncluster is \u2294.\ninputs\n\ninputs\n\n\u2744\nt \u2744\nt t\u2744\na1 b 1 c1\n\n\u2294\n\n\u2744\nt \u2744\nt t\u2744\na2 b 2 c2\n\na0 b 0 c0\nt t t\n\u2744 \u2744 \u2744\n\noutputs\nFigure 8: Clusters as generalized gates\nThe device shown in Figure 8 should be thought of as a switch that can be set to one of the\npositions 1 or 2 (otherwise no signals will pass through it). Setting it to 1 simultaneously\nconnects the three input lines a1 , b1 and c1 to the output lines a0 , b0 and c0 , respectively\n(the three lines are parallel, isolated from each other, so that no signal can jump from one\nline to another). Similarly, setting the switch to 2 connects a2 , b2 and c2 to a0 , b0 and c0 ,\nrespectively. This is thus an \"either (a1 , b1 , c1 ) or (a2 , b2 , c2 )\" kind of a switch; combinations\nsuch as, say, (a1 , b2 , c1 ), are not available.\nFigure 9 shows the cirquent of Figure 7 with its clusters re-drawn in the style of Figure\n8.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\np1 p5\nr\n\np2 p6\n\nr\n\n\u2294\n\nr\n\nr\n\np3\nr\n\n21\n\np4\n\n\u2294\n\nr\n\nr\u2775\u2775\nr\n\u2775\u2775\u2775\u270f\u2718\u2718\u2718\n\u270f\u2775\u2775\u2775\n\u270f\n\u2775\u2775\n\u270f\n\u270f\u270f\n\u270f\n\u271f\n\u270f\n\u2227\u2766\n\u2227\u2766\n\u274d\n\u274d\n\u271f\u271f\n\u274d\u274d\n\u271f\n\u271f\n\u274d\u271f\n\u2228\u2766\nr\n\nFigure 9: An alternative representation of the cirquent of Figure 7\nRepresenting clusters in the way we have just done illustrates that they are nothing but\ngeneralized gates. In fact, this is a very natural generalization. Namely, a gate in the\nordinary sense is the special case of this general sort of a gate where the number of output\nlines (as well as input lines in each group of inputs) equals 1. Technically, however, we\nprefer to continue seeing clusters as sets of ordinary gates as they were officially defined at\nthe beginning of this section. So, drawings in the style of Figures 8 or 9 will never reemerge\nin this paper, and whatever was said about clusters as individual \"gates\" of a new type can\nbe safely forgotten.\nCirquents of the previous section should be viewed as special cases of cirquents in the\nnew sense of this section. Namely, they are the cases where each selectional gate forms its\nown, single-element cluster. With this view, the semantical concepts that we reintroduce\nin this section conservatively generalize those of the previous section.\nThe definition of a legal run of the game represented by a cirquent C is the same as\nbefore (Definition 4.1), with the difference that now moves are made within clusters rather\nthan individual gates. That is, each move of a legal run of C looks like c.i, where c is the ID\nof a cluster (rather than of a gate), and i is a positive integer not exceeding the outdegree\nof that cluster. The intuitive meaning of such a move c.i is selecting the ith outgoing edge\n(together with the corresponding child) simultaneously in each gate belonging to cluster c.\nAll other conditions on the legality of runs remain literally the same as before. Anyway, let\nus not be lazy to fully (re)produce such a definition:\nDefinition 5.1. Let C be a cirquent, \u2217 an interpretation, and \u03a6 a position. \u03a6 is a legal\nposition of the game C \u2217 iff, with a \"cluster\" below meaning a cluster of C, the following\nconditions are satisfied:\n(1) Each labmove of \u03a6 has one of the following forms:\n(a) \u22a4c.i, where c is a \u2228-, \u25bd- or \u2294-cluster and i is a positive integer not exceeding the\noutdegree of c;\n(b) \u22a5c.i, where c is a \u2227-, \u25b3- or \u2293-cluster and i is a positive integer not exceeding the\noutdegree of c.\n(2) Whenever c is a choice cluster, \u03a6 contains at most one occurrence of a labmove of the\nform \u2118c.i.\n(3) Whenever c is a sequential cluster and \u03a6 is of the form h. . . , \u2118c.i, . . . , \u2118c.j, . . .i, we have\ni < j.\n\n\f22\n\nG. JAPARIDZE\n\nSo, for instance, h\u22a48.1, \u22a47.2i is a legal run of the cirquent of Figure 7, but h\u22a48.1, \u22a49.2i\nis not, because 9 is (a gate ID but) not a cluster ID. To summarize once again, selections\n(moves) in individual gates are no longer available. Rather, they should be made in clusters.\nDefinition 5.2. In the context of a given cirquent C and a legal run \u0393 of C, we will say\nthat a selectional gate g of a cluster c is unresolved iff either no moves of the form c.j have\nbeen made in \u0393, or infinitely many such moves have been made. Otherwise g is resolved\nand, where c.i is the last move of the form c.j made in \u0393, the child pointed at by the ith\noutgoing edge of g is said to be the resolvent of g.\nWith the terms \"unresolved\", \"resolved\" and \"resolvent\" conservatively redefined this\nway, the definition of truth for a cirquent and its nodes is literally the same11 in our present\ncase as in the case of the cirquents of the previous section (Definition 4.3), so we do not\nreproduce it here. The same applies to the definition of the Wn components of the games\nrepresented by cirquents (Definition 4.4).\nLet us look at the game represented by the cirquents of Figure 7 once again. The\nmeaning of the move \"7.2\" in this game is selecting outgoing edge #2 in both gates of\ncluster 7. Intuitively, the effect of such a move is connecting gate 10 directly to node 2 and\ngate 11 directly to node 6. Thus, the move \"7.2\" can be seen as a choice (choice #2) shared\nbetween gates 10 and 11; that shared choice, however, yields different, unshared results for\nthe two gates: result 2 for gate 10 while result 6 for gate 11. This sort of sharing is very\ndifferent from the sort of sharing represented by gate 8: the effect of the move \"8.1\" is\nsharing both the choice #1 as well as the result 3 of that choice.\nBack to the world of Victor and Peggy, imagine they are in their family car on a road\nbetween two cities A and B. Victor likes sports but never goes to theaters. Peggy likes\ntheaters but never attends games. There is a basketball game and a ballet show tonight in\ncity A. And there is a football game and an opera show in city B. The shared choice/move\nin this situation is a choice between \"drive to A\" and \"drive to B\" (they only have one car!).\nThe outcomes of either choice, however, are not shared. For instance, the outcome of the\nchoice \"drive to A\" is \"see the basketball match\" for Victor while \"see the ballet\" for Peggy.\nVictor and Peggy can negotiate and decide between the two pairs (Basketball, Ballet) or\n(Football, Opera). But the pairs (Basketball, Opera) and (Football, Ballet) are not available.\nAs for the stronger type of sharing corresponding to the middle \u2294-gate of Figure 7, it\ncan be explained by the following modification of the situation: Both Victor and Peggy are\nfond of Impressionism. There is a Monet exhibition in city A, and a Pissarro exhibition in\ncity B. The action/choice - driving to A or driving to B - is again shared. But now so\nis the corresponding outcome \"see Monet's paintings\" or \"see Pissarro's paintings\".\nWhile we could continue elaborating on independent philosophical and mathematical/technical motivations for introducing clustering, here we just want to point out the very\ndirect connections of our approach to the already well motivated IF (independence-friendly)\nlogic. We assume that the reader is familiar with the basics of the latter, or else he or she\nmay take a quick look at the concise yet complete (for our purposes) overview of the subject\ngiven in [35]. It should be noted that we use the term \"IF logic\" in a generic sense, making\nno terminological distinction between Hintikka and Sandu's [6] original version of IF logic\nand Hodges's [7] generalization of it termed in [8] slash logic. In fact, when talking about\nthe (\"traditional\") syntax or semantics of IF logic, what we have in mind are those of slash\n11Unlike Definition 5.1 which, at least, changed the word \"gate\" to the word \"cluster\" when reproducing\n\nthe corresponding Definition 4.1.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n23\n\nlogic. It is assumed that all formulas of IF logic are written in negation normal form, and\nthat different occurrences of quantifiers in them always bind different variables. As pointed\nout in Section 3.3 of [35], \"in the literature the interest almost always pertains to the truth\nof a sentence\" (as opposed to falsity which, in IF logic, is not the same as \"not true\"). And\nit is known that slashing universal quantifiers or conjunctions has no effect on the truth\n(as opposed to falsity) status of formulas. Hence, in this section, we further assume that\nonly existential quantifiers and disjunctions are slashed in the formulas of IF logic. Finally,\nwithout much (if any) loss of generality, we assume that the semantics of IF logic exclusively\ndeals with models with countable domains; namely, such a domain is always {1, 2, 3, . . .} or\nsome nonempty finite initial portion of it.\nComputability logic insists on algorithmicity of \u22a4's strategies, while IF logic, in its\ngame semantics, allows any strategies. Let us, for now, consider the version of IF logic\nwhich differs from its canonical version only in that it, like CoL, requires \u22a4's (which there\nis usually called \u2203 -Player, or Verifier, or Eloise) strategies to be effective, while imposing\nno restrictions on \u22a5's (\u2200 -Player's, Falsifier's, Abelard's) strategies. Call this version of IF\nlogic effective IF logic.\nRemember that the outgoing edges of each node of a cirquent come in a fixed left-toright order: edge #1, edge #2, edge #3, etc. Let us call these numbers 1, 2, 3, etc. the\norder numbers of the corresponding edges.\nWe now claim that the fragment of our cirquent logic where cirquents are allowed to\nhave only two - \u2227 and \u2294 - sorts of gates is sufficient to cover effective IF logic, and far\nbeyond. A verification of this claim - perhaps at the philosophical rather than technical\nlevel - is left to the reader.\nNamely, each formula E of effective IF logic can be understood as the cirquent obtained\nfrom it through performing the following operations:\nDescription 5.3.\n(1) Ignoring slashes, write E in the form of a tree-like cirquent, understanding \u2200 as a\n\"long\" \u2227-conjunction and \u2203 as a \"long\" \u2228-disjunction. This way, each occurrence O\nof a quantifier, conjunction or disjunction gives rise to one (if O is not in the scope\nof a quantifier) or many (if O is in the scope of a quantifier) gates. We say that each\nsuch gate, as well as each outgoing edge of it, originates from O. Also, since we\nassume that different occurrences of quantifiers in IF formulas always bind different\nvariables, instead of saying \". . . originates from the occurrence of \u2200 y (or \u2203 y)\" we can\nunambiguously simply say \". . . originates from y\".\n(2) Change the label of each \u2228-gate to \u2294.\n(3) Cluster the disjunctive gates so that, any two such gates a and b belong to the same\ncluster if and only if they originate from the same occurrence of \u2203 x/y1 , . . . , yn or\n\u2228/y1 , . . . , yn in E, and the following condition is satisfied:\n\u2022 Let ea1 , . . . , eak and eb1 , . . . , ebk be the paths (sequences of edges) from the root of the\ntree to a and b, respectively. Then, for any i \u2208 {1, . . . , k}, the order numbers of the\nedges eai and ebi are identical unless these edges originate from one of the variables\ny1 , . . . , yn .\nLet us see an example to visualize how our construction works. A traditional starting point\nof introductory or survey papers on IF logic is the formula\n\n\u2200 x\u2203 y \u2200 z \u2203 t/x,y p(x, y, z, t).\n\n(5.1)\n\n\f24\n\nG. JAPARIDZE\n\nTechnically, its meaning can be expressed by the second-order formula\n\u0001\n\u2203 f \u2203 g\u2200 x\u2200 z p x, f (x), z, g(z) 12\nor the following formula with Henkin's branching quantifiers:\n\n\u2200 x\u2203 y p(x, y, z, t)\n,\n\u2200 z\u2203 t\nwith the shape of the quantifier array indicating that the two quantifier blocks \u2200 x\u2203 y\nand \u2200 z \u2203 t are independent of each other even though, in (5.1), one occurs in the scope\nof the other. We agreed earlier to write \u2227, \u2228 instead of \u2200 , \u2203 . So, we rewrite (5.1) as\n\u2227x\u2228y\u2227z \u2228t/x,y p(x, y, z, t). This formula, however, is not yet adequate. The philosophy\nof IF logic associates the intuitions of finding (rather than just existence) with existential\nquantifiers or disjunctions; and, as we know, it is the operator/gate \u2294 whose precise meaning is actually finding things (rather than \u2228, which is merely about existence of things). So,\n\u2228 should be replaced with \u2294 , and we get the formula \u2227x\u2294 y \u2227z \u2294 t/x,y p(x, y, z, t) which,\nignoring the slash for now, can be seen as a tree-like cirquent in the sense of the previous\nsection. It now remains to account for the slash by adequately clustering the cirquent.\nNamely, the clustering should make sure that, whenever a and b are two upper-level (those\noriginating from t) \u2294-gates such that the paths from the root to them - seen not as sequences of edges but as sequences of the corresponding order numbers - only differ in their\nfirst two elements (the ones originating from x and y, of which t should be independent), a\nand b are in the same cluster. Figure 10 illustrates this arrangement. For compactness considerations, in this figure we have assumed that the universe of discourse (the set over which\nx, y, z, t range) is just {1, 2}; also, we have written p1111 , p1112 , etc. instead of p(1, 1, 1, 1),\np(1, 1, 1, 2), etc.\np1111 p1112 p1121 p1122 p1211 p1212 p1221 p1222 p2111 p2112 p2121 p2122 p2211 p2212 p2221 p2222\n\n\u274f3\u2721\n\u274f4\u2721\n\u274f3\u2721\n\u274f4\u2721\n\u274f3\u2721\n\u274f4\u2721\n\u274f3\u2721\n\u274f4\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u2766\n\u2766\n\u2766\n\u2766\n\u2766\n\u2766\n\u2766\n\u2294\n\u2294\n\u2294\n\u2294\n\u2294\n\u2294\n\u2294\n\u2294\u2766\n\u274d\u274d\n\u271f\n\u274d\n\u271f\n\u274d\n\u271f\n\u274d\n\u271f\n\u274d\u274d\u271f\u271f\n\u274d\u274d\u271f\u271f\n\u274d\u274d\u271f\u271f\n\u274d\u271f\u271f\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2773\n\u2773\u2773\n\u2718\n\u2773\u2773\u2773\n\u2718\n\u2718\n\u2718\n\u2718\n\u2773\u2773 2 \u2718\u2718\n\u2773\u27731\u2718\u2718\u2718\n\u2773\u2718\n\u2294\u2766\n\u2294\u2766\n\u2764\u2764\u2764\u2764\n\u272d\u272d\n\u272d\n\u272d\n\u2764\u2764\u2764\n\u272d\n\u2764\u2764\u2764\u272d\u272d\u272d\u272d\u272d\n\u2227\u2766\n\nFigure 10: Mimicking \u2200 x\u2203 y \u2200 z \u2203 t/x,y p(x, y, z, t) (when the universe is {1, 2})\nTo feel the difference created by clustering, let us consider the interpretation that sends\nthe four atoms p1111 , p1122 , p2212 , p2221 to \u22a4 and sends all other atoms to \u22a5. Then the\ngame represented by the cirquent of Figure 10 cannot be won (by \u22a4). On the other hand,\nit would be winnable if there was no clustering. Further, it is also winnable if clustering\nis made finer (yet not trivial) as done in the cirquent of Figure 11. The latter expresses\nthe \"slightly\" modified form \u2200 x\u2203 y \u2200 z \u2203 t/x p(x, y, z, t) of (5.1), and is won by an HPM that\n12As long as we deal with effective IF logic, one should require here that f and g range over recursive\nfunctions.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n25\n\ngenerates the run\nh\u22a41.1, \u22a43.1, \u22a44.2, \u22a42.2, \u22a45.2, \u22a46.1i\n(or any permutation of the above). Note that the same run is simply not a legal run of the\ncirquent of Figure 10.\np1111 p1112 p1121 p1122 p1211 p1212 p1221 p1222 p2111 p2112 p2121 p2122 p2211 p2212 p2221 p2222\n\n\u274f6\u2721\n\u274f6\u2721\n\u274f5\u2721\n\u274f5\u2721\n\u274f4\u2721\n\u274f4\u2721\n\u274f3\u2721\n\u274f3\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u2766\n\u2766\n\u2766\n\u2766\n\u2766\n\u2766\n\u2766\n\u2294\u2766\n\u2294\n\u2294\n\u2294\n\u2294\n\u2294\n\u2294\n\u2294\n\u274d\n\u274d\u274d\n\u271f\n\u274d\n\u274d\u274d\n\u271f\n\u274d\n\u271f\u271f\n\u271f\n\u274d\n\u271f\u271f\n\u271f\n\u274d\u271f\n\u274d\u271f\n\u274d\u271f\n\u274d\u271f\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2773\u2773\n\u2718\n\u2773\n\u2718\n\u2773\u2773\n\u2718\n\u2773\u2773\u27732\u2718\u2718\u2718\u2718\n\u2773\u2773\u27731\u2718\u2718\u2718\u2718\n\u2294\u2766\n\u2294\u2766\n\u2764\u2764\u2764\n\u272d\u272d\n\u272d\n\u272d\n\u2764\u2764\u2764\u2764\n\u2764\u2764\u2764\u272d\u272d\u272d\u272d\u272d\u272d\n\u2227\u2766\n\nFigure 11: Mimicking \u2200 x\u2203 y \u2200 z \u2203 t/x p(x, y, z, t) (when the universe is {1, 2})\nWhile (\u2227, \u2294)-cirquents allow us to fully capture effective IF logic, they, at the same time,\nare significantly more expressive than the latter is, even if - or, especially if - we limit\nourselves to finite cirquents, and correspondingly limit IF formulas to propositional ones.\nAs mentioned earlier, IF logic has no smooth approach at the purely propositional level,\nand is forced to severely limit the forms of (meaningful) propositional-level formulas as,\nfor instance, done in [33]. In particular, it encounters serious difficulties in allowing independence from conjunctions or disjunctions (rather than quantifiers). These problems are\nautomatically neutralized under our approach. We do not introduce any restrictions whatsoever on the forms of cirquents or allowable clusterings in them; yet, all such expressions\nare semantically meaningful.\nOf course, a penalty for the higher expressive power of cirquents is the awkwardness\nassociated with the necessity to draw graphs instead of writing formulas. But, again,\nvarious syntactic shortcuts can be introduced to make life easier, with recurrence operators,\nquantifiers or the slash notation being among such shortcuts. It should also be remembered\nthat drawing cirquents may be some annoyance for humans (when writing papers) but\nnot for computers (when using logic in their work); the latter, in fact, would much prefer\ncirquents, as they are exponentially more efficient means of expression than formulas are.\nIn any case, a more significant achievement than expressiveness is probably avoiding the\nnecessity to deal with the unplayable and troublemaking imperfect-information games on\nwhich the traditional semantics for IF logic are based. We owe this effect to the fact that\nclustering enforces at the game level what IF logic calls uniformity and tries to enforce at\nthe strategy level. Rather than relying on players' integrity in expecting that they - to\ntheir disadvantage - will conscientiously forget the moves they have already seen but of\nwhich their actions should be independent, clustering simply makes \"cheating\" physically\nimpossible. Perhaps this point is important enough to be repeated in an empasised form:\nWhile IF logic traditionally accounts for independence on the level of strategies (by imposing uniformity conditions on them), our approach does so\ndirectly on the level of game rules: independence is enforced through making\n\n\f26\n\nG. JAPARIDZE\n\n\"dependent\" moves simply impossible to make - such moves are \"physically\" unavailable.\nBut it should be remembered that \"effective IF logic\", while both mathematically and\nphilosophically reasonable, is not at all the same as IF logic in its canonical form.13 So,\na true merger between CoL and IF logic would seemingly require a compromise from one\nof them: either IF logic should adopt the requirement of effectiveness of strategies, or\ncomputability logic should drop this (central to its philosophy) requirement. Probably\nneither camp would be willing to make a compromise.\nFortunately, there is no real need for any compromises. The following section further\ngeneralizes the concept of cirquents in a conservative way. The new cirquents, unlike the\ncirquents of the present section, are powerful enough to express anything that the traditional\n(\"non-effective\") IF logic can. This is achieved through extending the idea of clustering from\nselectional gates to \u2228-gates, yet without associating any moves with such gates or clusters.\n6. Clustering \u2228-gates\nA cirquent in the sense of the present section is the same as one in the sense of the previous\nsection, with the difference that now not only the set of selectional gates is partitioned into\nclusters, but also the set of \u2228-gates (but not the set of \u2227-gates - not yet, at least). The\ncondition on clustering is the same as before: all gates within a given cluster are required\nto have the same type (label) and same outdegree. Cirquents in the sense of the previous\nsection are seen as special cases of cirquents in the present sense, namely, the cases where\nall \u2228-clusters are singletons.\nThe legal positions of the game represented by a cirquent in this new sense are defined\nin literally the same way as before (Definition 5.1). So, clustering \u2228-gates in a cirquent does\nnot affect the set of its legal runs.\nBy a metaselection for a cirquent C we will mean a (not necessarily effective) partial\nfunction f from \u2228-clusters of C to the set of positive integers, such that, for any \u2228-cluster\nc, whenever defined, f (c) does not exceed the outdegree of c.14\nIn the context of a given cirquent C, a legal run \u0393 of C and a metaselection f for\nC, we will say that a \u2228-gate g of a cluster c is unresolved iff f is undefined at c (note\nthat a childless \u2228-gate will always be unresolved). Otherwise g is resolved, and the child\n13The idea of what we here call \"effective IF logic\" can be clearly found in [5], where Hintikka argued that\n\nrestricting \u2203's (\u22a4's) strategies to effective ones could be a formulation of constructivism in the philosophy of\nmathematics. To the present author's best knowledge, however, no subsequent technical attempts have been\nmade to correspondingly reconstruct the semantics of IF logic. The general idea of basing game semantics on\neffective strategies and this way realizing the philosophy of constructivism can be found in the even earlier\nwork [9] by the present author (this paper was later refined and published in the form of [10]). [9, 10] also\nmade the first, \"experimental\" steps towards technically realizing this line of thought. As for CoL, it takes\npride not in putting forward the idea of considering effective strategies (which is so natural that it could\nhardly have escaped the thoughts of anyone working on game semantics), but in making it actually work and\ngenerate non-trivial logics. In contrast, restricting strategies to effective ones within Hintikka's framework\nleaves us with an essentially empty logic: there are no valid (as opposed to true) formulas there other than\ntrivialities such as \u22a4 or p(x) \u2192 \u22a4 (but not p(x) \u2192 p(x): this principle, i.e. \u00acp(x) \u2228 p(x), fails when p(x)\nis undecidable). This is probably one of the reasons why the IF-logic community has remained focused on\nnot-necessarily-effective strategies.\n14An equivalent approach would be letting f be a total function from the set of \u2228-clusters to the set\n{0, 1, 2, 3, . . .} of natural numbers (rather than positive integers); then, instead of saying that f is undefined\nat c, we could simply say that f (c) = 0.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n27\n\nof it pointed at by the f (c)th outgoing edge is said to be the resolvent of g. As for the\nsame-name concepts \"unresolved\", \"resolved\" and \"resolvent\" for selectional gates, they\nare defined literally as before (Definition 5.2). Note that these three concepts depend on\nf but not \u0393 when g is a \u2228-gate, while they depend on \u0393 but not f when g is a selectional\ngate. The function f thus acts as a \"metaextension\" of \u0393. Intuitively, it can be thought of\nas selections in \u2228-clusters made by the guardian angel of \u22a4 in favor of \u22a4 after the actual\nplay took place (rather than during it), even if the latter lasted infinitely long; unlike \u22a4, its\nguardian angel has magic - nonalgorithmic - intellectual powers to make best possible\nselections. Technically, however, selections by the \"angel\", unlike selections made by either\nplayer, are not moves of the game.\nThe following definition refines the earlier definitions of truth by relativizing this concept\n- renamed into metatruth - with respect to a metaselection as an additional parameter.\nDefinition 6.1. Let C be a cirquent, \u2217 an interpretation, \u0393 a legal run of C, and f a\nmetaselection for C. In this context, with \"metatrue\" to be read as \"metatrue w.r.t.\n(\u2217 , \u0393, f )\", we say that:\n\u2022 An L-port is metatrue iff L\u2217 = \u22a4.\n\u2022 A resolved selectional gate is metatrue iff so is its resolvent.\n\u2022 No unresolved disjunctive selectional gate is metatrue.\n\u2022 Each unresolved conjunctive selectional gate is metatrue.\n\u2022 A \u2228-gate is metatrue iff it is resolved and its resolvent is metatrue.\n\u2022 A \u2227-gate is metatrue iff so are all of its children.\nFinally, we say that C is metatrue iff so is its root.\nThe following definition brings us from metatruth back to truth.\nDefinition 6.2. Let C be a cirquent, \u2217 an interpretation, and \u0393 a legal run of C. We say\nthat C is true w.r.t. (\u2217 , \u0393) iff there is a metaselection f for C such that C is metatrue\nw.r.t. (\u2217 , \u0393, f ).\nIt is left to the reader to see why the new concept of truth is a conservative generalization\nof its earlier counterparts. The same applies to the following definition, which completes our\ndefinition of the game C \u2217 represented by any given cirquent C under any given interpretation\n\u2217.\nDefinition 6.3. Let C be a cirquent, \u2217 an interpretation, and \u0393 a legal run of C. Then \u0393\nis a \u22a4-won run of the game C \u2217 iff C is true w.r.t. (\u2217 , \u0393).\nWe now claim that any formula E of (this time ordinary, \"non-effective\") IF logic can\nbe adequately written as a tree-like cirquent C with only \u2228 and \u2227 gates; namely, such a\ncirquent C is obtained from E through applying the steps 1 and 3 of Description 5.3, with\nstep 2 omitted. For any interpretation \u2217 , we will then have C \u2217 = \u22a4 iff E is true (under the\nsame interpretation of atoms) in IF logic. Figure 12 shows an example. As an easy exercise,\nthe reader may want to verify that the cirquent of that figure is \u22a5 under the interpretation\nwhich sends p1111 , p1122 , p2212 , p2221 to \u22a4 and sends all other atoms to \u22a5. Note that this\ncirquent represents an elementary game, unlike its counterpart from Figure 10.\n\n\f28\n\nG. JAPARIDZE\n\np1111 p1112 p1121 p1122 p1211 p1212 p1221 p1222 p2111 p2112 p2121 p2122 p2211 p2212 p2221 p2222\n\n\u274f3\u2721\n\u274f4\u2721\n\u274f3\u2721\n\u274f4\u2721\n\u274f3\u2721\n\u274f4\u2721\n\u274f3\u2721\n\u274f4\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u2766\n\u2766\n\u2766\n\u2766\n\u2766\n\u2766\n\u2766\n\u2228\n\u2228\u2766\n\u2228\n\u2228\n\u2228\n\u2228\n\u2228\n\u2228\n\u274d\n\u271f\n\u274d\n\u271f\n\u274d\n\u271f\n\u274d\u274d\n\u271f\n\u274d\u274d\u271f\u271f\n\u274d\u274d\u271f\u271f\n\u274d\u274d\u271f\u271f\n\u274d\u271f\u271f\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2773\u2773\n\u2718\n\u2773\n\u2718\n\u2773\u2773\n\u2718\n\u2718\n\u2718\n\u2773\u2773\u27732\u2718\u2718\u2718\n\u2773\u2773\u27731\u2718\u2718\u2718\n\u2228\u2766\n\u2228\u2766\n\u2764\u2764\u2764\n\u272d\u272d\n\u272d\n\u272d\n\u2764\u2764\u2764\u2764\n\u272d\n\u2764\u2764\u2764\u272d\u272d\u272d\u272d\u272d\n\u2227\u2766\n\nFigure 12: Representing \u2200 x\u2203 y \u2200 z \u2203 t/x,y p(x, y, z, t) (when the universe is {1, 2})\nJust as for any other claims made in this paper regarding connections to IF logic, we are not\nattempting to provide a proof of our present claim. Such a proof would require reproducing\nand analyzing one of the semantics accepted/recognized in the IF-logic community, which\ncould take us too far - the present paper is on computability logic rather than IF logic\nafter all and, even if a known semantics of IF logic and the corresponding fragment of the\nsemantics of CoL turned out to be not exactly equivalent, a question would arise about\nwhich one is a more adequate materialization of the original philosophy of IF logic.\n7. Clustering all gates; ranking\nOther than the claimed fact that the cirquents of the previous section achieve the full\nexpressive power of IF logic, there are no good reasons to stop at those cirquents. Indeed,\nif we clustered selectional and \u2228-gates, why not do the same with the remaining \u2227 type of\ngates? Naturally, the semantics of clustered \u2227 gates would have to be symmetric to that\nof clustered \u2228-gates. Namely, a universally quantified metaselection h should be associated\nwith them, as we associated an existentially quantified metaselection f with \u2228-clusters in\nthe previous section. Such an h can be thought of as a guardian angel of \u22a5 that makes\nselections in \u2227-clusters in favor of \u22a5 after the game has been played by the two players.\nOne can show that then, no matter how the \u2227-gates are clustered, truth in the sense of the\nprevious section is equivalent to an assertion that sounds like the right side of Definition 6.2\nbut starts with the words \"there is an f such that, for all h,. . . \" instead of just \"there is an\nf such that. . . \". But then the question comes: why this quantification order and not \"for\nall h there is an f such that. . . \", which would obviously yield a different yet meaningful\nconcept of truth?15 Again, there is no good answer, and here we see the need for a yet\nmore general approach that would be flexible enough to handle the semantical concepts\ninduced by either quantification order. This brings us to the idea of introducing one more\nparameter into cirquents, which we call ranking. The latter is an indication of in what order\nselections by the \"guardian angels\" should be made. Furthermore, we allow not just one\nbut several \"guardian angels\" for either player, with each \"angel\" responsible for a certain\nsubset of clusters rather than all clusters of a given type. Then, again, ranking fixes the\norder in which these multiple \"angels\" should make their selections. Let us get down to\nformal definitions to make these intuitions precise and more clear.\n15This predicate of truth, in contrast to the previous one, would depend on how \u2227-gates are clustered\n\nbut not on how \u2228-gates are clustered.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n29\n\nA cirquent in the sense of the present section is the same as one in the sense of the\nprevious section, with the following two changes. Firstly, now the set of all gates (including\n\u2227-gates) is partitioned into clusters, with each cluster, as before, satisfying the condition\nthat all gates in it have the same type and the same outdegree. Secondly, there is an\nadditional parameter called ranking. The latter is a partition of the set of all parallel (\u2228\nand \u2227) clusters into a finite number of subsets, called ranks, arranged in a linear order,\nwith each rank satisfying the condition that all clusters in it have the same type (but not\nnecessarily the same outdegree). A rank containing \u2227-clusters is said to be conjunctive,\nand a rank containing \u2228-clusters disjunctive. Since the ranks are linearly ordered, we can\nrefer to them as the 1st rank, the 2nd rank, etc. or rank 1, rank 2, etc. Also, instead of\n\"cluster c is in the ith rank\", we may say \"c is of (or has) rank i\".\nCirquents in the sense of the previous section are understood as special cases of cirquents\nin the present sense, namely, as cirquents where all \u2227-clusters are singletons of the highest\nrank, and all \u2228-clusters (which are not necessarily singletons) are of the lowest rank. Here\nwe say \"highest rank\" and \"lowest rank\" instead of \"rank 2\" and \"rank 1\" just for safety,\nbecause, if one of the two types of parallel gates is absent, then rank 1 would be both highest\nand lowest; and, if there are no parallel gates at all, the cirquent would not even have rank\n1.\nLet C be a cirquent with k ranks, and let 1 \u2264 i \u2264 k. An i-metaselection for C is\na (not necessarily effective) partial function from the ith rank of C to the set of positive\nintegers, satisfying the condition that, for any given cluster c of the ith rank, whenever fi (c)\nis defined, its value does not exceed the outdegree of c. And a (simply) metaselection for\nC is a k-tuple (f1 , . . . , fk ) where, for each 1 \u2264 i \u2264 k, fi is an i-metaselection for C.\nClustering parallel gates and ranking has no effect on the set of legal runs of the\ngame represented by a cirquent, so the definition of legal positions for cirquents of Section\n5 (Definition 5.1) transfers to the present case without any changes.\nDefinition 7.1. In the context of a given cirquent C with k ranks, a legal run \u0393 of C and a\nmetaselection f~ = (f1 , . . . , fk ) for C, we will say that a \u2228-gate g of a cluster c is unresolved\niff, where i is the rank of c, the function fi is undefined at c. Otherwise g is resolved, and\nthe child of it pointed at by the fi (c)th outgoing edge is said to be the resolvent of g. As\nfor the same-name concepts \"unresolved\", \"resolved\" and \"resolvent\" for selectional gates,\nthey are defined literally as before (Definition 5.2).\nThe following definition of metatruth can be seen to conservatively generalize its predecessor, Definition 6.1:\nDefinition 7.2. Let C be a cirquent, \u2217 an interpretation, \u0393 a legal run of C, and f~ a\nmetaselection for C. In this context, with \"metatrue\" to be read as \"metatrue w.r.t.\n(\u2217 , \u0393, f~)\", we say that:\n\u2022 An L-port is metatrue iff L\u2217 = \u22a4.\n\u2022 A resolved gate (of any of the eight types) is metatrue iff so is its resolvent.\n\u2022 No unresolved disjunctive gate (of any of the four types) is metatrue.\n\u2022 Every unresolved conjunctive gate (of any of the four types) is metatrue.\nFinally, we say that C is metatrue iff so is its root.\nThe following definition brings us from metatruth back to truth. Again, it can be seen\nto conservatively generalize its predecessor, Definition 6.2:\n\n\f30\n\nG. JAPARIDZE\n\nDefinition 7.3. Let C be a cirquent with k ranks,\nof C. We say that C is true w.r.t. (\u2217 , \u0393) iff\n\n\u2217\n\nan interpretation, and \u0393 a legal run\n\nQ1 f1 . . . Qk fk such that C is metatrue w.r.t. (\u2217 , \u0393, (f1 , . . . , fk )).\nHere each Qi fi abbreviates the phrase \"for every i-metaselection fi for C\" if the ith rank\nis conjunctive, and \"there is an i-metaselection fi for C\" if the ith rank is disjunctive.\nWith truth redefined this way, the (remaining) Wn component of the game C \u2217 represented by a cirquent C under an interpretation \u2217 is defined as before. Namely, a legal run\n\u0393 of C \u2217 is considered \u22a4-won iff C is true w.r.t. (\u2217 , \u0393).\nTo understand what we have achieved by introducing ranking and why such a generalization of cirquents was naturally called for, let us, for simplicity, limit our attention to\nselectional-gate-free cirquents. This fragment of our logic can be seen to be sufficient to\ncapture and naturally generalize the conservative extension of IF logic known as extended\nIF logic (cf. [35]). The latter, in addition to what IF logic calls strong negation \u223c, also considers weak negation \u00ac. While \u223cE simply means the result of changing in E each operator\nand atom to its dual (p to \u00acp and vice versa, \u2200 to \u2203 and vice versa, \u2227 to \u2228 and vice versa)\nand hence there is no real need to have \u223c as a primitive, weak negation \u00ac in (extended) IF\nlogic is quite problematic. Namely, the latter does not act like an ordinary operator that\ncan be applied anywhere in a formula; rather, extended IF logic (essentially) only allows \u00ac\nto be applied to entire IF formulas, thus deeming meaningless and illegal expressions such\nas, say, \u2203 u\u00ac\u2200 x\u2203 y \u2200 z \u2203 t/x p(x, y, z, t, u). This is so because the traditional approaches to\nIF logic are not general enough to directly provide a semantics for \u00ac. This odd situation\nmakes it evident that more general approaches are necessary. Our approach can claim to\nbe one that fits the bill.16\nAs noted earlier, the reader is expected to be familiar with the basic concepts and ideas\nof IF logic and, specifically, the two concepts of negation that we are discussing. So, we\nonly explain the present point through particular examples.\nOur earlier assumption was that only existential quantifiers and disjunctions were\nslashed in formulas of non-extended IF logic, as slashing universal quantifiers or conjunctions had no effect on the truth conditions of formulas there. The same is no longer the case\nif one deals with negations though. Accordingly, from now on, we depart from the above\nassumption and allow slashing any operators in what we consider to be legitimate formulas\nof IF logic.\nEarlier we saw how to translate an IF formula E into an equivalent cirquent. Now\nwe conservatively refine that translation method in a way that accounts for the possibility\nthat E contains slashed conjunctions and/or universal quantifiers. Namely, E should be\nunderstood as the cirquent E \u25e6 defined below:\nDescription 7.4. Let E be any formula of (non-extended) IF logic. We define E \u25e6 as the\ncirquent obtained from E through performing the following steps:\n(1) Ignoring slashes, write E in the form of a tree-like cirquent, understanding \u2200 as a\n\"long\" \u2227-conjunction and \u2203 as a \"long\" \u2228-disjunction. This way, each occurrence O\nof a quantifier, conjunction or disjunction gives rise to one (if O is not in the scope\nof a quantifier) or many (if O is in the scope of a quantifier) gates. We say that each\n16It should be noted that there are other approaches closely related to or extending IF logic - namely,\n\nHodges's [7] trump semantics and V\u00e4\u00e4n\u00e4nen's [38] team logic - in which one can form the weak negation of\nany formula. Those approaches are however quite different from ours, and we will not attempt a comparison.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n31\n\nsuch gate, as well as each outgoing edge of it, originates from O. Also, since we\nassume that different occurrences of quantifiers in IF formulas always bind different\nvariables, instead of saying \". . . originates from the occurrence of \u2200 y (or \u2203 y)\" we can\nunambiguously simply say \". . . originates from y\".\n(2) Cluster the gates so that, any two gates a and b belong to the same cluster if and only if\nthey originate from the same occurrence of \u2203 x/y1 , . . . , yn , \u2228/y1 , . . . , yn , \u2200 x/y1 , . . . , yn\nor \u2227/y1 , . . . , yn in E, and the following condition is satisfied:\n\u2022 Let ea1 , . . . , eak and eb1 , . . . , ebk be the paths (sequences of edges) from the root of the\ntree to a and b, respectively. Then, for any i \u2208 {1, . . . , k}, the order numbers of the\nedges eai and ebi are identical unless these edges originate from one of the variables\ny1 , . . . , yn .\n(3) Impose ranking on the resulting cirquent, putting all \u2228-clusters into the lowest rank\nand all \u2227-clusters into the highest rank.\nWe claim that such a translation of IF formulas E to cirquents E \u25e6 is adequate. That is,\nfor any interpretation/model \u2217 , E is true in \u2217 in the sense of IF logic if and only if (E \u25e6 )\u2217 = \u22a4\nin our sense.\nWe further claim that any formula \u00acE of extended IF logic adequately translates into\nthe cirquent (\u00acE)\u25e6 defined below:\nDescription 7.5. Let E be any formula of (non-extended) IF logic. We define (\u00acE)\u25e6 as\nthe cirquent obtained from E through performing the following steps:\n(1) Turn E into E \u25e6 according to Description 7.4.\n(2) Change in E \u25e6 every port label (literal) p to \u00acp and vice versa, and also change every\ngate label \u2228 to \u2227 and vice versa.\nFinally, we claim that any formula \u223cE of IF logic adequately translates into the cirquent\n(\u223cE)\u25e6 defined below:\nDescription 7.6. Let E be any formula of (non-extended) IF logic. We define (\u223cE)\u25e6 as\nthe cirquent obtained from E through performing the following steps:\n(1) Turn E into (\u00acE)\u25e6 according to Description 7.5.\n(2) Swap the ranks in the resulting cirquent. That is, make all elements of the formerly\nlowest rank now belong to the highest rank, and vice versa.\nFigures 13, 14 and 15 illustrate applications of our translations to the IF-logic formula\n\n\u2200 x\u2203 y \u2200 z/x,y \u2203 t/x,y p(x, y, z, t)\nand two forms of its negation. As before, the universe of discourse here is assumed to be\n{1, 2}. For compactness considerations, we have written p1111 , p1112 , etc. instead of \u00acp1111 ,\n\u00acp1112 , etc. To each gate in those figures we have attached an expression of the form nm .\nIt should be understood as an indication that the gate belongs to cluster n, and that such\na cluster n is of rank m.\n\n\f32\n\nG. JAPARIDZE\n\np1111 p1112 p1121 p1122 p1211 p1212 p1221 p1222 p2111 p2112 p2121 p2122 p2211 p2212 p2221 p2222\n\n\u274f 31\u2721\n\u274f 41\u2721\n\u274f 31\u2721\n\u274f 41\u2721\n\u274f 31\u2721\n\u274f 41\u2721\n\u274f 31\u2721\n\u274f 41\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u274d\n\u271f\n\u274d\n\u271f\n\u274d\u274d 62 \u271f\n\u271f\n\u274d\u274d 62 \u271f\n\u271f\n2\n2\n\u274d\u274d6\u271f\u271f\n\u274d\u274d6\u271f\u271f\n\u274d\u271f\n\u274d\u271f\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2773\u2773\n\u2718\n\u2773\n\u2718\n\u2773\u2773\n\u2718\n\u2718\n\u2718\n1\n1\n\u2773\u2773\u27732\u2718\u2718\u2718\n\u2773\u2773\u27731\u2718\u2718\u2718\n\u2228\u2766\n\u2228\u2766\n\u2764\u2764\u2764\n\u272d\u272d\n\u272d\n\u272d\n\u2764\u2764\u2764\u2764\n\u272d\n\u272d\n2\n\u2764\u2764\u27645\u272d\n\u272d\u272d\u272d\n\u2766\n\u2227\n\nFigure 13: \u2200 x\u2203 y \u2200 z/x,y \u2203 t/x,y p(x, y, z, t) (when the universe is {1, 2})\n\np1111 p1112 p1121 p1122 p1211 p1212 p1221 p1222 p2111 p2112 p2121 p2122 p2211 p2212 p2221 p2222\n\n\u274f 31\u2721\n\u274f 41\u2721\n\u274f 31\u2721\n\u274f 41\u2721\n\u274f 31\u2721\n\u274f 41\u2721\n\u274f 31\u2721\n\u274f 41\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u274d\u274d 62 \u271f\n\u274d\u274d 62 \u271f\n\u274d\n\u274d\n\u271f\n\u271f\n\u271f\n\u271f\n2\n2\n\u274d 6 \u271f\n\u274d 6 \u271f\n\u274d\u271f\n\u274d\u271f\n\u274d\u271f\n\u274d\u271f\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2773\n\u2773\n\u2718\n\u2718\n\u2773\u2773\n\u2718\n\u2773\n\u2718\n\u2718\n1\n1\n\u2773\u2773\u27731\u2718\u2718\u2718\n\u2773\u2773\u27732\u2718\u2718\u2718\n\u2227\u2766\n\u2227\u2766\n\u2764\u2764\u2764\n\u272d\u272d\n\u272d\n\u272d\n\u2764\u2764\u2764\u2764\n\u272d\n\u272d\n2\n\u2764\u2764\u27645\u272d\n\u272d\u272d\u272d\n\u2228\u2766\n\nFigure 14: \u00ac\u2200 x\u2203 y \u2200 z/x,y \u2203 t/x,y p(x, y, z, t) (when the universe is {1, 2})\n\np1111 p1112 p1121 p1122 p1211 p1212 p1221 p1222 p2111 p2112 p2121 p2122 p2211 p2212 p2221 p2222\n\n\u274f 32\u2721\n\u274f 42\u2721\n\u274f 32\u2721\n\u274f 42\u2721\n\u274f 32\u2721\n\u274f 42\u2721\n\u274f 32\u2721\n\u274f 42\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u2227\u2766\n\u274d\u274d 61 \u271f\n\u274d\u274d 61 \u271f\n\u274d\n\u274d\n\u271f\n\u271f\n\u274d 61 \u271f\u271f\n\u274d 61 \u271f\u271f\n\u274d\u271f\n\u274d\u271f\n\u274d\u271f\n\u274d\u271f\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2773\n\u2773\n\u2718\n\u2773\u2773\n\u2718\n\u2718\n\u2773\n\u2718\n\u2718\n2\n2\n\u2773\u2773\u27731\u2718\u2718\u2718\n\u2773\u2773\u27732\u2718\u2718\u2718\n\u2766\n\u2227\u2766\n\u272d\u2227\n\u2764\u2764\u2764\n\u272d\n\u272d\n\u2764\u2764\u2764\u2764\n\u272d\u272d\n1\n\u2764\u2764\u27645\u272d\n\u272d\u272d\u272d\u272d\n\u2228\u2766\n\nFigure 15: \u223c\u2200 x\u2203 y \u2200 z/x,y \u2203 t/x,y p(x, y, z, t) (when the universe is {1, 2})\nThe above cirquents are pairwise extensionally non-identical. An interpretation separating\nthe cirquent of Figure 13 from those of Figures 14 and 15 is one that sends all atoms to \u22a4.\nAnd an interpretation separating the cirquent of Figure 14 from the other two cirquents (by\nmaking the former \u22a4 while the latter \u22a5) is the one that sends the four atoms p1111 , p1221 ,\np2112 , p2222 to \u22a4 and sends all other atoms to \u22a5.\nThe cirquent of Figure 13 can be seen to be extensionally identical to the cirquent of\nfigure 12. In general, the same would be the case for any pair of cirquents that syntactically\nrelate to each other in the same way as the cirquents of Figures 13 and 12 do, namely, where\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n33\n\none cirquent is a cirquent with all \u2228-clusters in the lowest rank and all \u2227-clusters in the\nhighest rank, and the other cirquent is the result of ignoring in the first one all \u2227-clusters\nand ignoring ranking, after which it can be understood as a cirquent in the limited sense of\nSection 6.\nThe cirquent of Figure 14 is the exact opposite of the cirquent of Figure 13, in the sense\nthat, under any interpretation \u2217 , one is \u22a4 iff the other is \u22a5. In general, if two cirquents C1\nand C2 syntactically relate to each other as the cirquents of Figures 13 and 14 do, then,\nfor any interpretation \u2217 , we will have C2\u2217 = \u00acC1\u2217 , where \u00ac is computability logic's ordinary\nnegation operation of Definition 2.2. As for the cirquent of Figure 15, it appears to be a\nless natural modification of the cirquent of Figure 13 than the cirquent of Figure 14 is. In\nparticular, it is not clear why we, in the process of transforming the cirquent of figure 13\ninto the cirquent of Figure 15, not only changed the label of each node to its dual, but\nalso swapped the ranks. Furthermore, it would not be clear how to \"swap\" ranks if we had\nmore than two of them. So, in spite of IF logic's tradition to see \u223c as the primary sort of\nnegation and treat the \"ill-behaved\" \u00ac as a second-class citizen, we come to the vision that\nit is \u00ac rather than \u223c that is truly natural and deserves the first-class status.\nDescriptions 7.4 and 7.5 only generate (selectional-gate-free) cirquents with two (in\nnormal cases) or fewer (in pathological cases) ranks, and hence these sorts of cirquents\nare sufficient for capturing extended IF logic. Was there then a reasonable call for also\nconsidering cirquents with greater numbers of ranks? After all, any approach in any area\nof mathematics may find an infinite series of generalizations, and one should simply stop\nsomewhere. This is true but, in the process of generalizing, one should stop only at a natural\npoint where we have a more or less closed (in whatever sense) system. And stopping at\ncirquents with \u2264 2 ranks (what extended IF logic essentially did) would not be such a\nnatural place. For, as noted earlier, the formalism of extended IF logic is not closed under\nits logical operators, and we would be forced to deal with a similar sort of an artificial\nrestriction had we limited our considerations only to cirquents with \u2264 2 ranks.\nTo make the above point more clear, let us extend the syntax of IF logic by requiring\nthat all occurrences of quantifiers, conjunctions and disjunctions be superscripted with\npositive integers, satisfying the following two conditions:\n\u2022 Whenever 1 \u2264 i < j and j is the superscript of some occurrence, so is i.\n\u2022 Whenever i is the superscript of an occurrence of \u2203 or \u2228, the same i is not the superscript\nof an occurrence of \u2200 or \u2227.\nSuch superscripts will be understood as indications of the ranks of the clusters originating\nfrom the corresponding occurrences of operators when turning formulas into cirquents in\nthe style of Description 7.4. That is, clause 3 of Description 7.4 should now (for this new\nsyntax of IF logic) read as follows:\nImpose ranking on the resulting cirquent, putting all clusters originating\nfrom occurrences of i-superscripted operators17 into the ith rank, for any\nsuperscript i occurring in E.\nWe baptize this newly extended version of IF logic as ranked IF logic. Let us call the\nhighest superscript appearing in a formula of ranked IF logic the ranking depth of that\nformula.\nOf course, extended IF logic is the fragment of ranked IF logic limited to formulas of\nranking depth \u2264 2. Namely, each non-negated formula E of IF logic translates into ranked\n17That is, clusters whose gates originate from occurrences of i-superscripted operators.\n\n\f34\n\nG. JAPARIDZE\n\nIF logic as the result F of adding the superscript 1 to each occurrence of \u2203 and \u2228, and\nadding the superscript 2 to each occurrence of \u2200 and \u2227 - well, unless E contains no \u2228 and\n\u2203 , in which case the superscript 1 rather than 2 should be added to the occurrences of \u2200\nand \u2227. Next, for any formula F of ranked IF logic (including the cases when F is obtained\nfrom E as above), \u00acF can be understood as an abbreviation for the result of changing in F\neach occurrence of each literal p to \u00acp and vice versa, each occurrence of \u2227 to \u2228 and vice\nversa, and each occurrence of \u2200 to \u2203 and vice versa, without changing any superscripts in\nthis process.\nWith \u00ac treated as just explained, in contrast with the situation in extended IF logic, \u00ac\ncan meaningfully occur anywhere in an expression of ranked IF logic. For instance, we can\nwrite\n\u2203 u1 \u00ac\u2200 1 x\u2203 2 y \u2200 1 z \u2203 2 t/x p(x, y, z, t, u),\nwhich will be simply understood as an abbreviation of\n\n\u2203 u1 \u2203 1 x\u2200 2 y \u2203 1 z \u2200 2 t/x \u00acp(x, y, z, t, u).\nTo get a further feel for the advantages of ranked IF logic over extended IF logic,\nconsider the formula \u00ac\u2203 x\u2200 y/x \u223c p(x, y, z) of the latter which, in ranked IF logic, will be\nwritten as \u2200 1 x\u2203 2 y/x p(x, y, z). As we are dealing with a legal and hence semantically\nmeaningful expression of extended IF logic, we naturally want to be able to quantify it -\nsay, existentially - over z, and also be able to arbitrarily extend the original independences\n- say, by making both quantifiers independent of \u2203 z and vice versa. Alas, extended IF\nlogic does not permit to apply quantification to a \u00ac-negated compound formula. But ranked\nIF logic does. Namely, with a little analysis, the formula\n\n\u2203 1 z \u2200 2 x/z \u2203 3 y/z,x p(x, y, z)\n\n(7.1)\n\ncan be seen to account for the intuitions that we wanted to capture by \u2203 z-quantifying the\nformula and then making the new and old quantifiers independent of each other.\nFigure 16 shows formula (7.1) as a cirquent, and Figure 17 shows two cirquents obtained\nfrom it by putting both existential quantifiers into the same rank in an attempt to mechanically turn (7.1) into an equivalent formula of ranking depth 2 (a formula of extended IF\nlogic). Either attempt fails. Namely, let \u2020 be the interpretation that sends the two atoms\np111 , p122 to \u22a4 and sends all other atoms to \u22a5. Next, let \u2021 be the interpretation that sends\nthe two atoms p111 , p222 to \u22a4 and sends all other atoms to \u22a5. It can be seen that\n\u0001\u2020\n\u0001\u2020\n\u2203 1 z \u2200 2 x/z \u2203 3 y/z,x p(x, y, z) = \u22a4 whereas \u2203 1 z \u2200 2 x/z \u2203 1 y/z,x p(x, y, z) = \u22a5,\nand\n\u0001\u2021\n\n\u2203 1 z \u2200 2 x/z \u2203 3 y/z,x p(x, y, z)\n\n\u0001\u2021\n= \u22a5 whereas \u2203 2 z \u2200 1 x/z \u2203 2 y/z,x p(x, y, z) = \u22a4.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\np111 p112\n\np121 p122\n\np211 p212\n\n35\n\np221 p222\n\n\u274f 33\u2721\n\u274f 33\u2721\n\u274f 33\u2721\n\u274f 33\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u274d\n\u271f\n\u274d\u274d 22 \u271f\n\u271f\n2\n\u274d\u274d2\u271f\u271f\n\u274d\u271f\n\u2227\u2766\n\u2227\u2766\n\u2773\u2773\n\u2718\n\u2718\n1\n\u2773\u2773\u27731\u2718\u2718\u2718\n\u2228\u2766\n\nFigure 16: \u2203 1 z \u2200 2 x/z \u2203 3 y/z,x p(x, y, z) (when the universe is {1, 2})\n\np111 p112\n\np121 p122\n\np211 p212\n\np221 p222\n\n\u274f 31\u2721\n\u274f 31\u2721\n\u274f 31\u2721\n\u274f 31\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u274d\u274d 22 \u271f\n\u271f\n\u274d\u274d 22 \u271f\n\u271f\n\u274d\u271f\n\u274d\u271f\n\u2227\u2766\n\u2227\u2766\n\u2773\n\u2773\u2773\n\u2718\n\u2718\n1\n\u2773\u2773\u27731\u2718\n\u2718\n\u2718\n\u2228\u2766\n\np111 p112\n\np121 p122\n\np211 p212\n\np221 p222\n\n\u274f 32\u2721\n\u274f 32\u2721\n\u274f 32\u2721\n\u274f 32\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u274f\u2721\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u274d\n\u271f\n\u274d\n\u271f\n1 \u271f\n1 \u271f\n\u274d\u274d2\u271f\n\u274d\u274d2\u271f\n\u2227\u2766\n\u2227\u2766\n\u2773\u2773\n\u2718\n\u2718\n\u2718\n2\n\u2773\u2773\u27731\u2718\n\u2718\n\u2718\n\u2228\u2766\n\nFigure 17: \u2203 1 z \u2200 2 x/z \u2203 1 y/z,x p(x, y, z) and \u2203 2 z \u2200 1 x/z \u2203 2 y/z,x p(x, y, z)\nAs we just had a chance to observe, ranked IF logic provides greater syntactic flexibility\nand convenience than extended IF logic does. This gives us reasons to expect that the\nformer is (not only a more direct and flexible means of expression but also) properly more\nexpressive than the latter, in the same sense as the latter is known to be more expressive\nthan ordinary, non-extended IF logic. A way to prove this conjecture can be expressing,\nthrough a formula T of ranked IF logic, a definition of truth for formulas of ranked IF logic\nof ranking depth \u2264 2 (such formulas fully cover extended IF logic). Now, if T itself was\nexpressible as a formula of ranking depth \u2264 2, then we would be able to produce a paradox\nby writing a formula of ranking depth \u2264 2 that asserts its own not being true.\nA related and more general question, which we leave unanswered, is about whether\nvarious fragments of ranked IF logic, depending on the depth and order of ranking, yield\nthe expressive power of various hierarchical fragments of second-order logic. In expressive\npower, ordinary IF logic is known to be equivalent to \u03a311 . One can naturally expect that\nwith higher ranks we can capture higher levels of the hierarchy. The same question can\nas well be asked about ranked elementary cirquents (as opposed to formulas of ranked IF\nlogic) in general.\nAs any approach, our approach allows further generalizations. For instance, our present\nlinear orders on ranks can be relaxed to partial orders, which may give rise to an IF-logicstyle approach to independences between different . . . ranks. But enough is enough. Things\nhave already gone quite far, and further generalizations would be reasonable to make only\nif and when a clear call for them comes. As pointed out, a call for the generalizations (of\nboth CoL and IF logic) we have made so far in this paper was the necessity to make the\nformalisms reasonably complete, and neutralize certain unsettling, incompleteness-caused\nphenomena such as the odd status of weak negation \u00ac in IF logic, or the impossibility to\nproperly develop IF logic at the purely propositional level.\n\n\f36\n\nG. JAPARIDZE\n\nHowever, in our step-by-step generalization process, stopping at cirquents of the present\nsection would not be right. There is one last necessary step remaining, which will be taken\nin the following section.\n8. General ports\nImagine a finite cirquent C in the sense of any of the previous sections. Let p1 , . . . , pn be\nthe atoms, listed in their lexicographic order, used (positively or negatively) in the labels\nof the ports of C. Then C is, in fact, an operation that takes an n-tuple of elementary\ngames (an interpretation, that is) and produces a new, not-necessarily elementary (unless\nC only has \u2228 and \u2227 gates) game. The same is the case when C is infinite, only here, as\nan operation, C may take an infinite sequence (rather than just an n-tuple) of elementary\ngames.\nCirquents thus are systematic ways to generate and express an infinite variety of operations on games. However, as just noted, as long as we only consider cirquents in the\nsense of the previous section(s), all such operations are limited to ones whose arguments\nare elementary games \u22a4 and \u22a5. These are two very special and simple cases of games.\nSo, a natural call comes for generalizing our approach in a way that allows cirquents to\nexpress operations with not only elementary arguments, but also with arguments that can\nbe arbitrary interactive computational problems (static games, that is) considered in CoL.\nOne way to achieve the above would be to change the concept of an interpretation \u2217 so\nthat now it is allowed to send the atoms of a cirquent to any, not-necessarily-elementary,\nstatic games. By doing so we would certainly gain a lot, but just as much would be lost: the\nclass of valid cirquents would shrink, victimizing many innocent ones such as, say, p \u2192 p \u2227 p\nor p \u2228 p \u2192 p \u2294 p. The point is that elementary problems (games) are meaningful and\ninteresting in their own right, and losing the ability to differentiate them from problems\nin general would be too much of a sacrifice. For instance, classical logic, IF logic, or the\nsystems of computability-logic-based arithmetic constructed in [26, 29, 30], are exclusively\nconcerned with cases where atoms are interpreted as elementary problems.\nWe have a better solution. It is simply allowing two sorts of atoms in the language, one\nfor elementary problems and the other for all problems. This way, not only do we have the\nability to express combinations of problems of either sort within the same formal language,\nbut also combinations that intermix elementary problems with not-necessarily-elementary\nones.\nLet us rename the objects to which we earlier refereed as (simply) \"atoms\" into elementary atoms. In addition to elementary atoms, we fix another infinite set of alphanumeric\nstrings, disjoint from the set of elementary atoms, and call its elements general atoms. We\nshall continue using the lowercase p, q, r, s, p1 , p(3, 4), . . . as metavariables for elementary\natoms, and we will be using the uppercase P , Q, R, S, P1 , P (3, 4), . . . as metavariables for\ngeneral atoms. As before, a literal is L or \u00acL, where L is an atom. In the former case the\nliteral is said to be positive, and in the latter case negative. Such a literal will be said to\nbe elementary or general depending on whether the atom L is elementary or general. The\ntwo literals L and \u00acL are said to be opposite. It is assumed that the question on whether\na literal is elementary or general is decidable.\nA cirquent in the sense of the present section means the same as one in the sense of\nthe previous section, with the only difference that now not only elementary, but also general\nliterals are allowed as labels of ports. A port is said to be elementary or general, positive or\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n37\n\nnegative depending on whether its label is so. Similarly, two ports are said to be opposite\niff their labels are so.\nAn interpretation now is a function \u2217 that (as before) sends each elementary atom p to\nan elementary game p\u2217 , and sends each general atom P to any, not-necessarily-elementary,\nstatic game P \u2217 . This function immediately extends to all literals by stipulating that, for\nany (elementary or general) atom W , (\u00acW )\u2217 = \u00ac(W \u2217 ), where \u00ac in \u00ac(W \u2217 ) is the ordinary\ngame negation operation of Definition 2.2.\nFor a run \u0393 and a string \u03b1, we will be using \u0393\u03b1 to denote the result of deleting in \u0393 all\nlabmoves except those that look like \u2118\u03b1\u03b2 (either player \u2118 and whatever string \u03b2), and then\nfurther deleting the prefix \u03b1 in each remaining move - that is, replacing each \u2118\u03b1\u03b2 by \u2118\u03b2.\nOur present definition of the legal runs of the game C \u2217 represented by a cirquent C\nunder an interpretation \u2217 is similar to the earlier definition(s), with the difference that now\nadditional moves of the form a.\u03b1 can be made, where a is (the ID of) a general port. The\nintuitive meaning of such a move is making the move \u03b1 in the copy of the game L\u2217 associated\nwith a, where L is the label of a. Accordingly, the additional condition that needs to be\nsatisfied for a legal run \u0393 is that, whenever a, L are as above, \u0393a. (intuitively the run of L\u2217\nplayed in port a) should be a legal run of L\u2217 . Below is a full definition:\nDefinition 8.1. Let C be a cirquent, \u2217 an interpretation, and \u03a6 a position. \u03a6 is a legal\nposition of the game C \u2217 iff, with \"cluster\" and \"port\" below meaning those of C, the\nfollowing conditions are satisfied:\n(1) Every labmove of \u03a6 has one of the following forms:\n(a) \u22a4c.i, where c is a \u2228-, \u25bd- or \u2294-cluster and i is a positive integer not exceeding the\noutdegree of c.\n(b) \u22a5c.i, where c is a \u2227-, \u25b3- or \u2293-cluster and i is a positive integer not exceeding the\noutdegree of c.\n(c) \u2118a.\u03b2, where a is a general port, \u2118 is either player, and \u03b2 is some string.\n(2) Whenever c is a choice cluster, \u03a6 contains at most one occurrence of a labmove of the\nform \u2118c.i.\n(3) Whenever c is a sequential cluster and \u03a6 is of the form h. . . , \u2118c.i, . . . , \u2118c.j, . . .i, we have\ni < j.\n(4) Whenever a is a general port and L is its label, \u03a6a. is a legal position of the game L\u2217 .\nThe concept of a metaselection, as well as the concepts unresolved, resolved and\nresolvent, for any of the eight sorts of gates, transfer from Section 7 to the present section\nwithout any changes. And metatruth (Definition 7.2) is now redefined as follows:\nDefinition 8.2. Let C be a cirquent, \u2217 an interpretation, \u0393 a legal run of C, and f~ a\nmetaselection for C. In this context, with \"metatrue\" to be read as \"metatrue w.r.t.\n(\u2217 , \u0393, f~)\", we say that:\n\u2022 An (elementary or general) L-port a is metatrue iff \u0393a. is a \u22a4-won run of L\u2217 .18\n\u2022 A resolved gate (of any of the eight types) is metatrue iff so is its resolvent.\n\u2022 No unresolved disjunctive gate (of any of the four types) is metatrue.\n\u2022 Every unresolved conjunctive gate (of any of the four types) is metatrue.\nFinally, we say that C is metatrue iff so is its root.\n18Note that, if a is an elementary port, then \u0393a is empty, and saying that such a run is a \u22a4-won run of\n\u2217\n\nL is the same as to say that L\u2217 = \u22a4.\n\n\f38\n\nG. JAPARIDZE\n\nWith metatruth (conservatively) redefined this way, the definition of (simply) truth\nis literally the same as before (Definition 7.3). So is the Wn component of the game C \u2217\nrepresented by a cirquent C under an interpretation \u2217 . Namely, a legal run \u0393 of C \u2217 is\nconsidered to be \u22a4-won iff C is true w.r.t. (\u2217 , \u0393).\nIn certain cases, the elementary versus general status of atoms has no effect on validity.\nFor instance, the cirquent \u00acp \u2228 p is valid, and so can be shown to be (whether in the weak or\nin the strong sense) the cirquent \u00acP \u2228 P . The same does not hold for all cirquents though.\nAn example would be \u00acp \u2228 (p \u2227 p), which is valid but can be shown to be not so (whether\nin the strong or in the weak sense) with P instead of p. At this point we can observe the\nresource-consciousness of computability logic even when only parallel gates/connectives are\nconsidered: while p and p \u2227 p are \"the same\", P and P \u2227 P (or P \u2228 P ) are not so at all: P\nstands for what will evolve as a single play of game P \u2217 (whatever interpretation \u2217 we have\nin mind), whereas P \u2227 P stands for what will evolve as two parallel plays of P \u2217 - that is,\nplays on two boards. While the game played on either board in the latter case is the same\nP \u2217 , the actual runs on the two boards will not necessarily be the same (unless both players\nare making exactly the same moves on the two boards), so that, it may well happen that\nthe play on one board is won while on the other board is lost. Generally, winning P \u2227 P for\n\u22a4 is harder than winning P , and winning P is harder than winning P \u2228 P . The situation\nis very different from this one with elementary atoms instead of general atoms: p is indeed\n\"the same\" as p \u2227 p (otherwise computability logic would not be a conservative extension\nof classical logic). That is because p\u2217 is an elementary game with no moves, and hence it\nmakes no difference whether it is \"played\" on one board or two boards: all of its \"plays\"\nwill be identical, and hence either all of them will be won or all of them will be lost.\nAs an aside, the phenomenon of resource-consciousness, in a certain way, can be ob-\u0001\nserved in pure IF logic as well. For instance, the two formulas \u2200 xE(x) and \u2200 x E(x)\u2228E(x)\ncan be seen to be non-equivalent there, with E(x) abbreviating \u2203 y/x(x = y). (Hint: to see\nthis, consider a model whose domain contains exactly two objects.) IF logic and resource\nlogics are thus interrelated, and this fact serves as additional evidence in favor of the idea\nof studying them within a common general framework, such as the one elaborated in the\npresent paper.\nEarlier we pointed out the increase in expressive power of the formalism of computability\nlogic achieved by switching from formulas to cirquents. Such a switch has an even more\ndramatic impact on expressive power when, along with elementary atoms, general atoms are\nalso allowed. As we remember, finite cirquents with only \u2227 and \u2228 gates and only elementary\nports are not any more expressive than formulas are. The same is no the case for cirquents\nwith general ports though. To get a feel of this, let us compare the two cirquents of\nFigure 18, the only difference between which is that one (on the right) has general ports\nwhere the other has elementary ports. Here and later, following our earlier practice, node\nIDs are omitted in these figures. Also as agreed earlier, omitted cluster IDs indicate that\nclustering is trivial. i.e., all clusters are singletons. Finally, omitted rank indicators should\nbe understood as that all \u2228-clusters are in the lowest rank and all \u2227-clusters are in the\nhighest rank, even though this is, in fact, irrelevant: in the absence of nonsingleton clusters,\nranking can be seen to be redundant, and how it is chosen has no effect on the semantics\nof the cirquent.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\np\n\nq\n\nr\n\nPP \u270f\u270fPP \u270f\u270f\n\u270f\nP\n\u270f\nP\n\u270f\u270f PP\u270f\u270f PP\n\u2766\n\u2766\n\u2227\n\u2227\n\u2227\u2766\nPP\n\u270f\n\u270f\nPP\n\u270f\nP\u270f\u270f\n\u2766\n\u2228\n\n(p \u2227 q) \u2228 (p \u2227 r) \u2228 (q \u2227 r)\n\nP\n\nQ\n\n39\n\nR\n\nPP \u270f\u270fPP \u270f\u270f\n\u270f\nP\n\u270f\nP\n\u270f\u270f PP\u270f\u270f PP\n\u2766\n\u2766\n\u2227\n\u2227\n\u2227\u2766\nPP\n\u270f\n\u270f\nPP\n\u270f\nP\u270f\u270f\n\u2766\n\u2228\n\nNo formula\n\nFigure 18: Elementary versus general ports\nThe left cirquent of Figure 18 can be turned into an equivalent tree in the standard way\n(duplicate and separate shared nodes), yielding the formula (p \u2227 q) \u2228 (p \u2227 r) \u2228 (q \u2227 r).\nEverything is classical here, that is. The same trick fails for the right cirquent though. It\nrepresents a game played on three boards where \u22a4, in order to win, should win on (at least)\ntwo out of the three boards. So, the cirquent that we see there is by no means equivalent\nto (P \u2227 Q) \u2228 (P \u2227 R) \u2228 (Q \u2227 R): the latter represents a game on six (rather than three)\nboards grouped into three pairs where, in order to win, \u22a4 needs to win on both boards\nof at least one pair. This is a \"two out of six\" combination, which is generally easier to\nwin than the \"two out of three\" combination represented by the cirquent under question.\nThere is simply no tree-like cirquent (formula) extensionally identical, or equivalent in any\nreasonable weaker sense, to the right cirquent of Figure 18, meaning that expressing the\ngame operation represented by it essentially requires the ability to account for sharing -\nthe ability absent in formula-based languages. In our cirquent, each of the ports is shared\nbetween two conjunctive parents. What makes the formula (P \u2227 Q) \u2228 (P \u2227 R) \u2228 (Q \u2227 R)\ninadequate is that, for instance, it fails to indicate that the two occurrences of P stand for\nthe same copy of game P rather than two copies of the same game P . And, as pointed out\nearlier, two copies of P are semantically not the same as just one copy.\nNow we are done with defining ever more general concepts of cirquents and setting up a\nCoL semantics for them. The next natural step in this line of research would be elaborating\ndeductive systems that adequately axiomatize the sets of valid cirquents. Of course, this is\nonly possible for various subclasses of cirquents rather than all cirquents. A modest progress\nin this direction has already been made in [22] where a cirquent-based sound and complete\nsystem19 was constructed. The cirquents of the language of that system have only general\nports, only \u2227 and \u2228 gates and, of course, no clustering and ranking.\nAt the formula level, very considerable advances have already been made in the direction of axiomatizing the sets of valid principles ([13]-[15], [18]-[21], [23]-[26], [27], [32]). For\ninstance, [27] contains a sound and complete axiomatization for the propositional fragment\nof CoL with both elementary and general atoms, negation and all four - parallel, choice,\nsequential and toggling - sorts of conjunctions and disjunctions. Certain first-order fragments of CoL have also found sound and complete axiomatizations. The quantifiers \u2293 , \u2294\nturn out to be much better behaved than their classical counterparts and, in a striking\ndifference from the latter, yield decidable first order logics. See [15], [19].\n19Soundness and completeness in [22] was proven with respect to abstract resource semantics rather\nthan the semantics of computability logic; as we are going to see later, however, these two semantics are\nequivalent.\n\n\f40\n\nG. JAPARIDZE\n\nThe present paper makes no axiomatization attempts, leaving this ambitious task for\nthe future. Instead, we are going to show extensional equivalence between the semantics\nof CoL and its companion termed abstract resource semantics. This result can make the\nfuture job of axiomatizing various fragments of CoL significantly easier, as abstract resource\nsemantics is technically much simpler and more convenient to deal with than the semantics\nof computability logic.\n9. Abstract resource semantics\nAbstract resource semantics (ARS) aims to formally capture our intuitions of resources\nand resource management. Resources are symmetric to tasks: what is a resource for the\nconsumer, is a task for the provider. So, an equally adequate name for ARS would be\n\"abstract task semantics\".\nThe concept of an atomic resource in ARS is taken as a basic one without any definition\nof its nature. This makes it open to various interpretations which ARS itself, as a generalpurpose tool, does not provide. The semantics of computability logic, treating atoms as\nvariables over static games, can be seen to be one of many such possible interpretations. As\nfor compound resources, technically their explication in ARS is given in terms of games. The\nformal language that ARS deals with is the same as that of computability logic. Precisely,\nin this paper, we let this (otherwise open-ended) language consist of all cirquents in the\n(most general) sense of Section 8.\nThere are two sorts of resources: elementary and general. Intuitively, elementary resources are \"reusable\" or \"unexhaustable\" ones, while general resources may or may not be\nso. Let us say in achieving a certain goal G you used the fact 2 + 2 = 4 as an (intellectual)\nresource. After this usage, 2 + 2 will still be 4, so that the resource will remain equally\navailable for future usage if needed again. On the other hand, if you also used $20, 000\nfor achieving G, you may not be able to use the same resource again later. 2 + 2 = 4\nis an elementary resource, while $20, 000 is not, which makes the latter a (properly) general resource. As we may guess, elementary resources will be represented in our cirquent\nformalism through elementary ports, and general resources through general ports.\nTo get some basic intuitive feel of ARS, and to see why the latter, just like CoL, naturally\ncalls for switching from formulas to cirquents, let us borrow a discussion from [22]. We are\ntalking about a vending machine that has slots for 25-cent (25c) coins, with each slot taking\na single coin. Coins can be authentic or counterfeited. Let us instead use the more generic\nterms true and false here, as there are various particular situations naturally and inevitably\nemerging in the world of resources corresponding to those two opposite values. Below are a\nfew examples of real-world resources/tasks and the possible meanings of the two semantical\nvalues for them:\n\u2022 A financial debt, which may (true) or may not (false) be eventually paid.\n\u2022 An electrical outlet or a battery, which may (true) or not (false) actually have sufficient\npower in it.\n\u2022 A standard task performed by a company's employee or an AI agent, which, eventually,\nmay (true) or not (false) be successfully completed.\n\u2022 A specified amount of computer memory required by a process, which may (true) or not\n(false) be available at a given time.\n\u2022 A promise, which may be kept (true) or broken (false).\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n41\n\nSee Section 8 of [16] for detailed elaborations of these intuitions.\nContinuing the description of our vending machine, inserting a false coin into a slot fills\nthe slot up (so that no other coins can be inserted into it until the operation is complete),\nbut otherwise does not fool the machine into thinking that it has received 25 cents. A candy\ncosts 50 cents, and the machine will dispense a candy if at least two of its slots receive true\ncoins. Pressing the \"dispense\" button while having inserted anything less than 50 cents,\nsuch as a single coin, or one true and two false coins, results in a non-recoverable loss.\nVictor has three 25c-coins, and he knows that two of them are true while one is perhaps\nfalse (but he has no way to tell which one is false). Could he get a candy?\nThe answer depends on how many slots the machine has. Consider two cases: machine\nM 2 with two slots, and machine M 3 with three slots. Victor would have no problem with\nM 3: he can insert his three coins into the three slots, and the machine, having received\n\u2265 50c, will dispense a candy. With M 2, however, Victor is in trouble. He can try inserting\narbitrary two of his three coins into the two slots of the machine, but there is no guarantee\nthat one of those two coins is not false, in which case Victor will end up with no candy and\nonly 25 cents remaining in his pocket.\nBoth M 2 and M 3 can be understood as resources - resources turning coins into a\ncandy. And note that these two resources are not the same: M 3 is obviously stronger\n(\"better\"), as it allows Victor to get a candy whereas M 2 does not, while, at the same\ntime, anyone rich enough to be able to make M 2 dispense a candy would be able to do the\nsame with M 3 as well. Yet, formulas fail to capture this important difference. M 2 and M 3\ncan be written as\nR2 \u2192 Candy and R3 \u2192 Candy,\nrespectively (with E \u2192 F , as always, abbreviating \u00acE\u2228F ): they consume a certain resource\nR2 or R3 and produce Candy. What makes M 3 stronger than M 2 is that the subresource\nR3 that it consumes is weaker (easier to supply) than the subresource R2 consumed by M 2.\nSpecifically, with one false and two true coins, Victor is able to satisfy R3 but not R2.\nThe resource R2 can be represented as the following cirquent:\n25c\n\n25c\n\n\u275c\n\u275c\n\u2727\u2727\n\u275c\u2727\n\u2227\u2765\n\nwhich, due to being tree-like, can also be adequately written as the formula\n25c \u2227 25c.\nAs for the resource R3, either one of the following two cirquents is an adequate representation of it, with one of them probably showing the relevant part of the actual physical\ncircuitry used in M 3:\n25c\n\n25c\n\n25c\n\n\u274d\u274d\n\u271f\u271f\u274d\u274d\n\u271f\u271f\n\u271f \u274d\u271f \u274d\n\u2227\u2765 \u2227\u2765 \u2227\u2765\n\u274d\u274d\n\u271f\u271f\n\u271f\n\u274d\u2765\n\u2228\n\n25c\n\n25c\n\n25c\n\n\u274d\u274d\n\u271f\u271f\u274d\u274d\n\u271f\u271f\n\u271f \u274d\u271f \u274d\n\u2228\u2765 \u2228\u2765 \u2228\u2765\n\u274d\u274d\n\u271f\u271f\n\u274d\u271f\n\u2227\u2765\n\nFigure 19: Two equivalent cirquents for the resource R3\n\n\f42\n\nG. JAPARIDZE\n\nUnlike R2, however, R3 cannot be written as a formula, for reasons similar to those that we\nsaw when discussing Figure 18. 25c \u2227 25c does not fit the bill, for it represents R2 which, as\nwe already agreed, is not the same as R3. Rewriting one of the above two cirquents - let it\nbe the one on the right - into an \"equivalent\" formula in the standard way, by duplicating\nand separating shared nodes, results in\n(25c \u2228 25c) \u2227 (25c \u2228 25c) \u2227 (25c \u2228 25c),\n\n(9.1)\n\nwhich is not any more adequate than 25c \u2227 25c. It expresses not R3 but the resource\nconsumed by a machine with six coin slots grouped into three pairs, where (at least) one\nslot in each of the three pairs needs to receive a true coin. Such a machine thus dispenses\na candy for \u2265 75 rather than \u2265 50 cents, which makes Victor's resources insufficient.\nThe trouble here, as in the case of the right cirquent of Figure 18, is related to the\ninability of formulas to explicitly account for resource sharing or the absence thereof. The\nright cirquent of Figure 19 stands for a conjunction of three resources, each conjunct, in\nturn, being a disjunction of two subresources of type 25c. However, altogether there are\nthree rather than six 25c-type subresources, each one being shared between two different\nconjuncts of the main resource. Formula (9.1) is inadequate because, for example, it fails to\nindicate that the first and the third occurrences of \"25c\" stand for the same resource while\nthe second and the fifth (as well as the fourth and the sixth) occurrences stand for another\nresource, albeit a resource of the same 25c-type. In yet another attempt to save formulas,\none could try to agree that atoms always stand for individual resources rather than resource\ntypes, then give to the three ports of the right cirquent of Figure 19 three different names\nP , Q, R, and represent the cirquent as the formula (P \u2228 Q) \u2227 (P \u2228 R) \u2227 (Q \u2228 R). But then\na crucial piece of information would be lost, specifically the information about all inputs\nbeing of the same type 25c, as opposed to, say, the three different types 25c, 10c, 5c. This\nwould make it impossible to match Victor's resources with those inputs.\nThus, any systematic attempt to develop a logic of resources would face the necessity\nto go beyond formulas and use a formalism that permits to account for resource sharing,\nas our cirquents do. And it is an absolute shame that linear logic, commonly perceived\nas \"the\" logic of resources, does not allow to express such simple and naturally emerging\ncombinations of resources as the \"two out of three\" combination expressed by the cirquents\nof Figure 19.\nThe main purpose of a good semantics should be serving as a bridge between the real\nworld and the otherwise meaningless formal expressions of logic. And, correspondingly, the\nvalue of a semantics should be judged by how successfully it achieves this purpose, which,\nin turn, depends on how naturally and adequately it formalizes certain basic intuitions\nconnecting logic with the outside world. Such intuitions behind abstract resource semantics\nhave been amply explained and illustrated in Section 8 of [16]. The reader is strongly\nrecommended to get familiar with that piece of literature in order to appreciate the claim\nof abstract resource semantics that it is a \"real\" semantics of resources, formalizing the\nresource philosophy traditionally (and, as argued in [16], somewhat wrongly) associated with\nlinear logic and its variations. In this paper we are mainly focused on just providing formal\ndefinitions, only occasionally making brief intuitive comments, and otherwise fully relying\non [16] for extended explanations of the intuitions, motivations and philosophy underlying\nthe semantics. Even though [16] dealt with only a very modest subclass of cirquents in our\npresent sense, the basic intuitions relevant to our treatment - at the philosophical if not\ntechnical level - were already given there.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n43\n\nFrom the technical point of view, ARS is a game semantics and, as such, only differs\nfrom the semantics of CoL in the way it treats atoms. Namely, if in CoL atoms are just\nplaceholders which (together with the entire cirquent) become games only after an interpretation \u2217 is applied to them, ARS treats each atom as an atomic abstract resource in its\nown rights, and correspondingly sees the whole cirquent as a resource/task/game in its own\nrights, without requiring an interpretation to be applied to it. To repeat, while in CoL a\ncirquent C, by itself (without an interpretation) is just a formal expression but not a game,\nin ARS every cirquent C is directly seen as a game, which we agree to denote by \u0108. A\nrelated difference between CoL and ARS is that, in the game C \u2217 represented by a cirquent\nC under a given interpretation \u2217 , CoL allows moves to be made within the games associated\nby \u2217 with the general literals of C. In ARS, as noted, such literals stand for atomic entities\nand no moves within them can or should be made. On the other hand, ARS has an additional sort of moves by \u22a4, called (resource) allocation. Such a move looks like (a, b), where\na is the ID of a P -port for some general atom P , and b is the ID of a \u00acP -port. A condition\nhere, called the monogamicity condition, is that neither a nor b could have been already\nused earlier in any allocation moves. As explained and illustrated in [16], the intuition\nbehind an allocation move is that of (indeed) allocating one resource to another: a coin\n(25c) to a coin-receiving slot (\u00ac25c), a memory (100M B) to a memory-requesting process\n(\u00ac100M B), a power source (100w) to a power-consuming utensil (\u00ac100w), an USB-interface\nexternal device (U SB) to an USB port of a computer (\u00acU SB), etc. And a justification of\nthe monogamicity condition is that if a nonelementary resource a is used by (allocated to)\nb, then it cannot be also used by (allocated to) another c 6= b.\nFormally, an allocation for a given cirquent C is a pair (a, b) - identified with the\nexpression \"(a, b)\" - where a and b are (the IDs of) general ports of C such that the label\nof a is P (some general atom P ) and the label of b is \u00acP .\nThe set of legal runs of the game associated with a cirquent in ARS is defined as follows:\nDefinition 9.1. Let C be a cirquent and \u03a6 a position. \u03a6 is a legal position of the game\n\u0108 (associated with C in ARS) iff, with \"cluster\" and \"port\" below meaning those of C, the\nfollowing conditions are satisfied:\n(1) Every labmove of \u03a6 has one of the following forms:\n(a) \u22a4c.i, where c is a \u2228-, \u25bd- or \u2294-cluster and i is a positive integer not exceeding the\noutdegree of c.\n(b) \u22a5c.i, where c is a \u2227-, \u25b3- or \u2293-cluster and i is a positive integer not exceeding the\noutdegree of c.\n(c) \u22a4(a, b), where (a, b) is an allocation for C. This kind of a move is said to be an\nallocation move.\n(2) Whenever c is a choice cluster, \u03a6 contains at most one occurrence of a labmove of the\nform \u2118c.i.\n(3) Whenever c is a sequential cluster and \u03a6 is of the form h. . . , \u2118c.i, . . . , \u2118c.j, . . .i, we have\ni < j.\n(4) \u03a6 does not contain any two occurrences \u22a4(a, b) and \u22a4(a\u2032 , b\u2032 ) such that a = a\u2032 or b = b\u2032 .\nBy an arrangement for a cirquent C we mean a set A of allocations for C such that,\nwhenever (a, b), (a\u2032 , b\u2032 ) \u2208 A, we have either (a, b) = (a\u2032 , b\u2032 ), or both a 6= a\u2032 and b 6= b\u2032 . We\ncall this condition (on arrangements) the monogamicity condition.\n\n\f44\n\nG. JAPARIDZE\n\nWhenever C is a cirquent and \u0393 is a legal run of \u0108, by the arrangement induced by\n\u0393 we mean the set of all allocations (a, b) such that \u0393 contains the labmove \u22a4(a, b).\nBy a situation \u2217 for a cirquent C we mean an assignment of one of the values T (\"true\")\nor F (\"false\") to each port of C, satisfying the condition that, for any two elementary (but\nnot necessarily general) ports a and b, whenever a and b have the same label, they are\nassigned the same value, and whenever a and b have opposite labels, they are assigned\ndifferent values. Any such function \u2217 is a legitimate situation, including the cases when \u2217\nassigns different values to general ports that have identical labels. Intuitively this is perfectly\nmeaningful in the world of resources because, say, one 25c-port (slot of the vending machine)\nmay receive a true coin while the other 25c-port may receive a false coin or no coin at all.\nNote the difference between situations and interpretations. One difference is that an\ninterpretation associates with each port a game, while a situation simply sends each port\nto one of the values T or F. Of course, in the case of elementary (but by no means general)\nports, this difference is not essential, as T can be identified with the game \u22a4 and F with the\ngame \u22a5. Another difference is that the domain of an interpretation is the set of atoms of a\ncirquent while the domain of a situation is the set of ports. This is a substantial difference,\nas the same atom, with or without a negation, may be the label of many different ports.\nBut, again, this difference is not relevant if we only consider elementary ports.\nLet C be a cirquent, A an arrangement for C, and \u2217 a situation for C. We say that \u2217\nis consistent with A iff, whenever (a, b) \u2208 A, the situation \u2217 assigns different values to a\nand b.20\nThe concept of a metaselection, as well as the concepts unresolved, resolved and\nresolvent, for any of the eight sorts of gates, transfer from Section 8 and hence Section 7 to\nthe present section without any changes. And metatruth (Definition 8.2) is now redefined\nas follows:\nDefinition 9.2. Let C be a cirquent, \u2217 a situation for C, \u0393 a legal run of \u0108, and f~ a\nmetaselection for C. In this context, with \"metatrue\" to be read as \"metatrue w.r.t.\n(\u2217 , \u0393, f~)\", we say that:\n\u2022 An (elementary or general) L-port a is metatrue iff L\u2217 = T.\n\u2022 A resolved gate (of any of the eight types) is metatrue iff so is its resolvent.\n\u2022 No unresolved disjunctive gate (of any of the four types) is metatrue.\n\u2022 Every unresolved conjunctive gate (of any of the four types) is metatrue.\nFinally, we say that C is metatrue iff so is its root.\nWith metatruth redefined this way, the definition of (simply) truth is literally the same\nas before (Definition 7.3).\nNext, where C is a cirquent and \u0393 is a legal run of \u0108, we say that C is accomplished\nw.r.t. \u0393 iff, for every situation \u2217 consistent with the arrangement induced by \u0393, C is true\nw.r.t. (\u2217 , \u0393).\nNow, where C is a cirquent and \u0393 is a legal run of \u0108, \u0393 is considered to be a \u22a4-won\nrun of \u0108 iff C is accomplished w.r.t. \u0393. This, together with Definition 9.1, completes our\ndefinition of the game \u0108 associated with a cirquent C in ARS.\n20In [16], a weaker condition was adopted, according to which at least one (but possibly both) of the\n\nports a, b should be assigned T. It is easy to see that either condition yields the same concept of validity, so\nthat this difference is unimportant.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n45\n\nWe say that an HPM M accomplishes a cirquent C iff M wins the game \u0108. When\nsuch an M exists, the cirquent C is said to be accomplishable.\nAccomplishability is the main semantical concept of ARS. In its philosophical spirit, it\nis an ARS-counterpart of the classical concept of truth. Technically, however, it is more a\nvalidity- (rather than truth-) style concept. Namely, it is similar to the concept of strong\nvalidity of computability logic.\nTo see an example, consider the cirquent of Figure 20.\n1\n\n2\n\n3\n\n4\n\nP\n\nP\n\nP\n\nP\n\n5\n\n6\n\n\u00acP \u00acP\n\n7\n\n8\n\n\u00acP \u00acP\n\n\u2745\n\u2745\n\u2745\n\u2745\n\u2766\n\u2766\n\u2228\u2773\n\u2228\u2766\n\u2228\u2773\n\u2228\u2766\n\u2718\n\u2718\n\u2773\u2773\u2718\u2718\n\u2773\u2773\u2718\u2718\n\u2766\n\u2227\u2766\n\u2227\u2764\n\u272d\u272d\n\u2764\u2764\u2764\u2764\n\u272d\n\u272d\n\u272d\n\u2764\u272d\n\u2228\u2766\n\nFigure 20: An accomplishable cirquent\nAnd consider two HPMs M1 and M2 such that:\nM1 generates the run \u03931 = h\u22a4(1, 5), \u22a4(2, 6), \u22a4(3, 7), \u22a4(4, 8)i;\nM2 generates the run \u03932 = h\u22a4(1, 5), \u22a4(2, 7), \u22a4(3, 6), \u22a4(4, 8)i.\nThen M1 does not accomplish the cirquent while M2 does.\nIndeed, the arrangement induced by \u03931 is\nA1 = {(1, 5), (2, 6), (3, 7), (4, 8)}.\nLet\n\n\u2020\n\nbe the situation with\n1\u2020 = 2\u2020 = 7\u2020 = 8\u2020 = T; 3\u2020 = 4\u2020 = 5\u2020 = 6\u2020 = F.\n\nThen \u2020 is consistent with A1 . But the cirquent is false w.r.t. (\u2020 , \u03931 ). Hence it is not\naccomplished w.r.t. \u03931 . Hence M1 does not accomplish it.\nThe above situation \u2020 , on the other hand, is not consistent with the arrangement\nA2 = {(1, 5), (2, 7), (3, 6), (4, 8)}\ninduced by \u03932 . Moreover, with some thought, one can see that no situation that makes the\ncirquent of Figure 20 false can be consistent with A2 . This means that M2 , unlike M1 ,\ndoes accomplish that cirquent.\nAs an aside, the cirquent\nof Figure 20 is tree-like\n\u0001\n\u0001 and hence can be written as the\nformula (P \u2228 P ) \u2227 (P \u2228 P ) \u2228 (\u00acP \u2228 \u00acP ) \u2227 (\u00acP \u2228 \u00acP ) . This formula, first brought forward\nby Blass [2] in a related context, is not provable in multiplicative linear logic or even in the\nextension of the latter\nknown as affine logic. \u0001The same applies to the more general principle\n\u0001\n(P \u2228Q)\u2227(R\u2228S) \u2228 (\u00acP \u2228\u00acR)\u2227(\u00acQ\u2228\u00acS) . Thus, unlike the situation with classical logic\nor IF logic, the logic induced by ARS or by (the extensionally equivalent) computability\nlogic is not a conservative extension of linear logic or its standard variations such as affine\nlogic. It is this fact that makes CoL and ARS believe that linear logic is incomplete as a\nlogic of resources.\nThe cirquent of Figure 21 looks very \"similar\" to the cirquent of Figure 20. Yet, unlike\nthe latter, it is not accomplishable. As an exercise, the reader may want to try to understand\nwhy this is so.\n\n\f46\n\nG. JAPARIDZE\n\nP\n\nP\n\nP\n\nP\n\nP\n\n\u00acP \u00acP\n\nP\n\n\u00acP \u00acP\n\n\u00acP \u00acP\n\n\u2745\n\u2745\n\u2745\n\u2745\n\u2745\n\u2745\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2773\u2773\n\u2718\n\u2773\u2773\n\u2718\n\u2718\n\u2718\n\u2773\n\u2718\n\u2773\u2773\u2773\n\u2718\n\u2773\u2773\n\u2718\n\u2718\n\u2773\u2718\u2718\n\u2773\u2718\u2718\n\u2766\n\u2227\n\u2227\u2766\n\u2764\u2764\u2764\u2764\n\u272d\u272d\n\u2764\u2764\u2764\u2764\n\u272d\u272d\u272d\n\u272d\n\u272d\n\u272d\n\u2764\u2764\u2764\u272d\u272d\u272d\n\u2228\u2766\n\nFigure 21: An unaccomplishable cirquent\nTo see the difference that sharing general ports may create, compare the two cirquents of\nFigure 22. The left cirquent can be seen to be unaccomplishable. The right cirquent only\ndiffers from the left cirquent in that ports 6 and 7 are combined together into one port 8 and\nshared between the two parents. This \"minor\" change makes it accomplishable. Namely, it\nis accomplished by an HPM that makes the three moves (8, 1), (4, 2) and (5, 3) in whatever\norder, i.e., sets up the arrangement {(8, 1), (4, 2), (5, 3)}.\n1\n2\n\u00acP \u00acP\n\n6\nP\n\n7\n3\nP \u00acP\n\n4\nP\n\n5\nP\n\n\u2745\n\u2745\n\u2745\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2773\u2773\n\u274d\n\u271f\n\u274d\n\u271f\n\u2773\u2773\u2773\u274d\n\u2773\u274d\n\u271f\u271f\n\u2773\u274d\n\u2773\u271f\n\u2227\u2766\n\nunaccomplishable\n\n1\n2\n\u00acP \u00acP\n\n8\nP\n\n3\n\u00acP\n\n4\nP\n\n5\nP\n\n\u2726\u275b\n\u2745\u2726\u2726 \u275b\u275b\n\u2745\n\u2228\u2766\n\u2228\u2766\n\u2228\u2766\n\u2773\n\u2773\u2773 \u274d\u274d\n\u271f\n\u271f\n\u2773\u2773\u2773\u274d\n\u2773\u274d\n\u271f\u271f\n\u2773\u274d\n\u2773\u271f\n\u2227\u2766\n\naccomplishable\n\nFigure 22: Unshared versus shared general ports\nAgain very briefly about the intuitions behind ARS, elaborated through several papers\n([11, 16, 22, 23]). Situations are full descriptions of the world in terms of what is true and\nwhat is false. What the \"actual\" situation is, is typically unknown to an agent (HPM)\ntrying to accomplish a certain task (cirquent). Furthermore, the truth values of atoms may\nsimply be indetermined before or during the process of playing the game associated with\nthe cirquent, and can be influenced by what moves have been made. For instance, if p\nstands for \"Victor has (or will) become a millionaire in his lifetime\", the truth value of p\nmay eventually depend on how Victor acts towards achieving p as a goal. This value is\ninitially indetermined, for otherwise all Victor's activities would be meaningless. It will\nbecome determined only by the time when Victor dies of when the world ends.\nPlaying a game represented by a cirquent in ARS can be seen as resource or task\nmanagement. The goal is to make sure that the eventual (\"actual\") situation which will\ndetermine success and over which the agent only has partial control, is favorable for the\nagent (guarantees a win). Resource management includes allocation decisions. The effect of\neach such decision/move is narrowing down the set of all possible (and otherwise unknown)\nsituations. For instance, allocating a coin to a slot of a vending machine rules out the\nsituation (by making it inconsistent with the arrangement that is being set up) in which\nthe coin is true yet the slot did not receive 25c. Resource management also includes decisionstyle actions associated with selectional gates or clusters. For instance, a choice between\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n47\n\na candy and an apple that a vending machine offers to whoever inserts 50c into it is a\n\u2293-combination of Candy and Apple (this is so from the machine's perspective; it becomes\nan \u2294-combination from the user's perspective). And nature's \"decisions\" about whether\nVictor lives or dies is a \u25bd-style combination of \"Victor is alive\" and \"Victor is dead\", where\nnature can switch from the former to the latter but never back, as required by the game\nrules associated with sequential combinations. In Section 5 we further saw resource/task\nintuitions associated with clustering. Remember the \"Victor and Peggy in the middle of\nthe road\" example.\nHistorical remarks. A year before computability logic was officially born, paper [11]\nintroduced an approach termed the logic of tasks which, ignoring certain unessential and\nflexible technical details, eventually became a conservative fragment and an ideological predecessor of both CoL and ARS. In our present terms, the language of the logic of tasks was\nlimited to only elementary atoms (an important detail!) and formulas (tree-like cirquents)\nbuilt from them using \u2227, \u2228, \u2293, \u2294 in both propositional and quantifier forms. For these sorts\nof cirquents, the concept of validity defined in [11] coincides with our present ARS concept of accomplishability, as well as with our present CoL concept of strong validity. The\nabove-sketched philosophical vision of the world as a set of potential situations, with the\ngame-playing agent trying to reduce that set to favorable ones, also was originally developed\nwithin the framework of the logic of tasks. While the logic of tasks is being further studied\nby a number of researchers ([36], [39], [40]), the author himself abandoned it as an approach\nsuperseded by the more general computability logic.\nThe idea of abstract resource semantics in the proper sense (the sense that differentiates\nit from the more limited logic of tasks), as well as the idea of cirquents, was born in\n[16]. Central to this idea was considering allocations as moves in their own rights and,\ncorrespondingly, considering in the language general atoms instead of - or, rather, along\nwith - the elementary atoms of the logic of tasks. Cirquents that [16] officially dealt with\nwere very limited, with the root always being a \u2227-gate, the children of the root always being\n\u2228-gates, and all grandchildren of the root being general ports. The same paper, however,\noutlined the possibility and expediency of considering more general sorts of cirquents and\ncorrespondingly extending the associated abstract resource semantics.\nThe paper [22] generalized the cirquents of [16] and the corresponding abstract resource\nsemantics to all finite \u2227, \u2228-cirquents with general ports. And the paper [23] outlined ARS\nin more or less full generality, even though for formulas only. Within that outline, Mezhirov\nand Vereshchagin [32] undertook a detailed study of propositional formulas in the logical\nsignature {\u00ac, \u2227, \u2228, \u2293, \u2294, \u2227| , \u2228| }, and proved a theorem similar to our forthcoming Theorem\n10.1. The main novelty in the present extension of ARS is the idea of clustering, never\nconsidered before in either CoL or ARS. In fact, as noted earlier, cirquents, in whatever\nform, had never been used in CoL (as opposed to ARS) as official means of expression.\nAnd ARS only had been defined for selectional-gate-free cirquents without clustering and\nranking.\nBefore closing this section, we want to summarize what we have already said or what\nthe reader has probably already observed. From the technical (as opposed to, perhaps,\nphilosophical) point of view, when cirquents with only elementary ports are considered,\nthere is no difference between ARS and the semantics of CoL, as long as, in the latter, we\nlimit our attention only to the concept of strong validity. And the above-mentioned logic\nof tasks is a fragments of this common part of CoL and ARS. So is classical logic, IF logic\nor extended IF logic. ARS and the semantics of CoL start to differ only when we consider\n\n\f48\n\nG. JAPARIDZE\n\ncirquents with general ports. This difference is substantial, yet only in the intensional sense.\nThe following section shows the nontrivial fact that extensionally there is no difference -\nthat is, the two semantics, despite differences, still yield the same classes of valid cirquents.\n10. Accomplishability and strong validity are equivalent\nBy a nice game we shall mean a game G such that, with \u2118 (as always) standing for either\nplayer and \u00ac\u2118 for the other player, we have:\n\u2022 Every legal run of G is either hi or h\u2118mi or h\u2118m, \u00ac\u2118ni, where m, n are (the decimal\nrepresentations of) some positive integers.\n\u2022 The empty run hi is won by \u22a4, and a legal run h\u2118mi of G is won by \u2118.\n\u2022 A legal run h\u22a4m, \u22a5ni of G is \u2118-won iff so is h\u22a5n, \u22a4mi. This allows us to see legal runs\nof nice games as sets rather than sequences of labmoves, and write {\u22a4m, \u22a5n} instead of\nh\u22a4m, \u22a5ni.\nThus, different nice games differ from each other only in which runs of the form {\u22a4m, \u22a5n}\nare won.\nBy a nice interpretation we shall mean an interpretation that interprets each general\natom as a nice game.\nThis section is entirely devoted to a proof of the following theorem. In it, as always,\na \"cirquent\" means a cirquent in the most general sense defined so far, i.e., in the sense of\nSection 8.\nTheorem 10.1. C is strongly valid iff C is accomplishable (any cirquent C).\nFurthermore, both the \"if \" and \"only if \" parts of this theorem come in the following\nstrong forms, respectively:\n1. There is an effective procedure that takes an arbitrary HPM M and constructs an\nHPM U such that, if M accomplishes C, then U is a uniform solution for C.\n2. If C is not accomplishable, then, for any HPM U , there is a nice interpretation\nsuch that U does not win C \u2217 .\n\n\u2217\n\nBefore getting down to a proof of this theorem, we need to agree on certain additional\ndetails about the (otherwise loosely defined in Section 2) HPM model of computation.\nNamely, we assume that either tape of an HPM has a beginning but no end, with cells\narranged in the left-to-right order. We also assume that, at any computation step, an HPM\ncan make at most one move, whereas its environment can make any finite number of moves.\nWhen both players move, the order in which their moves are appended to the content of the\nrun tape is that \u22a4's move goes before \u22a5's moves. By a run generated by a given HPM H\nwe mean any run that might be (depending on the environment's behavior) incrementally\nspelled on the run tape of H during its work. Thus, H wins a game A iff every run generated\nby H is a \u22a4-won run of A.\nProof of clause 1. Consider an arbitrary cirquent C, and an arbitrary HPM M. Our\ngoal is to construct an HPM U such that, as long as M accomplishes C, U wins C \u2217 for\nany interpretation \u2217 .\nUnderstanding the idea behind our proof is not hard. We let U be a machine which,\nas far as moves associated with selectional clusters are concerned, acts the same way in C \u2217\n- i.e., makes the same selections - as M does in the game \u0108 associated with C in ARS.\nThe machines U and M only differ from each other in their actions related to general ports.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n49\n\nThe strategy of U in general ports is that, as long as M has not allocated a given port to\nanother one (or vice versa), U makes no moves in it. However, as soon as two general ports\na and b are allocated to each other by M, U starts applying copycat between the games\n(one being the negation of the other) associated with those ports, i.e., mimicking in either\ngame the environment's moves made in the other game. As a result, the plays (runs) of the\ngames associated with a and b are guaranteed to be symmetric. More precisely, one is a\n\u22a4-delay of the other. This makes it impossible that both of those plays are lost by \u22a4. We\nmay assume that exactly one of them is won by \u22a4 (if both are won, \"even better\"). Then,\ntranslating \"lost\" into the value F and \"won\" into the value T, we get a situation \u2021 for C\nconsistent with the arrangement induced by the run \u0398 generated by M. If M accomplishes\nC, the latter is true with respect to (\u2021 , \u0398). Then the game C \u2217 can be easily seen to be won\nby U .\nIn more technical detail, U works by simulating M. For this simulation, at any step, U\nmaintains a record Configuration for the \"current\" configuration of M. The latter contains\nthe \"current\" state of M, the locations of the two scanning heads of M, and full contents\nof the (imaginary) work and run tapes of M. Initially, the state is the start state of M,\nthe two scanning heads are looking at the leftmost cells of their tapes, and the contents of\nthe two tapes are empty. U also maintains a variable i which is initially set to 1.\nAfter the above initialization step, U just acts according to the following procedure:\nProcedure LOOP:\n(1) Using the transition function of M and based on the current value of Configuration, U\ncomputes the next state, next locations of the scanning heads, the next content of the\nwork tape of M, and correspondingly updates Configuration.\n(2) If during the above transition M made a move \u03c9, U further updates Configuration by\nappending the labmove \u22a4\u03c9 to the content of the imaginary run tape of M. In addition:\n(a) If \u03c9 is not an allocation move, U makes the same move \u03c9 in the real play.\n(b) Suppose now \u03c9 is an allocation move (a, b). Let \u03a5 be the longest initial segment\nof the position spelled on the run tape of U such that the last labmove of \u03a5, as a\nstring spelled on the tape, ends at location j (i.e., the last symbol of the labmove is\nwritten in the jth cell) for some j < i. Then U looks up, within (but not beyond)\n\u03a5, all the labmoves \u22a5a.\u03b21 , . . . , \u22a5a.\u03b2n of the form \u22a5a.\u03b2, and makes the moves\nb.\u03b21 , . . . , b.\u03b2n in the real play. Similarly, it looks up within \u03a5 all the labmoves\n\u22a5b.\u03b11 , . . . , \u22a5b.\u03b1m of the form \u22a5b.\u03b1, and makes the moves a.\u03b11 , . . . , a.\u03b1m .\n(3) Now U checks its run tape to see whether it contains a labmove \u22a5\u03c9 which, as a string\nspelled on the tape, ends exactly at location i. If such an \u03c9 is found, then:\n(a) If \u03c9 looks like c.j where c is a selectional cluster, U further updates Configuration\nby adding the labmove \u22a5\u03c9 to the content of the imaginary run tape of M.\n(b) If \u03c9 looks like a.\u03b4 where a is a general port already allocated by M to a certain\nport b (or vice versa) - i.e., the imaginary run tape of M contains the labmove\n\u22a4(a, b) or \u22a4(b, a) - then U makes the move b.\u03b4 in the real play.\n(4) Finally, M increments i to i + 1, and repeats LOOP.\nAssume M accomplishes C.\nConsider an arbitrary run \u0393 generated by U . To this run corresponds a run \u0398 generated\nby M - namely, \u0398 is the run incrementally spelled on the imaginary run tape of M when\nthe latter is simulated by U during playing according to the scenario of \u0393. Fix these \u0393\n\n\f50\n\nG. JAPARIDZE\n\nand \u0398. Let us also fix A as the arrangement induced by \u0398. We further pick an arbitrary\ninterpretation \u2217 and fix it, too.\nOur assumption that M accomplishes C implies that M never makes an illegal move\nof \u0108 (unless its adversary does so first). We may also safely assume that U 's environment\nnever makes illegal moves of C \u2217 either, for otherwise U automatically wins and we are done.\nThen a little analysis of the situation reveals that \u0393 is a legal run of C \u2217 and \u0398 is a legal\nrun of \u0108. We will implicitly rely on this observation in our further argument.\nConsider an arbitrary pair (a, b) with (a, b) \u2208 A. Let P be the label of a, and thus \u00acP\nthe label of b. Remember that \u0393a. is the run that took place (according to the scenario of\n\u0393) in the copy of the game P \u2217 associated with a and, similarly, \u0393b. is the run that took\nplace in the copy of the game \u00acP \u2217 associated with b. Remember also that, for a run \u03a9, \u00ac\u03a9\nmeans the result of negating all labels in \u03a9. It is clear from our description of LOOP that\n\u0393a. is a \u22a4-delay of \u00ac\u0393b. . Assume \u0393b. is a \u22a4-lost run of \u00acP \u2217 . Then, by the definition of the\ngame negation operation, \u00ac\u0393b. is a \u22a4-won run of P \u2217 . But then, because P \u2217 is a static game\nand \u0393a. is a \u22a4-delay of \u00ac\u0393b. , \u0393a. is a \u22a4-won run of P \u2217 . To summarize, we have:\nSuppose (a, b) \u2208 A, and P and \u00acP are the labels of a and b. Then\neither \u0393a. is a \u22a4-won run of P \u2217 , or \u0393b. is a \u22a4-won run of \u00acP \u2217 , or both.\n\n(10.1)\n\nWe define a situation \u2020 for C by stipulating that, for any elementary or general L-port c of\nC, c\u2020 = T iff \u0393c. is a \u22a4-won run of L\u2217 .\nFrom our description of the work of U it is clear that M and U act in exactly the same\nways in the selectional clusters of C. That is, \u0393 and \u0398 contain exactly the same labmoves\nof the form \u2118c.j where c is a selectional cluster. From this observation and our choice of \u2020 ,\nwith a little thought, we can see that:\nC is true w.r.t. (\u2020 , \u0398) iff C is true w.r.t. (\u2217 , \u0393).\n\n(10.2)\n\nLet \u2021 be the situation for C that agrees with \u2020 in all cases except that, whenever\n(a, b) \u2208 A and a\u2020 = b\u2020 = T, we have a\u2021 = T and b\u2021 = F. In view of the monotonicity of the\ntruth conditions associated with all types of gates, it is clear that\nIf C is true w.r.t. (\u2021 , \u0398), then C is also true w.r.t. (\u2020 , \u0398).\n\u2021,\n\na\u2021\n\n(10.3)\nb\u2021\n\nConsider any (a, b) \u2208 A. By our choice of it is impossible that\n=\n= T. And,\nwith (10.1) in mind, it is also impossible that a\u2021 = b\u2021 = F. Thus, \u2021 assigns different values\nto a and b. This means that\n\u2021\n\nis consistent with A.\n(10.4)\n\u2021\nSince M accomplishes C, in view of (10.4), C is true w.r.t. ( , \u0398). But then, by (10.3)\nand (10.2), C is true w.r.t. (\u2217 , \u0393), meaning that \u0393 is a \u22a4-won run of C \u2217 . But remember\nthat \u0393 was an arbitrary run generated by U and \u2217 was an arbitrary interpretation. Thus,\nU is a uniform solution for C. It remains to make the straightforward observation that, as\npromised in the theorem, our construction of U from M is effective.\nProof of clause 2. Our proof here is in many respects symmetric to the proof of clause\n1.\nConsider an arbitrary cirquent C, and an arbitrary HPM U such that U wins C \u2217 for\nany nice interpretation \u2217 . Our goal is to construct an HPM M such that M accomplishes\nC.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n51\n\nTo understand the idea behind our proof, imagine a play of U over C \u2217 for whatever\nnice interpretation \u2217 , on which, note, the behavior of U does not depend. Every (legal)\nmove in this play signifies either a move made in a selectional cluster, or a move made in a\ngeneral port. Since \u2217 is nice, for each general port, either player has exactly one move that\ncan be made there. Let us call U 's environment smart if it always makes different moves in\ndifferent general ports. This is the case when, say, the environment always makes the move\n\"a\" in port a. Let us assume that, in the play that we are considering, the environment\nis smart. The best that then U can do is to match each P -labeled port with one (but not\nmore!) \u00acP -labeled port - match in the sense of mimicking adversary's moves so that the\ntwo games evolve in a symmetric fashion, to guarantee that at least one of them will be\neventually won. Each time such a \"matching\" between ports a and b is detected, we let\nM make a move that allocates a to b. Other than this, M plays in the same way as U\ndoes, by making the same moves (selections) in selectional clusters as U makes. We can\nthen show that, if M does not accomplish C with this strategy, any falsifying situation \u2020\nfor C translates into certain conditions on \u2217 under which U has lost C \u2217 . This, however, is\nimpossible because, by our assumption, U wins C \u2217 for any nice interpretation \u2217 .\nIn more detailed terms, M works by simulating U . For this simulation, at any step, M\nmaintains a record Configuration for the \"current\" configuration of U . The latter contains\nthe \"current\" state of U , the locations of the two scanning heads of U , and full contents of\nthe (imaginary) work and run tapes of U . Initially, the state is the start state of U , the two\nscanning heads are looking at the leftmost cells of their tapes, and the contents of the two\ntapes are empty. M also maintains a variable i which is initially set to 1.\nAfter the above initialization step, M just acts according to the following procedure:\nProcedure LOOP:\n(1) Using the transition function of U and based on the current value of Configuration, M\ncomputes the next state, next locations of the scanning heads, the next content of the\nwork tape of U , and correspondingly updates Configuration.\n(2) If during the above transition U made a move \u03c9, M further updates Configuration by\nappending the labmove \u22a4\u03c9 to the content of the imaginary run tape of U . In addition,\nif \u03c9 looks like c.j for some selectional cluster c, M makes the same move \u03c9 in the real\nplay.\n(3) If i is (the ID of) a general port, M further updates Configuration by appending the\nlabmove \u22a5i.i (a \"smart environment's\" move) to the content of the imaginary run tape\nof U .\n(4) Next, M checks if there is a pair (a, b) of opposite general ports with a positive and b\nnegative, such that the imaginary run tape of U contains the four labmoves \u22a5a.a, \u22a5b.b,\n\u22a4b.a, \u22a4a.b, and M has not yet made the allocation move (a, b) in the real play. This\nis to what we earlier referred as \"detecting a match between a and b\". If such a pair\n(a, b) is found, M makes the move (a, b) in the real play.\n(5) Now M checks its run tape to see whether it contains a labmove \u22a5\u03c9 which, as a string\nspelled on the tape, ends at location i. If such an \u03c9 is found and it looks like c.j where\nc is a selectional cluster, M further updates Configuration by appending \u22a5\u03c9 to the\ncontent of the imaginary run tape of U .\n(6) Finally, M increments i to i + 1, and repeats LOOP.\nConsider an arbitrary run \u0398 generated by M. To this run corresponds a run \u0393 generated\nby U - namely, \u0393 is the run incrementally spelled on the imaginary run tape of U when\n\n\f52\n\nG. JAPARIDZE\n\nthe latter is simulated by M during playing according to the scenario of \u0398. Fix these \u0398\nand \u0393. Let us also fix A as the arrangement induced by \u0398. We further pick an arbitrary\nsituation \u2020 for C consistent with A and fix it, too.\nOur assumption that U wins C \u2217 for any nice interpretation \u2217 implies that U never makes\nan illegal move of C \u2217 (unless its environment does so first). We may also safely assume that\nM's adversary never makes illegal moves of \u0108 either, for otherwise M automatically wins\nand we are done. Then, a little analysis of the situation reveals that \u0398 is a legal run of \u0108\nand \u0393 is a legal run of C \u2217 (for whatever nice interpretation \u2217 ). We will implicitly rely on\nthis observation in our further argument.\nWe shall say that a general port a of C is unmatched iff for no b does A contain (a, b)\nor (b, a). Otherwise a is matched, and the port b for which A contains (a, b) or (b, a) is\nsaid to be the match of a.\nLet \u2021 be the situation for C which agrees with \u2020 on all elementary and matched general\nports, and sends each unmatched general port to F. Obviously \u2021 , just like \u2020 , is consistent\nwith A. And, as \u2020 sends to T any port that \u2021 does, in view of the monotonicity of all truth\nconditions associated with gates, it is clear that\nIf C is true w.r.t. (\u2021 , \u0398), then so is it w.r.t. (\u2020 , \u0398).\n(10.5)\n\u2217\nWe now choose a nice interpretation such that:\n\u2022 For any elementary atom p, p\u2217 = \u22a4 iff there is a p-labeled (resp. \u00acp-labeled) port a such\nthat a\u2021 = T (resp. a\u2021 = F).\n\u2022 For any general atom P , P \u2217 is the nice game such that any legal run {\u22a5a, \u22a4b} of it is\n\u22a4-won iff we have one of the following:\n(1) a is a P -port with a\u2021 = T, and \u0393a. = {\u22a5a, \u22a4b}.\n(2) b is a \u00acP -port with b\u2021 = F, and \u0393b. = {\u22a4a, \u22a5b}.\nWe claim the following:\nFor any general L-port c of C, c\u2021 = T iff \u0393c. is a \u22a4-won run of L\u2217 .\n\n(10.6)\n\nTo verify the above claim, let us first consider the case when L = P (some general atom\nP ) and c\u2021 = T. Since \u2021 assigns T only to matched general ports, c is matched. Let d be the\nmatch of c. From our description of the work of M it is obvious that \u0393c. = {\u22a5c, \u22a4d}. And,\nby clause 1 of our definition of P \u2217 , such a run is a \u22a4-won run of P \u2217 , as desired.\nNext, consider the case when L = \u00acP and c\u2021 = T. Again, since \u2021 assigns T only\nto matched general ports, c is matched. Let d be its match. So, d\u2021 = F. Note that\n\u0393c. = {\u22a4d, \u22a5c} and hence \u00ac\u0393c. = {\u22a5d, \u22a4c}. By our definition of P \u2217 , {\u22a5d, \u22a4c} can be a\n\u22a4-won run of P \u2217 only if either d\u2021 = T (clause 1) or c\u2021 = F (clause 2). But neither of these\ntwo is true in our case. So, \u00ac\u0393c. is a \u22a5-won run of P \u2217 . But then, by the definition of game\nnegation, \u0393c. is a \u22a4-won run of \u00acP \u2217 , as desired.\nNext, consider the case when L = P and c\u2021 = F. Since the smart adversary of (the\nsimulated by M) U makes the move c.c for each general port c, \u0393c. contains the labmove\n\u22a5c. If it does not contain any other labmoves, \u0393c. is a \u22a5-won run of P \u2217 because the latter\nis a nice game. Suppose now \u0393c. = {\u22a5c, \u22a4d} for some d. So, either c is unmatched, or d its\nmatch. If c is unmatched, then \u0393d. cannot be {\u22a5d, \u22a4c} and hence, by our definition of P \u2217 ,\n\u0393c. is not a \u22a4-won run of P \u2217 . Now suppose d is the match of c. Then d\u2021 = T which, again,\nmakes it impossible that \u0393c. is a \u22a4-won run of P \u2217 . Thus, in all cases, \u0393c. is a \u22a5-won run of\nP \u2217 , as desired.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n53\n\nFinally, consider the case when L = \u00acP and c\u2021 = F. As in the previous case, \u0393c.\ncontains the labmove \u22a5c. Hence, \u00ac\u0393c. contains \u22a4c. If \u00ac\u0393c. does not contain any other\nlabmoves, \u00ac\u0393c. is a \u22a4-won run of P \u2217 because P \u2217 is a nice game; then, \u0393c. is a \u22a5-won run of\n\u00acP \u2217 , and we are done. Suppose now \u00ac\u0393c. = {\u22a5d, \u22a4c} for some d, and hence \u0393c. = {\u22a4d, \u22a5c}.\nThen, by clause 2 of our definition of P \u2217 , \u00ac\u0393c. is a \u22a4-won run of P \u2217 , meaning that \u0393c. is a\n\u22a5-won run of \u00acP \u2217 , as desired. Claim (10.6) is now proven.\nBy our choice of \u2217 , claim (10.6) is automatically true for elementary ports instead of\ngeneral ports. So, we have:\nFor any (elementary or general) L-port c of C, c\u2021 = T iff \u0393c. is a \u22a4-won run of L\u2217 .\n(10.7)\nFrom our description of the work of M one can see that M and U act in exactly the same\nways in selectional clusters. More precisely, \u0398 and \u0393 contain exactly the same labmoves of\nthe form \u2118c.j where c is a selectional cluster of C. From this observation, in conjunction\nwith (10.7), it is obvious that C is true w.r.t. (\u2021 , \u0398) iff it is true w.r.t. (\u2217 , \u0393). But, by our\nassumption, U wins C \u2217 for any nice interpretation C \u2217 . Thus, C is true w.r.t. (\u2021 , \u0398). Then,\nby (10.5), C is also true w.r.t. (\u2020 , \u0398). Now, remembering that \u2020 was an arbitrary situation\nconsistent with the arrangement induced by \u0398, we find that C is accomplished w.r.t. \u0398.\nIn other words, \u0398 is a \u22a4-won run of \u0108. Finally, remembering that \u0398 was an arbitrary run\ngenerated by M, we conclude that M wins \u0108. In other words, M accomplishes C.\n11. Conclusion\nWe have elaborated circuit-style constructs called cirquents, and set up two sorts of game\nsemantics for them: the semantics of computability logic, and abstract resource semantics.\nThe two, while substantially different, have been proven to validate the same classes of\ncirquents.\nCirquents, allowing us to account for sharing substructures between different parent\nstructures, are properly more expressive and efficient means of representing various objects\nof study than formulas are. This fact had already been observed in the past, but only very\nlimited classes of cirquents had been studied so far, and only abstract resource semantics\n(not the semantics of computability logic) had been defined for them. The present paper\nextended the earlier studied cirquents by adding three non-traditional pairs of conjunctive\nand disjunctive gates to them. An even more important innovation was generalizing gates to\nwhat we called clusters. This is a generalization naturally called for by advanced approaches\nto game logics and resource logics. Clustering further increases the expressiveness and flexibility of cirquents. Among its merits is achieving the full expressive power of independence\nfriendly logic and far beyond.\nThis paper has been exclusively focused on semantics. Among the subsequent natural\nsteps within the present line of research would be attempts to construct deductive systems\nfor various fragments of the set of valid cirquents.\nReferences\n[1] S. Abramsky and R. Jagadeesan. Games and full completeness for multiplicative linear logic. Journal\nof Symbolic Logic 59 (1994), pp. 543\u2013574.\n[2] A. Blass. A game semantics for linear logic. Annals of Pure and Applied Logic 56 (1992), pp.\n183-220.\n\n\f54\n\nG. JAPARIDZE\n\n[3] P. Hinman. Fundamentals of Mathematical Logic. A. K. Peters, 2005.\n[4] J. Hintikka. Logic, Language-Games and Information: Kantian Themes in the Philosophy\nof Logic. Clarendon Press 1973.\n[5] J. Hintikka. The Principles of Mathematics Revisited. Cambridge University Press 1996.\n[6] J. Hintikka and G. Sandu. Game-theoretical semantics. In: Handbook of Logic and Language. J.\nvan Benthem and A ter Meulen, eds. North-Holland 1997, pp. 361-410.\n[7] W. Hodges. Compositional semantics for a language of imperfect information. Logic Journal of the\nIGPL 5 (1997), pp. 539-563.\n[8] W. Hodges. Logics of imperfect information: why sets of assignments? In: Interactive Logic. J. van\nBenthem, D.M. Gabbay and B. L\u00f6we, eds. Amsterdam University Press 2007, pp. 117-113.\n[9] G. Japaridze (Dzhaparidze). Effective truth. ILLC Prepublication Series for Mathematical Logic\nand Foundations ML-93-15. University of Amsterdam 1993, 25 pages.\n[10] G. Japaridze. A constructive game semantics for the language of linear logic. Annals of Pure and\nApplied Logic 85 (1997), No. 2, pp. 87-156.\n[11] G. Japaridze. The logic of tasks. Annals of Pure and Applied Logic 117 (2002), pp. 263-295.\n[12] G. Japaridze. Introduction to computability logic. Annals of Pure and Applied Logic 123 (2003),\npp. 1-99.\n[13] G. Japaridze. Propositional computability logic I. ACM Transactions on Computational Logic 7\n(2006), No.2, pp. 302-330.\n[14] G. Japaridze. Propositional computability logic II. ACM Transactions on Computational Logic 7\n(2006), No.2, pp. 331-362.\n[15] G. Japaridze. From truth to computability I. Theoretical Computer Science 357 (2006), pp. 100-135.\n[16] G. Japaridze. Introduction to cirquent calculus and abstract resource semantics. Journal of Logic and\nComputation 16 (2006), pp. 489-532.\n[17] G. Japaridze. Computability logic: a formal theory of interaction. In: Interactive Computation:\nThe New Paradigm. D. Goldin, S. Smolka and P. Wegner, eds. Springer 2006, pp. 183-223.\n[18] G. Japaridze. The logic of interactive Turing reduction. Journal of Symbolic Logic 72 (2007), No.1,\npp. 243-276.\n[19] G. Japaridze. From truth to computability II. Theoretical Computer Science 379 (2007), pp. 20-52.\n[20] G. Japaridze. Intuitionistic computability logic. Acta Cybernetica 18 (2007), No.1, pp. 77\u2013113.\n[21] G. Japaridze. The intuitionistic fragment of computability logic at the propositional level. Annals of\nPure and Applied Logic 147 (2007), No.3, pp.187-227.\n[22] G. Japaridze. Cirquent calculus deepened. Journal of Logic and Computation 18 (2008), No.6, pp.\n983-1028.\n[23] G. Japaridze. Sequential operators in computability logic. Information and Computation 206 (2008),\nNo.12, pp. 1443-1475.\n[24] G. Japaridze. In the beginning was game semantics. In: Games: Unifying Logic, Language and\nPhilosophy. O. Majer, A.-V. Pietarinen and T. Tulenheimo, eds. Springer 2009, pp. 249-350.\n[25] G. Japaridze. Many concepts and two logics of algorithmic reduction. Studia Logica 91 (2009), No.1,\npp. 1-24.\n[26] G. Japaridze. Towards applied theories based on computability logic. Journal of Symbolic Logic 75\n(2010), pp. 565-601.\n[27] G. Japaridze. Toggling operators in computability logic. Theoretical Computer Science (in press).\nDOI: 10.1016/j.tcs.2010.11.037\n[28] G.Japaridze. A logical basis for constructive systems. Journal of Logic and Computation 2011,\ndoi:10.1093/logcom/exr009, 38 pages.\n[29] G.Japaridze. Introduction to clarithmetic I. Manuscript (2010) http://arxiv.org/abs/1003.4719\n[30] G.Japaridze. Introduction to clarithmetic II. Manuscript (2010) http://arxiv.org/abs/1004.3236\n[31] P. Lorenzen. Ein dialogisches Konstruktivit\u00e4tskriterium. In: Infinitistic Methods. In: PWN, Proc.\nSymp. Foundations of Mathematics, Warsaw, 1961, pp. 193-200.\n[32] I. Mezhirov and N. Vereshchagin. On abstract resource semantics and computability logic. Journal of\nComputer and System Sciences 76 (2010), pp. 356-372.\n[33] G. Sandu and A. Pietarinen. Partiality and games: propositional logic. Logic Journal of the IGPL\n9 (2001), No.1, pp. 107-127.\n\n\fFROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC\n\n55\n\n[34] M. Sevenster. A strategic perspective on IF games. In: Games: Unifying Logic, Language and\nPhilosophy. O. Majer, A.-V. Pietarinen and T. Tulenheimo, eds. Springer 2009, pp. 101-116.\n[35] T. Tulenheimo. Independence friendly logic. In: Stanford Encyclopedia of Philosophy, 2009.\nhttp://plato.stanford.edu/entries/logic-if/\n[36] G. Wang and W. Xu. From the logic of facts to the logic of tasks. Fuzzy Systems and Mathematics\n18 (2004), No.1, pp.1-8.\n[37] J. V\u00e4\u00e4n\u00e4nen. On the semantics of informational independence. Logic Journal of the IGPL 10 (2002),\npp. 337-350.\n[38] J. V\u00e4\u00e4n\u00e4nen. Dependence Logic: A New Approach to Independence Friendly Logic. London\nMathematical Society Student Texts 2007.\n[39] W. Xu and Y. Jing. Theorems in the logic of tasks. Fuzzy Systems and Mathematics 20 (2006),\nNo.6, pp. 15-20.\n[40] H. Zhang and S. Li. The description logic of tasks: from theory to practice. Chinese Journal of\nComputers 29 (2006), No.3, pp. 488-494.\n\nThis work is licensed under the Creative Commons Attribution-NoDerivs License. To view\na copy of this license, visit http://creativecommons.org/licenses/by-nd/2.0/ or send a\nletter to Creative Commons, 171 Second St, Suite 300, San Francisco, CA 94105, USA, or\nEisenacher Strasse 2, 10777 Berlin, Germany\n\n\f"}