{"id": "http://arxiv.org/abs/0904.1994v1", "guidislink": true, "updated": "2009-04-13T19:45:34Z", "updated_parsed": [2009, 4, 13, 19, 45, 34, 0, 103, 0], "published": "2009-04-13T19:45:34Z", "published_parsed": [2009, 4, 13, 19, 45, 34, 0, 103, 0], "title": "Practical post-processing for quantum-key-distribution experiments", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0904.2551%2C0904.3844%2C0904.1962%2C0904.2991%2C0904.3062%2C0904.0583%2C0904.0084%2C0904.3569%2C0904.3308%2C0904.1433%2C0904.4345%2C0904.4048%2C0904.2741%2C0904.4540%2C0904.0236%2C0904.2437%2C0904.4361%2C0904.1671%2C0904.0300%2C0904.3320%2C0904.2496%2C0904.0160%2C0904.1866%2C0904.3524%2C0904.0162%2C0904.3711%2C0904.3552%2C0904.0345%2C0904.4509%2C0904.3472%2C0904.4426%2C0904.1266%2C0904.4683%2C0904.4673%2C0904.4782%2C0904.4253%2C0904.1725%2C0904.1539%2C0904.3971%2C0904.2464%2C0904.0564%2C0904.4155%2C0904.0338%2C0904.2654%2C0904.2825%2C0904.2356%2C0904.3708%2C0904.1994%2C0904.1294%2C0904.2476%2C0904.2452%2C0904.0882%2C0904.4615%2C0904.3088%2C0904.2899%2C0904.1111%2C0904.1730%2C0904.4765%2C0904.0888%2C0904.3258%2C0904.3372%2C0904.4661%2C0904.2541%2C0904.3086%2C0904.1816%2C0904.1189%2C0904.2311%2C0904.3459%2C0904.2349%2C0904.2534%2C0904.2194%2C0904.4588%2C0904.0317%2C0904.1210%2C0904.4211%2C0904.3913%2C0904.4885%2C0904.3653%2C0904.2487%2C0904.2722%2C0904.0351%2C0904.0527%2C0904.0137%2C0904.2319%2C0904.0388%2C0904.0302%2C0904.2904%2C0904.0898%2C0904.3002%2C0904.4578%2C0904.0031%2C0904.1833%2C0904.0401%2C0904.0915%2C0904.2301%2C0904.2244%2C0904.3667%2C0904.0169%2C0904.4617%2C0904.3424%2C0904.2601&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Practical post-processing for quantum-key-distribution experiments"}, "summary": "Quantum key distribution (QKD) promises unconditionally secure key generation\nbetween two distant parties by wisely exploiting properties of quantum\nmechanics. In QKD, experimental measurements on quantum states are transformed\nto a secret key and this has to be done in accordance with a security proof.\nUnfortunately, many theoretical proofs are not readily implementable in\nexperiments and do not consider all practical issues. Therefore, in order to\nbridge this \"practical gap\", we integrate a few existing theoretical results\ntogether with new developments, in effect producing a simple and complete\nrecipe for classical post-processing that one can follow to derive a secret key\nfrom the measurement outcomes in an actual QKD experiment. This integration is\nnon-trivial and our consideration is both practical and comprehensive in the\nsense that we take into account the finiteness of the key length and consider\nthe effects on security of several essential primitives (including\nauthentication, error handling, and privacy amplification). Furthermore, we\nquantify the security of the final secret key that is universally composable.\nWe show that the finite-size effect mainly comes from phase error estimation.\nOur result is applicable to the BB84 protocol with a single or entangled photon\nsource.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0904.2551%2C0904.3844%2C0904.1962%2C0904.2991%2C0904.3062%2C0904.0583%2C0904.0084%2C0904.3569%2C0904.3308%2C0904.1433%2C0904.4345%2C0904.4048%2C0904.2741%2C0904.4540%2C0904.0236%2C0904.2437%2C0904.4361%2C0904.1671%2C0904.0300%2C0904.3320%2C0904.2496%2C0904.0160%2C0904.1866%2C0904.3524%2C0904.0162%2C0904.3711%2C0904.3552%2C0904.0345%2C0904.4509%2C0904.3472%2C0904.4426%2C0904.1266%2C0904.4683%2C0904.4673%2C0904.4782%2C0904.4253%2C0904.1725%2C0904.1539%2C0904.3971%2C0904.2464%2C0904.0564%2C0904.4155%2C0904.0338%2C0904.2654%2C0904.2825%2C0904.2356%2C0904.3708%2C0904.1994%2C0904.1294%2C0904.2476%2C0904.2452%2C0904.0882%2C0904.4615%2C0904.3088%2C0904.2899%2C0904.1111%2C0904.1730%2C0904.4765%2C0904.0888%2C0904.3258%2C0904.3372%2C0904.4661%2C0904.2541%2C0904.3086%2C0904.1816%2C0904.1189%2C0904.2311%2C0904.3459%2C0904.2349%2C0904.2534%2C0904.2194%2C0904.4588%2C0904.0317%2C0904.1210%2C0904.4211%2C0904.3913%2C0904.4885%2C0904.3653%2C0904.2487%2C0904.2722%2C0904.0351%2C0904.0527%2C0904.0137%2C0904.2319%2C0904.0388%2C0904.0302%2C0904.2904%2C0904.0898%2C0904.3002%2C0904.4578%2C0904.0031%2C0904.1833%2C0904.0401%2C0904.0915%2C0904.2301%2C0904.2244%2C0904.3667%2C0904.0169%2C0904.4617%2C0904.3424%2C0904.2601&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Quantum key distribution (QKD) promises unconditionally secure key generation\nbetween two distant parties by wisely exploiting properties of quantum\nmechanics. In QKD, experimental measurements on quantum states are transformed\nto a secret key and this has to be done in accordance with a security proof.\nUnfortunately, many theoretical proofs are not readily implementable in\nexperiments and do not consider all practical issues. Therefore, in order to\nbridge this \"practical gap\", we integrate a few existing theoretical results\ntogether with new developments, in effect producing a simple and complete\nrecipe for classical post-processing that one can follow to derive a secret key\nfrom the measurement outcomes in an actual QKD experiment. This integration is\nnon-trivial and our consideration is both practical and comprehensive in the\nsense that we take into account the finiteness of the key length and consider\nthe effects on security of several essential primitives (including\nauthentication, error handling, and privacy amplification). Furthermore, we\nquantify the security of the final secret key that is universally composable.\nWe show that the finite-size effect mainly comes from phase error estimation.\nOur result is applicable to the BB84 protocol with a single or entangled photon\nsource."}, "authors": ["Xiongfeng Ma", "Chi-Hang Fred Fung", "Jean-Christian Boileau", "H. F. Chau"], "author_detail": {"name": "H. F. Chau"}, "author": "H. F. Chau", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1016/j.cose.2010.11.001", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/0904.1994v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0904.1994v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "Comments are welcome", "arxiv_primary_category": {"term": "quant-ph", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "quant-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0904.1994v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0904.1994v1", "journal_reference": "Computers & Security Volume 30, Issue 4, June 2011, Pages 172-177", "doi": "10.1016/j.cose.2010.11.001", "fulltext": "Practical post-processing for quantum-key-distribution\nexperiments\nXiongfeng Ma,1, \u2217 Chi-Hang Fred Fung,2 Jean-Christian Boileau,3 and H. F. Chau2\n\narXiv:0904.1994v1 [quant-ph] 13 Apr 2009\n\n1\n\nInstitute for Quantum Computing and Department of Physics and Astronomy,\n\nUniversity of Waterloo, 200 University Ave W., Waterloo, ON, Canada N2L 3G1\n2\n\nDepartment of Physics and Center of Theoretical and Computational Physics,\nUniversity of Hong Kong, Pokfulam Road, Hong Kong\n3\n\nCenter for Quantum Information and Quantum Control,\n\nDepartment of Electrical & Computer Engineering and Department of Physics,\nUniversity of Toronto, Toronto, Ontario, Canada, M5S 1A7\n\nAbstract\nQuantum key distribution (QKD) promises unconditionally secure key generation between two\ndistant parties by wisely exploiting properties of quantum mechanics. In QKD, experimental measurements on quantum states are transformed to a secret key and this has to be done in accordance\nwith a security proof. Unfortunately, many theoretical proofs are not readily implementable in experiments and do not consider all practical issues. Therefore, in order to bridge this \"practical\ngap\", we integrate a few existing theoretical results together with new developments, in effect\nproducing a simple and complete recipe for classical post-processing that one can follow to derive\na secret key from the measurement outcomes in an actual QKD experiment. This integration is\nnon-trivial and our consideration is both practical and comprehensive in the sense that we take\ninto account the finiteness of the key length and consider the effects on security of several essential\nprimitives (including authentication, error handling, and privacy amplification). Furthermore, we\nquantify the security of the final secret key that is universally composable. We show that the\nfinite-size effect mainly comes from phase error estimation. Our result is applicable to the BB84\nprotocol with a single or entangled photon source.\nPACS numbers:\n\n\u2217\n\nElectronic address: xfma@iqc.ca\n\n1\n\n\fI.\n\nINTRODUCTION\n\nQuantum key distribution (QKD) [1, 2] allows two distant users to generate a secret key\nthat is guaranteed to be unconditionally secure by the laws of quantum mechanics. Initial\nwork on QKD has been focused on the investigation of its unconditional security and a few\nQKD protocols, such as the well-known BB84 protocol [1], have been proven to be secure\nin the last decade [3, 4, 5]. Since then, many QKD experiments have been performed (see,\ne.g., references in Refs. [6, 7]). In general, a QKD experiment involves a quantum state\ntransmission step (where quantum states are transmitted and measured) and a classical\npost-processing step (where the measurement outcomes are processed classically with the\nhelp of classical communication to generate a final secret key). Although standard security\nproofs (such as Ref. [5]) imply a procedure for distilling a final secret key from measurement\noutcomes, direct application to an actual QKD experiment is unfit. This is because many\nof these security proofs focus on the case that the key is arbitrarily long, which does not\nhold in practice. It is precisely this finite-size effect that leads to reduced confidence in the\nsecurity of the final key (mediated by the uncertainty in the post-processing tasks such as\nerror rate estimation and error correction). Therefore, it is imperative to quantify the finitesize effect and to provide a precise post-processing recipe that one can follow for distilling\nfinal secret keys with quantified security in real QKD experiments. This is the purpose of\nthis paper. We note that, recently, lots of efforts have spent on the finite-key effect in QKD\npost-processing, such as Refs. [8, 9].\nWhen the key size is finite, inference on error rates and error correction can no longer be\nperfect as they do in the infinite-size case. More specifically, the inferred error rates could\nbe different from the true values and there could be leftover errors after error correction.\nConsequently, a finite-length secret key generated by a QKD system cannot be perfect in the\nsense that Alice and Bob do not share the same key and/or Eve possesses some information\nabout the key. Nevertheless, the fact that the key is imperfect does not preclude it from\nbeing used in a subsequent task requiring a perfect key. In fact, if one can assign a probability\nthat the key can be regarded as an ideal one, the use of the nonideal key as an ideal one is\njustified. Indeed, this notion of security is captured by the composable security definition of\nQKD [10, 11], which is widely adopted in the field. QKD is composable in the sense that the\nfinal key generated is indistinguishable from an ideal secret key except with a small failure\n2\n\n\fprobability. Thus, the QKD key can be used for any subsequent cryptographic application\n(for instance, later rounds of QKD) requiring a perfect secret key, and the total failure\nprobability is the sum of that of the individual composable cryptographic components. In\nQKD, Alice and Bob may run a QKD system many rounds. They share a certain amount\nof secure key prior to each round, which can be used in the data post-processing step. The\nkey generated by one round could be used for the next round. Composabiblity requires\nthe key generated by all the rounds of the QKD system to be secure. In other words, an\neavesdropper, Eve, knows limited amount of information about the key (if there is any) even\nafter attacking all the rounds.\nIn this paper, a security definition with a failure probability (or confidence interval) is\nused. Our result quantifies the security of the final key generated in a QKD experiment with\na failure probability, i.e., except with this probability the final key can be treated as an ideal\nsecret key (identical and private). This is a natural security definition for experiments and\nthe aforementioned composability requirement [10, 11] is fulfilled. For instance, Alice and\nBob run a QKD system 106 times and keep the failure probability under \u03b5 for each round.\nThen the total failure probability is no larger than 106 \u03b5. As long as they keep \u03b5 well below\n10\u22126 , the key generated in this million rounds is secure. The value of \u03b5 is determined by the\nusage of the key in a real application. Note that we use probability, which is more meaningful\nfor experiments, instead of the trace distance [9], to quantify the security. Throughout the\npaper, \u03b5's with various footnotes stand for various failure probabilities.\nLet us start by examining the underlying assumptions and definitions used here. We\nemphasize that in order to apply the scheme to a QKD system, one needs to compare these\nassumptions with the real setup. The assumptions used in the paper are listed as follows:\n1. Alice and Bob perform the BB84 protocol with a perfect single photon source or a\nbasis-independent photon source [12, 13].\n2. The detection system is compatible with the squashing model [14, 15, 16], i.e., the\ninput to Bob's system is assumed to be a qubit. For example, detection efficiency\nmismatch is not considered in this paper [17].\n3. Alice and Bob use perfect random number generators.\n4. Alice and Bob use perfect key management. They share a certain amount of secure\n3\n\n\fkey prior to running their QKD system.\nThe post-processing scheme is based on a modified Shor-Prekill's security proof [5], which\nis essentially Koashi's complimentary argument [18]. In this approach, the secure key generation is equivalent to an entanglement distillation protocol, which involves bit and phase\nerror correction. In the post-processing, the bit error correction becomes classical error\ncorrection and the phase error correction becomes privacy amplification. We remark that\nour result is applicable to any physical QKD implementations that comply with the above\nassumptions, and it does not depend on the implementation details.\nThe motivation of this paper is to give a guideline for QKD data post-processing. We\nstart from raw data from measurements and some pre-shared secure key bits, and produce\na secret key with a quantified security definition. This can be a stepping stone for a QKD\nstandard. In this paper, we only present the results but not the technical details of the\nderivations, which will be presented in Ref. [19].\nThe finite key analysis is important not only from a theoretical point view, but also for\nexperiments. For example, the efficient BB84 [20] is proposed to increase the key generation\nrate. The optimal bias between the two bases, X and Z, approaches 1 in the long key limit\n[20]. In order to choose an optimal bias in the finite key case, Alice and Bob need to consider\nstatistical fluctuations. We remark that the proposed post-processing scheme ties up a few\nexisting results with some new developments. Note that this integration is non-trivial and\nour contributions are as follows:\n1. A security definition with a failure probability is used.\n2. A strict bound for the phase error estimation is derived.\n3. An authentication scheme is applied for the error verification.\n4. The efficiency of the privacy amplification is investigated.\n5. The parameter optimization is studied.\n\nII.\n\nPOST-PROCESSING PROCEDURE\n\nClassical communication is assumed to be free in many security analyses of QKD. In practice, heavy classical communication may lead to a low key generation speed, especially for\n4\n\n\fhigh-speed QKD setups. Moreover, some classical communication need to be authenticated\n(or even encrypted) in the post-processing, which means that it is not entirely free. Here,\nwe study which part of the classical communication need to be authenticated or encrypted.\nFor the authentication part, we rely on the LFSR-based Toeplitz matrix construction [21].\nThe secure key used in the post-processing comes from a pre-shared secure key between\nAlice and Bob. For each step, we investigate the secure-key cost, kxx , and the failure\nprobability, \u03b5xx .\nThe post-processing procedure is listed as follows. Note that none of following classical\ncommunication is encrypted unless otherwise stated.\n1. Key sift [not authenticated]: Bob discards no-click events and obtains n-bit raw key\nby randomly assigning [22] the double clicks [26]. Note that other key sift procedures\nmight be applied as well, see for example, Ref. [23].\n2. Basis sift [authenticated]: Alice and Bob send each other n-bit basis information. Due\nto the symmetry, we can assume they pick up the same failure probability for this\nprocedure [21]\n\u03b5bs = n2\u2212kbs +1\n\n(1)\n\nHere, Alice and Bob use a 2kbs -bit secure key to construct a Toeplitz matrix with a size\nof (n \u00d7 kbs ) by a LFSR. The authenticated tag is generated by multiplying the matrix\nand the message. Then they encrypt the two tags by two kbs -bit secure keys. Since\nthe tags are encrypted by a one-time pad, the 2kbs -bit key used for the Toeplitz matrix\nconstruction is still private [21]. Hence, the total secure-key cost in this step is 2kbs\nand the corresponding failure probability is 2\u03b5bs . Note that when Alice and Bob use\na biased basis choice [20], they can exchange less than n-bit classical information for\nbasis sift by data compression. Since the secure-key cost only logarithmically depends\non the length of the message, we simply use n for the following discussion. In the end\nof this step, Alice and Bob obtain nx (nz )-bit sifted key in X (Z) basis. Define the\nbiased ratio to be qx \u2261 nx /(nx + nz ).\n3. Error correction [not authenticated but encrypted [27]]: the secure-key cost is given\nby\nkec = nx f (ebx )H2 (ebx ) + nz f (ebz )H2 (ebz )\n5\n\n(2)\n\n\fwhere f (x) is the error correction efficiency and H2 (x) = \u2212x log2 (x)\u2212(1\u2212x) log2 (1\u2212x)\nis the binary entropy function. In practice, Alice and Bob only need to count the\namount of classical communication used in the error correction. That is, the value of\nkec can be directly obtained from the post-processing. After the error correction, Alice\nand Bob count the number of errors in X (Z) basis: ebx nx (ebz nz ).\n4. Error verification: Alice and Bob want to make sure (with a high probability) that\ntheir keys after the error correction step are identical. Note that the idea of using\nerror verification to replace error testing is proposed by L\u00fctkenhaus [22].\nComparing two procedures, authentication and error verification, one can see their\ncommonness. In order to show the link between the two procedures, we break down\nthe authentication procedure into two parts: Alice sends to Bob the message first and\nthen the tag. Let us take a look at the stage that Bob just received the message sent\nbut before the tag. Now, Alice and Bob each have a bit string. In authentication,\nAlice sends a tag (depending on her message) to Bob and Bob verify it. The claim of a\nsecure authentication scheme is that if the tag pass through Bob's test, the probability\nthat Alice and Bob share the same string is high. This can also be regarded as an\nerror verification procedure. Hence, secure authentication schemes can be used for the\nerror verification.\nNote that the only difference between the two procedures is that in general, an authentication scheme does not care whether the tag reveals information about the message\nor not, but error verification does (at least for our use in QKD post-processing). This\ndifference can be easily overcome by encrypting the tag, which has already been done\nin some authentication schemes including the one we are using.\nThus, in this procedure, Alice sends an encrypted tag of an authentication scheme to\nBob. The cost for this step, kev , similar to Eq. (1), is\n\u03b5ev = (nx + nz )2\u2212kev +1 .\n\n(3)\n\nWe remark that when Alice and Bob failed the error verification, they can go back to\nthe error correction step.\n5. Phase error rate estimation [no communication]: random sampling. Alice and Bob\ncan estimate the phase error rates in X and Z bases, epx and epz separately. Take Z\n6\n\n\fbasis for example. The probability of epz > ebx + \u03b8x is P\u03b8x [19]\n\u221a\nnx + nz\nP\u03b8x < p\n2\u2212(nx +nz )\u03bex (\u03b8x ) ,\nnx nz ebx (1 \u2212 ebx )\n\n(4)\n\nwhere the \u03bex (\u03b8x ) is defined by \u03bex (\u03b8x ) \u2261 H2 (ebx +\u03b8x \u2212qx \u03b8x )\u2212qx H2 (ebx )\u2212(1\u2212qx )H2 (ebx +\n\u03b8x ) with qx = nx /(nx + nz ). A similar formula for P\u03b8z can also be derived. Then the\ntotal failure probability of phase error rate estimation, \u03b5ph , is given by\n\u03b5ph \u2264 P\u03b8x + P\u03b8z .\n\n(5)\n\nIn a highly non-likely case when ebx = 0 (ebz = 0), one can replace it by nx ebx = 1\n(nz ebz = 1) to get around the singularity [19]. One can see that \u03bex (\u03b8x ) is positive\nwhen \u03b8x > 0 and 0 \u2264 ebx , ebx + \u03b8x \u2264 1, due to concavity of the binary entropy function\nH2 (x). Note that in the limit of a large n, \u03b8 can be chosen small. In this case, Eq. (5)\nyields a similar result used in the literature, such as Refs. [5, 13].\n6. Privacy amplification [authenticated]: Alice generates an (nx + nz + l \u2212 1)-bit random\nbit string and send to Bob through an authenticated channel. Alice and Bob use this\nrandom bit string to generate a Toeplitz matrix. The final key (with a size of l) will\nbe the product of this matrix (with a size of (nx + nz ) \u00d7 l) and the key string (with a\nsize of nx + nz ) after passing through the error verification. The failure probability of\nthe privacy amplification is given by\n\u03b5pa = (nx + nz + l \u2212 1)2\u2212kpa +1 + 2\u2212toe ,\n\n(6)\n\nwhere kpa is the secure-key cost for the authentication and toe is defined by\nl = nx [1 \u2212 H2 (ebz + \u03b8z )]\n\n(7)\n\n+ nz [1 \u2212 H2 (ebx + \u03b8x )] \u2212 toe .\nThe first term in Eq. (6) gives the failure probability of the authentication for the\n(nx + nz + l \u2212 1)-bit random bit string transmission. The second term in Eq. (6) gives\nthe failure probability of the privacy amplification given the Toeplitz matrix [28].\n7. The final secure key length (net growth [29]) is given by\nNR \u2265 l \u2212 2kbs \u2212 kec \u2212 kev \u2212 kpa\n7\n\n(8)\n\n\fwith a failure probability of\n\u03b5 \u2264 2\u03b5bs + \u03b5ev + \u03b5ph + \u03b5pa ,\n\n(9)\n\nwhere l is given by Eq. (7).\nOne can see that when nx + nz \u226b 2kbs + kev + kpa + toe , the final key length given by\nEq. (8) is essentially the same to the one given by the Shor-Preskill's proof [5].\n\nIII.\n\nPARAMETER OPTIMIZATION\n\nIn order to maximize the final secure key length in the post-processing, Alice and Bob need\nto consider the failure probabilities from all steps and the corresponding secure-key costs.\nThat is, they need to optimize the key rate, Eq. (8), subject to Eq. (9). The parameters to\nbe optimized are: biased ratio qx , various secure-key costs (kbs , kec , kev , kpa , toe ) and security\nparameters (\u03b5bs , \u03b5ev , \u03b5ph , \u03b5pa ).\nIn practice, Alice and Bob can calibrate the QKD system to get an estimate of the\ntransmittance \u03b7, the error rates ebx and ebz . Through some rough calculation of the target\nlength of the final key, they decide the acceptable confidence interval 1 \u2212 \u03b5 and fix the length\nof the experiment, N, the number pulses sent by Alice. Then roughly, the length of the raw\nkey is n = N\u03b7. Thus, in the optimization procedure, the given values (constraints) are \u03b5, n,\nebx and ebz .\nThe failure probability \u03b5 is chosen by Alice and Bob according to later practical use of\nthe final key. This relates to the aforementioned composability requirement [10, 11]. For\ninstance, Alice and Bob plan to use the QKD system for a million times, and set \u03b5 for each\nround. Then the total failure probability for this one-million-round use is 106 \u03b5, which should\nbe below some threshold depending on the message security level. From here, one can see\nthat the choice of \u03b5 is not strictly pre-determined. That is, the final security parameter, \u03b5,\ncan slightly deviate from the pre-determined one.\nDenote the probability for Alice and Bob to choose X basis to be px . After the basis sift,\nAlice and Bob share an nx -bit (nz -bit) key in X (Z) basis, where roughly (due to fluctuations)\nnx \u2248 p2x n and nz \u2248 (1\u2212px )2 n. Thus the biased ratio is given by qx \u2248 p2x /[p2x +(1\u2212px )2 ]. In a\nrealistic case, Alice and Bob can optimize px first, and then optimize other parameters after\nthe error verification part when the real values of nx , nz ebx and ebz are fixed (known). In this\n8\n\n\fprocedure, the biased ratio cannot be strictly optimized due to fluctuations and calibration\nerrors, while other parameters can be well optimized. In the end, they obtain a secure key\nrate and calculate the total failure probability with these parameters.\nThe error correction and phase error rate estimation mainly depend on the biased ratio.\nThus, Alice and Bob can group the failure probabilities and secure key costs into two parts\nby defining \u03b53 \u2261 2\u03b5bs + \u03b5ev + \u03b5pa and k3 \u2261 2kbs + kev + kpa + toe , see Eqs. (7), (8) and (9).\nThe final secure key length can be rewritten as\nNR \u2265 nx [1 \u2212 f (ebx )H2 (ebx ) \u2212 H2 (ebz + \u03b8z )]\n\n(10)\n\n+ nz [1 \u2212 f (ebz )H2 (ebz ) \u2212 H2 (ebx + \u03b8x )] \u2212 k3 .\nWe remark that if the contribution from one basis is negative in Eq. (10), Alice and Bob\nshould use the detections from this basis for the parameter estimation only, but not the key\ngeneration.\nThe optimized secure-key cost for each step is given by [19]\ntoe =\n\nk3 4 1\n\u2212 \u2212 log2 A\n5\n5 5\n\nkbs = toe + 1 + log2 n\n\n(11)\n\nkev = toe + 1 + log2 (nx + nz )\nkpa = toe + 1 + log2 (nx + nz + l \u2212 1),\nwhere A = n2 (nx + nz )(nx + nz + l \u2212 1). The corresponding failure probability is\n\u03b53 = 5A1/5 2\u2212(k3 \u22124)/5 .\n\n(12)\n\nWhen the final key length is much larger than 37 bits, Alice and Bob can set\nk3 = \u22125 log2 \u03b5 + 4 log2 n + 50\n\n(13)\n\nand the failure probability is \u03b53 < 10\u22122 \u03b5. Since Alice and Bob will recalculate the failure\nprobability in the end and allow the final \u03b5 having small deviations from the pre-determined\nvalue, they can safely use \u03b5ph = \u03b5 in the optimization. Thus, the simplified optimization\nproblem only has three parameters to be optimized: qx , \u03b8x and \u03b8z , given \u03b5ph = \u03b5 \u2212 \u03b53 \u2248 \u03b5.\nObservation 1. The main effect of the finite key analysis for the QKD post-processing\nstems from the phase error rate estimation. Inefficiencies due to authentication, bit error\ncorrection, and privacy amplification are relatively insignificant.\n9\n\n\fThis can be easily seen from Eqs. (12) and (13). Even in an extreme case that \u03b5 = 10\u221230\nand n = 1030 , the secure key cost of all the parts other than the phase error rate estimation,\ngiven by Eq. (13), is 947 bits (\u226a n) and its corresponding failure probability \u03b53 < 10\u221232 .\n\nIV.\n\nAN EXAMPLE\n\nNow let us consider an example of the post-processing. Suppose N = 1010 , \u03b7 = 10\u22123 ,\n(then n \u2248 N\u03b7 = 107 ), ebx = ebz = 4% and \u03b5 = 10\u22127 . It is not hard to see that the final key\nlength is much larger than 30 bits. Thus, we can use Eq. (13) to calculate the secure-key\ncost, k3 = 202 bit.\nNow the problem becomes: given n = 107 , ebx = ebz = 4% and \u03b5 = 10\u22127 , optimize the\nparameters: \u03b8x , \u03b8z and qx . Through a numerical program, we get \u03b8x = 1.07%, \u03b8z = 0.84% and\nqx = 99.8% (or px = 96.0%). Note that, in this case, the bases X and Z are interchangeable\ndue to the symmetry.\nWith these parameters and Eq. (11), the final secure key length is 4.41 Mb and its\ncorresponding security parameter is \u03b5 = 1.0095 \u00d7 10\u22127 (very close to the predetermined\nvalue 10\u22127 ).\nIn the simulation, we assume the error correction efficiency is 100% (the Shannon limit).\nIn this case, the difference between the \"asymptotic-key\" length (5.15 Mb) and the \"finitekey\" length (4.41 Mb) comes from the finite statistical analysis. Note that all the rest cost is\nonly k3 = 259 bit and \u03b53 = 9.5 \u00d7 10\u221210 . This is consistent with Observation 1: the cost (and\nthe failure probability) due to the finite key analysis mainly comes from the phase error rate\nestimation.\n\nV.\n\nFURTHER DISCUSSION\n\n1. In the privacy amplification step, Alice and Bob need a common matrix to generate\nthe final secure key. The current way to construct the matrix is by Alice sending a\nrandom bit string to Bob, which requires authenticated classical communication. An\nalternative way is by each of them generating a matrix with a pre-shared secret key.\nThe main advantage of the second method is that no classical communication is needed\nfor the privacy amplification part. In this case, the error verification step can be done\n\n10\n\n\fbefore or after the privacy amplification.\nFrom the LFSR-based Toeplitz matrix construction, we know that Toeplitz matrices\ncan be generated by a much shorter random string [24]. By consuming a kpa -bit secure\nkey, Alice and Bob construct a LFSR-based Toeplitz matrix with a size of (nx +nz )\u00d7l,\nwhere l the key length after the privacy amplification. There are two related quantities\nneed to be investigated here: the value of l and its corresponding failure probability,\n\u03b5pa .\n2. In the security proof, we assume the detection system is compatible with the squashing\nmodel, where the single-mode assumption is used, and the imperfection of X and Z\nmeasurements and efficiency mismatch are not considered [16]. It is interesting to\nconsider the detector efficiency mismatch with the finite key analysis [17].\n3. As noted in Ref. [25], the finite-key analysis for the decoy-state QKD is a hard problem. In the decoy-state QKD, the fluctuation comes from not only statistics but also\nhardware imperfections. The question is where the main contribution of the fluctuation comes from and how to quantify these fluctuations. Since QKD systems with\ncoherent states are most widely used in experiments, investigating the finite key effect\nin decoy-state QKD is an important step towards a QKD standard.\n4. In order to compare our finite-key analysis to others, such as the one by Scarani and\nRenner [9], one has to make sure the underlying assumptions (definitions) are the\nsame. Note that in Scarani and Renner's analysis, a trace distance is used as for the\nsecurity definition. For example, it is interesting to investigate how to quantify the\nefficiency of authentication with the trace distance.\n\nVI.\n\nACKNOWLEDGMENTS\n\nWe thank C. Erven, N. Godbout, M. Hayashi, D. W. Leung, H.-K. Lo, N. L\u00fctkenhaus,\nM. Koashi, X. Mo, B. Qi, R. Renner, V. Scarani, D. Stebila, K. Tamaki, W. Tittel, Q. Wang,\nY. Zhao and other participants to the workshop Quantum Works QKD Meeting (Waterloo,\nCanada) and Finite Size Effects in QKD (Singapore) for enlightening discussions. X. Ma\nespecially thanks H. F. Chau for hospitality and support during his visit at the University of\n\n11\n\n\fHong Kong. This work is supported from the NSERC Innovation Platform Quantum Works,\nthe NSERC Discovery grant, the FWF (START prize), the University of Waterloo, the\nRGC grant No. HKU 701007P of the HKSAR Government and the Postdoctoral Fellowship\nprogram of NSERC.\n\n[1] C. H. Bennett and G. Brassard, in Proceedings of IEEE International Conference on Computers, Systems, and Signal Processing (IEEE, New York, Bangalore, India, 1984), pp. 175\u2013179.\n[2] A. K. Ekert, Phys. Rev. Lett. 67, 661 (1991).\n[3] D. Mayers, Journal of the ACM 48, 351406 (2001).\n[4] H.-K. Lo and H.-F. Chau, Science 283, 2050 (1999).\n[5] P. W. Shor and J. Preskill, Phys. Rev. Lett. 85, 441 (2000).\n[6] N. Gisin, G. Ribordy, W. Tittel, and H. Zbinden, Rev. of Mod. Phys. 74, 145 (2002).\n[7] H.-K. Lo and N. L\u00fctkenhaus, Physics in Canada 63, 191 (2007).\n[8] M. Hayashi, Physical Review A 74, 022307 (2006).\n[9] V. Scarani and R. Renner, Physical Review Letters 100, 200501 (2008).\n[10] M. Ben-Or, M. Horodecki, D. W. Leung, D. Mayers, and J. Oppenheim, in TCC (2005), pp.\n386\u2013406.\n[11] R. Renner and R. K\u00f6nig, in TCC (2005), pp. 407\u2013425.\n[12] M. Koashi and J. Preskill, Phys. Rev. Lett. 90, 057902 (2003).\n[13] X. Ma, C.-H. F. Fung, and H.-K. Lo, Phys. Rev. A 76, 012307 (2007).\n[14] M. Koashi, arXiv:quant-ph/0609180 (2006).\n[15] T. Tsurumaru and K. Tamaki, Phys. Rev. A 78, 032302 (2008).\n[16] N. J. Beaudry, T. Moroder, and N. L\u00fctkenhaus, Phys. Rev. Lett. 101, 093601 (2008).\n[17] C.-H. F. Fung, K. Tamaki, B. Qi, H.-K. Lo, and X. Ma, Quant. Inf. Comput. 9, 0131 (2009).\n[18] M. Koashi, J. Phys. Conf. Ser. 36, 98 (2006).\n[19] under preparation (2009).\n[20] H.-K. Lo, H.-F. Chau, and M. Ardehali, Journal of Cryptology 18, 133 (2005).\n[21] H. Krawczyk, in Advances in Cryptology - CRYPTO'94 (Springer-Verlag, 1994), vol. 893, pp.\n129\u2013139.\n[22] N. L\u00fctkenhaus, Phys. Rev. A 59, 3301 (1999).\n\n12\n\n\f[23] X. Ma, T. Moroder, and N. L\u00fctkenhaus, arXiv:0812.4301 (2008).\n[24] H. Krawczyk, in Advances in Cryptology - EUROCRYPT'95 (Springer-Verlag, 1995), vol. 921,\npp. 301\u2013310.\n[25] X. Ma, B. Qi, Y. Zhao, and H.-K. Lo, Phys. Rev. A 72, 012326 (2005).\n[26] In the case of a passive-basis-selection setup, Bob also randomly assigns basis value X or Z\nfor double clicks [16].\n[27] The error correction step may be done without encryption using other security proof techniques. In this case, there may be some restriction on the error correction procedure and more\nprivacy amplification may be required.\n[28] In the equivalent entanglement distillation protocol used for the security proof [5, 18], the\nsecond term in Eq. (6) gives the failure probability of the phase error correction.\n[29] Since QKD is a key expansion process, it requires some pre-shared secret bits to start with\nand thus they have to be accounted for when calculating the final key length.\n\n13\n\n\f"}