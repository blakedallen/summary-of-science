{"id": "http://arxiv.org/abs/0804.2349v1", "guidislink": true, "updated": "2008-04-15T10:26:40Z", "updated_parsed": [2008, 4, 15, 10, 26, 40, 1, 106, 0], "published": "2008-04-15T10:26:40Z", "published_parsed": [2008, 4, 15, 10, 26, 40, 1, 106, 0], "title": "Secure Remote Voting Using Paper Ballots", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0804.2256%2C0804.3215%2C0804.2782%2C0804.1635%2C0804.2058%2C0804.1413%2C0804.3550%2C0804.2899%2C0804.0472%2C0804.4866%2C0804.3024%2C0804.2640%2C0804.2445%2C0804.0065%2C0804.3822%2C0804.3762%2C0804.3558%2C0804.3086%2C0804.3299%2C0804.1692%2C0804.4647%2C0804.2822%2C0804.1514%2C0804.0877%2C0804.1888%2C0804.0755%2C0804.0412%2C0804.1967%2C0804.0119%2C0804.3728%2C0804.3680%2C0804.3371%2C0804.2349%2C0804.0835%2C0804.3662%2C0804.1206%2C0804.2368%2C0804.0243%2C0804.4029%2C0804.1415%2C0804.0333%2C0804.0028%2C0804.0239%2C0804.4326%2C0804.2254%2C0804.4179%2C0804.3990%2C0804.1556%2C0804.1800%2C0804.1100%2C0804.1292%2C0804.4175%2C0804.1664%2C0804.4114%2C0804.4407%2C0804.2811%2C0804.0522%2C0804.3438%2C0804.4725%2C0804.2376%2C0804.3582%2C0804.0336%2C0804.2250%2C0804.2230%2C0804.0476%2C0804.4563%2C0804.0405%2C0804.2279%2C0804.0730%2C0804.3528%2C0804.0024%2C0804.1773%2C0804.3454%2C0804.1075%2C0804.4057%2C0804.2268%2C0804.2146%2C0804.2972%2C0804.4333%2C0804.3079%2C0804.1249%2C0804.3452%2C0804.0141%2C0804.1034%2C0804.3625%2C0804.2726%2C0804.2930%2C0804.3208%2C0804.2608%2C0804.4080%2C0804.3984%2C0804.3067%2C0804.2504%2C0804.3065%2C0804.4322%2C0804.3176%2C0804.0115%2C0804.1178%2C0804.2123%2C0804.1276%2C0804.2766&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Secure Remote Voting Using Paper Ballots"}, "summary": "Internet voting will probably be one of the most significant achievements of\nthe future information society. It will have an enormous impact on the election\nprocess making it fast, reliable and inexpensive. Nonetheless, so far remote\nvoting is considered to be very difficult, as one has to take into account\nsusceptibility of the voter's PC to various cyber-attacks. As a result, most\nthe research effort is put into developing protocols and machines for poll-site\nelectronic voting. Although these solutions yield promising results, they\ncannot be directly adopted to Internet voting because of secure platform\nproblem. However, the cryptographic components they utilize may be very useful.\nThis paper presents a scheme based on combination of mixnets and homomorphic\nencryption borrowed from robust poll-site voting, along with techniques\nrecommended for remote voting -- code sheets and test ballots. The protocol\ntries to minimize the trust put in voter's PC by making the voter responsible\nfor manual encryption of his vote. To achieve this, the voter obtains a paper\nballot that allows him to scramble the vote by performing simple operations\n(lookup in a table). Creation of paper ballots, as well as decryption of votes,\nis performed by a group of cooperating trusted servers. As a result, the scheme\nis characterized by strong asymmetry -- all computations are carried out on the\nserver side. In consequence it does not require any additional hardware on the\nvoter's side, and offers distributed trust, receipt-freeness and verifiability.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0804.2256%2C0804.3215%2C0804.2782%2C0804.1635%2C0804.2058%2C0804.1413%2C0804.3550%2C0804.2899%2C0804.0472%2C0804.4866%2C0804.3024%2C0804.2640%2C0804.2445%2C0804.0065%2C0804.3822%2C0804.3762%2C0804.3558%2C0804.3086%2C0804.3299%2C0804.1692%2C0804.4647%2C0804.2822%2C0804.1514%2C0804.0877%2C0804.1888%2C0804.0755%2C0804.0412%2C0804.1967%2C0804.0119%2C0804.3728%2C0804.3680%2C0804.3371%2C0804.2349%2C0804.0835%2C0804.3662%2C0804.1206%2C0804.2368%2C0804.0243%2C0804.4029%2C0804.1415%2C0804.0333%2C0804.0028%2C0804.0239%2C0804.4326%2C0804.2254%2C0804.4179%2C0804.3990%2C0804.1556%2C0804.1800%2C0804.1100%2C0804.1292%2C0804.4175%2C0804.1664%2C0804.4114%2C0804.4407%2C0804.2811%2C0804.0522%2C0804.3438%2C0804.4725%2C0804.2376%2C0804.3582%2C0804.0336%2C0804.2250%2C0804.2230%2C0804.0476%2C0804.4563%2C0804.0405%2C0804.2279%2C0804.0730%2C0804.3528%2C0804.0024%2C0804.1773%2C0804.3454%2C0804.1075%2C0804.4057%2C0804.2268%2C0804.2146%2C0804.2972%2C0804.4333%2C0804.3079%2C0804.1249%2C0804.3452%2C0804.0141%2C0804.1034%2C0804.3625%2C0804.2726%2C0804.2930%2C0804.3208%2C0804.2608%2C0804.4080%2C0804.3984%2C0804.3067%2C0804.2504%2C0804.3065%2C0804.4322%2C0804.3176%2C0804.0115%2C0804.1178%2C0804.2123%2C0804.1276%2C0804.2766&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Internet voting will probably be one of the most significant achievements of\nthe future information society. It will have an enormous impact on the election\nprocess making it fast, reliable and inexpensive. Nonetheless, so far remote\nvoting is considered to be very difficult, as one has to take into account\nsusceptibility of the voter's PC to various cyber-attacks. As a result, most\nthe research effort is put into developing protocols and machines for poll-site\nelectronic voting. Although these solutions yield promising results, they\ncannot be directly adopted to Internet voting because of secure platform\nproblem. However, the cryptographic components they utilize may be very useful.\nThis paper presents a scheme based on combination of mixnets and homomorphic\nencryption borrowed from robust poll-site voting, along with techniques\nrecommended for remote voting -- code sheets and test ballots. The protocol\ntries to minimize the trust put in voter's PC by making the voter responsible\nfor manual encryption of his vote. To achieve this, the voter obtains a paper\nballot that allows him to scramble the vote by performing simple operations\n(lookup in a table). Creation of paper ballots, as well as decryption of votes,\nis performed by a group of cooperating trusted servers. As a result, the scheme\nis characterized by strong asymmetry -- all computations are carried out on the\nserver side. In consequence it does not require any additional hardware on the\nvoter's side, and offers distributed trust, receipt-freeness and verifiability."}, "authors": ["Lukasz Nitschke"], "author_detail": {"name": "Lukasz Nitschke"}, "author": "Lukasz Nitschke", "links": [{"href": "http://arxiv.org/abs/0804.2349v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0804.2349v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.CR", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.CR", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0804.2349v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0804.2349v1", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "Secure Remote Voting Using Paper Ballots\nLukasz Nitschke\n\narXiv:0804.2349v1 [cs.CR] 15 Apr 2008\n\nAdam Mickiewicz University, Pozna\u0144, Poland\n\nAbstract. Internet voting will probably be one of the most significant\nachievements of the future information society. It will have an enormous\nimpact on the election process making it fast, reliable and inexpensive.\nNonetheless, so far remote voting is considered to be very difficult, as\none has to take into account susceptibility of the voter's PC to various\ncyber-attacks. As a result, most the research effort is put into developing protocols and machines for poll-site electronic voting. Although\nthese solutions yield promising results, they cannot be directly adopted\nto Internet voting because of secure platform problem. However, the\ncryptographic components they utilize may be very useful. This paper\npresents a scheme based on combination of mixnets and homomorphic\nencryption borrowed from robust poll-site voting, along with techniques\nrecommended for remote voting \u2013 code sheets and test ballots. The protocol tries to minimize the trust put in voter's PC by making the voter\nresponsible for manual encryption of his vote. To achieve this, the voter\nobtains a paper ballot that allows him to scramble the vote by performing\nsimple operations (lookup in a table). Creation of paper ballots, as well\nas decryption of votes, is performed by a group of cooperating trusted\nservers. As a result, the scheme is characterized by strong asymmetry\n\u2013 all computations are carried out on the server side. In consequence it\ndoes not require any additional hardware on the voter's side, and offers\ndistributed trust, receipt-freeness and verifiability.\n\n1\n\nIntroduction\n\nIf we take a critical look on the traditional voting methods that we have been\nusing for years, we can observe many opportunities for fraud along with the\ninability of the citizens to verify the election results. This gives a strong motivation for computer scientists to design electronic mechanisms that could realize\nvoting, and that would not only disable cheating and allow checking, but also\nlower the costs and increase availability. Unfortunately, such electronic solutions,\ncontrary to traditional voting, have to face an inherent threat that any security\nhole may allow massive abuse (this is an exemplification of a general phenomena well described by Schneier [1], and denoted as class break ). More formally\nelectronic voting should meet the following requirements.\n\u2013 Anonymity, privacy \u2013 voters' choice should remain their secret.\n\u2013 Receipt-freeness \u2013 voter should be unable to convince a third party of the\nvote decision and, as a consequence, should be unable to sell his or her vote.\n\n\fThis property is also achieved if the voter has effective measures of deceiving\na potential buyer.\n\u2013 Verifiability \u2013 voter should be able to check correctness of every stage of the\nprotocol. He or she should be empowered to verify the tallying process (global\nverifiability) and check if his or her vote was included (individual verifiability). Usually individual verifiability requires a lookup in a public catalog,\nwhereas, global verifiability demands performing some computations. This\nimplies the fact that an average voter delegates global verifiability to experts\nor watchdog organizations.\nThree approaches to the problem of electronic voting have been proposed so\nfar [2] [3].\n\u2013 Poll-site voting also denoted as DRE (Direct Recording by Electronics)\n\u2013 special voting machines with dedicated software are installed in voting\nbooths at polling stations. Voters can cast votes by interacting with such a\nmachine, and in some cases he or she can receive a receipt for verification.\nThe terminal and the environment can be controlled. Moreover, some steps\nof the protocol may by performed by an election official, for instance the\nvoter can be personally authorized.\n\u2013 Kiosk voting \u2013 voting takes place through publicly available terminals (e.g.\nsophisticated ATMs or dedicated state-owned machines). In this scenario\nonly the terminal can be controlled.\n\u2013 Voting via Internet performed by a client-server application, run by voter's\nPC/mobile phone/PDA/smart card, and on the server side, by trusted authority or authorities. Neither the terminal not the environment can be controlled.\nPoll-site voting. Recently, the effort of researchers is mostly put into developing\nprotocols and machines for poll-site voting. Among the listed approaches, this\nis the least demanding from the security perspective, as we can assume control\nof the voter, and on the environment (the officials are present at the poll-site).\nSeveral well designed solutions have been proposed so far, including: [4] [5] [6] [7].\nThe machines used at polling stations produce encrypted ballots. The verification\nof the encryption process takes place through printing two ballots and letting\nthe voter choose which to check. The chosen ballot is compromised by providing\n(usually printing) additional data which allows verification. The process requires\na computer program and equipment (e.g. scanner). In practice, the verification\nis meant to be carried out by watchdog organizations that collect the ballots\nat polling stations or somewhere else. As a consequence, the remaining ballot is\nbelieved to be properly constructed and is used to cast a vote. The ballot without\nadditional data cannot serve as an evidence for vote selling purposes (receiptfreeness). Encrypted votes are published and processed by election authorities\nto obtain the final result. Every voter can check if his or her encrypted vote\nparticipated. Correctness of the processing can be universally verified. Interactive\ntesting of machine encryption plus verification of the processing give strong\nassurance that cheating is impossible. Although verifiability and receipt-freeness\n\n\fwere successfully adopted to poll-site voting, they cannot be easily applied to\nInternet voting by employing the same techniques (interactive testing). This is\nthe consequence of the following observations.\n\u2013 We cannot replace dedicated machines with voters' personal computers. This\nis caused by the fact that a PC is not tamper-proof, and may leak secret information to the voter, enabling vote selling. For instance, interactive checking\nof ballots relies on the assumption that the voter does not learn verification\ndata for the proper ballot.\n\u2013 It is difficult and expensive to reduce the size of voting machines used in\npoll-site voting to make them portable (integrated printer and other implementation aspects).\n\u2013 Verification of ballots requires either a trusted testing device or a third party\norganization.\nRemote voting. The remote voting approach is the most convenient and costeffective. It also reflects the needs of the modern society. Nonetheless, it is considerably more challenging, as we have to take into account various cyber-attacks\n(possibly launched from a hostile country), and less control of the voter [8] [3].\nVulnerabilities of voter's PC may open the door to many serious abuses, e.g.\nautomated vote selling or malicious changing of votes. Several countermeasures\nhave been proposed to minimize the trust put in voter PC. Apart from the expensive ones (trusted hardware) and the idealistic ones (clean operating system)\ncode sheets, and test ballots seem to be promising [3]. Code sheets impose a\ncomplete asymmetry in the computational sense \u2013 no computations are done on\nthe voter's side. This is achieved by providing voters with ballots that contain\nunique codes representing candidates (different set of codes for each ballot). Each\ncandidate code has a verification code assigned to it. The PC is used to pass the\nentered code on to the election authority, which returns the relevant verification code. The response is displayed by the PC, integrity of remotely cast vote.\nHonest election authority may prevent cyber-attacks, but a dishonest one can\ntry to influence elections results or breach voter's privacy. An exemplification\nof code sheets scheme is SureVote system [9]. Test ballots is an approach that\nsuggests introducing special ballots in the voting stage. The ballots should be\nunrecognizable for the tallying authorities, so that they are unable to predict for\nwhich ballots they will have to reveal processing after publication of the result.\nIn addition to the SureVote system, there are attempts to solve the untrusted\nplatform problem by utilizing trusted hardware ([10]), but these solutions have\nto face a serious threat of malicious producers and kleptography [11].\n\n2\n2.1\n\nSketch of the new protocol\nDesign goals\n\nDesign of the presented protocol was motivated by four main aims.\n\u2013 Providing verification and receipt-freeness at the same time.\n\n\f\u2013 Easy and inexpensive integration with traditional elections. It means that\nno additional hardware on the client side is required and that remote voters\nmay be recognized before traditional elections start to prevent double voting.\n\u2013 Reduction of trust put in voter's PC and software it runs, by assuring that\nvoter's computer is unable to record and change choices made by its user\n(neither randomly nor intentionally).\n\u2013 Distribution of trust put in authorities.\nThe main idea of the protocol is that the voter encrypts his vote manually\nby performing simple operations on his paper ballot. This assumption creates a\nneed for a scrambling method that is feasible to perform on a piece of paper.\nPermutations, or cyclic rotations in particular, lend themselves naturally to this\ngoal. Operations performed by the voter can be inverted by a group of cooperating servers that perform distributed computations. This is how the trust is\ndistributed, and contrary to code sheets, the process of decrypting votes can be\npublicly controlled. This model also includes distributed creation of paper ballots. The ballot can be interactively tested using similar techniques as in poll-site\nmachines.\n2.2\n\nActors\n\nApart from the voters, the protocol employs the following trusted authorities.\n\u2013 EC1 (Election Committee 1 ) - provides an on-line voting service, whose\nusers are authorized using known protection mechanisms. Communication\nwith EC1 can be established through an authenticated (in both directions),\nprivate channel.\n\u2013 EC2 (Election Committee 2 ) - prints paper ballots used to encrypt user\nchoice.\n\u2013 A1 , A3 , ..., A\u03bb \u2013 authorities that participate in the process of creating paper\nballots, and in the process of decrypting votes, they assure also distribution\nof trust and audit.\n\u2013 BB \u2013 bulletin board, provides an authenticated public channel \u2013 allows to\npublish and then access signed messages.\n2.3\n\nThe protocol from the voter's perspective\n\n1. (Registration) Registration procedure should be similar to applying for an\nelectronic bank account. A citizen fills in an application form and submits it\npersonally to the local administration office where he is personally authorized\n(based on his signature and ID card). After a reasonable period of time\nthe voter is able to receive his elections kit from EC1 . The kit contains\ncredentials which enable remote authentication of the user. The methods\nused here may be similar to the ones used in e-banking, e.g. PIN, password,\none-time passwords, token. A token integrated with electronic ID card or\nsignatures-enabled ID is considered to be an optimal solution.\n\n\f2. (Obtaining of paper ballot) A few months before elections a citizen, who is\nwilling to cast his vote via Internet is obliged to visit the local administration\noffice in order to obtain a paper ballot, and to be personally authorized. It\nis assumed that the voter has already gained access to the election service\n(see: registration). The voter chooses two ballots, then decides which one\nshould be verified. The selected ballot is recoded by an election official, and\ncan be verified by the voter or by a civic committee. The other ballot is\nseparated from the part containing validation data, and serves as proper\nmeans of casting a vote. The validation data is destroyed in the presence of\nthe voter.\n3. (Manual encryption) Every ballot has a simple operation assigned to it. The\ntransformation is represented by a table so that it is easy for the voter to\nencode his or her candidate number v by the value v + sh mod c. The voter\nmarks the candidate's number and reads the underlying encryption of the\nvote.\n4. (Vote submission) The voter log into the voting system, enters id and the\nencrypted vote.\n5. (Publication of encrypted votes) EC1 publishes voters' names along with\nencrypted votes on the BB.\n6. (Verification) Voter checks if his vote reached bulletin board in an unchanged\nform.\n7. (Vote results publication) The votes are decrypted by trusted authorities\nA1 , A3 , . . . , A\u03bb and published.\n\n3\n\nBuilding blocks\n\nMost of the building blocks we employ are based on the ElGamal public key\ncryptosystem. Let p be a large prime, g a generator in Zp and x a random\nelement of Zp . We define: ElGamal private-public key pair as (x; p, g, y(= g x\nmod p)), ElGamal encryption function ey (m) = (my k , g k ) and decryption function dx (a, b) = a/bx Owner A of asymmetric keys (x; p, g, y) can prove noninteractively that a given cipertext (a, b) is an encryptption of message m using\na zero-knolege proof of equality of discete logs (logb (a/m) = logg (y)) [12]. We\nwill denote the proof as nizk(m, (a, b)).\n3.1\n\nMix Networks\n\nOne of the most important branches in research of electronic voting are protocols\nbased on mix networks. Mix network protocols allow to shuffle a list of encrypted\nmessages in a distributed way by \u03bb trusted parties (mix servers). Each party Ai\nsequentially permutes and transforms elements on the list. The resulting list is\npassed on to the next mix server via an authenticated public channel (BB).\nTransformations carried out by a single server obfuscate relations between input\nand output elements. Therefore, it is hard to determine the secret permutation\nof a single sever, and in consequence the global permutation of the whole mixnet.\nWe need two functions to perform distributed shuffling:\n\n\f\u2013 o(m) \u2013 creates an initial encrypted form (called onion) of m that passes\nthrough the mix servers\n\u2013 tk (c) \u2013 transforms cipher text c into c0 so that: c0 encrypts the same message as c, and it is difficult to prove this fact without the knowledge of the\nrandomizing value k.\nThere are different types of mixnets, depending on the transformation function. We will employ partially decrypting mixnets . This type of mixnet is characterized by the fact that each server partially decrypts elements on its input\nlist and the last server yields messages. Such a mixnet based on ElGamal can\nbe build by defining the o and t functions as follows [13]: ok (m) = ey1 y2 ...y\u03bb (m),\ntk ((a, b)) = (a(yi+1 yi+2 ...y\u03bb )k /bxi , b * g k ). Where (xi , yi ) are Ai asymmetric keys.\nRandomized Partial Checking A mix network protocol can be employed as\na component of electronic voting if it can be guaranteed that none of the list\nelements was replaced or maliciously altered. This property called robustness is\nprovided by additional checking. Randomized Partial Checking is a fairly simple\nand effective verifying technique which was introduced in [14]. The mix servers\nare obliged to reveal a random half of their input-output relations, with the\nassurance that no path of length greater than 2 can be uncovered. To achieve\nthis property the servers are paired, and forced to uncover complementary halves\nof their transformations.\nIn more detail, RPC consists of the following steps:\n1. (Before shuffling) The mix servers publish commitments to their permutations (pcommit(\u03c0) = (commit(\u03c0(1)), ..., commit(\u03c0(n)))).\n2. (After shuffling) The servers establish a fairly chosen value r = r1 \u2295r2 \u2295...\u2295r\u03bb\n\u2013 each server contributes its ri using commitments, so that no party is able\nto determine r. Then a value q = hash(r, content(BB)) is computed, and\nqi = hash(q, i) are derived. Values qi determine transitions to be revealed\nin pair i. To prove validity of a selected transition of j-th input server Ai\npublishes a value validator(i, j) that may consist of decommit(\u03a0i (j)), kij ,\nwhere kij is the randomization value used in the j-th transformation.\n3.2\n\nHomomorphic Encryption and Re-encryption\n\nThe ElGamal scheme has the property that having two encrypted messages, one\ncan calculate the ciphertext of multiplication of the two messages. This can be\nachieved by simply multiplying the two ciphertexts. This property is known as\n(*, *)-homomorphism. For the sake of this paper (*, +)-homomorphism is more\nuseful. However, this requires a small modification of the original ElGamal.\n\u2013 hey (m1 ) = (hm1 * y k1 , g k1 ), he(m2 ) = (hm2 * y k2 , g k2 )\n\u2013 hey (m1 ) * hey (m2 ) = (hm1 * y k1 * hm2 * y k2 , g k1 * g k2 ) = (hm1 +m2 * y k , g k ) =\nhey (m1 + m2 )\n\n\fhm is obtained from hey (m) by performing regular ElGamal decryption, then m\nis found through exhaustive search or lookup in a precomputed table. Note, that\nif we take p such that a large prime q|p \u2212 1 and a small r|p \u2212 1 then assuming\nthat ord(g) = q and ord(h) = r we can perform encrypted additions in Zr .\n3.3\n\nComputing Mixnet\n\nIf we combine mixnets with the idea of homomorphic encryption we obtain a\nprotocol for distributed computation that has the property that it obfuscates the\nrelations between input and output values. Computations performed by such a\nnetwork can be used to anonymously invert the adding operation (cyclic rotation)\nperformed by the voter. We now obtain two new o(*), t(*) functions:\n\u2013 hok (m) = hey1 y2 ...y\u03bb (m),\n\u2013 htk,l ((a, b)) = (a * hl * (yi+1 yi+2 ...y\u03bb )k /bxi , b * g k ), l is a value added in a given\ntransformation.\n\n4\n4.1\n\nThe Protocol\nSetup\n\nNotation: n \u2013 number of paper ballots, c \u2013 number of candidates; p \u2013 secure,\npublic prime, such that a large prime q|p \u2212 1 and c|p \u2212 1, g, h \u2013 generators in Zp\nof order q, c respectively; (xi ; p, g, yi ) \u2013 Ai asymmetric keys; (xEC2 ; p, g, yEC2 )\n\u2013 EC2 asymmetric key. Before elections start the following steps need to be\nfulfilled.\n1. EC1 chooses a permutation \u03c00 : Zn \u2192 Zn , and publishes the commitment.\nEC1 \u2212\u2192 BB : pcommit(\u03c00 )\n2. Each Ai :\n(a) chooses a permutation \u03c0i : Zn \u2192 Zn , and a vector of small integers\n(lij < c): li = (li,1 , li,1 , ..., li,n );\n(b) publishes the commitment to its permutation and to the values lij\nAi \u2212\u2192 BB : pcommit(\u03c0i ), commit(li ).\n4.2\n\nActions of the protocol\n\nCreation of ballots. Creation of paper ballots involves sending n pairs of partially\ndecrypting onions through the mixnet. The first onion in a pair carries an identifier of the input position, while the second one uses homomorphic encryption\nto accumulate the sum sh that forms the cyclic rotation printed on the paper\nballot.\nc0,j = ey1 y2 ...y\u03bb yEC2 (\u03c00 (j)), hc0,j = (1, 1), j = 1, .., n\n\n\fEC1 \u2212\u2192 BB : (c0,j ), (hc0,j )\nThe pairs of onions are then being processed by the authorities Ai (ci,j =\ntki,j ,li,j (hci\u22121,j ), hci,j = htki,j ,li,j (hci\u22121,j )), i = 1, 2, ..., \u03bb \u2212 1 and passed on\nto the next authority through the bulletin board. Note that the resulting identifiers and values sh remain secret to the public audience, as they are encrypted\nwith EC2 public key.\nDistribution and checking of ballots. Each voter V personally obtains two paper\nballots. He or she chooses one for verification and learns its validation values. The\nballot identifier is scanned by an election official and marked as invalid by EC2\n\u02c6 sh,\n\u02c6 \u0109\u03bb,k , hc\n\u02c6 \u03bb,k (relevant\non the BB. The values it contains can be verified: id,\nv\u0302 \u02c6\n\u02c6\noutput onions), nizk(id, \u0109\u03bb,k ), nizk(h , hc\u03bb,k ) (proofs). The other ballot provides\nthe voter with id, sh, which are used for voting.\nCasting votes. Each voter V encrypts his vote v obtaining ev = v + sh mod c.\nEncrypted vote is sent along with id to EC1 through an authenticated channel.\nauth\n\nV \u2212\u2192 EC1 : id, ev\nThe election authority publishes position on the input list p = \u03c00\u22121 (id), voter's\n0\n0\nidentifier, his encrypted vote, the onion hc00,p = hok0,j\n(ev), and k0,j\nas proof of\nthe correctness of the onion.\n0\nEC1 \u2212\u2192 BB : p, V, ev, hc00,p , k0,j\n\nRecovering and counting votes. The encrypted votes that have been available\non the bulletin board enter the same mixnet, that uses the same lij values, but\n0 ,\u2212l\ninstead of adding they are now subtracted by Ai (hc0\u03c0i (j) = htki,j\n(hc0i\u22121,j )).\ni,j\nThe votes are made available on the BB. The onions that reach positions on the\noutput list marked as invalid are traced back.\n4.3\n\nMix-and-compute verification\n\nFor verification of the two stage process of creating ballots and recovering votes\nwe need also a two stage validation technique. Splitting RPC directly into two\nphases \u2013 revealing 1/4 of transitions twice \u2013 does not work. This is because before\nthe second stage of testing a malicious mix server would be able to pinpoint\ntransitions that cannot be tested according to the rule that in a pair of servers\nno path of length two can be uncovered. Therefore, we propose a different two\nstage version of RPC, in which the servers are grouped in 4-tuples consisting of\ntwo pairs.\n1. (After creation of ballots) 1/4 of transitions of each server is revealed preserving paths in uncovered pairs.\n2. (After recovery of votes) Within each 4-tuple one pair is selected to reveal\nremaining the 1/4 of mappings in the RPC fashion. The servers in the other\npair reveal transformations independently.\n\n\fNow the probability that replacement of n onions will remain unnoticed is (1/6)n .\nThe transitions selected to be verified are determined in a way similar to regular RPC. However, the validating values also include elements of sums \u2013 lij .\nTransitions chosen to be revealed are uncovered in both stages.\n\n5\n\nFurther Enhancements and Remarks\n\nReceipt-freeness and verifiability. Providing verifiability and receipt-freeness (inability to sell votes) is the biggest challenge in design of voting protocols. In our\nprotocol the voter is given two paper ballots. He or she chooses one of them\nto reveal its validation values. The ballot is marked as compromised and can\nbe verified by a watchdog organization. As a result the voter believes that the\nother ballot, whose validation values were destroyed, is also valid. But he or she\nis unable to prove it to anybody else (who was not present during interactive\ntesting), and sell the vote. Since the process of ballot creation and recovery of\nvotes is controlled, the voter is assured that his vote was properly counted.\nTest ballots and interactive testing. The basic protocol presented above shows\nverification of mixing operations. Nonetheless, there are two steps of the protocol that deserve extraordinary suspiciousness \u2013 printing of ballots, and putting\nencrypted votes on the input list before decryption. Printing is verified be interactive testing \u2013 choosing one ballot out of two for thorough investigation. The\noutput position (from the ballot creating mixing) is then marked as compromised. An interesting idea is to utilize the compromised ballots as test ballots.\nThey might be introduced into the mixnet by verification organizations or voters\nthemselves to strengthen verification of the decryption process (and the input\nlist). The decrypted votes that hit compromised positions can be traced back,\nand voters who decided to check could verify their test ballot. In this sense test\nballots are a real trust increasing factor.\nCode sheets. The scheme would certainly benefit form an immediate assurance\nthat votes cast by the voters reached the authority unchanged. To achieve this\ngoal we can employ verification codes inserted in the identifier onion by EC1\nduring creation of ballots. Natural candidates for the codes are truncated digital\nsignatures of EC1 .\nColluding authorities. The presented protocol assumes that the authorities\nEC1 and EC2 are in a conflict of interest \u2013 for instance they are controlled by\nthe ruling and opposition party. Otherwise, they would be able to violate users\nprivacy and try to introduce fake votes. This is caused by the fact that one\nauthority (EC1 ) controls the input to the computing mixnet while the other\nparty (EC2 ) controls the output.\nK-out-of-L voting. In the basic setting the proposed scheme offers 1-out-of-L\nvoting, which means that we can choose only one candidate. However, we can\n\n\feasily extend it by adding multiple cyclic rotations to K-out-of-L or K-out-of-Lordered voting. This requires increased number of homomorphic onions processed\nby the authorities.\n\n6\n\nConclusions\n\nSo far, no viable solution to the problem of remote electronic voting has been\nproposed. The computational model presented in this paper is a step towards\novercoming vulnerabilities of operating systems, personal computers and the\nInternet. The solution also offers receipt-freeness, and full verification of every\nstep. Crucial parts of the verification can be carried out by an average voter while\nthe more complicated procedures may be delegated to experts or independent\norganizations. We also showed that autonomously computing mix servers may\nbe a useful component of cryptographic protocols.\n\nReferences\n1. Schneier, B.: Beyond fear: Thinking sensibly about security in an uncertain world.\nCopernicus Books (2003)\n2. Force, C.I.V.T.: A report on the feasibility of internet voting (2000)\n3. Oppliger, R.: How to address the secure platform problem for remote internet\nvoting. In: Proceedings 5th Conf. on Security in Information Systems (SIS 2002).\n(2002) 153\u2013173\n4. Chaum, D.: Secret-ballot: True voter verifiable elections. IEEE Security and\nPrivacy (January-February) (2004) 38\u201347\n5. Neff, A.: A verifiable secret shuffle and its application to e-voting. In Samarati,\nP., ed.: ACM CCS '01, ACM Press (2001) 116\u2013125\n6. Adida, B., Rivest, R.: Scratch and vote: Self-contained paper-based cryptographic\nvoting. In Dingledine, R., Yu, T., eds.: ACM Workshop on Privacy in the Electronic\nSociety, ACM (October 2006)\n7. Ryan, P.Y.A., Schneider, S.A.: Pret a voter with re-encryption mixes. Technical\nReport 956, Newcastle University, School of Computing Science (Apr 2006)\n8. Rubin, A.: Security considerations for remote internet voting over the internet\n(2001)\n9. SureVote: E-voting system - overview (2001)\n10. Lee, B., Kim, K.: Receipt-free electronic voting scheme with a tamper-resistant\nrandomizer. In: ICISC. (2002) 389\u2013406\n11. Young, A., Yung, M.: The dark side of black-box cryptography, or: Should we trust\nCapstone? Lecture Notes in Computer Science 1109 (1996)\n12. Chaum, D., Pedersen, T.: Wallet databases with observers. In: CRYPTO '92:\nProceedings of the 12th Annual International Cryptology Conference on Advances\nin Cryptology, London, UK, Springer-Verlag (1993) 89\u2013105\n13. Ch. Park, K.I., Kurosawa, K.: Efficient anonymous channel and all/nothing election scheme. In: EUROCRYPT '93: Workshop on the theory and application of\ncryptographic techniques on Advances in cryptology, Springer-Verlag (1994) 248\u2013\n259\n14. M. Jakobsson, M.J., Rivest, R.: Making mix nets robust for electronic voting by\nrandomized partial checking. In: USENIX02. (2002)\n\n\f"}