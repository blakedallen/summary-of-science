{"id": "http://arxiv.org/abs/1012.5597v1", "guidislink": true, "updated": "2010-12-27T11:27:24Z", "updated_parsed": [2010, 12, 27, 11, 27, 24, 0, 361, 0], "published": "2010-12-27T11:27:24Z", "published_parsed": [2010, 12, 27, 11, 27, 24, 0, 361, 0], "title": "Manipulating Multistage Interconnection Networks Using Fundamental\n  Arrangements", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1012.0256%2C1012.4777%2C1012.3122%2C1012.4587%2C1012.3855%2C1012.5703%2C1012.3243%2C1012.4370%2C1012.1438%2C1012.1985%2C1012.3615%2C1012.2931%2C1012.3336%2C1012.2827%2C1012.3506%2C1012.0907%2C1012.2280%2C1012.2471%2C1012.3239%2C1012.4420%2C1012.5616%2C1012.1818%2C1012.0535%2C1012.3752%2C1012.4667%2C1012.0813%2C1012.0933%2C1012.1629%2C1012.2395%2C1012.4672%2C1012.1628%2C1012.4617%2C1012.5787%2C1012.4391%2C1012.5143%2C1012.2148%2C1012.0514%2C1012.3168%2C1012.3684%2C1012.5419%2C1012.3204%2C1012.4342%2C1012.4621%2C1012.2232%2C1012.1368%2C1012.2579%2C1012.0231%2C1012.4177%2C1012.2069%2C1012.0206%2C1012.2971%2C1012.1648%2C1012.5760%2C1012.4522%2C1012.5523%2C1012.6032%2C1012.5590%2C1012.4313%2C1012.3189%2C1012.0451%2C1012.3836%2C1012.4266%2C1012.4361%2C1012.1068%2C1012.1510%2C1012.3517%2C1012.5877%2C1012.2025%2C1012.5913%2C1012.0730%2C1012.0950%2C1012.3821%2C1012.1343%2C1012.0588%2C1012.4261%2C1012.1892%2C1012.5597%2C1012.0604%2C1012.2506%2C1012.0485%2C1012.2485%2C1012.3625%2C1012.0244%2C1012.0413%2C1012.2221%2C1012.4634%2C1012.5954%2C1012.4135%2C1012.0744%2C1012.4371%2C1012.3374%2C1012.2323%2C1012.5402%2C1012.4284%2C1012.1346%2C1012.1284%2C1012.2245%2C1012.0187%2C1012.3211%2C1012.2481%2C1012.3870&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Manipulating Multistage Interconnection Networks Using Fundamental\n  Arrangements"}, "summary": "Optimizing interconnection networks is a prime object in switching schemes.\nIn this work the authors present a novel approach for obtaining a required\nchannel arrangement in a multi-stage interconnection network, using a new\nconcept - a fundamental arrangement. The fundamental arrangement is an initial\nN-1 stage switch arrangement that allows obtaining any required output channel\narrangement given an input arrangement, using N/2 binary switches at each\nstage. The paper demonstrates how a fundamental arrangement can be achieved and\nhow, once this is done, any required arrangement may be obtained within 2(N-1)\nsteps.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1012.0256%2C1012.4777%2C1012.3122%2C1012.4587%2C1012.3855%2C1012.5703%2C1012.3243%2C1012.4370%2C1012.1438%2C1012.1985%2C1012.3615%2C1012.2931%2C1012.3336%2C1012.2827%2C1012.3506%2C1012.0907%2C1012.2280%2C1012.2471%2C1012.3239%2C1012.4420%2C1012.5616%2C1012.1818%2C1012.0535%2C1012.3752%2C1012.4667%2C1012.0813%2C1012.0933%2C1012.1629%2C1012.2395%2C1012.4672%2C1012.1628%2C1012.4617%2C1012.5787%2C1012.4391%2C1012.5143%2C1012.2148%2C1012.0514%2C1012.3168%2C1012.3684%2C1012.5419%2C1012.3204%2C1012.4342%2C1012.4621%2C1012.2232%2C1012.1368%2C1012.2579%2C1012.0231%2C1012.4177%2C1012.2069%2C1012.0206%2C1012.2971%2C1012.1648%2C1012.5760%2C1012.4522%2C1012.5523%2C1012.6032%2C1012.5590%2C1012.4313%2C1012.3189%2C1012.0451%2C1012.3836%2C1012.4266%2C1012.4361%2C1012.1068%2C1012.1510%2C1012.3517%2C1012.5877%2C1012.2025%2C1012.5913%2C1012.0730%2C1012.0950%2C1012.3821%2C1012.1343%2C1012.0588%2C1012.4261%2C1012.1892%2C1012.5597%2C1012.0604%2C1012.2506%2C1012.0485%2C1012.2485%2C1012.3625%2C1012.0244%2C1012.0413%2C1012.2221%2C1012.4634%2C1012.5954%2C1012.4135%2C1012.0744%2C1012.4371%2C1012.3374%2C1012.2323%2C1012.5402%2C1012.4284%2C1012.1346%2C1012.1284%2C1012.2245%2C1012.0187%2C1012.3211%2C1012.2481%2C1012.3870&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Optimizing interconnection networks is a prime object in switching schemes.\nIn this work the authors present a novel approach for obtaining a required\nchannel arrangement in a multi-stage interconnection network, using a new\nconcept - a fundamental arrangement. The fundamental arrangement is an initial\nN-1 stage switch arrangement that allows obtaining any required output channel\narrangement given an input arrangement, using N/2 binary switches at each\nstage. The paper demonstrates how a fundamental arrangement can be achieved and\nhow, once this is done, any required arrangement may be obtained within 2(N-1)\nsteps."}, "authors": ["Eran Gur", "Zeev Zalevsky"], "author_detail": {"name": "Zeev Zalevsky"}, "author": "Zeev Zalevsky", "links": [{"href": "http://arxiv.org/abs/1012.5597v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1012.5597v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1012.5597v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1012.5597v1", "arxiv_comment": null, "journal_reference": "International Journal of Computer Science and Information\n  Technology (IJCSIT), Vol. 2 (6), December 2010", "doi": null, "fulltext": "International Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n\nManipulating Multistage Interconnection\nNetworks Using Fundamental\nArrangements\nE. Gur1 and Z. Zalevsky2\n1\n\nFaculty of Engineering, Shenkar College of Eng. & Design, Ramat Gan, 52526, Israel\ngur.eran@gmail.com\n2\n\nSchool of Engineering, Bar Ilan University, Ramat Gan, 52900, Israel\nzalevsz@eng.biu.ac.il\n\nAbstract\nOptimizing interconnection networks is a prime object in switching schemes. In this work the authors\npresent a novel approach for obtaining a required channel arrangement in a multi-stage interconnection\nnetwork, using a new concept \u2013 a fundamental arrangement. The fundamental arrangement is an initial\nN-1 stage switch arrangement that allows obtaining any required output channel arrangement given an\ninput arrangement, using N/2 binary switches at each stage. The paper demonstrates how a fundamental\narrangement can be achieved and how, once this is done, any required arrangement may be obtained\nwithin 2(N-1) steps.\n\nKeywords\nNetworking, Multi-stage, Optics\n\n1. Introduction: Multi-stage interconnection networks\nOne common use for multi-stage processing is in Optical switching (Saleh and Teich, 1991 and\nPan et al., 1999). It has been shown that Multi-stage Interconnection Networks (MIN) are the\npreferred way to implement compact switches by means of shuffle and exchange (Parker,\n1980). In recent years much work has been done in the field of compact optical MINs\n(Reinhorn et al., 1997 and Marom et al., 1998). This led the way to an all-optical switch (Cohen\net al., 1998 and Mendlovic et al., 1999), which is faster and more flexible than common\nelectronic switches used for fiber communication. The multi stage switching setup is similar to\nthe multi stage processor and many concepts may be shared between the two.\nFirst we define some common classes of connectivity. Partial connection: One input channel\nmay connect to at least one output channel. Fully Connected System: Any single input can be\nconnected to any (arbitrary) output. However, after this is achieved it may prevent other\nconnections from being implemented. This condition is known as a BLOCK (Clos, 1953).\nRearrangeable Non-blocking (RNB) System: Any permutation of an input-to-output connection\ncan be established. However, if a new connection has to be made, some of or all the existing\nconnections have to be reconnected, thus introducing a temporary channel interruption until the\nDOI : 10.5121/ijcsit.2010.2601\n\n1\n\n\fInternational Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n\nrearrangement is complete. Wide-sense Non-blocking (WSNB) System: If while connecting the\ninputs to the outputs a proper algorithm is applied, a new connection can be established without\ndisturbing any of the existing ones. WSNB allows any set of input channels to connect with any\nset of output channels with no need to alter the dynamic routing structure except in specific\nmodules, connected directly to the alteration. Unfortunately, in standard MIN architectures, a\ngeneral solution for wide-sense non-blocking is yet to be found. Strictly non-blocking (SNB):\nAllows any set of input channels to connect with any set of output channels with no need to\nalter the dynamic routing structure except in specific modules, regardless of the inner-structure.\nUnfortunately, in standard MIN architectures, strictly non-blocking cannot be achieved.\n\nChannel N\n\n.\n\n.\n\n.\n\nChannel 2\n\nChannel 1\n\nTo connect a set of input channels to a set of output channels one might use a crossbar switch as\ndescribed in Figure 1. In this structure any input channel may be connected to a free\n(unconnected) output channel without any blocking, always. It also allows broadcasting a single\nchannel to several output channels in a simple manner. However, such a structure requires N 2\nswitches, which is a large number of dynamic elements.\n\nChanne l 1\nChanne l 2\n.\n.\n.\nChanne l N\n\nFigure 1. An N-by-N crossbar switch connecting N lines to N lines.\nFor this reason we turn to Multi-stage Interconnection Networks (MIN). In these networks part\nof the dynamic switching is replaced by static shuffling. At each stage a set of switches can\nconvert the input channel arrangement into one of a finite number of arrangements. For\nobtaining the ability to allow any channel arrangement at the output, one requires several\nswitching stages accompanied by shuffling/routing stages to ensure that each switching stage\nhas the opportunity to deal with different channel combinations.\nNow we define some common MIN routing schemes: Perfect shuffle, Banyan and Crossover.\nThe best way to define these routing/shuffling methods is demonstrated in Figure 2:\n1\n2\n3\n4\n5\n6\n7\n8\n\n1\n2\n3\n4\n5\n6\n7\n8\n\na\n1\n2\n3\n4\n5\n6\n7\n8\n\nb\n1\n2\n3\n4\n5\n6\n7\n8\n\nc\n\nd\n\nFigure 2. The first 3 stages of an 8 by 8 MIN setup using the following routing methods (a)\nPerfect Shuffle, (b) reverse Perfect Shuffle, (c) Crossover, and (d) Banyan.\n2\n\n\fInternational Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n\nIn perfect shuffle we shuffle all channels the same way we may shuffle a deck of cards, by\nsplitting the deck in two and then taking cards alternately from the two decks. In this routing\nscheme all routing stages are identical, and the same shuffling applies to all stages. A reverse\nshuffle is also commonly used.\nIn Crossover, the first stage deals with the entire set of channels and implements a certain\nshuffle. The second stage deals with half the channels using the same shuffling concept and so\non, until the minimal shuffle is achieved (crossing or transmitting between channels sharing the\nsame switch is not considered shuffling) and then returning to the initial shuffle, addressing all\nchannels.\nIn Banyan, a slightly different shuffling concept is chosen, and this time the number of channels\ninvolved in the shuffling increases as we advance to the next stage. Once all the channels are\nused in a single shuffle we return to the initial shuffle, as in the first stage.\nHere we find it necessary to define topological equivalence: Two networks A and B are said to\nbe topologically equivalent (or isomorphic) when the links and switches in network A can be\nrelabeled with logical addresses so that the resulting topological connections in network A are\nidentical to the topological connections described by network B. It is needless to state that all\nthe architectures shown in Figure 2 are topologically equivalent.\nIn 1986, a simple optical realization of perfect shuffle was suggested (Lohmann et al., 1986). A\nsimplified version of this setup is shown in Figure 3 and demonstrates a perfect shuffle for eight\nchannels using two lenses and two micro-prism arrays.\n1\n\n8\n\n1\n\n2\n\n4\n\n5\n\n3\n\n7\n\n4\n\n3\n\n5\n\n6\n\n6\n\n2\n\n7\n\n7\n\n5\n\n4\n\n8\n\n1\n\n8\n\nf\n\nf\n\nf\n\n2\n\nIm a gin g\n\n6\n3\n\nf\n\nFigure 3. An optical realization of perfect shuffle routing for eight channels.\nThe micro-prisms are the diffractive equivalent of full size prisms, allowing a slim design for\nthe setup and enabling its implementation using planar optics. At the same time, Lohmann\npublished a more general work on the possible implementations of digital optical computers\n(Lohmann, 1986). These possibilities, alongside the novel optical switches developed in the\n1990s allow the construction of complete MINs using optics.\nWe will focus on the Omega-2 (\u03a9-2) network that uses dual-channel switches (as illustrated\nbefore). In such cases the switches may occupy one of the following states: bypass, and\nexchange. Using such switches in an MIN setup generates a sufficient flexibility to implement\nRNB networks, assuming the number of stages is large enough. A more detailed representation\nof shuffling and switching will be given in the specified section, when the authors makes an\neffort to model the MIN and to find solutions to specific problems.\n\n3\n\n\fInternational Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n\n2. Using the iterative procedure in MIN optimization\nFirst we recall that the MIN can be optimized in an iterative manner (Gur et al., 2002). We start\nwith an input vector, where each element in the vector corresponds to a single input channel.\nOur purpose is to manipulate these input channels in such a way that the output vector will\ncontain the same channels, yet in a different, required, order. Each routing stage contains static,\nor fixed, shuffling architecture (Golomb, 1961, Parker, 1980) such as perfect shuffle, Banyan or\ncrossover, given in Figure 4. We present the matrix form of the shuffling architectures since we\nuse these matrix notations later on. Each stage of static routing is followed by an active routing\nstage, composed from bypass/exchange switches. We recall that a bypass/exchange module\naccepts two input channels and either leaves them as they are (bypass) or switches between\nthem (exchange). In this way, one might reach any desired output from any given input if the\nnumber of stages is large enough. The matrix representation of these switches is shown in\nFigure 4.\n1\n2\n3\n4\n5\n6\n7\n8\n\n1\n5\n2\n6\n3\n7\n4\n8\n\n1\n2\n3\n4\n5\n6\n7\n8\n\na\n\uf8ee1\n\uf8ef0\n\uf8ef\n\uf8ef0\n\uf8ef\n0\nMPS = \uf8ef\n\uf8ef0\n\uf8ef\n\uf8ef0\n\uf8ef0\n\uf8ef\n\uf8f0\uf8ef0\n\n0 0 0 0 0 0 0\uf8f9\n0 0 0 1 0 0 0\uf8fa\uf8fa\n1 0 0 0 0 0 0\uf8fa\n\uf8fa\n0 0 0 0 1 0 0\uf8fa\n0 1 0 0 0 0 0\uf8fa\n\uf8fa\n0 0 0 0 0 1 0\uf8fa\n0 0 1 0 0 0 0\uf8fa\n\uf8fa\n0 0 0 0 0 0 1\uf8fb\uf8fa\n\nd\n\n1\n7\n3\n5\n4\n6\n2\n8\n\n1\n2\n3\n4\n5\n6\n7\n8\n\nb\n\nM CO\n\n\uf8ee1\n\uf8ef0\n\uf8ef\n\uf8ef0\n\uf8ef\n0\n=\uf8ef\n\uf8ef0\n\uf8ef\n\uf8ef0\n\uf8ef0\n\uf8ef\n\uf8f0\uf8ef0\n\n0 0 0 0 0 0 0\uf8f9\n0 0 0 0 0 1 0\uf8fa\uf8fa\n0 1 0 0 0 0 0\uf8fa\n\uf8fa\n0 0 0 1 0 0 0\uf8fa\n0 0 1 0 0 0 0\uf8fa\n\uf8fa\n0 0 0 0 1 0 0\uf8fa\n1 0 0 0 0 0 0\uf8fa\n\uf8fa\n0 0 0 0 0 0 1\uf8fb\uf8fa\n\ne\n\n1\n3\n2\n4\n5\n7\n6\n8\n\nc\n\uf8ee1\n\uf8ef0\n\uf8ef\n\uf8ef0\n\uf8ef\n0\nM BAN = \uf8ef\n\uf8ef0\n\uf8ef\n\uf8ef0\n\uf8ef0\n\uf8ef\n\uf8f0\uf8ef0\n\n0 0 0 0 0 0 0\uf8f9\n0 1 0 0 0 0 0\uf8fa\uf8fa\n1 0 0 0 0 0 0\uf8fa\n\uf8fa\n0 0 1 0 0 0 0\uf8fa\n0 0 0 1 0 0 0\uf8fa\n\uf8fa\n0 0 0 0 0 1 0\uf8fa\n0 0 0 0 1 0 0\uf8fa\n\uf8fa\n0 0 0 0 0 0 1\uf8fb\uf8fa\n\nf\n\nFigure 4. The first stage in shuffling architectures (a) perfect shuffle, (b) crossover and (c)\nBanyan, all for an 8 by 8 setup. In (d) through (f) one may view the matrix implementation of\nthe routing given in (a) through (c), respectively. In perfect shuffle, all stages are identical, in\ncontrary to crossover and Banyan.\nGiven an input vector and an output vector (each representing a set of channels), there are\nseveral matrices representing a linear system that will lead from one to the other. However,\nthere are a few constraints on the matrices available for switching. The dynamic routing matrix\nmust contain only \"0\"s and \"1\"s and no more than one \"1\" in a given row or column (each\ninput channel can be connected only to one output channel and each output channel can receive\ninformation only from one input channel at a time). A logical \"1\" in a given row and column\ncoordinate means that the input channel corresponding to the column index is connected to the\noutput channel corresponding to the row index. The matrix must be constructed out of bypass 2\nby 2 matrices and exchange 2 by 2 matrices (as drawn in Figure 4), placed on the main\ndiagonal, where the other elements of the matrix are all \"0\". An example for valid and nonvalid bypass/exchange matrices is given Figure 5.\n4\n\n\fInternational Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n\nThe output of the entire MIN is a result of M stages of both static and dynamic routing (the\nelements in the input and output vectors are the indices of the input channels). In the input\nvector the element location is identical to its value whereas in the output vector an index i in the\nj location refers to the ith input channel moved to the jth output channel). The path of proceeding\nfrom input to output is as follows. First, the input vector is multiplied by a static routing matrix\n(in the perfect-shuffle architecture all routing matrices are identical, in other architectures, such\nas Banyan and crossover architectures, each stage the routing matrix combines a different\nnumber of participants, as shown before). Then, the result is multiplied by a switching\n(dynamic routing) matrix, then by a second static routing matrix and so on. If the number of\nstages is large enough (an order of N or even log 2 N stages, depending on the value of N) one\ncan obtain any output vector from any input vector.\n\n\uf8ee1 0\uf8f9\nbypasssub matrix : \uf8ef\n\uf8fa\n\uf8f00 1\uf8fb\n\uf8ee1 0\uf8f9 \uf8ee c1\uf8f9 \uf8ee c1\uf8f9\n\uf8ef0 1\uf8fa \uf8efc2\uf8fa = \uf8efc2\uf8fa\n\uf8f0\n\uf8fb\uf8f0 \uf8fb \uf8f0 \uf8fb\n\n\uf8ee0 1\uf8f9\nexchangesub matrix : \uf8ef\n\uf8fa\n\uf8f01 0\uf8fb\n\uf8ee0 1\uf8f9 \uf8ee c1\uf8f9 \uf8eec2\uf8f9\n\uf8ef1 0\uf8fa \uf8efc2\uf8fa = \uf8ef c1\uf8fa\n\uf8f0\n\uf8fb\uf8f0 \uf8fb \uf8f0 \uf8fb\n\nFigure 5. Bypass and exchange sub matrices. The bypass matrix leaves the\ninputs as they are while the exchange matrix switches between the two\nchannels.\n3.\n\nDifferent connectivity architectures\u2013 discussion\n\nIn this section we demonstrate the difference between Wide-Sense Non-Blocking (WSNB) and\nStrictly Non-Blocking (SNB) and we try to define a general condition for making Wide-Sense\nNon-Blocking possible in common MIN. We also suggest a method for constructing an\narrangement of switches, referred to as a \"Fundamental Arrangement\" (FA) that contains all\npossible pairs of channels in an N-1 stage network, and can be used as a basis for fast\nRearrangeable Non-Blocking (RNB) MIN. We do this with respect to the perfect shuffle\narrangement, yet without restricting generality since all MIN architectures are topologically\nequivalent and thus we can find a similar FA for other architectures as well.\n\n3.1 SNB & WSNB \u2013 definitions and existence in omega-2 MIN\nFirst we recall the definition of a Wide-Sense Non-Blocking network: If while connecting the\ninputs to the outputs a proper algorithm is applied, new connection can be established without\ndisturbing any of the existing ones. If we take a closer look at the underlined condition and try\nto interpret it in terms of an omega-2 MIN, we find that it refers to the case where switching\nany two channel may be done using a single 2 by 2 switch, thus not disturbing the other\nchannels. For this to be true we need that at every moment the MIN will contain all possible\nswitches. This might seem logical if we do not limit the number of stages of the MIN. However,\nas we will show below, it requires a certain condition. We first look at a multi stage MIN setup\nas described in Figure 6.\n\n5\n\n\fInternational Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n1\n2\n3\n4\n5\n6\n7\n8\n\nFigure 6. An 8 by 8 MIN setup using an omega-2 structure and perfect shuffle routing.\nAlthough we look at the perfect shuffle architecture, the following remarks apply to all\ntopologically equivalent architectures. Let us assume that SNB is possible without restrictions,\nand try to find the requirements of the WSNB algorithm. Therefore, if the number of stages\npresented is sufficient, we will observe all possible switch input combinations. Therefore, any\ninput-output connection may be obtained by changing a single switch, without disturbing other\nconnections, and performing this change will leave the system Wide-Sense Non-Blocking (and\nSNB if we do not force any demands). Now we start changing the switches one at a time. For\nthe prefect shuffle scheme we simply convert each exchange to a bypass. Every change must\nleave the system SNB; otherwise SNB has no meaning. Finally we obtain an all-bypass\nnetwork. Now we note that due to the fully connected system, after log 2 N stages (N being the\nnumber of channels), the all-bypass MIN returns to its original channel arrangement, as shown\nin Figure 7. For a different shuffling scheme the switch combination allowing this characteristic\nis different, of course.\n\nFigure 7. The 8 by 8 MIN setup when all switches are in bypass mode.\nSince after log 2 N stages we return to the original channel arrangement, each channel\nencounters only log 2 N channel along its path, and it encounters them over and over again.\nThus, the other N \u2212 1\u2212 log 2 N channels are not interacting directly with the specific channel\nand therefore not all pairs are represented by independent switches. The direct conclusion is of\ncourse that SNB does not exist in MIN, but this is a known fact.\nThe new distinction is that a block of consecutive log 2 N stages of all-bypass switches is the\nmain reason for preventing SNB and therefore the key for planning WSNB. In the early 80s\nBenes and Kurshan (Benes & Kurshan, 1981) showed the private case of a 4-by-4 MIN that\nrequires 4 stages for WSNB with the accompanied algorithm that disallows the 2 middle stages\nfrom being all-bypass. This is merely a private case of our conclusion with respect to\nlog2 N = 2 for the case N = 4 . Over the years many attempts have been made to find a\ngeneral solution to the WSNB problem, yet different solutions were suggested for different N\nvalues. We hope that the above notation might lead the way to a more general WSNB\nalgorithm. The general construction of WSNB is quite difficult and therefore we choose to\nconcentrate on RNB as in the next section.\n6\n\n\fInternational Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n\nIf we insist on an SNB setup we can obtain it in non-MIN architectures such as the one shown\nin Figure 8, where N 2 direct connections are required.\n\n1\n\nselector\n\nselector\n\n1\n\n2\n\nselector\n\nselector\n\n2\n\n3\n\nselector\n\nselector\n\n3\n\n4\n\nselector\n\nselector\n\n4\n\nFigure 8. A Strictly Non-Blocking architecture allowing to switch any pair of channels without\ndisturbing the other channels.\n3.2 RNB and the construction of fundamental arrangements\nAs shown before the existence of all switching pairs at a specific arrangement does not indicate\nthe feasibility of WSNB since exchanging the channels for a single switch may eliminate\nseveral of the other pairs. However, the existence of such an arrangement, we will refer to as a\nFundamental Arrangement (FA), does hold certain characteristics regarding the system\nconnectivity.\nIn recent years a considerable amount of research related to RNB networks in general (Shen at\nal., 2002) and to RNB in MIN in particular (Das et al., 2000 and Cam, 2003) was conducted. In\nthe later research it was shown that (2 log 2 N \u2212 1) stages are sufficient for obtaining RNB in\nMIN architecture. This is known to be the theoretical lower bound for RNB. However, the\nalgorithm used for rearranging a general set of channels is quite complex. It also relates, as\nmost discussion, to a specific number of stages N. In the following paragraphs we present a\nsimple algorithm applicable for large MIN architectures ( N \u2212 1 stages).\nWe look again at the perfect shuffle routing scheme, without restriction of generality. Since the\nstructure is symmetrical with respect to the y-axis in order not to return to a pair of channels\noccupying a single switch before passing through all other pair combinations we use an antisymmetric switch choice as the one given in Figure 9. As seen from the MIN sketch, choosing a\nnon-symmetric structure, and one that differs from one stage to the next we can obtain an FA.\nThis concept was tested for systems containing 4, 8, 16, 32 and 64 channels and it produced the\nFA in each and every one.\nWe note that we need only ( N \u2212 1) stages to obtain an FA since we have N / 2 switches per\nstage and the total number of pairs is ( N \u2212 1) N / 2 . This is since the first channel interacts with\n( N \u2212 1) channels, the second with ( N \u2212 2) channels excluding the first, etc.\n1\n2\n3\n4\n5\n6\n7\n8\n\n1\n3\n7\n5\n2\n4\n8\n6\n\n7\n1\n2\n8\n5\n3\n4\n6\n\n7\n2\n4\n5\n1\n8\n6\n3\n\n4\n7\n1\n6\n5\n2\n8\n3\n\n4\n1\n8\n5\n7\n6\n3\n2\n\n8\n4\n7\n3\n5\n1\n6\n2\n\n8\n7\n6\n5\n4\n3\n2\n1\n\nFigure 9. Obtaining a fundamental arrangement in an 8-channel MIN using perfect shuffle.\n7\n\n\fInternational Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n\nWe will now show that from the FA one can reach any output combination, thus that ( N \u2212 1)\nstages are sufficient for obtaining RNB. We start with the 8-by-8 case and explain the\nprocedure via an example, and then we give a more general explanation.\nLet us assume that we have the 7 stages setup given in Figure 9 and we want the output to\nbecome (from top to bottom): 1,3,5,7,2,4,6,8. Thus, from comparison to the current FA output,\nwe look for the following channel pairs: 8-1, 7-3, 6-5, 5-7, 4-2, 3-4, 2-6 and 1-8. We start from\nthe 1st stage and find the pairs: 5-7 and 2-4. We switch them making the output 8,5,6,7,2,3,4,1.\nSo now we require different pairs: 8-1, 5-3, 6-5, 3-4, 4-6 and 1-8. None of them appears in the\n1st stage, nor in the 2nd stage now being 5,1,4,8,7,3,2,6. We proceed to the 3rd stage where we\nfind 1-8. We change this switch and obtain at the output: 1,5,6,7,2,3,4,8.\n1\n2\n3\n4\n5\n6\n7\n8\n\n1\n3\n7\n5\n2\n4\n8\n6\n\n7\n1\n2\n8\n5\n3\n4\n6\n\n7\n2\n4\n5\n1\n8\n6\n3\n\n4\n7\n1\n6\n5\n2\n8\n3\n\n4\n1\n8\n5\n7\n6\n3\n2\n\n8\n4\n7\n3\n5\n1\n6\n2\n\n8\n7\n6\n5\n4\n3\n2\n1\n\n1\n3\n5\n7\n2\n4\n6\n8\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n1\n3\n5\n7\n4\n2\n8\n6\n\n5\n1\n4\n8\n7\n3\n2\n6\n\n5\n4\n2\n7\n1\n8\n6\n3\n\n2\n5\n1\n6\n7\n4\n8\n3\n\n2\n1\n8\n7\n5\n6\n3\n4\n\n8\n2\n5\n3\n7\n1\n6\n4\n\n8\n5\n6\n7\n2\n3\n4\n1\n\n1\n3\n5\n7\n2\n4\n6\n8\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n1\n3\n5\n7\n4\n2\n8\n6\n\n5\n1\n4\n8\n7\n3\n2\n6\n\n5\n4\n2\n7\n8\n1\n6\n3\n\n2\n5\n8\n6\n7\n4\n1\n3\n\n2\n8\n1\n7\n5\n6\n3\n4\n\n1\n2\n5\n3\n7\n8\n6\n4\n\n1\n5\n6\n7\n2\n3\n4\n8\n\n1\n3\n5\n7\n2\n4\n6\n8\n\n(c)\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n1\n3\n5\n7\n4\n2\n8\n6\n\n5\n1\n4\n8\n7\n3\n2\n6\n\n5\n4\n2\n7\n8\n1\n6\n3\n\n2\n5\n8\n6\n7\n4\n1\n3\n\n2\n8\n1\n7\n6\n5\n4\n3\n\n1\n2\n6\n4\n7\n8\n5\n3\n\n1\n6\n5\n7\n2\n4\n3\n8\n\n1\n3\n5\n7\n2\n4\n6\n8\n\n(d)\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n1\n3\n5\n7\n4\n2\n8\n6\n\n5\n1\n4\n8\n7\n3\n2\n6\n\n5\n4\n2\n7\n8\n1\n3\n6\n\n2\n5\n8\n3\n7\n4\n1\n6\n\n2\n8\n1\n7\n3\n5\n4\n6\n\n1\n2\n3\n4\n7\n8\n5\n6\n\n1\n3\n5\n7\n2\n4\n6\n8\n\n1\n3\n5\n7\n2\n4\n6\n8\n\n(e)\n\n(a)\n\n(b)\n\nFigure 10. A 5-step example for obtaining a required output from the basic FA output.\nNext we need to change 5-6 and 3-4, both present at the 5th stage. The output now is\n1,6,5,7,2,4,3,8 and thus we need only to find the pair 3-6, and it exists in the 3rd stage. Thus,\nafter altering the last switch, we obtained the required output from the FA arrangement. From\nthis example we anticipate that there's a way to obtain any output arrangement by first\nchanging the switches to the FA and then proceeding according to the steps described above.\nThe network described in this example is shown in Figure 10. For a more general description\nwe present the next paragraphs.\nWe start with ( N \u2212 1) N / 2 switches, according to FA, such that all couples are present. Let us\ngive arbitrary names to the input channels ('1' does not have to be the actual first channel etc.)\nand use the 8-channel case for better understanding. The alterations required to switch from one\n8\n\n\fInternational Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n\noutput order to another has a variety of options from 4 cyclic groups of 2 elements: 1-2, 3-4, 56, 7-8, meaning that 4 switches are enough and there's no cross-connection between pairs, to\nthe complete cycle (remember the names of the channels are arbitrary) which means actually no\ncycle: 1-2-3-4-5-6-7-8 (which means channel 1 is redirected to the second position, channel 2 to\nthe third position etc., leaving channel 8 to occupy the first position), through various\narrangements such as: 1-2-3-1, 4-5, 6-7-8-6.\nWithout restriction of generality we write the following:\n\u2022 At a given stage channels 1 and 2 where swapped using a single switch. This switch will be\ndenoted as S12 (In the worst case scenario this will happen in the first step, using the FA).\n\u2022 Thus, switches in following stages have changed if one of their inputs was 1 or 2, e.g., the\nprevious S15 will become S25.\n\u2022 Next, a new pair of channels has to be swapped, and the options are as follows:\n1. The new pair contains channels such as 3 and 4, i.e., no connection with S12. Therefore, it is\ncertain that S34 exists, and a single switch may be used.\n2. The new pair contains channels such as 1 and 3 (or 2 and 3), and thus there are three suboptions:\n2.1. In the FA, S13 preceded S12 (comes at an earlier stage) and therefore it still exists.\nHence, channels 1 and 3 may be swapped using a single switch.\n2.2. In the FA, S13 follows S12 (comes at a later stage), but S23 also follows S12. Thus,\nS13 and S23 will simply change roles, i.e., S13 exists and channels 1 and 3 may be\nswapped using a single switch.\n2.3. In the FA, S13 follows S12, but S23 precedes S12. This means that after S12 has been\nswitched S13 becomes S23. Thus, two switches S23 are present, one before S12 and\none after S12. The later S23 may be used to generate an indirect connection between\nchannels 1 and 3, which may require concatenation (chaining) of several switches. The\nearlier S23 will be used to return to the initial state, except for swapping 1 and 3.\nIn 2.1, it has been noted that: \"In the FA, S13 preceded S12 (comes at an earlier stage) and\ntherefore it still exists. Hence, channels 1 and 3 may be swapped using a single switch\". We\nnote that changing S13 will change S12 and therefore it may vanish, BUT we will use S13 only\nif S12 was used to place channel 2 in the proper position. If however, S12 was used to place\nchannel 1 in the proper position, then the next switch we look for will be S2#, e.g. S24, which\ninvolves channel 2 rather than channel 1.\nFinally we write the straightforward algorithm as follows:\n1. Place the switches in the FA arrangement.\n2. Compare the initial output to the required output and thus obtain N required pairs\nswitches (or less if a certain channel is already in place).\n3. Search for any of the pairs in the first stage and move up the stages until a pair (or\nmore) is found in the Kth stage. Such a switch is sure to be found within the N-1\nstages.\n4. Change the switch position from bypass to exchange or vice versa.\n5. Obtain the current output and compare it to the required one to obtain the new required\npairs (less than N since at least one channel is now in place).\n6. Search for any of the pairs in the first stage and move up the stages until a pair (or\nmore) is found.\n7. Proceed with steps 4 to 6 until all output channel are in place.\nIt is important to note that due to the FA we will never need more than (N-1) stages since the\nfirst switch may eliminate up to (N-1) switches, the second up to an extra (N-2) switches (since\ncombinations of pairs from both steps are not eliminated) etc., until finally the Nth switch\n9\n\n\fInternational Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n\neliminates no switches. Summing up we obtain ( N \u2212 1) N / 2 different switches as present\ninitially in the FA. Comparable research either showed an increase in the number of stages by a\nfactor of 3 (Bergen, 2003), or used iterative methods (Khandker et al., 2002) thus requiring a\nlonger time to converge to the final arrangement.\nThus, we presented an algorithm for obtaining any required channel arrangement from any\ngiven arrangement using a maximum of 2(N-1) steps: first we find the required steps from the\nFA to the original arrangement and reverse the steps to obtain the FA, next we find the required\nsteps from the FA to the required channel arrangement. Each of these two parts contains a\nmaximum number of (N-1) steps and thus the entire procedure requires 2(N-1) steps at the\nmost. It is clear that this is not always the fastest way to obtain one channel arrangement from\nto another (e.g., if they differ by a single switchable pair) but it is a no-fail method.\n\n4. Conclusions\nIn this paper the authors showed a novel algorithm required to obtain RNB connectivity using\nanalytical procedures rather than iterative procedures. The suggested approach uses a reference\narrangement named a fundamental arrangement. The original channel arrangement is first\ntransformed into a fundamental arrangement in N-1 steps, at the most, and then transformed\ninto the required channel arrangement. The result is a fast routing procedure that uses only N-1\nstages and 2(N-1) steps to obtain the required output, in contrary to an order of N log 2 N\nstages used in previous algorithms. Finally, the results led to a discussion on several insights\nregarding WSNB and SNB architectures. Although the method is shown for the perfect shuffle\narrangement, all MIN architectures are topologically equivalent and therefore the results apply\nto any multi-stage architecture.\n\nReferences:\n1. Saleh B. A. E., and Teich M .C., Fundamentals of Photonics, Chap. 21, pp. 833-869, John Wiley,\n1991.\n2. Pan Y., Qiao C. and Yang Y., \"Optical multistage interconnection networks: New challenges and\napproaches,\" IEEE Communication Magazine, pp. 50-56, February 1999.\n3. Parker Jr. D. S., \"Notes on shuffle/exchange-Type switching Networks,\" IEEE Trans. In Comp., Vol.\nc-29, No. 3, pp. 230-222, 1980.\n4. Reinhorn S., Amitai Y., Friesem A. A., Lohmann A. W. and Gorodeisky S., \"Compact optical\ncrossbar switch,\" Applied Optics, Vol. 36, No. 5, pp. 1039-1044, 1997.\n5. Marom D. M., Konforti N. and Mendlovic D., \"All-optical stage of an Omega network,\" Applied\nOptics, Vol. 37, No. 29, pp. 6946-6950, 1998.\n6. Cohen N., Mendlovic D., Leibner B. and Konforti N., \"Compact polarization-based all-optical\ninterconnection systems with growth capability,\" Applied Optics, Vol. 37, No. 23, pp. 5479-5487,\n1998.\n7. Mendlovic D., Leibner B. and Cohen N., \"Multistage optical system for broadcasting and switching\ninformation,\" Applied Optics, Vol. 38, No. 29, pp. 6103-6110, 1999.\n8. C. Clos, \"A study of nonblocking switching networks,\" Bell Syst. Tech. J., vol. 32, pp. 406\u2013424,\nMar. 1953.\n9. Lohmann A. W., Stork W. and Stucke G., \"Optical perfect shuffle,\" Applied Optics, Vol. 25, No. 10,\npp. 1530-1531, 1986 (Letters to the Editor).\n10. Lohmann A. W., \"What classical optics can do for the digital optical computer,\" Applied Optics,\nVol. 25, No. 10, pp. 1543-1549, 1986.\n10\n\n\fInternational Journal of Computer Science & Information Technology (IJCSIT), Vol 2, No 6, December 2010\n11. Gur E., Zalevsky Z., Cohen N. and Mendlovic D., \"Iterative Approach for Optimizing a Multistage\nInterconnection Network,\" Journal of Optical Networking, Vol. 1, No. 10, pp. 363-372, 2002.\n12. Golomb S. W., \"Permutations by cutting and shuffling,\" SIAM Review, Vol. 3, No. 4, pp.293-297,\n1961.\n13. Benes V. E. and Kurshan R. P., \"Wide-sense nonblocking network made of square switches,\"\nElectronics Letters, Vol. 17, No. 19, p. 697, 1981.\n14. Shen G., Cheng T. H., Lu C., Chai T. U. and Bose S. K., \"A novel rearrangeable non-blocking\narchitecture for 2D MEMS optical space switches,\" Optical Network Magazine, Vol. 3, No. 6, pp.\n70-79, 2002.\n15. Das N., Mukhopadhyaya K. and Dattagupta J., \"\u03a9(n) routing in rearrangeable networks,\" Journal of\nSystems Architecture, Vol. 46, pp. 529-542, 2000.\n16. Cam H., \"Rearrangeability of (2n-1)-stage shuffle-exchange networks,\" SIAM J. Comput., Vol. 32,\nNo. 3, pp. 557-585, 2003.\n17. Bergen J., \"Designing a Non-Blocking, Multi-Stage Switching Network,\" RTC, Interconnect\nStrategies, pp. 1-3, August 2003.\n18. Khandker M. M.-u-R., Xiaohong J. and Horiguchi, S., \"Generalized recursive network: a new\narchitecture for nonblocking optical multistage interconnection networks\", IEEE proceedings of\n\"High Performance Switching and Routing - Workshop\", pp. 199-203, 2002.\n\n11\n\n\f"}