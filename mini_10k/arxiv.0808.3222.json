{"id": "http://arxiv.org/abs/0808.3222v5", "guidislink": true, "updated": "2008-09-03T05:07:21Z", "updated_parsed": [2008, 9, 3, 5, 7, 21, 2, 247, 0], "published": "2008-08-24T02:59:29Z", "published_parsed": [2008, 8, 24, 2, 59, 29, 6, 237, 0], "title": "Analysis of the postulates produced by Karp's Theorem", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0808.1754%2C0808.2526%2C0808.2723%2C0808.3950%2C0808.0365%2C0808.0703%2C0808.0715%2C0808.3558%2C0808.2878%2C0808.3945%2C0808.1871%2C0808.3423%2C0808.3557%2C0808.0924%2C0808.0079%2C0808.1174%2C0808.1214%2C0808.2630%2C0808.0536%2C0808.2079%2C0808.2885%2C0808.3320%2C0808.0302%2C0808.1035%2C0808.1431%2C0808.2055%2C0808.3354%2C0808.0932%2C0808.3822%2C0808.1645%2C0808.1196%2C0808.0348%2C0808.0046%2C0808.2196%2C0808.0219%2C0808.2061%2C0808.2406%2C0808.3536%2C0808.2166%2C0808.3892%2C0808.1694%2C0808.4143%2C0808.0609%2C0808.3758%2C0808.3222%2C0808.2472%2C0808.0170%2C0808.2906%2C0808.3806%2C0808.1347%2C0808.4074%2C0808.0251%2C0808.1703%2C0808.3162%2C0808.0645%2C0808.1582%2C0808.4111%2C0808.0358%2C0808.0448%2C0808.1246%2C0808.2768%2C0808.0829%2C0808.2139%2C0808.2301%2C0808.1688%2C0808.2327%2C0808.3440%2C0808.3171%2C0808.3601%2C0808.0452%2C0808.0789%2C0808.1540%2C0808.2497%2C0808.1093%2C0808.1152%2C0808.1710%2C0808.4071%2C0808.2177%2C0808.1990%2C0808.4077%2C0808.1149%2C0808.1872%2C0808.1153%2C0808.0741%2C0808.3411%2C0808.0424%2C0808.1277%2C0808.2644%2C0808.3268%2C0808.3087%2C0808.0676%2C0808.0849%2C0808.3650%2C0808.0431%2C0808.2775%2C0808.1343%2C0808.1856%2C0808.2753%2C0808.2638%2C0808.2685%2C0808.3882&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Analysis of the postulates produced by Karp's Theorem"}, "summary": "This is the final article in a series of four articles. Richard Karp has\nproven that a deterministic polynomial time solution to K-SAT will result in a\ndeterministic polynomial time solution to all NP-Complete problems. However, it\nis demonstrated that a deterministic polynomial time solution to any\nNP-Complete problem does not necessarily produce a deterministic polynomial\ntime solution to all NP-Complete problems.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0808.1754%2C0808.2526%2C0808.2723%2C0808.3950%2C0808.0365%2C0808.0703%2C0808.0715%2C0808.3558%2C0808.2878%2C0808.3945%2C0808.1871%2C0808.3423%2C0808.3557%2C0808.0924%2C0808.0079%2C0808.1174%2C0808.1214%2C0808.2630%2C0808.0536%2C0808.2079%2C0808.2885%2C0808.3320%2C0808.0302%2C0808.1035%2C0808.1431%2C0808.2055%2C0808.3354%2C0808.0932%2C0808.3822%2C0808.1645%2C0808.1196%2C0808.0348%2C0808.0046%2C0808.2196%2C0808.0219%2C0808.2061%2C0808.2406%2C0808.3536%2C0808.2166%2C0808.3892%2C0808.1694%2C0808.4143%2C0808.0609%2C0808.3758%2C0808.3222%2C0808.2472%2C0808.0170%2C0808.2906%2C0808.3806%2C0808.1347%2C0808.4074%2C0808.0251%2C0808.1703%2C0808.3162%2C0808.0645%2C0808.1582%2C0808.4111%2C0808.0358%2C0808.0448%2C0808.1246%2C0808.2768%2C0808.0829%2C0808.2139%2C0808.2301%2C0808.1688%2C0808.2327%2C0808.3440%2C0808.3171%2C0808.3601%2C0808.0452%2C0808.0789%2C0808.1540%2C0808.2497%2C0808.1093%2C0808.1152%2C0808.1710%2C0808.4071%2C0808.2177%2C0808.1990%2C0808.4077%2C0808.1149%2C0808.1872%2C0808.1153%2C0808.0741%2C0808.3411%2C0808.0424%2C0808.1277%2C0808.2644%2C0808.3268%2C0808.3087%2C0808.0676%2C0808.0849%2C0808.3650%2C0808.0431%2C0808.2775%2C0808.1343%2C0808.1856%2C0808.2753%2C0808.2638%2C0808.2685%2C0808.3882&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "This is the final article in a series of four articles. Richard Karp has\nproven that a deterministic polynomial time solution to K-SAT will result in a\ndeterministic polynomial time solution to all NP-Complete problems. However, it\nis demonstrated that a deterministic polynomial time solution to any\nNP-Complete problem does not necessarily produce a deterministic polynomial\ntime solution to all NP-Complete problems."}, "authors": ["Jerrald Meek"], "author_detail": {"name": "Jerrald Meek"}, "author": "Jerrald Meek", "arxiv_comment": "12 Pages;\n  ftp://ftp%40micrognu%2Ecom:anon%40anon@ftp.micrognu.com/pnenp/conclusion.pdf", "links": [{"href": "http://arxiv.org/abs/0808.3222v5", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0808.3222v5", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "F.2.0", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0808.3222v5", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0808.3222v5", "journal_reference": null, "doi": null, "fulltext": "Analysis of the postulates produced by Karp's\nTheorem.\n\narXiv:0808.3222v5 [cs.CC] 3 Sep 2008\n\nJERRALD MEEK\n\nThis is the final article in a series of four articles. Richard Karp has proven that a deterministic\npolynomial time solution to K-SAT will result in a deterministic polynomial time solution to\nall NP-Complete problems. However, it is demonstrated that a deterministic polynomial time\nsolution to any NP-Complete problem does not necessarily produce a deterministic polynomial\ntime solution to all NP-Complete problems.\nCategories and Subject Descriptors: F.2.0 [Analysis of Algorithms and Problem Complexity]: General\nGeneral Terms: Algorithms, Theory\nAdditional Key Words and Phrases: P vs NP, NP-complete\n\n1. INTRODUCTION.\nThe present author has previously shown that a NP-complete problem is solvable\nin deterministic polynomial time by a search algorithm if and only if a polynomial\nsearch partition can be found in polynomial time.\nAdditionally, it has been shown that some instances of the 0-1-Knapsack problem\ndo not have a deterministic polynomial time solution, unless the SAT problem has\na deterministic polynomial time solution.\nThis is the final article in a series of four, wherein the purpose will be to finally determine that the SAT problem has no deterministic polynomial time solution. It will then become clear that the 0-1-Knapsack problem, and any similar\nNP-complete problem which depends on SAT for a deterministic polynomial time\nsolution, cannot be solved in deterministic polynomial time.\n2. PRELIMINARIES.\nPreviously the author has proven the following theorems, which will be assumed\ntrue in this article.\nTheorem 4.4 from P is a proper subset of NP. [Meek Article 1 2008] 2.1.\nP = NP Optimization Theorem.\nThe only deterministic optimization of a NP-complete problem that could prove\nP = NP would be one that can always solve a NP-complete problem by examining\nno more than a polynomial number of input sets for that problem.\nTheorem 5.1 from P is a proper subset of NP. [Meek Article 1 2008] 2.2.\nP = NP Partition Theorem.\nPeople who wish to remain anonymous have offered comments and suggestions which have improved this work. The author wishes to express his appreciation for their assistance.\nJerrald Meek Copyright c 2008\nArXiv, Vol. V, No. N, Month 20YY, Pages 1\u201312.\n\n\f2\n\n*\n\nJerrald Meek\n\nThe only deterministic search optimization of a NP-complete problem that could\nprove P = NP would be one that can always find a representative polynomial search\npartition by examining no more than a polynomial number of input sets from the\nset of all possible input sets.\nTheorem 5.1 from [Meek Article 2 2008] 2.3.\nAnalysis of the deterministic polynomial time solvability\nof the 0-1-Knapsack problem.\nKnapsack Random Set Theorem.\nDeterministic Turing Machines cannot exploit a random relation between the\nelements of S to produce a polynomial time solution to the Knapsack problem.\nTheorem 6.1 from [Meek Article 2 2008] 2.4.\nAnalysis of the deterministic polynomial time solvability\nof the 0-1-Knapsack problem.\nKnapsack Composition Theorem.\nCompositions of M cannot be relied upon to always produce a deterministic polynomial time solution to the 0-1-Knapsack problem.\nTheorem 6.2 from [Meek Article 2 2008] 2.5.\nAnalysis of the deterministic polynomial time solvability\nof the 0-1-Knapsack problem.\nKnapsack M Quality Reduction Theorem.\nAny quality of M that could be used to find a composition of M within S would\nbe equivalent to finding all compositions of M .\nTheorem 7.1 from [Meek Article 2 2008] 2.6.\nAnalysis of the deterministic polynomial time solvability\nof the 0-1-Knapsack problem.\nKnapsack Set Quality Theorem.\nUsing any quality of the elements of S to solve the 0-1-Knapsack problem will be\nno less complex than the standard means of solving the 0-1-Knapsack problem.\nThe definition of the 0-1-Knapsack problem used in this article will be based off\nof that used by Horowitz and Sahni [Horowitz and Sahni 1974].\n(1) Let S be a set of real numbers with no two identical elements.\n(2) Let r be the number of elements in S.\n(3) Let \u03b4 be a set with r elements such that\n\u03b4i \u2208 {0, 1} \u2190 1 \u2264 i \u2264 r\n(4) Let M be a real number.\nThen\nr\nX\n\n\u03b4i Si = M\n\ni=1\n\nFind a variation of \u03b4 that causes the expression to evaluate true.\nArXiv, Vol. V, No. N, Month 20YY.\n\n\fAnalysis of the postulates produced by Karp's Theorem.\n\n*\n\n3\n\n3. ASSUMPTIONS PRODUCED BY KARP'S THEOREM.\nTheorem 3 from Reducibility among combinatorial problems. [Karp 1972, p. 93] 3.1.\nThe language L is (polynomial) complete if\nand\n\na) L \u2208 N P\nb) SATISFIABILITY \u221d L\n\nEither all complete languages are in P , or none of them are. The former alternative\nholds if and only if P = NP.\nKarp's Theorem is often interpreted to mean that if any NP-Complete problem\nis discovered to be solvable in deterministic polynomial time, then all NP-Complete\nproblems will be solvable in deterministic polynomial time. This common interpretation is based off of two postulates:\n(1) K-SAT can be reduced to any NP-Complete problem, and therefore any NPComplete problem can be solved in deterministic polynomial time if the underlying K-SAT problem has a fast solution.\n(2) A deterministic polynomial time solution to some NP-Complete problem will\nultimately provide a deterministic polynomial time solution to the underlying\nK-SAT problem.\nIn this article the author has no argument with the first postulate regarding\nKarp's Theorem. Karp has satisfactorily demonstrated that K-SAT can be reduced\nto any NP-Complete problem. It was Richard Karp who suggested that a deterministic polynomial time solution to K-SAT would prove P = NP ; the present author\nagrees.\nThe true purpose of this article is to challenge the second postulate. The idea\nthat a deterministic polynomial time solution to any NP-Complete problem will\nmagically produce a proof that P = NP is often assumed to be implied by Karp's\nTheorem; however it is not so implied, and this idea is completely misguided.\n4. A NP-COMPLETE PROBLEM WITH A DETERMINISTIC POLYNOMIAL TIME\nSOLUTION.\nIt has been previously demonstrated by the present author that the process of\nconverting a decimal number into a binary number can be represented as a form of\nthe 0-1-Knapsack problem, and therefore is NP-Complete. However, this particular\nNP-Complete problem does have a deterministic polynomial time solution.\n4.1 Formal proof that base conversion is a NP-Complete problem.\nShortly after the publication of the first version of this article, an arXiv reader\nwho has been kind enough to allow the quoting of his e-mail sent the author the\nfollowing message:\nI saw your ArXiv article 0808.3222. There's a fundamental misunderstanding in that paper. Just because base conversion is a *special case*\nof an NP-complete problem doesn't mean that base conversion is NPcomplete. You have the relation backwards. If you could show that\nArXiv, Vol. V, No. N, Month 20YY.\n\n\f*\n\n4\n\nJerrald Meek\n\nknapsack was a special case of base conversion, *then* base conversion\nwould be NP-complete.\nTimothy Chow; 26 August, 2008\nThe author realizes that in article 2 [Meek Article 2 2008] of this series, the\nauthor did not necessarily give a complete formal proof that base conversion is NPComplete. Furthermore, this objection is actually a reasonable argument, which the\nauthor should have foreseen. Therefore, a proof will be demonstrated here, wherein\nthe method of Richard Karp will be followed. First the 0-1-Knapsack problem will\nbe proven NP-Complete by reduction of K-SAT, to the Knapsack problem.\nKarp actually proved the Knapsack problem to be NP-Complete by the following\nprogression:\n(1) SATISFIABILITY \u221d SATISFIABILITY WITH AT MOST 3 LITERALS PER\nCLAUSE\n(2) SATISFIABILITY WITH AT MOST 3 LITERALS PER CLAUSE \u221d CHROMATIC NUMBER\n(3) CHROMATIC NUMBER \u221d EXACT COVER\n(4) EXACT COVER \u221d KNAPSACK\nIn the following proof Karp's rules are adhered to, however for the sake of brevity\nwe will reduce SAT directly to 0-1-Knapsack.\nProof. Assume:\n-S = hx, y, z|x \u2208 R, y \u2208 R, z \u2208 Ri\n-M \u2208\u001cR\n\u001d\n[0x + 0y + 0z = M ] , [x + 0y + 0z = M ] , [0x + y + 0z = M ] , [0x + 0y + z = M ] ,\n-a =\n[x + y + 0z = M ] , [x + 0y + z = M ] , [0x + y + z = M ] , [x + y + z = M ]\nAn 8-SAT problem is\na1 \u2228 a2 \u2228 a3 \u2228 a4 \u2228 a5 \u2228 a6 \u2228 a7 \u2228 a8\nSubstitute the elements of a for their assigned values\n[0x + 0y + 0z = M ] \u2228 [x + 0y + 0z = M ] \u2228 [0x + y + 0z = M ] \u2228\n[0x + 0y + z = M ] \u2228 [x + y + 0z = M ] \u2228 [x + 0y + z = M ] \u2228\n[0x + y + z = M ] \u2228 [x + y + z = M ]\nConvert the literals into summations\n#\n# \" 3\n# \" 3\n\" 3\nX\nX\nX\n{0, 1, 0}i Si = M \u2228\n{1, 0, 0}i Si = M \u2228\n{0, 0, 0}i Si = M \u2228\n3\nX\ni=1\n\ni=1\n\ni=1\n\ni=1\n\n\"\n\n#\n\n{0, 0, 1}i Si = M \u2228\n\n\" 3\nX\n\nArXiv, Vol. V, No. N, Month 20YY.\n\ni=1\n\n#\n\n{1, 1, 0}i Si = M \u2228\n\n\"\n\n3\nX\ni=1\n\n#\n\n{1, 0, 1}i Si = M \u2228\n\n\f*\n\nAnalysis of the postulates produced by Karp's Theorem.\n\n\" 3\nX\n\n#\n\n{0, 1, 1}i Si = M \u2228\n\ni=1\n\n\" 3\nX\n\n{1, 1, 1}i Si = M\n\ni=1\n\n5\n\n#\n\nThe above logical disjunction can more easily be restated similarly to the Horowitz\nand Sahni definition of the 0-1-Knapsack problem\n3\nX\n\n\u03b4i Si = M\n\ni=1\n\nDoes a variation of \u03b4 exist which makes this expression true?\nNow that we have a formal proof that the 0-1-Knapsack problem is a member of\nthe NP-Complete class. The same method can be used for base conversion.\nProof. Assume:\n-S = h1, 2, 4i\n-M =\u001c6\n\u001d\n[0(1) + 0(2) + 0(4) = 6] , [1 + 0(2) + 0(4) = 6] , [0(1) + 2 + 0(4) = 6] , [0(1) + 0(2) + 4 = 6] ,\n-a =\n[1 + 2 + 0(4) = 6] , [1 + 0(2) + 4 = 6] , [0(1) + 2 + 4 = 6] , [1 + 2 + 4 = 6]\nAn 8-SAT problem is\na1 \u2228 a2 \u2228 a3 \u2228 a4 \u2228 a5 \u2228 a6 \u2228 a7 \u2228 a8\nSubstitute the elements of a for their assigned values\n[0(1) + 0(2) + 0(4) = 6] \u2228 [1 + 0(2) + 0(4) = 6] \u2228 [0(1) + 2 + 0(4) = 6] \u2228\n[0(1) + 0(2) + 4 = 6] \u2228 [1 + 2 + 0(4) = 6] \u2228 [1 + 0(2) + 4 = 6] \u2228\n[0(1) + 2 + 4 = 6] \u2228 [1 + 2 + 4 = 6]\nConvert the literals into summations\n#\n# \" 3\n# \" 3\n\" 3\nX\nX\nX\n{0, 1, 0}i Si = 6 \u2228\n{1, 0, 0}i Si = 6 \u2228\n{0, 0, 0}i Si = 6 \u2228\n\"\n\n3\nX\n\ni=1\n\ni=1\n\ni=1\n\n#\n\n{0, 0, 1}i Si = 6 \u2228\n\ni=1\n\n\"\n\n3\nX\n\n\" 3\nX\n\n#\n\n{1, 1, 0}i Si = 6 \u2228\n\ni=1\n\n#\n\n{0, 1, 1}i Si = 6 \u2228\n\ni=1\n\n\" 3\nX\n\n\"\n\n3\nX\n\n#\n\n{1, 0, 1}i Si = 6 \u2228\n\ni=1\n\n#\n\n{1, 1, 1}i Si = 6\n\ni=1\n\nThe above logical disjunction can more easily be restated similarly to the Horowitz\nand Sahni definition of the 0-1-Knapsack problem\n3\nX\n\n\u03b4i Si = 6\n\ni=1\n\nDoes a variation of \u03b4 exist which makes this expression true?\nArXiv, Vol. V, No. N, Month 20YY.\n\n\f6\n\n*\n\nJerrald Meek\n\nThe point here is that K-SAT is reducible to the 0-1-Knapsack problem regardless\nof what numbers are placed into set S and value M . It is here demonstrated that\nfinding the base 2 digits of 6 is a NP-Complete problem.\nThe only variation of \u03b4, which evaluates true, is the ordered set \u03b4 = h0, 1, 1i. The\nbase 2 representation of 6 is 110. Notice that the left most digit in 110 represents a\nvalue of 4, while the center digit represents a value of 2. Therefore, 110 represents\n4 + 2 = 6. Likewise, \u03b4 = h0, 1, 1i when S = h1, 2, 4i represents 2 + 4 = 6.\n4+2=2+4\nWe already know that this particular Knapsack problem is solvable in deterministic polynomial time, as demonstrated in article 2 [Meek Article 2 2008], but it\nis also solvable in non-deterministic polynomial time and is then still a member of\nNP. Therefore, our \"special case\" of the knapsack problem meets both of Karp's\nrequirements to be an element of the NP-Complete class.\n4.2 How some NP-Complete problems have fast solutions.\nThe reason that the problem of converting a decimal number to a binary number\ncan be solved in deterministic polynomial time is because there is a special relationship between the elements of S in this particular 0-1-Knapsack problem. This\nrelationship can therefore be exploited to determine which literal of the underlying\nK-SAT problem has a true value. See [Meek Article 2 2008, sec 5.1].\nProof. Assume the following:\n-The set S has r elements.\n-There are r2 subsets of S.\n-Some special relationship between the elements of S allows for a fast determination of one subset of S which sums to M . That same relationship also allows a\nfast determination in the event that no subset of S sums to M .\n-Let \u03b4 be a set with r elements such that\n\u03b4i \u2208 {0, 1} \u2190 1 \u2264 i \u2264 r\n-Let M be a real number.\nThen\nr\nX\n\n\u03b4i Si = M\n\ni=1\n\ncan be represented as\n\n[0 = M ] \u2228 [S1 = M ] \u2228 [S2 = M ] \u2228 [S3 = M ] \u2228 . . . [Sr = M ] \u2228\n[S1 + S2 = M ] \u2228 [S1 + S3 = M ] \u2228 . . .\nThe above K-SAT problem is extended until there is exactly one literal for each\nsubset of S. To determine the truth-value of the entire expression it is only necessary\nto determine that any one literal is true, or that all literals are false.\nArXiv, Vol. V, No. N, Month 20YY.\n\n\fAnalysis of the postulates produced by Karp's Theorem.\n\n*\n\n7\n\nBecause of the special relationship between the elements of S, it is possible to\nquickly find one literal that is true if one exists [Meek Article 2 2008]. It is also the\ncase that if an attempt to find such a literal fails, then it can be quickly determined\nthat all laterals are false.\nThe fast solution to this problem is produced by the fact that it is not necessary to\ndetermine the truth-value of each and every literal individually. If it were the case\nthat each literal had to be individually determined, then the P = NP Optimization\nTheorem would not allow the optimization to process in deterministic polynomial\ntime (see the discussion of this in section 5 below).\nIt is then easy to see that the deterministic polynomial time solution to this\nproblem cannot produce a fast solution to the underlying K-SAT problem. Infact,\nif the optimization did produce a solution to the underlying K-SAT problem, then\nthe solution could not run in deterministic polynomial time.\nInstead, this optimized solution simply produces a fast identification of one true\nliteral in the K-SAT problem. This ability to quickly identify a true literal in the\nK-SAT problem cannot be transferred to other NP-Complete problems, because the\nfast solution is dependant upon a special condition of a particular instance of the\n0-1-Knapsack problem, which will not exist in all other NP-Complete problems.\n4.3 Formalized argument proving no deterministic polynomial time solution from the\nform of a NP-Complete problem for K-SAT where k \u2265 3.\nAssume:\n-The K-SAT problem associated to the hereinabove described 0-1-Knapsack problem has k literals where k = 2|S| \u2265 3.\n-x is a set of literals with k elements; each literal has an unknown truth value.\nThe K-SAT problem in question is\nx1 \u2228 x2 \u2228 x3 \u2228 . . . \u2228 xk\nProof. Assume:\n-Q = some predictable relationship between the elements of S.\n-S = {x|Q 7\u2192 x}\n-M \u2208 R\n-x2 = T\n-A (y, z) is an algorithm which identifies one element of x which has a true value\nby comparing the elements of y with relation Q to the value of z.\nThen\nA (S, M ) \u2261 x2\nThe optimized 0-1-Knapsack algorithm uses the elements of S with quality Q,\nand the value of M to identify that one literal has a true value.\nProof. Assume:\nArXiv, Vol. V, No. N, Month 20YY.\n\n\f8\n\n*\n\nJerrald Meek\n\n-Q = some predictable relationship between the elements of S.\n-S = {x|x \u2208 R}\n-M \u2208 R\n-A (y, z) is an algorithm which identifies one element of x which has a true value\nby comparing the elements of y with relation Q to the value of z.\n-\u2297 represents an undefined result.\nThen\nA (S, M ) \u2261 \u2297\nThe optimized 0-1-Knapsack algorithm uses the elements of S with quality Q,\nand the value of M to identify that one literal has a true value. However, the\nquality Q is not associated with the elements of S, so the result is undefined.\nProof. Assume:\n-Q = some predictable relationship between the elements of S.\n-We are given a K-COL problem (graph coloring problem where k \u2265 3).\n-S = \u2298\n-M = \u2298\n-A (y, z) is an algorithm which identifies one element of x which has a true value\nby comparing the elements of y with relation Q to the value of z.\n-\u2297 represents an undefined result.\nThen\nA (S, M ) \u2261 \u2297\nThe optimized 0-1-Knapsack algorithm uses the elements of S with relation Q,\nand the value of M to identify that one literal has a true value. However, the set\nS and value M are not provided in the definition of the K-COL problem, so the\nresult is undefined.\nTheorem 4.1. K-SAT Input Relation Theorem.\nA solution that solves a NP-Complete problem in deterministic polynomial time,\nand relies upon some relationship between the inputs of the problem, does not produce a deterministic polynomial time solution for all instances of K-SAT.\n5. MAGICAL SOLUTIONS NOT ALLOWED.\nWhen solving any NP-Complete problem we are given the following:\n(1) a formula representing the problem;\n(2) the input for the problem;\n(3) the set of all possible inputs for the underlying K-SAT.\nIf some magical algorithm exists that allows someone to solve all NP-Complete\nproblems in deterministic polynomial time, then the algorithm is stuck working\nwith one or more of the preceding options. So far we have ruled out option 3 in\nArXiv, Vol. V, No. N, Month 20YY.\n\n\fAnalysis of the postulates produced by Karp's Theorem.\n\n*\n\n9\n\narticle 1 [Meek Article 1 2008], and option 2 is eliminated in article 2 [Meek Article\n2 2008] and the present work.\nSo we are left with option 1, the formula. In the case of NP-Complete problems,\nthat formula is K-SAT, where k \u2265 3. K-SAT can be reduced to any NP-Complete\nproblem, and any NP-Complete problem can be represented as a form of K-SAT.\nIt will be assumed here that 3-SAT cannot be reduced to 2-SAT. For further\ndiscussion on the complexity of a K-SAT formula, see article 1 [Meek Article 1\n2008].\n5.1 Fast K-SAT and the rules of arithmetic.\nShortly after the publication of the first version of this article on arXiv, the author\nreceived an e-mail from Lance Fortnow containing a warning about the dificulty\nof resolving P vs. NP. With the permission of Dr. Fortnow, his statement is\nreproduced, \"be sure that [this research report will] rule out all possible algorithms\nmaking absolutely no assumption about their behavior.\"\nThe question is how do we know for sure, even after determining that none of\nthe 3 tools given to us to work with are sufficient, that there isn't some strange\nnumber theoretic trick that bypasses all of these limitations?\nProof. Assume:\n-a, b, and c are all literals with unknown truth values.\n-There exists a base 3-SAT problem a \u2228 b \u2228 c\n-x = h a, a, \u00aca, a, \u00aca, \u00aca, \u00acai\n-y = h b, \u00acb, b, \u00acb, b, \u00acb, \u00acbi\n-z = h\u00acc, c, c, \u00acc.\u00acc, c, \u00acci\nWe can now create the following 7 additional formulas, which are contingent upon\nthe base formula.\n(1)\n(2)\n(3)\n(4)\n(5)\n(6)\n(7)\n\nx1 \u2228 y1 \u2228 z1\nx2 \u2228 y2 \u2228 z2\nx3 \u2228 y3 \u2228 z3\nx4 \u2228 y4 \u2228 z4\nx5 \u2228 y5 \u2228 z5\nx6 \u2228 y6 \u2228 z6\nx7 \u2228 y7 \u2228 z7\n\n[\n[\n[\n[\n[\n[\n[\n\n= a \u2228 b \u2228 \u00acc\n= a \u2228 \u00acb \u2228 c\n= \u00aca \u2228 b \u2228 c\n= a \u2228 \u00acb \u2228 \u00acc\n= \u00aca \u2228 b \u2228 \u00acc\n= \u00aca \u2228 \u00acb \u2228 c\n= \u00aca \u2228 \u00acb \u2228 \u00acc\n\n]\n]\n]\n]\n]\n]\n]\n\nNotice that the truth-value of our 7 formulas is contingent upon not simply the\ntruth-value of the base 3-SAT formula, but the truth-value of all three literals of\nthe base formula.\nIf an algorithm determines that a is true without determining the value of b or\nc, then the tautology hood of formulas 3, 5, 6, and 7 are still unknown.\nAs can be seen from the above table, an algorithm that identifies only one literal\nthat is true, or alternatively determines that all literals are false will not suffice.\nSuch an algorithm would solve the base problem, but the solution would not transfer\nto all of the other problems. We then cannot say that the algorithm would provide\na solution for all NP-Complete problems.\nArXiv, Vol. V, No. N, Month 20YY.\n\n\f10\n\n*\n\n1\n2\n3\n4\n5\n6\n7\n8\n\na\nT\nT\nT\nF\nT\nF\nF\nF\n\nJerrald Meek\n\nLiteral\nb\nc\nT\nT\nT\nF\nF\nT\nT\nT\nF\nF\nT\nF\nF\nT\nF\nF\n\nBASE\nT\nT\nT\nT\nT\nT\nT\nF\n\n1\nT\nT\nT\nT\nT\nT\nF\nT\n\nFormula\n2\n3\n4\nT T\nT\nT T\nT\nT T\nT\nT T\nF\nT\nF\nT\nF\nT\nT\nT T\nT\nT T\nT\n\n5\nT\nT\nF\nT\nT\nT\nT\nT\n\n6\nT\nF\nT\nT\nT\nT\nT\nT\n\n7\nF\nT\nT\nT\nT\nT\nT\nT\n\nSo is it possible that some magical algorithm could find the value of all three literals in deterministic polynomial time without performing a search or a partitioned\nsearch?\nProof. Assume:\n-The values of a, b, and c are independent of each other; as is suggested by the\nabove table.\n-a \u21d2 d = 1, \u00aca \u21d2 d = 0.\n-b \u21d2 e = 2, \u00acb \u21d2 e = 0.\n-c \u21d2 f = 4, \u00acc \u21d2 f = 0.\n-g \u2208 [0, 7]\nGiven\nd+e+f = g\nThe value of g can be determined from the three variables of unknown value\nin deterministic polynomial time if and only if the value of a, b, and c can be\ndetermined by some algorithm in deterministic polynomial time.\nIt is easy to determine that in the above example, any Turing Machine, nondeterministic or deterministic, would be confused between the possibilities of eight\ndifferent equally valid results.\n5.2 Fast K-SAT and unknown formulas.\nTo complicate matters more. The exact formula is not known in many NP-Complete\nproblems.\nProof. Assume:\n-S = h1, 2, 3i\n-M =\u001c5\n\u001d\n[0 = 5] , [1 = 5] , [2 = 5] , [3 = 5] ,\n-x =\n[1 + 2 = 5] , [1 + 3 = 5] , [2 + 3 = 5] , [1 + 2 + 3 = 5]\nThe underlying 8-SAT problem for the above-described 0-1-Knapsack problem is\nx1 \u2228 x2 \u2228 x3 \u2228 x4 \u2228 x5 \u2228 x6 \u2228 x7 \u2228 x8\nNotice in the above example, x7 is by necessity a literal with a value of true\nbecause it is associated with the equation 2 + 3 = 5, which is a true statement\nArXiv, Vol. V, No. N, Month 20YY.\n\n\fAnalysis of the postulates produced by Karp's Theorem.\n\n*\n\n11\n\nunder the rules of arithmetic. Likewise, all other literals in this problem are by\nnecessity literals with a false value because they are associated with equations,\nwhich are false statements under the rules of arithmetic.\nThe P = NP Optimization Theorem will not allow a deterministic polynomial\ntime algorithm to examine the equations associated with each literal of a Knapsack\nproblem to determine which ones are by necessity true, and which are by necessity\nfalse. Likewise, other NP-Complete problems have literals associated with statements, and each literal is by necessity either true or false. It is then the case that for\neach NP-Complete problem there is one and only one input set for the underlying\nK-SAT problem that is valid.\nIt has already been demonstrated that an algorithm cannot select one out of the\n2k possible input sets as the correct one for a K-SAT problem. It has also been\ndemonstrated that even if an algorithm did select the correct one, then there are\n2k \u2212 1 other NP-Complete problems for which that solution is not correct.\nWe could expect that an algorithm could examine a polynomial number of literals to eliminate some possibilities, but there will still be more than one possible\nsolution.\n6. CONCLUSION: P 6= NP\nThe P = NP Optimization Theorem eliminates a search algorithm by exhaustion\nas a polynomial time solution to a NP-Complete problem.\nThe P = NP Partition Theorem eliminates a search algorithm to produce a\npolynomial size search partition which can be used in a polynomial time solution\nto a NP-Complete problem.\nThe combination of the Knapsack Random Set Theorem, Knapsack Composition Theorem, Knapsack M Quality Reduction Theorem, and Knapsack Set Quality\nTheorem indicate that any deterministic polynomial time solution to the Knapsack\nproblem, which relies upon some quality of the problem, will not produce a solution\nthat works for all instances of the Knapsack problem.\nThe K-SAT Input Relation Theorem indicates that a solution dependant on the\nform of any NP-Complete problem, or some quality of the problem's inputs, to\nsidestep the P = NP Optimization Theorem will not produce a fast solution for the\nunderlying K-SAT. It is then the case that such an optimization is not transferable\nto all other NP-Complete problems.\nIt has therefore been determined that:\n(1) Search algorithms will not prove P = NP.\n(2) Partitioning the search group will not produce an algorithm that proves P =\nNP.\n(3) Relying upon the form of an individual NP-Complete problem, or the quality\nof the problem's inputs, can sometimes solve that problem in deterministic\npolynomial time but does not provide an algorithm that proves P = NP.\n(4) There is no magical solution that produces a deterministic polynomial time\nsolution for NP-Complete problems.\nArXiv, Vol. V, No. N, Month 20YY.\n\n\f12\n\n*\n\nJerrald Meek\n\nIf it can be accepted that any algorithm that solves a NP-Complete problem will\nbe one of the following:\n(1) a search algorithm, which examines all possible literal values;\n(2) a partitioned search algorithm, which partitions the set of all possible literal\nvalues and only examines a limited number of the possible input sets;\n(3) a direct solution relying upon the form of the problem;\n(4) or a magical solution.\nThen the conclusion P 6= NP can be accepted as final.\nQ.E.D.\n7. VERSION HISTORY.\nThe author wishes to encourage further feedback which may improve, strengthen,\nor perhaps disprove the content of this article. For that reason the author does not\npublish the names of any specific people who may have suggested, commented, or\ncriticized the article in such a way that resulted in a revision, unless premission has\nbeen granted to do so.\narXiv Current Version\n3Sep08 Submitted to arXiv.\n-Minor changes.\narXiv Version 4\n29Aug08 Submitted to arXiv.\n-Minor error corrections.\narXiv Version 3\n27Aug08 Submitted to arXiv.\n-Addition of formal proof that base conversion is NP-Complete.\n-Addition of argument reguarding magical solutions.\narXiv Version 2\n25Aug08 Submitted to arXiv.\n-Addition of formalized argument.\narXiv Version 1\n23Aug08 Submitted to arXiv.\nREFERENCES\nHorowitz, E. and Sahni, S. 1974. Computing partitions with applications to the knapsack problem. J. Assoc. Comput. Mach. Zbl 0329.90046.\nKarp, R. 1972. Reducibility among combinatorial problems. Complexity of computer computations, Proc. Sympos., IBM Thomas J. Watson Res. Center. MR378476 Zbl 0366.68041.\nMeek, J. 2008. P is a proper subset of NP. arXiv:0804.1079 Article 1 in series of 4.\nMeek, J. 2008. Analysis of the deterministic polynomial time solvability of the 0-1-Knapsack\nproblem. arXiv:0805.0517 Article 2 in series of 4.\nReceived xx/2008; revised xx/2008; accepted xx/2008\nArXiv, Vol. V, No. N, Month 20YY.\n\n\f"}