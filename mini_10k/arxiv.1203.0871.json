{"id": "http://arxiv.org/abs/1203.0871v2", "guidislink": true, "updated": "2013-05-21T08:14:00Z", "updated_parsed": [2013, 5, 21, 8, 14, 0, 1, 141, 0], "published": "2012-03-05T11:42:44Z", "published_parsed": [2012, 3, 5, 11, 42, 44, 0, 65, 0], "title": "Transition Semantics - The Dynamics of Dependence Logic", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1203.2617%2C1203.4172%2C1203.1315%2C1203.2215%2C1203.1561%2C1203.5518%2C1203.3113%2C1203.3859%2C1203.6245%2C1203.1847%2C1203.2105%2C1203.1998%2C1203.3340%2C1203.2621%2C1203.2032%2C1203.2836%2C1203.1291%2C1203.5577%2C1203.1507%2C1203.4501%2C1203.4483%2C1203.2602%2C1203.2611%2C1203.5968%2C1203.0194%2C1203.2075%2C1203.1258%2C1203.0248%2C1203.3654%2C1203.0573%2C1203.6147%2C1203.5226%2C1203.3850%2C1203.2254%2C1203.4096%2C1203.6351%2C1203.2784%2C1203.0264%2C1203.5279%2C1203.0184%2C1203.2145%2C1203.4289%2C1203.5219%2C1203.4730%2C1203.1490%2C1203.6817%2C1203.5461%2C1203.4784%2C1203.0563%2C1203.2370%2C1203.2335%2C1203.6643%2C1203.0598%2C1203.3311%2C1203.1877%2C1203.6670%2C1203.2544%2C1203.0569%2C1203.1167%2C1203.6224%2C1203.0749%2C1203.3939%2C1203.0538%2C1203.6795%2C1203.5235%2C1203.4224%2C1203.3369%2C1203.2208%2C1203.4680%2C1203.4780%2C1203.3775%2C1203.6339%2C1203.5141%2C1203.4429%2C1203.0460%2C1203.0504%2C1203.2553%2C1203.5268%2C1203.6195%2C1203.0685%2C1203.0871%2C1203.0987%2C1203.3819%2C1203.3412%2C1203.4614%2C1203.3357%2C1203.0877%2C1203.1837%2C1203.1345%2C1203.1800%2C1203.0967%2C1203.3546%2C1203.5280%2C1203.4529%2C1203.3757%2C1203.3130%2C1203.4440%2C1203.1685%2C1203.3809%2C1203.6798%2C1203.6592&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Transition Semantics - The Dynamics of Dependence Logic"}, "summary": "We examine the relationship between Dependence Logic and game logics. A\nvariant of Dynamic Game Logic, called Transition Logic, is developed, and we\nshow that its relationship with Dependence Logic is comparable to the one\nbetween First-Order Logic and Dynamic Game Logic discussed by van Benthem. This\nsuggests a new perspective on the interpretation of Dependence Logic formulas,\nin terms of assertions about reachability in games of im- perfect information\nagainst Nature. We then capitalize on this intuition by developing expressively\nequivalent variants of Dependence Logic in which this interpretation is taken\nto the foreground.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1203.2617%2C1203.4172%2C1203.1315%2C1203.2215%2C1203.1561%2C1203.5518%2C1203.3113%2C1203.3859%2C1203.6245%2C1203.1847%2C1203.2105%2C1203.1998%2C1203.3340%2C1203.2621%2C1203.2032%2C1203.2836%2C1203.1291%2C1203.5577%2C1203.1507%2C1203.4501%2C1203.4483%2C1203.2602%2C1203.2611%2C1203.5968%2C1203.0194%2C1203.2075%2C1203.1258%2C1203.0248%2C1203.3654%2C1203.0573%2C1203.6147%2C1203.5226%2C1203.3850%2C1203.2254%2C1203.4096%2C1203.6351%2C1203.2784%2C1203.0264%2C1203.5279%2C1203.0184%2C1203.2145%2C1203.4289%2C1203.5219%2C1203.4730%2C1203.1490%2C1203.6817%2C1203.5461%2C1203.4784%2C1203.0563%2C1203.2370%2C1203.2335%2C1203.6643%2C1203.0598%2C1203.3311%2C1203.1877%2C1203.6670%2C1203.2544%2C1203.0569%2C1203.1167%2C1203.6224%2C1203.0749%2C1203.3939%2C1203.0538%2C1203.6795%2C1203.5235%2C1203.4224%2C1203.3369%2C1203.2208%2C1203.4680%2C1203.4780%2C1203.3775%2C1203.6339%2C1203.5141%2C1203.4429%2C1203.0460%2C1203.0504%2C1203.2553%2C1203.5268%2C1203.6195%2C1203.0685%2C1203.0871%2C1203.0987%2C1203.3819%2C1203.3412%2C1203.4614%2C1203.3357%2C1203.0877%2C1203.1837%2C1203.1345%2C1203.1800%2C1203.0967%2C1203.3546%2C1203.5280%2C1203.4529%2C1203.3757%2C1203.3130%2C1203.4440%2C1203.1685%2C1203.3809%2C1203.6798%2C1203.6592&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We examine the relationship between Dependence Logic and game logics. A\nvariant of Dynamic Game Logic, called Transition Logic, is developed, and we\nshow that its relationship with Dependence Logic is comparable to the one\nbetween First-Order Logic and Dynamic Game Logic discussed by van Benthem. This\nsuggests a new perspective on the interpretation of Dependence Logic formulas,\nin terms of assertions about reachability in games of im- perfect information\nagainst Nature. We then capitalize on this intuition by developing expressively\nequivalent variants of Dependence Logic in which this interpretation is taken\nto the foreground."}, "authors": ["Pietro Galliani"], "author_detail": {"name": "Pietro Galliani"}, "author": "Pietro Galliani", "links": [{"href": "http://arxiv.org/abs/1203.0871v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1203.0871v2", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "math.LO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "math.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "03B60, 03B70, 03B80", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1203.0871v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1203.0871v2", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "arXiv:1203.0871v2 [math.LO] 21 May 2013\n\nTransition Semantics\nThe Dynamics of Dependence Logic\nPietro Galliani\nUniversity of Helsinki\n(pgallian@gmail.com)\nJune 20, 2018\nAbstract\nWe examine the relationship between Dependence Logic and game\nlogics. A variant of Dynamic Game Logic, called Transition Logic, is\ndeveloped, and we show that its relationship with Dependence Logic is\ncomparable to the one between First-Order Logic and Dynamic Game\nLogic discussed by van Benthem.\nThis suggests a new perspective on the interpretation of Dependence\nLogic formulas, in terms of assertions about reachability in games of imperfect information against Nature. We then capitalize on this intuition by\ndeveloping expressively equivalent variants of Dependence Logic in which\nthis interpretation is taken to the foreground.\n\n1\n1.1\n\nIntroduction\nDependence Logic\n\nDependence Logic [17] is an extension of First-Order Logic which adds dependence atoms of the form =(t1 , . . . , tn ) to it, with the intended interpretation of\n\"the value of the term tn is a function of the values of the terms t1 . . . tn\u22121 .\"\nThe introduction of such atoms is roughly equivalent to the introduction\nof non-linear patterns of dependence and independence between variables of\nBranching Quantifier Logic [7] or Independence Friendly Logic [10, 9, 15]: for\nexample, both the Branching Quantifier Logic sentence\n\u0012\n\u0013\n\u2200x \u2203y\nR(x, y, z, w)\n\u2200z \u2203w\nand the Independence Friendly Logic sentence\n\u2200x\u2203y\u2200z(\u2203w/x, y)R(x, y, z, w)\ncorrespond in Dependence Logic to\n\u2200x\u2203y\u2200z\u2203w(=(z, w) \u2227 R(x, y, z, w)),\n1\n\n\fin the sense that all of these expressions are equivalent to the Skolem formula\n\u2203f \u2203g\u2200x\u2200zR(x, f (x), z, g(z)).\nAs this example illustrates, the main peculiarity of Dependence Logic compared\nto the others above-mentioned logics lies in the fact that, in Dependence Logic,\nthe notion of dependence and independence between variables is explicitly separated from the notion of quantification. This makes it an eminently suitable\nformalism for the formal analysis of the properties of dependence itself in a firstorder setting, and some recent papers ([5, 2, 4]) explore the effects of replace\ndependence atoms with other similar primitives such as independence atoms [5],\nmultivalued dependence atoms [2], or inclusion or exclusion atoms [3, 4].\nBranching Quantifier Logic, Independence Friendly Logic and Dependence\nLogic, as well as their variants, are called logics of imperfect information: indeed, the truth conditions of their sentences can be obtained by defining, for every model M and sentence \u03c6, an imperfect-information semantic game GM (\u03c6)\nbetween a Verifier (also called Eloise) and a Falsifier (also called Abelard),\nand then asserting that \u03c6 is true in M if and only if the Verifier has a winning strategy in GM (\u03c6). As an alternative of this (non-compositional) GameTheoretic Semantics, which is an imperfect-information variant of Hintikka's\nGame-Theoretic Semantics for First Order Logic [8], Hodges introduced in [11]\nTeam Semantics (also called Trump Semantics), a compositional semantics for\nlogics of imperfect information which is equivalent to Game-Theoretic Semantics over sentences and in which formulas are satisfied or not satisfied not by\nsingle assignments, but by sets of assignments (called Teams).\nIn this work, we will be mostly concerned with Team Semantics and some\nof its variants. We refer the reader to the relevant literature (for example to\n[17] and [15]) for further information regarding these logics: in the rest of this\nsection, we will content ourselves with recalling the definitions and results which\nwill be useful for the rest of this work.\nDefinition 1.1 (Assignments and substitutions) Let M be a first order\nmodel and let V be a finite set of variables. Then an assignment over M with\ndomain V is a function s from V to the set Dom(M ) of all elements of M .\nFurthermore, for any assignment s over M with domain V , any element\nm \u2208 Dom(M ) and any variable v (not necessarily in V ), we write s[m/v] for the\nassignment with domain V \u222a {v} such that\n\u001a\nm\nif w = v;\ns[m/v](w) =\ns(w) if w \u2208 V \\{v}\nfor all w \u2208 V \u222a {v}.\nDefinition 1.2 (Team) Let M be a first-order model and let V be a finite set\nof variables. A team X over M with domain Dom(X) = V is a set of assignments\nfrom V to M .\n\n2\n\n\fDefinition 1.3 (Relations corresponding to teams) Let X be a team over\nM , and let V be a finite set of variables. and let ~v be a finite tuple of variables\nin its domain. Then X(~v ) is the relation {s(~v ) : s \u2208 X}. Furthermore, we write\nRel(X) for X(Dom(X)).\nAs is often the case for Dependence Logic, we will assume that all our formulas\nare in Negation Normal Form:\nDefinition 1.4 (Dependence Logic, Syntax) Let \u03a3 be a first-order signature. Then the set of all dependence logic formula with signature \u03a3 is given\nby\n\u03c6 ::= R~t | \u00acR~t | =(t1 , . . . , tn ) | \u03c6 \u2228 \u03c6 | \u03c6 \u2227 \u03c6 | \u2203v\u03c6 | \u2200v\u03c6\nwhere R ranges over all relation symbols, ~t ranges over all tuples of terms of the\nappropriate arities, t1 . . . tn range over all terms and v ranges over the set Var\nof all variables.\nThe set Free(\u03c6) of all free variables of a formula \u03c6 is defined precisely as in\nFirst Order Logic, with the additional condition that all variables occurring in\na dependence atom are free with respect to it.\nDefinition 1.5 (Dependence Logic, Semantics) Let M be a first-order model,\nlet X be a team over it, and let \u03c6 be a Dependence Logic formula with the same\nsignature of M and with free variables in Dom(X). Then we say that X satisfies\n\u03c6 in M , and we write M |=X \u03c6, if and only if\nTS-lit:\n\n\u03c6 is a first-order literal and M |=s \u03c6 for all s \u2208 X;\n\nTS-dep: \u03c6 is a dependence atom =(t1 , . . . , tn ) and any two assignments s, s\u2032 \u2208\nX which assign the same values to t1 . . . tn\u22121 also assign the same value\nto tn ;\nTS-\u2228: \u03c6 is of the form \u03c81 \u2228 \u03c82 and there exist two teams Y1 and Y2 such that\nX = Y1 \u222a Y2 , M |=Y1 \u03c81 and M |=Y2 \u03c82 ;\nTS-\u2227:\n\n\u03c6 is of the form \u03c81 \u2227 \u03c82 , M |=X \u03c81 and M |=X \u03c82 ;\n\nTS-\u2203: \u03c6 is of the form \u2203v\u03c8 and there exists a function F : X \u2192 Dom(M ) such\nthat M |=X[F/v] \u03c8, where\nX[F/v] = {s[F (s)/v] : s \u2208 X}\nTS-\u2200:\n\n\u03c6 is of the form \u2200v\u03c8 and M |=X[M/v] \u03c8, where\nX[M/v] = {s[m/v] : s \u2208 X, m \u2208 Dom(M )}.\n\nThe disjunction of Dependence Logic does not behave like the classical disjunction: for example, it is easy to see that =(x)\u2228 =(x) is not equivalent to =(x), as\nthe former holds for the team X = {{(x, 0)}, {(x, 1)}} and the latter does not.\nHowever, it is possible to define the classical disjunction in terms of the other\nconnectives:\n3\n\n\fDefinition 1.6 (Classical Disjunction) Let \u03c81 and \u03c82 be two Dependence\nLogic formulas, and let u1 and u2 be two variables not occurring in them. Then\nwe write \u03c81 \u2294 \u03c82 as a shorthand for\n\u2203u1 \u2203u2 (=(u1 )\u2227 =(u2 ) \u2227 ((u1 = u2 \u2227 \u03c81 ) \u2228 (u1 6= u2 \u2227 \u03c82 ))).\nProposition 1.1 For all formulas \u03c81 and \u03c82 , all models M with at least two\nelements1 whose signature contains that of \u03c81 and \u03c82 and all teams X whose\ndomain contains the free variables of \u03c81 and \u03c82\nM |=X \u03c81 \u2294 \u03c82 \u21d4 M |=X \u03c81 or M |=X \u03c82 .\nThe following four proportions are from [17]:\nProposition 1.2 For all models M and Dependence Logic formulas \u03c6, M |=\u2205\n\u03c6.\nProposition 1.3 (Downwards Closure) If M |=X \u03c6 and Y \u2286 X then M |=Y\n\u03c8.\nProposition 1.4 (Locality) If M |=X \u03c6 and X(Free(\u03c6)) = Y (Free(\u03c6)) then\nM |=Y \u03c6.\nProposition 1.5 (From Dependence Logic to \u03a311 ) Let \u03c6(~v ) be a Dependence\nLogic formula with free variables in ~v . Then there exists a \u03a311 sentence \u03a6(R)\nsuch that\nM |=X \u03c6 \u21d4 M |= \u03a6(X(~v ))\nfor all suitable models M and for all nonempty teams X. Furthermore, in \u03a6(R)\nthe symbol R occurs only negatively.\nAs proved in [13], there is also a converse for the last proposition:\nTheorem 1.7 (From \u03a311 to Dependence Logic) Let \u03a6(R) be a \u03a311 sentence\nin which R occurs only negatively. Then there exists a Dependence Logic formula\n\u03c6(~v ), where |~v | is the arity of R, such that\nM |=X \u03c6 \u21d4 M |= \u03a6(X(~v ))\nfor all suitable models M and for all nonempty teams X whose domain contains\n~v .\nBecause of this correspondence between Dependence Logic and Existential Second Order Logic, it is easy to see that Dependence Logic is closed under existential quantification: for all Dependence Logic formulas \u03c6(~v , P ) over the signature\n1 In general, we will assume through this whole work that all first-order models which we\nare considering have at least two elements. As one-element models are trivial, this is not a\nvery onerous restriction.\n\n4\n\n\f\u03a3 \u222a {P } there exists a Dependence Logic formula \u2203P \u03c6(~v , P ) over the signature\n\u03a3 such that\nM |=X \u2203P \u03c6(~v , P ) \u21d4 \u2203P s.t. M |=X \u03c6(~v , P )\nfor all models M with domain \u03a3 and for all teams X over the free variables\nof \u03c6. Therefore, in the rest of this work we will add second-order existential\nquantifiers to the language of Dependence Logic, and we will write \u2203P \u03c6(~v , P )\nas a shorthand for the corresponding Dependence Logic expression.\n\n1.2\n\nDynamic Game Logic\n\nGame logics are logical formalisms for reasoning about games and their properties in a very general setting. Whereas the Game Theoretic Semantics approach\nattempts to use game-theoretic techniques to interpret logical systems, game\nlogics attempt to put logic to the service of game theory, by providing a highlevel language for the study of games.\nThey generally contain two different kinds of expressions:\n1. Game terms, which are descriptions of games in terms of compositions of\ncertain primitive atomic games, whose interpretation is presumed fixed for\nany given game model;\n2. Formulas, which, in general, correspond to assertions about the abilities\nof players in games.\nIn this subsection, we are going to summarize the definition of a variant\nof Dynamic Game Logic [16].2 Then, in the next subsection, we will discuss\na remarkable connection between First-Order Logic and Dynamic Game Logic\ndiscovered by Johan van Benthem in [19].\nOne of the fundamental semantic concepts of Dynamic Game Logic is the\nnotion of forcing relation:\nDefinition 1.8 (Forcing Relation) Let S be a nonempty set of states. A\nforcing relation over S is a set \u03c1 \u2286 S\u00d7Parts(S), where Parts(S) is the powerset\nof S.\nIn brief, a forcing relation specifies the abilities of a player in a perfect-information\ngame: (s, X) \u2208 \u03c1 if and only if the player has a strategy that guarantees that,\nwhenever the initial position of the game is s, the terminal position of the game\nwill be in X.\nA (two-player) game is then defined as a pair of forcing relations satisfying\nsome axioms:\nDefinition 1.9 (Game) Let S be a nonempty set of states. A game over S is\na pair (\u03c1E , \u03c1A ) of forcing relations over S satisfying the following conditions for\nall i \u2208 {E, A}, all s \u2208 S and all X, Y \u2286 S:\n2 The main difference between this version and the one of Parikh's original paper lies in the\nabsence of the iteration operator \u03b3 \u2217 from our formalism. In this, we follow [19, 20].\n\n5\n\n\fMonotonicity:\nConsistency:\nNon-triviality:\nDeterminacy:\n\nIf (s, X) \u2208 \u03c1i and X \u2286 Y then (s, Y ) \u2208 \u03c1i ;\nIf (s, X) \u2208 \u03c1E and (s, Y ) \u2208 \u03c1A then X \u2229 Y 6= \u2205;\n(s, \u2205) 6\u2208 \u03c1i .\nIf (s, X) 6\u2208 \u03c1i then (s, S\\X) \u2208 \u03c1j , where j \u2208 {E, A}\\{i}.3\n\nDefinition 1.10 (Game Model) Let S be a nonempty set of states, let \u03a6 be\na nonempty set of atomic propositions and let \u0393 be a nonempty set of atomic\nA\ngame symbols. Then a game model over S, \u03a6 and \u0393 is a triple (S, {(\u03c1E\ng , \u03c1g ) :\nE\nA\ng \u2208 \u0393}, V ), where (\u03c1g , \u03c1g ) is a game over S for all g \u2208 \u0393 and where V is a\nvalutation function associating each p \u2208 \u03a6 to a subset V (p) \u2286 S.\nThe language of Dynamic Game Logic, as we already mentioned, consists of\ngame terms, built up from atomic games, and of formulas, built up from atomic\nproposition. The connection between these two parts of the language is given\nby the test operation \u03c6?, which turns any formula \u03c6 into a test game, and the\ndiamond operation, which combines a game term \u03b3 and a formula \u03c6 into a new\nformula h\u03b3, ii\u03c6 which asserts that agent i can guarantee that the game \u03b3 will\nend in a state satisfying \u03c6.\nDefinition 1.11 (Dynamic Game Logic - Syntax) Let \u03a6 be a nonempty\nset of atomic propositions and let \u0393 be a nonempty set of atomic game formulas. Then the sets of all game terms \u03b3 and formulas \u03c6 are defined as\n\u03b3\n\u03c6\n\n::= g | \u03c6? | \u03b3; \u03b3 | \u03b3 \u222a \u03b3 | \u03b3 d\n::= \u22a5 | p | \u00ac\u03c6 | \u03c6 \u2228 \u03c6 | h\u03b3, ii\u03c6\n\nfor p ranging over \u03a6, g ranging over \u0393, and i ranging over {E, A}.\nWe already mentioned the intended interpretations of the test connective \u03c6?\nand of the diamond connective h\u03b3, ii\u03c6. The interpretations of the other game\nconnectives should be clear: \u03b3 d is obtained by swapping the roles of the players\nin \u03b3, \u03b31 \u222a \u03b32 is a game in which the existential player E chooses whether to play\n\u03b31 or \u03b32 , and \u03b31 ; \u03b32 is the concatenation of the two games corresponding to \u03b31\nand \u03b32 respectively.\nA\nDefinition 1.12 (Dynamic Game Logic - Semantics) Let G = (S, {(\u03c1E\ng , \u03c1g ) :\ng \u2208 \u0393}, V ) be a game model over S, \u0393 and \u03a6. Then for all game terms \u03b3 and\nall formulas \u03c6 of Dynamic Game Logic over \u0393 and \u03a6 we define a game k\u03b3kG\nand a set k\u03c6kG \u2286 S as follows:\n\nDGL-atomic-game:\nDGL-test:\n\nA\nFor all g \u2208 \u0393, kgkG = (\u03c1E\ng , \u03c1g );\n\nFor all formulas \u03c6, k\u03c6?kG = (\u03c1E , \u03c1A ), where\n\n3 This requirement is nothing but a formal version of Zermelo's Theorem: if one of the\nplayers cannot force the outcome of the game to belong to a set of \"winning outcomes\" X,\nthis implies that the other player can force it to belong to the complement of X.\n\n6\n\n\f\u2022 s\u03c1E X iff s \u2208 k\u03c6kG and s \u2208 X;\n\u2022 s\u03c1A X iff s 6\u2208 k\u03c6kG or s \u2208 X\nfor all s \u2208 S and all X with \u2205 6= X \u2286 S;\nDGL-concat: For all game terms \u03b31 and \u03b32 , k\u03b31 ; \u03b32 kG = (\u03c1E , \u03c1A ), where,\nA\nE\nA\nfor all i \u2208 {E, A} and for k\u03b31 kG = (\u03c1E\n1 , \u03c11 ), k\u03b32 kG = (\u03c12 , \u03c12 ),\n\u2022 s\u03c1i X if and only if there exists a Z such that s\u03c1i1 Z and for each\nz \u2208 Z there exists a set Xz satisfying z\u03c1i2 Xz such that\n[\nX=\nXz ;\nz\u2208Z\n\nDGL-\u222a:\n\nFor all game terms \u03b31 and \u03b32 , k\u03b31 \u222a \u03b32 kG = (\u03c1E , \u03c1A ), where\n\nE\n\u2022 s\u03c1E X if and only if s\u03c1E\n1 X or s\u03c12 X, and\nA\n\u2022 s\u03c1A X if and only if s\u03c1A\n1 X and s\u03c12 X\nA\nE\nA 4\nwhere, as before, k\u03b31 kG = (\u03c1E\n1 , \u03c11 ) and k\u03b32 kG = (\u03c12 , \u03c12 );\n\nDGL-dual:\nDGL-\u22a5:\n\nIf k\u03b3kG = (\u03c1E , \u03c1A ) then k\u03b3 d kG = (\u03c1A , \u03c1E );\n\nk\u22a5kG = \u2205;\n\nDGL-atomic-pr:\n\nkpkG = V (p);\n\nDGL-\u00ac:\n\nk\u00ac\u03c6kG = S\\k\u03c6kG ;\n\nDGL-\u2228:\n\nk\u03c61 \u2228 \u03c62 kG = k\u03c61 kG \u222a k\u03c62 kG ;\n\nDGL-\u22c4:\n\nIf k\u03b3kG = (\u03c1E , \u03c1A ) then for all \u03c6,\nkh\u03b3, ii\u03c6kG = {s \u2208 S : \u2203Xs \u2286 k\u03c6kG s.t. s\u03c1i Xs }.\n\nIf s \u2208 k\u03c6kG , we say that \u03c6 is satisfied by s in G and we write M |=s \u03c6.\nWe will not discuss here the properties of this logic, or the vast amount of\nvariants and extensions of it which have been developed and studied. It is worth\npointing out, however, that [20] introduced a Concurrent Dynamic Game Logic\nthat can be considered one of the main sources of inspiration for the Transition\nLogic that we will develop in Subsection 3.2.\n4 [20]\n\ngives the following alternative condition for the powers of the universal player:\n\nA\n\u2022 s\u03c1A X if and only if X = Z1 \u222a Z2 for two Z1 and Z2 such that s\u03c1A\n1 Z1 and s\u03c12 Z2 .\n\nIt is trivial to see that, if our games satisfy the monotonicity condition, this rules is equivalent\nto the one we presented.\n\n7\n\n\f1.3\n\nDynamic Game Logic and First Order Logic\n\nIn this subsection, we will briefly recall a remarkable result from [19] which\nestablishes a connection between Dynamic Game Logic and First-Order Logic.\nIn brief, as the following two theorems demonstrate, either of these logics\ncan be seen as a special case of the other, in the sense that models and formulas\nof the one can be uniformly translated into models of the other in a way which\npreserves satisfiability and truth:\nA\nTheorem 1.13 Let G = (S, {(\u03c1E\ng , \u03c1g ) : g \u2208 \u0393}, V ) be any game model, let \u03c6 be\nany game formula for the same language, and let s \u2208 S. Then it is possible to\nuniformly construct a first-order model GF O , a first-order formula \u03c6F O and an\nassignment sF O of GF O such that\n\nG |=s \u03c6 \u21d4 GF O |=sF O \u03c6F O .\nTheorem 1.14 Let M be any first order model, let \u03c6 be any first-order formula\nfor the signature of M , and let s be an assignment of M . Then it is possible\nto uniformly construct a game model GDGL , a game formula \u03c6DGL and a state\nsDGL such that\nM |=s \u03c6 \u21d4 GDGL |=sDGL \u03c6DGL .\nWe will not discuss here the proofs of these two results. Their significance,\nhowever, is something about which is necessary to spend a few words. In brief,\nwhat this back-and-forth representation between First Order Logic and Dynamic\nGame Logic tells us is that it is possible to understand First Order Logic as a\nlogic for reasoning about determined games!\nIn the next sections, we will attempt to develop a similar result for the case\nof Dependence Logic.\n\n2\n\nTransition Logic\n\n2.1\n\nA Logic for Imperfect Information Games Against Nature\n\nWe will now define a variant of Dynamic Game Logic, which we will call Transition Logic. It deviates from the basic framework of Dynamic Game Logic in\ntwo fundamental ways:\n1. It considers one-player games against Nature, instead of two-player games\nas is usual in Dynamic Game Logic;\n2. It allows for uncertainty about the initial position of the game.\nHence, Transition Logic can be seen as a decision-theoretic logic, rather than\na game-theoretic one: Transition Logic formulas, as we will see, correspond to\nassertions about the abilities of a single agent acting under uncertainty, instead\nof assertions about the abilities of agents interacting with each other.\n8\n\n\fIn principle, it is certainly possible to generalize the approach discussed here\nto multiple agents acting in situations of imperfect information, and doing so\nmight cause interesting phenomena to surface; but for the time being, we will\ncontent ourselves with developing this formalism and discussing its connection\nwith Dependence Logic.\nOur first definition is a fairly straightforward generalization of the concept\nof forcing relation:\nDefinition 2.1 (Transition system) Let S be a nonempty set of states. A\ntransition system over S is a nonempty relation \u03b8 \u2286 Parts(S) \u00d7 Parts(S)\nsatisfying the following requirements:\nDownwards Closure: If (X, Y ) \u2208 \u03b8 and X \u2032 \u2286 X then (X \u2032 , Y ) \u2208 \u03b8;\nMonotonicity:\n\nIf (X, Y ) \u2208 \u03b8 and Y \u2286 Y \u2032 then (X, Y \u2032 ) \u2208 \u03b8;\n\nNon-creation:\n\n(\u2205, Y ) \u2208 \u03b8 for all Y \u2286 S;\n\nNon-triviality:\n\nIf X 6= \u2205 then (X, \u2205) 6\u2208 \u03b8.\n\nInformally speaking, a transition system specifies the abilities of an agent: for all\nX, Y \u2286 S such that (X, Y ) \u2208 \u03b8, the agent has a strategy which guarantees that\nthe output of the transition will be in Y whenever the input of the transition is\nin X.\nThe four axioms which we gave capture precisely this intended meaning, as\nwe will see:\nDefinition 2.2 (Decision Game) A decision game is a triple \u0393 = (S, E, O),\nwhere S is a nonempty set of states, E is a nonempty set of possible decisions\nfor our agent and O is an outcome function from S \u00d7 E to Parts(S).\nIf s\u2032 \u2208 O(s, e), we say that s\u2032 is a possible outcome of s under e; if O(s, e) =\n\u2205, we say that e fails on input s.\nDefinition 2.3 (Abilities in a decision game) Let \u0393 = (S, E, O) be a decision game, and let X, Y \u2286 S. Then we say that \u0393 allows the transition\nX \u2192 Y , and we write \u0393 : X \u2192 Y , if and only if there exists a e \u2208 E such that\n\u2205 =\n6 O(s, e) \u2286 Y for all s \u2208 X (that is, if and only if our agent can make a\ndecision which guarantees that the outcome will be in Y whenever the input is\nin X).\nTheorem 2.4 (Transition Systems and Abilities) A set \u03b8 \u2286 Parts(S) \u00d7\nParts(S) is a transition system if and only if there exists a decision game \u0393 =\n(S, E, O) such that\n(X, Y ) \u2208 \u03b8 \u21d4 \u0393 : X \u2192 Y.\nProof:\nLet \u03b8 \u2286 Parts(S) \u00d7 Parts(S) be any transition system, let us enumerate its\nelements {(Xi , Yi ) : i \u2208 I)}, and let us consider the game \u0393 = (S, I, O), where\n\u001a\nYi if s \u2208 Xi ;\nO(s, i) =\n\u2205\notherwise.\n9\n\n\fSuppose that (X, Y ) \u2208 \u03b8. If X = \u2205, then \u0393 : X \u2192 Y follows at once by\ndefinition. If instead X 6= \u2205, by non-triviality we have that Y is nonempty\ntoo, and furthermore (X, Y ) = (Xi , Yi ) for some i \u2208 I. Then O(s, i) = Yi 6= \u2205\nfor all s \u2208 Xi , as required.\nNow suppose that \u0393 : X \u2192 Y . Then there exists a i \u2208 I such that \u2205 =\n6\nO(s, i) \u2286 Y for all s \u2208 X. If X 6= \u2205, this implies that X \u2286 Xi and Yi \u2286 Y .\nHence, by monotonicity and downwards closure, (X, Y ) \u2208 \u03b8, as required.\nIf instead X = \u2205, then by non-creation we have again that (X, Y ) \u2208 \u03b8.\nConversely, consider a decision game \u0393 = (S, E, O). Then the set of its\nabilities satisfies our four axioms:\nDownwards Closure: Suppose that \u0393 : X \u2192 Y and that X \u2032 \u2286 X. By\ndefinition, there exists a e \u2208 E such that \u2205 6= O(s, e) \u2286 Y for all s \u2208 X.\nBut then the same holds for all s \u2208 X \u2032 , and hence \u0393 : X \u2032 \u2192 Y .\nMonotonicity: Suppose that \u0393 : X \u2192 Y and that Y \u2286 Y \u2032 . By definition,\nthere exists a e \u2208 E such that \u2205 6= O(s, e) \u2286 Y for all s \u2208 X. But then,\nfor all such s, O(s, e) \u2286 Y \u2032 too, and hence \u0393 : X \u2192 Y \u2032 .\nNon-creation: Let Y \u2286 S and let e \u2208 E be any possible decision. Then\ntrivially \u2205 6= O(s, e) \u2286 Y for all s \u2208 \u2205, and hence \u0393 : \u2205 \u2192 Y .\nNon-triviality: Let s0 \u2208 X, and suppose that \u0393 : X \u2192 Y . Then there exists\na e such that \u2205 =\n6 O(s, e) \u2286 Y for all s \u2208 X, and hence in particular\n\u2205 6= O(s0 , e) \u2286 Y . Therefore, Y is nonempty.\n\u0003\nWhat this theorem tells us is that our notion of transition system is the correct\none: it captures precisely the abilities of an agent making choices under imperfect information and attempting to guarantee that, if the initial state is in a set\nX, the outcome will be in a set Y .\nDefinition 2.5 (Trump) Let S be a nonempty set of states. A trump over S\nis a nonempty, downwards closed family of subsets of S.\nWhereas a transition system describes the abilities of an agent to transition\nfrom a set of possible initial states to a set of possible terminal states, a trump\ndescribes the agent's abilities to reach some terminal state from a set of possible\ninitial states:5\nProposition 2.1 Let \u03b8 be a transition system and let Y \u2286 S 6= \u2205. Then\nreach(\u03b8, Y ) = {X | (X, Y ) \u2208 \u03b8} forms a trump. Conversely, for any trump\nX over S there exists a transition system \u03b8 such that X = reach(\u03b8, Y ) for any\nnonempty Y \u2286 S.\n5 The term \"trump\" is taken from [11], where it is used to describe the set of all teams\nwhich satisfy a given formula.\n\n10\n\n\fProof:\nLet \u03b8 be a transition system. Then if (X, Y ) \u2208 \u03b8 and X \u2032 \u2286 X, by downwards\nclosure we have at once that (X \u2032 , Y ) \u2208 \u03b8. Furthermore, (\u2205, Y ) \u2208 \u03b8 for any Y .\nHence, reach(\u03b8, Y ) is a trump, as required.\nConversely, let X \u2286 Parts(Parts(S)) be a trump, and let us enumerate its\nelements as {Xi : i \u2208 I}. Then define \u03b8 as\n\u03b8 = {(A, B) : \u2205 6= B \u2286 S, \u2203i \u2208 I s.t. A \u2286 Xi } \u222a {(\u2205, \u2205)}\nIt is easy to see that \u03b8 is a transition system; and by construction, for Y 6= \u2205 we\nhave that (A, Y ) \u2208 \u03b8 \u21d4 \u2203i s.t. A \u2286 Xi \u21d4 A \u2208 X , where we used the fact that\nX is downwards closed.\n\u0003\nWe can now define the syntax and semantics of Transition Logic:\nDefinition 2.6 (Transition Model) Let \u03a6 be a set of atomic propositional\nsymbols and let \u0398 be a set of atomic transition symbols. Then a transition\nmodel is a tuple T = (S, {\u03b8t : t \u2208 \u0398}, V ), where S is a nonempty set of states,\n\u03b8t is a transition system over S for any t \u2208 \u0398, and V is a function sending each\np \u2208 \u03a6 into a trump of S.\nDefinition 2.7 (Transition Logic - Syntax) Let \u03a6 be a set of atomic propositions and let \u0398 be a set of atomic transitions. Then the transition terms and\nformulas of our language are defined respectively as\n\u03c4 ::=\n\u03c6 ::=\n\nt | \u03c6? | \u03c4 \u2297 \u03c4 | \u03c4 \u2229 \u03c4 | \u03c4 ; \u03c4\n\u22a4 | p | \u03c6 \u2228 \u03c6 | \u03c6 \u2227 \u03c6 | h\u03c4 i\u03c6\n\nwhere t ranges over \u0398 and p ranges over \u03a6.\nDefinition 2.8 (Transition Logic - Semantics) Let T = (S, {\u03b8t : t \u2208 \u0398), V )\nbe a transition model, let \u03c4 be a transition term, and let X, Y \u2286 S. Then we\nsay that \u03c4 allows the transition from X to Y , and we write T |=X\u2192Y \u03c4 , if and\nonly if\nTL-atomic-tr:\n\n\u03c4 = t for some t \u2208 \u0398 and (X, Y ) \u2208 \u03b8t ;\n\nTL-test: \u03c4 = \u03c6? for some transition formula \u03c6 such that T |=X \u03c6 in the sense\ndescribed later in this definition, and X \u2286 Y ;\nTL-\u2297: \u03c4 = \u03c41 \u2297\u03c42 , and X = X1 \u222aX2 for two X1 and X2 such that T |=X1 \u2192Y \u03c41\nand T |=X2 \u2192Y \u03c42 ;\nTL-\u2229:\n\n\u03c4 = \u03c41 \u2229 \u03c42 , T |=X\u2192Y \u03c41 and T |=X\u2192Y \u03c42 ;\n\nTL-concat: \u03c4 = \u03c41 ; \u03c42 and there exists a Z \u2286 S such that T |=X\u2192Z \u03c41 and\nT |=Z\u2192Y \u03c42 .\n\n11\n\n\fAnalogously, let \u03c6 be a transition formula, and let X \u2286 S. Then we say that X\nsatisfies \u03c6, and we write T |=X \u03c6, if and only if\nTL-\u22a4:\n\n\u03c6 = \u22a4;\n\nTL-atomic-pr:\n\n\u03c6 = p for some p \u2208 \u03a6 and X \u2208 V (p);\n\nTL-\u2228:\n\n\u03c6 = \u03c81 \u2228 \u03c82 and T |=X \u03c81 or T |=X \u03c82 ;\n\nTL-\u2227:\n\n\u03c6 = \u03c81 \u2227 \u03c82 , T |=X \u03c81 and T |=X \u03c82 ;\n\nTL-\u22c4:\n\n\u03c6 = h\u03c4 i\u03c8 and there exists a Y such that T |=X\u2192Y \u03c4 and T |=Y \u03c8.\n\nProposition 2.2 For any transition model T , transition term \u03c4 and transition\nformula \u03c6, the set\nk\u03c4 kT = {(X, Y ) : T |=X\u2192Y \u03c4 }\nis a transition system and the set\nk\u03c6kT = {X : T |=X \u03c6}\nis a trump.\nProof:\nBy induction.\n\u0003\nWe end this subsection with a few simple observations about this logic.\nFirst of all, we did not take the negation as one of the primitive connectives.\nIndeed, Transition Logic, much like Dependence Logic, has an intrinsically existential character: it can be used to reason about which sets of possible states an\nagent may reach, but not to reason about which ones such an agent must reach.\nThere is of course no reason, in principle, why a negation could not be added\nto the language, just as there is no reason why a negation cannot be added to\nDependence Logic, thus obtaining the far more powerful Team Logic [18, 12]:\nhowever, this possible extension will not be studied in this work.\nThe connectives of Transition Logic are, for the most part, very similar to\nthose of Dynamic Game Logic, and their interpretation should pose no difficulties. The exception is the tensor operator \u03c41 \u2297 \u03c42 , which substitutes the game\nunion operator \u03b31 \u222a \u03b32 and which, while sharing roughly the same informal\nmeaning, behaves in a very different way from the semantic point of view (for\nexample, it is not in general idempotent!)\nThe decision game corresponding to \u03c41 \u2297 \u03c42 can be described as follows: first\nthe agent chooses an index i \u2208 {1, 2}, then he or she picks a strategy for \u03c4i and\nplays accordingly. However, the choice of i may be a function of the initial state:\nhence, the agent can guarantee that the output state will be in Y whenever the\ninput state is in X only if he or she can split X into two subsets X1 and X2\nand guarantee that the state in Y will be reached from any state in X1 when\n\u03c41 is played, and from any state in X2 when \u03c42 is played.\nIt is also of course possible to introduce a \"true\" choice operator \u03c41 \u222a \u03c42 ,\nwith semantical condition\n12\n\n\fTL-\u222a:\n\nT |=X\u2192Y \u03c41 \u222a \u03c42 iff T |=X\u2192Y \u03c41 or T |=X\u2192Y \u03c42 ;\n\nbut we will not explore this possibility any further in this work, nor we will consider any other possible connectives such as, for example, the iteration operator\nTL-\u2217: T |=X\u2192Y \u03c4 \u2217 iff there exist n \u2208 N and Z0 . . . Zn such that Z0 = X,\nZn = Y and T |=Zi \u2192Zi+1 \u03c4 for all i \u2208 1 . . . n \u2212 1.\n\n2.2\n\nTransition Logic and Dependence Logic\n\nThis subsection contains the central result of this work, that is, the analogues\nof Theorems 1.13 and 1.14 for Dependence Logic and Transition Logic.\nRepresenting Dependence Logic models and formulas in Transition Logic is\nfairly simple:\nDefinition 2.9 (M T L ) Let M be a first-order model. Then M T L is the transition model (S, \u0398, V ) such that\n\u2022 S is the set of all teams over M ;\n\u2022 The set of all atomic transition symbols is {\u2203v, \u2200v : v \u2208 Var}, and hence\n\u0398 is {\u03b8\u2203v , \u03b8\u2200v : v \u2208 Var};\n\u2022 For any variable v, \u03b8\u2203v = {(X, Y ) : \u2203F s.t. X[F/v] \u2286 Y } and \u03b8\u2200v =\n{(X, Y ) : X[M/v] \u2286 Y };\n\u2022 For any first-order literal or dependence atom \u03b1, V (\u03b1) = {X : M |=X \u03c6}.\nDefinition 2.10 (\u03c6T L ) Let \u03c6 be a Dependence Logic formula. Then \u03c6T L is the\ntransition term defined as follows:\n1. If \u03c6 is a literal or a dependence atom, \u03c6T L = \u03c6?;\n2. If \u03c6 = \u03c81 \u2228 \u03c82 , \u03c6T L = (\u03c81 )T L \u2297 (\u03c82 )T L ;\n3. If \u03c6 = \u03c81 \u2227 \u03c82 , \u03c6T L = (\u03c81 )T L \u2227 (\u03c82 )T L ;\n4. If \u03c6 = \u2203v\u03c8, \u03c6T L = \u2203v; (\u03c8)T L ;\n5. If \u03c6 = \u2200v\u03c8, \u03c6T L = \u2200v; (\u03c8)T L .\nTheorem 2.11 For all first-order models M , teams X and formulas \u03c6, the\nfollowing are equivalent:\n\u2022 M |=X \u03c6;\n\u2022 \u2203Y s.t. M T L |=X\u2192Y \u03c6T L ;\n\u2022 M T L |=X h\u03c6T L i\u22a4;\n\u2022 M T L |=X\u2192S \u03c6T L .\n13\n\n\fProof:\nWe show, by structural induction on \u03c6, that the first condition is equivalent to\nthe last one. The equivalences between the last one and the second and third\nones are then trivial.\n1. If \u03c6 is a literal or a dependence atom, M T L |=X\u2192S \u03c6? if and only if\nX \u2208 V (\u03c6), that is, if and only if M |=X \u03c6;\n2. M T L |=X\u2192S (\u03c81 )T L \u2297(\u03c82 )T L if and only if X = X1 \u222aX2 for two X1 , X2 \u2286\nS such that M T L |=X1 \u2192S (\u03c81 )T L and M T L |=X2 \u2192S (\u03c82 )T L . By induction\nhypothesis, this can be the case if and only if M |=X1 \u03c81 and M |=X2 \u03c82 ,\nthat is, if and only if M |=X \u03c81 \u2228 \u03c82 .\n3. M T L |=X\u2192S (\u03c81 )T L \u2227 (\u03c82 )T L if and only if M T L |=X\u2192S (\u03c81 )T L and\nM T L |=X\u2192S (\u03c82 )T L , that is, by induction hypothesis, if and only if M |=X\n\u03c81 \u2227 \u03c82 .\n4. M T L |=X\u2192S \u2203v; (\u03c8)T L if and only if there exists a Y such that Y \u2287\nX[F/v] for some F and M T L |=Y \u2192S \u03c8. By induction hypothesis and\ndownwards closure, this can be the case if and only if M |=X[F/v] \u03c8 for\nsome F , that is, if and only if M |=X \u2203v\u03c8;\n5. M T L |=X\u2192S \u2200v; (\u03c8)T L if and only if M T L |=Y \u2192S (\u03c8)T L for some Y \u2287\nX[M/v], that is, if and only if M |=X[M/v] \u03c8, that is, if and only if\nM |=X \u2200v\u03c8.\n\u0003\nOne interesting aspect of this representation result is that Dependence Logic\nformulas correspond to Transition Logic transitions, not to Transition Logic\nformulas. This can be thought of as one first hint of the fact that Dependence\nLogic can be thought of as a logic of transitions: and in the later sections, we\nwill explore this idea more in depth.\nRepresenting Transition Models, game terms and formulas in Dependence\nLogic is somewhat more complex:\nDefinition 2.12 (T DL ) Let T = (S, (\u03b8t : t \u2208 \u0398), V ) be a transition model.\nFurthermore, for any t \u2208 \u0398, let \u03b8t = {(Xi , Yi ) : i \u2208 It }, and, for any p \u2208 \u03a6,\nlet VU(p) = {Xj : j U\u2208 Jp }. Then T DL is the first-order model with domain6\nS \u228e {It : t \u2208 \u0398} \u228e {Jp : p \u2208 \u03a6} whose signature contains\n\u2022 For every t \u2208 \u0398, a ternary relation Rt whose interpretation is {(i, x, y) :\ni \u2208 It , x \u2208 Xi , y \u2208 Yi };\n\n\u2022 For every p \u2208 \u03a6, a binary relation Vp whose interpretation is {(j, x) : j \u2208\nJp , x \u2208 Xj }.\n6 Here\n\nwe write A \u228e B for the disjoint union of the sets A and B.\n\n14\n\n\fDefinition 2.13 (\u03c6DL\nand \u03c4xDL ) For any transition formula \u03c6 and variable\nx\nx, the Dependence Logic formula \u03c6DL\nis defined as\nx\n1. \u22a4DL\nis \u22a4;\nx\n2. For all p \u2208 \u03a6, pDL\nis \u2203j(=(j) \u2227 Vp (j, x));\nx\n3. (\u03c81 \u2228 \u03c82 )DL\nis (\u03c81 )DL\n\u2294 (\u03c82 )DL , where \u2294 is the classical disjunction inx\nx\ntroduced in Definition 1.6;\nDL\n4. (\u03c81 \u2227 \u03c82 )DL\nis (\u03c81 )DL\nx\nx \u2227 (\u03c82 )x ;\nDL\n5. (h\u03c4 i\u03c8)DL\nis \u2203P ((\u03c4 )DL\nx\nx (P ) \u2227 \u2200y(\u00acP y \u2228 (\u03c8)y )),\n\nwhere for any transition term \u03c4 , variable x and unary relation symbol P , \u03c4xDL (P )\nis defined as\n6. For all t \u2208 \u0398, tDL\nx (P ) is \u2203i(=(i) \u2227 \u2203y(Rt (i, x, y)) \u2227 \u2200y(\u00acRt (i, x, y) \u2228 P y));\nDL\n7. For all formulas \u03c6, (\u03c6?)DL\nx (P ) is \u03c6x \u2227 P x;\nDL\nDL\n8. (\u03c41 \u2297 \u03c42 )DL\nx (P ) = (\u03c41 )x (P ) \u2228 (\u03c42 )x (P );\nDL\nDL\n9. (\u03c41 \u2229 \u03c42 )DL\nx (P ) = (\u03c41 )x (P ) \u2227 (\u03c42 )x (P );\nDL\nDL\n10. (\u03c41 ; \u03c42 )DL\nx (P ) = \u2203Q((\u03c41 )x (Q) \u2227 \u2200y(\u00acQy \u2228 (\u03c42 )y (P ))) for a new and\nunused variable y.\n\nTheorem 2.14 For all transition models T = (S, (\u03b8t : t \u2208 \u0398), V ), transition\nterms \u03c4 , transition formulas \u03c6, variables x, sets P \u2286 S and teams X over T DL\nwith X(x) \u2286 S,7\nT DL |=X \u03c6DL\n\u21d4 T |=X(x) \u03c6\nx\nand\nT DL |=X \u03c4xDL (P ) \u21d4 T |=X(x)\u2192P \u03c4.\nProof:\nThe proof is by structural induction on terms and formulas.\nLet us first consider the cases corresponding to formulas:\n1. For all teams X, T DL |=X \u22a4 and T |=X(x) \u22a4, as required;\n2. Suppose that T DL |=X \u2203j(= (j) \u2227 Vp (j, x)). Then there exists a m \u2208\nDom(T DL ) such that T DL |=X[m/j] Vp (j, x). Hence, we have that X(x) \u2286\nXm \u2208 V (p); and, by downwards closure, this implies that X(x) \u2208 V (p),\nand hence that T |=X(x) p as required.\nConversely, suppose that T |=X(x) p. Then X(x) \u2208 V (p), and hence\nX(x) = Xm for some m \u2208 Jp . Then we have by definition that T DL |=X[m/j]\nVp (j, x), and finally that T DL |=X Tx (p).\n7 That\n\nis, such that X(x) is a set of states of the transition model.\n\n15\n\n\f3. By Proposition 1.1, T DL |=X (\u03c81 \u2228 \u03c82 )DL\nif and only if T DL |=X (\u03c81 )DL\nx\nx\nDL\nDL\nor T\n|=X (\u03c82 )x . By induction hypothesis, this is the case if and only\nif T |=X(x) \u03c81 or T |=X(x) \u03c82 , that is, if and only if T |=X(x) \u03c81 \u2228 \u03c82 .\n4. T DL |=X (\u03c81 \u2227\u03c82 )DL\nif and only if T DL |=X (\u03c81 )DL\nand T DL |=x (\u03c82 )DL\nx\nx\nx ,\nthat is, by induction hypothesis, if and only if T |=X \u03c81 \u2227 \u03c82 .\n5. T DL |=X (h\u03c4 i\u03c8)DL\nif and only if there exists a P such that T DL |=X\nx\nDL\nDL\n(\u03c4 )x (P ) and T\n|=X[T DL /y] \u00acP y \u2228 (\u03c8)DL\ny . By induction hypothesis,\nthe first condition holds if and only if T |=X(x)\u2192P \u03c4 . As for the second\none, it holds if and only if X[T DL /y] = Y1 \u222a Y2 for two Y1 , Y2 such\nthat T DL |=Y1 \u00acP y and T DL |=Y2 \u03c4y (\u03c8). But then we must have that\nT |=Y2 (y) \u03c8 and that P \u2286 Y2 (y); therefore, by downwards closure, T |=P \u03c8\nand finally T |=X(x) h\u03c4 i\u03c8.\nConversely, suppose that there exists a P such that T |=X(x)\u2192P \u03c4 and\nT |=P \u03c8; then by induction hypothesis we have that T DL |=X (\u03c4 )DL\nx (P )\nDL\nDL\nand that T DL |=X[T DL /y] \u00acP y \u2228 (\u03c8)DL\n,\nand\nhence\nT\n|=\n(h\u03c4\ni\u03c8)\nX\nx\nx .\nNow let us consider the cases corresponding to transition terms:\n6. Suppose that T DL |=X \u2203i(=(i) \u2227 \u2203y(Rt (i, x, y)) \u2227 \u2200y(\u00acRt (i, x, y) \u2228 P y)).\nIf X = \u2205 then X(x) = \u2205, and hence by non-creation we have that\n(X(x), P ) = (\u2205, P ) \u2208 \u03b8t , as required.\nLet us assume instead that X 6= \u2205. Then, by hypothesis, there exists a\nm \u2208 Dom(T DL ) such that\n\u2022 There exists a F such that T DL |=X[m/i][F/y] Rt (i, x, y);\n\u2022 T DL |=X[m/i][T DL /y] \u00acRt (i, x, y) \u2228 P y.\nFrom the first condition it follows that for every p \u2208 X(x) there exists a q\nsuch that Rt (m, p, q): therefore, by the definition of Rt , every such p must\nbe in Xm .\nFrom the second condition it follows that whenever Rt (m, p, q) and p \u2208\nX(x) \u2286 Xm , q \u2208 P ; and, since X(x) 6= \u2205, this implies that Ym \u2286 P by the\ndefinition of Rt .\nHence, by monotonicity and downwards closure, we have that (X(x), P ) \u2208\n\u03b8t and that T |=X(x)\u2192P t, as required.\nConversely, suppose that (X(x), P ) = (Xm , Ym ) \u2208 \u03b8t for some m \u2208 It . If\nX(x) = \u2205 then X = \u2205, and hence by Proposition 1.2 we have that T DL |=X\ntDL\nx (P ), as required. Otherwise, by non-triviality, P = Ym 6= \u2205. Let now\np \u2208 P be any of its elements and let F (s) = p for all p \u2208 X[m/i]: then\nM |=X[m/i][F/y] Rt (i, x, y), as any assignment of this team sends x to\nsome element of Xm and y to p \u2208 Ym . Furthermore, let s \u2208 X(x) = Xm ,\nand let q be such that Rt (m, s(x), q): then q \u2208 Ym = P , and hence\nM |=X[m/i][T DL /y] \u00acRt (i, x, y) \u2228 P y. So, in conclusion, M |=X tDL\nx (P ), as\nrequired.\n16\n\n\f7. T DL |=X \u03c6DL\n\u2227 P x if and only if T |=X(x) \u03c6 and X(x) \u2286 P , that is, if\nx\nand only if T |=X(x)\u2192P \u03c6?.\nDL\n8. T DL |=X (\u03c41 )DL\nx (P )\u2228(\u03c42 )x (P ) if and only if X = X1 \u222aX2 for two X1 , X2\nsuch that\n\n\u2022 X = X1 \u222a X2 , and therefore X(x) = X1 (x) \u222a X2 (x);\n\u2022 T DL |=X1 (\u03c41 )DL\nx (P ), that is, by induction hypothesis, T |=X1 (x)\u2192P\n\u03c41 ;\n\u2022 T DL |=X2 (\u03c42 )DL\nx (P ), that is, by induction hypothesis, T |=X2 (x)\u2192P\n\u03c42 ;\nHence, if T DL |=X (\u03c41 \u2297 \u03c42 )DL\nx (P ) then T |=X(x)\u2192P \u03c41 \u2297 \u03c42 .\nConversely, if X(x) = A \u222a B for two A, B such that T |=A\u2192P \u03c41 and\nT |=B\u2192P \u03c42 , let\nX1\n\n=\n\n{s \u2208 X : s(x) \u2208 A}\n\nX2\n\n=\n\n{s \u2208 X : s(x) \u2208 B}.\n\nClearly X = X1 \u222a X2 , and furthermore by induction hypothesis T DL |=X1\nDL\nDL\n|=X (\u03c41 \u2297 \u03c42 )DL\n(\u03c41 )DL\n|=X2 (\u03c42 )DL\nx (P ). Hence, T\nx (P ), as\nx (P ) and T\nrequired.\nDL\nDL\n9. T DL |=X (\u03c41 \u2229 \u03c42 )DL\n|=X (\u03c41 )DL\n|=X\nx (P ) if and only if T\nx (P ) and T\nDL\n(\u03c42 )x (P ), that is, by induction hypothesis, if and only if T |=X(x)\u2192P\n\u03c41 \u2229 \u03c42 .\nDL\n10. T DL |=X \u2203Q((\u03c41 )DL\nx (Q)\u2227\u2200y(\u00acQy\u2228(\u03c42 )y (P ))) if and only if there exists a\nQ such that T |=X(x)\u2192Q \u03c41 and there exists a Q\u2032 \u2287 Q such that T |=Q\u2032 \u2192P\n\u03c42 . By downwards closure, if this is the case then T |=Q\u2192P \u03c42 too, and\nhence T |=X(x)\u2192P \u03c41 ; \u03c42 , as required.\n\nConversely, suppose that there exists a Q such that T |=X(x)\u2192Q \u03c41 and\nT |=Q\u2192P \u03c42 . Then, by induction hypothesis T DL |=X (\u03c41 )DL\nx (Q); and\nfurthermore, X[T DL /y] can be split into\nZ1 = {s \u2208 X[T DL /y] : s(y) 6\u2208 Q}\nand\nZ2 = {s \u2208 X[T DL /y] : s(y) \u2208 Q}\nIt is trivial to see that T DL |=Z1 \u00acQy; and furthermore, since Z2 (y) =\nQ and T |=Q\u2192P \u03c42 , by induction hypothesis we have that T DL |=Z2\nDL\nDL\n(\u03c42 )DL\n|=X[T DL /y] \u2200y(\u00acQy \u2228 (\u03c42 )DL\n|=X\ny . Thus T\ny (P )) and finally T\nDL\n(\u03c41 ; \u03c42 )x (P ), and this concludes the proof.\n\u0003\n17\n\n\fHence, the relationship between Transition Logic and Dependence Logic is analogous to the one between Dynamic Game Logic and First-Order Logic. In the\nnext sections, we will develop variants of Dependence Logic which are syntactically closer to Transition Logic, while still being first-order: as we will see, the\nresulting frameworks are expressively equivalent to Dependence Logic on the\nlevel of satisfiability, but can be used to represent finer-grained phenomena of\ntransitions between sets of assignments.\n\n3\n\nDynamic Variants of Dependence Logic\n\n3.1\n\nDependence Logic and Transitions between Teams\n\nNow that we have established a connection between Dependence Logic and a\nvariant of Dynamic Game Logic, it is time to explore what this might imply\nfor the further development of logics of imperfect information. If, as Theorems 2.11 and 2.14 suggest, Dependence Logic can be thought of as a logic of\nimperfect-information decision problems, perhaps it could be possible to develop\nvariants of Dependence Logic in which expressions can be interpreted directly\nas transition systems?\nIn what follows, we will do exactly that, first with Transition Dependence\nLogic \u2013 a variant of Dependence Logic, expressively equivalent to it, which is also\na quantified version of Transition Logic \u2013 and then with Dynamic Dependence\nLogic, in which all expressions are interpreted as transitions!\nBut why would we interested in such variants of Dependence Logic? One possible answer, which we will discuss in this subsection, is that transitions between\nteams are already a central object of study in the field of Dependence Logic,\nalbeit in a non-explicit manner: after all, the semantics of Dependence Logic\ninterprets quantifiers in terms of transformations of teams, and disjunctions in\nterms of decompositions of teams into subteams. This intuition is central to the\nstudy of issues of interdefinability in Dependence Logic and its variants, like for\nexample the ones discussed in [4]. As a simple example, let us recall Definition\n1.6:\n\u03c81 \u2294 \u03c82 := \u2203u1 \u2203u2 (=(u1 )\u2227 =(u2 ) \u2227 ((u1 = u2 \u2227 \u03c81 ) \u2228 (u1 6= u2 \u2227 \u03c82 ))),\nwhere u1 and u2 are new variables.\nAs we said in Proposition 1.1, M |=X \u03c81 \u2294 \u03c82 if and only if M |=X \u03c81 or\nM |=X \u03c82 . We will now sketch the proof of this result, and \u2013 as we will see\n\u2013 this proof will hinge on the fact that the above expression can be read as a\nspecification of the following algorithm:\n1. Choose an element a \u2208 Dom(M ) and extend the team X by assigning a as\nthe value of u1 for all assignments;\n2. Choose an element b \u2208 Dom(M ) and further extend the team by assigning\nb as the value of u2 for all assignments;\n\n18\n\n\f3. Split the resulting team into two subteams Y1 and Y2 such that\n(a) \u03c81 holds in Y1 , and the values of u1 and u2 coincide for all assignments\nin it;\n(b) \u03c82 holds in Y2 , and the values of u1 and u2 differ for all assignments\nin it.\nSince the values of u1 and u2 are chosen to always be respectively a and b, one\nof Y1 and Y2 is empty and the other is of the form X[ab/u1u2 ], and since u1 and\nu2 do not occur in \u03c81 or \u03c82 the above algorithm can succeed (for some choice\nof a and b) only if M |=X \u03c81 or M |=X \u03c82 .\nAs another, slightly more complicated example, let us consider the following\nproblem. Given four variables x1 , x2 , y1 and y2 , let x1 x2 | y1 y2 be an exclusion\natom holding in a team X if and only if for all s, s\u2032 \u2208 X, s(x1 x2 ) 6= s\u2032 (y1 y2 ) \u2013\nthat is, if and only if the sets of the values taken by x1 x2 and by y1 y2 in X are\ndisjoint.\nBy Theorem 1.7, we can tell at once that there exists some Dependence\nLogic formula \u03c6(x1 , x2 , y1 , y2 ) such that for all suitable M and X, M |=X\n\u03c6(x1 , x2 , y1 , y2 ) if and only if M |=X x1 x2 | y1 y2 ; but what about the converse?\nFor example, can we find an expression \u03c8(x, y), in the language of First Order\nLogic augmented with these exclusion atoms (but with no dependence atoms),\nsuch that for all suitable M and X M |=X \u03c8(x, y) if and only if M |=X =(x, y)?\nAs discussed in [4] in a more general setting, the answer is positive, and one\nsuch \u03c8(x, y) is \u2200z(z = y \u2228 (z 6= y \u2227 xz | xy)), where z is some variable other\nthan x and y.8 Why is this the case?\nWell, let us consider any team X with domain containing x and y, and let\nus evaluate \u03c8(x, y) over it. As shown graphically in Figure 1, the transitions\nbetween teams occurring during the evaluation of the formula correspond to the\nfollowing algorithm:\n1. First, assign all possible values to the variable z for all assignments in x,\nthus obtaining X[M/z] = {s[m/z] : s \u2208 X, m \u2208 Dom(M )};\n2. Then, remove from X[M/z] all assignments s for which s(z) = s(x), keeping only the ones for which s(z) 6= s(y);\n3. Then, verify that for any possible fixed value of x, the possible values of\ny and z are disjoint.\nThis algorithm succeeds only if y is a function of x. Indeed, suppose that\ninstead there are two assignments s, s\u2032 \u2208 X such that s(x) = s\u2032 (x) = a, s(y) =\nb and s\u2032 (y) = c for three a, b, c \u2208 Dom(M ) with b 6= c. Now we have that\n{s[b/z], s[c/z], s\u2032[b/z], s\u2032 [c/z]} \u2286 X[M/z]: and since b 6= c, we have that the\nassignments s[c/z] and s\u2032 [b/z] are not removed from the team in the second\nstep of the proof. But then s[c/z](xz) = ac = s\u2032 [b/z](xy), and therefore it\n8 A moment's thought shows that, by downwards closure, the condition z 6= y in the second\ndisjunct can be removed, but for simplicity we will keep it.\n\n19\n\n\fis not true that xy | xz. And, conversely, if in the team X the value of y is\na function of the value of x then by splitting X[M/z] into the two subteams\nY = {s[m/z] : s \u2208 X, s(y) = s(z)} and Z = {s[m/z] : s(y) 6= s(z)} we have\nthat M |=Y y = z, M |=Z y 6= z and M |=Z xz | xy (since for all s, s\u2032 \u2208 Z,\ns(x) = s\u2032 (x) \u21d2 s(y) = s\u2032 (y) \u21d2 s(z) 6= s(y) = s\u2032 (z)).\nOn the other hand, one Dependence Logic expression corresponding to x1 x2 | y1 y2\nis\n\u2200w1 w2 \u2203u1 u2 (=(w1 , w2 , u1 )\u2227 =(w1 , w2 , u2 )\u2227\n((u1 = u2 \u2227 (w1 6= x1 \u2228 w2 6= z2 ))\u2228\n(u1 6= u2 \u2227 (w1 6= y1 \u2228 w2 6= y2 ))))\nwhere w1 , w2 , u1 and u2 are new variable.\nWe encourage the interested reader to verify that this is the case by examining the transitions between teams corresponding to the formula: in brief, the\nintuition is that first we extend our team by picking all possible pairs of values\nfor w1 and w2 , then for any such pair we flag \u2013 through our choice of u1 and u2\n\u2013 whether w1 w2 is different from x1 x2 or from y1 y2 . This implies that no such\npair is equal to both x1 x2 and y1 y2 , or, in other words, that x1 x2 and y1 y2 have\nno value in common.\nMore and more complex examples of definability results of this kind can be\nfound in [4]; but what we want to emphasize here is that all these examples, like\nthe one we discussed in depth here, have a natural interpretation in terms of\nalgorithms which transform teams and apply simple tests to them, as the above\none. Hence, we hope that the development of variants of Dependence Logic in\nwhich these transitions are made explicit might prove itself useful for the further\nstudy of this interesting class of problems.\n\n3.2\n\nTransition Dependence Logic\n\nAs stated, we will now define a variant of Dependence Logic which can also be\nseen as a quantified variant of Transition Logic. We will then prove that the\nresulting Transition Dependence Logic is expressively equivalent to Dependence\nLogic, in the sense that any Dependence Logic formula is equivalent to some\nTransition Dependence Logic formula and vice versa.\nDefinition 3.1 (Transition Dependence Logic - Syntax) Let \u03a3 be a firstorder signature. Then the sets of all transition terms and of all formulas of\nDependence Transition Logic are given by the rules\n\u03c4\n\u03c6\n\n::=\n::=\n\n\u2203v | \u2200v | \u03c6? | \u03c4 \u2297 \u03c4 | \u03c4 \u2229 \u03c4 | \u03c4 ; \u03c4\nR~t | \u00acR~t | =(t1 , . . . , tn ) | \u03c6 \u2228 \u03c6 | \u03c6 \u2227 \u03c6 | h\u03c4 i\u03c6.\n\nwhere v ranges over all variables in Var, R ranges over all relation symbols of\nthe signature, ~t ranges over all tuples of terms of the required arities, n ranges\nover N and t1 . . . tn range over the terms of our signature.\nDefinition 3.2 (Transition Dependence Logic - Semantics) Let M be a\nfirst-order model, let \u03c4 be a first-order transition term of the same signature,\n20\n\n\fx\ny\ns\na\nb\ns\u2032\na\nc\n... ... ...\n\nX\n\nb 6= c\n\n\u2200z\n\nX[M/z]\n\nx\ny\ns[b/z] a\nb\nb\ns[c/z] a\ns\u2032 [b/z] a\nc\ns\u2032 [c/z] a\nc\n... ...\n...\n\nz\nb\nc\nb\nc\n\n\u2228\nX[M/z] = Y \u222a Z\n\nY\n\nx\ny\ns[b/z] a\nb\nc\ns\u2032 [c/z] a\n...\n... ...\n\nz\nb\nc\n\nx\ny\ns[c/z] a\nb\nc\ns\u2032 [b/z] a\n...\n... ...\n\nz=y\n\nz\nc\nb\n\nZ\n\nz 6= y \u2227 xz | xy\n\nFigure 1: Checking =(x, y) by evaluating \u2200z(z = y \u2228 (z 6= y \u2227 xz | xy)). If b 6= c,\nthen Z does not satisfy the xz | xy.\n\n21\n\n\fand let X and Y be teams over M . Then we say that the transition X \u2192 Y is\nallowed by \u03c4 in M , and we write M |=X\u2192Y \u03c4 , if and only if\nTDL-\u2203: \u03c4 is of the form \u2203v for some v \u2208 Var and there exists a F such that\nX[F/v] \u2286 Y ;\nTDL-\u2200:\n\n\u03c4 is of the form \u2200v for some v \u2208 Var and X[M/v] \u2286 Y ;\n\nTDL-test: \u03c4 is of the form \u03c6?, M |=X \u03c6 in the sense given later in this\ndefinition, and X \u2286 Y ;\nTDL-\u2297: \u03c4 is of the form \u03c41 \u2297 \u03c42 and X = X1 \u222a X2 for some X1 and X2 such\nthat M |=X1 \u2192Y \u03c41 and M |=X2 \u2192Y \u03c42 ;\nTDL-\u2229:\n\n\u03c4 is of the form \u03c41 \u2229 \u03c42 , M |=X\u2192Y \u03c41 and M |=X\u2192Y \u03c42 ;\n\nTDL-concat: \u03c4 is of the form \u03c41 ; \u03c42 and there exists a team Z such that\nM |=X\u2192Z \u03c41 and M |=Z\u2192Y \u03c42 .\nSimilarly, if \u03c6 is a formula and X is a team with domain Var. Then we say\nthat X satisfies \u03c6 in M , and we write M |=X \u03c6, if and only if\nTDL-lit: \u03c6 is a first-order literal and M |=s \u03c6 in the usual first-order sense\nfor all s \u2208 X;\nTDL-dep: \u03c6 is a dependence atom =(t1 , . . . , tn ) and any two s, s\u2032 \u2208 X which\nassign the same values to t1 . . . tn\u22121 also assign the same value to tn ;\nTDL-\u2228:\n\n\u03c6 is of the form \u03c61 \u2228 \u03c62 and M |=X \u03c61 or M |=X \u03c62 ;\n\nTDL-\u2227:\n\n\u03c6 is of the form \u03c61 \u2227 \u03c62 , M |=X \u03c61 and M |=X \u03c62 ;\n\nTDL-\u22c4: \u03c6 is of the form h\u03c4 i\u03c8 and there exists a Y such that M |=X\u2192Y \u03c4 and\nM |=Y \u03c8.\nAs the next theorem shows, in this semantics formulas and transitions are interpreted in terms of trumps and transition systems:\nTheorem 3.3 For all Transition Dependence Logic formulas \u03c6, all models M\nand all teams X and Y , we have that\nDownwards Closure: If M |=X \u03c6 and Y \u2286 X then M |=Y \u03c6;\nEmpty Team Property: M |=\u2205 \u03c6.\nFurthermore, for all Transition Dependence Logic transition terms \u03c4 , all models\nM and all teams X, Y and Z,\nDownwards Closure: If M |=X\u2192Y \u03c4 and Z \u2286 X then M |=Z\u2192Y \u03c4 ;\nMonotonicity:\n\nIf M |=X\u2192Y \u03c4 and Y \u2286 Z then M |=X\u2192Z \u03c4 ;\n\nNon-creation:\n\nFor all Y , M |=\u2205\u2192Y \u03c4 ;\n22\n\n\fNon-triviality:\n\nIf X 6= \u2205 then M 6|=X\u2192\u2205 \u03c4 .\n\nProof:\nThe proof is by structural induction over \u03c6 and \u03c4 , and presents no difficulties\nwhatsoever.\n\u0003\nAlso, it is not difficult to see, on the basis of the results of the previous\nsection, that this new variant of Dependence Logic is equivalent to the usual\none:\nTheorem 3.4 For every Dependence Logic formula \u03c6 there exists a Transition\nDependence Logic transition term \u03c4\u03c6 such that\nM |=X \u03c6 \u21d4 \u2203Y s.t. M |=X\u2192Y \u03c4\u03c6 \u21d4 M |=X h\u03c4\u03c6 i\u22a4\nfor all first-order models M and teams X.\nProof:\n\u03c4\u03c6 is defined by structural induction on \u03c6, as follows:\n1. If \u03c6 is a first-order literal or a dependence atom then \u03c4\u03c6 = \u03c6?;\n2. If \u03c6 is \u03c61 \u2228 \u03c62 then \u03c4\u03c6 = \u03c4\u03c61 \u2297 \u03c4\u03c62 ;\n3. If \u03c6 is \u03c61 \u2227 \u03c62 then \u03c4\u03c6 = \u03c4\u03c61 \u2229 \u03c4\u03c62 ;\n4. If \u03c6 is \u2203v\u03c8 then \u03c4\u03c6 = \u2203v; \u03c4\u03c8 ;\n5. If \u03c6 is \u2200v\u03c8 then \u03c4\u03c6 = \u2200v; \u03c4\u03c8 .\nIt is then trivial to verify, again by induction on \u03c6, that M |=X \u03c6 if and only if\nM |=X h\u03c4\u03c6 i\u22a4, as required.\n\u0003\nThis representation result associates Dependence Logic formulas to Transition\nDependence Logic transition terms. This fact highlights the dynamical nature of\nDependence Logic operators, which we discussed in the previous subsection: in\nthis framework, quantifiers describe transformations of teams, the Dependence\nLogic connectives are operations over games, and the literals are interpreted as\ntests. In fact, one might wonder what is the purpose of Transition Dependence\nLogic formulas: could we do away with them altogether, and develop a variant\nof Transition Dependence Logic in which all formulas are transitions?\nLater, we will explore this idea further; but first, let us verify that Transition\nDependence Logic is no more expressive than Dependence Logic.\nTheorem 3.5 For every Transition Dependence Logic formula \u03c6 there exists a\nDependence Logic formula T (\u03c6) such that\nM |=X \u03c6 \u21d4 M |=X T (\u03c6)\n\n23\n\n\ffor all first-order models M and teams X. Furthermore, for every Transition\nDependence Logic transition term \u03c4 and Dependence Logic formula \u03b8 there is a\nDependence Logic formula U (\u03c4, \u03c8) such that\nM |=X U (\u03c4, \u03b8) \u21d4 \u2203Y s.t. M |=X\u2192Y \u03c4 and M |=Y \u03b8,\nagain for all first-order models M and teams X.\nProof:\nWe prove the two claims together, by structural induction over \u03c6 and \u03c4 .\nFirst, let us consider the cases corresponding to formulas:\n1. If \u03c6 is a first order literal or a dependence atom, let T (\u03c6) be \u03c6 itself. As\nthe interpretation of these expressions is the same in Dependence Logic\nand in Transition Dependence Logic, there is nothing to prove.\n2. If \u03c6 is of the form \u03c81 \u2228 \u03c82 , let T (\u03c6) be T (\u03c81 ) \u2294 T (\u03c82 ). This expression\nholds in a team if and only if T (\u03c81 ) or T (\u03c82 ) hold, that is, by induction\nhypothesis, if and only if \u03c81 or \u03c82 do.\n3. If \u03c6 is of the form \u03c81 \u2227 \u03c82 , let T (\u03c6) be T (\u03c81 ) \u2227 T (\u03c82 ). Then T (\u03c6) holds\nif and only if \u03c81 and \u03c82 do, that is, if and only if \u03c6 does.\n4. If \u03c6 is of the form h\u03c4 i\u03c8, let ~v be the tuple of all variables occurring in T (\u03c8),\nlet R be a new |~v |-ary relation, and let T (\u03c6) be \u2203R(U (\u03c4, R~v ) \u2227 \u2200~v (\u00acR~v \u2228\nT (\u03c8))). Indeed, suppose that M |=X T (\u03c6): then for some relation R,\nthere exists a Y such that M |=X\u2192Y \u03c4 and M |=Y R~v . Furthermore, M |=\n\u2200~v (\u00acR~v \u2228T (\u03c8)), and therefore for the set Y \u2032 = {s : Dom(s) = ~v , M |=s R~v}\nwe have that M |=Y \u2032 T (\u03c8). But then, by downwards closure and locality,\nM |=Y T (\u03c8), and therefore M |=X h\u03c4 i\u03c8.\nConversely, suppose that M |=X h\u03c4 i\u03c8: then there exists a Y such that\nM |=X\u2192Y \u03c4 and M |=Y \u03c8. Now let R be {s(~v ) : s \u2208 Y }: clearly\nM |=X U (\u03c4, R~v ), since M |=Y R~v , and furthermore M |= \u2200~v (\u00acR~v \u2228T (\u03c8)),\nby locality and by the fact that (by induction hypothesis) M |=Y T (\u03c8).\nNow let us consider the cases corresponding to transitions:\n5. If \u03c4 is of the form \u2203v for some variable v, let U (\u03c4, \u03b8) be \u2203v\u03b8. Indeed,\nsuppose that M |=X \u2203v\u03b8: then M |=X[F/v] \u03b8 for some F , and by choosing\nY = X[F/v] we have that M |=X\u2192Y \u2203v and M |=Y \u03b8, as required.\nConversely, suppose that for some Y , M |=X\u2192Y \u2203v and M |=Y \u03b8: then for\nsome F , X[F/v] \u2286 Y , and by downwards closure we have that M |=X[F/v]\n\u03b8.\n6. If \u03c4 is of the form \u2200v for some variable v, let U (\u03c4, \u03b8) be \u2200v\u03b8. Indeed,\nsuppose that M |=X \u2200v\u03b8: then M |=X[M/v] \u03b8, and if we choose Y =\nX[M/v] we have at once that M |=X\u2192Y \u2200v and M |=Y \u03b8. Conversely,\nif for some Y M |=X\u2192Y \u2200v and M |=Y \u03b8 then X[M/v] \u2286 Y and, by\ndownwards closure, M |=X[M/v] \u03b8.\n24\n\n\f7. If \u03c4 is of the form \u03c6?, let U (\u03c4, \u03b8) be T (\u03c6) \u2227 \u03b8. Indeed, suppose that M |=X\nT (\u03c6) \u2227 \u03b8: then by induction hypothesis M |=X \u03c6, and, for Y = X, we\nhave that M |=X\u2192Y \u03c6?. Furthermore, M |=Y \u03b8, as required. Conversely,\nsuppose that for some Y , M |=X\u2192Y \u03c6? and M |=Y \u03b8. Then M |=X \u03c6, and\ntherefore M |=X T (\u03c6); and furthermore X \u2286 Y , and hence by downwards\nclosure M |=X \u03b8. Hence, M |=X T (\u03c6) \u2227 \u03b8.\n8. If \u03c4 is of the form \u03c41 \u2297 \u03c42 and ~v is the tuple of all free variables of \u03b8 then\nlet U (\u03c4, \u03b8) be \u2203R((U (\u03c41 , R~v ) \u2228 U (\u03c42 , R~v)) \u2227 \u2200~v (\u00acR~v \u2228 \u03b8)), where R is a\nnew |~r|-ary relation symbol. Indeed, suppose that M |=X U (\u03c4, \u03b8): then\nthere exists a relation R and two subteams X1 and X2 of X such that\nX = X1 \u222a X2 , M |=X1 U (\u03c41 , R~v ) and M |=X2 U (\u03c42 , R~v ). Hence, there are\ntwo teams Y1 and Y2 such that M |=X1 \u2192Y1 \u03c41 , M |=X2 \u2192Y2 \u03c42 , M |=Y1 R~v\nand M |=Y2 R~v . Now, let Y be Y1 \u222a Y2 : by monotonicity, we have that\nM |=X1 \u2192Y \u03c41 and M |=X2 \u2192Y \u03c42 , and furthermore M |=Y R~v too (that\nis, for all s \u2208 Y , s(~v ) is in R). Since M |= \u2200~v (\u00acR~v \u2228 \u03b8), this implies that\nM |=Y \u03b8, by locality and downwards closure.\nConversely, suppose that there is a Y such that M |=X\u2192Y \u03c41 \u2297 \u03c42 and\nM |=Y \u03b8. Then let R be {s(~v ) : s \u2208 Y }. Now X = X1 \u222a X2 for two\nX1 and X2 such that M |=X1 \u2192Y \u03c41 and M |=X2 \u2192Y \u03c42 , and by induction\nhypothesis we have that M |=X1 U (\u03c41 ; R~v ) and M |=X2 U (\u03c42 ; R~v ). But\nthen M |=X U (\u03c41 ; R~v ) \u2228 U (\u03c42 ; R~v ); and furthermore, by locality we have\nthat M |= \u2200~v (\u00acR~v \u2228 \u03b8). Hence, M |=X U (\u03c41 \u2297 \u03c42 , \u03b8), as required.\n9. If \u03c4 is of the form \u03c41 \u2229 \u03c42 and ~v is the tuple of all variables of \u03b8 then let\n~ (\u03c41 , R~v ) \u2227 U (\u03c42 , R~v ) \u2227 \u2200~v (\u00acR~v \u2228 \u03b8)). Indeed, suppose that\nU (\u03c4, \u03b8) be \u2203R(U\nM |=X U (\u03c4, \u03b8): then for some relation R, by induction hypothesis, there\nexist teams Y1 and Y2 such that M |=X\u2192Y1 \u03c41 , M |=X\u2192Y2 \u03c42 , M |=Y1 R~v\nand M |=Y2 R~v . Now let Y be Y1 \u222a Y2 : as before, by monotonicity we\nhave that M |=X\u2192Y \u03c41 and M |=X\u2192Y \u03c42 , and hence M |=X\u2192Y \u03c41 \u2229 \u03c42 .\nFinally, since M |= \u2200~v (\u00acR~v \u2228 \u03b8) we have that M |=Y \u03b8, as required.\nConversely, suppose that there is a Y such that M |=X\u2192Y \u03c41 \u2229 \u03c42 and\nM |=Y \u03b8. Since M |=X\u2192Y \u03c41 \u2229 \u03c42 , M |=X\u2192Y \u03c41 and M |=X\u2192Y \u03c42 .\nNow let R be {s(~v ) : s \u2208 Y }. By induction hypothesis, M |=X U (\u03c41 , R~t)\nand M |=X U (\u03c42 , R~t); and furthermore, since M |=Y \u03b8 we have that\nM |= \u2200~v (\u00acR~v \u2228 \u03b8).\n10. If \u03c4 is of the form \u03c41 ; \u03c42 let U (\u03c4, \u03b8) be U (\u03c41 , U (\u03c42 , \u03b8)). Indeed, M |=X\nU (\u03c41 , U (\u03c42 , \u03b8)) if and only if there is a Y such that M |=X\u2192Y and M |=Y\nU (\u03c42 , \u03b8), that is, if and only if there are a Y and a Z such that M |=X\u2192Y\n\u03c41 , M |=Y \u2192Z \u03c42 and M |=Z \u03b8.\n\u0003\n\n25\n\n\fHowever, in a sense, Transition Dependence Logic allows one to consider subtler distinctions than Dependence Logic does. The formula \u2200x\u2203y(=(y, f (x)) \u2227\nP xy), for example, could be translated as any of\n\u2022 h\u2200x; \u2203yi(=(y, f (x)) \u2227 P xy);\n\u2022 h\u2200x; \u2203yih=(y, f (x))?iP xy;\n\u2022 h\u2200x; \u2203yihP xy?i =(y, f (x));\n\u2022 h\u2200x; \u2203yih(P xy?) \u2229 (=(y, f (x))?)i\u22a4.\nThe intended interpretations of these formulas are rather different, even though\nthey happen to be satisfied by the same teams: and for this reason, Transition\nDependence Logic may be thought of as a proper refinement of Dependence\nLogic even though it has exactly the same expressive power.\n\n3.3\n\nDynamic Predicate Logic\n\nDynamic Semantics is the name given to a family of semantical frameworks\nwhich subscribe to the following principle ([6]):\nThe meaning of a sentence does not lie in its truth conditions, but\nrather in the way it changes (the representation of ) the information\nof the interpreter.\nIn various forms, this intuition can be found prefigured in some of the later work\nof Ludwig Wittgenstein, as well as in the research of philosophers of language\nsuch as Austin, Grice, Searle, Strawson and others ([1]); but its formal development can be traced back to the work of Groenendijk and Stokhof about the\nproper treatment of pronouns in formal linguistics ([6]).\nWe refer to [1] for a comprehensive analysis of the linguistic issues which\ncaused such a development, as well as for a description of the ways in which this\nframework was adapted in order to model presuppositions, questions/answers\nand other phenomena; here we will only present a formulation of dynamic predicate semantics, the alternative semantics for first-order logic which was developed in the above mentioned paper by Groenendijk and Stokhof.\nDefinition 3.6 (Dynamic Semantics for First-Order Logic) Let \u03c6 be a firstorder formula, let M be a suitable first-order model and let s and s\u2032 be two assignments. Then we say that the transition from s to s\u2032 is allowed by \u03c6 in M ,\nand we write M |=s\u2192s\u2032 \u03c6, if and only if\nDPL-atom:\nDPL-\u00ac:\n\n\u03c6 is an atomic formula, s = s\u2032 and M |=s \u03c6 in the usual sense;\n\n\u03c6 is of the form \u00ac\u03c8, s = s\u2032 and for all assignments h, M 6|=s\u2192h \u03c8;\n\nDPL-\u2227: \u03c6 is of the form \u03c81 \u2227 \u03c82 and there exists an h such that M |=s\u2192h \u03c81\nand M |=h\u2192s\u2032 \u03c82 ;\n26\n\n\fDPL-\u2228: \u03c6 is of the form \u03c81 \u2228 \u03c82 , s = s\u2032 and there exists an h such that\nM |=s\u2192h \u03c81 or M |=s\u2192h \u03c82 ;\nDPL-\u2192:\n\n\u03c6 is of the form \u03c81 \u2192 \u03c82 , s = s\u2032 and for all h it holds that\nM |=s\u2192h \u03c81 \u21d2 \u2203h\u2032 s.t. M |=h\u2192h\u2032 \u03c82 ;\n\nDPL-\u2203: \u03c6 is of the form \u2203x\u03c8 and there exists an element m \u2208 Dom(M ) such\nthat M |=s[m/x]\u2192s\u2032 \u03c8;\nDPL-\u2200: \u03c6 is of the form \u2200x\u03c8, s = s\u2032 and for all elements m \u2208 Dom(M ) there\nexists an h such that M |=s[m/x]\u2192h \u03c8.\nA formula \u03c6 is satisfied by an assignment s if and only if there exists an assignment s\u2032 such that M |=s\u2192s\u2032 \u03c6; in this case, we will write M |=s \u03c6.\nWe will discuss neither the formal properties of this formalism nor its linguistic\napplications here. All that is relevant for our purposes is that, according to it,\nformulas are interpreted as transitions from assignments to assignments, and\nfurthermore that the rule for conjunction allows us to bind occurrences of a\nvariable of the second conjunct to quantifiers occurring in the first one.9\nThe similarity between this semantics and our semantics for transition terms\nshould be evident. Hence, it seems natural to ask whether we can adopt, for a\nsuitable variant of Dependence Logic, the following variant of Groenendijk and\nStokhof's motto:\nThe meaning of a formula does not lie in its satisfaction conditions,\nbut rather in the team transitions it allows.\nFrom this point of view, transition terms are the fundamental objects of our\nsyntax, and formulas can be removed altogether from the language \u2013 although,\nof course, the tests corresponding to literals and dependence formulas should\nstill be available. As in Groenendijk and Stokhof's logic, satisfaction becomes\nthen a derived concept: in brief, a team X can be said to satisfy a term \u03c4 if\nand only if there exists a Y such that \u03c4 allows the transition from X to Y , or,\nin other words, if and only if some set of non-losing outcomes can be reached\nfrom the set X of initial positions in the game corresponding to \u03c4 .\nIn the next section, we will make use of these intuitions to develop another,\nterser version of Dependence Logic; and finally, we will discuss some implications\nof this new version for the further developments and for the possible applications\nof this interesting logical formalism.\n9 For\n\nexample, consider the formula (\u2203xP x) \u2227 Qx: by the rules given, it is easy to see that\nM |=s (\u2203xP x) \u2227 Qx if and only if P M \u2229 QM 6= \u2205, that is, if and only if M |=s \u2203x(P x \u2227 Qx),\ndifferently from the case of Tarski's semantics.\n\n27\n\n\f3.4\n\nDynamic Dependence Logic\n\nWe will now develop a formula-free variant of Transition Dependence Logic,\nalong the lines of Groenendijk and Stockhof's Dynamic Predicate Logic.\nDefinition 3.7 (Dynamic Dependence Logic - Syntax) Let \u03a3 be a firstorder signature. The set of all formulas of Dynamic Dependence Logic over \u03a3\nis given by the rules\n\u03c4 ::= R~t | \u00acR~t | =(t1 , . . . , tn ) | \u2203v | \u2200v | \u03c4 \u2297 \u03c4 | \u03c4 \u2229 \u03c4 | \u03c4 ; \u03c4\nwhere, as usual, R ranges over all relation symbols of our signature, ~t ranges\nover all tuples of terms of the required lengths, n ranges over N, t1 . . . tn range\nover all terms, and v ranges over Var.\nThe semantical rules associated to this language are precisely as one would\nexpect:\nDefinition 3.8 (Dynamic Dependence Logic - Semantics) Let M be a firstorder model, let \u03c4 be a Dynamic Dependence Logic formula over the signature\nof M , and let X and Y be two teams over M with domain Var. Then we say\nthat \u03c4 allows the transition X \u2192 Y in M , and we write M |=X\u2192Y \u03c4 , if and\nonly if\nDDL-lit: \u03c4 is a first-order literal, M |=s \u03c4 in the usual first-order sense for\nall s \u2208 X, and X \u2286 Y ;\nDDL-dep: \u03c4 is a dependence atom =(t1 , . . . , tn ), X \u2286 Y , and any two assignments s, s\u2032 \u2208 X which coincide over t1 . . . tn\u22121 also coincide over tn ;\nDDL-\u2203: \u03c4 is of the form \u2203v for some v \u2208 Var, and X[F/v] \u2286 Y for some\nF : X \u2192 Dom(M );\nDDL-\u2200:\n\n\u03c4 is of the form \u2200v for some v \u2208 Var, and X[M/v] \u2286 Y ;\n\nDDL-\u2297: \u03c4 is of the form \u03c41 \u2297 \u03c42 and X = X1 \u222a X2 for two teams X1 and X2\nsuch that M |=X1 \u2192Y \u03c41 and M |=X2 \u2192Y \u03c42 ;\nDDL-\u2229:\n\n\u03c4 is of the form \u03c41 \u2229 \u03c42 , M |=X\u2192Y \u03c41 and M |=X\u2192Y \u03c42 ;\n\nDDL-concat: \u03c4 is of the form \u03c41 ; \u03c42 , and there exists a Z such that M |=X\u2192Z\n\u03c41 and M |=Z\u2192Y \u03c42 .\nA formula \u03c4 is said to be satisfied by a team X in a model M if and only if\nthere exists a Y such that M |=X\u2192Y \u03c4 ; and if this is the case, we will write\nM |=X \u03c4 .\nIt is not difficult to see that Dynamic Dependence Logic is equivalent to\nTransition Dependence Logic (and, therefore, to Dependence Logic).\n\n28\n\n\fProposition 3.1 Let \u03c6 be a Dependence Logic formula. Then there exists a\nDynamic Dependence Logic formula \u03c6\u2032 which is equivalent to it, in the sense\nthat\nM |=X \u03c6 \u21d4 M |=X \u03c6\u2032 \u21d4 \u2203Y s.t. M |=X\u2192Y \u03c6\u2032\nfor all suitable teams X and models M\nProof:\nWe build \u03c6\u2032 by structural induction:\n1. If \u03c6 is a literal or a dependence atom then \u03c6\u2032 = \u03c6;\n2. If \u03c6 is \u03c81 \u2228 \u03c82 then \u03c6\u2032 = \u03c81\u2032 \u2297 \u03c82\u2032 ;\n3. If \u03c6 is \u03c81 \u2227 \u03c82 then \u03c6\u2032 = \u03c81\u2032 \u2229 \u03c82\u2032 ;\n4. If \u03c6 is \u2203x\u03c8 then \u03c6\u2032 = \u2203x; \u03c8 \u2032 ;\n5. If \u03c6 is \u2200x\u03c8 then \u03c6\u2032 = \u2200x; \u03c8 \u2032 .\n\u0003\nProposition 3.2 Let \u03c4 be a Dynamic Dependence Logic formula. Then there\nexists a Transition Dependence Logic transition term \u03c4 \u2032 such that\nM |=X\u2192Y \u03c4 \u21d4 M |=X\u2192Y \u03c4 \u2032\nfor all suitable X, Y and M , and such that hence\nM |=X \u03c4 \u21d4 M |=X h\u03c4 \u2032 i\u22a4.\nProof:\nBuild \u03c4 \u2032 by structural induction:\n1. If \u03c4 is a literal or dependence atom then \u03c4 \u2032 = \u03c4 ?;\n2. If \u03c4 is of the form \u2203v or \u2200v then \u03c4 \u2032 = \u03c4 ;\n3. If \u03c4 is of the form \u03c41 \u2297 \u03c42 then \u03c4 \u2032 = \u03c41\u2032 \u2297 \u03c42\u2032 ;\n4. If \u03c4 is of the form \u03c41 \u2229 \u03c42 then \u03c4 \u2032 = \u03c41\u2032 \u2229 \u03c42\u2032 ;\n5. If \u03c4 is of the form \u03c41 ; \u03c42 then \u03c4 \u2032 = \u03c41\u2032 ; \u03c42\u2032 .\n\u0003\nCorollary 3.9 Dynamic Dependence Logic is equivalent to Transition Dependence Logic and to Dependence Logic\nProof:\nFollows from the two previous results and from the equivalence between Dependence Logic and Transition Dependence Logic.\n\u0003\n\n29\n\n\f4\n\nFurther Work\n\nIn this work, we established a connection between a variant of Dynamic Game\nLogic and Dependence Logic, and we used it as the basis for the development of\nvariants of Dependence Logic in which it is possible to talk directly about transitions from teams to teams. This suggests a new perspective on Dependence\nLogic and Team Semantics, one which allow us to study them as a special kind\nof algebras of nondeterministic transitions between relations. One of the main\nproblems that is now open is whether it is possible to axiomatize these algebras,\nin the same sense in which, in [14], Allen Mann offers an axiomatization of the\nalgebra of trumps corresponding to IF Logic (or, equivalently, to Dependence\nLogic).\nFurthermore, we might want to consider different choices of connectives,\nlike for example ones related to the theory of database transactions. The investigation of the relationships between the resulting formalisms is a natural\ncontinuation of the currently ongoing work on the study of the relationship between various extensions of Dependence Logic, and promises of being of great\nutility for the further development of this fascinating line of research.\n\n5\n\nAcknowledgements\n\nThe author wishes to thank Johan van Benthem and Jouko V\u00e4\u00e4n\u00e4nen for a\nnumber of useful suggestions and insights. Furthermore, he wishes to thank the\nreviewers for a number of highly useful suggestions and comments.\n\nReferences\n[1] Dekker, P.: 2008, 'A guide to dynamic semantics'. ILLC Prepublication\nSeries (PP-2008-42).\n[2] Engstr\u00f6m, F.: 2012, 'Generalized quantifiers in dependence logic'. Journal\nof Logic, Language and Information 21(3), 299\u2013324.\n[3] Galliani, P.: 2011, 'Multivalued dependence logic and independence logic'.\nIn: Non-classical Modal and Predicate Logics.\n[4] Galliani, P.: 2012, 'Inclusion and exclusion dependencies in team semantics:\nOn some logics of imperfect information'. Annals of Pure and Applied Logic\n163(1), 68 \u2013 84.\n[5] Gr\u00e4del, E. and J. V\u00e4\u00e4n\u00e4nen: 2013, 'Dependence and Independence'. Studia\nLogica 101 (2), 399\u2013410.\n[6] Groenendijk, J. and M. Stokhof: 1991, 'Dynamic Predicate Logic'. Linguistics and Philosophy 14(1), 39\u2013100.\n\n30\n\n\f[7] Henkin, L.: 1961, 'Some Remarks on Infinitely Long Formulas'. In: Infinitistic Methods. Proc. Symposium on Foundations of Mathematics. Pergamon Press, pp. 167\u2013183.\n[8] Hintikka, J.: 1968, 'Language-Games for Quantifiers'. In: American Philosophical Quarterly Monograph Series 2: Studies in Logical Theory. Basil\nBlackwell, pp. 46\u201372.\n[9] Hintikka, J.: 1996, The Principles of Mathematics Revisited. Cambridge\nUniversity Press.\n[10] Hintikka, J. and G. Sandu: 1989, 'Informational independence as a semantic phenomenon'. In: J. Fenstad, I. Frolov, and R. Hilpinen (eds.): Logic,\nmethodology and philosophy of science. Elsevier, pp. 571\u2013589.\n[11] Hodges, W.: 1997, 'Compositional Semantics for a Language of Imperfect\nInformation'. Journal of the Interest Group in Pure and Applied Logics 5\n(4), 539\u2013563.\n[12] Kontinen, J. and V. Nurmi: 2009, 'Team Logic and Second-Order Logic'.\nIn: H. Ono, M. Kanazawa, and R. de Queiroz (eds.): Logic, Language,\nInformation and Computation, Vol. 5514 of Lecture Notes in Computer\nScience. Springer Berlin / Heidelberg, pp. 230\u2013241.\n[13] Kontinen, J. and J. V\u00e4\u00e4n\u00e4nen: 2009, 'On definability in dependence logic'.\nJournal of Logic, Language and Information 3(18), 317\u2013332.\n[14] Mann, A. L.: 2009, 'Independence-friendly cylindric set algebras'. Logic\nJournal of IGPL 17(6), 719\u2013754.\n[15] Mann, A. L., G. Sandu, and M. Sevenster: 2011, Independence-Friendly\nLogic: A Game-Theoretic Approach. Cambridge University Press.\n[16] Parikh, R.: 1985, 'The logic of games and its applications'. In: Selected\npapers of the international conference on \"foundations of computation theory\" on Topics in the theory of computation. New York, NY, USA, pp.\n111\u2013139.\n[17] V\u00e4\u00e4n\u00e4nen, J.: 2007a, Dependence Logic. Cambridge University Press.\n[18] V\u00e4\u00e4n\u00e4nen, J.: 2007b, 'Team Logic'. In: J. van Benthem, D. Gabbay, and\nB. L\u00f6we (eds.): Interactive Logic. Selected Papers from the 7th Augustus\nde Morgan Workshop. Amsterdam University Press, pp. 281\u2013302.\n[19] van Benthem, J.: 2003, 'Logic Games are Complete for Game Logics'.\nStudia Logica 75, 183\u2013203.\n[20] van Benthem, J., S. Ghosh, and F. Liu: 2008, 'Modelling simultaneous\ngames in dynamic logic'. Synthese 165, 247\u2013268.\n\n31\n\n\f"}