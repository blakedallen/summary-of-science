{"id": "http://arxiv.org/abs/1006.5100v1", "guidislink": true, "updated": "2010-06-26T03:03:32Z", "updated_parsed": [2010, 6, 26, 3, 3, 32, 5, 177, 0], "published": "2010-06-26T03:03:32Z", "published_parsed": [2010, 6, 26, 3, 3, 32, 5, 177, 0], "title": "Testing Reactive Probabilistic Processes", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1006.0960%2C1006.0197%2C1006.1438%2C1006.3891%2C1006.0595%2C1006.0559%2C1006.5195%2C1006.4198%2C1006.3010%2C1006.0719%2C1006.5814%2C1006.2506%2C1006.1381%2C1006.5651%2C1006.3628%2C1006.3804%2C1006.2101%2C1006.2697%2C1006.0910%2C1006.0136%2C1006.2933%2C1006.2216%2C1006.5044%2C1006.5250%2C1006.2058%2C1006.0942%2C1006.2199%2C1006.3999%2C1006.2125%2C1006.2964%2C1006.3962%2C1006.3468%2C1006.0398%2C1006.1929%2C1006.1011%2C1006.0302%2C1006.5249%2C1006.4997%2C1006.1698%2C1006.2281%2C1006.5100%2C1006.4400%2C1006.5547%2C1006.0622%2C1006.0929%2C1006.0839%2C1006.1864%2C1006.2311%2C1006.5692%2C1006.2440%2C1006.1112%2C1006.5383%2C1006.2791%2C1006.4112%2C1006.5949%2C1006.4123%2C1006.4894%2C1006.2259%2C1006.4866%2C1006.2627%2C1006.2324%2C1006.2683%2C1006.2235%2C1006.0521%2C1006.3055%2C1006.1206%2C1006.2704%2C1006.1904%2C1006.1911%2C1006.0119%2C1006.4185%2C1006.1602%2C1006.5116%2C1006.1513%2C1006.1477%2C1006.5470%2C1006.3125%2C1006.0534%2C1006.4926%2C1006.4202%2C1006.2441%2C1006.0809%2C1006.5599%2C1006.3399%2C1006.4572%2C1006.1555%2C1006.5074%2C1006.5669%2C1006.2717%2C1006.1552%2C1006.1303%2C1006.1001%2C1006.1258%2C1006.1115%2C1006.4719%2C1006.0525%2C1006.4111%2C1006.5033%2C1006.3108%2C1006.4001%2C1006.5329&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Testing Reactive Probabilistic Processes"}, "summary": "We define a testing equivalence in the spirit of De Nicola and Hennessy for\nreactive probabilistic processes, i.e. for processes where the internal\nnondeterminism is due to random behaviour. We characterize the testing\nequivalence in terms of ready-traces. From the characterization it follows that\nthe equivalence is insensitive to the exact moment in time in which an internal\nprobabilistic choice occurs, which is inherent from the original testing\nequivalence of De Nicola and Hennessy. We also show decidability of the testing\nequivalence for finite systems for which the complete model may not be known.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1006.0960%2C1006.0197%2C1006.1438%2C1006.3891%2C1006.0595%2C1006.0559%2C1006.5195%2C1006.4198%2C1006.3010%2C1006.0719%2C1006.5814%2C1006.2506%2C1006.1381%2C1006.5651%2C1006.3628%2C1006.3804%2C1006.2101%2C1006.2697%2C1006.0910%2C1006.0136%2C1006.2933%2C1006.2216%2C1006.5044%2C1006.5250%2C1006.2058%2C1006.0942%2C1006.2199%2C1006.3999%2C1006.2125%2C1006.2964%2C1006.3962%2C1006.3468%2C1006.0398%2C1006.1929%2C1006.1011%2C1006.0302%2C1006.5249%2C1006.4997%2C1006.1698%2C1006.2281%2C1006.5100%2C1006.4400%2C1006.5547%2C1006.0622%2C1006.0929%2C1006.0839%2C1006.1864%2C1006.2311%2C1006.5692%2C1006.2440%2C1006.1112%2C1006.5383%2C1006.2791%2C1006.4112%2C1006.5949%2C1006.4123%2C1006.4894%2C1006.2259%2C1006.4866%2C1006.2627%2C1006.2324%2C1006.2683%2C1006.2235%2C1006.0521%2C1006.3055%2C1006.1206%2C1006.2704%2C1006.1904%2C1006.1911%2C1006.0119%2C1006.4185%2C1006.1602%2C1006.5116%2C1006.1513%2C1006.1477%2C1006.5470%2C1006.3125%2C1006.0534%2C1006.4926%2C1006.4202%2C1006.2441%2C1006.0809%2C1006.5599%2C1006.3399%2C1006.4572%2C1006.1555%2C1006.5074%2C1006.5669%2C1006.2717%2C1006.1552%2C1006.1303%2C1006.1001%2C1006.1258%2C1006.1115%2C1006.4719%2C1006.0525%2C1006.4111%2C1006.5033%2C1006.3108%2C1006.4001%2C1006.5329&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We define a testing equivalence in the spirit of De Nicola and Hennessy for\nreactive probabilistic processes, i.e. for processes where the internal\nnondeterminism is due to random behaviour. We characterize the testing\nequivalence in terms of ready-traces. From the characterization it follows that\nthe equivalence is insensitive to the exact moment in time in which an internal\nprobabilistic choice occurs, which is inherent from the original testing\nequivalence of De Nicola and Hennessy. We also show decidability of the testing\nequivalence for finite systems for which the complete model may not be known."}, "authors": ["Sonja Georgievska", "Suzana Andova"], "author_detail": {"name": "Suzana Andova"}, "author": "Suzana Andova", "links": [{"title": "doi", "href": "http://dx.doi.org/10.4204/EPTCS.28.7", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1006.5100v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1006.5100v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1006.5100v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1006.5100v1", "arxiv_comment": null, "journal_reference": "EPTCS 28, 2010, pp. 99-113", "doi": "10.4204/EPTCS.28.7", "fulltext": "Testing Reactive Probabilistic Processes\nSonja Georgievska and Suzana Andova\nDepartment of Mathematics and Computer Science\nEindhoven University of Technology\nThe Netherlands\ns.georgievska@tue.nl, s.andova@tue.nl\n\nWe define a testing equivalence in the spirit of De Nicola and Hennessy for reactive probabilistic\nprocesses, i.e. for processes where the internal nondeterminism is due to random behaviour. We\ncharacterize the testing equivalence in terms of ready-traces. From the characterization it follows\nthat the equivalence is insensitive to the exact moment in time in which an internal probabilistic\nchoice occurs, which is inherent from the original testing equivalence of De Nicola and Hennessy.\nWe also show decidability of the testing equivalence for finite systems for which the complete model\nmay not be known.\n\n1\n\nIntroduction\n\nA central paradigm behind process semantics based on observability (e.g. [18]) is that the exact moment\nan internal nondeterministic choice is resolved is unobservable. This is because an observer does not\nhave insight into the internal structure of a process but only in its externally visible actions. Unobservability of internal choice has been also achieved by the testing theory [7, 17]1 , where two processes are\ntreated equivalent iff they can not be distinguished when interacting with their environment (which is an\narbitrary process itself). It is natural, therefore, for this property to hold when internal choice is quantified with probabilities. It turned out, however, that it was not trivial to achieve unobservability of internal\nprobabilistic choice in probabilistic testing theory. The following example illustrates some points that\ncause this problem.\nConsider a system consisting of a machine and a user, that communicate via a menu of two buttons\n\"head\" and \"tail\" positioned at the machine. The machine makes a fair choice whether to give a prize if\n\"head\" is chosen or if \"tail\" is chosen. The user can choose \"head\" or \"tail\" by pressing the appropriate\nbutton. If the user chooses the right outcome, a prize follows. Note that by no means the machine's\nchoice could have been revealed beforehand to the user. The machine can be modeled by the process\ngraph s in Fig. 1. That is, in half of the machine runs, it offers a prize after the \"head\" button has been\npressed (out of the two-button menu \"head\" and \"tail\"), while in the other half of the runs it offer a prize\nafter the \"tail\" button has been pressed (out of the two-button menu \"head\" and \"tail\"). The user can be\nmodeled by process u in Fig. 1. Sometimes she would press \"head\" and sometimes \"tail\"; however, her\ngoal is to win a prize, denoted by action p, and be \"happy\" afterwards, denoted by action ,.\nLet the user and the machine interact, i.e. let them synchronize on all actions, except on the \"user\nhappiness\" reporting action ,. In terms of testing theory [7], process s is tested with test u. It can be\ncomputed, by means of the probability theory, that the probability with which the user has guessed the\nmachine choice is 12 . That is, the probability of a , action being reported is 21 . However, most of the\nexisting approaches for probabilistic testing, in particular probabilistic may/must testing [8, 19, 28, 30,\n1 As\n\nshown in [26] the process semantics based on [18] and [7] coincide for a broad class of processes.\n\nA. Di Pierro & G. Norman (Eds): 8th Workshop on Quantitative\nAspects of Programming Languages (QAPL 2010)\nEPTCS 28, 2010, pp. 99\u2013113, doi:10.4204/EPTCS.28.7\n\nc Sonja Georgievska and Suzana Andova\nThis work is licensed under the\nCreative Commons Attribution License.\n\n\fTesting Reactive Probabilistic Processes\n\n100\n\nu\n\ns\n1\n2\n\n|y\n\u25e6 33\nt\nh\n\u0005 3\u0019\n\n\u25e6\n\n\u000fp\n\n\u25e6\n\ny\n\n\u25e6\n\n\u25e6E\n\n\u25e6\n\n1\n\nE2\"\n\nh\n\n\u25e6\n\n\u0005\n\nsku\n\nh \u0017\n\n\u25e6 33\n\n3t\u0019\n\n\u25e6\n\np\u000f\n\n\u25e6\n\n\u25e6\n\n1\n2\n\n\u0007t\n\np\u000f\n\n\u25e6\n,\u000f\n\u25e6\n\n\u25e6\n\u000f\n\n\u25e6\n,\u000f\n\u25e6\n\nt\nzt t\n\u25e6 33\n\u0005 3\u0019\n\n\u25e6\n\ns\u0304\nh yy \u25e6 EEEt\nE\ny\n\n\u25e6 J J12\n\nJ$\n\n\u25e6\n\n\u0005\n\n\u25e6 33\n\n3\u0019\n\n1\n2\n\n\u25e6\n\n\u25e6\n\n\u000f\n\n\u25e6\n\n\u25e6\n\n\u0005\n\n\u000fp\n\n|y\n1\n3\u0019 2\n\n\u25e63\n\n\u25e6\n\n\"\n\n1\n2\n\n\u25e6\n\n\u0005\n\n\u25e63\n\n1\n\n3\u0019 2\n\n\u25e6\n\np\u000f\n\n\u25e6\n\n,\u000f\n\u25e6\n\nFigure 1: Processes s and s\u0304 are distinguished in probabilistic may/must testing theory\n\n32], do not give this answer. In order to compute the probability of , being reported, the approaches\nin [8, 19, 28, 30, 32] use schedulers to resolve the action choice. These schedulers are taken very general\nand they are given the power to have insight into the internal structure of the synchronized process.\nConsider the synchronization s k u represented by the graph in Fig. 1, where actions are hidden after\nthey have synchronized. A scheduler resolves the choices of actions in the two states reachable in one\nprobabilistic step from the initial state of the graph s k u, thus yielding a fully probabilistic system. For\ns k u in Fig. 1, there are four possible schedulers. They yield the following set of probabilities with\nwhich s passes the test u: {0, 12 , 1}. We can see that, because the power of the schedulers is unrestricted,\nnonviable upper and lower bounds for the probability are obtained. Observe that this happens due to the\neffect of \"cloning\" the action choice of h and t (the choice between h and t has been \"cloned\" in both\nfutures after the probabilistic choice in s k u), and allowing a scheduler to schedule differently in the two\n\"clones\". This, in fact, corresponds to a model where the user is given power to see the result of the\nprobabilistic choice made by the machine before she makes her guess. However, this is not the model we\nhad initially in mind when the separate components, the machine and the user, were specified.\nConsider now process s\u0304 in Fig. 1. To the user this process may as well represent the behaviour of the\nmachine \u2013 the user cannot see whether the machine makes the choice before or after making the \"head\nor tail\" offers. According to the user, the machine acts as specified as long as she is able to guess the\nresult in half of the cases. In fact, both schedulers, obtained by methods in [8, 19, 28, 30, 32], when\napplied to s\u0304 k u yield exactly probability 21 of reporting action ,. Consequently, none of the approaches\nin [8, 19, 28, 30, 32] equate processes s and s\u0304: when tested with test u, they produce different bounds for\nthe probabilities of reporting ,. On the other hand, if the probabilities are ignored and the probabilistic\nchoice is treated as an internal choice, processes s and s\u0304 are equivalent by the testing equivalence of [7].\nBeing able to equate s and s\u0304 means allowing distribution of external choice over internal probabilistic\nchoice [18]. Actually, distribution of external choice over internal choice is closely related to distribution\nof action prefix over internal choice. If distribution of external choice over internal probabilistic choice\nis not allowed, then distribution of action prefix over internal probabilistic choice is questioned too,\notherwise the congruence properties of asynchronous or concurrent parallel composition [18] (where\nprocesses synchronize on their common actions while interleave on the other actions) would not hold.\nFor instance, we would not be able to equate processes e.a.(b \u2295 1 c) and e.((a.b) \u2295 1 (a.c)). (The operator\n2\n2\n\".\" stands for prefixing and the operator \"\u2295\" stands for a probabilistic choice.) Running each of these\ntwo processes concurrently with process e.d, yield processes that, unless distribution of external choice\nover internal probabilistic choice is allowed, cannot be equated. If we are not able to relate processes\nthat differ only in the moment internal probabilistic choice is resolved, before or after an action execution\n\n\fSonja Georgievska and Suzana Andova\n\n101\n\n(in other words, if we do not allow distribution of action prefix over internal probabilistic choice), then\nfor verification we can only rely on equivalences that inspect the internal structure of processes, as\nbisimulations and simulations [15].\nMotivated by the previous observations, in [12] we propose a testing preorder which can deal with\nthis problem. According to this testing semantics, the probability with which process s passes test u\n(Fig. 1) is exactly 12 . The model considered in [12] is rather general and allows probabilistic as well as\ninternal non-deterministic choice, in addition to action choice. Moreover, the testing preorder is given a\ncharacterization in terms of a probabilistic ready-trace preorder (a ready-trace is an alternating sequence\nof \"action menus\" and executed actions). From this characterization it follows that the underlying equivalence equates processes s and s\u0304.\nSince the tests in the model of [12] have internal transitions, in general, infinitely many tests need to\nbe considered to determine equivalence between two finite processes. Therefore, the decidability of the\ntesting equivalence for the general model at the moment relies on the characterization of the equivalence\nin terms of ready-traces. However, in practice, if we aim at testing whether the system is equivalent to\nthe model, we may not have access to the ready-traces and the internal transitions of the system that\nare necessary to establish the equivalence. It is, therefore, of practical interest to investigate for which\ntype of systems there exists a procedure to decide testing equivalence based only on testing itself (see\nalso [10, 23, 33] for similar discussions).\nIn this paper we investigate decidability for systems of the testing equivalence of [12] for reactive\nprobabilistic systems [21], where all internal nondeterminism is due to random behaviour. We first point\nout that, under the condition that a test \"knows\" the current set of actions on which it can synchronize with\nthe system (i.e. the menu of actions-candidates for synchronization), there exists a statistical procedure\nto estimate the result of testing a system with a given test. We then show that the set of tests necessary to\ndetermine equivalence of two finite systems is finite, from which the decidability result follows directly.\nMore concretely, we prove that deterministic (i.e. non-probabilistic) tests suffice for distinguishing\nbetween finite processes. This result follows from the proof that the testing equivalence coincides with\nthe probabilistic ready-trace equivalence. In this paper we also present the characterization proof, which\nis technically much more involved than the corresponding proof in [12], due to tests having \"less power\"\nthan in [12]. From this characterization it also follows that the testing equivalence, when applied to\nthe model of reactive probabilistic processes, preserves the previously mentioned desirable properties:\nit is insensitive to the exact moment of occurrence of an internal probabilistic choice and it refines the\nequivalence for the non-probabilistic case proposed in [7].\n\nStructure of the paper In Sec. 2 we define some notions needed for the rest of the paper. In Sec. 3\nwe recall the definition of probabilistic ready trace equivalence from [12]. In Sec. 4 we define a testing\nequivalence for the reactive probabilistic processes. In Sec. 5 we prove that the equivalences defined in\nsections 3 and 4 coincide. In Sec. 6 we show the decidability results for the testing equivalence. Sec. 7\nends with discussion of related work, other than [12], and concluding remarks.\n\n2\n\nPreliminaries\n\nWe define some preliminary notions needed for the rest of the paper.\n\n\fTesting Reactive Probabilistic Processes\n\n102\n\n2.1 Bayesian probability\nFor a set A, 2A denotes its power-set. The following definitions are taken from [22].\nWe consider a sample space, \u03a9, consisting of points called elementary events. Selection of a particular a \u2208 \u03a9 is referred to as an \"a has occurred\". An event is a set of elementary events. A, B,C range\nover events. An event A has occurred iff, for some a \u2208 A, a has occurred. Let A1 , A2 , . . . be a sequence\nof events and C be an event. The members of the sequence are exclusive given C, if whenever C has\noccurred no two of them can occur together, that is, if Ai \u2229 A j \u2229 C = 0/ whenever i 6= j. C is called a\nconditioning event. If the conditioning event is \u03a9, then \"given \u03a9\" is omitted.\nFor certain pairs of events A and B, a real number P(A|B) is defined and called the probability of A\ngiven B. These numbers satisfy the following axioms:\nA1: 0 \u2264 P(A|B) \u2264 1 and P(A|A) = 1.\n\u221e\n\u221e\nA2: If the events in {Ai }\u221e\ni=1 are exclusive given B, then P(\u222ai=1 Ai | B) = \u2211i=1 P(Ai |B).\n\nA3: P(C|A \u2229 B) * P(A|B) = P(A \u2229C|B).\nFor P(A|\u03a9) we simply write P(A).\n\n2.2 Probabilistic transition systems\nIn a probabilistic transition system (PTS) there are two types of transitions, viz. action and probabilistic\ntransitions; a state can either perform action transitions only (action state) or (unobservable) probabilistic\ntransitions only (probabilistic state). To simplify, we assume that probabilistic transitions lead to action\nstates. In action states the choice is between a set of actions, but once the action is chosen, the next state\nis determined. The outgoing transitions of a probabilistic state s define probability over the power-set of\nthe set of action states.\nWe give a formal definition of a PTS. Presuppose a finite set of actions A .\nDefinition 2.1 (Probabilistic Transition System (PTS)) A PTS is a tuple P = (Sn , S p , \u2192, 99K), where\n\u2022 Sn and S p are finite disjoint sets of action and probabilistic states, resp.,\n\u2022 \u2192 \u2286 Sn \u00d7 A \u00d7 Sn \u222a S p is an action transition relation such that (s, a,t) \u2208 \u2192 and (s, a,t \u2032 ) \u2208 \u2192\nimplies t = t \u2032 , and\n\u2022 99K \u2286 S p \u00d7(0, 1]\u00d7Sn is a probabilistic transition relation such that, for all s \u2208 S p , \u2211(s,\u03c0 ,t)\u220899K \u03c0 = 1.\na\n\n\u03c0\n\nWe denote Sn \u222a S p by S. We write s \u2212\n\u2192 t rather than (s, a,t) \u2208 \u2192, and s 99K t rather than (s, \u03c0 ,t) \u2208 99K\na\n(or s 99K t if the value of \u03c0 is irrelevant in the context). We write s \u2212\n\u2192 to denote that there exists an\na\naction transition s \u2212\n\u2192 s\u2032 for some s\u2032 \u2208 S. We agree that a state without outgoing transitions belongs to Sn .\na\nGiven a process s and action a \u2208 A , denote by sa the process, if it exists, for which s \u2212\n\u2192 sa . Given a PTS\nP = (Sn , S p , \u2192, 99K), let I : Sn 7\u2192 2A be a function such that, for all a \u2208 A , s \u2208 Sn , it holds a \u2208 I(s) iff\na\ns\u2212\n\u2192. I(s) is called the menu of s. Intuitively, for s \u2208 Sn , I(s) is the set of actions that the process s can\nperform initially.\nAs standard, we define a process graph (or simply process) to be a state s \u2208 S together with all states\nreachable from s, and the transitions between them. A process graph is usually named by its root state,\nin this case s.\n\n\fSonja Georgievska and Suzana Andova\n\n3\n\n103\n\nProbabilistic ready trace semantics\n\nIn this section we recall the ready-trace equivalence for reactive probabilistic processes defined in [12].\nDefinition 3.1 (Ready trace) A ready trace of length n is a sequence (M1 , a1 , M2 , a2 , . . . , Mn\u22121 , an\u22121 , Mn )\nwhere Mi \u2208 2A for all i \u2208 {1, 2, . . . , n} and ai \u2208 Mi for all i \u2208 {1, 2, . . . , n \u2212 1} .\nWe assume that the observer has the ability to observe the actions that the process performs, together with\nthe menus out of which actions are chosen. Intuitively, a ready trace O = (M1 , a1 , M2 , a2 , . . . , Mn\u22121 , an\u22121 , Mn )\ncan be observed if the initial menu is M1 , then action a1 \u2208 M1 is performed, then the next menu is M2 ,\nthen action a2 \u2208 M2 is performed and so on, until the observing ends at a point when the menu is Mn .\nIt is essential that, since the probabilistic transitions are not observable, the observer cannot infer where\nexactly they happen in the ready trace.\nClearly the probability of observing a ready trace ({a, b}, a, {c}) is conditioned on choosing the\naction a from the menu {a, b}. This suggests that, when defining probabilities on ready traces, the\nBayesian definition of probability is more appropriate than the measure-theoretic definition that is usually\ntaken.\nNext, given a process s, we define a process s(M,a) . Intuitively, s(M,a) is the process that s becomes,\nassuming that menu M was offered to s and action a was performed.\nDefinition 3.2 Let s be a process graph. Let M \u2286 A , a \u2208 M be such that I(s) = M if s \u2208 Sn or otherwise\nthere exists a transition s 99K s\u2032 such that I(s\u2032 ) = M. The process graph s(M,a) is obtained from s in the\nfollowing way:\na\n\n\u2022 if s \u2208 Sn then the root of s(M,a) is the state s\u2032 such that s \u2212\n\u2192 s\u2032 , and\n\u2022 if s \u2208 S p then a new state s(M,a) is created. Let \u03c0 = \u2211\n\n\u03c0i\n\ns99Ksi ,I(si )=M\n\n\u03c0i\n\na\n\n\u03c0i . For all s\u2032i such that s 99K si \u2212\n\u2192 s\u2032i\n\nand I(si ) = M:\n\u03c0i /\u03c0\n\n\u2013 if s\u2032i 699K, then an edge s(M,a) 99K s\u2032i is created;\n\u03c1i\n\n\u03c0i \u03c1i /\u03c0\n\n\u2013 for all transitions s\u2032i 99K s\u2032\u2032i , an edge s(M,a) 99K s\u2032\u2032i is created.\nDefinition 3.3 Let (M1 , a1 , M2 , a2 , . . . , Mn\u22121 , an\u22121 , Mn ) be a ready trace of length n and s be a process\ngraph. Functions Ps1 (M) and Psn (Mn |M1 , a1 , . . . Mn\u22121 , an\u22121 ) (for n > 1) are defined in the following way:\n\uf8f1\n1\nif s \u2208 S p ,\n\u03c0 \u2032 \u03c0 * P \u2032 (M)\n\uf8f4\ns\n\uf8f2 \u2211s99Ks\n1\nPs (M) = 1\nif s \u2208 Sn , I(s) = M,\n\uf8f4\n\uf8f3\n0\notherwise.\n(\nPs1(M ,a ) (M2 ) if Ps1 (M1 ) > 0,\n1 1\nPs2 (M2 |M1 , a1 ) =\nundefined\notherwise.\n(\n(Mn |M2 , a2 , . . . , Mn\u22121 , an\u22121 ) if Ps1 (M1 ) > 0,\nPsn\u22121\n(M1 ,a1 )\nPsn (Mn |M1 , a1 , . . . , Mn\u22121 , an\u22121 ) =\nundefined\notherwise.\nLet the sample space consist of all possible menus and s \u2208 S. Function Ps1 (M) can be interpreted\nas the probability that the menu M is observed initially when process s starts executing. Let the sample\n\n\fTesting Reactive Probabilistic Processes\n\n104\n\nspace consist of all ready traces of length n and let s \u2208 S. The function Psn (Mn |M1 , a1 , . . . Mn\u22121 , an\u22121 ) can\nbe interpreted as the probability of the event {(M1 , a1 , . . . , Mn\u22121 , an\u22121 , Mn )}, given the event\n{(M1 , a1 , . . . Mn\u22121 , an\u22121 , X ) : X \u2208 2A }, if observing ready traces of process s. It can be checked that these\nprobabilities are well defined, i.e., they satisfy the axioms A1-A3 of Section 2.\nDefinition 3.4 (Probabilistic ready trace equivalence) Two processes s and s\u0304 are probabilistically ready\ntrace equivalent, notation s \u2248O s\u0304, iff:\n\u2022 for all M in 2A , Ps1 (M) = Ps\u03041 (M) and\n\u2022 for all n > 1, Psn (Mn |M1 , a1 , . . . Mn\u22121 , an\u22121 ) is defined if and only if Ps\u0304n (Mn |M1 , a1 , . . . Mn\u22121 , an\u22121 )\nis defined, and in case they are both defined, they are equal.\nInformally, two processes s and s\u0304 are ready-trace equivalent iff for every n and every ready trace\n(M1 , a1 , M2 , a2 , . . . Mn ), the probability to observe Mn , under condition that previously the sequence\n(M1 , a1 , M2 , a2 , . . . an\u22121 ) was observed, is defined at the same time for both s and s\u0304; moreover, in case\nboth probabilities are defined, they coincide. Note that it is straightforward to construct a testing scenario\nin the lines of [3,15] for this ready-trace equivalence. Namely, in [15] a ready trace machine is described,\nthat allows for the ready traces to be observed. To estimate2 the conditional probabilities of the ready\ntraces of length n, only basic statistical analysis needs to be applied to the set of all ready traces obtained\nfrom the ready-trace machine.\nExample For processes s and s\u0304 in Fig. 1 it holds s \u2248O s\u0304.\n\n4\n\nTesting equivalence\n\nIn this section we define a testing equivalence in the style of [7] for reactive probabilistic processes.\n2x\nis a rational\nRecall that a division of two polynomials is called a rational function. For example, x+y\nfunction with arguments x and y. A possible domain for this function is (0, \u221e) \u00d7 (0, \u221e). We exploit\na subset R of the rational functions whose argument names belong to the action labels A , which is\ngenerated by the following grammar:\n\u03c6\n\u03c6 ::= \u03b1 | a | \u03c6 + \u03c6 | \u03c6 * \u03c6 | ,\n\u03c6\nwhere \u03b1 is a non-negative scalar, a \u2208 A , and +, *, and ** are ordinary algebraic addition, multiplication\nand fraction, resp. Brackets are used in the standard way to change the priority of the operators. For\nour purposes, we assume that the arguments a, b, ... can only take positive values, i.e. the domain of\nevery function in R is (0, \u221e)n , where n is the size of the action set. Therefore, two rational functions in\nR are equal iff they can be transformed to equal terms using the standard transformations that preserve\na\nb\n1\n+ 21 * a+b\n= 1*(a+b)\nequivalence (e.g. for a, b \u2208 A , 12 * a+b\n2*(a+b) = 2 ).\nA test T , as standard, is a finite process 3 such that, for a symbol \u03c9 6\u2208 A , there may exist transitions\n\u03c9\ns\u2212\n\u2192 for some states s of T , denoting success. Denote the set of all tests by T . Next, we define the result\nof testing a process with a given test. The informal explanation follows afterwards.\n2 We emphasize the word \"estimate\", as it is common knowledge that statistics provides only estimations of the probabilities\n[22].\n3 For now we restrict to non-recursive tests, as the characterization proof in Sec. 5 is already involved; however, it is not\nuncommon to restrict to non-recursive tests in probabilistic testing initially, for the sake of clear presentation (see e.g. [8, 9]).\nIn fact, usually recursive tests do not increase the distinguishing power of the finite tests [17, 30, 33], since infinite paths in tests\ncannot report success.\n\n\fSonja Georgievska and Suzana Andova\n\n105\n\nDefinition 4.1 The function R : S \u00d7 T 7\u2192 R that gives the result of testing a process s with a test T is\ndefined as follows:\n\nR(s, T ) =\n\n\uf8f1\n\uf8f4\n1,\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f2\u2211\n\ni\u2208I \u03c0i * R(si , T ),\n\n\u03c9\n\nif T \u2212\n\u2192,\n\u03c0i\n\n\u03c9\n\nif s 99K si for i \u2208 I, T 6\u2212\n\u2192\n\n\u03c0i\n\uf8f4\nif T 99K Ti for i \u2208 I, s 699K\n\u2211i\u2208I \u03c0i * R(s, Ti ),\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f3\na\n\u2211a\u2208K \u2211b\u2208K\nb R(sa , Ta ), for K=I(s) \u2229 I(T ), otherwise.\n\nAs usual, the result of testing a process with a success test is 1. The result of testing a process with a\nprobabilistic state as a root (i.e. initially probabilistic process) is a weighted sum of the results of testing\nthe subsequent processes with the same test. Similarly when the test is initially probabilistic. Nonstandard, however, is in the result of testing a process s with a test T that can initially perform actions\nfrom A only. Namely, when the process and the test synchronize on an action, the resulting transition is\nlabeled with a \"weighting factor\", containing information about the way this synchronization happened.\nThis information has form of a rational function, the numerator of which represents the synchronized\naction itself, while the denominator is the sum of the common initial actions of s and T , i.e., all actions\non which s and T could have synchronized at the current step. In order to compute the final result of the\ntesting, the rational function is temporarily treated as \"symbolic\" probability. The final result is again a\nrational function in R.\nFor example, it is easy to compute that the result of testing either s or s\u0304 with u (given in Fig. 1)\nis equal to 21 , which establishes one of our goals set in Sec. 1. However, in many cases the result is a\nnon-scalar rational function.\nDefinition 4.2 Two processes s and s\u0304 are testing equivalent, notation s \u2248T s\u0304, iff R(s, T ) and R(s\u0304, T ) are\nequal functions for every test T .\nObviously, comparing two results boils down to comparing two polynomials, after both rational functions\nhave been transformed to equal denominators.\nRemark In [12], in order to keep the probabilities in a composed system, the actions resulting from\nsynchronization have a label containing information about the present and the history of synchronization\n\u2013 i.e. a sequence of previous menus of actions-candidates for synchronizing and the actual synchronized\nactions. This is because (i) we would like to denote that both choices in s||u (Fig. 1) are resolved\nin the same way and (ii) the history of resolution of choices, as usual, can play a role in the current\nresolution. In the present paper one of our main goals is to prove that the testing equivalence coincides\nwith the ready-trace equivalence for the model of reactive probabilistic processes.4 It turns out that, in\norder to achieve this goal, we can simplify the notation for the label of a synchronized action. Here\nthe label of a resulting synchronized action contains only information about the current circumstances of\nsynchronization in the form of a rational expression and the result of testing remains a rational expression.\n(The rational function is a suitable form of \"remembering\" the information, because \"in the world of\nrational expressions\" commutativity and distributivity laws hold, analogous to those we try to achieve\n\"in the world of processes\".) Besides simplifying the notation, this labeling enables us to present the\nproof of Theorem 5.2 (Sec. 5) in a much more concise way.\n4 In the setting without internal nondeterminism, preorder relations become superfluous, since in [12], as usual, a process\nimplements another one iff the former contains less internal nondeterminism\n\n\fTesting Reactive Probabilistic Processes\n\n106\n\n5\n\nRelationship between \u2248T and \u2248O\n\nWe establish our main result, namely that the testing equivalence \u2248T coincides with the probabilistic\nready-trace equivalence \u2248O . In [12], given that two processes are not ready-trace equivalent, we provide\na procedure on how to construct a test that distinguishes between the processes. The procedure heavily\nrelies on the fact that tests can perform internal transitions (which can be manipulated based on the\nsynchronization history). In the present case, the internal transitions of the tests, as those of the processes,\nare fully random (both the tests and the processes belong to the same model, in the spirit of [7]). Because\nof this, the present characterization proof is rather based on contradiction and is much more technically\ninvolved.\nAs an intermediate result, we prove that the probabilistic transitions do not add distinguishing power\nto the tests.\nThe following lemma, which considers the determinant of a certain type of an almost-triangular\nmatrix, shall be needed in the proof of Theorem 5.2.\nLemma 5.1 Let Q be a square n \u00d7 n matrix with elements qi j , for 1 \u2264 i \u2264 n and 1 \u2264 j \u2264 n. Suppose qi j \u2208\n1\n{0, 1} for i > 1, qi j = 1 for i = j + 1, qi j = 0 for i > j + 1, and q1 j = Q\nQ j for 1 \u2264 j \u2264 n, where Q1 , Q2 . . . Qn\nare irreducible, mutually prime polynomials with positive variables, and of non-zero degrees. Then the\ndeterminant of Q is a non-zero rational function.\nProof The determinant Det(Q) of matrix Q can be obtained from the general recursive formula Det(Q) =\n\u2211nj=1 (\u22121)1+ j q1 j Det(Q1j ), where Q1j is the matrix obtained by deleting the first row and the j-th column\nof Q. Observe that Q1n is an upper-triangular matrix, the diagonal elements of which are all equal to\none. Since the determinant of a triangular matrix is equal to the product of its diagonal elements, we\nQ1\nin Det(Q) is equal to\nhave Det(Q1n ) = 1. Therefore, the coefficient in front of the rational function Q\nn\n1. Suppose Det(Q) is a zero-function. Then, the rational function Q1n is equal to a linear combination\n1\nn\u22121\n. This means that the rational function Q1 *Q2Q*...*Q\nis a polynomial. The last is impossiof Q11 , . . . Qn\u22121\nn\nble, since, by assumption, the denominator is an irreducible polynomial of non-zero degree and is not\ncontained in the numerator. Therefore, Det(Q) is not a zero-function.\n\nTheorem 5.2 Let s and t be two processes such that s 6\u2248O t. There exists a test T that has no probabilistic\ntransitions such that R(s, T ) 6= R(t, T ).\nProof We prove the theorem by induction on the minimal length m of a ready-trace that distinguishes\nbetween s and t. For m = 1, we prove that the test T = \u2211a6\u2208M a.\u03c9 , where M is a menu with a minimal\npossible number of actions such that Ps1 (M) 6= Pt1 (M), distinguishes between s and t. For m > 1 the proof\ngoes as follows. If Ps1 (M) = Pt1 (M) for every menu M, then by the inductive assumption it follows that\nthere exists a test T1 , menu M1 and action a1 \u2208 M1 such that R(s(M1 ,a1 ) , T1 ) 6= R(t(M1 ,a1 ) , T1 ). We show\nthat there exists a subset of the action set, say Act, such that the test T = a1 .T1 + \u2211b\u2208Act b.\u03c9 distinguishes\nbetween s and t. To prove this, we take M1 to be the menu containing a minimal possible number of\nactions such that Ps1 (M1 ) > 0, a1 \u2208 M1 , and R(s(M1 ,a1 ) , T1 ) 6= R(t(M1 ,a1 ) , T1 ). Then we take the set Act\u2032 to\nconsist of the actions that can be initially performed by s but do not belong to menu M1 . Then, we show\nthat there must exist a subset Act of Act\u2032 such that the test T = a1 .T1 + \u2211b\u2208Act b.\u03c9 distinguishes between\ns and t (otherwise, we obtain that R(s(M1 ,a1 ) , T1 ) = R(t(M1 ,a1 ) , T1 ), which contradicts our assumption).\nWe now proceed with a detailed presentation of the proof.\nFrom s 6\u2248O t and by Def. 3.4, there must exist a ready-trace (M1 , a1 , . . . Mm ) such that\n\n\fSonja Georgievska and Suzana Andova\n\n107\n\nPsm (Mm |M1 , a1 , . . . am\u22121 ) 6= Ptm (Mm |M1 , a1 , . . . am\u22121 ). The proof is by induction on m.\nCase 1 (m = 1) Suppose first that there exists a menu M such that Ps1 (M) 6= Pt1 (M). Let M be a\nmenu with a minimal possible number of actions such that Ps1 (M) 6= Pt1 (M). Take T = \u2211a6\u2208M a.\u03c9 . We\nhave R(s, T ) = 1 \u2212 \u2211M\u2032 \u2286M Ps1 (M \u2032 ), because the actions of s and T will fail to synchronize if and only if\nthe random choice decides that menu M or some menu M \u2032 \u2282 M is offered to process s initially. Similarly, R(t, T ) = 1 \u2212 \u2211M\u2032 \u2286M Pt1 (M \u2032 ). Now, suppose that R(s, T ) = R(t, T ). We have \u2211M\u2032 \u2286M Ps1 (M \u2032 ) =\n\u2211M\u2032 \u2286M Pt1 (M \u2032 ). From this and Ps1 (M) 6= Pt1 (M), it follows that there exists a menu M \u2032 \u2282 M such that also\nPs1 (M \u2032 ) 6= Pt1 (M \u2032 ). But this contradicts the assumption that M is a menu with a minimal possible number\nof actions such that Ps1 (M) 6= Pt1 (M).\nCase 2 (m > 1) Suppose now that Ps1 (M) = Pt1 (M) for every menu M. Let (M1 , a1 , . . . Mm ) be a\nready-trace such that Psm (Mm |M1 , a1 , . . . am\u22121 ) 6= Ptm (Mm |M1 , a1 , . . . am\u22121 ). From Ps1 (M1 ) = Pt1 (M1 ), and\n(Mm |M2 , a2 , . . . am\u22121 ) 6= Ptm\u22121\n(Mm |M2 , a2 , . . . am\u22121 )\nfrom Definitions 3.2 and 3.3, it follows that Psm\u22121\n(M ,a )\n(M ,a )\n1 1\n\n1 1\n\n(in case m = 2, Ps1(M ,a ) (M2 ) 6= Pt1(M ,a ) (M2 )). Now, by the inductive assumption, there exists a non1 1\n1 1\nprobabilistic test T1 such that R(s(M1 ,a1 ) , T1 ) 6= R(t(M1 ,a1 ) , T1 ).\nCase 2.1 Suppose first that a1 does not belong to any first-level menu of s other than M1 , i.e. that for\nevery menu M, Ps1 (M) > 0 and a1 \u2208 M implies M = M1 . Then the test T = a1 .T1 distinguishes between\ns and t.\nCase 2.2 Suppose now that a1 belongs to at least one first-level menu of s other than M1 , i.e. there\nexists at least one menu M 6= M1 such that Ps1 (M) > 0 and a1 \u2208 M. Without loss of generality, assume that M1 is a menu with a minimal possible number of actions such that Ps1 (M1 ) > 0, a1 \u2208 M1 , and\nR(s(M1 ,a1 ) , T1 ) 6= R(t(M1 ,a1 ) , T1 ). Let {b j } j\u2208J be the set of actions that appear in the first level of s (and\ntherefore t) but not in M1 , i.e. b \u2208 {b j } j\u2208J if and only if b 6\u2208 M1 and there exists a menu M such that\nPs1 (M) > 0, b \u2208 M. We shall prove that there exists J \u2032 \u2286 J such that the test T = a1 .T1 + \u2211 j\u2208J\u2032 b j .\u03c9\ndistinguishes between s and t. More concretely, we shall prove that, assuming the opposite, it follows\nthat R(s(M1 ,a1 ) , T1 ) = R(t(M1 ,a1 ) , T1 ), thus obtaining contradiction.\nCase 2.2.a Suppose first that {b j } j\u2208J = 0.\n/ This means that there are no actions other than those in\nM1 , that appear in the first level of s. Therefore, all menus M for which Ps1 (M) > 0 satisfy M \u2286 M1 . We\nprove that the test T = a1 .T1 distinguishes between s and t. Assume that R(s, T ) = R(t, T ). From the last\nand from Def. 4.1, we obtain\n\n\u2211\n\n(R(s(M,a1 ) , T1 ) \u2212 R(t(M,a1 ) , T1 )) = 0.\n\n(1)\n\nM:Ps1 (M)>0,a1 \u2208M\u2286M1\n\nBy assumption, for every M \u2282 M1 such that a1 \u2208 M it holds R(s(M,a1 ) , T1 ) = R(t(M,a1 ) , T1 ). Therefore,\nfrom (1) we obtain R(s(M1 ,a1 ) , T1 ) = R(t(M1 ,a1 ) , T1 ), which contradicts the assumption R(s(M1 ,a1 ) , T1 ) 6=\nR(t(M1 ,a1 ) , T1 ).\nCase 2.2.b Suppose now that {b j } j\u2208J 6= 0.\n/ Given action bi \u2208 {b j } j\u2208J , denote by Mi the set of all\nfirst-level menus of s that contain bi and a1 , i.e. M \u2208 Mi iff Ps1 (M) > 0 and bi , a1 \u2208 M; denote by MiC\nthe set of all first-level menus of s that do not contain bi but have a1 , i.e. M \u2208 MiC iff Ps1 (M) > 0, bi 6\u2208 M\nand a1 \u2208 M.\n\n\fTesting Reactive Probabilistic Processes\n\n108\nLet T = a1 .T1 + \u2211 j\u2208J\u2032 b j .\u03c9 for\nPs1 (M) = Pt1 (M) for every menu M,\n\nsome J \u2032 = {1, 2, . . . n} \u2286 J and suppose R(s, T ) = R(t, T ). Since\nobserve that only if action a1 is performed initially, it is possible for\nthe test T = a1 .T1 + \u2211 j\u2208J\u2032 b j .\u03c9 to make a difference between s and t. Because of this and by Definitions\n4.1 and 3.2 it follows that\n\n\u2211\n\nC\nM\u2208MnC \u2229Mn\u22121\n\na1 1\nPs (M)\u03c0 (M) +\n\u2211\na\n1\nC\n\u2229***\u2229M\nM\u2208M C \u2229M C\n\nn\u22121 \u2229***\u2229M1\n\nn\n\n1\n\n+\n\na1\nP1 (M)\u03c0 (M) + * * *\na1 + b1 s\n\na1\nPs1 (M)\u03c0 (M) = 0,\nn\nb\na\n+\n\u2211 j=1 j\nM\u2208Mn \u2229***\u2229M1 1\n\n\u2211\n\n(2)\n\nwhere by \u03c0 (M) we denote R(s(M,a1 ) , T1 )\u2212R(t(M,a1 ) , T1 ). Each intersection appearing under the \u2211-operators\nof (2) can be mapped bijectively to a binary number of n digits \u2013 the i-th digit being 0 if the intersection\nC\ncontains Mn+1\u2212i\n, and 1 if the intersection contains Mn+1\u2212i . (For reasons that will become clear later,\nthe order of the indexing is reversed.)\nSuppose R(s, T ) = R(t, T ) for every test T = a1 .T1 + \u2211 j\u2208J\u2032 b j .\u03c9 , where J \u2032 \u2286 J. We shall prove that,\nin this case, every sum \u2211 \u03c0 (M) that appears in (2) when J \u2032 = J is equal to a zero-function. In particular,\nthe equality\n\n\u2211\n\nT\n\nM\u2208\n\n\u03c0 (M) = 0\n\n(3)\n\nC\nj\u2208J M j\n\nwill hold. Note that the set j\u2208J M jC contains all first-level menus of s that have the action a1 but\nT\ndo not have any other action that does not appear in M1 . Therefore, j\u2208J M jC consists of the subsets of M1 that contain a1 . Thus, the equation (3) is equivalent to the equation (1) which leads to\nR(s(M1 ,a1 ) , T1 ) = R(t(M1 ,a1 ) , T1 ), i.e. to contradiction. This would complete the proof of the theorem.\nT\n\nWe now proceed with proving the above stated claim. We prove a more general result, namely that\nfor J \u2032 \u2286 J, under assumption that R(s, T ) = R(t, T ) for every test T = a1 .T1 + \u2211i\u2208J\u2032\u2032 bi .\u03c9 such that J \u2032\u2032 \u2286 J\nand |J \u2032\u2032 | \u2264 |J \u2032 |, it holds that every sum \u2211 \u03c0 (M) that appears in (2) is equal to zero.\nSuppose first that |J \u2032 | = 1, i.e. J \u2032 = {1}. Assume that\nR(s, a1 .T1 ) = R(t, a1 .T1 )\n\n(4)\n\nR(s, a1 .T1 + b1 .\u03c9 ) = R(t, a1 .T1 + b1 .\u03c9 ).\n\n(5)\n\nand\n\nFrom (4), Def. 4.1, and because Ps1 (M) = Pt1 (M) for every menu M, we obtain\na1 1\nP (M)(R(s(M,a1 ) , T1 ) \u2212 R(t(M,a1 ) , T1 )) = 0.\na s\n\u222aM C 1\n\n\u2211\nM\u2208M1\n\n(6)\n\n1\n\nThe equation (2) turns into\na1 1\na1\nPs (M)\u03c0 (M)+ \u2211\nPs1 (M)\u03c0 (M) = 0.\na\na\n+\nb\n1\nM\u2208M1 1\nM\u2208M C 1\n\n\u2211\n\n1\n\n(7)\n\n\fSonja Georgievska and Suzana Andova\n\n109\n\nDenote \u2211M\u2208M C Pa1 (M)\u03c0 (M) by x0 and \u2211M\u2208M1 Pa1 (M)\u03c0 (M) by x1 . Our goal is to show that x0 = 0 and\n1\nx1 = 0, i.e. that they are zero-functions. From (6) and (7) we obtain the system of equations for the\nunknowns x0 and x1\nQ1 x = 0,\nwhere\nQ1 =\n\n\u0012\n\na1\na1\n\na1\na1 +b1\n\n1\n\n1\n\n\u0013\n\n,x =\n\n\u0012\n\nx0\nx1\n\n\u0013\n\n, and 0 =\n\n\u0012\n\n0\n0\n\n\u0013\n\n.\n\nSince the determinant of the matrix Q1 is not a zero-function, it follows that x0 = 0 and x1 = 0 is the only\nsolution of the system.\nTo present a better intuition on the proof in the general case, we shall also consider separately the\ncase |J \u2032 | = 2. Let J \u2032 = {1, 2} and assume that R(s, T ) = R(t, T ) for every test T = a1 .T1 + \u2211i\u2208J\u2032\u2032 bi .\u03c9 such\nthat J \u2032\u2032 \u2286 J and |J \u2032\u2032 | \u2264 |J \u2032 |. The equation (2) turns into\na1\na1 1\nPs (M)\u03c0 (M) +\nPs1 (M)\u03c0 (M)\n\u2211\na\na\n+\nb\n1\nM\u2208M C \u2229M 1\nM\u2208M C \u2229M C 1\n\n\u2211\n2\n\n1\n\n2\n\n1\n\na1\na1\n+\n\u2211 C a1 + b2 Ps1(M)\u03c0 (M) + \u2211 a1 + b1 + b2 Ps1(M)\u03c0 (M) = 0.\nM\u2208M2 \u2229M1\nM\u2208M \u2229M\n2\n\n(8)\n\n1\n\nDenoting \u2211M\u2208M C \u2229M C Ps1 (M)\u03c0 (M) by x00 and so on, (8) turns into\n2\n\n1\n\na1\na1\na1\na1\nx00 +\nx01 +\nx10 +\nx11 = 0.\na1\na1 + b1\na1 + b2\na1 + b1 + b2\n\n(9)\n\nFrom \u2211M\u2208M C Ps1 (M)\u03c0 (M) = 0 we obtain x00 + x01 = 0, and from \u2211M\u2208M2 Ps1 (M)\u03c0 (M) = 0 we obtain\n2\nx10 + x11 = 0. Similarly, from \u2211M\u2208M1 Ps1 (M)\u03c0 (M) = 0 we obtain that x01 + x11 = 0. Therefore, we have\nthe system Q2 x = 0, where\n\uf8eb\n\na1\na1\n\n\uf8ec 1\nQ2 = \uf8ec\n\uf8ed 0\n0\n\na1\na1 +b1\n\na1\na1 +b2\n\na1\na1 +b1 +b2\n\n1\n1\n0\n\n0\n0\n1\n\n0\n1\n1\n\n\uf8f6\n\n\uf8f7\n\uf8f7.\n\uf8f8\n\nBy Lemma 5.1, Det(Q2 ) is not a zero-function, which implies that the vector of zero-functions is the\nonly solution of the above system of equations.\nWe now present how each matrix Qn+1 can be obtained from the matrix Qn .\nIn general, for Mi\u2217 \u2208 {Mi , MiC }, it holds\nM\u2208(\n\nTn\n\n\u2211\n\n\u2217\ni=1 Mi )\u2229Mn+1\n\nPs1 (M)\u03c0 (M) +\nM\u2208(\n\nTn\n\n\u2211\n\nC\n\u2217\ni=1 Mi )\u2229Mn+1\n\nPs1 (M)\u03c0 (M) =\nM\u2208(\n\n\u2211\n\nPs1 (M)\u03c0 (M).\n\n(10)\n\nTn\n\n\u2217\ni=1 Mi )\n\nThis means that, in the general case, each solution xi1 i2 ...in = 0 of the system Qn x = 0 generates the\nfollowing equations for the next system:\nxi1 i2 ...ik 0ik+1 ...in + xi1 i2 ...ik 1ik+1 ...in = 0,\n\n\fTesting Reactive Probabilistic Processes\n\n110\n\nfor every 0 \u2264 k \u2264 n. Note that each row of Q2 , except the first one, contains exactly two 1's, at positions\nwhose binary representations differ in exactly one place.\nj\nInformally, the general algorithm for obtaining the elements qin+1\nof a 2n+1 \u00d7 2n+1 matrix Qn+1 from\nmatrix Qn , assuming Qn is non-singular, is as follows. First, initialize all elements of Qn+1 to zero. Then,\ncopy Qn into the upper left corner of Qn+1 . Then, copy Qn , excluding the first row, into the lower right\nj\nfor i = 2n + 1 and j \u2208 {2n , 2n+1 }. Finally, add the appropriate\ncorner of Qn+1 . Then, assign 1 to qin+1\nnew rational fractions in the second half of the first row of Qn+1 . The key observation is that in this way,\nwe obtain again a matrix such that each row, except the first one, contains exactly two 1's, at positions\nwhose binary representations differ in exactly one place. Formally,\n\uf8f1 ij\n\uf8f4\nqn\nif 1 \u2264 i \u2264 2n and j \u2264 2n ,\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n1\nif i = 2n + 1 and j \u2208 {2n , 2n+1 },\n\uf8f4\n\uf8f4\n\uf8f4\ni\nj\n\uf8f2qn\nif 2n + 1 < i and 2n < j,\nj\nqin+1\n=\n\uf8f4 a +\u2211 a1b +b\nif i = 1, j > 2n ,\n\uf8f4\n1\nn+1\nk\u2208K k\n\uf8f4\n\uf8f4\n(i)( j\u22122n )\n\uf8f4\n\uf8f4\nand qn\n= a1 +\u2211a1 bk\n\uf8f4\n\uf8f4\nk\u2208K\n\uf8f4\n\uf8f3\n0\notherwise.\n\nAssuming matrix Qn satisfies the conditions of Lemma 5.1, it easily follows that matrix Qn+1 also satisfies the conditions of Lemma 5.1. Therefore, its determinant is not a zero function. This means that the\nsystem Qn+1 x = 0 has only zero-functions as solutions, which we were aiming to prove. Therefore, the\nproof of the theorem is complete.\nTheorem 5.3 Let s and t be two processes. If s \u2248O t then s \u2248T t.\nProof Straightforward: see [13].\nFrom Theorems 5.3 and 5.2 the following statements directly follow.\nTheorem 5.4 For arbitrary processes s and t, s \u2248T t if and only if s \u2248O t.\nTheorem 5.5 For arbitrary processes s and t, s 6\u2248T t if and only if there exists a test T without probabilistic transitions such that R(s, T ) 6= R(t, T ).\nRemark It is interesting to note that, while in the non-probabilistic case the may/must testing equivalence can be characterized with the failure equivalence [26], in the probabilistic case we obtain a bit\nfiner characterization. However, this is not unusual in the probabilistic case, due to the \"effect\" of the\nprobabilities \u2013 e.g. the same phenomenon appears also in the fully probabilistic case [27].\n\n6\n\nTesting systems and decidability\n\nIn this section we outline how testing can be applied to systems for which only partial information may\nbe known, and we show that the testing equivalence is decidable for finite systems or up to a certain\ndepth of the systems.\nSo far we have discussed testing \"processes\", i.e. models of systems. In practice, to test a system with\na given test, the probabilistic transitions of the system need not be known. Namely, assume that when\nthe system and the test are ready to synchronize on an action, the test can \"see\" the actions-candidates\n\n\fSonja Georgievska and Suzana Andova\n\n111\n\nfor synchronization. If the system is tested with the test exhausting all possible ways of synchronization\nand sufficiently many times, then the result shall be a set of rational functions without scalars; a standard\nstatistical analysis will give an estimation of the probability distribution over the rational functions. (A\ndetailed description of the procedure is beyond the goals of the current paper.) Two systems would not\nbe distinguished under a given test iff the resulting distributions are the same. The assumption that the\ntest can see the actions-candidates for synchronization, on the other hand, corresponds to the user (e.g. u\nin Fig. 1) being able to see the menu that the machine (e.g. s in Fig. 1) offers. Indeed, this assumption\ndoes not exist in the standard non-probabilistic testing theory [7]. However, in real-life systems this is not\nunusual. Moreover, this assumption is mild with respect to the probabilistic may/must testing approaches\ndiscussed in Sec. 1, where one needs to have insight into the internal structure of the composed system\nin order to determine the possible schedulers.\nFrom Theorem 5.5 it follows that non-probabilistic, i.e. deterministic tests suffice to distinguish\nbetween two processes. Therefore, since the action set is finite, an algorithm for deciding equivalence on\nfinite processes, or up to a certain length, can be easily constructed. Namely, in this case the characteristic\nset of tests of a given length is finite. In case the length of the processes is unknown, the procedure stops\nwhen, for a certain length of the tests, the testing yields result 0 for every test of that length and every\ntested process (meaning that the maximal length of the processes has been exceeded).\nProposition 6.1 There exists an algorithm that decides \u2248T for finite processes.\n\n7\n\nRelated work and conclusion\n\nThere is a plethora of equivalences defined on probabilistic processes in the last two decades (e.g. [3, 5,\n6, 10, 11, 21, 25, 29, 32]). However, we think that closely related to ours are the research reports that face\nthe challenge of allowing unobservability of the internal probabilistic choice, but still not allowing more\nidentifications than the standard must-testing [7,17], if probabilistic choice is treated as a kind of internal\nchoice 5 .\nTesting equivalences in the style of [7] for processes with external choice and internal probabilistic\nchoice, that allow unobservability of the probabilistic choice, i.e. distribution of prefix over probabilistic\nchoice, have been also defined in [1, 2, 25]. Of these, only [2], under certain conditions, equate processes\ns and s\u0304 of Fig. 1. In [2] process states are enriched with labels, and a testing equivalence is defined by\nmeans of schedulers that synchronize with processes on the labels. While in our work processes s and s\u0304\nin Fig. 1 are equivalent, in [2] these two processes can be equated iff the labeling is right.\nProbabilistic equivalences in ready-trace style have been defined in [24] and [16], also for processes\nwhere the internal nondeterminism has been quantified with probabilities. However, in contrast to our\napproach, these definitions do not imply testing scenarios that can characterize the equivalences, as the\none given in [15] for the non-probabilistic ready-trace equivalence.\nOther equivalences, that also allow distributivity of prefix over probabilistic choice, but are not\nclosely related to ours, include trace-style equivalences ( [3, 4, 11, 29, 31]) and button-pushing testing\nequivalences ( [20], [23]). Of these, only [31], [11] and [23] also allow distribution of external choice\nover probabilistic choice. However, in these approaches the environment is not a process itself, but\nrather a sequence of actions. In other words, their motivation does not include sensitivity to deadlock\n5 See [15] for the properties that the must-testing equivalence preserves, but are not preserved by a (completed) trace equivalence.\n\n\f112\n\nTesting Reactive Probabilistic Processes\n\nand branching structure \u2013 e.g. they also identify processes c.a \u2295 1 c.b and c.(a + b) \u2295 1 c (\"+\" being the\n2\n2\noperator for external choice).\nThe present paper is also related to the newer research in [2, 4, 14], in the sense that it restricts the\npower of the schedulers that resolve the nondeterminism in a parallel composition. Contrary to [2, 4, 14],\nthe \"schedulers\" in the present paper do not use information about the state in which a process is. We\nbelieve that this approach is more appropriate when defining a testing equivalence on processes, as it is\ncloser in nature to the work in [7].\nFinally, so far, none of the proposals of testing equivalences in the style of [7] for probabilistic\nprocesses having \"external nondeterminism\" deal with the problem of deciding equivalence based on\nthe testing semantics itself. We refer the reader also to [33] for a survey of the testing equivalences on\nprobabilistic processes and decidability results.\nTo conclude, we have proposed a testing equivalence in the style of [7] for processes where the internal nondeterminism is quantified with probabilities (e.g. [21,23]). We showed that it can be characterized\nas a probabilistic ready-trace equivalence. From the characterization it follows that: (i) the testing equivalence is insensitive to the exact moment of occurrence of an internal probabilistic choice, (ii) it equates\nno more processes than the equivalence of [7] when probabilities are not treated, and (iii) a decidability\nprocedure exists for determining if two finite processes are testing equivalent, or if two infinite processes\nare testing equivalent up to a certain depth. Moreover, the testing semantics provides a way to compute\nthe testing outcomes in practice, without requiring access to the internal structure of the system other\nthan the actions-candidates for synchronization between the system and the test. To our knowledge, this\nis the first equivalence that accomplishes all of the above stated goals.\nAcknowledgements We are grateful to Jos Baeten, Erik de Vink, Manuel N\u00fa\u00f1ez, and the anonymous\nreviewers for their valuable comments on a draft version of this paper.\n\nReferences\n[1] D. Cazorla, F. Cuartero, V. Valero, F. L. Pelayo & J. J. Pardo (2003): Algebraic theory of probabilistic and\nnondeterministic processes. Journal of Logic and Algebraic Programming 55(1-2), pp. 57\u2013103.\n[2] K. Chatzikokolakis & C. Palamidessi (2007): Making Random Choices Invisible to the Scheduler. In: Proc.\nCONCUR 2007, LNCS 4703, pp. 42\u201358.\n[3] L. Cheug, M. I. A. Stoelinga & F. W. Vaandrager (2007): A testing scenario for probabilistic processes.\nJournal of the ACM 54(6), pp. 29:1\u201329:45.\n[4] L. Cheung, N. Lynch, R. Segala & F. Vaandrager (2006): Switched PIOA: Parallel composition via distributed\nscheduling. Theoret. Comp. Science 365(1-2), pp. 83\u2013108.\n[5] I. Christoff (1990): Testing Equivalences and fully abstract models for Probabilistic Processes. In: Proc.\nCONCUR'90, LNCS 458, pp. 126\u2013140.\n[6] R. Cleaveland, Z. Dayar, S.A. Smolka & S. Yuen (1999): Testing Preorders for Probabilistic Processes.\nInformation and Computation 154(2), pp. 93\u2013148.\n[7] R. De Nicola & M.C.B. Hennessy (1984): Testing Equivalences for Processes. Theoret. Comp. Science 34,\npp. 83\u2013133.\n[8] Y. Deng, R. J. van Glabbeek, M. Hennessy & C. Morgan (2008): Characterising Testing Preorders for Finite\nProbabilistic Processes. Logical Methods in Computer Science 4(4:4), pp. 1\u201333.\n[9] Yuxin Deng, Rob van Glabbeek, Matthew Hennessy & Carroll Morgan (2009): Testing Finitary Probabilistic\nProcesses (Extended Abstract). In: proc. CONCUR'09, LNCS 5710, pp. 274\u2013288.\n\n\fSonja Georgievska and Suzana Andova\n\n113\n\n[10] J. Desharnais, F. Laviolette & S. Zhioua (2006): Testing Probabilistic Equivalence Through Reinforcement\nLearning. In: FSTTCS 2006, LNCS 4337, pp. 236\u2013247.\n[11] Laurent Doyen, Thomas A. Henzinger & Jean-Fran\u00e7ois Raskin (2008): Equivalence of Labeled Markov\nChains. Int. J. Found. Comput. Sci. 19(3), pp. 549\u2013563.\n[12] Sonja Georgievska & Suzana Andova (2010): Retaining the probabilities in probabilistic testing theory. In:\nproc. FoSSaCS 2010, LNCS 6014, pp. 79\u201393.\n[13] Sonja Georgievska & Suzana Andova (2010): Testing Reactive Probabilistic Processes. Technical report,\navailable via http://www.win.tue.nl/~sgeorgie/qapl10_report.pdf.\n[14] Sergio Giro & P. R. D'Argenio (2009): On the Expressive Power of Schedulers in Distributed Probabilistic\nSystems. ENTCS 253(3), pp. 45\u201371.\n[15] R.J. van Glabbeek (2001): The Linear Time \u2013 Branching Time Spectrum I; The Semantics of Concrete,\nSequential Processes. In: Handbook of Process Algebra, chapter 1, Elsevier, pp. 3\u201399.\n[16] \"F. C. Gomez, D. De Frutos Escrig & V. V. Ruiz\" (1997): A Sound and Complete Proof System for Probabilistic Processes. LNCS 1231, pp. 340\u2013352.\n[17] M. Hennessy (1988): Algebraic Theory of Processes. MIT Press.\n[18] C.A.R. Hoare (1985): Communicating Sequential Processes. Prentice Hall.\n[19] B. Jonsson & Y. Wang (2002): Testing preorders for probabilistic processes can be characterized by simulations. Theoret. Comp. Science 282(1), pp. 33\u201351.\n[20] M. Kwiatkowska & G. Norman (1998): A Testing Equivalence for Reactive Probabilistic Processes. ENTCS\n16(2).\n[21] K.G. Larsen & A. Skou (1991): Bisimulation through probabilistic testing. Information and Computation\n94, pp. 1\u201328.\n[22] D. V. Lindley (1980): Introduction to Probability and Statistics from a Bayesian Viewpoint. Cambridge\nUniversity Press.\n[23] N. L\u00f3pez, M. N\u00fa\u00f1ez & I. Rodr\u0131\u0301guez (2006): Specification, testing and implementation relations for symbolicprobabilistic systems. Theoret. Comp. Science 353(1), pp. 228\u2013248.\n[24] G. Lowe (1993): Representing Nondeterministic and Probabilistic Behaviour in Reactive Processes. Technical Report PRG-TR-11-93, Oxford Univ. Comp. Labs.\n[25] C. Morgan, A. McIver, K. Seidel & J. W. Sanders (1996): Refinement-Oriented Probability for CSP. Formal\nAspects of Computing 8(6), pp. 617\u2013647.\n[26] R. De Nicola (1987): Extensional equivalences for transition systems. Acta Informatica 24(2), pp. 211\u2013237.\n[27] M. N\u00fa\u00f1ez (2003): Algebraic theory of probabilistic processes. Journal of Logic and Algebraic Programming\n56(1-2), pp. 117 \u2013 177.\n[28] M. C. Palmeri, R. De Nicola & M. Massink (2007): Basic Observables for Probabilistic May Testing. In:\nQEST '07, IEEE, pp. 189\u2013200.\n[29] R. Segala (1995): Modeling and verification of randomized distributed real-time systems. Ph.D. thesis, MIT.\n[30] R. Segala (1996): Testing Probabilistic Automata. In: Proc. CONCUR '96, LNCS 1119, pp. 299\u2013314.\n[31] K. Seidel (1995): Probabilistic communicating processes. Theoret. Comp. Science 152, pp. 219\u2013249.\n[32] Y. Wang & K. G. Larsen (1992): Testing Probabilistic and Nondeterministic Processes. In: Proceedings of\nthe IFIP TC6/WG6.1 Twelth International Symposium on Protocol Specification, Testing and Verification\nXII, pp. 47\u201361.\n[33] V. Wolf (2005): Testing Theory for Probabilistic Systems. In: Model-Based Testing of Reactive Systems,\nLNCS 3472, pp. 233\u2013275.\n\n\f"}