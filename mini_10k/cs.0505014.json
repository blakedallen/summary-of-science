{"id": "http://arxiv.org/abs/cs/0505014v1", "guidislink": true, "updated": "2005-05-06T13:57:13Z", "updated_parsed": [2005, 5, 6, 13, 57, 13, 4, 126, 0], "published": "2005-05-06T13:57:13Z", "published_parsed": [2005, 5, 6, 13, 57, 13, 4, 126, 0], "title": "Interval Neutrosophic Sets and Logic: Theory and Applications in\n  Computing", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0505005%2Ccs%2F0505078%2Ccs%2F0505070%2Ccs%2F0505068%2Ccs%2F0505024%2Ccs%2F0505011%2Ccs%2F0505086%2Ccs%2F0505028%2Ccs%2F0505065%2Ccs%2F0505018%2Ccs%2F0505027%2Ccs%2F0505066%2Ccs%2F0505064%2Ccs%2F0505072%2Ccs%2F0505032%2Ccs%2F0505033%2Ccs%2F0505077%2Ccs%2F0505019%2Ccs%2F0505002%2Ccs%2F0505041%2Ccs%2F0505060%2Ccs%2F0505053%2Ccs%2F0505008%2Ccs%2F0505075%2Ccs%2F0505071%2Ccs%2F0505074%2Ccs%2F0505050%2Ccs%2F0505040%2Ccs%2F0505010%2Ccs%2F0505080%2Ccs%2F0505014%2Ccs%2F0505067%2Ccs%2F0505059%2Ccs%2F0505069%2Ccs%2F0505013%2Ccs%2F0505046%2Ccs%2F0505035%2Ccs%2F0505082%2Ccs%2F0505020%2Ccs%2F0505056%2Ccs%2F0505025%2Ccs%2F0505084%2Ccs%2F0109020%2Ccs%2F0109086%2Ccs%2F0109018%2Ccs%2F0109037%2Ccs%2F0109027%2Ccs%2F0109049%2Ccs%2F0109115%2Ccs%2F0109072%2Ccs%2F0109026%2Ccs%2F0109108%2Ccs%2F0109033%2Ccs%2F0109023%2Ccs%2F0109012%2Ccs%2F0109017%2Ccs%2F0109100%2Ccs%2F0109001%2Ccs%2F0109087%2Ccs%2F0109063%2Ccs%2F0109080%2Ccs%2F0109003%2Ccs%2F0109114%2Ccs%2F0109092%2Ccs%2F0109011%2Ccs%2F0109102%2Ccs%2F0109060%2Ccs%2F0109083%2Ccs%2F0109098%2Ccs%2F0109082%2Ccs%2F0109041%2Ccs%2F0109057%2Ccs%2F0109094%2Ccs%2F0109014%2Ccs%2F0109062%2Ccs%2F0109106%2Ccs%2F0109022%2Ccs%2F0109089%2Ccs%2F0109039%2Ccs%2F0109038%2Ccs%2F0109047%2Ccs%2F0109105%2Ccs%2F0109006%2Ccs%2F0109111%2Ccs%2F0109067%2Ccs%2F0109046%2Ccs%2F0109085%2Ccs%2F0109099%2Ccs%2F0109081%2Ccs%2F0109064%2Ccs%2F0109095%2Ccs%2F0109076%2Ccs%2F0109059%2Ccs%2F0109029%2Ccs%2F0109078%2Ccs%2F0109110%2Ccs%2F0109019%2Ccs%2F0109107%2Ccs%2F0109084%2Ccs%2F0109042%2Ccs%2F0109044&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Interval Neutrosophic Sets and Logic: Theory and Applications in\n  Computing"}, "summary": "This book presents the advancements and applications of neutrosophics.\nChapter 1 first introduces the interval neutrosophic sets which is an instance\nof neutrosophic sets. In this chapter, the definition of interval neutrosophic\nsets and set-theoretic operators are given and various properties of interval\nneutrosophic set are proved. Chapter 2 defines the interval neutrosophic logic\nbased on interval neutrosophic sets including the syntax and semantics of first\norder interval neutrosophic propositional logic and first order interval\nneutrosophic predicate logic. The interval neutrosophic logic can reason and\nmodel fuzzy, incomplete and inconsistent information. In this chapter, we also\ndesign an interval neutrosophic inference system based on first order interval\nneutrosophic predicate logic. The interval neutrosophic inference system can be\napplied to decision making. Chapter 3 gives one application of interval\nneutrosophic sets and logic in the field of relational databases. Neutrosophic\ndata model is the generalization of fuzzy data model and paraconsistent data\nmodel. Here, we generalize various set-theoretic and relation-theoretic\noperations of fuzzy data model to neutrosophic data model. Chapter 4 gives\nanother application of interval neutrosophic logic. A soft semantic Web\nServices agent framework is proposed to faciliate the registration and\ndiscovery of high quality semantic Web Services agent. The intelligent\ninference engine module of soft Semantic Web Services agent is implemented\nusing interval neutrosophic logic.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0505005%2Ccs%2F0505078%2Ccs%2F0505070%2Ccs%2F0505068%2Ccs%2F0505024%2Ccs%2F0505011%2Ccs%2F0505086%2Ccs%2F0505028%2Ccs%2F0505065%2Ccs%2F0505018%2Ccs%2F0505027%2Ccs%2F0505066%2Ccs%2F0505064%2Ccs%2F0505072%2Ccs%2F0505032%2Ccs%2F0505033%2Ccs%2F0505077%2Ccs%2F0505019%2Ccs%2F0505002%2Ccs%2F0505041%2Ccs%2F0505060%2Ccs%2F0505053%2Ccs%2F0505008%2Ccs%2F0505075%2Ccs%2F0505071%2Ccs%2F0505074%2Ccs%2F0505050%2Ccs%2F0505040%2Ccs%2F0505010%2Ccs%2F0505080%2Ccs%2F0505014%2Ccs%2F0505067%2Ccs%2F0505059%2Ccs%2F0505069%2Ccs%2F0505013%2Ccs%2F0505046%2Ccs%2F0505035%2Ccs%2F0505082%2Ccs%2F0505020%2Ccs%2F0505056%2Ccs%2F0505025%2Ccs%2F0505084%2Ccs%2F0109020%2Ccs%2F0109086%2Ccs%2F0109018%2Ccs%2F0109037%2Ccs%2F0109027%2Ccs%2F0109049%2Ccs%2F0109115%2Ccs%2F0109072%2Ccs%2F0109026%2Ccs%2F0109108%2Ccs%2F0109033%2Ccs%2F0109023%2Ccs%2F0109012%2Ccs%2F0109017%2Ccs%2F0109100%2Ccs%2F0109001%2Ccs%2F0109087%2Ccs%2F0109063%2Ccs%2F0109080%2Ccs%2F0109003%2Ccs%2F0109114%2Ccs%2F0109092%2Ccs%2F0109011%2Ccs%2F0109102%2Ccs%2F0109060%2Ccs%2F0109083%2Ccs%2F0109098%2Ccs%2F0109082%2Ccs%2F0109041%2Ccs%2F0109057%2Ccs%2F0109094%2Ccs%2F0109014%2Ccs%2F0109062%2Ccs%2F0109106%2Ccs%2F0109022%2Ccs%2F0109089%2Ccs%2F0109039%2Ccs%2F0109038%2Ccs%2F0109047%2Ccs%2F0109105%2Ccs%2F0109006%2Ccs%2F0109111%2Ccs%2F0109067%2Ccs%2F0109046%2Ccs%2F0109085%2Ccs%2F0109099%2Ccs%2F0109081%2Ccs%2F0109064%2Ccs%2F0109095%2Ccs%2F0109076%2Ccs%2F0109059%2Ccs%2F0109029%2Ccs%2F0109078%2Ccs%2F0109110%2Ccs%2F0109019%2Ccs%2F0109107%2Ccs%2F0109084%2Ccs%2F0109042%2Ccs%2F0109044&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "This book presents the advancements and applications of neutrosophics.\nChapter 1 first introduces the interval neutrosophic sets which is an instance\nof neutrosophic sets. In this chapter, the definition of interval neutrosophic\nsets and set-theoretic operators are given and various properties of interval\nneutrosophic set are proved. Chapter 2 defines the interval neutrosophic logic\nbased on interval neutrosophic sets including the syntax and semantics of first\norder interval neutrosophic propositional logic and first order interval\nneutrosophic predicate logic. The interval neutrosophic logic can reason and\nmodel fuzzy, incomplete and inconsistent information. In this chapter, we also\ndesign an interval neutrosophic inference system based on first order interval\nneutrosophic predicate logic. The interval neutrosophic inference system can be\napplied to decision making. Chapter 3 gives one application of interval\nneutrosophic sets and logic in the field of relational databases. Neutrosophic\ndata model is the generalization of fuzzy data model and paraconsistent data\nmodel. Here, we generalize various set-theoretic and relation-theoretic\noperations of fuzzy data model to neutrosophic data model. Chapter 4 gives\nanother application of interval neutrosophic logic. A soft semantic Web\nServices agent framework is proposed to faciliate the registration and\ndiscovery of high quality semantic Web Services agent. The intelligent\ninference engine module of soft Semantic Web Services agent is implemented\nusing interval neutrosophic logic."}, "authors": ["Haibin Wang", "Florentin Smarandache", "Yan-Qing Zhang", "Rajshekhar Sunderraman"], "author_detail": {"name": "Rajshekhar Sunderraman"}, "author": "Rajshekhar Sunderraman", "arxiv_comment": "12 figures, 100 pages, book in press", "links": [{"href": "http://arxiv.org/abs/cs/0505014v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cs/0505014v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cs/0505014v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/cs/0505014v1", "journal_reference": null, "doi": null, "fulltext": "arXiv:cs/0505014v1 [cs.LO] 6 May 2005\n\nHaibin Wang\nFlorentin Smarandache\nYan-Qing Zhang\nRajshekhar Sunderraman\n\nInterval Neutrosophic Sets and Logic:\nTheory and Applications in Computing\n\nNeutrosophication\ntruth-membership\nfunction\n\nInput\n\nindeterminacymembership\nfunction\n\nfalsity-membership\nfunction\n\nNeutrosophic\nInference\n\nCrisp Output\nNeutrosophic\nType Reduction\n\nDeneutrosophication\n\nNeutrosophic\nRule Base\n\n2005\n\n\fInterval Neutrosophic Sets and Logic:\nTheory and Applications in Computing\n\nHaibin Wang1\nFlorentin Smarandache2\nYan-Qing Zhang1\nRajshekhar Sunderraman1\n1 Department\n\nof Computer Science\nGeorgia State University\nAtlanta, GA 30302, USA\n\n2 Department\n\nof Mathematics and Science\nUniversity of New Mexico\nGallup, NM 87301, USA\n\n\fPeer Reviewers: This book has been peer reviewed and recommended for publication by:\nDr. Albena Tchamova, Bulgarian Academy of Sciences, Sofia, Bulgaria.\nDr. W. B. Vasantha Kandasamy, Indian Institute of Technology Madras, Chennay, India.\nDr. Feijun Song, Florida Atlantic University, Dania, USA.\nDr. Xiaohong Yuan, North Carolina A & T State University, Greensboro, USA\n\nMany books can be downloaded from the following E-Library of Science:\nhttp://www.gallup.unm.edu/\u223csmarandache/eBooks-otherformats.htm\n\n\f4\n\n\fContents\n1 Interval Neutrosophic Sets\n1.1 Introduction . . . . . . . . . . . . . . .\n1.2 Neutrosophic Set . . . . . . . . . . . .\n1.3 Interval Neutrosophic Set . . . . . . .\n1.4 Properties of Set-theoretic Operators .\n1.5 Convexity of Interval Neutrosophic Set\n1.6 Conclusions . . . . . . . . . . . . . . .\n1.7 Appendix . . . . . . . . . . . . . . . .\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n1\n1\n4\n6\n14\n15\n16\n16\n\n2 Interval Neutrosophic Logic\n2.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n2.2 Interval Neutrosophic Propositional Calculus . . . . . . . . . . . . .\n2.2.1 Syntax of Interval Neutrosophic Propositional Calculus . . .\n2.2.2 Semantics of Interval Neutrosophic Propositional Calculus . .\n2.2.3 Proof Theory of Interval Neutrosophic Propositional Calculus\n2.3 Interval Neutrosophic Predicate Calculus . . . . . . . . . . . . . . .\n2.3.1 Syntax of Interval Neutrosophic Predicate Calculus . . . . . .\n2.3.2 Semantics of Interval Neutrosophic Predicate Calculus . . . .\n2.3.3 Proof Theory of Interval Neutrosophic Predicate Calculus . .\n2.4 An Application of Interval Neutrosophic Logic . . . . . . . . . . . .\n2.5 Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n21\n21\n23\n23\n24\n25\n27\n27\n29\n30\n32\n38\n\n.\n.\n.\n.\n.\n.\n\n39\n39\n42\n42\n43\n43\n47\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n3 Neutrosophic Relational Data Model\n3.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . .\n3.2 Fuzzy Relations and Operations . . . . . . . . . . . . . .\n3.2.1 Set-theoretic operations on Fuzzy relations . . .\n3.2.2 Relation-theoretic operations on Fuzzy relations\n3.3 Neutrosophic Relations . . . . . . . . . . . . . . . . . . .\n3.4 Generalized Algebra on Neutrosophic Relations . . . . .\ni\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n\n\fii\n\nCONTENTS\n3.5\n3.6\n3.7\n\n3.8\n\nAn Application . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nAn Infinite-Valued Tuple Relational Calculus . . . . . . . . . . .\n3.6.1 An Example . . . . . . . . . . . . . . . . . . . . . . . . .\nA Generalized SQL Query Construct for Neutrosophic Relations\n3.7.1 Infinite-Valued Conditions . . . . . . . . . . . . . . . . . .\n3.7.2 An Example . . . . . . . . . . . . . . . . . . . . . . . . .\nConclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n4 Soft Semantic Web Services Agent\n4.1 Introduction . . . . . . . . . . . . . . . . . . .\n4.2 Background . . . . . . . . . . . . . . . . . . .\n4.2.1 Traditional Web services . . . . . . . .\n4.2.2 Semantic Web . . . . . . . . . . . . .\n4.2.3 Semantic Web Services . . . . . . . . .\n4.2.4 Soft Computing Methodology . . . . .\n4.2.5 QoS Model . . . . . . . . . . . . . . .\n4.3 Architecture of Extensible Soft SWS Agent .\n4.3.1 Registries Crawler . . . . . . . . . . .\n4.3.2 SWS Repository . . . . . . . . . . . .\n4.3.3 Inquiry Server . . . . . . . . . . . . .\n4.3.4 Publish Server . . . . . . . . . . . . .\n4.3.5 Agent Communication Server . . . . .\n4.3.6 Intelligent Inference Engine . . . . . .\n4.3.7 Design of Intelligent Inference Engine\n4.3.8 Input neutrosophic sets . . . . . . . .\n4.3.9 Neutrosophic rule bases . . . . . . . .\n4.3.10 Design of deneutrosophication . . . . .\n4.3.11 Genetic algorithms . . . . . . . . . . .\n4.3.12 Simulations . . . . . . . . . . . . . . .\n4.4 Related Work . . . . . . . . . . . . . . . . . .\n4.5 Conclusions . . . . . . . . . . . . . . . . . . .\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n51\n54\n57\n58\n59\n62\n63\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n65\n65\n67\n67\n68\n68\n68\n69\n69\n70\n71\n72\n73\n74\n74\n75\n76\n76\n76\n76\n78\n78\n79\n\n\fChapter 1\n\nInterval Neutrosophic Sets\nA neutrosophic set is a part of neutrosophy that studies the origin, nature, and scope of neutralities, as well as their\ninteractions with different ideational spectra. The neutrosophic set is a powerful general formal framework that has\nbeen recently proposed. However, the neutrosophic set needs to be specified from a technical point of view. Now\nwe define the set-theoretic operators on an instance of a neutrosophic set, and call it an Interval Neutrosophic Set\n(INS). We prove various properties of INS, which are connected to operations and relations over INS. Finally, we\nintroduce and prove the convexity of interval neutrosophic sets.\n\n1.1\n\nIntroduction\n\nThe concept of fuzzy sets was introduced by Zadeh in 1965 [Zad65b]. Since then fuzzy sets and fuzzy\nlogic have been applied in many real applications to handle uncertainty. The traditional fuzzy set uses\none real number \u03bcA (x) \u2208 [0, 1] to represent the grade of membership of fuzzy set A defined on universe\nX. Sometimes \u03bcA (x) itself is uncertain and hard to be defined by a crisp value. So the concept of interval\nvalued fuzzy sets was proposed [Tur86] to capture the uncertainty of grade of membership. Interval valued\nU\nL\nU\nfuzzy set uses an interval value [\u03bcL\nA (x), \u03bcA (x)] with 0 \u2264 \u03bcA (x) \u2264 \u03bcA (x) \u2264 1 to represent the grade of\nmembership of fuzzy set A. In some applications such as expert system, belief system and information\nfusion, we should consider not only the truth-membership supported by the evidence but also the falsitymembership against by the evidence. That is beyond the scope of fuzzy sets and interval valued fuzzy\nsets. In 1986, Atanassov introduced the intuitionistic fuzzy sets [Ata86] that is a generalization of fuzzy\nsets and provably equivalent to interval valued fuzzy sets. The intuitionistic fuzzy sets consider both\ntruth-membership and falsity-membership. Later on, intuitionistic fuzzy sets were extended to the interval\nvalued intuitionistic fuzzy sets [Ata89]. The interval valued intuitionistic fuzzy set uses a pair of intervals\n[t\u2212 , t+ ], 0 \u2264 t\u2212 \u2264 t+ \u2264 1 and [f \u2212 , f + ], 0 \u2264 f \u2212 \u2264 f + \u2264 1 with t+ + f + \u2264 1 to describe the degree of true\nbelief and false belief. Because of the restriction that t+ + f + \u2264 1, intuitionistic fuzzy sets and interval\nvalued intuitionistic fuzzy sets can only handle incomplete information not the indeterminate information\nand inconsistent information which exists commonly in belief systems. For example, when we ask the\n1\n\n\f2\n\nCHAPTER 1. INTERVAL NEUTROSOPHIC SETS\n\nopinion of an expert about certain statement, he or she may say that the possibility that the statement is\ntrue is between 0.5 and 0.7 and the statement is false is between 0.2 and 0.4 and the degree that he or she\nis not sure is between 0.1 and 0.3. Here is another example, suppose there are 10 voters during a voting\nprocess. In time t1 , three vote \"yes\", two vote \"no\" and five are undecided, using neutrosophic notation,\nit can be expressed as x(0.3, 0.5, 0.2). In time t2 , three vote \"yes\", two vote \"no\", two give up and three\nare undecided, it then can be expressed as x(0.3, 0.3, 02). That is beyond the scope of the intuitionistic\nfuzzy set. So, the notion of neutrosophic set is more general and overcomes the aforementioned issues.\nIn neutrosophic set, indeterminacy is quantified explicitly and\ntruth-membership, indeterminacy-membership and falsity-membership are independent. This assumption\nis very important in many applications such as information fusion in which we try to combine the data\nfrom different sensors. Neutrosophy was introduced by Florentin Smarandache in 1980. \"It is a branch\nof philosophy which studies the origin, nature and scope of neutralities, as well as their interactions with\ndifferent ideational spectra\" [Sma99]. Neutrosophic set is a powerful general formal framework which\ngeneralizes the concept of the classic set, fuzzy set [Zad65b], interval valued fuzzy set [Tur86], intuitionistic\nfuzzy set [Ata86], interval valued intuitionistic fuzzy set [Ata89], paraconsistent set [Sma99], dialetheist\nset [Sma99], paradoxist set [Sma99], tautological set [Sma99]. A neutrosophic set A defined on universe U .\nx = x(T, I, F ) \u2208 A with T, I and F being the real standard or non-standard subsets of ]0\u2212 , 1+ [. T is the\ndegree of truth-membership function in the set A, I is the degree of indeterminacy-membership function\nin the set A and F is the degree of falsity-membership function in the set A.\nThe neutrosophic set generalizes the above mentioned sets from philosophical point of view. From\nscientific or engineering point of view, the neutrosophic set and set-theoretic operators need to be specified.\nOtherwise, it will be difficult to apply in the real applications. In this chapter, we define the set-theoretic\noperators on an instance of neutrosophic set called Interval Neutrosophic Set (INS). We call it as \"interval\"\nbecause it is subclass of neutrosophic set, that is we only consider the subunitary interval of [0, 1].\nAn interval neutrosophic set A defined on universe X, x = x(T, I, F ) \u2208 A with T , I and F being\nthe subinterval of [0, 1]. The interval neutrosophic set can represent uncertain, imprecise, incomplete and\ninconsistent information which exist in real world. The interval neutrosophic set generalizes the following\nsets:\n1. the classical set, I = \u2205, inf T = sup T = 0 or 1, inf F = sup F = 0 or 1 and sup T + sup F = 1.\n2. the fuzzy set, I = \u2205, inf T = sup T \u2208 [0, 1], inf F = sup F \u2208 [0, 1] and sup T + sup F = 1.\n3. the interval valued fuzzy set, I = \u2205, inf T, sup T, inf F, sup F \u2208 [0, 1], sup T + inf F = 1 and inf T +\nsup F = 1.\n4. the intuitionistic fuzzy set, I = \u2205, inf T = sup T \u2208 [0, 1], inf F = sup F \u2208 [0, 1] and sup T + sup F \u2264 1.\n5. the interval valued intuitionistic fuzzy set, I = \u2205, inf T, sup T, inf F, sup F \u2208 [0, 1] and sup T +sup F \u2264\n1.\n6. the paraconsistent set, I = \u2205, inf T = sup T \u2208 [0, 1], inf F = sup F \u2208 [0, 1] and sup T + sup F > 1.\n\n\f3\n\n1.1. INTRODUCTION\n7. the interval valued paraconsistent set, I = \u2205, inf T, sup T, inf F, sup F \u2208 [0, 1] and inf T + inf F > 1.\nThe relationship among interval neutrosophic set and other sets is illustrated in Fig 1.1.\nneutrosophic set\n\ninterval neutrosophic set\n\ninterval valued intuitionistic\nfuzzy set\n\n(intuitionistic fuzzy set)\ninterval valued fuzzy set\n\ninterval valued\nparaconsistent set\n\nparaconsistent set\n\nfuzzy set\n\nclassic set\n\nFigure 1.1: Relationship among interval neutrosophic set and other sets\nNote that \u2192 in Fig. 1.1 such as a \u2192 b means that b is a generalization of a.\nWe define the set-theoretic operators on the interval neutrosophic set. Various properties of INS are\nproved, which are connected to the operations and relations over INS.\nThe rest of chapter is organized as follows. Section 1.2 gives a brief overview of the neutrosophic set.\nSection 1.3 gives the definition of the interval neutrosophic set and set-theoretic operations. Section 1.4\npresents some properties of set-theoretic operations. Section 1.5 defines the convexity of the interval\nneutrosophic sets and proves some properties of convexity. Section 1.6 concludes the chapter. To maintain\na smooth flow throughout the chapter, we present the proofs to all theorems in Appendix.\n\n\f4\n\n1.2\n\nCHAPTER 1. INTERVAL NEUTROSOPHIC SETS\n\nNeutrosophic Set\n\nThis section gives a brief overview of concepts of neutrosophic set defined in [Sma99]. Here, we use\ndifferent notations to express the same meaning. Let S1 and S2 be two real standard or non-standard\nsubsets, then S1 \u2295 S2 = {x|x = s1 + s2 , s1 \u2208 S1 and s2 \u2208 S2 }, {1+ } \u2295 S2 = {x|x = 1+ + s2 , s2 \u2208 S2 }.\nS1 \u2296 S2 = {x|x = s1 \u2212 s2 , s1 \u2208 S1 and s2 \u2208 S2 }, {1+ } \u2296 S2 = {x|x = 1+ \u2212 s2 , s2 \u2208 S2 }. S1 \u2299 S2 = {x|x =\ns1 * s2 , s1 \u2208 S1 and s2 \u2208 S2 }.\nDefinition 1 (Neutrosophic Set) Let X be a space of points (objects), with a generic element in X\ndenoted by x.\nA neutrosophic set A in X is characterized by a truth-membership function TA , a indeterminacy-membership\nfunction IA and a falsity-membership function FA . TA (x), IA (x) and FA (x) are real standard or nonstandard subsets of ]0\u2212 , 1+ [. That is\nTA : X \u2192 ]0\u2212 , 1+ [,\n\n(1.1)\n\n\u2212\n\n+\n\n(1.2)\n\n\u2212\n\n+\n\n(1.3)\n\nIA : X \u2192 ]0 , 1 [,\nFA : X \u2192 ]0 , 1 [.\n\nThere is no restriction on the sum of TA (x), IA (x) and FA (x), so 0\u2212 \u2264 sup TA (x) + sup IA (x) +\nsup FA (x) \u2264 3+ .\nDefinition 2 The complement of a neutrosophic set A is denoted by \u0100 and is defined by\nT\u0100 (x) = {1+ } \u2296 TA (x),\n\n(1.4)\n\n+\n\n(1.5)\n\n+\n\n(1.6)\n\nI\u0100 (x) = {1 } \u2296 IA (x),\nF\u0100 (x) = {1 } \u2296 FA (x),\nfor all x in X.\n\nDefinition 3 (Containment) A neutrosophic set A is contained in the other neutrosophic set B, A \u2286 B,\nif and only if\n\nfor all x in X.\n\ninf TA (x) \u2264 inf TB (x) , sup TA (x) \u2264 sup TB (x),\n\n(1.7)\n\ninf IA (x) \u2265 inf IB (x) , sup IA (x) \u2265 sup IB (x),\n\n(1.8)\n\ninf FA (x) \u2265 inf FB (x) , sup FA (x) \u2265 sup FB (x),\n\n(1.9)\n\n\f5\n\n1.2. NEUTROSOPHIC SET\n\nDefinition 4 (Union) The union of two neutrosophic sets A and B is a neutrosophic set C, written\nas C = A \u222a B, whose truth-membership, indeterminacy-membership and falsity-membership functions are\nrelated to those of A and B by\n\nTC (x) = TA (x) \u2295 TB (x) \u2296 TA (x) \u2299 TB (x),\n\n(1.10)\n\nIC (x) = IA (x) \u2295 IB (x) \u2296 IA (x) \u2299 IB (x),\n\n(1.11)\n\nFC (x) = FA (x) \u2295 FB (x) \u2296 FA (x) \u2299 FB (x),\n\n(1.12)\n\nfor all x in X.\nDefinition 5 (Intersection) The intersection of two neutrosophic sets A and B is a neutrosophic set\nC, written as C = A \u2229 B, whose truth-membership, indeterminacy-membership and falsity-membership\nfunctions are related to those of A and B by\n\nTC (x) = TA (x) \u2299 TB (x),\n\n(1.13)\n\nIC (x) = IA (x) \u2299 IB (x),\n\n(1.14)\n\nFC (x) = FA (x) \u2299 FB (x),\n\n(1.15)\n\nfor all x in X.\nDefinition 6 (Difference) The difference of two neutrosophic sets A and B is a neutrosophic set C, written as C = A \\ B, whose truth-membership, indeterminacy-membership and falsity-membership functions\nare related to those of A and B by\n\nTC (x) = TA (x) \u2296 TA (x) \u2299 TB (x),\n\n(1.16)\n\nIC (x) = IA (x) \u2296 IA (x) \u2299 IB (x),\n\n(1.17)\n\nFC (x) = FA (x) \u2296 FA (x) \u2299 FB (x),\n\n(1.18)\n\nfor all x in X.\nDefinition 7 (Cartesian Product) Let A be the neutrosophic set defined on universe E1 and B be the\n1 , F 1 ) \u2208 A and y(T 2 , I 2 , F 2 ) \u2208 B, then the cartesian\nneutrosophic set defined on universe E2 . If x(TA1 , IA\nA\nA A\nA\nproduct of two neutrosophic sets A and B is defined by\n1\n2\n(x(TA1 , IA\n, FA1 ), y(TA2 , IA\n, FA2 )) \u2208 A \u00d7 B\n\n(1.19)\n\n\f6\n\nCHAPTER 1. INTERVAL NEUTROSOPHIC SETS\n\n1.3\n\nInterval Neutrosophic Set\n\nIn this section, we present the notion of the interval neutrosophic set (INS). The interval neutrosophic set\n(INS) is an instance of neutrosophic set which can be used in real scientific and engineering applications.\nDefinition 8 (Interval Neutrosophic Set) Let X be a space of points (objects), with a generic element\nin X denoted by x.\nAn interval neutrosophic set (INS) A in X is characterized by truth-membership function TA , indeterminacymembership function IA and falsity-membership function FA . For each point x in X, TA (x), IA (x), FA (x) \u2286\n[0, 1].\nAn interval neutrosophic set (INS) in R1 is illustrated in Fig. 1.2.\nT A (x)\nIA (x)\nF A (x)\nsup F\n\n1\n\ninf F\n\nA\n\nA\n\n(x)\n\n(x)\n\nsup T\n\nA (x)\n\ninf T\n\nA\n\n(x)\n\nsup I\n\nA\n\n(x)\n\nInf I A (x)\n\n0\n\nX\n\nFigure 1.2: Illustration of interval neutrosophic set in R1\nWhen X is continuous, an INS A can be written as\nZ\nhT (x), I(x), F (x)i/x, x \u2208 X\nA=\n\n(1.20)\n\nX\n\nWhen X is discrete, an INS A can be written as\nn\nX\nhT (xi ), I(xi ), F (xi )i/xi , xi \u2208 X\nA=\n\n(1.21)\n\ni=1\n\nConsider parameters such as capability, trustworthiness and price of semantic Web services. These\nparameters are commonly used to define quality of service of semantic Web services. In this section, we\nwill use the evaluation of quality of service of semantic Web services [WZS04] as running example to\nillustrate every set-theoretic operation on interval neutrosophic set.\nExample 1 Assume that X = [x1 , x2 , x3 ]. x1 is capability, x2 is trustworthiness and x3 is price. The values of x1 , x2 and x3 are in [0, 1]. They are obtained from the questionnaire of some domain experts, their\n\n\f7\n\n1.3. INTERVAL NEUTROSOPHIC SET\n\noption could be degree of good, degree of indeterminacy and degree of poor. A is an interval neutrosophic\nset of X defined by\nA = h[0.2, 0.4], [0.3, 0.5], [0.3, 0.5]i/x1 + h[0.5, 0.7], [0, 0.2], [0.2, 0.3]i/x2 +\nh[0.6, 0.8], [0.2, 0.3], [0.2, 0.3]i/x3 .\nB is an interval neutrosophic set of X defined by\nB = h[0.5, 0.7], [0.1, 0.3], [0.1, 0.3]i/x1 + h[0.2, 0.3], [0.2, 0.4], [0.5, 0.8]i/x2 +\nh[0.4, 0.6], [0, 0.1], [0.3, 0.4]i/x3 .\nDefinition 9 An interval neutrosophic set A is empty if and only if its inf TA (x) = sup TA (x) = 0,\ninf IA (x) = sup IA (x) = 1 and inf FA (x) = sup TA (x) = 0, for all x in X.\nWe now present the set-theoretic operators on interval neutrosophic set.\nDefinition 10 (Containment) An interval neutrosophic set A is contained in the other interval neutrosophic set B, A \u2286 B, if and only if\ninf TA (x) \u2264 inf TB (x) , sup TA (x) \u2264 sup TB (x),\n\n(1.22)\n\ninf IA (x) \u2265 inf IB (x) , sup IA (x) \u2265 sup IB (x),\n\n(1.23)\n\ninf FA (x) \u2265 inf FB (x) , sup FA (x) \u2265 sup FB (x),\n\n(1.24)\n\nfor all x in X.\nDefinition 11 Two interval neutrosophic sets A and B are equal, written as A = B, if and only if A \u2286 B\nand B \u2286 A\nLet 0 = h0, 1, 1i and 1 = h1, 0, 0i.\nDefinition 12 (Complement) Let CN denote a neutrosophic complement of A. Then CN is a function\nCN : N \u2192 N\nand CN must satisfy at least the following three axiomatic requirements:\n1. CN (0) = 1 and CN (1) = 0 (boundary conditions).\n2. Let A and B be two interval neutrosophic sets defined on X, if A(x) \u2264 B(x), then CN (A(x)) \u2265\nCN (B(x)), for all x in X. (monotonicity).\n3. Let A be an interval neutrosophic set defined on X, then CN (CN (A(x))) = A(x), for all x in X.\n(involutivity).\n\u0003\n\n\f8\n\nCHAPTER 1. INTERVAL NEUTROSOPHIC SETS\n\nThere are many functions which satisfy the requirement to be the complement operator of interval\nneutrosophic sets. Here we give one example.\nDefinition 13 (Complement CN1 ) The complement of an interval neutrosophic set A is denoted by \u0100\nand is defined by\nT\u0100 (x) = FA (x),\n\n(1.25)\n\ninf I\u0100 (x) = 1 \u2212 sup IA (x),\n\n(1.26)\n\nsup I\u0100 (x) = 1 \u2212 inf IA (x),\n\n(1.27)\n\nF\u0100 (x) = TA (x),\nfor all x in X.\n\n(1.28)\n\u0003\n\nExample 2 Let A be the interval neutrosophic set defined in Example 1. Then,\n\u0100 = h[0.3, 0.5], [0.5, 0.7], [0.2, 0.4]i/x1 + h[0.2, 0.3], [0.8, 1.0], [0.5, 0.7]i/x2 + h[0.2, 0.3], [0.7, 0.8], [0.6, 0.8]i/x3 .\nDefinition 14 (N -norm) Let IN denote a neutrosophic intersection of two interval neutrosophic sets A\nand B. Then IN is a function\nIN : N \u00d7 N \u2192 N\nand IN must satisfy at least the following four axiomatic requirements:\n1. IN (A(x), 1) = A(x), for all x in X. (boundary condition).\n2. B(x) \u2264 C(x) implies IN (A(x), B(x)) \u2264 IN (A(x), C(x)), for all x in X. (monotonicity).\n3. IN (A(x), B(x)) = IN (B(x), A(x)), for all x in X. (commutativity).\n4. IN (A(x), IN (B(x), C(x))) = IN (IN (A(x), B(x)), C(x)), for all x in X. (associativity).\n\u0003\nHere we give one example of intersection of two interval neutrosophic sets which satisfies above N -norm\naxiomatic requirements. Other different definitions can be given for different applications.\nDefinition 15 (Intersection IN1 ) The intersection of two interval neutrosophic sets A and B is an interval neutrosophic set C, written as C = A\u2229 B, whose truth-membership, indeterminacy-membership, and\nfalse-membership are related to those of A and B by\ninf TC (x) = min(inf TA (x), inf TB (x)),\n\n(1.29)\n\nsup TC (x) = min(sup TA (x), sup TB (x)),\n\n(1.30)\n\ninf IC (x) = max(inf IA (x), inf IB (x)),\n\n(1.31)\n\nsup IC (x) = max(sup IA (x), sup IB (x)),\n\n(1.32)\n\ninf FC (x) = max(inf FA (x), inf FB (x)),\n\n(1.33)\n\nsup FC (x) = max(sup FA (x), sup FB (x)),\n\n(1.34)\n\n\f1.3. INTERVAL NEUTROSOPHIC SET\n\n9\n\nfor all x in X.\n\n\u0003\n\nExample 3 Let A and B be the interval neutrosophic sets defined in Example 1.\nh[0.2, 0.4], [0.3, 0.5], [0.3, 0.5]i/x1 +\nh[0.2, 0.3], [0.2, 0.4], [0.5, 0.8]i/x2 + h[0.4, 0.6], [0.2, 0.3], [0.3, 0.4]i/x3 .\n\nThen, A \u2229 B =\n\nTheorem 1 A \u2229 B is the largest interval neutrosophic set contained in both A and B.\nDefinition 16 (N -conorm) Let UN denote a neutrosophic union of two interval neutrosophic sets A and\nB. Then UN is a function\nUN : N \u00d7 N \u2192 N\nand UN must satisfy at least the following four axiomatic requirements:\n1. UN (A(x), 0) = A(x), for all x in X. (boundary condition).\n2. B(x) \u2264 C(x) implies UN (A(x), B(x)) \u2264 UN (A(x), C(x)), for all x in X. (monotonicity).\n3. UN (A(x), B(x)) = UN (B(x), A(x)), for all x in X. (commutativity).\n4. UN (A(x), UN (B(x), C(x))) = UN (UN (A(x), B(x)), C(x)), for all x in X. (associativity).\n\u0003\nHere we give one example of union of two interval neutrosophic sets which satisfies above N -conorm\naxiomatic requirements. Other different definitions can be given for different applications.\nDefinition 17 (Union UN1 ) The union of two interval neutrosophic sets A and B is an interval neutrosophic set C, written as C = A \u222a B, whose truth-membership, indeterminacy-membership, and falsemembership are related to those of A and B by\n\nfor all x in X.\n\ninf TC (x) = max(inf TA (x), inf TB (x)),\n\n(1.35)\n\nsup TC (x) = max(sup TA (x), sup TB (x)),\n\n(1.36)\n\ninf IC (x) = min(inf IA (x), inf IB (x)),\n\n(1.37)\n\nsup IC (x) = min(sup IA (x), sup IB (x)),\n\n(1.38)\n\ninf FC (x) = min(inf FA (x), inf FB (x)),\n\n(1.39)\n\nsup FC (x) = min(sup FA (x), sup FB (x)),\n\n(1.40)\n\u0003\n\n\f10\n\nCHAPTER 1. INTERVAL NEUTROSOPHIC SETS\n\nExample 4 Let A and B be the interval neutrosophic sets defined in Example 1.\nh[0.5, 0.7], [0.1, 0.3], [0.1, 0.3]i/x1 +\nh[0.5, 0.7], [0, 0.2], [0.2, 0.3]i/x2 + h[0.6, 0.8], [0, 0.1], [0.2, 0.3]i/x3 .\n\nThen, A \u222a B =\n\nThe intuition behind the union operator is that if one of elements in A and B is true then it is true in\nA \u222a B, only both are indeterminate and false in A and B then it is indeterminate and false in A \u222a B. The\nother operators should be understood similarly.\nTheorem 2 A \u222a B is the smallest interval neutrosophic set containing both A and B.\nTheorem 3 Let P be the power set of all interval neutrosophic sets defined in the universe X. Then\nhP ; IN1 , UN1 i is a distributive lattice.\nProof Let A, B, C be the arbitrary interval neutrosophic sets defined on X. It is easy to verify that\nA \u2229 A = A, A \u222a A = A (idempotency), A \u2229 B = B \u2229 A, A \u222a B = B \u222a A (commutativity), (A \u2229 B) \u2229 C =\nA \u2229 (B \u2229 C), (A \u222a B) \u222a C = A \u222a (B \u222a C) (associativity), and A \u2229 (B \u222a C) = (A \u2229 B) \u222a (A \u2229 C), A \u222a (B \u2229 C) =\n(A \u222a B) \u2229 (A \u222a C) (distributivity).\nDefinition 18 (Interval neutrosophic relation) Let X and Y be two non-empty crisp sets. An interval neutrosophic relation R(X, Y ) is a subset of product space X \u00d7 Y , and is characterized by the truth\nmembership function TR (x, y), the indeterminacy membership function IR (x, y), and the falsity membership\nfunction FR (x, y), where x \u2208 X and y \u2208 Y and TR (x, y), IR (x, y), FR (x, y) \u2286 [0, 1].\nDefinition 19 (Interval Neutrosophic Composition Functions) The membership functions for the\ncomposition of interval neutrosophic relations R(X, Y ) and S(Y, Z) are given by the interval neutrosophic\nsup-star composition of R and S\nTR\u25e6S (x, z) = sup min(TR (x, y), TS (y, z)),\n\n(1.41)\n\ny\u2208Y\n\nIR\u25e6S (x, z) = sup min(IR (x, y), IS (y, z)),\n\n(1.42)\n\ny\u2208Y\n\nFR\u25e6S (x, z) =\n\ninf max(FR (x, y), FS (y, z)).\n\ny\u2208Y\n\n(1.43)\n\nIf R is an interval neutrosophic set rather than an interval neutrosophic relation, then Y = X and\nsupy\u2208Y min(TR (x, y), TS (y, z)) becomes supy\u2208Y min(TR (x), TS (y, z)), which is only a function of the output variable z. It is similar for supy\u2208Y min(IR (x, y), IS (y, z)) and inf y\u2208Y max(FR (x, y), FS (y, z)). Hence,\nthe notation of TR\u25e6S (x, z) can be simplified to TR\u25e6S (z), so that in the case of R being just an interval\nneutrosophic set,\nTR\u25e6S (z) = sup min(TR (x), TS (x, z)),\n\n(1.44)\n\nx\u2208X\n\nIR\u25e6S (z) = sup min(IR (x), IS (x, z)),\n\n(1.45)\n\nx\u2208X\n\nFR\u25e6S (z) =\n\ninf max(FR (x), FS (x, z)).\n\nx\u2208X\n\n(1.46)\n\n\f1.3. INTERVAL NEUTROSOPHIC SET\n\n11\n\nDefinition 20 (Difference) The difference of two interval neutrosophic sets A and B is an interval\nneutrosophic set C, written as C = A\\B, whose truth-membership, indeterminacy-membership and falsitymembership functions are related to those of A and B by\ninf TC (x) = min(inf TA (x), inf FB (x)),\n\n(1.47)\n\nsup TC (x) = min(sup TA (x), sup FB (x)),\n\n(1.48)\n\ninf IC (x) = max(inf IA (x), 1 \u2212 sup IB (x)),\n\n(1.49)\n\nsup IC (x) = max(sup IA (x), 1 \u2212 inf IB (x)),\n\n(1.50)\n\ninf FC (x) = max(inf FA (x), inf TB (x)),\n\n(1.51)\n\nsup FC (x) = max(sup FA (x), sup TB (x)),\n\n(1.52)\n\nfor all x in X.\nExample 5 Let A and B be the interval neutrosophic sets defined in Example 1.\nh[0.1, 0.3], [0.7, 0.9], [0.5, 0.7]i/x1 +\nh[0.5, 0.7], [0.6, 0.8], [0.2, 0.3]i/x2 + h[0.3, 0.4], [0.9, 1.0], [0.4, 0.6]i/x3 .\n\nThen, A \\ B =\n\nTheorem 4 A \u2286 B \u2194 B\u0304 \u2286 \u0100\nDefinition 21 (Addition) The addition of two interval neutrosophic sets A and B is an interval neutrosophic set C, written as C = A + B, whose truth-membership, indeterminacy-membership and falsitymembership functions are related to those of A and B by\ninf TC (x) = min(inf TA (x) + inf TB (x), 1),\n\n(1.53)\n\nsup TC (x) = min(sup TA (x) + sup TB (x), 1),\n\n(1.54)\n\ninf IC (x) = min(inf IA (x) + inf IB (x), 1),\n\n(1.55)\n\nsup IC (x) = min(sup IA (x) + sup IB (x), 1),\n\n(1.56)\n\ninf FC (x) = min(inf FA (x) + inf FB (x), 1),\n\n(1.57)\n\nsup FC (x) = min(sup FA (x) + sup FB (x), 1),\n\n(1.58)\n\nfor all x in X.\nExample 6 Let A and B be the interval neutrosophic sets defined in Example 1. Then, A + B =\nh[0.7, 1.0], [0.4, 0.8], [0.4, 0.8]i/x1 +\nh[0.7, 1.0], [0.2, 0.6], [0.7, 1.0]i/x2 + h[1.0, 1.0], [0.2, 0.4], [0.5, 0.7]i/x3 .\nDefinition 22 (Cartesian product) The cartesian product of two interval neutrosophic sets A defined\non universe X1 and B defined on universe X2 is an interval neutrosophic set C, written as C = A \u00d7 B,\n\n\f12\n\nCHAPTER 1. INTERVAL NEUTROSOPHIC SETS\n\nwhose truth-membership, indeterminacy-membership and falsity-membership functions are related to those\nof A and B by\ninf TC (x, y) = inf TA (x) + inf TB (y) \u2212 inf TA (x) * inf TB (y),\n\n(1.59)\n\nsup TC (x, y) = sup TA (x) + sup TB (y) \u2212 sup TA (x) * sup TB (y),\n\n(1.60)\n\ninf IC (x, y) = inf IA (x) * sup IB (y),\n\n(1.61)\n\nsup IC (x, y) = sup IA (x) * sup IB (y),\n\n(1.62)\n\ninf FC (x, y) = inf FA (x) * inf FB (y),\n\n(1.63)\n\nsup FC (x, y) = sup FA (x) * sup FB (y),\n\n(1.64)\n\nfor all x in X1 , y in X2 .\nExample 7 Let A and B be the interval neutrosophic sets defined in Example 1. Then, A \u00d7 B =\nh[0.6, 0.82], [0.03, 0.15], [0.03, 0.15]i/x1 +\nh[0.6, 0.79], [0, 0.08], [0.1, 0.24]i/x2 + h[0.76, 0.92], [0, 0.03], [0.03, 0.12]i/x3 .\nDefinition 23 (Scalar multiplication) The scalar multiplication of interval neutrosophic set A is an\ninterval neutrosophic set B, written as B = a * A, whose truth-membership, indeterminacy-membership and\nfalsity-membership functions are related to those of A by\ninf TB (x) = min(inf TA (x) * a, 1),\n\n(1.65)\n\nsup TB (x) = min(sup TA (x) * a, 1),\n\n(1.66)\n\ninf IB (x) = min(inf IA (x) * a, 1),\n\n(1.67)\n\nsup IB (x) = min(sup IA (x) * a, 1),\n\n(1.68)\n\ninf FB (x) = min(inf FA (x) * a, 1),\n\n(1.69)\n\nsup FB (x) = min(sup FA (x) * a, 1),\n\n(1.70)\n\nfor all x in X, a \u2208 R+ .\nDefinition 24 (Scalar division) The scalar division of interval neutrosophic set A is an interval neutrosophic set B, written as B = a * A, whose truth-membership, indeterminacy-membership and falsitymembership functions are related to those of A by\ninf TB (x) = min(inf TA (x)/a, 1),\n\n(1.71)\n\nsup TB (x) = min(sup TA (x)/a, 1),\n\n(1.72)\n\ninf IB (x) = min(inf IA (x)/a, 1),\n\n(1.73)\n\nsup IB (x) = min(sup IA (x)/a, 1),\n\n(1.74)\n\ninf FB (x) = min(inf FA (x)/a, 1),\n\n(1.75)\n\nsup FB (x) = min(sup FA (x)/a, 1),\n\n(1.76)\n\n\f1.3. INTERVAL NEUTROSOPHIC SET\n\n13\n\nfor all x in X, a \u2208 R+ .\nNow we will define two operators: truth-favorite (\u25b3) and false-favorite (\u2207) to remove the indeterminacy\nin the interval neutrosophic sets and transform it into interval valued intuitionistic fuzzy sets or interval\nvalued paraconsistent sets. These two operators are unique on interval neutrosophic sets.\nDefinition 25 (Truth-favorite) The truth-favorite of interval neutrosophic set A is an interval neutrosophic set B, written as B = \u25b3A, whose truth-membership and falsity-membership functions are related\nto those of A by\ninf TB (x) = min(inf TA (x) + inf IA (x), 1),\n\n(1.77)\n\nsup TB (x) = min(sup TA (x) + sup IA (x), 1),\n\n(1.78)\n\ninf IB (x) = 0,\n\n(1.79)\n\nsup IB (x) = 0,\n\n(1.80)\n\ninf FB (x) = inf FA (x),\n\n(1.81)\n\nsup FB (x) = sup FA (x),\n\n(1.82)\n\nfor all x in X.\nExample 8 Let A be the interval neutrosophic set defined in Example 1. Then, \u25b3A = h[0.5, 0.9], [0, 0], [0.3, 0.5]i/x1 +\nh[0.5, 0.9], [0, 0], [0.2, 0.3]i/x2 +\nh[0.8, 1.0], [0, 0], [0.2, 0.3]i/x3 .\nThe purpose of truth-favorite operator is to evaluate the maximum of degree of truth-membership of\ninterval neutrosophic set.\nDefinition 26 (False-favorite) The false-favorite of interval neutrosophic set A is an interval neutrosophic set B, written as B = \u2207A, whose truth-membership and falsity-membership functions are related to\nthose of A by\n\nfor all x in X.\n\ninf TB (x) = inf TA (x),\n\n(1.83)\n\nsup TB (x) = sup TA (x),\n\n(1.84)\n\ninf IB (x) = 0,\n\n(1.85)\n\nsup IB (x) = 0,\n\n(1.86)\n\ninf FB (x) = min(inf FA (x) + inf IA (x), 1),\n\n(1.87)\n\nsup FB (x) = min(sup FA (x) + sup IA (x), 1),\n\n(1.88)\n\n\f14\n\nCHAPTER 1. INTERVAL NEUTROSOPHIC SETS\n\nExample 9 Let A be the interval neutrosophic set defined in Example 1. Then, \u2207A = h[0.2, 0.4], [0, 0], [0.6, 1.0]i/x1 +\nh[0.5, 0.7], [0, 0], [0.2, 0.5]i/x2 +\nh[0.6, 0.8], [0, 0], [0.4, 0.6]i/x3 .\nThe purpose of false-favorite operator is to evaluate the maximum of degree of false-membership of\ninterval neutrosophic set.\nTheorem 5 For every two interval neutrosophic sets A and B:\n1. \u25b3(A \u222a B) \u2286 \u25b3A \u222a \u25b3B\n2. \u25b3A \u2229 \u25b3B \u2286 \u25b3(A \u2229 B)\n3. \u2207A \u222a \u2207B \u2286 \u2207(A \u222a B)\n4. \u2207(A \u2229 B) \u2286 \u2207A \u2229 \u2207B\n\n1.4\n\nProperties of Set-theoretic Operators\n\nIn this section, we will give some properties of set-theoretic operators defined on interval neutrosophic sets\nas in Section 1.3. The proof of these properties is left for the readers.\nProperty 1 (Commutativity) A \u222a B = B \u222a A, A \u2229 B = B \u2229 A, A + B = B + A, A \u00d7 B = B \u00d7 A\nProperty 2 (Associativity) A \u222a (B \u222a C) = (A \u222a B) \u222a C,\nA \u2229 (B \u2229 C) = (A \u2229 B) \u2229 C,\nA + (B + C) = (A + B) + C,\nA \u00d7 (B \u00d7 C) = (A \u00d7 B) \u00d7 C.\nProperty 3 (Distributivity) A \u222a (B \u2229 C) = (A \u222a B) \u2229 (A \u222a C), A \u2229 (B \u222a C) = (A \u2229 B) \u222a (A \u2229 C).\nProperty 4 (Idempotency) A \u222a A = A, A \u2229 A = A, \u25b3\u25b3A = \u25b3A, \u2207\u2207A = \u2207A.\nProperty 5 A \u2229 \u03a6 = \u03a6, A \u222a X = X, where inf T\u03a6 = sup T\u03a6 = 0, inf I\u03a6 = sup I\u03a6 = inf F\u03a6 = sup F\u03a6 = 1\nand inf TX = sup TX = 1, inf IX = sup IX = inf FX = sup FX = 0.\nProperty 6 \u25b3(A + B) = \u25b3A + \u25b3B, \u2207(A + B) = \u2207A + \u2207B.\nProperty 7 A \u222a \u03a8 = A, A \u2229 X = A, where inf T\u03a6 = sup T\u03a6 = 0, inf I\u03a6 = sup I\u03a6 = inf F\u03a6 = sup F\u03a6 = 1\nand inf TX = sup TX = 1, inf IX = sup IX = inf FX = sup FX = 0.\n\n\f1.5. CONVEXITY OF INTERVAL NEUTROSOPHIC SET\n\n15\n\nProperty 8 (Absorption) A \u222a (A \u2229 B) = A, A \u2229 (A \u222a B) = A\nProperty 9 (DeMorgan's Laws) A \u222a B = \u0100 \u2229 B\u0304, A \u2229 B = \u0100 \u222a B\u0304.\nProperty 10 (Involution) A = A\nHere, we notice that by the definitions of complement, union and intersection of interval neutrosophic\nset, interval neutrosophic set satisfies the most properties of class set, fuzzy set and intuitionistic fuzzy set.\nSame as fuzzy set and intuitionistic fuzzy set, it does not satisfy the principle of middle exclude.\n\n1.5\n\nConvexity of Interval Neutrosophic Set\n\nWe assume that X is a real Euclidean space E n for correctness.\nDefinition 27 (Convexity) An interval neutrosophic set A is convex if and only if\ninf TA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2265 min(inf TA (x1 ), inf TA (x2 )),\n\n(1.89)\n\nsup TA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2265 min(sup TA (x1 ), sup TA (x2 )),\n\n(1.90)\n\ninf IA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(inf IA (x1 ), inf IA (x2 )),\n\n(1.91)\n\nsup IA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(sup IA (x1 ), sup IA (x2 )),\n\n(1.92)\n\ninf FA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(inf FA (x1 ), inf FA (x2 )),\n\n(1.93)\n\nsup FA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(sup FA (x1 ), sup FA (x2 )),\n\n(1.94)\n\nfor all x1 and x2 in X and all \u03bb in [0, 1].\nFig. 1.2 is an illustration of convex interval neutrosophic set.\nTheorem 6 If A and B are convex, so is their intersection.\nDefinition 28 (Strongly Convex) An interval neutrosophic set A is\nstrongly convex if for any two distinct points x1 and x2 , and any \u03bb in the\nopen interval (0, 1),\ninf TA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) > min(inf TA (x1 ), inf TA (x2 )),\n\n(1.95)\n\nsup TA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) > min(sup TA (x1 ), sup TA (x2 )),\n\n(1.96)\n\ninf IA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) < max(inf IA (x1 ), inf IA (x2 )),\n\n(1.97)\n\nsup IA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) < max(sup IA (x1 ), sup IA (x2 )),\n\n(1.98)\n\ninf FA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) < max(inf FA (x1 ), inf FA (x2 )),\n\n(1.99)\n\nsup FA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) < max(sup FA (x1 ), sup FA (x2 )),\n\n(1.100)\n\nfor all x1 and x2 in X and all \u03bb in [0, 1].\nTheorem 7 If A and B are strongly convex, so is their intersection.\n\n\f16\n\n1.6\n\nCHAPTER 1. INTERVAL NEUTROSOPHIC SETS\n\nConclusions\n\nIn this chapter, we have presented an instance of neutrosophic set called the interval neutrosophic set\n(INS). The interval neutrosophic set is a generalization of classic set, fuzzy set, interval valued fuzzy set,\nintuitionistic fuzzy sets, interval valued intuitionistic fuzzy set, interval type-2 fuzzy set [LM00] and paraconsistent set. The notions of containment, complement, N -norm, N -conorm, relation, and composition\nhave been defined on interval neutrosophic set. Various properties of set-theoretic operators have been\nproved. In the next chapter, we will discuss the interval neutrosophic logic and logic inference system\nbased on interval neutrosophic set.\n\n1.7\n\nAppendix\n\nTheorem 1 A \u222a B is the smallest interval neutrosophic set containing both A and B.\nProof Let C = A \u222a B. inf TC = max(inf TA , inf TB ), inf TC \u2265 inf TA , inf TC \u2265 inf TB . sup TC =\nmax(sup TA , sup TB , sup TC \u2265 sup TA , sup TC \u2265 sup TB . inf IC = min(inf IA , inf IB ), inf IC \u2264 inf IA ,\ninf IC \u2264 inf IB ,\nsup IC = min(sup IA , sup IB ), sup IC \u2264 sup IA , sup IC \u2264 sup IB , inf FC = min(inf FA , inf FB ), inf FC \u2264\ninf FA , inf FC \u2264 inf FB .\nsup FC = min(sup FA , sup FB ), sup FC \u2264 sup FA , sup FC \u2264 sup FB . That means C contains both A and\nB.\nFurthermore, if D is any extended vague set containing both A and B, then inf TD \u2265 inf TA , inf TD \u2265\ninf TB , so inf TD \u2265 max(inf TA , inf TB ) = inf TC . sup TD \u2265 sup TA , sup TD \u2265 sup TB , so sup TD \u2265\nmax(sup TA , sup TB ) = sup TC . inf ID \u2264 inf IA , inf ID \u2264 inf IB , so inf ID \u2264 min(inf IA , inf IB ) =\ninf IC . sup ID \u2264 sup IA , sup ID \u2264 sup IB , so sup ID \u2264 min(sup IA , sup IB ) = sup IC . inf FD \u2264 inf FA ,\ninf FD \u2264 inf FB , so inf FD \u2264 min(inf FA , inf FB ) = inf FC . sup FD \u2264 sup FA , sup FD \u2264 sup FB , so\nsup FD \u2264 min(sup FA , sup FB ) = sup FC . That implies C \u2286 D.\nTheorem 2 A \u2229 B is the largest interval neutrosophic set contained in both A and B.\nProof The proof is analogous to the proof of theorem 1.\nTheorem 3 Let P be the power set of all interval neutrosophic sets defined in the universe X. Then\nhP ; IN1 , UN1 i is a distributive lattice.\nProof Let A, B, C be the arbitrary interval neutrosophic sets defined on X. It is easy to verify that\nA \u2229 A = A, A \u222a A = A (idempotency), A \u2229 B = B \u2229 A, A \u222a B = B \u222a A (commutativity), (A \u2229 B) \u2229 C =\nA \u2229 (B \u2229 C), (A \u222a B) \u222a C = A \u222a (B \u222a C) (associativity), and A \u2229 (B \u222a C) = (A \u2229 B) \u222a (A \u2229 C), A \u222a (B \u2229 C) =\n(A \u222a B) \u2229 (A \u222a C) (distributivity).\nTheorem 4 A \u2286 B \u2194 B\u0304 \u2286 \u0100\n\n\f1.7. APPENDIX\n\n17\n\nProof A \u2286 B \u21d4 inf TA \u2264 inf TB , sup TA \u2264 sup TB , inf IA \u2265 inf IB , sup IA \u2265 sup IB , inf FA \u2265 inf FB , sup FA \u2265\nsup FB \u21d4 inf FB \u2264 inf FA , sup FB \u2264 sup FA ,\n1 \u2212 sup IB \u2265 1 \u2212 sup IA , 1 \u2212 inf IB \u2265 1 \u2212 inf IA , inf TB \u2265 inf TA , sup TB \u2265 sup TA \u21d4 B\u0304 \u2286 \u0100.\nTheorem 5 For every two interval neutrosophic sets A and B:\n1. \u25b3(A \u222a B) \u2286 \u25b3A \u222a \u25b3B\n2. \u25b3A \u2229 \u25b3B \u2286 \u25b3(A \u2229 B)\n3. \u2207A \u222a \u2207B \u2286 \u2207(A \u222a B)\n4. \u2207(A \u2229 B) \u2286 \u2207A \u2229 \u2207B\nProof We now prove the first identity. Let C = A \u222a B.\ninf TC (x) = max(inf TA (x), inf TB (x)),\nsup TC (x) = max(sup TA (x), sup TB (x)),\ninf IC (x) = min(inf IA (x), inf IB (x)),\nsup IC (x) = min(sup IA (x), sup IB (x)),\ninf FC (x) = min(inf FA (x), inf FB (x)),\nsup FC (x) = min(sup FA (x), sup FB (x)).\ninf T\u25b3C (x) = min(inf TC (x) + inf IC (x), 1),\nsup T\u25b3C (x) = min(sup TC (x) + sup TC (x), 1),\ninf I\u25b3C (x) = sup I\u25b3C (x) = 0,\ninf F\u25b3C (x) = inf IC (x),\nsup F\u25b3C (x) = sup IC (x).\ninf T\u25b3A (x) = min(inf TA (x) + inf IA (x), 1),\nsup T\u25b3A (x) = min(sup TA x + sup IA (x), 1),\ninf I\u25b3A (x) = sup I\u25b3A (x) = 0,\ninf F\u25b3A (x) = inf IA (x),\nsup F\u25b3A (x) = sup IA (x).\ninf T\u25b3B (x) = min(inf TB (x) + inf IB (x), 1),\nsup T\u25b3B (x) = min(sup TB x + sup IB (x), 1),\ninf I\u25b3B (x) = sup I\u25b3B (x) = 0,\ninf F\u25b3B (x) = inf IB (x),\nsup F\u25b3B (x) = sup IB (x).\ninf T\u25b3A\u222a\u25b3B (x) = max(inf T\u25b3A (x), inf T\u25b3B (x)),\nsup T\u25b3A\u222a\u25b3B (x) = max(sup T\u25b3A (x), sup T\u25b3B (x)),\ninf I\u25b3A\u222a\u25b3B (x) = sup I\u25b3A\u222a\u25b3B (x) = 0,\ninf F\u25b3A\u222a\u25b3B (x) = min(inf F\u25b3A (x), inf F\u25b3B (x)),\nsup F\u25b3A\u222a\u25b3B (x) = min(inf F\u25b3A (x), inf F\u25b3B (x)).\n\n\f18\n\nCHAPTER 1. INTERVAL NEUTROSOPHIC SETS\n\nBecause,\ninf T\u25b3(A\u222aB) \u2264 inf T\u25b3A\u222a\u25b3B ,\nsup T\u25b3(A\u222aB) \u2264 sup T\u25b3A\u222a\u25b3B ,\ninf I\u25b3(A\u222aB) = inf T\u25b3A\u222a\u25b3B = 0,\nsup I\u25b3(A\u222aB) = sup T\u25b3A\u222a\u25b3B = 0,\ninf F\u25b3(A\u222aB) = inf F\u25b3A\u222a\u25b3B ,\nsup F\u25b3(A\u222aB) = sup T\u25b3A\u222a\u25b3B ,\nso, \u25b3(A \u222a B) \u2286 \u25b3A \u222a \u25b3B. The other identities can be proved in a similar manner.\nTheorem 6 If A and B are convex, so is their intersection.\nProof Let C = A \u2229 B, then\ninf TC (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2265 min(inf TA (\u03bbx1 + (1 \u2212 \u03bb)x2 ), inf TB (\u03bbx1 + (1 \u2212 \u03bb)x2 )), sup TC (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2265\nmin(sup TA (\u03bbx1 + (1 \u2212 \u03bb)x2 ), sup TB (\u03bbx1 + (1 \u2212 \u03bb)x2 )), inf IC (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(inf IA (\u03bbx1 + (1 \u2212\n\u03bb)x2 ), inf IB (\u03bbx1 + (1 \u2212 \u03bb)x2 )), sup IC (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(sup IA (\u03bbx1 + (1 \u2212 \u03bb)x2 ), sup IB (\u03bbx1 + (1 \u2212\n\u03bb)x2 )), inf FC (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(inf FA (\u03bbx1 + (1 \u2212 \u03bb)x2 ), inf FB (\u03bbx1 + (1 \u2212 \u03bb)x2 )), sup FC (\u03bbx1 + (1 \u2212\n\u03bb)x2 ) \u2264 max(inf FA (\u03bbx1 + (1\u2212 \u03bb)x2 ), inf FB (\u03bbx1 + (1\u2212 \u03bb)x2 )), Since A and B are convex: inf TA (\u03bbx1 + (1\u2212\n\u03bb)x2 ) \u2265 min(inf TA (x1), inf TA (x2)), sup TA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2265 min(sup TA (x1), sup TA (x2)), inf IA (\u03bbx1 +\n(1 \u2212 \u03bb)x2 ) \u2264 max(inf IA (x1), inf IA (x2)), sup IA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264\nmax(sup IA (x1), sup IA (x2)), inf FA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264\nmax(inf FA (x1), inf FA (x2)), sup FA (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264\nmax(sup FA (x1), sup FA (x2)),\ninf TB (\u03bbx1 +(1\u2212\u03bb)x2 ) \u2265 min(inf TB (x1), inf TA (x2)), sup TB (\u03bbx1 +(1\u2212\u03bb)x2 ) \u2265 min(sup TB (x1), sup TA (x2)),\ninf IB (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264\nmax(inf IB (x1), inf IA (x2)), sup IB (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264\nmax(sup IB (x1), sup IA (x2)),\ninf FB (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(inf FB (x1), inf FA (x2)),\nsup FB (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(sup FB (x1), sup FA (x2)),\nHence,\ninf TC (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2265 min(min(inf TA (x1 ), inf TA (x2 ))\n, min(inf TB (x1 ), inf TB (x2 ))) = min(min(inf TA (x1 ), inf TB (x1 )),\nmin(inf TA (x2 ), inf TB (x2 ))) = min(inf TC (x1 ), inf TC (x2 )), sup TC (\u03bbx1 +(1\u2212\u03bb)x2 ) \u2265 min(min(sup TA (x1 ), sup TA (x2 )),\nmin(sup TB (x1 ), sup TB (x2 ))) = min(min(sup TA (x1 ), sup TB (x1 )),\nmin(sup TA (x2 ), sup TB (x2 ))) = min(sup TC (x1 ), sup TC (x2 )),\ninf IC (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(max(inf IA (x1 ),\ninf IA (x2 )), max(inf IB (x1 ), inf IB (x2 ))) = max(max(inf IA (x1 ),\ninf IB (x1 )), max(inf IA (x2 ), inf IB (x2 ))) = max(inf IC (x1 ), inf IC (x2 )),\nsup IC (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(max(sup IA (x1 ), sup IA (x2 ))\n, max(sup IB (x1 ), sup IB (x2 ))) = max(max(sup IA (x1 ), sup IB (x1 )),\nmax(sup IA (x2 ), sup IB (x2 ))) = max(sup IC (x1 ), sup IC (x2 )),\n\n\f1.7. APPENDIX\ninf FC (\u03bbx1 + (1 \u2212 \u03bb)x2 ) \u2264 max(max(inf FA (x1 ), inf FA (x2 )),\nmax(inf FB (x1 ), inf FB (x2 ))) = max(max(inf FA (x1 ), inf FB (x1 )),\nmax(inf FA (x2 ), inf FB (x2 ))) =\nmax(inf FC (x1 ), inf FC (x2 )), sup FC (\u03bbx1 + (1 \u2212 \u03bb)x2 )\n\u2264 max(max(sup FA (x1 ), sup FA (x2 )),\nmax(sup FB (x1 ), sup FB (x2 ))) = max(max(sup FA (x1 ), sup FB (x1 )),\nmax(sup FA (x2 ), sup FB (x2 ))) = max(sup FC (x1 ), sup FC (x2 )).\nTheorem 7 If A and B are strongly convex, so is their intersection.\nProof The proof is analogous to the proof of Theorem 6.\n\n19\n\n\f20\n\nCHAPTER 1. INTERVAL NEUTROSOPHIC SETS\n\n\fChapter 2\n\nInterval Neutrosophic Logic\nIn this chapter, we present a novel interval neutrosophic logic that generalizes the interval valued fuzzy logic, the\nintuitionistic fuzzy logic and paraconsistent logics which only consider truth-degree or falsity-degree of a proposition.\nIn the interval neutrosophic logic, we consider not only truth-degree and falsity-degree but also indeterminacy-degree\nwhich can reliably capture more information under uncertainty. We introduce mathematical definitions of an interval neutrosophic propositional calculus and an interval neutrosophic predicate calculus. We propose a general\nmethod to design an interval neutrosophic logic system which consists of neutrosophication, neutrosophic inference,\na neutrosophic rule base, neutrosophic type reduction and deneutrosophication. A neutrosophic rule contains input\nneutrosophic linguistic variables and output neutrosophic linguistic variables. A neutrosophic linguistic variable has\nneutrosophic linguistic values which defined by interval neutrosophic sets characterized by three membership functions: truth-membership, falsity-membership and indeterminacy-membership. The interval neutrosophic logic can\nbe applied to many potential real applications where information is imprecise, uncertain, incomplete and inconsistent\nsuch as Web intelligence, medical informatics, bioinformatics, decision making, etc.\n\n2.1\n\nIntroduction\n\nThe concept of fuzzy sets was introduced by Zadeh in 1965 [Zad65b]. Since then fuzzy sets and fuzzy\nlogic have been applied to many real applications to handle uncertainty. The traditional fuzzy set uses one\nreal value \u03bcA (x) \u2208 [0, 1] to represent the grade of membership of fuzzy set A defined on universe X. The\ncorresponding fuzzy logic associates each proposition p with a real value \u03bc(p) \u2208 [0, 1] which represents the\ndegree of truth. Sometimes \u03bcA (x) itself is uncertain and hard to be defined by a crisp value. So the concept\nof interval valued fuzzy sets was proposed [Tur86] to capture the uncertainty of grade of membership. The\nU\nL\nU\ninterval valued fuzzy set uses an interval value [\u03bcL\nA (x), \u03bcA (x)] with 0 \u2264 \u03bcA (x) \u2264 \u03bcA (x) \u2264 1 to represent the\ngrade of membership of fuzzy set. The traditional fuzzy logic can be easily extended to the interval valued\nfuzzy logic. There are related works such as type-2 fuzzy sets and type-2 fuzzy logic [KM98, LM00, MJ02].\nThe family of fuzzy sets and fuzzy logic can only handle \"complete\" information that is if a grade of\ntruth-membership is \u03bcA (x) then a grade of false-membership is 1 \u2212 \u03bcA (x) by default. In some applications\n21\n\n\f22\n\nCHAPTER 2. INTERVAL NEUTROSOPHIC LOGIC\n\nsuch as expert systems, decision making systems and information fusion systems, the information is both\nuncertain and incomplete. That is beyond the scope of traditional fuzzy sets and fuzzy logic. In 1986,\nAtanassov introduced the intuitionistic fuzzy set [Ata86] which is a generalization of a fuzzy set and\nprovably equivalent to an interval valued fuzzy set. The intuitionistic fuzzy sets consider both truthmembership and false-membership. The corresponding intuitionistic fuzzy logic [Ata88, AG90, AG98]\nassociates each proposition p with two real values \u03bc(p)-truth degree and \u03bd(p)-falsity degree, respectively,\nwhere \u03bc(p), \u03bd(p) \u2208 [0, 1], \u03bc(p) + \u03bd(p) \u2264 1. So intuitionistic fuzzy sets and intuitionistic fuzzy logic can\nhandle uncertain and incomplete information.\nHowever, inconsistent information exists in a lot of real situations such as those mentioned above. It is\nobvious that the intuitionistic fuzzy logic cannot reason with inconsistency because it requires \u03bc(p)+\u03bd(p) \u2264\n1. Generally, two basic approaches are used to solve the inconsistency problem in knowledge bases: the\nbelief revision and paraconsistent logics. The goal of the first approach is to make an inconsistent theory\nconsistent, either by revising it or by representing it by a consistent semantics. On the other hand, the\nparaconsistent approach allows reasoning in the presence of inconsistency as contradictory information can\nbe derived or introduced without trivialization [dACM02a]. de Costa's Cw logic [Cos77b] and Belnap's\nfour-valued logic [Bel77a] are two well-known paraconsistent logics.\nNeutrosophy was introduced by Smarandache in 1995. \"Neutrosophy is a branch of philosophy which\nstudies the origin, nature and scope of neutralities, as well as their interactions with different ideational\nspectra\" [Sma03]. Neutrosophy includes neutrosophic probability, neutrosophic sets and neutrosophic logic.\nIn a neutrosophic set (neutrosophic logic), indeterminacy is quantified explicitly and truth-membership\n(truth-degree), indeterminacy-membership (indeterminacy-degree) and false-membership (falsity-degree)\nare independent. The independence assumption is very important in a lot of applications such as information fusion when we try to combine different data from different sensors. A neutrosophic set (neutrosophic\nlogic) is different from an intuitionistic fuzzy set (intuitionistic fuzzy logic) where indeterminacy membership (indeterminacy-degree) is 1 \u2212 \u03bcA (x) \u2212 \u03bdA (x) (1 \u2212 \u03bc(p) \u2212 \u03bd(p)) by default.\nThe neutrosophic set generalizes the above mentioned sets from a philosophical point of view. From a\nscientific or engineering point of view, the neutrosophic set and set-theoretic operators need to be specified\nmeaningfully. Otherwise, it will be difficult to apply to the real applications. In chapter 1 we discussed a\nspecial neutrosophic set called an interval neutrosophic set and defined a set of set-theoretic operators. It\nis natural to define the interval neutrosophic logic based on interval neutrosophic sets. In this chapter, we\ngive mathematical definitions of an interval neutrosophic propositional calculus and a first order interval\nneutrosophic predicate calculus.\nThe rest of this chapter is organized as follows. Section 2.2 gives the mathematical definition of the\ninterval neutrosophic propositional calculus. Section 2.3 gives the mathematical definition of the first\norder interval neutrosophic predicate calculus. Section 2.4 provides one application example of interval\nneutrosophic logic as the foundation for the design of interval neutrosophic logic system. In section 2.5 we\nconclude the chapter and discuss the future research directions.\n\n\f2.2. INTERVAL NEUTROSOPHIC PROPOSITIONAL CALCULUS\n\n2.2\n\n23\n\nInterval Neutrosophic Propositional Calculus\n\nIn this section, we introduce the elements of an interval neutrosophic propositional calculus based on the\ndefinition of the interval neutrosophic sets by using the notations from the theory of classical propositional\ncalculus [Men87].\n\n2.2.1\n\nSyntax of Interval Neutrosophic Propositional Calculus\n\nHere we give the formalization of syntax of the interval neutrosophic propositional calculus.\nDefinition 29 An alphabet of the interval neutrosophic propositional calculus consists of three classes of\nsymbols:\n1. A set of interval neutrosophic propositional variables, denoted by lower-case letters, sometimes indexed;\n2. Five connectives \u2227, \u2228, \u00ac, \u2192, \u2194 which are called conjunction, disjunction, negation, implication, and\nbiimplication symbols respectively;\n3. The parentheses ( and ).\n\u0003\nThe alphabet of the interval neutrosophic propositional calculus has combinations obtained by assembling connectives and interval neutrosophic propositional variables in strings. The purpose of the\nconstruction rules is to have the specification of distinguished combinations, called formulas.\nDefinition 30 The set of formulas (well-formed formulas) of interval neutrosophic propositional calculus\nis defined as follows.\n1. Every interval neutrosophic propositional variable is a formula;\n2. If p is a formula, then so is (\u00acp);\n3. If p and q are formulas, then so are\n(a) (p \u2227 q),\n(b) (p \u2228 q),\n(c) (p \u2192 q), and\n(d) (p \u2194 q).\n4. No sequence of symbols is a formula which is not required to be by 1, 2, and 3.\n\u0003\n\n\f24\n\nCHAPTER 2. INTERVAL NEUTROSOPHIC LOGIC\n\nTo avoid having formulas cluttered with parentheses, we adopt the following precedence hierarchy, with\nthe highest precedence at the top:\n\u00ac,\n\u2227, \u2228,\n\u2192, \u2194.\nHere is an example of the interval neutrosophic propositional calculus formula:\n\u00acp1 \u2227 p2 \u2228 (p1 \u2192 p3 ) \u2192 p2 \u2227 \u00acp3\nDefinition 31 The language of interval neutrosophic propositional calculus given by an alphabet consists\nof the set of all formulas constructed from the symbols of the alphabet.\n\u0003\n\n2.2.2\n\nSemantics of Interval Neutrosophic Propositional Calculus\n\nThe study of interval neutrosophic propositional calculus comprises, among others, a syntax, which has the\ndistinction of well-formed formulas, and a semantics, the purpose of which is the assignment of a meaning\nto well-formed formulas.\nTo each interval neutrosophic proposition p, we associate it with an ordered triple components ht(p), i(p), f (p)i,\nwhere t(p), i(p), f (p) \u2286 [0, 1]. t(p), i(p), f (p) is called truth-degree, indeterminacy-degree and falsity-degree\nof p, respectively. Let this assignment be provided by an interpretation function or interpretation IN L\ndefined over a set of propositions P in such a way that\nIN L(p) = ht(p), i(p), f (p)i.\nHence, the function IN L : P \u2192 N gives the truth, indeterminacy and falsity degrees of all propositions in\nP . We assume that the interpretation function IN L assigns to the logical truth T : IN L(T ) = h1, 0, 0i,\nand to F : IN L(F ) = h0, 1, 1i.\nAn interpretation which makes a formula true is a model of the formula.\nLet i, l be the subinterval of [0, 1]. Then i+l = [inf i+inf l, sup i+sup l], i\u2212l = [inf i\u2212sup l, sup i\u2212inf l],\nmax(i, l) = [max(inf i, inf l), max(sup i, sup l)], min(i, l) = [min(inf i, inf l), min(sup i, sup l)].\nThe semantics of four interval neutrosophic propositional connectives is given in Table I. Note that\np \u2194 q if and only if p \u2192 q and q \u2192 p.\n\nExample 10 IN L(p) = h0.5, 0.4, 0.7i and IN L(q) = h1, 0.7, 0.2i. Then, IN L(\u00acp) = h0.7, 0.6, 0.5i,\nIN L(p \u2227 \u00acp) = h0.5, 0.4, 0.7i, IN L(p \u2228 q) = h1, 0.7, 0.2i, IN L(p \u2192 q) = h1, 1, 0i.\n\u0003\nA given well-formed interval neutrosophic propositional formula will be called a tautology (valid) if\nIN L(A) = h1, 1, 0i, for all interpretation functions IN L. It will be called a contradiction (inconsistent) if\nIN L(A) = h0, 0, 1i, for all interpretation functions IN L.\n\n\f2.2. INTERVAL NEUTROSOPHIC PROPOSITIONAL CALCULUS\n\n25\n\nTable 2.1: Semantics of Four Connectives in Interval Neutrosophic Propositional Logic\nConnectives\nSemantics\nIN L(\u00acp)\nhf (p), 1 \u2212 i(p), t(p)i\nIN L(p \u2227 q)\nhmin(t(p), t(q)), max(i(p), i(q)), max(f (p), f (q))i\nIN L(p \u2228 q)\nhmax(t(p), t(q)), min(i(p), i(q)), min(f (p), f (q))i\nIN L(p \u2192 q) hmin(1, 1 \u2212 t(p) + t(q)), max(0, i(q) \u2212 i(p)), max(0, f (q) \u2212 f (p))i\n\nDefinition 32 Two formulas p and q are said to be equivalent, denoted p = q, if and only if the IN L(p) =\nIN L(q) for every interpretation function IN L.\n\u0003\nTheorem 8 Let F be the set of formulas and \u2227 be the meet and \u2228 the join, then hF ; \u2227, \u2228i is a distributive\nlattice.\nProof We leave the proof to the reader.\nTheorem 9 If p and p \u2192 q are tautologies, then q is also a tautology.\nProof Since p and p \u2192 q are tautologies then for every IN L, IN L(p) = IN L(p \u2192 q) = h1, 0, 0i, that is\nt(p) = 1, i(p) = f (p) = 0, t(p \u2192 q) = min(1, 1 \u2212 t(p) + t(q)) = 1, i(p \u2192 q) = max(0, i(q) \u2212 f (p)) = 0,\nf (p \u2192 q) = max(0, f (q) \u2212 f (p)) = 0. Hence,\nt(q) = 1, i(q) = f(q) = 0. So q is a tautology.\n\n2.2.3\n\nProof Theory of Interval Neutrosophic Propositional Calculus\n\nHere we give the proof theory for interval neutrosophic propositional logic to complement the semantics\npart.\nDefinition 33 The interval neutrosophic propositional logic is defined by the following axiom schema.\np \u2192 (q \u2192 p)\np1 \u2227 . . . \u2227 pm \u2192 q1 \u2228 . . . qn provided some pi is some qj\np \u2192 (q \u2192 p \u2227 q)\n(p \u2192 r) \u2192 ((q \u2192 r) \u2192 (p \u2228 q \u2192 r))\n(p \u2228 q) \u2192 r iff p \u2192 r and q \u2192 r\np \u2192 q iff \u00acq \u2192 \u00acp\np \u2192 q and q \u2192 r implies p \u2192 r\np \u2192 q iff p \u2194 (p \u2227 q) iff q \u2192 (p \u2228 q)\n\u0003\n\n\f26\n\nCHAPTER 2. INTERVAL NEUTROSOPHIC LOGIC\n\nThe concept of (formal) deduction of a formula from a set of formulas, that is, using the standard\nnotation, \u0393 \u22a2 p, is defined as usual; in this case, we say that p is a syntactical consequence of the formulas\nin T .\nTheorem 10 For interval neutrosophic propositional logic, we have\n1. {p} \u22a2 p,\n2. \u0393 \u22a2 p entails \u0393 \u222a \u2206 \u22a2 p,\n3. if \u0393 \u22a2 p for any p \u2208 \u2206 and \u2206 \u22a2 q, then \u0393 \u22a2 q.\nProof It is immediate from the standard definition of the syntactical consequence (\u22a2).\nTheorem 11 In interval neutrosophic propositional logic, we have:\n1. \u00ac\u00acp \u2194 p\n2. \u00ac(p \u2227 q) \u2194 \u00acp \u2228 \u00acq\n3. \u00ac(p \u2228 q) \u2194 \u00acp \u2227 \u00acq\nProof Proof is straight forward by following the semantics of interval neutrosophic propositional logic.\nTheorem 12 In interval neutrosophic propositional logic, the following schema do not hold:\n1. p \u2228 \u00acp\n2. \u00ac(p \u2227 \u00acp)\n3. p \u2227 \u00acp \u2192 q\n4. p \u2227 \u00acp \u2192 \u00acq\n5. {p, p \u2192 q} \u22a2 q\n6. {p \u2192 q, \u00acq} \u22a2 \u00acp\n7. {p \u2228 q, \u00acq} \u22a2 p\n8. \u00acp \u2228 q \u2194 p \u2192 q\nProof Immediate from the semantics of interval neutrosophic propositional logic.\n\n\f2.3. INTERVAL NEUTROSOPHIC PREDICATE CALCULUS\n\n27\n\nExample 11 To illustrate the use of the interval neutrosophic propositional consequence relation, let's\nconsider the following example.\np \u2192 (q \u2227 r)\nr\u2192s\nq \u2192 \u00acs\na\nFrom p \u2192 (q \u2227 r), we get p \u2192 q and p \u2192 r. From p \u2192 q and q \u2192 \u00acs, we get p \u2192 \u00acs. From p \u2192 r and\nr \u2192 s, we get p \u2192 s. Hence, p is equivalent to p \u2227 s and p \u2227 \u00acs. However, we cannot detach s from p\nnor \u00acs from p. This is in part due to interval neutrosophic propositional logic incorporating neither modus\nponens nor and elimination.\n\u0003\n\n2.3\n\nInterval Neutrosophic Predicate Calculus\n\nIn this section, we will extend our consideration to the full language of first order interval neutrosophic\npredicate logic. First we give the formalization of syntax of first order interval neutrosophic predicate logic\nas in classical first-order predicate logic.\n\n2.3.1\n\nSyntax of Interval Neutrosophic Predicate Calculus\n\nDefinition 34 An alphabet of the first order interval neutrosophic predicate calculus consists of seven\nclasses of symbols:\n1. variables, denoted by lower-case letters, sometimes indexed;\n2. constants, denoted by lower-case letters;\n3. function symbols, denoted by lower-case letters, sometimes indexed;\n4. predicate symbols, denoted by lower-case letters, sometimes indexed;\n5. Five connectives \u2227, \u2228, \u00ac, \u2192, \u2194 which are called the conjunction, disjunction, negation, implication,\nand biimplication symbols respectively;\n6. Two quantifiers, the universal quantifier \u2200 (for all) and the existential quantifier \u2203 (there exists);\n7. The parentheses ( and ).\n\u0003\nTo avoid having formulas cluttered with brackets, we adopt the following precedence hierarchy, with\nthe highest precedence at the top:\n\n\f28\n\nCHAPTER 2. INTERVAL NEUTROSOPHIC LOGIC\n\n\u00ac, \u2200, \u2203\n\u2227, \u2228\n\u2192, \u2194\nNext we turn to the definition of the first order interval neutrosophic language given by an alphabet.\nDefinition 35 A term is defined as follows:\n1. A variable is a term.\n2. A constant is a term.\n3. If f is an n-ary function symbol and t1 , . . . , tn are terms, then f (t1 , . . . , fn ) is a term.\n\u0003\nDefinition 36 A (well-formed )formula is defined inductively as follows:\n1. If p is an n-ary predicate symbol and t1 , . . . , tn are terms, then p(t1 , . . . , tn ) is a formula (called an\natomic formula or, more simply, an atom).\n2. If F and G are formulas, then so are (\u00acF ), (F \u2227 G), (F \u2228 G), (F \u2192 G) and (F \u2194 G).\n3. If F is a formula and x is a variable, then (\u2200xF ) and (\u2203xF ) are formulas.\n\u0003\nDefinition 37 The first order interval neutrosophic language given by an alphabet consists of the set of\nall formulas constructed from the symbols of the alphabet.\n\u0003\nExample 12 \u2200x\u2203y(p(x, y) \u2192 q(x)), \u00ac\u2203x(p(x, a) \u2227 q(x)) are formulas.\n\n\u0003\n\nDefinition 38 The scope of \u2200x (resp. \u2203x) in \u2200xF (resp. \u2203xF ) is F . A bound occurrence of a variable\nin a formula is an occurrence immediately following a quantifier or an occurrence within the scope of a\nquantifier, which has the same variable immediately after the quantifier. Any other occurrence of a variable\nis free.\n\u0003\nExample 13 In the formula \u2200xp(x, y) \u2228 q(x), the first two occurrences of x are bound, while the third\noccurrence is free, since the scope of \u2200x is p(x, y) and y is free.\n\u0003\n\n\f2.3. INTERVAL NEUTROSOPHIC PREDICATE CALCULUS\n\n2.3.2\n\n29\n\nSemantics of Interval Neutrosophic Predicate Calculus\n\nIn this section, we study the semantics of interval neutrosophic predicate calculus, the purpose of which\nis the assignment of a meaning to well-formed formulas. In the interval neutrosophic propositional logic,\nan interpretation is an assignment of truth values (ordered triple component) to propositions. In the first\norder interval neutrosophic predicate logic, since there are variables involved, we have to do more than\nthat. To define an interpretation for a well-formed formula in this logic, we have to specify two things, the\ndomain and an assignment to constants and predicate symbols occurring in the formula. The following\nis the formal definition of an interpretation of a formula in the first order interval neutrosophic predicate\nlogic.\nDefinition 39 An interpretation function (or interpretation) of a formula F in the first order interval\nneutrosophic predicate logic consists of a nonempty domain D, and an assignment of \"values\" to each\nconstant and predicate symbol occurring in F as follows:\n1. To each constant, we assign an element in D.\n2. To each n-ary function symbol, we assign a mapping from Dn to D. (Note that D n = {(x1 , . . . , xn )|x1 \u2208\nD, . . . , xn \u2208 D}).\n3. Predicate symbols get their meaning through evaluation functions E which assign to each variable x\nan element E(x) \u2208 D. To each n-ary predicate symbol p, there is a function IN P (p) : D n \u2192 N . So\nIN P (p(x1 , . . . , xn )) = IN P (p)(E(x1 ), . . . , E(xn )).\n\u0003\nThat is, IN P (p)(a1 , . . . , an ) = ht(p(a1 , . . . , an )), i(p(a1 , . . . , an )), f (p(a1 , . . . , an )),\nwhere t(p(a1 , . . . , an )), i(p(a1 , . . . , an )), f (p(a1 , . . . , an )) \u2286 [0, 1]. They are called truth-degree, indeterminacydegree and falsity-degree of p(a1 , . . . , an ) respectively. We assume that the interpretation function IN P\nassigns to the logical truth T : IN P (T ) = h1, 1, 0i, and to F : IN P (F ) = h0, 0, 1i.\nThe semantics of four interval neutrosophic predicate connectives and two quantifiers is given in Table\nII. For simplification of notation, we use p to denote p(a1 , . . . , ai ). Note that p \u2194 q if and only if p \u2192 q\nand q \u2192 p.\nExample 14 Let D = 1, 2, 3 and p(1) = h0.5, 1, 0.4i, p(2) = h1, 0.2, 0i, p(3) = h0.7, 0.4, 0.7i.\nIN P (\u2200xp(x)) = h0.5, 0.2, 0.7i, and IN P (\u2203xp(x)) = h1, 1, 0i.\n\nThen\n\u0003\n\nDefinition 40 A formula F is consistent (satisfiable) if and only if there exists an interpretation I such\nthat F is evaluated to h1, 1, 0i in I. If a formula F is T in an interpretation I, we say that I is a model\nof F and I satisfies F .\n\u0003\nDefinition 41 A formula F is inconsistent (unsatisfiable) if and only if there exists no interpretation that\nsatisfies F .\n\u0003\n\n\f30\n\nCHAPTER 2. INTERVAL NEUTROSOPHIC LOGIC\n\nTable 2.2: Semantics of Four Connectives and Two Quantifiers in Interval Neutrosophic Predicate Logic\nConnectives\nSemantics\nIN P (\u00acp)\nhf (p), 1 \u2212 i(p), t(p)i\nIN P (p \u2227 q)\nhmin(t(p), t(q)), max(i(p), i(q)), max(f (p), f (q))i\nIN P (p \u2228 q)\nhmax(t(p), t(q)), min(i(p), i(q)), min(f (p), f (q))i\nIN P (p \u2192 q) hmin(1, 1 \u2212 t(p) + t(q)), max(0, i(q) \u2212 i(p)), max(0, f (q) \u2212 f (p))i\nIN P (\u2200xF )\nhmin t(F (E(x))), min i(F (E(x))), max f (F (E(x)))i, E(x) \u2208 D\nIN P (\u2203xF )\nhmax t(F (E(x))), max i(F (E(x))), min f (F (E(x)))i, E(x) \u2208 D\n\nDefinition 42 A formula F is valid if and only if every interpretation of F satisfies F .\n\n\u0003\n\nDefinition 43 A formula F is a logical consequence of formulas F1 , . . . , Fn if and only if for every interpretation I, if F1 \u2227 . . . \u2227 Fn is true in I, F is also true in I.\n\u0003\nExample 15 (\u2200x)(p(x) \u2192 (\u2203y)p(y)) is valid, (\u2200x)p(x) \u2227 (\u2203y)\u00acp(y) is consistent.\n\n\u0003\n\nTheorem 13 There is no inconsistent formula in the first order interval neutrosophic predicate logic.\nProof It is direct from the definition of semantics of interval neutrosophic predicate logic.\nNote that the first order interval neutrosophic predicate logic can be considered as an extension of the\ninterval neutrosophic propositional logic. When a formula in the first order logic contains no variables and\nquantifiers, it can be treated just as a formula in the propositional logic.\n\n2.3.3\n\nProof Theory of Interval Neutrosophic Predicate Calculus\n\nIn this part, we give the proof theory for first order interval neutrosophic predicate logic to complement\nthe semantics part.\nDefinition 44 The first order interval neutrosophic predicate logic is defined by the following axiom\nschema.\n(p \u2192 q(x)) \u2192 (p \u2192 \u2200xq(x))\n\u2200xp(x) \u2192 p(a)\np(x) \u2192 \u2203xp(x)\n(p(x) \u2192 q) \u2192 (\u2203xp(x) \u2192 q)\n\u0003\nTheorem 14 In the first order interval neutrosophic predicate logic, we have:\n\n\f2.3. INTERVAL NEUTROSOPHIC PREDICATE CALCULUS\n\n31\n\n1. p(x) \u22a2 \u2200xp(x)\n2. p(a) \u22a2 \u2203xp(x)\n3. \u2200xp(x) \u22a2 p(y)\n4. \u0393 \u222a {p(x)} \u22a2 q, then \u0393 \u222a {\u2203xp(x)} \u22a2 q\nProof Directly from the definition of the semantics of first order interval neutrosophic predicate logic.\nTheorem 15 In the first order interval neutrosophic predicate logic, the following schemes are valid, where\nr is a formula in which x does not appear free:\n1. \u2200xr \u2194 r\n2. \u2203xr \u2194 r\n3. \u2200x\u2200yp(x, y) \u2194 \u2200y\u2200xp(x, y)\n4. \u2203x\u2203yp(x, y) \u2194 \u2203y\u2203xp(x, y)\n5. \u2200x\u2200yp(x, y) \u2192 \u2200xp(x, x)\n6. \u2203xp(x, x) \u2192 \u2203x\u2203yp(x, y)\n7. \u2200xp(x) \u2192 \u2203xp(x)\n8. \u2203x\u2200yp(x, y) \u2192 \u2200y\u2203xp(x, y)\n9. \u2200x(p(x) \u2227 q(x)) \u2194 \u2200xp(x) \u2227 \u2200xq(x)\n10. \u2203x(p(x) \u2228 q(x)) \u2194 \u2203xp(x) \u2228 \u2203xq(x)\n11. p \u2227 \u2200xq(x) \u2194 \u2200x(p \u2227 q(x))\n12. p \u2228 \u2200xq(x) \u2194 \u2200x(p \u2228 q(x))\n13. p \u2227 \u2203xq(x) \u2194 \u2203x(p \u2227 q(x))\n14. p \u2228 \u2203xq(x) \u2194 \u2203x(p \u2228 q(x))\n15. \u2200x(p(x) \u2192 q(x)) \u2192 (\u2200xp(x) \u2192 \u2200xq(x))\n16. \u2200x(p(x) \u2192 q(x)) \u2192 (\u2203xp(x) \u2192 \u2203xq(x))\n17. \u2203x(p(x) \u2227 q(x)) \u2192 \u2203xp(x) \u2227 \u2203xq(x)\n18. \u2200xp(x) \u2228 \u2200xq(x) \u2192 \u2200x(p(x) \u2228 q(x))\n\n\f32\n\nCHAPTER 2. INTERVAL NEUTROSOPHIC LOGIC\n\n19. \u00ac\u2203x\u00acp(x) \u2194 \u2200xp(x)\n20. \u00ac\u2200x\u00acp(x) \u2194 \u2203p(x)\n21. \u00ac\u2203xp(x) \u2194 \u2200x\u00acp(x)\n22. \u2203x\u00acp(x) \u2194 \u00ac\u2200xp(x)\nProof It is straightforward from the definition of the semantics and axiomatic schema of first order interval\nneutrosophic predicate logic.\n\n2.4\n\nAn Application of Interval Neutrosophic Logic\n\nIn this section we provide one practical application of the interval neutrosophic logic \u2013 Interval Neutrosophic Logic System (INLS). INLS can handle rule uncertainty as same as type-2 FLS [LM00], besides, it\ncan handle rule inconsistency without the danger of trivialization. Like the classical FLS, INLS is also characterized by IF-THEN rules. INLS consists of neutrosophication, neutrosophic inference, a neutrosophic\nrule base, neutrosophic type reduction and deneutrosophication. Given an input vector x = (x1 , . . . , xn ),\nwhere x1 , . . . , xn can be crisp inputs or neutrosophic sets, the INLS will generate a crisp output y. The\ngeneral scheme of INLS is shown in Fig. 2.1.\nNeutrosophication\ntruth-membership\nfunction\n\nInput\n\nindeterminacymembership\nfunction\n\nfalsity-membership\nfunction\n\nNeutrosophic\nInference\n\nCrisp Output\nNeutrosophic\nType Reduction\n\nDeneutrosophication\n\nNeutrosophic\nRule Base\n\nFigure 2.1: General Scheme of an INLS\nSuppose the neutrosophic rule base consists of M rules in which each rule has n antecedents and one\nconsequent. Let the kth rule be denoted by Rk such that IF x1 is Ak1 , x2 is Ak2 , . . ., and xn is Akn ,\n\n\f33\n\n2.4. AN APPLICATION OF INTERVAL NEUTROSOPHIC LOGIC\n\nTHEN y is B k . Aki is an interval neutrosophic set defined on universe Xi with truth-membership function TAk (xi ), indeterminacy-membership function IAk (xi ) and falsity-membership function FAk (xi ), where\ni\ni\ni\nTAk (xi ), IAk (xi ), FAk (xi ) \u2286 [0, 1], 1 \u2264 i \u2264 n. B k is an interval neutrosophic set defined on universe Y with\ni\ni\ni\ntruth-membership function TB k (y), indeterminacy-membership function IB k (y) and falsity-membership\nfunction\nFB k (y), where TB k (y), IB k (y), FB k (y) \u2286 [0, 1]. Given fact x1 is \u00c3k1 , x2 is \u00c3k2 , . . ., and xn is \u00c3kn , then consequence y is B\u0303 k . \u00c3ki is an interval neutrosophic set defined on universe Xi with truth-membership function T\u00c3k (xi ), indeterminacy-membership function I\u00c3k (xi ) and falsity-membership function F\u00c3k (xi ), where\ni\n\ni\n\ni\n\nT\u00c3k (xi ), I\u00c3k (xi ), F\u00c3k (xi ) \u2286 [0, 1], 1 \u2264 i \u2264 n. B\u0303 k is an interval neutrosophic set defined on universe Y with\ni\ni\ni\ntruth-membership function TB\u0303 k (y), indeterminacy-membership function IB\u0303 k (y) and falsity-membership\nfunction\nFB\u0303 k (y), where TB\u0303 k (y), IB\u0303 k (y), FB\u0303 k (y) \u2286 [0, 1]. In this chapter, we consider ai \u2264 xi \u2264 bi and \u03b1 \u2264 y \u2264 \u03b2.\nAn unconditional neutrosophic proposition is expressed by the phrase: \"Z is C\", where Z is a variable\nthat receives values z from a universal set U , and C is an interval neutrosophic set defined on U that\nrepresents a neutrosophic predicate. Each neutrosophic proposition p is associated with ht(p), i(p), f (p)i\nwith t(p), i(p), f (p) \u2286 [0, 1]. In general, for any value z of Z, ht(p), i(p), f (p)i = hTC (z), IC (z), FC (z)i.\nFor implication p \u2192 q, we define the semantics as:\n\nsup tp\u2192q = min(sup t(p), sup t(q)),\n\n(2.1)\n\ninf tp\u2192q = min(inf t(p), inf t(q)),\n\n(2.2)\n\nsup ip\u2192q = max(sup i(p), sup i(q)),\n\n(2.3)\n\ninf ip\u2192q = max(inf i(p), inf i(q)),\n\n(2.4)\n\nsup fp\u2192q = max(sup f (p), sup f (q)),\n\n(2.5)\n\ninf fp\u2192q = max(inf f (p), inf f (q)),\n\n(2.6)\n\nwhere t(p), i(p), f (p), t(q), i(q), f (q) \u2286 [0, 1].\nLet X = X1 \u00d7 * * * \u00d7 Xn . The truth-membership function, indeterminacy-membership function and\nfalsity-membership function TB\u0303 k (y), IB\u0303 k (y), FB\u0303 k (y) of a fired kth rule can be represented using the definition\nof interval neutrosophic composition functions (1.44\u20131.46) and the semantics of conjunction and disjunction\n\n\f34\n\nCHAPTER 2. INTERVAL NEUTROSOPHIC LOGIC\n\ndefined in Table 2.2 and equations (2.1\u20132.6) as:\nsup TB\u0303 k (y) = sup min(sup T\u00c3k (x1 ), sup TAk (x1 ), . . . , sup T\u00c3k (xn ), sup TAkn (xn ), sup TB k (y)), (2.7)\n1\n\n1\n\nx\u2208X\n\nn\n\ninf TB\u0303 k (y) = sup min(inf T\u00c3k (x1 ), inf TAk (x1 ), . . . , inf T\u00c3k (xn ), inf TAkn (xn ), inf TB k (y)),\n\n(2.8)\n\nsup IB\u0303 k (y) = sup max(sup I\u00c3k (x1 ), sup IAk (x1 ), . . . , sup I\u00c3k (xn ), sup IAkn (xn ), sup IB k (y)),\n\n(2.9)\n\nn\n\n1\n\n1\n\nx\u2208X\n\nn\n\n1\n\n1\n\nx\u2208X\n\ninf IB\u0303 k (y) = sup max(inf I\u00c3k (x1 ), inf IAk (x1 ), . . . , inf I\u00c3k (xn ), inf IAkn (xn ), inf IB k (y)),\nn\n\n1\n\n1\n\nx\u2208X\n\n(2.10)\n\ninf max(sup F\u00c3k (x1 ), sup FAk (x1 ), . . . , sup F\u00c3k (xn ), sup FAkn (xn ), sup FB k (y)),(2.11)\n\nsup FB\u0303 k (y) =\n\nx\u2208X\n\ninf FB\u0303 k (y) =\n\nx\u2208X\n\nn\n\n1\n\n1\n\ninf max(inf F\u00c3k (x1 ), inf FAk (x1 ), . . . , inf F\u00c3k (xn ), inf FAkn (xn ), inf FB k (y)),\nn\n\n1\n\n1\n\n(2.12)\n\nwhere y \u2208 Y .\nNow, we give the algorithmic description of INLS.\nBEGIN\nStep 1: Neutrosophication\nThe purpose of neutrosophication is to map inputs into interval neutrosophic input sets. Let Gi k be\nan interval neutrosophic input set to represent the result of neutrosophication of ith input variable of kth\nrule, then\nsup TGi k (xi ) =\ninf TGk (xi ) =\ni\n\nsup IGk (xi ) =\ni\n\ninf IGk (xi ) =\ni\n\nsup FGk (xi ) =\ni\n\ninf FGk (xi ) =\ni\n\nsup min(sup T\u00c3k (xi ), sup TAk (xi )),\n\n(2.13)\n\nsup min(inf T\u00c3k (xi ), inf TAk (xi )),\n\n(2.14)\n\nsup max(sup I\u00c3k (xi ), sup IAk (xi )),\n\n(2.15)\n\nsup max(inf I\u00c3k (xi ), inf IAk (xi )),\n\n(2.16)\n\ninf max(sup F\u00c3k (xi ), sup FAk (xi )),\n\n(2.17)\n\ninf max(inf F\u00c3k (xi ), inf FAk (xi )),\n\n(2.18)\n\nxi \u2208Xi\n\ni\n\ni\n\ni\n\ni\n\nxi \u2208Xi\n\nxi \u2208Xi\n\ni\n\ni\n\nxi \u2208Xi\n\nxi \u2208Xi\n\ni\n\ni\n\nxi \u2208Xi\n\ni\n\ni\n\ni\n\ni\n\nwhere xi \u2208 Xi .\nIf xi are crisp inputs, then equations (50\u201355) are simplified to\nsup TGk (xi ) = sup TAk (xi ),\n\n(2.19)\n\ninf TGk (xi ) = inf TAk (xi ),\n\n(2.20)\n\nsup IGk (xi ) = sup IAk (xi ),\n\n(2.21)\n\ninf IGk (xi ) = inf IAk (xi ),\n\n(2.22)\n\nsup FGk (xi ) = sup FAk (xi ),\n\n(2.23)\n\ninf FGk (xi ) = inf FAk (xi ),\n\n(2.24)\n\ni\n\ni\n\ni\n\ni\n\ni\n\ni\n\ni\n\ni\n\ni\n\ni\n\ni\n\ni\n\n\f2.4. AN APPLICATION OF INTERVAL NEUTROSOPHIC LOGIC\n\n35\n\nwhere xi \u2208 Xi .\nFig. 2 shows the conceptual diagram for neutrosophication of a crisp input x1 .\n\ntruth-membership\nfunction\n1\n\nsup T Ai (xi )\ninf T Ai (x i)\n\nXi\n\nIndeterminacymembership\nfunction\n1\n\nsup I Ai (x i)\ninf I Ai (xi )\n\nXi\n\nfalsity-membership\nfunction\n1\n\nsup F Ai (x i)\ninf F Ai (x i)\n\nxi\n\nXi\n\nFigure 2.2: Conceptual Diagram for Neutrosophication of Crisp Input\n\nStep 2: Neutrosophic Inference\nThe core of INLS is the neutrosophic inference, the principle of which has already been explained above.\nSuppose the kth rule is fired. Let Gk be an interval neutrosophic set to represent the result of the input\n\n\f36\n\nCHAPTER 2. INTERVAL NEUTROSOPHIC LOGIC\n\nand antecedent operation for kth rule, then\nsup TGk (x) = sup min(sup T\u00c3k (x1 ), sup TAk (x1 ), . . . , sup T\u00c3k (xn ), sup TAkn (xn )),\n\n(2.25)\n\ninf TGk (x) = sup min(inf T\u00c3k (x1 ), inf TAk (x1 ), . . . , inf T\u00c3k (xn ), inf TAkn (xn )),\n\n(2.26)\n\nsup IGk (x) = sup max(sup I\u00c3k (x1 ), sup IAk (x1 ), . . . , sup I\u00c3k (xn ), sup IAkn (xn )),\n\n(2.27)\n\ninf IGk (x) = sup max(inf I\u00c3k (x1 ), inf IAk (x1 ), . . . , inf I\u00c3k (xn ), inf IAkn (xn )),\n\n(2.28)\n\nx\u2208X\n\nx\u2208X\n\nx\u2208X\n\nx\u2208X\n\nsup FGk (x) =\ninf FGk (x) =\n\n1\n\n1\n\nn\n\nn\n\n1\n\n1\n\nn\n\n1\n\n1\n\nn\n\n1\n\n1\n\ninf max(sup F\u00c3k (x1 ), sup FAk (x1 ), . . . , sup F\u00c3k (xn ), sup FAkn (xn )),\n\n(2.29)\n\ninf max(inf F\u00c3k (x1 ), inf FAk (x1 ), . . . , inf F\u00c3k (xn ), inf FAkn (xn )),\n\n(2.30)\n\nx\u2208X\n\nx\u2208X\n\nn\n\n1\n\n1\n\nn\n\n1\n\n1\n\nwhere xi \u2208 Xi .\nHere we restate the result of neutrosophic inference:\n\nsup TB\u0303 k (y) = min(sup TGk (x), sup TB k (y)),\n\n(2.31)\n\ninf TB\u0303 k (y) = min(inf TGk (x), inf TB k (y)),\n\n(2.32)\n\nsup IB\u0303 k (y) = max(sup IGk (x), sup IB k (y)),\n\n(2.33)\n\ninf IB\u0303 k (y) = max(inf IGk (x), inf IB k (y)),\n\n(2.34)\n\nsup FB\u0303 k (y) = max(sup FGk (x), sup FB k (y)),\n\n(2.35)\n\ninf FB\u0303 k (y) = max(inf FGk (x), inf FB k (y)),\n\n(2.36)\n\n1\n\nwhere x \u2208 X, y \u2208 Y .\nSuppose that N rules in the neutrosophic rule base are fired, where N \u2264 M , then, the output interval\nneutrosophic set B\u0303 is:\nN\n\nsup TB\u0303 (y) = max sup TB\u0303 k (y),\n\n(2.37)\n\ninf TB\u0303 (y) = max inf TB\u0303 k (y),\n\n(2.38)\n\nsup IB\u0303 (y) = min sup IB\u0303 k (y),\n\n(2.39)\n\ninf IB\u0303 (y) = min inf IB\u0303 k (y),\n\n(2.40)\n\nsup FB\u0303 (y) = min sup TB\u0303 k (y),\n\n(2.41)\n\ninf TB\u0303 (y) = min inf TB\u0303 k (y),\n\n(2.42)\n\nk=1\nN\n\nk=1\nN\n\nk=1\nN\n\nk=1\nN\n\nk=1\nN\n\nk=1\n\n\f37\n\n2.4. AN APPLICATION OF INTERVAL NEUTROSOPHIC LOGIC\n\nwhere y \u2208 Y .\nStep 3: Neutrosophic type reduction\nAfter neutrosophic inference, we will get an interval neutrosophic set B\u0303 with TB\u0303 (y), IB\u0303 (y), FB\u0303 (y) \u2286\n[0, 1]. Then, we do the neutrosophic type reduction to transform each interval into one number. There are\nmany ways to do it, here, we give one method:\n\u2032\n\n(2.43)\n\n\u2032\n\n(2.44)\n\n\u2032\n\n(2.45)\n\nTB\u0303 (y) = (inf TB\u0303 (y) + sup TB\u0303 (y))/2,\nIB\u0303 (y) = (inf IB\u0303 (y) + sup IB\u0303 (y))/2,\nFB\u0303 (y) = (inf FB\u0303 (y) + sup FB\u0303 (y))/2,\n\nwhere y \u2208 Y .\nSo, after neutrosophic type reduction, we will get an ordinary neutrosophic set (a type-1 neutrosophic\nset) B\u0303. Then we need to do the deneutrosophication to get a crisp output.\nStep 4: Deneutrosophication\nThe purpose of deneutrosophication is to convert an ordinary neutrosophic set (a type-1 neutrosophic\nset) obtained by neutrosophic type reduction to a single real number which represents the real output.\nSimilar to defuzzification [KY95], there are many deneutrosophication methods according to different\napplications. Here we give one method. The deneutrosophication process consists of two steps.\nStep 4.1: Synthesization: It is the process to transform an ordinary neutrosophic set (a type-1 neutrosophic set) B\u0303 into a fuzzy set B\u0304. It can be expressed using the following function:\n\u2032\n\n\u2032\n\n\u2032\n\nf (TB\u0303 (y), IB\u0303 (y), FB\u0303 (y)) : [0, 1] \u00d7 [0, 1] \u00d7 [0, 1] \u2192 [0, 1]\n\n(2.46)\n\nHere we give one definition of f :\n\u2032\n\n\u2032\n\n\u2032\n\n\u2032\n\nTB\u0304 (y) = a \u2217 TB\u0303 (y) + b \u2217 (1 \u2212 FB\u0303 (y)) + c \u2217 IB\u0303 (y)/2 + d \u2217 (1 \u2212 IB\u0303 (y)/2),\n\n(2.47)\n\nwhere 0 \u2264 a, b, c, d \u2264 1, a + b + c + d = 1.\nThe purpose of synthesization is to calculate the overall truth degree according to three components:\ntruth-membership function, indeterminacy-membership function and falsity-membership function. The\ncomponent\u2013truth-membership function gives the direct information about the truth-degree, so we use it\ndirectly in the formula; The component\u2013falsity-membership function gives the indirect information about\nthe truth-degree, so we use (1\u2212F ) in the formula. To understand the meaning of indeterminacy-membership\nfunction I, we give an example: a statement is \"The quality of service is good\", now firstly a person has\nto select a decision among {T, I, F }, secondly he or she has to answer the degree of the decision in [0, 1].\nIf he or she chooses I = 1, it means 100% \"not sure\" about the statement, i.e., 50% true and 50% false\nfor the statement (100% balanced), in this sense, I = 1 contains the potential truth value 0.5. If he or\nshe chooses I = 0, it means 100% \"sure\" about the statement, i.e., either 100% true or 100% false for the\nstatement (0% balanced), in this sense, I = 0 is related to two extreme cases, but we do not know which\none is in his or her mind. So we have to consider both at the same time: I = 0 contains the potential\n\n\f38\n\nCHAPTER 2. INTERVAL NEUTROSOPHIC LOGIC\n\ntruth value that is either 0 or 1. If I decreases from 1 to 0, then the potential truth value changes from\none value 0.5 to two different possible values gradually to the final possible ones 0 and 1 (i.e., from 100%\nbalanced to 0% balanced), since he or she does not choose either T or F but I, we do not know his or her\nfinal truth value. Therefore, the formula has to consider two potential truth values implicitly represented\nby I with different weights (c and d) because of lack of his or her final decision information after he or\nshe has chosen I. Generally, a > b > c, d; c and d could be decided subjectively or objectively as long as\nenough information is available. The parameters a, b, c and d can be tuned using learning algorithms such\nas neural networks and genetic algorithms in the development of application to improve the performance\nof the INLS.\nStep 4.2: Calculation of a typical neutrosophic value: Here we introduce one method of calculation\nof center of area. The method is sometimes called the center of gravity method or centroid method, the\ndeneutrosophicated value, dn(TB\u0304 (y)) is calculated by the formula\ndn(TB\u0304 (y)) =\nEND.\n\n2.5\n\nR\u03b2\n\nTB\u0304 (y)ydy\n.\nR\u03b2\n\u03b1 TB\u0304 dy\n\n\u03b1\n\n(2.48)\n\nConclusions\n\nIn this chapter, we give the formal definitions of interval neutrosophic logic which are extension of many\nother classical logics such as fuzzy logic, intuitionistic fuzzy logic and paraconsistent logics, etc. Interval\nneutrosophic logic include interval neutrosophic propositional logic and first order interval neutrosophic\npredicate logic. We call them classical (standard) neutrosophic logic. In the future, we also will discuss\nand explore the non-classical (non-standard) neutrosophic logic such as modal interval neutrosophic logic,\ntemporal interval neutrosophic logic, etc. Interval neutrosophic logic can not only handle imprecise, fuzzy\nand incomplete propositions but also inconsistent propositions without the danger of trivialization. The\nchapter also give one application based on the semantic notion of interval neutrosophic logic \u2013 the Interval\nNeutrosophic Logic Systems (INLS) which is the generalization of classical FLS and interval valued fuzzy\nFLS. Interval neutrosophic logic will have a lot of potential applications in computational Web intelligence [ZKLY04]. For example, current fuzzy Web intelligence techniques can be improved by using more\nreliable interval neutrosophic logic methods because T, I and F are all used in decision making. In large,\nsuch robust interval neutrosophic logic methods can also be used in other applications such as medical\ninformatics, bioinformatics and human-oriented decision-making under uncertainty. In fact, interval neutrosophic sets and interval neutrosophic logic could be applied in the fields that fuzzy sets and fuzz logic\nare suitable for, also the fields that paraconsistent logics are suitable for.\n\n\fChapter 3\n\nNeutrosophic Relational Data Model\nIn this chapter, we present a generalization of the relational data model based on interval neutrosophic sets. Our\ndata model is capable of manipulating incomplete as well as inconsistent information. Fuzzy relation or intuitionistic\nfuzzy relation can only handle incomplete information. Associated with each relation are two membership functions\none is called truth-membership function T which keeps track of the extent to which we believe the tuple is in the\nrelation, another is called falsity-membership function which keeps track of the extent to which we believe that it is\nnot in the relation. A neutrosophic relation is inconsistent if there exists one tuple a such that T (a) + F (a) > 1. In\norder to handle inconsistent situation, we propose an operator called \"split\" to transform inconsistent neutrosophic\nrelations into pseudo-consistent neutrosophic relations and do the set-theoretic and relation-theoretic operations on\nthem and finally use another operator called \"combine\" to transform the result back to neutrosophic relation. For\nthis model, we define algebraic operators that are generalisations of the usual operators such as interesection, union,\nselection, join on fuzzy relations. Our data model can underlie any database and knowledge-base management system\nthat deals with incomplete and inconsistent information.\n\n3.1\n\nIntroduction\n\nRelational data model was proposed by Ted Codd's pioneering paper [Cod70]. Since then, relational\ndatabase systems have been extensively studied and a lot of commercial relational database systems are\ncurrently available [EN00, SKS96]. This data model usually takes care of only well-defined and unambiguous data. However, imperfect information is ubiquitous \u2013 almost all the information that we have about\nthe real world is not certain, complete and precise [Par96]. Imperfect information can be classified as:\nincompleteness, imprecision, uncertainty, inconsistency. Incompleteness arises from the absence of a value,\nimprecision from the existence of a value which cannot be measured with suitable precision, uncertainty\nfrom the fact that a person has given a subjective opinion about the truth of a fact which he/she does\nnot know for certain, and inconsistency from the fact that there are two or more conflicting values for a\nvariable.\nIn order to represent and manipulate various forms of incomplete information in relational databases,\n39\n\n\f40\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n\nseveral extensions of the classical relational model have been proposed [Bis83, BMS84, Cod79, Lip79,\nLip81, Mai83]. In some of these extensions, a variety of \"null values\" have been introduced to model\nunknown or not-applicable data values. Attempts have also been made to generalize operators of relational algebra to manipulate such extended data models [Bis83, Cod79, Mai83, LS90, LS91]. The fuzzy\nset theory and fuzzy logic proposed by Zadeh [Zad65a] provide a requisite mathematical framework for\ndealing with incomplete and imprecise information. Later on, the concept of interval-valued fuzzy sets\nwas proposed to capture the fuzziness of grade of membership itself [Tur86]. In 1986, Atanassov introduced the intuitionistic fuzzy set [Ata86] which is a generalization of fuzzy set and provably equivalent\nto interval-valued fuzzy set. The intuitionistic fuzzy sets consider both truth-membership T and falsitymembership F with T (a), F (a) \u2208 [0, 1] and T (a) + F (a) \u2264 1. Because of the restriction, the fuzzy set,\ninterval-valued fuzzy set and intuitionistic fuzzy set cannot handle inconsistent information. Some authors\n[AR84, Bal83, BP82, CK78, KZ86, Pra84, RM88] have studied relational databases in the light of fuzzy\nset theory with an objective to accommodate a wider range of real-world requirements and to provide\ncloser man-machine interactions. Probability, possibility and Dempster-Shafer theory have been proposed\nto deal with uncertainty. Possibility theory [Zad78] is built upon the idea of a fuzzy restriction. That\nmeans a variable could only take its value from some fuzzy set of values and any value within that set is\na possible value for the variable. Because values have different degrees of membership in the set, they are\npossible to different degrees. Prade and Testemale [PT84] initially suggested using possibility theory to\ndeal with incomplete and uncertain information in database. Their work is extended in [PT87] to cover\nmultivalued attributes. Wong [Won82] proposes a method that quantifies the uncertainty in a database\nusing probabilities. His method maybe is the simplest one which attached a probability to every member\nof a relation, and to use these values to provide the probability that a particular value is the correct answer\nto a particular query. Carvallo and Pittarelli [CP87] also use probability theory to model uncertainty\nin relational databases systems. Their method augmented projection an join operations with probability\nmeasures.\nHowever, unlike incomplete, imprecise and uncertain information, inconsistent information has not\nenjoyed enough research attention. In fact, inconsistent information exists in a lot of applications. For\nexample, in data warehousing application, inconsistency will appear when trying to integrate the data from\nmany different sources. Another example is that in the expert system, there exist facts which are inconsistent with each other. Generally, two basic approaches have been followed in solving the inconsistency\nproblem in knowledge bases: belief revision and paraconsistent logic. The goal of the first approach is to\nmake an inconsistent theory consistent, either by revising it or by representing it by a consistent semantics. On the other hand, the paraconsistent approach allows reasoning in the presence of inconsistency,\nand contradictory information can be derived or introduced without trivialization [dACM02b]. Bagai and\nSunderraman [BS95, SB95] proposed a paraconsistent relational data model to deal with incomplete and\ninconsistent information. The data model has been applied to compute the well-founded and fitting model\nof logic programming [BS96b, BS96a]. This data model is based on paraconsistent logics which were studied\nin detail by de Costa [Cos77a] and Belnap [Bel77b].\nIn this chapter, we present a new relational data model \u2013 neutrosophic relational data model (NRDM).\nOur model is based on the neutrosophic set theory which is an extension of intuitionistic fuzzy set\n\n\f41\n\n3.1. INTRODUCTION\n\ntheory[GB93] and is capable of manipulating incomplete as well as inconsistent information. We use\nboth truth-membership function grade \u03b1 and falsity-membership function grade \u03b2 to denote the status\nof a tuple of a certain relation with \u03b1, \u03b2 \u2208 [0, 1] and \u03b1 + \u03b2 \u2264 2. NRDM is the generalization of fuzzy\nrelational data model (FRDM). That is, when \u03b1 + \u03b2 = 1, neutrosophic relation is the ordinary fuzzy\nrelation. This model is distinct with paraconsistent relational data model (PRDM), in fact it can be easily\nshown that PRDM is a special case of PIFRDM. That is when \u03b1, \u03b2 = 0 or 1, neutrosophic relation is just\nparaconsistent relation. We can use Figure 3.1 to express the relationship among FRDM, PRDM and\nPIFRDM.\nNeutrosophic\nRelational\nData Model\n\nFuzzy\nRelational\nData Model\n\nParaconsistent\nRelational\nData Model\n\nClassical\nRelational\nData Model\n\nFigure 3.1: Relationship Among FRDM, PRDM, NRDM and RDM\nWe introduce neutrosophic relations, which are the fundamental mathematical structures underlying\nour model. These structures are strictly more general than classical fuzzy relations and intuitionistic fuzzy\nrelations (interval-valued fuzzy relations), in that for any fuzzy relation or intuitionistic fuzzy relation\n(interval-valued fuzzy relation) there is a neutrosophic relation with the same information content, but not\nvice versa. The claim is also true for the relationship between neutrosophic relations and paraconsistent\nrelations. We define algebraic operators over neutrosophic relations that extend the standard operators\nsuch as selection, join, union over fuzzy relations.\nThere are many potential applications of our new data model. Here are some examples:\n(a) Web mining. Essentially the data and documents on the Web are heterogeneous, inconsistency is\nunavoidable. Using the presentation and reasoning method of our data model, it is easier to capture\nimperfect information on the Web which will provide more potentially value-added information.\n\n\f42\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n\n(b) Bioinformatics. There is a proliferation of data sources. Each research group and each new experimental technique seems to generate yet another source of valuable data. But these data can be\nincomplete and imprecise and even inconsistent. We could not simply throw away one data in favor\nof other data. So how to represent and extract useful information from these data will be a challenge\nproblem.\n(c) Decision Support System. In decision support system, we need to combine the database with the\nknowledge base. There will be a lot of uncertain and inconsistent information, so we need an efficient\ndata model to capture these information and reasoning with these information.\nThe chapter is organized as follow. Section 3.2 of the chapter deals with some of the basic definitions and\nconcepts of fuzzy relations and operations. Section 3.3 introduces neutrosophic relations and two notions\nof generalising the fuzzy relational operators such as union, join, projection for these relations. Section 3.4\npresents some actual generalised algebraic operators for neutrosophic relations. These operators can be\nused for sepcifying queries for database systems built on such relations. Section 3.5 gives an illustrative\napplication of these operators. Finally, Section 3.8 contains some concluding remarks and directions for\nfuture work.\n\n3.2\n\nFuzzy Relations and Operations\n\nIn this section, we present the essential concepts of a fuzzy relational database. Fuzzy relations associate a\nvalue between 0 and 1 with every tuple representing the degree of membership of the tuple in the relation.\nWe also present several useful query operators on fuzzy relations.\nLet a relation scheme (or just scheme) \u03a3 be a finite set of attribute names, where for any attribute name\nA \u2208 \u03a3, dom(A) is a non-empty domain of values for A. A tuple on \u03a3 is any map t : \u03a3 \u2192 \u222aA\u2208\u03a3 dom(A),\nsuch that t(A) \u2208 dom(A), for each A \u2208 \u03a3. Let \u03c4 (\u03a3) denote the set of all tuples on \u03a3.\nDefinition 45 A fuzzy relation on scheme \u03a3 is any map R : \u03c4 (\u03a3) \u2192 [0, 1]. We let F(\u03a3) be the set of all\nfuzzy relations on \u03a3. \u0003\nIf \u03a3 and \u2206 are relation schemes such that \u2206 \u2286 \u03a3, then for any tuple t \u2208 \u03c4 (\u2206), we let t\u03a3 denote the set\n\u2208 \u03c4 (\u03a3) | t\u2032 (A) = t(A), for all A \u2208 \u2206} of all extensions of t. We extend this notion for any T \u2286 \u03c4 (\u2206) by\ndefining T \u03a3 = \u222at\u2208T t\u03a3 .\n{t\u2032\n\n3.2.1\n\nSet-theoretic operations on Fuzzy relations\n\nDefinition 46 Union: Let R and S be fuzzy relations on scheme \u03a3. Then, R \u222a S is a fuzzy relation on\nscheme \u03a3 given by\n(R \u222a S)(t) = max{R(t), S(t)}, for any t \u2208 \u03c4 (\u03a3).\u0003\n\n\f3.3. NEUTROSOPHIC RELATIONS\n\n43\n\nDefinition 47 Complement: Let R be a fuzzy relation on scheme \u03a3. Then, \u2212R is a fuzzy relation on\nscheme \u03a3 given by\n(\u2212R)(t) = 1 \u2212 R(t), for any t \u2208 \u03c4 (\u03a3).\u0003\nDefinition 48 Intersection: Let R and S be fuzzy relations on scheme \u03a3. Then, R\u2229S is a fuzzy relation\non scheme \u03a3 given by\n(R \u2229 S)(t) = min{R(t), S(t)}, for any t \u2208 \u03c4 (\u03a3).\u0003\nDefinition 49 Difference: Let R and S be fuzzy relations on scheme \u03a3. Then, R \u2212 S is a fuzzy relation\non scheme \u03a3 given by\n(R \u2212 S)(t) = min{R(t), 1 \u2212 S(t)}, for any t \u2208 \u03c4 (\u03a3).\u0003\n\n3.2.2\n\nRelation-theoretic operations on Fuzzy relations\n\nDefinition 50 Let R and S be fuzzy relations on schemes \u03a3 and \u2206, respectively. Then, the natural join\n(or just join) of R and S, denoted R \u22ca\n\u22c9 S, is a fuzzy relation on scheme \u03a3 \u222a \u2206, given by\n(R \u22ca\n\u22c9 S)(t) = min{R(\u03c0\u03a3 (t)), S(\u03c0\u2206 (t))}, for any t \u2208 \u03c4 (\u03a3 \u222a \u2206).\u0003\nDefinition 51 Let R be a fuzzy relation on scheme \u03a3 and let \u2206 \u2286 \u03a3. Then, the projection of R onto \u2206,\ndenoted by \u03a0\u2206 (R) is a fuzzy relation on scheme \u2206 given by\n(\u03a0\u2206 (R))(t) = max{R(u)|u \u2208 t\u03a3 }, for any t \u2208 \u03c4 (\u2206).\u0003\nDefinition 52 Let R be a fuzzy relation on scheme \u03a3, and let F be any logic formula involving attribute\nnames in \u03a3, constant symbols (denoting values in the attribute domains), equality symbol =, negation\nsymbol \u00ac, and connectives \u2228 and \u2227. Then, the selection of R by F , denoted \u03c3\u0307F (R), is a fuzzy relation on\nscheme \u03a3, given by\n\u001a\nR(t) if t \u2208 \u03c3F (\u03c4 (\u03a3))\n(\u03c3\u0307F (R))(t) =\n0\nOtherwise\nwhere \u03c3F is the usual selection of tuples satisfying F . \u0003\n\n3.3\n\nNeutrosophic Relations\n\nIn this section, we generalize fuzzy relations in such a manner that we are now able to assign a measure\nof belief and a measure of doubt to each tuple. We shall refer to these generalized fuzzy relations as\nneutrosophic relations. So, a tuple in a neutrosophic relation is assigned a measure h\u03b1, \u03b2i, 0 \u2264 \u03b1, \u03b2 \u2264 1.\n\u03b1 will be referred to as the belief factor and \u03b2 will be referred to as the doubt factor. The interpretation\nof this measure is that we believe with confidence \u03b1 and doubt with confidence \u03b2 that the tuple is in the\nrelation. The belief and doubt confidence factors for a tuple need not add to exactly 1. This allows for\n\n\f44\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n\nincompleteness and inconsistency to be represented. If the belief and doubt factors add up to less than\n1, we have incomplete information regarding the tuple's status in the relation and if the belief and doubt\nfactors add up to more than 1, we have inconsistent information regarding the tuple's status in the relation.\nIn contrast to fuzzy relations where the grade of membership of a tuple is fixed, neutrosophic relations\nbound the grade of membership of a tuple to a subinterval [\u03b1, 1 \u2212 \u03b2] for the case \u03b1 + \u03b2 \u2264 1.\nThe operators on fuzzy relations can also be generalised for neutrosophic relations. However, any such\ngeneralization of operators should maintain the belief system intuition behind neutrosophic relations.\nThis section also develops two different notions of operator generalisations.\nWe now formalize the notion of a neutrosophic relation.\nRecall that \u03c4 (\u03a3) denotes the set of all tuples on any scheme \u03a3.\nDefinition 53 A neutrosophic relation R on scheme \u03a3 is any subset of\n\u03c4 (\u03a3) \u00d7 [0, 1] \u00d7 [0, 1].\nFor any t \u2208 \u03c4 (\u03a3), we shall denote an element of R as ht, R(t)+ , R(t)\u2212 i, where R(t)+ is the belief factor\nassigned to t by R and R(t)\u2212 is the doubt factor assigned to t by R. Let V(\u03a3) be the set of all neutrosophic\nrelations on \u03a3.\nDefinition 54 A neutrosophic relation R on scheme \u03a3 is consistent if R(t)+ + R(t)\u2212 \u2264 1, for all\nt \u2208 \u03c4 (\u03a3). Let C(\u03a3) be the set of all consistent neutrosophic relations on \u03a3. R is said to be complete if\nR(t)+ + R(t)\u2212 \u2265 1, for all t \u2208 \u03c4 (\u03a3). If R is both consistent and complete, i.e. R(t)+ + R(t)\u2212 = 1, for all\nt \u2208 \u03c4 (\u03a3), then it is a total neutrosophic relation, and let T (\u03a3) be the set of all total neutrosophic relations\non \u03a3.\nDefinition 55 R is said to be pseudo-consistent if\nmax{bi |(\u2203t \u2208 \u03c4 (\u03a3))(\u2203di )(ht, bi , di i \u2208 R)} + max{di |(\u2203t \u2208 \u03c4 (\u03a3))(\u2203bi )(ht, bi , di i \u2208 R)} > 1, where for these\nht, bi , di i, bi + di = 1. Let P(\u03a3) be the set of all pseudo-consistent neutrosophic relations on \u03a3.\nExample 16 Neutrosophic relation R = {ha, 0.3, 0.7i,\nha, 0.4, 0.6i, hb, 0.2, 0.5i, hc, 0.4, 0.3i} is pseudo-consistent. Because for t = a, max{0.3, 0.4}+max{0.7, 0.6} =\n1.1 > 1.\nIt should be observed that total neutrosophic relations are essentially fuzzy relations where the uncertainty in the grade of membership is eliminated. We make this relationship explicit by defining a one-one\ncorrespondence \u03bb\u03a3 : T (\u03a3) \u2192 F(\u03a3), given by \u03bb\u03a3 (R)(t) = R(t)+ , for all t \u2208 \u03c4 (\u03a3). This correspondence is\nused frequently in the following discussion.\n\nOperator Generalisations\nIt is easily seen that neutrosophic relations are a generalization of fuzzy relations, in that for each fuzzy\nrelation there is a neutrosophic relation with the same information content, but not vice versa. It is thus\n\n\f45\n\n3.3. NEUTROSOPHIC RELATIONS\n\nnatural to think of generalising the operations on fuzzy relations such as union, join, projection etc. to\nneutrosophic relations. However, any such generalization should be intuitive with respect to the belief\nsystem model of neutrosophic relations. We now construct a framework for operators on both kinds of\nrelations and introduce two different notions of the generalization relationship among their operators.\nAn n-ary operator on fuzzy relations with signature h\u03a31 , . . . , \u03a3n+1 i is a function \u0398 : F(\u03a31 ) \u00d7 * * * \u00d7\nF(\u03a3n ) \u2192 F(\u03a3n+1 ), where \u03a31 , . . . , \u03a3n+1 are any schemes. Similarly, an n-ary operator on neutrosophic\nrelations with signature h\u03a31 , . . . , \u03a3n+1 i is a function \u03a8 : V(\u03a31 ) \u00d7 * * * \u00d7 V(\u03a3n ) \u2192 V(\u03a3n+1 ).\nDefinition 56 An operator \u03a8 on neutrosophic relations with signature h\u03a31 , . . . , \u03a3n+1 i is totality preserving if for any total neutrosophic relations R1 , . . . , Rn on schemes \u03a31 , . . . , \u03a3n , respectively, \u03a8(R1 , . . . , Rn )\nis also total. \u0003\nDefinition 57 A totality preserving operator \u03a8 on neutrosophic relations with signature\nh\u03a31 , . . . , \u03a3n+1 i\nis a weak generalization of an operator \u0398 on fuzzy relations with the same signature, if for any total\nneutrosophic relations R1 , . . . , Rn on schemes \u03a31 , . . . , \u03a3n , respectively, we have\n\u03bb\u03a3n+1 (\u03a8(R1 , . . . , Rn )) = \u0398(\u03bb\u03a31 (R1 ), . . . , \u03bb\u03a3n (Rn )).\u0003\nThe above definition essentially requires \u03a8 to coincide with \u0398 on total neutrosophic relations (which are in\none-one correspondence with the fuzzy relations). In general, there may be many operators on neutrosophic\nrelations that are weak generalisations of a given operator \u0398 on fuzzy relations. The behavior of the weak\ngeneralisations of \u0398 on even just the consistent neutrosophic relations may in general vary. We require a\nstronger notion of operator generalization under which, at least when restricted to consistent intuitionistic\nfuzzy relations, the behavior of all the generalised operators is the same. Before we can develop such a\nnotion, we need that of 'representations' of a neutrosophic relation.\nWe associate with a consistent neutrosophic relation R the set of all (fuzzy relations corresponding to)\ntotal neutrosophic relations obtainable from R by filling in the gaps between the belief and doubt factors\nfor each tuple. Let the map reps\u03a3 : C(\u03a3) \u2192 2F (\u03a3) be given by\nreps\u03a3 (R) = {Q \u2208 F(\u03a3) |\n\n^\n\n(R(ti )+ \u2264 Q(ti ) \u2264 1 \u2212 R(ti )\u2212 )}.\n\nti \u2208\u03c4 (\u03a3)\n\nThe set reps\u03a3 (R) contains all fuzzy relations that are 'completions' of the consistent neutrosophic relation\nR. Observe that reps\u03a3 is defined only for consistent neutrosophic relations and produces sets of fuzzy\nrelations. Then we have following observation.\nProposition 1 For any consistent neutrosophic relation R on scheme \u03a3, reps\u03a3 (R) is the singleton\n{\u03bb\u03a3 (R)} iff R is total.\u0003\n\n\f46\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n\nProof It is clear from the definition of consistent and total neutrosophic relations and from the definition\nof reps operation.\nWe now need to extend operators on fuzzy relations to sets of fuzzy relations. For any operator\n\u0398 : F(\u03a31 ) \u00d7 * * * \u00d7 F(\u03a3n ) \u2192 F(\u03a3n+1 ) on fuzzy relations, we let S(\u0398) : 2F (\u03a31 ) \u00d7 * * * \u00d7 2F (\u03a3n ) \u2192 2F (\u03a3n+1 ) be\na map on sets of fuzzy relations defined as follows. For any sets M1 , . . . , Mn of fuzzy relations on schemes\n\u03a31 , . . . , \u03a3n , respectively,\nS(\u0398)(M1 , . . . , Mn ) = {\u0398(R1 , . . . , Rn ) | Ri \u2208 Mi , for all i, 1 \u2264 i \u2264 n}.\nIn other words, S(\u0398)(M1 , . . . , Mn ) is the set of \u0398-images of all tuples in the cartesian product M1 \u00d7* * *\u00d7Mn .\nWe are now ready to lead up to a stronger notion of operator generalization.\nDefinition 58 An operator \u03a8 on neutrosophic relations with signature h\u03a31 , . . . , \u03a3n+1 i is consistency\npreserving if for any consistent neutrosophic relations R1 , . . . , Rn on schemes \u03a31 , . . . , \u03a3n , respectively,\n\u03a8(R1 , . . . , Rn ) is also consistent. \u0003\nDefinition 59 A consistency preserving operator \u03a8 on neutrosophic relations with signature h\u03a31 , . . . , \u03a3n+1 i\nis a strong generalization of an operator \u0398 on fuzzy relations with the same signature, if for any consistent\nneutrosophic relations R1 , . . . , Rn on schemes \u03a31 , . . . , \u03a3n , respectively, we have\nreps\u03a3n+1 (\u03a8(R1 , . . . , Rn )) = S(\u0398)(reps\u03a31 (R1 ), . . . , reps\u03a3n (Rn )).\u0003\nGiven an operator \u0398 on fuzzy relations, the behavior of a weak generalization of \u0398 is 'controlled'\nonly over the total neutrosophic relations. On the other hand, the behavior of a strong generalization is\n'controlled' over all consistent neutrosophic relations. This itself suggests that strong generalization is a\nstronger notion than weak generalization. The following proposition makes this precise.\nProposition 2 If \u03a8 is a strong generalization of \u0398, then \u03a8 is also a weak generalization of \u0398.\u0003\nProof Let h\u03a31 , . . . , \u03a3n+1 i be the signature of \u03a8 and \u0398, and let R1 , . . . , Rn be any total neutrosophic\nrelations on schemes \u03a31 , . . . , \u03a3n , respectively. Since all total relations are consistent, and \u03a8 is a strong\ngeneralization of \u0398, we have that\nreps\u03a3n+1 (\u03a8(R1 , . . . , Rn )) = S(\u0398)(reps\u03a31 (R1 ), . . . , reps\u03a3n (Rn )),\nProposition 1 gives us that for each i, 1 \u2264 i \u2264 n, reps\u03a3i (Ri ) is the singleton set {\u03bb\u03a3i (Ri )}. Therefore,\nS(\u0398)(reps\u03a31 (Ri ), . . . , reps\u03a3n (Rn )) is just the singleton set:\n{\u0398(\u03bb\u03a31 (R1 ), . . . , \u03bb\u03a3n (Rn ))}.\nHere, \u03a8(R1 , . . . , Rn ) is total, and\n\u03bb\u03a3n+1 (\u03a8(R1 , . . . , Rn )) = \u0398(\u03bb\u03a31 (R1 ), . . . , \u03bb\u03a3n (Rn )), i.e. \u03a8 is a weak generalization of \u0398.\n\n\f3.4. GENERALIZED ALGEBRA ON NEUTROSOPHIC RELATIONS\n\n47\n\nThough there may be many strong generalisations of an operator on fuzzy relations, they all behave\nthe same when restricted to consistent neutrosophic relations. In the next section, we propose strong generalisations for the usual operators on fuzzy relations. The proposed generalised operators on neutrosophic\nrelations correspond to the belief system intuition behind neutrosophic relations.\nFirst we will introduce two special operators on neutrosophic relations called split and combine to\ntransform inconsistent neutrosophic relations into pseudo-consistent neutrosophic relations and transform\npseudo-consistent neutrosophic relations into inconsistent neutrosophic relations.\nDefinition 60 (Split) Let R be a neutrosophic relation on scheme \u03a3. Then,\n\u25b3(R) = {ht, b, di|ht, b, di \u2208 R and b + d \u2264 1} \u222a {ht, b\u2032 , d\u2032 i|ht, b, di \u2208 R and b + d > 1 and b\u2032 = b and d\u2032 =\n1 \u2212 b} \u222a {ht, b\u2032 , d\u2032 i|ht, b, di \u2208 R and b + d > 1 and b\u2032 = 1 \u2212 d and d\u2032 = d}.\nIt is obvious that \u25b3(R) is pseudo-consistent if R is inconsistent.\nDefinition 61 (Combine) Let R be a neutrosophic relation on scheme \u03a3. Then,\n\u2207(R) = {ht, b\u2032 , d\u2032 i|(\u2203b)(\u2203d)((ht, b\u2032 , di \u2208 R and (\u2200bi , di )(ht, bi , di i \u2192 b\u2032 \u2265 bi ) and\nht, b, d\u2032 i \u2208 R and (\u2200bi )(\u2200di )(ht, bi , di i \u2192 d\u2032 \u2265 di ))}.\nIt is obvious that \u2207(R) is inconsistent if R is pseudo-consistent.\nNote that strong generalization defined above only holds for consistent or pseudo-consistent neutrosophic relations. For any arbitrary paraconsisent intuitionistic fuzzy relations, we should first use split\noperation to transform them into non inconsistent neutrosophic relations and apply the set-theoretic and\nrelation-theoretic operations on them and finally use combine operation to transform the result into arbitrary neutrosophic relation. For the simplification of notation, the following generalized algebra is defined\nunder such assumption.\n\n3.4\n\nGeneralized Algebra on Neutrosophic Relations\n\nIn this section, we present one strong generalization each for the fuzzy relation operators such as union,\njoin, projection. To reflect generalization, a hat is placed over a fuzzy relation operator to obtain the\ncorresponding neutrosophic relation operator. For example, \u22b2\u22b3 denotes the natural join among fuzzy\nrelations, and \u22b2\u22b3 denotes natural join on neutrosophic relations. These generalized operators maintain the\nbelief system intuition behind neutrosophic relations.\n\nSet-Theoretic Operators\nWe first generalize the two fundamental set-theoretic operators, union and complement.\nDefinition 62 Let R and S be neutrosophic relations on scheme \u03a3. Then,\n\n\f48\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n\nb S, is a neutrosophic relation on scheme \u03a3, given by\n(a) the union of R and S, denoted R \u222a\nb S)(t) = hmax{R(t)+ , S(t)+ }, min{R(t)\u2212 , S(t)\u2212 }i, for any t \u2208 \u03c4 (\u03a3);\n(R \u222a\n\nb R, is a neutrosophic relation on scheme \u03a3, given by\n(b) the complement of R, denoted \u2212\nb R)(t) = hR(t)\u2212 , R(t)+ i, for any t \u2208 \u03c4 (\u03a3).\n(\u2212\n\n\u0003\n\nAn intuitive appreciation of the union operator can be obtained as follows: Given a tuple t, since we\nbelieved that it is present in the relation R with confidence R(t)+ and that it is present in the relation S\nwith confidence S(t)+ , we can now believe that the tuple t is present in the \"either-R-or-S\" relation with\nconfidence which is equal to the larger of R(t)+ and S(t)+ . Using the same logic, we can now believe in\nthe absence of the tuple t from the \"either-R-or-S\" relation with confidence which is equal to the smaller\n(because t must be absent from both R and S for it to be absent from the union) of R(t)\u2212 and S(t)\u2212 . The\ndefinition of complement and of all the other operators on neutrosophic relations defined later can (and\nshould) be understood in the same way.\nb on neutrosophic relations are strong generalisations of the\nb and unary \u2212\nProposition 3 The operators \u222a\noperators \u222a and unary \u2212 on fuzzy relations.\nb S) is the set\nProof Let R and S be consistent neutrosophic relations on scheme \u03a3. Then reps\u03a3 (R \u222a\n^\n{Q |\n(max{R(ti )+ , S(ti )+ } \u2264 Q(ti ) \u2264 1 \u2212 min{R(ti )\u2212 , S(ti )\u2212 })}\nti \u2208\u03c4 (\u03a3)\n\nThis set is the same as the set\n^\n^\n{r \u222a s |\n(R(ti )+ \u2264 r(ti ) \u2264 1 \u2212 R(ti )\u2212 ),\n(S(ti )+ \u2264 s(ti ) \u2264 1 \u2212 S(ti )\u2212 )}\nti \u2208\u03c4 (\u03a3)\n\nti \u2208\u03c4 (\u03a3)\n\nb can also be shown similarly.\nwhich is S(\u222a)(reps\u03a3 (R), reps\u03a3 (S)). Such a result for unary \u2212\nFor sake of completeness, we define the following two related set-theoretic operators:\nDefinition 63 Let R and S be neutrosophic relations on scheme \u03a3. Then,\nb S, is a neutrosophic relation on scheme \u03a3, given by\n(a) the intersection of R and S, denoted R \u2229\nb S)(t) = hmin{R(t)+ , S(t)+ }, max{R(t)\u2212 , S(t)\u2212 }i, for any t \u2208 \u03c4 (\u03a3);\n(R \u2229\n\nb S, is a neutrosophic relation on scheme \u03a3, given by\n(b) the difference of R and S, denoted R \u2212\nb S)(t) = hmin{R(t)+ , S(t)\u2212 }, max{R(t)\u2212 , S(t)+ }i, for any t \u2208 \u03c4 (\u03a3);\n(R \u2212\n\n\u0003\n\n\f3.4. GENERALIZED ALGEBRA ON NEUTROSOPHIC RELATIONS\n\n49\n\nThe following proposition relates the intersection and difference operators in terms of the more fundamental set-theoretic operators union and complement.\nProposition 4 For any neutrosophic relations R and S on the same scheme, we have\nb \u2212R\nb \u222a\nb\nb S = \u2212(\nb \u2212S),\nR\u2229\nand\nb S = \u2212(\nb \u2212R\nb \u222a\nb S).\nR\u2212\n\nProof\n\nb\nBy definition, \u2212R(t)\n= hR(t)\u2212 , R(t)+ i\nb\n\u2212S(t)\n= hS(t)\u2212 , S(t)+ i\nb \u222a\nb\nb \u2212S)(t)\nand (\u2212R\n= hmax(R(t)\u2212 , S(t)\u2212 ), min(R(t)+ , S(t)+ )i\nb \u2212R\nb \u222a\nb\nb \u2212S))(t)\nso, (\u2212(\n= hmin(R(t)+ , S(t)+ ), max(R(t)\u2212 , S(t)\u2212 )i\nb S(t).\n= R\u2229\n\nThe second part of the result can be shown similarly.\n\nRelation-Theoretic Operators\nWe now define some relation-theoretic algebraic operators on neutrosophic relations.\nDefinition 64 Let R and S be neutrosophic relations on schemes \u03a3 and \u2206, respectively. Then, the natural\nb S, is a neutrosophic relation on scheme \u03a3 \u222a \u2206,\njoin (further for short called join) of R and S, denoted R \u22b2\u22b3\ngiven by\nb S)(t) = hmin{R(\u03c0\u03a3 (t))+ , S(\u03c0\u2206 (t))+ }, max{R(\u03c0\u03a3 (t))\u2212 , S(\u03c0\u2206 (t))\u2212 }i,\n(R \u22b2\u22b3\nwhere \u03c0 is the usual projection of a tuple.\n\n\u0003\n\nIt is instructive to observe that, similar to the intersection operator, the minimum of the belief factors and\nthe maximum of the doubt factors are used in the definition of the join operation.\nb is a strong generalization of \u22b2\u22b3.\nProposition 5 \u22b2\u22b3\n\nProof Let R and S be consistent neutrosophic relations\non schemes \u03a3 and \u2206, respectively. Then\nV\nb S) is the set {Q \u2208 F(\u03a3 \u222a \u2206) | ti \u2208\u03c4 (\u03a3 \u222a \u2206) (min{R\u03c0\u03a3 (ti )+ , S\u03c0\u2206 (ti )+ } \u2264 Q(ti ) \u2264\nreps\u03a3 \u222a \u2206 (R \u22b2\u22b3\n1 \u2212 max{R\u03c0\u03a3 (ti )\u2212 , S\u03c0\u2206 (ti )\u2212 })} and S(\u22b2\u22b3)(reps\u03a3 (R), reps\u2206 (S)) = {r \u22b2\u22b3 s | r \u2208 reps\u03a3 (R), s \u2208 reps\u2206 (S)}\nb S). Then \u03c0\u03a3 (Q) \u2208 reps\u03a3 (R), where \u03c0\u03a3 is the usual projection over \u03a3 of fuzzy\nLet Q \u2208 reps\u03a3\u222a\u2206 (R \u22b2\u22b3\nrelations. Similarly, \u03c0\u2206 (Q) \u2208 reps\u2206 (S). Therefore, Q \u2208 S(\u22b2\u22b3)(reps\u03a3 (R), reps\u2206 (S)).\nLet Q \u2208 S(\u22b2\u22b3)(reps\u03a3 (R), reps\u2206 (S)). Then Q(ti ) \u2265 min{R\u03c0\u03a3 (ti )+ , S\u03c0\u2206 (ti )+ } and Q(ti ) \u2264 min{1 \u2212\nR\u03c0\u03a3 (ti )\u2212 , 1 \u2212 S\u03c0\u2206 (ti )\u2212 } = 1 \u2212 max{R\u03c0\u03a3 (ti )\u2212 , S\u03c0\u2206 (ti )\u2212 }, for any ti \u2208 \u03c4 (\u03a3 \u222a \u2206), because R and S are\nconsistent.\nb S).\nTherefore, Q \u2208 reps\u03a3\u222a\u2206 (R \u22b2\u22b3\nWe now present the projection operator.\n\n\f50\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n\nDefinition 65 Let R be a neutrosophic relation on scheme \u03a3, and \u2206 \u2286 \u03a3. Then, the projection of R onto\n\u2206, denoted \u03c0\nb\u2206 (R), is a neutrosophic relation on scheme \u2206, given by\n(b\n\u03c0\u2206 (R))(t) = hmax{R(u)+ |u \u2208 t\u03a3 }, min{R(u)\u2212 |u \u2208 t\u03a3 }i.\n\n\u0003\nThe belief factor of a tuple in the projection is the maximum of the belief factors of all of the tuple's\nextensions onto the scheme of the input neutrosophic relation. Moreover, the doubt factor of a tuple in\nthe projection is the minimum of the doubt factors of all of the tuple's extensions onto the scheme of the\ninput neutrosophic relation.\nWe present the selection operator next.\nDefinition 66 Let R be a neutrosophic relation on scheme \u03a3, and let F be any logic formula involving\nattribute names in \u03a3, constant symbols (denoting values in the attribute domains), equality symbol =, negation symbol \u00ac, and connectives \u2228 and \u2227. Then, the selection of R by F , denoted \u03c3\nbF (R), is a neutrosophic\nrelation on scheme \u03a3, given by\n(b\n\u03c3F (R))(t) = h\u03b1, \u03b2i, where\n\u001a\nR(t)+ if t \u2208 \u03c3F (\u03c4 (\u03a3))\n\u03b1=\n0\notherwise\n\nand\n\n\u03b2=\n\n\u001a\n\nR(t)\u2212 if t \u2208 \u03c3F (\u03c4 (\u03a3))\n1\notherwise\n\nwhere \u03c3F is the usual selection of tuples satisfying F from ordinary relations.\n\n\u0003\n\nIf a tuple satisfies the selection criterion, it's belief and doubt factors are the same in the selection as in\nthe input neutrosophic relation. In the case where the tuple does not satisfy the selection criterion, its\nbelief factor is set to 0 and the doubt factor is set to 1 in the selection.\nProposition 6 The operators \u03c0\nb and \u03c3\nb are strong generalisations of \u03c0 and \u03c3, respectively.\nProof Similar to that of Proposition 5.\n\nExample 17 Relation schemes are sets of attribute names, but in this example we treat them as ordered\nsequences of attribute names (which can be obtained through permutation of attribute names), so tuples can\nbe viewed as the usual lists of values. Let {a, b, c} be a common domain for all attribute names, and let R\nand S be the following neutrosophic relations on schemes hX, Y i and hY, Zi respectively.\nt\n(a, a)\n(a, b)\n(a, c)\n(b, b)\n(b, c)\n(c, b)\n\nR(t)\nh0, 1i\nh0, 1i\nh0, 1i\nh1, 0i\nh1, 0i\nh1, 1i\n\nt\n(a, c)\n(b, a)\n(c, b)\n\nS(t)\nh1, 0i\nh1, 1i\nh0, 1i\n\n\f51\n\n3.5. AN APPLICATION\n\nFor other tuples which are not in the neutrosophic relations R(t) and S(t), their h\u03b1, \u03b2i = h0, 0i which means\nno any information available. Because R and S are inconsistent, we first use split operation to transform\nthem into pseudo-consistent and apply the relation-theoretic operations on them and transform the result\nb \u25b3(S)) is a neutrosophic\nback to arbitrary neutrosophic set using combine operation. Then, T1 = \u2207(\u25b3(R) \u22b2\u22b3\nrelation on scheme hX, Y, Zi and T2 = \u2207(b\n\u03c0hX,Zi (\u25b3(T1 ))) and T3 = \u03c3\nbX\u00ac=Z (T2 ) are neutrosophic relations\non scheme hX, Zi. T1 , T2 and T3 are shown below:\nt\n(a, a, a)\n(a, a, b)\n(a, a, c)\n(a, b, a)\n(a, b, b)\n(a, b, c)\n(a, c, a)\n(a, c, b)\n(a, c, c)\n(b, b, a)\n(b, c, b)\n(c, b, a)\n(c, b, b)\n(c, b, c)\n(c, c, b)\n\nT1 (t)\nh0, 1i\nh0, 1i\nh0, 1i\nh0, 1i\nh0, 1i\nh0, 1i\nh0, 1i\nh0, 1i\nh0, 1i\nh1, 1i\nh0, 1i\nh1, 1i\nh0, 1i\nh0, 1i\nh0, 1i\n\nt\n(a, a)\n(a, b)\n(a, c)\n(b, a)\n(c, a)\n\nT2 (t)\nh0, 1i\nh0, 1i\nh0, 1i\nh1, 0i\nh1, 0i\n\nt\n(a, a)\n(a, b)\n(a, c)\n(b, a)\n(b, b)\n(c, a)\n(c, c)\n\nT3 (t)\nh0, 1i\nh0, 1i\nh0, 1i\nh1, 0i\nh0, 1i\nh1, 0i\nh0, 1i\n\n\u0003\n\n3.5\n\nAn Application\n\nConsider the target recognition example presented in [Sub94]. Here, an autonomous vehicle needs to\nidentify objects in a hostile environment such as a military battlefield. The autonomous vehicle is equipped\nwith a number of sensors which are used to collect data, such as speed and size of the objects (tanks) in\nthe battlefield. Associated with each sensor, we have a set of rules that describe the type of the object\nbased on the properties detected by the sensor.\nLet us assume that the autonomous vehicle is equipped with three sensors resulting in data collected\nabout radar readings, of the tanks, their gun characteristics and their speeds. What follows is a set of rules\nthat associate the type of object with various observations.\nRadar Readings:\n\u2022 Reading r1 indicates that the object is a T-72 tank with belief factor 0.80 and doubt factor 0.15.\n\n\f52\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n\u2022 Reading r2 indicates that the object is a T-60 tank with belief factor 0.70 and doubt factor 0.20.\n\u2022 Reading r3 indicates that the object is not a T-72 tank with belief factor 0.95 and doubt factor 0.05.\n\u2022 Reading r4 indicates that the object is a T-80 tank with belief factor 0.85 and doubt factor 0.10.\n\nGun Characteristics:\n\u2022 Characteristic c1 indicates that the object is a T-60 tank with belief factor 0.80 and doubt factor\n0.20.\n\u2022 Characteristic c2 indicates that the object is not a T-80 tank with belief factor 0.90 and doubt factor\n0.05.\n\u2022 Characteristic c3 indicates that the object is a T-72 tank with belief factor 0.85 and doubt factor\n0.10.\nSpeed Characteristics:\n\u2022 Low speed indicates that the object is a T-60 tank with belief factor 0.80 and doubt factor 0.15.\n\u2022 High speed indicates that the object is not a T-72 tank with belief factor 0.85 and doubt factor 0.15.\n\u2022 High speed indicates that the object is not a T-80 tank with belief factor 0.95 and doubt factor 0.05.\n\u2022 Medium speed indicates that the object is not a T-80 tank with belief factor 0.80 and doubt factor\n0.10.\nThese rules can be captured in the following three neutrosophic relations:\n\nReading\nr1\nr2\nr3\nr4\n\nRadar Rules\nObject Confidence Factors\nT-72\nh0.80, 0.15i\nT-60\nh0.70, 0.20i\nT-72\nh0.05, 0.95i\nT-80\nh0.85, 0.10i\n\nReading\nc1\nc2\nc3\n\nGun Rules\nObject Confidence Factors\nT-60\nh0.80, 0.20i\nT-80\nh0.05, 0.90i\nT-72\nh0.85, 0.10i\n\n\f53\n\n3.5. AN APPLICATION\n\nReading\nlow\nhigh\nhigh\nmedium\n\nSpeed Rules\nObject Confidence Factors\nT-60\nh0.80, 0.15i\nT-72\nh0.15, 0.85i\nT-80\nh0.05, 0.95i\nT-80\nh0.10, 0.80i\n\nThe autonomous vehicle uses the sensors to make observations about the different objects and then\nuses the rules to determine the type of each object in the battlefield. It is quite possible that two different\nsensors may identify the same object as of different types, thereby introducing inconsistencies.\nLet us now consider three objects o1 , o2 and o3 which need to be identified by the autonomous vehicle.\nLet us assume the following observations made by the three sensors about the three objects. Once again,\nwe assume certainty factors (maybe derived from the accuracy of the sensors) are associated with each\nobservation.\nObject-id\no1\no2\no3\n\nRadar Data\nReading Confidence Factors\nr3\nh1.00, 0.00i\nr1\nh1.00, 0.00i\nr4\nh1.00, 0.00i\n\nObject-id\no1\no2\no3\n\nGun Data\nReading Confidence Factors\nc3\nh0.80, 0.10i\nc1\nh0.90, 0.10i\nc2\nh0.90, 0.10i\n\nObject-id\no1\no2\no3\n\nSpeed Data\nReading Confidence Factors\nhigh\nh0.90, 0.10i\nlow\nh0.95, 0.05i\nmedium\nh0.80, 0.20i\n\nGiven these observations and the rules, we can use the following algebraic expression to identify the three\nobjects:\nb\nb Radar Rules) \u2229\n\u03c0\nbObject-id,Object (Radar Data \u22b2\u22b3\nb\nb Gun Rules) \u2229\n\u03c0\nbObject-id,Object (Gun Data \u22b2\u22b3\nb Speed Rules)\n\u03c0\nbObject-id,Object (Speed Data \u22b2\u22b3\n\n\f54\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\nTable 3.1: EVAL\nI1\nI1\nI1\nI2\nI2\n\nq1\nq2\nq3\nq1\nq3\n\nh0.9, 0.2i\nh1.0, 0.0i\nh0.1, 0.8i\nh1.0, 1.0i\nh0.8, 0.3i\n\nThe intuition behind the intersection is that we would like to capture the common (intersecting) information\namong the three sensor data. Evaluating this expression, we get the following neutrosophic relation:\nObject-id\no1\no2\no3\n\nObject\nT-72\nT-80\nT-80\n\nConfidence Factors\nh0.05, 0.0i\nh0.0, 0.05i\nh0.05, 0.0i\n\nIt is clear from the result that by the given information, we could not infer any useful information that is\nwe could not decide the status of objects o1 , o2 and o3 .\n\n3.6\n\nAn Infinite-Valued Tuple Relational Calculus\n\nAs an example, suppose in the e-shopping environment, there are two items I1 and I2 , which are evaluated\nby customers for some categories of quality q1 , q2 and q3 . Let the evaluation results be captured by the\nfollowing neutrosophic relation EVAL on scheme {I, Q}:\nThe above neutrosophic relation contains the information that the confidence of item I1 was evaluated\n\"good\" for category q1 is 0.9 and the doubt is 0.2. The confidence of item I1 was evaluated \"good\" for\ncategory q2 is 1.0 and the doubt is 0.0. The confidence of item I1 was evaluated \"poor\" for category q3 is\n0.8 and the doubt is 0.1. Also, the confidence of item I2 was evaluated \"good\" for category q1 is 1.0 and the\ndoubt is 1.0 (similarly, the confidence of item I2 was evaluated \"poor\" for category q1 is 1.0 and the doubt\nis 1.0). The confidence of I2 was evaluated \"good\" for category q3 is 0.8 and the doubt is 0.3. Note that\nthe evaluation results of item I2 for category q2 is unknown. The above information contains fuzziness,\nincompleteness and inconsistency. Such information may be due to various reasons, such as evaluation not\nconducted, or evaluation results not yet available, the evaluation is not reliable, and different evaluation\nresults for the same category producing different results, etc.\nWe define a infinite-valued membership function of a neutrosophic relation, which maps tuples to the\npair of values h\u03b1, \u03b2, with 0 \u2264 \u03b1 + \u03b2 \u2264 2. We use the symbol I to denote the set of these values, i.e. I =\n{h\u03b1, \u03b2i}. Now, for a neutrosophic relation R = ht, R(t)+ , R(t)\u2212 i on scheme \u03a3, its membership function is\na infinite-valued predicate \u03a6R : \u03c4 (\u03a3) \u2192 I, given by\n\n\f3.6. AN INFINITE-VALUED TUPLE RELATIONAL CALCULUS\n\n55\n\n\u03a6R (t) = hR(t)+ , R(t)\u2212 i.\nIn [Bag00], it proposed a 4-valued characteristic function of neutrosophic relation, which maps tuples\nto one of the following values: \u22a4 (for contradiction), t (for true), f(for false) and \u22a5 (for unknown). It\ncan be easily verified that when R(t)+ = R(t)\u2212 = 1, it corresponds to \u22a4; when R(t)+ = 1, R(t)\u2212 = 0,\nit corresponds to t; when R(t)+ = 0, R(t)\u2212 = 1, it corresponds to f; and when R(t)+ = R(t)\u2212 = 0, it\ncorresponds to \u22a5.\nThe tuple relational calculus provides a very natural, set-theoretic, declarative notation for querying\nordinary relational database management systems. A tuple calculus expression has the form:\n{t of \u03a3|P (t)},\nwhere t is a tuple variable, \u03a3 a scheme, and P is some 2-valued predicate on tuples in \u03c4 (\u03a3). The expression\ndenotes the set of all tuple values T (from \u03c4 (\u03a3)) of the variable t for which the predicate P (T ) is true.\nWe retain the above simple syntax in the generalised tuple calculus expression for neutrosophic databases.\nHowever, the predicate P is now interpreted as a infinite-valued predicate on tuples. Moreover, the entire\nexpression now denotes a neutrosophic relation (of which P is the membership function).\nIn this section we define the syntax and semantics of legal infinite-valued predicate expressions. They\nare defined in relation to a given set of binary comparators on domains associated with the attribute names\nappearing in schemes. Most intuitive binary comparators, like < and \u2264, produce 2-valued results, but in\nprinciple infinite-valued comparators are possible. The basic building blocks of formulas are atoms, of\nwhich there are four kinds:\n \u0303 R is an atom. For any tuple value\n1. For any tuple variable t and relation R on the same scheme, t \u2208\n \u0303\nT for the variable t, the atom t \u2208 R denotes the value \u03a6R (T ).\n2. For any tuple variable t1 and t2 , attribute names A and B in the schemes of t1 and t2 respectively,\nand binary comparator \u0398 such that A and B are \u0398-comparable, t1 .A \u0398 t2 .B is an atom. For any\ntuple values T1 and T2 for the variables t1 and t2 respectively, the atom t1 .A \u0398 t2 .B denotes the\nvalue T1 (A) \u0398 T2 (B).\n3. For any tuple variable t, constant c, and attribute names A and B such that A is in the scheme of\nt, c \u2208 dom(B), and A and B are \u0398-comparable, t.A \u0398 c is an atom. For any tuple value T for the\nvariable t, the atom t.A \u0398 c denotes the value T (A) \u0398 c.\n4. For any constant c, tuple variable t, and attribute names A and B such that c \u2208 dom(A), B is in\nthe scheme of t, and A and B are \u0398-comparable, c \u0398 t.B is an atom. For any tuple value T for the\nvariable t, the atom c \u0398 t.B denotes the value c \u0398 T (B).\n \u0303 (there exists) and \u2200\n \u0303 (for all) to recursively\n \u0303 (and), \u2228\n \u0303 (or), \u2203\nWe use infinite-valued connectives \u00ac\n \u0303 (not), \u2227\nbuild formulas from atoms. Any atom is a formula, where the formula denotes the same value as the atom.\n\n\f56\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n\n \u0303 g and\nIf f and g are formulas, and f + is truth-degree of the f , f \u2212 is falsity-degree of f , then \u00ac\n \u0303 f, f \u2227\n \u0303\nf \u2228 g are also formulas. The values of such formulas are given as the following:\n\n\u00ac\n \u0303 f = hf \u2212 , f + i\n\n(3.1)\n\n \u0303 g = hmin(f + , g+ ), max(f \u2212 , g\u2212 )i\nf \u2227\n\n(3.2)\n\n \u0303 g = hmax(f + , g+ ), min(f \u2212 , g\u2212 )i\nf \u2228\n\n(3.3)\n\nAn intuitive appreciation of the disjunctive connective can be obtained as follows: Given a tuple t,\nsince we believed that it is present in the relation R with confidence R(t)+ and that it is present in the\nrelation S with confidence S(t)+ , we can now believe that the tuple t is present in the \"either-R-or-S\"\nrelation with confidence which is equal to the larger of R(t)+ and S(t)+ . Using the same logic, we can\nnow believe in the absence of the tuple t from the \"either-R-or-S\" relation with confidence which is equal\nto the smaller (because t must be absent from both R and S for it to be absent from the disjunction) of\nR(t)\u2212 and S(t)\u2212 . The definition of negation and conjunction can be understood in the same way.\n \u0303 and \u2228\n \u0303 is evident from the above formulas. It is interesting to note the algebraic laws\nThe duality of \u2227\nshown in Table 3.2 that are exhibited by these connectives.\nTable 3.2: Albegraic Properties of Infinite-Valued Propositional Connectives\n(commutative laws)\n(associative laws)\n(distributive laws)\n(idempotent laws)\n(identity laws)\n(double complementation)\n(De Morgan laws)\n\n \u0303 g=g \u2228\n \u0303 f\nf \u2228\n \u0303 g=g \u2227\n \u0303 f\nf \u2227\n \u0303 g) \u2228\n \u0303 h=f \u2228\n \u0303 (g \u2228\n \u0303 h)\n(f \u2228\n \u0303 g) \u2227\n \u0303 h=f \u2227\n \u0303 (g \u2227\n \u0303 h)\n(f \u2227\n \u0303 (g \u2227\n \u0303 h) = (f \u2228\n \u0303 g) \u2227\n \u0303 (f \u2228\n \u0303 h)\nf \u2228\n \u0303\n \u0303\n \u0303\n \u0303\n \u0303\nf \u2227 (g \u2228 h) = (f \u2227 g) \u2228 (f \u2227 h)\n \u0303 f =f\nf \u2228\n \u0303 f =f\nf \u2227\n \u0303 f =f\nf \u2228\n \u0303 t=f\nf \u2227\n\u00ac\n \u0303 ( \u0303\n\u00ac f) = f\n \u0303 g) = \u00ac\n \u0303 \u00ac\n\u00ac\n \u0303 (f \u2228\n \u0303 f \u2227\n \u0303 g\n \u0303 g) = \u00ac\n \u0303 \u00ac\n\u00ac\n \u0303 (f \u2227\n \u0303 f \u2228\n \u0303 g\n\nIf t is a tuple variable, \u03a3 a scheme, and P an infinite-valued predicate on tuples in \u03c4 (\u03a3), then\n \u0303 of \u03a3|P (t) and \u2200t\n \u0303 of \u03a3|P (t) are formulas. If P is the membership function of the neutrosophic rela\u2203t\n\n\f3.6. AN INFINITE-VALUED TUPLE RELATIONAL CALCULUS\n\n57\n\ntion R, then the values denoted by these formulas are given by\n \u0303 of \u03a3|P (t) = ht \u0303 , f \u0303 i,\n\u2203t\n\u2203 \u2203\n\n(3.4)\n\nwhere t\u2203 \u0303 = max{R(t)+ }, for all t \u2208 \u03c4 (\u03a3), f\u2203 \u0303 = min{R(t)\u2212 }, for all t \u2208 \u03c4 (\u03a3).\n \u0303 of \u03a3|P (t) = ht \u0303 , f \u0303 i,\n\u2200t\n\u2200 \u2200\n\n(3.5)\n\nwhere t\u2200 \u0303 = min{R(t)+ }, for all t \u2208 \u03c4 (\u03a3), f\u2203 \u0303 = max{R(t)+ }, for all t \u2208 \u03c4 (\u03a3).\nThe extended De Morgan laws can be verified to continue to hold for our generalized infinite-valued\nsemantics for quantifiers, i.e. the following pairs of formulas are equivalent:\n \u0303 of \u03a3|P (t) \u2261 \u00ac\n \u0303 of \u03a3| \u0303\n\u2203t\n \u0303 (\u2200t\n\u00ac P (t))\n \u0303 of \u03a3|P (t) \u2261 \u00ac\n \u0303 of \u03a3| \u0303\n\u2200t\n \u0303 (\u2203t\n\u00ac P (t))\n \u0303 of \u03a3|(P (t) \u2227\n \u0303 of \u03a3| \u0303\n \u0303 Q(t)) \u2261 \u00ac\n \u0303 \u00ac\n\u2203t\n \u0303 (\u2200t\n\u00ac P (t) \u2228\n \u0303 Q(t))\n \u0303 of \u03a3|(P (t) \u2228\n \u0303 of \u03a3| \u0303\n \u0303 Q(t)) \u2261 \u00ac\n \u0303 \u00ac\n\u2203t\n \u0303 (\u2200t\n\u00ac P (t) \u2227\n \u0303 Q(t))\n \u0303 of \u03a3|(P (t) \u2227\n \u0303 of \u03a3| \u0303\n \u0303 Q(t)) \u2261 \u00ac\n \u0303 \u00ac\n\u2200t\n \u0303 (\u2203t\n\u00ac P (t) \u2228\n \u0303 Q(t))\n \u0303 of \u03a3|(P (t) \u2228\n \u0303 of \u03a3| \u0303\n \u0303 Q(t)) \u2261 \u00ac\n \u0303 \u00ac\n\u2200t\n \u0303 (\u2203t\n\u00ac P (t) \u2227\n \u0303 Q(t))\nIt is worth mentioning that in ordinary 2-valued relational calculus caution needs to be exercised in\nmixing negation and quantifiers in a safe manner as the resulting expressions have the potential of denoting\ninfinite relations, even if all components denote finite relations. Fortunately, as neutrosophic databases\nare by nature capable of handling infinite relations, safety of expressions is not an issue in infinite-valued\ncalculus.\n\n3.6.1\n\nAn Example\n\nLet us now consider an example illustrating some infinite-valued computations. We use the neutrosophic\nrelation EVAL on scheme {I, Q} of the item-category evaluation as example.\nConsider the query:\nWhat items showed contradictory evaluation results for some category?\nIn ordinary relational databases, it is impossible to store contradictory information, let alone entertaining queries about contradiction.\nLet \u2206 = {I}, and \u03a3 = {I, Q} be schemes. A tuple calculus expression for this query is:\n \u0303 of \u03a3|t.I = d.I \u2227\n \u0303 t\u2208\n \u0303 \u00ac\n \u0303 EVAL \u2227\n \u0303 EVAL)}\n{d of \u2206|(\u2203t\n \u0303 t\u2208\n\n\f58\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n\nIn the ordinary 2-valued logic the above query will produce an empty answer due to the condition for\nthe tuple t to simultaneously be in EVAL as well as not be in EVAL. In infinite-valued logic, however,\nthe query denotes that neutrosophic relation on scheme \u2206 whose membership function is denoted by the\ninfinite-valued predicate expression\n \u0303 of \u03a3|t.I = d.I \u2227\n \u0303 t\u2208\n \u0303 \u00ac\n \u0303 EVAL \u2227\n \u0303 EVAL\n\u2203t\n \u0303 t\u2208\n\n(3.6)\n\nThat function can be computed by determining the value of the above expression for all possible values\nof its free variable d, namely I1 and I2 .\nFor the value d = I1 , the expression ( 3.6) can be seen to reduce to the value h0.2, 0.8i. For the value\nd = I2 , the expression ( 3.6) can be seen to reduce to the value h1.0, 0.8i. The result is the neutrosophic\nrelation:\nI1\nI2\n\nh0.2, 0.8i\nh1.0, 0.8i\n\nThe result states that I1 showed contradictory evaluation result for some category with confidence is\n0.2 and doubt is 0.8, so it is safe to conclude that I1 did not show contradictory evaluation resulti, but\nI2 showed contradictory evaluation result for some category with confidence 1.0 and doubt is 0.8, the\nexplanation is that I2 did show contradictory result for some category and did not show contradictory for\nother category at the same times.\n\n3.7\n\nA Generalized SQL Query Construct for Neutrosophic Relations\n\nThe most popular construct for information retrieval from most commercial systems is the SQL's SELECT\nstatement. While the statement has many options and extensions to its basic form, here we just present\nan infinite-valued generalization to the basic form, as generalizing the options then just becomes a trivial\nmatter of detail. The basic form of the statement contains three clauses select, from and where, and has\nthe following format:\nselect A1 , A2 , . . . Am from R1 , R2 , . . . Rn where C\nwhere\n1. A1 , A2 , . . . Am is a list of attribute names whose values are to be retrieved by the query,\n2. R1 , R2 , . . . Rn is a list of relation names required to process the query, and\n3. C is a boolean expression that identifies the tuples to be retrieved by the query.\n\n\f3.7. A GENERALIZED SQL QUERY CONSTRUCT FOR NEUTROSOPHIC RELATIONS\n\n59\n\nWithout loss of generality, we assume that each attribute name occurs in exactly one relation, because\nif some attribute Ai occurs in more than one relation, we require, instead of simply the attribute Ai, a\npair of the form Rj .Ai qualifying that attribute. The result of the SELECT statement is a relation with\nattributes A1 , A2 , . . . Am chosen from the attributes of R1 \u00d7 R2 \u00d7 * * *\u00d7 Rn for tuples that satisfy the boolean\ncondition C, i.e.\n\u03c0A1 ,A2 ,...Am (\u03c3C (R1 \u00d7 R2 \u00d7 * * * \u00d7 Rn )),\nwhere \u03c0, \u03c3, and \u00d7 are the projection, selection and product operations, respectively, on ordinary relations. We retain the above syntax in the generalized SELECT statement for the neutrosophic relations. However, the relation names R1 , R2 , . . . Rn now represent some neutrosophic relations and C is\nsome infinite-valued condition. The result of the generalized SELECT statement is then the value of the\nalgebraic expression:\nb 2\u00d7\nb * * * \u00d7R\nb n )),\n\u03c0A1 ,A2 ,...,Am (b\n\u03c3C (R1 \u00d7R\n\nb are, respectively, the projection, selection and product operations on neutrosophic\nwhere \u03c0\nb, \u03c3\nb, and \u00d7\nrelations constructed in the next section. Furthermore, the result of the generalized SELECT statement\nis also a neutrosophic relation.\n\n3.7.1\n\nInfinite-Valued Conditions\n\nIn the generalized SELECT statement, we let the condition occurring in the where clause be infinitevalued. The infinite values, except h1, 0i and h0, 1i, arise essentially due to any nested subqueries. For any\narithmetic expressions E1 and E2 , comparisons such as E1 \u2264 E2 are simply 2-valued conditions (h1, 0i or\nh0, 1i). Let \u03be be a subquery of the form\n(select . . . from . . . where . . .)\noccurring in the where clause of a SELECT statement. And let R be the neutrosophic relation on\nscheme \u03a3 that the subquery \u03be evaluates to. Then, conditions involving the subquery \u03be evaluate as follows.\n1. The condition\nexists \u03be\nevaluates to h\u03b1, \u03b2i,\n\u03b1 = max{a}, a = R(t)+ , for all t \u2208 \u03c4 (\u03a3),\n\u03b2 = min{b}, b = R(t)\u2212 , if R(t)+ + R(t)\u2212 \u2264 1, b = 1 \u2212 R(t)+ , if R(t)+ + R(t)\u2212 > 1, for all t \u2208 \u03c4 (\u03a3).\n2. For any tuple t \u2208 \u03c4 (\u03a3), the condition\n\n\f60\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\nt in \u03be\nevaluates to \u03c6R (t).\n3. If \u03a3 contains exactly one attribute, then for any (scalar value) t \u2208 \u03c4 (\u03a3), the condition\nt > any \u03be\nevaluates to h\u03b1, \u03b2i,\n\u03b1 = max{a}, a = R(k)+ , if t > k, for some k \u2208 R, (\u03b2 = min{b}, b = R(k)\u2212 , if R(k)+ + R(k)\u2212 \u2264 1,\nb = 1 \u2212 R(k)+ , if R(k)+ + R(k)\u2212 > 1), if t > k, for some k \u2208 R;\n\u03b1 = 0, \u03b2 = 1, otherwise.\nAn infinite-valued semantics for other operators, such as \u2265any, =any, can be defined similarly. Note\nthat conditions involving such operators never evaluate to the value \u03b1, \u03b2, such that \u03b1 + \u03b2 > 1.\n4. If \u03a3 contains exactly one attribute, then for any (scalar value) t \u2208 \u03c4 (\u03a3), the condition\nt > all \u03be\nevaluates to h\u03b1, \u03b2i,\n(\u03b1 = min{a}, a = R(k)\u2212 , if R(k)+ + R(k)\u2212 \u2264 1, a = 1 \u2212 R(k)+ , if R(k)+ + R(k)\u2212 > 1), if t \u2264 k,\nfor some k \u2208 R, \u03b2 = max{b}, b = R(k)+ , if t \u2264 k, for some k \u2208 R;\n\u03b1 = 1, \u03b2 = 0, otherwise.\nAn infinite-valued semantics for other operators, such as \u2265all, =all, can be defined similarly. Note\nthat conditions involving such operators never evaluate to the value h\u03b1, \u03b2i, such that \u03b1 + \u03b2 > 1.\n\nWe complete our infinite-valued semantics for conditions by defining the not, and and or operators\non them. Let C and D be any conditions, and value of C = htc , fc i and value of D = htd , fd i. Then, the\nvalue of the condition not C is given by\nnot C = hfc , tc i\nwhile the value of the condition C and D is given by\nC and D = hmin tc , td , max fc , fd i\nand that of the condition C or D is given by\nC or D = hmax tc , td , min fc , fd i\nThe duality of and and or is evident from their formulas. It is interesting to note the following algebraic\nlaws exhibited by the above infinite-valued operators:\n\n\f3.7. A GENERALIZED SQL QUERY CONSTRUCT FOR NEUTROSOPHIC RELATIONS\n\n61\n\n1. Double Complementation Law:\nnot ( not C) = C\n2. Identity and Idempotence Laws:\nC and h1, 0i = C and C = C\nC or h0, 1i = C or C = C\n3. Commutativity Laws:\nC and D = D and C\nC or D = D or C\n4. Associativity Laws:\nC and (D and E) = (C and D) and E\nC or (D or E) = (C or D) or E\n5. Distributivity Laws:\nC and (D or E) = (C and D) or (Cand E)\nC or (D and E) = (C or D) and (Cor E)\n6. De Morgan Laws:\nnot (C and D) = ( not C) or ( not D)\nnot (C or D) = ( not C) and ( not D)\nWe are now ready to define the selection operator on neutrosophic relations.\nLet R be a neutrosophic relation on scheme \u03a3, and C be an infinite-valued condition on tuples of \u03a3\ndenoted htC (t), fC (t)i. Then, the selection of R by C, denoted \u03c3\nbC (R), is a neutrosophic relation on scheme\n\u03a3, given by\n(b\n\u03c3C (R))(t) = hmin R(t)+ , tC (t), max R(t)\u2212 , fC (t)i.\nThe above definition is similar to that of the and operator given earlier.\nSince performing a simple union is impossible within a SELECT statement, SQL provides a union\noperator among subqueries to achieve this. We end this section with an infinite-valued semantics of union.\nLet \u03be1 and \u03be2 be subqueries that evaluate, respectively, to neutrosophic relations R1 and R2 on scheme\n\u03a3. Then, the subquery\n\u03be1 union \u03be2\nevaluates to the neutrosophic relation R on scheme \u03a3 given by\nR(t) = hmax R1(t)+ , R2(t)+ , min R1(t)\u2212 , R2(t)\u2212 i\n\n\f62\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n(I, Q)\n(I1 , q1 )\n(I1 , q2 )\n(I1 , q3 )\n(I2 , q1 )\n(I2 , q2 )\n(I2 , q3 )\n\nC = not ((I, Q) inEV AL)\nh0.2, 0.9i\nh0.0, 1.0i\nh0.8, 0.1i\nh1.0, 1.0i\nh0.0, 0.0i\nh0.3, 0.8i\n\nAn intuitive appreciation of the union operator can be obtained as follows: Given a tuple t, since we\nbelieved that it is present in the relation R1 with confidence R1 (t)+ and that it is present in the relation\nR2 with confidence R2 (t)+ , we can now believe that the tuple t is present in the \"either-R1 -or-R2 \" relation\nwith confidence which is equal to the larger of R1 (t)+ and R2 (t)+ . Using the same logic, we can now\nbelieve in the absence of the tuple t from the \"either-R1 -or-R2 \" relation with confidence which is equal to\nthe smaller (because t must be absent from both R1 and R2 for it to be absent from the union) of R1 (t)\u2212\nand R2 (t)\u2212 .\n\n3.7.2\n\nAn Example\n\nLet us now consider an example illustrating some infinite-valued computations. We use the neutrosophic\nrelation EVAL on scheme {I, Q} of the item-category evaluation as example.\nConsider the query:\nW hat items showed contradictory evaluation of some category of quality?\nA SELECT statement for this query is:\nselect I\nfrom EVAL where not ((I, Q) in EVAL)\nOne possible evaluation method for the above query in ordinary 2-valued SQL is to produce the I\nattribute of those rows of EVAL that satisfy the where condition. Since the where condition in the\nabove case is exactly that row not be in EVAL, in 2-valued logic the above query will produce an empty\nanswer.\nIn infinite-valued logic, however, the where condition needs to be evaluated, to one of infinite possible\nvalues, for every possible row with attributes \u03a3 = (I, Q). The result is then combined with EVAL according\nto the semantics of p, on which \u03c3\nb is performed to produce the resulting neutrosophic relation.\nTherefore, for each of the 6 rows in \u03c4 (\u03a3), we first evaluate the where condition C:\nNow, \u03c3\nb(EV AL) according to the definition of \u03c3\nb evaluates to the neutrosophic relation:\nFinally, \u03c0\nb of the above is the neutrosophic relation:\n\n\f63\n\n3.8. CONCLUSIONS\nI1\nI1\nI1\nI2\nI2\n\nq1\nq2\nq3\nq1\nq3\nI1\nI2\n\n3.8\n\nh0.2, 0.9i\nh0.0, 0.1i\nh0.1, 0.8i\nh1.0, 1.0i\nh0.3, 0.8i\nh0.1, 0.8i\nh1.0, 0.0i\n\nConclusions\n\nWe have presented a generalization of fuzzy relations, intuitionistic fuzzy relations (interval-valued fuzzy\nrelations) and paraconsistent relations, called neutrosophic relations, in which we allow the representation\nof confidence (belief and doubt) factors with each tuple. The algebra on fuzzy relations is appropriately\ngeneralized to manipulate neutrosophic relations.\nVarious possibilities exist for further study in this area. Recently, there has been some work in extending logic programs to involve quantitative paraconsistency. Paraconsistent logic programs were introduced\nin [BS89] and probabilistic logic programs in [NS92]. Paraconsistent logic programs allow negative atoms\nto appear in the head of clauses (thereby resulting in the possibility of dealing with inconsistency), and\nprobabilistic logic programs associate confidence measures with literals and with entire clauses. The semantics of these extensions of logic programs have already been presented, but implementation strategies\nto answer queries have not been discussed. We propose to use the model introduced in this chapter in\ncomputing the semantics of these extensions of logic programs. Exploring application areas is another\nimportant thrust of our research.\nWe developed two notions of generalising operators on fuzzy relations for neutrosophic relations. Of\nthese, the stronger notion guarantees that any generalised operator is \"well-behaved\" for neutrosophic\nrelation operands that contain consistent information.\nFor some well-known operators on fuzzy relations, such as union, join, projection, we introduced generalised operators on neutrosophic relations. These generalised operators maintain the belief system intuition\nbehind neutrosophic relations, and are shown to be \"well-behaved\" in the sense mentioned above.\nOur data model can be used to represent relational information that may be incomplete and inconsistent.\nAs usual, the algebraic operators can be used to construct queries to any database systems for retrieving\nvague information.\n\n\f64\n\nCHAPTER 3. NEUTROSOPHIC RELATIONAL DATA MODEL\n\n\fChapter 4\n\nSoft Semantic Web Services Agent\nWeb services technology is critical for the success of business integration and other application fields such as bioinformatics. However, there are two challenges facing the practicality of Web services: (a) efficient location of the Web\nservice registries that contain the requested Web services and (b) efficient retrieval of the requested services from\nthese registries with high quality of service (QoS). The main reason for this problem is that current Web services\ntechnology is not semantically oriented. Several proposals have been made to add semantics to Web services to\nfacilitate discovery and composition of relevant Web services. Such proposals are being referred to as Semantic Web\nservices (SWS). However, most of these proposals do not address the second problem of retrieval of Web services with\nhigh QoS. In this chapter, we propose a framework called Soft Semantic Web Services Agent (soft SWS agent) for\nproviding high QoS Semantic Web services using soft computing methodology. Since different application domains\nhave different requirements for QoS, it is impractical to use classical mathematical modeling methods to evaluate\nthe QoS of semantic Web services. We use neutrosophic neural networks with Genetic Algorithms (GA) as our\nstudy case. Simulation results show that the soft SWS agent methodology is extensible and scalable to handle fuzzy,\nuncertain and inconsistent QoS metrics effectively.\n\n4.1\n\nIntroduction\n\nWeb services are playing an important role in e-business application integration and other application\nfields such as bioinformatics. So it is crucial for the success of both service providers as well as service\nconsumers to provide and invoke the high quality of service (QoS) Web services. Unfortunately, current\nWeb services technologies such as SOAP (Simple Object Access Protocol) [soa], WSDL (Web Services\nDescription Language) [wsd], UDDI (Universal Description, Discovery and Integration) [udd], ebXML\n(Electronic Business XML Initiative) [ebx], XLANG [xla], WSFL (Web Services Flow Language) [wsf],\nBPEL4WS (Business Process Execution Language for Web Services) [bpe], and BSML (Bioinformatic\nSequence Markup Language) [bsm] are all syntax-oriented with little or no semantics associated with\nthem. Computer programs may read and parse them, but with little or no semantic information associated\nwith these technologies, the computer programs can do little to reason and infer knowledge about the Web\n65\n\n\f66\n\nCHAPTER 4. SOFT SEMANTIC WEB SERVICES AGENT\n\nservices.\nCurrent research trend is to add semantics to the Web services framework to facilitate the discovery,\ninvocation, composition, and execution monitoring of Web services. Web services with explicit semantic\nannotation are called Semantic Web services (SWS). Several projects are underway to try to reach such a\ngoal. For example, OWL-S (previously DAML-S [dama] from OWL Services Coalition [owla]) uses OWL\nbased ontology for describing Web services. METEOR-S [SVSM03] follows the way that relates concepts\nin WSDL to DAML+OIL ontologies in Web services description, and then provides an interface to UDDI\nthat allows querying based on ontological concepts. The Internet Reasoning Service (IRS-II) [MDCG03] is\na Semantic Web services framework, which allows applications to semantically describe and execute Web\nservices. IRS-II is based on the UPML framework [OCFB03]. The Web Service Modeling Framework\n(WSMF) [FB02] provides a model for describing the various aspects related to Web services. Its main goal\nis to fully enable e-commerce by applying Semantic Web technology to Web services.\nIn our vision, with the maturing of semantic Web services technologies, there will be a proliferation of\npublic and/or private registries for hosting and querying semantic Web services based on specific ontologies.\nCurrently, there are many public and private UDDI registries advertising numerous similar Web services\nwith different QoS. For example, GenBank [gen], XEMBL [xem], and OmniGene [omn] all provide similar\nWeb services with different quality of services. There are two challenges existing for automatic discovery\nand invocation of Web services. One is the efficient location of service registries advertising requested Web\nservices and the another is the efficient retrieval of the requested services from these registries with the\nhighest quality of service (QoS). The semantic Web services technologies that we mentioned above can\nbe exploited to solve the first challenge. For the second challenge, we believe that the QoS of semantic\nWeb services should cover both functional and non-functional properties. Functional properties include\nthe input, output, conditional output, pre-condition, access condition, and the effect of service [mn]. These\nfunctional properties can be characterized as the capability of the service [ABH02]. Non-functional properties include the availability, accessibility, integrity, performance, reliability, regulatory, security, response\ntime and cost [mn] of the Web service.\nSeveral matchmaking schemes have already been proposed to match the service requestor's requirements\nwith service provider's advertisement [GCTB, SKWL99, PPS]. These schemes basically try to solve the\ncapability matching problem. Here, we must be aware that on the one hand, the degree of capability\nmatching and non-functional properties are all fuzzy, and on the other hand, different application domains\nhave different requirements on non-functional properties. As a consequence, it is not flexible to use classical\nmathematical modeling methods to evaluate the QoS of semantic Web services. Although there are several\nexisting QoS models [CSZ92, FK98, Gar88, GGPS96, HSUW00, Rom95, SH90, SCMK02, ZBS97], none of\nthem are suitable for the requirements considered in this chapter. These QoS models are based on precise\nQoS metrics and specific application domains. They cannot handle fuzzy and uncertain QoS metrics.\nIn this chapter, we propose a framework called soft semantic Web services agent (soft SWS agent) to\nprovide high QoS semantic Web services based on specific domain ontology such as gnome. The soft SWS\nagent could solve the forementioned two challenges effectively and efficiently. The soft SWS agent itself\nis implemented as a semantic Web service and comprises of six components: (a) Registries Crawler, (b)\nRepository, (c) Inquiry Server, (d) Publish Server, (e) Agent Communication Server, and (f) Intelligent In-\n\n\f4.2. BACKGROUND\n\n67\n\nference Engine. The core of the soft SWS agent is Intelligent Inference Engine (IIE). It uses soft computing\ntechnologies to evaluate the entire QoS of semantic Web services using both functional and non-functional\nproperties. In this chapter, we use semantic Web services for bioinformatics as a case study. We employ\nneutrosophic neural networks with Genetic Algorithms (GA) for the IIE component of our soft SWS agent.\nThe case study illustrates the flexibility and reliability of soft computing methodology for handling fuzzy\nand uncertain linguistic information. For example, capability of a Web service is fuzzy. It is unreasonable\nto use crisp values to describe it. So we can use several linguistic variables such as a \"little bit low\" and\n\"a little bit high\" to express the capability of services.\nThe chapter is organized as follows. In section 2, we present the necessary background of the QoS\nmodel, semantic Web services, and soft computing methodology. In section 3, we provide the architecture\nof the extensible soft SWS agent. In section 4, we present the design of the neutrosophic neural network\nwith GA and simulation results. In section 5, we present related work, and finally, in section 6, we present\nconclusions and possibilities for future research.\n\n4.2\n\nBackground\n\nThis section details the background material related to this research. We cover traditional Web services,\nsemantic Web, semantic Web services, soft computing methodology, and the QoS model.\n\n4.2.1\n\nTraditional Web services\n\nWeb services are modular, self-describing, and self-contained applications that are accessible over the\ninternet [CNW01]. The core components of the Web services infrastructure are XML based standards like\nSOAP, WSDL, and UDDI. SOAP is the standard messaging protocol for Web services. SOAP messages\nconsist of three parts: an envelope that defines a framework for describing what is in a message and\nhow to process it, a set of encoding rules for expressing instances of application-defined datatypes, and a\nconvention for representing remote procedure calls and responses. WSDL is an XML format to describe\nWeb services as collections of communication endpoints that can exchange certain messages. A complete\nWSDL service description provides two pieces of information: an application-level service description (or\nabstract interface), and the specific protocol-dependent details that users must follow to access the service\nat a specified concrete service endpoint. The UDDI specifications offer users a unified and systematic\nway to find service providers through a centralized registry of services that is roughly equivalent to an\nautomated online \"phone directory\" of Web services. UDDI provides two basic specifications that define\na service registry's structure and operation. One is a definition of the information to provide about each\nservice and how to encode it and the other is a publish and query API for the registry that describes how\nthis information can be published and accessed.\n\n\f68\n\n4.2.2\n\nCHAPTER 4. SOFT SEMANTIC WEB SERVICES AGENT\n\nSemantic Web\n\nThe current Web is just a collection of documents which are human readable but not machine processable.\nIn order to remedy this disadvantage, the concept of semantic Web is proposed to add semantics to the Web\nto facilitate the information finding, extracting, representing, interpreting and maintaining. \"The semantic\nWeb is an extension of the current Web in which information is given well-defined meaning, better enabling\ncomputers and people to work in cooperation\" [BLHL01]. The core concept of semantic Web is ontology.\n\"Ontology is a set of knowledge terms, including the vocabulary, the semantic interconnections, and some\nsimple rules of inference and logic for some particular topic\" [Hen01]. There are many semantic Web\ntechnologies available today, such as RDF [rdfb], RDFS [rdfa], DAML+OIL [damb] and OWL [owlb]. The\ndescription logics are used as the inference mechanism for current semantic Web technologies. There are\nsome drawbacks in the description logics [SRT05]. It cannot handle fuzziness and uncertainty associated\nwith concept membership. The current research trend is to combine soft computing with semantic Web\n[Str98, Str04, KLP97, DP04].\n\n4.2.3\n\nSemantic Web Services\n\nThe industry is proposing Web services to transform the Web from \"passive state\"\u2013repository of static\ndocuments to \"positive state\"\u2013repository of dynamic services. Unfortunately, the current Web services\nstandards are not semantic-oriented. They are awkward for service discovery, invocation, composition, and\nmonitoring. So it is natural to combine the semantic Web with Web services, the so-called semantic Web\nservices. Several projects have been initiated to design the framework for semantic Web services such as\nOWL-S, IRS-II, WSMF and METEOR-S.\nFor example, OWL-S 1.0 which is based on OWL is the upper ontology for services. It has three\nsubontologies: ServiceProfile, ServiceModel and ServiceGrounding. The service profile tells \"what the\nservice does\"; this is, it gives the types of information needed by a service-seeking agent to determine\nwhether the service meets its needs. The service model tells \"how the service works\"; that is, it describes\nwhat happens when the service is carried out. A service grounding specifies the details of how an agent can\naccess a service. Typically a grounding will specify a communication protocol, message formats, and other\nservice-specific details such as port numbers used in contacting the service. In addition, the grounding\nmust specify, for each abstract type specified in the ServiceModel, an unambiguous way of exchanging data\nelements of that type with the service.\n\n4.2.4\n\nSoft Computing Methodology\n\n\"Soft computing differs from conventional (hard) computing in that, unlike hard computing, it is tolerant\nof imprecision, uncertainty, partial truth, and approximations\" [Zad94]. The principal constituents of soft\ncomputing are fuzzy logic, neural networks, and generic algorithms. More and more technologies will join\ninto the soft computing framework in the near future. Fuzzy logic is primarily concerned with handling\nimprecision and uncertainty, neural computing focuses on simulating human being's learning process, and\ngenetic algorithms simulate the natural selection and evolutionary processes to perform randomized global\n\n\f4.3. ARCHITECTURE OF EXTENSIBLE SOFT SWS AGENT\n\n69\n\nsearch. Each component of soft computing is complementary to each other. Using combinations of several\ntechnologies such as fuzzy-neural systems will generally get better solutions.\n\n4.2.5\n\nQoS Model\n\nDifferent applications generally have different requirements of QoS dimensions. Rommel [Rom95] and\nStalk and Hout [SH90] investigate the features with which successful companies assert themselves in the\ncompetitive world markets. Their result showed that success is based on three essential dimensions: time,\ncost and quality. [Gar88] associates eight dimensions with quality, including performance and reliability.\nSoftware systems quality of service has been extensively studied in [CSZ92, GGPS96, HSUW00, ZBS97].\nFor middleware systems, Frlund and Koisinen [FK98] present a set of practical dimensions for distributed\nobject systems reliability and performance, which include TTR (time to repair), TTF (time to failure),\navailability, failure masking, and server failure. Gardaso, Miller, Sheth and Arnold [GMSA] propose a\nQoS model for workflows and Web services processes based on four dimensions: time, cost, reliability and\nfidelity.\nIn this paper, we construct a QoS model for semantic Web services. It is composed of the following\ndimensions: capability, response time, and trustworthiness. In order to be more precise, we give our\ndefinitions of the three dimensions as follows:\n1. The capability of a semantic Web service can be defined as the degree to which its functional properties\nmatch with the required functional properties of the semantic Web service requestor;\n2. The response time of a semantic Web service represents the time that elapses between service requests\narrival and the completion of that service request. Response time is the sum of waiting time and\nactual processing time;\n3. The trustworthiness of a semantic Web services is the extent to which it is consistent, reliabile,\ncompetent, and honest.\n\n4.3\n\nArchitecture of Extensible Soft SWS Agent\n\nThe extensible soft SWS agent can provide high QoS semantic Web services based on specific ontology.\nThe extensible SWS agent uses centralized client/server architecture internally. But itself can also be and\nshould be implemented as a semantic Web service based on specific service ontology. The extensible soft\nSWS agent comprises of six components: (a) Registries Crawler; (b) SWS Repository; (c) Inquiry Server;\n(d) Publish Server; (e) Agent Communication Server; (f) Intelligent Inference Engine. The high level\narchitecture of the extensible soft SWS agent is shown in Figure 1. Each of the components is described\nnext.\n\n\f70\n\nCHAPTER 4. SOFT SEMANTIC WEB SERVICES AGENT\n\nRegistry 1\n\nInquiry\nServer\nUser\n\nRegistry 2\n\nRegistries\nCrawler\n\nSWS\nRepository\n\nPublish\nServer\nUser\n\nRegistry 3\n\nSWS\nAgent\nAgent\nCommunication\nServer\n\nIntelligent\nInference\nEngine\n\nSWS\nAgent\n\nFigure 4.1: Architecture of the Extensible Soft SWS Agent\n\n4.3.1\n\nRegistries Crawler\n\nAs we pointed out before, the current UDDI registry only supports keyword based search for the Web services description. Under the Semantic Web environment, UDDI registry must be extended to be ontologycompatible which supports semantic matching of semantic Web services' capabilities. One possible way\nis to map the OWL-S service profiles into current UDDI registry's data structure. Semantic Web service\nproviders will publish the service profiles of semantic Web services in the public or private specific service\nontology-oriented UDDI registries or directly on their semantic Web sites. The specific ontology based\nsemantic Web services registries crawler has two tasks:\n1. Accessing these public and private specific service ontology-oriented UDDI registries using UDDI\nquery API to fetch the service profiles, transforming them into the format supported by our repository,\nand storing them into the repository using the publish API of our repository;\n2. Crawling the semantic Web sites hosting the specific ontology based semantic Web services directly\nto get the service profiles, transforming them into the format supported by the repository, and storing\nthem into repository using the publish API for the repository.\nThe registries crawler should be multithreaded and should be available 24x7. The registries crawler must\nalso be provided the information of highest level specific service ontology before its execution.\n\n\f71\n\n4.3. ARCHITECTURE OF EXTENSIBLE SOFT SWS AGENT\n\n4.3.2\n\nSWS Repository\n\nThe specific ontology based semantic Web servcies repository will store service profiles of semantic Web\nservices. The architecture of repository is shown in Figure 2.\n\nWeb-based\nOWL\nOntologies\n\nInternal\nCommunication\nModule\n\nOWL-S/UDDI\nTransformer\n\nOWL-S\nMatching\nEngine\n\nUDDI\nRegistry\n\nIntelligent Inference\nEngine\n\nFigure 4.2: Architecture of Repository\nThe internal communication module provides the communication interface between the repository and\nthe registries crawler, inquiry server, publish server, and the agent communication server. If a message is\nan advertisement, the internal communication module sends it to the OWL-S/UDDI transformer that constructs a UDDI service description using information about the service provider and the service name. The\nresult of publishing with the UDDI is a reference ID of the service. This ID combined with the capability\ndescription and non-functional properties of the advertisement are sent to the OWL-S matching engine\nthat stores the advertisement for capability matching. If a message is a query, the internal communication\nmodule sends the request to the OWL-S matching engine that performs the capability matching. After\ncalculating the degree of capability, the OWL-S matching engine will feed the degree of capability and\nnon-functional properties to the intelligent inference engine to get the entire Quality of Servie (QoS). The\nservice with highest QoS will be selected. The result of the selection is the advertisement of the providers\nselected and a reference to the UDDI service record. The combination of UDDI records and advertisements is then sent to the inquiry server. If the required service does not exist, OWL-S matching engine\nwill transfer the query to the agent communication server through the internal communication module.\nThe matching algorithm used by OWL-S matching engine is based on the modified algorithm described in\n\n\f72\n\nCHAPTER 4. SOFT SEMANTIC WEB SERVICES AGENT\n\n[PKPS02]. The modified algorithm considers not only the inputs, outputs, preconditions and effects, but\nalso service name.\n\n4.3.3\n\nInquiry Server\n\nThe specific ontology based semantic Web services inquiry server provides two kinds of query interface:\na programmatic API to other semantic Web services or agents and a Web-based interface for the human\nuser. Both interfaces support keyword oriented query as well as capability oriented searches.\nFor capability oriented query, the inquiry server transforms the service request profile into the format\nsupported by the repository such as OWL-S service profile and sends the query message to the internal\ncommunication module of the repository. The internal communication module sends the service profile to\nthe OWL-S matching engine and returns back the requested advertisement to the inquiry server and then\non to the service requestor. The process is shown in Figure 4.3:\nCapability\noriented query\n\nRequested\nadvertisement\n\nInquiry Server\n\nInternal\nCommunication\nModule\n\nOWL-S\nMatching Engine\n\nIntelligent\nInference\nEngine\n\nFigure 4.3: Capability oriented query\nFor the keyword oriented queries, the inquiry server will directly send the query string to the internal\ncommunication module as a query message and the internal communication module sends the query string\nto the UDDI Registry and returns back the requested UDDI records to the inquiry server and then on to\nthe service requestor. The process is shown in Figure 4.4:\n\n\f4.3. ARCHITECTURE OF EXTENSIBLE SOFT SWS AGENT\nKeyword\noriented query\n\n73\n\nRequested\nadvertisement\n\nInquiry Server\n\nInternal\nCommunication\nModule\n\nUDDI\nRegistry\n\nFigure 4.4: Keyword oriented query\n\nWe use SOAP as a communication protocol between service requestors and the inquiry server.\n\n4.3.4\n\nPublish Server\n\nThe specific ontology based semantic Web services publish server provides the publishing service for other\nagents and human users. It has two kinds of interface. One is the programmatic API to other semantic Web\nservices or agents and another is for the human user which is Web-based. The publish server will transform the service advertisement into the format supported by the repository such as OWL-S service profile\nand sends the publish message to the internal communication module. The internal communication module sends the transformed OWL-S service profile to the OWL-S/UDDI transformer. The OWL-S/UDDI\ntransformer will map the OWL-S service profile into UDDI registries data structure, and store the OWL-S\nservice profile and reference ID of service into OWL-S matching engine. The process is shown in Figure\n4.5:\nIf the advertised semantic Web services are not in the domain of the soft SWS agent, the internal\ncommunication server will transfer the advertisements to the agent communication server which will try\nto publish the advertisements into other soft SWS agents. SOAP is used as a communication protocol\nbetween service publisher and the publisher server.\n\n\f74\n\nCHAPTER 4. SOFT SEMANTIC WEB SERVICES AGENT\nService advertisement\n\nPublish Server\n\nInternal\nCommunication\nModule\n\nOWL-S/UDDI\nTransformer\n\nOWL-S\nMatching\nEngine\n\nUDDI\nRegistry\n\nFigure 4.5: Publish service advertisement\n\n4.3.5\n\nAgent Communication Server\n\nThe soft semantic Web services agent communication server uses a certain communication protocol such as\nKnowledge Query and Manipulation Language (KQML) and Agent Communication Language (ACL) to\ncommunicate with other soft SWS agents. If the current soft SWS agent cannot fulfill the required services\n(query and publish), the agent communication server is responsible for transfering the requirements to\nother soft SWS agents, getting results back, and conveying the results back to the service requestors. The\ncurrent KQML and ACL should be extended to be ontology-compatible to facilitate the semantic oriented\ncommunication.\n\n4.3.6\n\nIntelligent Inference Engine\n\nThe intelligent inference engine (IIE) is the core of the soft SWS agent. The soft SWS agent is extensible\nbecause IIE uses soft computing methodology to calculate the QoS of the semantic Web services with\nmultidimensional QoS metrics. IIE gets the degree of capability matching and non-functional properties'\nvalues from OWL-S matching engine and returns back the whole QoS to OWL-S matching engine. In\nthe next section, we show the design of an IIE using neutrosophic logic, neural networks, and genetic\nalgorithms.\n\n\f75\n\n4.3. ARCHITECTURE OF EXTENSIBLE SOFT SWS AGENT\nY1\n\nYm\n\nLayer 4\n(output layer)\n\nLayer 3\n(rule layer)\n\nLayer 2\n(membership layer)\n\nLayer 1\n(input layer)\n\nx1\n\nx2\n\nX n-1\n\nXn\n\nFigure 4.6: Schematic diagram of Neutrosophic Neural Network\n\n4.3.7\n\nDesign of Intelligent Inference Engine\n\nThis section shows one implementation of IIE based on neutrosophic logic, neural network and genetic algorithm. A schematic diagram of the four-layered neutrosophic neural network is shown in Figure 3. Nodes in\nlayer one are input nodes representing input linguistic variables. Nodes in layer two are membership nodes.\nMembership nodes are truth-membership node, indeterminacy-membership node and falsity-membership\nnode, which are responsible for mapping an input linguistic variable into three possibility distributions\nfor that variable. The rule nodes reside in layer three. The last layer contains the output variable nodes\n[LHL03].\nAs we mentioned before, the metrics of QoS of Semantic Web services are multidimensional. For\nillustration of specific ontology based Semantic Web services for bioinformatics, we decide to use capability,\nresponse time and trustworthiness as our inputs and whole QoS as output. The neutrosophic logic system\nis based on TSK model.\n\n\f76\n\n4.3.8\n\nCHAPTER 4. SOFT SEMANTIC WEB SERVICES AGENT\n\nInput neutrosophic sets\n\nLet x represent capability, y represent response time and z represent trustworthiness. We scale the capability, response time and trustworthiness to [0,10] respectively. The graphical representation of membership\nfunctions of x, y, and z are shown in Figure 4.\n\n4.3.9\n\nNeutrosophic rule bases\n\nHere, we design the neutrosophic rule base based on the TSK model. A neutrosophic rule is shown below:\nIF x is I1 and y is I2 and z is I3 THEN O is ai,1 \u2217 x + ai,2 \u2217 y + ai,3 \u2217 Z + ai,4 .\nwhere, I1 , I2 and I3 are in low, middle, and high respectively and i in [1,27]. There are totally 27 neutrosophic rules. The ai,j are consequent parameters which will be obtained by training phase of neutrosophic\nneural network using genetic algorithm.\n\n4.3.10\n\nDesign of deneutrosophication\n\nSuppose, for certain inputs x, y and z, there are m fired neutrosophic rules. To calculate the firing strength\nof jth rule, we use the formula:\nW j = Wxj \u2217 Wyj \u2217 Wzj ,\n\n(4.1)\n\nwhere\nWxj = (0.5 \u2217 tx (x) + 0.35 \u2217 (1 \u2212 fx (x)) + 0.025 \u2217 ix (x) + 0.05),\nWyj = (0.5 \u2217 ty (y) + 0.35 \u2217 (1 \u2212 fy (y)) + 0.025 \u2217 iy (y) + 0.05),\nWzj = (0.5 \u2217 tz (z) + 0.35 \u2217 (1 \u2212 fz (z)) + 0.025 \u2217 iz (z) + 0.05),\nwhere tx , fx , ix , ty , fy , iy , tz , fz , iz , are the truth-membership, falsity-membership, indeterminacy-membership\nof neutrosophic inputs x, y, z, respectively.\nSo the crisp output is:\nO=\n\nm\nX\nj=1\n\n4.3.11\n\nm\nX\nW j)\nW \u2217 (aj,1 \u2217 x + aj,2 \u2217 y + aj,3 \u2217 z + aj,4 )/(\nj\n\n(4.2)\n\nj=1\n\nGenetic algorithms\n\nGA is a model of machine learning which derives its behavior form a metaphor of the processes of evolution in nature. This is done by creation within a machine of a population of individuals represented\nby chromosomes. Here we use real-coded scheme. Given the range of parameters (coefficients of linear\nequations in TSK model), the system uses the derivate-free random search-GA to learn to find the near\noptimal solution by the fitness function through the training data.\n\n\f77\n\n4.3. ARCHITECTURE OF EXTENSIBLE SOFT SWS AGENT\n\nTruth-membership Function\n\nmiddle\nlow\n\n1.0\n\n0\n\nhigh\n\n2\n\n4\n\n6\n\n8\n\n10\n\nX, Y, Z\n\n8\n\n10\n\nX, Y, Z\n\n8\n\n10\n\nX, Y, Z\n\nIndeterminacy-membership Function\n\nlow\n\nmiddle\n\nhigh\n\n0.4\n\n0\n\n2\n\n4\n\n6\n\nFalsity-membership Function\n\n1.0\nlow\n\nhigh\n\nmiddle\n\n0\n\n2\n\n4\n\n6\n\nFigure 4.7: Membership functions of inputs\n\n\f78\n\nCHAPTER 4. SOFT SEMANTIC WEB SERVICES AGENT\n1. Chromosome: The genes of each chromosome are 108 real numbers (there are 108 parameters in\nthe neutrosophic rule base) which are initially generated randomly in the given range. So each\nchromosome is a vector of 108 real numbers.\n2. Fitness function: The fitness function is defined as\nm\nX\n(di \u2212 oi )2\nE = 1/2\n\n(4.3)\n\nj=1\n\n3. Elitism: The tournament selection is used in the elitism process.\n4. Crossover: The system will randomly select two parents among the population, then randomly select\nthe number of cross points, and simply exchange the corresponding genes among these two parents\nto generate a new generation.\n5. Mutation: For each individual in the population, the system will randomly select genes in the chromosome and replace them with randomly generated real numbers in the given range.\n\n4.3.12\n\nSimulations\n\nThere are two phases for applying a fuzzy neural network: training and predicting. In the training phase,\nwe use 150 data entries as training data set. Each entry consists of three inputs and one expected output.\nWe tune the performance of the system by adjusting the size of population, the number of generation and\nprobability of crossover and mutation. Table 1 gives the part of prediction results with several parameters\nfor output o.\nIn Table 1, No. of generation = 10000, No. of population = 100, probability of crossover = 0.7,\nprobability of mutation = 0.3. The maximum error of prediction result is 1.64. The total prediction\nerror for 150 entries of testing dataset is 19%. By our observation, designing reasonable neutrosophic\nmembership functions and choosing reasonable training data set which is based on specific application\ndomain can reduce the prediction error a lot. Here the example is just for illustration.\n\n4.4\n\nRelated Work\n\nMWSDI (METEOR-S Web Service Discovery Infrastructure) is an infrastructure of registries for semantic\npublication and discovery of Web services [VSSP04]. MWSDI supports creating registry federation by\ngrouping registries that are mapped to the same node in Registries Ontology. MSWDI is based on the P2P\nmodel, so the registries are considered as peers. In our work, the soft SWS agents also can be regarded as\npeers. MWSDI uses the Registries Ontology to maintain a global view of the registries, associated domains\nand uses this information during Web service publication and discovery. The limitation of MWSDI is that\nit supports only capability matching of Web services and does not consider non-functional properties of\n\n\f79\n\n4.5. CONCLUSIONS\nTable 4.1: Prediction Result of Neutrosophic Neural Network\nInput x\n1\n1\n1\n3\n3\n3\n5\n7\n7\n9\n\nInput y\n0\n2\n4\n2\n6\n10\n8\n10\n10\n10\n\nInput z\n1\n5\n7\n9\n7\n7\n9\n7\n9\n9\n\nDesired output\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\nReal output o\n0.51\n1.71\n2.59\n3.52\n3.81\n4.92\n5.43\n5.90\n6.45\n7.36\n\nWeb services. The soft SWS agent can be viewed as an enhancement over MWSDI as it provides the\nservice for discovering semantic Web services with the highest whole QoS.\nThe MWSDI approach annotates WSDL by associating its input and output types to domain specific\nontologies and uses UDDI structures to store the mapping of input and output types in WSDL files to\ndomain specific ontologies. It is similar to our work where we use OWL-S ontology directly to enable the\nsemantic description of Web services.\nSWWS (Semantic Web enabled Web Services) proposes a semantic-oriented service Registry which is\nsimilar to our idea [sww]. It has five components: Profile Crawler, UDDI Integration Engine, Registry\nAPI, Ontology Server and Query Interface. The service modelling ontology is stored in the ontology server.\nAll individual service descriptions are stored as instances of the service description ontology and are also\nmanaged by the ontology server. SWWS does not support quality based semantic Web services discovery.\nOASIS/ebXML describes an architecture of service registry [oas]. The registry provides a stable store\nwhere information submitted by a submitting organization is made persistent. Such information is used\nto facilitate ebXML based B2B partnerships and transactions. Submitted content may be XML schema\nand documents, process descriptions, ebXML Core Components, context descriptions, UML models, etc.\nIt focuses mainly on the registry information model and discusses issues like object replication, object\nrelocation and lifecycle management for forming registry federation. It does not use semantic Web and\nsemantic Web services technologies.\n\n4.5\n\nConclusions\n\nIn this chapter, we discussed the design of an extensible soft SWS agent and gave one implementation\nof Intelligent Inference Engine. The soft SWS agent supports both keyword based discovery as well as\n\n\f80\n\nCHAPTER 4. SOFT SEMANTIC WEB SERVICES AGENT\n\ncapability based discovery of semantic Web services. The primary motivation of our work is to solve two\nchallenges facing current Web services advertising and discovery techniques. One is how to locate the\nregistry hosting required Web service description and another is how to find the required Web service\nwith highest QoS in the located registry. The soft SWS agent solves both these problems efficiently and\neffectively. The soft SWS agent is built upon semantic Web, Web services, and soft computing technologies.\nThe soft SWS agent could be used in WWW, P2P, or Grid infrastructures. The soft SWS agent is flexible\nand extensible. With the evolution of soft computing, more and more technologies can be integrated\ninto the soft SWS agent. We used specific ontology based semantic Web services for bioinformatics and\nneutrosophic neural network with genetic algorithm as our study case. The training time is short and\ntraining results are satisfactory. The soft SWS agent will return the desired semantic Web services based\non the entire QoS of semantic Web services. In the future, we plan to extend the architecture of the soft\nSWS agent to compute the entire QoS workflow of semantic Web services to facilitate the composition\nand monitoring of complex semantic Web services and apply it to semantic Web-based bioinformatics\napplications.\n\n\fBibliography\n[ABH02]\n\nA. Ankolekar, M. Burstein, and J. Hobbs, Daml-s: Web service description for the semantic\nweb, The First International Semantic Web Conference (ISWC), 2002.\n\n[AG90]\n\nK. Atanassov and G. Gargov, Intuitionistic fuzzy logic, Compt. Rend. Acad. Bulg. Sci. 43\n(1990), 9\u201312.\n\n[AG98]\n\nK. Atanassov and George Gargov, Elements of intuitionistic fuzzy logic. part i, Fuzzy Sets\nand Systems 95 (1998), 39\u201352.\n\n[AR84]\n\nM. Anvari and G. F. Rose, Fuzzy relational databases, Proceedings of the 1st International\nConference on Fuzzy Information Processing (Kuaui, Hawaii), CRC Press, 1984.\n\n[Ata86]\n\nK. Atanassov, Intuitionistic fuzzy sets, Fuzzy Sets and Systems 20 (1986), 87\u201396.\n, Two variants of intuitionistic fuzzy propositional calculus, Preprint IM-MFAIS-5-88,\n\n[Ata88]\n1988.\n[Ata89]\n\n, More on intuitionistic fuzzy sets, Fuzzy Sets and Systems 33 (1989), 37\u201346.\n\n[Bag00]\n\nR. Bagai, Tuple relational calculus for paraconsistent databases, Lecture Notes in Artificial\nIntelligence, vol. 1952, Springer-Verlag, 2000, pp. 409\u2013416.\n\n[Bal83]\n\nJ. F. Baldwin, A fuzzy relational inference language for expert systems, Proceedings of the 13th\nIEEE International Symposium on Multivalued Logic (Kyoto, Japan), 1983, pp. 416\u2013423.\n\n[Bel77a]\n\nN. D. Belnap, A useful four-valued logic, Modern Uses of Many-valued Logic (G. Eppstein\nand J. M. Dunn, eds.), Reidel, Dordrecht, 1977, pp. 8\u201337.\n\n[Bel77b]\n\n, A useful four-valued logic, Modern Uses of Many-valued Logic (G. Eppstein and J. M.\nDunn, eds.), Reidel, Dordrecht, 1977, pp. 8\u201337.\n\n[Bis83]\n\nJ. Biskup, A foundation of codd\u015b relational maybe\u2013operations, ACM Trans. Database Syst. 8\n4 (1983), 608\u2013636.\n81\n\n\f82\n\nBIBLIOGRAPHY\n\n[BLHL01]\n\nT. Berners-Lee, J. Hendler, and O. Lassila, The semantic web, Scientific American 284 (2001),\nno. 5, 34\u201343.\n\n[BMS84]\n\nM. L. Brodie, J. Mylopoulous, and J. W. Schmidt, On the development of data models, On\nConceptual Modelling (1984), 19\u201347.\n\n[BP82]\n\nB. P. Buckles and F. E. Petry, A fuzzy representation for relational databases, Fuzzy Sets Syst\n7 (1982), 213\u2013226.\n\n[bpe]\n\nBusiness process execution language for web service (bpel4ws) 1.1 (may 2003).\n\n[BS89]\n\nH. A. Blair and V. S. Subrahmanian, Paraconsistent logic programming, Theoretical Computer\nScience 68 (1989), 135\u2013154.\n\n[BS95]\n\nR. Bagai and R. Sunderraman, A paraconsistent relational data model, International Journal\nof Computer Mathematics 55 (1995), no. 1\u20132, 39\u201355.\n\n[BS96a]\n\n, A bottom-up approach to compute the fitting model of general deductive databases,\nJournal of Intelligent Information Systems 6 (1996), no. 1, 59\u201375.\n\n[BS96b]\n\n, Computing the well-founded model of deductive databases, The International Journal\nof Uncertainty, Fuzziness and Knowledge-based Systems 4 (1996), no. 2, 157\u2013176.\n\n[bsm]\n\nThe bioinformatic sequence markup language (bsml) 3.1.\n\n[CK78]\n\nS. K. Chang and J. S. Ke, Database skeleton and its application to fuzzy query translation,\nIEEE Trans. Softw. Eng. SE\u20134 (1978), 31\u201343.\n\n[CNW01]\n\nF. Curbera, W. Nagy, and S. Weerawarana, Web services: Why and how, Workshop on ObjectOriented Web Services-OOPSLA 2001 (Tampa, FL), 2001.\n\n[Cod70]\n\nE.F. Codd, A relational model for large shared data banks, Communications of the ACM 13\n(1970), no. 6, 377\u2013387.\n\n[Cod79]\n\n, Extending the database relational model to capture more meaning, ACM Transactions\nof Database Systems 4 (1979), no. 4, 397\u2013434.\n\n[Cos77a]\n\nN. C. A. Da Costa, On the theory of inconsistent formal systems, Notre Dame Journal of\nFormal Logic 15 (1977), 621\u2013630.\n\n[Cos77b]\n\nN.C.A.D. Costa, On the theory of inconsistent formal systems, Notre Dame Journal of Formal\nLogic 15 (1977), 621\u2013630.\n\n[CP87]\n\nR. Cavallo and M. Pottarelli, The theory of probabilistic databases, Proceedings of the 13th\nVery Large Database Conference, 1987, pp. 71\u201381.\n\n\fBIBLIOGRAPHY\n[CSZ92]\n\n83\n\nD. Clark, S. Shenker, and L. Zhang, Supporting real-time applications in an integrated services\npacket network: Architecture and mechanism, Proceedings of ACM SIGCOMM, 1992.\n\n[dACM02a] S. de Amo, W. Carnielli, and J. Marcos, A logical framework for integrating inconsistent\ninformation in multiple databases, Proc. PoIKS'02, LNCS 2284, 2002, pp. 67\u201384.\n[dACM02b]\n\n, A logical framework for integrating inconsistent information in multiple databasses,\nProc. PoIKS'02, LNCS 2284, 2002, pp. 67\u201384.\n\n[dama]\n\nDaml-s 0.9 draft release.\n\n[damb]\n\nDaml+oil (march 2001).\n\n[DP04]\n\nZ. Ding and Y. Peng, A probabilistic extension to ontology language owl, Proceedings of the\nHawai' International Conference on System Sciences, 2004.\n\n[ebx]\n\nElectronic business xml initiative (ebxml).\n\n[EN00]\n\nElmasri and Navathe, Fundamentals of database systems, third ed., Addison\u2013Wesley, New\nYork, 2000.\n\n[FB02]\n\nD. Fensel and C. Bussler, The web service modelling framework wsmf, Electronic Commerce:\nResearch and Application 1 (2002), 113\u2013137.\n\n[FK98]\n\nS. Frlund and J. Koisinen, Quality-of-service specification in distributed object systems, Distributed System Engineering Journal 5 (1998), no. 4, 179\u2013202.\n\n[Gar88]\n\nDavid A. Garvin, Managing quality: The strategic and competitive edge, Free Press, New York,\n1988.\n\n[GB93]\n\nWen-Lung Gau and Daniel J. Buehrer, Vague sets, IEEE Transactions on Systems, Man, and\nCybernetics 23 (1993), no. 2, 610\u2013614.\n\n[GCTB]\n\nJ. Gonzalez-Castillo, D. Trastour, and C. Bartonili, Description logics for matchmaking of\nservices.\n\n[gen]\n\nGenebank database.\n\n[GGPS96]\n\nL. Georgiadis, R. Guerin, V. Peris, and K. Sivarajan, Efficient network qos provisioning based\non per node traffic shaping, IEEE/ACM Transactions on Networking 4 (1996), no. 4, 482\u2013501.\n\n[GMSA]\n\nJ. Gardoso, J. Miller, A. Sheth, and J. Arnold, Modelling quality of service for workflows and\nweb service processes.\n\n[Hen01]\n\nJ. Hendler, Agents and the semantic web, IEEE Intelligent Systems 16 (2001), no. 2, 30\u201337.\n\n\f84\n\nBIBLIOGRAPHY\n\n[HSUW00] M. Hiltunen, R. Schlichting, C. Ugarte, and G. Wong, Survivability through customization\nand adaptability: The cactus approach, DARPA Information Survivability Conference and\nExposition (DISCEX 2000), 2000.\n[KLP97]\n\nD. Koller, A. Levy, and A. Pfeffer, P-classic: A tractable probabilistic description logic, Proceedings of AAAI-97, 1997, pp. 390\u2013397.\n\n[KM98]\n\nN. Karnik and J. Mendel, Introduction to type-2 fuzzy logic systems, Proc. 1998 IEEE Fuzz\nConf., 1998, pp. 915\u2013920.\n\n[KY95]\n\nGeorge J. Klir and Bo Yuan, Fuzzy sets and fuzzy logic: Theory and applications, Prentice\nHall, Upper Saddle River, New Jersey, 1995.\n\n[KZ86]\n\nJ. Kacprzyk and A. Ziolkowski, Database queries with fuzzy linguistic quantifiers, IEEE Trans.\nSyst. Man Cybern. SMC\u201316 3 (1986), 474\u2013479.\n\n[LHL03]\n\nC.-H. Lee, J.-L. Hong, and Y.-C. Lin, Type-2 fuzzy neural network systems and learning,\nInternational Journal of Computational Cognition 1 (2003), no. 4, 79\u201390.\n\n[Lip79]\n\nW. Lipski, On semantic issues connected with incomplete information databases, ACM Trans.\nDatabase Syst. 4 3 (1979), 262\u2013296.\n\n[Lip81]\n\n, On databases with incomplete information, Journal of the Association for Computing\nMachinery 28 (1981), 41\u201370.\n\n[LM00]\n\nQilian Liang and Jerry M. Mendel, Interval type-2 fuzzy logic systems: Theory and design,\nIEEE Transactions On Fuzzy Systems 8 (2000), no. 5, 535\u2013550.\n\n[LS90]\n\nK.C. Liu and R. Sunderraman, Indefinite and maybe information in relational databases, ACM\nTransaction on Database Systems 15 (1990), no. 1, 1\u201339.\n\n[LS91]\n\n, A generalized relational model for indefinite and maybe information, IEEE Transaction on Knowledge and Data Engineering 3 (1991), no. 1, 65\u201377.\n\n[Mai83]\n\nD. Maier, The theory of relational databases, Computer Science Press, Rockville, Maryland,\n1983.\n\n[MDCG03] E. Motta, J. Domingue, L. Cabral, and M. Gaspari, A framework and infrastructure for\nsemantic web services, The Semantic Web-ISWC 2003, 2003.\n[Men87]\n\nE. Mendelson, Introduction to mathematical logic, Van Nostrand, Princeton, NJ, 1987, Third\nedition.\n\n[MJ02]\n\nJ. Mendel and R. John, Type-2 fuzzy sets made simple, IEEE Transactions on Fuzzy Systems\n10 (2002), 117\u2013127.\n\n\fBIBLIOGRAPHY\n\n85\n\n[mn]\n\nUnderstanding quality of service for web services.\n\n[NS92]\n\nR. Ng and V.S. Subrahmanian, Probabilistic logic programming, Information and Computation\n101 (1992), no. 2, 150\u2013201.\n\n[oas]\n\nOasis/ebxml registry services specification v2.5 (june 2003).\n\n[OCFB03]\n\nB. Omelayenko, M. Crubezy, D. Fensel, and R. Benjamins, Upml: The language and tool\nsupport for making the semantic web alive, Spinning the Semantic Web: Bringing the WWW\nto its Full Potential, MIT Press, 2003, pp. 141\u2013170.\n\n[omn]\n\nOmnigene: standardizing biological data interchange through web services technology.\n\n[owla]\n\nOwl-s 1.0 release.\n\n[owlb]\n\nWeb ontology language (owl).\n\n[Par96]\n\nS. Parsons, Current approaches to handling imperfect information in data and knowledge bases,\nIEEE Trans. Knowledge and Data Engineering 3 (1996), 353\u2013372.\n\n[PKPS02]\n\nM. Paolucci, T. Kawamura, T. Payne, and K. Sycara, Semantic matching of web services\ncapabilities, Proceedings of ISWC 2002, 2002.\n\n[PPS]\n\nT. Payne, M. Paolucci, and K. Sycara, Advertising and matching daml-s service descriptions.\n\n[Pra84]\n\nH. Prade, Lipski\u015b approach to incomplete information databases restated and generalised in\nthe setting of zadeh\u015b possibility theory, Inf. Syst. 9 1 (1984), 27\u201342.\n\n[PT84]\n\nH. Prade and C. Testemale, Generalizing database relational algebra for the treatment of incomplete or uncertain information and vague queries, Information Sciences 34 (1984), 115\u2013\n143.\n\n[PT87]\n\n, Representation of soft constraints and fuzzy attribute values by means of possibility\ndistributions in databases, Analysis of Fuzzy Information, Volume II, Artificial Intelligence\nand Decision Systems (1987), 213\u2013229.\n\n[rdfa]\n\nRdf vocabulary description language 1.0: Rdf schema.\n\n[rdfb]\n\nResource description framework.\n\n[RM88]\n\nK. V. S. V. N. Raju and A. K. Majumdar, Fuzzy functional dependencies and lossless join\ndecomposition of fuzzy relational database systems, ACM Trans. on Database Syst. 13 2 (1988),\n129\u2013166.\n\n[Rom95]\n\nG. Rommel, Simplicity wins: how germany's mid-sized industrial companies succeed, Harvard\nBusiness School Press, Boston, Mass, 1995.\n\n\f86\n\nBIBLIOGRAPHY\n\n[SB95]\n\nR. Sunderraman and R. Bagai, Uncertainty and inconsistency in relational databases, Advances in Data Management (S. Chaudhuri, A. Deshpande, and R. Krishnamurthy, eds.),\nTata McGraw Hill, 1995, pp. 206\u2013220.\n\n[SCMK02]\n\nA. Sheth, J. Cardoso, J. Miller, and K. Kochut, Qos for service-oriented middleware, Proceedings of COnference on Systemics, Cybernetics and Informatics (Orlando, FL), 2002.\n\n[SH90]\n\nG. Stalk and T. Hout, Competing against time: how timebased competition is reshaping global\nmarkets, Free Press, New York, 1990.\n\n[SKS96]\n\nA. Silberschatz, H. F. Korth, and S. Sudarshan, Database system concepts, third ed., McGraw\u2013\nHill, Boston, 1996.\n\n[SKWL99] K. Sycara, M. Klusch, S. Widoff, and J. Lu, Dynamic service matchmaking among agents in\nopen information environmen ts, SIGMOD Record 28 (1999), no. 1, 47\u201353.\n[Sma99]\n\nFlorentin Smarandache, A unifying field in logics. neutrosophy: Neutrosophic probability, set\nand logic, American Research Press, Rehoboth, 1999.\n\n[Sma03]\n\n, A unifying field in logics: Neutrosophic logic. neutrosophy, neutrosophic set, neutrosophic probability and statistics, Xiquan, Phoenix, 2003, third edition.\n\n[soa]\n\nSimple object access protocol (soap) 1.2.\n\n[SRT05]\n\nA. Sheth, C. Ramakrishnan, and C. Thomas, Semantics for the semantic web: The implicit,\nthe formal and the powerful, International Journal on Semantic Web and Information Systems\n1 (2005), no. 1, 1\u201318.\n\n[Str98]\n\nU. Straccia, A fuzzy description logic, Proceedings of AAAI-98, 1998.\n\n[Str04]\n\n, Uncertainty and description logic program: A proposal for expressing rules and uncertainty on top of ontologies, Tech. Report 2004-TR-14, ISTI-CNR, 2004.\n\n[Sub94]\n\nV. S. Subrahmanian, Amalgamating knowledge bases, ACM Transactions on Database Systems\n19 (1994), no. 2, 291\u2013331.\n\n[SVSM03]\n\nK. Sivashanmugam, K. Verma, A. Sheth, and J. Miller, Adding semantics to web services\nstandards, International Conference on Web Services (ICWS'03), 2003, pp. 395\u2013401.\n\n[sww]\n\nReport on development of web service discovery framework (october 2003).\n\n[Tur86]\n\nI. Turksen, Interval valued fuzzy sets based on normal forms, Fuzzy Sets and Systems 20\n(1986), 191\u2013210.\n\n[udd]\n\nUniversal description, discovery and integration (uddi) 3.0.1.\n\n\fBIBLIOGRAPHY\n\n87\n\n[VSSP04]\n\nK. Verma, K. Sivashanmugam, A. Sheth, and A. Patil, Meteor-s wsdi: A scalable p2p infrastructure of registries for semantic publication and discovery of web services, Journal of\nInformation Technology and Management (2004), In print.\n\n[Won82]\n\nE. Wong, A statistical approach to incomplete information in database systems, ACM Trans.\non Database Systems 7 (1982), 470\u2013488.\n\n[wsd]\n\nWeb services description language (wsdl) 1.1.\n\n[wsf]\n\nWeb services flow language (wsfl) 1.0.\n\n[WZS04]\n\nH. B. Wang, Y. Q. Zhang, and R. Sunderraman, Soft semantic web services agent, The Proceedings of NAFIPS 2004, 2004, pp. 126\u2013129.\n\n[xem]\n\nXml web services for embl (xembl).\n\n[xla]\n\nXlang: Web services for business process design (2001).\n\n[Zad65a]\n\nL. A. Zadeh, Fuzzy sets, Inf. Control 8 (1965), 338\u2013353.\n\n[Zad65b]\n\nL.A. Zadeh, Fuzzy sets, Inform. and Control 8 (1965), 338\u2013353.\n\n[Zad78]\n\nL. A. Zadeh, Fuzzy sets as the basis for a theory of possibility, Fuzzy Sets and Systems 1\n(1978), 1\u201327.\n\n[Zad94]\n\nL. Zadeh, Fuzzy logic, neural networks, and soft computing, Communications of the ACM 37\n(1994), 77\u201384.\n\n[ZBS97]\n\nJ. Zinky, D. Bakken, and R. Schantz, Architectural support for quality of service for corba\nobjects, Theory and Practice of Object Systems 3 (1997), no. 1.\n\n[ZKLY04]\n\nY.-Q. Zhang, A. Kandel, T.Y. Lin, and Y.Y. Yao, Computational web intelligence: Intelligent\ntechnology for web applications, series in machine perception and artificial intelligence, World\nScientific, 2004, Volume 58.\n\n\f"}