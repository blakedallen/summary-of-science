{"id": "http://arxiv.org/abs/1003.4865v4", "guidislink": true, "updated": "2013-04-29T08:29:29Z", "updated_parsed": [2013, 4, 29, 8, 29, 29, 0, 119, 0], "published": "2010-03-25T11:48:59Z", "published_parsed": [2010, 3, 25, 11, 48, 59, 3, 84, 0], "title": "Logical complexity of graphs: a survey", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1003.3640%2C1003.0744%2C1003.1246%2C1003.0361%2C1003.2721%2C1003.0709%2C1003.0860%2C1003.5628%2C1003.4826%2C1003.4141%2C1003.2761%2C1003.1902%2C1003.3200%2C1003.5973%2C1003.0638%2C1003.4076%2C1003.2550%2C1003.2897%2C1003.3514%2C1003.3364%2C1003.3407%2C1003.0583%2C1003.3768%2C1003.5512%2C1003.4204%2C1003.1063%2C1003.3436%2C1003.2209%2C1003.1920%2C1003.3348%2C1003.1118%2C1003.0094%2C1003.2957%2C1003.4483%2C1003.4348%2C1003.2555%2C1003.3400%2C1003.0652%2C1003.4264%2C1003.4763%2C1003.3441%2C1003.2219%2C1003.2143%2C1003.0006%2C1003.2774%2C1003.1655%2C1003.5289%2C1003.1235%2C1003.3850%2C1003.1374%2C1003.1093%2C1003.2136%2C1003.2038%2C1003.3388%2C1003.0763%2C1003.5826%2C1003.5885%2C1003.0506%2C1003.2724%2C1003.3531%2C1003.4001%2C1003.1712%2C1003.2583%2C1003.2214%2C1003.5737%2C1003.4865%2C1003.5744%2C1003.3589%2C1003.1677%2C1003.6115%2C1003.1394%2C1003.0991%2C1003.3085%2C1003.4018%2C1003.3238%2C1003.3292%2C1003.4862%2C1003.1751%2C1003.1724%2C1003.4086%2C1003.0138%2C1003.3170%2C1003.0292%2C1003.3881%2C1003.3639%2C1003.2849%2C1003.3813%2C1003.5284%2C1003.3962%2C1003.3610%2C1003.2665%2C1003.1371%2C1003.6074%2C1003.3951%2C1003.5186%2C1003.5936%2C1003.1153%2C1003.2285%2C1003.3405%2C1003.0018%2C1003.0623&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Logical complexity of graphs: a survey"}, "summary": "We discuss the definability of finite graphs in first-order logic with two\nrelation symbols for adjacency and equality of vertices. The logical depth\n$D(G)$ of a graph $G$ is equal to the minimum quantifier depth of a sentence\ndefining $G$ up to isomorphism. The logical width $W(G)$ is the minimum number\nof variables occurring in such a sentence. The logical length $L(G)$ is the\nlength of a shortest defining sentence. We survey known estimates for these\ngraph parameters and discuss their relations to other topics (such as the\nefficiency of the Weisfeiler-Lehman algorithm in isomorphism testing, the\nevolution of a random graph, quantitative characteristics of the zero-one law,\nor the contribution of Frank Ramsey to the research on Hilbert's\nEntscheidungsproblem). Also, we trace the behavior of the descriptive\ncomplexity of a graph as the logic becomes more restrictive (for example, only\ndefinitions with a bounded number of variables or quantifier alternations are\nallowed) or more expressible (after powering with counting quantifiers).", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1003.3640%2C1003.0744%2C1003.1246%2C1003.0361%2C1003.2721%2C1003.0709%2C1003.0860%2C1003.5628%2C1003.4826%2C1003.4141%2C1003.2761%2C1003.1902%2C1003.3200%2C1003.5973%2C1003.0638%2C1003.4076%2C1003.2550%2C1003.2897%2C1003.3514%2C1003.3364%2C1003.3407%2C1003.0583%2C1003.3768%2C1003.5512%2C1003.4204%2C1003.1063%2C1003.3436%2C1003.2209%2C1003.1920%2C1003.3348%2C1003.1118%2C1003.0094%2C1003.2957%2C1003.4483%2C1003.4348%2C1003.2555%2C1003.3400%2C1003.0652%2C1003.4264%2C1003.4763%2C1003.3441%2C1003.2219%2C1003.2143%2C1003.0006%2C1003.2774%2C1003.1655%2C1003.5289%2C1003.1235%2C1003.3850%2C1003.1374%2C1003.1093%2C1003.2136%2C1003.2038%2C1003.3388%2C1003.0763%2C1003.5826%2C1003.5885%2C1003.0506%2C1003.2724%2C1003.3531%2C1003.4001%2C1003.1712%2C1003.2583%2C1003.2214%2C1003.5737%2C1003.4865%2C1003.5744%2C1003.3589%2C1003.1677%2C1003.6115%2C1003.1394%2C1003.0991%2C1003.3085%2C1003.4018%2C1003.3238%2C1003.3292%2C1003.4862%2C1003.1751%2C1003.1724%2C1003.4086%2C1003.0138%2C1003.3170%2C1003.0292%2C1003.3881%2C1003.3639%2C1003.2849%2C1003.3813%2C1003.5284%2C1003.3962%2C1003.3610%2C1003.2665%2C1003.1371%2C1003.6074%2C1003.3951%2C1003.5186%2C1003.5936%2C1003.1153%2C1003.2285%2C1003.3405%2C1003.0018%2C1003.0623&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We discuss the definability of finite graphs in first-order logic with two\nrelation symbols for adjacency and equality of vertices. The logical depth\n$D(G)$ of a graph $G$ is equal to the minimum quantifier depth of a sentence\ndefining $G$ up to isomorphism. The logical width $W(G)$ is the minimum number\nof variables occurring in such a sentence. The logical length $L(G)$ is the\nlength of a shortest defining sentence. We survey known estimates for these\ngraph parameters and discuss their relations to other topics (such as the\nefficiency of the Weisfeiler-Lehman algorithm in isomorphism testing, the\nevolution of a random graph, quantitative characteristics of the zero-one law,\nor the contribution of Frank Ramsey to the research on Hilbert's\nEntscheidungsproblem). Also, we trace the behavior of the descriptive\ncomplexity of a graph as the logic becomes more restrictive (for example, only\ndefinitions with a bounded number of variables or quantifier alternations are\nallowed) or more expressible (after powering with counting quantifiers)."}, "authors": ["Oleg Pikhurko", "Oleg Verbitsky"], "author_detail": {"name": "Oleg Verbitsky"}, "author": "Oleg Verbitsky", "arxiv_comment": "57 pages; 2 figures. This version contains an appendix with an\n  improvement of Theorem 4.7", "links": [{"href": "http://arxiv.org/abs/1003.4865v4", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1003.4865v4", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "math.CO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "math.CO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "math.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1003.4865v4", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1003.4865v4", "journal_reference": null, "doi": null, "fulltext": "arXiv:1003.4865v4 [math.CO] 29 Apr 2013\n\nLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\nOLEG PIKHURKO \u2217 AND OLEG VERBITSKY \u2020\nAbstract. We discuss the definability of finite graphs in first-order logic with two\nrelation symbols for adjacency and equality of vertices. The logical depth D(G)\nof a graph G is equal to the minimum quantifier depth of a sentence defining G\nup to isomorphism. The logical width W (G) is the minimum number of variables\noccurring in such a sentence. The logical length L(G) is the length of a shortest\ndefining sentence. We survey known estimates for these graph parameters and discuss their relations to other topics (such as the efficiency of the Weisfeiler-Lehman\nalgorithm in isomorphism testing, the evolution of a random graph, quantitative\ncharacteristics of the zero-one law, or the contribution of Frank Ramsey to the\nresearch on Hilbert's Entscheidungsproblem). Also, we trace the behavior of the\ndescriptive complexity of a graph as the logic becomes more restrictive (for example, only definitions with a bounded number of variables or quantifier alternations\nare allowed) or more expressible (after powering with counting quantifiers).\n\n\u2217\nDepartment of Mathematical Sciences, Carnegie Mellon University, Pittsburgh, PA 15213,\nUSA. This work done under the support of the National Science Foundation (Grant DMS-0758057)\nand the Alexander von Humboldt Foundation.\n\u2020\nInstitute for Applied Problems of Mechanics and Mathematics, 79060 Lviv, Ukraine. This\nwork was done under the support of the Alexander von Humboldt Foundation.\n\n1\n\n\f2\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nContents\n1. Introduction\n1.1. Basic notions and examples\n1.2. Variations of logic\n1.3. Outline of the survey\n1.4. Other structures\n2. Preliminaries\n2.1. Notation: Arithmetic and graphs\n2.2. A length-depth relation\n2.3. Distinguishability vs. definability\n3. Ehrenfeucht games\n4. The Weisfeiler-Lehman algorithm\n5. Worst case bounds\n5.1. Classes of graphs\n5.2. General case\n6. Average case bounds\n6.1. Bounds for almost all graphs\n6.2. An application: The convergency rate in the zero-one law\n6.3. The evolution of a random graph\n7. Best-case bounds: Succinct definitions\n7.1. Three constructions\n7.2. The succinctness function\n7.3. Definitions with no quantifier alternation\n7.4. Applications: Inevitability of the tower function\n8. Open problems\nAcknowledgment\nReferences\nAppendix A. Upper bound for the quantifier depth in the k-variable logic\n\n3\n3\n5\n6\n7\n8\n8\n8\n11\n12\n14\n19\n19\n26\n30\n30\n34\n36\n41\n41\n44\n46\n49\n51\n52\n53\n57\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n3\n\n1. Introduction\n1.1. Basic notions and examples. We consider the first-order language of graph\ntheory whose vocabulary contains two relation symbols \u223c and =, respectively for\nadjacency and equality of vertices. The term first-order imposes the condition that\nthe variables represent vertices and hence the quantifiers apply to vertices only.\nWithout quantification over sets of vertices, we are unable to express by a single\nformula some basic properties of graphs, such as being bipartite, being connected,\netc. (see, e.g., [72, Theorems 2.4.1 and 2.4.2]). However, first-order logic is powerful\nenough to define any individual graph. How succinctly this can be done is the\nsubject of this article.\nAs a starting example, let us say in the first-order language that vertices x and y\nare at distance at most n from one another. A possible formula \u2206n (x, y) can look\nas follows:\ndef\n\n\u22061 (x, y) = x \u223c y \u2228 x = y,\nn\u22122\n\u0010\n\u0011\n^\ndef\n\u2206n (x, y) = \u2203z1 . . . \u2203zn\u22121 \u22061 (x, z1 ) \u2227\n\u22061 (zi , zi+1 ) \u2227 \u22061 (zn\u22121 , y) .\n\n(1)\n\ni=1\n\nBy a sentence we mean a first-order formula where every variable is bound by a\nquantifier. If we specify a graph G, a sentence \u03a6 is either true or false on it. If H is\na graph isomorphic to G, then \u03a6 is either true or false on G and H simultaneously.\nIn other words, first-order logic cannot distinguish between isomorphic graphs. In\ngeneral, we say that a sentence \u03a6 distinguishes a graph G from another graph H if\n\u03a6 is true on G but false on H.\nFor example, sentence \u2200x\u2200y \u22061 (x, y) distinguishes a complete graph Kn from any\ngraph H that is not complete. The sentence \u2200x\u2200y \u2206n\u22121 (x, y) distinguishes Pn , the\npath with n vertices, from any longer path Pm , m > n.\nThroughout this survey we consider only graphs whose vertex set is finite and\nnon-empty. We say that a sentence \u03a6 defines a graph G (up to isomorphism) if \u03a6\ndistinguishes G from every non-isomorphic graph H.\nFor example, the single-vertex graph P1 is defined by sentence \u2200x\u2200y (x = y). If\nn \u2265 2, then the path Pn is defined by\n\u2200x\u2200y\u2206n\u22121 (x, y) \u2227 \u00ac\u2200x\u2200y\u2206n\u22122 (x, y)\n\u2227 \u2200x\u00ac\u2203y1 \u2203y2 \u2203y3\n\n\u2227 \u2203x\u00ac\u2203y1 \u2203y2\n\n^\n\nto say that the diameter equals n \u2212 1\n!\n^\n^\n\u00ac(yi = yj )\nx \u223c yi \u2227\n\ni=1,2,3\n\ni=1,2\n\ni6=j\n\nto say that the maximum degree \u2264 2\n!\n\nx \u223c yi \u2227 \u00ac(y1 = y2 )\n\nto say that the minimum degree \u2264 1 (thereby\ndistinguishing from cycles C2n\u22122 and C2n\u22121 )\n\n(2)\n\n\f4\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nWe have already mentioned the following basic fact: Every finite graph G is\ndefinable.1 Indeed, let V (G) = {v1 , . . . , vn } be the vertex set of G and E(G) be its\nedge set. A sentence defining G could read:\n\u2203x1 . . . \u2203xn ( Distinct(x1 , . . . , xn ) \u2227 Adj(x1 , . . . , xn ) )\n\u2227 \u2200x1 . . . \u2200xn+1 \u00ac Distinct(x1 , . . . , xn+1 ),\n\n(3)\n\nwhere, for the notational convenience, we use the following shorthands\n^\ndef\nDistinct(x1 , . . . , xk ) =\n\u00ac (xi = xj ),\n1\u2264i<j\u2264k\n\ndef\n\nAdj(x1 , . . . , xn ) =\n\n^\n\n{vi ,vj }\u2208E(G)\n\nxi \u223c xj \u2227\n\n^\n\n{vi ,vj }6\u2208E(G)\n\n\u00ac (xi \u223c xj ).\n\nIn other words, we first specify that there are n distinct vertices, list the adjacencies\nand the non-adjacencies between them, and then state that we cannot find n + 1\ndistinct vertices.\nThe sentence (3) is an exhaustive description of G and seems rather wasteful. We\nwant to know if there is a more succinct way of defining a graph on n vertices. The\nfollowing natural succinctness measures of a first-order formula \u03a6 are of interest:\n\u2022 the length L(\u03a6) which is the total number of symbols in \u03a6 (each variable\nsymbol contributes 1);\n\u2022 the quantifier depth D(\u03a6) which is the maximum length of a chain of nested\nquantifiers in \u03a6;\n\u2022 the width W (\u03a6) which is the number of variables used in \u03a6 (different occurrences of the same variable are not counted).2\nFormula \u2206n in (1) was intentionally written in a non-optimal way. Note that\nL(\u2206n ) = \u0398(n), D(\u2206n ) = n \u2212 1, and W (\u2206n ) = n + 1. The same distance restriction\ncan be expressed more succinctly with respect to the latter two parameters, namely\ndef\n\n\u2206\u20321 (x, y) = \u22061 (x, y),\n\u0011\n\u0010\ndef\n\u2206\u2032n (x, y) = \u2203z \u2206\u2032\u230an/2\u230b (x, z) \u2227 \u2206\u2032\u2308n/2\u2309 (z, y) ,\n\n(4)\n\nwhere \u2308x\u2309 (resp. \u230ax\u230b) stands for the integer nearest to x from above (resp. from\nbelow). Now D(\u2206\u2032n ) = \u2308log2 n\u2309, giving an exponential gain for the quantifier depth!\nThe width can be reduced even more drastically: by recycling variables we can write\n\u2206\u2032n with only 3 variables in total, achieving W (\u2206\u2032n ) = 3.\nWe now come to the central concepts of our survey. Let us define L(G) (resp.\nD(G), W (G)) to be the minimum of L(\u03a6) (resp. D(\u03a6), W (\u03a6)) over all sentences\n1This\n\nfact, though very simple, highlights a fundamental difference between the finite and the\ninfinite: There are non-isomorphic countable graphs satisfying precisely the same first-order sentences (see, e.g., [72, Theorem 3.3.2]).\n2Gr\u00e4del [33] defines the width of a formula \u03a6 as the maximum number of free variables in a\nsubformula of \u03a6. Denote this version by W \u2032 (\u03a6). Clearly, W \u2032 (\u03a6) \u2264 W (\u03a6) and the inequality can\nbe strict. Nevertheless, the two parameters are closely related: \u03a6 can be rewritten by renaming\nbound variables in an equivalent form \u03a6\u2032 so that W (\u03a6\u2032 ) = W \u2032 (\u03a6); see [33, Lemma 3.1.4].\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n5\n\n\u03a6 defining a graph G. We will call these graph invariants, respectively, the logical\nlength, depth, and width of G.\nExample 1.1.\n1. Using \u2206\u2032n in place of \u2206n in (2), we see that D(Pn ) < log2 n + 3 and W (Pn ) \u2264\n4. The reader is encouraged to improve the latter to W (Pn ) \u2264 3.\n2. The generic defining sentence (3) shows that L(G) = O(n2 ) and D(G) \u2264 n+1\nfor every graph G on n vertices.\n3. The complement of G, denoted by G, is the graph on the same vertex set\nV (G) whose edges are those pairs that are not in E(G). One can easily prove\nthat D(G) = D(G) and W (G) = W (G).\nThe logical length, depth, and width of a graph satisfy the following inequalities:\nW (G) \u2264 D(G) < L(G).\n\nThe latter relation follows from an obvious fact that D(\u03a6) < L(\u03a6) for any first-order\nformula \u03a6. The former follows from a bit less obvious fact that for any first-order\nformula \u03a6 there is a logically equivalent formula \u03a8 with W (\u03a8) \u2264 D(\u03a6).\n1.2. Variations of logic.\n1.2.1. Fragments. Suppose that we put some restrictions on the structure of a defining sentence. This may cause an increase in the resources (length, depth, width)\nthat we need in order to define a graph in the straitened circumstances. These effects\nwill be one of our main concerns in this survey. We will deal with restrictions of the\nfollowing two sorts. We may be allowed to make only a small (constant) number of\nquantifier alternations or to use only a bounded number of variables. The former is\ncommonly used in logic and complexity theory to obtain hierarchical classifications\nof various problems. The latter is in the focus of finite-variable logics (see, e.g,\nGrohe [34]). Moreover, the number of variables has relevance to the computational\ncomplexity of the graph isomorphism problem, see Section 4.\nBounded number of quantifier alternations. A first-order formula \u03a6 with connectives\n{\u00ac, \u2227, \u2228} is in a negation normal form if all negations apply only to relations (one can\nthink that we now do not have negation at all but introduce instead two new relation\nsymbols, for inequality and non-adjacency). It is well known that this structural\nrestriction actually does not make first-order logic weaker: We can always move\nnegations in front of relation symbols without increasing the formula's length more\nthan twice and without changing the quantifier depth and the width.\nGiven such a formula \u03a6 and a sequence of nested quantifiers in it, we count the\nnumber of quantifier alternations, that is, the number of successive pairs \u2200\u2203 and \u2203\u2200\nin the sequence. The alternation number of \u03a6 is the maximum number of quantifier\nalternations over all such sequences. The a-alternation logic consists of all first-order\nformulas in the negation normal form whose alternation number does not exceed a.\nWe will adhere to the following notational convention: a subscript a will always\nindicate that at most a quantifier alternations are allowed. For example, Da (G) is\nthe minimum quantifier depth of a sentence in the a-alternation logic that defines a\ngraph G.\n\n\f6\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nFor any graph G on n vertices we have\nD(G) \u2264 . . . \u2264 Da+1 (G) \u2264 Da (G) \u2264 . . . \u2264 D1 (G) \u2264 D0 (G) \u2264 n + 1,\n\nwhere the last bound is due to the defining sentence (3).\nBounded number of variables. The k-variable logic is the fragment of first-order\nlogic where only k variable symbols are available, that is, the formula width is\nbounded by k. The restriction of defining sentences to the k-variable logic will be\nalways indicated by a superscript k. To make this notation always applicable, we\nset D k (G) = \u221e if the k-variable logic is too weak to define G. If k \u2265 W (G) for a\ngraph G of order n, then we have\nD(G) \u2264 D k+1(G) \u2264 D k (G) < nk\u22121 + k,\n\nwhere the last bound will be established in Theorem 4.7 below. Note that the\nbounds in Example 1.1.1 can be strengthened to D 3 (Pn ) < log2 n + 3.\n1.2.2. An extension with counting quantifiers. We will also enrich first-order logic by\nallowing one to use expressions of the type \u2203m \u03a8 in order to say that there are at least\nm vertices with property \u03a8. Those are called counting quantifiers and the extended\nlogic will be referred to as counting logic. A counting quantifier \u2203m contributes 1\nin the quantifier depth irrespectively of the value of m. For the counting logic we\nwill use the \"sharp-notation\", thus denoting the logical depth and width of a graph\nG in this logic, respectively, by D# (G) and W# (G). Clearly, D# (G) \u2264 D(G) and\nW# (G) \u2264 W (G). The counting quantifiers often allow us to define a graph much\nmore succinctly. For example, D# (Kn ) = W# (Kn ) = 2 as this graph is defined by\n\u2200x\u2200y (x \u223c y \u2228 x = y) \u2227 \u2203n x (x = x) \u2227 \u00ac\u2203n+1 x (x = x).\n\nThis is in sharp contrast with the fact that D(Kn ) = W (Kn ) = n + 1, where the\nlower bound follows from the simple observation that n variables are not enough to\ndistinguish between Kn and Kn+1 .\n1.3. Outline of the survey. Section 2 specifies notation and proves a couple of\nbasic facts about first-order sentences. The latter are applied to establish an upper\nbound on the logical length L(G) of a graph in terms of its logical depth D(G) and\nto estimate from above the number of graphs whose logical depth is bounded by a\ngiven parameter k. The existence of such bounds is more important than the bounds\nthemselves that are huge, involving the tower function. Furthermore, we define\nD(G, H) to be the smallest quantifier depth sufficient to distinguish between nonisomorphic graphs G and H. We will observe that the obvious inequality D(G, H) \u2264\nD(G) gives the sharp lower bound on D(G). Thus estimating D(G) reduces to\nestimating D(G, H) for all H 6\u223c\n=G\nThe value of D(G, H) is characterized in Section 3 as the length of the Ehrenfeucht\ngame on G and H. Moreover, the logical width admits a characterization in terms\nof another parameter of the game. Thus, the determination of the logical depth and\nwidth of a graph reduces to designing optimal strategies in the Ehrenfeucht game.\nIn Section 4, the logical width and the logical depth are also characterized, respectively, as the minimum dimension and the minimum number of rounds such that\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n7\n\nthe so-called Weisfeiler-Lehman algorithm returns the correct answer. The algorithm tries to decide whether two input graphs are isomorphic; its one-dimensional\nversion is just the well-known color-refining procedure. Thus, an analysis of the\nalgorithm can give us information on the logical complexity of the input graphs.\nThis relationship is even more advantageous in the other direction: Once we prove\nthat all graphs in some class C have low logical complexity, we immediately obtain\nan efficient isomorphism test for C.\nThis paradigm is successful for graphs with bounded treewidth and planar graphs,\nwith good prospects for covering all classes of graphs with an excluded minor. In\nSection 5.1 we report strong upper bounds for the logical depth/width of graphs in\nthese classes. In Section 5.2 we survey the bounds known in the general case. In\nparticular, if a graph G on n vertices has no twins, i.e., no two vertices have the\nsame adjacency to the rest of the graph, then D(G) < 12 n + 3. The factor of 12\ncan be improved for graphs with bounded vertex degrees. Here we have to content\nourselves with linear bounds in view of a linear lower bound by Cai, F\u00fcrer, and\nImmerman [15]. They constructed examples of graphs with maximum degree 3 such\nthat W# (G) > c n for a positive constant c.\nSection 6 discusses the logical complexity of a random graph. We obtain rather\nclose lower and upper bounds for almost all graphs. Furthermore, we trace the\nbehavior of the logical depth in the evolutional random graph model Gn,p where p\nis a function of n.\nWhile in Sections 5 and 6 we deal with, respectively, worst case and average\ncase bounds, Section 7 is devoted to the best case. More specifically, we define\nsuccinctness function q(n) to be equal to the minimum of D(G) over all G on n\nvertices. Since only finitely many graphs are definable with a fixed quantifier depth,\nq(n) goes to infinity as n increases. It turns out that its growth is inconceivably slow:\nWe show a superrecursive gap between the values of q(n) and n. This phenomenon\ndisappears if we \"smoothen\" q(n) by considering the least monotonic upper bound\nfor this function: the smoothed succinctness function is very close to the log-star\nfunction. Furthermore, the succinctness function can be considered in any logic. Let\nq0 (n) be its variant for the logic with no quantifier alternation. We can determine\nq0 (n) with rather high precision: It is also related to the log-star function. The\nlower bound for q0 (n) implies a superrecursive gap between the graph parameters\nD(G) and D0 (G), yet another evidence of the weakness of the 0-alternation logic.\nThe tight upper bound for q0 (n) shows that, nevertheless, there are graphs whose\ndefinitions, even if quantifiers are not allowed to alternate, can have surprisingly low\nquantifier depth. We give several methods of explicit constructions of such graphs.\nThese constructions have another interesting aspect. They allow us to show that\nthe previously mentioned tower-function bounds from Section 2 cannot be improved\nsubstantially.\nSome of the most interesting open questions are collected in Section 8.\n1.4. Other structures. Some of the results presented in the survey generalize to\nrelational structures over a fixed vocabulary. Such generalizations are often straightforward. For example, the upper bounds on succinctness functions hold true if the\n\n\f8\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nvocabulary contains at least one relation symbol of arity more than 1 (since any\ngraph can be trivially represented as a structure over this vocabulary). Extension\nof the worst case bounds to general structures is also possible but requires essential\nadditional efforts; see [65].\nVarious definability parameters were investigated also for special structures: colored graphs (Immerman and Lander [47], Cai, F\u00fcrer, and Immerman [15]), digraphs\nand hypergraphs (Pikhurko, Veith, and Verbitsky [64]), bit strings and ordered trees\n(Spencer and St. John [73]), linear orders (Grohe and Schweikardt [41]).\n2. Preliminaries\n2.1. Notation: Arithmetic and graphs. We define the tower function by\nTower(0) = 1 and Tower(i) = 2Tower (i\u22121) for each subsequent integer i. Given a function f , by f (i) (x) we will denote the i-fold composition of f . In particular, f (0) (x) =\nx. By log n we always mean the logarithm base 2. The \"inverse\" of the tower function, the log-star function log\u2217 n, is defined by log\u2217 n = min { i : Tower(i) \u2265 n}. We\nuse the standard asymptotic notation. For example, f (n) = \u03a9(g(n)) means that\nthere is a constant c > 0 such that f (n) \u2265 c g(n) for all sufficiently large n.\nThe number of vertices in a graph G is called the order of G and is denoted by\nv(G). The neighborhood N(v) of a vertex v consists of all vertices adjacent to v.\nThe degree of v is defined by deg v = |N(v)|. The maximum degree of a graph G is\ndefined by \u2206(G) = maxv\u2208V (G) deg v.\nThe distance between vertices u and v in a graph G is defined to be the minimum\nlength of a path from u to v and denoted by dist(u, v). If u and v are in different\nconnectivity components, then we set dist(u, v) = \u221e. The eccentricity of a vertex\nv is defined by e(v) = maxu\u2208V (G) dist(v, u).\nLet X \u2282 V (G). The subgraph induced by G on X is denoted by G[X]. We denote\nG \\ X = G[V (G) \\ X], which is the result of the removal of all vertices in X from\nG. If a single vertex v is removed, we write G \u2212 v = G \\ {v}. A set of vertices X is\ncalled homogeneous if G[X] is a complete or an empty graph.\nA graph is k-connected if it has at least k + 1 vertices and remains connected after\nremoval of any k \u2212 1 vertices. 2-connected graphs are also called biconnected.\nA graph is asymmetric if it admits no non-trivial automorphism.\n2.2. A length-depth relation. We have already mentioned the trivial relation\nD(G) < L(G). Now we aim at bounding L(G) from above in terms of D(G). We\nwrite G \u2261k H to say that graphs G and H cannot be distinguished by any sentence\nwith quantifier depth k. As it is easy to see, \u2261k is an equivalence relation. Its\nequivalence classes will be referred to as \u2261k -classes. We say that a sentence \u03a6\ndefines a \u2261k -class \u03b1 if \u03a6 is true on all graphs in \u03b1 and false on all other graphs.\nLemma 2.1.\n1. The number of \u2261k -classes is finite and does not exceed Tower(k + log\u2217 k + 2).\n2. Every \u2261k -class is definable by a sentence \u03a6 with D(\u03a6) = k and L(\u03a6) <\nTower(k + log\u2217 k + 2).\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n9\n\nProof. The case of k = 1 is easy: There is only one \u22611 -class (consisting of all graphs),\nwhich is definable by \u2200x(x = x).\nLet k \u2265 2 and 0 \u2264 s \u2264 k. When we write z\u0304, we will mean an s-tuple (z1 , . . . , zs )\n(if s = 0, the sequence is empty). If \u016b \u2208 V (G)s and \u03a6 is a formula with s free\nvariables x1 , . . . , xs , then notation G, \u016b |= \u03a6(x\u0304) will mean that \u03a6(x\u0304) is true on G\nwith each xi being assigned the respective ui as its value.\nA formula \u03a6(x1 , . . . , xs ) of quantifier depth k \u2212 s is normal if \u03a6 is built from variables x1 , . . . , xk and every maximal sequence of nested quantifiers in \u03a6 has length\nk \u2212 s and quantifies the variables xs+1 , . . . , xk exactly in this order. A simple inductive syntactic argument shows that any \u03a6(x1 , . . . , xs ) has an equivalent normal\nformula \u03a6\u2032 (x1 , . . . , xs ) of the same quantifier depth as \u03a6.\nWe write G, \u016b \u2261k,s H, v\u0304 to say that G, \u016b |= \u03a6(x\u0304) exactly when H, v\u0304 |= \u03a6(x\u0304) for\nevery normal formula \u03a6 of quantifier depth k \u2212 s. A normal formula \u03a6(x\u0304) defines\na \u2261k,s -class \u03b1 if G, \u016b |= \u03a6(x\u0304) exactly when G, \u016b belongs to \u03b1. The \u2261k,s -equivalence\nclass of G, \u016b will be denoted by [G, \u016b]k,s .\nLet f (k, s) denote the number of all \u2261k,s -classes and l(k, s) denote the minimum\nl such that every \u2261k,s-class is definable by a normal formula of depth at most k \u2212 s\nand length at most l. Note that relations \u2261k and \u2261k,0 coincide. Thus, our goal is\nto estimate the numbers f (k, 0) and l(k, 0) from above.\nWe use the backward induction on s. A \u2261k,k -class can be determined by specifying,\nfor each pair of the k elements, whether they are equal and, if not, whether they\nare adjacent or non-adjacent. There are at most three choices per pair. It easily\nk\nfollows that f (k, k) \u2264 3(2) and l(k, k) < 9k 2 . We are now going to estimate f (k, s)\nand l(k, s) in terms of f (k, s + 1) and l(k, s + 1). Suppose that each \u2261k,s+1-class \u03b2\nis defined by a formula \u03a6\u03b2 (x1 , . . . , xs , xs+1 ) whose length is bounded by l(k, s + 1).\nDefine S(G, \u016b) = { [G, \u016b, u]k,s+1 : u \u2208 V (G)}, the set of \u2261k,s+1-classes obtainable\nfrom G, \u016b by specifying one extra vertex. Note that\nG, \u016b \u2261k,s H, v\u0304 if and only if S(G, \u016b) = S(H, v\u0304).\nIndeed, suppose that S(G, \u016b) 6= S(H, v\u0304), say, \u03b2 = [G, \u016b, u]k,s+1 is not in S(H, v\u0304)\nfor some u \u2208 V (G). Then G, \u016b 6\u2261k,s H, v\u0304 because formula \u2203xs+1 \u03a6\u03b2 is true for G, \u016b\nbut false for H, v\u0304. Suppose now that G, \u016b and H, v\u0304 are distinguishable by a normal\nformula of quantifier depth k \u2212 s. As it is easily seen, they are distinguishable by\nsuch a formula of the form \u2203xs+1 \u03a6. Without loss of generality, assume that the\nformula \u2203xs+1 \u03a6 is true for G, \u016b but false for H, v\u0304. Let u \u2208 V (G) be such that\nG, \u016b, u |= \u03a6. Since \u03a6 distinguishes G, \u016b, u from all H, v\u0304, v with v \u2208 V (H), the class\n[G, \u016b, u]k,s+1 is not in S(H, v\u0304) and, hence, S(G, \u016b) 6= S(H, v\u0304).\nThus, for a \u2261k,s -class \u03b1 we can correctly define the set of \u2261k,s+1-classes accessible\nfrom \u03b1 by S(\u03b1) = S(G, \u016b) for some (in fact, arbitrary) G, \u016b in \u03b1. It follows from\nwhat we have proved that for arbitrary \u2261k,s -classes \u03b1 and \u03b1\u2032 , we have\n\u03b1 = \u03b1\u2032 if and only if S(\u03b1) = S(\u03b1\u2032 ).\n\nAs an immediate consequence,\nf (k, s) \u2264 2f (k,s+1).\n\n\f10\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\n\u0001\nk\nSince 2 * k2 \u2264 2k for every integer k \u2265 1, we have f (k, k) \u2264 22 \u2264 Tower(log\u2217 k + 2).\nBy the above recursion, we conclude that f (k, 0) \u2264 Tower(k + log\u2217 k + 2), which\nproves Part 1 of the lemma.\nAnother conclusion is that any \u2261k,s -class \u03b1 can be defined by a normal formula3\n^\n^\ndef\n\u03a6\u03b1 (x\u0304) =\n\u2203xs+1 \u03a6\u03b2 (x\u0304, xs+1 ) \u2227 \u2200xs+1\n\u00ac \u03a6\u03b2 (x\u0304, xs+1 ).\n\u03b26\u2208S(\u03b1)\n\n\u03b2\u2208S(\u03b1)\n\nLooking at the length of \u03a6\u03b1 (x\u0304), we obtain the recurrence\nl(k, s) \u2264 f (k, s + 1)(l(k, s + 1) + 9).\n\n(5)\n\nSet g(x) = 2x (x + 9). A simple inductive argument shows that\nf (k, s) \u2264 2g\n\n(k\u2212s) (9k 2 )\n\nand l(k, s) \u2264 g (k\u2212s) (9k 2 ).\n\nDefine the two-parameter function Tower(i, x) inductively on i by Tower(0, x) = x\nand Tower(i+1, x) = 2Tower (i,x) for i \u2265 0. This is a generalization of the old function:\nTower(i, 1) = Tower(i). One can prove by induction on i that for any x \u2265 5 and\ni \u2265 1 we have\ng (i) (x) < Tower(i + 1, x)/2.\n(6)\nIndeed, it is easy to check the validity of (6) for i = 1, while for i \u2265 2 we have\ng (i) (x) < g(Tower(i, x)/2) < 2Tower (i,x)\u22121 = Tower(i + 1, x)/2.\n\n(7)\n\nWe have for all k \u2265 5 that 9k 2 < Tower(log\u2217 k + 1). This follows from 9k 2 < 2k for\nk \u2265 10 and can be checked by hand for 5 \u2264 k \u2264 9. Thus, for k \u2265 5, we have by (6)\nthat\nl(k, 0) \u2264 g (k) (9k 2 ) < Tower(k+1, 9k 2)/2 < Tower(k+1, 9k 2) < Tower(k+log\u2217 k+2).\n\nRoutine calculations (omitted) based on (5) and the exact initial values f (2, 2) = 3,\nf (3, 3) = 15, and f (4, 4) = 127 give Part 2 of the lemma for 2 \u2264 k \u2264 4.\n\u0003\n\nLemma 2.1.2 gives us a bound for the logical length of a graph in terms of its\nlogical depth. It suffices to notice that each single graph G constitutes a \u2261k -class\nfor k = D(G).\nTheorem 2.2 (Pikhurko, Spencer, and Verbitsky [61]).\nL(G) < Tower(D(G) + log\u2217 D(G) + 2).\nIn fact, [61, Theorem 10.1] states only that L(G) < Tower(D(G) + log\u2217 D(G) +\nO(1)). Here we went into the trouble of estimating the error term more precisely so\nthat Lemma 2.1.2 and some of its consequences can be stated more neatly.\nLemma 2.1.1 gives the following result.\nTheorem 2.3. The number of graphs with logical depth at most k does not exceed\nTower(k + log\u2217 k + 2).\nNotice two further consequences of Lemma 2.1.\n3This\n\nis a variant of Hintikka's formula, cf. [24, Definition 2.2.5].\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n11\n\nTheorem 2.4.\n1. There are at most Tower(k +log\u2217 k +3) pairwise inequivalent sentences about\ngraphs of quantifier depth k.\n2. Every sentence \u03a6 about graphs of quantifier depth k has an equivalent sentence \u03a6\u2032 with the same quantifier depth and length less than 3 Tower(k +\nlog\u2217 k + 2)2 .\nProof. Note that, if a sentence \u03a6 has quantifier depth k, then the set of all graphs\non which \u03a6 is true is the union of some \u2261k -classes. Therefore, there are 2f (k) and\nno more pairwise inequivalent sentences of quantifier depth k, where f (k) is the\nnumber of \u2261k -classes. Part 1 now follows from Lemma 2.1.1. By the same reason\nevery sentence \u03a6 of quantifier depth k is equivalent to the disjunction of sentences\ndefining some \u2261k -classes. By Lemma 2.1.2, such disjunction does not need to be\nlonger than (f (k) + 3)Tower(k + log\u2217 k + 2). This proves Part 2.\n\u0003\n2.3. Distinguishability vs. definability. Given two non-isomorphic graphs G\nand H, we define D(G, H) (resp. W (G, H)) to be the minimum of D(\u03a6) (resp.\nW (\u03a6)) over all sentences \u03a6 distinguishing G from H. Thus, D(G, H) > k if and\nonly if G \u2261k H. Obviously, D(G, H) = D(H, G). Also, D(G, H) \u2264 D(G) and\nW (G, H) \u2264 W (G). It turns out that these inequalities are tight in the following\nsense.\nLemma 2.5.\n1. D(G) = maxH6\u223c\n=G D(G, H).\n2. W (G) = maxH6\u223c\n=G W (G, H).\nProof. 1. For each H non-isomorphic to G fix a sentence \u03a6H that distinguishes G\nfrom H and has the minimum possible quantifier depth, i.e., D(\u03a6H ) = D(G, H).\ndef V\nConsider the sentence \u03a6 = H6\u223c\n=G \u03a6H . It distinguishes G from each non-isomorphic\nH and has quantifier depth maxH D(\u03a6H ). Therefore, D(G) \u2264 maxH D(G, H) as\nwanted. An obvious drawback of this argument is that the above conjunction over\nH in \u03a6 is actually infinite. However, we have D(\u03a6H ) \u2264 D(G) and there are only\nfinitely many pairwise inequivalent first-order sentences about graphs of bounded\nquantifier depth, see Theorem 2.4 above. Thus we can obtain a legitimate finite\nsentence defining G by removing from \u03a6 duplicates up to logical equivalence.\nV 2. Running the same argument, we have to \"prune\" the infinite conjunction\nH6\u223c\n=G \u03a6H , where W (\u03a6H ) = W (G, H). Here we encounter a complication because\nthere are infinitely many inequivalent sentences of the same width. (Consider e.g.\nthe sentences from Example 1.1.1.) However, Theorem 4.7.1 in Section 4 implies\nthat for every H we can additionally require that the depth of \u03a6H is at most, for\nexample, nn + n, where n is the order of G. Now we can proceed as in Part 1 of the\nlemma.\n\u0003\nLemma 2.5 stays true in any finite-variable logic, any logic with bounded number\nof quantifier alternations, the logic with counting quantifiers, and any hybrid thereof.\nWe set D k (G, H) = \u221e if k variables do not suffice to distinguish G from H.\n\n\f12\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\n3. Ehrenfeucht games\nLet G and H be graphs with disjoint vertex sets. The r-round k-pebble Ehrenfeucht\ngame on G and H, denoted by Ehrkr (G, H), is played by two players, Spoiler and\nDuplicator, to whom we may refer as he and she respectively. The players have\nat their disposal k pairwise distinct pebbles p1 , . . . , pk , each given in duplicate. A\nround consists of a move of Spoiler followed by a move of Duplicator. At each move\nSpoiler takes a pebble, say pi , selects one of the graphs G or H, and places pi on a\nvertex of this graph. In response Duplicator should place the other copy of pi on a\nvertex of the other graph. It is allowed to move previously placed pebbles to other\nvertices and place more than one pebble on the same vertex.\nAfter each round of the game, for 1 \u2264 i \u2264 k let xi (resp. yi ) denote the vertex of\nG (resp. H) occupied by pi , irrespectively of who of the players placed the pebble\non this vertex. If pi is off the board at this moment, xi and yi are undefined. If after\nevery of r rounds the component-wise correspondence (x1 , . . . , xk ) to (y1 , . . . , yk ) is\na partial isomorphism from G to H, this is a win for Duplicator. Otherwise the\nwinner is Spoiler. The following example should provide the reader with a hint for\nthe solution of the exercise suggested in Example 1.1.1.\nExample 3.1. Spoiler wins Ehr34 (Pn , H) if \u2206(H) \u2265 3. Assume that H contains no\ntriangle because otherwise Spoiler wins by pebbling its vertices. Let v be a vertex in\nH of degree at least 3. Spoiler pebbles 3 neighbors of v. Duplicator should pebble\n3 distinct pairwise non-adjacent vertices in Pn for otherwise she loses the game.\nThe distance between any two vertices pebbled in H is equal to 2. Unlike to this,\nsome two vertices pebbled in Pn (say, by pebbles p1 and p2 ) are at a larger distance.\nSpoiler moves p3 to v. Duplicator is forced to violate the adjacency relation.\nThe particular case of Ehrkr (G, H) in which the number of pebbles is the same\nas the number of rounds, i.e., k = r, deserves a special attention. In this case, the\noutcome of the game will not be affected if we prohibit moving pebbles from one\nvertex to another, that is, if we allow the players to play with each pi exactly once,\nsay, in the i-th round. We denote this variant of Ehrrr (G, H) by Ehrr (G, H) and\nwill mean it whenever the term Ehrenfeucht game is used with no specification.\nLemma 3.2. Suppose that in the 3-pebble Ehrenfeucht game on (G, H) some two\nvertices x, y \u2208 V (G) at distance n were selected so that their counterparts x\u2032 , y \u2032 \u2208\nV (H) are at a strictly larger distance (possibly infinity). Then Spoiler can win in at\nmost \u2308log n\u2309 extra moves.\nProof. Spoiler sets u1 = x, u2 = y, v1 = x\u2032 , v2 = y \u2032 , and places a pebble on the\nmiddle vertex u in a shortest path from u1 to u2 (or either of the two middle vertices\nif d(u1 , u2) is odd). Let v \u2208 V (H) be selected by Duplicator in response to u. By\nthe triangle inequality, we have d(u, um) < d(v, vm ) for m = 1 or m = 2. For such\nm Spoiler resets u1 = u, u2 = um , v1 = v, v2 = vm and applies the same strategy\nonce again. In this way Spoiler ensures that d(u1, u2 ) < d(v1 , v2 ) in each round.\nEventually, unless Duplicator loses earlier, d(u1 , u2) = 1 while d(v1 , v2 ) > 1, that is,\nDuplicator fails to preserve adjacency.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n13\n\nTo estimate the number of moves made, notice that initially d(u1 , u2) = n and\nfor each subsequent u1 , u2 this distance becomes at most f (d(u1, u2)), where f (\u03b1) =\n(\u03b1 + 1)/2. Therefore the number of moves does not exceed the minimum i such\nthat f (i) (n) < 2. As (f (i) )\u22121 (\u03b2) = 2i \u03b2 \u2212 2i + 1, the latter inequality is equivalent to\n2i \u2265 n, which proves the bound.\n\u0003\n\nThere is a rather clear connection between Spoiler's strategy designed in the proof\nof Lemma 3.2 and first-order formula \u2206\u2032n (x, y) in (4). We will see that, in some strong\nsense, Ehrr (G, H) corresponds to first-order logic, while Ehrkr (G, H) corresponds\nto its k-variable fragment. In fact, every logic has its own corresponding game.\nIn the k-alternation variant of Ehrr (G, H) Spoiler is allowed to switch from one\ngraph to another at most k times during the game, i.e., in at most k rounds he can\nchoose the graph other than that in the preceding round.\nIn the counting version of the game Ehrkr (G, H) Spoiler can make a counting\nmove consisting of two acts. First, he specifies a set of vertices A in one of the\ngraphs. Duplicator has to respond with a set of vertices B in the other graph so\nthat |B| = |A| (if this is impossible, she immediately loses). Second, Spoiler places\na pebble pi on a vertex b \u2208 B. In response Duplicator has to place the other copy of\npi on a vertex a \u2208 A. It is clear that, any round with |A| = 1 is virtually the same\nas a round of the standard game.\nThere is a general analogy between strategies allowing Spoiler to win a game\non G and H and first-order sentences distinguishing these graphs: the former can\nbe converted into the latter and vice versa so that the duration of a game will be\nin correspondence to the quantifier depth and the number of pebbles will be in\ncorrespondence to the number of variables.\nTheorem 3.3 (The Ehrenfeucht theorem and its variations). Let G and H be nonisomorphic graphs.\n1. (Ehrenfeucht [25], Fra\u0131\u0308ss\u00e9 [30]4) D(G, H) equals the minimum r such that\nSpoiler has a winning strategy in Ehrr (G, H).\n2. (Pezzoli [60]) Dk (G, H) equals the minimum r such that Spoiler has a winning\nstrategy in the k-alternation game Ehrr (G, H).\n3. (Immerman [44], Poizat [66]) W (G, H) equals the minimum k such that\nSpoiler has a winning strategy in Ehrkr (G, H) for some r.\n4. (Immerman [44], Poizat [66]) D k (G, H) equals the minimum r such that\nSpoiler has a winning strategy in Ehrkr (G, H).\n5. (Immerman and Lander [47]) W# (G, H) equals the minimum k such that\nSpoiler has a winning strategy in the counting version of Ehrkr (G, H) for\nk\nsome r. Furthermore, if k \u2265 W# (G, H), then D#\n(G, H) equals the minimum r such that Spoiler has a winning strategy in the counting version of\nEhrkr (G, H).\nWe refer the reader to [45, Theorem 6.10] for the proof of Parts 3\u20135. Part 1 follows\nfrom Part 4 in view of the facts that D(G, H) = mink D k (G, H) and that any\n4It\n\nwas Ehrenfeucht who formally introduced the game. Prior to Ehrenfeucht, Fra\u0131\u0308ss\u00e9 obtained\nvirtually the same result using an equivalent language of partial isomorphisms.\n\n\f14\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nsentence \u03a6 can be equivalently rewritten with the same quantifier depth D(\u03a6) and\nwith use of at most D(\u03a6) variables.\nIn view of Lemma 2.5, the Ehrenfeucht theorem provides us with a powerful tool\nfor estimating the logical depth and width of graphs. Consider, for instance, a path\nPn . Example 3.1 and Lemma 3.2 are immediately translated into the upper bound\nD 3 (Pn ) < log n + 3. On the other hand, a lower bound D(Pn ) \u2265 log n \u2212 2 follows\nfrom the existence of a winning strategy for Duplicator in Ehrr (Pn , Pn+1) whenever\nr \u2264 \u230alog n\u230b \u2212 1 (all details can be found in [72, Theorem 2.1.3]).\n4. The Weisfeiler-Lehman algorithm\nGraph Isomorphism is the problem of recognizing if two given graphs are isomorphic.\nThe best known algorithm (Babai, Luks, and Zemlyachenko [9]) takes time\n\u221a\nO( n log n)\n2\n, where n denotes the number of vertices in the input graphs. Particular classes of graphs for which Graph Isomorphism is solvable more efficiently are\ntherefore of considerable interest. Somewhat surprisingly, a number of important\ntractable cases are solvable by a combinatorially simple, uniform approach, namely\nthe multidimensional Weisfeiler-Lehman algorithm. The efficiency of this method\ndepends much on the logical complexity of input graphs.\nFor the history of this approach to the graph isomorphism problem we refer the\nreader to [5, 15]. We will abbreviate k-dimensional Weisfeiler-Lehman algorithm\nby k-dim WL. The 1-dim WL is commonly known as canonical labeling or color\nrefinement algorithm. It proceeds in rounds; in each round a coloring of the vertices\nof input graphs G and H is defined, which refines the coloring of the previous round.\nThe initial coloring C 0 is uniform, say, C 0 (u) = 1 for all vertices u \u2208 V (G) \u222a V (H).\nIn the (i + 1)st round, the color C i+1 (u) is defined to be a pair consisting of the\npreceding color C i\u22121 (u) and the multiset of colors C i\u22121 (w) for all w adjacent to u.\nFor example, C 1 (u) = C 1 (v) iff u and v have the same degree. To keep the color\nencoding short, after each round the colors are renamed (we never need more than\n2n color names5). As the coloring is refined in each round, it stabilizes after at\nmost 2n rounds, that is, no further refinement occurs. The algorithm stops once\nthis happens. If the multiset of colors of the vertices of G is distinct from the\nmultiset of colors of the vertices of H, the algorithms reports that the graphs are\nnot isomorphic; otherwise, it declares them to be isomorphic. Disappointingly, the\noutput is not always correct. The algorithm may report false positives, for example,\nif both input graphs are regular with the same vertex degree.\nFollowing the same idea, the k-dimensional version iteratively refines a coloring\nof V (G)k \u222a V (H)k . The initial coloring of a k-tuple \u016b is the isomorphism type of\nthe subgraph induced by the vertices in \u016b (viewed as a labeled graph where each\nvertex is labeled by the positions in the tuple where it occurs). Loosely speaking, the\nrefinement step takes into account the colors of all neighbors of \u016b in the Hamming\nmetric. Color stabilization is surely reached in r < 2nk rounds and, thus, the\nalgorithm terminates in polynomial time for fixed k.\n5We\n\ndo not need even more than n because appearance of the (n + 1)th color indicates nonisomorphism.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n15\n\nLet us give a careful description of the k-dim WL for k \u2265 2. Given an ordered\nk-tuple of vertices \u016b = (u1 , . . . , uk ) \u2208 V (G)k , we define the isomorphism type of \u016b\nto be the pair\n\u0010\b\n\u0011\n\b\ntp(\u016b) =\n(i, j) \u2208 [k]2 : ui = uj , (i, j) \u2208 [k]2 : {ui , uj } \u2208 E(G) ,\n(8)\n\nwhere [k] denotes the set {1, . . . , k}. If w \u2208 V (G) and i \u2264 k, we let \u016bi,w denote the\nresult of substituting w in place of ui in \u016b.\nThe r-round k-dim WL takes as an input two graphs G and H and purports to\ndecide if G \u223c\n= H. The algorithm performs the following operations with the set\nV (G)k \u222a V (H)k .\nInitial coloring. The algorithm assigns each \u016b \u2208 V (G)k \u222a V (H)k color C k,0 (\u016b) =\ntp(\u016b) (in a suitable encoding).\nColor refinement step. In the i-th round each \u016b \u2208 V (G)k is assigned color\n\u0010\n\u0011\n\b\b k,i\u22121 1,w\n\u0001\nC k,i (\u016b) = C k,i\u22121 (\u016b),\nC\n(\u016b ), . . . , C k,i\u22121(\u016bk,w ) : w \u2208 V (G)\nand similarly with each \u016b \u2208 V (H)k .\nHere {{. . .}} denotes a multiset. In a weaker count-free version of the algorithm,\nthis notation will be interpreted as a set. Let\n\b\b\nC k,r (G) = C k,r (\u016b) : \u016b \u2208 V (G)k .\nComputing an output. The algorithm reports that G \u223c\n6= H if\nC k,r (G) 6= C k,r (H)\n\n(9)\n\nand that G \u223c\n= H otherwise.\nIn the above description we skipped an important implementation detail. In order\nto prevent increasing the length of C k,i (\u016b) at the exponential rate, we arrange colors\nof all k-tuples of V (G)k \u222a V (H)k in the lexicographic order and replace each color\nwith its number before every refinement step.\nFurthermore, let\n\b\b\ndiag C k,r (G) = C k,r (uk ) : u \u2208 V (G) ,\nwhere uk denotes the k-tuple (u, . . . , u).\n\nLemma 4.1. In both the standard and the count-free versions of the k-dim WL,\ninequality\ndiag C k,r (G) 6= diag C k,r (H)\n(10)\nimplies (9), which in its turn implies\ndiag C k,r+k\u22121(G) 6= diag C k,r+k\u22121(H).\n\n(11)\n\nProof. Consider the standard version; the analysis of the count-free case is similar\n(and even simpler). By the equality type of a k-tuple \u016b we mean the first component\nof (8). Note that k-tuples with different equality types never have the same color.\nTherefore, C k,r (G) and C k,r (H) are different iff they are different on some class of\nk-tuples with the same equality type. This proves the first implication.\nOn the other hand, suppose that (9) holds. Let E be an equality type on which\nC k,r (G) and C k,r (H) differ. Note that each \u016b in E contributes color C k,r (\u016b) (a certain\n\n\f16\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nnumber of times) to color C k,r+k\u22121(ak ). Moreover, the sum of the contributions over\nall vertices a is the same for every \u016b \u2208 E. It follows that, if a color has different\nmultiplicities in C k,r (G) and C k,r (H), its \"traces\" occur different number of times in\ndiag C k,r+k\u22121(G) and diag C k,r+k\u22121(H), and hence these multisets are distinct. \u0003\nAs it is easily seen, if \u03c6 is an isomorphism from G to H, then for all k, i, and \u016b \u2208\nV (G)k we have C k,i (\u016b) = C k,i (\u03c6(\u016b)). This shows that for isomorphic input graphs\nthe output is always correct. If input graphs are non-isomorphic and the dimension\nk is not big enough, the algorithm can erroneously report isomorphism. A criterion\nfor the optimal choice of the dimension is obtained by Cai, F\u00fcrer, and Immerman\n[15], who discovered a connection between the Weisfeiler-Lehman algorithm and\nthe logical complexity of graphs via the Ehrenfeucht game (for the color refinement\nalgorithm this was done by Immerman and Lander [47]). The success of the standard\nversion of the algorithm depends on distinguishability of the input graphs in the logic\nwith counting quantifiers, while the count-free version is in the same way related to\nthe standard first-order logic.\nReferring to the k-dim WL below, we will always assume k \u2265 1 for the standard\nversion of the algorithm and k \u2265 2 for its count-free version (we can exclude the\ncase of k = 1, whose analysis differs by some details, as the count-free 1-dim WL is\nof no interest: note that it is unable to distinguish between two graphs of order n\nwithout isolated and universal vertices).\nGiven numbers r, l, and k \u2264 l, graphs G, H, and k-tuples \u016b \u2208 V (G)k , v\u0304 \u2208 V (H)k ,\nwe use notation Ehrlr (G, \u016b, H, v\u0304) to denote the r-round l-pebble Ehrenfeucht game\non G and H with initial configuration (\u016b, v\u0304), that is, the game starts on the board\nwith k already pebbled pairs (ui , vi ). If the initial configurations is not a partial\nisomorphism, Duplicator loses Ehrlr (G, \u016b, H, v\u0304) whatever r \u2265 0. The following\nlemma is a key element of our analysis.\nLemma 4.2 (Cai, F\u00fcrer, and Immerman [15]). Let \u016b \u2208 V (G)k and v\u0304 \u2208 V (H)k .\n1. Equality\nC k,r (\u016b) = C k,r (v\u0304)\n(12)\nholds for (the standard version of ) the k-dim WL iff Duplicator has a winning\n(G, \u016b, H, v\u0304).\nstrategy in the counting version of Ehrk+1\nr\n2. Equality (12) holds for the count-free version of the k-dim WL iff Duplicator\nhas a winning strategy in (the standard version of ) Ehrk+1\n(G, \u016b, H, v\u0304).\nr\nProof. We prove only Part 2 (Part 1 is proved in detail in [15, Theorem 5.2]). We\nproceed by induction on r. The base case r = 0 is straightforward by the definitions\nof the initial coloring and the game. Assume that the proposition is true for r \u2212 1\nrounds.\nLet xi and yi denote the vertices in G and H respectively marked by the i-th\npebble pair. Assume (12) and consider the Ehrenfeucht game on G, H with initial\nconfiguration (x1 , . . . , xk ) = \u016b and (y1 , . . . , yk ) = v\u0304. First of all, this configuration is\nnon-losing for Duplicator since (12) implies that tp(\u016b) = tp(v\u0304). Further, Duplicator\ncan survive in the first round. Indeed, assume that Spoiler in this round selects a\nvertex a in one of the graphs, say in G. Then Duplicator selects a vertex b in the other\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n17\n\ngraph H so that C k,r\u22121(\u016bi,a ) = C k,r\u22121(v\u0304 i,b ) for all i \u2264 k. In particular, tp(\u016bi,a ) =\ntp(v\u0304 i,b ) for all i \u2264 k. Along with tp(\u016b) = tp(v\u0304), this implies that tp(\u016b, a) = tp(v\u0304, b).\nAssume now that in the second round Spoiler removes j-th pebble, j \u2264 k. Then\nj,a\nj,b\nDuplicator's task in the rest of the game is essentially to win Ehrk+1\nr\u22121 (G, \u016b , H, v\u0304 ).\nSince C k,r\u22121(\u016bj,a) = C k,r\u22121(v\u0304 j,a ), Duplicator succeeds by the induction assumption.\nAssume now that (12) is false. It follows that C k,r\u22121 (\u016b) 6= C k,r\u22121(v\u0304) (then Spoiler\nhas a winning strategy by the induction assumption) or there is a vertex a in\none of the graphs, say in G, such that for every b in the other graph H we have\nC k,r\u22121(\u016bj,a) 6= C k,r\u22121(\u016bj,b) for some j = j(b). In the latter case Spoiler in his first\nmove places the (k + 1)-th pebble on a. Let b be the vertex selected in response\nby Duplicator. In the second move Spoiler will remove the j(b)-th pebble, which\nj,a\nj,b\nimplies that the players essentially play Ehrk+1\nr\u22121 (G, \u016b , H, v\u0304 ) from now on. By\nthe induction assumption, Spoiler wins.\n\u0003\nLemma 4.3. Equality diag C k,r (G) = diag C k,r (H) is true for the standard (resp.\ncount-free) version of the k-dim WL iff Duplicator has a winning strategy in the\ncounting (resp. standard) version of Ehrk+1\nr+1 (G, H).\nProof. We consider the standard version of the algorithm; the proof for the countfree version is very similar. If the multisets diag C k,r (G) and diag C k,r (H) are not\nequal, Spoiler has a winning strategy in the counting game Ehrk+1\nr+1 (G, H). In the\nfirst round he makes a counting move that forces pebbling a \u2208 V (G) and b \u2208 V (H)\nso that C k,r (ak ) 6= C k,r (bk ). The remainder of the game is equivalent to the counting\ngame Ehrk+1\n(G, ak , H, bk ), where Spoiler has a winning strategy by Lemma 4.2.\nr\nIf the multisets diag C k,r (G) and diag C k,r (H) are equal, Duplicator is able to play\nthe first round so that C k,r (ak ) = C k,r (bk ) for the pebbled vertices a and b. She\nwins the remaining game again by Lemma 4.2.\n\u0003\nWe say that the r-round k-dim WL works correctly for a graph G if its output\nis correct on all input pairs (G, H) (here H may have any order, not necessary the\nsame as G).\nTheorem 4.4. The r-round k-dim WL works correctly for G if\nand only if\n\nk+1\nk \u2265 W# (G) \u2212 1 and r \u2265 D#\n(G) \u2212 1\n\nk+1\nk \u2265 W# (G) \u2212 1 and r \u2265 D#\n(G) \u2212 k.\nThe same holds true for the count-free r-round k-dim WL and the standard logic\n(without counting).\nProof. If G \u223c\n6= H. By Lemma\n= H, the output is correct in any case. Suppose that G \u223c\n4.1, inequality (10) is a sufficient condition for the output being correct while (11)\nis a necessary condition for this. The theorem now follows from Lemma 4.3, the\nEhrenfeucht theorem (Theorem 3.3.4,5), and Lemma 2.5.1 along with its counting\nversion.\n\u0003\n\nBy Theorem 4.4, k \u2265 W# (G) \u2212 1 is both a sufficient and a necessary condition for\na successful work of the k-dim WL on all inputs (G, H). As we already discussed,\n\n\f18\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nthe number of rounds can be taken r = O(nk ). Therefore, Graph Isomorphism is\nsolvable in polynomial time for any class of graphs C with W# (G) = O(1) for all\nG \u2208 C. This applies to any class of graphs embeddable into a fixed surface and any\nclass of graphs with bounded treewidth (see Section 5.1).\nSometimes the Weisfeiler-Lehman algorithm gives us even better result, namely\nthe solvability of the isomorphism problem by a parallel algorithm in polylogarithmic\ntime. The concept of polylogarithmic parallel time is captured by the complexity\nclass NC and its refinements:\nS\nNC = i NCi and NCi \u2286 ACi \u2286 TCi \u2286 NCi+1 ,\n\nwhere NCi consists of functions computable by circuits of polynomial size and depth\nO(logi n), ACi is an analog for circuits with unbounded fan-in, and TCi is an extension of ACi allowing threshold gates. As it is well known [49], ACi consists of\nexactly those functions computable by a CRCW PRAM with polynomially many\nprocessors in time O(logi n). Grohe and Verbitsky [42] point out that the r-round\nk-dim WL (resp. its count-free version) is implementable in TC1 (resp. AC1 ) as long\nas k = O(1) and r = O(log n). If combined with Theorem 4.4, this gives us the\nfollowing result.\nTheorem 4.5. Let k \u2265 2 be a constant.\nk\n1. Let C be a class of graphs G with D#\n(G) = O(log n). Then Graph Isomor1\nphism for C is solvable in TC .\n2. Let C be a class of graphs G with D k (G) = O(log n). Then Graph Isomorphism for C is solvable in AC1 .\nWe will see applications of Theorem 4.5 in Section 5.1.\nSuppose that k \u2265 W (G) \u2212 1 and that we do not know a priori any bounds for\nD k+1(G). How large has r to be taken in order to ensure that the r-round k-dim\nWL works correctly for G? An answer is given by an important concept of color\nstabilization that was already discussed in the beginning of this section. We will\nregard C k,r as a partition of V (G)k \u222a V (H)k . Let R be the minimum number for\nwhich C k,R = C k,R\u22121 . Of course, it is enough to check the condition (9) for r = R;\nit cannot change for bigger r. Since each C k,r is a refinement of C k,r\u22121, we have\nR \u2264 v(G)k + v(H)k . In fact, we are able to prove a bit more delicate claim: The\nWeisfeiler-Lehman algorithm can be terminated as soon as C k,r stabilizes at least\nwithin V (G)k .\nTo make this more precise, we introduce some notation. Denote the restriction of\nthe partition C k,r to V (G)k by CGk,r . Let Stab k (G) be the smallest number s such\nthat CGk,s = CGk,s\u22121. Note that Stab k (G) is an individual combinatorial parameter of\na graph G, not depending on H (we may think that the k-dim WL is run on a single\ngraph G, which is actually a quite meaningful canonization mode of the algorithm).\nWe now state practical termination rules for the k-dim WL.\nRule 1: Once C k,r (G) 6= C k,r (H), terminate and report non-isomorphism.\nRule 2: Once r = Stab k (G) and C k,r (G) = C k,r (H), terminate and report\nisomorphism.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n19\n\nLet us argue that these rules are sound for both versions of the algorithm. Suppose\nthat Rule 2 is invoked. Thus CGk,r = CGk,r\u22121 and C k,r (G) = C k,r (H). By the latter\nequality we also have C k,r\u22121(G) = C k,r\u22121 (H). It follows that in the r-th round\nthe algorithm achieves a proper color refinement on neither G nor H. Thus, the\npartition C k,r has been stabilized on V (G)k \u222a V (H)k and the soundness of Rule 2\nfollows.\nTheorem 4.6.\n1. The r-round k-dim WL recognizes non-isomorphism of G and H if\nk \u2265 W# (G, H) \u2212 1 and r \u2265 Stab k (G).\n\n2. The r-round k-dim WL works correctly for G if\n\nk \u2265 W# (G) \u2212 1 and r \u2265 Stab k (G).\n\n3. Both claims hold true for the count-free version of the algorithm and the\nstandard logic (with no counting).\nWe have seen that good bounds for the logical complexity of graphs imply efficiency of the Weisfeiler-Lehman algorithm on these graphs. Now we will get a couple\nof noteworthy facts on the logical complexity as a consequence of our analysis of the\nalgorithm.\nTheorem 4.7. Let G be a graph of order n.\n1. If G is distinguishable from another graph H in the l-variable logic, then\nD l (G, H) \u2264 nl\u22121 + l \u2212 2.\n2. If G is definable in the l-variable logic, then D l (G) \u2264 nl\u22121 + l \u2212 2.\nProof. Let k = l \u2212 1. Comparing the sufficient conditions for the correctness of\nthe r-round k-dim WL given by Theorem 4.6 and the necessary conditions given by\nTheorem 4.4, we have D k+1 (G, H) \u2264 Stab k (G) + k provided k \u2265 W (G, H) \u2212 1 and\nD k+1(G) \u2264 Stab k (G) + k provided k \u2265 W (G) \u2212 1. For the former claim we need also\nthe fact, actually established in the proof of Theorem 4.4, that the count-free r-round\nk-dim WL is able to recognize non-isomorphism of G and H only if k \u2265 W (G, H)\u22121\nand r \u2265 D k+1 (G, H) \u2212 k. It remains to notice that Stab k (G) \u2264 nk \u2212 1.\n\u0003\nA somewhat weaker bound D l (G) \u2264 nl + l + 1 follows from the work of Dawar,\nLindell, and Weinstein [20, Corollary 4].\n5. Worst case bounds\n5.1. Classes of graphs. Here we overview known bounds for the logical depth and\nwidth for natural classes of graphs. Several interesting definability effects can be\nobserved even when we focus on so simple graphs as trees. This class is considered at\nthe beginning of this section (and will be further discussed in Sections 6 and 7). We\nwill see that many results about trees admit generalization to graphs with bounded\ntreewidth. We further consider planar graphs. Then we briefly discuss more general\ncases of graphs embeddable into a fixed surface and graphs with an excluded minor,\nas well as a few sporadic results on other classes.\n\n\f20\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\n5.1.1. Trees. The following result is based on Edmonds' algorithm, that dates back\nto the sixties (see, e.g., [16]), and its logical interpretation is due to Immerman and\nLander [47].\nTheorem 5.1.\n1. The color refinement algorithm succeeds in recognizing isomorphism of trees.\nConsequently, W# (T, T \u2032 ) \u2264 2 for every two non-isomorphic trees T and T \u2032 .\n2. W# (T ) \u2264 2 for every tree T .\n\nProof. 1. As in Section 4, let C r denote the coloring appearing after the r-th refinement. Let Nr (v) denote the set of all vertices at the distance at most r from a\nvertex v. It is not hard to see that, if v is an arbitrary vertex in a tree T , then the\nsubtree spanned by Nr (v) is, up to isomorphism, reconstructible from C r (v). Let v\nand v \u2032 be arbitrary vertices in trees T and T \u2032 . If T \u223c\n6= T \u2032 , we have C r (v) 6= C r (v \u2032 ) at\nlatest for r one greater than the smaller of the eccentricities of v and v \u2032 . Therefore,\nthe color refinement algorithm distinguishes between any two non-isomorphic trees.\nThe second statement of Part 1 follows by Lemma 4.2.1 and Theorem 3.3.5.\n2. To obtain the desired definability result, we use the equality W# (T ) =\nmaxH6\u223c\n=T W# (T, H), which is an analog of Lemma 2.5.2 (with a much simpler proof\nas graphs of different orders are distinguishable with a single counting quantification). Thus, it suffices to prove that W# (T, H) \u2264 2 whenever H \u223c\n6= T . Suppose that\nH is not a tree for otherwise we are done by Part 1. Also, as it was just mentioned,\nwe can suppose that both T and H have n vertices.\nAssume first that H has a connected component T \u2032 which is a tree. Note that\n\u2032 \u223c\nT 6= T because T \u2032 has less than n vertices. Let v \u2208 V (T ) and v \u2032 \u2208 V (T \u2032 ). Run\nthe color refinement algorithm on input (T, H). As in the proof of Part 1 we have\nC n (v) 6= C n (v \u2032 ) because the coloring C n on T \u2032 is the same as if the algorithm was\nrun on T \u2032 instead of H. Therefore, T and H are distinguishable with 2 variables in\nthe counting logic.\nIf none of the connected components of H is a tree, then H has at least n edges.\nSince T has exactly n \u2212 1 edges, H and T have distinct multisets of vertex degrees\nand, hence, are distinguishable by a sentence with 2 counting quantifiers.\n\u0003\n2\nThe proof of Theorem 5.1 gives us only a linear upper bound D#\n(T ) = O(n) for\na tree of order n. We can get a speed-up if we allow more variables.\n\nTheorem 5.2. For every tree T on n vertices we have\n3\nD#\n(T ) < 3 log n.\n\nProof. By an analog of Lemma 2.5.1 for the counting logic and Theorem 3.3.5, we\nhave to show that Spoiler is able to win the counting game Ehr3r (T, T \u2032 ) with some\nr < 3 log n for any graph T \u2032 non-isomorphic to T . Suppose that T \u2032 has the same\norder n. If T \u2032 is disconnected, Spoiler wins (even without counting moves) by Lemma\n3.2. If T \u2032 is connected and has a cycle, then T and T \u2032 have distinct multisets of\nvertex degrees. Therefore, we will suppose that T \u2032 is a tree too.\nEvery tree T has a single-vertex separator, that is, a vertex v such that no branch\nof T \u2212 v has more than n/2 vertices; see, e.g., Ore [59, Chapter 4.2]. The idea of\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\nv \u0301\n\nv\nT\n\nu\n\n21\n\nu \u0301\n\nT \u0301\n\nw\nw \u0301\n\nFigure 1. A separator strategy of Spoiler.\nSpoiler's strategy is to pebble such a vertex and to force further play on some nonisomorphic branches of T and T \u2032 , where the same strategy can be applied recursively.\nThus, in the first round Spoiler pebbles a separator v in T and Duplicator responds\nwith a vertex v \u2032 somewhere in T \u2032 . The component of T \u2212 v containing a neighbor\nu of v will be denoted by Tvu and considered a rooted tree with the root at u. A\nsimilar notation will apply also to T \u2032 . In the second round Spoiler makes a counting\nmove and ensures that u \u2208 N(v) and u\u2032 \u2208 N(v \u2032 ) are pebbled so that the rooted\ntrees Tvu and Tv\u2032\u2032 u\u2032 are non-isomorphic, see Fig. 1. The next goal of Spoiler is to\nforce pebbling adjacent vertices v1 and u1 in Tvu and adjacent vertices v1\u2032 and u\u20321 in\nTv\u2032\u2032 u\u2032 so that Tv1 u1 \u223c\n6= Tv\u2032\u2032 u\u2032 , V (Tv1 u1 ) \u2282 V (Tvu ), and v(Tv1 u1 ) \u2264 v(Tvu )/2. Once this\n1 1\nis done, the same will be repeated recursively.\nTo make the transition from Tvu to Tv1 u1 , Spoiler follows three rules.\nRule 1. If Tvu has a branch Tux for some x \u2208 N(u) \\ {v} such that v(Tux ) \u2264\nv(Tvu )/2 and the number of branches isomorphic to Tux is different for Tvu and Tv\u2032\u2032 u\u2032 ,\nthen Spoiler makes a counting move and forces pebbling such x and x\u2032 \u2208 N(u\u2032 )\\{v \u2032}\nso that Tux \u223c\n6= Tu\u2032 \u2032 x\u2032 . The latter two branches will serve as Tv1 u1 and Tv\u2032\u2032 u\u2032 . If no such\n1 1\nbranch is available, Spoiler pebbles a separator w of Tvu . Note that Duplicator is\nforced to respond with a vertex w \u2032 in Tv\u2032\u2032 u\u2032 . Otherwise we would have dist(w, u) =\ndist(w, v) \u2212 1 while dist(w \u2032 , u\u2032) = dist(w \u2032, v \u2032 ) + 1. Therefore, some distances among\nthe three pebbled vertices would be different in T and in T \u2032 and Spoiler could win\nin less than log v(Tvu ) + 1 moves by Lemma 3.2.\nRule 2. If T differs from T \u2032 by some branch Twx (having a different number of\noccurrences in T \u2032 \u2212 w \u2032 ) that does not contain u, Spoiler makes a counting move with\nthe pebble released from v and forces pebbling such x in T and some x\u2032 in T \u2032 so\nthat Twx \u223c\n6= Tw\u2032 \u2032 x\u2032 . These branches will serve as Tv1 u1 and Tv\u2032\u2032 u\u2032 . (It is possible that\n1 1\nTw\u2032 \u2032 x\u2032 contains u\u2032 or Twx contains u but then the distances among u, w, x are not all\nequal to the distances among u\u2032 , w \u2032, x\u2032 and Spoiler quickly wins.)\nRule 3. Denote the branch of Tvu \u2212 w containing u by Tw,u (and similarly for\nT \u2032 ). If Rule 2 is not applicable, then Tw,u and Tw\u2032 \u2032 ,u\u2032 are non-isomorphic (where\nan isomorphism would need to respect two pairs of designated vertices, namely u\nand u\u2032 as well as the neighbors of w and w \u2032). Assume the harder subcase that\ndist(u, w) = dist(u\u2032, w \u2032 ). When Spoiler pebbles a vertex y on the path from u to\nw by moving the pebble from v, Duplicator is forced to pebble the corresponding\n\n\f22\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nu\n\ny\n\nu \u0301\n\nw\n\ny \u0301\n\nw \u0301\n\nz \u0301\n\nz\n\nT \u0301\n\nT\n\nFigure 2. Rule 3 invoked.\nvertex y \u2032 on the path from u\u2032 to w \u2032. It is easy to see that a vertex y 6= w can be\nchosen so that T \u2212 y and T \u2032 \u2212 y \u2032 differ by branches containing neither u and u\u2032 nor\nw and w \u2032. Let Spoiler pebble such y as close to w as possible. Note that y 6= u\nbecause otherwise Rule 1 was applicable. Now Spoiler can make a counting move\nwith the pebble released from w to force pebbling z and z \u2032 for which\n(13)\nTyz \u223c\n6= T \u2032 \u2032 \u2032 ,\nyz\n\nsee Fig. 2. This complies with the goal of finding new Tv1 u1 and Tv\u2032\u2032 u\u2032 because\n1 1\n\nv(Tyz ) < v(Tw,u) \u2264 v(Tvu )/2.\n\n(14)\n\nIn fact, Duplicator could try to prevent the fulfillment of (13) by forcing a choice\nof z \u2032 such that Ty\u2032 \u2032 z \u2032 would contain either u\u2032 or w \u2032 . In the former case Spoiler could\nwin by using differences between the distances among u, y, z and among u\u2032 , y \u2032, z \u2032 .\nIn the latter case (13) would anyway be true because Tyz and Ty\u2032 \u2032 z \u2032 would have\ndifferent orders. Indeed, since Rule 2 was not applicable, the choice of y ensures\nthat the branches of T \u2212 y and T \u2032 \u2212 y \u2032 containing w and w \u2032 are isomorphic. Thus, we\nwould have v(Ty\u2032 \u2032 z \u2032 ) = v(Ty,w ) \u2265 v(Tvu )/2 (where Ty,w denotes the branch of T \u2212 y\ncontaining w) while v(Tyz ) is strictly smaller by (14).\nGiven Tvu , Spoiler finds a new distinguishing branch Tv1 u1 in 3 rounds in the worst\ncase. Also, 2 rounds suffice to win the game once the current subtree Tvu has at\nmost 4 vertices. The number of transitions from the initial branch of order at most\n\u2308n/2\u2309 to one with at most 4 vertices is bounded by log\u2308n/2\u2309 \u2212 2 because v(Tvu )\nbecomes twice smaller each time. Routine calculations (and Lemma 3.2) imply the\ndesired bound on the length of the game.\n\u0003\nThe definability of trees in a finite-variable counting logic within logarithmic quantifier depth can also be derived from a work by Etessami and Immerman [27], which\nalso implies that counting quantifiers are here not needed as long as the maximum\nvertex degree is bounded by a constant.\nCuriously, Theorem 5.2 sheds some new light on the history of isomorphism testing for trees. The first record of this history was made by Edmonds, who showed\nthat the problem is solvable in linear time (see Theorem 5.1). Ruzzo [71] found\nan AC1 algorithm under the condition that the vertex degrees of input trees are at\nmost logarithmic in the number of vertices. Miller and Reif [55] established an AC1\nupper bound unconditionally. They wrote [55, page 1128]: \"No polylogarithmic parallel algorithm was previously known for isomorphism of unbounded-degree trees.\"\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n23\n\nHowever, the 2-dimensional Weisfeiler-Lehman algorithm has been discussed in the\nliterature at least since 1968 (e.g., [77]) and, as we now see by combining Theorem\n5.2 with Theorem 4.5.1, this algorithm does the job for arbitrary trees in NC2 , i.e.,\nin parallel time O(log2 n) !\nTo complete this historical overview, we have to mention a result by Lindell [53]\nwho showed that isomorphism of trees is recognizable in logarithmic space. Though\nLindell's result is best possible (see Jenner et al. [48]), the solvability of the problem\nby so simple and natural procedure as the Weisfeiler-Lehman algorithm still remains\na noteworthy fact.\n2\nNote that D#\n(Pn ) = n2 \u2212 O(1) (it is not hard to see that the color refinement\nalgorithm requires at least n2 \u2212 O(1) rounds to distinguish between Pn and the\ndisjoint union of Pn\u22123 and C3 ). Thus, Theorem 5.2 shows a jump from linear to\nlogarithmic quantifier depth when the number of variables is increased just by 1.\nSuch width-depth trade-offs were observed and studied by F\u00fcrer [31].\nTheorem 5.1 says that 2 variables and counting quantifiers suffice to define any\ntree. Moreover, we could well manage without counting quantifiers but then we\nwould need to have \u2206(T )+1 variables. A simple example of a star, where W (K1,m ) =\nm+1, shows that a smaller number is not enough. The following bound is a variant of\na result by Immerman and Kozen [46], who consider definability of trees represented\nby an asymmetric child-parent relation between vertices.\nTheorem 5.3. W (T ) \u2264 \u2206(T )+1 for any tree T with the exceptions of T \u2208 {P1 , P2 }.\nThe logical depth of a tree can be bounded in terms of the maximum degree and\nthe order.\nTheorem 5.4 (Bohman et al. [12]).\n1. For every tree T of order n with maximum vertex degree \u2206(T ) \u2265 9 we have\n\u0012\n\u0013\n\u2206(T )\n3\u2206(T )\nD(T ) \u2264\n+ 3 log n +\n+ O(1).\n2 log(\u2206(T )/2)\n2\n\n2. Let D(n, d) be the maximum of D(T ) over all trees with n vertices and maximum degree at most d = d(n). If both d and log n/ log d tend to infinity,\nthen\n\u0013\n\u0012\nlog n\n1\n+ o(1) d\n.\nD(n, d) =\n2\nlog d\n\nThe upper bounds on D(T ) comes from Spoiler's strategy similar to that of the\nproof of Theorem 5.2, that is, Spoiler pebbles a separator v of the given tree T\nand then tries to restrict the game to one of the components of T \u2212 v. Informally\nspeaking, the worst case scenario for Spoiler is when T \u2212 v has d components of\norder about n/d of two different isomorphism types, each occurring half of the time.\nThen Spoiler may need around d/2 extra moves to restrict game to a component\nof T \u2212 v (if the components of the counterpart T \u2032 \u2212 v \u2032 are of these two types but\nwith different multiplicities). Thus, roughly, Spoiler \"reduces\" the order by factor\nd using d/2 moves, which gives the heuristic for the bound of Theorem 5.4.2. The\noptimality of this bound is given by a recursive construction of a tree T (and another\n\n\f24\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\ntree T \u2032 \u223c\n6= T ), where at each recursion step we glue together about d/2 trees of two\ndifferent isomorphism types at a common root.\n5.1.2. Graphs of bounded treewidth. Informally speaking, the treewidth of a graph\ntells us to which extent the graph is representable as a tree-like structure. This\nconcept appeared in the Robertson-Seymour theory and, aside of its theoretical\nimportance, found a lot of applications in design of algorithms on graphs. We do\nnot go into any detail here, referring instead to the books [22] and [23] that may serve\nas introductions to, respectively, the structural theory of graphs and the algorithmic\napplications.\nIt happens quite often that techniques applicable to trees can be extended to\ngraphs whose treewidth is bounded by a constant. In particular, this is true for the\ndefinability parameters.\nTheorem 5.5.\n1. (Grohe and Mari\u00f1o [40]) If a graph G has treewidth k, then W# (G) \u2264 k + 2.\n2. (Grohe and Verbitsky [42]) If a graph G on n vertices has treewidth k, then\n4k+4\nD#\n(G) < 2(k + 1) log n + 8k + 9.\n\nConsequently, isomorphism of graphs whose treewidth does not exceed k is\nrecognizable by the (4k+3)-dimensional Weisfeiler-Lehman algorithm in TC1 .\nThe last claim in the theorem follows a general paradigm provided by Theorem\n4.5.1: A low quantifier depth implies solvability of the isomorphism problem in NC.\nPrior to [42], for graphs with bounded treewidth only polynomial-time isomorphism\ntest of Bodlaender [11] was known. Very recently Das, Tor\u00e1n, and Wagner [18] put\nthe problem in the complexity class LOGCFL.\nLike Theorem 5.2, the proof of Theorem 5.5.2 is based on separator techniques.\nIn general, a set X \u2282 V (G) will be called a separator for graph G if any component\nof G \\ X has at most n/2 vertices. It is well known [70] that all graphs of treewidth\nk have separators of size k + 1.\n5.1.3. Planar graphs. The separator techniques in the study of logical complexity\nof graphs were\n\u221a introduced by Cai, F\u00fcrer, and Immerman [15], who derived a bound\nW# (G) = O( n) for planar graphs from\n\u221a the known fact [54] that every planar graph\nof order n has a separator of size O( n). In fact, this result is a particular\ncase\n\u221a\nof Theorem 5.5.1 because planar graphs have treewidth bounded by 5 5 n; see [3,\nProposition 4.5]. Later Grohe [35] proved that W# (G) for all planar G is actually\nbounded by a constant.\nWithout counting quantifiers we cannot have any nontrivial upper bound for the\nlogical depth in terms of the order of a graph as long as a class under consideration contains all trees. However, some natural classes of planar graphs admit such\nbounds. A plane drawing of a graph is called outerplanar if all the vertices lie on\nthe boundary of the outer face. Outerplanar graphs are those planar graphs having\nan outerplanar drawing. The treewidth of any outerplanar graph is at most 2. As\nit is well known (see, e.g., [43]), any outerplanar graph is representable as a tree of\nits biconnected components. Note also that an outerplanar graph is biconnected iff\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n25\n\nit has a Hamiltonian cycle and that such a graph can be geometrically viewed as a\ndissection of a convex polygon.\nTheorem 5.6 (Verbitsky [75, 76]).\n1. If G is a biconnected outerplanar graph of order n, then D(G) < 22 log n+9.\n2. For a 3-connected planar graph G of order n we have D 15 (G) < 11 log n+45.\nPart 2 shows another case when Theorem 4.5 is applicable. It gives an AC1\nisomorphism test for 3-connected planar graphs and, by a known reduction of Miller\nand Reif [55], for the whole class of planar graphs. This complexity bound for the\nplanar graph isomorphism is not new; it follows from the AC1 isomorphism test for\nembeddings designed in [55] and the AC1 embedding algorithm in [68]. As a possible\nadvantage of the Weisfeiler-Lehman approach, note that it is combinatorially much\nsimpler and more direct. In particular, we do not need any embedding procedure\nhere. The best possible complexity bound for the planar graph isomorphism is\nrecently obtained by Datta et al. [19] who design a logarithmic-space algorithm for\nthis problem.\nTheorem 5.6.1 is proved in [75] and is based on the existence of a 2-vertex separator\nin any outerplanar graph. The possibility to avoid counting quantifiers relies on\ncertain rigidity of biconnected outerplanar graphs. The latter is related to the\nfollowing geometric fact: Any such graph has a unique, up to homeomorphism,\nouterplanar drawing.\nThe case of 3-connected planar graphs is much \u221amore complicated because the\nsmallest separators in such graphs can have about n vertices (such examples can\nbe obtained by adding a few edges to the grid graph Pm \u00d7 Pm ). The proof of Theorem 5.6.2 in [76] exploits a strong rigidity property of 3-connected planar graphs: By\nthe Whitney theorem (see, e.g., [56]), they have a unique, up to homeomorphism,\nembedding into the sphere. An embedding can be represented as a purely combinatorial structure, called a rotation system (see [56]), to which one can extend the\nconcepts of definability, isomorphism, the Ehrenfeucht game etc. Defining rotation\nsystems is a simpler business because they admit a kind of coordinatization and\nhence an analog of the halving strategy from Lemma 3.2 is available for Spoiler.\nThe most essential ingredient of the proof of Theorem 5.6.2 is a strategy for Spoiler\nin the Ehrenfeucht game on graphs allowing him to simulate the Ehrenfeucht game\non the corresponding rotation systems.\n5.1.4. Graphs with an excluded minor. No graph with treewidth h has Kh+2 as a\nminor. The class of graphs embeddable into a closed 2-dimensional surface S is closed\nunder minors and, as follows from the Robertson-Seymour Graph Minor Theorem,\nno graph from this class contains a minor of Kh for some h = h(S). Extending\nhis earlier work on graphs embeddable into a fixed surface [36], Grohe [38] recently\nannounced a proof that, if a graph G does not contain Kh as a minor, then W# (G)\nis bounded by a constant c = c(h). The case of h = 5 is treated in detail in [37].\nAlon, Seymour, and Thomas [3] proved that, if a graph G of order \u221a\nn does not\ncontain a Kh as a minor, then it has a separator of size at most h3/2 n. Using\n\n\f26\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nthis result, for \u221aall connected graphs with this property one can prove [75] that\nD(G) = O(h3/2 n) + O(\u2206(G) log n).\n5.1.5. Other classes of graphs. A graph is strongly regular if all its vertices have\nequal degrees and, for some \u03bb and \u03bc, each pair of adjacent vertices has exactly \u03bb\ncommon neighbors and each pair of non-adjacent vertices has exactly \u03bc common\nneighbors. Non-isomorphic graphs with the same order, degree, and parameters\n\u03bb and \u03bc are standard examples of a failure of the 2-dim WL algorithm. Babai\nstudies the isomorphism problem for this class in [6]. His\n\u221a individualization-andrefinement technique translates into a bound W# (G) \u2264 2 n log n for all strongly\nregular graphs of a sufficiently large order n with the exception for the disjoint\nunions of complete graphs and their complements (for which we have D# (G) \u2264 3).\nFurther improvements are obtained by Spielman [74].\nEvdokimov, Ponomarenko, and Tinhofer [28] undertake an analysis of the 3dimensional WL algorithm on the classes of cographs, interval graphs, and even directed path graphs (the latter class extends the class of interval graphs and contains\nalso all ptolemaic graphs, in particular, trees). It follows from [28] that W# (G) \u2264 4\nfor all G in any of these classes. The boundedness of W# (G) for interval graphs\nfollows also from the paper of Laubner [51], who uses purely logical methods (while\nEvdokimov et al. develop an algebraic approach that, in fact, originates from the\nseminal work by Weisfeiler and Lehman).\nGrohe [39] proves that W# (G) = O(1) for all chordal line graphs. On the other\nhand, he shows that there are chordal graphs with W# (G) = \u03a9(n) and the same\nholds true for line graphs. The latter result is obtained by a reduction to the graphs\nwith W# (G) = \u03a9(n) constructed by Cai, F\u00fcrer, and Immerman [15] (cf. Theorem\n5.7 below). Note that the Cai-F\u00fcrer-Immerman graphs are regular of degree 3,\nwhere the regularity can be traded for the bipartiteness after a slight modification.\n5.2. General case.\n5.2.1. Identification problem. Recall that\nW# (G, H) \u2264 W (G, H) \u2264 D(G, H) and W# (G, H) \u2264 D# (G, H) \u2264 D(G, H).\nIf we are motivated by the graph isomorphism problem, it is quite natural to focus\non these parameters under the assumption that G and H have the same order (even\nwithout saying that D# (G, H) = 1 otherwise). Distinguishing a graph G from\nall non-isomorphic H of the same order is sometimes called identification problem.\nIn particular, we would like to determine or estimate the maximum of D(G, H)\n(resp. D# (G, H)) as a function of n = v(G) = v(H). Equivalently, what is the\nminimum r = r(n) such that Spoiler has a winning strategy in Ehrr (G, H) for all\nnon-isomorphic G and H of order n?\nBy taking disjoint unions of complete and empty graphs, it is easy to find G and\nH with D(G, H) \u2265 (n + 1)/2. Bounding D# (G, H) from below is much more subtle\nissue. Using a nice nontrivial argument, Cai, F\u00fcrer, and Immerman [15] came up\nwith a linear lower bound.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n27\n\nTheorem 5.7 (Cai, F\u00fcrer, and Immerman [15]). For infinitely many n there are\nnon-isomorphic graphs G and H both of order n such that W# (G, H) \u2265 c n, where\nc is a positive constant.\nThe calculation of Pikhurko et al. [64, Section 7.5] shows that one can take c =\n0.00465.\nLet us turn to upper bounds. Suppose that G \u223c\n6= H and v(G) = v(H) = n. Before\nreading further, the reader might try to improve the trivial bound D(G, H) \u2264 n\nat least somewhat. It may be seen as a curious observation that D(G, H) \u2264 n \u2212 1\nfollows from the Harary version of the Ulam Reconstruction Conjecture, open for a\nlong time, claiming that non-isomorphic graphs of equal orders have different sets\nof vertex-deleted subgraphs.\nOne solution of this exercise, giving D(G, H) < n \u2212 41 log n, is to apply the Erd\u0151sSzekeres bound on Ramsey numbers. It implies that every graph G of large order\nn contains a homogeneous set of more than 21 log n + 14 log log n vertices. Spoiler\npebbles the complement of such a set S in G. Suppose that the unpebbled set is\nindependent (otherwise we can play on the complementary graphs). If Duplicator\nis lucky, she manages to pebble the complement to an independent set S \u2032 in H so\nthat G \\ S \u223c\n= H \\ S \u2032 . Identifying the pebbled parts, Spoiler compares the number\nof vertices in S and in S \u2032 with the same neighborhood. These numbers cannot be\nidentical for G and H and, by v(G) = v(H), Spoiler can demonstrate this using at\nmost (|S| + 1)/2 further moves in one of the graphs.\nAfter this warm-up, we can state an almost optimal bound.\nTheorem 5.8 (Pikhurko, Veith, and Verbitsky [63]). For every two non-isomorphic\ngraphs G and H of the same order n we have D(G, H) \u2264 (n + 3)/2.\n5.2.2. General bounds for the logical depth and width. In the case of the counting\nlogic, Theorem 5.7 provides us with infinitely many graphs G for which D# (G) \u2265\nW# (G) > 0.00465 n. As usually, n denotes the order of a graph. An upper bound\neasily follows from Theorem 5.8: we have D# (G) \u2264 0.5 n + 1.5 for all G. Though\nthis bound does not use the power of counting quantifiers at all, we are not aware\nof any better bound.\nConsider the standard first-order logic (without counting). At the first sight,\neverything is clear here. Indeed, the general upper bound W (G) \u2264 D(G) \u2264 n + 1 is\nattained, even for the width, by the complete graph Kn and by the empty graph Kn .\nHowever, these are the only two extremal graphs. In other words, D(G) \u2264 n for all\nG with exception of G \u2208 {Kn , Kn }. As Kn and Kn are the most symmetric graphs,\nthis observation suggests two problems. The first one is to prove a better bound\nfor a class of graphs with restrictions on the automorphism group. The second is to\nobtain, for as small as possible l = l(n), an explicit or algorithmic description of all\norder-n graphs whose logical depth (resp. width) exceeds l. We start with the first\nproblem.\nDefinition 5.9. Let u, v, and s be three vertices and s \u2208\n/ {u, v}. We say that s\nseparates u and v if s is adjacent to exactly one of the two vertices. Furthermore,\nwe call u and v twins if no s separates u and v (or, equivalently, if the transposition\n\n\f28\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nof u and v is an automorphism of the graph). A graph is called twin-free if it has\nno twins.\nTheorem 5.10 (Pikhurko, Veith, and Verbitsky [63]). If G is twin-free, then\nD1 (G) \u2264 (n + 5)/2.\n\nTheorem 5.10 cannot be improved to a sublinear bound. Indeed, consider mP4 , the\ndisjoint union of m copies of P4 . As it is easily seen, mP4 is twin-free and D(mP4 ) \u2265\nD(mP4 , (m + 1)P4 ) > m (the reader is welcome to play Ehrm (mP4 , (m + 1)P4 )\non Duplicator's side). No sublinear improvement is possible even with counting\nquantifiers: the graphs constructed by Cai, F\u00fcrer, and Immerman in Theorem 5.7\nare twin-free.\nWe prove Theorem 5.10 based on Lemma 2.5.1 and the Ehrenfeucht Theorem\n(Theorem 3.3.1). That is, we design a strategy allowing Spoiler to win Ehrr (G, H)\nfor any H \u223c\n6= G, where r = \u230a(n + 5)/2\u230b. As an important additional feature of the\nstrategy, Spoiler will alternate between the graphs only once. By Theorem 3.3.2, this\nshows that our bound holds even for the logic with only one quantifier alternation\n(as it is indicated by the subscript in Theorem 5.10).\n\nDefinition 5.11. Let X \u2282 V (G). Given two vertices u, v \u2208 V (G) \\ X, we call them\nX-similar and write u \u2261X v if u and v are inseparable by any vertex in X, i.e., if\nN(u) \u2229 X = N(v) \u2229 X.\nNow, let y \u2208\n/ X. We say that X sifts out y if for every y \u2032 \u2208\n/ X the relation y \u2261X y \u2032\nimplies y \u2032 = y (in other words, the vertex y is uniquely identified by its adjacencies\nto X). Let S(X) consist of all x \u2208 X and all y sifted out by X. We call X a sieve 6\nif S(X) = V (G). Furthermore, X is called a weak sieve if S(S(X)) = V (G).\n\nConsider the Ehrenfeucht game on non-isomorphic G and H and assume that X\nis a sieve in G. Let Spoiler pebble all vertices of X. We leave to the reader to verify\nthat Spoiler can win in at most 2 more moves. We now describe a more advanced\nWeak Sieve Strategy.\nLemma 5.12. If X is a weak sieve in G, then Spoiler is able, for any H \u223c\n6= G, to\nwin Ehrr (G, H) with r \u2264 |X| + 3. Moreover, he does not need to jump from one\ngraph to the other more than once during the game.\nProof. First, Spoiler selects all of X. Let X \u2032 \u2282 V (H) be the Duplicator's reply.\nAssume that Duplicator has not lost yet. For the notational simplicity let us identify\nX and X \u2032 so that V (G) \u2229 V (H) = X = X \u2032 and the player's moves coincide on X.\nLet Y = S(X) in G and Y \u2032 = S(X \u2032 ) in H.\nIt is not hard to see that Spoiler wins in at most two extra moves unless the\nfollowing holds. For any y \u2208 Y \\ X there is a y \u2032 \u2208 Y \u2032 \\ X (and vice versa) such that\nN(y) \u2229 X = N(y \u2032 ) \u2229 X. Moreover, this bijective correspondence between Y and Y \u2032\nestablishes an isomorphism between G[Y ] and G\u2032 [Y \u2032 ].\nSuppose that this is the case and identify Y with Y \u2032 . Let Z = V \\ Y and\n\u2032\nZ = V \u2032 \\ Y . Let z \u2208 Z and define\nWz\u2032 = { z \u2032 \u2208 Z \u2032 : N(z \u2032 ) \u2229 Y = N(z) \u2229 Y } .\n\n6Babai\n\n[6] uses sieves under the name distinguishing sets.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n29\n\nIf Wz\u2032 = \u2205, Spoiler wins in at most two moves. First, he selects z. Let Duplicator\nreply with z \u2032 . Assume that z \u2032 \u2208 Z \u2032 for otherwise she has already lost. As the\nneighborhoods of z, z \u2032 in Y differ, Spoiler can demonstrate this by picking a vertex\nof Y . If |Wz\u2032 | \u2265 2, then Spoiler selects any two vertices in Wz\u2032 and wins with at most\none more move, as required.\nHence, we can assume that for any z we have Wz\u2032 = {f (z)} for some f (z) \u2208 Z \u2032 .\nSince each vertex in Z is sifted out by Y , the function f is injective. If f (Z) 6= Z \u2032 ,\nSpoiler easily wins in two moves. Suppose, therefore, that f : Z \u2192 Z \u2032 is a bijection.\nAs G \u223c\n6= H, the mapping f does not preserve the adjacency relation between some\ny, z \u2208 Z. Now, Spoiler selects both y and z. Duplicator cannot respond with f (y)\nand f (z); by the definition of f Spoiler can win in one extra move.\n\u0003\nTheorem 5.10 immediately follows from Lemma 5.12 and the next lemma.\nLemma 5.13. Any twin-free graph G on n vertices has a weak sieve X with |X| \u2264\n(n \u2212 1)/2.\n\nProof. Given X \u2282 V (G), let C(X) denote the partition of X = V (G) \\ X into\n\u2261X -equivalence classes. Starting from X = \u2205, we repeat the following procedure.\nAs long as there exists u \u2208 X such that |C(X \u222a {u})| > |C(X)|, we move u to\nX. As soon as there is no such u, we arrive at X which is C-maximal , that is,\n|C(X \u222a {u})| \u2264 |C(X)| for any u \u2208 X. Note that |C(X)| \u2265 |X| + 1 because this\ninequality is true at the beginning and is preserved in each construction step. Using\nalso the inequality |X| + |C(X)| \u2264 n, we conclude that |X| \u2264 (n \u2212 1)/2.\nWe now prove that the X is a weak sieve. Suppose, to the contrary, that u and v\nare distinct S(X)-similar vertices in Z = V (G) \\ S(X). Since G has no twins, these\nvertices are separated by some s. We cannot have s \u2208 S(X) by the definition of\nS(X)-similarity. Thus s \u2208 Z. Let C1 be the class in C(X) including {u, v} and C2\nbe the class in C(X) containing s. Since s \u2208\n/ S(X) \\ X, the class C2 has at least one\nmore element in addition to s. If C1 6= C2 , moving s to X splits up C1 and does not\neliminate C2 . If C1 = C2 , moving s to X splits up this class and splits up or does\nnot affect the others. In either case |C(X)| increases, giving a contradiction.\n\u0003\nThe proof of Theorem 5.10 is complete. This theorem was significantly extended in\n[63] giving some progress on the second research problem stated above. In particular,\nit was shown that one can efficiently check whether or not D(G) \u2264 (n + 5)/2 for the\ninput graph G of order n and, if this is not true, then one can efficiently compute\nthe exact value of D(G). Also, the same holds for W (G).\nThis result is interesting in view of the fact that algorithmic computability of the\nlogical depth and width of a graph, even with no efficiency requirements, is unclear.\nA reason for this is that the question if a given first-order sentence defines some\ngraph is known to be undecidable [61].\nThe upper bound of 12 n + O(1) can be improved if we impose a restriction on the\nmaximum vertex degree.\n\nTheorem 5.14 (Pikhurko, Veith, and Verbitsky [63]). Let d \u2265 2. Let G be a graph\nof order n with no isolated vertex and no isolated edge. If \u2206(G) \u2264 d, then\nD1 (G) < cd n + d2 + d + 4\n\n\f30\n\nfor a constant cd =\n\nOLEG PIKHURKO and OLEG VERBITSKY\n1\n2\n\n\u2212 14 d\u22122d\u22125 .\n\nTheorem 5.14 aims at showing a constant cd strictly less than 1/2 rather than\nat attempting to find the optimum cd . In the case of d = 2, which is simple and\nincluded just for uniformity, an optimal bound is D1 (G) \u2264 n/3 + O(1). Without the\nassumption that G has no isolated vertex and edge, the theorem does not hold for\nany fixed cd < 1/2. A counterexample is provided by the disjoint union of isolated\nedges. Even under the stronger assumption that G is connected, Theorem 5.14\nstill does not admit any sublinear improvement: the Cai-F\u00fcrer-Immerman graphs\nin Theorem 5.7 are connected and have maximum degree 3.\n6. Average case bounds\nIn Section 5 we investigated the maximum values of logical parameters over graphs\nof order n. Now we want to know its typical values. A natural setting for this\nproblem is given by the Erd\u0151s-R\u00e9nyi model of a random graph Gn,p . The latter is\na random graph on n vertices where every two vertices are connected by an edge\nwith probability p independently of the other pairs. A particularly important case\nis Gn,1/2 , when we have the uniform distribution on all graphs on a fixed set of n\nvertices. Whenever we say that for a random graph of order n something happens\nwith high probability (abbreviated as whp), we mean a probability approaching 1 as\nn \u2192 \u221e.\n6.1. Bounds for almost all graphs.\n6.1.1. Logic with counting. We begin with a simple but useful observation about the\ncolor refinement algorithm described at the beginning of Section 4: If the coloring\nof a graph stabilizes with all color classes becoming singletons, it can be considered\na canonical vertex ordering. It turns out that this happens for almost all graphs.\nThis result can be used to estimate the logical complexity of almost all graphs, in\nparticular, to show that almost surely W# (Gn,1/2 ) = 2 (Immerman and Lander [47]).\nTheorem 6.1.\n1. (Babai, Erd\u0151s, and Selkow [7]) 2 color refinements split a random graph G\u221a\nn,1/2\ninto color classes which are singletons with probability more than 1 \u2212 1/ 7 n,\n2\nfor all large enough n. Consequently, D#\n(Gn,1/2 ) \u2264 4 with this probability.\n2. (Babai and Ku\u010dera [8]) 3 color refinements split a random graph Gn,1/2 into\ncolor classes which are singletons with probability more than 1 \u2212 1/2cn , for\n2\na constant c > 0 and all large enough n. Consequently, D#\n(Gn,1/2 ) \u2264 5 with\nthis probability.\nThe logical conclusions made in Theorem 6.1 are based on the necessity part of\nTheorem 4.4. It suffices to notice that, once the color refinement splits the vertex\nset of an input graph G into singletons, one extra round of the algorithm suffices to\ndistinguish G from any non-isomorphic graph.\nNext, we are going to show that the upper bound of Theorem 6.1.1 is best possible.\nLet CGr denote the coloring of the vertex set of a graph G produced by the color\nrefinement procedure in r rounds.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n31\n\nLemma 6.2. Whp for G = Gn,1/2 there exists a non-isomorphic graph H on V =\n2\nV (G) such that CG2 (x) = CH\n(x) for every vertex x \u2208 V .\nProof. Let G be a typical graph of a sufficiently large order n. In particular, we\nassume that G satisfies Theorem 6.1.1 andpthat | deg x \u2212 n/2| \u2264 m for every vertex\n(n log n)/2 by a simple application of\nx of G, where we can take e.g. m =\nChernoff's bound (see also [13, Corollary 3.4]). By the Pigeonhole Principle, there\nis a set U of u = \u2308n/(2m + 1)\u2309 vertices all having the same degree.\nAnother property of the random graph G that we assume is that every set X \u2282 V\nof size u contains distinct vertices w, x, y, z with wx, yz \u2208 E(G) and xy, zw 6\u2208 E(G).\nIndeed, let us fix a u-set X \u2282 V and\n\u0001 estimate the probability that it violates this\nu\nproperty. One can find at least 2 /5 edge-disjoint 4-cycles inside the complete\ngraph on X. (For example, picking up cycles one by one arbitrarily, we get enough\nof them by the well-known fact that a C4 -free graph on u vertices has O(u3/2) edges,\nsee, e.g., [2, Chapter 25.5].) For each 4-cycle on vertices x1 , x2 , x3 , x4 in this order, at\nleast one of the relations x1 x2 , x3 x4 \u2208 E(G) and x2 x3 , x4 x1 6\u2208 E(G) should be false,\nthis having probability 15/16. By the edge-disjointness, these events for different\nselected cycles are mutually independent. Hence X violates the desired property\n\u0001\u22121\n\u0001\nu\nwith probability is at most (15/16)(2 )/5 = o( nu ). Since there are nu candidates\nfor a bad set X, the probability that it exists is o(1), giving the required.\nHence, the equidegree set U contains vertices w, x, y, z with wx, yz \u2208 E(G) and\nxy, zw 6\u2208 E(G). Let H be obtained from G by removing edges wx, yz and adding\nedges xy, zw. This operation preserves the degree of every vertex as well as the\n2\nmultiset of degrees of its neighbors, that is, CG2 (v) = CH\n(v) for every vertex v \u2208 V .\nSuppose that G and H are isomorphic. Any isomorphism f must preserve the\nC 2 -colors. Since C 2 -classes are all singletons, f has to be the identity map on\nV (G) = V (H). But then the adjacency between, e.g., w and x is not preserved, a\ncontradiction. The lemma is proved.\n\u0003\nGiven a typical G = Gn,1/2 , let H be a graph satisfying Lemma 6.2. Thus, the 2round color refinement fails to distinguish between G and H. By the sufficiency part\n2\nof Theorem 4.4, we have D#\n(G) > 3. As an alternative proof, the reader can design\na winning strategy for Duplicator in the counting game Ehr23 (G, H). Together with\n2\nTheorem 6.1.1, this bound gives us the exact value D#\n(Gn,1/2 ).\n2\nTheorem 6.3. Whp D#\n(Gn,1/2 ) = 4.\n2\n(G) and, on the other hand, D# (G) \u2264 2 implies\nWe always have D# (G) \u2264 D#\n2\nD# (G) \u2264 2 because any definition with quantifier depth 2 can be rewritten with\nusing only 2 variables. It follows from Theorem 6.3 that 3 \u2264 D# (Gn,1/2 ) \u2264 4 whp.\nUnfortunately, we could not decide whether the typical value of D# (Gn,1/2 ) is 3 or\n4, which seems to be an interesting question.\n\n\f32\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\n6.1.2. Logic without counting.\nTheorem 6.4 (Kim et al. [50]). Fix an arbitrarily slowly increasing function \u03c9 =\n\u03c9(n). Then we have whp that\nlog n \u2212 2 log log n + log log e + 1 \u2212 o(1) \u2264 W (Gn,1/2) \u2264\n\n\u2264 D1 (Gn,1/2 ) \u2264 log n \u2212 log log n + \u03c9.\n\nWe first prove the lower bound.\nDefinition 6.5. For an integer k \u2265 1, we say that a graph G has the k-extension\nproperty if, for every two disjoint X, Y \u2282 V (G) with |X \u222a Y | \u2264 k, there is a vertex\nz\u2208\n/ X \u222a Y adjacent to all x \u2208 X and non-adjacent to all y \u2208 Y .\nLemma 6.6. If both G and H have k-extension property, then W (G, H) \u2265 k + 2.\nProof. By Theorem 3.3.3 it suffices to design a strategy allowing Duplicator to survive in Ehrk+1 (G, H) arbitrarily long. Suppose that Spoiler puts pebble p on a\nnew position v in one of the graphs, say, G. Let X (resp. Y ) denote the set of\npebbled vertices in H whose counter-parts in G are adjacent (resp. non-adjacent) to\nv. Duplicator moves the other copy of p to a vertex z with the given adjacencies to\nX \u222a Y whose existence is guaranteed by the k-extension property.\n\u0003\nLemma 6.7. Let \u01eb > 0 be a real constant. Then the k-extension property holds for\nGn,1/2 whp for any k \u2264 log n \u2212 2 log log n + log log e \u2212 \u01eb.\nProof. Let n be large. Any particular X and Y with |X \u222a Y | = k falsify the kextension\nproperty with probability (1 \u2212 2\u2212k )n\u2212k . Since the number of such pairs is\n\u0001\nn k\n2 , a random graph Gn,1/2 does not have the k-extension property with probability\nk\nat most\n\u0012 \u0013\n\b\nn k\n2 (1 \u2212 2\u2212k )n\u2212k \u2264 nk (1 \u2212 2\u2212k )n \u2264 exp k ln n \u2212 n2\u2212k .\nk\nThe former inequality is true only if k \u2265 4 but this makes no problem because the\nk-extension property implies itself for all smaller values of parameter k. Since the\nfunction f (x) = x ln n \u2212 n2\u2212x is monotone, the k-extension property fails with the\nprobability bounded from above by\nexp {f (log n \u2212 2 log log n + log log e \u2212 \u01eb)} =\n\b\n= exp (ln 2) (\u22122\u01eb + 1 + o(1)) log2 n = o(1),\n\nas it was claimed.\n\n\u0003\n\nFix \u01eb > 0. Let n be sufficiently large and set k = \u230alog n\u22122 log log n+log log e\u2212\u01eb\u230b.\nBy Lemma 6.7, G = Gn,1/2 has the k-extension property whp. Let H be a graph\nwhich also possesses the k-extension property and is non-isomorphic to G. The\nexistence of such a graph follows also from Lemma 6.7: Given G, let H = Gn,1/2\nbe another, independent copy of a random graph. It should be only noticed that\nn\nH\u223c\n= G with probability at most n!2\u2212( 2 ) = o(1). By Lemma 6.6, we have\nW (G) \u2265 W (G, H) \u2265 k + 2 > log n \u2212 2 log log n + log log e + 1 \u2212 \u01eb,\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n33\n\nthereby proving the lower bound of Theorem 6.4.\nTo prove the upper bound, we employ the Weak Sieve Strategy that was designed\nin Section 5.2.2. Lemma 5.12 allows us to estimate the parameter D1 (G) by the\nsize of a weak sieve existing in G. The upper bound of Theorem 6.4 follows from\nLemmas 6.8 below, that gives us a good enough bound for the size of a weak sieve in\na random graph. The paper [50] states a slightly weaker upper bound than that in\nTheorem 6.4 (namely, \u03c9 = C log log log n there). The current more precise estimate\nis due to Joel Spencer (unpublished).\nLemma 6.8. Fix an arbitrarily slowly increasing function \u03c9 = \u03c9(n). Then whp\nGn,1/2 has a weak sieve of size at most log n \u2212 log ln n + \u03c9.\nProof. We will consider a random graph Gn,1/2 on an n-vertex set V . Fix X \u2282 V\nwith |X| = log n \u2212 s, where s = log ln n \u2212 \u03c9. We generate Gn,1/2 in two stages.\n\nStage 1: reveal the edges between X and V \\ X (needless to say, each such edge\nappears with probability 1/2 independently of the others). Our goal at this stage is\nto show that S(X) is large whp.\nA fixed y \u2208 V \\ X is sifted out by X with probability\n\u2212\u03c9 (1+o(1))\n\n(1 \u2212 2\u2212|X| )n\u2212|X|\u22121 = exp {\u22122s (1 + o(1))} = n\u22122\n\n= n\u2212o(1) .\n\nBy linearity of expectation\nE [ |S(X) \\ X| ] = (n \u2212 |X|)n\u2212o(1) = n1\u2212o(1) .\nWe can now apply the martingale techniques to show that whp |S(X) \\ X| is concentrated near its mean value. More precisely, we need the following estimate:\nh\ni\np\n2\nP |S(X) \\ X| < E [ |S(X) \\ X| ] \u2212 2\u03bb n \u2212 |X| < e\u2212\u03bb /2\n(15)\n\nfor any \u03bb > 0, where P [ A ] denotes the probability of an event A.\nTo prove it, consider the probability space consisting of all functions g : V \\ X \u2192\nX\n2 . Define a random variable L on this space by setting L(g) to be equal to\nthe number of values in 2X taken on by g exactly once. Note that, if g and\ng \u2032 differ only at one point, then |L(g) \u2212 L(g \u2032 )| \u2264 2. Construct an appropriate martingale as explained in the Alon-Spencer book [4, Chapter 7.4]. Namely,\nlet V \\ X = {y1 , . . . , ym } and\ndefine a sequence of auxiliary\n\u0002\n\u0003 random variables\nX0 , X1 , . . . , Xm by Xi = E 21 L(g) | g(yj ) = h(yj ) for all j \u2264 i . By Azuma's inequality (see [4, Theorems 7.2.1 and 7.4.2]), for all \u03bb > 0 we have\n\u0002\n\u221a \u0003\n2\nP L(g) < E [ L(g) ] \u2212 2\u03bb m < e\u2212\u03bb /2 ,\nwhich is exactly what is claimed by (15).\nBy (15) we have whp that\n\n|S(X) \\ X| \u2265 n1\u2212o(1) .\nConditioning on S(X) satisfying this bound, we go to the next stage of generating Gn,1/2 .\n\n\f34\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nStage 2: reveal the edges inside V \\ X. It is enough to show that V \\ S(X) \u2282\nS(S(X) \\ X) whp. If the last claim is false, then there are z, z \u2032 \u2208 V \\ S(X) having\nthe same adjacencies to S(X) \\ X. This happens with probability no more than\n\u0012 \u0013\nn \u2212|S(X)\\X|\n1\u2212o(1)\n2\n< n2 2\u2212n\n= o(1).\n2\nThe proof is complete.\n\u0003\nTheorem 6.4 shows rather close lower and upper bounds for the logical width and\ndepth of a random graph Gn,1/2 . Surprisingly, even this can be improved.\nTheorem 6.9 (Kim et al. [50]). For infinitely many n we have whp\nD2 (Gn,1/2 ) \u2264 log n \u2212 2 log log n + log log e + 6 + o(1).\nThis upper bound is at most by 5 + o(1) larger than the lower bound of Theorem\n6.4. It follows that, for infinitely many n, the parameters Di (G) with i \u2265 2, D(G),\nand W (G) are all concentrated on at most 6 possible values (while some extra work,\nsee [50, Section 4.3], gives a 5-point concentration).\n6.1.3. Bounds for trees.\nTheorem 6.10 (Bohman et al. [12]). Let Tn denote a tree on the vertex set\n{1, 2, . . . , n} selected uniformly at random among all nn\u22122 such trees. Whp we have\nW (Tn ) = (1 + o(1)) logloglogn n and D(Tn ) = (1 + o(1)) logloglogn n .\nThe lower bound for W (Tn ) immediately follows from the following property of\na random tree: whp Tn has a vertex adjacent to (1 + o(1)) logloglogn n leaves. Note that\nthe upper bound for D(Tn ) does not follow directly from Theorem 5.4 because whp\n\u2206(Tn ) = (1 + o(1)) logloglogn n (see Moon [57]).\n6.2. An application: The convergency rate in the zero-one law. We will\nwrite G |= \u03a6 to say that a sentence \u03a6 is true on a graph G. Let pn (\u03a6) =\nP [ Gn,1/2 |= \u03a6 ]. The 0-1 law established by Glebskii et al. [32] and, independently,\nby Fagin [29] says that, for each \u03a6, pn (\u03a6) approaches 0 or 1 as n \u2192 \u221e. Denote the\nlimit by p(\u03a6).\nDefine the convergency rate function for the 0-1 law by\nR(k, n) = max { |pn (\u03a6) \u2212 p(\u03a6)| : D(\u03a6) \u2264 k} .\n\u03a6\n\nNote that the maximization here can be restricted to a finite set by Theorem 2.4.1.\nTherefore, the standard version of the 0-1 law implies that R(k, n) \u2192 0 as n \u2192 \u221e for\nany fixed k. Naor, Nussboim, and Tromer [58] showed that R(log n\u22122 log log n, n) \u2192\n0. Another result in [58] states that one can choose p(n) = 1/2 + o(1) and k(n) =\n(2+o(1)) log n such that the probability that Gn,p has a k(n)-clique is bounded away\nfrom 0 and 1. Thus for this probability p(n) the 0-1 law does not hold with respect\nto formulas of depth k(n).\nThe following theorem sharpens slightly the first part of the above result and\nimproves on the second part in two aspects: we do not need to change the probability\np = 1/2 and we get an almost best possible upper bound.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n35\n\nTheorem 6.11. Let g(n) = log n \u2212 2 log log n + log log e + c with constant c.\n1. If c < 1, then R(g(n), n) \u2192 0 as n \u2192 \u221e.\n2. If c > 6, then R(g(n), n) does not tend to 0 as n \u2192 \u221e. More strongly, for\nevery \u03b3 \u2208 [0, 1] there is a sequence of formulas \u03a6n1 , \u03a6n2 , . . . (where ni < ni+1 )\nwith D(\u03a6ni ) \u2264 g(ni ) such that pni (\u03a6ni ) \u2192 \u03b3 as i \u2192 \u221e.\nPart 2 follows from Theorem 6.9. The latter implies that (for infinitely many\nn) actually any property P of graphs on n vertices can be \"approximated\" by a\nfirst-order sentence of depth at most g(n). Indeed, take the conjunction of defining\nformulas over all graphs in P of order n and depth at most g(n). The omitted graphs\nconstitute negligible proportion of all graphs by Theorem 6.9.\nWe now prove Part 1. Like the proof in [58] we use the extension property, but\nwe argue in a slightly different way.\nProof of Part 1. Let Ek denote a first-order statement of quantifier depth k expressing the (k \u2212 1)-extension property. Lemma 6.7 provides us with an infinitesimal\n\u03b1(n) such that\n1 \u2212 pn (Ek ) \u2264 \u03b1(n) as long as k \u2264 g(n).\n(16)\nWe will consider g(x) on the range x \u2265 2. This function is decreasing for x \u2264 e2\nand increasing for x \u2265 e2 . Since g(2) < 3, for any k0 \u2265 3 there is some n0 such that\nthe conditions\n\u221a g(n) \u2265 k0 and n \u2265 n0 are equivalent. We fix a value k0 \u2265 3 so that\n1 \u2212 \u03b1(n) \u2265 3/2 whenever g(n) \u2265 k0 . Note that\n\u221a\n3\npn (Ek ) \u2265\nwhenever g(n) \u2265 k \u2265 k0 .\n(17)\n2\nThe result readily follows from the following fact.\n\nClaim A. If k0 \u2264 k \u2264 g(n), then for every first-order statement \u03a6 with D(\u03a6) = k\nwe have\n|pn (\u03a6) \u2212 p(\u03a6)| \u2264 2 \u03b1(n).\n(18)\nWe will prove first a more modest bound.\nClaim B. If k0 \u2264 k \u2264 g(n), then for every first-order statement \u03a6 with D(\u03a6) = k\nwe have\n|pn (\u03a6) \u2212 p(\u03a6)| \u2264 1/2.\n(19)\nProof of Claim B. Consider a pair of integers k and n such that k0 \u2264 k \u2264 g(n). Let\n\u03a6 be a first-order statement with D(\u03a6) = k. Without loss of generality, suppose\nthat p(\u03a6) = 0. If pN (\u03a6) > 1/2 for some N, let N denote the largest such number.\nFor M = N + 1 we have pM (\u03a6) \u2264 1/2. Let GN and GM be independent random\ngraphs with, respectively, N and M vertices. Note that\n1\nP [ D(GN , GM ) \u2264 k ] \u2265 P [ GN |= \u03a6 & GM 6|= \u03a6 ] > .\n4\nOn the other hand, Lemma 6.6 implies that\nP [ D(GN , GM ) > k ] \u2265 P [ GN |= Ek & GM |= Ek ] = pN (Ek )pM (Ek ).\n\n\f36\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\n\u221a\nIt\n\u221a follows that pN (Ek )pM (Ek ) < 3/4 and, therefore, pN (Ek ) < 3/2 or pM (Ek ) <\n3/2. Comparing this with (17), we conclude that g(N) < k or g(M) < k, which\nimplies that n > N. The desired bound (19) follows now by the definition of N. \u22b3\nProof of Claim A. Consider a pair of integers k and n such that k0 \u2264 k \u2264 g(n).\nLet \u03a6 be a first-order statement with D(\u03a6) = k. Let G\u2032 and G\u2032\u2032 be two independent\ncopies of Gn,1/2 . By Lemma 6.6,\nP [ D(G\u2032 , G\u2032\u2032 ) > k ] \u2265 P [ G\u2032 |= Ek & G\u2032\u2032 |= Ek ] = pn (Ek )2 .\n\nOn the other hand,\n\nP [ D(G\u2032 , G\u2032\u2032 ) > k ] \u2264 P [ G\u2032 and G\u2032\u2032 are not distinguished by \u03a6 ] = pn (\u03a6)2 +(1\u2212pn (\u03a6))2 .\nCombining the two bounds, we obtain\n\n2 pn (\u03a6)(1 \u2212 pn (\u03a6)) \u2264 1 \u2212 pn (Ek )2 .\n\nUsing Claim B, we immediately infer from here that\n\n|pn (\u03a6) \u2212 p(\u03a6)| \u2264 1 \u2212 pn (Ek )2 \u2264 2(1 \u2212 pn (Ek )).\n\nThe desired bound (18) follows now from (16). \u22b3\n\n\u0003\n\n6.3. The evolution of a random graph. We now take a dynamical view on a\nrandom graph Gn,p by letting the edge probability p vary. With p varying from 0\nto 1, Gn,p evolves from empty to complete. We want to trace the changes of its\nlogical complexity during the evolution. Since the definability parameters do not\nchange when we pass to the complement of a graph, we can restrict ourselves to case\np \u2264 1/2.\nWhen p is a constant, one can estimate D(G) within additive error O(log log n).\nTheorem 6.12 (Kim et al. [50]). If 0 < p \u2264 1/2 is constant, then whp\n\nlog1/p n \u2212 c1 ln ln n \u2212 O(1) \u2264 W (Gn,p) \u2264 D(Gn,p ) \u2264 log1/p n + c2 ln ln n,\n\nwhere c1 = 2 ln\u22121 (1/p) and c2 = (2 + o(1)) (\u2212p ln p \u2212 (1 \u2212 p) ln(1 \u2212 p))\u22121 \u2212 c1 .\nSketch of Proof. Similarly to Theorem 6.4, the lower bound is based on the kextension property. However, the proof of the upper bound is quite different. In\nparticular, we have hardly any control on the alternation number in this result. The\nargument is rather complicated so we give only a brief sketch, concentrating more\non its logical rather than probabilistic component.\nLet G = Gn,p be typical and G\u2032 \u223c\n6= G be arbitrary. Let V = V (G) and V \u2032 = V (G\u2032 ).\nFor a sequence X of vertices, let VX = {y \u2208 V : \u2200 x \u2208 X xy \u2208 E(G)} and\nGX = G[VX ]. Let the analogous notation (with primes) apply to G\u2032 . If there is\nx \u2208 V such that for every x\u2032 \u2208 V \u2032 we have Gx \u223c\n6= G\u2032x\u2032 , then Spoiler selects x.\nWhatever Duplicator's reply x\u2032 \u2208 V \u2032 is, Spoiler reduces the game to non-isomorphic\ngraph Gx and G\u2032x\u2032 . We expect that |Vx | = (p + o(1))n and Gx is also 'typical'. Thus\nSpoiler used one move to reduce the order of the random graph by a factor of p,\nwhich should lead to the upper bound D(G) \u2264 (1 + o(1)) log1/p n.\nSuppose now that there are x \u2208 V and distinct y \u2032 , z \u2032 \u2208 V \u2032 such that Gx \u223c\n=\n\u2032 \u223c\nGy\u2032 = G\u2032z \u2032 . Spoiler selects y \u2032 \u2208 V \u2032 . Assume that Duplicator replies with y = x,\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n37\n\nfor otherwise Gy \u223c\n6= G\u2032y\u2032 and Spoiler proceeds as above. Now Spoiler selects z \u2032 ; let\nz \u2208 V be the Duplicator's reply. We can assume that Gy,z \u223c\n= G\u2032y\u2032 ,z \u2032 , for otherwise\nSpoiler applies the inductive strategy to the (Gy,z , Gy\u2032 ,z \u2032 )-game, where the order of\nthe random graph is reduced by factor (1 + o(1)) p2 . Let U = Vy,z and U \u2032 = Vy\u2032\u2032 ,z \u2032 . A\nfirst moment calculation shows that there is vertex v \u2208 Vy \\ U such that no vertex of\nVz \\ U has the same neighborhood in U as v. Let Spoiler select v and let v \u2032 \u2208 Vy\u2032\u2032 \\ U \u2032\nbe the Duplicator's reply. Two copies G\u2032y\u2032 and G\u2032z \u2032 of a 'typical' graph Gx have a\nlarge vertex intersection. Another first moment calculation shows that whp there is\nonly one way to achieve this, namely that the (unique) isomorphism f : Vy\u2032\u2032 \u2192 Vz\u2032\u2032\nbetween G\u2032y\u2032 and G\u2032z \u2032 is in fact the identity on U \u2032 . But then f (v \u2032) has the same\nadjacencies to U \u2032 as v \u2032 . Spoiler selects f (v \u2032 ) and wins the game in at most one extra\nmove.\nFinally, up to a symmetry it remains to consider the case that there is a bijection\ng : V \u2192 V \u2032 such that for any x \u2208 V we have Gx \u223c\n= G\u2032g(x) .\nAs G \u223c\n6= G\u2032 , there are y, z \u2208 V such that g does not preserve the adjacency\nbetween y and z. Spoiler selects y. We can assume that Duplicator replies with\ny \u2032 = g(y) for otherwise Spoiler reduces the game to Gy . Now, Spoiler selects z to\nwhich Duplicator is forced to reply with z \u2032 6= g(z). Let w = g \u22121 (z \u2032 ). Assume that\nGy,z \u223c\n= Gy\u2032 ,z \u2032 for otherwise Spoiler applies the inductive strategy to these graphs.\nBut then Gy,z is an induced subgraph of Gw \u223c\n= G\u2032z \u2032 , a property that we do not expect\nto see in a random graph.\nIn order to convert this rough idea into a rigorous proof one has to show that\nwhp as long as the subgraphs Gx1 ,x2 ,... that can appear in the game are sufficiently\nlarge, they have all required properties. Also, one has to design Spoiler's strategy\nto deals small subgraphs of Gn,p at the end of the game. All details can be found\nin [50, Section 3].\n\u0003\nIt is interesting to investigate the behavior, e.g., of D(Gn,p) when p = p(n) tends\nto zero. In particular, it is open whether, for every constant \u03b4 \u2208 (0, 1) and n\u2212\u03b4 \u2264\np(n) \u2264 1/2 we have whp D(Gn,p ) = O(log n).\nSome restriction on p(n) from below is necessary here. Indeed, let G be an arbitrary non-empty graph (i.e., G has at least one edge) and let G\u2032 be obtained from\nG by adding one more isolated vertex. It is easy to see that W (G, G\u2032) > d0 (G) and\nD(G, G\u2032) > d0 (G) + 1, where d0 (G) denotes the number of isolated vertices of G. It\nfollows that\nW (G) \u2265 d0 (G) + 1 and D(G) \u2265 d0 (G) + 2.\n(20)\nIt is well known (see, e.g., [13]) that\nd0 (Gn,p ) = (e\u2212pn + o(1)) n\n\n(21)\n\nwhp as long as p = O(n\u22121). In particular, we have W (Gn,p ) = (1 \u2212 o(1))n whenever\np = o(n\u22121 ).\nIn some cases, the lower bounds (20) are sharp.\nLemma 6.13. Let cF (G) denote the number of connected components in a graph G\nisomorphic to a graph F . Suppose that a non-empty graph G satisfies\ncF (G) + v(F ) \u2264 d0 (G) + 1,\n\nfor every component F of G.\n\n(22)\n\n\f38\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nThen W (G) + 1 = D(G) = D1 (G) = d0 (G) + 2.\nProof. Let us show that D1 (G, H) \u2264 d0 (G) + 2 for any H \u223c\n6= G. Let F be such\nthat cF (H) 6= cF (G). For definiteness suppose that cF (H) > cF (G). Spoiler marks\ncF (G) + 1 components of H which are isomorphic to F by pebbling one vertex in\neach of them. Duplicator is forced either to mark one of the F -components of G\ntwice (by pebbling two vertices, say, u and v in it) or to mark a component F \u2032 of\nG which is not isomorphic to F . In the former case Spoiler wins by pebbling a\npath from u to v. In the latter case Spoiler pebbles completely the F -component\nof H corresponding to F \u2032 . Duplicator is forced to pebble a connected part F \u2032\u2032 of\nF \u2032 . If she has not lost yet, then F \u2032\u2032 \u223c\n= F and hence F \u2032\u2032 is a proper subgraph of F \u2032 .\nSpoiler wins by pebbling another vertex in F \u2032 which is adjacent to a vertex in F \u2032\u2032 .\nAltogether at most d0 (G) + 2 moves are made.\nIt remains to prove the upper bound on the width. The last move may require\nusing the (d0 (G)+2)-th pebble. However, for this purpose Spoiler can reuse a pebble\nplaced earlier in a component different from F \u2032 . This trick is unavailable only if\ncF (G) = 1 and cF (H) = 0 or if cF (G) = 0 and cF (H) = 1. In both cases Spoiler\ncan win in at most v(F ) + 1 rounds (and at most one alternation). Moreover, if this\nnumber is at least d0 (G) + 2, then cF (G) = 0 and G has no component with v(F )\nor more vertices by (22). In this case, Spoiler can win in at most v(F ) moves. \u0003\nTheorem 6.14 (Kim et al. [50], Bohman et al. [12]). If p = c/n with c = c(n) \u2265 0\nbeing an arbitrary bounded function of n, then D(Gn,p) = (e\u2212c + o(1))n whp.\nSketch of Proof. It is well known that, observing the evolution process in the scale\np = c/n, at the point c = 1 we encounter the phase transition. If c < 1 \u2212 \u01eb, whp all\ncomponents of Gn,p have O(log n) vertices each; if c > 1 + \u01eb, there appears a unique\nexception, the so-called giant component with a linear number of vertices.\nOne can check that, for any c < \u03b1 \u2212 \u01eb, Condition (22) holds whp (even for\nthe giant component if it exists), where \u03b1 = 1.1918... is a root of some explicit\nequation, see [50, Theorem 19]. Then, by Lemma 6.13 and Equality (21), W (Gn,p)\nand D1 (Gn,p ) (and all parameters in between) are (e\u2212c + o(1)) n. When c is larger\nthan \u03b1 + \u01eb, then whp the giant component of Gn,p violates (22): Its order exceeds\nthe number of isolated vertices. This case is handled in [12] as follows.\nDenote the giant component of G = Gn,p by M. Given H \u223c\n6= G, we have to\ndesign a strategy allowing Spoiler to fast enough win the Ehrenfeucht game on G\nand H. The strategy in the proof of Lemma 6.13 does not work only if cM (H) = 0\nor cM (H) \u2265 2. We adapt it for these cases so that Spoiler, instead of selecting all\nvertices of M, plays an optimal strategy for M using at most D(M) + log n + 1\nmoves (instead of v(M) + 1 moves as earlier).\nFirst, we can assume that no component of H has diameter n or more. Otherwise\nSpoiler pebbles u and v at distance n in H. For Duplicator's responses u\u2032 and v \u2032\nin G we have either dist(u\u2032, v \u2032 ) < n or dist(u\u2032 , v \u2032 ) = \u221e. Hence Spoiler wins in less\nthan log n + 1 moves.\nSecond, we can assume that Duplicator always respects the connectivity relation\n(two vertices are in the relation if they are connectable by a path). Indeed, suppose\nthat u and v belong to the same connected component F in one of the graphs while\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n39\n\ntheir counter-parts u\u2032 and v \u2032 are in different components of the other graph. Then\nSpoiler wins in less than log diam(F ) + 1 moves.\nUnder this assumption, Spoiler easily forces that, starting from the 2nd round,\nthe play goes on components of G and H, of which exactly one is isomorphic to M.\nOne of the main results of [12] states that whp\n\u0012\n\u0013\nln n\nD(M) = O\n,\n(23)\nln ln n\nwhich implies that Spoiler is able to win quickly and proves the theorem.\nThe upper bound (23) is obtained roughly as follows. By iteratively removing\nvertices of degree 1 from the giant component M, one obtains the core C of M\n(that is, C is a maximum subgraph with minimum degree at least 2). The kernel\nK of G is the serial reduction of C, that is, we iterate the following to obtain K: If\nthere is a vertex x of degree 2, then we remove x but add edge {y, z}, where y and z\nare the two neighbors of x. The kernel may have loops and multiple edges and has to\nbe modeled as a colored graph. The original graph G can be encoded by specifying\nits kernel K and the structure of rooted trees that correspond to each vertex or edge\nof K, the latter being viewed as a total coloring of K. It happens that whp every\nvertex x of K can be identified by a small-depth formula \u03a6x with one free variable\n(that is K, x |= \u03a6x while K, y 6|= \u03a6x for every other vertex y \u2208 V (K)) in the firstorder language of colored graphs. Thus one can define K succinctly by stating that\nfor every x \u2208 V (K) there is a unique vertex satisfying \u03a6x , that every vertex satisfies\n\u03a6x for some x \u2208 V (K), and by listing the adjacencies between vertices identified by\n\u03a6x and \u03a6y for every x, y \u2208 V (K). The core C can now be defined by specifying the\nlength of the path corresponding to each edge of K, while the giant component M\ncan be defined by specifying the random rooted trees hanging on the vertices of C\nusing Theorem 6.10 (which relies in part on Theorem 5.4).\n\u0003\nThe bound (23) is optimal up to a constant factor. This follows from the fact that\nwhp the giant component M has a vertex v adjacent to at least (1\u2212\u01eb) log n/ log log n\nleaves. (Indeed, consider the graph M \u2032 \u223c\n6= M that is obtained from M by attaching\nan extra leaf at v.) We believe that the lower bound is sharp, that is, whp D(M) =\n(1 + o(1)) log n/ log log n, but we were not able to settle this question.\nFinally, we consider edge probabilities p = n\u2212\u03b1 with rational \u03b1 \u2208 (0, 1). Such p\noccur as threshold functions for (non-)appearance of particular graphs as induced\nsubgraphs in Gn,p . What is relevant to our subject is that such p show an irregular\nbehavior of Gn,p with respect to first-order properties.\nSince the treatment of the general case of rational \u03b1 would require a considerable\namount of technical work, the paper [50] focuses on a sample value \u03b1 = 1/4, when\nD(Gn,p ) falls down and becomes so small as it is essentially possible (cf. Section 7).\nTheorem 6.15 (Kim et al. [50]). If p = n\u22121/4 , then whp\nlog\u2217 n \u2212 log\u2217 log\u2217 n \u2212 1 \u2264 D(Gn,p) \u2264 D3 (Gn,p ) \u2264 log\u2217 n + O(1).\n\nSketch of Proof. The upper bound is based on the following ideas. Let the predicate\nC(x1 , x2 , x3 , x4 ) state that these 4 distinct vertices have no common neighbor. Its\nprobability is (1 \u2212 p)n\u22124 = e\u22121 + o(1) and its values over different 4-tuples are\n\n\f40\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nrather weakly correlated. Thus, if for a set A and a vertex v 6\u2208 A, we define\nHv (A) be the 3-uniform hypergraph on A with x1 , x2 , x3 \u2208 A being a hyperedge\nif and only if C(v, x1 , x2 , x3 ) holds, then Hv (A) behaves somewhat like a random\nhypergraph. As it is shown in [50, Lemma 21], one can find 4 vertices such that their\ncommon neighborhood A is relatively large (namely, |A| = \u230aln0.3 n\u230b) and yet there\nare vertices a, m such that hypergraphs Ha (A) and Hm (A) encode in some way the\nmultiplication and addition tables for an initial interval of integers. Also, any integer\ncan be succinctly defined in first-order logic with arithmetic operations. Roughly\nspeaking, in order to define an integer j, one can write it in binary j = bk . . . b1 and\nspecify for every i \u2264 k the i-th bit bi ; crucially, the same binary expansion trick\ncan be used recursively to specify the index i, and so on. This allows us to identify\nvertices A with very small depth. Next, we consider the set B of vertices of G that\nhave exactly 4 neighbors in A and are uniquely determined by this. Again, the\nvertices of B are easy to identify (just list the 4 neighbors in A). Finally, if A was\nchosen carefully, then each vertex w of G is uniquely identified by the hypergraph\nHw (B). (The reason that we need an intermediate set B is that the number of\n|A|\npossible 3-uniform hypergraphs Hw (A) is at most 2( 3 ) < n \u2212 |A|, that is, too\nsmall.) Of course, many technical difficulties arise when one tries to realize this\napproach.\nThe lower bound in Theorem 6.15 is very general. We use only the simple fact that\nany particular unlabeled graph with m edges is the value of Gn,p , where p = n\u22121/4 ,\nwith probability at most\n\u0001\nn\nn\nn!pm (1 \u2212 p)( 2 )\u2212m \u2264 n!(1 \u2212 p)( 2 ) \u2264 exp \u2212(1/2 \u2212 o(1))n7/4 .\n\nLet F (k) be the number of non-isomorphic\ngraphs definable with depth at most\n\b\nk. Then P [ D(G) \u2264 k ] \u2264 F (k) exp \u2212(1/2 \u2212 o(1))n7/4 . By Theorem 2.3, F (k) \u2264\nTower(k + 2 + log\u2217 k). If k = log\u2217 n \u2212 log\u2217 log\u2217 n \u2212 2, we have F (k) \u2264 2n and hence\nP [ D(G) \u2264 k ] = o(1).\n\u0003\nThe above idea (arithmetization of certain vertex sets in graphs) has been previously used by Spencer [72, Section 8] to obtain non-convergence and non-separability\nresults on the example of Gn,p with p = n\u22121/3 .\nSo far we have considered the evolution of the logical complexity of a random\ngraph in the standard logic with no counting. We conclude this section with an\nextension of Theorem 6.1.\nTheorem 6.16 (Czajka and Pandurangan [17]). Let p(n) be any function of n such\nlog4 n\nthat \u03c9(n)\n\u2264 p(n) \u2264 1/2 where \u03c9(n) \u2192 \u221e as n \u2192 \u221e. Then 2 color refinements\nn log log n\nsplit a random graph Gn,p into color classes which are singletons with probability that\nis higher than 1 \u2212 n\u2212c for each constant c > 0 and all large enough n. Consequently,\n2\nD#\n(Gn,p ) \u2264 4 with this probability.\nNote that, in the case of p = 1/2, this result improves the probability bound in\nPart 1 of Theorem 6.1, while the probability bound in Part 2 is still better.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n41\n\nBy elaborating on the argument of Lemma 6.2, we are able to supply Theorem\n2\n6.16 with the matching lower bound (that is, D#\n(Gn,p ) \u2265 4 whp) within the range\np\n4 log n/n \u2264 p \u2264 1/2.\n7. Best-case bounds: Succinct definitions\n\nAs in the preceding sections, we consider the logical depth of graphs with a given\nnumber of vertices n. We know that the maximum value D(G) = n + 1 is attained\nby the complete and empty graphs (and only by them) and that the typical values\nlie around log n (see Theorem 6.4). Now we are going to look at the minimum. We\nalready have a good starting point: By Theorem 6.15, there are graphs with\nD3 (G) \u2264 log\u2217 n + O(1).\n\nIn order to get such examples, we have to generate a random graph with the edge\nprobability n\u22121/4 . In Section 7.1 we give three explicit constructions achieving\nthe same bound. In Section 7.2 we introduce the succinctness function q(n) =\nmin { D(G) : v(G) = n} and give an account of what is known about it. Section 7.3\nis devoted to the question of how succinctly we can define graphs if we are not allowed to make quantifier alternations. In Section 7.4 the bounds on the succinctness\nfunction are applied to proving separations results for logical parameters of graphs,\nin particular, for D(G) and L(G).\n7.1. Three constructions.\n7.1.1. First method: Padding. We describe a \"padding\" operation that was invented\nby Joel Spencer (unpublished). It converts any graph G to an exponentially larger\ngraph G\u2217 with the logical depth larger just by 1. G\u2217 includes G as an induced\nsubgraph. In addition, for every subset X of V = V (G), the graph G\u2217 contains a\nvertex vX . Denote the set of these vertices by V \u2032 . There is no edge inside V \u2032 but\nthere are some edges between V and V \u2032 . Specifically, v \u2208 V is adjacent to vX iff\nv \u2208 X. In particular, v\u2205 is isolated and N(vV ) = V .\nVertex vV will play a special role in our first-order definition of G\u2217 . First of all,\nwe will say that there is a vertex c (assuming c = vV ) whose neighborhood spans\nin G\u2217 a subgraph isomorphic to G. This can be done by relativizing a formula \u03a6G\ndefining G to N(c). That is, each universal quantification \u2200x(\u03a8) in \u03a6G has to be\nmodified to\ndef\n\u2200x\u2208N (c) (\u03a8) = \u2200x(x \u223c c \u2192 \u03a8)\nand each existential quantification to\ndef\n\n\u2203x\u2208N (c) (\u03a8) = \u2203x(x \u223c c \u2227 \u03a8).\n\nDenote the relativized version of \u03a6G by \u03a6G |N (c) . Note that relativization does not\nchange the quantifier depth. A sentence defining G\u2217 can now look as follows:\n\u0010\ndef\n\u03a6G\u2217 = \u2203c \u03a6G |N (c) \u2227 \u2200x\u2208N\n/ (c) (N(x) \u2282 N(c)) \u2227 \u2200x1 \u2208N\n/ (c) \u2200x2 \u2208N\n/ (c) (N(x1 ) 6= N(x2 ))\n\u0011\n\u2227 \u2200x1 \u2208N\n\u2200\n\u2203\n(N(x\n)\n=\nN(x\n)\n\\\n{y})\n,\n/ (c) y\u2208N (x1 ) x2 \u2208N\n/ (c)\n2\n1\n\n\f42\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nwhere we use harmless shorthands for simple first-order expressions.\nIt is easy to see that\nD(\u03a6G\u2217 ) = max {D(\u03a6G ), 4} + 1\nand that, if \u03a6G is a \u2203\u2217 \u2200\u2217 \u2203\u2217 \u2200\u2217 -formula (that is, every chain of nested quantifiers is a\nstring of this form), then \u03a6G\u2217 stays in this class as well. Consider now a sequence\nof graphs Gk where G1 = P1 , the single-vertex graph, and Gk+1 = (Gk )\u2217 . Since\nv(G\u2217 ) = v(G) + 2v(G) , we have v(Gk ) \u2265 Tower(k \u2212 1). It follows that D3 (Gk ) \u2264\nlog\u2217 v(Gk ) + 3.\n7.1.2. Second method: Unite and conquer. Suppose that we have a set C of n-vertex\ngraphs, each of logical depth at most d. Our goal is to construct a much larger set\nC \u2217 of graphs with a much larger number of vertices n\u2217 and logical depth bounded by\nd + 3. An additional technical condition is that all the graphs have diameter 2. We\nknow from Theorem 6.4 that almost all graphs on n vertices have logical depth less\nthan log n and it is well known that they have diameter 2. Choosing a sufficiently\nlarge n, we can start with C being the class of all such graphs. Since almost all graphs\nn\nare asymmetric, we have |C| = (1 \u2212 o(1))2( 2 ) . Just for the notational simplicity, we\nprefer that |C| is even.\nFor each S \u2282 C such that |S| = |C|/2, the set C \u2217 contains graph\nGS =\n\nG\n\nG,\n\nG\u2208S\n\nthat is, we take the vertex disjoint union of all graphs in S and complement\nit. For\nF\nconvenience, we bound the logical depth of the complement GS = G\u2208C G rather\nthan that of G. Given an arbitrary H \u223c\n6= GS , we analyze the Ehrenfeucht game on\nthe two graphs.\nIf H has a connected component of diameter at least 3, Spoiler pebbles vertices u\nand v in H at the distance exactly 3 from one another. For Duplicator's responses\nu\u2032 and v \u2032 in GS , either dist(u\u2032 , v \u2032 ) \u2264 2 or dist(u\u2032 , v \u2032 ) = \u221e. In any case, Spoiler\nwins within the next 2 moves. Suppose from now on that all components of H have\ndiameter at most 2. This condition allows us to assume that Duplicator respects\nthe connectivity relation for otherwise Spoiler wins with one extra move (which will\nbe added to the total count of rounds).\nIf one of the graphs, GS or H, has a connected component A non-isomorphic to\nany component of the other graph, Spoiler pebbles a vertex in A. Let B be the\ncomponent of the other graph where Duplicator responds. Starting from the second\nround, Spoiler plays the Ehrenfeucht game on non-isomorphic graphs A and B and\nwins in at most d moves.\nIf such a component does not exist, GS must have a component A with at least\ntwo isomorphic copies in H. Then in the first two rounds Spoiler pebbles vertices\nin these two. Duplicator is forced at least once to respond in a component B of GS\nnon-isomorphic to A, which is an already familiar configuration.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n43\n\nThus, D(GS ) can be at most 3 larger than the maximum logical depth of graphs\nin C. At the same time GS has the much larger number of vertices, namely n\u2217 =\nn|C|/2. It follows that D(G) < log log v(G) for any G in C \u2217 .\nNote that any graph in C \u2217 is the complement of a disconnected graph and hence\nhas diameter 2. This allows us to iterate the construction. Say, for any G \u2208 (C \u2217 )\u2217\nwe get D(G) < log log log v(G) and so on. If we fix the initial class C, the iteration\nprocedure gives us graphs with D(G) < 3 log\u2217 v(G) + O(1). This bound is worse\nthan in the preceding section but the extra factor of 3 can be eliminated if Spoiler\nplays more smartly (see [62]).\n7.1.3. Third method: Asymmetric trees. The two previous examples were artificially\nconstructed with the aim to ensure low quantifier depth. Now we present a natural\nclass of graphs admitting succinct definability.\nThe radius of a graph G is defined by r(G) = minv\u2208V (G) e(v), where e(v) denotes\nthe eccentricity of a vertex v. A vertex v is central if e(v) = r(G). Any tree has\neither one or two central vertices (see, e.g., [59, Chapter 4.2]).\nLemma 7.1. Let T be an asymmetric tree with r(T ) \u2265 6. Then D(T ) \u2264 r(T ) + 2.\nProof. We will design a strategy for Spoiler in the Ehrenfeucht game on T and a\nnon-isomorphic graph T \u2032 . The reader that took the effort to reconstruct the proof\nof Theorem 5.3 will now definitely benefit.\nWe can assume that T and T \u2032 have equal diameters (in particular, T \u2032 is connected)\nfor else Spoiler wins in less than log r(T )+4 moves by Lemma 3.2. If T \u2032 is a non-tree,\nlet Spoiler pebble a vertex v \u2032 on a cycle in T \u2032 . By this move Spoiler forces the game on\nT \\v and T \u2032 \\v \u2032, where v is Duplicator's response in T . If v is a leaf, Spoiler wins in two\nmoves. Otherwise T \\ v is disconnected, while diam(T \u2032 \\ v \u2032 ) \u2264 3 diam(T \u2032 ) \u2264 6 r(T ).\nLemma 3.2 applies again and Spoiler wins in less than log r(T ) + 6 moves. Assume,\ntherefore, that T \u2032 is a tree too.\nCall a tree diverging if every vertex w splits it into pairwise non-isomorphic\nbranches, where each branch is considered rooted at the respective neighbor of w\n(an isomorphism of rooted trees has to match their roots). Any asymmetric tree is\nobviously diverging. On the other hand, if a tree is diverging, it is either asymmetric or has a single nontrivial automorphism and the latter transposes two central\nvertices.\nSuppose that T \u2032 is diverging. In the first round Spoiler pebbles a central vertex v\nof T and Duplicator responds with a vertex v \u2032 in T \u2032 . As it is easily seen, at least one\nof T \\ v and T \u2032 \\ v \u2032 has a branch B non-isomorphic to any branch in the other tree.\nSpoiler restricts further play to B by pebbling its root. Continuing in this fashion,\nthat is, each time finding a matchless subbranch, Spoiler forces pebbling two paths\nin T and T \u2032 emanating from v and v \u2032 respectively. Spoiler wins at latest when the\npath in T reaches a leaf.\nSo suppose that T \u2032 is not diverging. Let v \u2032 be a central vertex of T \u2032 and u\u2032 be\na vertex at the maximum possible distance from v \u2032 with the property that T \u2032 \\ u\u2032\nhas two isomorphic branches B \u2032 and B \u2032\u2032 . Spoiler pebbles the path from v \u2032 to u\u2032 and\nthe two neighbors of u\u2032 in B \u2032 and B \u2032\u2032 . From this point Spoiler can play as before\n\n\f44\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nbecause B \u2032 and B \u2032\u2032 are diverging and only one of them can be isomorphic to the\ncorresponding branch pebbled by Duplicator in T .\n\u0003\nLemma 7.1 shows that asymmetric trees are definable with quantifier depth not\nmuch larger than their radius. On the other hand, asymmetric trees can grow in\nbreadth, having a huge number of vertices. More precisely, there are asymmetric\ntrees with v(T ) \u2265 Tower(r(T ) \u2212 1). Indeed, let rk denote the number of asymmetric\nrooted trees of height at most k. A simple recurrence\nr0 = 1,\n\nrk = 2rk\u22121\n\nshows that rk = Tower(k). Let k \u2265 3 and Tk be the (unrooted) tree of radius k with\na single central vertex c such that the set of branches growing from c consists of all\nrk\u22121 pairwise non-isomorphic asymmetric rooted trees of height less than k. (The\nreader will now surely recognize another instance of the unite-and-conquer method!)\nSince Tk has even diameter, the central vertex c is fixed under all automorphisms. It\neasily follows that Tk is asymmetric. This graph will be referred to as the universal\nasymmetric tree of radius k. Note that v(Tk ) \u2265 rk\u22121 +1 > Tower(k \u22121). Combining\nit with Lemma 7.1, we obtain D(Tk ) \u2264 k + 2 \u2264 log\u2217 v(Tk ) + 2.\nWith a little extra work, trees with low logical depth can be constructed on any\ngiven number of vertices. It turns out that the log-star bound is essentially the best\nwhat can be achieved for trees.\nTheorem 7.2 (Pikhurko, Spencer, and Verbitsky [61]). For every n there is a tree\nT on n vertices with D(T ) \u2264 log\u2217 n + 4. On the other hand, for all trees T on n\nvertices we have D(T ) \u2265 log\u2217 n \u2212 log\u2217 log\u2217 n \u2212 4.\nWe will see in the next section that the lower bound of Theorem 7.2 cannot be\nextended to the class of all graphs.\nUniversal asymmetric trees have been proved to be a useful technical tool in\ncomplexity theory and finite model theory since a long time, see the references in\nDawar et al. [21]. Lemma 3.4(e) in the latter paper readily implies a succinctness\nresult for the logical length.\nTheorem 7.3 (Dawar et al. [21]). For the universal asymmetric tree of radius k we\nhave L(Tk ) = O((log\u2217 v(Tk ))4 ).\nThe theorem shows that, for infinitely many n, there is a tree T on n vertices with\nL(T ) = O((log\u2217 n)4 ). Unlike Theorem 7.2, this result cannot be extended to all n\nbecause there\nare\u0011 infinitely many n such that all graphs on n vertices have logical\n\u0010\nlog n\nlength \u03a9 log log n (see (30) in the proof of Theorem 7.13).\n7.2. The succinctness function. Define the succinctness function by\nq(n) = min { D(G) : v(G) = n} .\nSince only finitely many graphs are definable with a fixed quantifier depth (see\nTheorem 2.3), we have q(n) \u2192 \u221e as n \u2192 \u221e. The examples collected in Section\n7.1 show that q(n) increases rather slowly. Let qa (n) denote the version of q(n) for\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n45\n\ndefinitions with at most a quantifier alternations. The padding construction from\nSection 7.1.1 gives us\nq3 (n) \u2264 log\u2217 n + 3\n(24)\n\nfor infinitely many n and, by Theorem 6.15, this bound holds actually for all n,\nperhaps with a worst additive constant.\nIs the log-star bound best possible? The answer is surprising enough: in some\nstrong sense it is but, at the same time, it is very far from being tight. First, let us\nelaborate on the latter claim.\nA prenex formula is a formula with all its quantifiers being in front. In this case\nthere is a single sequence of nested quantifiers and the quantifier rank is just the\nnumber of quantifiers occurring in a formula. The superscript prenex will mean that\nwe allow defining sentences only in prenex form. Thus, qaprenex (n) is equal to the\nminimum quantifier depth of a prenex formula with at most a quantifier alternations\nthat defines a graph on n vertices. We obviously have D(G) \u2264 Da (G) \u2264 Daprenex (G).\nRecall that La (G) denotes the minimum length of a sentence defining G with at\nmost a quantifier alternations. Since a quantifier-free\nformulas with k variables is\n\u0001\nequivalent to a disjunctive normal form over 2 k2 relations between the variables,\nwe obtain also relation\n2\n\nLa (G) = O(h(Daprenex (G))) where h(k) = k 2 2k .\n\n(25)\n\nRecall that a total recursive function is an everywhere defined recursive function.\nTheorem 7.4 (Pikhurko, Spencer, and Verbitsky [61]). There is no total recursive\nfunction f such that f (q3prenex (n)) \u2265 n for all n.\nThe theorem implies a superrecursive gap between v(G) and D3 (G) or even L3 (G).\nIn particular, the values of q3 (n) are infinitely often inconceivably smaller even than\nthe values of log\u2217 n. More generally, if a total recursive function l(n) is monotone\nnondecreasing and tends to infinity, then\nq(n) < l(n) for infinitely many n,\n\n(26)\n\nwhich actually means that the succinctness function admits no reasonable lower\nbound.\nThe proof of Theorem 7.4 is based on simulation of a Turing machine M by a\nprenex formula \u03a6M in which a computation of M determines a graph satisfying \u03a6M\nand vice versa. Such techniques were developed in the classical research on Hilbert's\nEntscheidungsproblem by Turing, Trakhtenbrot, B\u00fcchi and other researchers (see\n[14] for survey and references). An important feature of our simulation is that it\nworks if we restrict the class of structures to graphs. As a by-product, we obtain\nanother proof of Lavrov's version of the Trakhtenbrot theorem [52] (see also [26,\nTheorem 3.3.3]) saying that the first-order theory of finite graphs is undecidable.\nThe proof actually shows the undecidability of the \u2200\u2217 \u2203p \u2200s \u2203t -fragment of this theory\nfor some p, s, and t.\nWe now have to explain why bound (24), though not sharp, is best possible in\nsome sense. Let us define the smoothed succinctness function q \u2217 (n) to be the least\n\n\f46\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nmonotone nondecreasing integer function bounding q(n) from above, that is,\nq \u2217 (n) = max q(m).\nm\u2264n\n\n(27)\n\nThe following theorem shows that q \u2217 (n) = (1 + o(1)) log\u2217 n and, therefore, the\nlog-star function is a nearly optimal monotone upper bound for the succinctness\nfunction q(n).\nTheorem 7.5 (Pikhurko, Spencer, and Verbitsky [61]).\nlog\u2217 n \u2212 log\u2217 log\u2217 n \u2212 2 \u2264 q \u2217 (n) \u2264 log\u2217 n + 4.\nThough the lower bound contains a nonconstant lower order term, it can hardly\nbe distinguished from a constant: for example, log\u2217 log\u2217 n = 3 for n = 1080 , which is\na rough estimate of the number of elementary particles in the observable universe.\nProof. Theorem 7.2 implies that q(n) \u2264 log\u2217 n + 4 for all n. Since this bound\nis monotone, it is a bound on q \u2217 (n) as well. The lower bound for q \u2217 (n) can be\nderived from Theorem 2.3. According to it, at most Tower(k + log\u2217 k + 2) graphs\nare definable with quantifier depth k. Given n > Tower(3), let k be such that\nTower(k + 2 + log\u2217 k) < n \u2264 Tower(k + 3 + log\u2217 (k + 1)). It follows that k >\nlog\u2217 n \u2212 log\u2217 log\u2217 n \u2212 4. By the Pigeonhole Principle, there will be some m \u2264 n for\nwhich no graph of order precisely m is defined with quantifier depth at most k. We\nconclude that q \u2217 (n) \u2265 q(m) > k and hence q \u2217 (n) \u2265 log\u2217 n \u2212 log\u2217 log\u2217 n \u2212 2.\n\u0003\nWe defined q \u2217 (n) to be the \"closest\" to q(n) monotone function. Notice that q(n)\nitself lacks the monotonicity, deviating from q \u2217 (n) infinitely often (set l(n) to be the\nlower bound in Theorem 7.5 and apply (26)).\n7.3. Definitions with no quantifier alternation. It is interesting to observe how\nthe succinctness function changes when we put restrictions on the logic. Note that\nall what we have stated about the succinctness function for first-order logic actually\nholds true for its fragment with 3 quantifier alternations. Now we consider the\nfirst-order logic with no quantifier alternation, consisting of purely existential and\npurely universal formulas and their monotone Boolean combinations (of course, all\nnegations are supposed to stay in front of relation symbols). It is easy to see that any\nsentence with no quantifier alternation is equivalent to a sentence in the BernaysSch\u00f6nfinkel class. The latter consists of prenex formulas in which the existential\nquantifiers all precede the universal quantifiers, as in\ndef\n\n\u03a6 = \u2203x1 . . . \u2203xk \u2200y1 . . . \u2200yl \u03a8(x\u0304, \u0233),\n\n(28)\n\nwhere \u03a8 is quantifier-free. This fragment of first-order logic is provably weak.\nTo substantiate this claim, consider the finite satisfiability problem: Given a firstorder sentence \u03a6 about graphs, one has to decide whether or not there is a finite\ngraph satisfying \u03a6. More generally, let Spectrum(\u03a6) consist of all those n such that\nthere is a graph on n vertices satisfying \u03a6. Thus, the problem is to decide whether\nSpectrum(\u03a6) is nonempty.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n47\n\nLavrov [52] proved that this problem is unsolvable even for sentences without\nequality (for directed graphs this is a classical result on Hilbert's Entscheidungsproblem, known as the Trakhtenbrot-Vaught theorem, see [14]). However, if we consider\nonly sentences in the Bernays-Sch\u00f6nfinkel class, the finite satisfiability problem becomes decidable. This directly follows from the following simple observation showing\nthat a nonempty spectrum always contains a certain small number.\nLemma 7.6. Suppose that a first-order sentence \u03a6 is of the form (28). If \u03a6 is\nsatisfiable, then Spectrum(\u03a6) contains k or a smaller number.\nProof. Assume that \u03a6 is true on a graph G with more than k vertices and let\nU \u2282 V (G) be the set of vertices x1 , . . . , xk whose existence is claimed by \u03a6. Note\nthat the induced subgraph G[U] satisfies \u03a6 as well.\n\u0003\nThe solvability of the finite satisfiability problem for the Bernays-Sch\u00f6nfinkel class\nwas observed by Ramsey in [69]. Ramsey showed that the spectrum of a BernaysSch\u00f6nfinkel formula can be completely determined. This follows from the following\nresult where his famous combinatorial theorem appeared as a technical tool. Recall\nthat a set is cofinite if it has finite complement.\nTheorem 7.7 (Ramsey [69]). Any sentence about graphs \u03a6 in the BernaysSch\u00f6nfinkel class has either finite or cofinite spectrum. More specifically, if \u03a6 is\nof the form (28), then either Spectrum(\u03a6) contains no number equal to or greater\nthan 2k 4l or it contains all numbers starting from k + l.\nProof. Assume that \u03a6 is true on a graph G with at least 2k 4l vertices and let\nU \u2282 V (G) consist of vertices x1 , . . . , xk whose existence is claimed by \u03a6. Recall\nthat Ramsey number R(l) is equal to the minimum R such that every graph with\nR or more vertices contains a homogeneous set of l vertices. As it is well known,\nR(l) < 4l . By the Pigeonhole Principle, V (G) \\ U contains a subset W of R(l)\nvertices with the same neighborhood within U. Let X be a homogeneous set of l\nvertices in G[W ]. Note that G[U \u222a X] satisfies \u03a6 and that X is a set of l twins in\nthis graph. Cloning the twins, we can obtain a graph that satisfies \u03a6 and has any\nnumber of vertices larger than k + l.\n\u0003\nAfter this small historical excursion, let us turn back to the definability with no\nquantifier alternation. First of all, note that even without quantifier alternation all\ngraphs remain definable (see (3)) and, hence, the parameter D0 (G) is well defined.\nTheorem 7.8 (Pikhurko, Spencer, and Verbitsky [61]). D0 (G) is a computable\nparameter of a graph.\nProof. Given m \u2265 0, one can algorithmically construct a finite set Um consisting of\n0-alternating sentences of quantifier depth m so that every 0-alternating sentence\nof quantifier depth m has an equivalent in Um . To decide if D0 (G) \u2264 m, for each\nsentence \u03a5 \u2208 Um satisfied by G we have to check if \u03a5 can be satisfied by another\ngraph G\u2032 . We first reduce \u03a5 to an equivalent statement \u03a8 in the Bernays-Sch\u00f6nfinkel\nclass. Suppose that \u03a8 has k existential quantifiers. It suffices to test all G\u2032 \u223c\n6= G with\nat most k + 1 vertices. Indeed, if \u03a6 is true on a graph with more than k + 1 vertices\n\n\f48\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nthen, by the argument used to prove Lemma 7.6, \u03a6 is as well true on its induced\nsubgraphs with k + 1 and k vertices (one of which is not isomorphic to G).\n\u0003\nWe cannot prove anything similar for D(G) or even D1 (G). The proof of Theorem\n7.8 is essentially based on the decidability of whether or not a 0-alternating sentence\nis defining for some graph. However, in general this problem is undecidable (see [61]).\nFor the logic with no quantifier alternation, the succinctness function has much\nmore regular behavior.\nTheorem 7.9 (Spencer, Pikhurko, and Verbitsky [62]).\nlog\u2217 n \u2212 log\u2217 log\u2217 n \u2212 2 \u2264 q0 (n) \u2264 log\u2217 n + 22.\nThe lower bound has to be contrasted to Theorem 7.4. It gives us a kind of a\nquantitative confirmation of the fact that the 0-alternation fragment of first-order\nlogic is strictly less powerful. The upper bound improves upon the alternation\nnumber in (24) attaining the optimum. The proof of this bound is based on the uniteand-conquer construction in Section 7.1.2, where more subtle analysis is needed in\norder to achieve the zero alternation number. All the details can be found in [62].\nProof of Theorem 7.9 (lower bound). Given n, denote k = q0 (n) and fix a graph G\non n vertices such that D0 (G) = k. The same relation between La (G) and Da (G)\nas in Theorem 2.2 is proved in [62]. By this result, G is definable by a 0-alternating\nsentence \u03a5 of length less than Tower(k + log\u2217 k + 2). Convert \u03a5 to an equivalent\nsentence \u03a6 in the Bernays-Sch\u00f6nfinkel class and note that D(\u03a6) \u2264 L(\u03a5). By Lemma\n7.6, \u03a6 must be true on some graph with at most D(\u03a6) vertices. Since \u03a6 is true only\non G, we have\nn \u2264 D(\u03a6) \u2264 L(\u03a5) < Tower(k + log\u2217 k + 2).\nThis implies that\nlog\u2217 n \u2264 k + log\u2217 k + 2.\n(29)\n\u2217\n\u2217\n\u2217\nSuppose on the contrary to our claim that k \u2264 log n \u2212 log log n \u2212 3. Then\nlog\u2217 k \u2264 log\u2217 log\u2217 n and (29) implies that\nlog\u2217 n \u2264 (log\u2217 n \u2212 log\u2217 log\u2217 n \u2212 3) + log\u2217 log\u2217 n + 2,\n\nwhich is a contradiction, proving the claimed bound.\n\n\u0003\n\nUsing the lower bound of Theorem 7.9 and the absence of any recursive linkage between q3 (n) and n, we are able to show a superrecursive gap between two\nparameters in the logical depth hierarchy\nD(G) \u2264 D3 (G) \u2264 D2 (G) \u2264 D1 (G) \u2264 D0 (G).\nTheorem 7.10 (Pikhurko, Spencer, and Verbitsky [61]). There is no total recursive\nfunction f such that D0 (G) \u2264 f (D3 (G)) for all graphs G.\nProof. Assume that such an f exists. Let Gn be a graph for which D3 (Gn ) = q3 (n).\nThen\nf (q3 (n)) = f (D3 (Gn )) \u2265 D0 (Gn ) \u2265 q0 (n) \u2265 log\u2217 n \u2212 log\u2217 log\u2217 n \u2212 2.\n\nThis implies that Tower(2f (q3 (n))) \u2265 n, contradictory to Theorem 7.4.\n\n\u0003\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n49\n\nWe have seen weighty evidences that the 0-alternating sentences are strictly less\nexpressive than the sentences of the same quantifier depth with quantifier alternations. It is quite surprising that, nevertheless, sometimes we can prove for D0 (G)\nupper bounds which are just a little worse than the best known bounds for D(G).\nThe following results should be compared with Theorems 5.4, 5.8, and 6.4.\nTheorem 7.11.\n1. (Bohman et al. [12]) Let D0 (n, d) denote the maximum of D0 (T ) over all\ntrees with n vertices and maximum degree at most d = d(n). If both d and\nlog n\nlog n/ log d tend to infinity, then D0 (n, d) \u2264 (1 + o(1)) dlog\n.\nd\nn+5\n2. (Pikhurko, Veith, and Verbitsky [63]) D0 (G, H) \u2264 2 for all non-isomorphic\ngraphs G and H with the same number of vertices n.\n3. (Kim et al. [50]) D0 (Gn,1/2 ) \u2264 (2 + o(1)) log n with high probability.\nWe conclude this subsection with a demonstration of somewhat surprising strength\nof the Bernays-Sch\u00f6nfinkel class. We say that a sentence \u03a6 identifies a graph G if it\ndistinguishes G from any non-isomorphic graph of the same order. Let BS (G) denote\nthe minimum quantifier depth of \u03a6 in the Bernays-Sch\u00f6nfinkel class identifying G.\nWe already discussed the identification problem in Section 5.2.1. Note, however,\na striking difference. While in Section 5.2.1 we could make the conjunction of all\nsentences \u03a6H distinguishing G from another graph H of the same order, now we\nhave to distinguish G from all such H by a single prenex sentence!\nTheorem 7.12 (Pikhurko and Verbitsky [65]).\n1. For any graph G of order n, we have BS (G) \u2264 43 n + 23 .\n2. With high probability we have BS (Gn,1/2 ) \u2264 (2 + o(1)) log n. Moreover, the\nlatter bound holds true even if the number of universal quantifiers in an\nidentifying formula is restricted to 2.\n7.4. Applications: Inevitability of the tower function. Succinctly definable\ngraphs can be used to show that the tower function is sometimes unavoidable in\nrelations between logical parameters of graphs. We first observe that the relationship\nbetween the logical depth and the logical length in Theorem 2.2 is \"nearly\" tight.\nTheorem 7.13 (Pikhurko, Spencer, and Verbitsky [61]).7 There are infinitely many\npairwise non-isomorphic graphs G with L(G) \u2265 Tower(D(G) \u2212 7).\nProof. The proof is given by a simple counting argument. A first-order sentence \u03a6\ndefining a graph G determines a natural binary encoding of G (up to isomorphism)\nof length O(L(\u03a6) log L(\u03a6)). It follows that at most m = 2O(k log k) graphs can have\nlogical length less than k. By the Pigeonhole Principle, there is n \u2264 m + 1 such that\nL(G) \u2265 k for all G on n vertices. For all these graphs we have\n\u0012\n\u0013\nlog n\nL(G) = \u03a9\n,\n(30)\nlog log n\n7In\n\n[61] we stated a better bound L(G) \u2265 Tower (D(G) \u2212 6) \u2212 O(1), which was proved for the\nvariant of L(G) where variable xi contributes log i, rather than just 1, to the formula length.\n\n\f50\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nwhich exceeds log log n if k is chosen sufficiently large. By Theorem 7.2, there is a\ngraph Gn on n vertices with\nD(Gn ) < log\u2217 n + 5.\n\n(31)\n\nCombining (31) and (30), we obtain the desired separation of L(Gn ) from D(Gn ).\nIncreasing the parameter k, we can have infinitely many such examples.\n\u0003\nOne of the consequences of Theorem 7.4 is that prenex formulas are sometimes unexpectedly efficient in defining a graph. We are now able to show that, nevertheless,\nthey generally cannot be competitive against defining formulas with no restriction\non structure. More specifically, we have simple relations\nD(G) \u2264 D prenex (G) < L(G) \u2264 Lprenex (G).\n\n(32)\n\nCombining the second inequality with Theorem 2.2, we obtain\nD prenex (G) < Tower(D(G) + log\u2217 D(G) + 2)\nand we can now see that this relationship between D prenex (G) and D(G) is not so\nfar from being optimal.\nCorollary 7.14. There are infinitely many pairwise non-isomorphic graphs G with\nD prenex (G) \u2265 Tower(D(G) \u2212 8).\nThe proof of Theorem 7.13 gives us actually a better bound, though somewhat\ncumbersome, namely L(G) \u2265 T /(c log T ) with T = Tower(D(G) \u2212 6) and c a\nconstant. Corollary 7.14 follows from here simply by noticing that parameters\nD prenex (G) and L(G) are exponentially close. The latter fact follows from (32)\nand a version of (25), namely\n2\n\nL(G) = O(h(D prenex (G))) where h(x) = x2 2x .\nIn conclusion we note that the tower function is essential also in the upper bound\nfor the number of graphs definable with quantifier depth k given by Theorem 2.3.\nCorollary 7.15. There are at least (1 \u2212 o(1))Tower(k \u2212 2) first-order sentences of\nquantifier depth k defining pairwise non-isomorphic graphs and, hence, being pairwise inequivalent.\nProof. In Section 7.1.3 we noticed that there are exactly rh = Tower(h) asymmetric\nrooted trees of height at most h. Basically this follows from the fact that such a\ntree is completely characterized by the set of its branches from the root, each being\nan asymmetric rooted tree of height at most h \u2212 1 (the root is not a part of any\nbranch). Thus, rh \u2212 rh\u22121 asymmetric rooted trees have height exactly h. Note that\n(rh\u22121 \u2212 rh\u22122 )rh\u22121 of them have exactly one branch of height h \u2212 1. Therefore, there\nare at least rh \u2212 rh\u22121 \u2212 (rh\u22121 \u2212 rh\u22122 )rh\u22121 = (1 \u2212 o(1))Tower(h) asymmetric rooted\ntrees whose underlying trees (with roots dismissed) have diameter 2h and, hence,\nare asymmetric too. By Lemma 7.1, each of these trees is definable with quantifier\ndepth h + 2.\n\u0003\nA lower bound of Tower(k \u2212 2) for the number of pairwise inequivalent sentences\nof quantifier depth k is shown by Spencer [72, Theorem 2.2.2].\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n51\n\n8. Open problems\nMany questions remain open, some of which are included in the main text of the\nsurvey alongside the known related results. For reader's convenience we collect a\nfew open problems here that we consider most interesting.\nTomasz Luczak (Conference on Random Structures and Algorithms, Pozna\u0144,\n2003) asked if D(G), or W (G), is a computable function of the input graph G.\nWhile the factor of 1/2 in Theorem 5.8 is best possible, we do not know if it can\nbe improved for logic with counting. Surprisingly, we could not resolve even the\nfollowing question. Is there \u01eb > 0 such that for every graph G of sufficiently large\norder n we have W# (G) \u2264 ( 21 \u2212 \u01eb)n?\nRecall that no sublinear bound is generally possible here because Cai, F\u00fcrer,\nand Immerman [15] constructed graphs with linear width in the counting logic; see\nTheorem 5.7. Automorphisms of these graphs play an essential role in establishing\nthis lower bound. It would be very interesting to estimate W# (G) from above for\nasymmetric G. Again, we have only the bound D# (G) \u2264 (n + 3)/2 as a straightforward corollary of Theorem 5.8, where no restriction on the automorphism group is\nsupposed.\nAnother research direction, with applications to the graph isomorphism problem,\nis identification of natural classes of graphs with W# (G) bounded by a constant;\nsee Sections 5.1.4 and 5.1.5. Such a bound is known for interval graphs [28, 51],\nand it is interesting if it can be extended to the class of circular-arc graphs. The\napproach suggested in [51] is based on the fact that any maximal clique in an interval\ngraph is definable as the common neighborhood of some two vertices. This prevents\nany straightforward extension to circular-arc graphs, where the number of maximal\ncliques can be exponential. The (un)boundedness of W# (G) is an interesting open\nquestion also for disk graphs, yet another extension of the class of interval graphs\n(Martin Grohe, 2010).\nA result of Dawar, Lindell, and Weinstein [20] (see also Theorem 4.7) implies an\nupper bound for D# (G) in terms of W# (G) and the order n of G, where W# (G)\ndisappointedly occurs at the exponent. Can this bound be improved? At the moment we cannot even exclude that D# (G) = O(W# (G) log n). If the latter bound\nk\nwas true for D#\n(G) with k = O(W# (G)), this would have important consequences\nfor isomorphism testing by Theorem 4.5.\nWhere do we need the power of counting quantifiers? To keep far away from the\ntrivial example of a complete or empty graph, suppose that a graph G is asymmetric.\nIs it true or not that W (G) = O(W# (G) log n)? A random graph shows that this\nbound would be best possible.\nWe are still far from having a complete evolutionary picture of the logical complexity for a random graph. Let \u03b4 \u2208 (0, 1) be fixed and p be an arbitrary function\nof n with n\u2212\u03b4 \u2264 p \u2264 21 . Is it true that whp D(Gn,p) = O(log n)?\nThe local behavior of the succinctness function q(n), that was defined in Section 7.2, is unclear. While it is trivial that q(n + 1) \u2264 q(n) + 1, we do not know, for\nexample, if q(n + 1) \u2265 q(n) \u2212 C for some constant C and all n.\n\n\f52\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\nIn accordance with our notation system, let q k (n) denote the succinctness function\nfor the k-variable logic. By slightly modifying the proof of Lemma 7.1, one can show\nthat q 3 (n) \u2264 (1 + o(1)) log\u2217 n for all n. Since the satisfiability problem for the 3variable logic is undecidable (see, e.g., [34]), it is not excluded that an analog of\nTheorem 7.4 can be established for q 3 (n).\nGiven a fixed k, how far apart from one another can the values of D(G) and\nk\nD (G) < \u221e be?\nTheorem 7.10 says that there is no recursive link between D3 (G) and D0 (G). Can\none show a superrecursive gap between Da (G) and Db (G) for some b > a > 0 or, at\nleast, between D(G) and D1 (G)?\nThough the case of trees was thoroughly investigated throughout the survey, this\nclass of graphs deserves further attention. One may expect that many logical questions for trees are easier. Note in this respect that the first-order theory of finite\ntrees is decidable due to Rabin [67]. Nevertheless, we do not know, for example,\nwhether or not the logical depth D(T ) of a tree T is a computable parameter (while\nit is not hard to show that the logical width W (T ) is computable in logarithmic\nspace).\nDisappointingly, we were able to collect only a few results on the logical length for\nn2\nthis survey. From the fact that there are 2(1/2+o(1))\ngraphs of order\n\u0010 2 non-isomorphic\n\u0011\nn\nn, it is easy to derive that whp L(Gn,1/2 ) = \u03a9 log n . The obvious general upper\nbound is O(n2 ). This leaves open the question what the logical length of a typical\ngraph is. Also, it would be very interesting to find explicit examples of graphs with\nlarge L(G). Pseudo-random graphs can be natural candidates. For example, it is\nwell known (Blass, Exoo, and Harary [10]) that Paley graphs share the first-order\nproperties of a truly random graph.\nFurthermore, we can define the succinctness function with respect to the logical\nlength by s(n) = min { L(G) : v(G) = n}. Let sa (n) be the version of s(n) for the aalternation logic. From Theorem 7.4 and the relation (25), it follows that s(n), and\neven s3 (n), can be incomprehensibly smaller than n: for any total recursive function\nf we must have f (s3 (n)) < n infinitely often. On the other\nhand,\n\u0010\n\u0011 the estimate (30)\nlog n\nin the proof of Theorem 7.13 implies that s(n) = \u03a9 log log n for infinitely many\n\u0011\n\u0010\nn. Moreover, the same argument shows that s\u2217 (n) = \u03a9 logloglogn n for all n, where\ns\u2217 (n)\u0010denotes\u0011 the smoothed version of s(n) similarly to (27). How tight is the bound\nof \u03a9 logloglogn n in these statements? Another interesting problem is the behavior of\nthe function s0 (n) (recall that for q0 (n) we know the exact asymptotics owing to\nTheorem 7.9). Note in conclusion that techniques for estimating the length of a\nfirst-order formula are worked out, e.g., by Adler and Immerman [1], Dawar et al.\n[21], Grohe and Schweikardt [41].\n\nAcknowledgment. We are grateful to Joel Spencer for the fruitful collaboration\non the subject of this survey and for allowing us to use his unpublished ideas in\nthe proof of Lemma 6.8 and in Section 7.1.1. We also thank Martin Grohe for his\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n53\n\ndetailed comments, in particular, for bringing up a succinctness result of Dawar et\nal. [21] (Theorem 7.3 here) to our attention.\n\nReferences\n[1] M. Adler, N. Immerman. An n! lower bound on formula size. ACM Transactions on Computational Logic 4:296\u2013314 (2003).\n[2] M. Aigner, G. Ziegler. Proofs from THE BOOK. Springer, 4th ed. (2010).\n[3] N. Alon, P. Seymour, R. Thomas. A separator theorem for nonplanar graphs. J. Am. Math.\nSoc. 3:801\u2013808 (1990).\n[4] N. Alon, J. Spencer. The probabilistic method. Wiley, 3rd ed. (2008).\n[5] L. Babai. Automorphism groups, isomorphism, reconstruction. Chapter 27 of the Handbook\nof Combinatorics, pages 1447\u20131540. Elsevier Publ. (1995).\n[6] L. Babai. On the complexity of canonical labeling of strongly regular graphs. SIAM J. Comput.\n9:212\u2013216 (1980).\n[7] L. Babai, P. Erd\u0151s, S. M. Selkow. Random graph isomorphism. SIAM J. Comput. 9:628\u2013635\n(1980).\n[8] L. Babai, L. Ku\u010dera. Canonical labeling of graphs in linear average time. In: Proc. of the 20th\nIEEE Symp. Found. Computer Sci. 39\u201346 (1979).\n[9] L. Babai and E. M. Luks. Canonical labeling of graphs. In: Proc. of the 15th ACM Symp. on\nTheory of Computing 171\u2013183 (1983).\n[10] A. Blass, G. Exoo, F. Harary. Paley graphs satisfy all first-order adjacency axioms. J. Graph\nTheory 5:435\u2013439 (1981).\n[11] H. L. Bodlaender. Polynomial algorithms for Graph Isomorphism and Chromatic Index on\npartial k-trees. J. Algorithms 11:631\u2013643 (1990).\n[12] T. Bohman, A. Frieze, T. Luczak, O. Pikhurko, C. Smyth, J. Spencer, O. Verbitsky. first-order\ndefinability of trees and sparse random graphs. Combinatorics, Probability and Computing\n16:375-400 (2007).\n[13] B. Bollob\u00e1s. Random graphs. Cambridge Univ. Press, 2nd ed. (2001).\n[14] E. B\u00f6rger, E. Gr\u00e4del, Y. Gurevich. The classical decision problem. Springer (1997).\n[15] J.-Y. Cai, M. F\u00fcrer, N. Immerman. An optimal lower bound on the number of variables for\ngraph identification. Combinatorica 12:389\u2013410 (1992).\n[16] C. J. Colbourn, K. S. Booth. Linear time automorphism algorithms for trees, interval graphs,\nand planar graphs. SIAM J. Comp. 10:203\u2013225 (1981).\n[17] T. Czajka, G. Pandurangan. Improved random graph isomorphism. J. Discr. Algorithms 6:85\u2013\n92 (2008).\n[18] B. Das, J. Tor\u00e1n, F. Wagner. Restricted space algorithms for isomorphism on bounded\ntreewidth graphs. Proc. of the 27th Symp. on Theoretical Aspects of Computer Science, the\nLeibniz International Proceedings in Informatics series, 227\u2013238 (2010).\n[19] S. Datta, N. Limaye, P. Nimbhorkar, T. Thierauf, F. Wagner. Planar graph isomorphism is\nin Log-Space. In: Proc. of the 24th Conf. on Computational Complexity, 203\u2013214 (2009).\n[20] A. Dawar, S. Lindell, S. Weinstein, Infinitary logic and inductive definability over finite structures. Information and Computation 119:160\u2013175 (1995).\n[21] A. Dawar, M. Grohe, S. Kreutzer, N. Schweikardt. Model theory makes formulas large. In:\nProc. of the 34th Int. Colloquium on Automata, Languages and Programming. Lecture Notes\nin Computer Science, Vol. 4596, 913\u2013924 (2007).\n[22] R. Diestel. Graph theory. Springer, 2nd ed. (2000).\n[23] R. G. Downey, M. R. Fellows. Parameterized complexity. Springer (1998).\n[24] H.-D. Ebbinghaus, J. Flum. Finite model theory. Springer, 2nd ed. (1999).\n[25] A. Ehrenfeucht. An application of games to the completeness problem for formalized theories.\nFundam. Math. 49:129\u2013141 (1961).\n\n\f54\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\n[26] Y. Ershov, I. Lavrov, A. Taimanov, M. Taitslin. Elementary theories (In Russian). Uspekhi Matematicheskikh Nauk 20:37\u2013108 (1965). English translation in Russian Math. Surveys\n20:35\u2013105 (1965).\n[27] K. Etessami, N. Immerman. Tree canonization and transitive closure. Information and Computation 157:2\u201324 (2000).\n[28] S. Evdokimov, I.N. Ponomarenko, G. Tinhofer. Forestal algebras and algebraic forests (on a\nnew class of weakly compact graphs). Discrete Mathematics 225:149\u2013172 (2000).\n[29] R. Fagin. Probabilities on finite models. J. Symb. Logic 41:50\u201358 (1976).\n[30] R. Fra\u0131\u0308ss\u00e9. Sur quelques classifications des systems de relations. Publ. Sci. Univ. Alger 1:35\u2013\n182 (1954).\n[31] M. F\u00fcrer. Weisfeiler-Lehman refinement requires at least a linear number of iterations. In:\nProc. of the 28th Int. Colloquium on Automata, Languages, and Programming. Lecture Notes\nin Computer Science, Vol. 2076, 322\u2013333 (2001).\n[32] Y. Glebskii, D. Kogan, M. Liogonkii and V. Talanov. Range and fraction of satisfiability of\nformulas in the restricted predicate calculus. Kibernetika, Kyiv, 2:17\u201328 (1969).\n[33] E. Gr\u00e4del. Finite model theory and descriptive complexity. In: Finite Model Theory and Its\nApplications, pages 125\u2013230. Springer (2007).\n[34] M. Grohe. Finite variable logics in descriptive complexity theory. The Bulletin of Symbolic\nLogic 4:345\u2013398 (1998).\n[35] M. Grohe. Fixed-point logics on planar graphs. In: Proc. of the 13th IEEE Symp. on Logic in\nComputer Science, 6\u201315 (1998).\n[36] M. Grohe. Isomorphism testing for embeddable graphs through definability. In: Proc. of the\n32nd ACM Symp. on Theory of Computing, 63\u201372 (2000).\n[37] M. Grohe. Definable tree decompositions. In: Proc. of the 23rd IEEE Symp. on Logic in\nComputer Science, 406\u2013417 (2008).\n[38] M. Grohe. Fixed-point definability and Polynomial Time on graphs with excluded minors. In:\nProc. of the 25th Symp. on Logic in Computer Science, 179\u2013188 (2010).\n[39] M. Grohe. Fixed-point definability and polynomial time on chordal graphs and line graphs.\nIn: Fields of Logic and Computation, Lecture Notes in Computer Science, Vol. 6300, 328\u2013353\n(2010).\n[40] M. Grohe, J. Mari\u00f1o. Definability and descriptive complexity on databases of bounded treewidth. In: Proc. of the 7th Int. Conf. on Database Theory, Lecture Notes in Computer Science,\nVol. 1540, 70\u201382 (1999).\n[41] M. Grohe, N. Schweikardt. The succinctness of first-order logic on linear orders, Logical Methods in Computer Science 1(1:6):1\u201325 (2005).\n[42] M. Grohe, O. Verbitsky. Testing graph isomorphism in parallel by playing a game. In: Proc.\nof the 33rd Int. Colloquium on Automata, Languages, and Programming. Lecture Notes in\nComputer Science, Vol. 4051, 3\u201314 (2006).\n[43] F. Harary. Graph theory. Addison-Wesley, Reading MA (1969).\n[44] N. Immerman. Upper and lower bounds for first-order expressibility. J. Comput. Syst. Sci.\n25:76\u201398 (1982).\n[45] N. Immerman. Descriptive complexity. Springer (1999).\n[46] N. Immerman, D. Kozen. Definability with bounded number of bound variables. Information\nand Computation 83:121\u2013139 (1989).\n[47] N. Immerman, E. Lander. Describing graphs: a first-order approach to graph canonization.\nIn: Complexity theory retrospective, pages 59\u201381. Springer (1990).\n[48] B. Jenner, J. K\u00f6bler, P. McKenzie, J. Tor\u00e1n. Completeness Results for Graph Isomorphism.\nJ. Comp. Syst. Sci. 66:549\u2013566 (2003).\n[49] R. M. Karp, V. Ramachandran. Parallel algorithms for shared-memory machines. In: Algorithms and complexity. Handbook of theoretical computer science. Vol. A, pages 869\u2013941.\nElsevier (1990).\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n55\n\n[50] J.-H. Kim, O. Pikhurko, J. Spencer, O. Verbitsky. How complex are random graphs in firstorder logic? Random Structures and Algorithms 26:119\u2013145 (2005).\n[51] B. Laubner. Capturing polynomial time on interval graphs. In: Proc. of the 25th Symp. on\nLogic in Computer Science, 199\u2013208 (2010).\n[52] I. Lavrov. Effective inseparability of the sets of identically true and finitely refutable formulae\nfor certain elementary theories (In Russian). Algebra i Logika 2:5\u201318 (1963).\n[53] S. Lindell. A logspace algorithm for tree canonization. In: Proc. of the 24th ACM Symp. on\nTheory of Computing 400\u2013404 (1992).\n[54] R. J. Lipton, R. E. Tarjan. A separator theorem for planar graphs. SIAM J. Appl. Math.\n36:177-189 (1979).\n[55] G. L. Miller, J. H. Reif. Parallel tree contraction. Part 2: further applications. SIAM J. Comp.\n20:1128\u20131147 (1991).\n[56] B. Mohar, C. Thomassen. Graphs on surfaces. The John Hopkins University Press (2001).\n[57] J. W. Moon. On the maximum degree in a random tree. Michigan Math. J., 15:429\u2013432, 1968.\n[58] M. Naor, A. Nussboim, E. Tromer. Efficiently constructible huge graphs that preserve first\norder properties of random graphs. In: Theory of Cryptography. Lecture Notes in Computer\nScience, Vol. 3378, 66\u201385 (2005).\n[59] O. Ore. Theory of graphs. American Mathematical Society (1962).\n[60] E. Pezzoli. Computational complexity of Ehrenfeucht-Fra\u0131\u0308ss\u00e9 games on finite structures. In:\nProc. of the 12th Conf. on Computer Science Logic 1998. Lecture Notes in Computer Science,\nVol. 1584, 159\u2013170 (1999).\n[61] O. Pikhurko, J. Spencer, O. Verbitsky. Succinct definitions in first-order graph theory. Annals\nof Pure and Applied Logic 139:74\u2013109 (2006).\n[62] O. Pikhurko, J. Spencer, O. Verbitsky. Decomposable graphs and definitions with no quantifier\nalternation. European J. Comb. 28:2264-2283 (2007).\n[63] O. Pikhurko, H. Veith, O. Verbitsky. The first-order definability of graphs: upper bounds for\nquantifier depth. Discrete Applied Mathematics 154:2511\u20132529 (2006).\n[64] O. Pikhurko, H. Veith, O. Verbitsky. The first-order definability of graphs: upper bounds for\nquantifier rank. E-print: http://arxiv.org/abs/math.CO/0311041 (2003).\n[65] O. Pikhurko, O. Verbitsky. Descriptive complexity of finite structures: saving the quantifier\nrank. J. Symb. Logic 70:419\u2013450 (2005).\n[66] B. Poizat. Deux ou trois choses que je sais de Ln . J. Symb. Logic 47:641\u2013658 (1982).\n[67] M. O. Rabin. Decidability of second order theories and automata on infinite trees. Trans. of\nthe AMS 141:1\u201335 (1965).\n[68] V. Ramachandran, J. Reif. Planarity testing in parallel. J. Comput. Syst. Sci. 49:517\u2013561\n(1994).\n[69] F. Ramsey. On a problem of formal logic. Proc. of the London Math. Soc. 2-nd series, 30:264\u2013\n286 (1930).\n[70] N. Robertson, P.D. Seymour. Graph minors II. Algorithmic aspects of tree-width. J. Algorithms 7:309\u2013322 (1986).\n[71] W. L. Ruzzo. On uniform circuit complexity. J. Comput. Syst. Sci. 21:365\u2013383 (1981).\n[72] J. Spencer. The strange logic of random graphs. Springer (2001).\n[73] J. Spencer, K. St. John. The complexity of random ordered structures. Annals of Pure and\nApplied Logic 152:174\u2013179 (2008)\n[74] D.A. Spielman. Faster isomorphism testing of strongly regular graphs. In: Proc. of the 28th\nACM Symp. on Theory of Computing 576\u2013584 (1996).\n[75] O. Verbitsky. The first-order definability of graphs with separators via the Ehrenfeucht game.\nTheoretical Computer Science 343:158\u2013176 (2005).\n[76] O. Verbitsky. Planar graphs: logical complexity and parallel isomorphism tests. In: Proc.\nof the 24th Symp. on Theoretical Aspects of Computer Science, Lecture Notes in Computer\nScience, Vol. 4393, 682\u2013693 (2007).\n\n\f56\n\nOLEG PIKHURKO and OLEG VERBITSKY\n\n[77] B. Yu. Weisfeiler, A. A. Lehman. A reduction of a graph to a canonical form and an algebra\narising during this reduction. Nauchno-Technicheskaya Informatsia, Seriya 2, 9:12\u201316 (1968).\nIn Russian.\n\n\fLOGICAL COMPLEXITY OF GRAPHS: A SURVEY\n\n57\n\nAppendix A. Upper bound for the quantifier depth in the k-variable logic\nTheorem 4.7 can be somewhat improved.\nTheorem A.1. Let k > 2 and suppose that graphs G and H are distinguishable in the\nk-variable logic. Denote the number of vertices in G by n and assume that n \u2265 2. Then\nD k (G, H) \u2264 nk\u22121 . Moreover, if G is definable in the k-variable logic, then D k (G) \u2264 nk\u22121 .\nProof. As noted in the proof of Theorem 4.7,\nd\n\nD k (G, H) \u2264 Stab k\u22121 (G) + k,\n\n(33)\n\nStab d (G) \u2264 nd \u2212 |C 0 |,\n\n(34)\n\nD k (G, H) \u2264 nk\u22121 \u2212 2Bk\u22121 + k + 1, if n \u2265 k \u2212 1.\n\n(35)\n\nwhere Stab (G) denotes the number of the first iteration that does not refine the WeisfeilerLehman coloring of V (G)d . Since d \u2265 2, this coloring is from the very beginning not\nmonochromatic. More specifically, in the beginning V (G)d is partitioned into types of\nd-tuples with respect to equality and adjacency relations. It follows that\nwhere |C 0 | denotes the size of the initial coloring of V (G)d . If n \u2265 d, the number of\nequality types is equal to the Bell number Bd . Counting the equality types alone suffices\nif k \u2265 4; but in order to cover also k = 3, we need a bit stronger bound. Note that, unless\nG is complete or empty, all but one equality types are split further by taking adjacency\ninto account. Therefore, in this case we have |C 0 | \u2265 2Bd \u2212 1. Combining (33) and (34),\nwe conclude that\nAbove we made the assumption that G is neither complete nor empty. Note that (35) is\nactually true for all G. For example, if G is complete and H is not, then D k (G, H) \u2264 2.\nIf G and H are both complete or both empty and if they are distinguishable with k\nvariables, then D k (G, H) \u2264 k. This bound is within (35), as follows from the rough\nestimate Bd \u2264 dd /2.\nIf n \u2265 k \u2212 1, the theorem immediately follows from (35). If n < k \u2212 1, we just use\nthe simple fact that any graph with n vertices is definable by the generic sentence (3) of\nquantifier depth n + 1. Therefore, D k (G, H) \u2264 n + 1 \u2264 nk\u22121 also in this case (as n \u2265 2\nand k \u2265 3).\n\u0003\n\n\f"}