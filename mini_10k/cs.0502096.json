{"id": "http://arxiv.org/abs/cs/0502096v1", "guidislink": true, "updated": "2005-02-28T16:40:34Z", "updated_parsed": [2005, 2, 28, 16, 40, 34, 0, 59, 0], "published": "2005-02-28T16:40:34Z", "published_parsed": [2005, 2, 28, 16, 40, 34, 0, 59, 0], "title": "Property analysis of symmetric travelling salesman problem instances\n  acquired through evolution", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0307058%2Ccs%2F0307059%2Ccs%2F0307044%2Ccs%2F0307060%2Ccs%2F0307042%2Ccs%2F0307070%2Ccs%2F0307009%2Ccs%2F0307019%2Ccs%2F0307028%2Ccs%2F0307050%2Ccs%2F0307023%2Ccs%2F0307049%2Ccs%2F0307017%2Ccs%2F0307029%2Ccs%2F0307067%2Ccs%2F0307045%2Ccs%2F0307020%2Ccs%2F0307038%2Ccs%2F0307071%2Ccs%2F0307052%2Ccs%2F0307043%2Ccs%2F0307055%2Ccs%2F0307063%2Ccs%2F0307011%2Ccs%2F0307026%2Ccs%2F0307030%2Ccs%2F0307068%2Ccs%2F0307032%2Ccs%2F0307024%2Ccs%2F0307061%2Ccs%2F0307014%2Ccs%2F0307036%2Ccs%2F0307040%2Ccs%2F0307046%2Ccs%2F0307013%2Ccs%2F0307051%2Ccs%2F0307039%2Ccs%2F0307005%2Ccs%2F0307047%2Ccs%2F0307015%2Ccs%2F0307025%2Ccs%2F0307016%2Ccs%2F0307022%2Ccs%2F0307056%2Ccs%2F0307033%2Ccs%2F0307057%2Ccs%2F0307002%2Ccs%2F0307007%2Ccs%2F0307053%2Ccs%2F0307069%2Ccs%2F0307012%2Ccs%2F0307037%2Ccs%2F0307065%2Ccs%2F0502019%2Ccs%2F0502034%2Ccs%2F0502087%2Ccs%2F0502062%2Ccs%2F0502094%2Ccs%2F0502012%2Ccs%2F0502003%2Ccs%2F0502022%2Ccs%2F0502068%2Ccs%2F0502046%2Ccs%2F0502025%2Ccs%2F0502042%2Ccs%2F0502054%2Ccs%2F0502001%2Ccs%2F0502072%2Ccs%2F0502013%2Ccs%2F0502051%2Ccs%2F0502041%2Ccs%2F0502011%2Ccs%2F0502006%2Ccs%2F0502049%2Ccs%2F0502091%2Ccs%2F0502080%2Ccs%2F0502092%2Ccs%2F0502002%2Ccs%2F0502063%2Ccs%2F0502059%2Ccs%2F0502027%2Ccs%2F0502081%2Ccs%2F0502018%2Ccs%2F0502032%2Ccs%2F0502095%2Ccs%2F0502052%2Ccs%2F0502014%2Ccs%2F0502028%2Ccs%2F0502017%2Ccs%2F0502016%2Ccs%2F0502023%2Ccs%2F0502009%2Ccs%2F0502083%2Ccs%2F0502085%2Ccs%2F0502021%2Ccs%2F0502076%2Ccs%2F0502005%2Ccs%2F0502020%2Ccs%2F0502096%2Ccs%2F0502026%2Ccs%2F0502073&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Property analysis of symmetric travelling salesman problem instances\n  acquired through evolution"}, "summary": "We show how an evolutionary algorithm can successfully be used to evolve a\nset of difficult to solve symmetric travelling salesman problem instances for\ntwo variants of the Lin-Kernighan algorithm. Then we analyse the instances in\nthose sets to guide us towards deferring general knowledge about the efficiency\nof the two variants in relation to structural properties of the symmetric\ntravelling sale sman problem.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0307058%2Ccs%2F0307059%2Ccs%2F0307044%2Ccs%2F0307060%2Ccs%2F0307042%2Ccs%2F0307070%2Ccs%2F0307009%2Ccs%2F0307019%2Ccs%2F0307028%2Ccs%2F0307050%2Ccs%2F0307023%2Ccs%2F0307049%2Ccs%2F0307017%2Ccs%2F0307029%2Ccs%2F0307067%2Ccs%2F0307045%2Ccs%2F0307020%2Ccs%2F0307038%2Ccs%2F0307071%2Ccs%2F0307052%2Ccs%2F0307043%2Ccs%2F0307055%2Ccs%2F0307063%2Ccs%2F0307011%2Ccs%2F0307026%2Ccs%2F0307030%2Ccs%2F0307068%2Ccs%2F0307032%2Ccs%2F0307024%2Ccs%2F0307061%2Ccs%2F0307014%2Ccs%2F0307036%2Ccs%2F0307040%2Ccs%2F0307046%2Ccs%2F0307013%2Ccs%2F0307051%2Ccs%2F0307039%2Ccs%2F0307005%2Ccs%2F0307047%2Ccs%2F0307015%2Ccs%2F0307025%2Ccs%2F0307016%2Ccs%2F0307022%2Ccs%2F0307056%2Ccs%2F0307033%2Ccs%2F0307057%2Ccs%2F0307002%2Ccs%2F0307007%2Ccs%2F0307053%2Ccs%2F0307069%2Ccs%2F0307012%2Ccs%2F0307037%2Ccs%2F0307065%2Ccs%2F0502019%2Ccs%2F0502034%2Ccs%2F0502087%2Ccs%2F0502062%2Ccs%2F0502094%2Ccs%2F0502012%2Ccs%2F0502003%2Ccs%2F0502022%2Ccs%2F0502068%2Ccs%2F0502046%2Ccs%2F0502025%2Ccs%2F0502042%2Ccs%2F0502054%2Ccs%2F0502001%2Ccs%2F0502072%2Ccs%2F0502013%2Ccs%2F0502051%2Ccs%2F0502041%2Ccs%2F0502011%2Ccs%2F0502006%2Ccs%2F0502049%2Ccs%2F0502091%2Ccs%2F0502080%2Ccs%2F0502092%2Ccs%2F0502002%2Ccs%2F0502063%2Ccs%2F0502059%2Ccs%2F0502027%2Ccs%2F0502081%2Ccs%2F0502018%2Ccs%2F0502032%2Ccs%2F0502095%2Ccs%2F0502052%2Ccs%2F0502014%2Ccs%2F0502028%2Ccs%2F0502017%2Ccs%2F0502016%2Ccs%2F0502023%2Ccs%2F0502009%2Ccs%2F0502083%2Ccs%2F0502085%2Ccs%2F0502021%2Ccs%2F0502076%2Ccs%2F0502005%2Ccs%2F0502020%2Ccs%2F0502096%2Ccs%2F0502026%2Ccs%2F0502073&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We show how an evolutionary algorithm can successfully be used to evolve a\nset of difficult to solve symmetric travelling salesman problem instances for\ntwo variants of the Lin-Kernighan algorithm. Then we analyse the instances in\nthose sets to guide us towards deferring general knowledge about the efficiency\nof the two variants in relation to structural properties of the symmetric\ntravelling sale sman problem."}, "authors": ["J. I. van Hemert"], "author_detail": {"name": "J. I. van Hemert"}, "author": "J. I. van Hemert", "arxiv_comment": "To be published in G. Raidl and J. Gottlieb, editors, Evolutionary\n  Computation in Combinatorial Optimization, Springer Lecture Notes on Computer\n  Science, pages 122-131. Springer-Verlag, Berlin, 2005", "links": [{"href": "http://arxiv.org/abs/cs/0502096v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cs/0502096v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.NE", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.NE", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.AI", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "G1.6;I.2.8", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cs/0502096v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/cs/0502096v1", "journal_reference": null, "doi": null, "fulltext": "Property analysis of symmetric travelling salesman\nproblem instances acquired through evolution\nJ.I. van Hemert\n\narXiv:cs/0502096v1 [cs.NE] 28 Feb 2005\n\nCentre for Emergent Computing, Napier University, Edinburgh, UK\nj.van.hemert@napier.ac.uk\n\nAbstract. We show how an evolutionary algorithm can successfully be\nused to evolve a set of difficult to solve symmetric travelling salesman\nproblem instances for two variants of the Lin-Kernighan algorithm. Then\nwe analyse the instances in those sets to guide us towards deferring general\nknowledge about the efficiency of the two variants in relation to structural\nproperties of the symmetric travelling salesman problem.\n\n1\n\nIntroduction\n\nThe travelling salesman problem (tsp) is well known to be np-complete. It is mostly\nstudied in the form of an optimisation problem where the goal is to find the shortest\nHamiltonian cycle in a given weighted graph [1]. Here we will restrict ourselves to\nthe symmetric travelling salesman problem, i.e., distance(x, y) = distance(y, x),\nwith Euclidean distances in a two-dimensional space.\nOver time, much study has been devoted to the development of better tsp\nsolvers. Where \"better\" refers to algorithms being more efficient, more accurate,\nor both. It seems, while this development was in progress, most of the effort went\ninto the construction of the algorithm, as opposed to studying the properties of\ntravelling salesman problems. The work of [2] forms an important counterexample,\nas it focuses on determining phase transition properties of, among others, tsp\nin random graphs, by observing both the graph connectivity and the standard\ndeviation of the cost matrix. Their conjecture, which has become popular, is that\nall np-complete problems have at least one order parameter and that hard to solve\nproblem instances are clustered around a critical value of this order parameter.\nIt remains an open question whether the critical region of order parameters\nare mainly depending on the properties of the problem, or whether it is linked to\nthe algorithm with which one attempts to solve the problem. However, a substantial number of empirical studies have shown that for many constraint satisfaction\nand constraint optimisation problems, a general region exists where problems are\ndeemed more difficult to solve for a large selection of algorithms [3,4,5].\nOften the characterisation of the order parameter includes structural properties\n[6,7], which leads to both a more accurate prediction and a better understanding\nof where hard to solve problems can be expected. Naturally, this does not exclude\nthat a relationship between an algorithm and certain structural properties can\nexist. In this study, we shall provide empirical evidence for the existence of such\n\n\fa distinct relationship for two tsp problem solvers, which is of great influence on\nthe efficiency of both algorithms.\nIn the following section we describe the process of evolving tsp instances. Then,\nin Section 3 we provide a brief overview of the Lin-Kernighan algorithm, and the\nvariants used in this study. Section 4 contains the empirical investigation on the\ndifficulty and properties of evolved problem instances. Last, in Section 5 we provide\nconclusions.\n\n2\n\nEvolving TSP instances\n\nThe general approach is similar to that in [8], where an evolutionary algorithm was\nused to evolve difficult to solve binary constraint satisfaction problem instances for\na backtracking algorithm. Here, we use a similar evolutionary algorithm to evolve\ndifficult travelling salesman problem instances for two well known tsp solvers.\nfitness = runtime of\nTSP-solver\n\nusing crossover & mutation\ncreate new TSP instances\n\nrun TSP-solver\non each instance\n\nreplace the population\nemploying elitism\nmaximum number of generations reached?\n\ncreate TSP instances\nuniform randomly\n\nstop\nstart\n\nFig. 1. The process of evolving tsp instances that are difficult to solve\nA tsp instance is represented by a list of 100 (x, y) coordinates on a 400 \u00d7\n400 grid. The list directly forms the chromosome representation with which the\nevolutionary algorithm works. For each of the 30 initial tsp instances, we create\na list of 100 nodes, by uniform randomly selecting (x, y) coordinates on the grid.\nThis forms the first step in the process, depicted in Figure 1. Then the process\nenters the evolutionary loop: Each tsp instance is awarded a fitness equal to the\nsearch effort (defined in Section 3) required by the tsp solver to find a nearoptimal shortest tour. Using two-tournament selection, we repeatedly select two\nparents, which create one offspring using uniform crossover. Every offspring is\nsubjected to mutation, which consists of replacing each one of its nodes with a\nprobability pm, with uniform randomly chosen (x, y) coordinates. This generational\nmodel is repeated 29 times, and together with the best individual from the current\npopulation (1-elitism), a new population is formed. The loop is repeated for 600\ngenerations.\nThe mutation rate pm is decreased over the subsequent generations. This process makes it possible to take large steps in the search space at the start, while\nkeeping changes small at the end of the run. The mutation rate is varied using,\npm = pmend + (pmstart \u2212 pmend ) * 2\n\n\u2212generation\nbias\n\n,\n\n\ffrom [9] where the parameters are set as bias = 2, pmstart = 1/2, pmend = 1/100,\nand generation is the current generation.\n\n3\n\nLin-Kernighan\n\nAs for other constrained optimisation problems, we distinguish between two types\nof algorithms, complete algorithms and incomplete algorithms. The first are often\nbased on a form of branch-and-bound, while the latter are equipped with one or\nseveral heuristics. In general, as complete algorithms will quickly become useless\nwhen the size of the problem is increased, the development of tsp solvers has\nshifted towards heuristic methods. One of the most renowned heuristic methods is\nLin-Kernighan [10]. Developed more than thirty years ago, it is still known for its\nsuccess in efficiently finding near-optimal results.\nThe core of Lin-Kernighan, and its descending variants, consists of edge exchanges in a tour. It is precisely this procedure that consumes more than 98%\nof the algorithm's run-time. Therefore, in order to measure the search effort of\nLin-Kernighan-based algorithms we count the number of times an edge exchange\noccurs during a run. Thus, this measure of the time complexity is independent of\nthe hardware, compiler and programming language used. In this study, we use two\nvariants of the Lin-Kernighan algorithm, which are explained next.\n3.1\n\nChained Lin-Kernighan\n\nChained Lin-Kernighan (clk) is a variant [11] that aims to introduce more robustness in the resulting tour by chaining multiple runs of the Lin-Kernighan algorithm.\nEach run starts with a perturbed version of the final tour of the previous run. The\nlength of the chain depends on the number of nodes in the tsp problem.\nIn [12], a proof is given demonstrating that local optimisation algorithms that\nare pls-complete (Polynomial Local Search), can always be forced into performing an exponential number of steps with respect to the input size of the problem.\nIn [13], Lin-Kernighan was first reported to have difficulty on certain problem\ninstances, which had the common property of being clustered. The reported instances consisted of partial graphs and the bad performance was induced because\nthe number of \"hops\" required to move the salesman between two clusters was set\nlarge enough to confuse the algorithm. We are using the symmetric tsp problem,\nwhere only full graphs exist and thus, every node can be reached from any other\nin one \"hop\".\n3.2\n\nLin-Kernighan with Cluster Compensation\n\nAs a reaction on the bad performance reported in [13], a new variant of LinKernighan is proposed in [14], called Lin-Kernighan with Cluster Compensation\n(lk-cc). This variant aims to reduce the computational effort, while maintaining\nthe quality of solutions produced for both clustered and non-clustered instances.\nCluster compensation works by calculating the cluster distance for nodes, which\nis a quick pre-processing step. The cluster distance between node v and w equals\n\n\fthe minimum bottleneck cost of any path between v and w, where the bottleneck\ncost of a path is defined as the heaviest edge on that path. These values are then\nused in the guiding utility function of Lin-Kernighan to prune unfruitful regions,\ni.e., those involved with high bottlenecks, from the search space.\n\n4\n\nExperiments\n\nEach experiment consists of 190 independent runs with the evolutionary algorithm, each time producing the most difficult problem instance at the end of the\nrun. With 29 new instances at each of the 600 generations, this results in running the Lin-Kernighan variant 3 306 000 times for each experiment. The set of\nproblem instances from an experiment is called Algorithm:Evolved set, where Algorithm is either clk or lk-cc, depending on which problem solver was used in\nthe experiment.\nThe total set of problem instances used as the initial populations for the 190\nruns is called Random set, and it contains 190 \u00d7 30 = 5 700 unique problem instances, each of which is generated uniform randomly. This set of initial instances\nis the same for both Lin-Kernighan variants.\n4.1\n\nIncrease in difficulty\n\nIn Figure 2, we show the amount of search effort required by Chain Lin-Kernighan\nto solve the sets of tsp instances corresponding to the different experiments, as well\nas to the Random set. Also, we compared these results to results reported in [15],\nwhere a specific tsp generator was used to create clustered instances and then\nsolved using the Chained Lin-Kernighan variant. This set contains the 50 most\ndifficult to solve instances from those experiments and it is called TSP generator.\nIn Figure 2, we notice that the mean and median difficulty of the instances in\nthe clk:Evolved set is higher than those created with the tsp generator. Also, as\nthe 5/95 percentile ranges are not overlapping, we have a high confidence of the\ncorrectness of the difference in difficulty.\nWhen comparing the difficulty of clk and lk-cc for both the Random set and\nthe Evolved sets in Figure 2, we find a remarkable difference in the the amount\nof variation in the results of both algorithms. clk has much more variation with\nthe Random set than lk-cc. However, for the evolved sets, the opposite is true.\nWe also mention that for the Random set, lk-cc is significantly faster than clk,\nwhile difference in speed for the evolved sets is negligible.\n4.2\n\nDiscrepancy with the optimum\n\nWe count the number of times the optimum was found by both algorithms for the\nRandom set and for the corresponding Evolved sets. These optima are calculated\nusing Concorde's [16] branch-and-cut approach to create an lp-representation of\nthe tsp instance, which is then solved using Qsopt [17]. We show the average\ndiscrepancy between optimal tour length and the length of the tour produced by\none of the problem solvers.\n\n\fMean\nLK\u2212CC on\nRandom set\nCLK on\nRandom set\n\nNear outliers, <= 3.0 IQR\nFar outliers, > 3.0 IQR\n\n0\n\n80000\n\n160000\n\n240000\n\n320000\n\nLin\u2212Kernighan search effort\n\nLK\u2212CC:\nEvolved set\nCLK:\nEvolved set\nCLK on\nTSP generator\n\n0\n\n1e+06\n\n2e+06\n\n3e+06\n\n4e+06\n\n5e+06\n\n6e+06\n\nLin\u2212Kernighan search effort\n\nFig. 2. Box-and-whisker plots of the search effort required by clk and lk-cc on\nthe Random set (top), and clk on the tsp generator and on the clk:Evolved set\n(bottom) and by lk-cc on the lk-cc:Evolved set (bottom)\nFor the Random set, clk has an average discrepancy of 0.004% (stdev: 0.024),\nand it finds the best tour for 95.8% of the set. For the same set of instances, lk-cc\nhas an average discrepancy of 2.08% (stdev: 1.419), and it finds the best tour for\n6.26% of the set.\nA similar picture presents itself for the Evolved sets. Here, clk has an average discrepancy of 0.03% (stdev: 0.098), and find the best tour for 84.7% of the\nclk:Evolved set. lk-cc has an average discrepancy of 2.58% (stdev: 1.666), and\nfinds the best tour for 4.74% of the lk-cc:Evolved set.\n4.3\n\nClustering properties of problem sets\n\nTo get a quantifiable measure for the amount of clusters in tsp instances we use\nthe clustering algorithm gdbscan [18]. This algorithm uses no stochastic process, assumes no shape of clusters, and works without a predefined number of\nclusters. This makes it an ideal candidate to cluster 2-dimensional spatial data,\nas the methods suffers the least amount of bias possible. It works by using an\narbitrary neighbourhood function, which in this case is the minimum Euclidean\ndistance. It determines clusters based on their density by first seeding clusters\nand then iteratively collecting objects that adhere to the neighbourhood function.\nThe neighbourhood function here is a spatial index, which results in a run-time\ncomplexity of O(n log n).\nClustering algorithms pose a large responsibility on their users, as every clustering algorithm depends on at least one parameter to help it define what a cluster is.\nTwo common parameters are the number of clusters, e.g., for variants of k-means,\nand distance measurements to decide when two points are near enough to consider\n\n\fAverage occurrences of clusterings\n\n90\n\nRandom set\nCLK:Evolved set\nLK-CC:Evolved set\n\n80\n70\n60\n50\n40\n30\n20\n10\n0\n0\n\n1\n\n2\n\n3\n\n4\n5\nNumber of clusters\n\n6\n\n7\n\n8\n\n9\n\nFig. 3. Average amount of clusters found for problem instances of the Random set\nand for problem instances evolved against clk and lk-cc\nthem part of the same cluster. The setting of either of these parameters greatly\naffects the resulting clustering. To get a more unbiased result on the number of\nclusters in a set of points we need a more robust method.\nTo get a more robust result for the number of clusters found in the different\nsets of tsp instances we repeat the following procedure for each instance in the set.\nUsing the set {10, 11, 12, . . . , 80} of settings for the minimum Euclidean distance\nparameter for gdbscan, we cluster the tsp instance for every parameter setting.\nWe count the number of occurrences of each number of clusters found. Then we\naverage these results over all the tsp instances in the set. The set of minimum\nEuclidean distance parameters is chosen such that it includes both the peak nd\nthe smallest number of clusters for each problem instance.\nWe use the above procedure to quantify the clustering of problem instances in\nthe Random set and the two evolved sets. Figure 3 shows that for the Random set\nand the lk-cc:Evolved set, the average number of clusters found does not differ by\nmuch. Instead, the problem instances in the clk:Evolved set contain consistently\nmore clusters. The largest difference is found for 2\u20136 clusters.\n4.4\n\nDistribution of segment lengths\n\nFor both problem solvers, we study the difference between the distribution of the\nsegment lengths of resulting tours from both the Random set and the corresponding\nEvolved set. For both sets, we take the optimal tour of each tsp instance in the\nset and then, for each tour, observe all the segment lengths. Finally, we count the\noccurrences of the segment lengths, and average these over the whole set of tours.\nFigure 4 shows the average distribution in segment lengths for tours derived\nfrom tsp instances from the Random set and for the clk:Evolved set. We notice\nthat the difference from the Random set to the clk:Evolved set is the increase of\nvery short segments (0\u20138) and more longer segments (27\u201343), and the introduction\nof long segments (43\u201358). As the number of segments in a tour is always the same,\ni.e., 100, these increases relate to the decrease of medium length segments (9\u201326).\n\n\fCLK:Evolved set\n30\n\n25\n\n25\n\nAverage occurrences\n\nAverage occurrences\n\nRandom set\n30\n\n20\n15\n10\n5\n0\n\n20\n15\n10\n5\n0\n\n0\n\n10\n\n20\n\n30\n\n40\n\n50\n\n60\n\n0\n\n10\n\nSegment lengths\n\n20\n\n30\n\n40\n\n50\n\n60\n\nSegment lengths\n\nFig. 4. Average distribution of segment lengths in the resulting Chained LinKernighan tour for tsp instances of the Random set and of the clk:Evolved set\n\nFigure 5 shows the average distribution of segment lengths for both problem\nsolvers. For lk-cc, we observe no significant changes in the distribution of segment\nlengths between the Random set and lk-cc:Evolved set.\nWhen comparing the average distribution of segment lengths of tours in both\nproblem solvers we clearly see a large difference. lk-cc, compared to clk, uses\nmuch longer segments. Those segments most frequently used, in the range of 60\u201380,\nnever occur at all with clk. The distribution for lk-cc seems to match a flattened\nnormal distribution, whereas the distribution for clk is much more skewed, clk\nfavours the usage of short segments of a length less than 20.\n\n30\n\nCLK, Random set\nCLK:Evolved set\nLK-CC, Random set\nLK-CC:Evolved set\n\nAverage occurrences\n\n25\n20\n15\n10\n5\n0\n0\n\n20\n\n40\n\n60\n\n80\n\n100\n\n120\n\n140\n\n160\n\n180\n\nSegment lengths\n\nFig. 5. Average distribution of segment lengths in the resulting tours for both the\nRandom set and Evolved set of problem instances for clk and lk-cc\n\n\f4.5\n\nDistribution of pair-wise distances\n\nIn Figure 6, we show the average number of \u0001occurrences for distances between pairs\nof nodes. Every tsp instance contains 100\npairs of nodes on the account that it\n2\nforms a full graph. The distribution of these pair-wise distances mostly resembles\na skewed Gaussian distribution. The main exception consists of the cut-off at short\nsegments lengths. These very short distances, smaller than about 4, occur rarely\nwhen 100 nodes are distributed over a 400 \u00d7 400 space.\n\n400\n\nRandom set\nCLK:Evolved set\nLK-CC:Evolved set\n\nAverage occurrences\n\n350\n300\n250\n200\n150\n100\n50\n0\n0\n\n100\n\n200\n\n300\n\n400\n\n500\n\n600\n\nPair-wise distances\n\nFig. 6. Distribution of distances over all pairs of nodes in randomly generated and\nevolved problem instances after 600 generations (clk and lk-cc), 95% confidence\nintervals included, most of which are small\nFor the Chained Lin-Kernighan we notice a change in the distribution similar\nto that in the previous section. Compared with the Random set, both the number\nof short segments and the number of long segments increases. Although not to the\nsame extent when observing the distribution of segment lengths. Also, the number\nof medium length occurrences is less than for the Random set. This forms more\nevidence for the introduction of clusters in the problem instances. Although this\nanalysis does not provide us with the amount of clusters, it does give us an unbiased\nview on the existence of clusters, as it is both independent of the tsp algorithms\nand any clustering algorithm.\nAlso shown in Figure 6 is the distribution of pair-wise distances for problem\ninstances evolved against the lk-cc algorithm. While we notice an increase in\nshorter distances, this is matched by an equal decrease in longer distances. Thus,\nthe total layout of the nodes becomes more huddled together.\n4.6\n\nSwapping evolved sets\n\nWe run each variant on the problem instances in the set evolved for the other\nvariant. Table 1 clearly shows that a set evolved for one algorithm is much less\n\n\fdifficult for the other algorithm. However, each variant needs significantly more\nsearch effort for the alternative Evolved set than for the Random set. This indicates\nthat some properties of difficulty are shared between the algorithms.\nTable 1. Mean and standard deviation, in brackets, of the search effort required\nby both algorithms on the Random set and both Evolved sets\nclk\n\ncc-lk\n\nclk:Evolved set 1 753 790 (251 239) 207 822 (155 533)\ncc-lk:Evolved set 268 544 (71 796) 1 934 790 (799 544)\nRandom set\n130 539 (34 452)\n19 660 (12 944)\n\n5\n\nConclusions\n\nWe have introduced an evolutionary algorithm for evolving difficult to solve travelling salesman problem instances. The method was used to create a set of problem\ninstances for two well known variants of the Lin-Kernighan heuristic. These sets\nprovided far more difficult problem instances than problem instances generated\nuniform randomly. Moreover, for the Chained Lin-Kernighan variant, the problem\ninstances are significantly more difficult than those created with a specialised tsp\ngenerator. Through analysis of the sets of evolved problem instances we show that\nthese instances adhere to structural properties that directly afflict on the weak\npoints of the corresponding algorithm.\nProblem instances difficult for Chained Lin-Kernighan seem to contain clusters. When comparing with the instances of the tsp generator, these contained\non average more clusters (10 clusters) then the evolved ones (2\u20136 clusters). Thus,\nthis leads us to the conjecture that clusters on itself is not sufficient property to\ninduce difficulty for clk. The position of the clusters and distribution of cities over\nclusters, as well as the distribution of nodes not belonging to clusters, can be of\nmuch influence.\nThe goal of the author of lk-cc is to provide a tsp solver where its efficiency\nand effectiveness are not influenced by the structure of the problem [14]. Problem\ninstances evolved in our study, which are difficult to solve for Lin-Kernighan with\nCluster Compensation, tend to be condense and contain random layouts. The algorithm suffers from high variation in the amount of search effort required, therefore\ndepending heavily on a lucky setting of the random seed. Furthermore, its effectiveness is much lower than that of clk, as the length of its tours are on average,\nfurther away from the optimum. Thus, it seems that to live up its goals, lk-cc is\nlosing on both performance and robustness.\nThe methodology described here is of a general nature and can, in theory, be\nused to automatically identify difficult problem instances, or instances that inhibit\nother properties. Afterwards, these instances may reveal properties that can lead\nto general conclusions on when and why algorithms show a particular performance.\n\n\fThis kind of knowledge is of importance when one needs to select an algorithm to\nsolve a problem of which such properties can be measured.\n\nAcknowledgements\nThe author is supported through a TALENT-Stipendium awarded by the Netherlands Organization for Scientific Research (NWO).\n\nReferences\n1. Lawler, E.L., Lenstra, J.K., Rinnooy Kan, A.H.G., Shmoys, D.B.: The Traveling\nSalesman Problem. John Wiley & Sons, Chichester (1985)\n2. Cheeseman, P., Kanefsky, B., Taylor, W.: Where the really hard problems are. In:\nProceedings of IJCAI-91. (1991)\n3. Beck, J., Prosser, P., Selensky, E.: Vehicle routing and job shop scheduling: What's\nthe difference? In: Proc. of the 13th International Conference on Automated Planning\n& Scheduling. (2003)\n4. Monasson, R., Zecchina, R., Kirkpatrick, S., Selman, B., Troyansky, L.: Determining\ncomputational complexity from characteristic phase transitions. Nature 400 (1999)\n133\u2013137\n5. Hayes, B.: Can't get no satisfaction. American Scientist 85 (1997) 108\u2013112\n6. Hogg, T.: Refining the phase transition in combinatorial search. Artificial Intelligence\n81 (1996) 127\u2013154\n7. Culberson, J., Gent, I.: Well out of reach: why hard problems are hard. Technical\nreport, APES Research Group (1999)\n8. van Hemert, J.: Evolving binary constraint satisfaction problem instances that are\ndifficult to solve. In: Proceedings of the IEEE 2003 Congress on Evolutionary Computation, IEEE Press (2003) 1267\u20131273\n9. Kratica, J., Ljubi\u0107, I., To\u0161ic, D.: A genetic algorithm for the index selection problem.\nIn Raidl, G., et al., eds.: Applications of Evolutionary Computation. Volume 2611.,\nSpringer-Verlag (2003) 281\u2013291\n10. Lin, S., Kernighan, B.: An effective heuristic algorithm for the traveling salesman\nproblem. Operations Research 21 (1973) 498\u2013516\n11. Applegate, D., Cook, W., Rohe, A.: Chained lin-kernighan for large travelling salesman problems (2000) http://www.citeseer.com/applegate99chained.html.\n12. Papadimitriou, C.: The complexity of the Lin-Kernighan heuristic for the traveling\nsalesman problem. SIAM Journal of Computing 21 (1992) 450\u2013465\n13. Johnson, D., McGeoch, L.: The traveling salesman problem: a case study. In Aarts,\nE., Lenstra, J., eds.: Local Search in Combinatorial Optimization. John Wiley &\nSons, Inc (1997) 215\u2013310\n14. Neto, D.: Efficient Cluster Compensation for Lin-Kernighan Heuristics. PhD thesis,\nComputer Science, University of Toronto (1999)\n15. van Hemert, J., Urquhart, N.: Phase transition properties of clustered travelling\nsalesman problem instances generated with evolutionary computation. In Yao, X.,\nBurke, E., Lozano, J.A., Smith, J., Merelo-Guerv\u00f3s, J.J., Bullinaria, J.A., Rowe, J.,\nKab\u00e1n, P.T.A., Schwefel, H.P., eds.: Parallel Problem Solving from Nature (PPSN\nVIII). Volume 3242 of LNCS., Birmingham, UK, Springer-Verlag (2004) 150\u2013159\n16. Applegate, D., Bixby, R., Chv\u00e1tal, V., Cook, W.: Finding tours in the TSP. Technical\nReport 99885, Research Institute for Discrete Mathematics, Universit\u00e4t Bonn (1999)\n\n\f17. Applegate, D., Cook, W., Dash, S., Mevenkamp, M.: Qsopt linear programming\nsolver (2004) http://www.isye.gatech.edu/~wcook/qsopt/.\n18. Sander, J., Ester, M., Kriegel, H.P., Xu, X.: Density-based clustering in spatial\ndatabases: The algorithm GDBSCAN and its applications. Data Min. Knowl. Discov.\n2 (1998) 169\u2013194\n\n\f"}