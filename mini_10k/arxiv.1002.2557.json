{"id": "http://arxiv.org/abs/1002.2557v1", "guidislink": true, "updated": "2010-02-12T14:08:20Z", "updated_parsed": [2010, 2, 12, 14, 8, 20, 4, 43, 0], "published": "2010-02-12T14:08:20Z", "published_parsed": [2010, 2, 12, 14, 8, 20, 4, 43, 0], "title": "Reachability Games on Extended Vector Addition Systems with States", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1002.0786%2C1002.0138%2C1002.2118%2C1002.3256%2C1002.2020%2C1002.0559%2C1002.3513%2C1002.2333%2C1002.1786%2C1002.3873%2C1002.0555%2C1002.4961%2C1002.4344%2C1002.3818%2C1002.4185%2C1002.3959%2C1002.3235%2C1002.1840%2C1002.1508%2C1002.3398%2C1002.1674%2C1002.0688%2C1002.3047%2C1002.0449%2C1002.3429%2C1002.2557%2C1002.3951%2C1002.0725%2C1002.2651%2C1002.2103%2C1002.0936%2C1002.4288%2C1002.4431%2C1002.3898%2C1002.3286%2C1002.0470%2C1002.3175%2C1002.4300%2C1002.1364%2C1002.3193%2C1002.4399%2C1002.4133%2C1002.1883%2C1002.1129%2C1002.2194%2C1002.4303%2C1002.0823%2C1002.0871%2C1002.5013%2C1002.0169%2C1002.2418%2C1002.0880%2C1002.2818%2C1002.0850%2C1002.3823%2C1002.2427%2C1002.3744%2C1002.3770%2C1002.3606%2C1002.4263%2C1002.2959%2C1002.2889%2C1002.2303%2C1002.1760%2C1002.4491%2C1002.4329%2C1002.1410%2C1002.4249%2C1002.1912%2C1002.1694%2C1002.0919%2C1002.0800%2C1002.1034%2C1002.0881%2C1002.4199%2C1002.2934%2C1002.3188%2C1002.4114%2C1002.3998%2C1002.0446%2C1002.3164%2C1002.0815%2C1002.2230%2C1002.4593%2C1002.2689%2C1002.3570%2C1002.3784%2C1002.4429%2C1002.4440%2C1002.1446%2C1002.1439%2C1002.0443%2C1002.2894%2C1002.3252%2C1002.0494%2C1002.3850%2C1002.3076%2C1002.2440%2C1002.4901%2C1002.2936%2C1002.4361&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Reachability Games on Extended Vector Addition Systems with States"}, "summary": "We consider two-player turn-based games with zero-reachability and\nzero-safety objectives generated by extended vector addition systems with\nstates. Although the problem of deciding the winner in such games is\nundecidable in general, we identify several decidable and even tractable\nsubcases of this problem obtained by restricting the number of counters and/or\nthe sets of target configurations.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1002.0786%2C1002.0138%2C1002.2118%2C1002.3256%2C1002.2020%2C1002.0559%2C1002.3513%2C1002.2333%2C1002.1786%2C1002.3873%2C1002.0555%2C1002.4961%2C1002.4344%2C1002.3818%2C1002.4185%2C1002.3959%2C1002.3235%2C1002.1840%2C1002.1508%2C1002.3398%2C1002.1674%2C1002.0688%2C1002.3047%2C1002.0449%2C1002.3429%2C1002.2557%2C1002.3951%2C1002.0725%2C1002.2651%2C1002.2103%2C1002.0936%2C1002.4288%2C1002.4431%2C1002.3898%2C1002.3286%2C1002.0470%2C1002.3175%2C1002.4300%2C1002.1364%2C1002.3193%2C1002.4399%2C1002.4133%2C1002.1883%2C1002.1129%2C1002.2194%2C1002.4303%2C1002.0823%2C1002.0871%2C1002.5013%2C1002.0169%2C1002.2418%2C1002.0880%2C1002.2818%2C1002.0850%2C1002.3823%2C1002.2427%2C1002.3744%2C1002.3770%2C1002.3606%2C1002.4263%2C1002.2959%2C1002.2889%2C1002.2303%2C1002.1760%2C1002.4491%2C1002.4329%2C1002.1410%2C1002.4249%2C1002.1912%2C1002.1694%2C1002.0919%2C1002.0800%2C1002.1034%2C1002.0881%2C1002.4199%2C1002.2934%2C1002.3188%2C1002.4114%2C1002.3998%2C1002.0446%2C1002.3164%2C1002.0815%2C1002.2230%2C1002.4593%2C1002.2689%2C1002.3570%2C1002.3784%2C1002.4429%2C1002.4440%2C1002.1446%2C1002.1439%2C1002.0443%2C1002.2894%2C1002.3252%2C1002.0494%2C1002.3850%2C1002.3076%2C1002.2440%2C1002.4901%2C1002.2936%2C1002.4361&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We consider two-player turn-based games with zero-reachability and\nzero-safety objectives generated by extended vector addition systems with\nstates. Although the problem of deciding the winner in such games is\nundecidable in general, we identify several decidable and even tractable\nsubcases of this problem obtained by restricting the number of counters and/or\nthe sets of target configurations."}, "authors": ["Tomas Brazdil", "Petr Jancar", "Antonin Kucera"], "author_detail": {"name": "Antonin Kucera"}, "author": "Antonin Kucera", "arxiv_comment": "26 pages", "links": [{"href": "http://arxiv.org/abs/1002.2557v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1002.2557v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.GT", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.GT", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1002.2557v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1002.2557v1", "journal_reference": null, "doi": null, "fulltext": "Reachability Games on Extended Vector Addition Systems\nwith States\nTom\u00e1\u0161 Br\u00e1zdil1 , Petr Jan\u010dar2 , and Anton\u0131\u0301n Ku\u010dera1\n\narXiv:1002.2557v1 [cs.GT] 12 Feb 2010\n\n1\n\n2\n\nFaculty of Informatics, Masaryk University, Botanick\u00e1 68a,\n60200 Brno, Czech Republic. {brazdil,kucera}@fi.muni.cz\nDept. of Computer Science, FEI, Technical University of Ostrava, 17. listopadu 15, 70833\nOstrava, Czech Republic. Petr.Jancar@vsb.cz\n\nAbstract. We consider two-player turn-based games with zero-reachability and\nzero-safety objectives generated by extended vector addition systems with states. Although the problem of deciding the winner in such games is undecidable in general,\nwe identify several decidable and even tractable subcases of this problem obtained\nby restricting the number of counters and/or the sets of target configurations.\n\n1 Introduction\nVector addition systems with states (VASS) are an abstract computational model equivalent to Petri nets (see, e.g., [27, 29]) which is well suited for modelling and analysis of\ndistributed concurrent systems. Roughly speaking, a k-dimensional VASS, where k \u2265 1, is\nan automaton with a finite control and k unbounded counters which can store non-negative\nintegers. Depending on its current control state, a VASS can choose and perform one of the\navailable transitions. A given transition changes the control state and updates the vector of\ncurrent counter values by adding a fixed vector of integers which labels the transition. For\nsimplicity, we assume that transition labels can increase/decrease each counter at most by\none. Since the counters cannot become negative, transitions which attempt to decrease a\nzero counter are disabled. Configurations of a given VASS are written as pairs pv, where\np is a control state and v \u2208 Nk a vector of counter values.\nIn this paper, we consider extended VASS games which enrich the modelling power of\nVASS in two orthogonal ways.\n(1) Transition labels can contain symbolic components (denoted by \u03c9) whose intuitive\nmeaning is \"add an arbitrarily large non-negative integer to a given counter\". For example, a single transition p \u2192\n\u2212 q labeled by (1, \u03c9) represents an infinite number of\n\"ordinary\" transitions labeled by (1, 0), (1, 1), (1, 2), . . . A natural source of motivation for introducing symbolic labels are systems with multiple resources that can\nbe consumed and produced simultaneously by performing a transition. The \u03c9 components can then be conveniently used to model \"resource reloading\" (see also the\nexample below).\n(2) To model the interaction between a system and its environment, the set of control states\nis split into two disjoint subsets of controllable and environmental states. Transitions\nfrom the controllable and environmental states then correspond to the events generated\nby the system and its environment, respectively.\nHence, the semantics of a given extended VASS game M is a possibly infinitely-branching\nturn-based game GM with infinitely many vertices which correspond to the configurations\n\n\fof M. The game GM is initiated by putting a token on some configuration pv. The token\nis then moved from vertex to vertex by two players, \u0003 and ^, who select transitions in the\ncontrollable and environmental configurations according to some strategies. Thus, they\nproduce an infinite sequence of configurations called a play. Desired properties of M can\nbe formalized as objectives, i.e., admissible plays. The central problem is the question\nwhether player \u0003 (the system) has a winning strategy which ensures that the objective is\nsatisfied for every strategy of player ^ (the environment). We refer to, e.g., [32, 13, 35]\nfor more comprehensive expositions of results related to games in formal verification. In\nthis paper, we are mainly interested in zero-safety objectives (or, dually, zero-reachability\nobjectives), consisting of plays where no counter is decreased to zero, i.e., a given system\nnever reaches a situation when some of its resources are insufficient.\nAs a simple example, consider a workshop which \"consumes\" wooden sticks, screws,\nwires, etc., and produces puppets of various kinds which are then sold at the door. From\ntime to time, the manager may decide to issue an order for screws or other supplies, and\nthus increase their number by a finite but essentially unbounded amount (the manager\ncertainly aims at choosing the \"right\" number of screws which are needed to produce all\npuppets that can be sold in next few days). Controllable states can be used to model the\nactions taken by workshop employees, and environmental states model the behaviour of\nunpredictable customers. We wonder whether the workshop manager has a strategy which\nensures that at least one puppet of each kind is always available for sell, regardless what\nthe unpredictable customers do (the model can of course reflect only selected aspects of\ncustomers' behaviour). Note that a winning strategy for the manager must also resolve the\nsymbolic \u03c9 value used to model the order of screws by specifying a concrete number of\nscrews that should be ordered.\nTechnically, we consider extended VASS games with non-selective and selective zeroreachability objectives, where the set of target configurations that should be reached by\nplayer ^ and avoided by player \u0003 is either Z and ZC , respectively. Here,\n\u2013 the set Z consists of all pv such that vl = 0 for some l (i.e., some counter is zero);\n\u2013 the set ZC , where C is a subset of control states, consists of all pv \u2208 Z such that p \u2208 C.\nOur main results can be summarized as follows:\n(a) The problem of deciding the winner in k-dimensional extended VASS games (where\nk \u2265 2) with Z-reachability objectives is in (k-1)-EXPTIME.\n(b) A finite description of the winning region for each player (i.e., the set of all vertices\nwhere the player wins) is computable in (k\u22121)-exponential time.\n(c) Winning strategies for both players admit a finite and effectively computable description.\nWe note that the classical result by Lipton [24] easily implies EXPSPACE-hardness (even\nin the case when player ^ has no influence). These (decidability) results are complemented\nby noting the following straightforward undecidability:\n(d) The problem of deciding the winner in 2-dimensional VASS games with \"ordinary\"\n(non-symbolic) transitions and ZC -reachability objectives is undecidable. The same\nproblem for 3-dimensional extended VASS games is highly undecidable (beyond the\narithmetical hierarchy).\nFurther, we consider the special case of one-dimensional extended VASS games, where\nwe provide the following (tight) complexity results:\n2\n\n\f(e) The problem of deciding the winner in one-dimensional extended VASS games with\nZ-reachability objectives is in P. Both players have \"counterless\" winning strategies\nconstructible in polynomial time.\n(f) The problem of deciding the winner in one-dimensional extended VASS games with\nZC -reachability objectives is PSPACE complete. A finite description of the winning\nregions is computable in exponential time.\nTo the best of our knowledge, these are the first positive decidability/tractability results\nabout a natural class of infinitely branching turn-based games, and some of the underlying\nobservations are perhaps of broader interest (in particular, we obtain slight generalizations\nof the \"classical\" results about self-covering paths achieved by Rackoff [28] and elaborated\nby Rosier&Yen [30]).\nTo build a preliminary intuition behind the technical proofs of (a)\u2013(f) presented in\nSection 3, we give a brief outline of these proofs and sketch some of the crucial insights.\nA proof outline for (a)\u2013(c). Observe that if the set of environmental states that are\ncontrolled by player ^ is empty, then the existence of a winning strategy for player \u0003\nin pv is equivalent to the existence of a self-covering zero-avoiding path of the form\npv \u2192\n\u2212 \u2217 qu \u2192\n\u2212 + qu\u2032 , where u \u2264 u\u2032 and the counters stay positive along the path. The\nexistence and the size of such paths has been studied in [28, 30] (actually, they mainly\nconsider the existence of an increasing self-covering path where u\u2032 is strictly larger than\nu in at least one component, and the counters can be decreased to zero in the intermediate configurations). One can easily generalize this observation to the case when the set of\nenvironmental states is non-empty and show that the existence of a winning strategy for\nplayer \u0003 in pv is equivalent to the existence of a self-covering zero-avoiding tree initiated\nin pv, which is a finite tree, rooted in pv, describing a strategy for player \u0003 where each\nmaximal path (i.e., each branch) is self-covering and zero-avoiding (if player \u0003 follows this\nstrategy, a self-covering zero-avoiding path is necessarily produced after a finite number\nof steps no matter what player ^ does).\nWe show that the existence of a self-covering zero-avoiding tree initiated in a given\nconfiguration of a given extended VASS is decidable, and we give some complexity\nbounds. Let us note that this result is more subtle than it might seem; one can easily show\nthat the existence of a self-covering (but not necessarily zero-avoiding) tree for a given\nconfiguration is already undecidable (see Appendix A.1 for details).\nOur algorithm constructs all minimal pv (w.r.t. component-wise ordering) where\nplayer \u0003 has a winning strategy. Since this set is necessarily finite, and the winning region\nof player \u0003 is obviously upwards-closed, we obtain a finite description of the winning region for player \u0003. The algorithm can be viewed as a concrete (but not obvious) instance\nof a general approach, which is dealt with, e.g., in [33, 10, 11]. First, we compute all control states p such that player \u0003 can win in some configuration pv. Here, a crucial step is\nto observe that if this is not the case, i.e., player ^ can win in every pv, then player ^\nhas a counterless winning strategy which depends only on the current control state (since\nthere are only finitely many counterless strategies, they can be tried out one by one). This\ncomputation also gives an initial bound B such that for every control state p we have that\nif player \u0003 wins in some pv, then he wins in all pv\u2032 where v\u2032l \u2265 B for all indexes (counters)\nl \u2208 {1, 2, . . . , k}. Then the algorithm proceeds inductively, explores the situations where\nat least one counter is less than B, computes (bigger) general bounds for the other k\u22121\ncounters, etc.\n3\n\n\fA finite description of a strategy for player \u0003 which is winning in every configuration\nof his winning region is obtained by specifying the moves in all minimal winning configurations (observe that in a non-minimal winning configuration p(v+u) such that pv is\nminimal, player \u0003 can safely make a move p(v+u) \u2192\n\u2212 q(v\u2032 +u) where pv \u2192\n\u2212 qv\u2032 is the move\nassociated to pv). Note that this also resolves the issue with \u03c9 components in transitions\nperformed by player \u0003. Since the number of minimal winning configurations is finite, there\nis a finite and effectively computable constant c such that player \u0003 never needs to increase\na counter by more than c when performing a transition whose label contains a symbolic\ncomponent (and we can even give a simple \"recipe\" which gives an optimal choice for the\n\u03c9 values for every configuration separately).\nThe winning region of player ^ is just the complement of the winning region of\nplayer \u0003. Computing a finite description of a winning strategy for player ^ is somewhat\ntrickier and relies on some observations made in the \"inductive step\" discussed above (note\nthat for player ^ it is not sufficient to stay in his winning region; he also needs to make\nsome progress in approaching zero in some counter).\nA proof outline for (d). The undecidability result for 2-dimensional VASS games is obtained by a straightforward reduction of the halting problem for Minsky machines with\ntwo counters initialized to zero, which is undecidable [26]. Let us note that this construction is essentially the same as the one for monotonic games presented in [1], and it is\nincluded mainly for the sake of completeness. After some minor modifications, the same\nconstruction can be also used to establish the undecidability of other natural problems for\nVASS and extended VASS games, such as boundedness or coverability. The high undecidability result for 3-dimensional extended VASS games is proven by reducing the problem\nwhether a given nondeterministic Minsky machine with two counters initialized to zero\nhas an infinite computation such that the initial instruction is executed infinitely often (this\nproblem is known to be \u03a311 -complete [15]). This reduction is also straightforward, but at\nleast it demonstrates that symbolic transitions do bring some extra power (note that for\n\"ordinary\" VASS games, a winning strategy for player ^ in a given pv can be written as a\nfinite tree, and hence the existence of such a strategy is obviously semidecidable).\nA proof outline for (e)\u2013(f). The case of one-dimensional extended VASS games with\nzero-reachability objectives is, of course, simpler than the general case, but our results still\nrequire some effort. In the case of Z-reachability objectives, we show that the winning region of player ^ can be computed as the least fixed point of a monotonic function over a\nfinite lattice. Although the lattice has exponentially many elements, we show that the function reaches the least fixed point only after a quadratic number of iterations. The existence\nand efficient constructibility of counterless winning strategies is immediate for player \u0003,\nand we show that the same is achievable for player ^. The results about ZC -reachability\nobjectives are obtained by applying known results about the emptiness problem for alternating finite automata with one letter alphabet [16] (see also [21]) and the emptiness\nproblem for alternating two-way parity word automata [31], together with some additional\nobservations.\nRelated work. As already mentioned, some of our results and proof techniques use (and\ngeneralize) the techniques from [28, 30]. VASS games can be also seen as a special case\nof monotonic games considered in [1], where it is shown that the problem of deciding\nthe winner in monotonic games with reachability objectives is undecidable (see the proof\noutline for (d) above). Let us note that the results presented in [1] mainly concern the socalled downward-closed games, which is a model different from ours. Let us also mention\n4\n\n\fthat (extended) VASS games are different from another recently studied model of branching vector addition systems [34, 6] which has different semantics and different algorithmic\nproperties (for example, the coverability and boundedness problems for branching vector\naddition systems are complete for 2-EXPTIME [6]). We have also mentioned that there\nare studies of generic procedures applicable to sets of states which are upward-closed\nw.r.t. a suitable ordering (e.g., [3, 12, 33, 10, 11]); some insight has been needed to show\nthat our setting could be seen as a concrete instance, and further insight has also brought\nsome \"algorithmic consequences\".\nNote that one-dimensional VASS games are essentially one-counter automata where\nthe counter cannot be tested for zero explicitly (that is, there are no transitions enabled only\nwhen the counter reaches zero). Such one-counter automata are also called one-counter\nnets because they correspond to Petri nets with just one unbounded place. The models\nof one-counter automata and one-counter nets have been intensively studied [18, 20, 22,\n2, 7, 9, 19, 31, 14]. Many problems about equivalence-checking and model-checking onecounter automata are known to be decidable, but only a few of them are solvable efficiently.\nFrom this point of view, we find the polynomial-time result about one-dimensional extended VASS games with Z-reachability objectives encouraging.\n\n2 Definitions\nIn this paper, the sets of all integers, positive integers, and non-negative integers are denoted by Z, N>0 , and N, respectively. For every finite or countably infinite set M, the\nsymbol M \u2217 denotes the set of all finite words (i.e., finite sequences) over M. The length of\na given word w is denoted by |w| or length(w), and the individual letters in w are denoted\nby w(0), w(1), . . . , w(|w| \u2212 1). The empty word is denoted by \u03b5, where |\u03b5| = 0. We also use\nM + to denote the set M \u2217 r {\u03b5}. A path in M = (M, \u2192), for a binary relation \u2192 \u2286 M \u00d7 M,\nis a finite or infinite sequence w = m0 , m1 , . . . such that mi \u2192 mi+1 for every i; we put\nlength(w) = \u03c9 if w is infinite. As above, w(i) denotes the element mi of w ; by wi we\ndenote the (finite or infinite) path mi , mi+1 , . . .. (By writing w(i) = m or wi we implicitly\nassume that length(w) \u2265 i+1.) A given n \u2208 M is reachable from a given m \u2208 M, written\nm \u2192\u2217 n, if there is a finite path from m to n. A run is a maximal path (infinite, or finite\nwhich cannot be prolonged). The sets of all finite paths and all runs in M are denoted by\nFPath(M) and Run(M), respectively. Similarly, the sets of all finite paths and runs that\nstart in a given m \u2208 M are denoted by FPath(M, m) and Run(M, m), respectively.\nDefinition 1 (Game). A game is a tuple G = (V, 7\u2192, (V\u0003 , V^ )) where V is a finite or countably infinite set of vertices, 7\u2192 \u2286 V \u00d7 V is an edge relation, and (V\u0003 , V^ ) is a partition of\nV.\nA game is played by two players, \u0003 and ^, who select the moves in the vertices of V\u0003 and\nV^ , respectively. Let \u2299 \u2208 {\u0003, ^}. A strategy for player \u2299 is a (partial) function which to\neach wv \u2208 V \u2217 V\u2299 assigns a vertex v\u2032 such that v 7\u2192 v\u2032 if there is any. The set of all strategies\nfor player \u0003 and player ^ is denoted by \u03a3 and \u03a0, respectively. We say that a strategy \u03c4 is\nmemoryless if \u03c4(wv) depends just on the last vertex v. In the rest of this paper, we consider\nmemoryless strategies as (partial) functions from V\u2299 to V.\nA winning objective is a set of runs W \u2286 Run(G). Every pair of strategies (\u03c3, \u03c0) \u2208\n\u03a3 \u00d7 \u03a0 and every initial vertex v \u2208 V determine a unique run G(\u03c3,\u03c0) (v) \u2208 Run(G, v) which is\ncalled a play. We say that a strategy \u03c3 \u2208 \u03a3 is W-winning (for player \u0003) in a given v \u2208 V\n5\n\n\fif for every \u03c0 \u2208 \u03a0 we have that G(\u03c3,\u03c0) (v) \u2208 W. Similarly, a strategy \u03c0 \u2208 \u03a0 is W-winning\nfor player ^ if for every \u03c3 \u2208 \u03a3 we have that G(\u03c3,\u03c0) (v) \u2208 W. The set of all vertices where\nplayer \u2299 has a W-winning strategy is called the winning region of player \u2299 and denoted\nby Win(\u2299, W).\nIn this paper, we only consider reachability and safety objectives, which are specified\nby a subset of target vertices that should or should not be reached by a run, respectively.\nFormally, for a given T \u2286 V we define the sets of runs R(T ) and S(T ), where\n\u2013 R(T ) = {w \u2208 Run(G) | w(i) \u2208 T for some i},\n\u2013 S(T ) = {w \u2208 Run(G) | w(i) < T for all i}.\nWe note that R(T ) = Run(G) r S(T ), and the games with reachability and safety objectives are determined, i.e., Win(\u0003, S(T )) = V r Win(^, R(T )); moreover, each player has a\nmemoryless winning strategy in every vertex of his winning region3.\nDefinition 2 (extended VASS game). Let k \u2208 N>0 . A k-dimensional vector addition system with states (VASS) is a tuple M = (Q, T, \u03b1, \u03b2, \u03b4) where Q , \u2205 is a finite set of control\nstates, T , \u2205 is a finite set of transitions, \u03b1 : T \u2192 Q and \u03b2 : T \u2192 Q are the source and target mappings, and \u03b4 : T \u2192{\u22121, 0, 1}k is a transition displacement labeling. For technical\nconvenience, we assume that for every q \u2208 Q there is some t \u2208 T such that \u03b1(t) = q.\nAn extended VASS (eVASS for short) is a VASS where the transition displacement\nlabeling is a function \u03b4 : T \u2192{\u22121, 0, 1, \u03c9}k .\nA VASS game (or eVASS game) is a tuple M = (Q, (Q\u0003 , Q^ ), T, \u03b1, \u03b2, \u03b4) where\n(Q, T, \u03b1, \u03b2, \u03b4) is a VASS (or eVASS) and (Q\u0003 , Q^ ) is a partition of Q.\nA configuration of M is an element of Q \u00d7 Nk . We write pv instead of (p, v), and the l-th\ncomponent of v is denoted by vl . For a given transition t \u2208 T , we write t : p \u2192\n\u2212 q to indicate\nthat \u03b1(t) = p and \u03b2(t) = q, and p \u2192\n\u2212v q to indicate that p \u2192\n\u2212 q and \u03b4(t) = v. A transition t \u2208 T\nis enabled in a configuration pv if \u03b1(t) = p and for every 1 \u2264 l \u2264 k such that \u03b4(t)l = \u22121\nwe have vl \u2265 1.\nEvery k-dimensional eVASS game M = (Q, (Q\u0003 , Q^ ), T, \u03b1, \u03b2, \u03b4) induces a unique\ninfinite-state game GM where Q \u00d7 Nk is the set of vertices partitioned into Q\u0003 \u00d7 Nk and\nQ^ \u00d7 Nk , and pv 7\u2192 qu iff the following condition holds:\n\u2013 there is a transition t \u2208 T enabled in pv such that \u03b2(t) = q and for every 1 \u2264 l \u2264 k\nwe have that ul \u2212 vl is either non-negative or equal to \u03b4(t)l , depending on whether\n\u03b4(t)l = \u03c9 or not, respectively.\nNote that any play can get stuck only when a counter is zero, because there is at least one\nenabled transition otherwise.\nIn this paper, we are interested in VASS and eVASS games with non-selective and\nselective zero-reachability objectives. Formally, for every C \u2286 Q we define the set\nZC = {pv \u2208 Q \u00d7 Nk | p \u2208 C and vi = 0 for some 0 \u2264 i \u2264 k}\nand we also put Z = ZQ . Selective (or non-selective) zero-reachability objectives are reachability objectives where the set T of target configurations is equal to ZC for some C \u2286 Q\n(or to Z, respectively).\n3\n\nIn this paper, we consider infinitely-branching games with countable state space. The determinacy\nresult of Martin [25] holds also for this type of games, and memoryless determinacy can be easily\nestablished by standard methods.\n\n6\n\n\fAs we have already noted, our games with reachability objectives are memoryless\ndetermined and this result of course applies also to eVASS games with zero-reachability\nobjectives. However, since eVASS games have infinitely many vertices, not all memoryless\nstrategies are finitely representable. In this paper we will often deal with a simple form of\nmemoryless strategies, where the decision is independent of the current counter values;\nsuch strategies are called counterless strategies.\nDefinition 3. Given (the game induced by) an eVASS M = (Q, (Q\u0003 , Q^ ), T, \u03b1, \u03b2, \u03b4), a\nstrategy \u03c4 of player \u2299 \u2208 {\u0003, ^} is counterless if it determines a (fixed) transition t p for each\np \u2208 Q\u2299 , together with (fixed) values cl \u2208 N for all those l for which \u03b4(t p )l = \u03c9, so that\n\u03c4(pv) is the configuration arising by performing t p where \u03c9's are instantiated with cl .\n\n3 VASS and eVASS games with zero-reachability objectives\nIn this section, we analyze VASS and eVASS games with zero-reachability objectives. We\nfirst note the problems of our interest are undecidable for R(ZC ) objectives; this can be\nshown by (simple modifications of) standard techniques.\nProposition 4. The problem of deciding the winner in 2-dimensional VASS games with\nR(ZC ) objectives is undecidable. For 3-dimensional eVASS games, the same problem is\nhighly undecidable (i.e., beyond the arithmetical hierarchy).\nLet us note that Proposition 4 cannot be extended to one-dimensional eVASS games, which\nare analyzed later in Section 3.1. Further, by some trivial modifications of the proof of\nProposition 4 we also get the undecidability of the boundedness/coverability problems\nfor 2-dimensional VASS games (a given configuration pv is bounded if player ^ has a\nstrategy such that all counters stay bounded for every strategy of player \u0003; similarly, a\nconfiguration qv is coverable from an initial configuration pv if player ^ has a strategy\nsuch that a configuration of the form qv\u2032 , where v\u2032 \u2265 v, is reached for every strategy of\nplayer \u0003). The details are given in Appendix A.1.\nNow we turn our attention to R(Z) objectives. For the rest of this section, we fix a\nk-dimensional eVASS game M = (Q, (Q\u0003 , Q^ ), T, \u03b1, \u03b2, \u03b4). Since we are interested only in\nR(Z) objectives, we may safely assume that every transition p \u2192\n\u2212v q of M where p \u2208 Q^\nsatisfies vl , \u03c9 for every 1 \u2264 l \u2264 k (if there are some \u03c9-components in v, they can be\nsafely replaced with 0). We also use d to denote the branching degree of M, i.e, the least\nnumber such that every q \u2208 Q has at most d outgoing transitions.\nWe also use the partial order \u2264 on the set of configurations of M defined by pu \u2264 qv\niff p = q and u \u2264 v (componentwise). For short, we write Win^ instead of Win(^, R(Z))\nand Win\u0003 instead of Win(\u0003, S(Z)). Obviously, if player ^ has a winning strategy in qv,\nthen he can use \"essentially the same\" strategy in qu for every u \u2264 v (behaving in q\u2032 v\u2032\nas previously in q\u2032 (v\u2032 + v \u2212 u), which results in reaching 0 in some counter possibly even\nearlier). Similarly, if qv \u2208 Win\u0003 then qu \u2208 Win\u0003 for every u \u2265 v. Thus, we obtain the\nfollowing:\nProposition 5. Win^ is downwards closed and Win\u0003 is upwards closed w.r.t. \u2264.\nA direct corollary to Proposition 5 is that the set Win\u0003 is finitely representable by its subset\nMin\u0003 of minimal elements (note that Min\u0003 is necessarily finite because there is no infinite\nsubset of Nk with pairwise incomparable elements, as Dickson's Lemma shows). Technically, it is convenient to consider also symbolic configurations of M which are introduced\nin the next definition.\n7\n\n\fDefinition 6. A symbolic configuration is a pair qv where q \u2208 Q and v \u2208 (N \u222a {\u03c9})k . We\nsay that a given index l \u2208 {1, 2, . . . , k} is precise in qv if vl \u2208 N, otherwise it is symbolic in\nqv. The precision of qv, denoted by P(qv), is the number of indexes that are precise in qv.\nWe say that a configuration pu matches a symbolic configuration qv if p = q and ul = vl\nfor every l precise in qv. Similarly, we say that pu matches qv above a given bound B \u2208 N\nif pu matches qv and ul \u2265 B for every l symbolic in qv.\nWe extend the set Win\u0003 by all symbolic configurations qv such that some configuration\nmatching qv belongs to Win\u0003 . Similarly, the set Win^ is extended by all symbolic configurations qv such that all configurations matching qv belong to Win^ (note that every\nsymbolic configuration belongs either to Win\u0003 or to Win^ ). We also extend the previously\nfixed ordering on configurations to symbolic configurations by stipulating that \u03c9 \u2264 \u03c9 and\nn < \u03c9 for all n \u2208 N. Obviously, this extension does not influence the set Min\u0003 , and the\nwinning region Win^ can be now represented by its subset Max^ of all maximal elements,\nwhich is necessarily finite.\nOur ultimate goal is to compute the sets Min\u0003 and Max^ . Since our reachability games\nare determined, it actually suffices to compute just one of these sets. In the following we\nshow how to compute Min\u0003 .\nWe start with an important observation about winning strategies for player \u0003, which\nin fact extends the \"classical\" observation about self-covering paths in vector addition\nsystems presented in [28]. Let q \u2208 Q be such that qv \u2208 Win\u0003 for some v, i.e., q(\u03c9, . . . , \u03c9) \u2208\nWin\u0003 . This means that there is a strategy of player \u0003 that prevents unbounded decreasing of\nthe counters; we find useful to represent the strategy by a finite unrestricted self-covering\ntree for q. The word \"unrestricted\" reflects the fact that we also consider configurations\nwith negative and symbolic counter values. More precisely, an unrestricted self-covering\ntree for q is a finite tree T whose nodes are labeled by the elements of Q \u00d7 (Z \u222a {\u03c9})k\nsatisfying the following (\u03c9 is treated in the standard way, i.e., \u03c9 + \u03c9 = \u03c9 + c = \u03c9 for every\nc \u2208 Z).\n\u2013 The root of T is labeled by q(0, . . . , 0).\n\u2013 If n is a non-leaf node of T labeled by pu, then\n\u2022 if p \u2208 Q\u0003 , then n has only one successor labeled by some rt such that M has a\ntransition p \u2192\n\u2212v r where t = u + v;\n\u2022 if p \u2208 Q^ , then there is a one-to-one correspondence between the successors of\nn and transitions of M of the form p \u2192\n\u2212v r. The node which corresponds to a\nv\ntransition p \u2192\n\u2212 r is labeled by rt where t = u + v.\n\u2013 If n is a leaf of T labeled by pu, then there is another node m (where m , n) on the\npath from the root of T to n which is labeled by pt for some t \u2264 u.\nThe next lemma bounds the depth of such a tree.\nLemma 7. Let q(\u03c9, . . . , \u03c9) \u2208 Win\u0003 (i.e., qv \u2208 Win\u0003 for some v). Then there is an unre2\nstricted self-covering tree for q of depth at most f (|Q|, d, k) = 2(d\u22121)*|Q| * |Q|c*k , where c is a\nfixed constant independent of M (and d is the branching degree of M).\nLemma 7 thus implies that if q(\u03c9, . . . , \u03c9) \u2208 Win\u0003 , then qu \u2208 Win\u0003 for all u with ul \u2265\nf (|Q|, d, k) for all l \u2208 {1, 2, . . . , k} (recall that each counter can be decreased at most by\none in a single transition). The next lemma shows that we can compute the set of all q \u2208 Q\nsuch that q(\u03c9, . . . , \u03c9) \u2208 Win\u0003 (the lemma is formulated \"dually\", i.e., for player ^).\n8\n\n\fLemma 8. The set of all q \u2208 Q such that q(\u03c9, . . . , \u03c9) \u2208 Win^ is computable in space\nbounded by a polynomial function g(|Q|, d, k).\nAn important observation, which is crucial in our proof of Lemma 8 and perhaps interesting on its own, is that if q(\u03c9, . . . , \u03c9) \u2208 Win^ , then player ^ has a counterless strategy\nwhich is winning in every configuration matching q(\u03c9, . . . , \u03c9). The details are given in\nAppendix A.2.\nTo sum up, we can compute the set of all q(\u03c9, . . . , \u03c9) \u2208 Win\u0003 and a bound B which is\n\"safe\" for all q(\u03c9, . . . , \u03c9) \u2208 Win\u0003 in the sense that all configurations matching q(\u03c9, . . . , \u03c9)\nabove B belong to Win\u0003 . Intuitively, the next step is to find out what happens if one of the\ncounters, say the first one, stays bounded by B. Obviously, there is the least j \u2264 B such that\nq( j, \u03c9, . . . , \u03c9) \u2208 Win\u0003 , and there is a bound D > B such that all configurations matching\nq( j, \u03c9, . . . , \u03c9) above D belong to Win\u0003 . If we manage to compute the minimal j (also for\nthe other counters, not just for the first one) and the bound D, we can go on and try to\nbound two counters simultaneously by D, find the corresponding minima, and construct a\nnew \"safe\" bound. In this way, we eventually bound all counters and compute the set Min\u0003 .\nIn our next definition, we introduce some notions that are needed to formulate the above\nintuition precisely. (Recall that P(qv) gives the number of precise, i.e. non-\u03c9, elements of\nv.)\nj\n\nDefinition 9. For a given 0 \u2264 j \u2264 k, let SymMin\u0003 be the set of all minimal qv \u2208 Win\u0003 such\nS\nthat P(qv) = j. Further, let SymMin\u0003 = ki=0 SymMini\u0003 . We say that a given B \u2208 N is safe\nSj\nfor precision j, where 0 \u2264 j \u2264 k, if for every qv \u2208 i=0\nSymMini\u0003 we have that vl \u2264 B for\nevery precise index l in v, and every configuration matching qv above B belongs to Win\u0003 .\nObviously, every SymMin\u0003j (and hence also SymMin\u0003 ) is finite, and Min\u0003 = SymMink\u0003 .\nAlso observe that SymMin0\u0003 is computable in time exponential in |Q| and k by Lemma 8,\nand a bound which is safe for precision 0 is computable in polynomial time by Lemma 7.\nNow we design an algorithm which computes SymMin\u0003j+1 and a bound safe for precision\nj+1, assuming that SymMini\u0003 for all i \u2264 j and a bound safe for precision j have already\nbeen computed. A detailed description of the algorithm and the associated proofs can be\nfound in Appendix A.3.\nRemark 10. To prevent possible confusions, let us note explicitly that the set SymMin\u0003j+1\ncannot be obtained from SymMin\u0003j simply by considering all qv \u2208 SymMin\u0003j and replacj+1\ning some vl , where l is symbolic in qv, with some concrete value. The set SymMin\u0003\nj\ncan be substantially richer. For example, if SymMin\u0003 contains p(1, \u03c9) and p(\u03c9, 1), then\nSymMin\u0003j+1 surely contains some elements obtained by replacing the \u03c9's with some concrete values, say p(1, 10) and p(12, 1), but it can contain also other incomparable elements\nsuch as p(2, 9), p(3, 8), . . .\nSj\nLemma 11. Let 0 \u2264 j < k, and let us assume that i=0\nSymMini\u0003 has already been comj+1\nputed, together with some bound B \u2208 N which is safe for precision j. Then SymMin\u0003\nj+1\nis computable in time exponential in |Q| * B , d, and k\u2212 j\u22121, and the bound B + f (|Q| *\nB j+1 , d, k\u2212 j\u22121) is safe for precision j + 1 (here f is the function of Lemma 7 and d is the\nbranching degree of M).\nNow we can easily evaluate the total complexity of computing SymMin\u0003 (and hence also\nMin\u0003 ). If we just examine the recurrence of Lemma 11, we obtain that the set SymMin\u0003\nis computable in k-exponential time. However, we can actually decrease the height of the\n9\n\n\ftower of exponentials by one when we incorporate the results presented in Section 3.1,\nwhich imply that for one-dimensional eVASS games, the depth of an unrestricted selfcovering tree can be bounded by a polynomial in |Q| and d, and the set of all q \u2208 Q such\nthat q(\u03c9) \u2208 Win^ is computable in polynomial time. Hence, we actually need to \"nest\"\nLemma 11 only k\u22121 times. Thus, relying on the results of Section 3.1, we obtain the\nfollowing (where 0-exponential time denotes polynomial time):\nTheorem 12. (Given a k-dimensional eVASS), the set Min\u0003 is computable in (k\u22121)exponential time.\nLet us note a substantial improvement in complexity would be achieved by improving\nthe bound presented in Lemma 7. Actually, it is not so important what is the depth of an\nunrestricted self-covering tree, but what are the minimal numbers that allow for applying\nthe strategy described by this tree without reaching zero (i.e., what is the maximal decrease\nof a counter in the tree). A more detailed complexity analysis based on the introduced\nparameters reveals that if the maximal counter decrease was just polynomial in the number\nof control states (which is our conjecture), the complexity bound of Theorem 12 would be\npolynomial for every fixed dimension k (see also Section 4).\nNote that after computing the set Min\u0003 , we can easily compute a finite description\nof a strategy \u03c3 for player \u0003 which is winning in every configuration of Win\u0003 . For every\npv \u2208 Min\u0003 such that p \u2208 Q\u0003 , we put \u03c3(pv) = qv\u2032 , where qv\u2032 is (some) configuration\nsuch that qv\u2032 \u2265 qt for some qt \u2208 Min\u0003 . Note that there must be at least one such qv\u2032 and\nit can be computed effectively. For every configuration pu such that pu \u2265 pv for some\npv \u2208 Min\u0003 , we put \u03c3(pu) = q(v\u2032 +u\u2212v) where \u03c3(pv) = qv\u2032 (if there are more candidates\nfor pv, any of them can be chosen). It is easy to see that \u03c3 is winning in every configuration\nof Win\u0003 . Also observe that if we aim at constructing a winning strategy for player \u0003 which\nminimizes the concrete numbers used to substitute \u03c9's, we can use Min\u0003 to construct an\n\"optimal\" choice of the values which are sufficient (and necessary) to stay in the winning\nregion of player \u0003.\n3.1 One-dimensional VASS and eVASS games with zero-reachability objectives.\nIn this subsection, we present a complete solution for the special case of one-dimensional\nVASS and eVASS games with zero-reachability objectives.\nFor the rest of this section, we fix a one-dimensional eVASS game M =\n(Q, (Q\u0003 , Q^ ), T, \u03b1, \u03b2, \u03b4) and C \u2286 Q. For every i \u2208 N, let Win^ (C, i) = {p \u2208 Q | p(i) \u2208\nWin(^, R(ZC ))}. It is easy to see that if Win^ (C, i) = Win^ (C, j) for some i, j \u2208 N, then also\nWin^ (C, i+1) = Win^ (C, j+1). Let mC be the least i \u2208 N such that Win^ (C, i) = Win^ (C, j)\nfor some j > i, and let nC be the least i > 0 such that Win^ (C, mC ) = Win^ (C, mC +i). Obviously, mc + nc \u2264 2|Q| and for every i \u2265 mc we have that Win^ (C, i) = Win^ (C, mC + ((i \u2212 mC )\nmod nC )). Hence, the winning regions of both players are fully characterized by all\nWin^ (C, i), where 0 \u2264 i < mC + nC .\nThe selective subcase in analyzed in the following theorem. The PSPACE lower bound\nis obtained by reducing the emptiness problem for alternating finite automata (AFA) with\none letter alphabet, which is known to be PSPACE complete [16] (see also [21] for a simpler proof). The PSPACE upper bound follows by employing the result of [31] which says\nthat the emptiness problem for alternating two-way parity word automata (2PWA) is in\nPSPACE (we would like to thank Olivier Serre for providing us with relevant references).\nThe effective constructability of the winning strategies for player \u0003 and player ^ follows\n10\n\n\fby applying the results on non-selective termination presented below. The details are given\nin Appendix A.4.\nTheorem 13. The problem whether p(i) \u2208 Win(^, R(ZC )) is PSPACE-complete. Further,\nthere is a strategy \u03c3 winning for player \u0003 in every configuration of Win(\u0003, S(ZC )) such\nthat for all p \u2208 Q\u0003 and i \u2265 mC we have that \u03c3(p(i)) = \u03c3(p(mC + ((i \u2212 mC ) mod nC ))).\nThe numbers mC , nC and the tuple of all Win^ (C, i) and \u03c3(p(i)), where 0 \u2264 i < mC +nC and\np \u2208 Q\u0003 , are constructible in time exponential in |M|.\nIn the non-selective subcase, the situation is even better. The winning regions for both players are monotone, which means that mQ \u2264 |Q| and nQ = 1. Further, all of the considered\nproblems are solvable in polynomial time.\nTheorem 14. The problem whether p(i) \u2208 Win(^, R(Z)) is in P. Further, there are counterless strategies \u03c3 and \u03c0 such that \u03c3 is winning for player \u0003 in every configuration of\nWin(\u0003, S(Z)) and \u03c0 is winning for player ^ in every configuration of Win(^, R(Z)). The\ntuple of all Win^ (Q, i), \u03c3(p), and \u03c0(q), where 0 \u2264 i \u2264 mC , p \u2208 Q\u0003 , and q \u2208 Q^ , is constructible in time polynomial in |M|.\n\n4 Conclusions, future work\nTechnically, the most involved result presented in this paper is Theorem 12. This decidability result is not obvious, because most of the problems related to formal verification\nof Petri nets (equivalence-checking, model-checking, etc.) are undecidable [8, 17, 23, 5].\nSince the upper complexity bound given in Theorem 12 is complemented only by the\nEXPSPACE lower bound, which is easily derivable from [24], there is a complexity gap\nwhich constitutes an interesting challenge for future work. We conjecture that for a suitable\n(and reasonable) choice of parameters, one might even obtain fixed parameter tractability\nof the problem. So far, we have not found any arguments against the hypothesis that the\nproblem is tractable, i.e., solvable in polynomial time, even for a fixed number of counters\n(note that the EXPSPACE lower bound does not hold for a fixed number of counters).\n\nReferences\n1. P.A. Abdulla, A. Bouajjani, and J. d'Orso. Monotonic and downward closed games. JLC,\n18(1):153\u2013169, 2008.\n2. P.A. Abdulla and K. \u010cer\u0101ns. Simulation is decidable for one-counter nets. In Proceedings of\nCONCUR'98, volume 1466 of LNCS, pages 253\u2013268. Springer, 1998.\n3. P.A. Abdulla, K. \u010cer\u0101ns, B. Jonsson, and Y.-K. Tsay. General decidability theorems for infinitestate systems. In Proceedings of LICS'96, pages 160\u2013170. IEEE, 1996.\n4. I. Borosh and L. Treybis. Bounds on positive integral solutions of linear Diophantine equations.\nProc. Amer. Math. Soc., 55:299\u2013304, 1976.\n5. O. Burkart, D. Caucal, F. Moller, and B. Steffen. Verification on infinite structures. Handbook\nof Process Algebra, pages 545\u2013623, 2001.\n6. S. Demri, M. Jurdzi\u0144ski, O. Lachish, and R. Lazi\u0107. The covering and boundedness problems\nfor branching vector addition systems. In Proceedings of FST&TCS 2009, volume 4 of LIPIcs,\npages 181\u2013192. Schloss Dagstuhl, 2009.\n7. S. Demri, R. Lazic, and A. Sangnier. Model checking freeze LTL over one-counter automata.\nIn Proceedings of FoSSaCS 2008, volume 4962 of LNCS. Springer, 2008.\n\n11\n\n\f8. J. Esparza. Decidability of model checking for infinite-state concurrent systems. AI, 34:85\u2013107,\n1997.\n9. K. Etessami, D. Wojtczak, and M. Yannakakis. Quasi-birth-death processes, tree-like QBDs,\nprobabilistic 1-counter automata, and pushdown systems. In Proceedings of 5th Int. Conf. on\nQuantitative Evaluation of Systems (QEST'08). IEEE, 2008.\n10. A. Finkel and J. Goubault-Larrecq. Forward analysis for WSTS, Part I: Completions. In Proceedings of STACS 2009, volume 3 of LIPIcs, pages 433\u2013444. Schloss Dagstuhl, 2009.\n11. A. Finkel and J. Goubault-Larrecq. Forward analysis for WSTS, Part II: Complete WSTS. In\nProceedings of ICALP 2009, volume 5556 of LNCS, pages 188\u2013199. Springer, 2009.\n12. A. Finkel and Ph. Schnoebelen. Well structured transition systems everywhere! TCS, 256(1\u2013\n2):63\u201392, 2001.\n13. E. Gr\u00e4del, W. Thomas, and T. Wilke. Automata, Logics, and Infinite Games. Number 2500 in\nLNCS. Springer, 2002.\n14. C. Haase, S. Kreutzer, J. Ouaknine, and J. Worrell. Reachability in succinct and parametric onecounter automata. In Proceedings of CONCUR 2009, volume 5710 of LNCS, pages 369\u2013383.\nSpringer, 2009.\n15. D. Harel. Effective transformations on infinite trees with applications to high undecidability\ndominoes, and fairness. JACM, 33(1), 1986.\n16. M. Holzer. On emptiness and counting for alternating finite automata. In Developments in\nLanguage Theory II, pages 88\u201397. World Scientific, 1995.\n17. P. Jan\u010dar. Undecidability of bisimilarity for Petri nets and some related problems. TCS,\n148(2):281\u2013301, 1995.\n18. P. Jan\u010dar. Decidability of bisimilarity for one-counter processes. I&C, 158(1):1\u201317, 2000.\n19. P. Jan\u010dar, A. Ku\u010dera, and F. Moller. Simulation and bisimulation over one-counter processes. In\nProceedings of STACS 2000, volume 1770 of LNCS, pages 334\u2013345. Springer, 2000.\n20. P. Jan\u010dar, A. Ku\u010dera, F. Moller, and Z. Sawa. DP lower bounds for equivalence-checking and\nmodel-checking of one-counter automata. I&C, 188(1):1\u201319, 2004.\n21. P. Jan\u010dar and Z. Sawa. A note on emptiness for alternating finite automata with a one-letter\nalphabet. IPL, 104(5):164\u2013167, 2007.\n22. A. Ku\u010dera. The complexity of bisimilarity-checking for one-counter processes. TCS, 304(1\u2013\n3):157\u2013183, 2003.\n23. A. Ku\u010dera and P. Jan\u010dar. Equivalence-checking on infinite-state systems: Techniques and results.\nTPLP, 6(3):226\u2013264, 2006.\n24. R. Lipton. The reachability problem requires exponential space. Technical report 62, Yale\nUniversity, 1976.\n25. D.A. Martin. Borel determinacy. Annals of Mathematics, Second Series, 102(2):363\u2013371, 1975.\n26. M.L. Minsky. Computation: Finite and Infinite Machines. Prentice-Hall, 1967.\n27. J.L. Peterson. Petri Net Theory and the Modelling of Systems. Prentice-Hall, 1981.\n28. C. Rackoff. The covering and boundedness problems for vector addition systems. TCS, 6:223\u2013\n231, 1978.\n29. W. Reisig. Petri Nets-An Introduction. Springer, 1985.\n30. L.E. Rosier and H.-C. Yen. A multiparameter analysis of the boundedness problem for vector\naddition systems. JCSS, 32:105\u2013135, 1986.\n31. O. Serre. Parity games played on transition graphs of one-counter processes. In Proceedings of\nFoSSaCS 2006, volume 3921 of LNCS, pages 337\u2013351. Springer, 2006.\n32. W. Thomas. Infinite games and verification. In Proceedings of CAV 2003, volume 2725 of\nLNCS, pages 58\u201364. Springer, 2003.\n33. R. Valk and M. Jantzen. The residue of vector sets with applications to decidability problems in\nPetri nets. AI, 21:643\u2013674, 1985.\n34. K.N. Verma and J. Goubault-Larrecq. Karp-Miller trees for a branching extension of VASS.\nDiscr. Math. & Theor. Comp. Sci., 7(1):217\u2013230, 2005.\n35. I. Walukiewicz. A landscape with games in the background. In Proceedings of LICS 2004,\npages 356\u2013366. IEEE, 2004.\n\n12\n\n\fA Proofs\nIn this section we give full proofs of our results together with some auxiliary observations.\nA.1 A proof of Proposition 4\nProposition 4. The problem of deciding the winner in 2-dimensional VASS games with\nR(ZC ) objectives is undecidable. For 3-dimensional eVASS games, the same problem is\nhighly undecidable (beyond the arithmetical hierarchy).\nProof. The first claim is proven by reducing the halting problem for Minsky machines. A Minsky machine with two counters c1 , c2 is a finite sequence of numbered instructions 1:ins1 , * * * , m:insm , where insm = halt, and for every 1 \u2264 i <\nm we have that insi is either of the form inc c j ; goto k (type I instructions) or\nif c j =0 then goto k else dec c j ; goto n (type II instructions). Here j \u2208 {1, 2}. The\nproblem whether a given Minsky machine with two counters initialized to 0 halts (i.e.,\nexecutes halt in a finite computation initialized by ins1 ) is undecidable [26]. For a given\nMinsky machine M with m instructions, we construct a 2-dimensional VASS game as\nfollows. For every 1 \u2264 i \u2264 m we add a control state qi \u2208 Q^ . Further, for every type I instruction li : inc c j ; goto k we add a transition qi \u2192 qk labeled by (u1 , u2 ), where u j = 1\nand u1 + u2 = 1. For every type II instruction if c j =0 then goto k else dec c j ; goto n\nwe add control states pi , ri \u2208 Q\u0003 , and transitions\n(u ,u )\n\n2\n\u2192\nq j,\nqi \u2212\u2212\u22121\u2212\u2212\n\n(0,0)\n\n(0,0)\n\npi \u2212\u2212\u2212\u2192 qk ,\n\nqi \u2212\u2212\u2212\u2192 pi ,\n\n(u ,u )\n\n2\n\u2212\u22121\u2212\u2212\n\u2192\nri ,\npi \u2212\n\n(0,0)\n\nri \u2212\u2212\u2212\u2192 ri ,\n(0,\u22121)\n\n(\u22121,0)\n\nwhere u j = \u22121 and u1 +u2 = \u22121. Finally, we add transitions qm \u2212\u2212\u2212\u2212\u2192 qm and qm \u2212\u2212\u2212\u2212\u2192 qm .\nNow one can easily check that M halts iff q1 (0, 0) \u2208 Win(^, R(Z{qm } )).\nA proof of the second claim is obtained by reducing the problem whether a given nondeterministic Minsky machine with two counters initialized to zero has an infinite computation such that the initial instruction is executed infinitely often (this problem is known\nto be \u03a311 -complete [15]). Formally, a nondeterministic Minsky machine with two counters\nc1 , c2 is a finite sequence of numbered instructions 1:ins1 , * * * , m:insm , where each insi is\nof one of the following forms (where j \u2208 {1, 2}):\n\u2013 c j := c j +1; goto k (type I instructions);\n\u2013 if c j =0 then goto k else c j := c j \u22121; goto n (type II instructions);\n\u2013 goto {k or n} (type III instructions).\nHere the indexes k, n range over {1, * * * , m}. Note that we may safely assume that the first\ninstruction is of the form 1 : c1 := c1 +1; goto 2. For a given nondeterministic Minsky\nmachine M with m instructions, we construct a 3-dimensional eVASS game as follows. For\n(1,0,\u03c9)\nevery 1 \u2264 i \u2264 m we add a control state qi \u2208 Q\u0003 . Further, we add a transition q1 \u2212\u2212\u2212\u2212\u2212\u2192 q2 ,\n(u1 ,u2 ,\u22121)\nand for every 2 \u2264 i \u2264 m we add either the transition qi \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 qk where u j = 1 and\nu1 + u2 = 1, or control states pi , ri \u2208 Q^ together with transitions\n(u ,u ,\u22121)\n\nqi \u2212\u2212\u22121\u2212\u22122\u2212\u2212\u2192 q j ,\n\n(0,0,\u22121)\n\nqi \u2212\u2212\u2212\u2212\u2212\u2192 pi ,\n\n(0,0,\u22121)\n\n(0,0,\u22121)\n\npi \u2212\u2212\u2212\u2212\u2212\u2192 qk ,\n\n(0,0,\u22121)\n\n(u ,u ,\u22121)\n\npi \u2212\u2212\u22121\u2212\u22122\u2212\u2212\u2192 ri ,\n\n(0,0,\u22121)\n\nri \u2212\u2212\u2212\u2212\u2212\u2192 ri ,\n\nor transitions qi \u2212\u2212\u2212\u2212\u2212\u2192 qk , qi \u2212\u2212\u2212\u2212\u2212\u2192 qn , depending on whether insi is a type I, type II,\nor type III instruction, respectively. Note that the third counter can be incremented by an\n13\n\n\farbitrarily large value whenever the control state q1 is visited. Hence, if M has an infinite\ncomputation such that ins1 is executed infinitely often, then player \u0003 can win the game\ninitiated in q1 (0, 0, 0) by simulating this infinite computation and \"guessing\" the number\nof steps that are needed to revisit q1 . It is also easy to see that if M has no such computation,\nthen player ^ can win.\n\u2294\n\u2293\nNote that the 2-dimensional VASS game constructed in the proof of the first claim\nhas the property that M halts iff player ^ has a strategy such that for every strategy of\nplayer \u0003 the play initiated in q1 (0, 0) reaches a configuration qm u where u \u2265 (0, 0). Hence,\nthe coverability problem for 2-dimensional VASS games is also undecidable. Similarly,\n(1,1)\n(0,0)\nif we change the transition ri \u2212\u2212\u2212\u2192 ri into ri \u2212\u2212\u2212\u2192 ri , we obtain that M is space-bounded\niff player ^ has a strategy such that for every strategy of player \u0003 the play initiated in\nq1 (0, 0) is bounded. This means that the boundedness problem for 2-dimensional VASS\ngames is undecidable. Finally, let us prove the observation mentioned in Section 1, which\nsays that the existence of a self-covering (but not necessarily zero-avoiding) tree in for\na given eVASS configuration is undecidable. To prevent possible confusions, let us first\nclarify what we mean by a self-covering tree for an eVASS configuration.\nLet M = (Q, (Q\u0003 , Q^ ), T, \u03b1, \u03b2, \u03b4) be a k-dimensional eVASS game and qv a configuration of M. A self-covering tree for qv is a finite tree T whose nodes are labeled by the\nelements of Q \u00d7 Nk satisfying the following:\n\u2013 The root of T is labeled by qv.\n\u2013 If n is an inner node of T labeled by pu, then\n\u2022 if p \u2208 Q\u0003 , then n has exactly one successor labeled by some rt such that pu 7\u2192 rt;\n\u2022 if p \u2208 Q^ , then n has exactly one successor for every rt such that pu 7\u2192 rt, and\nthe label of this successor is rt.\n\u2013 If n is a leaf of T labeled by pu, then there is another node m (where m , n) on the\npath from the root of T to n such that the label pt of m satisfies t < u (i.e., t \u2264 u and\nt l < ul for at least one index l).\nConsider again a Minsky machine M with two counters c1 , c2 initialized to zero and instructions 1:ins1 , * * * , m:insm . We construct a 3-dimensional eVASS game as follows. For\nevery 1 \u2264 i \u2264 m we add a control state qi \u2208 Q^ . Further, we add a special control state\n(0,0,\u03c9)\nq0 \u2208 Q\u0003 and a transition q0 \u2212\u2212\u2212\u2212\u2212\u2192 q1 . For every type I instruction li : inc c j ; goto k\nwe add a transition qi \u2192 qk labeled by (u1 , u2 , \u22121), where u j = 1 and u1 + u2 = 1. For\nevery type II instruction if c j =0 then goto k else dec c j ; goto n we add control states\npi , ri \u2208 Q\u0003 , and transitions\n(u ,u ,\u22121)\n\nqi \u2212\u2212\u22121\u2212\u22122\u2212\u2212\u2192 q j ,\n\n(0,0,\u22121)\n\nqi \u2212\u2212\u2212\u2212\u2212\u2192 pi ,\n\n(0,0,\u22121)\n\npi \u2212\u2212\u2212\u2212\u2212\u2192 qk ,\n\n(u ,u ,\u22121)\n\npi \u2212\u2212\u22121\u2212\u22122\u2212\u2212\u2192 ri ,\n\n(1,1,1)\n\nri \u2212\u2212\u2212\u2212\u2192 ri ,\n\n\u2212\u2212\u2212\u2192 qm . Now it is easy\nwhere u j = \u22121 and u1 + u2 = \u22121. Finally, we add a transition qm \u2212(1,1,1)\nto check that M halts iff there is a self-covering tree for q0 (0, 0, 0).\nA.2 A proof of Lemma 7 and Lemma 8\nAs in Section 3, we fix a k-dimensional eVASS game M = (Q, (Q\u0003 , Q^ ), T, \u03b1, \u03b2, \u03b4) such\nthat for every transition p \u2192\n\u2212v q of M where p \u2208 Q^ we have that vl , \u03c9 for every\nl \u2208 {1, 2, . . . , k}. Our aim is to prove the following:\n14\n\n\fLemma 7. Let q(\u03c9, . . . , \u03c9) \u2208 Win\u0003 (i.e., qv \u2208 Win\u0003 for some v). Then there is an unre2\nstricted self-covering tree for q of depth at most f (|Q|, d, k) = 2(d\u22121)*|Q| * |Q|c*k , where c is a\nfixed constant independent of M (and d is the branching degree of M).\nLemma 7 is proven in two stages. We start with a special case when Q^ = \u2205. Observe that\nif Q^ = \u2205, then an (unrestricted) self-covering tree for q \u2208 Q is just a path of the form\nqv \u2192\n\u2212 \u2217 pu \u2192\n\u2212 + pu\u2032 where v = (0, . . . , 0) and u \u2264 u\u2032 (recall that u, u\u2032 \u2208 (Z \u222a {\u03c9})k ). Below\nin Lemma 15 we show that if there is some path of the above form, then there is also a\n\"short\" one. The proof is based on arguments similar to the ones used by Rackoff in [28].\nHowever, some extra care is needed to handle the symbolic transitions. Another problem\nis that the result of [28] is in fact somewhat different, because it studies the existence of\nan increasing self-covering path for VAS (without states). Therefore, we give an explicit\nproof.\nWe then proceed to handle the general case, allowing Q^ , \u2205. After a few technical\npropositions we show Lemma 18, which then easily implies Lemma 7.\nWe then prove Lemma 19, showing that player ^ has a counterless winning strategy in\neach q(\u03c9, . . . , \u03c9) \u2208 Win^ , and finally we derive Lemma 8.\nLemma 15. Assume that Q^ = \u2205 and that q \u2208 Q is a control state such that q(\u03c9, . . . , \u03c9) \u2208\nWin\u0003 . Then there is an unrestricted self-covering tree for q of depth at most h(|Q|, k) =\n2\n(|Q| + 1)c*k where c is a constant independent of M.\nProof. We start by introducing some notation. Let p, r \u2208 Q. A simple sequence from p to\nr is a sequence of transitions t1 . . . tn such that\n\u2013 \u03b1(t1 ) = p and \u03b2(tn ) = r\n\u2013 for all 1 \u2264 i < n we have \u03b2(ti ) = \u03b1(ti+1 )\n\u2013 for all 1 \u2264 i < j \u2264 n, where either i > 1, or j < n, we have \u03b1(ti ) , \u03b1(t j )\nA simple cycle on p is a simple sequence from p to p. Given a sequence of transitions\nP\nT = t1 . . . tn , we denote by e(T ) the effect of T given by ni=1 \u03b4(ti ).\n\u2217\n+\n\u2032\nLet qv \u2192\n\u2212 pu \u2192\n\u2212 pu be an unrestricted self-covering tree (a path, in fact) for q, where\nu \u2264 u\u2032 . Obviously, we can safely assume that the sequence of transitions which induces the\npath qv \u2192\n\u2212 \u2217 pu is simple (otherwise, we make it simple by repeatedly removing all simple\ncycles). Let T = t1 . . . tn be the sequence of transitions which induces the path pu \u2192\n\u2212 + pu\u2032 ,\nand let q1 , . . . , qm be all control states which occur in transitions of T , ordered so that for\ni < j we have that the first occurrence of qi precedes the first occurrence of q j in T . For\nevery 1 \u2264 i < m, we denote by T i the subsequence t j t j+1 . . . tl of T where j and l are the\nleast indexes such that \u03b1(t j ) = qi and \u03b2(tl ) = qi+1 , respectively. We also use T m to denote\nthe (unique) suffix of T such that T = T 1 . . . T m\u22121 T m .\nNow we show that each T i can be \"decomposed\" into a simple sequence from qi to\nqi+1 and a number of simple cycles. Then, we reduce the number of simple cycles needed\nto obtain an unrestricted self-covering tree for q using similar arguments as in [28].\nWe start by successively removing simple cycles from T i (and \"remembering\" their\n(where\neffects). For every 1 \u2264 i \u2264 m, we construct a sequence of vectors w1i , w2i , . . . w\u03be[i]\ni\n\u03be[i]\n0\n1\n\u03be[i] is defined below) and a sequence of transition sequences T i , T i , . . . T i as follows:\n\u2013 T i0 = T i\n\u2013 If T il is a simple sequence, set \u03be[i] = l and stop the construction.\n15\n\n\f\u2013 Otherwise, let C be the first simple cycle in T il . The sequence T il+1 is obtained from\nT il by removing C and wl+1\nis defined to be the effect e(C) of C. (Observe that e(T il ) =\ni\nl+1\nl+1\ne(T i ) + wi .)\nLet Wi be the set {w1i , w2i , . . . , w\u03be[i]\ni }, and let W =\ne(T ) =\n\nm X\nX\n\nn[i, u] * u + e(T i\u03be[i] ) =\n\nSm\n\nWi . We have that\n\n\uf8eb m\n\uf8f6\nm\nX \uf8ec\uf8ecX\nX\n\uf8ec\uf8ec\uf8ec n[i, u]\uf8f7\uf8f7\uf8f7\uf8f7\uf8f7 * u +\ne(T i\u03be[i] ) \u2265 0\n\uf8ed\n\uf8f8\n\nu\u2208W\n\ni=1 u\u2208Wi\n\ni=1\n\ni=1\n\n(1)\n\ni=1\n\nwhere each n[i, u] is the number of occurrences of u in w1i , w2i , . . . w\u03be[i]\ni .\nP\nPm\n\u03be[i]\nWhen we denote the vector m\ne(T\n)\nby\nc\nand\nthe\nsum\ni=1\ni=1 n[i, u] by n[u], the\ni\nabove inequality takes the form\nX\n\nn[u] * u + c \u2265 0\n\n(2)\n\nu\u2208W\n\nP\nObserve that if n\u2032 [u] is a non-negative integer for every u \u2208 W and u\u2208W n\u2032 [u] * u + c \u2265 0,\nthen the tuple of all n\u2032 [u] determines a path of the form pt \u2192\n\u2212 \u2217 pt \u2032 where t, t \u2032 \u2208 Zk\n\u2032\nand t \u2264 t . To see this, realize that each u \u2208 W is an effect of a simple cycle on some\nqi , and c is the effect of the sequence T 1\u03be[1] T 2\u03be[2] . . . T m\u03be[m] . Hence, it suffices to follow the\nsequence T 1\u03be[1] T 2\u03be[2] . . . T m\u03be[m] and whenever a control state qi is visited for the first time,\nwe do the following: For every u in W which is an effect of a simple cycle C on qi , we\nperform the cycle C exactly n\u2032 [u]-times. Whenever \u03c9 occurs in a transition, we set the\ncorresponding counter to a value which is \"high enough\", i.e., greater than the length of\nthe path we are constructing. Thus, we produce a sequence of transitions with the total\nP\neffect u\u2208W n\u2032 [u] * u + c \u2265 0.\nDue to the above observations, it suffices to show that there is a tuple n\u2032 [u] of \"small\"\nP\nnon-negative integers such that u\u2208W n\u2032 [u] * u + c \u2265 0. To achieve that, we use [28,\nLemma 4.4] (the lemma was originally proved by Borosh&Treybis [4], but we use the\nparticular form presented in [28]). Since [28, Lemma 4.4] works for systems of equations\nin real numbers, we have to get rid of \u03c9 components. Note that whenever a transition\nwhose label contains \u03c9 in some component is executed along a path, the corresponding\ncounter can be set to a sufficiently high number to make the path non-decreasing in this\nparticular counter. Hence, we need to make sure that whenever \u03c9 occurs in some component along the original sequence T , it also occurs in the same component in the reduced\nsequence. This is implemented by slightly modifying the system of equations (2) in the\nway described below.\nLet us define\n\u03a9 := {l | \u2203u \u2208 W : u(l) = \u03c9}\nTo every u \u2208 W we associate a k-dimensional vector u\u2032 of integers as follows:\n\uf8f1\n\uf8f4\n\uf8f4\n0\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n1\n\uf8f2\nu\u2032 (l) := \uf8f4\n\uf8f4\n\uf8f4\n0\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f3u(l)\n\nif c(l) = \u03c9;\nif l \u2208 \u03a9 and u(l) = \u03c9;\nif l \u2208 \u03a9 and u(l) , \u03c9;\notherwise.\n16\n\n\fWe define c\u2032 by\n\nNote that\n\n\uf8f1\n\uf8f4\n\uf8f4\n0\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f2\n\u2032\nc (l) := \uf8f4\n\u22121\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f3 c(l)\nX\n\nif c(l) = \u03c9;\nif l \u2208 \u03a9;\notherwise.\n\nn[u] * u\u2032 + c\u2032 \u2265 0\n\nu\u2208W\n\nOn the other hand, an arbitrary tuple of non-negative numbers n\u2032 [u] satisfying\nX\nn\u2032 [u] * u\u2032 + c\u2032 \u2265 0\n\n(3)\n\nu\u2208W\n\ndetermines a path pt \u2192\n\u2212 \u2217 pt \u2032 , where t \u2264 t \u2032 and the length of this path is at most |Q|2 +\nP\n\u2032\nu\u2208W n [u] * |Q|, as follows:\n\u2013 Start in q1 = p.\n\u2013 For i = 1, 2, . . . , m do the following:\n\u2022 For every u \u2208 W which is an effect of a simple cycle C on qi execute the cycle C\nexactly n\u2032 [u]-times. Whenever \u03c9 is encountered in some component, add |Q|2 +\nP\n\u2032\nu\u2208W n [u] * |Q| to the corresponding counter.\n\u2022 Follow T i\u03be[i] . Whenever \u03c9 is encountered in some component, add |Q|2 +\nP\n\u2032\nu\u2208W n [u] * |Q| to the corresponding counter.\nNow we apply [28, Lemma 4.4] to obtain a small solution of the system of equations (3).\nFirst, observe that |W| \u2264 (2|Q| + 1)k because each element of W is an effect of a simple\ncycle. So the number of variables of the system (3), denoted by d2 in [28, Lemma 4.4], is\nbounded by (2|Q| + 1)k . The absolute values of numbers occurring in the system (3) are\nbounded by |Q|2 (such numbers may occur only in c\u2032 , the absolute values of components\nof u\u2032 are bounded by |Q|). Thus, d = (2|Q| + 1)2k bounds both d2 and the absolute values\nof numbers occurring in (3).\nBy Lemma [28, 4.4], there is a non-negative solution of the system (3) in which all\n\u2032\nnumbers are bounded by dc k for a suitable constant c\u2032 independent of M. Thus there is\na constant c\u2032\u2032 , which does not depend on M, such that the absolute values of all numbers\n\u2032\u2032 2\noccurring in the solution are bounded by (|Q| + 1)c *k . It follows that there is a path pu \u2192\n\u2212\u2217\n\u2032\u2032\n\u2032\u2032\npu , u \u2264 u , whose length is bounded by\nX\n\u2032\u2032 2\n2\n|Q|2 +\n(|Q| + 1)c *k * |Q| = (|Q| + 1)c*k\nu\u2208W\n\nfor a suitable constant c independent of M.\n\n\u2294\n\u2293\n\nThe following proposition is crucial for handling the general case (where Q^ can be\nnon-empty).\nProposition 16. Suppose q\u2032 \u2208 Q^ in M has more than one outgoing transition, namely\nan outgoing transition t and a nonempty set R (the 'rest') of other outgoing transitions; by\nM1 (M2 ) we denote the eVASS arising from M by removing R (t). Suppose now that, for\nsome state q which may be different from q\u2032 , we have qv1 \u2208 Win\u0003 in M1 and q\u2032 v2 \u2208 Win\u0003\nin M2 . Then q(v1 +v2 \u22121) \u2208 Win\u0003 in M.\n17\n\n\fProof. Let S 1 be a winning strategy of player \u0003 in qv1 in M1 , and S 2 a winning strategy of\nplayer \u0003 in q\u2032 v2 in M2 . The following strategy will be winning for player \u0003 in q(v1 +v2 \u22121)\nin M:\nPlayer \u0003 uses the strategy S 1 as long as player ^ does not use any transition from the\nset R (when the play goes through q\u2032 ). If this happens, i.e. player ^ uses some t\u2032 \u2208 R, then\nplayer \u0003 suspends the strategy S 1 and behaves according to S 2 (starting in q\u2032 ). If player ^\nuses t in future, player \u0003 just suspends S 2 and resumes the (previously suspended) S 1 , etc.\nThus every prefix of any play arises by merging two prefixes of particular plays, played\nfrom qv1 in M1 according to S 1 and from q\u2032 v2 in M2 according to S 2 , respectively. Any\nprefix of the first (second) particular play cannot decrease a counter j by more than (v1 ) j \u22121\n((v2 ) j \u22121), and thus their merging keeps the value of each counter above zero, when starting\nfrom v1 +v2 \u22121.\n\u2294\n\u2293\nThe following simple proposition is technically useful.\nProposition 17. Assume an unrestricted self-covering tree T and a leaf (labelled with)\npu\u2032 , having above a corresponding node pu with u \u2264 u\u2032 . Consider the tree T \u2032 arising\nby an \"unfolding\", i.e., arising by hanging a corresponding copy of the (original) subtree\nrooted in pu on the node pu\u2032 . (Each node labelled with rt in the original subtree has a\ncorresponding node in the newly hanged subtree, labelled with rt \u2032 where t \u2032 = t+u\u2032 \u2212u.)\nThen T \u2032 is also an unrestricted self-covering tree.\nWe now want to generalize Lemma 15. We first note that the case when player ^ has\nno choice, i.e. when the set tr(Q^ ) of transitions t with \u03b1(t) \u2208 Q^ has the same cardinality\nas Q^ (recall that each control state has at least one outgoing transition), is already handled\nby Lemma 15: in such a case, all states in Q^ can be viewed as being in Q\u0003 , in fact.\nIn the general case we take the number r = |tr(Q^ )| \u2212 |Q^ | as a suitable measure of the\nchoice degree of ^.\nLemma 18. (Given eVASS M), let q \u2208 Q be a control state such that qv \u2208 Win\u0003 for\nsome v. Then there is an unrestricted self-covering tree for q of depth at most 2r * h(|Q|, k)\nwhere h is the function from Lemma 15 and r is the choice degree of ^, i.e. the number\n|tr(Q^ )| \u2212 |Q^ |.\nProof. We proceed by induction on r. The base case r = 0 has been already handled, so\nwe assume the claim holds for r, and show it for r + 1. Let q\u2032 \u2208 Q^ be a fixed state with\nat least two choices, i.e., with an outgoing transition t and a nonempty set R (the 'rest') of\nother outgoing transitions.\nLet M1 be the eVASS arising from M by removing R, and let M2 be the eVASS arising\nfrom M by removing t; the choice degree of ^ is at most r in both M1 and M2 .\nLet us now consider a control state q such that qv \u2208 Win\u0003 for some v in M; obviously,\nqv \u2208 Win\u0003 in both M1 and M2 as well. If some of the unrestricted self-covering trees\nof depth at most 2r * h(|Q|, k) which are guaranteed by the induction hypothesis does not\ncontain q\u2032 , then we are done. If both of them contain q\u2032 then q\u2032 must have unrestricted selfcovering trees in both M1 and M2 (recall Proposition 17); in particular, q\u2032 v\u2032 \u2208 Win\u0003 for\nsome v\u2032 in M2 , and by the induction hypothesis the elements of v\u2032 do not need to exceed\n2r * h(|Q|, k). The rest follows from Proposition 16.\n\u2294\n\u2293\nWe now define QD\u2212in f = {q \u2208 Q | q(\u03c9, . . . , \u03c9) \u2208 Win^ } and show that there is a fixed\ncounter-less strategy of player ^ which is winning inside \"QD\u2212in f -area\".\n18\n\n\fLemma 19. There is a counter-less strategy of player ^ which is winning in every qv \u2208\nQD\u2212in f \u00d7 Nk and, moreover, all control states visited in the respective plays are in QD\u2212in f .\nProof. We proceed by induction on the size of the underlying eVASS M; in other words,\nwe assume that the claim holds for all eVASSs with lesser sizes than the size of M and we\nprove the claim for M.\nWe observe that there is no transition t : q \u2192 q\u2032 such that q \u2208 QD\u2212in f \u2229 Q\u0003 and\nq\u2032 < QD\u2212in f (otherwise q\u2032 v\u2032 \u2208 Win\u0003 for some v\u2032 and thus qv \u2208 Win\u0003 for some v which\ncontradicts with q(\u03c9, . . . , \u03c9) \u2208 Win^ ). We can also easily verify that each q \u2208 QD\u2212in f \u2229 Q^\nhas at least one outgoing transition leading to QD\u2212in f ; if there is, moreover, some t : q \u2192 q\u2032\nsuch that q\u2032 < QD\u2212in f , then removing t results in a lesser M\u2032 with the same QD\u2212in f and the\nclaim for M follows by the induction hypothesis. (If b is the maximal component in Min\u0003\nthen q\u2032 (b, . . . , b) \u2208 Win\u0003 for all q\u2032 < QD\u2212in f . Starting from qv, q \u2208 QD\u2212in f , player ^ can\nuse the same strategy as from q(v + (b, . . . , b)), thus reaching 0 in some counter without\nleaving the QD\u2212in f -area.)\nIt thus remains to explore the case with no transitions leaving QD\u2212in f ; moreover\nD\u2212in f\nQ\n= Q since otherwise we also finish by the induction hypothesis. If now M has\nonly one outgoing transition for every q \u2208 Q^ then the claim is obvious, so we assume\nthat at least one q \u2208 Q^ in M has more than one outgoing transition, namely an outgoing\ntransition t and a nonempty set R (the 'rest') of other outgoing transitions.\nWe define M1 , M2 as in Proposition 16; and we start with assuming that q \u2208 QD\u2212in f\nalso in M1 . Then QD\u2212in f in M1 coincides with QD\u2212in f = Q in M (and the claim thus follows from the induction hypothesis): from every q\u2032 v\u2032 in M1 , player ^ can use his winning\nstrategy S from q\u2032 v\u2032 in M until (winning or) possibly reaching some qv where S prescribes\nto use some t\u2032 \u2208 R; here player ^ switches to his winning strategy which is guaranteed by\nthe assumption that q \u2208 QD\u2212in f in M1 . Similarly we handle the case when q \u2208 QD\u2212in f in\nM2 .\nThus it remains to consider the case when q < QD\u2212in f in M1 nor in M2 ; then necessarily qv1 \u2208 Win\u0003 in M1 and qv2 \u2208 Win\u0003 in M2 for some v1 , v2 \u2208 Nk . But then Proposition 16\nyields a contradiction with the assumption q \u2208 QD\u2212in f in M.\n\u2294\n\u2293\nLemma 8. The set of all q \u2208 Q such that q(\u03c9, . . . , \u03c9) \u2208 Win^ is computable in space\nbounded by a polynomial function g(|Q|, d, k).\nProof. It is sufficient to check (successively, in the same working space) all counterless\nstrategies of player ^ (recall Lemma 19); each case amounts to prune some outgoing\ntransitions for each q \u2208 Q^ so that always just one is left.\nNow to show that a particular counterless strategy is not winning for player ^ in some\nqv, i.e. that q(\u03c9, . . . , \u03c9) \u2208 Win\u0003 in the pruned system, we recall Lemma 15 (i.e., the case\nr = 0 of Lemma 18). We can nondeterministically go along a self-covering path, remembering only the current configuration and the beginning of the cycle after we guess we\nhave encountered it. Polynomial space is obviously sufficient for this procedure.\n\u2294\n\u2293\nA.3 A proof of Lemma 11\nWe start with the following auxiliary observation:\nLemma 20. Let 0 \u2264 j < k, and let B \u2208 N be a bound which is safe for precision j. Then\nj+1\nfor every qv \u2208 SymMin\u0003 we have that vl \u2264 B for every l precise in qv.\n19\n\n\fProof. Let qv \u2208 SymMin\u0003j+1 , and let us assume that vl > B for some l precise in qv. Let\nqu be a symbolic configuration where ul = vl for all l such that vl \u2264 B, and ul = \u03c9\nfor the other l. Note that P(qu) \u2264 j, and qu \u2208 Win\u0003 because qv \u2208 Win\u0003 . Hence, there is\nSj\nsome qt \u2208 i=0\nSymMini\u0003 such that qt \u2264 qv. Since B is safe for precision j, we have that\n\u2032\nqt \u2208 Win\u0003 , where t \u2032 is obtained from t by replacing every \u03c9-component with B. Since\nqt \u2032 \u2264 qv and t \u2032 l < vl for at least one l precise in qv, we obtain a contradiction with the\nminimality of qv.\n\u2294\n\u2293\nNow we have all the tools needed to prove Lemma 11.\nSj\nLemma 11. Let 0 \u2264 j < k, and let us assume that i=0\nSymMini\u0003 has already been\nj+1\ncomputed, together with some bound B \u2208 N which is safe for precision j. Then SymMin\u0003\nj+1\nis computable in time exponential in |Q| * B , d, and k\u2212 j\u22121, and the bound B + f (|Q| *\nB j+1 , d, k\u2212 j\u22121) is safe for precision j + 1 (here f is the function of Lemma 7 and d is the\nbranching degree of M).\nProof. Let us fix some subset C of {1, . . . , k} of cardinality j+1, and let C\u0304 = {1, . . . , k} r C.\nWe show how to compute the set of all qv \u2208 SymMin\u0003j+1 such that the set of all indexes that\nare precise in qv is exactly C. To achieve that, we construct an alternating eVASS MC with\nk \u2212 j \u2212 1 counters which encodes the counter values indexed by the elements of C in its\nfinite control (up to the bound B) and simulates the execution of the considered eVASS M.\nHence, the counters of MC simulate the counters of M that are indexed by the elements\nof C\u0304. For every configuration px of MC and every l \u2208 C\u0304, we use xl to denote the current\nvalue of the counter which corresponds to the l-th counter of M. Similarly, if y is a tuple\nof counter changes in MC and l \u2208 C\u0304, we use yl to denote the change on the counter of MC\nwhich corresponds to the l-th counter of M. This convention leads to a simpler notation.\nThe simulation of M by MC is essentially faithful until the point when some of the\ncounters indexed by C either reaches zero or attempts to cross the bound B. In the first\ncase, MC enters a special control state where player ^ wins (for arbitrary counter values).\nIn the latter case, the behaviour of MC is more subtle and it is explained later.\nThe set of control states of MC consists of q\u0003 , q^ , and all elements of\nQ \u00d7 (C \u2192{1, . . . , B}). The states of Q^ \u00d7 (C \u2192{1, . . . , B}) belong to player ^, and the other\nstates belong to player \u0003. To each control state of the form (p, a) we associate the (unique)\nsymbolic configuration p[a] of M where [a]l = al for all l \u2208 C such that al < B, and\n[a]l = \u03c9 for all of the remaining indexes l. The transitions of MC together with their\nlabels are constructed as follows:\n\u2013 There is a transition q\u0003 \u2192\n\u2212 q\u0003 labeled by (0, . . . , 0) and a transition q^ \u2192\n\u2212 q^ labeled\nby (\u22121, . . . , \u22121).\n\u2013 For every transition p \u2192\n\u2212u q of M we add the following transitions to MC :\n(a) For all a : C \u2192{1, . . . , B} such that ul = \u22121 and al = 1 for some l \u2208 C, we add a\ntransition (p, a) \u2192\n\u2212 q^ labeled by (0, . . . , 0).\n(b) For all a : C \u2192{1, . . . , B} such that the previous item does not apply and al < B\nfor all l \u2208 C, we add a transition (p, a) \u2192\n\u2212x (q, b), where b and x are the unique\nvectors satisfying the following:\n\u2217 For every l \u2208 C we have that bl is equal either to al + ul or B, depending on\nwhether ul \u2208 {\u22121, 0, 1} or ul = \u03c9, respectively.\n\u2217 For all l \u2208 C\u0304 we have that xl = ul .\n20\n\n\f(c) For all a : C \u2192{1, . . . , B} such that al = B for some l \u2208 C, we add either\na transition (p, a) \u2192\n\u2212 q\u0003 labeled by (0, . . . , 0) or a transition (p, a) \u2192\n\u2212 q^ labeled by (0, . . . , 0), depending on whether p[a] \u2208 Win\u0003 or p[a] \u2208 Win^ , respectively. Realize that since P(p[a]) \u2264 j, we have that p[a] \u2208 Win\u0003 iff there\nSj\nis pv \u2208 i=0\nSymMini\u0003 such that pv \u2264 p[a], which can be checked effectively\nSj\nbecause the set i=0\nSymMini\u0003 has already been computed.\nIn the rest of this proof, the winning regions for player \u0003 and player ^ in GMC are denoted\nby Win\u0003 (MC ) and Win^ (MC ), respectively. For a given symbolic configuration (p, a)x\nof MC , we use p(a, x) to denote the corresponding symbolic configuration of M, i.e.,\n(a, x)l = al for all l \u2208 C, and (a, x)l = xl for all l \u2208 C\u0304. For the moment, assume that the\nfollowing two claims are already proven (where f is the function of Lemma 7):\n(1) If (p, a)x \u2208 Win\u0003 (MC ) where xl \u2265 B + f (|Q| * B j+1 , k\u2212 j\u22121) for every l \u2208 C\u0304, then\np(a, x) \u2208 Win\u0003 .\n(2) If (p, a)x \u2208 Win^ (MC ), then p(a, x) \u2208 Win^ .\nAn immediate consequence of (1) and (2) is that (p, a)(\u03c9, . . . , \u03c9) \u2208 Win\u0003 (MC ) iff\np(a, \u03c9, . . . , \u03c9) \u2208 Win\u0003 . By applying Lemma 20, it follows that SymMin\u0003j+1 contains exactly the minimal p(a, \u03c9, . . . , \u03c9) such that (p, a)(\u03c9, . . . , \u03c9) \u2208 Win\u0003 (MC ). Since the set\nof all (p, a) such that (p, a)(\u03c9, . . . , \u03c9) \u2208 Win\u0003 (MC ) is computable in time exponential in\n|Q| * B j+1 , d, and k\u2212 j\u22121 by Lemma 8, the set SymMin\u0003j+1 is also computable in time exponential in |Q| * B j+1, d, and k\u2212 j\u22121 (although the number of control states of MC is actually\n(|Q| * B j+1 ) + 2, note that we can easily adjust MC by removing the control states q^ and\nq\u0003 without influencing the winning regions for the other control states). Moreover, the\nbound B + f (|Q| * B j+1, k\u2212 j\u22121) is obviously safe for precision j + 1. So, it remains to prove\nClaims (1) and (2). First, recall that the transitions of MC introduced in item (c) above are\n\"correct\" in the following sense: if (p, a) is a control state of MC such that al = B for\nsome l \u2208 C, then\n\u2013 if (p, a) \u2192\n\u2212 q\u0003 , then p(a, y) \u2208 Win\u0003 for all y such that yl \u2265 B for every l \u2208 C\u0304;\n\u2013 if (p, a) \u2192\n\u2212 q^ , then p(a, y) \u2208 Win^ for all y.\nClaim (1): Let us assume that (p, a)x \u2208 Win\u0003 (MC ) where xl \u2265 B + f (|Q| * B j+1 , k\u2212 j\u22121).\nSince (p, a)x \u2208 Win\u0003 (MC ), by Lemma 7 there is a self-covering tree T for (p, a) of depth at\nmost f (|Q| * B j+1, k\u2212 j\u22121). A winning strategy for player \u0003 in p(a, x) is obtained simply by\nfollowing the strategy described by T until the point when a transition of the form (q, b)z \u2192\n\u2212\nq\u0003 z is to be executed in T . Note that since the depth of T is at most f (|Q| * B j+1 , k\u2212 j\u22121),\nwe have that (x+z)l \u2265 B for every l \u2208 C\u0304. This means that q(b, x+z) \u2208 Win\u0003 (see above)\nand hence player \u0003 can simply abandon the strategy described by T and start to follow his\nwinning strategy for q(b, x+z).\nClaim (2): Let us assume that (p, a)x \u2208 Win^ (MC ). A winning strategy for player ^ in\np(a, x) is obtained simply by \"mimicking\" the winning strategy of player ^ in (p, a)x until\none of the two players enters a configuration (q, b)y which has an outgoing transition of\nthe form (q, b)y \u2192\n\u2212 q^ y. Note that then there must be at least one outgoing transition of\nq(b, y) leading to a winning configuration of player ^. If q \u2208 Q^ , then player ^ selects\nthis transition and \"switches\" to the winning strategy of the chosen successor. If q \u2208 Q\u0003 ,\nthen player \u0003 may select an outgoing transition of q(b, y) which either does or does not\ncorrespond to the transition (q, b)y \u2192\n\u2212 q^ y (see item (c) above). In the first case, player ^\n\"switches\" to the winning strategy for the chosen successor, and in the latter case he keeps\n21\n\n\f\"mimicking\" the winning strategy for (p, a)x. Obviously, if player ^ plays in the way just\ndescribed, he has to win.\n\u2294\n\u2293\nAn immediate corollary to Lemma 11 is that the set SymMin\u0003 (and hence also the set\nMin\u0003 ) is effectively computable (an upper complexity bound is given in Theorem 12). Let\nus note that the set Max^ of all maximal symbolic configurations which belong to Win^\nis effectively computable (we just need to complement the upward closure of Min\u0003 , which\ncan be done by standard methods; see, e.g., [33]).\nFinally, we show that there is a finitely and effectively representable strategy \u03c0 of\nplayer ^ which is winning in every configuration of Win^ . Let C be a subset of {1, . . . , k},\nC\u0304 = {1, . . . , k} r C, and let\nMaxC^ = {pv \u2208 Max^ | P(pv) = |C| and vl , \u03c9 for all l \u2208 C}.\nWe also use \u2193MaxC^ to denote the downwards closure of MaxC^ , i.e., the set of all configurations qu where qu \u2264 qu\u2032 for some qu\u2032 \u2208 MaxC^ . The C-part of a configuration qu \u2208 \u2193MaxC^\nis a pair q[u, C] where [u, C] : C \u2192 N such that [u, C]l = ul for every l \u2208 C. Note that the\nset\nAdmC = {q[u, C] | qu \u2208 \u2193MaxC^ }\nof admissible C-parts is finite.\nLet B a bound which is safe for precision k (see Lemma 11). Let qu \u2208 Win^ be a\nconfiguration such that q[u, C] < AdmC and ul \u2265 B for every l \u2208 C. Then there must\na proper subset C \u2032 of C such that q[u, C\u2032 ] \u2208 AdmC\u2032 (otherwise, qu \u2208 Win\u0003 which is\na contradiction). We show that there is a memoryless strategy \u03c0C for player ^ with the\nfollowing properties:\n\u2013 For every pv \u2208 MaxC^ and every strategy \u03c3 of player \u0003 we have that the play initiated in\npv reaches either a configuration of Z or a configuration qu such that q[u, C\u2032 ] \u2208 AdmC\u2032\nfor some proper subset C \u2032 of C.\n\u2013 For every pv such that p \u2208 Q^ we have that \u03c0C (pv) depends only on the C-part of pv.\nObserve that the strategies \u03c0C can be easily combined into the promised strategy \u03c0, which\nworks in the following way: for a given configuration pv \u2208 Win^ , we find a minimal\nC \u2286 {1, . . . , k} such that pv \u2208 MaxC^ (if there are more candidates for C, any of them can\nbe chosen in some deterministic fashion). Player ^ plays according to \u03c0C untill he either\nwins or enters a configuration qu such that q[u, C\u2032 ] \u2208 AdmC\u2032 for some proper subset C \u2032 of\nC. From this point on, he \"switches\" to \u03c0C\u2032 . Note that such a \"switch\" can be performed at\nmost k times in each play, and the strategy \u03c0 admits a finite and effective description.\nSo, it remains to show how to construct the strategy \u03c0C . Note that if C = \u2205, then \u03c0C\nis counterless by Lemma 19 and can be constructed effectively. Otherwise, we proceed\nsimilarly as in Lemma 11. We construct another eVASS game MC with k \u2212 C counters\nwhich simulates the C-parts of configurations in its finite control so that\n\u2013 the transitions of M that would lead to configurations qu such that q[u, C\u2032 ] \u2208 AdmC\u2032\nfor some proper subset C \u2032 of C are simulated by entering a special control state where\nplayer ^ wins;\n\u2013 the transitions of M that would lead to configurations qu such that q[u, C\u2032 ] < AdmC\u2032\nfor every C \u2032 \u2286 C are simulated by entering a special control state where player \u0003 wins.\n22\n\n\fWe determine all control states of MC such that player ^ wins for all values in the k \u2212 C\ncounters of MC and construct the corresponding counterless winning strategy (here we\nagain relay on Lemma 8). Then we \"transfer\" this counterless strategy back to M and\nproduce the desired \u03c0C .\nA.4 Proofs of Theorem 13 and Theorem 14\nFor the rest of this section, we fix a one-dimensional eVASS game M =\n(Q, (Q\u0003 , Q^ ), T, \u03b1, \u03b2, \u03b4) and C \u2286 Q. Recall that for every i \u2208 N, we use Win^ (C, i) to\ndenote the set {p \u2208 Q | p(i) \u2208 Win(^, R(ZC ))}. Observe that if Win^ (C, i) = Win^ (C, j)\nfor some i, j \u2208 N, then also Win^ (C, i+1) = Win^ (C, j+1). To see this, realize that\nif p(i+1) \u2208 Win(^, R(ZC )), then player ^ has a winning strategy \u03c0 in p(i+1) and\nhence he can enforce descreasing the counter to i (and entering some configuration q(i)\nwhere q \u2208 Win^ (C, i)) no matter what player \u0003 does. Then a strategy \u03c0+( j\u2212i) such that\n\u03c0+( j\u2212i) (r(k)) = \u03c0(r(k\u2212 j+i) for all k \u2265 j can be used in p( j+1) to enforce visiting a\nconfiguration q( j) where q \u2208 Win^ (C, j). Since q( j) \u2208 Win(^, R(ZC )), we obtain that\np( j+1) \u2208 Win(^, R(ZC )). Similarly, one can show that if p( j+1) \u2208 Win(^, R(ZC )), then\nalso p(i+1) \u2208 Win(^, R(ZC )). Further, recall that we use mC to denote the least i \u2208 N such\nthat Win^ (C, i) = Win^ (C, j) for some j > i, and nC to denote the least i > 0 such that\nWin^ (C, mC ) = Win^ (C, mC +i). Observe that mc + nc \u2264 2|Q| , and for every i \u2265 mc we have\nthat Win^ (C, i) = Win^ (C, mC + ((i \u2212 mC ) mod nC )). Hence, the winning regions of both\nplayers are fully characterized by all Win^ (C, i), where 0 \u2264 i < mC + nC .\nWe start with the non-selective case, because some of the underlying observations\nare needed to solve the more general selective case. Recall that in the non-selective case,\nmQ \u2264 |Q| and nQ = 1, because Win^ (Q, i) \u2287 Win^ (Q, i+1) for every i \u2208 N. Hence, it\nsuffices to compute all Win^ (Q, i) where 0 \u2264 i \u2264 |Q|. The next lemma says that this can be\ndone in polynomial time.\nLemma 21. The sets Win^ (Q, i), where 0 \u2264 i \u2264 |Q|, are computable in O(|M|2 ) time.\nProof. Let D be the domain of all |Q|+1-tuples of subsets of Q, ordered by componentwise\ninclusion. For a given D \u2208 D, the individual components of D are denoted by D0 , . . . , D|Q| .\nThe least element of D (i.e., the tuple of empty sets) is denoted by \u22a5.\nThe algorithm computes the least fixed-point of the function F : D \u2192 D defined as\nfollows: p \u2208 (F (D))i iff one of the following conditions holds:\n\u2013 i = 0;\n\u2013 i > 0, p \u2208 Q^ , and there is an edge p(i) 7\u2192 q( j) such that either j \u2264 |Q| and q \u2208 D j , or\nj > |Q| and q \u2208 D|Q| ;\n\u2013 i > 0, p \u2208 Q\u0003 , and for every edge p(i) 7\u2192 q( j) we have that either j \u2264 |Q| and q \u2208 D j ,\nor j > |Q| and q \u2208 D|Q| .\nS\nSince F is continuous, the least fixed-point of F is equal to k\u2208N F k (\u22a5), where \u222a is\nconsidered componentwise. We claim that\n\u0012\n\u0013\n[\nF k (\u22a5) =\nWin^ (Q, 0), . . . , Win^ (Q, |Q|)\nk\u2208N\n\nThe \"\u2286\" is proven by a straightforward induction on k. Note that since mQ \u2264 |Q| and\nnQ = 1, we have that Win^ (Q, |Q|) = Win^ (Q, |Q|+1), and this fact is used to justify\n23\n\n\fthe case when p(i) performs an edge which increases the counter above |Q|. For the \"\u2287\"\ndirection, consider the set B of configurations defined as follows: p(i) \u2208 B iff p < (F k (\u22a5))l\nfor all k \u2208 N, where l = min{i, |Q|}. We show that B \u2286 Win(\u0003, S(Z)). To see this, realize\nthe following:\n\u2013 if p(i) \u2208 B and p \u2208 Q^ , then for every edge p(i) 7\u2192 q( j) we have that q( j) \u2208 B;\n\u2013 if p(i) \u2208 B and p \u2208 Q\u0003 , then there is an edge p(i) 7\u2192 q( j) such that q( j) \u2208 B.\nBoth claims follow directly from the definition of F . Hence, we can setup a strategy \u03c3 \u2208 \u03a3\nwhich is S(Z)-winning for player \u0003 in every configuration of B, which means that B \u2286\nWin(\u0003, S(Z)). From this we obtain that if p < (F k (\u22a5))i for every k \u2208 N, then p(i) \u2208 B \u2286\nWin(\u0003, S(Z)), which means p < Win^ (Q, i).\nS\nIt remains to show that k\u2208N F k (\u22a5) is computable in polynomial time (this is not\n2\ncompletely trivial, because D has 2O(|Q| ) elements). We say that D \u2208 D is monotone if\nDi \u2287 Di+1 for all 0 \u2264 i < |Q|. Observe that \u22a5 is monotone, and if D is monotone then F (D)\nis monotone. Since the length of every increasing chain D0 \u2283 D1 \u2283 D2 * * * where all D j \u2208\nS\nS\nD are monotone is bounded by |Q| * (|Q| + 1), we have that k\u2208N F k (\u22a5) = |Q|*(|Q|+1)\nF k (\u22a5)\nk=1\n2\nand hence the least fixed point of F is computable in O(|M| ) time.\n\u2294\n\u2293\nAccording to Lemma 21, the problem whether p(i) \u2208 Win(^, R(Z)) for a given configuration p(i) of M is in P, and a finite description of the winning regions for both players is\ncomputable in polynomial time. Our next lemma reveals that both players have fixed counterless strategies computable in polynomial time that are winning in every configuration\nof the corresponding winning region.\nLemma 22. There are counterless strategies \u03c0\u0302 and \u03c3\u0302 computable in polynomial time such\nthat \u03c0\u0302 is R(Z)-winning for player ^ in every configuration of Win(^, R(Z)), and \u03c3\u0302 is S(Z)winning for player \u0003 in every configuration of Win(\u0003, S(Z)).\nProof. The construction of \u03c3\u0302 is simple. We just need to ensure that player \u0003 never leaves\nhis winning region. For every p \u2208 Q\u0003 , we fix a transition t p \u2208 T where \u03b1(t p ) = p as\nfollows:\n\u2013 if p \u2208 Win^ (Q, |Q|), then t p is chosen arbitrarily;\n\u2013 otherwise, let i \u2208 N be the least index such that p < Win^ (Q, i). According to the proof\nof Lemma 21, there is an edge p(i) 7\u2192 q( j) such that q( j) < Win^ (Q, j). We choose t p\nto be the transition which induces the edge p(i) 7\u2192 q( j) (if there are more candidates\nfor t p , any of them can be chosen). If \u03b4(t p ) = \u03c9, we put c p = j \u2212 i. Note that we can\nsafely assume that c p \u2264 |Q|.\nFor every p(i) \u2208 Q\u0003 \u00d7 N, the strategy \u03c3\u0302 selects the configuration q( j) obtained by applying\nthe transition t p to p(i). One can easily check that \u03c3\u0302 is S(Z)-winning in every configuration\nof Win(\u0003, S(Z)).\nThe construction of \u03c0\u0302 is slightly more complicated, because player ^ must also make\nsome progress in reaching a configuration of Z. Let p \u2208 Q^ and let i \u2208 N \u222a {\u03c9} be the\nmaximal index such that p(i) \u2208 Win(^, R(Z)). We show that there is a transition t p \u2208 T\nsuch that \u03b1(t p ) = p and player ^ still has an R(Z)-winning strategy in p(i) after deleting\nall outgoing transitions of p except for t p . Note that the existence of \u03c0\u0302 easily follows from\nthis claim, because then we can successively construct such a transition for every control\nstate of Q^ (in polynomial time), and thus obtain the desired strategy \u03c0\u0302.\n24\n\n\fTo prove the claim, it suffices to consider the case when i , \u03c9 (if i = \u03c9, we apply Lemma 19). Realize that there must be some strategy \u03c0 which is R(Z)-winning for\nplayer ^ in p(i) and for every strategy \u03c3 of player \u0003 we have that the resulting play does\nnot visit a configuration p( j) where j \u2265 i (if there was no such \u03c0, player \u0003 could easily\ndefeat every R(Z)-winning strategy \u03c0, which is a contradiction). Let us fix such a \u03c0, and\nlet t p be the transition which induces the edge p(i) 7\u2192 \u03c3(p(i)). Further, for each j < i,\nlet \u03c0 j be a strategy defined by \u03c0 j (q(k)) = \u03c0(q(k+i\u2212 j)). We show that player ^ still has\nan R(Z)-winning strategy \u03c0\u0304 for p(i) when all outgoing transitions of p except for t p are\ndeleted. Consider the strategy \u03c0\u0304 obtained by applying the following rule recursively: \"If a\nconfiguration of the form p( j) is visited, the strategy \u03c0\u0304 behaves like \u03c0 j until another configuration of the form p(m) is visited or a configuration with zero counter is reached.\" Note\nthat \u03c0\u0304 is R(Z)-winning in p(i), because a configuration of the form p( j) can be revisited at\nmost i times in every play initiated in p(i).\n\u2294\n\u2293\nAs an immediate collary to Lemma 21 and Lemma 22, we obtain the following:\nTheorem 14. The problem whether p(i) \u2208 Win(^, R(Z)) is in P. Further, there are counterless strategies \u03c3 and \u03c0 such that \u03c3 is winning for player \u0003 in every configuration of\nWin(\u0003, S(Z)) and \u03c0 is winning for player ^ in every configuration of Win(^, R(Z)). The\ntuple of all Win^ (Q, i), \u03c3(p), and \u03c0(q), where 0 \u2264 i \u2264 mC , p \u2208 Q\u0003 , and q \u2208 Q^ , is constructible in time polynomial in |M|.\nNow we turn our attention to ZC objectives and prove Theorem 13.\nLemma 23. The problem whether p(i) \u2208 Win(^, R(ZC )) is PSPACE-complete.\nProof. The PSPACE lower bound is obtained by reducing the emptiness problem for alternating finite automata (AFA) with one letter alphabet, which is known to be PSPACE\ncomplete [16] (see also [21] for a simpler proof). Intuitively, player ^ first increases the\ncounter sufficiently and thus selects the word which should by accepted by a given AFA A .\nThe computation of A on the chosen word is then simulated by both players (the states of\nA are encoded in the finite control of the constructed VASS), and the counter is decreased\nafter simulating one computational step. Player ^ aims to show that the chosen word is\naccepted by A , which means that he wants to reach zero level in one of the control states\nthat correspond to the accepting states of A . Hence, the language accepted by A is nonempty iff player ^ has an R(ZC )-winning strategy in a configuration p(1), where the set C\nencodes the set of accepting states of A .\nThe PSPACE upper bound follows also easily by employing the result of [31] which\nsays that the emptiness problem for alternating two-way parity word automata (2PWA)\nis in PSPACE. A given eVASS game GM with R(ZC ) objectives initiated in p(i) can be\neasily simulated by a 2PWA A which tries to accept the infinite word 01\u03c9 . Intuitively, the\nautomaton A first performs i steps to the right to simulate the initial counter value. The\nfinite control of M is encoded in the states of A (the control states of A corresponding\nto Q^ are existential, and the control states corresponding to Q\u0003 are universal; all of these\ncontrol states have a non-accepting parity). The increment/decrement of the counter value\nis simulated by going right/left. If A reads 0, it enters an infinite loop in a special control\nstate whose parity is accepting or non-accepting, depending on whether the corresponding\ncontrol state of M belongs to C or not, respectively. The \u03c9-transitions are implemented\nby allowing the automaton to go arbitrarily far to the right in a special control state, which\n25\n\n\fis either existential or universal and has non-accepting or accepting parity, depending on\nwhether the corresponding \u03c9-transition is performed by player ^ or player \u0003, respectively.\nAt any moment, the automaton can switch back to the mode when it simulates the execution of GM . It follows that the only way how A can accept the word 01\u03c9 is to enter 0 in\na \"good\" state which corresponds to a control state of C. Hence, player ^ has an R(ZC )\nwinning strategy in p(i) iff A accepts the word 01\u03c9 .\n\u2294\n\u2293\nAccording to Lemma 23, the numbers mC , nC and the tuple of all Win^ (C, i), where\n0 \u2264 i < mC +nC , are constructible in exponential time. Now we show that winning strategies for both players are finitely representable.\nLemma 24. There is a strategy \u03c3 for player \u0003 which is winning in every configuration of\nWin(\u0003, S(ZC )), and for all p \u2208 Q\u0003 and i \u2265 mC we have that\n\u03c3(p(i))\n\n=\n\n\u03c3(p(mC + ((i \u2212 mC ) mod nC )))\n\nMoreover, the value of all \u03c3(p(i)), where p \u2208 Q\u0003 and 0 \u2264 i < mC +nC , is computable in\nexponential time.\nProof. Again, it suffices to ensure that \u03c3 never leaves the winning region of player \u0003. Due\nto the ultimate periodicity of Win(\u0003, S(ZC )), the strategy \u03c3 can be chosen so that for all\np \u2208 Q\u0003 and i \u2265 mC we have that \u03c3(p(i)) = \u03c3(p(mC + ((i \u2212 mC ) mod nC ))). Obviously,\nthe value of \u03c3(p(i)), where p \u2208 Q\u0003 and 0 \u2264 i < mC +nC , is computable in exponential time\nbecause the sets Win^ (C, i), where 0 \u2264 i < mC +nC , are computable in exponential time.\n\u2294\n\u2293\n\n26\n\n\f"}