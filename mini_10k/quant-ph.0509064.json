{"id": "http://arxiv.org/abs/quant-ph/0509064v2", "guidislink": true, "updated": "2005-12-08T13:53:54Z", "updated_parsed": [2005, 12, 8, 13, 53, 54, 3, 342, 0], "published": "2005-09-09T13:49:30Z", "published_parsed": [2005, 9, 9, 13, 49, 30, 4, 252, 0], "title": "A Software Package to Construct Polynomial Sets over Z_2 for Determining\n  the Output of Quantum Computations", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=quant-ph%2F0509173%2Cquant-ph%2F0509071%2Cquant-ph%2F0509106%2Cquant-ph%2F0509055%2Cquant-ph%2F0509022%2Cquant-ph%2F0509014%2Cquant-ph%2F0509144%2Cquant-ph%2F0509190%2Cquant-ph%2F0509156%2Cquant-ph%2F0509046%2Cquant-ph%2F0509038%2Cquant-ph%2F0509174%2Cquant-ph%2F0509124%2Cquant-ph%2F0509205%2Cquant-ph%2F0509091%2Cquant-ph%2F0509057%2Cquant-ph%2F0509118%2Cquant-ph%2F0509083%2Cquant-ph%2F0509198%2Cquant-ph%2F0509172%2Cquant-ph%2F0509090%2Cquant-ph%2F0509161%2Cquant-ph%2F0509126%2Cquant-ph%2F0509050%2Cquant-ph%2F0509061%2Cquant-ph%2F0509023%2Cquant-ph%2F0509177%2Cquant-ph%2F0509130%2Cquant-ph%2F0509181%2Cquant-ph%2F0509136%2Cquant-ph%2F0509016%2Cquant-ph%2F0509110%2Cquant-ph%2F0509194%2Cquant-ph%2F0509015%2Cquant-ph%2F0509196%2Cquant-ph%2F0509150%2Cquant-ph%2F0509152%2Cquant-ph%2F0509072%2Cquant-ph%2F0509031%2Cquant-ph%2F0509165%2Cquant-ph%2F0509101%2Cquant-ph%2F0509139%2Cquant-ph%2F0509192%2Cquant-ph%2F0509099%2Cquant-ph%2F0509054%2Cquant-ph%2F0509120%2Cquant-ph%2F0509104%2Cquant-ph%2F0509210%2Cquant-ph%2F0509063%2Cquant-ph%2F0509125%2Cquant-ph%2F0509134%2Cquant-ph%2F0509034%2Cquant-ph%2F0509037%2Cquant-ph%2F0509216%2Cquant-ph%2F0509004%2Cquant-ph%2F0509011%2Cquant-ph%2F0509058%2Cquant-ph%2F0509003%2Cquant-ph%2F0509154%2Cquant-ph%2F0509158%2Cquant-ph%2F0509208%2Cquant-ph%2F0509040%2Cquant-ph%2F0509036%2Cquant-ph%2F0509002%2Cquant-ph%2F0509018%2Cquant-ph%2F0509077%2Cquant-ph%2F0509006%2Cquant-ph%2F0509035%2Cquant-ph%2F0509024%2Cquant-ph%2F0509066%2Cquant-ph%2F0509021%2Cquant-ph%2F0509122%2Cquant-ph%2F0509087%2Cquant-ph%2F0509029%2Cquant-ph%2F0509052%2Cquant-ph%2F0509080%2Cquant-ph%2F0509128%2Cquant-ph%2F0509051%2Cquant-ph%2F0509170%2Cquant-ph%2F0509215%2Cquant-ph%2F0509145%2Cquant-ph%2F0509030%2Cquant-ph%2F0509044%2Cquant-ph%2F0509043%2Cquant-ph%2F0509098%2Cquant-ph%2F0509019%2Cquant-ph%2F0509147%2Cquant-ph%2F0509064%2Cquant-ph%2F0509160%2Cquant-ph%2F0509193%2Cquant-ph%2F0509117%2Cquant-ph%2F0509097%2Cquant-ph%2F0509202%2Cquant-ph%2F0509039%2Cquant-ph%2F0509078%2Cquant-ph%2F0509013%2Cquant-ph%2F0509102%2Cquant-ph%2F0509197%2Cquant-ph%2F0509129%2Cquant-ph%2F0509119%2Cquant-ph%2F0509204&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "A Software Package to Construct Polynomial Sets over Z_2 for Determining\n  the Output of Quantum Computations"}, "summary": "A C# package is presented that allows a user for an input quantum circuit to\ngenerate a set of multivariate polynomials over the finite field Z_2 whose\ntotal number of solutions in Z_2 determines the output of the quantum\ncomputation defined by the circuit. The generated polynomial system can further\nbe converted to the canonical Groebner basis form which provides a universal\nalgorithmic tool for counting the number of common roots of the polynomials.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=quant-ph%2F0509173%2Cquant-ph%2F0509071%2Cquant-ph%2F0509106%2Cquant-ph%2F0509055%2Cquant-ph%2F0509022%2Cquant-ph%2F0509014%2Cquant-ph%2F0509144%2Cquant-ph%2F0509190%2Cquant-ph%2F0509156%2Cquant-ph%2F0509046%2Cquant-ph%2F0509038%2Cquant-ph%2F0509174%2Cquant-ph%2F0509124%2Cquant-ph%2F0509205%2Cquant-ph%2F0509091%2Cquant-ph%2F0509057%2Cquant-ph%2F0509118%2Cquant-ph%2F0509083%2Cquant-ph%2F0509198%2Cquant-ph%2F0509172%2Cquant-ph%2F0509090%2Cquant-ph%2F0509161%2Cquant-ph%2F0509126%2Cquant-ph%2F0509050%2Cquant-ph%2F0509061%2Cquant-ph%2F0509023%2Cquant-ph%2F0509177%2Cquant-ph%2F0509130%2Cquant-ph%2F0509181%2Cquant-ph%2F0509136%2Cquant-ph%2F0509016%2Cquant-ph%2F0509110%2Cquant-ph%2F0509194%2Cquant-ph%2F0509015%2Cquant-ph%2F0509196%2Cquant-ph%2F0509150%2Cquant-ph%2F0509152%2Cquant-ph%2F0509072%2Cquant-ph%2F0509031%2Cquant-ph%2F0509165%2Cquant-ph%2F0509101%2Cquant-ph%2F0509139%2Cquant-ph%2F0509192%2Cquant-ph%2F0509099%2Cquant-ph%2F0509054%2Cquant-ph%2F0509120%2Cquant-ph%2F0509104%2Cquant-ph%2F0509210%2Cquant-ph%2F0509063%2Cquant-ph%2F0509125%2Cquant-ph%2F0509134%2Cquant-ph%2F0509034%2Cquant-ph%2F0509037%2Cquant-ph%2F0509216%2Cquant-ph%2F0509004%2Cquant-ph%2F0509011%2Cquant-ph%2F0509058%2Cquant-ph%2F0509003%2Cquant-ph%2F0509154%2Cquant-ph%2F0509158%2Cquant-ph%2F0509208%2Cquant-ph%2F0509040%2Cquant-ph%2F0509036%2Cquant-ph%2F0509002%2Cquant-ph%2F0509018%2Cquant-ph%2F0509077%2Cquant-ph%2F0509006%2Cquant-ph%2F0509035%2Cquant-ph%2F0509024%2Cquant-ph%2F0509066%2Cquant-ph%2F0509021%2Cquant-ph%2F0509122%2Cquant-ph%2F0509087%2Cquant-ph%2F0509029%2Cquant-ph%2F0509052%2Cquant-ph%2F0509080%2Cquant-ph%2F0509128%2Cquant-ph%2F0509051%2Cquant-ph%2F0509170%2Cquant-ph%2F0509215%2Cquant-ph%2F0509145%2Cquant-ph%2F0509030%2Cquant-ph%2F0509044%2Cquant-ph%2F0509043%2Cquant-ph%2F0509098%2Cquant-ph%2F0509019%2Cquant-ph%2F0509147%2Cquant-ph%2F0509064%2Cquant-ph%2F0509160%2Cquant-ph%2F0509193%2Cquant-ph%2F0509117%2Cquant-ph%2F0509097%2Cquant-ph%2F0509202%2Cquant-ph%2F0509039%2Cquant-ph%2F0509078%2Cquant-ph%2F0509013%2Cquant-ph%2F0509102%2Cquant-ph%2F0509197%2Cquant-ph%2F0509129%2Cquant-ph%2F0509119%2Cquant-ph%2F0509204&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "A C# package is presented that allows a user for an input quantum circuit to\ngenerate a set of multivariate polynomials over the finite field Z_2 whose\ntotal number of solutions in Z_2 determines the output of the quantum\ncomputation defined by the circuit. The generated polynomial system can further\nbe converted to the canonical Groebner basis form which provides a universal\nalgorithmic tool for counting the number of common roots of the polynomials."}, "authors": ["Vladimir P. Gerdt", "Vasily M. Severyanov"], "author_detail": {"name": "Vasily M. Severyanov"}, "author": "Vasily M. Severyanov", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1016/j.nima.2005.11.147", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/quant-ph/0509064v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/quant-ph/0509064v2", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "5 pages, 4 Postscript figures, report presented on ACAT 2005", "arxiv_primary_category": {"term": "quant-ph", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "quant-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/quant-ph/0509064v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/quant-ph/0509064v2", "journal_reference": null, "doi": "10.1016/j.nima.2005.11.147", "fulltext": "arXiv:quant-ph/0509064v2 8 Dec 2005\n\nA Software Package to Construct Polynomial Sets over Z2 for\nDetermining the Output of Quantum Computations\nVladimir P. Gerdta\u2217 , Vasily M. Severyanova\u2020\na\n\nLaboratory of Information Technologies, Joint Institute for Nuclear Research,\n141980 Dubna, Russia\nA C# package is presented that allows a user for an input quantum circuit to generate a set of multivariate\npolynomials over the finite field Z2 whose total number of solutions in Z2 determines the output of the quantum\ncomputation defined by the circuit. The generated polynomial system can further be converted to the canonical\nGr\u00f6bner basis form which provides a universal algorithmic tool for counting the number of common roots of the\npolynomials.\n\nthose elements.\nThe structure of the paper is as follows. In\nSection 2 we outline shortly the circuit model of\nquantum computation. Section 3 presents the famous Feynman's sum-over-paths method applied\nto quantum circuits. In Section 4 we describe a\ncircuit decomposition in terms of the elementary\ngates. In Section 5 we show how to assemble an\narbitrary circuit composed from the Hadamard\nand Toffoli gates that form a universal basis. Section 6 demonstrates a simple example of handling\nthe polynomials associated with a quantum circuit by constructing their Gr\u00f6bner basis. We conclude in Section 7.\n\n1. INTRODUCTION\nOne important aspect of quantum computation\nis estimation of computational power of quantum\nlogical circuits. As it was recently shown in [1],\ndetermining the output of a quantum computation is equivalent to counting the number of solutions of a certain set of polynomials defined over\nthe finite field Z2 .\nUsing ideas published in [1], we have written\na C# program enabling one to assemble an arbitrary quantum circuit in a particular universal\ngate basis and to construct the corresponding set\nof polynomial equations over Z2 . The number of\nsolutions of the set defines the matrix elements of\nthe circuit and therefore its output value for any\ninput value.\nThe generated polynomial system can further\nbe converted into the canonical Gr\u00f6bner basis\nform by applying efficient involutive algorithms\ndescribed in [2]. A triangular Gr\u00f6bner basis for\nthe pure lexicographical order on the polynomial\nvariables is generally most appropriate for counting the number of common roots of the polynomials.\nOur program has a user-friendly graphical interface and a built-in base of the elementary gates\nrepresenting certain quantum gates and wires. A\nuser can easily assemble an input circuit from\n\n2. QUANTUM CIRCUITS\nTo quantize the classical bit, we go from the\ntwo-element set {0, 1} to a two-level quantum\nsystem described by the two-dimensional Hilbert\nspace C2 . In contrast to the classical case, the\nquantum bit (qubit) can be found in a superposition |\u03c8i = \u03b1|0i + \u03b2|1i of the states |0i and |1i\ncalled a computational basis, where \u03b1, \u03b2 \u2208 C are\nthe probability amplitudes of |0i and |1i respectively.\nThe simplest quantum computation is a unitary transformation on the qubit state\n|\u03c6i = U |\u03c8i ,\n\nU U \u2020 = I.\n\nA measurement of the qubit in the computational\nbasis |0i and |1i transforms its state to one of the\n\n\u2217 gerdt@jinr.ru\n\u2020 severyan@jinr.ru\n\n1\n\n\f2\n\nVladimir Gerdt, Vasily Severyanov\n\nbasis states with probabilities determined by the\namplitudes\n\u001a\n|0i with probability |\u03b1|2\n\u03b1|0i + \u03b2|1i 7\u2192\n|1i with probability |\u03b2|2\nTo compute a reversible Boolean vectorfunction f : Zn2 \u2192 Zn2 , one applies the appropriate unitary transformation Uf to an input state\n|ai composed of some number of qubits\n|bi = Uf |ai ,\n\n|ai , |bi \u2208 C\n\n3. FEYNMAN'S SUM-OVER-PATHS\n\n(1)\n\nA quantum gate basis is a set of universal quantum gates, i.e. any unitary transformation can\nbe presented as a composition of the gates of the\nbasis. As well as in the classical case, there are\nseveral sets of universal quantum gates. For our\nwork it is convenient to choose the particular universal gate basis consisting of Hadamard and Toffoli gates [3].\nThe Hadamard gate is a one-qubit gate. It\nturns a computational basis state into the equally\nweighted superposition\nH : |0i 7\u2192\nH : |1i 7\u2192\n\n\u221a1 (|0i\n2\n\u221a1 (|0i\n2\n\nai\n\n2\u2297n\n\nThe output state |bi is not the outcome of the\ncomputation until its measurement. After that\nthe output state can be used anywhere.\nSome unitary transformations are called quantum gates. A quantum gate acts only on a few\nqubits, on the rest it acts as the identity. A quantum circuit can be assembled by appropriately\naligning quantum gates. The unitary transformation defined by the circuit is the composition\nof the constituent unitary transformations\nUf = Um Um\u22121 * * * U2 U1\n\nelement hb| Uf |ai yields the probability amplitude for transition from an initial quantum state\n|ai to the final quantum state |bi. The matrix\nelement is decomposed in accordance to the gate\ndecomposition of the circuit unitary transformation (1) and can be calculated as sum over all the\nintermediate states ai , i = 1,2, . . . m - 1:\nX\nhb| Um |am\u22121 i * * * ha1 | U1 |ai\nhb| Uf |ai =\n\nTo apply the famous Feynman's sum-overpaths approach to calculate the matrix element\nof a quantum circuit, we replace every quantum\ngate of the circuit under consideration by its classical counterpart. The trick here is to select\nthe corresponding classical gate for the quantum\nHadamard gate because for any input value, 0 or\n1, it gives with equal probability either 0 or 1. We\ndenote the output of the classical Hadamard gate\nby the path variable x. Its value determines one\nof the two possible paths of computation. The\nclassical Toffoli gate acts as\n(a1 , a2 , a3 ) 7\u2192 (a1 , a2 , a3 \u2295 a1 a2 ) ,\nand the classical Hadamard gate as\na1 7\u2192 x\n\nai , x \u2208 Z2\n\n+ |1i)\n\u2212 |1i)\n\nThe resulting superpositions for |0i and |1i differ\nby a phase factor.\nThe Toffoli gate is a tree-qubit gate. Input bits\nx and y control the behavior of bit z, and the\nToffoli gate acts on computational basis states as\n(x, y, z) 7\u2192 (x, y, z \u2295 xy)\nAn action of a quantum circuit can be described by a square unitary matrix whose matrix\n\nFigure 1. From quantum to classical circuit\n\n\fA Software Package to Construct Polynomial Sets over Z2 for Quantum Computations\nFig. 1 shows an example of quantum circuit\n(taken from [1]) and its classical correspondence.\nThe path variables xi comprise the (vector) path\nx = (x1 , x2 , x3 , x4 )T \u2208 Z42 .\nA classical path is a sequence of classical bit\nstrings a, a1 , a2 , . . . , am = b resulting from application of the classical gates. For each selection\nof values for the path variables xi we have a sequence of classical bit strings which is called an\nadmissible classical path. Each admissible classical path has a phase which is determined by the\nHadamard gates applied. The phase is changed\nonly when the input and output of the Hadamard\ngate are simultaneously equal to 1, and this gives\nthe folmula\nX\n\u03c6(x) =\ninput \u2022 output\n\n3\n\nFigure 2. Circuit decomposition into elementary\ngates\n\nHadamardgates\n\nToffoli gates do not change the phase.\nFor our example the phase of the path x is\n\u03c6(x) = a1 x1 \u2295 a2 x2 \u2295 x1 x3 \u2295 x4 (a3 \u2295 x1 x2 )\nThe matrix element of a quantum circuit is\ngiven by sum over all the allowed paths from the\nclassical states a to b\nX\n1\n\u03c6(x)\n(\u22121)\nhb| Uf |ai = \u221a\n2h x:b(x)=b\nwhere h is the number of Hadamard gates. The\nterms in the sum have the same absolute value\nbut vary in sign.\nLet N0 be the number of positive terms in the\nsum and N1 the number of negative terms\nN0 = |{x|b(x) = b &\n\n\u03c6(x) = 0}|\n\nN1 = |{x|b(x) = b &\n\n\u03c6(x) = 1}|\n\nThese equations count solutions to a system of\nn+1 polynomials in h variables over Z2 . Then the\nmatrix element may be written as the difference\n1\nhb| Uf |ai = \u221a (N0 \u2212 N1 )\n2h\n4. CIRCUIT DECOMPOSITION\nTo provide a user with a tool for assembling\narbitrary quantum circuits composed from the\n\nHadamard and Toffoli gates we represent a circuit as a rectangular table (Fig. 2).\nEach cell in the table contains an elementary\ngate from following set\n+ \u2227 \u2228\n\n\u2227\n\n\u2228\n\n\u2227 \u2228\n\nE = {I, I, I, I , M , M , A, A, H}\n\n(2)\n\nso that the output for each row is determined by\nthe composition of the elementary gates in the\nrow. Thereby, each elementary unitary transformation Uj is represented as an n-tuple of elementary gates.\nFig. 3 shows action of the elementary gates\nfrom (2): the identities, the multiplications, the\nadditions modulo 2, and the classical Hadamard\ngate. The identity just reproduces its input. The\nidentity-cross reproduces also its vertical input\nfrom the top elementary gate to the bottom one\nand vice versa. Every identity-down and identityup have two outputs \u2013 horizontal and vertical.\nThe multiplication-up and multiplication-down\nperform multiplication of their horizontal and\nthe corresponding vertical inputs. In a similar\nmanner act the addition-up and addition-down.\nEach Hadamard gate outputs an independent\npath variable irrespective of its input and can give\na nonzero contribution to the phase.\n\n\f4\n\nVladimir Gerdt, Vasily Severyanov\nphase is also calculated. Then we proceed the\nsame way with the second column, with the third\ncolumn, and so on up to the last column. Fig. 4\nshows an example.\n\nFigure 4. Assembling circuit\n\nApart from the ordinary menu, our program\ncontains the toolbar for selecting an elementary\ngate and the toolbar for main operations. There\nare two windows: for assembling a circuit and for\nshowing its polynomials.\nA circuit is represented in the program as\ntwo 2d-arrays: one for the elementary gates and\nanother for their polynomials. The phase polynomial is separately represented. The following\npiece of code demonstrates construction of the\ncircuit polynomials\nFigure 3. Action of elementary gates\n\n5. ASSEMBLING CIRCUITS\nHow can one assemble a circuit? First of all,\nwe define an empty table of the required size. In\nthis case both output and phase are not fixed.\nThen we place the required elementary gates in\nappropriate cells. Now the output is the result of\napplying the elementary gates to the input. The\n\nfor each Column in Table of Gates\nfor each Gate in Column {\nconstruct Gate Polynomial;\nif Gate id Hadamard\nreconstruct Phase Polynomial; }\nThe method for constructing a gate polynomial\nis recursive because of the need to go up or down\nfor some gates.\nAny circuit is saved as two files. One file is binary and contains the circuit itself. Another file\nhas a text format. It contains the circuit polynomials in a symbolic form. The program allows\n\n\fA Software Package to Construct Polynomial Sets over Z2 for Quantum Computations\nto save polynomials in several formats convenient\nfor loading into a computer algebra system (for\nexample, in Maple or Mathematica) for the further processing. It is also possible to load back in\nmemory a saved circuit.\nNote, that the part of our code for name space\nPolynomial Modulo 2 written in C# [4] can\nalso be used independently on our program. This\npart contains classes for handling polynomials\nover the finite field Z2 . Class Polynomial is a list\nof monomials, class Monomial is a list of letters,\nclass Letter is an indexed letter provided with a\npositive integer superscript (power degree).\n6. QUANTUM POLYNOMIALS\nA system generated by the program is a finite\nset F \u2282 R of polynomials in the ring\nR := Z2 [ai , bj ][x1 , ..., xh ]\nai , bj \u2208 Z2 , i, j = 1, ...n\n\nin h variables and 2n binary coefficients. One has\nto count the number of roots N0 and N1 in Z2 of\nthe polynomial sets\nF0 = {f, ..., fk , \u03c6 } , F1 = {f, ..., fk , \u03c6 + 1 }\nThen the circuit matrix is given by\n1\n( N0 \u2212 N 1 )\nhb| U | ai = \u221a\n2h\nTo count the number of roots one can convert\nF0 and F1 into a triangular form by computing\nthe lexicographical Gr\u00f6bner basis by means of the\nBuchberger algorithm or by involutive algorithm\ndecribed in [2].\nFor the example shown on Fig. 1 we have the\nfollowing polynomial system:\nf1 = x2 x4 + x3 + b1\nf2 = x2 + b2\nf3 = x4 + b3\n\u03c6 = x1 x2 + x1 x3 + a1 x1 + a2 x2 + a3 x4\nThe lexicographical Gr\u00f6bner basis for the ordering x1 \u227b x2 \u227b x3 \u227b x4 on the variables and\nrepresenting both F0 and F1 is as follows\ng1\ng2\ng3\ng3\n\n= (a1 + b1 )x1 + a2 b2 + a3 b3 (+1)\n= x2 + b2\n= x3 + b1 + b2 b3\n= x4 + b3\n\n5\n\nFrom this lexicographical Gr\u00f6bner basis we immediately obtain the following conditions on the\nparameters:\na1 + b 1 = 0 & a2 b 2 + a3 b 3 = 0\na1 + b 1 = 0 & a2 b 2 + a3 b 3 = 1\nFrom these conditions we easily count 2 (0) roots\nof F0 (F1 ) and 0 (2) roots of F0 (F1 ). In all other\ncases there is 1 root of F0 and F1 .\nSome matrix elements are\n1\nh000| U |001i =\n, h000| U |111i = 0\n2\n7. CONCLUSION\nWe presented the first version of a program tool\nfor assembling arbitrary quantum circuits and for\nconstructing the corresponding polynomial equation systems. Its number of solutions uniquely\ndetermines the circuit matrix.\nThere is the algorithmic Gr\u00f6bner basis approach to converting the system of quantum polynomials into a triangular form which is useful for\ncomputing the number of solutions.\nThus, the above presented software together\nwith Gr\u00f6bner bases provide a tool for simulating\nquantum circuits.\n8. ACKNOWLEDGMENTS\nThe research presented in this paper was partially supported by the grant 04-01-00784 from\nthe Russian Foundation for Basic Research.\nREFERENCES\n1. Christopher M. Dawson et al. Quantum computing and polynomial equations over the finite field Z2 . arXiv:quant-ph/0408129.\n2. Gerdt V.P. Involutive Algorithms for Computing Grobner Bases. Computational commutative and non-commutative algebraic geometry, IOS Press, Amsterdam, 2005, pp.199225. arXiv:math.AC/0501111, 2005.\n3. Aharonov D. A Simple Proof that Toffoli\nand Hadamard Gatesare Quantum Universal.\narXiv:quant-ph/0301040.\n4. Microsoft Visual C# .net Standard, Version\n2003.\n\n\f"}