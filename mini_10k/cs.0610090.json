{"id": "http://arxiv.org/abs/cs/0610090v1", "guidislink": true, "updated": "2006-10-14T10:39:42Z", "updated_parsed": [2006, 10, 14, 10, 39, 42, 5, 287, 0], "published": "2006-10-14T10:39:42Z", "published_parsed": [2006, 10, 14, 10, 39, 42, 5, 287, 0], "title": "Combined Integer and Floating Point Multiplication Architecture(CIFM)\n  for FPGAs and Its Reversible Logic Implementation", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0610135%2Ccs%2F0610048%2Ccs%2F0610050%2Ccs%2F0610042%2Ccs%2F0610066%2Ccs%2F0610017%2Ccs%2F0610091%2Ccs%2F0610045%2Ccs%2F0610012%2Ccs%2F0610024%2Ccs%2F0610084%2Ccs%2F0610103%2Ccs%2F0610095%2Ccs%2F0610144%2Ccs%2F0610068%2Ccs%2F0610123%2Ccs%2F0610013%2Ccs%2F0610029%2Ccs%2F0610073%2Ccs%2F0610114%2Ccs%2F0610078%2Ccs%2F0610113%2Ccs%2F0610142%2Ccs%2F0610063%2Ccs%2F0610035%2Ccs%2F0610163%2Ccs%2F0610143%2Ccs%2F0610026%2Ccs%2F0610134%2Ccs%2F0610116%2Ccs%2F0610152%2Ccs%2F0610047%2Ccs%2F0610109%2Ccs%2F0610052%2Ccs%2F0610065%2Ccs%2F0610025%2Ccs%2F0610057%2Ccs%2F0610030%2Ccs%2F0610037%2Ccs%2F0610053%2Ccs%2F0610108%2Ccs%2F0610105%2Ccs%2F0610087%2Ccs%2F0610054%2Ccs%2F0610162%2Ccs%2F0610085%2Ccs%2F0610121%2Ccs%2F0610165%2Ccs%2F0610019%2Ccs%2F0610154%2Ccs%2F0610133%2Ccs%2F0610141%2Ccs%2F0610008%2Ccs%2F0610111%2Ccs%2F0610055%2Ccs%2F0610072%2Ccs%2F0610151%2Ccs%2F0610093%2Ccs%2F0610083%2Ccs%2F0610009%2Ccs%2F0610049%2Ccs%2F0610137%2Ccs%2F0610074%2Ccs%2F0610056%2Ccs%2F0610006%2Ccs%2F0610129%2Ccs%2F0610058%2Ccs%2F0610079%2Ccs%2F0610174%2Ccs%2F0610011%2Ccs%2F0610086%2Ccs%2F0610059%2Ccs%2F0610090%2Ccs%2F0610125%2Ccs%2F0610077%2Ccs%2F0610122%2Ccs%2F0610076%2Ccs%2F0610148%2Ccs%2F0610124%2Ccs%2F0610098%2Ccs%2F0610136%2Ccs%2F0610080%2Ccs%2F0610128%2Ccs%2F0610101%2Ccs%2F0610028%2Ccs%2F0610043%2Ccs%2F0610126%2Ccs%2F0610100%2Ccs%2F0610164%2Ccs%2F0610168%2Ccs%2F0610002%2Ccs%2F0408031%2Ccs%2F0408019%2Ccs%2F0408036%2Ccs%2F0408001%2Ccs%2F0408011%2Ccs%2F0408035%2Ccs%2F0408067%2Ccs%2F0408007%2Ccs%2F0408037%2Ccs%2F0408018&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Combined Integer and Floating Point Multiplication Architecture(CIFM)\n  for FPGAs and Its Reversible Logic Implementation"}, "summary": "In this paper, the authors propose the idea of a combined integer and\nfloating point multiplier(CIFM) for FPGAs. The authors propose the replacement\nof existing 18x18 dedicated multipliers in FPGAs with dedicated 24x24\nmultipliers designed with small 4x4 bit multipliers. It is also proposed that\nfor every dedicated 24x24 bit multiplier block designed with 4x4 bit\nmultipliers, four redundant 4x4 multiplier should be provided to enforce the\nfeature of self repairability (to recover from the faults). In the proposed\nCIFM reconfigurability at run time is also provided resulting in low power. The\nmajor source of motivation for providing the dedicated 24x24 bit multiplier\nstems from the fact that single precision floating point multiplier requires\n24x24 bit integer multiplier for mantissa multiplication. A reconfigurable,\nself-repairable 24x24 bit multiplier (implemented with 4x4 bit multiply\nmodules) will ideally suit this purpose, making FPGAs more suitable for integer\nas well floating point operations. A dedicated 4x4 bit multiplier is also\nproposed in this paper. Moreover, in the recent years, reversible logic has\nemerged as a promising technology having its applications in low power CMOS,\nquantum computing, nanotechnology, and optical computing. It is not possible to\nrealize quantum computing without reversible logic. Thus, this paper also paper\nprovides the reversible logic implementation of the proposed CIFM. The\nreversible CIFM designed and proposed here will form the basis of the\ncompletely reversible FPGAs.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0610135%2Ccs%2F0610048%2Ccs%2F0610050%2Ccs%2F0610042%2Ccs%2F0610066%2Ccs%2F0610017%2Ccs%2F0610091%2Ccs%2F0610045%2Ccs%2F0610012%2Ccs%2F0610024%2Ccs%2F0610084%2Ccs%2F0610103%2Ccs%2F0610095%2Ccs%2F0610144%2Ccs%2F0610068%2Ccs%2F0610123%2Ccs%2F0610013%2Ccs%2F0610029%2Ccs%2F0610073%2Ccs%2F0610114%2Ccs%2F0610078%2Ccs%2F0610113%2Ccs%2F0610142%2Ccs%2F0610063%2Ccs%2F0610035%2Ccs%2F0610163%2Ccs%2F0610143%2Ccs%2F0610026%2Ccs%2F0610134%2Ccs%2F0610116%2Ccs%2F0610152%2Ccs%2F0610047%2Ccs%2F0610109%2Ccs%2F0610052%2Ccs%2F0610065%2Ccs%2F0610025%2Ccs%2F0610057%2Ccs%2F0610030%2Ccs%2F0610037%2Ccs%2F0610053%2Ccs%2F0610108%2Ccs%2F0610105%2Ccs%2F0610087%2Ccs%2F0610054%2Ccs%2F0610162%2Ccs%2F0610085%2Ccs%2F0610121%2Ccs%2F0610165%2Ccs%2F0610019%2Ccs%2F0610154%2Ccs%2F0610133%2Ccs%2F0610141%2Ccs%2F0610008%2Ccs%2F0610111%2Ccs%2F0610055%2Ccs%2F0610072%2Ccs%2F0610151%2Ccs%2F0610093%2Ccs%2F0610083%2Ccs%2F0610009%2Ccs%2F0610049%2Ccs%2F0610137%2Ccs%2F0610074%2Ccs%2F0610056%2Ccs%2F0610006%2Ccs%2F0610129%2Ccs%2F0610058%2Ccs%2F0610079%2Ccs%2F0610174%2Ccs%2F0610011%2Ccs%2F0610086%2Ccs%2F0610059%2Ccs%2F0610090%2Ccs%2F0610125%2Ccs%2F0610077%2Ccs%2F0610122%2Ccs%2F0610076%2Ccs%2F0610148%2Ccs%2F0610124%2Ccs%2F0610098%2Ccs%2F0610136%2Ccs%2F0610080%2Ccs%2F0610128%2Ccs%2F0610101%2Ccs%2F0610028%2Ccs%2F0610043%2Ccs%2F0610126%2Ccs%2F0610100%2Ccs%2F0610164%2Ccs%2F0610168%2Ccs%2F0610002%2Ccs%2F0408031%2Ccs%2F0408019%2Ccs%2F0408036%2Ccs%2F0408001%2Ccs%2F0408011%2Ccs%2F0408035%2Ccs%2F0408067%2Ccs%2F0408007%2Ccs%2F0408037%2Ccs%2F0408018&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "In this paper, the authors propose the idea of a combined integer and\nfloating point multiplier(CIFM) for FPGAs. The authors propose the replacement\nof existing 18x18 dedicated multipliers in FPGAs with dedicated 24x24\nmultipliers designed with small 4x4 bit multipliers. It is also proposed that\nfor every dedicated 24x24 bit multiplier block designed with 4x4 bit\nmultipliers, four redundant 4x4 multiplier should be provided to enforce the\nfeature of self repairability (to recover from the faults). In the proposed\nCIFM reconfigurability at run time is also provided resulting in low power. The\nmajor source of motivation for providing the dedicated 24x24 bit multiplier\nstems from the fact that single precision floating point multiplier requires\n24x24 bit integer multiplier for mantissa multiplication. A reconfigurable,\nself-repairable 24x24 bit multiplier (implemented with 4x4 bit multiply\nmodules) will ideally suit this purpose, making FPGAs more suitable for integer\nas well floating point operations. A dedicated 4x4 bit multiplier is also\nproposed in this paper. Moreover, in the recent years, reversible logic has\nemerged as a promising technology having its applications in low power CMOS,\nquantum computing, nanotechnology, and optical computing. It is not possible to\nrealize quantum computing without reversible logic. Thus, this paper also paper\nprovides the reversible logic implementation of the proposed CIFM. The\nreversible CIFM designed and proposed here will form the basis of the\ncompletely reversible FPGAs."}, "authors": ["Himanshu Thapliyal", "Hamid R. Arabnia", "A. P Vinod"], "author_detail": {"name": "A. P Vinod"}, "author": "A. P Vinod", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1109/MWSCAS.2006.382306", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/cs/0610090v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cs/0610090v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "Published in the proceedings of the The 49th IEEE International\n  Midwest Symposium on Circuits and Systems (MWSCAS 2006), Puerto Rico, August\n  2006. Nominated for the Student Paper Award(12 papers are nominated for\n  Student paper Award among all submissions)", "arxiv_primary_category": {"term": "cs.AR", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.AR", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cs/0610090v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/cs/0610090v1", "journal_reference": null, "doi": "10.1109/MWSCAS.2006.382306", "fulltext": "Combined Integer and Floating Point Multiplication\nArchitecture(CIFM) for FPGAs and Its Reversible Logic\nImplementation\nHimanshu Thapliyal\nCentre for VLSI Design\nIIIT Hyderabad, India\n(thapliyalhimanshu@yahoo.com)\n\nHamid R. Arabnia\nThe University of Georgia,\nDepartment of Computer Science, USA\n(hra@cs.uga.edu)\n\nAbstract- In this paper, the authors propose the idea of a\ncombined integer and floating point multiplier(CIFM) for\nFPGAs. The authors propose the replacement of existing\n18x18 dedicated multipliers in FPGAs with dedicated 24x24\nmultipliers designed with small 4x4 bit multipliers. It is also\nproposed that for every dedicated 24x24 bit multiplier block\ndesigned with 4x4 bit multipliers, four redundant 4x4\nmultiplier should be provided to enforce the feature of self\nrepairability (to recover from the faults). In the proposed\nCIFM reconfigurability at run time is also provided\nresulting in low power. The major source of motivation for\nproviding the dedicated 24x24 bit multiplier stems from the\nfact that single precision floating point multiplier requires\n24x24 bit integer multiplier for mantissa multiplication. A\nreconfigurable, self-repairable 24x24 bit multiplier\n(implemented with 4x4 bit multiply modules) will ideally suit\nthis purpose, making FPGAs more suitable for integer as\nwell floating point operations. A dedicated 4x4 bit multiplier\nis also proposed in this paper. Moreover, in the recent years,\nreversible logic has emerged as a promising technology\nhaving its applications in low power CMOS, quantum\ncomputing, nanotechnology, and optical computing. It is not\npossible to realize quantum computing without reversible\nlogic. Thus, this paper also paper provides the reversible\nlogic implementation of the proposed CIFM. The reversible\nCIFM designed and proposed here will form the basis of the\ncompletely reversible FPGAs.\n\nI.\n\nINTRODUCTION\n\nImage and digital signal processing applications require high\nfloating point calculations throughput, and nowadays FPGAs are\nbeing used for performing these Digital Signal Processing (DSP)\noperations. Floating point operations are hard to implement on\nFPGAs as their algorithms are quite complex [1]. In order to\ncombat this performance bottleneck, FPGAs vendors including\nXilinx have introduced FPGAs with nearly 254 18x18 bit\ndedicated multipliers [2]. These architectures can cater the need\nof high speed integer operations but are not suitable for\nperforming floating point operations especially multiplication.\nFloating point multiplication is one of the performance\nbottlenecks in high speed and low power image and digital signal\nprocessing applications [3]. Recently, there has been significant\nwork on analysis of high-performance floating-point arithmetic\non FPGAs[7,8,9,10]. But so far no one has addressed the issue of\nchanging the dedicated 18x18 multipliers in FPGAs by an\n\nA.P Vinod\nSchool of Computer Engineering\nNanyang Technological University,\nSingapore (asvinod@ntu.edu.sg)\n\nalternative implementation for improvement in floating point\nefficiency. It is a well known concept that the single precision\nfloating point multiplication algorithm is divided into three main\nparts corresponding to the three parts of the single precision\nformat. In FPGAs, the bottleneck of any single precision\nfloating-point design is the 24x24 bit integer multiplier required\nfor multiplication of the mantissas. In order to circumvent the\naforesaid problems, this paper proposes a novel combined integer\nand floating point multiplication architecture (CIFM). The CIFM\ncan perform both integer as well as single precision floating point\nmultiplication with a single dedicated 24x24 bit multiplier block\ndesigned with small 4x4 bit multipliers. The basic idea is to\nreplace the existing 18x18 multipliers in FPGAs by dedicated\n24x24 bit multiplier blocks which are implemented with\ndedicated 4x4 bit multipliers, making the FPGAs suitable for\ninteger as well as floating point calculations. The proposed\narchitecture also brings the idea of reconfigurability and self\nrepairability [6] at runtime, thus providing a low power as well as\nfault recovering architecture in FPGAs. The proposed\narchitecture is especially designed for high performance and low\npower floating point multiplications in FPGAs. Since, the authors\npropose the idea of implementing CIFM with dedicated 24x24 bit\nmultiplier designed with small 4x4 bit multipliers. Hence, a novel\ndedicated 4x4 bit multiplier beneficial in terms of speed, power\nand area is also proposed in this paper. Furthermore, researchers\nlike Landauer have shown that for irreversible logic\ncomputations, each bit of information lost, generates kTln2 joules\nof heat energy, where k is Boltzmann's constant and T the\nabsolute temperature at which computation is performed [11].\nBennett showed that kTln2 energy dissipation would not occur, if\na computation is carried out in a reversible way [12], since the\namount of energy dissipated in a system bears a direct\nrelationship to the number of bits erased during computation.\nReversible circuits are those circuits that do not lose information\nand reversible computation in a system can be performed only\nwhen the system comprises of reversible gates. These circuits can\ngenerate unique output vector from each input vector, and vice\nversa, that is there is a one-to-one mapping between input and\noutput vectors. Thus, an NXN reversible gate can be represented\nas Iv=(I1, I2,I3,I4,.................................................IN).\nOv = (O1, O2 , O3,........................................ON).\nWhere Iv and Ov represent the input and output vectors\nrespectively. Classical logic gates are irreversible since input\nvector states cannot be uniquely reconstructed from the output\nvector states. There are a number of existing reversible gates such\nas Fredkin gate [13], TSG [4,5] and the New Gate (NG) [14].\nAs the Moore's law continues to hold, the processing power\n\n\fdoubles every 18 months. The current irreversible technologies\nwill dissipate a lot of heat and can reduce the life of the circuit.\nThe reversible logic operations do not erase (lose) information\nand dissipate very less heat. Thus, reversible logic is likely to be\nin demand in high speed power aware circuits. Reversible circuits\nare of high interest in low-power CMOS design, optical\ncomputing, nanotechnology and quantum computing. It has\nbeen proved that the quantum arithmetic must be built from\nreversible logical components. The major constraints in\nreversible logic are\n1. to minimize the number of reversible gates.\n2. to minimize the number of garbage outputs. (Garbage output\nrefers to the output that is not used for further computations).\nThis paper also introduces the reversible logic\nimplementation of the proposed CIFM using a recently proposed\nTSG gate [4,5] and New gate[14]. The TSG gate has the\nadvantage that it can work singly as a reversible Full adder with\nonly two garbage outputs while the New Gate has the advantage\nthat it can work singly as reversible half adder with bare\nminimum of one garbage output. Thus the highly optimized\nreversible implementation of the CIFM is proposed, best in terms\nof number of reversible gates and garbage outputs. It can be\nconsidered as an attempt to provide a primitive prototype of\ncomponents of reversible FPGAs.\n\nII.\n\nFLOATING POINT MULTIPLIER ARCHITECTURE\n\nThe single precision floating point algorithm is divided into\nthree main parts corresponding to the three parts of the single\nprecision format. The first part of the product which is the sign\nis determined by an exclusive OR function of the two input\nsigns. The exponent of the product which is the second part is\ncalculated by adding the two input exponents. The third part\nwhich is the significand of the product is determined by\nmultiplying the two input significands each with a \"1\"\nconcatenated to it. Figure 1 shows the architecture of the single\nprecision floating point multiplier. It can be easily observed\nfrom the Figure 1 that 24x24 bit integer multiplier is the main\nperformance bottleneck for high speed and low power\noperations. In FPGAs, the availability of the dedicated 18x18\nmultipliers instead of dedicated 24x24 bit multiply blocks\nfurther complicates this problem. This is the driving force that\nleads to the proposal of CIFM architecture suitable both for\ninteger as well as floating point multiplication operations.\n\nIII.\n\nPROPOSED CIFM ARCHITECTURE FOR\nMULTIPLICATION IN FPGAS\n\nThe authors propose the idea of a combined integer and floating\npoint multiplier (CIFM) for FPGAs. In the CIFM, it is proposed\nto replace the existing 18x18 bit multipliers in FPGAs with\ndedicated blocks of 24x24 bit integer multipliers designed with\n4x4 bit multipliers(CIFM). The reason for this stems from the\nfact that it will make the FPGAs also suitable for floating point\nmultiplication operations. The features of reconfigurabilty and\nself repairability at run time are also proposed in the architecture\nto attain low power and self repairability from faults.\n\nA. Reconfigurability Feature\nIn the proposed architecture, the dedicated 24x24 bit\nmultiplication block is fragmented to four parallel 12x12 bit\nmultiplication modules as shown in Figure 2, where AH, AL, BH\nand BL are each of 12 bits. The 12x12 multiplication modules are\nimplemented using small 4x4 bit multipliers as shown in\nFigure 3. Thus, the whole 24x24 bit multiplication operation is\ndivided into 36 4x4 multiply modules working in parallel.\nAs shown in Figure 2, the proposed 24x24 bit multiplication\narchitecture is reconfigurable at run time with the outputs of\ncheckers working as control signals. If any of (A or B)'s mantissa\nis only of 12 bits then the Checker will check this and will switch\nof the multiply blocks which are not required using the control\nsignal. Thus significant power saving can be attained at run time\n(on fly). The reconfigurability at run time for attaining low power\nhas also been extended to individual 12x12 bit multiply modules.\nAs shown in Figure 3 , the 12 bit numbers A & B to be\nmultiplied are divided into 4 bits groups A3,A2,A1 and\nB3,B2,B1 respectively. Checkers at A3,A2 and B3,B2 will\ncheck whether the mantissas to be multiplied are of 12 bits, 8\nbits or 4 bits. Then accordingly, will switch on or switch off, the\nrequired 4x4 multiply modules. Hence, there is a significant\nreduction in power consumption if the numbers to be multiplied\nare less than 12 bits, as only the required blocks are operating\nwhile others are switched off.\n\nB. Self Repairability\nSelf repairability at run time is also provided by providing a\nredundant 4x4 multiply module to each 12x12 multiply module,\nas shown in Figure 4. The product of the redundant multiplier is\ndistributed to all 4x4 bit multiplier blocks making the 12x12 bit\nmultiply module. The 4x4 multiplier to be repaired is specified\nby the given Aij, Bij and E bits. Then the 4x4 multiplier to be\nrepaired abandons its own output and replaces it by the one from\nthe extra multiplier. It should be noticed that the power supply of\nthe disabled unit (one of the nine 4x4 multiplier) will be turned\noff through a power enable control to reduce the power\ndissipation. Thus, the proposed multiplier is also capable of\nrecovering from faults.\n\nC. Additional Advantages\n\nFigure 1.\n\nSingle Precision Floationg Point Multiplication Architecture\n\nThe additional advantage of the proposed CIFM is that floating\npoint multiplication operation can now be performed easily in\nFPGA without any resource and performance bottleneck. In the\nsingle precision floating point multiplication, the mantissas are of\n23 bits. Thus, 24x24 bit (23 bit mantissa +1 hidden bit) multiply\noperation is required for getting the intermediate product. With\nthe proposed architecture, the 24x24 bit mantissa multiplication\ncan now be easily performed by passing it to the dedicated 24x24\nbit multiply block, which will generate the product with its\n\n\fdedicated small 4x4 bit multipliers. If either of the mantissa are\nless than 23 bits, reconfigurability feature at run time in the\nproposed CIFM will help in achieving significant power saving.\nMoreover, the redundant multipliers in the 24x24 bit multiply\nblock will also take care of fault in any of the dedicated 4x4 bit\nmultipliers. The large integer multiply operations can also be\nperformed easily by dedicated 4x4 bit multipliers reducing the\nneed of dedicated large size multipliers.\n\nFigure 2. Proposed 24x24 bit Architecture\n\nIV.\n\nPROPOSED DEDICATED 4X4 BIT MULTIPLIER\n\nAs evident from the proposed CIFM architecture, a high speed\nlow power dedicated 4x4 bit multiplier will significantly\nimprove the efficiency of the CIFM architecture. Thus, a\ndedicated 4x4 bit multiplier efficient in terms of area, speed and\npower is proposed. Figure 5 shows the architecture of the\nproposed multiplier. For (4 X 4) bits, 4 partial products are\ngenerated, and are added in parallel. Each two adjacent partial\nproduct are subdivided to 2 bit blocks, where a 2 bit sum is\ngenerated by employing a 2-bit parallel adder appropriately\ndesigned by choosing the combination of half adder-half adder,\nhalf adder-full adder( forming the blocks 1,2,3,4 working in\nparallel). This forms the first level of computation. The partial\nsums thus generated are added again in block 5 & 6 (parallel\nadders), working in parallel by appropriately choosing the\ncombination of half adders and full adders. This forms the\nsecond level of computation. The partial sums generated in the\nsecond level are utilized in the third level(blocks 7 &8) to arrive\nat the final product. Hence, there is a significant reduction in the\npower consumption since the whole computation has been\nhierarchically divided to levels. The reason for this stems from\nthe fact that power is provided only to the level that is involved\nin computation and thereby rendering the remaining two levels\nswitched off (by employing a control circuitry). Working in\nparallel significantly improves the speed of the proposed\nmultiplier. The proposed architecture is highly optimized in\nterms of area, speed and power. The proposed architecture is\nfunctionally verified in Verilog HDL and synthesized in Xilinx\nFPGA.\n\nFigure 3. Internal structure of Individual 12x12 multiply module\n\nFigure 5. Proposed Dedicated 4x4 Bit Multiplier\n\nV.\n\nFigure 4. Proposed Feature of Self Repairability\n\nVERIFICATION AND IMPLEMENTATION\n\nIn this study, the proposed CIFM architecture is implemented in\nVerilog HDL and logic simulation is done in Veriwell Simulator;\nthe synthesis and FPGA implementation is done using Xilinx\nWebpack 6.1. The design is optimized for speed and area using\nXilinx , Device Family : VirtexE, Device : XCV300e, Package:\nbg432, Speed grade: -8. The device is made up of multiplexers\nand LUTs. FPGA synthesis results have shown that the proposed\nfeature of reconfigurability at run time and the control circuitry\ndesigned for the introduction of this feature will marginally\nincrease the delay and area of the 24x24 bit dedicated block. It\nhas been found that for Xilinx VirtexE family, the delay of the\nproposed architecture is 41.203 ns with the area(cell usage) of\n3149 while the delay is 37.553 ns with the area(cell usage) of\n2967 without the additional feature of repairability. The results\nare shown in Table 1. Thus the results show that there is an\n\n\fincrement of 9.71% in delay and 6.13% in area with the\nintroduction of feature of reconfigurability at run time which can\nbe considered negligible with the advantages associated with it.\nTABLE I.\n\nSYNTHESIS RESULTS OF THE PROPOSED CIFM\nARCHITECTURE\n\ngate) and produces three garbage outputs. The reversible full\nadder circuit in [15,16] requires three reversible gates (one 3*3\nnew gate, one 3*3 Toffoli gate and one 2*2 Feynman gate) and\nproduces two garbage outputs. The design in [17] requires five\nreversible Fredkin gate and produces five garbage outputs. The\nfull adder designed using TSG in Fig. 5 requires only one\nreversible gate (one TSG gate) and produces only two garbage\noutputs. Hence, the full-adder design in Fig. 5 using TSG gate is\nbetter than the previous full-adder designs of [14,15,16,17]. A\ncomparative experimental result is shown in Table II.\nTABLE II.\n\nEXPERIMENTAL RESULTS OF DIFFERENT REVERSIBLE\nFULL ADDER CIRCUITS\n\nFull adder\n\nNo of\n\nNo of Garbage\n\nGates\n\nOutputs\n\n1\n\n2\n\nUnit Delay\n1\n\nUsing TSG\n\nVI.\n\nREVERSIBLE LOGIC IMPLEMENTATION OF\nPROPOSED CIFM\n\nIn order to implement the reversible logic design of the\nproposed CIFM, some of the basic concepts of the reversible\nlogic are discussed.\n\nA.\n\nBasic Reversible Gates\nThere are a number of existing reversible gates such as\nFredkin gate [13], TSG [4,5] and the New Gate (NG) [14].\nSince, the major reversible gate used in designing the reversible\nCIFM is TSG gate, hence only the TSG gate is discussed in this\nsection.\n\n1) TSG GATE\n\nRecently, a 4 * 4 one through reversible gate called TS gate\n\"TSG\" is proposed [4,5,6]. The reversible TSG gate is shown in\nFig. 6. The TSG gate can implement all Boolean functions.\n\nFigure 6. Reversible 4 *4 TSG proposed in [4,5,6]\n\nExisting Circuit[14]\n\n3\n\n3\n\n3\n\nExisting Circuit [15,16]\n\n3\n\n2\n\n3\n\nExisting Circuit[17]\n\n5\n\n5\n\n5\n\nB.\n\nDesign of Reversible CIFM\n\nAs evident from the architecture of CIFM, the primary\nrequirements to design reversible CIFM are the reversible 4x4\nbit multiplier and reversible parallel adders. The authors have\nalready designed high speed optimal reversible parallel adders\nhighly optimized in terms of number of reversible gates and\ngarbage outputs [4,5,6]. For the reversible implementation of the\nproposed 4x4 bit dedicated multiplier, reversible full adder and\nhalf adder are required. As shown above TSG gate is the best\ngate to design reversible full adder but if we use TSG gate to\ndesign reversible half adder, the garbage outputs will increase in\nthe proposed design. Thus, we have used New Gate [14] to\ndesign reversible half adder to make the design highly optimized\nin terms of number of reversible gates and garbage outputs. The\nNew gate can realize the half adder with bare minimum of one\ngarbage output. Figure 8 (a) shows the New Gate and\nFigure 8(b) shows its working as a reversible half adder.\nFigure 9 shows the reversible implementation of the proposed\n4x4 dedicated multipliers. Once you have the reversible 4x4\ndedicated multipliers, the reversible 12x12 multipliers can be\neasily designed from them as explained earlier to finally\ngenerate the CIFM architecture as shown in Figure 10.\n\nOne of the prominent functionality of the TSG gate is that it can\nwork singly as a reversible Full adder unit. Fig. 7 shows the\nimplementation of the TSG gate as a reversible Full adder.\n\n(a)\nFigure 8.\nFigure 7.\n\nTSG Gate working Singly As a Reversuble Full Adder\n\nA number of reversible full adders were proposed in\n[14,15,16,17]. The reversible full adder circuit in [14] requires\nthree reversible gates (two 3*3 new gate and one 2*2 Feynman\n\n(b)\n(a) New Gate(NG) (b) New Gate as Half Adder\n\n\fREFERENCES\n[1]\n\n[2]\n[3]\n\n[4]\n\nFigure 9.\n\nReversible implementation of proposed dedicated 4x4 bit\nMultiplier( Garbage outputs not shown )\n\n[5]\n\n[6]\n\n[7]\n\n[8]\n\n[9]\n\nFigure 10. Proposed Reversible CIFM Architecture\n\nVII. CONCLUSION\nThis paper proposes a highly regular self-repairable and\nreconfigurable at run time(on fly) combined integer and floating\npoint multiplication architecture (CIFM) for performing both\ninteger as well as single precision floating point multiplication.\nBoth the repairing and reconfigurability take the advantage of\nthe partitioning of the circuit, which results in high\ncontrollability and observability, inherent in the decomposition\napproach. The results obtained are quite encouraging and there\nis a marginally increase in area and the delay of the CIFM with\nthe proposed features of repairabilty and reconfigurabilty.\nSignificant power saving is now possible in the multiplier with\nthe introduction of feature of reconfigurability at run time. Self\nrepairability in the multiplier will allow it to recover from logic\nfaults (stuck-at faults) caused by any of 36 4x4 multipliers. The\nmost significant aspect of the proposed architecture is that it will\nmake the FPGAs suitable for performing floating point\nmultiplication operations. The numbers of dedicated 24x24 bit\nmultiplication blocks in the FPGA can be provided according to\nits suitability for particular DSP operations. The reversible\nlogic design of the CIFM is also proposed as there are a number\nof advantages associated with reversible logic. The authors\nbelieve that proposed work will provide a new direction to\nFPGAs design both from floating point and reversible logic\nscenario.\n\n[10]\n\n[11]\n\n[12]\n[13]\n[14]\n\n[15]\n\n[16]\n\n[17]\n\nGH. A. Aty, Aziza 1. Hussein, I. S. Ashour and M. Mona,\"Highspeed, Area-Efficient FPGA-Based -Floating-point Multiplier\",\nProceedings ICM 2003, pp-274-277,Dec. 9-11 2003, Cairo, Egypt.\nwww.xilinx.com/products/silicon_ solutions/fpgas/virtex/virtex4/\nAhmet Akkas, Michael J. Schulte, \"A Quadruple Precision and\nDual Double Precision Floating-Point Multiplier\",. proceedings\nDSD 2003,pp.76-81,3-5 September 2003, Belek-Antalya, Turkey.\nHimanshu Thapliyal and M.B Srinivas, \"Novel Reversible \"TSG\"\nGate and Its Application for Designing Reversible Carry Look\nAhead Adder and Other Adder Architectures\", Tenth Asia-Pacific\nComputer Systems Architecture Conference (ACSAC05),\nSingapore, October 24 - 26, 2005, pp. 805-817.\nHimanshu Thapliyal and M.B Srinivas, \"Novel Reversible \"TSG\"\nGate and Its Applications for Designing Components of Primitive\nReversible/Quantum ALU\", Fifth International Conference on\nInformation, Communications and Signal Processing (ICICS\n2005), Bangkok, Thailand, 6-9 December 2005,pp.1425-1429 .\nRong Lin and Martin Margala, \" Novel Design and Verification of\na 16x16-b Self repairable Reconfigurable Inner Product\nProcessor\", GLSVLSI'02, April 18-19,2002, Newyork, USA., PP\n172-177.\nRonald Scrofano, Gokul Govindu, Viktor Pasanna,\"A Library of\nParameterizable Floating-Point Cores for FPGAs and Their\nApplication to Scientific Computing\", ERSA 2005, Las Vegas,\nNevada, USA, June 27-30, 2005,pp.137-148\nGokul Govindu, Viktor K. Prasanna, Vikash Daga, Sridhar\nGangadharpalli, V. Sridhar, \"Efficient Floating-point Based Block\nLU Decomposition on FPGAs\", ERSA 2005, Las Vegas, Nevada,\nUSA, June 21-24, 2004,pp.137-148\nGokul Govindu, Seonil Choi, Viktor K. Prasanna, Vikash Daga,\nSridhar Gangadharpalli, V. Sridhar,\"A High-Performance and\nEnergy-Efficient Architecture for Floating-Point Based LU\nDecomposition on FPGAs\", IPDPS 2004, Santa Fe, New Mexico,\nUSA,26-30 April 2004.\nGokul Govindu, Ling Zhuo, Seonil Choi, Viktor K. Prasanna,\n\"Analysis of High-Performance Floating-Point Arithmetic on\nFPGAs\", IPDPS 2004,Santa Fe, New Mexico, USA,26-30 April\n2004.\nR. Landauer, \"Irreversibility and Heat Generation in the\nComputational Process\", IBM Journal of Research and\nDevelopment, 5, pp. 183-191, 1961.\nC.H. Bennett , \"Logical Reversibility of Computation\", IBM J.\nResearch and Development, pp. 525-532, November 1973.\nE. Fredkin, T Toffoli, \"Conservative Logic\", International Journal\nof Theor. Physics, 21(1982),pp.219-253.\nMd. M. H Azad Khan, \"Design of Full-adder With Reversible\nGates\", International Conference on Computer and Information\nTechnology, Dhaka, Bangladesh, 2002, pp. 515-519.\nHafiz Md. Hasan Babu, Md. Rafiqul Islam, Syed Mostahed Ali\nChowdhury and Ahsan Raja Chowdhury ,\"Reversible Logic\nSynthesis for Minimization of Full Adder Circuit\", Proceedings\nof the\nEuroMicro Symposium on Digital\nSystem\nDesign(DSD'03), 3-5 September 2003, BelekAntalya,\nTurkey,pp-50-54.\nHafiz Md. Hasan Babu, Md. Rafiqul Islam, Syed Mostahed Ali\nChowdhury and Ahsan Raja Chowdhury,\" Synthesis of FullAdder Circuit Using Reversible Logic\",Proceedings 17th\nInternational Conference on VLSI Design (VLSI Design 2004),\nJanuary 2004, Mumbai, India,pp-757-760.\nJ.W . Bruce, M.A. Thornton,L. Shivakumariah,P.S. Kokate and\nX.Li, \"Efficient Adder Circuits Based on a Conservative Logic\nGate\", Proceedings of the IEEE Computer Society Annual\nSymposium on VLSI(ISVLSI'02),April 2002, Pittsburgh, PA,\nUSA, pp 83-88.\n\n\f"}