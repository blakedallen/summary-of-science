{"id": "http://arxiv.org/abs/1106.2899v1", "guidislink": true, "updated": "2011-06-15T08:14:05Z", "updated_parsed": [2011, 6, 15, 8, 14, 5, 2, 166, 0], "published": "2011-06-15T08:14:05Z", "published_parsed": [2011, 6, 15, 8, 14, 5, 2, 166, 0], "title": "Single Chain Slip-Spring Model for Fast Rheology Simulations of\n  Entangled Polymers on GPU", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1106.5270%2C1106.4077%2C1106.1233%2C1106.2899%2C1106.0411%2C1106.0264%2C1106.3844%2C1106.6273%2C1106.5976%2C1106.1360%2C1106.1928%2C1106.4640%2C1106.0910%2C1106.3633%2C1106.4890%2C1106.3458%2C1106.6019%2C1106.1979%2C1106.3597%2C1106.0828%2C1106.6338%2C1106.2770%2C1106.1364%2C1106.4997%2C1106.3226%2C1106.4005%2C1106.2054%2C1106.4839%2C1106.1532%2C1106.6026%2C1106.0940%2C1106.4562%2C1106.6331%2C1106.5373%2C1106.5613%2C1106.4395%2C1106.1552%2C1106.5896%2C1106.1817%2C1106.2868%2C1106.1096%2C1106.0876%2C1106.0627%2C1106.5724%2C1106.0067%2C1106.6077%2C1106.3497%2C1106.5897%2C1106.0172%2C1106.1971%2C1106.6160%2C1106.2879%2C1106.1243%2C1106.2092%2C1106.0465%2C1106.5860%2C1106.1398%2C1106.1042%2C1106.1141%2C1106.0266%2C1106.2607%2C1106.5275%2C1106.0919%2C1106.5286%2C1106.3840%2C1106.2480%2C1106.4810%2C1106.3328%2C1106.2160%2C1106.4417%2C1106.5910%2C1106.0522%2C1106.0438%2C1106.5784%2C1106.0386%2C1106.0602%2C1106.3829%2C1106.4432%2C1106.4251%2C1106.1725%2C1106.6121%2C1106.0962%2C1106.0639%2C1106.3841%2C1106.2263%2C1106.1369%2C1106.4255%2C1106.6356%2C1106.5176%2C1106.2187%2C1106.1602%2C1106.2453%2C1106.6009%2C1106.6277%2C1106.3988%2C1106.0384%2C1106.5341%2C1106.3836%2C1106.1073%2C1106.5099%2C1106.4851&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Single Chain Slip-Spring Model for Fast Rheology Simulations of\n  Entangled Polymers on GPU"}, "summary": "We propose a single chain slip-spring model, which is based on the\nslip-spring model by Likhtman [A. E. Likhtman, Macromolecules, 38, 6128\n(2005)], for fast rheology simulations of entangled polymers on a GPU. We\nmodify the original slip-spring model slightly for efficient calculations on a\nGPU. Our model is designed to satisfy the detailed balance condition, which\nenables us to analyze its static or linear response properties easily. We\ntheoretically analyze several statistical properties of the model, such as the\nlinear response, which will be useful to analyze simulation data. We show that\nour model can reproduce several rheological properties such as the linear\nviscoelasticity or the viscosity growth qualitatively. We also show that the\nuse of a GPU can improve the performance drastically.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1106.5270%2C1106.4077%2C1106.1233%2C1106.2899%2C1106.0411%2C1106.0264%2C1106.3844%2C1106.6273%2C1106.5976%2C1106.1360%2C1106.1928%2C1106.4640%2C1106.0910%2C1106.3633%2C1106.4890%2C1106.3458%2C1106.6019%2C1106.1979%2C1106.3597%2C1106.0828%2C1106.6338%2C1106.2770%2C1106.1364%2C1106.4997%2C1106.3226%2C1106.4005%2C1106.2054%2C1106.4839%2C1106.1532%2C1106.6026%2C1106.0940%2C1106.4562%2C1106.6331%2C1106.5373%2C1106.5613%2C1106.4395%2C1106.1552%2C1106.5896%2C1106.1817%2C1106.2868%2C1106.1096%2C1106.0876%2C1106.0627%2C1106.5724%2C1106.0067%2C1106.6077%2C1106.3497%2C1106.5897%2C1106.0172%2C1106.1971%2C1106.6160%2C1106.2879%2C1106.1243%2C1106.2092%2C1106.0465%2C1106.5860%2C1106.1398%2C1106.1042%2C1106.1141%2C1106.0266%2C1106.2607%2C1106.5275%2C1106.0919%2C1106.5286%2C1106.3840%2C1106.2480%2C1106.4810%2C1106.3328%2C1106.2160%2C1106.4417%2C1106.5910%2C1106.0522%2C1106.0438%2C1106.5784%2C1106.0386%2C1106.0602%2C1106.3829%2C1106.4432%2C1106.4251%2C1106.1725%2C1106.6121%2C1106.0962%2C1106.0639%2C1106.3841%2C1106.2263%2C1106.1369%2C1106.4255%2C1106.6356%2C1106.5176%2C1106.2187%2C1106.1602%2C1106.2453%2C1106.6009%2C1106.6277%2C1106.3988%2C1106.0384%2C1106.5341%2C1106.3836%2C1106.1073%2C1106.5099%2C1106.4851&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We propose a single chain slip-spring model, which is based on the\nslip-spring model by Likhtman [A. E. Likhtman, Macromolecules, 38, 6128\n(2005)], for fast rheology simulations of entangled polymers on a GPU. We\nmodify the original slip-spring model slightly for efficient calculations on a\nGPU. Our model is designed to satisfy the detailed balance condition, which\nenables us to analyze its static or linear response properties easily. We\ntheoretically analyze several statistical properties of the model, such as the\nlinear response, which will be useful to analyze simulation data. We show that\nour model can reproduce several rheological properties such as the linear\nviscoelasticity or the viscosity growth qualitatively. We also show that the\nuse of a GPU can improve the performance drastically."}, "authors": ["Takashi Uneyama"], "author_detail": {"name": "Takashi Uneyama"}, "author": "Takashi Uneyama", "arxiv_comment": "30 pages, 8 figures, 1 table, to appear in Nihon Reoroji Gakkaishi\n  (J. Soc. Rheol. Jpn.)", "links": [{"href": "http://arxiv.org/abs/1106.2899v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1106.2899v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cond-mat.soft", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cond-mat.soft", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1106.2899v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1106.2899v1", "journal_reference": "Nihon Reoroji Gakkaishi (J. Soc. Rheol. Jpn.) 39, 127-131 (2011)", "doi": null, "fulltext": "arXiv:1106.2899v1 [cond-mat.soft] 15 Jun 2011\n\nSingle Chain Slip-Spring Model for Fast Rheology\nSimulations of Entangled Polymers on GPU\nTakashi Uneyama\u2217\nJST-CREST, Institute for Chemical Research, Kyoto University,\nGokasho, Uji 611-0011, Japan\n\nAbstract\nWe propose a single chain slip-spring model, which is based on the slip-spring model by\nLikhtman [A. E. Likhtman, Macromolecules, 38, 6128 (2005)], for fast rheology simulations of\nentangled polymers on a GPU. We modify the original slip-spring model slightly for efficient\ncalculations on a GPU. Our model is designed to satisfy the detailed balance condition, which\nenables us to analyze its static or linear response properties easily. We theoretically analyze\nseveral statistical properties of the model, such as the linear response, which will be useful to\nanalyze simulation data. We show that our model can reproduce several rheological properties\nsuch as the linear viscoelasticity or the viscosity growth qualitatively. We also show that the\nuse of a GPU can improve the performance drastically.\n\nKeywords: Slip-Spring, Entangled Polymer, Linear Response Theory, GPU\n\n1\n\nIntroduction\n\nPolymeric liquids exhibit various interesting macroscopic flows. To simulate macroscopic flow\nbehaviors of entangled polymeric materials, we need to incorporate microscopic or mesoscopic\npolymer models (which reproduces required rheological properties) with the macroscopic fluid\nmodel (such as the Cauchy equation). Considering the computational costs, phenomenological\nconstitutive equation models [1\u20134] are reasonable for macroscopic simulations. However, most of\nconstitutive equation models involve rather rough or physically unclear approximations, which is\nnot fully justified. To avoid such uncertainties, we can use microscopic or mesoscopic molecular\nmodels [5\u201312]. Although these molecular models also involve approximations, generally they require\nless phenomenological parameters, and we expect they are more precise than constitutive equation\nmodels. Thus we expect the use of molecular models instead of constitutive equation models can\nimprove the macroscopic flow simulation.\nSeveral different methods have been proposed to incorporate the mesoscopic polymer models with macroscopic fluid models. For example, the CONNFFESSIT type methods [13], the\nLagrangian particle based methods [14, 15], or recently developed finite volume based hybrid\nmethod [16, 17] were proposed and achieved success to simulate macroscopic flows of polymers.\nBecause these models directly combine different models which have different time and length\nscales (microscopic or mesoscopic rheological model, and macroscopic fluid model), we call them\n\"multiscale\" simulation models in this work. In these multiscale models, microscopic or mesoscopic\nrheological simulations are directly used to calculate macroscopic quantity such as the stress tensor, instead of phenomenological constitutive equation models. In other words, microscopic or\nmesoscopic simulations are embedded to macroscopic fluid elements. Clearly such simulations require many microscopic or mesoscopic rheological simulations which are numerically not efficient.\n\u2217 E-mail:\n\nuneyama@scl.kyoto-u.ac.jp, Tel: +81-774-38-3147, Fax: +81-774-38-3139\n\n1\n\n\fTo simulate large scale and/or long time macroscopic phenomena, therefore it is demanding to\nperform many microscopic or mesoscopic simulations efficiently.\nOne possible way is to use hardwares for acceleration. So far, several acceleration hardwares\n(such as MDGRAPE [18\u201320], ClearSpeed [21, 22], or Cell Broadband Engine [23\u201325]) have been\ndeveloped and utilized to accelerate calculations. Recently, the acceleration by a graphic processor\nunit (GPU) [26\u201330], which is called general purpose GPU (GPGPU) programming [31], is utilized\nto accelerate various calculations including molecular dynamics [32,33], fluid dynamics [34], Monte\nCarlo models [35], or stochastic differential equation models [36]. It is reported that GPUs can\naccelerate simulations drastically, although the efficiency strongly depends on a target. Because\nGPUs are much cheaper than other acceleration hardwares and new GPUs are developed continuously, they are considered to be promising compared with other previous acceleration hardwares.\nThus we expect that rheological simulations on a GPU will be a good candidate for the embedded\nfast rheological simulation.\nIn this work we employ the slip-spring model, which is originally proposed by Likhtman [10] to\nstudy the structure and dynamics of entangled polymers, for simulations on a GPU. We propose a\nslightly modified, single chain version of the slip-spring model. We design our model to be suitable\nfor simulations on a GPU. We also design our model to fully satisfy the detailed balance condition.\nWe derive several statistical properties such as equilibrium probability distributions or a formula\nfor the relaxation modulus. By performing rheological simulations both on a CPU and on a GPU,\nwe study rheological properties of the model and the acceleration effect by a GPU. It is shown that\nour model reproduces rheological properties reasonably and it enables efficient calculations on a\nGPU.\n\n2\n\nModel\n\nAlthough there are various mesoscopic molecular models to calculate rheological properties of\nentangled polymers [5\u201312], not all models are suitable for simulations on a GPU. In this work, we\nemploy the slip-spring model proposed by Likhtman [10]. In the Likhtman's original slip-spring\nmodel, polymer chains are expressed as ideal non-interacting Rouse chains and the entanglement\neffect is mimicked by slip-springs. One end of a slip-spring is fixed in space and another end is\nattached to the polymer chain. As we will show later, such a model is suitable for calculations on\na GPU.\nIn this section, we show a single chain slip-spring model, which is a variant of the original\nslip-spring model. We modify the Likhtman's model slightly to make it suitable for simulations on\na GPU. To implement simulation programs on a GPU, we need to use GPU specific programming\nenvironment and it has several limitations. Thus we design our dynamics model to be as simple\nas possible. At the same time, to make the model physically natural and to make static properties\nsimple, we attempt to make the dynamics model to satisfy the detailed balance condition. We also\ndiscuss about the equilibrium statistical properties and the linear response theory of the slip-spring\nmodel, which is useful to calculate the linear viscoelasticity.\n\n2.1\n\nFree Energy, Grand Potential, and Equilibrium Statistics\n\nWe first describe the model of our single chain slip-spring model. We model an entangled polymer\nchain by an ideal Rouse chain and slip-springs. The conformation of a polymer chain is expressed\nby positions of beads {Ri }, where i = 1, 2, . . . , N is the bead index (N is the total number of\nbeads). The conformation of slip-springs are expressed by two set of variables; the bead indices of\nslipl-spring {Sj } and the anchoring point positions {Aj }, where j = 1, 2, . . . , Z with Z \u2265 0 being\nthe total number of slip-springs. One end of the j-th slip-spring is attached to the Sj -th bead of\na polymer chain, and another end is anchored in space, at Aj . We assume that Sj is an integer\nvalue and 1 \u2264 Sj \u2264 N . The total number of slip-springs Z is not constant because slip-springs can\nbe spontaneously constructed or destructed. Thus variables {Ri }, {Aj }, {Sj }, and Z are required\nto specify a state uniquely.\n\n2\n\n\fTo make the statistical mechanical properties of the model clearly, we first describe the free\nenergy of a single chain with slip-springs. The free energy of a polymer chain and attached slipsprings can be expressed as follows.\nF ({Ri }, {Aj }, {Sj }, Z) =\n\nN\n\u22121\nX\ni=1\n\nZ\nX\n3kB T\n3kB T\n2\n(R\n\u2212\nR\n)\n+\n(RSj \u2212 Aj )2\ni+1\ni\n2\n2b2\n2N\nb\ns\nj=1\n\n(1)\n\nwhere kB is the Boltzmann constant, T is the temperature and b is the bead size (segment size). Ns\nis a parameter which represents the strength of the slip-springs. As mentioned, the total number of\nslip-springs, Z, is not constant but fluctuates in time since slip-springs are dynamically constructed\nor destructed. To handle such a variable, it is convenient to use grand canonical type ensemble\nfor slip-springs, which is originally introduced by Schieber [37] for the slip-link model. The grand\npotential of the system can be expressed as follows.\nJ ({Ri }, {Aj }, {Sj }, Z) = F ({Ri }, {Aj }, {Sj }, Z) \u2212 \u03bdZ\n\n(2)\n\nwhere \u03bd is the effective chemical potential for a slip-spring. As long as the detailed balance condition\nis satisfied, all the equilibrium statistical properties can be calculated from the grand potential (2).\nAs we discuss later, we can design dynamics to satisfy the detailed balance condition, and thus all\nthe equilibrium properties shown in the followings can be also applied to our dynamics model.\nBefore performing numerical simulations, we analytically show several equilibrium statistical\nproperties of our single chain slip-spring model. In this section, we show equilibrium and linearresponse properties. Here we may emphasize that the results in this section is based on the usual\nequilibrium statistical physics and the linear response theory in non-equilibrium statistical physics.\nAs long as the detailed balance condition holds, all the results in this section also hold.\nBy using the grand potential (2), we can calculate the grand partition function of the system.\n\u0015\n\u0014\n\u221e\nXZ\nX\nJ ({Ri }, {Aj }, {Sj }, Z)\n1\nd{Ri }d{Aj } \u2212\n\u039e\u2261\n\u039b3N \u039b3Z\nkB T\ns Z! {S }\nZ=0\nj\n(3)\n\"\n\u0013 #\n\u0012\n\u00133(N \u22121)/2\n\u0012\n2 3/2\nV\n2\u03c0b2\n2\u03c0N\nb\ns\n= 3\nexp N e\u03bd/kB T\n\u039b\n3\u039b2\n3\u039b2s\nwhere V is the system volume. \u039b and \u039bs are the thermal de Brogle wave lengths for a bead and\na slip-spring, respectively. (They are required to make the grand partition function dimensionless.\nAs we will show, thermodynamic properties are not affected by them.) The factorial Z! is the\nGibbs factor due to the indistinguishably of slip-springs. The equilibrium distribution of a state is\ngiven as the following usual Boltzmann form.\n\u0015\n\u0014\n1\nJ ({Ri }, {Aj }, {Sj }, Z)\n1\n(4)\nexp \u2212\nPeq ({Ri }, {Aj }, {Sj }, Z) =\n\u039e \u039b3N \u039b3Z\nkB T\ns Z!\nHere the equilibrium distribution function is normalized to satisfy the following normalization\ncondition.\nX Z\nd{Ri }, d{Aj } Peq ({Ri }, {Aj }, {Sj }, Z) = 1\n(5)\n{Sj },Z\n\nThe equilibrium average or distribution of a given set of variables can be calculated from eq\n(4). The equilibrium distribution of the chain conformation (the bead positions {Ri }), Peq ({Ri }),\nbecomes\nX Z\nPeq ({Ri }) =\nd{Aj } Peq ({Ri }, {Aj }, {Sj }, Z)\n{Sj },Z\n\n1\n=\nV\n\n\u0012\n\n3\n2\u03c0b2\n\n\u00133(N \u22121)/2\n3\n\n\"\n\nexp \u2212\n\nN\n\u22121\nX\ni=1\n\n3\n(Ri+1 \u2212 Ri )2\n2b2\n\n#\n\n(6)\n\n\fEq (6) is the same as the equilibrium conformation of an ideal chain. Thus we find that in equilibrium our model can be reduced to a single ideal chain. Therefore all the equilibrium statistical\nproperties of a chain (such as the average end to end vector or the average radius of gyration) are\njust the same as ones of an ideal chain. This is consistent with the fact that the entanglement\neffect is just a dynamic effect and does not affect static properties.\nSimilarly, we can calculate equilibrium statistical properties of slip-springs. The equilibrium\ndistribution of the number of slip-springs, Peq (Z), is given as follows.\nXZ\nPeq (Z) =\nd{Ri }d{Aj } Peq ({Ri }, {Aj }, {Sj }, Z)\n{Sj }\n\n(7)\n\n\u0015\n\u0014\n\u03bd\u0303Z\n1\nexp\n\u2212 e\u03bd\u0303/kB T\n=\nZ!\nkB T\n\nwhere we defined the modified effective chemical potential \u03bd\u0303 as\n\" \u0012\n\u00133/2 #\n2\u03c0Ns b2\n\u03bd\u0303 \u2261 \u03bd + kB T ln N\n3\u039b2s\n\n(8)\n\nFrom eq (7) we find that the equilibrium distribution of Z is expressed as a Poisson distribution.\nThis is consistent with the distribution function in the slip-link model by Schieber [37]. The average\nnumber of slip-springs hZieq (h. . . ieq means the equilibrium statistical average) can be related to\nthe modified effective chemical potential \u03bd\u0303.\n\u221e\nX\n\nhZieq =\n\nZPeq (Z) = e\u03bd\u0303/kB T\n\n(9)\n\nZ=0\n\nWe expect that the average number of slip-springs can be expressed by using the characteristic\nnumber of beads between slip-springs, N0 .\nhZieq =\n\nN\nN0\n\n(10)\n\nHere we note that generally N0 in eq (10) does not coincide with the number of beads between\nentanglements calculated from the plateau modulus, Ne . (Typically N0 is smaller than Ne [10,38].)\nFrom eqs (9) and (10), we have the following relation between N0 and \u03bd\u0303.\n\u03bd\u0303 = kB T ln\n\nN\nN0\n\n(11)\n\nEq (7) can be then rewritten simply as\nPeq (Z) =\n\n1\nZ!\n\n\u0012\n\nN\nN0\n\n\u0013Z\n\ne\u2212N/N0\n\n(12)\n\nBy using eqs (6) and (12), we can rewrite eq (4) as follows.\nPeq ({Ri }, {Aj }, {Sj }, Z) = Peq ({Ri })Peq (Z)\nPeq (Sj ) \u2261\n\n1\nN\n\nPeq (Aj |{Ri }, Sj ) \u2261\n\nZ\nY\n\nj=1\n\nPeq (Sj )Peq (Aj |{Ri }, Sj )\n\n(13)\n(14)\n\n\u0012\n\n3\n2\u03c0Ns b2\n\n\u00133/2\n\n\u0014\n\nexp \u2212\n\n3\n(RSj \u2212 Aj )2\n2Ns b2\n\n\u0015\n\n(15)\n\nHere, the notation Peq (X|Y ) represents the conditional probability of X for given Y . Eq (14)\nis the equilibrium distribution of a bead index of a slip-spring. Eq (14) can be interpreted as\n4\n\n\fthe equilibrium distribution of an ideal gas particle on a one dimensional lattice which has N\nlattice points. Eq (15) is the equilibrium distribution of an anchoring point under a given chain\nconformation and a bead index.\nTo study rheological properties, we need the microscopic expression for the stress tensor. From\nthe stress-optical rule, the stress tensor of a single chain can be expressed by using the bead\npositions.\nN\n\u22121\nX\n3kB T\n\u03c3({Ri }) =\n(Ri+1 \u2212 Ri )(Ri+1 \u2212 Ri ) \u2212 N kB T 1\n(16)\nb2\ni=1\n\nThe second term in the right hand side of eq (16) does not have the non-diagonal elements and thus\nit can be dropped when we consider the shear stress or the normal stress difference. In equilibrium,\nthe stress tensor of the system can be calculated to be\nc0 h\u03c3({Ri })ieq = \u2212c0 kB T 1\n\n(17)\n\nwhere c0 is the average density of polymer chains. (c0 can be related to the average bead density\n\u03c10 as c0 = \u03c10 /N ). From eq (17) we find that in equilibrium, our single chain slip-spring model\ngives the stress tensor of an ideal gas system with the number density c0 . This is physically natural\nbecause the entanglement effect is purely kinetic, and the system is the same as a non-interacting\nRouse chain system in equilibrium.\n\n2.2\n\nDynamics\n\nWe cannot study dynamical properties only from the grand potential (2). In this subsection, we\nintroduce a simple but physically valid dynamics model for a single chain slip-spring model. As\nwe mentioned, the purpose of this work is to design a simulation model which is suitable for the\ncalculations on a GPU. In this work, we will employ the CUDA programming model [26\u201328] which\nis developed and provided by NVIDIA corporation and widely used for GPGPU calculations.\nAlthough the CUDA programming model provides us a fast and efficient GPGPU environment,\nthere are several (rather strict) limitations. Before we design the dynamics model, here we briefly\nreview some restrictions in CUDA which are directly related to the design of our dynamics model.\nFirst, parallel threads on a GPU are segmented into several blocks (each block contains typically\nfrom several tens to several hundreds of threads). The data communication between different blocks\nare much slower compared with the communication inside a block. Thus the data communication\nbetween blocks should be reduced to achieve high performance. Second, parallel threads are\nbasically designed to perform the same task (with different data values) and the complicated\nconditional branches decrease the performance. Third, the amount of registers and shared memory\nis not large (the total registers and shared memory are 8192 (32kB) and 16kB per one block,\nrespectively). Fourth, some arithmetic operations are not implemented, or not efficient compared\nwith a CPU. (Although these restrictions depend on the GPU architecture, there are qualitatively\nsimilar restrictions for other GPGPU calculation models.) The dynamics model shown in this\nsubsection is designed achieve high performance calculations on a GPU under these limitations\n(see Section 3.2).\nAlthough we introduce a specific dynamics model in this subsection, equilibrium properties\n(shown in the previous subsection) are not altered for other dynamics models as long as the\ndetailed balance condition is satisfied.\nWe start from the dynamics of beads. In the absence of slip-springs (Z = 0), we expect that\nthe dynamics reduces to the Rouse dynamics. Then the dynamics of beads can be modelled as the\nsimple Rouse type dynamics. We use an overdamped Langevin equation as the dynamic equation\nfor a bead.\n1 \u2202J ({Ri }, {Aj }, {Sj }, Z)\ndRi (t)\n+ \u03ba(t) * Ri + \u03bei (t)\n(18)\n=\u2212\ndt\n\u03b6\n\u2202Ri\nwhere \u03b6 is the friction coefficient for a bead, \u03ba(t) is the velocity gradient tensor, and \u03bei (t) is the\nGaussian white noise. \u03bei (t) satisfies the following fluctuation-dissipation relation which guarantees\n\n5\n\n\fthe detailed balance.\nh\u03bei (t)i = 0\nh\u03bei (t)\u03bej (t\u2032 )i =\n\n(19)\n2kB T\n\u03b4ij \u03b4(t \u2212 t\u2032 )1\n\u03b6\n\n(20)\n\nwhere h. . . i means the statistical average and 1 is the unit tensor.\nDynamics of slip-springs is not trivial. Because we are seeking a model which is suitable for\nsimulations on a GPU, here we employ rather simple dynamics for slip-springs. We assume that\nthe anchoring point of a slip-spring moves only by the external flow. Thus the dynamic equation\nfor Aj becomes the following simple advection equation.\ndAj (t)\n= \u03ba(t) * Aj\ndt\n\n(21)\n\nIn the absence of the velocity gradient, the anchoring points do not change their positions unless\nthey are reconstructed. For the dynamics of slip-spring bead indices, we employ stochastic jump\nprocesses [9, 39]. For simplicity, we assume that a slip-spring bead index can move only to its\nneighboring bead indices by a single jump. The jump probability from the bead index Sj to the\nbead index Sj\u2032 can be expressed as a transition matrix W (Sj\u2032 |Sj ).\n\uf8f1\nWS+ (Sj )\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f2W (S )\nS\u2212 j\nWS (Sj\u2032 |Sj ) =\n\uf8f4\n\u2212WS+ (Sj ) \u2212 WS\u2212 (Sj )\n\uf8f4\n\uf8f4\n\uf8f3\n0\n\n(Sj\u2032 = Sj + 1)\n(Sj\u2032 = Sj \u2212 1)\n(Sj\u2032 = Sj )\n(otherwise)\n\n(22)\n\nwhere WS+ (Sj ) and WS\u2212 (Sj ) are transition probabilities which increment or decrement the bead\nindex, respectively. These transition probabilities should satisfy the detailed balance condition.\nThere are many possible forms for the transition probabilities which satisfies the detailed balance\ncondition. In this work we employ the following Glauber type dynamics [40]. (It is well known\nthat the Glauber dynamics satisfies the detailed balance condition.)\n\u0015\u0015\n\u0014\n\u0014\n\uf8f1\n\u0003\n3 \u0002\n\uf8f2 kB T 1 \u2212 tanh\n2\n2\n(Sj < N )\n\u2212\nA\n)\n(R\n\u2212\nA\n)\n\u2212\n(R\nj\nSj +1\nj\nSj\n\u03b6s\n4Ns b2\n(23)\nWS+ (Sj ) =\n\uf8f3\n0\n(Sj = N )\n\u0015\u0015\n\u0014\n\u0014\n\uf8f1\n\u0003\n3 \u0002\n\uf8f2 kB T 1 \u2212 tanh\n2\n2\n(Sj > 1)\n(RSj \u22121 \u2212 Aj ) \u2212 (RSj \u2212 Aj )\n\u03b6s\n4Ns b2\n(24)\nWS\u2212 (Sj ) =\n\uf8f3\n0\n(Sj = 1)\nHere \u03b6s is a parameter which represents the effective friction coefficient for a slip-spring. In contrast to the Likhtman's model, we allow slip-springs to pass through each other. However, as\nmentioned by Likhtman, this does not affect physical properties qualitatively. From the view point\nof numerical calculations, this enables numerical schemes to be simple and thus we can make the\nimplementation on a GPU simple.\nFinally we model the slip-spring reconstruction dynamics. Slip-springs on chain ends (Sj =\n1, N ) can be removed from a chain and destructed. To compensate the destruction process, we\nhave to introduce the slip-spring construction process on chain ends. These reconstruction events\ncan be modelled as the jump processes, just like the dynamics for {Sj }. If we assume that just one\nslip-spring can be destructed or constructed at one reconstruction event, the jump probabilities\nbecome as follows.\n\uf8f1\nWZ+ (Z)\n(Z \u2032 = Z + 1)\n\uf8f4\n\uf8f4\n\uf8f4\n\uf8f2W (Z)\n(Z \u2032 = Z \u2212 1)\nZ\u2212\nWZ (Z \u2032 |Z) =\n(25)\n\uf8f4\u2212WZ+ (Z) \u2212 WZ\u2212 (Z) (Z \u2032 = Z)\n\uf8f4\n\uf8f4\n\uf8f3\n0\n(otherwise)\n6\n\n\fwhere WZ+ (Z) and WZ\u2212 (Z) are the construction and destruction probabilities, respectively. From\nthe detailed balance condition, they should satisfy the following relation.\nWZ+ (Z)Peq ({Ri }, {Aj }, {Sj }, Z) = WZ\u2212 (Z)Peq ({Ri }, {Aj }, {Sj }, Z + 1)\n\n(26)\n\nAlthough the condition (26) limits the form of dynamics, there are still many possible candidates\nfor the reconstruction probabilities. In this work, we employ the following rather simple jump\nprobabilities for the slip-spring reconstruction process.\nkB T\n1\nWZ+ (Z) =\n(\u03b4SZ+1 ,1 + \u03b4SZ+1 ,N )\n\u03b6s\nN0\nWZ\u2212 (Z) =\n\nZ\nkB T X\n(\u03b4S ,1 + \u03b4Sj ,N )\n\u03b6s j=1 j\n\n\u0012\n\n3\n2\u03c0Ns b2\n\n\u00133/2\n\n\u0014\n\n3\nexp \u2212\n(RSZ+1 \u2212 AZ+1 )2\n2Ns b2\n\n\u0015\n\n(27)\n(28)\n\nIt is straightforward to show that eqs (27) and (28) togather with eq (13) satisfy the condition\n(26). As we will show later, the transition probabilities (27) and (28) enable simple numerical\nimplementations which are suitable to simulations on a GPU.\nThe single chain slip-spring model shown in this subsection can reproduce reptation type dynamics [1] qualitatively. We emphasize that each dynamics described in this subsection satisfies\nthe detailed balance condition, and thus our single chain slip-spring model has well-defined thermodynamic equilibrium state.\nAlthough we did not incorporate the effects such as the constraint release (CR) or the convective\nconstraint release (CCR) into our model, it is not difficult to take these effects and improve the\nmodel. Interestingly, while the CR process is not explicitly considered, the relaxation process which\nis qualitatively similar to the CR exists in our model. (As shown in Appendix A, the dynamics\nof bead indices exhibit CR type relaxation mechanism.) Our model can reproduce rheological\nproperties reasonably, as we will show later.\n\n2.3\n\nLinear Response Theory\n\nTo obtain linear response functions such as the shear relaxation modulus around equilibrium, the\nlinear response theory [41] is sometimes quite useful. The linear response theory states that if the\ndynamics satisfies the detailed balance condition, the response of the system to a small perturbation\nis simply expressed by correlation functions (the fluctuation-dissipation relation). Because our\nmodel is designed to satisfy the detailed balance condition, we can utilize the fluctuation-dissipation\nrelation to calculate the response in our model. (Some slip-link models do not satisfy the detailed\nbalance condition. For such models, the validity of the linear response theory is not guaranteed\nand it may not be useful.) In this subsection, we show the explicit expression for the relaxation\nmodulus by using the standard linear response theory.\nThe dynamics of our single chain slip-spring model is described by the Langevin equation\nand jump processes. In the absence of the velocity gradient tensor the system can relax to the\nequilibrium state, because the detailed balance condition is satisfied. Now we consider the velocity\ngradient tensor, \u03ba(t), as a time-dependent small perturbation and calculate the response of the\ntime-dependent stress tensor \u03c3(t) to \u03ba(t).\nThe probability distribution function is useful to calculate the linear response. We define the\ntime-dependent probability distribution function in the phase space as\n#+\n#\" z\n*\n\"N\nY\nY\n\u03b4sj ,Sj (t) \u03b4(aj \u2212 Aj (t))\n(29)\n\u03b4(ri \u2212 Ri (t))\nP ({ri }, {ai }, {si }, z; t) \u2261 \u03b4z,Z(t)\nj=1\n\ni=1\n\nThe time evolution of the probability distribution function can be given as the following master\nequation.\n\u2202\nP ({ri }, {aj }, {sj }, z; t) = [LR (t) + LA (t) + LS + LZ ] P ({ri }, {aj }, {sj }, z; t)\n\u2202t\n7\n\n(30)\n\n\fwhere LR (t) and LA (t) are the Fokker-Planck type operators, and LS and LZ are the time evolution\noperators which come from jump processes for {Sj } and Z. Notice that LR (t) and LA (t) depend\non time t whereas LS and LZ do not. This is because the dynamics of {Sj } and Z is not directly\naffected by the external flow. The explicit forms for LR (t) and LA (t) are as follows.\n\u0014\n\u0015\nN\nX\n\u2202J ({ri }, {aj }, {sj }, z)\n\u2202P\n1 \u2202\n*\nP \u2212 \u03b6\u03ba(t) * ri P + kB T\nLR (t)P =\n\u03b6 \u2202ri\n\u2202ri\n\u2202ri\ni=1\nLA (t)P = \u2212\n\nZ\nX\n\u2202\n* [\u03ba(t) * aj P ]\n\u2202a\nj\nj=1\n\n(31)\n\n(32)\n\nWe do not show the explicit forms for LS and LZ here, because their explicit forms are not required\nin the following calculations.\nTo calculate the linear response, we need to decompose the time evolution operator into the\nequilibrium and perturbation parts. Thus we define the following two time evolution operators.\nL0 P \u2261\n\n\u0015\n\u0014\nN\nX\n1 \u2202\n\u2202P\n\u2202J\n+ LS P + LZ P\n*\nP + kB T\n\u03b6 \u2202ri\n\u2202ri\n\u2202ri\ni=1\n\nL1 (t)P \u2261 \u2212\n\nN\nZ\nX\nX\n\u2202\n\u2202\n* [\u03ba(t) * ri P ] \u2212\n* [\u03ba(t) * aj P ]\n\u2202r\n\u2202a\ni\nj\ni=1\nj=1\n\n(33)\n\n(34)\n\nBy using these operators, the time evolution equation of the probability distribution function can\nbe simply described as follows.\n\u2202P\n= [L0 + L1 (t)]P\n(35)\n\u2202t\nIn the absence of the velocity gradient, the perturbation part of the time evolution operator disappears (L1 (t) = 0) and the system relaxes to the equilibrium state. The equilibrium distribution\nfunction Peq is given as the Boltzmann form since the detailed balance condition is satisfied.\n\u0015\n\u0014\n1\nJ ({ri }, {ai }, {si }, z)\n1\n(36)\nexp\n\u2212\nPeq ({ri }, {ai }, {si }, z) \u2261\n\u039e \u039b3N \u039b3z\nkB T\ns z!\nUsing the equilibrium distribution function we write the equilibrium average for an operator B\u0302 as\nX Z\nhB\u0302ieq \u2261\nd{ri }d{aj } B\u0302Peq ({ri }, {ai }, {si }, z)\n(37)\nz,{sj }\n\nNow we can follow the standard procedure to calculate the linear response [41, 42]. The timedependent stress tensor of a single chain is calculated by the following stress tensor operator.\n\u03c3\u0302 \u2261\n\nN\n\u22121\nX\ni=1\n\n3kB T\n(ri+1 \u2212 ri )(ri+1 \u2212 ri ) \u2212 N kB T 1\nb2\n\n(38)\n\nFollowing the standard linear response theory, we have the following expression for the timedependent stress tensor. (See Appendix B for detail.)\nX Z\n\u03c3(t) =\nd{ri }d{aj } \u03c3\u0302P ({ri }, {aj }, {sj }, z; t)\nz,{sj }\n\n= \u03c3eq +\n\nZ\n\nt\n\n\u2212\u221e\n\ndt\u2032\n\nX Z\n\nz,{si }\n\n(39)\n\n\u2032\n\nd{ri }d{ai } \u03c3\u0302e(t\u2212t )L0 L1 (t\u2032 )Peq\n\n8\n\n\fwhere \u03c3eq \u2261 h\u03c3\u0302ieq = \u2212kB T 1 is the equilibrium value of the stress tensor. After straightforward\ncalculations, finally we have the following expression for the time-dependent stress tensor.\nZ t\ni\nh\n1\n(40)\ndt\u2032 h\u03c3\u0302(t \u2212 t\u2032 )\u03c3\u0302ieq + h\u03c3\u0302(t \u2212 t\u2032 )\u03c3\u0302 (v) ieq : \u03ba(t\u2032 )\n\u03c3(t) = \u03c3eq +\nkB T \u2212\u221e\nwhere \u03c3\u0302(t) is the stress tensor operator evolved by time t (the time-shifted stress tensor operator)\nand \u03c3\u0302 (v) is the virtual stress tensor operator by slip-springs and : means the dyadic product. \u03c3\u0302 (v)\nis defined as\nz\u22121\nX 3kB T\n\u03c3\u0302 (v) \u2261\n(41)\n(rsj \u2212 aj )(rsj \u2212 aj ) \u2212 zkB T 1\nNs b2\nj=1\nEq (41) is similar to eq (38) but it represents the contribution of slip-springs. The relaxation\nmodulus tensor G(t) (which is a fourth order tensor) corresponds to the response function of the\nstress to the velocity gradient. In this work we use the following definition for the relaxation\nmodulus tensor.\nZ\nt\n\nc0 [\u03c3(t) \u2212 \u03c3eq ] =\n\n\u2212\u221e\n\ndt\u2032 G(t \u2212 t\u2032 ) : \u03ba(t\u2032 )\n\n(42)\n\nFrom eqs (40) and (42), we find that the relaxation modulus tensor is simply given as\nG(t) =\n\nc0\nc0\nh\u03c3\u0302(t)\u03c3\u0302ieq +\nh\u03c3\u0302(t)\u03c3\u0302 (v) ieq\nkB T\nkB T\n\n(43)\n\nIt should be noted here that there are two contributions for the relaxation modulus tensor. One is\nthe usual stress-stress autocorrelation function, and another is the stress-virtual stress correlation\nfunction which does not appear in usual many body systems.\nHere we note that eq (43) coincide with the formula previously proposed by Ramirez, Sukumaran and Likhtman [43]. Intuitively, this form can be understood as follows. The stress tensor\noperator \u03c3\u0302 is not conjugate to the perturbation \u03ba(t), but the sum of the stress and the virtual\nstress operators, \u03c3\u0302 + \u03c3\u0302 (v) , is conjugate to the perturbation. Then, following the standard formula\nof the linear response theory, the response function is given as the time correlation function of\n\u03c3\u0302 and \u03c3\u0302 + \u03c3\u0302 (v) , which gives eq (40). If we employ \u03c3\u0302 + \u03c3\u0302 (v) as the stress tensor of a chain, the\nrelaxation modulus tensor is simply given as the autocorrelation function of \u03c3\u0302 + \u03c3\u0302 (v) . However,\nsuch a definition violates the stress-optical rule, and it is physically unnatural. (We will examine\nthe contribution of the virtual stress is quantitatively, later.) Therefore, in this work we use \u03c3\u0302 as\nthe stress tensor operator.\n\n3\n3.1\n\nNumerical Scheme and Implementation\nDiscretization Scheme\n\nTo solve dynamics of our single chain slip-spring model numerically, we need to discretize dynamic\nequations and jump processes. In this subsection, we briefly show the discretization scheme. Since\nour purpose in this work is to develop a model which is suitable for calculations on a GPU, here\nwe aim to make rather simple and stable schemes.\nBefore considering discretization schemes, we make all the parameters dimensionless. We set b =\n1, kB T = 1, and \u03b6 = 1. (This is equivalent to make all the dimensional parameters dimensionless\nby characteristic scales b, kB T , and \u03b6.) The characteristic time scale of simulations also becomes\nunity (\u03c40 \u2261 \u03b6b2 /kB T = 1).\nTo make schemes simpler, we split dynamics from t to t + \u2206t (with \u2206t being the time step\nsize) into several substeps. In this work, we use the following three substeps to evolve the system\nfrom t to t + \u2206t. Each substep is designed to satisfy the detailed balance condition for small \u2206t\n(\u2206t \u226a 1).\n\n9\n\n\f1. Integrate dynamics equations for {Ri }, {Aj } (eqs (18) and (21)). These are stochastic differential equation and ordinary differential equation and thus we can employ several standard\nschemes. To minimize the computational cost, here we employ the explicit Euler method\nwhich is not accurate but the simplest.\n\u221a\n\u2202J ({Ri }, {Aj }, {Si }, Z)\n+ \u2206t\u03ba(t) * Ri + 2\u2206twi\n\u2202Ri\nAj (t + \u2206t) = \u2206t\u03ba(t) * Aj\nRi (t + \u2206t) = \u2212\u2206t\n\n(44)\n(45)\n\nwhere wi is a standard distribution random number vector which satisfies the following\nrelation.\nhwi i = 0\n\n(46)\n\nhwi wj i = \u03b4ij 1\n\n(47)\n\nwi can be generated easily by some random number generators such as the combination of\nthe linear coagulation method and the Box-Muller transform.\n2. Move slip-spring bead indices {Sj } by transition probabilities (22)-(24). We use the following\naccumulated probabilities for finite time step \u2206t and uniform distribution random variables.\n\uf8f1\n\u0014\n\u001a \u0014\n3 \u0002\n\u2206t\n\uf8f4\n\uf8f4\n1\n\u2212\ntanh\nmin\n(RSj +1 \u2212 Aj )2\n\uf8f4\n\uf8f4\n\uf8f4\n\u03b6s\n4Ns\n\uf8f2\n\u0015\u0015 \u001b\n(Sj < N )\n\u0003\n1\n(48)\nP (Sj \u2192 Sj + 1) =\n2\n,\n\u2212 (RSj \u2212 Aj )\n\uf8f4\n\uf8f4\n\uf8f4\n2\n\uf8f4\n\uf8f4\n\uf8f30\n(Sj = N )\n\uf8f1\n\u001a \u0014\n\u0014\n\u2206t\n3 \u0002\n\uf8f4\n\uf8f4\nmin\n1\n\u2212\ntanh\n(RSj \u22121 \u2212 Aj )2\n\uf8f4\n\uf8f4\n\uf8f4\n\u03b6s\n4Ns\n\uf8f2\n\u0015\u0015 \u001b\n\u0003\n1\nP (Sj \u2192 Sj \u2212 1) =\n2\n,\n\u2212 (RSj \u2212 Aj )\n\uf8f4\n\uf8f4\n\uf8f4\n2\n\uf8f4\n\uf8f4\n\uf8f30\n\n(Sj > 1)\n\n(49)\n\n(Sj = 1)\n\nThe minima are taken so that each transition probability does not exceed 1/2. Although the\ndiscretization scheme shown here is not accurate, it does not fail even for large \u2206t due to\nthis trick.\n3. Reconstruct slip-springs on chain ends by the transition probability eq (25), (27), and (28).\nFirst, new slip-springs are constructed at chain ends by the following accumulated probability.\nThe construction is attempted K times repeatedly (with K being an integer parameter which\ncan depend on Z).\nThis parameter K is introduced to allow the construction attempt\nevaluated in parallel. This is because parallel attempts are much efficient than single attempt\non a GPU. (See Section 3.2.)\n\u001b\n\u001a\n\u2206t 1 1 1\n(50)\n,\nPconstruct (SZ+1 = 1) = min\n\u03b6s N0 K 2\n\u001a\n\u001b\n\u2206t 1 1 1\nPconstruct (SZ+1 = N ) = min\n(51)\n,\n\u03b6s N0 K 2\nThe minima are taken to prevent each transition probability from exceeding 1/2. The anchored point position of a new slip-spring, AZ+1 , is sampled from the equilibrium distribution. Since the equilibrium distribution of an anchoring point is Gaussian (eq (15)), it can\nbe easily generated.\nPconstruct (AZ+1 ) =\n\n\u0012\n\n3\n2\u03c0Ns\n\n\u00133/2\n10\n\n\u0015\n\u0014\n3\n(RSZ+1 \u2212 AZ+1 )2\nexp \u2212\n2Ns\n\n(52)\n\n\fSecond, each slip-spring is destructed by the following accumulated probability.\n\u001b\n\u001a\n\u2206t\n(\u03b4Sj ,1 + \u03b4Sj ,N ), 1\nPdestruct (Sj ) = min\n\u03b6s\n\n(53)\n\nAs before, the minimum is taken to avoid each transition probability to exceed 1. We reset\nindices of slip-springs after the constructions or destructions. This ensures that the index for\nslip-springs on a chain always runs from 1 to Z (j = 1, 2, . . . , Z).\nThe discretization schemes shown here are not accurate compared with more advanced schemes.\n(For example, it is possible to improve the accuracy by employing more advanced and accurate\ndiscretization schemes such as the stochastic Runge-Kutta method [44].) In this work, we prefer\ninaccurate but simple schemes for an implementation on a GPU. Since discretization schemes are\ndesigned to be as simple as possible, it is not difficult to implement them for GPGPU calculations\n(in which we have several limitations due to the GPU architecture). Although the accuracy is not\nhigh, we can perform stable simulations with these schemes even for not small \u2206t. (That is, the\nsimulations do not fail easily even for rather large \u2206t.)\nBefore starting simulations we have to prepare well equilibrated samples. Since we know the\nequilibrium probability distribution, we can directly generate the equilibrium conformation of\nchains and slip-springs easily. All the simulations performed in this work start from the equilibrium\nstate generated based on eq (13). The sampling procedure is as follows.\n1. Generate polymer conformation {Ri } by sampling from the Gaussian distribution (eq (6)).\n2. Sample Z from the Poisson distribution (eq (12)).\n3. Generate Z slip-springs. Each segment index, Sj , is sampled from the uniform distribution\n(eq (14)) and each anchoring point, Aj , is sampled from the Gaussian distribution (eq (15)).\nTo obtain statistical quantities form Langevin type simulations, we need to perform many\nsimulations with the same parameter set and different random number series. For this purpose, we\nsimulate M different polymer chains and calculate the statistical average of an arbitrary physical\nquantity B approximately as\nhBi \u2248\n\nM\n1 X\nB({Rk,i }, {Ak,j }, {Sk,j }, Zk )\nM\n\n(54)\n\nk=1\n\nwhere the subscript k means that the variable is of the k-th sample chain (for example, Rk,i is the\ni-th bead position of the k-th chain).\n\n3.2\n\nImplementation on GPU\n\nAs we mentioned, we use the CUDA programming model to implement the discretized single chain\nslip-spring model on a GPU. In the CUDA programming model, there are two memory spaces on a\ngraphics card; the global memory and the shared memory. The shared memory is small (currently\nits size is just 16kB) but the access speed is fast (comparable to the access speed of the registers).\nThe global memory is large but the access speed is rather slow. Thus it is required to reduce the\naccess to the global memory to speed up the program. Fortunately, our single chain slip-spring\nmodel requires very small memories and thus most of the data can be stored in the registers or the\nshared memory. To make the CUDA program efficient, it is also required to achieve high parallelism\nbecause a GPU has many threads (typically about several hundreds or several thousands) which\nare executed simultaneously. We can implement highly parallelized program by allocating one bead\nand one slip-spring to one CUDA thread. Although this limits the maximum number of slip-springs\n(Z \u2264 N ), in most cases it cause no problems (the probability that Z > N is practically negligible\nif N0 is not small). Here we note that, it is difficult to implement in such a way if we employ the\nslip-link type singe chain model [6\u20139, 11], because nodes are dynamically reconstructed and thus\n\n11\n\n\fthe number of total nodes is not constant. This is one of the main reason why the slip-spring\nmodel is employed in this work.\nFor the slip-spring reconstruction scheme on a GPU, we set the number of attempts to construct\nslip-springs as K = N \u2212 Z. This means that each thread which do not have a slip-spring attempts\nto construct a new one (and each attempt can be evaluated in parallel). For a CPU, we set K = 1,\nwhich means that the slip-spring construction is attempted only once at each step. Clearly this\nis suitable for a CPU, because we cannot evaluate many attempts in parallel. (Strictly speaking,\nthis implementation will violate the detailed balance condition. But the violation is practically\nnegligible.)\nCurrently it is generally not efficient to use double precision floating-point numbers (\"double\"\ntype variables in CUDA), and thus single precision floating-point numbers (the \"float\" type variables) should be used to accelerate simulations efficiently. Fortunately this limitation is not serious\nfor our single chain slip-spring model. Because our model is based on the stochastic differential\nequations and jump processes, the accuracy is mainly determined by number of samples and the\nerror is typically much larger than the error of single precision floating-point number operations\n(the machine epsilon is about \u01ebfloat \u2248 10\u22127 whereas the statistical error is roughly proportional to\nthe inverse square root of sampling numbers). Several elementary mathematical functions can be\ncalculated\n\u221a very efficiently on a GPU. In our implementation, functions such as sin x, cos x, exp x,\nln x, or x are used. Although the fast calculations for these mathematical functions involve some\nerrors, such errors are not serious in our simulations (the errors are typically comparable to one of\nsingle precision floating-point number operations).\nIn parallelized programs, it is often needed to perform reduction operations. In our model, we\nhave to calculate the total number of slip-springs on a chain or forces acting on beads caused by\nslip-springs. The reduction operations are one of the most time-consuming parts in our simulations.\nAlthough CUDA currently does not provide special functions for these reduction operations, we\ncan use some techniques to improve the speed of the reduction operations [45].\nAnother time-consuming part is the calculation of the slip-spring force acting on a chain. To\ncalculate the slip-spring force efficiently, we utilize the fixed-point real number technique [46] and\nthe atomic operations [28] in CUDA. The fixed-point real number technique uses the integer type\nvariable x as the real number y = x \u00d7 \u01ebfixed with \u01ebfixed being the resolution. The resolution \u01ebfixed\nshould be determined so that the truncation error is sufficiently small and the overflow does not\noccur. (Because the single precision float number has the machine epsilon \u01ebfloat \u2248 10\u22127 , \u01ebfixed is\nnot necessarily to be very small.) In this work we set \u01ebfixed = 1/4096 \u2248 2.4 \u00d7 10\u22124 , which has a\nsufficient resolution yet the overflow does not occur even under fast shear rates. The results shown\nbelow are not sensitive to the value of \u01ebfixed, as long as \u01ebfixed is not too small nor too large.\n\n4\n4.1\n\nResults\nRheological Properties\n\nBefore measuring the acceleration effect by a GPU, we calculate several rheological properties of\nour slip-spring model. To obtain reliable simulation results, in this subsection, all the simulations\nare performed on a CPU. (The discretization schemes on a CPU are almost the same as the schemes\non a GPU.) We set the simulation parameters as follows; the entanglement bead number N0 = 4,\nslip-spring strength Ns = 0.5, the slip-spring friction coefficient \u03b6s = 0.1, and the time step size\n\u2206t = 0.01.\nWe first calculate the linear viscoelasticity by using the linear response formula (43). The\nstorage and loss moduli, G\u2032 (\u03c9) and G\u2032\u2032 (\u03c9), are then calculated by utilizing the following relations.\nZ \u221e\ndt Gxyxy (t) sin(\u03c9t)\n(55)\nG\u2032 (\u03c9) = \u03c9\n0\nZ \u221e\nG\u2032\u2032 (\u03c9) = \u03c9\ndt Gxyxy (t) cos(\u03c9t)\n(56)\n0\n\n12\n\n\fThe integration in eqs (55) and (56) are numerically calculated by using the trapezoidal rule.\nFigure 1 shows the linear viscoelasticity data calculated from equilibrium single chain slip-springs\nsimulations (for N = 10, 20, 40, and 80). Notice that G\u2032 (\u03c9) and G\u2032\u2032 (\u03c9) are normalized by \u03c10 kB T\nto be dimensionless forms (\u03c10 is the average bead density). As shown in Figure 1, our model\nreproduces linear viscoelasticity of entangled polymers qualitatively well, especially considering\n(0)\nthe simplicity of the model. The plateau modulus is about GN \u2248 0.1\u03c10 kB T , which is almost the\nsame as the plateau modulus obtained by the original slip-spring model simulation [10]. This means\nthat, the characteristic number of beads between slip-springs N0 in this model is not identical to\nthe entanglement bead number calculated from the plateau modulus based on the rubber elasticity\ntheory. Following the standard definition, we define Ne via the following equation.\n\u03c10 kB T\n\nNe \u2261\n\n(0)\n\nGN\n\n(57)\n\n(0)\n\nFrom GN \u2248 0.1\u03c10 kB T , we have Ne \u2248 10. This value is much larger than N0 (Ne \u2248 2.5N0 ).\nTherefore the plateau modulus or Ne are not determined only by N0 , but they depends on various\n(0)\nparameters in a rather complex way. Practically, it is reasonable to use both N0 and G0 (or GN )\nas two independent fitting parameters [10, 47].\nFigure 2 shows the longest relaxation time calculated from the linear viscoelasticity data. The\nlongest relaxation time is calculated via the following equation\nln Gxyxy (t)\n1\n= \u2212 lim\nt\u2192\u221e\n\u03c4d\nt\n\n(58)\n\nFor small N , we find that the longest relaxation time is proportional to (N \u2212 1)2 , which agrees\nwith the scaling of the Rouse relaxation time. (Here N \u2212 1 is used instead of N , since N \u2212 1\ncorresponds to the number of bonds in a chain [48].) This indicates that for small N (from Figure\n2, N . 10) a chain with slip-springs behave essentially as an unentalgled chain. For large N , the\nrelaxation time depends on N \u2212 1 as \u03c4d \u221d (N \u2212 1)3.48 , which is similar to experimental results,\n\u03c4d \u221d (N \u2212 1)3.4 (larger than the prediction of the pure reptation theory [1], \u03c4d \u221d (N \u2212 1)3 ). Thus\nwe find that the longest relaxation time and the zero shear is also reasonably reproduced by our\nsimulation model.\nFigure 3 shows the zero shear viscosity \u03b70 . The zero shear viscosity is calculated from G(t) as\nZ \u221e\n\u03b70 =\ndt G(t)\n(59)\n0\n\nWe find that the viscosity is proportional to N \u2212 1 or (N \u2212 1)3.40 for small or large N , respectively.\nThe cross over bead number is roughly estimated to be Nc \u2248 14.2 \u2248 1.4Ne . This value is slightly\nsmaller than the experimental value Nc /N0 = 1.6 \u223c 3.5 [49], but the discrepancy is not so large.\nAlthough we do not show simulation results for other parameter sets (for example, for different\nN0 , Ns , or \u03b6s ), as shown in Ref 10, the effects of these parameters are not large and we have\nqualitatively similar results. Thus in this work we limit ourselves only to the standard parameter\nset used in Ref 10.\nNext we calculate the viscosity growth \u03b7(t, \u03b3\u0307) and the steady state viscosity \u03b7(\u03b3\u0307). At t = 0,\nthe system is in equilibrium. For t > 0 we apply the constant shear flow as\n(\n\u03b3\u0307 (\u03b1 = x, \u03b2 = y)\n\u03ba\u03b1\u03b2 =\n(60)\n0 (otherwise)\nand calculate \u03b7(t, \u03b3\u0307) and \u03b7(\u03b3\u0307) as follows.\nh\u03c3xy (t)i\n\u03b3\u0307\n\u03b7(\u03b3\u0307) = lim \u03b7(t, \u03b3\u0307)\n\n\u03b7(t, \u03b3\u0307) =\n\nt\u2192\u221e\n\n13\n\n(61)\n(62)\n\n\fWe also calculate the dynamic viscosity, which is defined as follows, to check whether the Cox-Merz\nrule [50] holds or not.\n\u03b7(\u03b3\u0307) \u2248 \u03b7 \u2217 (\u03c9)|\u03c9=\u03b3\u0307\np\n\u03b7 \u2217 (\u03c9) \u2261 G\u20322 (\u03c9) + G\u2032\u20322 (\u03c9)\n\n(63)\n(64)\n\nFigure 4 shows the viscosity growth curves for N = 40 with various shear rates (\u03b3\u0307\u03c40 = 0.0025,\n0.005, 0.01, 0.025, 0.05, and 0.1). The number of sample chains is M = 1024 for all shear rates.\nAs shown in Figure 4, that viscosity growth curves can be qualitatively well reproduced by the\nsingle chain slip-spring model. The stress overshoot behavior and the shear thinning behavior are\nreasonably reproduced.\nFigure 5 shows the dynamic and steady state viscosities calculated for N = 10, 20, 40, and 80.\nFor relatively small \u03b3\u0307 and \u03c9, we observe that the Cox-Merz rule (63) holds reasonably. However, we\nfind that in high shear rate regions, the steady state viscosities deviate from the complex viscosity\nand the Cox-Merz rule does not hold. In such regions, the viscosities are nearly independent of\nshear rate, thus they are the second Newtonian viscosities. These second Newtonian viscosities\ncan be understood as follows. In high shear rate regions, slip-springs as well as chains are strongly\nstretched and slip-springs are easily destructed. Thus there are only a few slip-springs on a chain.\nFor example, for N = 80 (hZieq = 20), the steady state average number of slip-springs are hZi =\n8.7, 4.2, and 1.6 for \u03b3\u0307 = 0.01, 0.1, and 1, respectively. Then, a chain behaves essentially like an\nideal, Rouse chain. The viscosity of a Rouse chain is independent of shear rate since the Rouse\nmodel is linear. Following this picture, we expect that the second Newtonian viscosity depends on\nN as\n\u03b7(\u03b3\u0307)\n\u221dN\n(65)\n\u03c10 kB T \u03c40\nIn Figure 5, we can observe that eq (65) approximately holds at the high shear rate region in\nFigure 5. Therefore we conclude that the second Newtonian like behavior in high shear rate region\nis an artifact of our model, rather than a physical property of an entangled chain. This means\nthat our model should not be applied to very high shear rate regions where the Cox-Merz rule is\nviolated. Results for the steady state viscosity may be utilized to validate simulation results under\nmore complex situations, such as flows around obstacles.\nIn the shear thinning region in Figure 5, the steady state viscosity obeys the power law \u03b7(\u03b3\u0307) \u221d\n\u03b3\u0307 \u2212\u03b1 . The exponent \u03b1 is smaller than 1 and thus the steady state shear stress \u03c3xy (\u03b3\u0307) \u221d \u03b3\u0307 1\u2212\u03b1\nis a monotonically increasing function of the shear rate \u03b3\u0307. In the simple Doi-Edwards type tube\nmodel [1], \u03c3xy (\u03b3\u0307) is not a monotonically increasing function of \u03b3\u0307, and such a non-monotonic\nrelation can cause mechanical instability (shear-banding instability) [51]. It is known that the\nCCR mechanism can successfully remove this instability [52,53]. As we mentioned, the CR or CCR\nmechanisms are not explicitly taken into our model. Even in absence of the CCR mechanism, our\nmodel is free from the mechanical instability (at least in the investigated parameter range).\nFinally, we shortly investigate the contribution of the virtual stress tensor \u03c3\u0302 (v) . In Section 2.3\nwe assumed that the stress tensor of the system is given by \u03c3\u0302 defined by eq (38). One may prefer\nto employ \u03c3\u0302 + \u03c3\u0302 (v) as the stress tensor of the system, which is conjugate to the velocity gradient\ntensor. Here we consider the shear relaxation modulus as an example. The relative contribution\nof the virtual stress to the shear relaxation modulus can be defined as\n(v)\n\n\u2206G\u0303(v) (t) \u2261\n\n(v)\n\n(v)\n\nh\u03c3\u0302xy (t)\u03c3\u0302xy ieq + h\u03c3\u0302xy (t)\u03c3\u0302xy ieq\n(v)\n\nh\u03c3\u0302xy (t)\u03c3\u0302xy ieq + h\u03c3\u0302xy (t)\u03c3\u0302xy ieq\n\n(66)\n\nIf \u2206G\u0303(v) (t) is negligibly small, or if it is independent of t, the stress-optical rule approximately\nholds even if we employ \u03c3\u0302 + \u03c3\u0302 (v) as the stress tensor of the system. Figure 6 shows the relative\ncontribution of the virtual stress for N = 40. As shown in Figure 6, \u2206G\u0303(v) (t) is roughly about 25%\nand this value is not negligibly small. However, it does not strongly depend on time t. This means\nthat if we employ \u03c3\u0302 + \u03c3\u0302 (v) as the stress tensor of the system, the stress-optical rule is approximately\nvalid and rheological properties would be qualitatively not changed (quantitatively they would be\n14\n\n\fchanged by about 25%). The results shown in this subsection are therefore qualitatively not\nsensitive to the definition of the stress tensor.\nJudging from obtained rheological data, we can conclude that our model reasonably reproduces\nrheological properties and can be used to study rheological properties or flow behaviors of entangled\npolymers. Although further improvement of the model will be possible, it is beyond the scope of\nthe current work and left for a future work.\n\n4.2\n\nComparison of Rheological Properties with Original Slip-Spring Model\n\nIn this subsection, we briefly compare rheological data calculated by our single chain slip-spring\nmodel and the Likthman's original slip-spring model. We compare several rheology data shown in\nRef 10 with the results of our simulations.\nTo avoid numerical errors due to the fitting or the numerical integration, we compare the shear\nrelaxation modulus instead of storage and loss moduli. Figure 7(a) shows the shear relaxation\nmoduli calculated by our model and the original slip-spring model, for N = 8, 16, 32, 64 and 128.\nOther parameters (N0 , Ns and \u03b6s ) are the same. The data of the orignal model is taken from\nFig. 4(a) of Ref 10. We can observe that the forms of G(t) calculated by our model and the\noriginal model are quite similar for long time region (t & 10\u03c40 ), while the longest relaxation times\nare quantitatively different. Our model gives longer relaxation time for all cases. We consider\nthis is mainly due to the lack of the CR effect in our model. (There may be other reasons for\nthis discrepancy, such as the effect of the short time scale dynamics. However we consider their\ncontributions are not large compared with the CR effect.)\nNonetheless, the relaxation behavior of our model is qualitatively similar to the original model\nwith the CR effect. To see it clearly, we show the shear relaxation moduli shifted vertically and\nhorizontally in Figure 7(b). The data by our model (solid curves in Figure 7(a)) are shifted (the\ndata by the original model are not shifted). For relatively long time region (t & \u03c40 ), our data can\nbe collapsed to the data obtained by the original model well. The horizontal and vertical shift\nfactors, \u00e3 and b\u0303, are of the order of unity (\u00e3 \u2248 1.9 and b\u0303 \u2248 0.8 for N = 128), and they slightly\ndepend on N . This will be due to the difference between the dependeces of relaxation mechanisms\nto N .\nFigure 8 shows zero shear viscosities calculated by our model and the original model (with or\nwithout the CR effect). The data of the orignal model is taken from Fig. 5(a) of Ref 10. We can\nobserve that for large N , \u03b70 by our model is close to the one by the original model without the CR.\nOn the other hand, for small N , our model gives smaller \u03b70 compared with the original model. We\nconsider this is due to the difference of the dynamics of slip-springs. In our model, slip-springs can\nbe attatched only on beads while in the original model, slip-springs can be attatched in between\nbeads. Besides, our model allows slip-springs to pass through each other. The slip-spring dynamics\nof our model seems to give faster relaxation for small N , compared with the original model.\nFrom the above comparisons for G(t) and \u03b70 , we conclude that our model can reproduce rheological properties of the original model qualitatively well, especially for well entangled polymers.\nThe relaxation time or the zero shear viscosity are close to the data by the original model without\nthe CR effect. This is natural since our model does not incorporate the CR effect. Nonetheless,\nthe relaxation behavior of our model is almost the same as one of the original model in the long\ntime region (t & 10\u03c40 ).\n\n4.3\n\nAcceleration by GPU\n\nIn the previous subsection, we have shown that the single chain slip-spring model can reproduce\nrheological properties qualitatively. In this subsection we show the results of the acceleration\nby a GPU. To study the acceleration, we compare the calculation times on a CPU and on a\nGPU, by using the same parameter set. As an example, in this work we use Intel Core 2 Duo\nE8500 (3.16GHz, dual-core) for simulations on CPU, and NVIDIA Tesla C1060 (1.3GHz, 240\nCUDA cores) for simulations on GPU. Simulation programs are written in C and CUDA for CPU\nand GPU, respectively. They are compiled by using gcc (version 4.3.0) and nvcc (version 2.1)\nand executed on Linux (kernel 2.6.9, x86 64). The program for CPU is written in ANSI C and\n15\n\n\fno CPU-specific extensions (such as the SSE or SSE2 instruction sets [54]) are utilized. The\nnumbers of threads used for the calculations are 1 (CPU) and 128 \u00d7 128 (GPU). For comparison,\nwe performed simulations with the following parameters; the numbers of beads and chains N \u00d7M =\n16 \u00d7 4096, 32 \u00d7 2048, 64 \u00d7 1024, or 128 \u00d7 512 (the total number of beads is kept to be constant),\nthe shear rate \u03b3\u0307 = 0 or 0.05. All the simulations are started from the equilibrium initial state (at\ntime t = 0). The time step size is \u2206t = 0.01, and the simulations are stopped at time t = 100 (the\ntotal number of time steps is 10000). The results are summarized in Table 1. We can observe that\nthe program for GPU is about 290 times faster than the program for CPU. The acceleration by a\nGPU is quite effective to accelerate our single chain slip-spring model.\n\n5\n5.1\n\nDiscussion\nModel Properties\n\nWe formulated a single chain version of the slip-spring model for entangled polymers. Our model\nis designed as the simplified model of the original one. One notable property of our model is that\nit fully satisfies the detailed balance condition. This means that the equilibrium probability distribution rigorously becomes the Boltzmann distribution. This enables us to tune the equilibrium\nstatistics of the model easily. For example, we can employ the statistics of a non-ideal chain (real\nchain) for our model, or we can introduce the interaction between slip-springs. Such modifications\ncan be done essentially only by changing the expression for the grand potential (2).\nBecause it is reported that the statistics of entangled polymer chains somehow depend on\nmodels (such as primitive path extraction methods [55\u201357] or dynamic equations [58]), it will be\ndesirable for a model to be tunable for a specific target statistics. The equilibrium distribution\nfunction (13) has a rather simple structure and we can tune, for example, the statistics of the chain\nor the statistics slip-springs easily. We expect that our model can be used to investigate rheological\nbehaviors for various chain statistics models numerically.\nThe detailed balance condition also becomes important when we derive the linear response\nformula (43). Although the response formula (43) itself is already proposed by Ramirez, Sukumaran\nand Likhtman [43], they did not give the derivation based on the master equation. We gave the\nrigorous derivation based on the master equation, which corresponds to the Langevin and jump\ndynamics actually used in the simulations. Our result justifies the use of the response formula (43)\nto calculate the relaxation modulus tensor.\nAlthough dynamics of slip-springs is modeled as a simple jump dynamics in our model, it can\nreproduce linear and nonlinear rheological behaviors qualitatively. The linear rheological properties are similar to the original slip-spring model. This implies that our model captures essential\nnature of the original slip-spring model. We also performed simulations for nonlinear rheological\nproperties, and reproduced the viscosity growth and the Cox-Merz rule. Thus we consider that\nour single chain slip-spring model can be used as long as we want to calculate simple rheological\nproperties.\nIn our model, the rheological properties can be reproduced well while there is no CR effect. As\nwe already pointed, even without the CR effect, there is a CR like relaxation mechanism in our\nmodel (as shown in Appendix A). This relaxation mechanism is caused by the model property that\nslip-springs can pass through (or exchange) each other. Our result implies that in some situations,\nthis \"constraint exchange\" mechanism can be employed instead of the CR mechanism. From the\nnumerical point of view, if we allow slip-spring to pass through each other, the implementation\nbecomes much easier (this is because the time evolution of each slip-springs can be evaluated in\nparallel). It seems to not be difficult to make slip-springs exchangeable in other slip-link type\nmodels. The exchangeable slip-links will improve numerical accuracy efficiently.\n\n5.2\n\nAcceleration by GPU\n\nWe observed that the acceleration by a GPU can improve the simulation speed drastically. The\nprogram for GPU is about 290 times faster than the program for CPU, which seems to be quite\n\n16\n\n\fefficient and promising. However, it is fair to mention about the possible acceleration by some CPUspecific extensional instructions. Several CPU-specific special extensional instructions can improve\nthe performance largely. For example, the SSE instruction handles 4 single precision floating-point\noperations in parallel [54]. The use of the SSE and/or SSE2 will improve the performance roughly\nabout 10 times (for single precision floating-point number operations). Besides, currently the\nprogram for CPU is not parallelized. Because we can achieve very high parallelism for a single\nchain type model, the performance can be further improved by the factor 2 (for a dual-core CPU).\nThis means, even if we tune the program for CPU extremely and parallelize it, the GPU program\nis still about 15 times faster than the CPU program. (We also note that we can use multiple GPUs\nin parallel, and it can also improve the performance.)\nAlthough it is possible to improve the program for CPU, typically programs with such special\ninstructions become quite complicated. The portability of the program is also decreased if we use\nCPU-specific instructions explicitly. As a result, the programming cost for CPU becomes much\nlarger than one for GPU. Judging from the acceleration effects and the programming costs, we\ncan conclude that the single chain slip-spring model simulations on a GPU are very efficient and\npromising for practical purposes.\nSince simulations on a GPU enable us to calculate rheological properties (such as stress tensor)\nvery efficiently, in principle we can perform CONNFFESSIT or particle type multiscale simulations [13\u201315] with reasonable calculation costs, by combining our single chain slip-spring model and\nmacroscale fluid models. When we perform macroscopic fluid simulations in which many mesoscopic rheological simulations are embedded (typically several thousand mesoscopic simulators are\nembedded in a single fluid element), the mesoscale simulations are the most time-consuming part.\nIf we perform such multiscale simulations only on CPUs, the required calculation time is still considerable even if we parallelize the mesoscopic simulator. Our simulation model and use of a GPU\ncan decrease the mesoscopic calculation cost drastically. We expect that the total simulation time\nof multiscale simulations can be also reduced drastically. Besides, the mesoscopic rheological simulations can be further accelearated by using multiple GPUs (because our simulations are already\nhighly parallelized). Cooperating our model with macroscale fluid models will be future works.\nTo study rheological properties of complicated systems, such as the rheology of branched polymers or polymer blends, we will need to refine our model. We will be also required to take into\naccount of the CR or the CCR, for precise calculations under fast shear rates. For more complex\narchitectures, such as star polymers or comb polymers, the generalization of the model will be required. We consider that generalization itself is not so difficult, but it may be difficult to implement\nit for a GPU because there are several limitations for a GPU. To perform simulations efficiently\non a GPU, we will need to design a generalized model so that it is suitable for calculations on a\nGPU.\n\n6\n\nConclusion\n\nIn this work we proposed a single chain slip-spring model, which is based on the Likhtman's slipspring model [10]. The model is designed to be suitable for simulations on a GPU. Besides, the\nmodel is expressed by using the free energy and satisfies the detailed balance condition, which\nensures that the system relaxes to the thermal equilibrium state. We calculated several static\nproperties (equilibrium distirbution functions) analytically. We also calculated the linear response\nof the system to strain deformation, and obtained the Green-Kubo type formula for the relaxation\nmodulus which is in agreement with the one previously proposed by Ramirez, Sukumaran and\nLikhtman [43].\nWe calculated several rheological properties such as the linear viscoelasticity or the viscosity\ngrowth, and shown that our model can reproduce them reasonably. To accelerate the simulations,\nwe performed simulations on a GPU as well as simulations on a CPU. By comparing the simulation\ntimes, we found that the use of a GPU can accelerate a simulation approximately 290 times faster.\nThe modification of our model or the application to actual multiscale simulations will be future\nworks.\n\n17\n\n\fAcknowledgment\nThis work is supported by JST-CREST. The author thanks Mr. Ryuji Sakamaki for informing the\nauthor about the fixed-point real number technique and Ref 46. He also thanks to Prof. Yuichi\nMasubuchi for various helpful comments.\n\nA\n\nConstraint Release Type Relaxation Mechanism\n\nIn many models for entangled polymers, the constraint release (CR) effect is considered to be\nan important effect (especially for branched polymers). Several methods have been developed to\ntake the CR events into account. Rubinstein and Colby [59] modelled the CR events as hopping\nmotions of tube segments in a self-consistent way. Based on this idea, Schieber and coworkers\n[6,9,11] introduced (relatively) slow diffusion type Brownian motion of slip-links as the CR events.\nMasubuchi and coworkers [7] directly modelled the CR events as reconstruction of slip-links between\ntwo chains. Doi and Takimoto [8], and Likhtman [10] modelled the CR events as reconstruction\nevents in a similar way (in their models, slip-links (slip-springs) are virtually paired). In our single\nchain slip-spring model, the CR process is not explicitly considered. However, as we discuss in this\nsection, the CR type relaxation process exists (implicitly) in our model.\nOne peculiar property of our model is that slip-springs can pass through each other, unlike the\noriginal slip-spring model. Most of lip-link based models do not allow slip-links to pass through\neach other. Similarly, it is usually not allowed in most of tube models to exchange the neighboring\nentanglement points. Then, we can expect that the passing-through events of slip-springs will\nresult in a sort of relaxation process.\nWe consider a passing-through event of two neighboring slip-springs. Here we label the slipspring indices j in the following order (ascending in Sj ) to compare our model with conventional\nmodels.\nS1 \u2264 S2 \u2264 S3 \u2264 * * * \u2264 SZ\n(67)\nThis condition is (implicitly) assumed in many slip-link based models. If the j-th and (j + 1)-th\nslip-springs are exchanged at time t, then we should exchange the slip-spring indices and anchoring\npoints to satisfy the condition (67).\nSj (t + 0) = Sj+1 (t),\nAj (t + 0) = Aj+1 (t),\n\nSj+1 (t + 0) = Sj (t)\nAj+1 (t + 0) = Aj (t)\n\n(68)\n(69)\n\nThis dynamics of two monomer indices, Sj and Sj+1 , can be interpreted as the collision and\nreflection like dynamics. The dynamics of two anchoring points, Aj and Aj+1 , can be interpreted\nas sudden jumps in space. We consider that such jump events are similar to the CR picture\nconsidered by Rubinstein and Colby [59]. Thus, we can interpret the exchange events as the CR\nlike motions of anchoring points. Then the exchange events effectively give the CR like stress\nrelaxation process.\nHowever, we should notice that the exchange events do not exactly correspond to the conventional CR events. For example, our CR like events are non-Markovian while the CR events are\nusually modelled as Markovian. (This is because after one exchange event, the same slip-spring\npair can pass through each other again. Such a process results in the memory effect.) Thus the\neffect of the exchange events to the stress relaxation is expected not to be strong at long time\nscale. To fully take account of the conventional CR events, we will need to model the CR process\nin our model as another jump process.\n\nB\n\nDetailed Calculations in Linear Response Theory\n\nIn this appendix, we show detailed calculations in the derivation of the linear response of the stress\nto the velocity gradient tensor. Although the calculations themselves are rather straightforward,\nthe final result is not so intuitive. We show detailed calculations to avoid confusions. We note that,\n18\n\n\ffollowing the same procedure, one can derive other linear response functions such as the dielectric\nresponse function. Mainly we follow the standard derivation of the linear response theory for the\nFokker-Planck equation [42].\nWe may start from eq (35), the time evolution equation for the probability distribution function.\nIf we decompose the probability distribution function into the equilibrium and perturbation parts,\nP ({ri }, {aj }, {sj }, z; t) = Peq ({ri }, {aj }, {sj }, z) + P1 ({ri }, {aj }, {sj }, z; t)\n\n(70)\n\nthe time evolution equation (35) can be approximately expressed as follows, by taking only the\nlinear terms in the perturbation expansion.\n\u2202P1\n\u2248 L0 P1 + L1 (t)Peq\n\u2202t\n\n(71)\n\nwhere we used that the equilibrium part of the time evolution operator, L0 , and the equilibrium\ndistribution function Peq satisfy the following equation.\n\u2202Peq\n= L0 Peq = 0\n\u2202t\n\n(72)\n\nBy integrating eq (71) we have\nP1 ({ri }, {aj }, {sj }, z; t) =\n\nZ\n\nt\n\n\u2032\n\n\u2212\u221e\n\ndt\u2032 e(t\u2212t )L0 L1 (t\u2032 )Peq\n\nThe average time-dependent stress tensor is then calculated to be\nX Z\n\u03c3(t) =\nd{ri }d{aj } \u03c3\u0302P ({ri }, {aj }, {sj }, z; t)\n\n(73)\n\nz,{si }\n\n=\n\n\u0014\n\nX Z\n\nd{ri }d{aj } \u03c3\u0302 Peq +\n\nz,{si }\n\n= \u03c3eq +\n\nZ\n\nt\n\ndt\u2032\n\n\u2212\u221e\n\nX Z\n\nz,{si }\n\nZ\n\nt\n\n\u2032 (t\u2212t\u2032 )L0\n\ndt e\n\n\u2212\u221e\n\n\u2032\n\nL1 (t )Peq\n\n\u0015\n\n(74)\n\n\u2032\n\nd{ri }d{aj } \u03c3\u0302e(t\u2212t )L0 L1 (t\u2032 )Peq\n\nwhere \u03c3eq \u2261 h\u03c3\u0302ieq . Eq (74) can be modified further by utilizing the following equation.\nL1 (t)Peq\n\n\u0014X\n\u0015 X\n\u0015\u0015\nz \u0014\nN \u0014\n\u2202J\n\u2202J\n1\nri \u2212 kB T 1 +\naj \u2212 kB T 1 : \u03ba(t)Peq\n=\nkB T i=1 \u2202ri\n\u2202aj\nj=1\n\n(75)\n\n\u0003\n1 \u0002\n\u03c3\u0302 + \u03c3\u0302 (v) : \u03ba(t)Peq\n=\nkB T\n\nwhere we defined the virtual stress tensor operator \u03c3\u0302 (v) as\n\u03c3\u0302 (v) \u2261\n\nz\nX\n3kB T\nj=1\n\nNs b2\n\n(rsj \u2212 aj )(rsj \u2212 aj ) \u2212 zkB T 1\n\n(76)\n\nFinally we have the following expression for the time-dependent stress tensor, and thus we have\neq (40).\nZ t\ni\nh\u0002\nX Z\n\u0003\n\u2032\n1\n\u03c3(t) = \u03c3eq +\ndt\u2032\nd{ri }d{aj } \u03c3\u0302e(t\u2212t )L0 \u03c3\u0302 + \u03c3\u0302 (v) : \u03ba(t\u2032 )Peq\nkB T \u2212\u221e\nz,{si }\nZ t\ni\u0002\nh\nX Z\n\u0003\n\u2020\n\u2032\n1\n\u2032\n(77)\n= \u03c3eq +\ndt\nd{ri }d{aj } e(t\u2212t )L0 \u03c3\u0302 \u03c3\u0302 + \u03c3\u0302 (v) Peq : \u03ba(t\u2032 )\nkB T \u2212\u221e\nz,{si }\nZ t\n\u0002\n\u0003\n1\ndt\u2032 \u03c3\u0302(t \u2212 t\u2032 ) \u03c3\u0302 + \u03c3\u0302 (v) eq : \u03ba(t\u2032 )\n= \u03c3eq +\nkB T \u2212\u221e\n19\n\n\fHere L\u20200 is the adjoint operator of L0 , which is defined via the following relation.\nX Z\nX Z\nd{ri }d{aj } B\u0302L0 Peq =\nd{ri }d{aj } (L\u20200 B\u0302)Peq\nz,{si }\n\n(78)\n\nz,{si }\n\nwhere B\u0302 is an arbitrary operator. We also defined the time-shifted operator of B\u0302 as follows, from\nthe fact that L\u20200 works as the equilibrium time evolution operator.\n\u2020\n\nB\u0302(t) \u2261 etL0 B\u0302\n\n(79)\n\nwhere B\u0302 is again an arbitrary operator.\nWe note that the detailed balance condition is essential in the preceding derivation of the linear\nresponse formula. If the model does not satisfy the detailed balance, generally the simple GreenKubo type formulae such as eq (43) do not hold. Although we can calculate the linear responses\neven if the detailed balance condition is not satisfied, generally the resulting expressions do not\nreduce to the Green-Kubo form.\n\nReferences\n[1] Doi M, Edwards SF, \"The Theory of Polymer Dynamics\", (1986), Oxford University Press,\nOxford.\n[2] Ianniruberto G, Marrucci G, J Rheol, 45, 1305 (2001).\n[3] Marrucci G, Ianniruberto G, Phil Trans R. Soc Lond A, 361, 677 (2003).\n[4] Likhtman AE, Graham RS, J Non-Newtonian Fluid Mech, 114, 1 (2003).\n[5] Kremer K, Grest GS, J Chem Phys, 92, 5057 (1990).\n[6] Hua CC, Schieber JD, J Chem Phys, 109, 10018 (1998).\n[7] Masubuchi Y, Takimoto J, Koyama K, Ianniruberto G, Greco F, Marrucci G, J Chem Phys,\n115, 4387 (2001).\n[8] Doi M, Takimoto J, Phil Trans R Soc Lond A, 361, 641 (2003).\n[9] Schieber JD, Neergaard J, Gupta S, J Rheol, 47, 213 (2003).\n[10] Likhtman AE, Macromolecules, 38, 6128 (2005).\n[11] Nair DM, Schieber JD, Macromolecules, 39, 3386 (2006).\n[12] Kindt P, Briels WJ, J Chem Phys, 127, 124901 (2007).\n[13] Laso M, \u00d6ttinger HC, J Non-Newtonian Fluid Mech, 47, 1 (1993).\n[14] Halin P, Lielens G, Keunings R, Legat V, J Non-Newtonian Fluid Mech, 79, 387 (1988).\n[15] Murashima T, Taniguchi T, J Polym Sci B: Polym Phys, 48, 886 (2010).\n[16] Yasuda S, Yamamoto R, Europhys Lett, 86, 18002 (2009).\n[17] Yasuda S, Yamamoto R, Phys Rev E, 81, 036308 (2010).\n[18] http://www.peta.co.jp/.\n[19] Susukita R, Ebisuzaki T, Elmegreen BG, Furusawa H, Kato K, Kawai A, Kobayashi Y,\nKoishi T, McNiven GD, Narumi T, Yasuoka K, Comp Phys Comm, 155, 115 (2003).\n\n20\n\n\f[20] Narumi T, Ohno Y, Futatsugi N, Okimoto N, Suenaga A, Yanai R, Taiji M, in \"Proceedings of\nNIC Workshop 2006, From Computational Biophysics to Systems Biology\", NIC Series, 34,\n29 (2006).\n[21] http://www.clearspeed.com/.\n[22] \"ClearSpeed Software Development Kit Reference Manual Version 3.0 \", (2008), ClearSpeed.\n[23] http://cell.scei.co.jp/.\n[24] http://www.ibm.com/developerworks/power/cell/.\n[25] \"Cell Broadband Engine Programming Handbook Version 1.11 \", (2008), IBM.\n[26] http://www.nvidia.com/object/cuda home new.html.\n[27] Lindholm E, Nickolls J, Oberman S, Montrym J, IEEE Micro, 28, 39 (2008).\n[28] \"NVIDIA CUDA Programming Guide Version 2.1 \", (2008), NVIDIA.\n[29] http://ati.amd.com/technology/streamcomputing/.\n[30] \"ATI Stream Computing User Guide rev 1.4.0a\", (2009), AMD.\n[31] Owens JD, Luebke D, Govindaraju N, Harris M, Kr\u00fcger J, Lefohn AE, Purcell TJ, Comp\nGraph Forum, 26, 80 (2007).\n[32] Hamada T, Iitaka T, arXiv:astro-ph/0703100.\n[33] Anderson JA, Lorenz CD, Travesset A, J Comp Phys, 227, 5342 (2008).\n[34] Cohen J, Garland M, Comput Sci Eng, 11, 58 (2009).\n[35] Preis T, Virnau P, Paul W, Schneider JJ, J Comp Phys, 228, 4468 (2009).\n[36] Januszewski M, Kostur M, Comp Phys Comm, 181, 183 (2010).\n[37] Schieber JD, J Chem Phys, 118, 5162 (2003).\n[38] Masubuchi Y, Ianniruberto G, Greco F, Marrucci G, J Chem Phys, 119, 6925 (2003).\n[39] van Kampen NG, \"Stochastic Processes in Physics and Chemistry\", 3rd ed, (2007), Elsevier,\nAmsterdam.\n[40] Glauber RJ, J Math Phys, 4, 294 (1963).\n[41] Evans DJ, Morris GP, \"Statistical Mechanics of Nonequilibrium Liquids\", 2nd ed, (2008),\nCambridge University Press, Cambridge.\n[42] Risken H, \"The Fokker-Planck Equation\", 2nd ed. (1989), Springer, Berlin.\n[43] Ramirez J, Sukumaran SK, Likhtman AE, J Chem Phys, 126, 244904 (2007).\n[44] Honeycutt RL, Phys Rev A, 45, 600 (1992).\n[45] Harris M, \"Optimizing Parallel Reduction in CUDA\", in NVIDIA CUDA SDK.\n[46] Narumi T, Sakamaki R, Kameoka S, Yasuoka K, in \"Proceedings of Ninth International\nConference on Parallel and Distributed Computing, Applications and Technologies (PDCAT\n2008)\", 143 (2008).\n[47] Masubuchi Y, Ianniruberto G, Greco F, Marrucci G, J Non-Newtonian Fluid Mech, 149, 87\n(2008).\n\n21\n\n\f[48] Strobl G, \"The Physics of Polymers\", 2nd ed., (1997), Springer, Berlin.\n[49] Fetters LJ, Lohse DJ, Colby RH, in \"Physical Properties of Polymers Handbook \", Mark JE,\ned, 2nd ed., 445 (2007), Springer, New York,\n[50] Graessley WW, \"Polymeric Liquids and Networks: Dynamics and Rheology\", (2008), Taylor\nand Francis, New York.\n[51] Cates ME, McLeish TCB, Marrucci G, Europhys. Lett., 21, 451 (1993).\n[52] Mead DW, Larson RG, Doi M, Macromolecules, 31, 7895 (1998).\n[53] Graham RS, Likhtman AE, McLeish TCB, Milner ST, J. Rheol., 47, 1171 (2003).\n[54] \"Intel 64 and IA-32 Architectures Software Developer's Manual Volume 1: Basic Architecture\", (2009), Intel.\n[55] Everaers R, Sukumaran SK, Grest GS, Svaneborg C, Sivasubramanian A, Kremer K, Science,\n303, 823 (2004).\n[56] Kr\u00f6ger M, Comp Phys Comm, 168, 209 (2005).\n[57] Tzoumanekas C, Theodorou DN, Macromolecules, 39, 4592 (2006).\n[58] Masubuchi Y, Uneyama T, Watanabe H, Ianniruberto G, Greco F, Marrucci G, J Chem Phys,\n132, 134902 (2010).\n[59] Rubinstein M, Colby RH, J Chem Phys, 89, 5291 (1988).\n\n22\n\n\fFigure and Table Captions\nFigure 1: Storage and loss moduli calculated by the single chain slip-spring model. Circles and\ncrosses indicate G\u2032 (\u03c9) and G\u2032\u2032 (\u03c9) calculated by simulations.\nFigure 2: The longest relaxation time calculated from the linear viscoelasticity data. Broken lines\nshow slopes 2, 3 and 3.48, which correspond to the Rouse type relaxation, the pure reptation type\nrelaxation, and the exponent obtained by the fitting, respectively.\nFigure 3: Zero shear viscosity calculated from the linear viscoelasticity data. Broken lines show\nslopes 1 and 3.4. The critical bead number is estimated to be Nc = 14.2. (The arrow indicates the\ncritical bead number.)\nFigure 4: Viscosity growth curves with various shear rates for N = 40. The shear rates are\n\u03b3\u0307\u03c40 = 0.0025, 0.005, 0.01, 0.025, 0.05, and 0.1. The broken line shows the zero shear viscosity\ncalculated from the linear viscoelasticity data.\nFigure 5: Dynamic and steady viscosities, \u03b7 \u2217 (\u03c9) and \u03b7(\u03b3\u0307). Circles indicate \u03b7 \u2217 (\u03c9) and the crosses\n(with curves) indicate the \u03b7(\u03b3\u0307).\nFigure 6: Relative contribution of the virtual stress to the shear relaxation modulus.\nFigure 7: (a) Comparison of shear relaxation moduli calculated by original and our slip-spring\nmodels. Solid curves are calculated by our model. Dotted curves are the data of the original\nslip-spring model with or without the CR effect (taken from Fig. 4(a) of Ref 10). N = 8, 16, 32, 64\nand 128, from left to right. (b) The same data with (a) but data calculated by our model are\nshifted horizontally and vertically.\nFigure 8: Comparison of zero shear viscosities calculated by original and our slip-spring models.\nCircles are calculated by our model (and the same as the data shown in Figure 3). Crosses and\ntriangles are the data of the original slip-spring model with and without CR (taken from Fig. 5(a)\nof Ref 10).\nTable 1: Calculation times with various simulation parameters on a CPU and on a GPU. N, M, \u03b3\u0307\nare the number of beads per chain (polymerization index), the total number of chains, and the\nshear rate. tCPU and tGPU are the calculation times on a CPU (Intel Core 2 Duo E8500, single\nthread) and on a GPU (NVIDIA Tesla C1060, 128 \u00d7 128 threads), respectively. Simulations are\nperformed from t = 0 (in equilibrium) to t = 100 with the time step size \u2206t = 0.01. The speed-up\nfactor is defined as the ratio of calculation times, tCPU /tGPU .\n\n23\n\n\fG\u2032(\u03c9) / \u03c10kBT, G\u2032\u2032(\u03c9) / \u03c10kBT\n\nFigures\n\n100\n\nN = 10\nN = 20\nN = 40\n10-1 N = 80\n\nG\u2032\nG\u2032\u2032\n\n10-2\n10-3 -5\n10\n\n10-4\n\n10-3\n\n10-2\n\u03c40\u03c9\n\nFigure 1:\n\n24\n\n10-1\n\n100\n\n\f104\n\n\u03c4d / \u03c40\n\n103\n102\n\n3.48\n\n3\n\n101\n100\n2\n10-1 0\n10\n\n101\nN\u22121\n\n102\n\nFigure 2:\n\n103\n\n\u03b70 / \u03c10kBT \u03c40\n\n102\n101\n\n3.4\n\n100\n10-1\n10-2 0\n10\n\n1\n\nNc \u2212 1\n101\nN\u22121\n\n102\n\nFigure 3:\n\n25\n\n\f102\n\n\u03b7(t,\u03b3) / \u03c10kBT\u03c40\n\n\u03b7(\u221e,0) / \u03c10kBT\u03c40\n\n\u22c5\n\n101\n\n100\n\n10-1 0\n10\n\n\u22c5\n\u03b3\u03c40 = 0.0025, 0.005, 0.01,\n0.025, 0.05, 0.1\n101\n\n102\nt / \u03c40\n\n103\n\n104\n\n\u03b7*(\u03c9) / \u03c10kBT\u03c40, \u03b7(\u03b3) / \u03c10kBT\u03c40\n\nFigure 4:\n\n\u22c5\n\n103\n\n\u03b7*(\u03c9)\n\u22c5\n\u03b7(\u03b3)\n\n102\n101\n\nN = 10\nN = 20\nN = 40\nN = 80\n\n100\n10-1\n10-2 -5\n10\n\n10-4\n\n10-3\n\n10-2 10-1\n\u22c5 \u03c4\u03c9\n\u03c40\u03b3,\n0\n\nFigure 5:\n\n26\n\n100\n\n101\n\n\f0.5\n\n\u2206G \u0303 (v)(t)\n\n0.4\n0.3\n0.2\n0.1\n0\n10-2\n\n10-1\n\n100\n\n101\nt / \u03c40\n\nFigure 6:\n\n27\n\n102\n\n103\n\n\fG(t) / \u03c10kBT\n\n(a)\n\n100\n\nthis work\noriginal (with CR)\n\n10-1\n10-2\n10-3 -2\n10\n10-1\n\n \u0303\n \u0303 / \u03c1 0kB T\nbG(t\n/ a)\n\n(b)\n\n100\n\n101 102\nt / \u03c40\n\n103\n\n104\n\n105\n\n0\n\n10\n\nthis work (shifted)\noriginal (with CR)\n\n-1\n\n10\n\n-2\n\n10\n\n-3\n\n10\n\n0\n\n10\n\n1\n\n10\n\n2\n\n10\n\n \u0303 0\nt / a\u03c4\nFigure 7:\n\n28\n\n3\n\n10\n\n4\n\n10\n\n5\n\n10\n\n\f104\n\n\u03b70 / \u03c10kBT \u03c40\n\n103\n102\n101\n100\n10-1\n10-2 0\n10\n\nthis work\noriginal (with CR)\n(without CR)\n101\n\n102\nN\u22121\nFigure 8:\n\n29\n\n103\n\n\fTable\nN \u00d7M\n16 \u00d7 4096\n16 \u00d7 4096\n32 \u00d7 2048\n32 \u00d7 2048\n64 \u00d7 1024\n64 \u00d7 1024\n128 \u00d7 512\n128 \u00d7 512\n\n\u03b3\u0307\n0\n0.05\n0\n0.05\n0\n0.05\n0\n0.05\n\ntCPU [s]\n2.66 \u00d7 102\n2.65 \u00d7 102\n2.58 \u00d7 102\n2.57 \u00d7 102\n2.52 \u00d7 102\n2.51 \u00d7 102\n2.51 \u00d7 102\n2.50 \u00d7 102\nTable 1:\n\n30\n\ntGPU [s]\n8.97 \u00d7 10\u22121\n8.95 \u00d7 10\u22121\n9.02 \u00d7 10\u22121\n8.95 \u00d7 10\u22121\n8.70 \u00d7 10\u22121\n8.63 \u00d7 10\u22121\n8.45 \u00d7 10\u22121\n8.40 \u00d7 10\u22121\n\nspeed-up\n297\n296\n286\n287\n291\n292\n297\n298\n\n\f"}