{"id": "http://arxiv.org/abs/1010.5034v1", "guidislink": true, "updated": "2010-10-25T03:11:36Z", "updated_parsed": [2010, 10, 25, 3, 11, 36, 0, 298, 0], "published": "2010-10-25T03:11:36Z", "published_parsed": [2010, 10, 25, 3, 11, 36, 0, 298, 0], "title": "Authentication from matrix conjugation", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1010.0672%2C1010.5115%2C1010.0337%2C1010.5576%2C1010.5651%2C1010.0198%2C1010.5026%2C1010.4614%2C1010.4072%2C1010.2708%2C1010.4347%2C1010.1278%2C1010.5842%2C1010.0096%2C1010.0824%2C1010.3133%2C1010.3920%2C1010.3109%2C1010.3991%2C1010.4468%2C1010.3847%2C1010.0367%2C1010.6064%2C1010.4548%2C1010.1098%2C1010.6133%2C1010.6173%2C1010.3062%2C1010.1705%2C1010.2865%2C1010.1539%2C1010.0814%2C1010.5034%2C1010.3709%2C1010.1935%2C1010.1954%2C1010.4186%2C1010.1600%2C1010.3483%2C1010.0534%2C1010.1534%2C1010.0456%2C1010.5304%2C1010.5534%2C1010.5588%2C1010.5204%2C1010.1750%2C1010.5781%2C1010.5959%2C1010.0841%2C1010.3006%2C1010.5652%2C1010.1729%2C1010.3428%2C1010.4381%2C1010.2102%2C1010.3003%2C1010.1514%2C1010.0302%2C1010.5528%2C1010.5418%2C1010.0276%2C1010.2964%2C1010.1642%2C1010.5338%2C1010.2338%2C1010.2333%2C1010.3149%2C1010.2224%2C1010.6148%2C1010.4836%2C1010.2656%2C1010.1941%2C1010.2097%2C1010.2933%2C1010.0171%2C1010.1434%2C1010.3185%2C1010.2745%2C1010.5283%2C1010.0043%2C1010.3787%2C1010.2480%2C1010.5922%2C1010.6196%2C1010.0981%2C1010.5825%2C1010.0855%2C1010.4394%2C1010.5084%2C1010.3839%2C1010.3019%2C1010.0703%2C1010.2282%2C1010.3652%2C1010.4139%2C1010.5014%2C1010.6169%2C1010.5943%2C1010.3198%2C1010.3158&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Authentication from matrix conjugation"}, "summary": "We propose an authentication scheme where forgery (a.k.a. impersonation)\nseems infeasible without finding the prover's long-term private key. The latter\nwould follow from solving the conjugacy search problem in the platform\n(noncommutative) semigroup, i.e., to recovering X from X^{-1}AX and A. The\nplatform semigroup that we suggest here is the semigroup of nxn matrices over\ntruncated multivariable polynomials over a ring.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1010.0672%2C1010.5115%2C1010.0337%2C1010.5576%2C1010.5651%2C1010.0198%2C1010.5026%2C1010.4614%2C1010.4072%2C1010.2708%2C1010.4347%2C1010.1278%2C1010.5842%2C1010.0096%2C1010.0824%2C1010.3133%2C1010.3920%2C1010.3109%2C1010.3991%2C1010.4468%2C1010.3847%2C1010.0367%2C1010.6064%2C1010.4548%2C1010.1098%2C1010.6133%2C1010.6173%2C1010.3062%2C1010.1705%2C1010.2865%2C1010.1539%2C1010.0814%2C1010.5034%2C1010.3709%2C1010.1935%2C1010.1954%2C1010.4186%2C1010.1600%2C1010.3483%2C1010.0534%2C1010.1534%2C1010.0456%2C1010.5304%2C1010.5534%2C1010.5588%2C1010.5204%2C1010.1750%2C1010.5781%2C1010.5959%2C1010.0841%2C1010.3006%2C1010.5652%2C1010.1729%2C1010.3428%2C1010.4381%2C1010.2102%2C1010.3003%2C1010.1514%2C1010.0302%2C1010.5528%2C1010.5418%2C1010.0276%2C1010.2964%2C1010.1642%2C1010.5338%2C1010.2338%2C1010.2333%2C1010.3149%2C1010.2224%2C1010.6148%2C1010.4836%2C1010.2656%2C1010.1941%2C1010.2097%2C1010.2933%2C1010.0171%2C1010.1434%2C1010.3185%2C1010.2745%2C1010.5283%2C1010.0043%2C1010.3787%2C1010.2480%2C1010.5922%2C1010.6196%2C1010.0981%2C1010.5825%2C1010.0855%2C1010.4394%2C1010.5084%2C1010.3839%2C1010.3019%2C1010.0703%2C1010.2282%2C1010.3652%2C1010.4139%2C1010.5014%2C1010.6169%2C1010.5943%2C1010.3198%2C1010.3158&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We propose an authentication scheme where forgery (a.k.a. impersonation)\nseems infeasible without finding the prover's long-term private key. The latter\nwould follow from solving the conjugacy search problem in the platform\n(noncommutative) semigroup, i.e., to recovering X from X^{-1}AX and A. The\nplatform semigroup that we suggest here is the semigroup of nxn matrices over\ntruncated multivariable polynomials over a ring."}, "authors": ["Dima Grigoriev", "Vladimir Shpilrain"], "author_detail": {"name": "Vladimir Shpilrain"}, "author": "Vladimir Shpilrain", "arxiv_comment": "6 pages", "links": [{"href": "http://arxiv.org/abs/1010.5034v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1010.5034v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.CR", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.CR", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1010.5034v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1010.5034v1", "journal_reference": "Groups, Complexity, and Cryptology 1 (2009), 199--206", "doi": null, "fulltext": "AUTHENTICATION FROM MATRIX CONJUGATION\n\narXiv:1010.5034v1 [cs.CR] 25 Oct 2010\n\nDIMA GRIGORIEV AND VLADIMIR SHPILRAIN\nDedicated to Ben Fine on his 60th birthday\nAbstract. We propose an authentication scheme where forgery (a.k.a. impersonation)\nseems infeasible without finding the prover's long-term private key. The latter would\nfollow from solving the conjugacy search problem in the platform (noncommutative)\nsemigroup, i.e., to recovering X from X \u22121 AX and A. The platform semigroup that we\nsuggest here is the semigroup of n \u00d7 n matrices over truncated multivariable polynomials\nover a ring.\n\n1. Introduction\nFor a general theory of public-key authentication (a.k.a. identification) as well as early\nexamples of authentication protocols, the reader is referred to [6]. In this paper, we\npropose an authentication scheme where recovering the private key from the public key\nwould follow from solving the conjugacy search problem in the platform (noncommutative)\nsemigroup, i.e., to recovering X from X \u22121 AX and A. There were some previous proposals\nbased on this problem, see e.g. [5, 8], so it would make sense to spell out what makes our\nproposal different:\n(1) Forgery (a.k.a. impersonation) seems infeasible without finding the prover's longterm private key. In other proposals, there is usually a \"shortcut\", i.e., a way for\nthe adversary to pass the final test by the verifier without obtaining the prover's\nprivate key. In particular, in the proposal of [5] modeled on the Diffie-Hellman\nauthentication scheme, there is an alternative (formally weaker) problem that is\nsufficient for the adversary to solve in order to impersonate the prover. Namely,\nit is sufficient for the adversary to obtain Y \u22121 X \u22121 AXY from X \u22121 AX, Y \u22121 AY ,\nand A.\n(2) Our platform semigroup might be the first serious candidate for having generically\nhard conjugacy search problem. It can therefore be used with some other previously suggested cryptographic protocols based on the conjugacy search problem,\ne.g. with the protocols in [1] or [3]; see also [7] for more examples.\n(3) One of the most important new features is that the verifier selects his final test\nrandomly from a large series of tests. This is what makes it difficult for the\nadversary to impersonate the prover without obtaining her private key: if the\nadversary just \"studies for the test\", as weak students do, he/she at least should\nknow what the test is.\nResearch of the second author was partially supported by the NSF grant DMS-0405105.\n1\n\n\f2\n\n(4) Unlike the proposals in [4, 8], our authentication scheme does not use the FeigeFiat-Shamir idea [2] involving repeating several times a three-pass challengeresponse step (to avoid predicting, by the adversary, the challenge with nonnegligible probability). In our scheme, we have just one challenge and one response.\n(5) To prevent attacks by malicious verifier, there is an intermediate \"commitment to\nchallenge\" step for the verifier because otherwise, malicious verifier might present\nthe prover with a carefully selected challenge that may result in leaking information\nabout the prover's private key at the response step. This is similar to the \"chosenplaintext attack\" on an encryption protocol.\nPerhaps it is worth spelling out that in this paper, our main focus is on how to protect\nthe prover's long-term private key from any information leaks during authentication sessions. We put less emphasis here on security of the prover's long-term private key against\nattacks on her long-term public key.\n2. The protocol, beta version\nIn this section, we give a preliminary description of our authentication protocol. Here\nAlice is the prover and Bob the verifier. We call this a \"beta version\" of the protocol\nbecause what we describe here represents a single session; repeating this particular protocol\nseveral times can compromise the long-term private key of the prover. This is why extra\ncare has to be taken to protect the long-term private key; this is done in the complete\nprotocol described in the following section, while here, in an attempt to be helpful to the\nreader, we describe the \"skeleton\" of our scheme where all principal (i.e., non-technical)\nideas are introduced.\nThe platform ring G that we suggest is the ring of n \u00d7 n matrices over N -truncated\nk-variable polynomials over a ring R. The reader is referred to our Section 4 for the\ndefinition of N -truncated polynomials as well as for suggested values of parameters n, N ,\nk, and the ring R.\nProtocol, beta version\n(i) Alice's public key is a pair of matrices (A, X \u22121 AX), where the matrix X \u2208 G is\nAlice's long-term private key. The matrix A \u2208 G does not have to be invertible.\n(ii) At the challenge step, Bob chooses a random matrix B from the ring G and sends\nit to Alice. (See the full version of the protocol in the next section for how to\nprevent Bob from choosing B maliciously.)\n(iii) Alice responds with the matrix X \u22121 BX.\n(iv) Bob selects a random word w(x, y) (without negative exponents on x or y), evaluates the matrices M1 = w(A, B) and M2 = w(X \u22121 AX, X \u22121 BX), then computes\ntheir traces. If tr(M1 ) = tr(M2 ), he accepts authentication. If not, then rejects.\nThe point of the final test is that M2 = w(X \u22121 AX, X \u22121 BX) should be equal to\n\u22121\nX M1 X = X \u22121 w(A, B)X. Therefore, since the matrices M1 and M2 are conjugate,\nthey should, in particular, have the same trace. Note that the trace in this context works\nmuch better (from the security point of view) than, say, the determinant, because the\n\n\f3\n\ndeterminant is a multiplicative function, so the adversary could use any matrix with the\nsame determinant as B in place of X \u22121 BX, and still pass the determinant test. With the\ntrace, the situation is quite different, and there is no visible way for the adversary to pass\nthe trace test for a random word w(x, y) unless he/she actually uses the matrix X \u22121 BX.\n3. The protocol, full version\nCompared to the beta version described in the previous section, the full protocol given\nin this section has an extra feature of protecting the long-term private key X from overexposure. This is needed because upon accumulating sufficiently many matrices of the\nform X \u22121 Bi X with different Bi but the same X, the adversary may recover X more easily. To avoid this, we make Alice (the prover) apply a non-invertible endomorphism (i.e.,\na homomorphism into itself) of the ambient ring G to all participating matrices. This\nendomorphism is selected by Bob in the beginning of each new session. We also note yet\nanother extra feature of the protocol below, namely, a (mild) \"commitment to challenge\"\nby the verifier (step 2(i)) preceding the actual challenge. Recall that this is done to prevent\na malicious verifier from presenting the prover with a carefully selected challenge that may\nresult in leaking information about the prover's private key at the response step.\nProtocol, full version\n(1) Alice's public key is a pair of matrices (A, X \u22121 AX), where the matrix X \u2208 G is\nAlice's long-term private key. The matrix A \u2208 G does not have to be invertible.\n(2) At the \"commitment to challenge\" step, Bob chooses: (i) a random matrix B from\nthe ring G; (ii) a random non-invertible endomorphism \u03c6 of the ring G. Bob then\nsends B and \u03c6 to Alice.\n(3) In order to prevent a malicious Bob from presenting her with a carefully selected\nchallenge, Alice publishes random positive integers p and q and asks Bob to send\nher random non-zero constants ci , i = 1, 2, 3, and create his challenge in the form\nB \u2032 = c1 A + c2 B + c3 Ap B q .\n(4) Upon receiving B \u2032 , Alice responds with the matrix \u03c6(X \u22121 B \u2032 X).\n(5) Bob selects a random word w(x, y) (without negative exponents on x or y), evaluates the matrices M1 = w(\u03c6(A), \u03c6(B \u2032 )) and M2 = w(\u03c6(X \u22121 AX), \u03c6(X \u22121 B \u2032 X)),\nthen computes their traces. If tr(M1 ) = tr(M2 ), he accepts authentication. If not,\nthen rejects.\n4. Parameters and key generation\nOur suggested platform ring G is the ring of all n \u00d7 n matrices over truncated k-variable\npolynomials over the ring Z11 . Truncated (more precisely, N -truncated) k-variable polynomials over Z11 are elements of the factor algebra of the algebra Z11 [x1 , . . . , xk ] of k-variable\npolynomials over Z11 by the ideal generated by all monomials of degree\nX N . In other words,\nN -truncated k-variable polynomials are expressions of the form\naj1 ...js * xj1 * * * xjs ,\n0\u2264s\u2264N \u22121\n\nwhere aj1 ...js are elements of Z11 , and xjs are variables.\n\n\f4\n\nTo make computation efficient for legitimate parties, we suggest to use sparse polynomials as entries in participating matrices. This means that there is an additional parameter\nd specifying the maximum number of non-zero coefficients in polynomials randomly generated by Alice or Bob. Note\n\u0001 that the number of different monomials of degree N in k\nvariables is M (N, k) = Nk+k . This number grows exponentially in k (assuming that N\nis greater than k). The number of different collections of d monomials (with non-zero co\u0001\nefficients) of degree < N is more than M (N,k)\n, which grows exponentially in both d and\nd\nk. Concrete suggested values for parameters are given below; right now we just say that,\u0001\nif we denote the security parameter by t, we suggest that the number M (N, k) = N k+k\nis at least t. At the same time, neither N nor k should exceed t. As for the parameter d,\nm\nwe require that d n * k * log N * n2 < t, where m is yet another parameter, defined in the\nfollowing subsection 4.1.\nSince the questions of generating random invertible matrices or random polynomial\nendomorphism have not been addressed in the literature on cryptography before (to the\nbest of our knowledge), we address these questions below.\n4.1. Generating matrices. Our notation here follows that of Section 3.\nSince the matrices A and \u221a\nB do not have to be invertible, they are easy to generate. We\npolynomial over Z11 , which\nrequire that each entry is a d-sparse N -truncated k-variable\n\u221a\nis generated the obvious way. Namely, one first chooses d random monomials of degree\nat most N \u2212 1, then randomly chooses non-zero coefficients from Z11 for these monomials.\nAn invertible matrix X can be generated as a random product of m elementary matrices.\nA square matrix is called elementary if it differs from the identity matrix by exactly\none non-zero element outside the diagonal. This single non-zero element is generated as\ndescribed in the previous paragraph. Denote by Eij (u) the elementary matrix that has\nu 6= 0 in the (i, j)th place, i 6= j.\nWe note that multiplying m elementary matrices may result in the number of nonzero coefficients in some of the entries growing exponentially in m. More precisely, when\nwe multiply Eij (u) by Ejk (v), the result is Eik (uv), and the polynomial uv is no longer\nd-sparse, but d2 -sparse. However, this phenomenon is limited to products of elementary\nmatrices of the form Eij (u)*Ejk (v), and the expected maximum length of such \"matching\"\nchains in a product of m elementary n \u00d7 n matrices is m\nn . We therefore require that\nm\n2\nd n * k * log N * n < t, where t is the security parameter.\n4.2. Generating an endomorphism. At step 2 of the full protocol in Section 3, Bob\nhas to generate a random non-invertible endomorphism \u03c6 of the ring G of matrices over\nN -truncated k-variable polynomials over Z11 .\nSuch an endomorphism is going to be naturally induced by an endomorphism of the\nring of N -truncated k-variable polynomials over Z11 . The latter endomorphism can be\nconstructed as follows: \u03c6 : xj \u2192 fj , where fj = fj (x1 , . . . , xk ) are random sparse N truncated k-variable polynomials over Z11 with zero constant term, which actually depend\non (k \u2212 k0 ) variables only, i.e., k0 variables are missing, where the parameter k0 is specified\nin the following subsection. The zero constant term condition is needed for \u03c6 to actually\n\n\f5\n\nbe an endomorphism, i.e., to keep invariant the ideal generated by all \u221a\nmonomials of degree\nN . For efficiency reasons, it makes sense to have the polynomials fj d-sparse.\n4.3. Suggested parameters. Suggested values for parameters of our scheme are:\n(1) The suggested value of n (the size of participating matrices) is n = 3.\n(2) Presently, N = 1000, d = 25, and k = 10 should be quite enough to meet the\nsecurity conditions specified above. In particular, with these values of parameters,\nthe number M (N, k) of different monomials is greater than 1020 .\n(3) The matrix X (Alice's long-term private key) is generated by Alice as a product of\nm random elementary matrices, where the value for m is randomly selected from\nthe interval n3 \u2264 m \u2264 2n3 .\n(4) Parameter k0 used in constructing a non-invertible endomorphism (subsection 4.2\nabove) can be specified as follows: k0 is randomly selected from the interval k3 \u2264\nk0 \u2264 2k\n3 .\n(5) Values of random positive integers p and q in step 3 of the protocol in Section 3 can\nbe bounded by 5. Non-zero constants ci in the same step 3 are selected uniformly\nrandomly from the set of all non-zero elements of Z11 .\n(6) The suggested length of the word w(x, y) in step 5 of the protocol in Section 3 is\n10.\n4.4. Key size and key space. To conclude this section, we point\nout that the size of a\n\u221a\nrandom matrix in our scenario (e.g. Bob's commitment B) is d * k * log N * n2 . The size\nof an invertible matrix X is, roughly, (d * k * log N + log n) * m.\nThe size of the key space for the long-term private key (i.e., the matrix X) is, roughly,\nexp((d * k * log N + log n) * m).\n5. Cryptanalysis\nWe start by discussing how the adversary, Eve, can attack Alice's long-term private key\n(the matrix X) directly, based just on the public key P = X \u22121 AX. The relevant problem\nis known as the conjugacy search problem. Note that the equation P = X \u22121 AX implies\nXP = AX, which translates into a system of n2 linear equations for the entries of X,\nwhere n is the size of participating matrices. Thus, a natural way for Eve to attempt to\nfind X would be to solve this system. However, there are some major obstacles along this\nway:\n(a) The matrix equation XP = AX is not equivalent to P = X \u22121 AX. The former\nequation has many solutions; for example, if X is a solution, then any matrix of\nthe form X \u2032 = f (A) * X * g(P ) is a solution, too, where f (A) and g(P ) are arbitrary\npolynomials in the matrices A and P , respectively. However, only invertible matrices X \u2032 will be solutions of the equation P = X \u22121 AX. If participating matrices\ncome from a ring where \"generic\" matrices are non-invertible (which is the case for\nour suggested platform ring), then Eve would have to add to the matrix equation\nXP = AX another equation XY = I, where X, Y are unknown matrices, and I is\nthe identity matrix. This translates into a system of n2 quadratic equations, not\nlinear ones.\n\n\f6\n\n(b) As explained in the previous paragraph, Eve is facing a system of n2 linear equations and n2 quadratic equations, with 2n2 unknowns, over a ring R, which in\nour scheme is the ring of N -truncated k-variable polynomials over Z11 . She can\nfurther translate this into a system of linear equations over Z11 if she collects coefficients at similar monomials, but this system is going to be huge: as explained\nin our Section 4, it is going to have more than 1020 equations (by the number of\nmonomials). Note that, although entries of all participating matrices are sparse\npolynomials, Eve does not know which monomials in the private matrix X occur\nwith non-zero coefficients, which means she has to either engage all monomials\nin her equations or try all possible supports (i.e., collections of monomials with\nnon-zero coefficients) of the entries of elementary matrices in a decomposition of\nX (see subsection 4.1).\n(c) Eve may hope to get more information about the matrix X if she eavesdrops on\nseveral authentication sessions between legitimate parties. More specifically, she\ncan accumulate several pairs of matrices of the form (\u03c6i (Bi ), \u03c6i (X \u22121 Bi X)). Note\nhowever that even if a pair like that yields some information, this is going to be\ninformation about the matrix \u03c6i (X) rather than about X itself. To recover X\nfrom \u03c6i (X) is impossible because \u03c6i has a large kernel by design.\nAcknowledgement. Both authors are grateful to Max Planck Institut f\u00fcr Mathematik,\nBonn for its hospitality during the work on this paper.\nReferences\n[1] I. Anshel, M. Anshel, D. Goldfeld, An algebraic method for public-key cryptography, Math. Res.\nLett. 6 (1999), 287\u2013291.\n[2] U. Feige, A. Fiat and A. Shamir, Zero knowledge proofs of identity, Journal of Cryptology 1 (1987),\n77\u201394.\n[3] D. Grigoriev, I. Ponomarenko, Constructions in public-key cryptography over matrix groups, Contemp. Math., Amer. Math. Soc. 418 (2006), 103\u2013119.\n[4] D. Grigoriev and V. Shpilrain, Zero-knowledge authentication schemes from actions on graphs,\ngroups, or rings, preprint: http://arxiv.org/abs/0802.1661\n[5] K. H. Ko, D. H. Choi, M. S. Cho, and J. W. Lee, New signature scheme using conjugacy problem,\npreprint; http://eprint.iacr.org/2002/168.\n[6] A. Menezes, P. van Oorschot, and S. Vanstone, Handbook of Applied Cryptography, CRC-Press\n1996.\n[7] A. G. Myasnikov, V. Shpilrain, and A. Ushakov, Group-based cryptography, Birkh\u00e4user 2008.\n[8] H. Sibert, P. Dehornoy, M. Girault, Entity authentication schemes using braid word reduction,\nDiscrete Applied Math. 154-2 (2006), 420\u2013436.\nCNRS, Math\u00e9matiques, Universit\u00e9 de Lille, 59655, Villeneuve d'Ascq, France\nE-mail address: dmitry.grigoryev@math.univ-lille1.fr\nDepartment of Mathematics, The City College of New York, New York, NY 10031\nE-mail address: shpil@groups.sci.ccny.cuny.edu\n\n\f"}