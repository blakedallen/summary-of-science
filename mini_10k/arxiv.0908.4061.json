{"id": "http://arxiv.org/abs/0908.4061v2", "guidislink": true, "updated": "2009-08-31T19:07:04Z", "updated_parsed": [2009, 8, 31, 19, 7, 4, 0, 243, 0], "published": "2009-08-27T18:44:56Z", "published_parsed": [2009, 8, 27, 18, 44, 56, 3, 239, 0], "title": "Semi-algebraic Range Reporting and Emptiness Searching with Applications", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0908.1886%2C0908.1034%2C0908.1703%2C0908.2201%2C0908.4503%2C0908.1763%2C0908.0096%2C0908.0933%2C0908.0405%2C0908.1554%2C0908.3243%2C0908.2314%2C0908.1035%2C0908.3474%2C0908.0373%2C0908.4485%2C0908.2444%2C0908.2222%2C0908.2067%2C0908.2008%2C0908.0691%2C0908.0131%2C0908.0557%2C0908.1462%2C0908.3945%2C0908.0160%2C0908.1106%2C0908.2871%2C0908.3724%2C0908.0210%2C0908.2736%2C0908.1614%2C0908.3246%2C0908.4554%2C0908.1737%2C0908.0307%2C0908.2863%2C0908.1864%2C0908.0682%2C0908.4164%2C0908.3335%2C0908.1781%2C0908.1411%2C0908.1777%2C0908.2639%2C0908.4108%2C0908.3733%2C0908.3034%2C0908.0681%2C0908.0665%2C0908.4061%2C0908.1971%2C0908.3217%2C0908.0299%2C0908.3909%2C0908.1347%2C0908.1306%2C0908.1693%2C0908.0273%2C0908.1619%2C0908.0264%2C0908.2838%2C0908.3555%2C0908.2605%2C0908.0440%2C0908.2978%2C0908.4318%2C0908.0328%2C0908.1148%2C0908.0719%2C0908.2156%2C0908.0486%2C0908.1868%2C0908.1748%2C0908.0634%2C0908.0604%2C0908.2983%2C0908.4373%2C0908.0926%2C0908.1724%2C0908.4535%2C0908.1752%2C0908.3614%2C0908.1677%2C0908.4354%2C0908.4334%2C0908.3810%2C0908.2499%2C0908.2840%2C0908.4053%2C0908.1274%2C0908.1911%2C0908.1975%2C0908.1351%2C0908.1808%2C0908.3351%2C0908.4502%2C0908.1959%2C0908.1405%2C0908.1537%2C0908.2997&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Semi-algebraic Range Reporting and Emptiness Searching with Applications"}, "summary": "In a typical range emptiness searching (resp., reporting) problem, we are\ngiven a set $P$ of $n$ points in $\\reals^d$, and wish to preprocess it into a\ndata structure that supports efficient range emptiness (resp., reporting)\nqueries, in which we specify a range $\\sigma$, which, in general, is a\nsemi-algebraic set in $\\reals^d$ of constant description complexity, and wish\nto determine whether $P\\cap\\sigma=\\emptyset$, or to report all the points in\n$P\\cap\\sigma$. Range emptiness searching and reporting arise in many\napplications, and have been treated by Matou\\v{s}ek \\cite{Ma:rph} in the\nspecial case where the ranges are halfspaces bounded by hyperplanes. As shown\nin \\cite{Ma:rph}, the two problems are closely related, and have solutions (for\nthe case of halfspaces) with similar performance bounds. In this paper we\nextend the analysis to general semi-algebraic ranges, and show how to adapt\nMatou\\v{s}ek's technique, without the need to {\\em linearize} the ranges into a\nhigher-dimensional space. This yields more efficient solutions to several\nuseful problems, and we demonstrate the new technique in four applications.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0908.1886%2C0908.1034%2C0908.1703%2C0908.2201%2C0908.4503%2C0908.1763%2C0908.0096%2C0908.0933%2C0908.0405%2C0908.1554%2C0908.3243%2C0908.2314%2C0908.1035%2C0908.3474%2C0908.0373%2C0908.4485%2C0908.2444%2C0908.2222%2C0908.2067%2C0908.2008%2C0908.0691%2C0908.0131%2C0908.0557%2C0908.1462%2C0908.3945%2C0908.0160%2C0908.1106%2C0908.2871%2C0908.3724%2C0908.0210%2C0908.2736%2C0908.1614%2C0908.3246%2C0908.4554%2C0908.1737%2C0908.0307%2C0908.2863%2C0908.1864%2C0908.0682%2C0908.4164%2C0908.3335%2C0908.1781%2C0908.1411%2C0908.1777%2C0908.2639%2C0908.4108%2C0908.3733%2C0908.3034%2C0908.0681%2C0908.0665%2C0908.4061%2C0908.1971%2C0908.3217%2C0908.0299%2C0908.3909%2C0908.1347%2C0908.1306%2C0908.1693%2C0908.0273%2C0908.1619%2C0908.0264%2C0908.2838%2C0908.3555%2C0908.2605%2C0908.0440%2C0908.2978%2C0908.4318%2C0908.0328%2C0908.1148%2C0908.0719%2C0908.2156%2C0908.0486%2C0908.1868%2C0908.1748%2C0908.0634%2C0908.0604%2C0908.2983%2C0908.4373%2C0908.0926%2C0908.1724%2C0908.4535%2C0908.1752%2C0908.3614%2C0908.1677%2C0908.4354%2C0908.4334%2C0908.3810%2C0908.2499%2C0908.2840%2C0908.4053%2C0908.1274%2C0908.1911%2C0908.1975%2C0908.1351%2C0908.1808%2C0908.3351%2C0908.4502%2C0908.1959%2C0908.1405%2C0908.1537%2C0908.2997&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "In a typical range emptiness searching (resp., reporting) problem, we are\ngiven a set $P$ of $n$ points in $\\reals^d$, and wish to preprocess it into a\ndata structure that supports efficient range emptiness (resp., reporting)\nqueries, in which we specify a range $\\sigma$, which, in general, is a\nsemi-algebraic set in $\\reals^d$ of constant description complexity, and wish\nto determine whether $P\\cap\\sigma=\\emptyset$, or to report all the points in\n$P\\cap\\sigma$. Range emptiness searching and reporting arise in many\napplications, and have been treated by Matou\\v{s}ek \\cite{Ma:rph} in the\nspecial case where the ranges are halfspaces bounded by hyperplanes. As shown\nin \\cite{Ma:rph}, the two problems are closely related, and have solutions (for\nthe case of halfspaces) with similar performance bounds. In this paper we\nextend the analysis to general semi-algebraic ranges, and show how to adapt\nMatou\\v{s}ek's technique, without the need to {\\em linearize} the ranges into a\nhigher-dimensional space. This yields more efficient solutions to several\nuseful problems, and we demonstrate the new technique in four applications."}, "authors": ["Micha Sharir", "Hayim Shaul"], "author_detail": {"name": "Hayim Shaul"}, "author": "Hayim Shaul", "links": [{"href": "http://arxiv.org/abs/0908.4061v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0908.4061v2", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.CG", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.CG", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0908.4061v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0908.4061v2", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "Semi-algebraic Range Reporting and Emptiness Searching with\nApplications\u2217\n\narXiv:0908.4061v2 [cs.CG] 31 Aug 2009\n\nMicha Sharir\u2020\n\nHayim Shaul\u2021\n\nOctober 28, 2018\n\nAbstract\nIn a typical range emptiness searching (resp., reporting) problem, we are given a set P of\nn points in Rd , and wish to preprocess it into a data structure that supports efficient range\nemptiness (resp., reporting) queries, in which we specify a range \u03c3, which, in general, is a semialgebraic set in Rd of constant description complexity, and wish to determine whether P \u2229\u03c3 = \u2205,\nor to report all the points in P \u2229 \u03c3. Range emptiness searching and reporting arise in many\napplications, and have been treated by Matou\u0161ek [33] in the special case where the ranges are\nhalfspaces bounded by hyperplanes. As shown in [33], the two problems are closely related,\nand have solutions (for the case of halfspaces) with similar performance bounds. In this paper\nwe extend the analysis to general semi-algebraic ranges, and show how to adapt Matou\u0161ek's\ntechnique, without the need to linearize the ranges into a higher-dimensional space. This yields\nmore efficient solutions to several useful problems, and we demonstrate the new technique in\nfour applications, with the following results:\n(i) An algorithm for ray shooting amid balls in R3 , which uses O(n) storage and O\u2217 (n) preprocessing,1 and answers a query in O\u2217 (n2/3 ) time, improving the previous bound of O\u2217 (n3/4 ).\n(ii) An algorithm that preprocesses, in O\u2217 (n) time, a set P of n points in R3 into a data\nstructure with O(n) storage, so that, for any query line l (or, for that matter, any simply-shaped\nconvex set), the point of P farthest from l can be computed in O\u2217 (n1/2 ) time. This in turn\nyields an algorithm that computes the largest-area triangle spanned by P in time O\u2217 (n26/11 ),\nas well as nontrivial algorithms for computing the largest-perimeter or largest-height triangle\nspanned by P .\n(iii) An algorithm that preprocesses, in O\u2217 (n) time, a set P of n points in R2 into a data\nstructure with O(n) storage, so that, for any query \u03b1-fat triangle \u2206, we can determine, in O\u2217 (1)\ntime, whether \u2206 \u2229 P is empty. Alternatively, we can report in O\u2217 (1) + O(k) time, the points of\n\u2206 \u2229 P , where k = |\u2206 \u2229 P |.\n(iv) An algorithm that preprocesses, in O\u2217 (n) time, a set P of n points in R2 into a data\nstructure with O(n) storage, so that, given any query semidisk c, or a circular cap larger than\na semidisk, we can determine, in O\u2217 (1) time, whether c \u2229 P is empty, or report the k points in\nc \u2229 P in O\u2217 (1) + O(k) time.\n\u2217\n\nThis work was supported by Grant 155/05 from the Israel Science Fund, by NSF Grants CCF-05-14079 and CCF08-30272, by a grant from the U.S.-Israel Binational Science Foundation, and by the Hermann Minkowski\u2013MINERVA\nCenter for Geometry at Tel Aviv University. This work is part of the second author's Ph.D. dissertation, prepared\nunder the supervision of the first author at Tel Aviv University.\n\u2020\nSchool of Computer Science, Tel Aviv University, Tel Aviv 69978, Israel and Courant Institute of Mathematical\nSciences, New York University, New York, NY 10012, USA. michas@post.tau.ac.il\n\u2021\nSchool of Computer Science, Tel Aviv University, Tel Aviv 69978, Israel. hayim@post.tau.ac.il\n1\nWe use the notation O\u2217 (n\u03b3 ) to mean an upper bound of the form C(\u03b5)n\u03b3+\u03b5 , which holds for any \u03b5 > 0, where\nC(\u03b5) is a constant that depends on \u03b5.\n\n1\n\n\fAdapting the recent techniques of [12, 13, 14], we can turn our solutions into efficient algorithms for approximate range counting (with small relative error) for the cases mentioned\nabove.\nOur technique is closely related to the notions of nearest- or farthest-neighbor generalized\nVoronoi diagrams, and of the union or intersection of geometric objects, where sharper bounds\non the combinatorial complexity of these structures yield faster range emptiness searching or\nreporting algorithms.\n\n2\n\n\f1\n\nIntroduction\n\nThe main technical contribution of this paper is an extension of Matou\u0161ek's range emptiness and\nreporting data structures [33] (see also [7] for a dynamic version of the problem) to the case of\ngeneral semi-algebraic ranges.\nRay shooting amid balls. A motivating application of this study is ray shooting amid balls in\nR3 , where we want to construct a data structure of linear size with near-linear preprocessing, which\nsupports ray shooting queries in sublinear time. Typically, in problems of this sort, the bound on\nthe query time is some fractional power of n, the number of objects, and the goal is to make the\nexponent as small as possible. For example, ray shooting amid a collection of n arbitrary triangles\ncan be performed in O\u2217 (n3/4 ) time (with linear storage) [6]. Better solutions are known for various\nspecial cases. For example, the authors have shown [41] that the query time can be improved to\nO\u2217 (n2/3 ), when the triangles are all fat, or are all stabbed by a common line.\nAt the other end of the spectrum, one is interested in ray shooting algorithms and data structures\nwhere a ray shooting query can be performed in logarithmic or polylogarithmic time (or even O(n\u03b5 )\ntime, for any \u03b5 > 0; this is O\u2217 (1) in our shorthand notation). In this case, the goal is to reduce\nthe storage (and preprocessing) requirements as much as possible. For example, for arbitrary\ntriangles (and even for the special case of fat triangles), the best known bound for the storage\nrequirement (with logarithmic query time) is O\u2217 (n4 ) [1, 6]. For balls, Mohaban and Sharir [37],\ngave an algorithm with O\u2217 (n3 ) storage and O\u2217 (1) query time. However, when only linear storage\nis used, the previously best known query time (for balls) is O \u2217 (n3/4 ) (as in the case of general\ntriangles). In this paper we show, as an application of our general range emptiness machinery, that\nthis can be improved to O \u2217 (n2/3 ) time.\nWhen answering a ray-shooting query for a set S of input objects, one generally reduces the\nproblem to that of answering segment emptiness queries, following the parametric searching scheme\nproposed by Agarwal and Matou\u0161ek [5] (see also Megiddo [36] for the original underlying technique).\nA standard way of performing the latter kind of queries is to switch to a dual parametric space,\nwhere each object in the input set is represented by a point. A segment e in R3 is mapped to a surface\n\u03c3e , which is the locus of all the points representing the objects that e touches (without penetrating\ninto their interior). Usually, \u03c3e partitions the dual space into two portions, one, \u03c3e+ , consisting\nof points representing objects whose interior is intersected by e, and the other, \u03c3e\u2212 , consisting of\npoints representing objects that e avoids. The segment-emptiness problem thus transforms into a\nrange-emptiness query: Does \u03c3e+ contain any point representing an input object?\nRange reporting and emptiness searching. Range-emptiness queries of this kind have been\nstudied by Matou\u0161ek [33] (see also Agarwal and Matou\u0161ek [7]), but only for the case where the\nranges are halfspaces bounded by hyperplanes. For this case, Matou\u0161ek has established a so-called\nshallow-cutting lemma, that shows the existence of a (1/s)-cutting2 that covers the complement of\nthe union of any m given halfspace ranges, whose size is significantly smaller than the size of a\n(1/s)-cutting that covers the entire space. This lemma provides the basic tool for partitioning a\npoint set P , in the style of [34], so that shallow hyperplanes (those containing at most n/r points of\nP below them, say, for some given parameter r) cross only a small number of cells of the partition\n2\n\nThis is a partition of space (or a portion thereof) into a small number of simply-shaped cells, each of which is\ncrossed by at most n/s of the n given surfaces (hyperplanes in this case). See below for more details.\n\n1\n\n\f(see below for more details). This in turn yields a data structure, known as a shallow partition\ntree, that stores a recursive partitioning of P , which enables us to answer more efficiently halfspace\nrange reporting queries for shallow hyperplanes, and thus also halfspace range emptiness queries.\nUsing this approach, the query time (for emptiness) improves from the general halfspace range\nsearching query cost of O \u2217 (n1\u22121/d ) to O\u2217 (n1\u22121/\u230ad/2\u230b ). Reporting takes O \u2217 (n1\u22121/\u230ad/2\u230b + k), where k\nis the output size.\nConsequently, one way of applying this machinery for more general semi-algebraic ranges is to\n\"lift\" the set of points and the ranges into a higher-dimensional space by means of an appropriate linearization, as in [6], and then apply the above machinery. (For this, one needs to assume\nthat the given ranges have constant description complexity, meaning that each range is a Boolean\ncombination of a constant number of polynomial equalities and inequalities of constant maximum\ndegree. However, if the space in which the ranges are linearized has high dimension, the resulting\nrange reporting or emptiness queries become significantly less efficient. Moreover, in many applications, the ranges are Boolean combinations of polynomial (equalities and) inequalities, which\ncreates additional difficulties in linearizing the ranges, resulting in even worse running time.\nAn alternative technique is to give up linearization, and instead work in the original space. As\nfollows from the machinery of [33] (and further elaborated later in this paper), this requires, as a\nmajor tool, the (existence and) construction of a decomposition of the complement of the union\nof m given ranges (in the case of segment emptiness, these are the ranges \u03c3e+ , for an appropriate\ncollection of segments e), into a small number of \"elementary cells\" (in the terminology of [6]-\nsee also below). Here we face, especially in higher dimensions, a scarcity of sharp bounds on the\ncomplexity of the union itself, to begin with, and then on the complexity of a decomposition of\nits complement. Often, the best one can do is to decompose the entire arrangement of the given\nranges, which results in too many elementary cells, and consequently in an algorithm with poor\nperformance.\nTo recap, in the key technical step in answering general semi-algebraic range reporting or emptiness queries, the best current approaches are either to construct a cutting of the entire arrangement\nof the range-bounding surfaces in the original space, or to construct a shallow cutting in another\nhigher-dimensional space into which the ranges can be linearized. For many natural problems\n(including the segment-emptiness problem), both approaches yield relatively poor performance.\nAs we will shortly note, in handling general semi-algebraic ranges, we face another major\ntechnical issue, having to do with the construction of efficient test sets of ranges (in the terminology\nof [6], elaborated below). Addressing this issue is a major component of the analysis in this paper,\nand is discussed in detail later on.\nOur results. We propose a variant of the shallow-cutting machinery of [33] for the case of semialgebraic ranges, which avoids the need for linearization, and works in the original space (which,\nfor the case of ray shooting amid balls, is a 4-dimensional parametric space in which the balls are\nrepresented as points). While the machinery used by our variant is similar in principle to that in\n[33], there are several significant technical difficulties which require more careful treatment.\nMatou\u0161ek's technique [33], as well as ours, considers a finite set Q of shallow ranges (called a\ntest set), and builds a data structure which caters only for ranges in Q. Matou\u0161ek shows how to\nbuild, for any given parameter r, a set of halfspaces of size polynomial in r, which represents well all\n(n/r)-shallow ranges, in the following sense: For any simplicial partition3 \u03a0 with parameter r, let\n3\n\nBriefly, this is a partition of P into O(r) subsets of roughly equal size, each enclosed by some simplex (in the\n\n2\n\n\f\u03ba denote the maximal number of cells of \u03a0 crossed by a halfspace in Q. Then each (n/r)-shallow\nhalfspace crosses at most c\u03ba cells of \u03a0, where c is a constant that depends on the dimension.\nUnfortunately (for the present analysis), the linear nature of the ranges is crucially needed for the\nproof, which therefore fails for non-linear ranges.\nBeing a good representative of all shallow ranges, in the above sense, is only one of the requirements from a good test set Q. The other requirements are that Q be small, so that, in particular,\nit can be constructed efficiently, and that the (decomposition of the) complement of the union of\nany subset of Q have small complexity. All these properties hold for the case of halfspaces bounded\nby hyperplanes, studied in [33].\nAs it turns out, and hinted above, obtaining a \"good\" test set Q for general semi-algebraic\nranges, with the above properties, is not an easy task. We give a simple general recipe for constructing such a set Q, but it consists of more complex ranges than those in the original setup. A\nmajor problem with this recipe is that since the members of Q have a more complex shape, it becomes harder to establish good bounds on the complexity of (the decomposition of) the complement\nof the union of any subset of these generalized ranges.\nNevertheless, once a good test set has been shown to exist, and to be efficiently computable,\nit leads to a construction of an efficient elementary-cell partition with a small crossing number for\nany empty or shallow original range. Using this construction recursively, one obtains a partition\ntree, of linear size, so that any shallow original range \u03b3 visits only a small number of its nodes\n(where \u03b3 visits a node if it crosses the elementary cell enclosing the subset of that node, meaning\nthat it intersects this cell but does not fully contain it), which in turn leads to an efficient range\nreporting or emptiness-testing procedure. This part, of constructing and searching the tree, is\nalmost identical to its counterparts in the earlier works [6, 33, 34], and we will not elaborate on it\nhere, focusing only on the technicalities in the construction of a single \"shallow\" elementary-cell\npartition.\nDeveloping all this machinery, and then putting it into action, we obtain efficient data structures\nfor the following applications, improving previous results or obtaining the first nontrivial solutions.\nThese instances are:\nRay shooting amid balls in 3-space. Given a set S of n balls in R3 , we construct, in O\u2217 (n)\ntime, a data structure of O(n) size, which can determine, for a given query segment e, whether\ne is empty (avoids all balls), in O \u2217 (n2/3 ) time. Plugging this data structure into the parametric\nsearching technique of Agarwal and Matou\u0161ek [5], we obtain a data structure for answering ray\nshooting queries amid the balls of S, which has similar performance bounds.\nWe represent balls in 3-space as points in R4 , where a ball with center (a, b, c) and radius r is\nmapped to the point (a, b, c, r), and each object K \u2282 R3 is mapped to the surface \u03c3K , which is the\nlocus of all (points representing) balls tangent to K (i.e., balls that touch K, but do not penetrate\n+\nconsisting of\ninto its interior). In this case, the range of an object K is the upper halfspace \u03c3K\nall points lying above \u03c3K (representing balls that intersect K). The complement of the union of a\nsubfamily of these ranges is the region below the lower envelope of the corresponding surfaces4 \u03c3K .\nThe minimization diagram of this envelope is the 3-dimensional Euclidean Voronoi diagram of the\ncorresponding set of objects. Thus we reveal (what we regard as) a somewhat surprising connection\nlinear case) or some elementary cell (in the general semi-algebraic case); see [6] and Section 3 below.\n4\nIn our solution, we will use a test set of objects K which are considerably more complex than just lines or\nsegments, but are nevertheless still of constant description complexity.\n\n3\n\n\fbetween the problem of ray shooting amid balls and the problem of analyzing the complexity of\nEuclidean Voronoi diagrams of (simply-shaped) objects in 3-space.\nFarthest point from a line (or from any convex set) in R3 . Let P be a set of n points\nin R3 . We wish to preprocess P into a data structure of size O(n), so that, for any query line l,\nwe can efficiently find the point of P farthest from l. This is a useful routine for approximating\npolygonal paths in three dimensions; see [21].\nAs in the ray shooting problem, we can reduce such a query to a range emptiness query of\nthe form: Given a cylinder C, does it contain all the points of P ? (That is, is the complement of\nthe cylinder empty?) We prefer to regard this as an instance of the complementary range fullness\nproblem, which seeks to determine whether a query range is full (i.e., contains all the input points).\nOur machinery can handle this problem. In fact, we can solve the range fullness problem for\nany family of convex ranges in 3-space, of constant description complexity. Our solution requires\nO(n) storage and near linear preprocessing, and answers a range fullness query in O \u2217 (n1/2 ) time,\nimproving the query time O \u2217 (n2/3 ) given by Agarwal and Matou\u0161ek [6].\nWe then apply this result to solve the problem of finding the largest-area triangle spanned by\na set of n points in 3-space. The resulting algorithm requires O\u2217 (n26/11 ) time, which improves a\nprevious bound of O\u2217 (n13/5 ) due to Daescu and Serfling [21]. We also adapt our machinery to\ncompute efficiently the largest-perimeter triangle and the largest-height triangle spanned by such\na point set.\nIn both this, and the preceding ray-shooting applications, we use the general, more abstract\nrecipe for constructing good test sets.\nFat triangle and circular cap range emptiness searching and reporting. Finally, we\nconsider two planar instances of the range emptiness and reporting problems, in which we are given\na planar set P of n points, and the ranges are either \u03b1-fat triangles or sufficiently large circular\ncaps (say, larger than a semidisk). The general technique of Agarwal and Matou\u0161ek [6] yields, for\nany class of planar ranges with constant description complexity, a data structure with near linear\npreprocessing and linear storage, which answers such queries in time O \u2217 (n1/2 ) (for emptiness) or\nO\u2217 (n1/2 )+O(k) (for reporting). We improve the query time to O\u2217 (1) and O\u2217 (1)+O(k), respectively,\nin both cases.\nIn these planar applications, we abandon the general recipe, and construct good test sets in\nan ad-hoc (and simpler) manner. For \u03b1-fat triangles (i.e., triangles with the property that each of\ntheir angles is at least \u03b1, which is some fixed positive constant), the test set consists of \"canonical\"\n(\u03b1/2)-fat triangles, and the fast query performance is a consequence of the fact that the complement\nof the union of m \u03b1\u2032 -fat triangles is O(m log log m), for any constant \u03b1\u2032 > 0 [35]. It is quite likely\nthat our machinery can also be applied to other classes of fat objects in the plane, for which nearlinear bounds on the complexity of their union are known [22, 24, 25, 26]. However, constructing\na good test set for each of these classes is not an obvious step. We leave these extensions as open\nproblems for further research.\nFor circular caps, the motivation for range emptiness searching comes from the problem of\nfinding, for a query consisting of a point q and a line l, the point of P which lies above l and\nis nearest to q (we only consider the case where q lies on or above l). Such a procedure was\nconsidered in [20]. Using parametric searching, the latter problem can be reduced to that of testing\nfor emptiness of a circular cap centered at q and bounded by l (the assumption on the location of\n4\n\n\fq ensures that this cap is at least a semidisk). Here too we manage to construct a test set which\nconsists of (possibly slightly smaller) circular caps, and we exploit the fact that the complexity of\nthe union of m such caps is O \u2217 (m), as long as the caps are not too small (relative to their bounding\ncircles), to obtain the fast performance stated above.\nApproximate range counting. Adapting the recent techniques of [12, 13, 14], we can turn our\nsolutions into efficient algorithms for approximate range counting (with small relative error) for\nthe cases mentioned above. That is, for a specified \u03b5 > 0, we can preprocess the input point set P\ninto a data structure which can efficiently compute, for any query range \u03b3, an approximate count\nt\u03b3 , satisfying (1 \u2212 \u03b5)|P \u2229 \u03b3| \u2264 t\u03b3 \u2264 (1 + \u03b5)|P \u2229 \u03b3|. The performance of the resulting algorithms is\ndetailed in Section 7. As observed in the papers just cited, approximate range counting is closely\nrelated to the range emptiness problem, which in fact is a special case of the former problem. The\nalgorithm in [12] performs approximate range counting by a randomized binary search over |P \u2229 \u03b3|,\nwhere the search is guided by repeated calls to an emptiness testing routine on various random\nsamples of P . This algorithm uses emptiness searching as a black box, so, plugging our solutions for\nthis latter problem into their algorithm, we obtain efficient approximate range counting algorithms\nfor the ranges considered in this paper. See Section 7 for details.\nRelated work. Our study was originally motivated by work by Daescu and others [20, 21] on\npath approximations and related problems. In these applications one needs to compute efficiently\nthe vertex of a subpath which is farthest from a given segment (connecting the two endpoints of\nthe subpath). These works used the standard range searching machinery of [6], and motivated us\nto look for faster implementations.\nThe general range emptiness (or reporting) problem was studied by the authors a few years\nago [42]. In this earlier version, we did not manage to handle properly the issue of constructing a\ngood test set, so the results presented there are somewhat incomplete. The present paper builds\nupon the previous one, but provides a thorough analysis of this aspect of the problem, and consequently obtains a complete and efficient solution to the problems listed above, and lays down the\nfoundation for obtaining efficient solutions to many other similar problems-we believe indeed that\nthe applications given here only scratch the surface of the wealth of potential future applications\nof this sort.\n\n2\n\nPreliminaries and notations\n\nWe begin with a brief review of the main concepts and notations used in our analysis.\nRange spaces. A range space is a pair (X, \u0393), where X is a set and \u0393 \u2286 2X is a collection of\nsubsets of X, called ranges. In our applications, X = Rd , and \u0393 is a collection of semi-algebraic\nsets of some specific type, each having constant description complexity. That is, each set in \u0393 is\ngiven as a Boolean combination of a constant number of polynomial equalities and inequalities of\nconstant maximum degree. To simplify the analysis, we assume5 , as in [6], that all the ranges in\n\u0393 are defined by a single Boolean combination, so that each polynomial p in this combination is\n(d + t)-variate, and each range \u03b3 has t degrees of freedom, so that if we substitute the values of\n5\n\nThis assumption is not essential, and is only made to simplify the presentation.\n\n5\n\n\fthese t parameters into the last t variables of each p, the resulting Boolean combination defines\nthe range \u03b3. This allows us to represent the ranges of \u0393 as points in an appropriate t-dimensional\nparametric space.\nUnder these special assumptions, the range space (X, \u0393) has finite VC-dimension, a property\nformally defined in [27]. Informally, it ensures that, for any finite subset P of X, the number of\ndistinct ranges of P is O(|P |\u03b4 ), where \u03b4 is the VC-dimension.\nAs a matter of fact, we will consider range spaces of the form (P, \u0393P ), where P \u2282 Rd is a finite\npoint set, and each range in \u0393P is the intersection of P with a range in \u0393.\nCuttings. Given a finite collection \u0393 of n semi-algebraic ranges in Rd , as above, and a parameter\nr < n, a (1/r)-cutting for \u0393 is a partition \u039e of Rd (or of some portion of Rd ) into a finite number of\nrelatively open cells of dimensions 0, 1, . . . , d, so that each cell is crossed by at most n/r ranges of\n\u0393, where a range \u03b3 \u2208 \u0393 is said to cross a cell \u03c3 if \u03b3 \u2229 \u03c3 6= \u2205, but \u03b3 does not fully contain \u03c3. We will\nalso need to consider weighted (1/r)-cuttings, where each range \u03b3 \u2208 \u0393 has a positive weight\nP w(\u03b3),\nand each cell of \u039e is crossed by ranges whose total weight is at most W/r, where W = \u03b3\u2208\u0393 w(\u03b3)\nis the overall weight of all the ranges in \u0393.\nShallow ranges.\n|\u03b3 \u2229 P | \u2264 k.\n\nA range \u03b3 \u2208 \u0393 is called k-shallow with respect to a set P of points in Rd , if\n\nElementary cells. Define, as in [6], an elementary cell in Rd to be a connected relatively open\nsemi-algebraic set of some dimension k \u2264 d, which is homeomorphic to a ball and has constant\ndescription complexity. As above, we assume, for simplicity, that the elementary cells are defined\nby a single Boolean combination involving t free variables, and each cell is determined by fixing the\nvalues of these t parameters.\nElementary cell partition. Let P be a set of n points in Rd . An elementary cell partition of\nP is a collection \u03a0 = {(P1 , s1 ), . . . , (Pm , sm )}, for some integer m, such that (i) {P1 , . . . , Pm } is a\npartition of P (into pairwise disjoint subsets), and (ii) each si is an elementary cell that contains\nthe respective subset Pi . In general, the cells si need not be disjoint. Usually, one also specifies a\nparameter r \u2264 n, and requires that n/r \u2264 |Pi | \u2264 2n/r for each i, so m = O(r).\nThe function \u03b6(r). In Lemma 3.1 and Theorem 3.2, we use a function \u03b6(r) that bounds the\nnumber of elementary cells in a decomposition of the complement of the union of any r ranges of\n\u0393. We assume that \u03b6(r) is \"well behaved\", in the sense that for each c > 0 there exists c\u2032 > 0 such\nthat \u03b6(cr) \u2264 c\u2032 \u03b6(r) for every r. We also assume that \u03b6(r) = \u03a9(r).\n(\u03bd, \u03b1)-samples and shallow \u03b5-nets. We recall the result of Li et al. [32], and adapt it, similar\nto the recent observations in [28], to obtain a useful extension of the notion of \u03b5-nets.\nLet (X, R) be a range space of finite VC-dimension \u03b4, and let 0 < \u03b1, \u03bd < 1 be two given\nparameters. Consider the distance function\nd\u03bd (r, s) =\n\n|r \u2212 s|\n,\nr+s+\u03bd\n6\n\nfor r, s \u2265 0.\n\n\fA subset N \u2286 X is called a (\u03bd, \u03b1)-sample if for each R \u2208 R we have\n\u0013\n\u0012\n|X \u2229 R| |N \u2229 R|\n,\nd\u03bd\n< \u03b1.\n|X|\n|N |\nTheorem 2.1 (Li et al. [32]) A random sample N of\n\u0012\n\u0013\u0013\n\u0012\n1\n1\n1\n\u03b4 log + log\nO\n\u03b12 \u03bd\n\u03bd\nq\nelements of X is a (\u03bd, \u03b1)-sample with probability at least 1 \u2212 q.\nHar-Peled and Sharir [28] show that, by appropriately choosing \u03b1 and \u03bd, various standard\nconstructs, such as \u03b5-nets and \u03b5-approximations, are special cases of (\u03bd, \u03b1)-samples. Here we follow\na similar approach, and show the existence of small-size shallow \u03b5-nets, a new notation introduced\nin this paper.\nLet us first define this notion. Let (X, R) be a range space of finite VC-dimension \u03b4, and let\n0 < \u03b5 < 1 be a given parameter. A subset N \u2286 X is a shallow \u03b5-net if it satisfies the following two\nproperties, for some absolute constant c.\n(i) For each R \u2208 R and for any parameter t \u2265 0, if |N \u2229 R| \u2264 t log\n\n1\n\u03b5\n\nthen |X \u2229 R| \u2264 c(t + 1)\u03b5|X|.\n\n(ii) For each R \u2208 R and for any parameter t \u2265 0, if |X \u2229 R| \u2264 t\u03b5|X| then |N \u2229 R| \u2264 c(t + 1) log 1\u03b5 .\nNote the difference between shallow and standard \u03b5-nets: Property (i) (with t = 0) implies that\na shallow \u03b5-net is also a standard \u03b5-net (possibly with a recalibration of \u03b5). Property (ii) has no\nparallel in the case of standard \u03b5-nets \u2013 there is no guarantee how a standard net interacts with\nsmall ranges.\nTheorem 2.2 A random sample N of\n\u0013\u0013\n\u0012 \u0012\n1\n1\n1\n\u03b4 log + log\nO\n\u03b5\n\u03b5\nq\nelements of X is a shallow \u03b5-net with probability at least 1 \u2212 q.\nProof: Take \u03b1 = 1/2, say, and calibrate the constants in the size of N to guarantee, with probability\n1 \u2212 q, that N is an (\u03b5, 1/2)-sample. Assume that this is indeed the case. For a range R \u2208 R, put\nXR = |X \u2229 R|/|X| and NR = |N \u2229 R|/|N |. We have\nd\u03b5 (XR , NR ) =\nThat is,\n|XR \u2212 NR | <\n\n|XR \u2212 NR |\n1\n< .\nXR + NR + \u03b5\n2\n1\n(XR + NR + \u03b5),\n2\n\nor\nXR < 3NR + \u03b5,\n\nand, symmetrically,\n\nNR < 3XR + \u03b5.\n\nThis is easily seen to imply properties (i) and (ii). For (i), let R be a range for which |N \u2229R| \u2264 t log 1\u03b5 ;\nthat is, NR \u2264 \u03b2t\u03b5, for some absolute constant \u03b2 (proportional to the VC-dimension). Then\n|X \u2229 R| = |X| * XR < |X|(3NR + \u03b5) \u2264 (3\u03b2t + 1)\u03b5|X|.\n7\n\n\fFor (ii), let R be a range for which |X \u2229 R| \u2264 t\u03b5|X|; that is, XR \u2264 t\u03b5. Then\n1\n|N \u2229 R| = |N | * NR < |N |(3XR + \u03b5) \u2264 (3t + 1)\u03b5|N | \u2264 (3t + 1)\u03b3 log ,\n\u03b5\nfor another absolute constant \u03b3 (again, proportional to the VC-dimension). \u0003\n\n3\n\nSemi-algebraic range reporting or emptiness searching\n\nShallow cutting in the semi-algebraic case. We begin by extending the shallow cutting\nlemma of Matou\u0161ek [33] to the more general setting of semi-algebraic ranges. This extension is\nfairly straightforward, although it involves several technical steps that deserve to be highlighted.\nLemma 3.1 (Extended Shallow Cutting Lemma) Let \u0393 be a collection of n semi-algebraic\nranges in Rd . Assume that the complement of the union of any subset of m ranges in \u0393 can be\ndecomposed into at most \u03b6(m) elementary cells, for a well-behaved function \u03b6 as above. Then, for\nany r \u2264 n, there exists a (1/r)-cutting \u039e with the following properties:\n(i) The union of the cells of \u039e contains the complement of the union of \u0393.\n(ii) \u039e consists of O(\u03b6(r)) elementary cells.\n(iii) The complement of the union of the cells of \u039e is contained in a union of O(r) ranges in \u0393.\nSee Figure 1 for an illustration.\nProof. The proof is a fairly routine adaptation of the proof in [33]. We employ a variant of the\nmethod of Chazelle and Friedman [18] for constructing the cutting. Let \u0393\u2032 be a random sample of\nO(r) ranges of \u0393, and let E \u2032 denote the complement of the union of \u0393\u2032 . By assumption, E \u2032 can be\ndecomposed into at most O(\u03b6(r)) elementary cells. The resulting collection \u039e of these cells is such\nthat their union clearly contains the complement of the union of \u0393. Moreover, the complement of\nthe union of \u039e is the union of the O(r) ranges of \u0393\u2032 . Hence, \u039e satisfies all three conditions (i)\u2013(iii),\nbut it may fail to be a (1/r)-cutting.\nThis latter property is enforced as in [18], by further decomposing each cell \u03c4 of \u039e that is\ncrossed by more than n/r ranges of \u0393, using additional subsamples from the surfaces that cross \u03c4 .\nSpecifically, for each cell \u03c4 of \u039e, let \u0393\u03c4 denote the subset of those ranges in \u0393 that cross \u03c4 , and\nput \u03be\u03c4 = |\u0393\u03c4 |r/n. If \u03be\u03c4 > 1, we sample q = O(\u03be\u03c4 log \u03be\u03c4 ) ranges from \u0393\u03c4 , construct the complement\nof the union of these ranges, decompose it into at most \u03b6(q) elementary cells, and clip them to\nwithin \u03c4 . The resulting collection \u039e\u2032 of subcells, over all cells \u03c4 of the original \u039e, clearly satisfies\n(i). The analysis of [18] (see also [8]) establishes an exponential decay property on the number of\ncells of \u039e that are crossed by more than \u03ben/r ranges, as a function of \u03be. Specifically, as in [8],\nthe expected number of such cells is O(2\u2212\u03be E(\u03b6(|\u0393\u2032\u2032 |)), where \u0393\u2032\u2032 is another random sample of \u0393,\nr\n. This property implies, as usual [18], that\nwhere each member of \u0393 is chosen with probability n\u03be\n\u2032\n\u039e is (with high probability) a (1/r)-cutting, and it also implies that the size of \u039e\u2032 is still O(\u03b6(r)),\nassuming \u03b6 to be well behaved. Since we have only refined the original cells of \u039e, the number of\nranges that cover the complement of the union of the final cells is still O(r). \u0003\nA special case that arises frequently is where each range in \u0393 is an upper (or lower) halfspace\nbounded by the graph of some continuous (d \u2212 1)-variate function. In this case the complement K\nof the union of r ranges is the portion of space that lies below the lower envelope of the bounding\ngraphs. In this case, it suffices to decompose the graph of the lower envelope itself into at most\n8\n\n\fFigure 1: A planar point set and a collection \u0393 of upper halfplanes. A random sample of the\nlines bounding these ranes is shown in bold, with a decomposition of the region below their lower\nenvelope, which contains the region below the lower envelope of all the bounding lines, drawn\nshaded.\n\n\u03b6(r) elementary cells. Indeed, having done that, we can extend each cell \u03c4 within the envelope into\nthe cell \u03c4 \u2212 consisting of all points that lie vertically below \u03c4 . The new cells decompose K and are\nalso elementary.\nAs already discussed in the introduction, obtaining tight or nearly tight bounds for \u03b6(r) is still\na major open problem for many instances of the above setup. For example, decomposing an upper\nenvelope of r (d \u2212 1)-variate functions of constant description complexity into O\u2217 (r d\u22121 ) elementary\ncells is still open for any d \u2265 4. (This bound is best possible in the worst case, since it is the\nworst-case tight bound on the complexity of such an undecomposed envelope [40].) The cases d = 2\n(upper envelope of curves in the plane) and d = 3 (upper envelope of 2-dimensional surfaces in\n3-space) are easy. In these cases \u03b6(r) is proportional to the complexity of the envelope, which in\nthe worst case is near-linear for d = 2 and near-quadratic for d = 3 [40]. In higher dimensions, the\nonly general-purpose bound known to date is the upper bound obtained by computing the vertical\ndecomposition of the entire arrangement of the given surfaces, and extracting from it the relevant\ncells that lie on or above the envelope. In particular, for d = 4 the bound is \u03b6(r) = O\u2217 (r 4 ), as\nfollows from the results of [30]. This leaves a gap of about a factor of r between this bound and the\nbound O \u2217 (r 3 ) on the complexity of the undecomposed envelope. Of course, in certain special cases,\nmost notably the case of hyperplanes, as studied in [33], both the envelope and its decomposition\nhave (considerably) smaller complexity.\nThe situation with the complexity of the union of geometric objects is even worse. While\nconsiderable progress was recently made on many special cases in two and three dimensions (see\n[9] for a recent comprehensive survey), there are only very few sharp bounds on the complexity of\nunions in higher dimensions. Worse still, even when a sharp bound on the complexity of the union\nis known, obtaining comparable bounds on the complexity of a decomposition of the complement\nof the union is a much harder problem (in d \u2265 3 dimensions). As an example, the union of n\ncongruent infinite cylinders in 3-space is known to have near-quadratic complexity [10], but it is\n\n9\n\n\fstill an open problem whether its complement can be decomposed into a near-quadratic number of\nelementary cells.\nPartition theorem for shallow semi-algebraic ranges. We next apply the new shallow cutting lemma to construct an elementary cell partition of a given input point set P , with respect to\na specific set Q of ranges. This is done in a fairly similar way to that in [6] (see also [33, 34]). A\nmajor difference in handling the semi-algebraic case is the construction of a set Q of ranges that will\nbe (a) small enough, and (b) representative of all shallow (or empty) ranges, in a sense discussed\nin detail below. The method given in [6] does not work in the general semi-algebraic case, and\ndifferent, sometimes ad-hoc approaches need to be taken.\nThe following theorem summarizes the main part of the construction (except for the construction\nof Q).\nTheorem 3.2 (Extended Partition Theorem) Let P be a set of n points in Rd , let \u0393 be a\nfamily of semi-algebraic ranges of constant description complexity, and let r be fixed. Let Q be another finite collection (not necessarily a subset of \u0393) of semi-algebraic ranges of constant description\ncomplexity with the following properties: (i) The ranges in Q are all (n/r)-shallow. (ii) The complement of the union of any m ranges of Q can be decomposed into at most \u03b6(m) elementary cells,\nfor any m. (iii) Any (n/r)-shallow range \u03b3 \u2208 \u0393 can be covered by the union of at most \u03b4 ranges of\nQ, where \u03b4 is a constant.\nThen there exists an elementary cell partition \u03a0 of P , of size O(r), into subsets of size roughly\nn/r, such that the crossing number of any (n/r)-shallow range in \u0393 with the cells of \u03a0 is either\nO(r/\u03b6 \u22121 (r)+log r log |Q|), if \u03b6(r) = \u03a9(r 1+\u03b5 ), for any fixed \u03b5 > 0, or O(r log r/\u03b6 \u22121 (r)+log r log |Q|),\notherwise.\nthe proof, which, again, is similar to those in [6, 33, 34], proceeds through the following steps.\nWe first have:\nLemma 3.3 Let P be a set of n points in Rd , and r < n a parameter. Let Q be a set of (n/r)shallow ranges, with the property that the complement of the union of any subset of m ranges of\nQ can be decomposed into at most \u03b6(m) elementary cells, for any m. Then there exists a subset\nP \u2032 \u2286 P of at least n/2 points and an elementary cell partition \u03a0 = {(P1 , s1 ), . . . , (Pm , sm )} for P \u2032\nwith |Pi | = \u230an/r\u230b for all i, such that each range of Q crosses at most O(r/\u03b6 \u22121 (r) + log |Q|) cells si\nof \u03a0.\nProof. We will inductively construct disjoint sets P1 , . . . , Pm \u2282 P of size n/r and elementary cells\ns1 , . . . , sm such that Pi \u2286 si for each i. The construction terminates when S\n|P1 \u222a * * * \u222a Pm | \u2265 n/2.\nSuppose that P1 , . . . , Pi\u22121 have already been constructed, and set Pi\u2032 := P \\ j<i Pj . We construct\nPi as follows: For a range \u03c3 \u2208 Q, let \u03bai (\u03c3) denote the number of cells among s1 , . . . , si\u22121 crossed\nby \u03c3. We define a weighted collection (Q, wi ) of ranges, P\nso that each range \u03c3 \u2208 Q appears with\nweight (or multiplicity) wi (\u03c3) = 2\u03bai (\u03c3) . We put wi (Q) = \u03c3\u2208Q wi (\u03c3). By Lemma 3.1 and by our\nassumption that the function \u03b6(r) is well behaved, there exists a (1/t)-cutting \u039ei for the weighted\ncollection (Q, wi ) of size at most r/4, for an appropriate choice of t = \u0398(\u03b6 \u22121 (r)), with the following\nproperties: The union of \u039ei contains the complement of the union of Q, and the complement of the\nunion of \u039ei is contained in the union of O(t) ranges of Q. Since all these ranges are (n/r)-shallow,\nthe number of points of P not in the union of \u039ei is at most O(t) * (n/r) = n * O(\u03b6 \u22121 (r)/r), and\nour assumptions on \u03b6(r) imply that this is smaller than n/4, if we choose t appropriately. Since we\n10\n\n\fassume that |Pi\u2032 | \u2265 n/2, it follows that at least n/4 points of Pi\u2032 lie in the union of the at most r/4\ncells of \u039ei . By the pigeonhole principle, there is a cell si of \u039ei containing at least n/r points of Pi\u2032 .\nWe take Pi to be some subset of Pi\u2032 \u2229 si of size exactly n/r, and make si the cell in the partition\nwhich contains Pi .\nWe next establish the asserted bound on the crossing numbers between the ranges of Q and the\nelementary cells s1 , . . . , sm , in the following standard manner. The final weight wm (\u03c3) of a range\n\u03c3 \u2208 Q with crossing number \u03ba (with respect to the final partition) is 2\u03ba . On the other hand, each\nnewly added cell si is crossed by ranges of Q of total weight O(wi (Q)/\u03b6 \u22121 (r)), because si is an\nelementary cell of the corresponding weighted (1/t)-cutting \u039ei . The weight of each of these crossing\nranges is doubled at the i-th step, and the weight of all the other ranges remains unchanged. Thus\nwi+1 (Q) \u2264 wi (Q)(1 + O(1/\u03b6 \u22121 (r))). Hence, for each range \u03c3 \u2208 Q we have\n\u0012\n\nwm (\u03c3) \u2264 wm (Q) \u2264 |Q| 1 + O\n\n\u0012\n\n1\n\u22121\n\u03b6 (r)\n\n\u0013\u0013m\n\n\u0012\n\n\u2264 |Q| 1 + O\n\n\u0012\n\n1\n\u22121\n\u03b6 (r)\n\n\u0013\u0013O(r)\n\n\u2264 |Q|eO(r/\u03b6\n\n\u22121 (r))\n\n,\n\nand thus \u03ba = log wm (\u03c3) = O(r/\u03b6 \u22121 (r) + log |Q|). \u0003\nDiscussion. The limitation of Lemma 3.3 is that the bound that it derives (a) applies only\nto ranges in Q, and (b) includes the term log |Q|. An ingenious component of the analysis in [33]\novercomes both problems, by choosing a test set Q of ranges whose size is only polynomial in r (and,\nin particular, is independent of n), which is nevertheless sufficiently representative of all shallow\nranges, in the sense that the crossing number of any (n/r)-shallow range is O(max{\u03ba(\u03c3) | \u03c3 \u2208 Q}).\nThis implies that Lemma 3.3 holds for all shallow ranges, with the stronger bound which does not\ninvolve log |Q|.\nUnfortunately, the technique of [33] does not extend to the case of semi-algebraic ranges, as it\ncrucially relies on the linearity of the ranges.6 The following lemma gives a sufficient condition for\na test set Q to be representative of the relevant shallow ranges, in the sense that Q satisfies the\nassumptions made in Theorem 3.2. That is:\nLemma 3.4 Let P be a set of n points in Rd , and let \u0393 be a family of semi-algebraic ranges with\nconstant description complexity. Consider an elementary-cell partition \u03a0 = {(P1 , s1 ), . . . , (Pr , sr )}\nof P such that |Pi | = n/r for each i. Let Q be a finite set of (n/r)-shallow ranges (not necessarily\nranges of \u0393), so that the maximal crossing number of a range q \u2208 Q with respect to \u03a0 is \u03ba. Then,\nfor any range \u03b3 \u2208 \u0393 which is contained in the union of at most \u03b4 ranges of Q (for some constant\n\u03b4), the crossing number of \u03b3 is at most (\u03ba + 1)\u03b4.\nProof. Let \u03b3 \u2208 \u0393 be a range for which there exist \u03b4 ranges q1 , . . . , q\u03b4 of Q such that \u03b3 \u2286 q1 \u222a * * * \u222a q\u03b4 .\nThen, if \u03b3 crosses a cell si of \u03a0, then at least one of the covering ranges qj must either cross si or\nfully contain si . The number of cells of \u03a0 that can be crossed by any single qj is at most \u03ba, and\neach qj can fully contain at most one cell of \u03a0 (because qj is (n/r)-shallow).7 Hence, the overall\nnumber of cells of \u03a0 that \u03b3 can cross is at most (\u03ba + 1)\u03b4, as asserted. \u0003\n6\n\nIt uses point-hyperplane duality, and exploits the fact that a halfspace (bounded by a hyperplane) intersects a\nsimplex if and only if it contains a vertex of the simplex, which is false in the general semi-algebraic case.\n7\nBy choosing a slightly smaller value for r in the construction of the partition, we can even rule out the possibility\nthat a range qj fully contains a cell of \u03a0. This however has no effect on the asymptotic bounds that the analysis\nderives.\n\n11\n\n\fProof of Theorem 3.2. Apply Lemma 3.3 to the input set P0 = P , with parameter r0 = r.\nThis yields an elementary-cell partition \u03a00 for (at least) half of the points of P0 , which satisfies the\nproperties of that lemma. Let P1 denote the set of the remaining points of P0 , and set r1 = r0 /2.\nApply Lemma 3.3 again to P1 with parameter r1 , obtaining an elementary cell partition \u03a01 for (at\nleast) half of the points of P1 . We iterate this process k = O(log r) times, until the set Pk has fewer\nthan n/r points. We take \u03a0 to be the union of all the elementary-cell partitions \u03a0i formed so far,\ntogether with one large cell containing all the remaining points of Pk . The resulting elementary-cell\npartition of P consists of at most 1 + r + r/2 + r/4 + . . . \u2264 2r subsets, each of size at most n/r.\nThe crossing number of a range in Q is, by Lemma 3.3,\n!\nlog\nXr\n\u0001\n(r/2i )/\u03b6 \u22121 (r/2i ) + log |Q| .\nO\ni=1\n\nOur assumptions on \u03b6 imply that if \u03b6(r) = \u03a9(r 1+\u03b5 ), for any fixed \u03b5 > 0, the first terms add up to\nO(r/\u03b6 \u22121 (r)); otherwise we can bound their sum by O(r log r/\u03b6 \u22121 (r)). Hence, by the properties of\nQ and by Lemma 3.4, the crossing number of any empty range is also O(r/\u03b6 \u22121 (r) + log |Q| log r)\nor O(r log r/\u03b6 \u22121 (r) + log |Q| log r), respectively. \u0003\nPartition trees and reporting or emptiness searching. As in the classical works on range\nsearching [6, 33, 34], we apply Theorem 3.2 recursively, and obtain a partition tree T , where each\nnode v of T stores a subset Pv of P and an elementary cell \u03c3v enclosing Pv . The children of a node\nv are obtained from an elementary cell partition of Pv -each of them stores one of the resulting\nsubsets of Pv and its enclosing cell. At the leaves, the size of the subset that is stored is O(r).\nTesting a range \u03b3 for emptiness is done by searching with \u03b3 in T . At each visited node v, where\n\u03b3 \u2229 \u03c3v 6= \u2205, we test whether \u03b3 \u2287 \u03c3v , in which case \u03b3 is not empty. Otherwise, we find the children\nof v whose cells are intersected by \u03b3. If there are too many of them we know that \u03b3 is not empty.\nOtherwise, we recurse at each child.\nReporting is performed in a similar manner. If \u03c3v \u2286 \u03b3 we output all of \u03c3v . Otherwise, we find\nthe children of v whose cells are intersected by \u03b3. If there are too many of them we know that \u03b3 is\nnot (nv /r)-shallow (with respect to Pv ), so, if r is a constant, we can afford to check every element\nof Pv for containment in \u03b3, and output those points that do lie in \u03b3. If there are not too many\nchildren, we recurse in each of them.\nThe efficiency of the search depends on the function \u03b6(m). If \u03b6(m) = O \u2217 (mk ) then an emptiness\nquery takes O\u2217 (n1\u22121/k ) time, and a reporting query takes O\u2217 (n1\u22121/k ) + O(t), where t is the output\nsize. Thus making \u03b6 (i.e., k) small is the main challenge in this technique.\nA general recipe for constructing good test sets. Let \u0393 be the given collection of semialgebraic ranges of constant description complexity. As above, we assume that each range \u03b3 \u2208 \u0393\nhas t degrees of freedom, for some constant parameter t, so it can be represented as a point \u03b3 \u2217 in a\nt-dimensional parametric space, which, for convenience, we denote as Rt . Each input point p \u2208 P\nis mapped to a region Kp , which is the locus of all points representing ranges which contain p.\nWe fix a parameter r \u2265 1, and choose a random sample N of ar log r points of P , where a\nis a sufficiently large constant. We form the set N \u2217 = {Kp | p \u2208 N }, construct the arrangement\nA(N \u2217 ), and let V = A\u2264k (N \u2217 ) denote the region consisting of all points contained in at most k\nranges of N \u2217 , where k = b log r and b is an absolute constant that we will fix later. We decompose\n12\n\n\fV into elementary cells, using, e.g., vertical decomposition [40]. In the worst case, we get O\u2217 (r 2t\u22124 )\nelementary cells [17, 30]. 8\nd\nS Let \u03c4\u2217 be one of these cells. We associate with \u03c4 a generalized range \u03b3\u03c4 in R , which is the union\n{\u03b3 | \u03b3 \u2208 \u03c4 }. Since \u03c4 has constant description complexity, as do the ranges of \u0393, it is easy to\nshow that \u03b3\u03c4 is also a semi-algebraic set of constant description complexity (see [16]).\n\nWe define the test set Q to consist of all the generalized ranges \u03b3\u03c4 , over all cells \u03c4 in the\ndecomposition of V , and claim that, with high probability (and with an appropriate choice of b),\nQ is a good test set, in the following three aspects.\n(i) Compactness. |Q| = O\u2217 (r 2t\u22124 ); that is, the size of Q is polynomial in r and independent of n.\n(ii) Shallowness. Each range \u03b3\u03c4 in Q is \u03b2(n/r)-shallow with respect to P , for some constant\nparameter \u03b2.\n(iii) Containment. Every (n/r)-shallow range \u03b3 \u2208 \u0393 is contained in a single range \u03b3\u03c4 of Q.\nProperty (i) is obvious. Consider the range space (P, \u0393\u2217 ), where \u0393\u2217 consists of all generalized\nranges \u03b3\u03c4 , over all elementary cells \u03c4 of the form arising in the above vertical decomposition. It\nis a fairly easy exercise to show that (P, \u0393\u2217 ) also has finite VC-dimension. See, e.g., [40]. By\nTheorem 2.2, if a is a sufficiently large constant (proportional to the VC-dimension of (P, \u0393\u2217 )) then\nN is a shallow (1/r)-net for both range spaces (P, \u0393) and (P, \u0393\u2217 ), with high probability, so we\nassume that N is indeed such a shallow (1/r)-net.\nLet \u03b3\u03c4 \u2208 Q. Note that any point p \u2208 P in \u03b3\u03c4 lies in a range \u03b3 \u2208 \u0393 with \u03b3 \u2217 \u2208 \u03c4 . By definition,\nalso belongs to Kp , and so Kp crosses or fully contains \u03c4 . Since \u03c4 is (b log r)-shallow in A(N \u2217 ),\nit is fully contained in at most b log r regions Kp , for p \u2208 N (and is not crossed by any such region).\nHence |\u03b3\u03c4 \u2229N | < b log r, so, since N is a shallow (1/r)-net for (P, \u0393\u2217 ), we have |\u03b3\u03c4 \u2229P | < c(b+1)n/r,\nso \u03b3\u03c4 is (c(b + 1)n/r)-shallow, which establishes (ii).\n\u03b3\u2217\n\nFor (iii), let \u03b3 \u2208 \u0393 be an (n/r)-shallow range. Since N is a shallow (1/r)-net for (P, \u0393), and\n|\u03b3 \u2229 P | \u2264 |P |/r, we have |\u03b3 \u2229 N | \u2264 2c log r. Hence, with b \u2265 2c, \u03b3 \u2208 V , so there is a cell \u03c4 of\nthe decomposition which contains \u03b3, which, by construction, implies that \u03b3 \u2286 \u03b3\u03c4 , thus establishing\n(iii).\nTo make Q a really good test set, we also need the following fourth property:\n(iv) Efficiency. There exists a good bound on the associated function \u03b6(m), bounding the size of\na decomposition of the complement of the union of any m ranges of Q.\nThe potentially rather complex shape of these generalized ranges makes it harder to obtain, in\ngeneral, a good bound on \u03b6.\nIn what follows, we manage to use this general recipe in two of our four applications (ray shooting\namid balls and range fullness searching), with good bounds on the corresponding functions \u03b6(*). In\ntwo other planar applications (range emptiness searching with fat triangles and with circular caps),\nwe abandon the general technique, and construct ad hoc good test sets.\nRemark: In the preceding construction, we wanted to make sure that every (n/r)-shallow range\n\u03b3 \u2208 \u0393 is covered by a range of Q. If we only need this property for empty ranges \u03b3 (which is the\ncase for emptiness testing), it suffices to consider only the 0-level of A(N \u2217 ), i.e., the complement\nof the union of N \u2217 . Other than this simplification, the construction proceeds as above.\n8\nHere, in this dual construction, we do not need any sharper bound; any bound polynomial in r is sufficient for\nour purpose.\n\n13\n\n\f4\n\nFullness searching and reporting outliers for convex ranges\n\nLet P be a set of n points in 3-space, and let \u0393 be a set of convex ranges of constant description\ncomplexity. We wish to preprocess P in near-linear time into a data structure of linear size, so\nthat, given a query range \u03b3 \u2208 \u0393, we can efficiently determine whether \u03b3 contains all the points\nof P . Alternatively, we want to report all the points of P that lie outside \u03b3. (This is clearly a\nspecial case of range emptiness searching or range reporting, if one considers the complements of\nthe ranges in \u0393.) For simplicity, we only focus on the range fullness problem; the extension to\nreporting \"outliers\" is similar to the standard treatment of reporting queries, as discussed earlier.\nWe present a solution to this problem, with O\u2217 (n1/2 ) query time, thereby improving over the\nbest known general bound of O \u2217 (n2/3 ), given in [6], which applies to any range searching (e.g.,\nrange counting) with semi-algebraic sets (of constant description complexity) in R3 .\nTo apply our technique to this problem we first need to build a good test set. Since fullness\nsearching is complementary to emptiness searching, we need a property complementary to that\nassumed in Theorem 3.2 (see also Lemma 3.4). In fact, we will enforce the property that every full\nrange \u03b3 fully contains a single range of Q, which is \"almost full\" (contains at least n \u2212 n/r points\nof P ).\nAs above, assuming the ranges of \u0393 to have t degrees of freedom, we map each range \u03b3 \u2208 \u0393\nto a point \u03b3 \u2217 in Rt . A point p \u2208 R3 is mapped to a region Kp which is the locus of all the\npoints \u03b3 \u2217 that correspond to ranges \u03b3 which contain p. We fix r < n, take a random sample\nN of O(r log r) points\nof P (with a sufficiently large constant of proportionality), construct the\nT\nintersection I = p\u2208N Kp ,Tand decompose it into elementary cells. For each resulting cell \u03c3, let\n\u03b3\u03c3 denote the intersection \u03b3 \u2217 \u2208\u03c3 \u03b3. As above, since \u03c3 has constant description complexity, \u03b3\u03c3 is a\nsemi-algebraic set of constant description complexity. Note that, since the ranges in \u0393 are convex,\neach range \u03b3\u03c3 is also convex (albeit of potentially more complex shape than that of the original\nranges).\nDefine the test set Q to consist of all the generalized ranges \u03b3\u03c3 , over all cells \u03c3 in the decomposition of I. We argue that Q satisfies all four properties required from a good test set: (i)\nCompactness: As above, the size of Q is polynomial in r (it is at most O \u2217 (r 2t\u22124 )). (ii) Shallowness\n(or, rather, \"almost fullness\"): For each cell \u03c3 and any \u03b3 \u2208 \u0393 with \u03b3 \u2217 \u2208 \u03c3, \u03b3 \u2217 lies in all the sets Kp ,\nfor p \u2208 N , and thus N \u2286 \u03b3. By construction, we also have N \u2286 \u03b3\u03c3 . Apply the \u03b5-net theory [27] to\nthe range space (P, \u0393\u0303), where the ranges of \u0393\u0303 are complements of ranges of the same form as the\nranges \u03b3\u03c3 . Since \u03b3\u03c3c \u2229 N = \u2205 for each cell \u03c3 in the decomposition, we have, with high probability,\nthe property that for each cell \u03c3 of I, \u03b3\u03c3 contains at least n \u2212 n/r points of P , so it is an \"almost\nfull\" range. (iii) Containment: Let \u03b3 \u2208 \u0393 be a full range. Then, in particular, N \u2286 \u03b3. Then \u03b3 \u2217 \u2208 I,\nand let \u03c3 be the cell of I containing \u03b3 \u2217 . Then, by construction, \u03b3\u03c3 \u2286 \u03b3. (iv) Efficiency: Finally, we\nshow that the complexity of a decomposition of the intersection of any m ranges in Q, is O \u2217 (m2 ),\nso \u03b6(m) = O \u2217 (m2 ).\nClaim 4.1 Let Q be a set of convex \"almost full\" ranges, each containing at least n \u2212 n/r points of\nP . The intersection, K, of any m ranges q1 , . . . , qm \u2208 Q can be decomposed into O \u2217 (m2 ) elementary\ncells.\nProof. Since all ranges in Q are convex, K is a convex set too. Assume, for simplicity of presentation,\nthat K is nonempty and has nonempty interior, and fix a point o in that interior. We can regard the\nboundary of each qi as the graph of a bivariate function \u03c1 = Fi (\u03b8, \u03c6) in spherical coordinates about\n14\n\n\fo. Then \u2202K is the graph of the lower envelopes of these functions. Since the qi 's have constant\ndescription complexity, (the graph of) each Fi is also a semi-algebraic set of constant description\ncomplexity9 . Hence the combinatorial complexity of \u2202K is O\u2217 (m2 ) [40]. Moreover, since \u2202K is\n2-dimensional, we can partition it into O\u2217 (m2 ) trapezoidal-like elementary cells, using a variant of\nthe vertical decomposition technique, and then extend each such cell \u03c40 to a 3-dimensional cone-like\ncell \u03c4 , which is the union of all segments connecting o to the points of \u03c40 . The resulting cells \u03c4\nconstitute a decomposition of K into O \u2217 (m2 ) elementary cells, as claimed. \u0003\nUsing the machinery developed in the preceding section, we therefore obtain the following result.\n\nTheorem 4.2 Let P be a set of n points in R3 , and let \u0393 be a family of convex ranges of constant\ndescription complexity. Then one can construct, in near linear time, a data structure of linear size\nso that, for any range \u03b3 \u2208 \u0393, it can determine, in O \u2217 (n1/2 ) time, whether \u03b3 is full.\nReporting outliers. To extend the above approach to the problem of reporting outliers, we\napply a construction similar to that in the \"general recipe\" presented above. That is, we take the\nb log r deepest levels of A(N ), for an appropriate constant b, decompose them into elementary cells,\nand construct a generalized range \u03b3\u03c3 for each of these cells \u03c3. The general machinery given above\nimplies the following result:\nTheorem 4.3 Let P be a set of n points in R3 , and let \u0393 be a family of convex ranges of constant\ndescription complexity. Then one can construct, in near linear time, a data structure of linear size\nso that, for any range \u03b3 \u2208 \u0393, it can report the points of P in the complement of \u03b3, in O\u2217 (n1/2 )+O(k)\ntime, where k is the query output size.\n\n4.1\n\nFarthest point from a convex shape\n\nA useful application of the data structure of Theorem 4.2 is to farthest point queries. In such a\nproblem we are given a set P of n points in R3 , and wish to preprocess it, in near-linear time, into\na data structure of linear size, so that, given a convex query object o (from some fixed class of\nobjects with constant description complexity), we can efficiently find the point of P farthest from\no.\nWe solve this problem using parametric searching [36]. The corresponding decision problem is:\nGiven the query object o and a distance \u03c1, determine whether the Minkowski sum o \u2295 B\u03c1 is full,\nwhere B\u03c1 is the ball of radius \u03c1 centered at the origin. The smallest \u03c1 with this property is the\ndistance to the farthest point from o. With an appropriate small-depth parallel implementation of\nthis decision problem, the parametric searching also takes time O \u2217 (n1/2 ). Reporting the k farthest\npoints from o, for any parameter k, can be done in O\u2217 (n1/2 ) + O(k) time, using a simple variant of\nthis technique.\n\n4.2\n\nComputing the largest-area, largest-perimeter, and largest-height triangles\n\nLet P be a set of n points in Rd . We wish to find the triangle whose vertices belong to P and\nwhose area (respectively, perimeter, height) is maximal. This problem is a useful subroutine in\n9\n\nWith an appropriate algebraic re-parametrization of the spherical coordinates, of course.\n\n15\n\n\fpath approximation algorithms; see [21]. Daescu and Serfling [21] gave an O \u2217 (n13/5 )-algorithm for\n2\nthe 3-dimensional largest-area triangle. In d dimensions, the running time is O \u2217 (n3\u22122/(\u230ad /2\u230b+1) ).\nIn R3 , our technique, without any additional enhancements, yields the improved bound O \u2217 (n5/2 ),\nusing the following straightforward procedure. For each pair of points p1 , p2 \u2208 P , we find the farthest point q \u2208 P from the line p1 p2 , compute the area of \u2206p1 p2 q, and output the largest-area\ntriangle among those triangles. The procedure performs farthest-point queries from O(n2 ) lines,\nfor a total cost of O \u2217 (n5/2 ), as claimed.\nWe can improve this solution, using the following standard decomposition technique, to an algorithm with running time O \u2217 (n26/11 ). First, the approach just described performs M farthest-point\nqueries on a set of N points in time O\u2217 (M N 1/2 + N ), where the second term is the preprocessing\ncost of preparing the data structure.\nBefore continuing, we note the following technical issue. Recall that we find the farthest point\nfrom a query line l by drawing a cylinder C\u03c1 around l, whose radius \u03c1 is the smallest (unknown)\nradius for which C\u03c1 contains P . The concrete value of \u03c1 is found using parametric searching. In\nthe approach that we follow now, we will execute in parallel O(n2 ) different queries, each with its\nown \u03c1, so care has to be taken when running the parametric search with this multitude of different\nunknown values of \u03c1.\nWhile there are several alternative solutions to this problem, we use the following one, which\nseems the cleanest. Let A > 0 be a fixed parameter. For each pair p1 , p2 of distinct points of P , let\nCA (p1 p2 ) denote the cylinder whose axis passes through p1 and p2 and whose radius is 2A/|p1 p2 |.\nIn the decision procedure, we specify the value of A, and perform O(n2 ) range fullness queries\nwith the cylinders CA (p1 p2 ). If all of them are found to be full, then A \u2265 A\u2217 , where A\u2217 is the\n(unknown) maximal area of a triangle spanned by P ; otherwise A < A\u2217 . (With a somewhat finer\nimplementation, we can also distinguish between the cases A > A\u2217 and A = A\u2217 ; we omit the details\nof this refinement.)\nTo implement the decision procedure, we apply a duality transform, where each cylinder C in\n3-space is mapped to a point C \u2217 = (a, b, c, d, \u03c1), where (a, b, c, d) is some parametrization of the\naxis of C and \u03c1 is its radius. In this dual parametric 5-space, a point p \u2208 R3 is mapped to a surface\np\u2217 , which is the locus of all (points representing) cylinders which contain p on their boundary.\nNote that the portion of space below (resp., above) p\u2217 , in the \u03c1-direction, consists of points dual\nto cylinders which do not contain (resp., contain) p.\nLet P \u2217 = {p\u2217 | p \u2208 P }. Fix some sufficiently large but constant parameter r0 , and construct\na (1/r0 )-cutting \u039e of A(P \u2217 ), using the vertical decomposition of a random sample of O(r0 log r0 )\nsurfaces of P \u2217 (see, e.g., [40]). As follows from [17, 30], the combinatorial complexity of \u039e is O\u2217 (r06 ).\nWe distribute the O(n2 ) points dual to the query cylinders among the cells of \u039e, in brute force, and\nalso find, in equally brute force, for each cell \u03c4 the subset P\u03c4\u2217 of surfaces which cross \u03c4 . We ignore\ncells which fully lie below some surface of P \u2217 , because cylinders whose dual points fall in such a\ncell cannot be full (the decision algorithm stops as soon as such a point (cylinder) is detected). For\neach of the remaining cells \u03c4 , we repeat this procedure with the subset of the points dual to the\nsurfaces in P\u03c4\u2217 and with the subset of cylinders whose dual points lie in \u03c4 . We keep iterating in\nthis manner until we reach cuttings whose cells are crossed by at most n/r dual surfaces, where r\nis some (non-constant) parameter that we will shortly fix. As is easily checked, the overall number\nof cells in these cuttings is O\u2217 (r 6 ).\nWe then run the preceding weaker procedure on each of the resulting cells \u03c4 , with the set P\u03c4\nof points dual to the surfaces which cross \u03c4 and with the set C\u03c4 of cylinders whose dual points lie\n16\n\n\fin \u03c4 . Letting m\u03c4 denote the number of these cylinders, the overall cost of the second phase of the\nprocedure is\nX\nO\u2217 (m\u03c4 (n/r)1/2 + n/r) = O\u2217 (n2 (n/r)1/2 + nr 5 ).\n\u03c4\n\nSince r0 is a constant, the overall cost of the first phase is easily seen to be proportional to the\noverall size of the resulting subproblems, which is O \u2217 (n2 + nr 5 ). Overall, the cost is thus\nO\u2217 (n5/2 /r 1/2 + nr 5 ).\nChoosing r = n3/11 , this becomes O \u2217 (n26/11 ).\n\nRunning a generic version of this decision procedure in parallel is fairly straightforward. The\ncuttings themselves depend only on the dual surfaces, which do not depend on A\u2217 , so we can\nconstruct them in a concrete, non-parametric fashion. Locating the points dual to the query\ncylinders can be done in parallel, and, since r0 is a constant, this takes constant parallel depth\nfor each of the logarithmically many levels of cuttings. The second phase can also be executed\nin parallel in an obvious manner. Omitting the further easy details, we conclude that the overall\nalgorithm also takes O\u2217 (n26/11 ) time.\nLargest-perimeter triangle. The above technique can be adapted to yield efficient solutions of\nseveral problems of a similar flavor. For example, consider the problem of computing the largestperimeter triangle among those spanned by a set P of n points in R3 . Here, for each pair p1 , p2\nof points of P , and for a specified perimeter \u03c0, we construct the ellipsoid of revolution E\u03c0 (p1 , p2 ),\nwhose boundary is the locus of all points q satisfying |qp1 | + |qp2 | = \u03c0 \u2212 |p1 p2 |. (Here, of course, we\nonly consider pairs p1 , p2 with |p1 p2 | < \u03c0/2.) We now run O(n2 ) range fullness queries with these\nellipsoids, and report that \u03c0 \u2217 > \u03c0 if at least one of these ellipsoids in not full, or \u03c0 \u2217 \u2264 \u03c0 otherwise,\nwhere \u03c0 \u2217 is the largest perimeter.\nThe efficient implementation of this procedure is carried out similar to the preceding algorithm,\nexcept that here the dual representation of our ellipsoids require six degrees of freedom, to specify\nthe foci p1 and p2 . Unlike the previous case, the dual surfaces p\u2217 do depend on \u03c0, so, in the generic\nimplementation of the decision procedure we also need to construct the various (1/r0 )-cuttings in\na generic, parallel manner.10 However, since r0 is a constant, this is easy to do in constant parallel\ndepth per cutting. A (1/r0 )-cutting in R6 has complexity O \u2217 (r 8 ) [17, 30]. A modified version of\nthe preceding analysis then yields:\nTheorem 4.4 The largest-perimeter triangle among those spanned by a set of n points in R3 can\nbe computed in O \u2217 (n12/5 ) time.\nLargest-height triangle. In this variant, we wish to compute the triangle with largest height\namong those determined by a set P of n points in R3 . Here, for each pair p1 , p2 of points of P , and\nfor a specified height h, we construct the cylinder Ch (p1 , p2 ), whose axis passes through p1 and p2\nand whose radius is h. We run O(n2 ) range fullness queries with these cylinders, and report that\nh\u2217 > h if at least one of these cylinders in not full, or h\u2217 \u2264 h otherwise, where h\u2217 is the desired\nlargest height.\n10\nWe can make these surfaces independent of \u03c0 if we add \u03c0 as a seventh degree of freedom, but then the overall\nperformance of the algorithm deteriorates.\n\n17\n\n\fThe efficient implementation of this procedure is carried out as above, except that here the dual\nrepresentation of these cylinders require only four degrees of freedom, once h is specified. As in the\npreceding case, here too the surfaces of P \u2217 also depend on h, so we need a generic parallel procedure\nfor constructing (1/r0 )-cuttings for these surfaces, which however is not difficult to achieve, since\nr0 is a constant. We omit the simple routine details. Since a (1/r0 )-cutting in R4 has complexity\nO\u2217 (r 4 ) [30], a modified version of the preceding analysis then yields:\nTheorem 4.5 The largest-height triangle among those spanned by a set of n points in R3 can be\ncomputed in O \u2217 (n16/7 ) time.\nFurther extensions. We can extend this machinery to higher dimensions, although its performance deteriorates as the dimension grows. The range fullness problem in Rd , for d \u2265 4, can\nbe handled in much the same way as in the 3-dimensional case. When extending Claim 4.1, we\nhave an intersection of m convex sets of constant description complexity in Rd , and we can regard\nthe boundary of the intersection as the lower envelope of m (d \u2212 1)-variate functions of constant\ndescription complexity, each representing the boundary of one of the input convex sets, in spherical\ncoordinates about some fixed point in the intersection. The complexity of the lower envelope is\nO\u2217 (md\u22121 ) [39]. However, we need to decompose the region below the envelope into elementary\ncells, and, as already noted, the only known general-purpose technique for doing so is to decompose\nthe entire arrangement of the graphs of the m boundary functions, and select the cells below the\nlower envelope. The complexity of such a decomposition is O\u2217 (m2d\u22124 ) [17, 30]. This implies that\n\u03b6(r) = O \u2217 (r 2d\u22124 ). The rest of the analysis, including the construction of a good test set, is done in\nessentially the same manner. Hence, using the machinery of the previous section, we obtain:\nTheorem 4.6 Let P be a set of n points in Rd , for d \u2265 4, and let \u0393 be a family of convex ranges\nof constant description complexity. Then one can construct, in near linear time, a data structure\nof linear size so that, for any range \u03b3 \u2208 \u0393, it can determine, in O \u2217 (n1\u22121/(2d\u22124) ), whether \u03b3 is full.\nFinding the largest-area triangle in Rd . Let P be a set of n points in Rd , for d \u2265 4, and\nconsider the problem of finding the largest-area triangle spanned by P . We apply the same method\nas in the 3-dimensional case, whose main component is a decision procedure which tests O(n2 )\ncylinders for fullness. A cylinder (with a line as an axis) in Rd has 2d \u2212 1 degrees of freedom, so\nthe dual representation of our O(n2 ) cylinders is as points in R2d\u22121 . The best known bound on\nthe complexity of a (1/r)-cutting in this space is O \u2217 (r 2(2d\u22121)\u22124 ) = O \u2217 (r 4d\u22126 ). Applying this bound\nand the bound in Theorem 4.6, the overall cost of the decision procedure is\n\u0011\n\u0010\nO\u2217 n2 (n/r)1\u22121/(2d\u22124) + nr 4d\u22127 .\nOptimizing the value of r, and applying parametric searching, we get an algorithm for the maximumarea triangle in Rd with running time\n\u0013\n\u0012\n(4d\u22129)(4d\u22127)\n1+ (4d\u22126)(2d\u22124)\u22121\n\u2217\n.\nO n\n\nWe can extend the other problems (largest-perimeter or largest-height triangles) in a similar manner, and can also obtain algorithms for solving higher-dimensional variants, such as computing\nthe largest-volume tetrahedron or higher-dimensional simplices. We omit the straightforward but\ntedious analysis, and the resulting cumbersome-looking bounds.\n18\n\n\f5\n\nRay shooting amid balls in 3-space\n\nLet B be a set of n balls in 3-space. We show how to preprocess B in near-linear time into a data\nstructure of linear size, so that, given a query ray \u03c1, the first ball that \u03c1 hits can be computed in\nO\u2217 (n2/3 ) time, improving the general bound O\u2217 (n3/4 ) mentioned in the introduction. As already\nnoted, we use the parametric-searching technique of Agarwal and Matou\u0161ek [5], which reduces the\nproblem to that of efficiently testing whether a query segment s = qz \u2282 \u03c1 intersects any ball in B,\nwhere q is the origin of \u03c1 and z is a parametric point along \u03c1.\nParametric representation of balls and segments. We move to a parametric 4-dimensional\nspace, in which balls in 3-space are represented by points, so that a ball with center at (a, b, c) and\nradius r is mapped to the point (a, b, c, r). A segment e, or for that matter, any closed nonempty\nset K \u2282 R3 of constant description complexity, is mapped to a surface \u03c3K , which is the locus of all\npoints representing balls that touch K but are openly disjoint from K. By construction, \u03c3K is the\ngraph of a totally defined continuous trivariate function r = \u03c3K (a, b, c), which is semi-algebraic of\nconstant description complexity. Moreover, points below (resp., above) \u03c3K represent balls which\nare disjoint from K (resp., intersect K).\nMoreover, for any such set K, \u03c3K (q) is, by definition, the (Euclidean) distance of q from K.\nHence, given a collection K = {K1 , K2 , . . . , Km } of m sets, the minimization diagram of the surfaces\n\u03c3K1 , . . . , \u03c3Km (that is, the projection onto the 3-space r = 0 of the lower envelope of these surfaces)\nis the nearest-neighbor Voronoi diagram of K. We use this property later on, in deriving a sharp\nbound on the resulting function \u03b6(*).\nBuilding a test set for segment emptiness. Here we use the general recipe for constructing\ngood test sets, which covers each empty segment e by a fairly complex \"canonical\" empty region\nK, which has nonetheless constant description complexity. In parametric 4-space, each such region\nK is mapped to the upper halfspace above the corresponding surface \u03c3K ; this is the set of all balls\nthat intersect K. The complement of the union of m such ranges is the portion of 4-space below the\nlower envelope of the corresponding surfaces \u03c3Ki . Using the connection between this envelope and\nthe Voronoi diagram of the Ki 's, we are able to decompose (the diagram and thus) the complement\nof the union into \u03b6(m) = O\u2217 (m3 ) elementary cells.\nin more detail, the construction proceeds as follows. We start by choosing a random sample\nN of O(r log r) balls of B, to construct a test set Q for empty segment ranges, with respect to\nN . While we do not have a clean, explicit geometric definition of these ranges, they will satisfy,\nas above, all the four requirements from a good test set. Also, we spell out the adaptation of the\ngeneral recipe to the present scenario, to help the reader see through one concrete application of\nthe general recipe.\nSpecifically, we move to a dual space, in which segments in 3-space are represented as points.\nSegments in 3-space have six degrees of freedom; for example, we can represent a segment by the\ncoordinates of its two endpoints. The dual space is therefore 6-dimensional. Each ball B \u2208 N is\nmapped to a surface B \u2217 , which is the locus of all points representing segments which touch \u2202B but\ndo not penetrate into its interior; that is, either they are tangent to B, at a point in their relative\ninterior, or they have an endpoint on \u2202B but are openly disjoint from B.\nLet N \u2217 denote the collection of the surfaces dual to the balls of N . Construct a (1/r)-cutting\nof A(N \u2217 ), which consists of O \u2217 (r 8 ) elementary cells [17, 30]. Each cell \u03c4 has the property that all\n19\n\n\fpoints in \u03c4 represent segments which meet a fixed set of balls from among the balls in N and avoid\nall other balls of N ; the set depends only on \u03c4 .\nFor each cell \u03c4 whose corresponding set of balls is empty, we define K\u03c4 to be the union, in\n3-space, of all segments e whose dual points lie in \u03c4 . Since \u03c4 is an elementary cell, K\u03c4 is a semialgebraic set of constant description complexity (see, e.g., [16]). Moreover, K\u03c4 is an N -empty\nregion, in the sense that it is openly disjoint from all the balls in N .\nSince we have to work in parametric 4-space, we map each region K\u03c4 of the above kind into\na range \u03b3\u03c4 in 4-space, which is the locus of all (points representing) balls which intersect K\u03c4 . As\ndiscussed above, \u03b3\u03c4 is the upper halfspace bounded by the graph \u03c3K\u03c4 of the distance function from\npoints in R3 to K\u03c4 .\nWe define the desired test set Q to consist of all the ranges \u03b3\u03c4 , as just defined, and argue that\nQ indeed satisfies all four properties required from a good test set: (a) Compactness: |Q| = O \u2217 (r 8 ),\nso its size is small. (b) Shallowness: With high probability, each range in Q is (n/r)-shallow, since\nit does not contain any point representing a ball in N (and we assume that the sample N does\nindeed have this property, which makes all the ranges in Q (n/r)-shallow). (c) Containment: Each\nempty segment is also N -empty, so its dual point lies in some cell \u03c4 of the cutting, whose associated\nsubset of balls is empty. By construction, we have e \u2282 K\u03c4 . That is, any ball intersecting e also\nintersects K\u03c4 , so the range in 4-space that e defines is contained in \u03b3\u03c4 , i.e., in a single range of Q.\n(d) Efficiency: The complement of the union of any m ranges in Q can be decomposed into O\u2217 (m3 )\nelementary cells.\nThe proof of (d) proceeds as follows. The complement of the union of m ranges, \u03b3\u03c41 , . . . , \u03b3\u03c4m , is\nthe region below the lower envelope of the corresponding surfaces \u03c3K\u03c41 , . . . , \u03c3K\u03c4m . To decompose\nthis region, it suffices to produce a decomposition of the 3-dimensional minimization diagram of\nthese surfaces, and extend each of the resulting cells into a semi-unbounded vertical prism, whose\n\"ceiling\" lies on the envelope.\nThe combinatorial complexity of the minimization diagram of a collection K = {K\u03c41 , . . . , K\u03c4m }\nof m trivariate functions of constant description complexity is11 O\u2217 (m3 ) [40]. Moreover, as noted\nabove, the minimization diagram is the Euclidean nearest-neighbor Voronoi diagram of K.\nWe can decompose each cell Vi = V (K\u03c4i ) of the diagram (or, more precisely, the portion\nof the cell outside the union of the K\u03c4i 's) using its star-shapedness with respect to its \"site\"\nK\u03c4i ; that is, for any point p \u2208 V (K\u03c4i ), the segment connecting p to its nearest point on K\u03c4i is\nfully contained in V (K\u03c4i ). As is easy to verify, this property holds regardless of the shape, or\nintersection pattern, of the regions in K. We first decompose the 2-dimensional faces bounding Vi\ninto elementary cells, using, e.g., an appropriate variant of 2-dimensional vertical decomposition,\nand then take each such cell \u03c60 and extend it to a cell \u03c6, which is the union of all segments, each\nconnecting a point in \u03c60 to its nearest point on K\u03c4i . The resulting cells, obtained by applying\nthis decomposition to all cells of the diagram, form a decomposition of the portion of the diagram\noutside the union of the K\u03c4i 's, into a total of O \u2217 (m3 ) elementary cells, as desired. The union of\nthe K\u03c4i 's themselves, being a subcollection of cells of a 3-dimensional arrangement of m regions of\nconstant description complexity, can also be decomposed into O \u2217 (m3 ) cells, using standard results\non vertical decomposition in three dimensions [40].\nUsing Lemma 3.4 and the machinery of Section 3, in conjunction with the parametric searching\ntechnique of [5], we thus obtain the following theorem.\n11\n\nThis bound holds regardless of how \"badly\" the regions in K are shaped, nor how \"wildly\" they can intersect\none another, as long as each of them has constant description complexity.\n\n20\n\n\fTheorem 5.1 Ray shooting amid n balls in 3-space can be performed in O \u2217 (n2/3 ) time, using a\ndata structure of O(n) size, which can be constructed in O \u2217 (n) time.\nRemark: In the preceding description, we only considered empty ranges. If desired, we can\nextend the analysis to obtain a data structure which also supports \"reporting queries\", in which\nwe want to report the first k balls hit by a query ray. We omit the details of this straightforward\nextension.\n\n6\n\nRange emptiness searching and reporting in the plane\n\nFat triangle reporting and emptiness searching. Let \u03b1 > 0 be a fixed constant, and let P\nbe a set of n points in the plane. We wish to preprocess P , in O\u2217 (n) time, into a data structure\nof size O(n), which, given an \u03b1-fat query triangle \u03b3 (which, as we recall, is a triangle all of whose\nangles are at least \u03b1), can determine in O\u2217 (1) time whether \u03b3 \u2229 P = \u2205, or report in O \u2217 (1) + O(k)\ntime the points of P in \u03b3, where k = |P \u2229 \u03b3|.\nTo do so, we need to construct a good test set Q. We use the following \"canonization\" process\n(an ad-hoc process, not following the general recipe of Section 3). As above, we apply the construction to a random sample N of O(r log r) points of P . For simplicity, we first show how to canonize\nempty triangles, and then extend the construction to shallow triangles. (As before, the first part\nsuffices for emptiness searching, whereas the second part is needed for reporting queries.) Let \u2206 be\nan \u03b1-fat empty triangle, which is then also N -empty. We expand \u2206 homothetically, keeping one\nvertex fixed and translating the opposite side away, until it hits a point q1 of N . We then expand\nthe new triangle homothetically from a second vertex, until the opposite side hits a second point\nq2 of N , and then apply a similar expansion from the third vertex, making the third edge of the\ntriangle touch a third point q3 of N . We end up with an N -empty triangle \u2206\u2032 , homothetic to, and\ncontaining, \u2206, each of whose sides passes through one of the points q1 , q2 , q3 \u2208 N . See Figure 2.\n(It is possible that some of these expansions never hit a point of N , so we may end up with an\nunbounded wedge or halfplane instead of a triangle. Also, the points q1 , q2 , q3 need not be distinct.)\n\n\u2206\u2032\nq2\n\nq1\n\u2206\n\nq3\n\nFigure 2: The first step in canonizing an empty triangle.\nLet D be the set of orientations {j\u03b1/4 | j = 0, 1, . . . , \u230a8\u03c0/\u03b1\u230b}. We turn the side containing q1\nclockwise and counterclockwise about q1 , keeping its endpoints on the lines containing the other\ntwo sides, until we reach an orientation in D, or until we hit another point of N (which could also\nbe one of the points q2 , q3 ), whichever comes first. Each of the new sides forms, with the two lines\n\n21\n\n\fcontaining the two other sides, a new (openly) N -empty (3\u03b1/4)-fat triangle; the union of these two\ntriangles covers \u2206\u2032 . See Figure 3.\n\nq2\n\nq1\n\u2206\n\nq3\n\nFigure 3: The second step in canonizing an empty triangle.\nFor each of the two new triangles, \u2206\u2032\u2032 , we apply the same construction, by rotating the side\ncontaining q2 clockwise and counterclockwise, thereby obtaining two new triangles whose union\ncovers \u2206\u2032\u2032 . We then apply the same construction to each of the four new triangles, this time\nrotating about q3 . Overall, we get up to eight new triangles whose union covers \u2206. Each of these\nnew triangles is (\u03b1/2)-fat, openly N -empty, and each of its sides either passes through two points\nof N , or passes through one point of N and has orientation in D. Since |D| = O(1/\u03b1) = O(1), it\nfollows that the overall number of these canonical covering triangles is O((r log r)6 ) = O \u2217 (r 6 ). (We\nomit the easy extensions of this step to handle unbounded wedges or halfplanes, or the cases where\nthe points qi , or some of the newly encountered points, lie at vertices of the respective triangles.)\nWe take Q to be the collection of these canonical triangles, and argue that Q indeed satisfies the\nproperties of a good test set: (a) Compactness: |Q| = O \u2217 (r 6 ), so its size is small. (b) Shallowness:\nWith high probability, each range in Q is (n/r)-shallow (and, as usual, we assume that this property\ndoes indeed hold). (c) Containment: By construction, each \u03b1-fat empty triangle is contained in the\nunion of at most eight triangles in Q. (d) Efficiency: Being (\u03b1/2)-fat, the union of any m triangles in\nQ has complexity O(m log log m) [35], so the associated function \u03b6 satisfies \u03b6(m) = O(m log log m).\nThis, combined with Lemma 3.4 and the machinery of Section 3, lead to the following theorem.\nTheorem 6.1 One can preprocess a set P of n points in the plane, in near-linear time, into a data\nstructure of linear size, so that, for any query \u03b1-fat triangle \u2206, one can determine, in O\u2217 (1) time,\nwhether \u2206 \u2229 P = \u2205.\nReporting points in fat triangles. We can extend the technique given above to the problem\nof reporting the points of P that lie inside any query fat triangle. For this, we need to construct a\ntest set that will be good for shallow ranges and not just for empty ones. Using Theorem 2.2, we\nconstruct (by random sampling) a shallow (1/r)-net N \u2286 P of size O(r log r). We next canonize\nevery (n/r)-shallow \u03b1-fat triangle \u2206, by the same canonization process used above, with respect\nto the set N . Note that each of the resulting canonical triangles contains (in its interior) the same\nsubset of N as \u2206 does. By the properties of shallow (1/r)-nets, since |\u2206 \u2229 P | \u2264 n/r, we have\n|\u2206 \u2229 N | = O(log r), so all the resulting canonical triangles are (c log r)-shallow with respect to N ,\nfor some absolute constant c. Again, since N is a shallow (1/r)-net, all the canonical triangles are\n(c\u2032 n/r)-shallow with respect to P , for another absolute constant c\u2032 . Hence, the resulting collection Q\n22\n\n\fof canonical triangles is a good test set for all shallow fat triangles, and we can apply the machinery\nof Section 3 to obtain a data structure of linear size, which can be constructed in near-linear time,\nand which can perform reporting queries in fat triangles in time O\u2217 (1)+O(k), where k is the output\nsize of the query.\nRange emptiness searching with semidisks and circular caps. The motivation for studying\nthis problem comes from the following problem, addressed in [20]. We are given a set P of n points\nin the plane, and wish to preprocess it into a data structure of linear size, so that, given a query\npoint q and a query line l, one can quickly find the point of P closest to q and lying above l. In\nthe original problem, as formulated in [20], one also assumes that q lies on l, but we will consider,\nand solve, the more general version of the problem, where q also lies above l.\nThe standard approach (e.g., as in [6]) yields a solution with linear storage and near-linear\npreprocessing, and query time O \u2217 (n1/2 ). We present a solution with query time O \u2217 (1).\nUsing parametric searching [36], the problem reduces to that of testing whether the intersection\nof a disk of radius \u03c1 centered at q with the halfplane l+ above l is P -empty. The resulting range\nis a circular cap larger than a semidisk (or exactly a semidisk if q lies on l). Again, the main task\nis to construct a good test set Q for such ranges, which we do by using an ad-hoc canonization\nprocess, which covers each empty circular cap by O(1) canonical caps, which satisfy the properties\nof a good test set; in particular, we will have \u03b6(m) = O\u2217 (m). (As before, we consider here only the\ncase of emptiness detection, and will consider the reporting problem later.)\nTo construct a test set Q we choose a random sample N of O(r log r) points of P and build a\nset of canonical empty ranges with respect to N . Let C = Cc,\u03c1,l be a given circular cap (larger\nthan a semidisk) with center c, radius \u03c1, and chord supported by a line l. We first translate l in\nthe direction which enlarges the cap, until either its portion within the disk D of the cap touches\na point of N , or l leaves D. See Figure 4(left). In the latter case, C is contained in a complete\nN -empty disk, and it is fairly easy to show that such a disk is contained in the union of at most\nthree canonical N -empty disks, each passing through three points of N or through two diametrically\nopposite points of N ; there are at most O\u2217 (r 3 ) such disks.\n\nC\n\nC\nl\n\nq\n\nq\n\nl\nq\u2032\n\nFigure 4: The first steps in canonizing an empty cap.\nSuppose then that the new chord (we continue to denote its line as l) passes through a point q of\nN , as in the figure. Let D be a set of O(1) canonical orientations, uniformly spaced and sufficiently\ndense along the unit circle, for some small constant value \u03b1. Rotate l about q in both clockwise\nand counterclockwise directions, until we reach one of the two following events: (i) the orientation\nof l belongs to D; or (ii) the portion of l within D touches another point of N . In either case, the\ntwo new lines, call them l1 , l2 , become canonical-there are only O\u2217 (r 2 ) such possible lines. Note\nthat our original cap C is contained in the union C1 \u222a C2 , where C1 = Cc,\u03c1,l1 and C2 = Cc,\u03c1,l2 .\n23\n\n\fMoreover, although the new caps need no longer be larger than a semidisk, they are not much\nsmaller-this is an easy exercise in elementary geometry. See Figure 4(right).\nWe next canonize the disk of C (which is also the disk of C1 and C2 ). Fix one of the new caps,\nsay C1 . Expand C1 from the center c, keeping the line l1 fixed, until we hit a point q1 of N (lying\n+\nin l+\n1 ). See Figure 5(left). If c lies in l1 then we move c parallel to l1 in both directions, again\nkeeping l1 itself fixed and keeping the circle pass through q1 , until we obtain two circular caps,\neach passing through q1 and through a second point of N (if we do not hit a second point, we reach\na quadrant, bounded by l and by the line orthogonal to l through q1 ). The union of the two new\ncircular caps covers C1 . See Figure 5(right).\nq1\n\nq1\n\nC1\n\nC1\n\nc\n\nc\n\nl1\n\nl1\n\nFigure 5: The second step in canonizing an empty cap.\nIf c lies in l\u2212\n1 , we move it along the two rays connecting it to the endpoints u0 , v0 of the chord\ndefined by l1 . As before, each of the motions stops when the circle hits another point of N in l+\n1 , or\nwhen the motion reaches u0 or v0 . We claim that C1 is contained in the union of the two resulting\ncaps. Indeed, let u and v denote the locations of the center at the two stopping placements. We\nneed to show that, for any point b \u2208 C1 we have either |bu| \u2264 |q1 u| or |bv| \u2264 |q1 v|. If both\ninequalities did not hold, then both u and v would have to lie on the side of the perpendicular\nbisector of q1 b containing q1 . This is easily seen to imply that c must also lie on that side, which\nhowever is impossible (because |bc| \u2264 |q1 c|). See Figure 6.\nNext, we take one of these latter caps, C \u2032 , whose bounding circle passes through q1 and through\na second point q2 of N \u2229 l+\n1 , and move its center along the bisector of q1 q2 in both directions,\nkeeping the bounding circle touch q1 and q2 , and still keeping the line l1 supporting the chord\nfixed. We stop when the first of these events takes place: (i) The center reaches l1 , in which case\nthe cap becomes a semidisk (this can happen in only one of the moving directions). (ii) The center\nreaches the midpoint of q1 q2 . (iii) The bounding circle touches a third point of N \u2229 l+\n1 . (iv) The\ncentral angle of the chord along l1 is equal to some fixed positive angle \u03b2 > 0. The union of the\ntwo new caps covers C \u2032 . (It is possible that during the motion the moving circle becomes tangent\nto l1 , and then leaves it, in which case the corresponding final cap is a full disk.)\nSimilarly, if the center of C \u2032 lies on l1 (which can happen when the motion in the preceding\nq1\nC1\nu0\n\nu\n\nc\n\nv\n\nv0\n\nl1\n\nFigure 6: C1 is contained in the union of the two other caps.\n\n24\n\n\fcanonization step reaches v0 or u0 ), then we canonize its disk by translating the center to the left\nand to the right along l1 until the bounding circle touches another point of N \u2229 l+\n1 , exactly as in\nthe preceding case (shown in Figure 5(right)).\nLet C \u2032\u2032 be one of the four new caps. In all cases C \u2032\u2032 is canonical: For the first kind of caps, the\nstopping condition that defines C \u2032\u2032 is (ii) or (iii) then either the circle bounding C \u2032\u2032 passes through\nthree points of N or it passes through two diametrically opposite points of N . There are a total\nof O\u2217 (r 3 ) such circles, and since C \u2032\u2032 is obtained (in a unique manner) by the interaction of one of\nthese circles and one of the O\u2217 (r 2 ) canonical chord-lines, there is a total of O \u2217 (r 5 ) such caps. If the\nstopping condition is (i), the cap is also canonical, because the center of the containing disk is the\nintersection point of a bisector of two points of N with one of the O\u2217 (r 2 ) canonical chord-lines, so\nthere is a total of O \u2217 (r 4 ) such caps. In the case of condition (iv), there are only O \u2217 (r 2 ) such disks,\nfor a total of O \u2217 (r 4 ) caps. Similar reasoning shows that the caps resulting in the second case are\nalso canonical, and their number is O\u2217 (r 4 ).\nWe take the test set Q to consist of all the caps of the final forms, and argue that it satisfies the\nproperties of a good test set: (a) Compactness: |Q| = O \u2217 (r 5 ), so its size is small. (b) Shallowness:\nWith high probability, each range in Q is (n/r)-shallow (and we assume that this property does\nindeed hold). (c) Containment: Each empty cap is also N -empty, so, by the above canonization\nprocess, it is contained in the union of O(1) caps of Q. (d) Efficiency: Each cap C \u2208 Q is (\u03b1, \u03b2)covered, for appropriate fixed constants \u03b1, \u03b2 > 0, in the terminology of [24], meaning that for each\npoint p \u2208 \u2202C there exists an \u03b1-fat triangle touching p, contained in C, and with diameter which\nis at least \u03b2 times the diameter of C. In addition, the boundaries of any two ranges in Q (or of\nany two circular caps, for that matter) intersect in at most four points, as is easily checked. As\nfollows from the recent analysis of de Berg [22], the complexity of the union of any m ranges in Q\nis O(\u03bb6 (m) log2 m) = O\u2217 (m). Hence, the complement of the union of any m ranges in Q can be\ndecomposed into O \u2217 (m) elementary cells, making \u03b6(m) = O \u2217 (m).\nIn conclusion, we obtain:\nTheorem 6.2 Let P be a set of n points in the plane. We can preprocess P , in near-linear time,\ninto a data structure of linear size, so that, for any query circular cap C, larger than a semidisk,\nwe can test whether C \u2229 P is empty, in O \u2217 (1) time.\nCombining Theorem 6.2 with parametric searching, we obtain:\nCorollary 6.3 Let P be a set of n points in the plane. We can preprocess P , in near-linear time,\ninto a data structure of linear size, so that, for any query halfplane l+ and point q \u2208 l+ , we can\nfind, in O \u2217 (1) time, the point in P \u2229 l+ nearest to q.\nRemark. The machinery developed in this section also applies to smaller circular caps, as long as\nthey are not too small. Formally, if the central angle of each cap is at least some fixed constant\n\u03b1 > 0, the same technique holds, so we can test emptiness of such ranges in O\u2217 (1) time, using a\ndata structure which requires O(n) storage and O\u2217 (n) preprocessing. Thus Theorem 6.2 carries\nover to this scenario, but Corollary 6.3 does not, because we have no control over the \"fatness\"\nof the cap, as the disk shrinks or expands, when the center of the disk lies in l\u2212 , and once the\ncanonical caps become too thin, the complexity of their union may become quadratic.\n\n25\n\n\fReporting points in semidisks and circular caps. As in the case of fat triangles, we can\nextend the technique to answer efficiently range reporting queries in semidisks or in sufficiently\nlarge circular caps. We use the same canonization process, with respect to a random sample N\nof size O(r log r) which is a shallow (1/r)-net, and argue, exactly as in the case of fat triangles,\nthat the resulting collection of canonical caps is a good test set for shallow semidisk or larger cap\nranges. Applying the machinery of Section 3, we obtain a data structure of linear size, which can\nbe constructed in near-linear time, and which can perform reporting queries in semidisks or larger\ncaps, in time O \u2217 (1) + O(k), where k is the output size of the query.\n\n7\n\nApproximate range counting\n\nGiven a set P of n points in Rd , a set \u0393 of semi-algebraic ranges of constant description complexity,\nand a parameter \u03b4 > 0, the approximate range counting problem is to preprocess P into a data\nstructure such that, for any query range \u03b3 \u2208 \u0393, we can efficiently compute an approximate count\nt\u03b3 which satisfies\n(1 \u2212 \u03b4)|P \u2229 \u03b3| \u2264 t\u03b3 \u2264 (1 + \u03b4)|P \u2229 \u03b3|.\nAs in most of the rest of the paper, we will only consider the case where the size of the data\nstructure is to be (almost) linear, and the goal is to find solutions with small query time.\nThe problem has been studied in several recent papers [12, 13, 14, 29], for the special case where\nP is a set of points in Rd and \u0393 is the collection of halfspaces (bounded by hyperplanes). A variety\nof solutions, with near-linear storage, were derived; in all of them, the dependence of the query cost\non n is close to n1\u22121/\u230ad/2\u230b , which, as reviewed earlier, is roughly the same as the cost of halfspace\nrange emptiness queries, or the overhead cost of halfspace range reporting queries [33].\nThe fact that the approximate range counting problem is closely related to range emptiness\ncomes as no surprise, because, when P \u2229 \u03b3 = \u2205, the approximate count t must be 0, so range\nemptiness is a special case of approximate range counting. The goal is therefore to derive solutions\nthat are comparable, in their dependence on n, with those that solve emptiness (or reporting)\nqueries. As just noted, this has been accomplished for the case of halfspaces. In this section we\nextend this technique to the general semi-algebraic case.\nThe simplest solution is to adapt the technique of Aronov and Har-Peled [12], which uses a\nprocedure for answering range emptiness queries as a \"black box\". Specifically, suppose we have\na data structure, D(P \u2032 ), for any set P \u2032 of n\u2032 points, which can be constructed in T (n\u2032 ) time, uses\nS(n\u2032 ) storage, and can determine whether a query range \u03b3 \u2208 \u0393 is empty in Q(n\u2032 ) time. Using\nsuch a black box, Aronov and Har-Peled show how to construct a data structure for n points using\n\u23081/\u03b4\u2309\n\u23081/\u03b4\u2309\nO((\u03b4\u03bb\u22123 + \u03a3i=1 1/i\u03bb\u22122 )S(n) log n) storage and O((\u03b4\u03bb\u22123 + \u03a3i=1 1/i\u03bb\u22122 )T (n) log n) preprocessing,\nwhere \u03bb \u2265 1 is some constant for which S(n/r) = O(S(n)/r \u03bb ) and T (n/r) = O(T (n)/r \u03bb ), for\nany r > 1. Given a range \u03b3 \u2208 \u0393, the data structure of [12] returns, in O(\u03b4\u22122 Q(n) log n) time, an\napproximate count t\u03b3 , satisfying (1 \u2212 \u03b4)|\u03b3 \u2229 P | \u2264 t\u03b3 \u2264 |\u03b3 \u2229 P |.\nThe intuition behind this approach is that a range \u03b3, containing m points of P , is expected to\ncontain mr/n points in a random sample from P of size r, and no points in a sample of size smaller\nthan n/m. The algorithm of [12] then guesses the value of a (up to a factor of 1 + \u03b4), sets r to be\nan appropriate multiple of n/m, and draws many (specifically, O(\u03b4\u22122 log n) random samples of size\nr. If \u03b3 is empty (resp., nonempty) for many of the samples then, with high probability, the guess\nfor m is too large (resp., too small). When we cannot decide either way, we are at the correct value\n\n26\n\n\fof m (up to a relative error of \u03b4). The actual details of the search are somewhat more contrived;\nsee [12] for those details.\nPlugging our emptiness data structures into the machinery of [12], we therefore obtain the\nfollowing results. In all these applications we can take \u03bb = 1, so, in the terminology used above,\nthe overall data structure uses O(\u03b4\u22122 S(n) log n) storage and O(\u03b4\u22122 T (n) log n) preprocessing.\nCorollary 7.1 Let P be a set of n points in the plane, and let \u03b1, \u03b4 be given positive parameters.\nThen we can preprocess P into a data structure of size O(\u03b4\u22122 n log n), in time O(\u03b4\u22122 n1+\u03b5 ), for any\n\u03b5 > 0, such that, for any \u03b1-fat query triangle \u2206, we can compute, in O(\u03b4\u22122 n\u03b5 ) time, for any \u03b5 > 0,\nan approximate count t\u2206 satisfying (1 \u2212 \u03b4)|\u2206 \u2229 P | \u2264 t\u2206 \u2264 |\u2206 \u2229 P |.\nCorollary 7.2 Let P be a set of n points in the plane, and let \u03b4 be a given positive parameter.\nThen we can preprocess P into a data structure of size O(\u03b4\u22122 n log n), in time O(\u03b4\u22122 n1+\u03b5 ), for\nany \u03b5 > 0, such that, for any line l, point p on l or above l, and distance d, we can compute, in\nO(\u03b4\u22122 n\u03b5 ) time, for any \u03b5 > 0, an approximate count tl,p,d of the exact number Nl,p,d of the points\nof P which lie above l and at distance at most d from p, so that (1 \u2212 \u03b4)Nl,p,d \u2264 tl,p,d \u2264 Nl,p,d .\nCorollary 7.3 Let P be a set of n points in R3 , \u0393 a collection of convex semi-algebraic ranges of\nconstant description complexity, and \u03b4 a given positive parameter. Then we can preprocess P into\na data structure of size O(\u03b4\u22122 n log n), in time O(\u03b4\u22122 n1+\u03b5 ), for any \u03b5 > 0, such that, for any query\nrange \u03b3 \u2208 \u0393, we can compute, in O(\u03b5\u22122 n1/2+\u03b5 log n) time, for any \u03b5 > 0, an approximate count t\u03b3\nof the number of points of P outside \u03b3, satisfying (1 \u2212 \u03b4)|\u03b3 c \u2229 P | \u2264 t\u2206 \u2264 |\u03b3 c \u2229 P |.\nCorollary 7.4 Let B be a set of n balls in R3 , and let \u03b4 be a given positive parameter. Then\nwe can preprocess B into a data structure of size O(\u03b4\u22122 n log n), in time O(\u03b4\u22122 n1+\u03b5 ), for any\n\u03b5 > 0, such that, for any query ray \u03c1, we can compute, in O(\u03b5\u22122 n2/3+\u03b5 log n) time, for any \u03b5 > 0,\nan approximate count t\u03c1 of the exact number N\u03c1 of the balls of B intersected by \u03c1, satisfying\n(1 \u2212 \u03b4)N\u03c1 \u2264 t\u03c1 \u2264 N\u03c1 .\nRemark: Another approach to approximate range counting has been presented in [13, 14], in\nwhich, rather than using range emptiness searching as a black box, one modifies the partition\ntree of the range emptiness data structure, and augments each of its inner nodes with a so-called\nrelative (p, \u03b5) approximation sets, which are then used to obtain the approximate count of a range.\nThis approach too can be adapted to yield efficient approximate range counting algorithms for\nsemialgebraic ranges, with a slightly improved dependence of their performance on \u03b4. We omit\ndetails of such an adaptation in this paper.\n\n8\n\nConclusion\n\nIn this paper we have presented a general approach to efficient range emptiness searching with\nsemi-algebraic ranges, and have applied it to several specific emptiness searching and ray shooting\nproblems. The present study resolves and overcomes the technical problems encountered in our\nearlier study [42], and presents more applications of the technique.\nClearly, there are many other applications of the new machinery, and an obvious direction for\nfurther research is to \"dig them up\". In each such problem, the main step would be to design a\n27\n\n\fgood test set, with associated function \u03b6(*) as small as possible, using either the general recipe or an\nappropriate ad-hoc analysis. Many specific instances of this step are likely to generate interesting\n(and often hard) combinatorial questions. For example, as already mentioned earlier, we still do\nnot know whether the complement of the union of n (congruent) cylinder in R3 can be decomposed\ninto O\u2217 (n2 ) elementary cells.\n\nReferences\n[1] P. K. Agarwal, Applications of a new space partition technique, Proc. 2nd Workshop Algorithms Data Struct., Springer-Verlag Lecture Notes in Comput. Sci., Vol. 519 (1991), pp.\n379\u2013392.\n[2] P. K. Agarwal, B. Aronov and M. Sharir, Computing envelopes in four dimensions with applications, SIAM J. Comput. 26 (1997), 1714\u20131732.\n[3] P. K. Agarwal, A. Efrat and M. Sharir, Vertical decomposition of shallow levels in 3dimensional arrangements and its applications, SIAM J. Comput. 29 (2000), 912\u2013953.\n[4] P. K. Agarwal and J. Erickson, Geometric range searching and its relatives, in: Advances in\nDiscrete and Computational Geometry (B. Chazelle, J. E. Goodman and R. Pollack, eds.),\nAMS Press, Providence, RI, 1998, pp. 1\u201356.\n[5] P. K. Agarwal and J. Matou\u0161ek, Ray shooting and parametric search, SIAM J. Comput. 22\n(1993), 794\u2013806.\n[6] P. K. Agarwal and J. Matou\u0161ek, On range searching with semi-algebraic sets, Discrete Comput.\nGeom. 11 (1994), 393\u2013418.\n[7] P. K. Agarwal and J. Matou\u0161ek, Dynamic half-space range reporting and its applications,\nAlgorithmica 13 (1995), 325\u2013345.\n[8] P. K. Agarwal, J. Matou\u0161ek, and O. Schwarzkopf, Computing many faces in arrangements of\nlines and segments, SIAM J. Comput. 27 (1998), 491\u2013505.\n[9] P. K. Agarwal, J. Pach and M. Sharir, State of the union (of geometric objects), in Proc. Joint\nSummer Research Conf. on Discrete and Computational Geometry: 20 Years Later, Contemp.\nMath. 452, AMS, 2008, pp. 9\u201348.\n[10] P. K. Agarwal and M. Sharir, Pipes, cigars, and kreplach: The union of Minkowski sums in\nthree dimensions. Discrete Comput. Geom. 24 (2000), 645\u2013685.\n[11] B. Aronov, M. de Berg and C. Gray, Ray shooting and intersection searching amidst fat convex\npolyhedra in 3-space, Comput. Geom. Theory Appl. 41 (2008), 68\u201376.\n[12] B. Aronov and S. Har-Peled, On approximating the depth and related problems, SIAM J.\nComput. 38 (2008), 899\u2013921.\n[13] B. Aronov, S. Har-Peled and M. Sharir, On approximate halfspace range counting and relative\nepsilon-approximations, Proc. 23rd ACM Sympos. Computational Geometry (2007), 327\u2013336.\n[14] B. Aronov and M. Sharir, Approximate halfspace range counting, SIAM J. Comput., to appear.\n28\n\n\f[15] G. Barequet, D.Z. Chen, O. Daescu, M. T. Goodrich and J. Snoeyink, Efficiently approximating\npolygonal paths in three and higher dimensions, Algorithmica 33 (2002), 150\u2013167.\n[16] S. Basu, R. Pollack, and M.-F. Roy, Algorithms in Real Algebraic Geometry, 2nd edition,\nSpringer-Verlag, New York, 2006.\n[17] B. Chazelle, H. Edelsbrunner, L. J. Guibas, and M. Sharir, A singly exponential stratification\nscheme for real semi-algebraic varieties and its applications, Theoret. Comput. Sci., 84 (1991),\n77\u2013105. Also in Proc. 16th Int. Colloq. on Automata, Languages and Programming (1989), pp.\n179\u2013193.\n[18] B. Chazelle and J. Friedman, A deterministic view of random sampling and its use in geometry,\nCombinatorica 10 (1990), 229\u2013249.\n[19] L. P. Chew, K. Kedem, M. Sharir, B. Tagansky and E. Welzl, Voronoi diagrams of lines in three\ndimensions under polyhedral convex distance functions, J. Algorithms 29 (1998), 238\u2013255.\n[20] O. Daescu, N. Mi, C. Shin and A. Wolff, Farthest-point queries with geometric and combinatorial constraints Comput. Geom. Theory Appl. 33(3) (2006), 174\u2013185.\n[21] O. Daescu and R. Serfling, Extremal point queries with lines and line segments and related\nproblems, Comput. Geom. Theory Appl. 32(3) (2005), 223\u2013237.\n[22] M. de Berg, Improved bounds on the union complexity of fat objects, Discrete Comput. Geom.\n40 (2008), 127\u2013140.\n[23] H. Edelsbrunner, Algorithms in Combinatorial Geometry, Springer-Verlag, Heidelberg, 1987.\n[24] A. Efrat, The complexity of the union of (\u03b1, \u03b2)-covered objects, SIAM J. Comput. 34 (2005),\n775\u2013787.\n[25] A. Efrat and M. Katz, On the union of \u03ba-curved objects, Comput. Geom. Theory Appl. 14\n(1999), 241\u2013254.\n[26] A. Efrat and M. Sharir, The complexity of the union of fat objects in the plane, Discrete\nComput. Geom. 23 (2000), 171\u2013189.\n[27] D. Haussler and E. Welzl, Epsilon nets and simplex range queries, Discrete Comput. Geom. 2\n(1987), 127\u2013151.\n[28] S. Har-Peled and M. Sharir, Relative \u03b5-approximations in geometry, manuscript, 2009.\n[29] H. Kaplan, E. Ramos and M. Sharir, Range minima queries with respect to a random permutation, and approximate range counting, Discrete Comput. Geom., to appear.\n[30] V. Koltun, Almost tight upper bounds for vertical decomposition in four dimensions, J. ACM\n51 (2004), 699\u2013730.\n[31] V. Koltun and M. Sharir, Three-dimensional Euclidean Voronoi diagrams of lines with a fixed\nnumber of orientations, SIAM J. Comput. 32 (2003), 616\u2013642.\n[32] Y. Li, P. M. Long, and A. Srinivasan, Improved bounds on the sample complexity of learning,\nJ. Comput. Syst. Sci., 62 (2001), 516\u2013527.\n\n29\n\n\f[33] J. Matou\u0161ek, Reporting points in halfspaces, Comput. Geom. Theory Appl. 2 (1992), 169\u2013186.\n[34] J. Matou\u0161ek, Efficient partition trees, Discrete Comput. Geom. 8 (1992), 315\u2013334.\n[35] J. Matou\u0161ek, J. Pach, M. Sharir, S. Sifrony and E. Welzl, Fat triangles determine linearly\nmany holes, SIAM J. Comput. 23 (1994), 154\u2013169.\n[36] N. Megiddo, Applying parallel computation algorithms in the design of serial algorithms, J.\nACM 30 (1983), 852\u2013865.\n[37] S. Mohaban and M. Sharir, Ray shooting amidst spheres in 3 dimensions and related problems,\nSIAM J. Comput. 26 (1997), 654\u2013674.\n[38] J. Pach and P. K. Agarwal, Combinatorial Geometry, Wiley Interscience, New York, 1995.\n[39] M. Sharir, Almost tight upper bounds for lower envelopes in higher dimensions, Discrete\nComput. Geom. 12 (1994), 327\u2013345.\n[40] M. Sharir and P. K. Agarwal, Davenport-Schinzel Sequences and Their Geometric Applications,\nCambridge University Press, Cambridge-New York-Melbourne, 1995.\n[41] M. Sharir and H. Shaul, Ray shooting and stone throwing with near-linear storage, Comput.\nGeom. Theory Appls. 30 (2005), 239\u2013252.\n[42] M. Sharir and H. Shaul, Ray shooting amid balls, farthest point from a line, and range emptiness searching, Proc. 16th ACM-SIAM Symp. on Discrete Algorithms (2005), 525\u2013534.\n\n30\n\n\f"}