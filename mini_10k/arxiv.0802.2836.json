{"id": "http://arxiv.org/abs/0802.2836v1", "guidislink": true, "updated": "2008-02-20T14:18:24Z", "updated_parsed": [2008, 2, 20, 14, 18, 24, 2, 51, 0], "published": "2008-02-20T14:18:24Z", "published_parsed": [2008, 2, 20, 14, 18, 24, 2, 51, 0], "title": "Minimizing Flow Time in the Wireless Gathering Problem", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0802.0914%2C0802.3391%2C0802.0493%2C0802.0900%2C0802.1378%2C0802.0601%2C0802.1762%2C0802.1147%2C0802.1709%2C0802.0350%2C0802.0426%2C0802.2695%2C0802.2759%2C0802.1683%2C0802.3452%2C0802.0646%2C0802.0863%2C0802.3112%2C0802.3135%2C0802.2836%2C0802.3846%2C0802.4118%2C0802.2381%2C0802.2074%2C0802.0882%2C0802.1446%2C0802.4161%2C0802.0872%2C0802.0263%2C0802.0162%2C0802.4055%2C0802.4411%2C0802.1111%2C0802.2376%2C0802.1890%2C0802.1040%2C0802.0497%2C0802.2705%2C0802.2499%2C0802.0584%2C0802.3142%2C0802.3995%2C0802.2706%2C0802.0437%2C0802.3148%2C0802.3016%2C0802.3237%2C0802.1204%2C0802.3579%2C0802.3752%2C0802.2463%2C0802.0895%2C0802.1671%2C0802.2492%2C0802.4314%2C0802.0978%2C0802.2800%2C0802.3395%2C0802.3174%2C0802.1497%2C0802.0511%2C0802.3308%2C0802.1239%2C0802.3669%2C0802.2332%2C0802.0853%2C0802.0858%2C0802.3531%2C0802.2726%2C0802.4261%2C0802.4303%2C0802.0728%2C0802.3206%2C0802.0814%2C0802.1065%2C0802.3737%2C0802.3966%2C0802.0529%2C0802.0354%2C0802.3607%2C0802.1457%2C0802.3743%2C0802.1419%2C0802.0060%2C0802.0187%2C0802.3852%2C0802.1703%2C0802.2644%2C0802.1610%2C0802.1069%2C0802.1514%2C0802.1345%2C0802.1723%2C0802.0662%2C0802.1579%2C0802.0225%2C0802.2550%2C0802.3272%2C0802.4424%2C0802.2177%2C0802.2890&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Minimizing Flow Time in the Wireless Gathering Problem"}, "summary": "We address the problem of efficient data gathering in a wireless network\nthrough multi-hop communication. We focus on the objective of minimizing the\nmaximum flow time of a data packet. We prove that no polynomial time algorithm\nfor this problem can have approximation ratio less than $\\Omega(m^{1/3)$ when\n$m$ packets have to be transmitted, unless $P = NP$. We then use resource\naugmentation to assess the performance of a FIFO-like strategy. We prove that\nthis strategy is 5-speed optimal, i.e., its cost remains within the optimal\ncost if we allow the algorithm to transmit data at a speed 5 times higher than\nthat of the optimal solution we compare to.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0802.0914%2C0802.3391%2C0802.0493%2C0802.0900%2C0802.1378%2C0802.0601%2C0802.1762%2C0802.1147%2C0802.1709%2C0802.0350%2C0802.0426%2C0802.2695%2C0802.2759%2C0802.1683%2C0802.3452%2C0802.0646%2C0802.0863%2C0802.3112%2C0802.3135%2C0802.2836%2C0802.3846%2C0802.4118%2C0802.2381%2C0802.2074%2C0802.0882%2C0802.1446%2C0802.4161%2C0802.0872%2C0802.0263%2C0802.0162%2C0802.4055%2C0802.4411%2C0802.1111%2C0802.2376%2C0802.1890%2C0802.1040%2C0802.0497%2C0802.2705%2C0802.2499%2C0802.0584%2C0802.3142%2C0802.3995%2C0802.2706%2C0802.0437%2C0802.3148%2C0802.3016%2C0802.3237%2C0802.1204%2C0802.3579%2C0802.3752%2C0802.2463%2C0802.0895%2C0802.1671%2C0802.2492%2C0802.4314%2C0802.0978%2C0802.2800%2C0802.3395%2C0802.3174%2C0802.1497%2C0802.0511%2C0802.3308%2C0802.1239%2C0802.3669%2C0802.2332%2C0802.0853%2C0802.0858%2C0802.3531%2C0802.2726%2C0802.4261%2C0802.4303%2C0802.0728%2C0802.3206%2C0802.0814%2C0802.1065%2C0802.3737%2C0802.3966%2C0802.0529%2C0802.0354%2C0802.3607%2C0802.1457%2C0802.3743%2C0802.1419%2C0802.0060%2C0802.0187%2C0802.3852%2C0802.1703%2C0802.2644%2C0802.1610%2C0802.1069%2C0802.1514%2C0802.1345%2C0802.1723%2C0802.0662%2C0802.1579%2C0802.0225%2C0802.2550%2C0802.3272%2C0802.4424%2C0802.2177%2C0802.2890&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We address the problem of efficient data gathering in a wireless network\nthrough multi-hop communication. We focus on the objective of minimizing the\nmaximum flow time of a data packet. We prove that no polynomial time algorithm\nfor this problem can have approximation ratio less than $\\Omega(m^{1/3)$ when\n$m$ packets have to be transmitted, unless $P = NP$. We then use resource\naugmentation to assess the performance of a FIFO-like strategy. We prove that\nthis strategy is 5-speed optimal, i.e., its cost remains within the optimal\ncost if we allow the algorithm to transmit data at a speed 5 times higher than\nthat of the optimal solution we compare to."}, "authors": ["Vincenzo Bonifaci", "Peter Korteweg", "Alberto Marchetti-Spaccamela", "Leen Stougie"], "author_detail": {"name": "Leen Stougie"}, "author": "Leen Stougie", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1145/1978782.1978788", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/0802.2836v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0802.2836v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0802.2836v1", "affiliation": "CWI", "arxiv_url": "http://arxiv.org/abs/0802.2836v1", "arxiv_comment": null, "journal_reference": "ACM Transactions on Algorithms 7(3): 33:1-33:20 (2011)", "doi": "10.1145/1978782.1978788", "fulltext": "Symposium on Theoretical Aspects of Computer Science 2008 (Bordeaux), pp. 109-120\nwww.stacs-conf.org\n\nMINIMIZING FLOW TIME IN THE WIRELESS GATHERING\nPROBLEM\n\narXiv:0802.2836v1 [cs.DS] 20 Feb 2008\n\nVINCENZO BONIFACI 1,3 , PETER KORTEWEG 2 , ALBERTO MARCHETTI-SPACCAMELA 3 ,\nAND LEEN STOUGIE 2,4\n\n1\n\nTechnische Universit\u00e4t Berlin, Institut f\u00fcr Mathematik, Berlin, Germany\n\n2\n\nEindhoven University of Technology, Dept of Mathematics and Computer Science, Eindhoven,\nThe Netherlands\nE-mail address: p.korteweg@tue.nl,l.stougie@tue.nl\n\n3\n\nUniversity of Rome \"La Sapienza\", Dept of Computer and Systems Science, Rome, Italy\nE-mail address: bonifaci@dis.uniroma1.it,alberto@dis.uniroma1.it\n\n4\n\nCWI, Amsterdam, The Netherlands\nE-mail address: stougie@cwi.nl\nAbstract. We address the problem of efficient data gathering in a wireless network\nthrough multi-hop communication. We focus on the objective of minimizing the maximum flow time of a data packet. We prove that no polynomial time algorithm for this\nproblem can have approximation ratio less than \u03a9(m1/3 ) when m packets have to be\ntransmitted, unless P = NP. We then use resource augmentation to assess the performance of a FIFO-like strategy. We prove that this strategy is 5-speed optimal, i.e., its\ncost remains within the optimal cost if we allow the algorithm to transmit data at a\nspeed 5 times higher than that of the optimal solution we compare to.\n\n1. Introduction\nWireless networks are used in many areas of practical interest, such as mobile phone\ncommunication, ad-hoc networks, and radio broadcasting. Moreover, recent advances in\nminiaturization of computing devices equipped with short range radios have given rise to\nstrong interest in sensor networks for their relevance in many practical scenarios (environment control, accident monitoring etc.) [1, 16].\nIn many applications of wireless networks data gathering is a critical operation for\nextracting useful information from the operating environment: information collected from\nmultiple nodes in the network should be transmitted to a sink that may process the data, or\nact as a gateway to other networks. We remark that in the case of wireless sensor networks\n1998 ACM Subject Classification: C.2.2: Computer-Communication Networks \u2013 Network Protocols;\nF.2.2: Analysis of Algorithms and Problem Complexity \u2013 Nonnumerical Algorithms and Problems. General\nterms: Algorithms, Design, Theory.\nKey words and phrases: wireless networks, data gathering, approximation algorithms, distributed\nalgorithms.\n\nc\nCC\n\nV. Bonifaci, P. Korteweg, A. Marchetti-Spaccamela, and L. Stougie\nCreative Commons Attribution-NoDerivs License\n\n\f110\n\nV. BONIFACI, P. KORTEWEG, A. MARCHETTI-SPACCAMELA, AND L. STOUGIE\n\nsensor nodes have limited computation capabilities, thus implying that data gathering is\nan even more crucial operation. For this reasons, data gathering in sensor networks has\nreceived significant attention in the last few years; we cite just a few contributions [1, 10].\nThe problem finds also applications in Wi-Fi networks when many users need to access a\ngateway using multi-hop wireless relay-routing [5].\nIn this paper we focus on the problem of designing and analysing simple distributed\nalgorithms that have good approximation guarantees in realistic scenarios. Namely, we\nare interested in algorithms that are not only distributed but that are fast and can be\nimplemented with limited overhead: sophisticated algorithms that require solving complex\ncombinatorial optimization problems are impractical for implementations and have mainly\ntheoretical interest.\nIn order to formally assess the performance of the proposed algorithms we focus on the\nminimization of the maximum flow, i.e. minimizing the maximum time spent in the system\nby a packet. Almost all of the previous literature considered the objective of minimizing\nthe completion time (see for example [3, 4, 5, 10, 11, 13, 17]). Flow minimization is a\nlargely used criterion in scheduling theory that more suitably allows to assess the quality\nof service provided when multiple requests occur over time [7, 8, 12, 15].\nThe problem of modelling realistic scenarios of wireless sensor networks is complicated\nby the many parameters that define the communication among nodes and influence the\nperformance of transmissions (see for example [1, 18]). In the sequel we assume that\nstations have a common clock, hence time can be divided into rounds. Each node is\nequipped with a half-duplex interface; as a result it cannot send and receive during the\nsame round. Typically, not all nodes in the network can communicate with each other\ndirectly, hence packets have to be sent through several nodes before they can be gathered\nat the sink; this is called multi-hop routing.\nThe key issue in our setting is interference. A radio signal has a transmission radius,\nthe distance over which the signal is strong enough to send data, and an interference\nradius, the distance over which the radio signal is strong enough to interfere with other\nradio signals. If node i is transmitting data to node j we have interference (or collision)\nin communication if j also receives signals from other stations at the same time. Following\nBermond et al. [5], we model the wireless network using a graph and a parameter dI . An\nedge between nodes i and j represents the fact that stations i and j are within transmission\nrange of each other. The parameter dI models the interference radius: a node j successfully\nreceives a signal if one of his neighbors is transmitting, and no other node within distance\ndI from j is transmitting in the same round. The case dI = 1 has been extensively\nconsidered earlier (see e.g. [4, 10, 11]); but we remark that assuming dI = 1 or assuming\nthat interferences/transmissions are modeled according to the well known unit disk graph\nmodel does not adequately represent interferences as they occur in practice [18].\nKumar et al. [14] give an overview of other interference models, including the socalled distance-2 interference model. The distance-2 interference model is similar to our\ninterference model with dI = 1, plus the extra constraint that no two transmitting nodes\nshould be adjacent; we observe that this requirement might pose unnecessary conditions.\nThe Wireless Gathering Problem. An instance of the Wireless Gathering Problem\n(Wgp) is given by a static wireless network which consists of several stations (nodes) and\none base station (the sink), modeled as a graph, together with the interference radius dI ;\nover time data packets arrive at stations that have to be gathered at the base station.\n\n\fMINIMIZING FLOW TIME IN THE WIRELESS GATHERING PROBLEM\n\n111\n\nA feasible solution of an instance of Wgp is a schedule without interference which\ndetermines for each packet both route and times at which it is sent. As we will see in\nSection 2 this can be modeled as a clean combinatorial optimization problem. We consider\ntwo different objectives. One is to minimize completion time, i.e., the time needed to gather\nall the packets. Another, perhaps more natural, objective is minimization of maximum\nflow time of packets, i.e., the maximum difference between release time and arrival time\nat the sink of a packet. We call these two problems C-Wgp and F-Wgp, respectively.\nRelated work. The Wireless Gathering Problem was introduced by Bermond et al.\n[5] in the context of wireless access to the Internet in villages. The authors proved that the\nproblem of minimizing the completion time is NP-hard and presented a greedy algorithm\nwith asymptotic approximation ratio at most 4. In [6] we considered arbitrary release\ntimes and proposed an on-line greedy algorithm with the same approximation ratio.\nBar-Yehuda et al. [4] considered distributed algorithms for C-Wgp. Their model\nis a special case of our model, where dI = 1 and there are no release dates. Kumar et\nal. [13] studied the more general end-to-end transmission problem, where each of the packets may have a different source and destination in the network. Under the assumption\nof a distance-2 interference model, Kumar et al. considered the objective of minimizing\nthe maximum completion time of the schedule, and presented hardness results and approximation algorithms for arbitrary graphs and disk graphs. They presented distributed\nalgorithms for packet scheduling over fixed routing paths, and used a linear program in\norder to determine the paths. By contrast, we use a shortest paths tree to fix the routing\npaths, which is easier to implement in a distributed setting.\nFlorens et al. [10] considered the minimization of the completion time of data gathering\nin a setting with unidirectional antennas. They provided a 2-approximation algorithm for\ntree networks and an optimal algorithm for line networks. Gargano and Rescigno [11] gave\na polynomial time algorithm for the special case of the same model in which each node\nhas exactly one packet to send.\nAnother related problem is to compute the throughput of a wireless network. This has\nbeen studied for example in [14]. We also observe that many papers study broadcasting\nin wireless networks [3, 17]. However, we stress that data gathering and broadcasting are\nsubstantially different tasks in the context of packet networks. In particular, the idea of\nreversing a broadcast schedule to obtain a gathering schedule (which works when data can\nbe aggregated) cannot be used.\nMain results. In Section 3 we give inapproximability results for F-Wgp. We prove\nthat F-Wgp on m packets cannot be approximated within \u03a9(m1/3 ), unless P = NP. We\nalso show that any algorithm using shortest paths in order to route the packets to the sink\nis no better than an \u03a9(m)-approximation.\nIn Section 4 we present a polynomial time resource augmented approximation algorithm for F-Wgp which is in fact an on-line algorithm. We use resource augmentation\nbecause F-Wgp is hard to approximate within a reasonable factor.\nResource augmentation was introduced in the context of machine scheduling in [12]:\nthe idea is to study the performance of on-line algorithms which are given processors faster\nthan the adversary. Intuitively, this has been done to compensate an on-line scheduler for\nits lack of future information. Such an approach has led to a number of interesting results\nshowing that moderately faster processors are sufficient to attain satisfactory performance\nguarantee for various scheduling problems, e.g. [8, 12]\n\n\f112\n\nV. BONIFACI, P. KORTEWEG, A. MARCHETTI-SPACCAMELA, AND L. STOUGIE\n\nSurprisingly, in the case of F-Wgp a modest resource augmentation allows to compensate not only the lack of future information but also the approximation hardness of\nthe problem: we present a \u03c3-speed optimal algorithm for F-Wgp and C-Wgp; \u03c3 depends\non dI and is at most 5.\nWe remark that our algorithm can be implemented using local information only: in\nparticular, it suffices that a node is informed about the state of nodes within distance\ndI + 1. On the other hand, our lower bounds hold for centralized algorithms as well.\n\n2. Mathematical preliminaries\nWe formulate Wgp as a graph optimization problem. The model we use can be seen\nas a generalization of a well-known model for packet radio networks [3, 4].\nAn instance of Wgp consists of a graph G = (V, E), a sink node s \u2208 V , a positive\ninteger dI , and a set of data packets J = {1, 2, . . . , m}. Each packet j \u2208 J has an origin\noj \u2208 V and a release date rj \u2208 Z+ .\nWe assume that time is discrete; we call a time unit a round. The rounds are numbered\n0, 1, 2, . . .. During each round a node may either be sending a packet, be receiving a packet\nor be inactive. If two nodes u and v are adjacent, then u can send a packet to v during a\nround. If node u sends a packet j to v in some round, then the pair (u, v) is said to be a\ncall from u to v. For each pair of nodes u, v \u2208 V , the distance between u and v, denoted\nby d(u, v), is the length of a shortest path from u to v in G. Two calls (u, v) and (u\u2032 , v \u2032 )\ninterfere if they occur in the same round and either d(u\u2032 , v) \u2264 dI or d(u, v \u2032 ) \u2264 dI ; otherwise\nthe calls are compatible. For this reason, the parameter dI is called the interference radius.\nThe special case of a unit interference radius corresponds to the above cited model of BarYehuda et al. [3].\nFor every packet j \u2208 J, the release date rj specifies the time at which the packet\nenters the network, i.e. packet j cannot be sent before round rj . In the off-line version the\nentire instance is completely known at time 0; in the on-line version information about a\npacket becomes known only at its release date.\nA solution for a Wgp instance is a schedule of compatible calls such that all packets\nare ultimately sent to the sink. Notice that while in principle each radio transmission can\nbroadcast the same packet to multiple destinations, in the gathering problem having more\nthan one copy of the same packet does not help, as it suffices to keep the one that will\narrive first at the sink. Thus, we assume that at any time there is a unique copy of each\npacket. Also, in the model we consider, packets cannot be aggregated.\nGiven a schedule, let xtj be the unique node holding packet j at time t. The integer\nCj := min{t : xtj = s} is called the completion time of packet j, while Fj := Cj \u2212 rj is the\nflow time of packet j. In this paper we are interested in the minimization of maxj Fj (FWgp). As an intermediate step in the analysis of F-Wgp, we also study the minimization\nof maxj Cj (C-Wgp).\nSome auxiliary notation, we denote by \u03b4j := d(oj , s) the minimum\n\u0004 number of\n\u0005 calls\nrequired for packet j to reach s. We also define \u03b3 := dI + 2, and \u03b30 := (dI + 1)/2 .\nWe analyze the performance of our algorithms using the standard worst case analysis\ntechniques of approximation ratio analysis, as well as resource augmentation. Given a\nWgp instance I and an algorithm ALG, we define C(I) as the cost of ALG and C \u2217 (I)\nas the cost of the optimal solution on I. A polynomial-time algorithm is called an \u03b1approximation if for any instance I we have C(I) \u2264 \u03b1 * C \u2217 (I).\n\n\fMINIMIZING FLOW TIME IN THE WIRELESS GATHERING PROBLEM\n\n113\n\no\nU\nG\nV\ns\nFigure 1: The construction in the proof of Theorem 3.2\nIn the resource augmentation paradigm, the algorithm is allowed to use more resources\nthan the adversary. We consider resource augmentation based on speed, in which we assume that the algorithm can schedule compatible calls with higher speed than the optimal\nalgorithm. For any \u03c3 \u2265 1, we call an algorithm a \u03c3-speed algorithm if the time used by\nthe algorithm to schedule a set of compatible calls is 1/\u03c3 time units. See [2] for more\ninformation on approximation algorithms, and [12] for more on resource augmentation.\n\n3. Inapproximability\nIn this section we prove an inapproximability result for F-Wgp. To prove this result\nwe consider the so-called induced matching problem. A matching M in a graph G is\nan induced matching if no two edges in M are joined by an edge of G. The following\nrather straightforward relation between compatible calls in a bipartite graph and induced\nmatchings will be crucial in the following.\nProposition 3.1. Let G = (U, V, E) be a bipartite graph with node sets (U, V ) and edge\nset E. Then, a set M \u2286 E is an induced matching if and only if the calls corresponding\nto edges of M , directed from U to V , are all pairwise compatible, assuming dI = 1.\nInduced Bipartite Matching (IBM)\nInstance: a bipartite graph G and an integer k.\nQuestion: does G have an induced matching of size at least k?\nWe will use the fact that the optimization version of IBM is hard to approximate:\nthere exists an \u03b1 > 1 such that it is NP-hard to distinguish between graphs with induced\nmatchings of size k and graphs in which all induced matchings are of size at most k/\u03b1.\nThe current best bound for \u03b1 is 6600/6599 [9].\nTheorem 3.2. Unless P = NP, no polynomial-time algorithm can approximate F-Wgp\nwithin a ratio better than \u03a9(m1/3 ).\nProof. Let (G, k) be an instance of IBM, G = (U, V, E). We construct a 4-layer network\nwith a unique source o (first layer), a clique on U and a clique on V (middle layers), and a\nsink s (last layer). Source o is adjacent to each node in U , and s to each node in V . The\nedges between U and V are the same as in G (see Figure 1). We set dI = 1.\nThe F-Wgp instance consists of m := (1 \u2212 1/\u03b1)\u22121 (1 + k/\u03b1)(2k + 1)k = \u0398(k3 ) packets\nwith origin o. They are divided into m/k groups of size k. Each packet in the hth group\nhas release date (k + 1)h, h = 0, . . . , m/k \u2212 1. Rounds (k + 1)h till (k + 1)(h + 1) \u2212 1\ntogether are a phase.\nWe prove that if G has an induced matching of size k, there is a gathering schedule\nof cost 2k + 1, while if G has no induced matching of size more than k/\u03b1, every schedule\nhas cost at least (2k + 1)k = (2k + 1)\u0398(m1/3 ). The theorem then follows directly.\n\n\f114\n\nV. BONIFACI, P. KORTEWEG, A. MARCHETTI-SPACCAMELA, AND L. STOUGIE\n\nAssume G has an induced matching M of size k, say (ui , vi ), i = 0 . . . k \u2212 1. Then\nconsider the following gathering schedule. In each phase, the k new packets at o are\ntransmitted, necessarily one-by-one, to layer U while old packets at layer V (if any) are\nabsorbed at the sink; then, in a single round, the k new packets move from U to V via the\nmatching edges. More precisely, each phase can be scheduled in k + 1 rounds as follows:\n1. for i = 0, . . . , k \u2212 1 execute in the ith round the two calls (o, ui ) and (vi+1 mod k , s);\n2. in the kth round, execute simultaneously all the calls (ui , vi ), i = 0, . . . , k \u2212 1.\nThe maximum flow time of the schedule is 2k + 1, as a packet released in phase h reaches\nthe sink before the end of phase h + 1.\nIn the other direction, assume that each induced matching of G is of size at most k/\u03b1.\nBy Proposition 3.1, at most k/\u03b1 calls can be scheduled in any round from layer U to layer\nV . We ignore potential interference between calls from o to U and calls from V to s; doing\nso may only decrease the cost of a schedule. As a consequence, we can assume that each\npacket follows a shortest path from o to s. Notice however that, due to the cliques on the\nlayers U and V , no call from U to V is compatible with a call from o to U , or with a call\nfrom V to s.\nLet mo and mU be the number of packets at o and U , respectively, at the beginning\nof a given phase. Also, let \u03b2 := 1 + k/\u03b1. We associate to the phase a potential value\n\u03c8 := \u03b2mo +mU , and we show that at the end of the phase the potential will have increased\nproportionally to k. Let co and cU denote the number of calls from o to U and from U\nto V , respectively, during the phase. Since a phase consists of k + 1 rounds, and in each\nround at most k/\u03b1 calls are scheduled from U to V , we have co + cU /(k/\u03b1) \u2264 k + 1, or,\nequivalently since k/\u03b1 = \u03b2 \u2212 1,\n(\u03b2 \u2212 1)co + cU \u2264 (\u03b2 \u2212 1)(k + 1).\nm\u2032o ,\n\nIf\n\u03c8\u2032 =\n\nm\u2032U are the\n\u03b2m\u2032o + m\u2032U is\n\n(3.1)\n\nnumber of packets at o and U at the beginning of the next phase, and\nthe new potential, we have\nm\u2032o = mo + k \u2212 co\nm\u2032U = mU + co \u2212 cU\n\u03c8 \u2032 \u2212 \u03c8 = \u03b2(m\u2032o \u2212 mo ) + m\u2032U \u2212 mU\n= \u03b2(k \u2212 co ) + co \u2212 cU\n= \u03b2k \u2212 (\u03b2 \u2212 1)co \u2212 cU\n\u2265 \u03b2k \u2212 (\u03b2 \u2212 1)(k + 1)\n= k \u2212 (\u03b2 \u2212 1)\n= (1 \u2212 1/\u03b1)k\n\nwhere the inequality uses (3.1).\nThus, consider the situation after m/k phases. The potential has become at least\n\u03a8 := (1 \u2212 1/\u03b1)m. By definition of the potential, this implies that at least \u03a8/\u03b2 = (1 \u2212\n1/\u03b1)(1+k/\u03b1)\u22121 m = (2k+1)k packets reside at either o or U ; in particular, they have been\nreleased but not yet absorbed at the sink. Since the sink cannot receive more than one\npacket per round, this clearly implies a maximum flow time of (2k +1)k = (2k +1)\u0398(m1/3 )\nfor one of these packets.\nIn cases where the packets are routed via shortest paths to the sink \u2013 a behavior\ncommon to many gathering protocols \u2013 the result of Theorem 3.2 can be strengthened\nfurther.\n\n\fMINIMIZING FLOW TIME IN THE WIRELESS GATHERING PROBLEM\n\n115\n\nTheorem 3.3. No algorithm that routes packets along shortest paths can approximate\nF-Wgp within a ratio better than \u03a9(m).\nProof. Consider the instance in Figure 2. The adversary releases a message at each of the\nnodes u1 , u2 , u3 at times 5i, i = 0, . . . , m/3. Any shortest paths following algorithm sends\nall messages via u, yielding maxj Cj \u2265 3m. As rj \u2264 5m/3 for each message j, we have\nmaxj Fj \u2265 3m \u2212 5m/3 = 4m/3.\nThe adversary sends each message over the path which does not contain u. We claim\nthat it is possible to do this so that all messages released at time 5i arrive at the sink in\nround 5(i + 1) + 1 latest. If the claim holds, then we have maxj Fj\u2217 \u2264 5(i + 1) + 1 \u2212 5i = 6,\nfrom which the theorem will follow.\nWe prove the claim by induction. Suppose the claim holds for messages released in\nround 5(i \u2212 1). Then, the last message released at time 5(i \u2212 1) latest is sent to the sink\nin round 5i. This message does not block any message released in round 5i. Now, the\nadversary sends the messages released in round 5i to a node adjacent to s in 3 rounds,\ni.e. in the rounds 5i, 5i + 1 and 5i + 2. Then, it requires another 3 rounds to send all 3\nmessages to the sink, i.e. the rounds 5i + 3, 5i + 4, and 5(i + 1). This proves the theorem,\nsince maxj Fj / maxj Fj\u2217 \u2265 (4m/3)/6 = 2m/9.\n\nu\n\nu1\nu2\n\ns\n\nu3\nFigure 2: No shortest path based algorithm is better than \u03a9(m)-approximate (dI = 1).\n\n4. Approximation Algorithms\nIn this section we present and analyze a FIFO algorithm for Wgp. First, we show\nthat FIFO is a 5-approximation for C-Wgp. Note that the best approximation algorithm\nknown is 4-approximate; the main interest in analyzing FIFO is that we use it as a\nsubroutine in an algorithm for F-Wgp which uses resource augmentation. Next, we prove\nthat this algorithm with resource augmentation is a \u03c3-speed optimal algorithm, for any\n\u03c3 \u2265 5, for both C-Wgp and F-Wgp.\n4.1. An approximation algorithm for C-WGP\nWe will present an approximation algorithm for C-Wgp. The algorithm we consider\nis actually a special case of a general scheme for which we can prove an upper bound on\nthe completion time [6]. In this scheme, called Priority Greedy, each packet is assigned\na unique priority based on some algorithm-specific rules. Then, in each round, packets are\nconsidered in order of decreasing priority and are sent towards the sink as long as there is\nno interference with higher priority packets.\nAlgorithm 4.1 (Priority Greedy). In every round, consider the available packets in\norder of decreasing priority, and send each next packet along a shortest path from its\ncurrent node to s, as long as this causes no interference with any higher-priority packet.\n\n\f116\n\nV. BONIFACI, P. KORTEWEG, A. MARCHETTI-SPACCAMELA, AND L. STOUGIE\n\nWe first derive upper bounds on the completion time Cj of each packet j in a Priority\nGreedy solution.\nWe say that packet j is blocked in round t if t \u2265 rj but j is not sent in round t. Note\nthat in a Priority Greedy algorithm a packet can only be blocked due to interference\nwith a higher priority packet. We define the following blocking relation on a Priority\nGreedy schedule: k \u227a j if in the last round in which j is blocked, k is the packet closest\nto j that is sent in that round and has a priority higher than j (ties broken arbitrarily).\nThe blocking relation induces a directed graph F = (J, A) on the packet set J with an\narc (k, j) for each k, j \u2208 J such that k \u227a j. Observe that, for any Priority Greedy\nschedule, F is a directed forest and the root of each tree of F is a packet which is never\nblocked. For each j let T (j) \u2286 F be the tree of F containing j, b(j) \u2208 J be the root\nof T (j), and P (j) the set of packets along the path in F from b(j) to j. Finally, define\n\u03c0j := min{\u03b4j , \u03b30 } and Rj := rj + \u03b4j \u2212 \u03c0j .\nWe have upper and lower bounds on the completion time of a packet.\nP\nLemma 4.2 ([6]). For each packet j \u2208 J, Cj \u2264 Rb(j) + (\u03b3/\u03b30 ) * i\u2208P (j) \u03c0i .\nLemma 4.3 ([6]). Let S \u2286 J be a nonempty set of packets, and let Ci\u2217 denote the\ncompletion time ofP\npacket i in some feasible schedule. Then there is k \u2208 S such that\n\u2217\nmaxi\u2208S Ci \u2265 Rk + i\u2208S \u03c0i .\n\nOur algorithm is based on a version of the Priority Greedy scheme, in which a\nhigher priority is given to packets with earlier release dates (ties broken arbitrarily). We\ncall this algorithm FIFO after the famous first-in-first-out algorithm in scheduling and\nservice systems, though in our case packets do not necessarily arrive in order of their\npriority at the sink.\nTheorem 4.4. FIFO is a (1 + \u03b3/\u03b30 )-approximation algorithm for C-Wgp.\nProof. Let j be the packet having maximum Cj , and consider T (j), the tree containing j\nin the forest induced by the blocking relation. We can apply Lemma 4.3 with S = T (j)\nto obtain\nX\nmax Ci\u2217 \u2265 rk + \u03b4k +\n\u03c0i\n(4.1)\ni\u2208T (j)\n\ni\u2208T (j)\ni6=k\n\nwhere k is some packet in T (j). On the other hand, by using Lemma 4.2,\n\u03b3 X\n\u03c0i\nCj \u2264 Rb(j) +\n\u03b30\ni\u2208P (j)\n\u03b3 X\n= rb(j) + \u03b4b(j) \u2212 \u03c0b(j) +\n\u03c0i\n\u03b30\ni\u2208P (j)\n\u03b3\n\u03b3 X\n\u2264 rb(j) +\n\u03c0i + \u03b4b(j)\nmin{\u03b4k , \u03b30 } +\n\u03b30\n\u03b30 i\u2208P (j)\n\n(4.2)\n\ni6=k\n\n\u2264\n\n\u0012\n\n\u03b3\nrk + \u03b4k +\n\u03b30\n\nX\n\ni\u2208T (j)\ni6=k\n\n\u03c0i\n\n\u0013\n\n+ \u03b4b(j) .\n\nwhere we used the fact that, by definition of FIFO, we have rb(j) \u2264 rk . Equations (4.1)\nand (4.2), and observation maxi\u2208T (j) Ci\u2217 \u2265 \u03b4b(j) prove the theorem.\n\n\fMINIMIZING FLOW TIME IN THE WIRELESS GATHERING PROBLEM\n\n117\n\nIt is straightforward to verify that 2 \u2264 \u03b3/\u03b30 \u2264 4 for all dI , while \u03b3/\u03b30 = 3 for dI = 1.\nCorollary 4.5. FIFO is a 5-approximation algorithm for C-Wgp. When dI = 1, FIFO\nis a 4-approximation for C-Wgp.\nThe bound on the approximation ratio of FIFO is slightly worse than that of a\nPriority Greedy algorithm based on Rj , which is a \u03b3/\u03b30 -approximation. In fact, we\nalso have an example on which FIFO is strictly worse than a \u03b3/\u03b30 -approximation (we\nomit the example here due to space limitations). However, we remark that FIFO is both\nnatural and simple; and, perhaps more importantly, Theorem 4.4 will be instrumental in\nproving good bounds for the minimization of maximum flow time, where we will use FIFO\nas a subroutine of our algorithm.\n4.2. A resource augmentation bound for F-WGP\nMotivated by the hardness result of Section 3, we study algorithms under resource\naugmentation. In this context we study \u03c3-speed algorithms, in which data packets are\nsent at a speed that is \u03c3 times faster than the solution we compare to.\nAlgorithm 4.6 (\u03c3-FIFO).\n1. Create a new instance I \u2032 by multiplying release dates: rj\u2032 := \u03c3rj ;\n2. Run FIFO on I \u2032 ;\n3. Speed up the schedule thus obtained by a factor of \u03c3.\nThe schedule constructed by \u03c3-FIFO is a feasible \u03c3-speed solution to the original\nproblem because of step 1. We will show that \u03c3-FIFO is optimal for both C-Wgp and\nF-Wgp, if \u03c3 \u2265 \u03b3/\u03b30 + 1. The following Lemma is crucial.\nLemma 4.7. If \u03c3-FIFO is a \u03c3-speed optimal algorithm for C-Wgp, then it is also a\n\u03c3-speed optimal algorithm for F-Wgp.\nProof. Let Fj\u2217 and Fj,\u03c3 be the flow time of data packet j in an optimal solution and in a\n\u03c3-FIFO solution, respectively, to F-Wgp and let Cj\u2217 and Cj,\u03c3 be the completion time of\ndata packet j in the same solutions. Suppose \u03c3-FIFO is a \u03c3-speed optimal algorithm for\nC-Wgp, hence we have maxj\u2208J Cj,\u03c3 \u2264 maxj\u2208J Cj\u2217 . We show that this inequality implies,\nfor any time t,\nmax Cj,\u03c3 \u2264 max Cj\u2217 .\n\nj\u2208J, rj =t\n\nj\u2208J, rj \u2264t\n\n(4.3)\n\nWe prove inequality (4.3) by contradiction. Suppose it is false, then there is an instance\nI of minimum size (number of data packets) for which it is false. Also, let t0 be the first\nround in such an instance for which it is false. By definition, \u03c3-FIFO schedules each data\npacket j definitively in round rj ; no data packet is rescheduled in a later round. I.e.,\nthe algorithm determines the completion time Cj,\u03c3 of data packet j in round rj . If the\ninequality is false, then we must have\nCi,\u03c3 >\n\nmax\n\nj\u2208J, rj \u2264t0\n\nCj\u2217 ,\n\n(4.4)\n\nfor some data packet i with ri = t0 , and because I is a minimum size instance the instance\ndoes not contain any data packets released after round t0 . But then (4.4) contradicts\n\n\f118\n\nV. BONIFACI, P. KORTEWEG, A. MARCHETTI-SPACCAMELA, AND L. STOUGIE\n\nmaxj\u2208J Cj,\u03c3 \u2264 maxj\u2208J Cj\u2217 . Using (4.3) we have\n\u0012\n\u0013\n\u0012\n\u0013\nmax Fj,\u03c3 = max\nmax Cj,\u03c3 \u2212 t \u2264 max\nmax Cj\u2217 \u2212 t\nt\nt\nj\u2208J\nj\u2208J, rj =t\nj\u2208J, rj \u2264t\n\u0012\n\u0013\n\u2264 max\nmax Fj\u2217 = max Fj\u2217 .\nt\n\nj\u2208J, rj \u2264t\n\nj\u2208J\n\nTheorem 4.8. For \u03c3 \u2265 \u03b3/\u03b30 +1, \u03c3-FIFO is a \u03c3-speed optimal algorithm for both C-Wgp\nand F-Wgp.\nProof. By Lemma 4.7, it suffices to prove that \u03c3-FIFO is \u03c3-speed optimal for C-Wgp.\nLet Cj be the completion time of any data packet j in the \u03c3-FIFO solution on instance\nI, and let Cj\u2032 be the completion time of j in the FIFO solution on the instance I \u2032 (see the\nalgorithm description). By construction Cj = Cj\u2032 /\u03c3. Let Rj\u2032 := \u03c3rj + \u03b4j \u2212 \u03c0j . Then the\nP\n\u2032\nupper bound of Lemma 4.2 applied to instance I \u2032 implies Cj\u2032 \u2264 Rb(j)\n+ (\u03c3 \u2212 1) i\u2208P (j) \u03c0i .\nHence,\n1\n\u03c3\u22121 X\n\u03c3\u22121 X\n1 \u2032\n\u03c0i \u2264 rb(j) + \u03b4b(j) +\n\u03c0i . (4.5)\n+\nCj = Cj\u2032 /\u03c3 \u2264 Rb(j)\n\u03c3\n\u03c3\n\u03c3\n\u03c3\ni\u2208P (j)\n\ni\u2208P (j)\n\nSince in any solution b(j) has to reach the sink we clearly have\n\u2217\nmax Ci\u2217 \u2265 Cb(j)\n\u2265 rb(j) + \u03b4b(j) .\n\n(4.6)\n\ni\u2208P (j)\n\nAlso, by Lemma 4.3, for some k \u2208 P (j),\nX\nX\nX\nmax Ci\u2217 \u2265 Rk +\n\u03c0 i \u2265 rk +\n\u03c0i \u2265 rb(j) +\n\u03c0i ,\ni\u2208P (j)\n\ni\u2208P (j)\n\ni\u2208P (j)\n\n(4.7)\n\ni\u2208P (j)\n\nwhere the last inequality follows from b(j) having lowest release time in P (j), by definition\nof FIFO. Combining (4.5), (4.6) and (4.7), we obtain\n1\n\u03c3\u22121\nmax Ci\u2217 =\nmax C \u2217 +\nmax C \u2217\n\u03c3 i\u2208P (j) i\n\u03c3 i\u2208P (j) i\ni\u2208P (j)\n\u0012\n\u0012\n\u0013\n\u0013\nX\n\u03c3\u22121\n1\nr\n+ \u03b4b(j) +\nrb(j) +\n\u03c0i\n\u2265\n\u03c3 b(j)\n\u03c3\ni\u2208P (j)\n\n\u03c3\u22121 X\n1\n\u03c0 i \u2265 Cj .\n= rb(j) + \u03b4b(j) +\n\u03c3\n\u03c3\ni\u2208P (j)\n\nCorollary 4.9. 5-FIFO is a 5-speed optimal algorithm for C-Wgp and F-Wgp.\n4.3. Another upper bound for FIFO\nAs we have seen in Section 3, F-Wgp is extremely hard to approximate without\nresource augmentation \u2013 no bound better than \u03a9(m1/3 ) is possible. Moreover, algorithms\nthat route along shortest paths cannot do better than \u03a9(m) (recall Theorem 3.3). In this\nsection we show that FIFO is in fact an O(m)-approximation for F-Wgp. Thus, apart\nfrom constant factors, FIFO is best possible among algorithms that use shortest paths.\n\n\fMINIMIZING FLOW TIME IN THE WIRELESS GATHERING PROBLEM\n\n119\n\nTheorem 4.10. FIFO is an O(m)-approximation for F-Wgp.\nProof. Since every packet must be gathered at the sink, clearly maxj Fj\u2217 \u2265 maxj \u03b4j \u2265\nmaxj \u03c0j . Now let j be the packet incurring the maximum flow time in the schedule\nobtained by FIFO. Since rj \u2265 rb(j) (by definition of FIFO), we have\nRb(j) \u2212 rj = rb(j) + \u03b4b(j) \u2212 \u03c0b(j) \u2212 rj \u2264 \u03b4b(j)\n\n(4.8)\n\nUsing Lemma 4.2 and (4.8), we get\nFj = Cj \u2212 rj\n\n\u03b3 X\n\u03c0i\n\u03b30\ni\u2208P (j)\n\u03b3 X\n\u03c0i\n\u2264 \u03b4b(j) +\n\u03b30\n\u2264 Rb(j) \u2212 rj +\n\ni\u2208P (j)\n\n\u03b3\n\u2264 max Fi\u2217 +\n* |P (j)| * max Fi\u2217\ni\ni\n\u03b30\n\u0012\n\u0013\n\u03b3\n\u2264\n1 + m max Fi\u2217 .\ni\n\u03b30\n\n5. Conclusion\nWe considered the wireless gathering problem with the objective of minimizing the\nmaximum flow time of data packets (F-Wgp). We showed that the simple on-line algorithm FIFO has favorable behavior: although the problem is extremely hard to approximate in general, augmenting the transmission rate by a factor of 5 allows FIFO to remain\nwithin the cost of an optimal solution for the problem without augmentation.\nIt is an open question whether optimality can be achieved by augmenting the transmission rate by a factor smaller than 5, and whether an efficient algorithm exists that\nmatches the \u03a9(m1/3 ) lower bound on the approximability of F-Wgp.\nAnother interesting set of questions concerns resource augmentation by allowing the\nalgorithms to use extra frequencies, meaning that more than one data packet can be sent\nsimultaneously over the same channel. For instance, does there exist a 5-frequency optimal\nFIFO-type algorithm?\nFor the minimization of the completion time (C-Wgp), the existence of a polynomial\ntime approximation scheme is still open. It is known that no algorithm that uses shortest\npaths to route the data packets to the sink can give an improvement over the currently\nbest approximation ratio [6]. It is a challenge to design and analyze congestion avoiding\nalgorithms with better ratios.\n\nAcknowledgments\nResearch supported by EU FET Integrated Project AEOLUS IST-15964, by FET EC\n6th FP Research Project ARRIVAL FP6-021235-2, by the Dutch BSIK-BRICKS project,\nand by MIUR-FIRB Italy-Israel project RBIN047MH9.\n\n\f120\n\nV. BONIFACI, P. KORTEWEG, A. MARCHETTI-SPACCAMELA, AND L. STOUGIE\n\nReferences\n[1] I. F. Akyildiz, W. Su, Y. Sankarasubramaniam, and E. Cayirci. Wireless sensor networks: a\nsurvey. Computer Networks, 38(4):393\u2013422, 2002.\n[2] G. Ausiello, M. Protasi, A. Marchetti-Spaccamela, G. Gambosi, P. Crescenzi, and V. Kann.\nComplexity and Approximation: Combinatorial Optimization Problems and Their Approximability Properties. Springer-Verlag, 1999.\n[3] R. Bar-Yehuda, O. Goldreich, and A. Itai. On the time-complexity of broadcast in multihop radio networks: an exponential gap between determinism and randomization. Journal of\nComputer and Systems Sciences, 45(1):104\u2013126, 1992.\n[4] R. Bar-Yehuda, A. Israeli, and A. Itai. Multiple communication in multihop radio networks.\nSIAM Journal on Computing, 22(4):875\u2013887, 1993.\n[5] J. Bermond, J. Galtier, R. Klasing, N. Morales, and S. P\u00e9rennes. Hardness and approximation\nof gathering in static radio networks. Parallel Processing Letters, 16(2):165\u2013183, 2006.\n[6] V. Bonifaci, P. Korteweg, A. Marchetti-Spaccamela, and L. Stougie. An approximation algorithm for the wireless gathering problem. In Proc. 10th Scandinavian Workshop on Algorithm\nTheory, pages 328\u2013338, 2006.\n[7] H.-L. Chan, T. W. Lam, and K.-S. Liu. Extra unit-speed machines are almost as powerful\nas speedy machines for competitive flow time scheduling. In Proc. 17th Symp. on Discrete\nAlgorithms, pages 334\u2013343, 2006.\n[8] C. Chekuri, A. Goel, S. Khanna, and A. Kumar. Multi-processor scheduling to minimize flow\ntime with epsilon resource augmentation. In Proc. 36th Symp. on Theory of Computing, pages\n363\u2013372, 2004.\n[9] W. Duckworth, D. Manlove, and M. Zito. On the approximability of the maximum induced\nmatching problem. Journal of Discrete Algorithms, 3(1):79\u201391, 2005.\n[10] C. Florens, M. Franceschetti, and R. J. McEliece. Lower bounds on data collection time in\nsensory networks. IEEE Journal on Selected Areas in Communications, 22:1110\u2013 1120, 2004.\n[11] L. Gargano and A. A. Rescigno. Optimally fast data gathering in sensor networks. In Proc.\n31st Symp. on Mathematical Foundations of Computer Science, pages 399\u2013411, 2006.\n[12] B. Kalyanasundaram and K. Pruhs. Speed is as powerful as clairvoyance. Journal of the\nACM, 47(4):617\u2013643, 2000.\n[13] V. S. Anil Kumar, M. V. Marathe, S. Parthasarathy, and A. Srinivasan. End-to-end packetscheduling in wireless ad-hoc networks. In J. I. Munro, editor, Proc. 15th Symp. on Discrete\nAlgorithms, pages 1021\u20131030, 2004.\n[14] V. S. Anil Kumar, M. V. Marathe, S. Parthasarathy, and A. Srinivasan. Algorithmic aspects\nof capacity in wireless networks. In Measurement and Modeling of Computer Systems, pages\n133\u2013144, 2005.\n[15] J. McCullough and E. Torng. SRPT optimally utilizes faster machines to minimize flow time.\nIn J. I. Munro, editor, Proc. 15th Symp. on Discrete Algorithms, pages 350\u2013358, 2004.\n[16] K. Pahlavan and A. H. Levesque. Wireless information networks. Wiley, New York, 1995.\n[17] A. Pelc. Broadcasting in radio networks. In Handbook of Wireless Networks and Mobile\nComputing, pages 509\u2013528. Wiley and Sons, 2002.\n[18] S. Schmid and R. Wattenhofer. Algorithmic models for sensor networks. In Proc. 20th Int.\nParallel and Distributed Processing Symposium, 2006.\n\nThis work is licensed under the Creative Commons Attribution-NoDerivs License. To view a\ncopy of this license, visit http://creativecommons.org/licenses/by-nd/3.0/ .\n\n\f"}