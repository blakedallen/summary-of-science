{"id": "http://arxiv.org/abs/1110.2203v1", "guidislink": true, "updated": "2011-10-10T21:27:27Z", "updated_parsed": [2011, 10, 10, 21, 27, 27, 0, 283, 0], "published": "2011-10-10T21:27:27Z", "published_parsed": [2011, 10, 10, 21, 27, 27, 0, 283, 0], "title": "Set Intersection and Consistency in Constraint Networks", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1110.5520%2C1110.3771%2C1110.3516%2C1110.6394%2C1110.2108%2C1110.3356%2C1110.0559%2C1110.0252%2C1110.5109%2C1110.6164%2C1110.5878%2C1110.6232%2C1110.0766%2C1110.0195%2C1110.5436%2C1110.6489%2C1110.1663%2C1110.1455%2C1110.0197%2C1110.3058%2C1110.0769%2C1110.4990%2C1110.3195%2C1110.1337%2C1110.5613%2C1110.2720%2C1110.4947%2C1110.5107%2C1110.5133%2C1110.5425%2C1110.4186%2C1110.0273%2C1110.1831%2C1110.0675%2C1110.2764%2C1110.5423%2C1110.5402%2C1110.3769%2C1110.1277%2C1110.5731%2C1110.5801%2C1110.3086%2C1110.6127%2C1110.2203%2C1110.4397%2C1110.4806%2C1110.6817%2C1110.3823%2C1110.2921%2C1110.6688%2C1110.4768%2C1110.5517%2C1110.6741%2C1110.3784%2C1110.2124%2C1110.2132%2C1110.1814%2C1110.0245%2C1110.1389%2C1110.5454%2C1110.5559%2C1110.3430%2C1110.4388%2C1110.2136%2C1110.1070%2C1110.4028%2C1110.5210%2C1110.3088%2C1110.0277%2C1110.4076%2C1110.5717%2C1110.6851%2C1110.4498%2C1110.4606%2C1110.5293%2C1110.3321%2C1110.1569%2C1110.3669%2C1110.2403%2C1110.4590%2C1110.3360%2C1110.2516%2C1110.4925%2C1110.2799%2C1110.0085%2C1110.5787%2C1110.3594%2C1110.2428%2C1110.6720%2C1110.3838%2C1110.1766%2C1110.1642%2C1110.3731%2C1110.5025%2C1110.4237%2C1110.5111%2C1110.1599%2C1110.5935%2C1110.2717%2C1110.3589%2C1110.0937&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Set Intersection and Consistency in Constraint Networks"}, "summary": "In this paper, we show that there is a close relation between consistency in\na constraint network and set intersection. A proof schema is provided as a\ngeneric way to obtain consistency properties from properties on set\nintersection. This approach not only simplifies the understanding of and\nunifies many existing consistency results, but also directs the study of\nconsistency to that of set intersection properties in many situations, as\ndemonstrated by the results on the convexity and tightness of constraints in\nthis paper. Specifically, we identify a new class of tree convex constraints\nwhere local consistency ensures global consistency. This generalizes row convex\nconstraints. Various consistency results are also obtained on constraint\nnetworks where only some, in contrast to all in the existing work,constraints\nare tight.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1110.5520%2C1110.3771%2C1110.3516%2C1110.6394%2C1110.2108%2C1110.3356%2C1110.0559%2C1110.0252%2C1110.5109%2C1110.6164%2C1110.5878%2C1110.6232%2C1110.0766%2C1110.0195%2C1110.5436%2C1110.6489%2C1110.1663%2C1110.1455%2C1110.0197%2C1110.3058%2C1110.0769%2C1110.4990%2C1110.3195%2C1110.1337%2C1110.5613%2C1110.2720%2C1110.4947%2C1110.5107%2C1110.5133%2C1110.5425%2C1110.4186%2C1110.0273%2C1110.1831%2C1110.0675%2C1110.2764%2C1110.5423%2C1110.5402%2C1110.3769%2C1110.1277%2C1110.5731%2C1110.5801%2C1110.3086%2C1110.6127%2C1110.2203%2C1110.4397%2C1110.4806%2C1110.6817%2C1110.3823%2C1110.2921%2C1110.6688%2C1110.4768%2C1110.5517%2C1110.6741%2C1110.3784%2C1110.2124%2C1110.2132%2C1110.1814%2C1110.0245%2C1110.1389%2C1110.5454%2C1110.5559%2C1110.3430%2C1110.4388%2C1110.2136%2C1110.1070%2C1110.4028%2C1110.5210%2C1110.3088%2C1110.0277%2C1110.4076%2C1110.5717%2C1110.6851%2C1110.4498%2C1110.4606%2C1110.5293%2C1110.3321%2C1110.1569%2C1110.3669%2C1110.2403%2C1110.4590%2C1110.3360%2C1110.2516%2C1110.4925%2C1110.2799%2C1110.0085%2C1110.5787%2C1110.3594%2C1110.2428%2C1110.6720%2C1110.3838%2C1110.1766%2C1110.1642%2C1110.3731%2C1110.5025%2C1110.4237%2C1110.5111%2C1110.1599%2C1110.5935%2C1110.2717%2C1110.3589%2C1110.0937&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "In this paper, we show that there is a close relation between consistency in\na constraint network and set intersection. A proof schema is provided as a\ngeneric way to obtain consistency properties from properties on set\nintersection. This approach not only simplifies the understanding of and\nunifies many existing consistency results, but also directs the study of\nconsistency to that of set intersection properties in many situations, as\ndemonstrated by the results on the convexity and tightness of constraints in\nthis paper. Specifically, we identify a new class of tree convex constraints\nwhere local consistency ensures global consistency. This generalizes row convex\nconstraints. Various consistency results are also obtained on constraint\nnetworks where only some, in contrast to all in the existing work,constraints\nare tight."}, "authors": ["R. H. C. Yap", "Y. Zhang"], "author_detail": {"name": "Y. Zhang"}, "author": "Y. Zhang", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1613/jair.2058", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1110.2203v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1110.2203v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.AI", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.AI", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1110.2203v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1110.2203v1", "arxiv_comment": null, "journal_reference": "Journal Of Artificial Intelligence Research, Volume 27, pages\n  441-464, 2006", "doi": "10.1613/jair.2058", "fulltext": "Journal of Artificial Intelligence Research 27 (2006) 441-464\n\nSubmitted 03/06; published 12/06\n\nSet Intersection and Consistency in Constraint Networks\nYuanlin Zhang\n\nyzhang@cs.ttu.edu\n\nDepartment of Computer Science, Texas Tech University\nLubbock, TX 79414 USA\n\narXiv:1110.2203v1 [cs.AI] 10 Oct 2011\n\nRoland H. C. Yap\n\nryap@comp.nus.edu.sg\n\nDepartment of Computer Science, National University of Singapore\n3 Science Drive 2, Singapore 117543\n\nAbstract\nIn this paper, we show that there is a close relation between consistency in a constraint\nnetwork and set intersection. A proof schema is provided as a generic way to obtain consistency properties from properties on set intersection. This approach not only simplifies the\nunderstanding of and unifies many existing consistency results, but also directs the study\nof consistency to that of set intersection properties in many situations, as demonstrated\nby the results on the convexity and tightness of constraints in this paper. Specifically,\nwe identify a new class of tree convex constraints where local consistency ensures global\nconsistency. This generalizes row convex constraints. Various consistency results are also\nobtained on constraint networks where only some, in contrast to all in the existing work,\nconstraints are tight.\n\n1. Introduction\nA constraint network consists of a set of variables over finite domains and a system of\nconstraints over those variables. An important task is to find an assignment for all the\nvariables such that all the constraints in the network are satisfied. If such an assignment\nexists, the network is satisfiable or globally consistent, and the assignment is called a solution.\nThe problem of determining the global consistency of a general constraint network is NPcomplete. Usually a search procedure is employed to find a solution. In practice, due\nto efficiency considerations, the search is usually equipped with a filtering algorithm that\nprunes values of a variable or the combinations of values of a certain number of variables\nthat cannot be part of any solution. The filtering algorithm can make a constraint network\nlocally consistent in the sense that a consistent assignment of some variables can always be\nextensible to a new variable. An important and interesting question on local consistency is:\nIs the local consistency obtained sufficient to determine the global consistency of\nthe network without further search? As the filtering algorithm is of polynomial\ncomplexity, a positive answer would mean that the network can be solved in\npolynomial time.\nMuch work has been done to explore the relationship between local and global consistency in particular and the properties of local consistency in general. One direction is to\nmake use of the topological structure of a constraint network. A classical result is that\nwhen the graph of a constraint network is a tree, arc consistency of the network is sufficient\nto ensure its global consistency (Freuder, 1982).\nc 2006 AI Access Foundation. All rights reserved.\n\n\fZhang & Yap\n\nThe second direction1 makes use of semantic properties of the constraints. For monotone\nconstraints, path consistency implies global consistency (Montanari, 1974). Van Beek and\nDechter (1995) generalize monotone constraints to a larger class of row convex constraints.\nDechter (1992) shows that a certain level of consistency in a constraint network whose\ndomains are of limited size ensures global consistency. Later, Van Beek and Dechter (1997)\nstudy the consistency of constraint networks with tight and loose constraints.\nThe existing work along the two approaches has used specific and different techniques to\nstudy local and global consistency. In particular, there is little commonality in the details\nof the existing work. In much of the existing work, the techniques and consequently the\nproofs given are developed specifically for the results concerned.\nIn this paper, we show how much of this work can be connected together through a\nnew approach to studying consistency in a constraint network. We unite two seemingly\ndisparate areas: the study of set intersection on special sets and the study of k-consistency\nin constraint networks. In fact, k-consistency can be expressed in terms of set intersection,\nwhich allows one to obtain relationships between local and global consistency in a constraint\nnetwork through the properties of set intersection on special sets. The main result of this\napproach is a proof schema that can be used to lift results from set intersection, which are\nrather general, to particular consistency results on constraint networks. One benefit of the\nproof schema lies in that it provides a modular way to greatly simplify the understanding\nand proofs of consistency results. This benefit is considerable as often the proofs of many\nexisting results are complex and \"hard-wired\". Using this new approach, we show that\nit is precisely the various properties of set intersection that are the key to those results.\nFurthermore, the proofs become mechanical.\nThe following sketch illustrates briefly the use of our approach. One property of set\nintersection is that if the intersection of every pair (2) of tree convex sets (see Section 3) is\nnot empty, the intersection of the whole collection of these sets is not empty too. From this\nproperty, we can see that the local information on the intersection of every pair of sets gives\nrise to the global information on the intersection of all sets. Intuitively, this relationship\nbetween the local and global information corresponds to obtaining global consistency from\nlocal consistency. The proof schema is used to lift the result on tree convex sets to the\nfollowing consistency result. For a binary constraint network of tree convex constraints,\n(2+1)-consistency (path consistency) implies global consistency of the network.\nThe usefulness of our new set-based approach is twofold. Firstly, it gives a clear picture\nof many of the existing results. For example, many well known results in the second direction\nbased on semantic properties of the constraints (including van Beek & Dechter, 1995, 1997),\nas well as results from the first direction, can be shown with easy proofs that make use of\nset intersection properties. Secondly, by directing the study of consistency to that of set\nintersection properties, it helps improve some of the existing results and derive new results\nas demonstrated in sections 5\u20137.\nThis paper is organized as follows. In Section 2, we present necessary notations and\nconcepts. In Section 3, we focus on properties of the intersection of tree convex sets and sets\n1. There is a difference between the work concerned here and that studying the tractability of constraint\nlanguages (e.g., Schaefer, 1978; Jeavons, Cohen, & Gyssens, 1997). The latter considers the problems\nwhose constraints are from a fixed set of relations while the former studies constraint networks with\nspecial properties.\n\n442\n\n\fSet Intersection and Consistency in Constraint Networks\n\nwith cardinality restrictions. In Section 4, we develop a characterization of k-consistency\nutilizing set intersection and the proof schema that offers a generic way to obtain consistency\nresults from set intersection properties. The power of the new approach is demonstrated\nby new consistency results on the convexity and tightness of constraints. Tree convex\nconstraints are studied in Section 5. On a constraint network of tree convex constraints,\nlocal consistency ensures global consistency, as a result of the intersection property of tree\nconvex sets. The tightness of constraints is studied in Section 6. Thanks to the intersection\nproperties of sets with cardinality restriction, a relation between local and global consistency\nis identified on weakly tight constraint networks in Section 6.1. These networks require only\nsome, rather than all, constraints to be m-tight, improving the tightness result by van Beek\nand Dechter (1997). With the help of relational consistency, we show that global consistency\ncan be achieved through local consistency on weakly tight constraint networks in Section 6.2.\nThis type of result on tightness was not known before. In Section 6.3, we explore when\na constraint network is weakly m-tight and present several results about the number of\ntight constraints sufficient or necessary for a network to be weakly tight. To make full use\nof the tightness of the constraints in a network, we propose dually adaptive consistency\nin Section 6.4. Dually adaptive consistency of a constraint network is determined by its\ntopology and the tightest relevant constraint on each variable. For completeness, we include\nin Section 7 results on tightness and tree convexity that are based on relational consistency.\nWe conclude in Section 8.\n\n2. Preliminaries\nA constraint network R is defined as a set of variables N = {x1 , x2 , . . . , xn }; a set of finite\ndomains D = {D1 , D2 , . . . , Dn } where domain Di , for all i \u2208 1..n, is a set of values that\nvariable xi can take; and a set of constraints C = {cS1 , cS2 , . . . , cSe } where Si , for all i \u2208 1..e,\nis a subset of {x1 , x2 , . . . , xn } and each constraint cSi is a relation defined on the domains\nof all variables in Si . Without loss of generality, we assume that, for any two constraints\ncSi , cSj \u2208 C (i 6= j), Si 6= Sj . The arity of constraint cSi is the number of variables in Si .\nFor a variable x, Dx denotes its domain. In the rest of this paper, we will often use network\nto mean constraint network.\nAn instantiation of variables Y = {x1 , . . . , xj } is denoted by \u0101 = (a1 , . . . , aj ) where\nai \u2208 Di for i \u2208 1..j. An extension of \u0101 to a variable x(\u2208\n/ Y ) is denoted by (\u0101, u) where\nu \u2208 Dx . An instantiation of a set of variables Y is consistent if it satisfies all constraints in\nR that do not involve any variables outside Y .\nA constraint network R is k-consistent if and only if for any consistent instantiation \u0101\nof any distinct k \u2212 1 variables, and for any new variable x, there exists u \u2208 Dx such that\n(\u0101, u) is a consistent instantiation of the k variables. R is strongly k-consistent if and only if\nit is j-consistent for all j \u2264 k. A strongly n-consistent network is called globally consistent.\nFor more information on constraint networks and consistency, the reader is referred to\nthe work by Mackworth (1977), Freuder (1978) and Dechter (2003).\n\n443\n\n\fZhang & Yap\n\n3. Properties on Set Intersection\nIn this section, we develop a number of set intersection results that will be used later to\nderive results on consistency. The set intersection property that we are concerned with is:\nGiven a collection of l finite sets, under what conditions is the intersection of\nall l sets not empty?\nHere, we are particularly interested in the intersection property on sets with two interesting and useful restrictions: convexity and cardinality.\n3.1 Tree Convex Sets\nGiven a collection of sets, some structures can be associated with the elements of the sets\nsuch that we can obtain interesting and useful set intersection results. Here we study the\nsets whose elements form a tree. We first introduce the concept of a tree convex set.\nDefinition 1 Given a discrete set U and a tree T with vertices U , a set A \u2286 U is tree\nconvex under T if there exists a subtree of T whose vertices are A.\nA subtree of a tree T is a subgraph of T that is a tree. Next we define when we can say\na collection of sets are tree convex.\nDefinition 2 Given a collection of discrete sets S, let the union of the sets of S be U . The\nsets of S are tree convex under a tree T on U if every set of S is tree convex under T .\nA collection of sets are said tree convex if there exists a tree such that the sets in the\ncollection are tree convex under the tree.\nb\n\na\n\n........ .....\n...... ... ...........\n......\n......\n......\n......\n.\n.\n.\n.\n......\n......\n......\n.....\n......\n.\n.\n.\n.\n.\n......\n....\n.\n.\n.\n..\n.\n..\n\n.. ..\n...... ...........\n......\n......\n.....\n......\n......\n......\n......\n......\n.\n.\n.\n.\n......\n...\n.\n.\n.\n.\n.\n......\n...\n....\n......\n\nb\n\nc\n\n..\n....\n....\n....\n.\n.\n.\n....\n...\n....\n\na\n\nc.........\n\nd\n\nd\n\n.\n..................\n.........\n...\n... .....\n...\n...\n..\n...\n.\n...\n...\n.\n...\n..\n...\n...\n.\n.\n.\n.\n...\n.\n...\n.\n... .....\n... .....\n... ..\n... ...\n......\n....\n\ne\n\ne\n\n(a)\n\nf\n\n(b)\n\nFigure 1: (a) A tree with nodes {a, b, c, d, e} (b) A partial order with nodes {a, b, c, d, e, f }\n\nExample 1 Consider a set U = {a, b, c, d, e} and a tree given in Figure 1. The subset\n{a, b, c, d} is tree convex under the given tree. So is the set {b, a, c, e} since the elements of\nthe set are a subtree. However, {b, c, e} is not tree convex as its elements do not form a\nsubtree of the given tree.\nExample 2 Consider S = {{1, 9}, {3, 9}, {5, 9}}. If we construct a tree on {1, 3, 5, 9} with\n9 being the root and 1, 3, 5 being its children, each set of S covers the nodes of exactly one\nbranch of the tree. Hence, the sets of S are tree convex.\n444\n\n\fSet Intersection and Consistency in Constraint Networks\n\nTree convex sets have the following intersection property.\nLemma 1 (Tree Convex Sets Intersection)\nGiven a finite collection T\nof finite sets S,\nT\nassume the sets of S are tree convex.\nE 6= \u2205 iff for all E1 , E2 \u2208 S, E1 E2 6= \u2205.\nE\u2208S\nProof. Let l be the number of sets in S, and T a tree such that, for each Ei \u2208 S, Ei is\nthe vertices of a subtree Ti of T . Assuming T is a rooted tree, every Ti (i \u2208 1..l) is a rooted\ntree whose root is exactly the node nearest to the root of T . Let ri denote the root of Ti\nfor i \u2208 1..l. T\nEi 6= \u2205, we want to show the intersection of the trees {Ti | i \u2208 1..l} is not\nTo prove\ni\u22081..l\n\nempty. The following propositions on subtrees are necessary in our main proof.\nProposition 1 Let T1 , T2 be two subtrees of a tree T , and T = T1 \u2229 T2 . T is a tree.\nIf T = \u2205, it is a trivial tree. Now let T 6= \u2205. Since T is a portion of T1 , there is no circuit in\nit. It is only necessary to prove T is connected. That is to show, for any two nodes u, v \u2208 T ,\nthere is a path between them. u, v \u2208 T1 and u, v \u2208 T2 respectively imply that there exist\npaths P1 : u, . . . , v in T1 and P2 : u, . . . , v in T2 respectively. Recall that there is a unique\npath from u to v in T and that T1 and T2 are subtrees of T . Therefore, P1 and P2 cover\nthe same nodes and edges, and thus they are in T , the intersection of T1 and T2 . P1 is the\npath we want.\nProposition 2 Let T1 , T2 be two subtrees of a tree T , and T = T1 \u2229 T2 . T is not empty if\nand only if at least one of the roots of T1 and T2 is in T .\nLet r1 and r2 be the roots of T1 and T2 respectively. If r1 \u2208 T , the proposition is correct.\nOtherwise, we show r2 \u2208 T . Assume the contrary r2 \u2208\n/ T . Clearly, r1 6= r2 . Let r be the\nfirst common ancestor of r1 and r2 and v the root of T (T is a tree by Proposition 1). We\nhave paths P1 : r1 , . . . , v in T1 ; P2 : r2 , . . . , v in T2 ; and P3 : r, . . . , r1 , and P4 : r, . . . , r2 in\nT . Since v is a descendant of both r1 and r2 , P1 and P2 share only the vertex v. Since r is\nthe first common ancestor of r1 and r2 , P3 and P4 share only the vertex r. It can also be\nverified that P3 and P1 share only r1 , P2 and P4 share only r2 , and no vertex is shared by\neither P1 and P4 or P2 and P3 . Hence, the closed walk P3 P1 P2\u2032 P4\u2032 , where P2\u2032 and P4\u2032 are the\nreverse of P2 and P4 respectively, is a simple circuit. It contradicts that there is no circuit\nin T .\nFurther, we have the following observation.\nProposition 3 Let T be a tree with root r, and T1 and T2 two subtrees of T with roots r1\nand r2 respectively. Let r1 be not closer to r than r2 , and T the intersection of T1 and T2 .\nr1 is the root of T if T is not empty.\nThe proposition is true if r1 = r2 . Now let r1 be farther to r than r2 . Clearly r2 \u2208\n/ T1 and\nthus r2 \u2208\n/T\nT . By Proposition 2, r1 is the root of T .\nTi . We are ready now to prove our main result T 6= \u2205. Select a tree Tmax from\nLet T =\ni\u22081..l\n\nT1 , T2 , . . . , Tl such that its root rmax is the farthest away from r of T among the roots of\n445\n\n\fZhang & Yap\n\nthe concerned trees. In accordance with Proposition 3, that Tmax intersect with every other\ntree implies that rmax is a node of every Ti (i \u2208 1..l). Therefore, rmax \u2208 T . \u2737\nRemark. A partial order can be represented by an acyclic directed graph. It is tempting to further generalize tree convexity to partial convexity in the following way.\nGiven a set U and a partial order on it, a set A \u2282 U is partially convex if and only if A\nis the set of nodes of a connected subgraph of the partial order. Given a collection of sets S,\nlet the union of the sets of S be U . The sets of S are partially convex if there is a partial\norder on U such that every set of S is partially convex under the partial order.\nHowever, with this generalization, we can not get a result similar to Lemma 1, which\nis illustrated by the following example. Consider three sets {c, b, d}, {d, f, a} and {a, e, c}\nthat are the nodes of the diagram given in Figure 1(b). These sets are partially convex and\nintersect pairwise. However, the intersection of all three sets is empty.\n3.2 Sets with Cardinality Restrictions\nAnother useful restriction that we will place on sets is to restrict their cardinalities. As a\nspecial case, consider a set with only one element a. If its intersection with every other set\nis not empty, we are able to conclude that every set contains a, and thus the intersection of\nall the sets is not empty. Generally, if a set has at most m elements, we have the following\nresult.\nLemma 2 Consider a finite collection of l sets S={E1 , E2 , . . . , El } and a number m < l.\nAssume one set E1 \u2208 S has at most m elements.\n\\\nE 6= \u2205\nE\u2208S\niff the intersection of E1 and any other m sets of S is not empty.\nProof. The necessary condition is immediate.\nTo prove the sufficient condition, we show that the intersection of E1 and any other\nk (m \u2264 k \u2264 l \u2212 1) sets of S is not empty by induction on k. When k = m, the lemma\nis true according to its assumption. Assuming that the intersection of E1 and any other\nk \u2212 1 (\u2265 m) sets of S is not empty, we show that the intersection of E1 and any other k\nsets of S is not empty. Without loss of generality, the subscripts of the k sets are numbered\nfrom 2 to k + 1. For 2 \u2264 i \u2264 k + 1, let Ai be the intersection of E1 and the k sets except Ei :\nAi = E1 \u2229 . . . \u2229 Ei\u22121 \u2229 Ei+1 \u2229 . . . \u2229 Ek+1 .\nFirst, we show by contradiction that there exist some i, j \u2208 2..k + 1, i 6= j such that\nAi \u2229 Aj 6= \u2205. Assume Ai \u2229 Aj = \u2205 for all distinct i and j. According to the construction of\nAi 's,\n[\nE1 \u2287\nAi ,\ni\u22082..k+1\n\n446\n\n\fSet Intersection and Consistency in Constraint Networks\n\nand |Ai | \u2265 1 by the induction assumption. Hence,\nX\n|E1 | \u2265\n|Ai | \u2265 k > m,\ni\u22082..k+1\n\nwhich contradicts |E1 | \u2264 m.\nSince Ai \u2229 Aj 6= \u2205 for some i, j \u2208 2..k + 1, i 6= j,\n\\\nAi \u2229 Aj =\nEi 6= \u2205.\ni\u22081..k+1\n\n\u2737\nThis lemma leads to the following corollary where the intersection of every m + 1 sets\nis not empty.\nCorollary 1 (Small Set Intersection) Consider a finite collection of l sets S and a\nnumber m < l. Assume one set of S has at most m elements.\n\\\nE 6= \u2205\nE\u2208S\niff the intersection of any m + 1 sets of S is not empty.\nThere are other specialized versions (Zhang & Yap, 2003) of Lemma 2 on which some\nexisting works by van Beek and Dechter (1997) and David (1993) are based.\nWhen the sets of concern have a cardinality larger than a certain number, the intersection\nof these sets is not empty under some conditions. The reader may refer to the Large Sets\nIntersection lemma (Zhang & Yap, 2003) for more details.\n\n4. Set Intersection and Consistency\nIn this section, we first relate consistency in constraint networks to set intersection. Using\nthis result, we present a proof schema that allows us to study the relationship between local\nand global consistency from the properties of set intersection.\nUnderlying the concept of k-consistency is whether an instantiation of some variables\ncan be extended to a new variable such that all relevant constraints on the new variable are\nsatisfied. A relevant constraint on a variable xi with respect to Y is a constraint that contains\nonly xi and some variables of Y . Given an instantiation of Y , each relevant constraint allows\na set (possibly empty) of values for the new variable. We call this set an extension set. The\nsatisfiability of all relevant constraints depends on whether the intersection of their extension\nsets is non-empty (see Lemma 3).\nDefinition 3 Given a constraint cSi , a variable x \u2208 Si , and any instantiation \u0101 of Si \u2212{x},\nthe extension set of \u0101 to x with respect to cSi is defined as\nEi,x (\u0101) = {b \u2208 Dx | (\u0101, b) satisf ies cSi }.\nAn extension set is trivial if it is empty; otherwise it is non-trivial.\n447\n\n\fZhang & Yap\n\nRecall that Dx refers to the domain of variable x. Throughout the paper, it is often\nthe case that an instantiation \u0101 of S \u2212 {x} is already given, where S \u2212 {x} is a superset\nof Si \u2212 {x}. Let b\u0304 be the instantiation obtained by restricting \u0101 to the variables only in\nSi \u2212 {x}. For ease of presentation, we continue to use Ei,x (\u0101), rather than Ei,x (b\u0304), to denote\nthe extension of b\u0304 to x under constraint cSi . To make the presentation easy to follow, some\nof the three parameters i, \u0101, and x may be omitted from an expression hereafter whenever\nthey are clear from the context. For example, given an instantiation \u0101 and a new variable\nx, to emphasize different extension sets with respect to different constraints cSi , we write\nEi instead of Ei,x (\u0101) to simply denote an extension set.\nExample 3 Consider a network with variables {x1 , x2 , x3 , x4 , x5 }:\ncS1 =\ncS2 =\ncS3 =\ncS4 =\nD1 = D4\n\n{(a, b, d), (a, b, a)}, S1 = {x1 , x2 , x3 };\n{(b, a, d), (b, a, b)}, S2 = {x2 , x4 , x3 };\n{(b, d), (b, c)},\nS3 = {x2 , x3 };\n{(b, a, d), (b, a, a)}, S4 = {x2 , x5 , x3 };\n= D5 = {a}, D2 = {b}, D3 = {a, b, c, d}.\n\nLet \u0101 = (a, b, a) be an instantiation of variables Y = {x1 , x2 , x4 }. The relevant constraints\nto x3 are cS1 , cS2 , and cS3 . cS4 is not relevant since it contains x5 outside Y . The extension\nsets of \u0101 to x3 with respect to the relevant constraints are:\nE1 (\u0101) = {d, a}, E2 (\u0101) = {d, b}, E3 (\u0101) = {d, c}.\nThe intersection of the extension sets above is not empty, implying that \u0101 can be extended\nto satisfy all relevant constraints cS1 , cS2 and cS3 .\nLet \u0101 = (b, c) be an instantiation of {x2 , x3 }. E1,x1 (\u0101) = \u2205 and thus it is trivial. In\nother words, with a trivial extension set, an instantiation can not be extended to satisfy the\nconstraint of concern.\nThe relationship between k-consistency and set intersection is characterized by the following lemma.\nLemma 3 (Set Intersection and Consistency; Lifting) A constraint network R is kconsistent if and only if for any consistent instantiation \u0101 of any (k \u2212 1) distinct variables\nY = {x1 , x2 , . . . , xk\u22121 }, and any new variable xk ,\n\\\nEij 6= \u2205\nj\u22081..l\n\nwhere Eij is the extension set of \u0101 to xk with respect to cSij , and cSi1 , . . . , cSil are all relevant\nconstraints.\nProof. It follows directly from the definition of k-consistency in Section 2 and the\ndefinition of extension set. \u2737\nThe insight behind this lemma is to examine consistency from the perspective of set\nintersection.\n448\n\n\fSet Intersection and Consistency in Constraint Networks\n\nExample 4 Consider again Example 3. We would like to check whether the network is 4consistent. Consider the instantiation \u0101 of Y again. This is a trivial consistent instantiation\nsince the network doesn't have a constraint among the variables in Y . To extend it to x,\nwe need to check the first three constraints cS1 to cS3 . The extension is feasible because\nthe intersection of E1 , E2 , and E3 is not empty. We show the network is 4-consistent, by\nexhausting all consistent instantiations of any three variables. Conversely, if we know the\nnetwork is 4-consistent, we can immediately say that the intersection of the three extension\nsets of \u0101 to x is not empty.\nThe usefulness of this lemma is that it allows consistency information to be obtained from\nthe intersection of extension sets, and vice versa. With this point of view of consistency as\nset intersection, some results on set intersection properties, including all those in Section 3,\ncan be lifted to get various consistency results for a constraint network through the following\nproof schema.\nProof Schema\n1. (Consistency to Set) From a certain level of consistency in the constraint network,\nwe derive information on the intersection of the extension sets by Lemma 3.\n2. (Set to Set) From the local intersection information of sets, information may be\nobtained on intersection of more sets.\n3. (Set to Consistency) From the new information on intersection of extension sets,\nhigher level of consistency is obtained by Lemma 3.\n4. (Formulate conclusion on the consistency of the constraint network). \u2737\nIn the proof schema, step 1 (consistency to set), step 3 (set to consistency), and step 4 are\nstraightforward in many cases. So, Lemma 3 is also called the lifting lemma because once we\nhave a set intersection result (step 3), we can easily have consistency results on a network\n(step 4). The proof schema establishes a direct relationship between set intersection and\nconsistency properties in a constraint network.\nIn the following sections, we demonstrate how the set intersection properties and the\nproof schema are used to obtain new results on the consistency of a constraint network.\n\n5. Global Consistency of Tree Convex Constraints\nThe notion of extension set plays the role of a bridge between the restrictions to set(s) and\nproperties of special constraints. In this section, we consider the constraints arising from\ntree convex sets (Lemma 1). A constraint is tree convex if all the extension sets with respect\nto the constraint are tree convex.\nDefinition 4 A constraint cS is tree convex with respect to xi and a tree Ti on Di if and\nonly if the sets in\nA = {ES,xi | ES,xi is a non-trivial extension of some instantiation of S \u2212 {xi }}\nare tree convex under Ti . A constraint cS is tree convex under a tree T on the union of the\ndomains of the variables in S, if it is tree convex with respect to every x \u2208 S under T .\nExample 5 Tree convex constraints can occur where there is a relationship among the\nvalues of a variable. Consider the constraint on the accessibility of a set of facilities by a\n449\n\n\fZhang & Yap\n\nset of persons. The personnel include a network engineer, web server engineer, application\nengineer, and a team leader. The relationship among the staff is that the team leader\nmanages the rest, which forms a tree structure shown in Figure 2(b). There are different\naccessibilities to a system which includes basic access, access to the network routers, access\nto the web server, and access to the file server. In order to access the routers and servers,\none has to have the basic access right, implying a tree structure (Figure 2(c)) on the access\nrights. The constraint is that the team leader is able to access all the facilities while each\nengineer can access only the corresponding facility (e.g., the web server engineer can access\nthe web server). This tree convex constraint is shown in Figure 2(a) where the rows are\nnamed by the initials of the engineers and the columns by the initials of the access rights. The\ntree on the union of personnel and the accessibilities can be obtained from their respective\ntrees (in Figure 2(b) and (c)) by adding an edge, say between web server and leader. Note\nthat the constraint in Figure 2(a) is not row convex.\n\nn\nw\na\nl\n\nr\n*\n\nw\n\nf\n\n*\n*\n\n*\n\n(a)\n\n*\n*\n\nb\n*\n*\n*\n*\n\nleader\n\nnetwork\nengineer\n\nweb application\nengineer engineer routers\n\n(b)\n\nbasic access\n\nweb\nserver\n\nfile\nserver\n\n(c)\n\nFigure 2: A tree convex constraint between accessibilities and staffs\nExample 6 Tree convex constraints can also be used to model some scene labeling problems\nnaturally as shown by Zhang and Freuder (2004).\nDefinition 5 A constraint network is tree convex if there exists a tree T on the union of\nall its variable domains such that all constraints are tree convex under T .\nTree convex constraints generalize row convex constraints introduced by van Beek and\nDechter (1995).\nDefinition 6 A constraint cS is row convex with respect to x if and only if the sets in\nA = {ES,x | ES,x is a non-trivial extension of some instantiation of S \u2212 {x}}\nare tree convex under a tree where any node has at most one child. Such a tree is called a\ntotal ordering. A constraint cS is row convex if, under a total ordering on the union of the\ninvolved domains, it is row convex with respect to every x \u2208 S.\nExample 7 For the constraint c in Example 5 to be row convex, b (basic access) has to be\nthe neighbor of r (routers), w (web server), and f (file server). However, in a total ordering,\na value can be the neighbor of at most two other values. Hence, c is not row convex but is\ntree convex.\nBy the property of set intersection on tree convex sets and the proof schema, we have\nthe following consistency results on tree convex constraints.\n450\n\n\fSet Intersection and Consistency in Constraint Networks\n\nTheorem 1 (Tree Convexity) Let R be a network of constraints with arity at most r\nand strongly 2(r \u2212 1) + 1 consistent. If R is tree convex then it is globally consistent.\nProof. The network is strongly 2(r \u2212 1) + 1 consistent by assumption. We prove that\nthe network is k consistent for any k \u2208 {2r, . . . , n}.\nConsider any instantiation \u0101 of any k \u2212 1 variables and any new variable x. Let the\nnumber of relevant constraints be l. For each relevant constraint, there is one extension set\nof \u0101 to x. So, we have l extension sets. If the intersection of all l sets is not empty, we have\na value for x such that the extended instantiation satisfies all relevant constraints.\n(Consistency to Set) Consider any two of the l extension sets: E1 and E2 . The two\ncorresponding constraints involve at most 2(r\u22121)+1 variables since the arity of a constraint\nis at most r and each of the two constraints has x as a variable. By the consistency lemma,\nthat R is (2(r \u2212 1) + 1)-consistent implies that the intersection of E1 and E2 is not empty.\n(Set to Set) Since all relevant constraints are tree convex under the given tree, the\nextension sets of \u0101 to x are tree convex. Henceforth, the fact that every two of the extension\nsets intersect shows that the intersection of all l extension sets is not empty, by the tree\nconvex sets intersection lemma.\n(Set to Consistency) From the consistency lemma, we have that R is k-consistent. \u2737\nSince a row convex constraint is tree convex, this result generalizes the consistency result\non row convex constraints reported by van Beek and Dechter (1995). It is interesting to\nobserve that the latter can be lifted from a set intersection results on convex sets (Zhang\n& Yap, 2003).\nA question raised by Theorem 1 is how efficient it is to check whether a constraint\nnetwork is tree convex. Yosiphon (2003) has proposed an algorithm to recognize a tree\nconvex constraint network in polynomial time.\n\n6. Consistency and the Tightness of Constraints\nIn this section, we will present various consistency results on the networks with m-tight\nconstraints.\n6.1 Global Consistency on Weakly Tight Networks\nThe tightness of constraints has been related to the consistency of a constraint network\nby van Beek and Dechter (1997). The m-tightness of a constraint is characterized by the\ncardinality of the extension sets in the following way.\nDefinition 7 (van Beek & Dechter, 1997) A constraint cSi is m-tight with respect to x \u2208 Si\niff for any instantiation \u0101 of Si \u2212 {x},\n|Ei,x | \u2264 m or |Ei,x | = |Dx |.\nA constraint cSi is m-tight iff it is m-tight with respect to every x \u2208 Si .\nGiven an instantiation, if its extension set with respect to x is the same as the domain\nof variable x, i.e., |Ei,x | = |Dx |, the instantiation is supported by all values of x and thus\neasy to be satisfiable. Hence, in the definition above, these instantiations do not affect the\nm-tightness of a constraint.\n451\n\n\fZhang & Yap\n\ny\n\nx\na\n\na\n\nb\n\nb\n\nc\n\nc\n\n.......\n..........\n....... ...........\n...... ..........\n...\n....\n...\n.\n...\n...\n.............................................................................................................\n..\n.\n.\n.............\n.\n.\n...\n.\n.\n.\n.\n.\n.......\n... ..............\n...\n...\n............ .................... ....\n...\n...\n.\n.\n.\n.\n.\n.\n....\n.\n..\n...... ................... ...\n.\n..\n.\n.\n.\n.\n.\n...\n.\n.\n.\n............\n.. .............\n..\n.\n..\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.....\n..\n........\n.\n.\n.\n.\n...\n...\n.\n.\n.\n.\n.\n.\n.\n...\n...\n...\n...\n.\n.\n.\n.\n.\n.\n.\n.\n.\n............\n..\n...\n.\n..\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n........ ...\n...\n.\n.\n.\n.\n.\n..\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n...\n...\n.......\n.........................\n...\n...\n...\n...\n...\n...\n.................\n...\n...\n.\n...\n.....\n.....\n...\n..\n.\n.\n.\n.\n.\n.\n.\n.\n.\n..................\n.................\n\nFigure 3: The constraint cxy is 2-tight or 3-tight\nExample 8 Consider the constraint cxy in Figure 3 where Dx = Dy = {a, b, c}. An edge\nin the graph denotes that its ends are allowed by cxy . It can be verified that for the values\nof x, their extension sets have a cardinality of 2, and for values of y, their extension sets\nhave a cardinality from 1 to 3. Hence, cxy can be said 2-tight or 3-tight but not 1-tight.\nWe are specially interested in the following tightness.\nDefinition 8 A constraint cSi is properly m-tight with respect to x \u2208 Si iff for any instantiation \u0101 of Si \u2212 {x},\n|Ei,x | \u2264 m.\nA constraint cSi is properly m-tight iff it is properly m-tight with respect to every x \u2208 Si .\nA constraint is m-tight if it is properly m-tight. The converse might not be true. For\nexample, the constraint x \u2264 y, where x \u2208 {1, 2, . . . , 10} and y \u2208 {1, 2, . . . , 10}, is 9-tight\nbut not properly 9-tight. It is properly 10-tight since |Ex (10)| = 10 when y = 10.\nNext, we define a special constraint network which allows us to make a more accurate\nconnection between the tightness of constraints and the consistency of the network.\nDefinition 9 A constraint network is weakly m-tight at level k iff for every set of variables\n{x1 , x2 , . . . , xl }(k \u2264 l < n) and a new variable x, there exists a properly m-tight constraint\namong the relevant constraints on x with respect to {x1 , x2 , . . . , xl }.\n\nx1\n\nx2\n\ny1\n\nx3\n\nx4\n\ny3\n\ny2\n\ny4\n(b)\n\n(a)\n\nFigure 4: Two constraint networks. A thin edge represents a properly m-tight constraint\nwhile a thick one represents a non properly m-tight constraint\n\n452\n\n\fSet Intersection and Consistency in Constraint Networks\n\nExample 9 The network in Figure 4(a) is weakly tight at level 3 because for any three\nvariables and a fourth variable, one of the relevant constraints is properly m-tight. The\nnetwork in Figure 4(b) is not weakly tight at level 3 since for {y1 , y3 , y4 } and y2 , none of\nthe relevant constraints cy1 y2 and cy4 y2 is properly m-tight.\nBy the small set intersection corollary (Corollary 1), we have the following consistency\nresult on a weakly m-tight network.\nTheorem 2 (Weak Tightness) If a constraint network R with constraints of arity at\nmost r is strongly ((m+1)(r\u22121)+1)-consistent and weakly m-tight at level ((m+1)(r\u22121)+1),\nit is globally consistent.\nProof. Let j = (m+1)(r\u22121)+1. The constraint network R will be shown to be k-consistent\nfor all k (j < k \u2264 n).\nLet Y = {x1 , . . . , xk\u22121 } be a set of any k \u2212 1 variables, and \u0101 be an instantiation of\nall variables in Y . Consider any additional variable xk . Without loss of generality, let the\nrelevant constraints be cS1 , . . . , cSl , and Ei be the extension set of \u0101 to xk with respect to\ncSi for i \u2264 l.\n(Consistency to Set) Consider any m + 1 of the l extension sets. All the corresponding\nm + 1 constraints contain at most (m + 1)(r \u2212 1) + 1 variables including xk . Since R is\n((m+1)(r\u22121)+1)-consistent, by the set intersection and consistency lemma, the intersection\nof the m + 1 extension sets is not empty.\n(Set to Set) The network is weakly m-tight at level ((m + 1)(r \u2212 1) + 1). So, there must\nbe a properly m-tight constraint among the relevant constraints cS1 , . . . , cSl . Let it be cSi .\nWe know its extension set |Ei | \u2264 m. Since the intersection of every m + 1 of the extension\nsets is not empty, all l extension sets share a common element by the small set intersection\ncorollary.\n(Set to Consistency) By the lifting lemma, R is k-consistent. \u2737\nIn a similar fashion, the main tightness result by van Beek and Dechter (1997), where\nall the constraints are required to be m-tight, can be lifted from the small sets intersection\ncorollary by Zhang and Yap (2003). This uniform treatment of lifting set intersection results\nto consistency results is absent from the existing works (e.g., Dechter, 1992; van Beek &\nDechter, 1995, 1997; David, 1993).\nThe tightness result by van Beek and Dechter (1997) requires every constraint to be\nm-tight. The weak tightness theorem, on the other hand, does not require all constraints\nto be properly m-tight. The following example illustrates this difference.\nExample 10 For a weakly m-tight network, we are interested in its topological structure.\nThus we have omitted the domains of variables here. Consider a network with five variables\nlabeled {1, 2, 3, 4, 5}. In this network, for any pair of variables and for any three variables,\nthere is a constraint. Assume the network is already strongly 4-consistent.\nSince the network is already strongly 4-consistent, we can simply ignore the instantiations\nwith less than 4 variables. This is why we introduce the level at which the network is weakly\nm-tight. The interesting level here is 4. Table 1 shows the relevant constraints for each\npossible extension of four instantiated variables to the other one. In the first row, 1234 \u2192 5\n453\n\n\fZhang & Yap\n\nExtension\n1234 \u2192 5,\n2345 \u2192 1,\n3451 \u2192 2,\n4512 \u2192 3,\n5123 \u2192 4,\n\n125*,\n231 ,\n132 ,\n123 ,\n124 ,\n\n135 ,\n241 ,\n142 ,\n143*,\n134*,\n\n145 ,\n251*,\n152*,\n153 ,\n154 ,\n\nRelevant constraints\n235, 245, 345, 15+,\n341, 351, 451, 21 ,\n342, 352, 452, 12 ,\n243, 253, 453, 13 ,\n234, 254, 354, 14 ,\n\n25 ,\n31 ,\n32+,\n23+,\n24 ,\n\n35 ,\n41 ,\n42 ,\n43 ,\n34+,\n\n45\n51+\n52\n53\n54\n\nTable 1: Relevant constraints in extending an instantiation of four variables to a new variable\n\nstands for extending the instantiation of variables {1, 2, 3, 4} to variable 5. Entries in its\nsecond column denote a constraint. For example, 125 denotes c125 . If the constraints on\n{1, 2, 5} and {1, 3, 4} (suffixed by * in the table) are properly m-tight, the network is weakly\nm-tight at level 4. Alternatively, if the constraints {1, 5}, {2, 3} and {3, 4} (suffixed by +)\nare properly m-tight, the network will also be weakly m-tight. The tightness result by van\nBeek and Dechter (1997) requires all binary and ternary constraints to be m-tight.\n6.2 Making Weakly Tight Networks Globally Consistent\nConsider the weak tightness theorem in the previous section. Generally, a weakly m-tight\nnetwork might not have the level of local consistency required by the theorem. It is tempting\nto enforce such a level of consistency on the network to make it globally consistent. However,\nthis procedure may result in constraints with higher arity.\nExample 11 Consider a network with variables {x, x1 , x2 , x3 }. Let the domains of x1 , x2 , x3\nbe {1, 2, 3}, the domain of x be {1, 2, 3, 4}, and the constraints be that all the variables should\ntake different values: x 6= x1 , x 6= x2 , x 6= x3 , x1 6= x2 , x1 6= x3 , x2 6= x3 . This network is\nstrongly path consistent. In checking the 4-consistency of the network, we know that the\ninstantiation (1, 2, 3) of {x1 , x2 , x} is consistent but can not be extended to x3 . To enforce 4-consistency, it is necessary to introduce a ternary constraint on {x1 , x2 , x} to make\n(1, 2, 3) no longer a valid instantiation.\nTo make the new network globally consistent, the newly introduced constraints with\nhigher arity may in turn require higher local consistency in accordance with Theorem 2.\nTherefore, it is difficult to predict an exact level of consistency (variable based) to enforce\non the network to make it globally consistent.\nIn this section, relational consistency will be used to make a constraint network globally\nconsistent.\nDefinition 10 (van Beek & Dechter, 1997) A constraint network is relationally m-consistent\niff given (1) any m distinct constraints cS1 , . . . , cSm , and (2) any x \u2208 \u2229m\ni=1 Si , and (3) any\nm\nconsistent instantiation \u0101 of the variables in (\u222ai=1 Si \u2212 {x}), there exists an extension of\n\u0101 to x such that the extension is consistent with the m relations. A network is strongly\nrelationally m-consistent if it is relationally j-consistent for every j \u2264 m.\n454\n\n\fSet Intersection and Consistency in Constraint Networks\n\nVariables are no longer of concern in relational consistency. Instead, constraints are the\nbasic unit of consideration. Intuitively, relational m-consistency concerns whether all m\nconstraints agree at every one of their shared variables. It makes sense because different\nconstraints interact with each other exactly through the shared variables.\nRelational 1-, and 2-consistency are also called relational arc, and path consistency,\nrespectively.\nUsing relational consistency, we are able to obtain global consistency by enforcing local\nconsistency on the network.\nProposition 4 The weak m-tightness at level k of a constraint network is preserved by the\nprocess of enforcing relational consistency on the network.\nProof. Let R be the constraint network before relational consistency enforcing and R1\nthe network after consistency enforcing. Clearly, R and R1 have the same set of variables.\nConsider any set of variables {x1 , x2 , . . . , xl } (k \u2264 l < n) and a new variable x. Since\nR is weakly m-tight at level k, there exists a properly m-tight constraint c among the\nrelevant constraints on x with respect to {x1 , x2 , . . . , xl }. Enforcing relational consistency\non a constraint network will only tighten a constraint. So, the proper m-tightness of c is\npreserved. Hence, R1 is weakly m-tight at level k. \u2737\nNow we have the main result of this subsection.\nTheorem 3 A constraint network weakly m-tight at level (m + 1)(r \u2212 1) + 1, where r is\nthe maximal arity of the constraints of the network, is globally consistent after it is made\nstrongly relationally (m + 1)-consistent.\nProof. By Proposition 4, the network is still weakly m-tight at (m + 1)(r \u2212 1) + 1 after\nenforcing strong relational (m + 1)-consistency on it. Let r1 be the maximal arity of the\nconstraints of the new network after consistency enforcing. Clearly, r1 \u2265 r. So, the network\nis m-tight at (m + 1)(r1 \u2212 1) + 1 by Proposition 6. The theorem follows immediately from\nTheorem 8 in Section 7. \u2737\nThe implication of this theorem is that as long as we have certain properly m-tight constraints on certain combinations of variables, the network can be made globally consistent\nby enforcing relational (m + 1)-consistency.\nWe have the following observation on the weak m-tightness of a network.\nProposition 5 A constraint network is weakly m-tight at any level if the constraint between\nevery two variables in the network is properly m-tight.\nProof. Consider any level k, any set of variables Y = {x1 , x2 , . . . , xl }(k \u2264 l \u2264 n), and\nany new variable x \u2208\n/ Y . Since the constraint between any two variables is properly m-tight,\nthe constraint c{x1 ,x} on x1 and x is properly m-tight. Therefore, there is a properly m-tight\nconstraint c{x1 ,x} among the relevant constraints after an instantiation of Y . \u2737\nThis observation shows that the proper m-tightness of the constraints on every two\nvariables is sufficient to determine the level of local consistency needed to ensure global\nconsistency of a constraint network.\nRemark. Proposition 5 assumes there is a constraint between every two variables. If\nthere is no constraint between some two variables, a universal constraint is introduced. In\n455\n\n\fZhang & Yap\n\nthis case, we can enforce path consistency on the constraint network to make the binary\nconstraints tighter so that lower level of relational consistency is needed to make the network\nglobally consistent.\n6.3 Properties of Weakly Tight Constraint Networks\nSince for a weakly m-tight constraint network global consistency can be achieved through\nlocal consistency, it is interesting and important to investigate the conditions for a network\nto be weakly m-tight. Although Proposition 5 shows a sufficient condition, it requires every\nbinary constraint be tight. As we can see from Example 9(a), the required number of\ntight constraints for a constraint network to be weakly tight can be further reduced. This\nsubsection is focused on the understanding of the relationship between the number of tight\nconstraints and the weak tightness of a constraint network.\nThere is a strong relationship among different levels of weak tightness in a network.\nProposition 6 If a constraint network is weakly m-tight at level k for some m, it is weakly\nm-tight at any level j > k.\nProof. For any j > k, we prove that the network is weakly tight at level j. That is, for\nany set of variables Y = {x1 , . . . , xj }(k \u2264 j < n) and a new variable x, we show that there\nexists an m-tight relevant constraint on x with respect to Y . Since the network is weakly\ntight for k < j, there exists an m-tight relevant constraint on x with respect to a subset of\nY . This constraint is still relevant on x with respect to Y , and thus the one we look for. \u2737\nIn the following, we present two results on sufficient conditions for a constraint network\nto be weakly m-tight.\nTheorem 4 Given a constraint network (V, D, C) and a number m, if for every x \u2208 V ,\nthere are at least n \u2212 2 properly m-tight binary constraints on it, then the network is weakly\nm-tight at level 2.\nProof. For any two variables {x, y} and a third variable z, the relevant constraints\non z with respect to {x, y} are cxz and cyz . We know that the number of relevant binary\nconstraints on z with respect to V is n \u2212 1. That n \u2212 2 of them are properly m-tight means\neither cxz or cyz must be properly m-tight. \u2737\nIn fact, for the weak tightness at a higher level, we need fewer constraints to be m-tight\nas shown by the following result.\nTheorem 5 A constraint network (V, D, C) is weakly m-tight at level k if for every x \u2208 V ,\nthere are at least n \u2212 k properly m-tight binary constraints on it.\nProof. For any set Y of k variables and a new variable z, we show that there is a\nproperly m-tight relevant constraint on z with respect to Y . Otherwise, none of the k\nbinary constraints on z is properly m-tight. Since the total number of the relevant binary\nconstraints on z is n \u2212 1, the number of properly m-tight binary constraints on z is at most\n(n \u2212 1)\u2212 k, which contradicts that z is involved in n \u2212 k properly m-tight binary constraints.\n\u2737\n456\n\n\fSet Intersection and Consistency in Constraint Networks\n\nThis result reveals that for a constraint network to be weakly tight at level k, it could\nneed as few as n(n \u2212 k + 1)/2 properly m-tight binary constraints, in contrast to the result\nin Theorem 3 where all binary constraints are required to be properly m-tight.\nAn immediate question is: What is the minimum number of m-tight constraints required\nfor a network to be weakly tight? It can be answered by the following result on weak\ntightness at level 2.\nTheorem 6 Given a number m, for a constraint network to be weakly m-tight at level 2,\nit needs at least\nn(n \u2212 1)/2 \u2212 2\u230an/3\u230b if n = 0, 1 (mod 3)\nor otherwise\n(n \u2212 2)(3n \u2212 1)/6\nm-tight binary or ternary constraints.\nProof.\nGiven a network, its weak m-tightness at level 2 depends on the tightness\nof only binary and ternary constraints. Among all weakly m-tight (at level 3) constraint\nnetworks with n variables, let R1 be the network that has a minimal set of properly m-tight\nbinary and ternary constraints.\nIn the following exposition, a constraint is denoted by its scope. For example, we\nuse {u, v, w} and {u, v} to denote ternary constraint c{u,v,w} and binary constraint cuv\nrespectively. A constraint is non-properly-m-tight if it is not properly m-tight.\nThe proof consists of three steps.\nStep 1. While preserving the weak m-tightness of R1 and the number of properly mtight constraints in R1 , we modify, if necessary, the proper m-tightness of some constraints\nin R1 such that, for any properly weak m-tight constraint {u, v, w}, none of the binary\nconstraints {u, v}, {v, w}, and {u, w} is properly m-tight.\nTo modify the proper m-tightness of a constraint c in R1 is to remove c from the network\nand introduce a new constraint on the same set of variables of c with the desirable proper\nm-tightness.\nWe claim that, for any properly m-tight constraint {u, v, w}, at most one of {u, v},\n{v, w}, and {u, w} is properly m-tight. Otherwise, at least two of them are properly mtight, which means {u, v, w} can be modified to be not properly m-tight, contradicting the\nminimality of the number of properly m-tight constraints in R1 .\nAssume {u, v} is properly m-tight. Since {u, v, w} is properly m-tight, there should be\na reason for {u, v} to be properly m-tight. The only reason is that there exists another\nvariable z such that one of {u, z} and {v, z} is not properly m-tight, and {u, v, z} is not\nproperly m-tight, too. See Figure 5. Without loss of generality, let {u, z} be properly mtight, implying that the constraint {v, z} is not properly m-tight. The constraint {z, v, w}\nis properly m-tight because {v, z} and {v, w} are not properly m-tight.\nNow we modify the constraints {u, v, w} and {z, v, w} to be not properly m-tight and\nmodify the constraints {z, v} and {v, w} to be properly m-tight. This modification preserves\nthe number of properly m-tight constraints in R1 and the weak m-tightness of R1 .\nStep 2. While preserving the weak m-tightness of R1 and the number of properly m-tight\nconstraints in R1 , we next modify, if necessary, the proper m-tightness of the constraints\nin R1 such that no two properly m-tight ternary constraints share any variables.\n457\n\n\fZhang & Yap\n\n........\n.......... ...............\n....\n......\n...... .......................z\n....\n..\nu ..........................................................................\n.\n....... .... ..... .. ....\n....\n.. ...................\n........... ........\n....\n... .................. .......\n..\n...\n. . ..\n..\n...\n.\n... w ......... v ...\n...\n... ..\n...\n....\n.....\n.......\n...........................\n\nFigure 5: The circle represents the properly m-tight ternary constraint {u, v, w}. An edge\nbetween two variables indicates a binary constraint. A tick besides an edge means\nit is properly m-tight while a cross means it is not.\n\nCase 1: Two properly m-tight constraints {u, v, w} and {u, v, z} share two variables\n{u, v}. See Figure 6(a). Since {w, u} and {u, z} are not properly m-tight (in terms of step\n1), {w, u, z} has to be properly m-tight. Since {w, v} and {v, z} are not m-tight, {w, v, z}\nhas to be m-tight.\nWe modify the four ternary constraints to be not properly m-tight and modify the four\nbinary constraints {w, u}, {u, z}, {z, v} and {v, w} to be properly m-tight. This preserves\nthe weak m-tightness of R1 and the number of properly m-tight constraints in R1 .\n\nw\nv\n\nu\n\nx\n\nz\n\nz\n\nv\nw\n\nw\n\nv\n\nu\n\nu\n\nv\n\nu\n\nw\n\nx\n\ny\n\ny\n\n(b)\n\n(a)\n\nFigure 6: A dotted ellipse together with the three variables inside it represents a ternary\nconstraint. (a) Left: Two ternary constraints share two variables {u, v}. Right:\nThe ternary constraints have to be properly m-tight. (b) Left: Two ternary\nconstraints share one variable w. Right: The ternary constraints have to be\nproperly m-tight.\nCase 2: Two properly m-tight constraints {u, v, w}, and {w, x, y} share one variable\nw. Since {u, w} and {w, x} are not properly m-tight, {u, w, x} has to be properly m-tight.\nSince {v, w} and {w, y} are not properly m-tight, {v, w, y} has to be properly m-tight.\nSimilarly, {u, w, y} and {v, w, x} have to be properly m-tight. Now, if we modify the four\nbinary constraints {u, w}, {w, x}, {v, w}, and {w, y} to be properly m-tight and the six\nternary constraints to be non-properly-m-tight, the new network is still weakly m-tight\nwith fewer m-tight constraints. This contradicts the minimality of the number of properly\nm-tight constraints in R1 . Hence, case 2 is not possible.\nStep 3. As a result of the first two steps, in the network R1 , the scopes of the properly\nm-tight ternary constraints are disjoint, and the binary constraint between any two variables\nof a properly m-tight ternary constraint is not properly m-tight.\n458\n\n\fSet Intersection and Consistency in Constraint Networks\n\nLet B (and T respectively) be the set of the properly m-tight binary (and ternary\nrespectively) constraints of R1 .\nAssume |T | = k. Since it is difficult to count B, we count the maximum number of\nnon-properly-m-tight binary constraints in R1 . We have 3k non-properly-m-tight binary\nconstraints due to T . We should not have any non-properly-m-tight binary constraints\nbetween a variable in T and a variable outside T . Let V \u2032 be the variables outside T . We\nhave |V \u2032 | = n \u2212 3k. The other non-properly-m-tight constraints fall only between variables\nin V \u2032 . Since R1 is weakly tight at level 2, there is no two non-properly-m-tight constraints\non any variable in V \u2032 . Hence, there are at most (n \u2212 3k)/2 non-properly-m-tight constraints\nif n \u2212 3k is even, and otherwise at most (n \u2212 3k \u2212 1)/2 ones. So the number, denoted by \u03b4,\nof the properly m-tight constraints in R1 would be the sum of the cardinality of T and B:\n\u03b4 = k + (n(n \u2212 1)/2 \u2212 3k \u2212 \u230a(n \u2212 3k)/2\u230b) = n(n \u2212 1)/2 \u2212 2k \u2212 \u230a(n \u2212 3k)/2\u230b.\nThe fact that \u03b4 is minimal implies that k should be maximized. If n is a multiple of 3, the\nnumber of properly m-tight constraints is n(n \u2212 1)/2 \u2212 2n/3; if n is 1 more than a multiple\nof 3, the number is n(n \u2212 1)/2 \u2212 2(n \u2212 1)/3; otherwise the number is (n \u2212 1)(3n \u2212 1)/6. \u2737\nThis result shows that under the concept of k-consistency we still need a significant\nnumber of constraints to be properly m-tight to predict the global consistency of a network\nin terms of constraint tightness.\n6.4 Dually Adaptive Consistency\nA main purpose of our characterization of weak m-tightness of a network is to help identify a\nconsistency condition under which a solution of a network can be found without backtracking, i.e., efficiently. We have studied constraint tightness under the concept of k-consistency\nin the previous subsections. In this subsection, we introduce dually adaptive consistency to\nachieve backtrack free search by taking into account both the tightness of constraints and\nthe topological structure of a network.\nThe idea of adaptive consistency (Dechter & Pearl, 1987) is to enforce only the necessary\nlevel of consistency on each part of a network to ensure global consistency. It assumes an\nordering on the variables. For any variable x, it only requires that a consistent instantiation\nof the relevant variables before x can be consistently extensible to x. Other variables do not\nplay any direct role on x and thus are ignored when dealing with x.\nWe first introduce some notations used in adaptive consistency.\nThe width of a variable with respect to a variable ordering is the number of constraints\ninvolving x and only variables before x. See Figure 7 for an example.\nGiven a network, a variable ordering, and a variable x, the directionally relevant constraints on x are those involving x and only variables before x. In the following, DR(x) is\nused to denote the directionally relevant constraints on x, and S used to denote all variables\noccurring in the constraints of DR(x).\nThe constraints of DR(x) are consistent on x if and only if, for any consistent instantiation \u0101 of S \u2212 {x}, there exists u \u2208 Dx such that (\u0101, u) satisfies all the constraints of\nDR(x).\nWe next define the adaptive consistency of a network.\n\n459\n\n\fZhang & Yap\n\nx ...\n..... ...1\n.....\n.....\n...\n....\n...\n...\n.\n...\n.\n..\n...\n.\n.\n.\n...\n... x2\n.... .....\n.\n... ...\n..\n... ....\n...\n... ..\n..\n.\n.\nx\n... ...\n.\n3\n.\n.\n... ...\n...\n...\n...\n....\n....\n...\n.... .........\n...\n...\nx4\n...\n....\n.....\n......\n.\nx5\n\nFigure 7: The variables {x1 , x2 , . . . , x5 } are ordered according to their subscripts. For example, x1 is before x2 . The width of x2 is 1.\n\nDefinition 11 Given a constraint network and an ordering on its variables, the network is\nadaptively consistent if and only if for any variable x, its directionally relevant constraints\nare consistent on x.\nThe adaptive consistency is presented as an algorithm by Dechter (2003) although, for\nthe purpose of this paper, we prefer a declarative characterization.\nFor an adaptively consistent network, a solution can be found without backtracking.\nProposition 7 Given a constraint network and an ordering on its variables, a backtrack\nfree search is ensured if the network is adaptively consistent.\nProof. Assume we have found a consistent instantiation of the first k variables (in terms\nof the given ordering). They can be consistently extended to xk+1 because all directionally\nrelevant constraints on xk+1 are consistent on xk+1 . \u2737\nWhen a network is not adaptively consistent, the algorithm by Dechter (2003, p. 105)\ncan be used to enforce adaptive consistency on it.\nAdaptive consistency is not only more accurate in estimating the local consistency that\nensures global consistency, but also makes intuitive the algorithms to enforce consistency\nand to find a solution.\nWith the knowledge of constraint tightness presented in the previous subsections, we\nknow that for a network to be adaptively consistent, it is sufficient to make sure that only\nsome, not all, directionally relevant constraints on a variable are consistent. We are now in\na position to define dually adaptive consistency of a constraint network.\nDefinition 12 Consider a constraint network and an ordering of its variables. For any\nvariable x in the network, let cx be one of the tightest directionally relevant constraints on\nx and cx be properly mx -tight. The network is dually adaptively consistent if and only if\n1) for any variable x whose width is not greater than mx , its directionally relevant\nconstraints are consistent on it, and\n2) for any variable x whose width is greater than mx , cx is consistent with every other\nmx directionally relevant constraints on x.\nThanks to the set intersection result of Lemma 2, we have the main result on dually\nadaptive consistency.\n460\n\n\fSet Intersection and Consistency in Constraint Networks\n\nTheorem 7 Given a constraint network and an ordering of its variables, a backtrack free\nsearch is ensured if it is dually adaptively consistent.\nProof. We only need to prove that the network is adaptively consistent: For any\nvariable x, its directionally relevant constraints DR(x) are consistent on x. Let S be the\nvariables involved in DR(x). Consider any consistent instantiation \u0101 of S \u2212 {x}. We show\nthat there exists u \u2208 Dx such that (\u0101, u) satisfies constraints in DR(x). Let l be the number\nof constraints in DR(x), and let cx be one of the tightest constraint in DR(x) with proper\ntightness mx . For any constraint ci \u2208 DR(x), let \u0101's extension set to x under ci be Ei . It\nis sufficient to show\n\u2229c \u2208DR(x) Ei 6= \u2205.\ni\n\nWe know cx is consistent with every other mx constraints. Hence, Ex , \u0101's extension set\nunder cx , intersects with every other mx extension sets of \u0101. Lemma 2 implies that\n\u2229c \u2208DR(x) Ei 6= \u2205.\ni\n\n\u2737\nBy this theorem, we need only the tightest of the directionally relevant constraint on\neach variable, totally n \u2212 1 such constraints, to predict the global consistency of a network.\nThis could be considered a significant improvement over the results in the previous two\nsubsections.\nCompared with the result by Dechter and Pearl (1987), this theorem also provides a\nlower level (the smaller of tightness or width) of consistency ensuring global consistency.\nWhen a constraint network is not dually adaptively consistent with respect to a variable\nordering, it can be made so by enforcing the required consistency on each variable, in the\nreverse order of the given variable ordering. To make the procedure more efficient, we\nshould chose a better variable ordering, depending on both the topological structure of the\nnetwork and the tightness of the constraints.\n\n7. Tightness and Convexity Revisited\nThe consistency results derived from small set intersection and tree convex set intersection\nin Section 5 and Section 6.1 can be rephrased in a relational consistency setting. For\nexample, a new version of weak tightness based on relational consistency is given as follows.\nTheorem 8 (Weak Tightness) If a constraint network R of constraints with arity of at\nmost r is strongly relationally (m + 1)-consistent and weakly m-tight at level of (m + 1)(r \u2212\n1) + 1, it is globally consistent.\nProof. Let j = (m + 1)(r \u2212 1) + 1. The constraint network R will be shown to be\nk-consistent for all k (j < k \u2264 n).\nLet Y = {x1 , . . . , xk\u22121 } be a set of any k \u22121 variables, and \u0101 a consistent instantiation of\nall variables in Y . Consider any new variable xk . Without loss of generality, let cS1 , . . . , cSl\nbe the relevant constraints on xk , and Ei the extension set of \u0101 to xk with respect to cSi\nfor i \u2264 l.\n\n461\n\n\fZhang & Yap\n\n(Consistency to Set) Consider any m + 1 of the l extension sets. Since R is relationally\n(m + 1)-consistent, the intersection of m + 1 extension sets is not empty.\n(Set to Set) The network is weakly m-tight. So, there must be a properly m-tight\nconstraint in the relevant constraints cS1 , . . . , cSl . Let it be cSi . Its extension set |Ei | \u2264 m.\nSince every m + 1 of the extension sets have a non-empty intersection, all l extension sets\nshare a common element by the small set intersection result (Corollary 1).\n(Set to Consistency) From the lifting lemma, we have that R is k-consistent. \u2737\nCompared with the weak tightness theorem in Section 6.1, the exposition of the result\nis neater and the proof is simpler.\nFor completeness, we also include here a new version of the tree convex theorem using\nrelational consistency. The proof is omitted since it is a simplified version of the one in\nSection 5 as hinted by the proof above.\nTheorem 9 (Tree Convexity) Let R be a tree convex constraint network. R is globally\nconsistent if it is strongly relationally path consistent.\n\n8. Conclusion\nThrough the lifting lemma and proof schema, we have shown that set intersection results can\nbe easily lifted to consistency results in a constraint network. There are a few advantages\nfor this approach of studying consistency.\nFirstly, although this approach does not offer a \"completely new\" way to prove consistency results, it does provide a uniform way to understand many seemingly different results\non the impact of convexity and tightness on global consistency. In addition to the results\nshown here, some other results can also be obtained easily by the lifting lemma and proof\nschema. For example, the work by David (1993) can be obtained by lifting the corollary of\nLemma 2 (Zhang & Yap, 2003). The work by Sam-Haroud and Faltings (1996) on convex\nconstraint networks with continuous domains can be lifted from Helly's theorem (Eckhoff,\n1993) on the intersection of convex sets in Euclidean spaces.\nSecondly, the establishment of the relationship between set intersection and consistency\nin a constraint network makes it easier to communicate the consistency results to the researchers outside the constraint network community. It is also made possible for them to\ncontribute to consistency results by exploiting their knowledge on set intersection properties.\nMore importantly, this approach singles out the fact that set intersection properties play\na fundamental role in determining the consistency of a constraint network. This perspective\nhelps us focus on properties of set intersection and discover or generalize the intersection\nproperties of tree convex sets and sets with cardinality restrictions. The corresponding\nconsistency results have extended our understanding of the convexity and tightness of constraints since Dechter and van Beek's work (1995, 1997). We identify a new class of tree\nconvex constraints for which global consistency is ensured by a certain level of local consistency. This generalizes row convex constraints by van Beek and Dechter (1995). We also\nshow that a weakly m-tight constraint network can be made globally consistent by enforcing\nlocal consistency. This type of result on tightness is new. Detailed study has been carried\nout on when a constraint network is weakly m-tight. To make full use of the tightness of\nthe constraints, we propose dually adaptive consistency that exploits both the topology and\n462\n\n\fSet Intersection and Consistency in Constraint Networks\n\nthe semantics of a constraint network, which again results from the relation between set\nintersection and consistency. Under dually adaptive consistency, the topology of a network\nand the tightest relevant constraint on each variable determine the local consistency that\nensures backtrack-free search.\n\nAcknowledgments\nWe are indebted to Dr. Peter van Beek and Dr. Fengming Dong for very helpful discussions.\nThe constructive comments from the anonymous referees of various versions of this paper\nhave improved its quality. This material is based on works partially supported by a grant\nunder the Academic Research Fund of National University of Singapore and by Science\nFoundation Ireland under Grant 00/PI.1/C075. Some materials of this paper appeared in\nthe Proceedings of the International Joint Conference on Artificial Intelligence 2003 (Zhang\n& Yap, 2003) and the Proceedings of Principles and Practice of Constraint Programming\n2004 (Zhang, 2004).\n\nReferences\nDavid, P. (1993). When functional and bijective constraints make a CSP polynomial. In\nProceedings of Thirteenth International Joint Conference on Artificial Intelligence,\nVol. 1, pp. 224\u2013229 Chambery, France. IJCAI, Inc.\nDechter, R. (1992). From local to global consistency. Artificial Intelligence, 55, 87\u2013107.\nDechter, R. (2003). Constraint Processing. Morgan Kaufmann, San Francisco, CA.\nDechter, R., & Pearl, J. (1987). Network-based heuristics for constraint satisfaction problems. Artificial Intelligence, 34, 1\u201338.\nEckhoff, J. (1993). Helly, Radon, and Carath\u00e9odory type theorems. In Gruber, P. M.,\n& Wills, J. M. (Eds.), Handbook of Convex Geometry, pp. 389\u2013448. North Holland,\nAmsterdam.\nFreuder, E. (1978). Synthesizing constraint expressions. Communications of ACM, 21 (11),\n958\u2013966.\nFreuder, E. (1982). A sufficient condition for backtrack-free search. Journal of The ACM,\n29 (1), 24\u201332.\nJeavons, P. G., Cohen, D. A., & Gyssens, M. (1997). Closure properties of constraints.\nJournal of The ACM, 44 (4), 527\u2013548.\nMackworth, A. K. (1977). Consistency in networks of relations. Artificial Intelligence, 8 (1),\n118\u2013126.\nMontanari, U. (1974). Networks of constraints: fundamental properties and applications.\nInformation Science, 7 (2), 95\u2013132.\nSam-Haroud, D., & Faltings, B. V. (1996). Solving non-binary convex CSPs in continous\ndomains. In Proceedings of International Conference on Principles and Practice of\nConstraint Programming 1996, pp. 410\u2013424 Cambridge, Massachusetts. Springer.\n\n463\n\n\fZhang & Yap\n\nSchaefer, T. J. (1978). The complexity of satisfiability problems. In Proceedings of 10th\nACM Symposium on the Theory of Computing, pp. 216\u2013226.\nvan Beek, P., & Dechter, R. (1995). On the minimality and global consistency of row-convex\nconstraint networks. Journal of The ACM, 42 (3), 543\u2013561.\nvan Beek, P., & Dechter, R. (1997). Constraint tightness and looseness versus local and\nglobal consistency. Journal of The ACM, 44 (4), 549\u2013566.\nYosiphon, G. (2003). Efficient algorithm for identifying tree convex constraints. Manuscript.\nZhang, Y. (2004). On the tightness of constraints. In Proceedings of Principles and Practice\nof Constraint Programming 2004, pp. 777\u2013781 Toronto, Canada. Springer.\nZhang, Y., & Freuder, E. C. (2004). Tractable tree convex constraints. In Proceedings of\nNational Conference on Artificial Intelligence 2004, pp. 197\u2013202 San Jose, CA, USA.\nAAAI press.\nZhang, Y., & Yap, R. H. C. (2003). Consistency and set intersection. In Proceedings of\nInternational Joint Conference on Artificial Intelligence 2003, pp. 263\u2013268 Acapulco,\nMexico. IJCAI Inc.\n\n464\n\n\f"}