{"id": "http://arxiv.org/abs/1006.1492v1", "guidislink": true, "updated": "2010-06-08T09:11:28Z", "updated_parsed": [2010, 6, 8, 9, 11, 28, 1, 159, 0], "published": "2010-06-08T09:11:28Z", "published_parsed": [2010, 6, 8, 9, 11, 28, 1, 159, 0], "title": "Mean-payoff Automaton Expressions", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1006.0343%2C1006.2123%2C1006.5612%2C1006.4831%2C1006.1204%2C1006.4618%2C1006.2984%2C1006.2316%2C1006.3153%2C1006.0292%2C1006.4901%2C1006.2910%2C1006.5397%2C1006.1992%2C1006.1437%2C1006.4390%2C1006.2251%2C1006.0536%2C1006.3769%2C1006.5436%2C1006.1022%2C1006.5778%2C1006.0906%2C1006.5554%2C1006.0703%2C1006.5881%2C1006.0078%2C1006.2753%2C1006.4219%2C1006.2783%2C1006.0570%2C1006.0328%2C1006.1274%2C1006.1092%2C1006.4780%2C1006.0723%2C1006.2653%2C1006.4245%2C1006.2533%2C1006.4604%2C1006.0376%2C1006.3702%2C1006.2191%2C1006.2805%2C1006.5291%2C1006.1260%2C1006.4049%2C1006.5701%2C1006.4762%2C1006.0771%2C1006.3207%2C1006.4557%2C1006.3485%2C1006.5918%2C1006.4673%2C1006.3335%2C1006.1492%2C1006.4783%2C1006.1451%2C1006.2938%2C1006.3575%2C1006.0450%2C1006.1984%2C1006.3347%2C1006.3657%2C1006.2206%2C1006.0222%2C1006.5779%2C1006.2232%2C1006.4318%2C1006.3571%2C1006.0597%2C1006.0098%2C1006.5158%2C1006.4568%2C1006.5361%2C1006.4374%2C1006.0457%2C1006.0205%2C1006.1578%2C1006.2377%2C1006.0683%2C1006.5642%2C1006.0095%2C1006.2798%2C1006.1502%2C1006.1972%2C1006.2171%2C1006.1949%2C1006.2315%2C1006.4931%2C1006.5632%2C1006.1399%2C1006.4012%2C1006.5940%2C1006.0613%2C1006.5221%2C1006.0927%2C1006.1184%2C1006.4900%2C1006.1450&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Mean-payoff Automaton Expressions"}, "summary": "Quantitative languages are an extension of boolean languages that assign to\neach word a real number. Mean-payoff automata are finite automata with\nnumerical weights on transitions that assign to each infinite path the long-run\naverage of the transition weights. When the mode of branching of the automaton\nis deterministic, nondeterministic, or alternating, the corresponding class of\nquantitative languages is not robust as it is not closed under the pointwise\noperations of max, min, sum, and numerical complement. Nondeterministic and\nalternating mean-payoff automata are not decidable either, as the quantitative\ngeneralization of the problems of universality and language inclusion is\nundecidable.\n  We introduce a new class of quantitative languages, defined by mean-payoff\nautomaton expressions, which is robust and decidable: it is closed under the\nfour pointwise operations, and we show that all decision problems are decidable\nfor this class. Mean-payoff automaton expressions subsume deterministic\nmean-payoff automata, and we show that they have expressive power incomparable\nto nondeterministic and alternating mean-payoff automata. We also present for\nthe first time an algorithm to compute distance between two quantitative\nlanguages, and in our case the quantitative languages are given as mean-payoff\nautomaton expressions.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1006.0343%2C1006.2123%2C1006.5612%2C1006.4831%2C1006.1204%2C1006.4618%2C1006.2984%2C1006.2316%2C1006.3153%2C1006.0292%2C1006.4901%2C1006.2910%2C1006.5397%2C1006.1992%2C1006.1437%2C1006.4390%2C1006.2251%2C1006.0536%2C1006.3769%2C1006.5436%2C1006.1022%2C1006.5778%2C1006.0906%2C1006.5554%2C1006.0703%2C1006.5881%2C1006.0078%2C1006.2753%2C1006.4219%2C1006.2783%2C1006.0570%2C1006.0328%2C1006.1274%2C1006.1092%2C1006.4780%2C1006.0723%2C1006.2653%2C1006.4245%2C1006.2533%2C1006.4604%2C1006.0376%2C1006.3702%2C1006.2191%2C1006.2805%2C1006.5291%2C1006.1260%2C1006.4049%2C1006.5701%2C1006.4762%2C1006.0771%2C1006.3207%2C1006.4557%2C1006.3485%2C1006.5918%2C1006.4673%2C1006.3335%2C1006.1492%2C1006.4783%2C1006.1451%2C1006.2938%2C1006.3575%2C1006.0450%2C1006.1984%2C1006.3347%2C1006.3657%2C1006.2206%2C1006.0222%2C1006.5779%2C1006.2232%2C1006.4318%2C1006.3571%2C1006.0597%2C1006.0098%2C1006.5158%2C1006.4568%2C1006.5361%2C1006.4374%2C1006.0457%2C1006.0205%2C1006.1578%2C1006.2377%2C1006.0683%2C1006.5642%2C1006.0095%2C1006.2798%2C1006.1502%2C1006.1972%2C1006.2171%2C1006.1949%2C1006.2315%2C1006.4931%2C1006.5632%2C1006.1399%2C1006.4012%2C1006.5940%2C1006.0613%2C1006.5221%2C1006.0927%2C1006.1184%2C1006.4900%2C1006.1450&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Quantitative languages are an extension of boolean languages that assign to\neach word a real number. Mean-payoff automata are finite automata with\nnumerical weights on transitions that assign to each infinite path the long-run\naverage of the transition weights. When the mode of branching of the automaton\nis deterministic, nondeterministic, or alternating, the corresponding class of\nquantitative languages is not robust as it is not closed under the pointwise\noperations of max, min, sum, and numerical complement. Nondeterministic and\nalternating mean-payoff automata are not decidable either, as the quantitative\ngeneralization of the problems of universality and language inclusion is\nundecidable.\n  We introduce a new class of quantitative languages, defined by mean-payoff\nautomaton expressions, which is robust and decidable: it is closed under the\nfour pointwise operations, and we show that all decision problems are decidable\nfor this class. Mean-payoff automaton expressions subsume deterministic\nmean-payoff automata, and we show that they have expressive power incomparable\nto nondeterministic and alternating mean-payoff automata. We also present for\nthe first time an algorithm to compute distance between two quantitative\nlanguages, and in our case the quantitative languages are given as mean-payoff\nautomaton expressions."}, "authors": ["Krishnendu Chatterjee", "Laurent Doyen", "Herbert Edelsbrunner", "Thomas A. Henzinger", "Philippe Rannou"], "author_detail": {"name": "Philippe Rannou"}, "author": "Philippe Rannou", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1007/978-3-642-15375-4_19", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1006.1492v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1006.1492v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1006.1492v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1006.1492v1", "arxiv_comment": null, "journal_reference": null, "doi": "10.1007/978-3-642-15375-4_19", "fulltext": "Mean-Payoff Automaton Expressions\nKrishnendu Chatterjee1 , Laurent Doyen2 , Herbert Edelsbrunner1,\nThomas A. Henzinger1, and Philippe Rannou3\n\narXiv:1006.1492v1 [cs.LO] 8 Jun 2010\n\n1\n\nIST Austria (Institute of Science and Technology Austria)\n2\nLSV, ENS Cachan & CNRS, France\n3\nENS Cachan Bretagne, Rennes, France\n\nAbstract. Quantitative languages are an extension of boolean languages that assign to each word a real number. Mean-payoff automata are finite automata with\nnumerical weights on transitions that assign to each infinite path the long-run average of the transition weights. When the mode of branching of the automaton is\ndeterministic, nondeterministic, or alternating, the corresponding class of quantitative languages is not robust as it is not closed under the pointwise operations\nof max, min, sum, and numerical complement. Nondeterministic and alternating\nmean-payoff automata are not decidable either, as the quantitative generalization\nof the problems of universality and language inclusion is undecidable.\nWe introduce a new class of quantitative languages, defined by mean-payoff\nautomaton expressions, which is robust and decidable: it is closed under the\nfour pointwise operations, and we show that all decision problems are decidable\nfor this class. Mean-payoff automaton expressions subsume deterministic meanpayoff automata, and we show that they have expressive power incomparable to\nnondeterministic and alternating mean-payoff automata. We also present for the\nfirst time an algorithm to compute distance between two quantitative languages,\nand in our case the quantitative languages are given as mean-payoff automaton\nexpressions.\n\n1 Introduction\nQuantitative languages L are a natural generalization of boolean languages that assign\nto every word w a real number L(w) \u2208 R instead of a boolean value. For instance,\nthe value of a word (or behavior) can be interpreted as the amount of some resource\n(e.g., memory consumption, or power consumption) needed to produce it, or bound the\nlong-run average available use of the resource. Thus quantitative languages can specify\nproperties related to resource-constrained programs, and an implementation LA satisfies (or refines) a specification LB if LA (w) \u2264 LB (w) for all words w. This notion of\nrefinement is a quantitative generalization of language inclusion, and it can be used to\ncheck for example if for each behavior, the long-run average response time of the system lies below the specified average response requirement. Hence it is crucial to identify\nsome relevant class of quantitative languages for which this question is decidable. The\nother classical decision questions such as emptiness, universality, and language equivalence have also a natural quantitative extension. For example, the quantitative emptiness\nproblem asks, given a quantitative language L and a threshold \u03bd \u2208 Q, whether there exists some word w such that L(w) \u2265 \u03bd, and the quantitative universality problem asks\n\n\fwhether L(w) \u2265 \u03bd for all words w. Note that universality is a special case of language\ninclusion (where LA (w) = \u03bd is constant).\nWeighted mean-payoff automata present a nice framework to express such quantitative properties [3]. A weighted mean-payoff automaton is a finite automaton with numerical weights on transitions. The value of a word w is the maximal value of all runs\nover w (if the automaton is nondeterministic, then there may be many runs over w),\nand the value of a run r is the long-run average of the weights that appear along r.\nA mean-payoff extension to alternating automata has been studied in [4]. Deterministic, nondeterministic and alternating mean-payoff automata are three classes of meanpayoff automata with increasing expressive power. However, none of these classes is\nclosed under the four pointwise operations of max, min (which generalize union and\nintersection respectively), numerical complement4, and sum (see Table 1). Deterministic mean-payoff automata are not closed under max, min, and sum [5]; nondeterministic\nmean-payoff automata are not closed under min, sum and complement [5]; and alternating mean-payoff automata are not closed under sum [4]. Hence none of the above\nclasses is robust with respect to closure properties.\nMoreover, while deterministic mean-payoff automata enjoy decidability of all quantitative decision problems [3], the quantitative language-inclusion problem is undecidable for nondeterministic and alternating mean-payoff automata [9], and thus also all\ndecision problems are undecidable for alternating mean-payoff automata. Hence although mean-payoff automata provide a nice framework to express quantitative properties, there is no known class which is both robust and decidable (see Table 1).\nIn this paper, we introduce a new class of quantitative languages that are defined\nby mean-payoff automaton expressions. An expression is either a deterministic meanpayoff automaton, or it is the max, min, or sum of two mean-payoff automaton expressions. Since deterministic mean-payoff automata are closed under complement,\nmean-payoff automaton expressions form a robust class that is closed under max, min,\nsum and complement. We show that (a) all decision problems (quantitative emptiness, universality, inclusion, and equivalence) are decidable for mean-payoff automaton\nexpressions; (b) mean-payoff automaton expressions are incomparable in expressive\npower with both the nondeterministic and alternating mean-payoff automata (i.e., there\nare quantitative languages expressible by mean-payoff automaton expressions that are\nnot expressible by alternating mean-payoff automata, and there are quantitative languages expressible by nondeterministic mean-payoff automata that are not expressible\nby mean-payoff automata expressions); and (c) the properties of cut-point languages\n(i.e., the sets of words with value above a certain threshold) for deterministic automata\ncarry over to mean-payoff automaton expressions, mainly the cut-point language is \u03c9regular when the threshold is isolated (i.e., some neeighborhood around the threshold\ncontains no word). Moreover, mean-payoff automaton expressions can express all examples in the literature of quantitative properties using mean-payoff measure [1, 5, 6].\nAlong with the quantitative generalization of the classical decision problems, we also\nconsider the notion of distance between two quantitative languages LA and LB , defined\nas supw |LA (w)\u2212LB (w)|. When quantitative language inclusion does not hold between\nan implementation LA and a specification LB , the distance is a relevant information to\n4\n\nThe numerical complement of a quantitative languages L is \u2212L.\n\n\fClosure properties\nDecision problems\nmax min sum comp. empt. univ. incl. equiv.\nDeterministic\n\u00d7\n\u00d7\n\u00d7\nX5\nX\nX\nX\nX\nNondeterministic X\n\u00d7\n\u00d7\n\u00d7\nX\n\u00d7\n\u00d7\n\u00d7\nAlternating\nX\nX\n\u00d7\nX5\n\u00d7\n\u00d7\n\u00d7\n\u00d7\nExpressions\nX\nX\nX\nX\nX\nX\nX\nX\nTable 1. Closure properties and decidability of the various classes of mean-payoff automata.\nMean-payoff automaton expressions enjoy fully positive closure and decidability properties.\n\nevaluate how close they are, as we may accept implementations that overspend the resource but we would prefer the least expensive ones. We present the first algorithm to\ncompute the distance between two quantitative languages: we show that the distance\ncan be computed for mean-payoff automaton expressions.\nOur approach to show decidability of mean-payoff automaton expressions relies on\nthe characterization and algorithmic computation of the values set {LE (w) | w \u2208 \u03a3 \u03c9 }\nof an expression E, i.e. the set of all values of words according to E. The value set can\nbe viewed as an abstract representation of the quantitative language LE , and we show\nthat all decision problems, cut-point language and distance computation can be solved\nefficiently once we have this set.\nFirst, we present a precise characterization of the value set for quantitative languages defined by mean-payoff automaton expressions. In particular, we show that it is\nnot sufficient to construct the convex hull conv(SE ) of the set of the values of simple\ncycles in the mean-payoff automata occurring in E, but we need essentially to apply\nan operator Fmin (*) which given a set Z \u2286 Rn computes the set of points y \u2208 Rn\nthat can be obtained by taking pointwise minimum of each coordinate of points of a set\nX \u2286 Z. We show that while we need to compute the set VE = Fmin (conv(SE )) to\nobtain the value set, and while this set is always convex, it is not always the case that\nFmin (conv(SE )) = conv(Fmin (SE )) (which would immediately give an algorithm to\ncompute VE ). This may appear counter-intuitive because the equality holds in R2 but\nwe show that the equality does not hold in R3 (Example 2).\nSecond, we provide algorithmic solutions to compute Fmin (conv(S)), for a finite set\nS. We first present a constructive procedure that given S constructs a finite set of points\nS \u2032 such that conv(S \u2032 ) = Fmin (conv(S)). The explicit construction presents interesting\nproperties about the set Fmin (conv(S)), however the procedure itself is computationally\nexpensive. We then present an elegant and geometric construction of Fmin (conv(S)) as\na set of linear constraints. The computation of Fmin (conv(S)) is a new problem in\ncomputational geometry and the solutions we present could be of independent interest.\nUsing the algorithm to compute Fmin (conv(S)), we show that all decision problems for\nmean-payoff automaton expressions are decidable. Due to lack of space, most proofs\nare given in the appendix.\n5\n\nClosure under complementation holds because LimInfAvg-automata and LimSupAvgautomata are dual. It would not hold if only LimInfAvg-automata (or only LimSupAvgautomata) were allowed.\n\n\fRelated works. Quantitative languages have been first studied over finite words in\nthe context of probabilistic automata [16] and weighted automata [17]. Several works\nhave generalized the theory of weighted automata to infinite words (see [13, 11, 15, 2]\nand [12] for a survey), but none of those have considered mean-payoff conditions. Examples where the mean-payoff measure has been used to specify long-run behaviours of\nsystems can be found in game theory [14, 19] and in Markov decision processes [7]. The\nmean-payoff automata as a specification language have been first investigated in [3, 5,\n4], and extended in [1] to construct a new class of (non-quantitative) languages of infinite words (the multi-threshold mean-payoff languages), obtained by applying a query\nto a mean-payoff language, and for which emptiness is decidable. It turns out that a\nricher language of queries can be expressed using mean-payoff automaton expressions\n(together with decidability of the emptiness problem). A detailed comparison with the\nresults of [1] is given in Section 5. Moreover, we provide algorithmic solutions to the\nquantitative language inclusion and equivalence problems and to distance computation\nwhich have no counterpart for non-quantitative languages. Related notions of metrics\nhave been addressed in stochastic games [8] and probabilistic processes [10, 18].\n\n2 Mean-Payoff Automaton Expressions\nQuantitative languages. A quantitative language L over a finite alphabet \u03a3 is a function L : \u03a3 \u03c9 \u2192 R. Given two quantitative languages L1 and L2 over \u03a3, we denote by\nmax(L1 , L2 ) (resp., min(L1 , L2 ), sum(L1 , L2 ) and \u2212L1 ) the quantitative language\nthat assigns max(L1 (w), L2 (w)) (resp., min(L1 (w), L2 (w)), L1 (w) + L2 (w), and\n\u2212L1 (w)) to each word w \u2208 \u03a3 \u03c9 . The quantitative language \u2212L is called the complement of L. The max and min operators for quantitative languages correspond respectively to the least upper bound and greatest lower bound for the pointwise order \u0016 such\nthat L1 \u0016 L2 if L1 (w) \u2264 L2 (w) for all w \u2208 \u03a3 \u03c9 . Thus, they generalize respectively the\nunion and intersection operators for classical boolean languages.\nWeighted automata. A Q-weighted automaton is a tuple A = hQ, qI , \u03a3, \u03b4, wti, where\n\u2013 Q is a finite set of states, qI \u2208 Q is the initial state, and \u03a3 is a finite alphabet;\n\u2013 \u03b4 \u2286 Q \u00d7 \u03a3 \u00d7 Q is a finite set of labelled transitions. We assume that \u03b4 is total, i.e.,\nfor all q \u2208 Q and \u03c3 \u2208 \u03a3, there exists q \u2032 such that (q, \u03c3, q \u2032 ) \u2208 \u03b4;\n\u2013 wt : \u03b4 \u2192 Q is a weight function, where Q is the set of rational numbers. We assume\nthat rational numbers are encoded as pairs of integers in binary.\nWe say that A is deterministic if for all q \u2208 Q and \u03c3 \u2208 \u03a3, there exists (q, \u03c3, q \u2032 ) \u2208 \u03b4 for\nexactly one q \u2032 \u2208 Q. We sometimes call automata nondeterministic to emphasize that\nthey are not necessarily deterministic.\nWords and runs. A word w \u2208 \u03a3 \u03c9 is an infinite sequence of letters from \u03a3. A lassoword w in \u03a3 \u03c9 is an ultimately periodic word of the form w1 * w2\u03c9 where w1 \u2208 \u03a3 \u2217 is a\nfinite prefix, and w2 \u2208 \u03a3 + is nonempty. A run of A over an infinite word w = \u03c31 \u03c32 . . .\nis an infinite sequence r = q0 \u03c31 q1 \u03c32 . . . of states and letters such that (i) q0 = qI , and\n(ii) (qi , \u03c3i+1 , qi+1 ) \u2208 \u03b4 for all i \u2265 0. We denote by wt(r) = v0 v1 . . . the sequence of\nweights that occur in r where vi = wt(qi , \u03c3i+1 , qi+1 ) for all i \u2265 0.\n\n\fQuantitative language of mean-payoff automata. The mean-payoff value (or limitaverage) of a sequence v\u0304 = v0 v1 . . . of real numbers is either\nLimInfAvg(v\u0304) = lim inf\nn\u2192\u221e\n\nn\u22121\nn\u22121\n1 X\n1 X\nvi , or LimSupAvg(v\u0304) = lim sup *\nvi .\n*\nn i=0\nn\u2192\u221e n\ni=0\n\nNote that if we delete or insert finitely many values in an infinite sequence of numbers,\nits limit-average does not change, and if the sequence is ultimately periodic, then the\nLimInfAvg and LimSupAvg values coincide (and correspond to the mean of the weights\non the periodic part of the sequence).\nFor Val \u2208 {LimInfAvg, LimSupAvg}, the quantitative language LA of A is defined\nby LA (w) = sup{Val(wt(r)) | r is a run of A over w} for all w \u2208 \u03a3 \u03c9 . Accordingly,\nthe automaton A and its quantitative language LA are called LimInfAvg or LimSupAvg.\nNote that for deterministic automata, we have LA (w) = Val(wt(r)) where r is the\nunique run of A over w.\nWe omit the weight function wt when it is clear from the context, and we write\nLimAvg when the value according to LimInfAvg and LimSupAvg coincide (e.g., for\nruns with a lasso shape).\nDecision problems and distance. We consider the following classical decision problems for quantitative languages, assuming an effective presentation of quantitative languages (such as mean-payoff automata, or automaton expressions defined later). Given\na quantitative language L and a threshold \u03bd \u2208 Q, the quantitative emptiness problem\nasks whether there exists a word w \u2208 \u03a3 \u03c9 such that L(w) \u2265 \u03bd, and the quantitative\nuniversality problem asks whether L(w) \u2265 \u03bd for all words w \u2208 \u03a3 \u03c9 .\nGiven two quantitative languages L1 and L2 , the quantitative language-inclusion\nproblem asks whether L1 (w) \u2264 L2 (w) for all words w \u2208 \u03a3 \u03c9 , and the quantitative\nlanguage-equivalence problem asks whether L1 (w) = L2 (w) for all words w \u2208 \u03a3 \u03c9 .\nNote that universality is a special case of language inclusion where L1 is constant.\nFinally, the distance between L1 and L2 is Dsup (L1 , L2 ) = supw\u2208\u03a3 \u03c9 |L1 (w)\u2212L2 (w)|.\nIt measures how close is an implementation L1 as compared to a specification L2 .\nIt is known that quantitative emptiness is decidable for nondeterministic meanpayoff automata [3], while decidability was open for alternating mean-payoff automata,\nas well as for the quantitative language-inclusion problem of nondeterministic meanpayoff automata. Recent undecidability results on games with imperfect information\nand mean-payoff objective [9] entail that these problems are undecidable (see Theorem 5).\nRobust quantitative languages. A class Q of quantitative languages is robust if the\nclass is closed under max, min, sum and complementation operations. The closure\nproperties allow quantitative languages from a robust class to be described compositionally. While nondeterministic LimInfAvg- and LimSupAvg-automata are closed under the max operation, they are not closed under min and complement [5]. Alternating\nLimInfAvg- and LimSupAvg-automata6 are closed under max and min, but are not\nclosed under complementation and sum [4] We define a robust class of quantitative\n6\n\nSee [4] for the definition of alternating LimInfAvg- and LimSupAvg-automata that generalize\nnondeterministic automata.\n\n\flanguages for mean-payoff automata which is closed under max, min, sum, and complement, and which can express all natural examples of quantitative languages defined\nusing the mean-payoff measure [1, 5, 6].\nMean-payoff automaton expressions. A mean-payoff automaton expression E is obtained by the following grammar rule:\nE ::= A | max(E, E) | min(E, E) | sum(E, E)\nwhere A is a deterministic LimInfAvg- or LimSupAvg-automaton. The quantitative language LE of a mean-payoff automaton expression E is LE = LA if E = A is a\ndeterministic automaton, and LE = op(LE1 , LE2 ) if E = op(E1 , E2 ) for op \u2208\n{max, min, sum}. By definition, the class of mean-payoff automaton expression is\nclosed under max, min and sum. Closure under complement follows from the fact that\nthe complement of max(E1 , E2 ) is min(\u2212E1 , \u2212E2 ), the complement of min(E1 , E2 )\nis max(\u2212E1 , \u2212E2 ), the complement of sum(E1 , E2 ) is sum(\u2212E1 , \u2212E2 ), and the\ncomplement of a deterministic LimInfAvg-automaton can be defined by the same automaton with opposite weights and interpreted as a LimSupAvg-automaton, and vice\nversa, since \u2212 lim sup(v0 , v1 , . . . ) = lim inf(\u2212v0 , \u2212v1 , . . . ). Note that arbitrary linear\ncombinations of deterministic mean-payoff automaton expressions (expressions such\nas c1 E1 + c2 E2 where c1 , c2 \u2208 Q are rational constants) can be obtained for free since\nscaling the weights of a mean-payoff automaton by a positive factor |c| results in a\nquantitative language scaled by the same factor.\n\n3 The Vector Set of Mean-Payoff Automaton Expressions\nGiven a mean-payoff automaton expression E, let A1 , . . . , An be the deterministic weighted automata occurring in E. The vector set of E is the set VE =\n{hLA1 (w), . . . , LAn (w)i \u2208 Rn | w \u2208 \u03a3 \u03c9 } of tuples of values of words according\nto each automaton Ai . In this section, we characterize the vector set of mean-payoff\nautomaton expressions, and in Section 4 we give an algorithmic procedure to compute\nthis set. This will be useful to establish the decidability of all decision problems, and\nto compute the distance between mean-payoff automaton expressions. Given a vector\nv \u2208 Rn , we denote by kvk = maxi |vi | the \u221e-norm of v.\nThe synchronized product of A1 , . . . , An such that Ai = hQi , qIi , \u03a3, \u03b4i , wti i is the\nn\nQ -weighted automaton AE = A1 \u00d7* * *\u00d7An = hQ1 \u00d7* * *\u00d7Qn , (qI1 , . . . , qIn ), \u03a3, \u03b4, wti\nsuch that t = ((q1 , . . . , qn ), \u03c3, (q1\u2032 , . . . , qn\u2032 )) \u2208 \u03b4 if ti := (qi , \u03c3, qi\u2032 ) \u2208 \u03b4i for all\n1 \u2264 i \u2264 n, and wt(t) = (wt1 (t1 ), . . . , wtn (tn )). In the sequel, we assume that all Ai 's\nare deterministic LimInfAvg-automata (hence, AE is deterministic) and that the underlying graph of the automaton AE has only one strongly connected component (scc). We\nshow later how to obtain the vector set without these restrictions.\nFor each (simple) cycle \u03c1 in AE , let the vector value of \u03c1 be the mean of the tuples\nlabelling the edges of \u03c1, denoted Avg(\u03c1). To each simple cycle \u03c1 in AE corresponds a\n(not necessarily simple) cycle in each Ai , and the vector value (v1 , . . . , vn ) of \u03c1 contains\nthe mean value vi of \u03c1 in each Ai . We denote by SE the (finite) set of vector values of\nsimple cycles in AE . Let conv(SE ) be the convex hull of SE .\n\n\fa, 1\nb, 0\n\na, 0\nb, 1\n\n(0, 1)\nH = conv(SE )\n\nq1\n\nq2\n\nA1\n\nA2\n\n(0, 0)\n\nFmin (H)\n\n(1, 0)\n\nFig. 1. The vector set of E = max(A1 , A2 ) is Fmin (conv(SE )) ) conv(SE ).\n\nLemma 1. Let E be a mean-payoff automaton expression. The set conv(SE ) is the\nclosure of the set {LE (w) | w is a lasso-word}.\nThe vector set of E contains more values than the convex hull conv(SE ), as shown\nby the following example.\nExample 1. Consider the expression E = max(A1 , A2 ) where A1 and A2 are deterministic LimInfAvg-automata (see Fig. 1). The product AE = A1 \u00d7 A2 has two simple cycles with respective vector values (1, 0) (on letter 'a') and (0, 1) (on letter 'b').\nThe set H = conv(SE ) is the solid segment on Fig. 1 and contains the vector values\nof all lasso-words. However, other vector values can be obtained: consider the word\nw = an1 bn2 an3 bn4 . . . where n1 = 1 and ni+1 = (n1 + * * * + ni )2 for all i \u2265 1. It is\neasy to see that the value of w according to A1 is 0 because the average number of a's in\nn1 +***+ni\n1\n= 1+n1 +***+n\nthe prefixes an1 bn2 . . . ani bni+1 for i odd is smaller than n1 +***+n\ni +ni+1\ni\nwhich tends to 0 when i \u2192 \u221e. Since A1 is a LimInfAvg-automaton, the value of w is\n0 in A1 , and by a symmetric argument the value of w is also 0 in A2 . Therefore the\nvector (0, 0) is in the vector set of E. Note that z = (0, 0) is the pointwise minimum\nof x = (1, 0) and y = (0, 1), i.e. (0, 0) = fmin ((1, 0), (0, 1)) where z = fmin (x, y) if\nz1 = min(x1 , y1 ) and z2 = min(y1 , y2 ). In fact, the vector set is the whole triangular\nregion in Fig. 1, i.e. VE = {fmin(x, y) | x, y \u2208 conv(SE )}.\nWe generalize fmin to finite sets of points P \u2286 Rn in n dimensions as follows: fmin(P ) \u2208 Rn is the point p = (p1 , p2 , . . . , pn ) such that pi is the minimum\nith coordinate of the points in P , for 1 \u2264 i \u2264 n. For arbitrary S \u2286 Rn , define\nFmin (S) = {fmin (P ) | P is a finite subset of S}. As illustrated in Example 1, the next\nlemma shows that the vector set VE is equal to Fmin (conv(SE )).\nLemma 2. Let E be a mean-payoff automaton expression built from deterministic\nLimInfAvg-automata, and such that AE has only one strongly connected component.\nThen, the vector set of E is VE = Fmin (conv(SE )).\nFor a general mean-payoff automaton expression E (with both deterministic\nLimInfAvg- and LimSupAvg automata, and with multi-scc underlying graph), we can\nuse the result of Lemma 2 as follows. We replace each LimSupAvg automaton Ai\noccurring in E by the LimInfAvg automaton A\u2032i obtained from Ai by replacing every weight wt by \u2212wt. The duality of lim inf and lim sup yields LA\u2032i = \u2212LAi . In\n\n\feach strongly connected component C of the underlying graph of AE , we compute\nVC = Fmin (conv(SC )) (where SC is the set of vector values of the simple cycles in C)\nand apply the transformation xi \u2192 \u2212xi on every coordinate i where\nS the automaton Ai\nwas originally a LimSupAvg automaton. The union of the sets C VC where C ranges\nover the strongly connected components of AE gives the vector set of E.\nTheorem 1. Let E be a mean-payoff automaton expression built from deterministic\nLimInfAvg-automata, and let Z be the set of strongly connected components in AE .\nFor a strongly connected component C let SC S\ndenote the set of vector values of the\nsimple cycles in C. The vector set of E is VE = C\u2208Z Fmin (conv(SC )).\n\n4 Computation of Fmin(conv(S)) for a Finite Set S\nIt follows from Theorem 1 that the vector set VE of a mean-payoff automaton expression E can be obtained as a union of sets Fmin (conv(S)), where S \u2286 Rn is a finite set. However, the set conv(S) being in general infinite, it is not immediate that\nFmin (conv(S)) is computable. In this section we consider the problem of computing\nFmin (conv(S)) for a finite set S. In subsection 4.1 we present an explicit construction\nand in subsection 4.2 we give a geometric construction of the set as a set of linear\nconstraints. We first present some properties of the set Fmin (conv(S)).\nLemma 3. If X is a convex set, then Fmin (X) is convex.\nBy Lemma 3, the set Fmin (conv(S)) is convex, and since Fmin is a monotone operator and S \u2286 conv(S), we have Fmin (S) \u2286 Fmin (conv(S)) and thus conv(Fmin (S)) \u2286\nFmin (conv(S)). The following proposition states that in two dimensions the above sets\ncoincide.\nProposition 1. Let S \u2286 R2 be a finite set. Then, conv(Fmin (S)) = Fmin (conv(S)).\nWe show in the following example that in three dimensions the above proposition\ndoes not hold, i.e., we show that Fmin (conv(SE )) 6= conv(Fmin (SE )) in R3 .\nExample 2. We show that in three dimension there is a finite set S such that\nFmin (conv(S)) 6\u2286 conv(Fmin (S)). Let S = {q, r, s} with q = (0, 1, 0), r =\n(\u22121, \u22121, 1), and s = (1, 1, 1). Then fmin(r, s) = r, fmin (q, r, s) = fmin (q, r) =\nt = (\u22121, \u22121, 0), and fmin(q, s) = q. Therefore Fmin (S) = {q, r, s, t}. Consider\np = (r + s)/2 = (0, 0, 1). We have p \u2208 conv(S) and fmin (p, q) = (0, 0, 0).\nHence (0, 0, 0) \u2208 Fmin (conv(S)). We now show that (0, 0, 0) does not belong to\nconv(Fmin (S)). Consider u = \u03b1q *q+\u03b1r *r+\u03b1s *s+\u03b1t *t such that u in conv(Fmin (S)).\nSince the third coordinate is non-negative for q, r, s, and t, it follows that if \u03b1r > 0 or\n\u03b1s > 0, then the third coordinate of u is positive. If \u03b1s = 0 and \u03b1r = 0, then we have\ntwo cases: (a) if \u03b1t > 0, then the first coordinate of u is negative; and (b) if \u03b1t = 0,\nthen the second coordinate of u is 1. It follows (0, 0, 0) is not in conv(Fmin (S)).\n\u2293\n\u2294\n\n\f4.1 Explicit construction\nExample 2 shows that in general Fmin (conv(S)) 6\u2286 conv(Fmin (S)). In this section we\npresent an explicit construction that given a finite set S constructs a finite set S \u2032 such\nthat (a) S \u2286 S \u2032 \u2286 conv(S) and (b) Fmin (conv(S)) \u2286 conv(Fmin (S \u2032 )). It would follow\nthat Fmin (conv(S)) = conv(Fmin (S \u2032 )). Since convex hull of a finite set is computable\nand Fmin (S \u2032 ) is finite, this would give us an algorithm to compute Fmin (conv(S)). For\nsimplicity, for the rest of the section we write F for Fmin and f for fmin (i.e., we drop\nthe min from subscript). Recall that F (S) = {f (P ) | P finite subset of S} and let\nFi (S) = {f (P ) | P finite subset of S and |P | \u2264 i}. We consider S \u2286 Rn .\nLemma 4. Let S \u2286 Rn . Then, F (S) = Fn (S) and Fn (S) \u2286 F2n\u22121 (S).\nIteration of a construction \u03b3. We will present a construction \u03b3 with the following\nproperties: input to the construction is a finite set Y of points, and the output \u03b3(Y )\nsatisfies the following properties\n1. (Condition C1). \u03b3(Y ) is finite and subset of conv(Y ).\n2. (Condition C2). F2 (conv(Y )) \u2286 conv(F (\u03b3(Y ))).\nBefore presenting the construction \u03b3 we first show how to iterate the construction to\nobtain the following result: given a finite set of points X we construct a finite set of\npoints X \u2032 such that F (conv(X)) = conv(F (X \u2032 )).\nIterating \u03b3. Consider a finite set of points X, and let X0 = X and X1 = \u03b3(X0 ). Then\nwe have\nconv(X1 ) \u2286 conv(conv(X0 ))\n\n(since by Condition C1 we have X1 \u2286 conv(X0 ))\n\nand hence conv(X1 ) \u2286 conv(X0 ); and\nF2 (conv(X0 )) \u2286 conv(F (X1 ))\n\n(by Condition C2)\n\nBy iteration we obtain that Xi = \u03b3(Xi\u22121 ) for i \u2265 2 and as above we have\n(1) conv(Xi ) \u2286 conv(X0 )\n\n(2) F2i (conv(X0 )) \u2286 conv(F (Xi ))\n\nThus for Xn\u22121 we have\n(1) conv(Xn\u22121 ) \u2286 conv(X0 )\n\n(2) F2n\u22121 (conv(X0 )) \u2286 conv(F (Xn\u22121 ))\n\nBy (2) above and Lemma 4, we obtain\n(A) F (conv(X0 )) = Fn (conv(X0 )) \u2286 F2n\u22121 (conv(X0 )) \u2286 conv(F (Xn\u22121 ))\nBy (1) above we have conv(Xn\u22121 ) \u2286 conv(X0 ) and hence F (conv(Xn\u22121 )) \u2286\nF (conv(X0 )). Thus we have\nconv(F (conv(Xn\u22121 ))) \u2286 conv(F (conv(X0 ))) = F (conv(X0 ))\n\n\fwhere the last equality follows since by Lemma 3 we have F (conv(X0 )) is convex.\nSince Xn\u22121 \u2286 conv(Xn\u22121 ) we have\n(B) conv(F (Xn\u22121 )) \u2286 conv(F (conv(Xn\u22121 ))) \u2286 F (conv(X0 ))\nThus by (A) and (B) above we have F (conv(X0 )) = conv(F (Xn\u22121 )). Thus given the\nfinite set X, we have the finite set Xn\u22121 such that (a) X \u2286 Xn\u22121 \u2286 conv(X) and\n(b) F (conv(X)) = conv(F (Xn\u22121 )). We now present the construction \u03b3 to complete\nthe result.\nThe construction \u03b3. Given a finite set Y of points Y \u2032 = \u03b3(Y ) is obtained by adding\npoints to Y in the following way:\n\u2013 For all 1 \u2264 k \u2264 n, we consider all k-dimensional coordinate planes \u03a0 supported\nby a point in Y ;\n\u2013 Intersect each coordinate plane \u03a0 with conv(Y ) and the result is a convex polytope\nY\u03a0 ;\n\u2013 We add the corners (or extreme points) of each polytope Y\u03a0 to Y .\nThe proof that the above construction satisfies condition C1 and C2 is given in the\nappendix, and thus we have the following result.\nTheorem 2. Given a finite set S \u2286 Rn such that |S| = m, the following assertion\nn\n2\nn\n3\nholds: a finite set S \u2032 with |S \u2032 | \u2264 m2 * 2n +n can be computed in mO(n*2 ) * 2O(n )\n\u2032\n\u2032\ntime such that (a) S \u2286 S \u2286 conv(S) and (b) Fmin (conv(S)) = conv(Fmin (S )).\n4.2 Linear constraint construction\nIn the previous section we presented an explicit construction of a finite set of points\nwhose convex hull gives us Fmin (conv(S)). The explicit construction illuminates\nproperties of the set Fmin (conv(S)), however, the construction is inefficient computationally. In this subsection we present an efficient geometric construction for the\ncomputation of Fmin (conv(S)) for a finite set S. Instead of constructing a finite set\nS \u2032 \u2286 conv(S) such that conv(S \u2032 ) = Fmin (conv(S)), we represent Fmin (conv(S)) as a\nfinite set of linear constraints.\nConsider the positive orthant anchored at the origin in Rn , that is, the set of points\nwith non-negative coordinates: Rn+ = {(z1 , z2 , . . . , zn ) | zi \u2265 0, \u2200i}. Similarly, the\nnegative orthant is the set of points with non-positive coordinates, denoted as Rn\u2212 =\n\u2212Rn+ . Using vector addition, we write y + Rn+ for the positive orthant anchored at y.\nSimilarly, we write x + Rn\u2212 = x \u2212 Rn+ for the negative orthant anchored at x. The\npositive and negative orthants satisfy the following simple duality relation: x \u2208 y + Rn+\niff y \u2208 x \u2212 Rn+ .\nNote that Rn+ is an n-dimensional convex polyhedron. For each 1 \u2264 j \u2264 n, we\nconsider the (n \u2212 1)-dimensional face Lj spanned by the coordinate axes except the j th\none, that is, Lj = {(z1 , z2 , . . . , zn ) \u2208 Rn+ | zj = 0}.\nWe say that y + Rn+ is supported by X if (y + Lj ) \u2229 X 6= \u2205 for every 1 \u2264 j \u2264 n.\nAssuming y + Rn+ is supported by X, we can construct a set Y \u2286 X by collecting\none point per (n \u2212 1)-dimensional face of the orthant and get y = f (Y ). It is also\n\n\fallowed that two faces contribute the same point to Y . Similarly, if y = f (Y ) for a\nsubset Y \u2286 X, then the positive orthant anchored at y is supported by X. Hence, we\nget the following lemma.\nLemma 5 (Orthant Lemma). y \u2208 Fmin (X) iff y + Rn+ is supported by X.\nConstruction. We use the Orthant Lemma to construct Fmin (X). We begin by describing the set of points y for which the j th face of the positive orthant anchored at y has\na non-empty intersection with X. Define Fj = X \u2212 Lj , the set of points of the form\nx \u2212 z, where x \u2208 X and z \u2208 Lj .\nLemma 6 (Face Lemma). (y + Lj ) \u2229 X 6= \u2205 iff y \u2208 Fj .\nProof. Let x \u2208 X be a point in the intersection, that is, x \u2208 y + Lj . Using the duality\nrelation for the (n \u2212 1)-dimensional orthant, we get y \u2208 x \u2212 Lj . By definition, x \u2212 Lj\nis a subset of X \u2212 Lj , and hence y \u2208 Fj .\n\u2293\n\u2294\nIt is now easy to describe the set defined in our problem statement.\nLemma 7 (Characterization). Fmin (X) =\n\nTn\n\nj=1\n\nFj .\n\nProof. By the Orthant Lemma, y \u2208 Fmin (X) iff y + Rn+ is supported by X. Equivalently, (y + Lj ) \u2229 X 6= \u2205 for all 1 \u2264 j \u2264 n. By the Face Lemma, this is equivalent to\ny belonging to the common intersection of the sets Fj = X \u2212 Lj .\n\u2293\n\u2294\nAlgorithm for computation of Fmin (conv(S)). Following the construction, we get an\nalgorithm that computes Fmin (conv(S)) for a finite set S of points in Rn . Let |S| = m.\nWe first represent X = conv(S) as intersection of half-spaces: we require at most mn\nn\nhalf-spaces (linear constraints). It follows that\nTn Fj = X \u2212 Lj can be expressed as m\nlinear constraints, and hence Fmin (X) = j=1 Fj can be expressed as n * mn linear\nconstraints. This gives us the following result.\nTheorem 3. Given a finite set S of m points in Rn , we can construct in O(n * mn ) time\nn * mn linear constraints that represent Fmin (conv(S)).\n\n5 Mean-Payoff Automaton Expressions are Decidable\nSeveral problems on quantitative languages can be solved for the class of mean-payoff\nautomaton expressions using the vector set. The decision problems of quantitative\nemptiness and universality, and quantitative language inclusion and equivalence are all\ndecidable, as well as questions related to cut-point languages, and computing distance\nbetween mean-payoff languages.\n\n\fDecision problems and distance. From the vector set VE = {hLA1 (w), . . . , LAn (w)i \u2208\nRn | w \u2208 \u03a3 \u03c9 }, we can compute the value set LE (\u03a3 \u03c9 ) = {LE (w) | w \u2208 \u03a3 \u03c9 }\nof values of words according to the quantitative language of E as follows. The set\nLE (\u03a3 \u03c9 ) is obtained by successive application of min-, max- and sum-projections\nmax sum\npmin\n: Rk \u2192 Rk\u22121 where i < j \u2264 k, defined by\nij , pij , pij\npmin\nij ((x1 , . . . , xk )) = (x1 , . . . , xi\u22121 , min(xi , xj ), xi+1 , . . . , xj\u22121 , xj+1 , . . . xk ),\npsum\nij ((x1 , . . . , xk )) = (x1 , . . . , xi\u22121 , xi + xj , xi+1 , . . . , xj\u22121 , xj+1 , . . . xk ),\nmax min\n\u03c9\nand analogously for pmax\nij . For example, p12 (p23 (VE )) gives the set LE (\u03a3 ) of word\nvalues of the mean-payoff automaton expression E = max(A1 , min(A2 , A3 )).\nAssuming a representation of the polytopes of VE as a boolean combination \u03c6E of\nlinear constraints, the projection pmin\nij (VE ) is represented by the formula\n\n\u03c8 = (\u2203xj : \u03c6E \u2227 xi \u2264 xj ) \u2228 (\u2203xi : \u03c6E \u2227 xj \u2264 xi )[xj \u2190 xi ]\nwhere [x \u2190 e] is a substitution that replaces every occurrence of x by the expression\ne. Since linear constraints over the reals admit effective elimination of existential quantification, the formula \u03c8 can be transformed into an equivalent boolean combination\nof linear constraints without existential quantification. The same applies to max- and\nsum-projections.\nSuccessive applications of min-, max- and sum-projections (following the structure\nof the mean-payoff automaton expression E) gives the value set LE (\u03a3 \u03c9 ) \u2286 R as a\nboolean combination of linear constraints, hence it is a union of intervals. From this set,\nit is easy to decide the quantitative emptiness problem and the quantitative universality\nproblem: there exists a word w \u2208 \u03a3 \u03c9 such that LE (w) \u2265 \u03bd if and only if LE (\u03a3 \u03c9 ) \u2229\n[\u03bd, +\u221e[ 6= \u2205, and LE (w) \u2265 \u03bd for all words w \u2208 \u03a3 \u03c9 if and only if LE (\u03a3 \u03c9 ) \u2229 ] \u2212\n\u221e, \u03bd[ = \u2205.\nIn the same way, we can decide the quantitative language inclusion problem \"is\nLE (w) \u2264 LF (w) for all words w \u2208 \u03a3 \u03c9 ?\" by a reduction to the universality problem\nfor the expression F \u2212 E and threshold 0 since mean-payoff automaton expressions are\nclosed under sum and complement. The quantitative language equivalence problem is\nthen obviously also decidable.\nFinally, the distance between the quantitative languages of E and F can be computed as the largest number (in absolute value) in the value set of F \u2212 E. As a corollary,\nthis distance is always a rational number.\nComparison with [1]. The work in [1] considers deterministic mean-payoff automata\nwith multiple payoffs. The weight function in such an automaton is of the form wt :\n\u03b4 \u2192 Qd . The value of a finite sequence (vi )1\u2264i\u2264n (where vi \u2208 Qd ) is the mean of the\nPn\u22121\ntuples vi , that is a d-dimensional vector Avgn = n1 * i=0 vi . The \"value\" associated\nto an infinite run (and thus also to the corresponding word, since the automaton is\ndeterministic) is the set Acc \u2286 Rd of accumulation points of the sequence (Avgn )n\u22651 .\nIn [1], a query language on the set of accumulation points is used to define multithreshold mean-payoff languages. For 1 \u2264 i \u2264 n, let pi : Rn \u2192 R be the usual projection along the ith coordinate. A query is a boolean combination of atomic threshold conditions of the form min(pi (Acc)) \u223c \u03bd or max(pi (Acc)) \u223c \u03bd where \u223c\u2208 {<, \u2264, \u2265, >}\n\n\fand \u03bd \u2208 Q. A word is accepted if the set of accumulation points of its (unique) run satisfies the query. Emptiness is decidable for such multi-threshold mean-payoff languages,\nby an argument based on the computation of the convex hull of the vector values of the\nsimple cycles in the automaton [1] (see also Lemma 1). We have shown that this convex\nhull conv(SE ) is not sufficient to analyze quantitative languages of mean-payoff automaton expressions. It turns out that a richer query language can also be defined using\nour construction of Fmin (conv(SE )).\nIn our setting, we can view a d-dimensional mean-payoff automaton A as a product\nPA of 2d copies Ait of A (where 1 \u2264 i \u2264 d and t \u2208 {LimInfAvg, LimSupAvg}), where\nAit assigns to each transition the ith coordinate of the payoff vector in A, and the automaton is interpreted as a t-automaton. Intuitively, the set Acc of accumulation points\nof a word w satisfies min(pi (Acc)) \u223c \u03bd (resp. max(pi (Acc) \u223c \u03bd) if and only if the\nvalue of w according to the automaton Ait for t = LimInfAvg (resp. t = LimSupAvg) is\n\u223c \u03bd. Therefore, atomic threshold conditions can be encoded as threshold conditions on\nsingle variables of the vector set for PA . Therefore, the vector set computed in Section 4\nallows to decide the emptiness problem for multi-threshold mean-payoff languages, by\nchecking emptiness of the intersection of the vector set with the constraint corresponding to the query.\nFurthermore, we can solve more expressive queries in our framework, namely where\natomic conditions are linear constraints on LimInfAvg- and LimSupAvg-values. For example, the constraint LimInfAvg(wt1 ) + LimSupAvg(wt2 ) \u223c \u03bd is simply encoded as\nxk + xl \u223c \u03bd where k, l are the indices corresponding to A1LimInfAvg and A2LimSupAvg respectively. Note that the trick of extending the dimension of the d-payoff vector with,\nn\no\nn\no\nSup\nInf Avg(wt1 )\u00b1Lim Inf Avg(wt2 )\nsay wtd+1 = wt1 +wt2 , is not equivalent because Lim Sup\nn\no\nn\no\nSup\nis not equal to Lim Sup\nand \u00b1).\nInf Avg(wt1 \u00b1 wt2 ) in general (no matter the choice of\nInf\nHence, in the context of non-quantitative languages our results also provide a richer\nquery language for the deterministic mean-payoff automata with multiple payoffs.\nComplexity. All problems studied in this section can be solved easily (in polynomial\ntime) once the value set is constructed, which can be done in quadruple exponential\ntime. The quadruple exponential blow-up is caused by (a) the synchronized product\nconstruction for E, (b) the computation of the vector values of all simple cycles in AE ,\n(c) the construction of the vector set Fmin (conv(SE )), and (d) the successive projections of the vector set to obtain the value set. Therefore, all the above problems can be\nsolved in 4EXPTIME.\nTheorem 4. For the class of mean-payoff automaton expressions, the quantitative\nemptiness, universality, language inclusion, and equivalence problems, as well as distance computation can be solved in 4EXPTIME.\nTheorem 4 is in sharp contrast with the nondeterministic and alternating meanpayoff automata for which language inclusion is undecidable (see also Table 1). The\nfollowing theorem presents the undecidability result that is derived from the results\nof [9].\nTheorem 5. The quantitative universality, language inclusion, and language equivalence problems are undecidable for nondeterministic mean-payoff automata; and the\n\n\fquantitative emptiness, universality, language inclusion, and language equivalence\nproblems are undecidable for alternating mean-payoff automata.\n\n6 Expressive Power and Cut-point Languages\nWe study the expressive power of mean-payoff automaton expressions (i) according to\nthe class of quantitative languages that they define, and (ii) according to their cut-point\nlanguages.\nExpressive power comparison. We compare the expressive power of mean-payoff automaton expressions with nondeterministic and alternating mean-payoff automata. The\nresults of [5] show that there exist deterministic mean-payoff automata A1 and A2 such\nthat min(A1 , A2 ) cannot be expressed by nondeterministic mean-payoff automata. The\nresults of [4] shows that there exists deterministic mean-payoff automata A1 and A2\nsuch that sum(A1 , A2 ) cannot be expressed by alternating mean-payoff automata. It\nfollows that there exist languages expressible by mean-payoff automaton expression\nthat cannot be expressed by nondeterministic and alternating mean-payoff automata. In\nTheorem 6 we show the converse, that is, we show that there exist languages expressible\nby nondeterministic mean-payoff automata that cannot be expressed by mean-payoff\nautomaton expression. It may be noted that the subclass of mean-payoff automaton expressions that only uses min and max operators (and no sum operator) is a strict subclass\nof alternating mean-payoff automata, and when only the max operator is used we get a\nstrict subclass of the nondeterministic mean-payoff automata.\nTheorem 6. Mean-payoff automaton expressions are incomparable in expressive\npower with nondeterministic and alternating mean-payoff automata: (a) there exists\na quantitative language that is expressible by mean-payoff automaton expressions, but\ncannot be expressed by alternating mean-payoff automata; and (b) there exists a quantitative language that is expressible by a nondeterministic mean-payoff automaton, but\ncannot be expressed by a mean-payoff automaton expression.\nCut-point languages. Let L be a quantitative language over \u03a3. Given a threshold \u03b7 \u2208\nR, the cut-point language defined by (L, \u03b7) is the language (i.e., the set of words)\nL\u2265\u03b7 = {w \u2208 \u03a3 \u03c9 | L(w) \u2265 \u03b7}. It is known for deterministic mean-payoff automata\nthat the cut-point language may not be \u03c9-regular, while it is \u03c9-regular if the threshold \u03b7\nis isolated, i.e. if there exists \u01eb > 0 such that |L(w) \u2212 \u03b7| > \u01eb for all words w \u2208 \u03a3 \u03c9 [5].\nWe present the following results about cut-point languages of mean-payoff automaton expressions. First, we note that it is decidable whether a rational threshold \u03b7 is\nan isolated cut-point of a mean-payoff automaton expression, using the value set (it\nsuffices to check that \u03b7 is not in the value set since this set is closed). Second, isolated cut-point languages of mean-payoff automaton expressions are robust as they remain unchanged under sufficiently small perturbations of the transition weights. This\nresult follows from a more general robustness property of weighted automata [5] that\nextends to mean-payoff automaton expressions: if the weights in the automata occurring in E are changed by at most \u01eb, then the value of every word changes by at most\n\n\fmax(k, 1) * \u01eb where k is the number of occurrences of the sum operator in E. Therefore\nDsup (LE , LF \u01eb ) \u2192 0 when \u01eb \u2192 0 where F \u01eb is any mean-payoff automaton expression\nobtained from E by changing the weights by at most \u01eb. As a consequence, isolated cutpoint languages of mean-payoff automaton expressions are robust. Third, the isolated\ncut-point language of mean-payoff automaton expressions is \u03c9-regular. To see this, note\nthat every strongly connected component of the product automaton AE contributes with\na closed convex set to the value set of E. Since the max-, min- and sum-projections\nare continuous functions, they preserve connectedness of sets and therefore each scc C\ncontributes with an interval [mC , MC ] to the value set of E. An isolated cut-point \u03b7\ncannot belong to any of these intervals, and therefore we obtain a B\u00fcchi-automaton for\nthe cut-point language by declaring to be accepting the states of the product automaton\nAE that belong to an scc C such that mC > \u03b7. Hence, we get the following result.\nTheorem 7. Let L be the quantitative language of a mean-payoff automaton expression. If \u03b7 is an isolated cut-point of L, then the cut-point language L\u2265\u03b7 is \u03c9-regular.\n\n7 Conclusion and Future Works\nWe have presented a new class of quantitative languages, the mean-payoff automaton\nexpressions which are both robust and decidable (see Table 1), and for which the distance between quantitative languages can be computed. The decidability results come\nwith a high worst-case complexity, and it is a natural question for future works to either\nimprove the algorithmic solution, or present a matching lower bound. Another question\nof interest is to find a robust and decidable class of quantitative languages based on the\ndiscounted sum measure [3].\n\nReferences\n1. R. Alur, A. Degorre, O. Maler, and G. Weiss. On omega-languages defined by mean-payoff\nconditions. In Proc. of FOSSACS: Foundations of Software Science and Computational\nStructures, LNCS 5504, pages 333\u2013347. Springer, 2009.\n2. M. Bojanczyk. Beyond omega-regular languages. In Proc. of STACS: Symposium on Theoretical Aspects of Computer Science, LIPIcs 3. Schloss Dagstuhl - Leibniz-Zentrum fuer\nInformatik, Germany, 2010.\n3. K. Chatterjee, L. Doyen, and T. A. Henzinger. Quantitative languages. In Proc. of CSL:\nComputer Science Logic, LNCS 5213, pages 385\u2013400. Springer, 2008.\n4. K. Chatterjee, L. Doyen, and T. A. Henzinger. Alternating weighted automata. In Proc. of\nFCT: Fundamentals of Computation Theory, LNCS 5699, pages 3\u201313. Springer, 2009.\n5. K. Chatterjee, L. Doyen, and T. A. Henzinger. Expressiveness and closure properties for\nquantitative languages. In Proc. of LICS: Logic in Computer Science, pages 199\u2013208. IEEE\nComputer Society Press, 2009.\n6. K. Chatterjee, A. Ghosal, T. A. Henzinger, D. Iercan, C. Kirsch, C. Pinello, and\nA. Sangiovanni-Vincentelli. Logical reliability of interacting real-time tasks. In DATE,\npages 909\u2013914. ACM, 2008.\n7. L. de Alfaro. How to specify and verify the long-run average behavior of probabilistic systems. In Proc. of LICS: Logic in Computer Science, pages 454\u2013465. IEEE, 1998.\n\n\f8. L. de Alfaro, R. Majumdar, V. Raman, and M. Stoelinga. Game relations and metrics. In\nProc. of LICS: Logic in Computer Science, pages 99\u2013108. IEEE, 2007.\n9. A. Degorre, L. Doyen, R. Gentilini, J.-F. Raskin, and S. Toru\u0144czyk. Energy and mean-payoff\ngames with imperfect information. In Proceedings of CSL 2010: Computer Science Logic,\nLecture Notes in Computer Science. Springer-Verlag, 2010. To appear.\n10. J. Desharnais, V. Gupta, R. Jagadeesan, and P. Panangaden. Metrics for labeled markov\nsystems. In Proc. of CONCUR: Concurrency Theory, LNCS 1664, pages 258\u2013273. Springer,\n1999.\n11. M. Droste and P. Gastin. Weighted automata and weighted logics. Th. C. Sci., 380(1-2):69\u2013\n86, 2007.\n12. M. Droste, W. Kuich, and H. Vogler. Handbook of Weighted Automata. Springer-Verlag,\n2009.\n13. M. Droste and D. Kuske. Skew and infinitary formal power series. In ICALP, LNCS 2719,\npages 426\u2013438. Springer, 2003.\n14. A. Ehrenfeucht and J. Mycielski. Positional strategies for mean payoff games. Int. Journal\nof Game Theory, 8(2):109\u2013113, 1979.\n15. O. Kupferman and Y. Lustig. Lattice automata. In VMCAI, LNCS 4349, pages 199\u2013213.\nSpringer, 2007.\n16. M. O. Rabin. Probabilistic automata. Information and Control, 6(3):230\u2013245, 1963.\n17. M. P. Sch\u00fctzenberger. On the definition of a family of automata. Inf. and control, 4(2-3):245\u2013\n270, 1961.\n18. E. Vidal, F. Thollard, C. de la Higuera, F. Casacuberta, and R. C. Carrasco. Probabilistic\nfinite-state machines-part I. IEEE Trans. Pattern Anal. Mach. Intell., 27(7):1013\u20131025, 2005.\n19. U. Zwick and M. Paterson. The complexity of mean payoff games on graphs. Theor. Comput.\nSci., 158(1&2):343\u2013359, 1996.\n\n\fA\n\nProofs of Section 3\n\nProof (of Lemma 1). Let A1 , . . . , An be the deterministic weighted automata occurring\nin E.\nP\nFirst, let x \u2208 conv(SE ). Then, x = pi=1 \u03bbi vi where v1 , v2 , . . .P\n, vp are the vector\np\nvalues of simple cycles \u03c11 , \u03c12 , . . . , \u03c1p in AE = A1 \u00d7 * * * \u00d7 An , and i=1 \u03bbi = 1 with\n\u03bbi \u2265 0 for all 1 \u2264 i \u2264 p.\nFor each of the above cycles \u03c1i , let qi be a state occurring in \u03c1i , and let \u03c1i\u2192j be a\nsimple path in AE connecting qi and qj (such paths exist for each 1 \u2264 i, j \u2264 p because\nAE has a unique strongly connected component). Let \u03c10\u2192i be a simple path in AE\nfrom the initial state qI to qi . Note that the length of \u03c1i and \u03c1i\u2192j is at most m = |AE |\nthe number of states in AE . We consider the following sequence of ultimately periodic\npaths, parameterized by N \u2208 N:\nkN\n\nkN\n\n\u03c1\u0302N = \u03c10\u21921 * (\u03c111 * \u03c11\u21922 * . . . * \u03c1pp * \u03c1p\u21921 )\u03c9 ,\nwhere kiN =\n\nj\n\nN *\u03bbi\n|\u03c1i |\n\nk\n\nfor all 1 \u2264 i \u2264 p. Note that \u03c1\u0302N is the run of a lasso-word wN in\n\nAE , and that N * \u03bbi \u2212 |\u03c1i | \u2264 |\u03c1i | * kiN \u2264 N * \u03bbi .\nBecause \u03c1\u0302N is ultimately periodic, the vector value of \u03c1\u0302N gives the value of wN in\neach Ai . It can be computed as\nkN\n\nkN\n\nLimAvg(\u03c1\u0302N ) = Avg(\u03c111 * \u03c11\u21922 * . . . * \u03c1pp * \u03c1p\u21921 )\nand it can be bounded along each coordinate j = 1, . . . , n as follows (we denote by W\nthe largest weight in AE in absolute value):\n\np\nX\n\nLimAvgj (\u03c1\u0302N ) \u2264\n\ni=1\n\np\nX\n\n\u2264\n\nkiN\n\ni=1\n\n* |\u03c1i | * Avgj (\u03c1i ) +\np\nX\n\np\nX\n\nkiN * |\u03c1i | +\n\np\nX\n\n|AE |\n\ni=1\n\ni=1\n\nN * \u03bbi * Avgj (\u03c1i ) + p * m * W\np\nX\n\nN * \u03bbi \u2212 |\u03c1i | + |AE |\n\ni=1\n\n\u2264\n\n|AE | * W\n\ni=1\n\nN *xj +p*m*W\nN\n\n= xj +\n\np*m*W\nN\n\n\fAnalogously, we have\np\nX\n\nLimAvgj (\u03c1\u0302N ) \u2265\n\ni=1\n\np\nX\n\n\u2265\n\nkiN * |\u03c1i | * Avgj (\u03c1i ) \u2212\np\nX\n\np\nX\n\n|AE | * W\n\ni=1\n\nkiN * |\u03c1i | +\n\np\nX\n\n|AE |\n\ni=1\n\ni=1\n\n(N * \u03bbi \u2212 |\u03c1i |) * Avgj (\u03c1i ) \u2212 p * m * W\n\ni=1\n\np\nX\n\nN * \u03bbi + |AE |\n\ni=1\n\n\u2265\n\nN *xj \u22122p*m*W\nN +p*m\n\n= xj \u2212\n\np*m*(2W \u2212xj )\nN +p*m\n\nTherefore LimAvgj (\u03c1\u0302N ) \u2192 xj when N \u2192 \u221e. This shows that x is in the closure\nof the vector set of lasso-words.\nSecond, we show that the value of lasso words according to each automaton Ai form\na vector which belong to conv(SE ) (which is equal to its closure). Let w = w1 (w2 )\u03c9 be\na lasso-word. It is easy to see that there exists p1 , p2 such that p = p1 + p2 \u2264 m = |AE |\nand the run of AE on w1 w2p has the shape of a lasso (i.e., the automaton AE is in the\nsame state after reading w1 w2p1 and after reading w1 w2p ), and thus the cyclic part of the\nlasso can be decomposed into simple cycles in AE . The vector value of w in each Ai is\nthe mean of the vector values of the simple cycles in the decomposition, and therefore\nit belongs to the convex hull conv(SE ).\n\u2293\n\u2294\nProof (of Lemma 2). First, show that VE \u2286 Fmin (conv(SE )). Let x \u2208 VE be a tuple\nof values of some word w according to each automaton Ai occurring in E (i.e., xi =\nLAi (w) for all 1 \u2264 i \u2264 n). For \u01eb > 0 and 1 \u2264 k \u2264 n, we construct a lasso-word w\u01ebk\nsuch that |LAk (w\u01eb ) \u2212 xk | \u2264 \u01eb and LAi (w\u01eb ) \u2265 xi \u2212 \u01eb for all 1 \u2264 i \u2264 n with i 6= k. If\nwe denote by y\u01ebk the vector value of w\u01ebk , then the value y = fmin ({y\u01ebk | 1 \u2264 k \u2264 n}) is\nsuch that |yi \u2212 xi | \u2264 \u01eb for all 1 \u2264 k \u2264 n. By Lemma 1, the limit of the vector value y\u01ebk\nwhen \u01eb \u2192 0 is in conv(SE ), and thus x \u2208 Fmin (conv(SE )).\nWe give the construction of w\u01ebk for k = 1. The construction is similar for k \u2265 2.\nConsider the word w and let \u03c1 be the suffix of the (unique) run of AE on w which visits\nonly states in the strongly connected component of AE . The value of \u03c1 and the value of\nw coincide (according to each Ai ) since the mean-payoff value is prefix-independent.\nSince LAi (w) = xi for all 1 \u2264 i \u2264 n, there exists a position p \u2208 N such that the mean\nvalue of all prefixes of \u03c1 of length greater than p is at least xi \u2212 \u01eb according to each\nAi (since each Ai is a LimInfAvg-automata). Since LA1 (w) = x1 , there exist infinitely\nmany prefixes \u03c1\u2032 of \u03c1 with mean value according to A1 close to x1 , more precisely such\nthat |Avg1 (\u03c1\u2032 ) \u2212 x1 | \u2264 \u01eb. Pick such a prefix \u03c1\u2032 of length at least max(p, 1\u01eb ). Since \u03c1\u2032\nis in the strongly connected component of AE , we can extend \u03c1\u2032 to loop back to its\nfirst state. This requires at most m additional steps and gives \u03c1\u2032\u2032 . Note also that \u03c1\u2032\u2032 can\nbe reached from the initial state of AE since it was the case of \u03c1, and thus it defines a\n\n\flasso-shaped run whose value can be bounded along the first coordinate as follows:\n|\u03c1\u2032 |*Avg1 (\u03c1\u2032 )\u2212|\u03c1\u2032\u2032 |*x1 +m*W\n\n|Avg1 (\u03c1\u2032\u2032 ) \u2212 x1 | \u2264\n\u2264\n\n|\u03c1\u2032\u2032 |\n|\u03c1\u2032 |*|Avg1 (\u03c1\u2032 )\u2212x1 |+(|\u03c1\u2032\u2032 |\u2212|\u03c1\u2032 |)*x1 +m*W\n|\u03c1\u2032\u2032 |\n\n\u2264\u01eb+\n\nm*x1 +m*W\n|\u03c1\u2032\u2032 |\n\n\u2264\u01eb+\n\n2m*W\n|\u03c1\u2032\u2032 |\n\n\u2264 \u01eb * (1 + 2m * W )\nHence, the value along the first coordinate of the word w\u01eb1 corresponding to the run \u03c1\u2032\u2032\ntends to x1 when when \u01eb \u2192 0. We show similarly that the value of w\u01eb1 along the other\ncoordinates i \u2265 2 is bounded from below by xi \u2212 \u01eb * (1 + 2m * W ). The result follows.\nNow, we show that Fmin (conv(SE )) \u2286 VE . In this proof, we use the notation \u2299\nfor iterated concatenation defined as follows. Given nonempty words w1 , w2 \u2208 \u03a3 + ,\nthe finite word w1 \u2299 w2 is w1 * (w2 )k where k = |w1 |2 . We assume that \u2299 (iterated\nconcatenation) and * (usual concatenation) have the same precedence and that they are\nleft-associative. For example, the expression ab\u2299a*b is parsed as (ab\u2299a)*b and denotes\nthe word abaaaab, while the expression ab*a\u2299b is parsed as (ab*a)\u2299b and denotes the\nword abab9 . We use this notation for the purpose of simplifying the proof presentation,\nand some care needs to be taken. For example, explicit use of concatenation (i.e., a * b\nvs. ab) makes a difference since ab \u2299 ab = (ab)5 while ab \u2299 a * b = aba4 b. Finally, we\nuse notations such as (w1 * w2 \u2299)\u03c9 to denote the infinite word w1 * w2 \u2299 w1 * w2 \u2299 . . . .\nUsually we use the notation w1 \u2299 w2 when the run of AE on w1 * w2 can be decomposed as \u03c11 *\u03c12 where \u03c1i corresponds to wi (i = 1, 2) and \u03c12 is a cycle in the automaton.\nThen, the mean value of the run on w1 \u2299 w2 is\n|\u03c11 | * Avg(\u03c11 ) + |\u03c11 |2 * |\u03c12 | * Avg(\u03c12 )\n|\u03c11 | + |\u03c11 |2 * |\u03c12 |\n=\n\nAvg(\u03c11 ) + |\u03c11 | * |\u03c12 | * Avg(\u03c12 )\n1 + |\u03c11 | * |\u03c12 |\n\n= Avg(\u03c12 ) +\n\nAvg(\u03c11 ) \u2212 Avg(\u03c12 )\n1 + |\u03c11 | * |\u03c12 |\n\nTherefore, since |Avg(\u03c11 ) \u2212 Avg(\u03c12 )| \u2264 2W independently of w1 and w2 , a key property of \u2299 is that the mean value of w1 \u2299 w2 can be made arbitrarily close to Avg(\u03c12 )\nby taking w1 sufficiently long (since |w1 | = |\u03c11 |).\nWe proceed with the proof of the lemma. Let x \u2208 Fmin (conv(SE )) and let\ny1 , . . . , yn be n points in conv(SE ) such that the ith coordinate of x and yi coincide\nfor all 1 \u2264 i \u2264 n, and the j th coordinate of x is smaller than the j th coordinate of yi for\nall j 6= i. Such yi 's exist by definition of Fmin though they may not be distinct.\nBy Lemma 1, for all \u01eb > 0 there exist lasso-words w1 , . . . , wn such that kvk \u2212yk k \u2264\n\u01eb where vk = hLA1 (wk ), . . . , LAn (wk )i for each 1 \u2264 k \u2264 n. For each 1 \u2264 i \u2264 n, let\n\n\f\u03c1i be the cyclic part of the (lasso-shaped) run of AE on wi , and let qi be the first state\nin \u03c1i . For each 1 \u2264 i, j \u2264 n, define \u03c1i\u2192j the shortest path in AE from qi to qj , and let\n\u03c10\u2192j be a simple path in AE from the initial state qI to qj (such paths exist because\nAE is strongly connected). Note that Avgj (\u03c1i ) = LAj (wi ). We construct the following\ninfinite run in AE :\n\u03c1\u0302 = \u03c10\u21921 \u2299 (\u03c11 * \u03c11\u21922 \u2299 \u03c12 * \u03c12\u21923 \u2299 . . . \u03c1n * \u03c1n\u21921 \u2299)\u03c9\nIt is routine to show that \u03c1\u0302 is a run of AE , and we have LimAvgj (\u03c1\u0302) = vjj because\n(i) the cycles \u03c11 , . . . , \u03c1n are asymptotically prevailing over the cycle \u03c11\u21922 \u03c12\u21923 \u03c1\u0307n\u21921 ,\n(ii) by the key property of \u2299, there exist infinitely many prefixes in \u03c1\u0302 such that the\naverage of the weight along the j th coordinate converges to vjj , and (iii) all cycles \u03c1i\nhave average value greater than vjj along the j th coordinate. Therefore, the liminf of\nthe averages along the j th coordinate (i.e., LimAvgj (\u03c1\u0302)) is vjj , and the vector of values\nof \u03c1\u0302 is thus at distance \u01eb of x, that is kLimAvg(\u03c1\u0302) \u2212 xk \u2264 \u01eb. The construction of \u03c1\u0302 can\nbe adapted to obtain LimAvg(\u03c1\u0302) = x by changing the k th occurrence of \u03c1i in \u03c1\u0302 by a\ncycle corresponding to a lasso-word wi obtained as above for \u01eb < n1 .\n\u2293\n\u2294\n\nB Proofs of Section 4\nProof (of Lemma 3). Let x = fmin(u1 , u2 , . . . , un ) and y = fmin (v 1 , v 2 , . . . , v n )\nwhere u1 , . . . , un , v 1 , . . . , v n \u2208 X. Let z = \u03bbx + (1 \u2212 \u03bb)y where 0 \u2264 \u03bb \u2264 1 and\nwe prove that z \u2208 Fmin (X). Without loss of generality, assume that xi = uii and\nyi = vii for all 1 \u2264 i \u2264 n. Then zi = \u03bbuii + (1 \u2212 \u03bb)vii for all 1 \u2264 i \u2264 n.\nTo show that z \u2208 Fmin (X), we give for each 1 \u2264 j \u2264 n a point p \u2208 X such that\npj = zj and pk \u2265 zk for all k 6= j. Take p = \u03bbuj + (1 \u2212 \u03bb)v j . Clearly p \u2208 X since\nuj , v j \u2208 X and X is convex, and (i) wj = \u03bbujj + (1 \u2212 \u03bb)vjj = zj , and (ii) for all\nk 6= j, we have wk = \u03bbujk + (1 \u2212 \u03bb)vkj \u2265 \u03bbukk + (1 \u2212 \u03bb)vkk = zk (since uk has the\nminimal value on k th coordinate among u1 , . . . , un , similarly for v k ).\n\u2293\n\u2294\nProof (of Proposition 1). By Lemma 3, we already know that conv(Fmin (S)) \u2286\nFmin (conv(S)) (the set Fmin (conv(S)) is convex, and since Fmin is a monotone operator and S \u2286 conv(S), we have Fmin (S) \u2286 Fmin (conv(S)) and thus conv(Fmin (S)) \u2286\nFmin (conv(S))).\nWe prove that Fmin (conv(S)) \u2286 conv(Fmin (S)) if S \u2286 R2 . Let x \u2208\nFmin (conv(S)) and show that x \u2208 conv(Fmin (S)). Since x \u2208 Fmin (conv(S)), there\nexist p, q \u2208 conv(S) such that x = fmin (p, q), and assume that p1 < q1 and p2 > q2\n(other cases are symmetrical, or imply that x = p or x = q for which the result is trivial\nas then x \u2208 conv(S)). We show that x = (p1 , q2 ) is in the convex hull of {p, q, r}\nwhere r = fmin (u, v) and u \u2208 S is the point in S with smallest first coordinate, and\nv \u2208 S is the point in S with smallest second coordinate, so that r1 = u1 \u2264 p1 and\nr2 = v2 \u2264 q2 . Simple computations show that the equation x = \u03bbp + \u03bcq + (1 \u2212 \u03bb \u2212 \u03bc)r\nhas a solution with 0 \u2264 \u03bb, \u03bc \u2264 1 and the result follows.\n\u2293\n\u2294\nProof (of Lemma 4). By definition, we have Fn (S) \u2286 F (S). For a point x = f (P )\nfor a finite subset P \u2286 S, choose one point each that contributes to a coordinate and\n\n\fobtain a finite set P \u2032 \u2286 P of at most n points such that x = f (P ). This shows that\nF (S) \u2286 Fn (S).\nFor the second part, let P = {p1 , p2 , . . . , pk } with k \u2264 n, and let x = f (P ). Let\nx1 = f (p1 , p2 ), and for i > 1 we define xi = f (xi\u22121 , pi+1 ). We have x = xn\u22121\n(e.g., f (p1 , p2 , p3 ) = f (f (p1 , p2 ), p3 )). Thus we have obtained x by applying f on two\npoints for n \u2212 1 times, and it follows that Fn (S) \u2286 F2n\u22121 (S).\n\u2293\n\u2294\nProof (of Theorem 2). We show that the construction \u03b3 satisfies condition C1 and C2.\nLet Y \u2032 = \u03b3(Y ). Clearly the set Y \u2032 is a finite subset of conv(Y ) and thus Condition C1\nholds and we now show that Condition C2 is satisfied.\nSince F2 (conv(Y )) is convex (by Lemma 3), it suffices to show that all corners\nof F2 (conv(Y )) belong to conv(F (Y \u2032 )). Consider a point x = f (p, q) where p, q \u2208\nconv(Y ). We will show that either p, q \u2208 Y \u2032 or x cannot be a corner of conv(F2 (Y )).\nIt will follow that F2 (conv(Y )) \u2286 conv(F (Y \u2032 )). Our proof will be an induction on\nthe number of coordinates such that there is a tie (tie is the case where the value of a\ncoordinate of p and q coincide). If there are n ties, then the points p and q are equal and\nwe have x = p = q, and this case is trivial since Y \u2286 Y \u2032 . So the base case is done.\nBy inductive hypothesis, we assume that k + 1-ties yield the result and we consider the\ncase for k-ties. Without loss of generality we consider the following case:\np1 = q1 ; p2 = q2 ; * * * ; pk = qk ;\npk+1 < qk+1 ; pk+2 < qk+2 ; * * * ; pl < ql ;\npl+1 > ql+1 ; pl+2 > ql+2 ; * * * ; pn > qn ;\ni.e, the first k coordinates are ties, then p is the sole contributor to the coordinates k + 1\nto l, and for the rest of the coordinates q is the sole contributor. Below we will use the\nexpression infinitesimal change to mean change smaller than \u03b7 = mink<i\u2264n |pi \u2212 qi |\n(note \u03b7 > 0). Consider the plane \u03a0 with first k coordinates constant (given by x1 =\np1 = q1 ; x2 = p2 = q2 ; * * * ; xk = pk = qk ). We intersect the plane \u03a0 with conv(Y )\nand we obtain a polytope. First we consider the case when p and q are not a corner of\nthe polytope and then we consider when p and q are corners of the polytope.\n1. Case 1: p is not a corner of the polytope \u03a0 \u2229 conv(Y ). We draw a line in \u03a0 with\np as midpoint such that the line is contained in \u03a0 \u2229 conv(Y ). This ensures that the\ncoordinates 1 to k remain fixed along the line.\n(a) If any one of coordinates from k + 1 to l changes along the line, then by\ninfinitesimal change of p along the line, we ensure that x moves along a line.\n(b) Otherwise coordinates k + 1 to l remain constant; and we move p along the\nline in a direction such that at least one of the remaining coordinates (say j)\ndecreases, and decreasing j we have one of the following three cases:\ni. we go down to qj and then we have one more tie and we are fine by inductive hypothesis;\nii. we hit a face of the polytope \u03a0 \u2229 conv(Y ) and then we change direction\nof the line (while staying in the hit face) and continue;\niii. we hit a corner of the polytope \u03a0 \u2229 conv(Y ) and then p becomes a corner\nwhich will be handled in Case 3.\n\n\f2. Case 2: q is not a corner of the polytope \u03a0 \u2229 conv(Y ). By symmetric analysis to\nCase 1 either we are done or q becomes a corner of the polytope \u03a0 \u2229 conv(Y ).\n3. Case 3: p and q are corners of the polytope \u03a0 \u2229 conv(Y ). If \u03a0 is supported by\nY , then both p, q \u2208 Y \u2032 and we are done. Otherwise \u03a0 is not supported by Y , and\nnow we move along lines with p and q as midpoints and slide the plane \u03a0. In other\nwords we move p and q alone lines and move such that the ties remain the same.\nWe also ensure infinitesimal changes along the line so that the contributor of each\ncoordinate is the same as original. Let\np(\u03bb) = p + \u03bb * v;\n\nq(\u03bc) = q + \u03bc * w;\n\nbe the lines where v and w are directions. By ties for 1 \u2264 i \u2264 k we have \u03bb * vi =\n\u03bc * wi . Then for infinitesimal change the point x moves as follows:\nx(\u03bb, \u03bc) = f (p(\u03bb), q(\u03bc)))\n= (p1 + \u03bb * v1 , p2 + \u03bb * v2 , * * * pl + \u03bb * vl , ql+1 + \u03bc * wl+1 , * * * , qn + \u03bc * wn )\n= (p1 + \u03bb * v1 , p2 + \u03bb * v2 , * * * pl + \u03bb * vl , ql+1 + \u03bb *\n\nv1\nw1\n\n* wl+1 , * * * , qn + \u03bb *\n\nv1\nw1\n\nIt follows that x moves along the line x + \u03bb * z where for 1 \u2264 i \u2264 l we have zi = vi\nand for l < i \u2264 n we have zi = wv11 * wi ; note that w1 > 0 since the plane slides.\nSince x moves along a line it cannot be an extreme point.\nThis completes the proof. Also note that in the special case when there is no tie at all\nthen we do not need to consider Case 3 as then \u03a0 = Rn and thus p and q are corners\nof conv(Y ) and hence in Y \u2032 .\nAnalysis. Given a set of m points, the construction \u03b3 yield at most m2 * 2n points.\nThe argument is as follows: consider a point\u0001p, and then we consider all k-dimensional\ncoordinates planes through p. There are nk possible k-dimensional coordinate plane\nthrough p, and summing over all k we get that there are at most 2n coordinate planes\nthat we consider through p. The interesection of a coordinate plane through p with the\nconvex hull of m points gives at most m new corner points, and this claim is as proved\nfollows: the new corner points can be constructed as the shadow of the convex hull\non the plane, and since the convex hull has m corner points the claim follows. Thus it\nfollows that the construction yield at most m2 * 2n new points, and thus we have at most\nm + m2 * 2n \u2264 2 * m2 * 2n points. If the set S has m points, applying the construction\nn\n2\niteratively for n times we obtain the desired set S \u2032 that has at most m2 * 2n +n points.\nSince convex hull of a set of l points in n dimension can be constructed in lO(n) time,\nn\n3\nit follows that the set S \u2032 can be constructed in mO(n*2 ) * 2O(n ) time.\n\u2293\n\u2294\nProof (Theorem 5 (Sketch)). We will show the undecidability for the quantitative universality problem for nondeterministic mean-payoff automata. It will follow that the\nquantitative language inclusion and quantitative language equivalence problem are undecidable for both nondeterministic and alternating automata. The quantitative universality for nondeterministic automata can be reduced to the quantitative emptiness\nas well as the quantitative universality problem for alternating mean-payoff automata.\nHence to complete the proof we derive the undecidability of quantitative universality\nfor nondeterministic mean-payoff automata from the recent results of [9].\n\n* wn )\n\n\fThe results of [9] show that in two-player blind imperfect-information mean-payoff\ngames whether there is a player 1 blind-strategy \u03c3 such that against all player 2 strategies \u03c4 the mean-payoff value P (\u03c3, \u03c4 ) of the play given \u03c3 and \u03c4 is greater than \u03bd is undecidable. The result is a reduction from the halting problem of two-counter machines, and\nwe observe that the reduction has the following property: for threshold value \u03bd = 0, if\nthe two-counter machine halts then player 1 has a blind-strategy to ensure payoff greater\nthan \u03bd, and otherwise against every blind-strategy for player 1, player 2 can ensure that\nthe payoff for player 1 is at most \u03bd = 0. Thus from the above observation about the\nreduction of [9] it follows that in two-player blind imperfect-information mean-payoff\ngames, given a threshold \u03bd, the decision problem whether\n\u2203\u03c3. inf P (\u03c3, \u03c4 ) > \u03bd\n\u03c4\n\nwhere \u03c3 ranges over player 1 blind-strategies, and \u03c4 over player 2 strategies, is undecidable and dually the following decision problem whether\n\u2200\u03c3. sup P (\u03c3, \u03c4 ) \u2265 \u03bd\n\u03c4\n\nis also undecidable. The universality problem for nondeterministic mean-payoff automata is equivalent to two-player blind imperfect information mean-payoff games\nwhere the choice of words represents the blind-strategies for player 1 and resolving\nnondeterminism corresponds to strategies of player 2. It follows that for nondeterministic mean-payoff automata A, given a threshold \u03bd, the decision problem whether\nfor all words w. LA (w) \u2265 \u03bd\nis undecidable.\n\nC\n\n\u2293\n\u2294\n\nProofs of Section 6\n\nProof (of Theorem 6). We prove the two assertions.\n1. The results of [4] shows that there exists deterministic mean-payoff automata A1\nand A2 such that sum(A1 , A2 ) cannot be expressed by alternating mean-payoff\nautomata. Hence the result follows.\n2. We now show that there exist quantitative languages expressible by nondeterministic mean-payoff automata that cannot be expressed by mean-payoff automaton\nexpressions. Consider the language LF of finitely many a's, i.e., for an infinite\nword w we have LF (w) = 1 if w contains finitely many a's, and LF (w) = 0 otherwise. It is easy to see that the nondeterministic mean-payoff automaton (shown\nin Fig. 2) defines LF .\nWe now show that LF is not expressible by a mean-payoff automaton expression.\nTowards contradiction, assume that the expression E defines the language LF , and\nlet AE be the synchronized product of the deterministic automata occurring in E\n(assume AE has n states). Consider a reachable bottom strongly connected component V of the underlying graph of AE , and let C be a b-cycle in V . We construct\n\n\fa, b, 0\nq0\n\nb, 1\na, b, 0\n\nq1\n\na, b, 0\na, 0\n\nsink\n\nFig. 2. A nondeterministic limit-average automaton.\n\nan infinite word w with infinitely many a's as follows: (i) start with a prefix w1\nof length at most n to reach C, (ii) loop k times through the b-cycle C (initially\nk = 1), (iii) read an 'a' and then a finite word of length at most n to reach C\nagain (this is possible since C is in a bottom s.c.c.), and proceed to step (ii) with\nincreased value of k.\nThe cycle C corresponds to a cycle in each automaton of E, and since the value\nof k is increasing unboundedly, the value of w in each automaton of E is given\nby the average of the weights along their b-cycle after reading w1 . Therefore, the\nvalue of w and the value of w1 b\u03c9 coincide in each deterministic automaton of E.\nAs a consequence, their value coincide in E itself. This is a contradiction since\nLF (w) = 0 while LF (w1 b\u03c9 ) = 1.\n\u2293\n\u2294\n\n\f"}