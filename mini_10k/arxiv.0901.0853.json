{"id": "http://arxiv.org/abs/0901.0853v2", "guidislink": true, "updated": "2009-07-13T15:11:37Z", "updated_parsed": [2009, 7, 13, 15, 11, 37, 0, 194, 0], "published": "2009-01-07T15:48:13Z", "published_parsed": [2009, 1, 7, 15, 48, 13, 2, 7, 0], "title": "Entropy Balance and Dispersive Oscillations in Lattice Boltzmann Models", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0901.1801%2C0901.0925%2C0901.1285%2C0901.2302%2C0901.0458%2C0901.4230%2C0901.4955%2C0901.1025%2C0901.0446%2C0901.3241%2C0901.1823%2C0901.2611%2C0901.2456%2C0901.1192%2C0901.3193%2C0901.1714%2C0901.4491%2C0901.2850%2C0901.4591%2C0901.1059%2C0901.2256%2C0901.1903%2C0901.4969%2C0901.2572%2C0901.2355%2C0901.2539%2C0901.2921%2C0901.1759%2C0901.2779%2C0901.4283%2C0901.3656%2C0901.1191%2C0901.0412%2C0901.4293%2C0901.2467%2C0901.2868%2C0901.1187%2C0901.0028%2C0901.3077%2C0901.0870%2C0901.0328%2C0901.1365%2C0901.0927%2C0901.4550%2C0901.1957%2C0901.1232%2C0901.3266%2C0901.0135%2C0901.3301%2C0901.3189%2C0901.0943%2C0901.3338%2C0901.2316%2C0901.3167%2C0901.0853%2C0901.2377%2C0901.4324%2C0901.0761%2C0901.4720%2C0901.3620%2C0901.4008%2C0901.0859%2C0901.3969%2C0901.1546%2C0901.0873%2C0901.2713%2C0901.1532%2C0901.4634%2C0901.0504%2C0901.3718%2C0901.0233%2C0901.3117%2C0901.4196%2C0901.2542%2C0901.3297%2C0901.1389%2C0901.0751%2C0901.4371%2C0901.2552%2C0901.1828%2C0901.4064%2C0901.0530%2C0901.1264%2C0901.2512%2C0901.2488%2C0901.4843%2C0901.2385%2C0901.1919%2C0901.4081%2C0901.3869%2C0901.3250%2C0901.0813%2C0901.2907%2C0901.1148%2C0901.4505%2C0901.3685%2C0901.0769%2C0901.2525%2C0901.2834%2C0901.1572%2C0901.0779&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Entropy Balance and Dispersive Oscillations in Lattice Boltzmann Models"}, "summary": "We conduct an investigation into the dispersive post-shock oscillations in\nthe entropic lattice-Boltzmann method (ELBM). To this end we use a root finding\nalgorithm to implement the ELBM which displays fast cubic convergence and\nguaranties the proper sign of dissipation. The resulting simulation on the\none-dimensional shock tube shows no benefit in terms of regularization from\nusing the ELBM over the standard LBGK method. We also conduct an experiment\ninvestigating of the LBGK method using median filtering at a single point per\ntime step. Here we observe that significant regularization can be achieved.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0901.1801%2C0901.0925%2C0901.1285%2C0901.2302%2C0901.0458%2C0901.4230%2C0901.4955%2C0901.1025%2C0901.0446%2C0901.3241%2C0901.1823%2C0901.2611%2C0901.2456%2C0901.1192%2C0901.3193%2C0901.1714%2C0901.4491%2C0901.2850%2C0901.4591%2C0901.1059%2C0901.2256%2C0901.1903%2C0901.4969%2C0901.2572%2C0901.2355%2C0901.2539%2C0901.2921%2C0901.1759%2C0901.2779%2C0901.4283%2C0901.3656%2C0901.1191%2C0901.0412%2C0901.4293%2C0901.2467%2C0901.2868%2C0901.1187%2C0901.0028%2C0901.3077%2C0901.0870%2C0901.0328%2C0901.1365%2C0901.0927%2C0901.4550%2C0901.1957%2C0901.1232%2C0901.3266%2C0901.0135%2C0901.3301%2C0901.3189%2C0901.0943%2C0901.3338%2C0901.2316%2C0901.3167%2C0901.0853%2C0901.2377%2C0901.4324%2C0901.0761%2C0901.4720%2C0901.3620%2C0901.4008%2C0901.0859%2C0901.3969%2C0901.1546%2C0901.0873%2C0901.2713%2C0901.1532%2C0901.4634%2C0901.0504%2C0901.3718%2C0901.0233%2C0901.3117%2C0901.4196%2C0901.2542%2C0901.3297%2C0901.1389%2C0901.0751%2C0901.4371%2C0901.2552%2C0901.1828%2C0901.4064%2C0901.0530%2C0901.1264%2C0901.2512%2C0901.2488%2C0901.4843%2C0901.2385%2C0901.1919%2C0901.4081%2C0901.3869%2C0901.3250%2C0901.0813%2C0901.2907%2C0901.1148%2C0901.4505%2C0901.3685%2C0901.0769%2C0901.2525%2C0901.2834%2C0901.1572%2C0901.0779&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We conduct an investigation into the dispersive post-shock oscillations in\nthe entropic lattice-Boltzmann method (ELBM). To this end we use a root finding\nalgorithm to implement the ELBM which displays fast cubic convergence and\nguaranties the proper sign of dissipation. The resulting simulation on the\none-dimensional shock tube shows no benefit in terms of regularization from\nusing the ELBM over the standard LBGK method. We also conduct an experiment\ninvestigating of the LBGK method using median filtering at a single point per\ntime step. Here we observe that significant regularization can be achieved."}, "authors": ["D. Packwood"], "author_detail": {"name": "D. Packwood"}, "author": "D. Packwood", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1103/PhysRevE.80.067701", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/0901.0853v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0901.0853v2", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "18 pages, 4 figures; 13/07/2009 Matlab code added to appendix", "arxiv_primary_category": {"term": "cond-mat.stat-mech", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cond-mat.stat-mech", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0901.0853v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0901.0853v2", "journal_reference": null, "doi": "10.1103/PhysRevE.80.067701", "fulltext": "arXiv:0901.0853v2 [cond-mat.stat-mech] 13 Jul 2009\n\nEntropy Balance and Dispersive Oscillations\nin Lattice Boltzmann Models\nDave Packwood\n\n\u2217\n\nAbstract\nWe conduct an investigation into the dispersive post-shock oscillations in the entropic latticeBoltzmann method (ELBM). To this end we use a root finding algorithm to implement the ELBM which\ndisplays fast cubic convergence and guaranties the proper sign of dissipation. The resulting simulation\non the one-dimensional shock tube shows no benefit in terms of regularization from using the ELBM over\nthe standard LBGK method. We also conduct an experiment investigating of the LBGK method using\nmedian filtering at a single point per time step. Here we observe that significant regularization can be\nachieved.\n\nKeywords: Fluid dynamics, lattice Boltzmann, entropy balance, dispersive oscillations, numerical test,\nshock tube\nAMS subject classifications. 65N12, 76M28, 74Q10, 74J40\n\n1\n\nIntroduction\n\nThe Lattice Boltzmann methods in their original form (see [2, 12]) do not guarantee the proper entropy\nproduction and may violate the Second Law. The proper entropy balance remains up to now a challenging\nproblem for many lattice Boltzmann models [14].\nThe Entropic lattice Boltzmann method (ELBM) was invented first in 1998 as a tool for construction of\nsingle relaxation time lattice Boltzman models which respect the H-theorem [9]. For this purpose, instead\nof the mirror image with local equilibrium as reflection center, the entropic involution was proposed, which\npreserves the entropy value. Later, we call it the Karlin-Succi involution [7]. In 2000, it was reported\nthat exact implementation of the Karlin-Succi involution (which keeps the entropy balance) significantly\nregularizes the post-shock dispersive oscillations [1]. This regularization seems very surprising, because the\nentropic lattice BGK (ELBGK) model gives a second-order approximation to the Navier\u2013Stokes equation\n(different proofs of that degree of approximation were given in [12] and [4]), and due to the Godunov theorem\n[6] linear second-order finite difference methods have to be non monotonic.\nMoreover, Lax [10] and Levermore with Liu [11], demonstrated that these dispersive oscillations are\nunavoidable in classical numerical methods. Schemes with precise control of entropy production, studied\nby Tadmor with Zhong [13], also demonstrated post-shock oscillations. Of course, there remains some gap\nbetween methods with proven existence of dispersive oscillations, and ELBM. However, recently, the existence\nof oscillations in the vicinity of the shock, at small values of viscosity for ELBM, was reported for Burgers'\n\u2217 Department\n\nof Mathematics, University of Leicester, (dp123@le.ac.uk).\n\n1\n\n\fequation [3]. In a recent paper [5] post shock oscillations of ELBGK were reported too, and no difference\nwas found between ELBGK and LBGK in that regard.\nNevertheless, absence of dispersive oscillations for ELBGK was reported many times since 2000. In this\npaper we answer the question: does the precise control of entropy production by ELBGK smooth the postshock oscillation? The answer is negative. The exact implementation of the entropic involution does not\nsmooth the dispersive oscillation (similarly, the exact control of entropy production does not smooth the\npost shock oscillation in finite difference methods [13]). Hence, the smoothing effect is caused by numerical\nimprecision in calculations of entropic involution, i.e. in solution of the following transcendental equation\nwith respect to \u03b1 (\u03b1 6= 0):\nS(f + \u03b1(f \u2217 \u2212 f )) = S(f ),\n(1.1)\nwhere S is entropy, f is a current distribution, and f \u2217 is the corresponding equilibrium.\nIn the first part of this paper we discuss a different numerical implementation of the ELBGK and conduct\nan investigation into exactly what stabilization properties it exhibits.\nThe choice of the method for solution of (1.1) should be very precise, and in Section 4 we describe a\ncubically converging root finding algorithm. It is not sufficient to have high precision when we have average\ndeviation of the current distribution f from the associated equilibrium f \u2217 . For example, for solutions with\nshocks, it is usual for the distribution of this deviation to far from being exponential [5], and there appear\npoints with deviation of several orders higher than the average. Moreover, it is sufficient to smooth a solution\nat one point only. We demonstrate this in the second part of the paper. We select the lattice site with most\nnonequilibrium f and regularize the field of nonequilibrium entropy at this point with 3-point median filter\n[5]. As a result, the dispersive oscillations drastically decrease.\n\n2\n\nLattice Boltzmann methods\n\nThe Lattice Boltzmann method arises as a discretization of Boltzmann's kinetic transport equation\n\u2202f\n+ v * \u2207f = Qc (f ).\n\u2202t\n\n(2.2)\n\nThe population function f describes the distribution of single particles in the system and the collision integral\nQc their interaction. Altogether (2.2) describes the behaviour of the system at the microscopic level. By\nselecting a finite number of velocities vi ,(i = 1,...,n) we create discrete approximation of the kinetic equation\nin velocity space. An appropriate choice of the velocities and time step discretizes space. For a time step\nof \u03b4t = 1 the lattice can be created by unscaled space shifts of the velocities, and we get the fully discrete\nlattice Botzmann gas:\nfi (x + vi ,t + 1) = fi (x,t) + Qi\n(2.3)\nwhere the proper transition from continuous collision integral Qc (f ) to its fully discrete form {Qi } is assumed.\nThe simplest and the most common choice for the discrete collision integral Qi is the Bhatnagar-Gross-Krook\noperator with over-relaxation\nQi = \u03b1\u03b2(fi\u2217 \u2212 fi ).\n(2.4)\nFor the standard LBGK method \u03b1 = 2 and \u03b2 \u2208 [0,1] (usually, \u03b2 \u2208 [1/2,1]) is the over-relaxation coefficient\nused to control viscosity. For \u03b2 = 1/2 the collision operator returns the local equilibrium fi\u2217 and \u03b2 = 1 (the\nmirror reflection) returns the collision for a liquid at the zero viscosity limit. For a viscosity \u03bd the parameter\n\u03b2 is chosen by \u03b2 = \u03b4t/(2\u03bd + \u03b4t). It should be noted that a collision integral such as (2.4) demands prior\nknowledge of a local equilibrium state for the given lattice.\n2\n\n\fA variation on the LBGK is the ELBGK [1]. In this case \u03b1 is varied to ensure a constant entropy\ncondition according to the discrete H-theorem. In general the entropy function is based upon the lattice and\ncannot always be found explicitly. However in the case of the simple one dimensional lattice with velocities\nv = (\u2212c,0,c) and corresponding populations f = (f\u2212 ,f0 ,f+ ) an explicit Boltzmann style entropy function is\nknown [8]:\nS(f ) = \u2212f\u2212 log(f\u2212 ) \u2212 f0 log(f0 /4) \u2212 f+ log(f+ ).\n(2.5)\nWith knowledge of such a function \u03b1 is found as the non-trivial root of the equation\nS(f ) = S(f + \u03b1(f \u2217 \u2212 f )).\n\n(2.6)\n\nThe trivial root \u03b1 = 0 returns the entropy value of the original populations. ELBGK then finds the nontrivial \u03b1 such that (2.6) holds. This version of BGK collision one calls entropic BGK (or EBGK) collision.\nSolution of (2.6) must be found at every time step and lattice site. Entropic equilibria (also derived from\nthe H-theorem) are always used for ELBGK.\n\n3\n\nThe H-theorem for LBMs\n\nIn the continuous case the Boltzmann H the Maxwellian distribution maximizes entropy and therefore also\nhas zero entropy production. In the context of lattice Boltzmann methods a discrete form of the H-theorem\nhas been suggested as a way to introduce thermodynamic control to the system [9].\nFrom this perspective the goal is to find an equilibrium state equivalent to the Maxwellian in the continuum which will similarly maximize entropy. Before the equilibrium can be found an appropriate H function\nmust be known for a given lattice. These functions have been constructed in a lattice dependent fashion in\n[8], and H = \u2212S with S from (2.5) is an example of a H function constructed in this way.\nUsing equilbria derived from a H function with entropy considerations in mind leads to a thermodynamically correct LBM. This is easy to see in the case of the EBGK collision operator (2.4) with explicit local\nequilibrium. EBGK collision obvioulsly respect the Second Law (if \u03b2 \u2264 1), and simple analysis of entropy\ndissipation gives the proper evaluation of viscosity.\nELBGK finds the value of \u03b1 that with \u03b2 = 1 (inviscid fluid) would give zero entropy production, therefore\nmaking the position of zero entropy production the limit of any relaxation. For the fixed \u03b1 used in the\nLBGK method it remains possible, particularly for low viscosity fluids, to relax past this point resulting in\nnegative entropy production, violating the Second Law.\nNear to the zero-viscosity limit the LBGK method produces spurious oscillations around shockwaves.\nApart from the thermodynamic benefits of using ELBGK it has been claimed [1] that ELBGK's thermodynamic considerations act as a regularizer. This claim seems to be at odds with other numerical methods\nwhich respect the same thermodynamic laws as ELBGK. For example the results of Tadmoor and Zhong\n[13] for an entropy correct method display intensive post-shock oscillations. Furthermore it has been demonstrated [10, 11] that such dispersive oscillations are artifacts of the lattice rather than thermodynamic issues.\nAs ELBGK clearly operates on exactly the same lattice as LBGK and other finite difference schemes it\nwarrants a deeper investigation into exactly how it achieves the regularization properties claimed.\n\n4\n\nComputation of entropic involution\n\nIn order to investigate the stabilization properties of ELBGK it is necessary to craft a numerical method\ncapable of finding the non-trivial root in (2.6). In this section we fix the population vectors f and f \u2217 , and\n3\n\n\fare concerned only with this root finding algorithm. We recast (2.6) as a function of \u03b1 only:\nF (\u03b1) = S(f + \u03b1(f \u2217 \u2212 f )) \u2212 S(f ).\n\n(4.7)\n\nIn this setting we attempt to find the non-trivial root r of (4.7) such that F (r) = 0. It should be noted that\nas we search for r numerically we should always take care that the approximation we use is less than r itself.\nAn upper approximation could result in negative entropy production.\nThe following theorem gives cubic convergence order for a simple algorithm for finding the roots of a\nconcave function based on local quadratic approximations to the target function. Analogously to the case\nfor Newton iteration, the constant in the estimate is the ratio of third and first derivatives in the interval of\niteration.\nTheorem. For a three times continously differentiable concave entropy function F (\u03b1) an iterative root\nfinding method based on the zeros of a second order Taylor parabola has cubic convergence sufficiently close\nto the root.\nProof: Assume that we are operating in a neighbourhood r \u2208 N , in which F \u2032 is negative (as well of course\nF \u2032\u2032 is negative). At each iteration the new estimate for r is the greater root of the parabola P , the second\norder Taylor polynomial at the current estimate,\nP (\u03b1) = F (\u03b1n ) + (\u03b1 \u2212 \u03b1n )F \u2032 (\u03b1n ) + (\u03b1 \u2212 \u03b1n )2\n\nF \u2032\u2032 (\u03b1n )\n.\n2\n\n(4.8)\n\nThe Lagrange remainder form of the error is\nF (\u03b1) = F (\u03b1n ) + (\u03b1 \u2212 \u03b1n )F \u2032 (\u03b1n ) + (\u03b1 \u2212 \u03b1n )2\n= P (\u03b1) + (\u03b1 \u2212 \u03b1n )3\n\nF \u2032\u2032\u2032 (\u03b3n )\nF \u2032\u2032 (\u03b1n )\n+ (\u03b1 \u2212 \u03b1n )3\n2\n6\n\nF \u2032\u2032\u2032 (\u03b3n )\n,\n6\n\nwhere \u03b3n lies between \u03b1n and \u03b1. Evaluating this at r we see that\n1\n|P (r)| \u2264 |\u03b1n \u2212 r|3 sup |F \u2032\u2032\u2032 (a)|.\n6\na\u2208N\nNow, using the mean value theorem, for some value bn \u2208 [\u03b1n+1 ,r],\n|P (r)| = |P (\u03b1n+1 ) + (r \u2212 \u03b1n+1 )P \u2032 (bn )| \u2265 |(r \u2212 \u03b1n+1 )| inf |(F \u2032 (b))|.\nb\u2208N\n\nCombining the last two equations we see that\n1\n|(r \u2212 \u03b1n+1 )| \u2264 C|\u03b1n \u2212 r| , where C = sup |F \u2032\u2032\u2032 (a)|\n6 a\u2208N\n3\n\n\u001e\n\ninf |F \u2032 (b)| . \u0004\n\nb\u2208N\n\nWe use a Newton step to estimate the accuracy of the method at each iteration:\n|\u03b1n \u2212 r| \u2248 |F (\u03b1n )/F \u2032 (\u03b1n )|.\n\n(4.9)\n\nIn fact we use a convergence criteria based not solely on \u03b1 but on \u03b1||f \u2217 \u2212 f ||, this has the intuitive appeal\nthat in the case where the populations are close to the local equilibrium \u2206S = S(f \u2217 ) \u2212 S(f ) will be small and\n4\n\n\fa very precise estimate of \u03b1 is unnecessary. We have some freedom in the choice of the norm used and we\nselect between the standard L1 norm and the entropic norm. The entropic norm is defined as\n||f \u2217 \u2212 f ||f \u2217 = \u2212((f \u2217 \u2212 f ), D2 S\n\nf\u2217\n\n(f \u2217 \u2212 f )),\n\nwhere D2 S f \u2217 is the second differential of entropy at point f \u2217 , and (x,y) is the standard scalar product.\nThe final root finding algorithm then is beginning with the LBGK estimate x0 = 2 to iterate using the\nroots of successive parabolas. If this first initiation step produces non-positive population, then the positivity\nrule [4] could be used (instead of the mirror image we choose the closest value of \u03b1 which gives non-negative\nvalue of populations). The same regularization rule might be suggested if there exists no root we are looking\nfor. In the tests described below, this situation never arose.\nWe stop the method at the point,\n|\u03b1n \u2212 r| * ||f \u2217 \u2212 f || < \u01eb.\n(4.10)\nTo ensure that we use an estimate that is less than the root, at the point where the method has converged\nwe check the sign of F (\u03b1n ). If F (\u03b1n ) > 0 then we have achieved a lower estimate, if F (\u03b1n ) < 0 we correct\nthe estimate to the other side of the root with a double length Newton step,\n\u03b1n = \u03b1n \u2212 2\n\nF (\u03b1n )\n.\nF \u2032 (\u03b1n )\n\nAt each time step before we begin root finding we eliminate all sites with \u2206S < 10\u221215. For these sites\nwe make a simple LBGK step. At such sites we find that round off error in the calculation of F by solution\nof equation (1.1) can result in the root of the parabola becoming imaginary. We note that in such cases a\nmirror image given by LBGK is effectively indistinct from the exact ELBGK collision.\nWe now experimentally study the convergence of the method. The convergence of the bisection method\nis presented for control. For the bisection method we calculate an initial estimate using the root of the\nparabola (4.8) with \u03b10 = 2. Whichever side of the root this estimate is on, an estimate for the opposite\nside can be found using a double length Newton step. We then have both an upper and lower estimate for\nthe root as required for the beginning of the bisection method. For this test \u01eb is set to 10\u22127.5 . This is the\nmaximum accuracy following the bound on \u2206S of 10\u221215 due to the quadratic nature of F .\nFor shock tube test using 800 lattice sites at the 400th iteration step (see detailed description in Section 5),\nFig. 1 shows that the parabola based method required two iterations, but not more than two, at some points\nin a vicinity of shock. In other areas one iteration is sufficient for the desired accuracy. Across the whole\nlattice the entropic norm stipulates a slightly greater number of iterations in both methods.\n\n5\n\nShock tube tests\n\nA standard experiment for the testing of LBMs is the one-dimensional shock tube problem. The lattice\nvelocities used are v = (\u22121,0,1), so that space shifts of the velocities give lattice sites separated by the unit\ndistance. 800 lattice sites are used and are initialized with the density distribution\n\u001a\n1,\n1 \u2264 x \u2264 400,\n\u03c1(x) =\n0.5, 401 \u2264 x \u2264 800.\nInitially all velocities are set to zero. We compare the ELBGK equipped with the parabola based root finding\nalgorithm using the entropic norm with the standard LBGK method using both standard polynomial and\n5\n\n\f2.5\n\n2.5\n\n2\n\n2\n\n1.5\n\nn\n\n1.5\n\nn\n\n1\n0.5\n\n1\n0.5\n\na\n\n0\n\nb\n\n0\n\n\u22120.5\n\n100\n\n200\n\n300\n\n400\n\n500\n\n600\n\n700\n\n\u22120.5\n\n800\n\n100\n\n200\n\n300\n\nx\n\n400\n\n500\n\n600\n\n700\n\n800\n\n500\n\n600\n\n700\n\n800\n\nx\n\n8\n\n8\n\n6\n\n6\n\nn\n\nn\n4\n\n2\n\n4\n\n2\n\nc\n\n0\n\nd\n\n0\n100\n\n200\n\n300\n\n400\n\n500\n\n600\n\n700\n\n800\n\n100\n\nx\n\n200\n\n300\n\n400\n\nx\n\nFigure 1: Iterations required for convergence to \u01eb = 10\u22127.5 under (4.10) using (a) Parabola method with L1\nnorm; (b) Parabola method with entropic norm; (c) Bisection method with L1 norm; (d) Bisection method\nwith entropic norm.\n\n6\n\n\f1\n\n1\n\n1\n\n\u03c1 0.8\n\n\u03c1 0.8\n\n\u03c1 0.8\n\n0.6\n\n0.6\n\n0.6\n\n0.4\n\n0.4\n\na\n0\n\n200\n\n400\n\n600\n\n800\n\n0.4\n\nb\n0\n\n200\n\n400\n\nx\n\n600\n\n800\n\n1\n\n\u03c1 0.8\n\n\u03c1 0.8\n\n\u03c1 0.8\n\n0.6\n\n0.6\n\n0.6\n\n0.4\n\nd\n200\n\n400\n\n600\n\n800\n\n0.4\n\ne\n0\n\n200\n\n400\n\nx\n\n400\n\n600\n\n800\n\n600\n\n800\n\nx\n\n1\n\n0\n\n200\n\nx\n\n1\n\n0.4\n\nc\n0\n\n600\n\n800\n\nf\n0\n\n200\n\nx\n\n400\n\nx\n\nFigure 2: Density profile of the simulation of the shock tube problem following 400 time steps using (a)\nLBGK with polynomial equilibria [\u03bd = (1/3) * 10\u22121]; (b) LBGK with entropic equilibria [\u03bd = (1/3) * 10\u22121];\n(c) ELBGK [\u03bd = (1/3) * 10\u22121]; (d) LBGK with polynomial equilibria [\u03bd = 10\u22129]; (e) LBGK with entropic\nequilibria [\u03bd = 10\u22129]; (f ) ELBGK [\u03bd = 10\u22129].\nentropic equilibria. The polynomial equilibria are given in [2, 12]:\n\u0012\n\u0013\n\u0001\n\u0001\n3u2\n\u03c1\n\u03c1\n2\u03c1\n\u2217\n\u2217\n1\u2212\n, f+\n= 1 + 3u + 3u2 .\nf\u2212\n= 1 \u2212 3u + 3u2 , f0\u2217 =\n6\n3\n2\n6\nThe entropic equilibria also used by the ELBGK are available explicitly as the maximum of the entropy\nfunction (2.5),\np\np\np\n2\u03c1\n\u03c1\n\u03c1\n\u2217\n\u2217\n= (3u \u2212 1 + 2 1 + 3u2 ).\nf\u2212\n= (\u22123u \u2212 1 + 2 1 + 3u2 ), f0\u2217 = (2 \u2212 1 + 3u2 ), f+\n6\n3\n6\nNow following (2.3) the governing equations for the simulation are\n\u2217\nf\u2212 (x,t + 1) = f\u2212 (x + 1,t) + \u03b1\u03b2(f\u2212\n(x + 1,t) \u2212 f\u2212 (x + 1,t)),\n\u2217\nf0 (x,t + 1) = f0 (x,t) + \u03b1\u03b2(f0 (x,t) \u2212 f0 (x,t)),\n\u2217\nf+ (x,t + 1) = f+ (x \u2212 1,t) + \u03b1\u03b2(f+\n(x \u2212 1,t) \u2212 f+ (x \u2212 1,t)).\n\nFrom this experiment we observe no benefit in terms of regularization in using the ELBGK rather than the\nstandard LBGK method (Fig. 2). In both the medium and low viscosity regimes ELBGK fails to supress\nthe spurious oscillations found in the standard LBGK method.\n7\n\n\f1.1\n\n1.1\n\n1\n\n1\n\n0.9\n\n0.9\n\n\u03c1 0.8\n\n\u03c1 0.8\n\n0.7\n\n0.7\n\n0.6\n\n0.6\n\n0.5\n\n0.5\n\n0.4\n0.3\n\n0.4\n\na\n0\n\n100\n\n200\n\n300\n\n400\n\n500\n\n600\n\n700\n\n0.3\n\n800\n\nx\n\nb\n0\n\n100\n\n200\n\n300\n\n400\n\n500\n\n600\n\n700\n\n800\n\nx\n\nFigure 3: Density profile of the simulation of the shock tube problem following 400 time steps using (a)\nLBGK with entropic equilibria and one point median filtering [\u03bd = (1/3) * 10\u22121]; (b) LBGK with entropic\nequilibria and one point median filtering [\u03bd = 10\u22129].\nTo explain previous results showing regularization by the ELBGK we note that in the collision integral\n(2.4) that \u03b1 and \u03b2 are composite. In this sense entropy production controlled by \u03b1 and viscosity controlled\nby \u03b2 are the same thing. A weak lower approximation to \u03b1 would lead effectively to addition of entropy\nat the mostly far from equilibrium sites and therefore would locally increase viscosity. This numerical\nviscosity could, probably, explain the regularization and smoothing of the shock profile seen in some ELBGK\nsimulations.\n\n6\n\nOne-Point Median Filtering\n\nFinally we consider regularizing the LBGK method using median filtering at a single point. We follow the\nprescription detailed in [5]. First, at each time step, we locate the single lattice site x with the maximum\nvalue of \u2206S(x), and call this value \u2206Sx . Secondly, we find the median value of \u2206S in the three nearest\nneighbours of x including itself, calling this value \u2206Smed . Now instead of being updated using the standard\nBGK over-relaxation this single site is updated as follows:\nr\n\u2206Smed\n\u2217\n\u2217\n(f\u2212 (x + 1,t) \u2212 f\u2212\n(x + 1,t)),\nf\u2212 (x,t + 1) = f\u2212(x + 1,t) +\n\u2206Sx\nr\n\u2206Smed\nf0 (x,t + 1) = f0\u2217 (x,t) +\n(f0 (x,t) \u2212 f0\u2217 (x,t)),\n\u2206Sx\nr\n\u2206Smed\n\u2217\n\u2217\n(f+ (x \u2212 1,t) \u2212 f+\n(x \u2212 1,t)).\nf+ (x,t + 1) = f+ (x \u2212 1,t) +\n\u2206Sx\nWe observe that filtering a single point at each time step still results in a significant amount of regularization\n(Fig. 3).\nWe also examine in each case the lattice site where the filtering is applied. The zero position is defined\nas the rightmost lattice site with \u2206S > 0 at each time step and the position of the filtering is measured\nrelative to this site. The occurrences at each relative position are then summed over the experiment. We\ncan see (Fig. 4) that the majority of filtering takes place on the shock. However, in the low viscosity case,\nwe observe that at a small number of time steps the filtered site moves significantly 'behind' the shockwave.\n8\n\n\f100\n\n100\n\n90\n\n90\n\n80\n\n80\n\n70\n\n70\n\n60\n\n60\n\nn 50\n\nn 50\n\n40\n\n40\n\n30\n\n30\n\n20\n\n20\n\n10\n0\n\n10\n\na\n\n\u2212250\n\n0\n\u2212200\n\n\u2212150\n\n\u2212100\n\n\u221250\n\n0\n\n\u2212250\n\nx\n\nb\n\u2212200\n\n\u2212150\n\n\u2212100\n\n\u221250\n\n0\n\nx\n\nFigure 4: Distribution of median filtering sites relative to the position of the shock following 400 time steps\nusing (a) LBGK with entropic equilibria and one point median filtering [\u03bd = (1/3) * 10\u22121]; (b) LBGK with\nentropic equilibria and one point median filtering [\u03bd = 10\u22129].\n\n7\n\nConclusion\n\nWe present three main conclusions from this study.\n1. We do not find any evidence that maintaining proper balance of entropy regularize spurious oscillations\nthe Lattice Boltzmann method. For ELBGK we confirm the conclusions of Lax [10] and Levermore\nwith Liu [11] that dispersive oscillations are unavoidable in numerical simulation of shocks.\n2. In order to clean up the parasite dispersive oscillations in the Lattice Boltzmann method it is necessary to filter the entropy in some way, so as to reduce the extremely-localised incidents of high\nnon-equilibrium entropy; see [5]. Previously reported smoothing of shocks must have been via the\ninadvertent introduction of numerical dissipation. (Perhaps, this conclusion could be extended to all\nknown regularisers of LBM, including those proposed by ourselves in [4].)\n3. For the 1D shock tube, one only needs to filter the entropy at one point per time step (usually very local\nto the shock), even at very low viscosity, in order to effectively eliminate the post-shock oscillation.\nWe can expect that in 2D and 3D shocks it will be also necessary to filter nonequilibrium entropy in\nsome local maxima points near the shock front only. The entropy filtering for non-entropic equilibria\nis possible [5] with use of the Kullback\u2013Leibler distance from current distribution to equilibrium (the\nrelative entropy).\nThe Matlab code used to produce these results is provided in the appendix.\n\nReferences\n[1] S. Ansumali, I. V. Karlin, Stabilization of the Lattice Boltzmann method by the H-theorem: A numerical\ntest, Phys. Rev. E, 62 (6):7999\u20138003, 2000.\n[2] R. Benzi, S. Succi, and M. Vergassola, The lattice Boltzmann-equation \u2013 theory and applications, Phys.\nReports, 222:145\u2013197, 1992.\n\n9\n\n\f[3] B. M. Boghosian, P. J. Love, and J. Yepez, Entropic lattice Boltzmann model for Burgers equation,\nPhil. Trans. Roy. Soc. A, 362:1691\u20131702, 2004.\n[4] R. A. Brownlee, A. N. Gorban, and J. Levesley, Stability and stabilization of the lattice Boltzmann\nmethod, Phys. Rev. E, 75:036711, 2007.\n[5] R. A. Brownlee, A. N. Gorban, and J. Levesley, Nonequilibrium entropy limiters in lattice Boltzmann\nmethods, Physica A, 387 (2-3):385\u2013406, 2008.\n[6] S. K. Godunov, A Difference Scheme for Numerical Solution of Discontinuous Solution of Hydrodynamic\nEquations, Math. Sbornik, 47:271\u2013306, 1959.\n[7] A. N. Gorban, Basic types of coarse-graining, In: A. N. Gorban, N. Kazantzis, I. G. Kevrekidis,\nH.-C. \u00d6ttinger, and C. Theodoropoulos (eds.), Model Reduction and Coarse-Graining Approaches for\nMultiscale Phenomena, pages 117\u2013176. Springer, Berlin-Heidelberg-New York, 2006. cond-mat/0602024.\n[8] I. V. Karlin, A. Ferrante, and H. C. \u00d6ttinger, Perfect entropy functions of the lattice Boltzmann method,\nEurophys. Lett. 47:182\u2013188, 1999.\n[9] I. V. Karlin, A. N. Gorban, S. Succi, and V. Boffi, Maximum entropy principle for lattice kinetic\nequations, Phys. Rev. Lett., 81:6\u20139, 1998.\n[10] P. D. Lax, On dispersive difference schemes, Phys. D, 18:250\u2013254, 1986.\n[11] C. D. Levermore and J.-G. Liu, Large oscillations arising in a dispersive numerical scheme, Physica D\n99:191\u2013216, 1996.\n[12] S. Succi, The lattice Boltzmann equation for fluid dynamics and beyond, Oxford University Press, New\nYork, 2001.\n[13] E. Tadmor and W. Zhong, Entropy stable approximations of Navier\u2013Stokes equations with no artificial\nnumerical viscosity, J. Hyberbolic Differ. Equ., 3:529\u2013559, 2006.\n[14] W.-A. Yong and L.-S. Luo, Nonexistence of H theorems for the athermal lattice Boltzmann models\nwith polynomial equilibria, Phys. Rev. E, 67:051105.\n\n10\n\n\fA\n%LBM\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\nMatlab Code\nLattice Boltzmann Method\nLBM(MC,V,NX,TM,MOV,ESPIL,LIMIT,NORM) solves the shock tube problem\nwith number of lattice\nsites NX with separation of one and viscosity V upto TM time steps of\nlength one using method\nMC:\n0 \u2212 LBGK polynomial equilibria,\n1 \u2212 LBGK entropic equilibria,\n2 \u2212 ELBM Newton iterations,\n3 \u2212 ELBM Bisection method\nand entropic limiter\nLIMIT:\n0 \u2212 No limiter\n1 \u2212 Median filtering\nOutput of a movie of the simulation can be controlled with\nMOV:\n0 \u2212 No movie,\n1 \u2212 With movie\nThe accuracy of the root finding for ELBM can be controlled with\nEPSIL in all cases the root found will result in entropy production.\nConvergence is partly based on | | feq \u2212 f | | , the choice of the norm is\ncontrolled with\nNORM:\n0 \u2212 L1 norm\n1 \u2212 Entropic Norm;\n\nfunction [rho, mov, convergence, relativeFiltering, alpha] = ...\nLBM(methodChoice,viscosity,nx,timeMax,MOV,ELBMEpsilon,Limiter,Norm)\n% Over\u2212relaxation parameter\nbeta = 1/(2*viscosity+1);\ntime = 1; %Start Time\nrho = LBMInitialise(nx); %Densities at each lattice site are intialised as\n%the standard shock tube problem\nu = 0; %Velocities at each lattice site are initialised as zero\npopulations = LBMQuasiEquilibria(rho,u,methodChoice,nx); %Left moving,\n%central and right moving populations at each lattice site respectively are\n%initialised as the quasiequilibria\nrelativeFiltering = zeros(1,251);\nif (MOV\nmov\nx =\nelse\nmov\nend\n\n== 1)\n= moviein(timeMax);\n1:nx;\n= 0;\n\nwhile time \u2264 timeMax\npopulations = LBMPropagate(populations,nx); %Propagate the populations\n%keyboard\n\n11\n\n\f[rho, u] = LBMLatticeParameters(populations); %Density and velocity are\n%calculated using the populations\npopequilibriums = LBMQuasiEquilibria(rho,u,methodChoice,nx); %New\n% quasiequilibria are found using new density and velocity values\n[alpha , convergence] = LBMEntropicParameter(populations, ...\npopequilibriums,methodChoice,nx,ELBMEpsilon,Norm);\n% Finding the non trivial root for constant entropy in the ELBM, for\n% normal LBGK alpha = 0\n[limiterSites,shockRelative] = LBMLimiterSites(populations, ...\npopequilibriums,nx,Limiter);\nrelativeFiltering(250 \u2212 shockRelative) = ...\nrelativeFiltering(250 \u2212 shockRelative) + 1;\npopulations = LBMCollide(populations,popequilibriums,beta,alpha,nx, ...\nLimiter,limiterSites);\n% Populations are collided with the quasiequilibria\nif(\u00acisreal(populations))\nkeyboard\nreturn\nend\nif(MOV == 1) % If movie parameter is enabled record a frame\nunlimitedSites = setdiff(1:nx,limiterSites);\nplot(unlimitedSites,rho(unlimitedSites),'.',limiterSites, ...\nrho(limiterSites),'r*');\naxis([0 nx 0.3 1.3])\nmov(:,time) = getframe;\nend\ntime = time + 1; %Increment time\nend\n\n%A function to intialise the lattice densities for the shock tube problem\nfunction rho = LBMInitialise(nx)\nrho = zeros(1,nx);\nhalf = floor(nx/2);\nrho(1:half) = 1;\nrho(half+1:nx) = 0.5;\n\n%A function to compute given a current density vector either the polynomial\n%or entropic quasiequilbria.\nfunction equilibria = LBMQuasiEquilibria(rho,u,methodChoice,nx)\nequilibria = zeros(3,nx);\nif ( methodChoice == 0) %Polynomial Equilibria\nequilibria(1,:) = rho./6.*(1 \u2212 3*u + 3*u.\u02c62);\nequilibria(2,:) = 2.*rho./3.*(1 \u2212 3*u.\u02c62./2);\nequilibria(3,:) = rho./6.*(1 + 3*u + 3*u.\u02c62);\n\n12\n\n\felse\n%Entropic Equilibria\nequilibria(1,:) = rho./6.*( \u22123.*u \u2212 1 + 2*sqrt(1 + 3.*u.\u02c62));\nequilibria(2,:) = 2.*rho./3.*(2 \u2212 sqrt(1 + 3.*u.\u02c62));\nequilibria(3,:) = rho./6.*( 3.*u \u2212 1 + 2*sqrt(1 + 3.*u.\u02c62));\nend\n\n%A function to propagate the populations\nfunction populations = LBMPropagate(oldpopulations,nx)\npopulations = oldpopulations;\nleft = populations(1,1);\nright = populations(3,nx);\npopulations(1,1:nx\u22121) = populations(1,2:nx);\npopulations(3,2:nx) = populations(3,1:nx\u22121);\npopulations(3,1) = left;\npopulations(1,nx) = right;\n\n%A function to find density and velocity at each lattice site from the\n%populations\nfunction [rho,u] = LBMLatticeParameters(populations)\nrho = populations(1,:) + populations(2,:) + populations(3,:);\nu = (populations(3,:) \u2212 populations(1,:))./rho;\n\n% Function to find the constant entropy parameter for ELBM, in the case of\n% LBKG this is simply 2\nfunction [alpha, convergence] = LBMEntropicParameter(populations, ...\npopequilibriums,methodChoice,nx,ELBMEpsilon,Norm)\n%Choice of method:\n%0 \u2212 LBGK polynomial equilibria,\n%1 \u2212 LBGK entropic equilibria,\n%2 \u2212 ELBM Parabola iterations,\n%3 \u2212 ELBM Bisection method\nif (methodChoice == 0)\nalpha = 2*ones(1,nx);\nconvergence = zeros(1,nx);\nelseif (methodChoice == 1)\nalpha = 2*ones(1,nx);\nconvergence = zeros(1,nx);\nelseif (methodChoice == 2)\nconvergence = zeros(1,nx);\nalpha = 2*ones(1,nx);\nSf = LBMEvaluateS(populations,popequilibriums,zeros(1,nx));\nSEquil = LBMEvaluateS(popequilibriums,popequilibriums,zeros(1,nx));\nremaining = find(abs(SEquil \u2212 Sf) > 10\u02c6\u221215);\npopnorm(remaining) = LBMNorms(populations(:,remaining), ...\npopequilibriums(:,remaining),length(remaining),Norm);\niteration = 1;\nwhile (isempty(remaining) == 0)\n\n13\n\n\falpha(remaining) = LBMInteriorParabola(populations(:,remaining),...\npopequilibriums(:,remaining),Sf(remaining),alpha(remaining));\nSpop = LBMEvaluateS(populations(:,remaining), ...\npopequilibriums(:,remaining),alpha(remaining));\nSdiff = LBMEvaluateDiffS(populations(:,remaining), ...\npopequilibriums(:,remaining),alpha(remaining));\n\u2206Alpha(remaining)\n\n= (Spop \u2212 Sf(remaining))./Sdiff;\n\nnowdone = find( popnorm(remaining).*abs(\u2206Alpha(remaining)) ...\n\u2264 ELBMEpsilon);\nnowremaining = find( popnorm(remaining).* ...\nabs(\u2206Alpha(remaining)) > ELBMEpsilon);\ndone = remaining(nowdone);\nremaining = setdiff(remaining,done);\nSDone = LBMEvaluateS(populations(:,done), ...\npopequilibriums(:,done),alpha(done)) \u2212 Sf(done);\nnegFind = find(SDone < 0);\nnegativeEntropy = done(negFind);\nalpha(negativeEntropy) = alpha(negativeEntropy) ...\n\u2212 2*\u2206Alpha(negativeEntropy);\nSDone = LBMEvaluateS(populations(:,done), ...\npopequilibriums(:,done),alpha(done)) \u2212 Sf(done);\nif(SDone < 0)\nkeyboard\nend\nconvergence(done) = iteration;\niteration = iteration + 1;\nif(\u00acisreal(alpha))\nkeyboard\nend\nif(iteration > 200)\nkeyboard\nend\nend\nelseif (methodChoice == 3)\nconvergence = zeros(1,nx);\nalpha = 2*ones(1,nx);\nSf = LBMEvaluateS(populations,popequilibriums,zeros(1,nx));\nSEquil = LBMEvaluateS(popequilibriums,popequilibriums,zeros(1,nx));\nremaining = find(abs(SEquil \u2212 Sf) > 10\u02c6\u221214);\npopnorm(remaining) = LBMNorms(populations(:,remaining), ...\npopequilibriums(:,remaining),length(remaining),Norm);\nalpha(remaining) = LBMInteriorParabola(populations(:,remaining), ...\npopequilibriums(:,remaining),Sf(remaining),alpha(remaining)) ;\nSpop = LBMEvaluateS(populations(:,remaining), ...\npopequilibriums(:,remaining),alpha(remaining)) \u2212 Sf(remaining);\n\n14\n\n\fleftSide = find(Spop > 0);\nrightSide = find(Spop \u2264 0);\nleft(remaining(leftSide)) = alpha(remaining(leftSide));\nright(remaining(rightSide)) = alpha(remaining(rightSide));\nSpop = LBMEvaluateS(populations(:,remaining), ...\npopequilibriums(:,remaining),alpha(remaining));\nSdiff = LBMEvaluateDiffS(populations(:,remaining), ...\npopequilibriums(:,remaining),alpha(remaining));\n\u2206Alpha(remaining)\n\n= (Spop \u2212 Sf(remaining))./Sdiff;\n\nright(remaining(leftSide)) = alpha(remaining(leftSide)) ...\n\u2212 2*\u2206Alpha(remaining(leftSide));\nleft(remaining(rightSide)) = alpha(remaining(rightSide)) ...\n+ 2*\u2206Alpha(remaining(rightSide));\nif(right < left)\nkeyboard\nend\niteration = 1;\nmid = left + (right\u2212left)/2;\n\nwhile (isempty(remaining) == 0)\nmid(remaining) = left(remaining) ...\n+ (right(remaining)\u2212left(remaining))/2;\n\nSleft = S(populations(:,remaining), ...\npopequilibriums(:,remaining),left(remaining));\nSright = LBMEvaluateS(populations(:,remaining), ...\npopequilibriums(:,remaining),right(remaining));\nSmid = LBMEvaluateS(populations(:,remaining), ...\npopequilibriums(:,remaining),mid(remaining));\nnowdone = find( popnorm(remaining).*(right(remaining) ...\n\u2212 left(remaining)) \u2264 ELBMEpsilon);\nnowremaining = find( popnorm(remaining).*(right(remaining) ...\n\u2212 left(remaining)) > ELBMEpsilon);\ndone = remaining(nowdone);\nremaining = setdiff(remaining,done);\nalpha(done) = left(done);\nconvergence(done) = iteration;\nfor itr = 1:length(remaining)\nif (Smid(nowremaining(itr)) > Sf(remaining(itr)))\nleft(remaining(itr)) = mid(remaining(itr));\nelse\nright(remaining(itr)) = mid(remaining(itr));\nend\nend\niteration = iteration + 1;\nif(\u00acisreal(alpha))\n\n15\n\n\fkeyboard\nend\nif(iteration > 100)\nkeyboard\nend\nend\nend\n\n% A function to evaluate the entropy.\nfunction S = LBMEvaluateS(populations,popequilibriums,alpha)\nalphapop = populations + (ones(3,1)*alpha).*(popequilibriums ...\n\u2212 populations);\nS = \u2212alphapop(1,:).*log(alphapop(1,:)) ...\n\u2212 alphapop(2,:).*log(alphapop(2,:)./4) ...\n\u2212 alphapop(3,:).*log(alphapop(3,:));\n\n% A function to implement the norms necessary to measure convergence of the\n% root finding\nfunction norms = LBMNorms(populations,popequilibriums,nx,nChoice);\nnorms = zeros(1,nx);\nif (nChoice == 0)\nfor j = 1:nx\nnorms(j) = norm(populations(:,j) \u2212 popequilibriums(:,j),1);\nend\nelseif(nChoice == 1)\nfor j = 1:nx\npoptemp = (populations(1,j) ...\n\u2212 popequilibriums(1,j)).\u02c62./popequilibriums(1,j);\npoptemp = poptemp + (populations(2,j) ...\n\u2212 popequilibriums(2,j)).\u02c62./popequilibriums(2,j);\npoptemp = poptemp + (populations(3,j) ...\n\u2212 popequilibriums(3,j)).\u02c62./popequilibriums(3,j);\nnorms(j) = sqrt(poptemp);\nend\nend\n\n% A function to find an interior approximation to the root of the entropy\n% parabola\nfunction intPab = LBMInteriorParabola(populations,popequilibriums, ...\nSTarget,alpha)\nSAlphaZero = LBMEvaluateS(populations,popequilibriums,alpha);\nSDashAlphaZero = LBMEvaluateDiffS(populations,popequilibriums,alpha);\nSDash2AlphaZero = LBMEvaluateDiff2S(populations,popequilibriums,alpha);\nintPab = [];\nfor j = 1:length(alpha)\nintPab(j) = max(roots([0.5.*SDash2AlphaZero(j) SDashAlphaZero(j) ...\nSAlphaZero(j) \u2212 STarget(j)])) + alpha(j);\nend\n\n% A function to find the first derivative of the entropy\n\n16\n\n\ffunction DiffS = LBMEvaluateDiffS(populations,popequilibriums,alpha)\nalphapop = populations + (ones(3,1)*alpha).*(popequilibriums ...\n\u2212 populations);\npartDiff = popequilibriums \u2212 populations;\nDiffS = \u2212partDiff(1,:).*(log(alphapop(1,:)) + 1) ...\n\u2212partDiff(2,:).*(log(alphapop(2,:)./4) + 1) ...\n\u2212partDiff(3,:).*(log(alphapop(3,:)) + 1);\n\n% A function to find the second derivative of the entropy.\nfunction Diff2S = LBMEvaluateDiff2S(populations,popequilibriums,alpha)\nalphapop = populations + (ones(3,1)*alpha).*(popequilibriums \u2212 populations);\npartDiff = popequilibriums \u2212 populations;\nDiff2S = \u2212 partDiff(1,:).\u02c62./(alphapop(1,:)) ...\n\u2212 partDiff(2,:).\u02c62./(alphapop(2,:)) ...\n\u2212 partDiff(3,:).\u02c62./(alphapop(3,:));\n\n% A function to detect an appropriate lattice site for limiting and to\n% measure it's position relative to the leading edge of the shock.\nfunction [Sites,shockRelative] = LBMLimiterSites(populations,...\npopequilibriums,nx,Limiter)\nshockRelative = 0;\nif (Limiter == 0)\nSites = [];\nelseif (Limiter == 1)\nSf = LBMEvaluateS(populations,popequilibriums,zeros(1,nx));\nSfeq = LBMEvaluateS(popequilibriums,popequilibriums,zeros(1,nx));\nDeltaS = Sfeq \u2212 Sf;\nshockPos = max(find(DeltaS > 10\u02c6\u221215));\n[M,I] = max(DeltaS);\nSites = I;\nshockRelative = shockPos \u2212 Sites;\nend\n\n%Function for simple BGK collision of populations with quasiequilibria with\n% a limiter applied if necessary\nfunction populations = LBMCollide(oldpopulations,popequilibriums,beta, ...\nalpha,nx,Limiter,limiterSites)\nunlimitedSites = setdiff(1:nx,limiterSites);\npopulations(:,unlimitedSites) = oldpopulations(:,unlimitedSites) ...\n+ beta.*(ones(3,1)*alpha(unlimitedSites)) ...\n.*( popequilibriums(:,unlimitedSites) ...\n\u2212 oldpopulations(:,unlimitedSites) );\nif (Limiter == 1)\nSf = LBMEvaluateS(oldpopulations(:,(limiterSites \u2212 1): ...\n(limiterSites + 1)),popequilibriums(:,(limiterSites \u2212 1): ...\n(limiterSites + 1)),zeros(1,3));\nSfeq = LBMEvaluateS(popequilibriums(:,(limiterSites \u2212 1): ...\n(limiterSites + 1)),popequilibriums(:,(limiterSites \u2212 1): ...\n(limiterSites + 1)),zeros(1,3));\n\u2206S = Sfeq \u2212 Sf;\nSmed = median(\u2206S);\ncoeff = sqrt(Smed/\u2206S(2));\n\n17\n\n\fpopulations(:,limiterSites) = popequilibriums(:,limiterSites) ...\n+ coeff.*(oldpopulations(:,limiterSites) ...\n\u2212 popequilibriums(:,limiterSites));\nend\n\n18\n\n\f"}