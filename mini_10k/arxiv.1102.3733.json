{"id": "http://arxiv.org/abs/1102.3733v1", "guidislink": true, "updated": "2011-02-18T01:44:38Z", "updated_parsed": [2011, 2, 18, 1, 44, 38, 4, 49, 0], "published": "2011-02-18T01:44:38Z", "published_parsed": [2011, 2, 18, 1, 44, 38, 4, 49, 0], "title": "Uncurrying for Innermost Termination and Derivational Complexity", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1102.0675%2C1102.5214%2C1102.2556%2C1102.5494%2C1102.5439%2C1102.4562%2C1102.4762%2C1102.1022%2C1102.1903%2C1102.1165%2C1102.1350%2C1102.1331%2C1102.4111%2C1102.1434%2C1102.5167%2C1102.4246%2C1102.0660%2C1102.4308%2C1102.3771%2C1102.5169%2C1102.0691%2C1102.1173%2C1102.4533%2C1102.3532%2C1102.3444%2C1102.5531%2C1102.1651%2C1102.1637%2C1102.2597%2C1102.0125%2C1102.1398%2C1102.1939%2C1102.1634%2C1102.0409%2C1102.3591%2C1102.3714%2C1102.4600%2C1102.3051%2C1102.2766%2C1102.4682%2C1102.4103%2C1102.2039%2C1102.0966%2C1102.3098%2C1102.5108%2C1102.0806%2C1102.2189%2C1102.5638%2C1102.0871%2C1102.3927%2C1102.4695%2C1102.3818%2C1102.4572%2C1102.2563%2C1102.0276%2C1102.0309%2C1102.1804%2C1102.5738%2C1102.5205%2C1102.2861%2C1102.5645%2C1102.5682%2C1102.2399%2C1102.1164%2C1102.3950%2C1102.0946%2C1102.5406%2C1102.1638%2C1102.3733%2C1102.4895%2C1102.3501%2C1102.5285%2C1102.1833%2C1102.5282%2C1102.1017%2C1102.2636%2C1102.5728%2C1102.2022%2C1102.4971%2C1102.4702%2C1102.1341%2C1102.4396%2C1102.1407%2C1102.0870%2C1102.5183%2C1102.4945%2C1102.1050%2C1102.3869%2C1102.3150%2C1102.4205%2C1102.4672%2C1102.2845%2C1102.3172%2C1102.2875%2C1102.1635%2C1102.0273%2C1102.3819%2C1102.4279%2C1102.3933%2C1102.1312%2C1102.1934&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Uncurrying for Innermost Termination and Derivational Complexity"}, "summary": "First-order applicative term rewriting systems provide a natural framework\nfor modeling higher-order aspects. In earlier work we introduced an uncurrying\ntransformation which is termination preserving and reflecting. In this paper we\ninvestigate how this transformation behaves for innermost termination and\n(innermost) derivational complexity. We prove that it reflects innermost\ntermination and innermost derivational complexity and that it preserves and\nreflects polynomial derivational complexity. For the preservation of innermost\ntermination and innermost derivational complexity we give counterexamples.\nHence uncurrying may be used as a preprocessing transformation for innermost\ntermination proofs and establishing polynomial upper and lower bounds on the\nderivational complexity. Additionally it may be used to establish upper bounds\non the innermost derivational complexity while it neither is sound for proving\ninnermost non-termination nor for obtaining lower bounds on the innermost\nderivational complexity.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1102.0675%2C1102.5214%2C1102.2556%2C1102.5494%2C1102.5439%2C1102.4562%2C1102.4762%2C1102.1022%2C1102.1903%2C1102.1165%2C1102.1350%2C1102.1331%2C1102.4111%2C1102.1434%2C1102.5167%2C1102.4246%2C1102.0660%2C1102.4308%2C1102.3771%2C1102.5169%2C1102.0691%2C1102.1173%2C1102.4533%2C1102.3532%2C1102.3444%2C1102.5531%2C1102.1651%2C1102.1637%2C1102.2597%2C1102.0125%2C1102.1398%2C1102.1939%2C1102.1634%2C1102.0409%2C1102.3591%2C1102.3714%2C1102.4600%2C1102.3051%2C1102.2766%2C1102.4682%2C1102.4103%2C1102.2039%2C1102.0966%2C1102.3098%2C1102.5108%2C1102.0806%2C1102.2189%2C1102.5638%2C1102.0871%2C1102.3927%2C1102.4695%2C1102.3818%2C1102.4572%2C1102.2563%2C1102.0276%2C1102.0309%2C1102.1804%2C1102.5738%2C1102.5205%2C1102.2861%2C1102.5645%2C1102.5682%2C1102.2399%2C1102.1164%2C1102.3950%2C1102.0946%2C1102.5406%2C1102.1638%2C1102.3733%2C1102.4895%2C1102.3501%2C1102.5285%2C1102.1833%2C1102.5282%2C1102.1017%2C1102.2636%2C1102.5728%2C1102.2022%2C1102.4971%2C1102.4702%2C1102.1341%2C1102.4396%2C1102.1407%2C1102.0870%2C1102.5183%2C1102.4945%2C1102.1050%2C1102.3869%2C1102.3150%2C1102.4205%2C1102.4672%2C1102.2845%2C1102.3172%2C1102.2875%2C1102.1635%2C1102.0273%2C1102.3819%2C1102.4279%2C1102.3933%2C1102.1312%2C1102.1934&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "First-order applicative term rewriting systems provide a natural framework\nfor modeling higher-order aspects. In earlier work we introduced an uncurrying\ntransformation which is termination preserving and reflecting. In this paper we\ninvestigate how this transformation behaves for innermost termination and\n(innermost) derivational complexity. We prove that it reflects innermost\ntermination and innermost derivational complexity and that it preserves and\nreflects polynomial derivational complexity. For the preservation of innermost\ntermination and innermost derivational complexity we give counterexamples.\nHence uncurrying may be used as a preprocessing transformation for innermost\ntermination proofs and establishing polynomial upper and lower bounds on the\nderivational complexity. Additionally it may be used to establish upper bounds\non the innermost derivational complexity while it neither is sound for proving\ninnermost non-termination nor for obtaining lower bounds on the innermost\nderivational complexity."}, "authors": ["Harald Zankl", "Nao Hirokawa", "Aart Middeldorp"], "author_detail": {"name": "Aart Middeldorp"}, "author": "Aart Middeldorp", "links": [{"title": "doi", "href": "http://dx.doi.org/10.4204/EPTCS.49.4", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1102.3733v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1102.3733v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "In Proceedings HOR 2010, arXiv:1102.3465", "arxiv_primary_category": {"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1102.3733v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1102.3733v1", "journal_reference": "EPTCS 49, 2011, pp. 46-57", "doi": "10.4204/EPTCS.49.4", "fulltext": "Uncurrying for Innermost Termination and Derivational\nComplexity\u2217\nHarald Zankl,1 Nao Hirokawa,2 and Aart Middeldorp1\n1\n\n2\n\nInstitute of Computer Science, University of Innsbruck, Austria\n{harald.zankl,aart.middeldorp}@uibk.ac.at\nSchool of Information Science, Japan Advanced Institute of Science and Technology, Japan\nhirokawa@jaist.ac.jp\n\nFirst-order applicative term rewriting systems provide a natural framework for modeling higher-order\naspects. In earlier work we introduced an uncurrying transformation which is termination preserving\nand reflecting. In this paper we investigate how this transformation behaves for innermost termination and (innermost) derivational complexity. We prove that it reflects innermost termination and\ninnermost derivational complexity and that it preserves and reflects polynomial derivational complexity. For the preservation of innermost termination and innermost derivational complexity we\ngive counterexamples. Hence uncurrying may be used as a preprocessing transformation for innermost termination proofs and establishing polynomial upper and lower bounds on the derivational\ncomplexity. Additionally it may be used to establish upper bounds on the innermost derivational\ncomplexity while it neither is sound for proving innermost non-termination nor for obtaining lower\nbounds on the innermost derivational complexity.\n\n1\n\nIntroduction\n\nProving termination of first-order applicative term rewrite systems is challenging since the rules lack\nsufficient structure. But these systems are important since they provide a natural framework for modeling\nhigher-order aspects found in functional programming languages. Since proving termination is easier\nfor innermost than for full rewriting we lift some of the recent results from [8] from full to innermost\ntermination. For the properties that do not transfer to the innermost setting we provide counterexamples.\nFurthermore we show that the uncurrying transformation is suitable for proving upper bounds on the\n(innermost) derivational complexity.\nWe remark that our approach on proving innermost termination also is beneficial for functional programming languages that adopt a lazy evaluation strategy since applicative term rewrite systems modeling functional programs are left-linear and non-overlapping. It is well known that for this class of\nsystems termination and innermost termination coincide (see [5] for a more general result).\nThe remainder of this paper is organized as follows. After recalling preliminaries in Section 2, we\nshow that uncurrying preserves innermost non-termination (but not innermost termination) in Section 3.\nIn Section 4 we show that it preserves and reflects derivational complexity of rewrite systems while\nit only reflects innermost derivational complexity. Section 5 reports on experimental results and we\nconclude in Section 6.\n\u2217 This research is supported by FWF (Austrian Science Fund) project P18763 and the Grant-in-Aid for Young Scientists\nNos. 20800022 and 22700009 of the Japan Society for the Promotion of Science.\n\nE. Bonelli (Ed.): 5th International Workshop\non Higher-Order Rewriting (HOR'10)\nEPTCS 49, 2011, pp. 46\u201357, doi:10.4204/EPTCS.49.4\n\nc H. Zankl, N. Hirokawa & A. Middeldorp\nThis work is licensed under the\nCreative Commons Attribution License.\n\n\fH. Zankl, N. Hirokawa & A. Middeldorp\n\n2\n\n47\n\nPreliminaries\n\nIn this section we fix preliminaries on rewriting, complexity and uncurrying.\n\n2.1\n\nTerm Rewriting\n\nWe assume familiarity with term rewriting [1, 17]. Let F be a signature and V a set of variables disjoint\nfrom F. By T (F, V) we denote the set of terms over F and V. The size of a term t is denoted |t|. A\nrewrite rule is a pair of terms (`, r), written ` \u2192 r, such that ` is not a variable and all variables in r occur\nin `. A term rewrite system (TRS for short) is a set of rewrite rules. A TRS R is said to be duplicating if\nthere exist a rewrite rule ` \u2192 r \u2208 R and a variable x that occurs more often in r than in `.\nContexts are terms over the signature F \u222a {\u0003} with exactly one occurrence of the fresh constant\n\u0003 (called hole). The expression C[t] denotes the result of replacing the hole in C by the term t. A\nsubstitution \u03c3 is a mapping from variables to terms and t\u03c3 denotes the result of replacing the variables\nin t according to \u03c3. Substitutions may change only finitely many variables (and are thus written as\n{x1 7\u2192 t1 , . . . , xn 7\u2192 tn }). The set of positions of a term t is defined as Pos(t) = {\u000f} if t is a variable and\nas Pos(t) = {\u000f} \u222a {iq | q \u2208 Pos(ti )} if t = f (t1 , . . . , tn ). Positions are used to address occurrences of\nsubterms. The subterm of t at position p \u2208 Pos(t) is defined as t|p = t if p = \u000f and as t|p = ti |q if p = iq.\nWe say a position p is to the right of a position q if p = p1 ip2 and q = q1 jq2 with p1 = q1 and i > j. For\na term t and positions p, q \u2208 Pos(t) we say t|p is to the right of t|q if p is to the right of q.\nA rewrite relation is a binary relation on terms that is closed under contexts and substitutions. For a\nTRS R we define \u2192R to be the smallest rewrite relation that contains R. We call s \u2192R t a rewrite step if\nthere exist a context C, a rewrite rule ` \u2192 r \u2208 R, and a substitution \u03c3 such that s = C[`\u03c3] and t = C[r\u03c3].\nIn this case we call `\u03c3 a redex and say that `\u03c3 has been contracted. A root rewrite step, denoted by\ns \u2192\u000fR t, has the shape s = `\u03c3 \u2192R r\u03c3 = t for some ` \u2192 r \u2208 R. A rewrite sequence is a sequence of rewrite\nsteps. The set of normal forms of a TRS R is defined as NF(R) = {t \u2208 T (F, V) | t contains no redexes}.\nA redex `\u03c3 in a term t is called innermost if proper subterms of `\u03c3 are normal forms, and rightmost\ninnermost if in addition `\u03c3 is to the right of any other redex in t. A rewrite step is called innermost\ni\nri\n(rightmost innermost) if an innermost (rightmost innermost) redex is contracted, written \u2192\nand \u2192,\nrespectively.\nIf the TRS R is not essential or clear from the context the subscript R is omitted in \u2192R and its\nderivatives. As usual, \u2192+ (\u2192\u2217 ) denotes the transitive (reflexive and transitive) closure of \u2192 and \u2192m its\ni +\nm-th iterate. A TRS is terminating (innermost terminating) if \u2192+ (\u2192\n) is well-founded.\nLet P be a property of TRSs and let \u03a6 be a transformation on TRSs with \u03a6(R) = R0 . We say \u03a6\npreserves P if P(R) implies P(R0 ) and \u03a6 reflects P if P(R0 ) implies P(R). Sometimes we call \u03a6 P\npreserving if \u03a6 preserves P and P reflecting if \u03a6 reflects P, respectively.\n\n2.2\n\nDerivational Complexity\n\nFor complexity analysis we assume TRSs to be finite and (innermost) terminating.\nHofbauer and Lautemann [10] introduced the concept of derivational complexity for terminating\nTRSs. The idea is to measure the maximal length of rewrite sequences (derivations) depending on the size\nof the starting term. Formally, the derivation height of a term t (with respect to a finitely branching and\nwell-founded order \u2192) is defined on natural numbers as dh(t, \u2192) = max{m \u2208 N | t \u2192m u for some u}.\nThe derivational complexity dcR (n) of a TRS R is then defined as dcR (n) = max{dh(t, \u2192R ) | |t| 6 n}.\n\n\f48\n\nUncurrying\n\ni\nSimilarly we define the innermost derivational complexity as idcR (n) = max{dh(t, \u2192\nR ) | |t| 6 n}. Since\nwe regard finite TRSs only, these functions are well-defined if R is (innermost) terminating. If dcR (n)\nis bounded by a linear, quadratic, cubic, . . . function or polynomial, R is said to have linear, quadratic,\ncubic, . . . or polynomial derivational complexity. A similar convention applies to idcR (n).\n\nFor functions f, g : N \u2192 N we write f (n) \u2208 O(g(n)) if there are constants M, N \u2208 N such that\nf (n) 6 M * g(n) + N for all n \u2208 N.\nOne popular method to prove polynomial upper bounds on the derivational complexity is via triangular matrix interpretations [13], which are a special instance of monotone algebras. An F-algebra A\nconsists of a non-empty carrier A and a set of interpretations fA for every f \u2208 F. By [\u03b1]A (*) we denote\nthe usual evaluation function of A according to an assignment \u03b1 which maps variables to values in A.\nAn F-algebra A together with a well-founded order \u001f on A is called a monotone algebra if every fA\nis monotone with respect to \u001f. Any monotone algebra (A, \u001f) induces a well-founded order on terms:\ns \u001fA t if for any assignment \u03b1 the condition [\u03b1]A (s) \u001f [\u03b1]A (t) holds. A TRS R is compatible with a\nmonotone algebra (A, \u001fA ) if l \u001fA r for all l \u2192 r \u2208 R.\nMatrix interpretations (M, \u001f) (often just denoted M) are a special form of monotone algebras. Here\nthe carrier is Nd for some fixed dimension d \u2208 N \\ {0}. The order \u001f is defined on Nd as (u1 , . . . , ud ) \u001f\n(v1 , . . . , vd ) if u1 >N v1 and ui >N vi for all 2 6 i 6 d. If every f \u2208 F of arity n is interpreted as\nfM (x~1 , . . . , x~n ) = F1 x~1 +* * *+Fn x~n + f~ where Fi \u2208 Nd\u00d7d for all 1 6 i 6 n and f~ \u2208 Nd then monotonicity\nof \u001f is achieved by demanding Fi (1,1) > 1 for any 1 6 i 6 n. Such interpretations have been introduced\nin [2].\nA matrix interpretation where for every f \u2208 F all Fi (1 6 i 6 n where n is the arity of f ) are upper\ntriangular is called triangular (abbreviated by TMI). A square matrix A of dimension d is of upper\ntriangular shape if A(i,i) 6 1 and A(i,j) = 0 if i > j for all 1 6 i, j 6 d. The next theorem is from [13].\nTheorem 1. If a TRS R is compatible with a TMI M of dimension d then dcR (n) \u2208 O(nd ).\nRecent generalizations of this theorem are reported in [14, 18].\n\n2.3\n\nUncurrying\n\nThis section recalls definitions and results from [8].\nAn applicative term rewrite system (ATRS for short) is a TRS over a signature that consists of\nconstants and a single binary function symbol called application which is denoted by the infix and leftassociative symbol \u25e6. In examples we often use juxtaposition instead of \u25e6. Every ordinary TRS can be\ntransformed into an ATRS by currying. Let F be a signature. The currying system C(F) consists of the\nrewrite rules\nfi+1 (x1 , . . . , xi , y) \u2192 fi (x1 , . . . , xi ) \u25e6 y\nfor every n-ary function symbol f \u2208 F and every 0 6 i < n. Here fn = f and, for every 0 6 i < n, fi is\na fresh function symbol of arity i. The currying system C(F) is confluent and terminating. Hence every\nterm t has a unique normal form t\u2193C(F ) . For instance, f(a, b) is transformed into f a b. Note that we\nwrite f for f0 .\nNext we recall the uncurrying transformation from [8]. Let R be an ATRS over a signature F. The\napplicative arity aa(f ) of a constant f \u2208 F is defined as the maximum n such that f \u25e6 t1 \u25e6 * * * \u25e6 tn is\na subterm in the left- or right-hand side of a rule in R. This notion is extended to terms as follows:\n\n\fH. Zankl, N. Hirokawa & A. Middeldorp\n\nR\nid x \u2192 x\nf x \u2192 id f x\n\nU(R)\nid \u25e6 x \u2192 id1 (x)\nid1 (x) \u25e6 y \u2192 id2 (x, y)\nf \u25e6 x \u2192 f1 (x)\n\n49\n\nR\u2193U (R)\nid1 (x) \u2192 x\n\nR\u03b7\nid x \u2192 x\n\nf1 (x) \u2192 id2 (f, x)\n\nR\u03b7 \u2193U (R)\nid1 (x) \u2192 x\n\nf x \u2192 id f x\nid x y \u2192 x y\n\nf1 (x) \u2192 id2 (f, x)\nid2 (x, y) \u2192 x \u25e6 y\n\nTable 1: Some (transformed) TRSs\naa(t) = aa(f ) if t is a constant f and aa(t1 ) \u2212 1 if t = t1 \u25e6 t2 . Note that aa(t) is undefined if the head\nsymbol of t is a variable. The uncurrying system U(R) consists of the rewrite rules\nfi (x1 , . . . , xi ) \u25e6 y \u2192 fi+1 (x1 , . . . , xi , y)\nfor every constant f \u2208 F and every 0 6 i < aa(f ). Here f0 = f and, for every i > 0, fi is a fresh\nfunction symbol of arity i. We say that R is left head variable free if aa(t) is defined for every nonvariable subterm t of a left-hand side of a rule in R. This means that no subterm of a left-hand side in\nR is of the form t1 \u25e6 t2 where t1 is a variable. The uncurrying system U(R), or simply U, is confluent\nand terminating. Hence every term t has a unique normal form t\u2193U . The uncurried system R\u2193U is\nthe TRS consisting of the rules `\u2193U \u2192 r\u2193U for every ` \u2192 r \u2208 R. However the rules of R\u2193U are not\nenough to simulate an arbitrary rewrite sequence in R. The natural idea is now to add U(R), but still\nR\u2193U (R) \u222a U(R) is not enough as shown in the next example from [8].\nExample 2. Consider the TRS R in Table 1. Based on aa(id) = 2 and aa(f) = 1 we get three rules in\nU(R) and can compute R\u2193U (R) . The TRS R is non-terminating but R\u2193U (R) \u222a U(R) is terminating.\nLet R be a left head variable free ATRS. The \u03b7-saturated ATRS R\u03b7 is the smallest extension of R\nsuch that ` \u25e6 x \u2192 r \u25e6 x \u2208 R\u03b7 whenever ` \u2192 r \u2208 R\u03b7 and aa(`) > 0. Here x is a variable that does not\nappear in ` \u2192 r. In the following we write U\u03b7+ (R) for R\u03b7 \u2193U (R) \u222a U(R). Note that applicative arities are\ncomputed before \u03b7-saturation.\nExample 3. Consider again Table 1. Since aa(id) = 2 but aa(id x) = 1 for the rule id x \u2192 x in R this\nexplains the rule id x y \u2192 x y in R\u03b7 . Note that U\u03b7+ (R) is non-terminating.\nFor a term t over the signature of the TRS U\u03b7+ (R), we denote by t\u2193C 0 the result of identifying different\nfunction symbols in t\u2193C that originate from the same function symbol in F. For a substitution \u03c3, we write\n\u03c3\u2193U for the substitution {x 7\u2192 \u03c3(x)\u2193U | x \u2208 V}.\nFrom now on we assume that every ATRS is left-head variable free.\nWe conclude this preliminary section by recalling some results from [8].\nLemma 4 ([8, Lemma 20]). Let \u03c3 be a substitution. If t is head variable free then t\u2193U \u03c3\u2193U = (t\u03c3)\u2193U .\nLemma 5 ([8, Lemma 15]). If R is an ATRS then \u2192R = \u2192R\u03b7 .\nLemma 6 ([8, Lemmata 26 and 27]). Let R be an ATRS. If s and t are terms over the signature of U\u03b7+ (R)\nthen (1) s \u2192R\u2193U t if and only if s\u2193C 0 \u2192R t\u2193C 0 and (2) s \u2192U t implies s\u2193C 0 = t\u2193C 0 .\nLemma 7 ([8, Proof of Theorem 16]). Let R be an ATRS. If s \u2192R t then s\u2193U \u2192+\nU + (R) t\u2193U .\n\u03b7\n\nConsequently our transformation is shown to be termination preserving and reflecting.\nTheorem 8 ([8, Theorems 16 and 28]). Let R be an ATRS. The ATRS R is terminating if and only if the\nTRS U\u03b7+ (R) is terminating.\n\n\f50\n\n3\n\nUncurrying\n\nInnermost Uncurrying\n\nBefore showing that our transformation reflects innermost termination we show that it does not preserve innermost termination. Hence uncurrying may not be used as a preprocessing transformation for\ninnermost non-termination proofs.\nExample 9. Consider the ATRS R consisting of the rules\nf x\u2192f x\n\nf \u2192g\n\nIn an innermost sequence the first rule is never applied and hence R is innermost terminating. The TRS\nU\u03b7+ (R) consists of the rules\nf1 (x) \u2192 f1 (x)\n\nf \u2192g\n\nf1 (x) \u2192 g \u25e6 x\n\nf \u25e6 x \u2192 f1 (x)\n\nand is not innermost terminating due to the rule f1 (x) \u2192 f1 (x).\ni\ni +\nThe next example shows that s \u2192\nR t does not imply s\u2193U \u2192U + (R) t\u2193U . This is not a counterexample\n\u03b7\nto soundness of uncurrying for innermost termination, but it shows that the proof for the \"if-direction\" of\nTheorem 8 (which is based on Lemma 7) cannot be adopted for the innermost case without further ado.\n\nExample 10. Consider the ATRS R consisting of the rules\nf \u2192g\n\na\u2192b\n\ngx\u2192h\n\ni\n+\nand the innermost step s = f a \u2192\nR g a = t. We have s\u2193U = f \u25e6 a and t\u2193U = g1 (a). The TRS U\u03b7 (R)\nconsists of the rules\n\nf \u2192g\n\na\u2192b\n\ng1 (x) \u2192 h\n\ng \u25e6 x \u2192 g1 (x)\n\ni\nWe have s\u2193U \u2192\nU\u03b7+ (R) g \u25e6 a but the step from g \u25e6 a to t\u2193U is not innermost.\n\nThe above problems can be solved if we consider terms that are not completely uncurried. The next\nlemmata prepare for the proof. Below we write s B t if t is a proper subterm of s.\nLemma 11. Let R be an ATRS. If s is a term over the signature of R, s \u2208 NF(R), and s \u2192\u2217U t then\nt \u2208 NF(R\u03b7 \u2193U ).\nProof. From Lemma 6(2) we obtain s\u2193C 0 = t\u2193C 0 . Note that s\u2193C 0 = s because s is a term over the signature\nof R. If t \u2208\n/ NF(R\u03b7 \u2193U ) then t \u2192R\u03b7 \u2193U u for some term u. Lemma 6(1) yields t\u2193C 0 \u2192R\u03b7 u\u2193C 0 and\nLemma 5 yields s \u2192R u\u2193C 0 . Hence s \u2208\n/ NF(R), contradicting the assumption. The proof is summarized\nin the following diagram:\n\u2217\nU\n\ns\n\nt\n\nR\u03b7 \u2193U\n\nu\n\n=\ns\u2193C 0\n\nLemma 6(2)\n\n=\n\nC0 \u2217\n\nt\u2193C 0\n\nLemma 6(1)\n\nC0 \u2217\n\nu\u2193C 0\n\nR\u03b7\n\nR\nLemma 5\n\n\fH. Zankl, N. Hirokawa & A. Middeldorp\n\n51\n\nLemma 12. \u2192\u2217U * B \u2286 B * \u2192\u2217U\nProof. Assume s \u2192\u2217U t B u. We show that s B * \u2192\u2217U u by induction on s. If s is a variable or a constant\nthen there is nothing to show. So let s = s1 \u25e6 s2 . We consider two cases.\n\u2022 If the outermost \u25e6 has not been uncurried then t = t1 \u25e6 t2 with s1 \u2192\u2217U t1 and s2 \u2192\u2217U t2 . Without\nloss of generality assume that t1 D u. If t1 = u then s B s1 \u2192\u2217U t1 . If t1 B u then the induction\nhypothesis yields s1 B * \u2192\u2217U u and hence also s B * \u2192\u2217U u.\n\u2022 If the outermost \u25e6 has been uncurried in the sequence from s to t then the head symbol of s1 cannot\nbe a variable and aa(s1 ) > 0. Hence we may write s1 = f \u25e6 t1 \u25e6 * * * \u25e6 ti and t = fi+1 (t01 , . . . , t0i , s02 )\nwith tj \u2192\u2217U t0j for all 1 6 j 6 i and s2 \u2192\u2217U s02 . Clearly, t0j D u for some 1 6 j 6 i or s02 D t. In all\ncases the result follows with the same reasoning as in the first case.\nThe next lemma states (a slightly more general result than) that an innermost root rewrite step in an\nATRS R can be simulated by an innermost rewrite sequence in U\u03b7+ (R).\ni +\ni \u000f\n\u2217\nLemma 13. For every ATRS R the inclusion U\u2217 \u2190 * \u2192\nR \u2286 \u2192U + (R) * U \u2190 holds.\n\u03b7\n\ni \u000f\ni +\n\u2217\n\u2217\nProof. We prove that s \u2192\nU\u03b7+ (R) r\u2193U \u03c3\u2193U U \u2190 r\u03c3 whenever s U \u2190 `\u03c3 \u2192R r\u03c3 for some rewrite rule ` \u2192 r\nin R. By Lemma 4 and the confluence of U,\ni \u2217\n\u2217\ns\u2192\nU (`\u03c3)\u2193U = `\u2193U \u03c3\u2193U \u2192U\u03b7+ (R) r\u2193U \u03c3\u2193U U \u2190 r\u03c3\ni \u2217\nIt remains to show that the sequence s \u2192\nU (`\u03c3)\u2193U and the step `\u2193U \u03c3\u2193U \u2192U\u03b7+ (R) r\u2193U \u03c3\u2193U are innermost\ni \u2217\ni\ni \u000f\n0 i \u2217\n0\nwith respect to U\u03b7+ (R). For the former, let s \u2192\nU C[u] \u2192U C[u ] \u2192U (`\u03c3)\u2193U with u \u2192U u and let t be\n\u2217\n\u2217\na proper subterm of u. Obviously `\u03c3 \u2192U C[u] B t. According to Lemma 12, `\u03c3 B v \u2192U t for some\ni \u000f\nterm v. Since `\u03c3 \u2192\nR r\u03c3, the term v is a normal form of R. Hence t \u2208 NF(R\u03b7 \u2193U ) by Lemma 11. Since\ni \u000f 0\nu\u2192\nu\n,\nt\nis\nalso\na\nnormal form of U. Hence t \u2208 NF(U\u03b7+ (R)) as desired. For the latter, let t be a proper\nU\nsubterm of (`\u03c3)\u2193U . According to Lemma 12, `\u03c3 B u \u2192\u2217U t. The term u is a normal form of R. Hence\nt \u2208 NF(R\u03b7 \u2193U ) by Lemma 11. Obviously, t \u2208 NF(U) and thus also t \u2208 NF(U\u03b7+ (R)).\ni\ni \u000f\nThe next example shows that it is not sound to replace \u2192\nR by \u2192R in Lemma 13.\n\nExample 14. Consider the ATRS R consisting of the rules\nf \u2192g\n\nf x\u2192gx\n\na\u2192b\n\nConsequently the TRS U\u03b7+ (R) consists of the rules\nf \u2192g\n\nf1 (x) \u2192 g1 (x)\n\na\u2192b\n\nf \u25e6 x \u2192 f1 (x)\n\ng \u25e6 x \u2192 g1 (x)\n\ni\ni +\n\u2217\nWe have f1 (a) U\u2217 \u2190 f \u25e6 a \u2192\nR g \u25e6 a but f1 (a) \u2192U + (R) * U \u2190 g \u25e6 a does not hold. To see that the latter\n\u03b7\ndoes not hold, consider the two reducts of g \u25e6 a with respect to \u2192\u2217U : g1 (a) and g \u25e6 a. We have neither\ni +\ni +\nf1 (a) \u2192\nU + (R) g1 (a) nor f1 (a) \u2192U + (R) g \u25e6 a.\n\u03b7\n\n\u03b7\n\nIn order to extend Lemma 13 to non-root positions, we have to use rightmost innermost evaluation.\nThis avoids the situation in the above example where parallel redexes become nested by uncurrying.\nri\ni +\n\u2217\nLemma 15. For every ATRS R the inclusion U\u2217 \u2190 * \u2192\nR \u2286 \u2192U + (R) * U \u2190 holds.\n\u03b7\n\n\f52\n\nUncurrying\n\nri\ni \u000f\nProof. Let s U\u2217 \u2190 t = C[`\u03c3] \u2192\nR C[r\u03c3] = u with `\u03c3 \u2192R r\u03c3. We use induction on C. If C = \u0003 then\ni \u000f\ni +\n\u2217\n\u2217\ns U \u2190 t \u2192R u. Lemma 13 yields s \u2192U + (R) * U \u2190 u. For the induction step we consider two cases.\n\u03b7\n\n\u2022 Suppose C = \u0003 \u25e6 s1 \u25e6 * * * \u25e6 sn and n > 0. Since R is left head variable free, aa(`) is defined.\ni\n0 \u2217\nIf aa(`) = 0 then s = t0 \u25e6 s01 \u25e6 * * * \u25e6 s0n U\u2217 \u2190 `\u03c3 \u25e6 s1 \u25e6 * * * \u25e6 sn \u2192\nR r\u03c3 \u25e6 s1 \u25e6 * * * \u25e6 sn with t U \u2190 `\u03c3\nand s0j U\u2217 \u2190 sj for 1 6 j 6 n. The claim follows using Lemma 13 and the fact that innermost\nrewriting is closed under contexts. If aa(`) > 0 we have to consider two cases. In the case where\nthe leftmost \u25e6 symbol in C has not been uncurried we proceed as when aa(`) = 0. If the leftmost\n\u25e6 symbol of C has been uncurried, we reason as follows. We may write `\u03c3 = f \u25e6 u1 \u25e6 * * * \u25e6 uk\nwhere k < aa(f ). We have t = f \u25e6 u1 \u25e6 * * * \u25e6 uk \u25e6 s1 \u25e6 * * * \u25e6 sn and u = r\u03c3 \u25e6 s1 \u25e6 * * * \u25e6 sn . There exists\nan i with 1 6 i 6 min{aa(f ), k + n} such that s = fi (u01 , . . . , u0k , s01 , . . . , s0i\u2212k ) \u25e6 s0i\u2212k+1 \u25e6 * * * \u25e6 s0n\nwith u0j U\u2217 \u2190 uj for 1 6 j 6 k and s0j U\u2217 \u2190 sj for 1 6 j 6 n. Because of rightmost innermost\nrewriting, the terms u1 , . . . , uk , s1 , . . . , sn are normal forms of R. According to Lemma 11 the\nterms u01 , . . . , u0k , s01 , . . . , s0n are normal forms of R\u03b7 \u2193U . Since i \u2212 k 6 aa(`), R\u03b7 contains the rule\n`\u25e6x1 \u25e6* * *\u25e6xi\u2212k \u2192 r \u25e6x1 \u25e6* * *\u25e6xi\u2212k where x1 , . . . , xi\u2212k are pairwise distinct variables not occurring\nin `. Therefore \u03c4 = \u03c3 \u222a {x1 7\u2192 s1 , . . . , xi\u2212k 7\u2192 si\u2212k } is a well-defined substitution. We obtain\ni \u2217\n0\n0\ns \u2192\nU + (R) fi (u1 \u2193U , . . . , uk \u2193U , s1 \u2193U , . . . , si\u2212k \u2193U ) \u25e6 si\u2212k+1 \u25e6 * * * \u25e6 sn\n\u03b7\n\ni\n\n\u2192U\u03b7+ (R) (r \u25e6 x1 \u25e6 * * * \u25e6 xi\u2212k )\u2193U \u03c4 \u2193U \u25e6 s0i\u2212k+1 \u25e6 * * * \u25e6 s0n\n\u2217\nU\u2190\n\n(r \u25e6 x1 \u25e6 * * * \u25e6 xi\u2212k )\u03c4 \u25e6 si\u2212k+1 \u25e6 * * * \u25e6 sn = r\u03c3 \u25e6 s1 \u25e6 * * * \u25e6 sn = t\n\nwhere we use the confluence of U in the first sequence.\nri\n0\n\u2022 In the second case we have C = s1 \u25e6 C 0 . Clearly C 0 [`\u03c3] \u2192\nR C [r\u03c3]. If aa(s1 ) 6 0 or if aa(s1 )\nis undefined or if aa(s1 ) > 0 and the outermost \u25e6 has not been uncurried in the sequence from\nri\n0\n0 \u2217\n0 \u2217\n0\nt to s then s = s01 \u25e6 s0 U\u2217 \u2190 s1 \u25e6 C 0 [`\u03c3] \u2192\nR s1 \u25e6 C [r\u03c3] = u with s1 U \u2190 s1 and s U \u2190 C [`\u03c3].\nIf aa(s1 ) > 0 and the outermost \u25e6 has been uncurried in the sequence from t to s then we may\nwrite s1 = f \u25e6 u1 \u25e6 * * * \u25e6 uk where k < aa(f ). We have s = fk+1 (u01 , . . . , u0k , s0 ) for some term s0\ni +\n\u2217\n0\nwith s0 U\u2217 \u2190 C 0 [`\u03c3] and u0i U\u2217 \u2190 ui for 1 6 i 6 k. In both cases we obtain s0 \u2192\nU\u03b7+ (R) * U \u2190 C [r\u03c3]\nfrom the induction hypothesis. Since innermost rewriting is closed under contexts, the desired\ni +\n\u2217\ns\u2192\nU + (R) * U \u2190 u follows.\n\u03b7\n\nBy Lemma 15 and the equivalence of rightmost innermost and innermost termination [16] we obtain\nthe main result of this section.\nTheorem 16. An ATRS R is innermost terminating if U\u03b7+ (R) is innermost terminating.\n\n4\n\nDerivational Complexity\n\nIn this section we investigate how the uncurrying transformation affects derivational complexity for full\nand innermost rewriting.\n\n4.1\n\nFull Rewriting\n\nIt is sound to use uncurrying as a preprocessor for proofs of upper bounds on the derivational complexity:\n\n\fH. Zankl, N. Hirokawa & A. Middeldorp\n\n53\n\nTheorem 17. If R is a terminating ATRS then dcR (n) \u2208 O(dcU\u03b7+ (R) (n)).\nProof. Consider an arbitrary maximal rewrite sequence t0 \u2192R t1 \u2192R t2 \u2192R * * * \u2192R tm which we can\ntransform into the sequence\n+\n+\n+\nt0 \u2193U \u2192+\nU + (R) t1 \u2193U \u2192U + (R) t2 \u2193U \u2192U + (R) * * * \u2192U + (R) tm \u2193U\n\u03b7\n\n\u03b7\n\n\u03b7\n\n\u03b7\n\nusing Lemma 7. Moreover, t0 \u2192\u2217U + (R) t0 \u2193U holds. Therefore, dh(t0 , \u2192R ) 6 dh(t0 , \u2192U\u03b7+ (R) ). Hence\n\u03b7\ndcR (n) 6 dcU\u03b7+ (R) (n) holds for all n \u2208 N.\nNext we show that uncurrying preserves polynomial complexity. Hence we disregard duplicating\n(exponential complexity, cf. [9]) and empty (constant complexity) ATRSs. A TRS R is called lengthreducing if R is non-duplicating and |`| > |r| for all rules ` \u2192 r \u2208 R. The following lemma is an easy\nconsequence of [9, Theorem 23]. Here for a relative TRS R/S the derivational complexity dcR/S (n) is\nbased on the rewrite relation \u2192R/S which is defined as \u2192\u2217S * \u2192R * \u2192\u2217S .\nLemma 18. Let R be a non-empty non-duplicating TRS over a signature containing at least one symbol\nof arity at least two and let S be a length-reducing TRS. If R \u222a S is terminating then dcR\u222aS (n) \u2208\nO(dcR/S (n)).\nNote that the above lemma does not hold if the TRS R is empty.\nTheorem 19. Let R be a non-empty ATRS. If dcR (n) is in O(nk ) then dcR\u03b7 \u2193U /U (n) and dcU\u03b7+ (R) (n) are\nin O(nk ).\nProof. Let dcR (n) be in O(nk ) and consider a maximal rewrite sequence of \u2192R\u03b7 \u2193U /U starting from an\narbitrary term t0 :\nt0 \u2192R\u03b7 \u2193U /U t1 \u2192R\u03b7 \u2193U /U * * * \u2192R\u03b7 \u2193U /U tm\nBy Lemma 6 we obtain the sequence t0 \u2193C 0 \u2192R t1 \u2193C 0 \u2192R * * * \u2192R tm \u2193C 0 . Thus, dh(t0 , \u2192R\u03b7 \u2193U /U ) 6\ndh(t0 \u2193C 0 , \u2192R ). Because |t0 \u2193C 0 | 6 2|t0 |, we obtain dcR\u03b7 \u2193U /U (n) 6 dcR (2n). From the assumption the\nright-hand side is in O(nk ), hence dcR\u03b7 \u2193U /U (n) is in O(nk ). Since dcR (n) is in O(nk ), R must be\nnon-duplicating and terminating. Because U is length-reducing, Lemma 18 yields that dcU\u03b7+ (R) (n) also\nis in O(nk ).\nIn practice it is recommendable to investigate dcR\u03b7 \u2193U /U (n) instead of dcU\u03b7+ (R) (n), see [19]. The next\nexample shows that uncurrying might be useful to enable criteria for polynomial complexity.\nExample 20. Consider the ATRS R consisting of the two rules\nadd x 0 \u2192 x\n\nadd x (s y) \u2192 s (add x y)\n\nThe system U\u03b7+ (R) consists of the rules\nadd2 (x, 0) \u2192 x\nadd1 (x) \u25e6 y \u2192 add2 (x, y)\n\nadd2 (x, s1 (y)) \u2192 s1 (add2 (x, y))\nadd \u25e6 x \u2192 add1 (x)\n\ns \u25e6 x \u2192 s1 (x)\n\n\f54\n\nUncurrying\n\nThe 2-dimensional TMI M\n\u0012 \u0013\n\u0012 \u0013\n11\n11\n~x +\n~y\n01\n01\n\u0012 \u0013\n0\naddM = sM = 0M =\n1\n\nadd2M (~x, ~y ) = \u25e6M (~x, ~y ) =\n\nadd1M (~x) = s1M (~x) =\n\n\u0012 \u0013\n\u0012 \u0013\n10\n0\n~x +\n01\n1\n\norients all rules in U\u03b7+ (R) strictly, inducing a quadratic upper bound on the derivational complexity of\nU\u03b7+ (R) according to Theorem 1 and by Theorem 17 also of R. In contrast, the TRS R itself does\nnot admit such an interpretation of dimension 2. To see this, we encoded the required condition as a\nsatisfaction problem in non-linear arithmetic over the integers. MiniSmt [20]1 can prove this problem\nunsatisfiable by simplifying it into a trivially unsatisfiable constraint. Details can be inferred from the\nwebsite mentioned in Footnote 4.\n\n4.2\n\nInnermost Rewriting\n\nNext we consider innermost derivational complexity. Let R be an innermost terminating TRS. From a\nresult by Krishna Rao [16, Section 5.1] which has been generalized by van Oostrom [15, Theorems 2\ni\nri\nand 3] we infer that dh(t, \u2192\nR ) = dh(t, \u2192R ) holds for all terms t.\nTheorem 21. If R is an innermost terminating ATRS then idcR (n) \u2208 O(idcU\u03b7+ (R) (n)).\nri\nri\nri\nri\nProof. Consider a maximal rightmost innermost rewrite sequence t0 \u2192\nR t1 \u2192R t2 \u2192R * * * \u2192R tm .\nUsing Lemma 15 we obtain a sequence\ni +\ni +\n0 i +\n0 i +\n0\nt0 \u2192\nU + (R) t1 \u2192U + (R) t2 \u2192U + (R) * * * \u2192U + (R) tm\n\u03b7\n\n\u03b7\n\n\u03b7\n\n\u03b7\n\ni\nri\nfor terms t01 , t02 , . . . , t0m such that ti \u2192\u2217U t0i for all 1 6 i 6 m. It follows that dh(t0 , \u2192\nR ) = dh(t0 , \u2192R ) 6\ni\ndh(t0 , \u2192U\u03b7+ (R) ) and we conclude idcR (n) \u2208 O(idcU\u03b7+ (R) (n)).\n\nAs Example 9 showed, uncurrying does not preserve innermost termination. Similarly, it does not\npreserve innermost polynomial complexity even if the original ATRS has linear innermost derivational\ncomplexity.\nExample 22. Consider the non-duplicating ATRS R consisting of the two rules\nf \u2192s\n\nf (s x) \u2192 s (s (f x))\n\nSince the second rule is never used in innermost rewriting, idcR (n) \u2208 O(n) is easily shown by induction\non n. We show that the innermost derivational complexity of U\u03b7+ (R) is at least exponential. The TRS\nU\u03b7+ (R) consists of the rules\nf \u2192s\n\nf1 (x) \u2192 s1 (x)\n\nf1 (s1 (x)) \u2192 s1 (s1 (f1 (x)))\n\nf \u25e6 x \u2192 f1 (x)\n\ns \u25e6 x \u2192 s1 (x)\n\ni\nn\nn\nand one can verify that dh(f1n (s1 (x)), \u2192\nU\u03b7+ (R) ) > 2 for all n > 1. Hence, idcU\u03b7+ (R) (n + 3) > 2 for all\nn > 0.\n1 http://cl-informatik.uibk.ac.at/software/minismt/\n\n\fH. Zankl, N. Hirokawa & A. Middeldorp\n\n55\n\nTable 2: Innermost termination for 213 ATRSs.\nsubterm\n\u2212/+\n42 / 55\n\nmatrix (1)\n\u2212/+\n67 / 102\n\nmatrix (2)\n\u2212/+\n111 / 142\n\nmatrix (3)\n\u2212/+\n113 / 144\n\nmatrix (4)\n\u2212/+\n114 / 145\n\nTable 3: (Innermost) derivational complexity for 195 (213) ATRSs.\n\ndc\nidc\n\n5\n\nTMI (1)\n\u2212/+\n3/4\n3/4\n\nTMI (2)\n\u2212/+\n10 / 14\n10 / 14\n\nTMI (3)\n\u2212/+\n12 / 26\n12 / 26\n\nTMI (4)\n\u2212/+\n12 / 28\n12 / 28\n\nExperimental Results\n\nThe results from this paper are implemented in the termination prover TTT2 [12].2 Version 7.0.2 of\nthe termination problem data base (TPDB)3 contains 195 ATRSs for full rewriting and 18 ATRSs for\ninnermost rewriting. All tests have been performed on a single core of a server equipped with eight dualcore AMD Opteron R processors 885 running at a clock rate of 2.6 GHz and 64 GB of main memory.\nExperiments4 give evidence that uncurrying allows to handle significantly more systems. For proving\ninnermost termination we considered two popular termination methods, namely the subterm criterion [7]\nand matrix interpretations [2] of dimensions one to four. The implementation of the latter is based on\nSAT solving (cf. [2]). For a matrix interpretation of dimension d we used 5 \u2212 d bits to represent natural\nnumbers in matrix coefficients. An additional bit was used for intermediate results. Both methods are\nintegrated within the dependency pair framework using dependency graph reasoning and usable rules as\nproposed in [3, 4, 6].\nTable 2 shows the number of systems that could be proved innermost terminating. In the table + (\u2212)\nindicates that uncurrying has (not) been used as preprocessing step, e.g., for the subterm criterion the\nnumber of successful proofs increases from 42 to 55 if uncurrying is used as a preprocessing transformation. For the setting based on matrix interpretations the gains are even larger. In the table, the numbers\nin parentheses denote the dimensions of the matrices.\nTable 3 shows how uncurrying improves the performance of TTT2 for derivational complexity. In this\ntable we used TMIs as presented in Theorem 1. Coefficients of TMIs are represented with max{2, 5 \u2212 d}\nbits; again an additional bit is allowed for intermediate results. If uncurrying is used as preprocessing\ntransformation, TMIs can, e.g., show 14 systems to have at most quadratic derivational complexity while\nwithout uncurrying the method only applies to 10 systems. Since TTT2 has no special methods for\nproving innermost derivational complexity, the numbers in rows dc and idc coincide.\n2 http://cl-informatik.uibk.ac.at/software/ttt2/\n3 http://termination-portal.org/wiki/TPDB\n4 http://cl-informatik.uibk.ac.at/software/ttt2/10hor/\n\n\f56\n\n6\n\nUncurrying\n\nConclusion\n\nIn this paper we studied properties of the uncurrying transformation from [8] for innermost rewriting and\n(innermost) derivational complexity. The significance of these results has been confirmed empirically.\nFor proving (innermost) termination of applicative systems we mention transformation A [3] as\nrelated work. The main benefit of the approach in [3] is that in contrast to our setting no auxiliary\nuncurrying rules are necessary. However, transformation A only works for proper ATRSs without head\nvariables in the (left- and) right-hand sides of rewrite rules. Here proper means that any constant always\nappears with the same applicative arity.\nWe are not aware of other investigations dedicated to (derivational) complexity analysis of ATRSs.\nHowever, we remark that transformation A preserves derivational complexity.This is straightforward\nfrom [11, Lemma 2.1(3)].\nAs future work we plan to incorporate the results for innermost termination into the dependency pair\nprocessors presented in [8].\n\nReferences\n[1] F. Baader & T. Nipkow (1998): Term Rewriting and All That. Cambridge University Press.\n[2] J. Endrullis, J. Waldmann & H. Zantema (2008): Matrix Interpretations for Proving Termination of Term\nRewriting. Journal of Automated Reasoning 40(2-3), pp. 195\u2013220. Available at http://dx.doi.org/10.\n1007/s10817-007-9087-9.\n[3] J. Giesl, R. Thiemann & P. Schneider-Kamp (2005): Proving and Disproving Termination of Higher-Order\nFunctions. In: Proc. 5th International Workshop on Frontiers of Combining Systems. LNCS 3717, pp. 216\u2013\n231. Available at http://dx.doi.org/10.1007/11559306_12.\n[4] J. Giesl, R. Thiemann, P. Schneider-Kamp & S. Falke (2006): Mechanizing and Improving Dependency\nPairs. Journal of Automated Reasoning 37(3), pp. 155\u2013203. Available at http://dx.doi.org/10.1007/\ns10817-006-9057-7.\n[5] B. Gramlich (1995): Abstract Relations between Restricted Termination and Confluence Properties of\nRewrite Systems. Fundamenta Informaticae 24(1-2), pp. 3\u201323.\n[6] N. Hirokawa & A. Middeldorp (2005): Automating the Dependency Pair Method. Information and Computation 199(1-2), pp. 172\u2013199. Available at http://dx.doi.org/10.1016/j.ic.2004.10.004.\n[7] N. Hirokawa & A. Middeldorp (2007): Tyrolean Termination Tool: Techniques and Features. Information\nand Computation 205(4), pp. 474\u2013511. Available at http://dx.doi.org/10.1016/j.ic.2006.08.010.\n[8] N. Hirokawa, A. Middeldorp & H. Zankl (2008): Uncurrying for Termination. In: Proc. 15th International\nConference on Logic for Programming, Artificial Intelligence and Reasoning. LNCS (LNAI) 5330, pp. 667\u2013\n681. Available at http://dx.doi.org/10.1007/978-3-540-89439-1_46.\n[9] N. Hirokawa & G. Moser (2008): Automated Complexity Analysis Based on the Dependency Pair Method.\nIn: Proc. 4th International Joint Conference on Automated Reasoning. LNCS (LNAI) 5195, pp. 364\u2013380.\nAvailable at http://dx.doi.org/10.1007/978-3-540-71070-7_32.\n[10] D. Hofbauer & C. Lautemann (1989): Termination Proofs and the Length of Derivations. In: Proc. 3rd\nInternational Conference on Rewriting Techniques and Applications. LNCS 355, pp. 167\u2013177. Available at\nhttp://dx.doi.org/10.1007/3-540-51081-8_107.\n[11] R. Kennaway, J.W. Klop, M.R. Sleep & F.-J. de Vries (1996): Comparing Curried and Uncurried Rewriting.\nJournal of Symbolic Computation 21(1), pp. 15\u201339.\n\n\fH. Zankl, N. Hirokawa & A. Middeldorp\n\n57\n\n[12] M. Korp, C. Sternagel, H. Zankl & A. Middeldorp (2009): Tyrolean Termination Tool 2. In: Proc. 20th\nInternational Conference on Rewriting Techniques and Applications. LNCS 5595, pp. 295\u2013304. Available at\nhttp://dx.doi.org/10.1007/978-3-642-02348-4_21.\n[13] G. Moser, A. Schnabl & J. Waldmann (2008): Complexity Analysis of Term Rewriting Based on Matrix and\nContext Dependent Interpretations. In: Proc. 28th International Conference on Foundations of Software\nTechnology and Theoretical Computer Science. LIPIcs 2, pp. 304\u2013315. Available at http://dx.doi.org/\n10.4230/LIPIcs.FSTTCS.2008.1762.\n[14] F. Neurauter, H. Zankl & A. Middeldorp (2010): Revisiting Matrix Interpretations for Polynomial Derivational Complexity of Term Rewriting. In: Proc. 17th International Conference on Logic for Programming, Artificial Intelligence and Reasoning. LNCS (ARCoSS) 6397, pp. 550\u2013564. Available at http:\n//dx.doi.org/10.1007/978-3-642-16242-8_39.\n[15] V. van Oostrom (2007): Random Descent. In: Proc. 18th International Conference on Rewriting\nTechniques and Applications. LNCS 4533, pp. 314\u2013328. Available at http://dx.doi.org/10.1007/\n978-3-540-73449-9_24.\n[16] M.R.K. Krishna Rao (2000): Some Characteristics of Strong Innermost Normalization. Theoretical Computer Science 239, pp. 141\u2013164. Available at http://dx.doi.org/10.1016/S0304-3975(99)00215-7.\n[17] TeReSe (2003): Term Rewriting Systems. Cambridge Tracts in Theoretical Computer Science 55, Cambridge\nUniversity Press.\n[18] J. Waldmann (2010): Polynomially Bounded Matrix Interpretations. In: Proc. 21st International Conference\non Rewriting Techniques and Applications. LIPIcs 6, pp. 357\u2013372. Available at http://dx.doi.org/10.\n4230/LIPIcs.RTA.2010.357.\n[19] H. Zankl & M. Korp (2010): Modular Complexity Analysis via Relative Complexity. In: Proc. 21st International Conference on Rewriting Techniques and Applications. LIPIcs 6, pp. 385\u2013400. Available at\nhttp://dx.doi.org/10.4230/LIPIcs.RTA.2010.385.\n[20] H. Zankl & A. Middeldorp (2010): Satisfiability of Non-Linear (Ir)rational Arithmetic. In: Proc. 16th International Conference on Logic for Programming, Artificial Intelligence and Reasoning. LNCS (LNAI) 6355,\npp. 481\u2013500.\n\n\f"}