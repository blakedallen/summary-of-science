{"id": "http://arxiv.org/abs/0904.1705v1", "guidislink": true, "updated": "2009-04-10T15:36:02Z", "updated_parsed": [2009, 4, 10, 15, 36, 2, 4, 100, 0], "published": "2009-04-10T15:36:02Z", "published_parsed": [2009, 4, 10, 15, 36, 2, 4, 100, 0], "title": "Bounded Max-Colorings of Graphs", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0904.1705%2C0904.4587%2C0904.0894%2C0904.0813%2C0904.4051%2C0904.4722%2C0904.4235%2C0904.0945%2C0904.4384%2C0904.0442%2C0904.4407%2C0904.1235%2C0904.0689%2C0904.1916%2C0904.3267%2C0904.2442%2C0904.0458%2C0904.0286%2C0904.2714%2C0904.2637%2C0904.0647%2C0904.2155%2C0904.2169%2C0904.1809%2C0904.0864%2C0904.1986%2C0904.4169%2C0904.2444%2C0904.3167%2C0904.4733%2C0904.1829%2C0904.4571%2C0904.4908%2C0904.0003%2C0904.2509%2C0904.2985%2C0904.0028%2C0904.0855%2C0904.0542%2C0904.4846%2C0904.0102%2C0904.4624%2C0904.0632%2C0904.3782%2C0904.1851%2C0904.1744%2C0904.2501%2C0904.2739%2C0904.3053%2C0904.1069%2C0904.0669%2C0904.3681%2C0904.1110%2C0904.2145%2C0904.4400%2C0904.3866%2C0904.0752%2C0904.0177%2C0904.2658%2C0904.4727%2C0904.3132%2C0904.2802%2C0904.2738%2C0904.0453%2C0904.3580%2C0904.0929%2C0904.1736%2C0904.1075%2C0904.1377%2C0904.1887%2C0904.2972%2C0904.1603%2C0904.3266%2C0904.1764%2C0904.2203%2C0904.2453%2C0904.3363%2C0904.1228%2C0904.3937%2C0904.0605%2C0904.4151%2C0904.0350%2C0904.3282%2C0904.2077%2C0904.1948%2C0904.2197%2C0904.1770%2C0904.2919%2C0904.0136%2C0904.0387%2C0904.3743%2C0904.0119%2C0904.2946%2C0904.4777%2C0904.0800%2C0904.4391%2C0904.2950%2C0904.4041%2C0904.1997%2C0904.2431%2C0904.2293&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Bounded Max-Colorings of Graphs"}, "summary": "In a bounded max-coloring of a vertex/edge weighted graph, each color class\nis of cardinality at most $b$ and of weight equal to the weight of the heaviest\nvertex/edge in this class. The bounded max-vertex/edge-coloring problems ask\nfor such a coloring minimizing the sum of all color classes' weights.\n  In this paper we present complexity results and approximation algorithms for\nthose problems on general graphs, bipartite graphs and trees. We first show\nthat both problems are polynomial for trees, when the number of colors is\nfixed, and $H_b$ approximable for general graphs, when the bound $b$ is fixed.\nFor the bounded max-vertex-coloring problem, we show a 17/11-approximation\nalgorithm for bipartite graphs, a PTAS for trees as well as for bipartite\ngraphs when $b$ is fixed. For unit weights, we show that the known 4/3 lower\nbound for bipartite graphs is tight by providing a simple 4/3 approximation\nalgorithm. For the bounded max-edge-coloring problem, we prove approximation\nfactors of $3-2/\\sqrt{2b}$, for general graphs, $\\min\\{e, 3-2/\\sqrt{b}\\}$, for\nbipartite graphs, and 2, for trees. Furthermore, we show that this problem is\nNP-complete even for trees. This is the first complexity result for\nmax-coloring problems on trees.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0904.1705%2C0904.4587%2C0904.0894%2C0904.0813%2C0904.4051%2C0904.4722%2C0904.4235%2C0904.0945%2C0904.4384%2C0904.0442%2C0904.4407%2C0904.1235%2C0904.0689%2C0904.1916%2C0904.3267%2C0904.2442%2C0904.0458%2C0904.0286%2C0904.2714%2C0904.2637%2C0904.0647%2C0904.2155%2C0904.2169%2C0904.1809%2C0904.0864%2C0904.1986%2C0904.4169%2C0904.2444%2C0904.3167%2C0904.4733%2C0904.1829%2C0904.4571%2C0904.4908%2C0904.0003%2C0904.2509%2C0904.2985%2C0904.0028%2C0904.0855%2C0904.0542%2C0904.4846%2C0904.0102%2C0904.4624%2C0904.0632%2C0904.3782%2C0904.1851%2C0904.1744%2C0904.2501%2C0904.2739%2C0904.3053%2C0904.1069%2C0904.0669%2C0904.3681%2C0904.1110%2C0904.2145%2C0904.4400%2C0904.3866%2C0904.0752%2C0904.0177%2C0904.2658%2C0904.4727%2C0904.3132%2C0904.2802%2C0904.2738%2C0904.0453%2C0904.3580%2C0904.0929%2C0904.1736%2C0904.1075%2C0904.1377%2C0904.1887%2C0904.2972%2C0904.1603%2C0904.3266%2C0904.1764%2C0904.2203%2C0904.2453%2C0904.3363%2C0904.1228%2C0904.3937%2C0904.0605%2C0904.4151%2C0904.0350%2C0904.3282%2C0904.2077%2C0904.1948%2C0904.2197%2C0904.1770%2C0904.2919%2C0904.0136%2C0904.0387%2C0904.3743%2C0904.0119%2C0904.2946%2C0904.4777%2C0904.0800%2C0904.4391%2C0904.2950%2C0904.4041%2C0904.1997%2C0904.2431%2C0904.2293&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "In a bounded max-coloring of a vertex/edge weighted graph, each color class\nis of cardinality at most $b$ and of weight equal to the weight of the heaviest\nvertex/edge in this class. The bounded max-vertex/edge-coloring problems ask\nfor such a coloring minimizing the sum of all color classes' weights.\n  In this paper we present complexity results and approximation algorithms for\nthose problems on general graphs, bipartite graphs and trees. We first show\nthat both problems are polynomial for trees, when the number of colors is\nfixed, and $H_b$ approximable for general graphs, when the bound $b$ is fixed.\nFor the bounded max-vertex-coloring problem, we show a 17/11-approximation\nalgorithm for bipartite graphs, a PTAS for trees as well as for bipartite\ngraphs when $b$ is fixed. For unit weights, we show that the known 4/3 lower\nbound for bipartite graphs is tight by providing a simple 4/3 approximation\nalgorithm. For the bounded max-edge-coloring problem, we prove approximation\nfactors of $3-2/\\sqrt{2b}$, for general graphs, $\\min\\{e, 3-2/\\sqrt{b}\\}$, for\nbipartite graphs, and 2, for trees. Furthermore, we show that this problem is\nNP-complete even for trees. This is the first complexity result for\nmax-coloring problems on trees."}, "authors": ["Evripidis Bampis", "Alexander Kononov", "Giorgio Lucarelli", "Ioannis Milis"], "author_detail": {"name": "Ioannis Milis"}, "author": "Ioannis Milis", "arxiv_comment": "13 pages, 5 figures", "links": [{"href": "http://arxiv.org/abs/0904.1705v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0904.1705v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0904.1705v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0904.1705v1", "journal_reference": null, "doi": null, "fulltext": "Bounded Max-Colorings of Graphs\nE. Bampis\u2217\n\nA. Kononov\u2020\n\nG. Lucarelli\u2021\n\nI. Milis\u2021\n\narXiv:0904.1705v1 [cs.DS] 10 Apr 2009\n\nOctober 25, 2018\n\nAbstract\nIn a bounded max-coloring of a vertex/edge weighted graph, each color class is of cardinality\nat most b and of weight equal to the weight of the heaviest vertex/edge in this class. The\nbounded max-vertex/edge-coloring problems ask for such a coloring minimizing the sum of all\ncolor classes' weights.\nIn this paper we present complexity results and approximation algorithms for those problems on general graphs, bipartite graphs and trees. We first show that both problems are\npolynomial for trees, when the number of colors is fixed, and Hb approximable for general\ngraphs, when the bound b is fixed. For the bounded max-vertex-coloring problem, we show a\n17/11-approximation algorithm for bipartite graphs, a PTAS for trees as well as for bipartite\ngraphs when b is fixed. For unit weights, we show that the known 4/3 lower bound for bipartite graphs is tight by providing a simple 4/3 approximation algorithm.\nFor the bounded\n\u221a\nmax-edge-coloring\nproblem,\nwe\nprove\napproximation\nfactors\nof\n3\n\u2212\n2/\n2b,\nfor\ngeneral graphs,\n\u221a\nmin{e, 3 \u2212 2/ b}, for bipartite graphs, and 2, for trees. Furthermore, we show that this\nproblem is NP-complete even for trees. This is the first complexity result for max-coloring\nproblems on trees.\n\n1\n\nIntroduction\n\nThe bounded max-vertex-coloring (resp. bounded max-edge-coloring) problem takes as input a graph\nG = (V, E), a weight function w : V \u2192 N (resp. w : E \u2192 N ) and an integer b; the question of\nthis problem is to find a proper vertex- (resp. edge-) coloring of G, C = {C1 , C2 , . . . , Ck }, where\neach color Ci , 1 \u2264 i \u2264 k, has weight wi = max{w(u) | u \u2208 Ci } (resp. wi = max{w(e) | e \u2208 Ci }),\nPk\ncardinality |Ci | \u2264 b, and the sum of colors' weights, W = i=1 wi , is minimized.\nWe shall denote the vertex and edge bounded max-coloring problems by VC(w, b) and EC(w, b),\nrespectively. These problems, without the presence of the cardinality bound b, have been already\naddressed in the literature as max-vertex-coloring [20] and max-edge-coloring [18] problems; here\nwe denote them by VC(w) and EC(w), respectively. For unit weights we get the bounded vertexcoloring [2] and bounded edge-coloring [1] problems, denoted by VC(b) and EC(b), respectively.\nFor both unbounded colors cardinalities and unit weights, we have the classical vertex-coloring\n(VC) and edge-coloring (EC) problems.\nMotivation. Max-coloring problems have been well motivated in the literature. Max-vertexcoloring problems arise in the management of dedicated memories, organized as buffer pools, which\nis the case for wireless protocol stacks like GPRS or 3G [20, 19]. Max-edge-coloring problems arise in\nswitch based communication systems, like SS/TDMA [4, 17], where messages are to be transmitted\nthrough direct connections established by an underlying network. Moreover, max-coloring problems\ncorrespond to scheduling jobs with conflicts into a batch scheduling environment [9, 13].\nIn all applications mentioned above, context-related entities require their service by physical\nresources for a time interval. However, there exists in practice a natural constraint on the number\n\u2217 IBISC,\n\nCNRS FRE 3190, Universit\u00e9 d' \u00c9vry, France, bampis@ibisc.univ-evry.fr\nInstitute of Mathematics, pr Koptyuga 4, Novosibirsk, Russia, alvenko@math.nsc.ru\n\u2021 Dept. of Informatics, Athens University of Economics and Business, Greece, {gluc,milis}@aueb.gr\n\n\u2020 Sobolev\n\n1\n\n\fof entities assigned the same resource or different resources at the same time. Indeed, the number\nof memory requests assigned the same buffer is determined by strict deadlines on their completion\ntimes, while the number of messages and jobs assigned, at the same time, to different channels and\nmachines, respectively, is bounded by the number of the available resources. The existence of such\na constraint motivates the study of the bounded max-coloring problems.\nRelated Work. It is well known that for general graphs it is NP-hard to approxi- mate the VC\nproblem within any constant factor and the EC problem within a factor less than 4/3; for bipartite\ngraphs both problems become polynomial.\nThe complexity of the VC(b) problem (known also as Mutual Exclusion Sche- duling problem\n[2]) on special graph classes has been extensively studied (see [14] and the references therein). It\nis polynomial for trees [16], but NP-complete for bipartite graphs even for three colors [3]. This\nlast result implies also a 4/3 inapproximabilty bound for the VC(b) problem on bipartite graphs.\nThe VC(w) problem is not approximable within a factor less than 8/7 even for planar bipartite graphs, unless P=NP [9, 19]. This bound is tight for general bipartite graphs, as an 8/7approximation algorithm is also known [7, 19]. On the other hand, the complexity of the problem\nin trees is an open question, while a PTAS for this case has been presented in [19, 12]. Other results\nfor the VC(w) problem on several graph classes have been also presented in [9, 7, 20, 19, 12, 11].\nThe EC(b) problem is polynomial for bipartite graphs [4] as well as for general graphs if b is\nfixed [1]. Moreover, it is implied by the results in [14] that there is a 4/3 approximation algorithm\nfor the EC(b) problem on general graphs.\nThe EC(w) problem is not approximable within a factor less than 7/6 even for cubic planar bipartite graphs with edge weights w(e) \u2208 {1, 2, 3}, unless P=NP [7]. A simple greedy 2approximation algorithm for general graphs has been proposed in [17]. The complexity of the\nEC(w) problem on trees remains also open, while a 3/2-approximation algorithm has been recently presented [18].\nKnown results for the VC(w, b) and EC(w, b) problems have been appeared in the context of\nbatch scheduling for complements of special graph classes (see e.g. [13]). In this context both\nproblems have been shown to be polynomial for general graphs and b = 2 [5].\nIn Table 1 we summarize the best known results for bipartite graphs and trees together with\nour contribution.\nProblem\nVC(b)\nVC(w)\nVC(w, b)\nEC(b)\nEC(w)\nEC(w, b)\n\nBipartite graphs\nLower Bound\nUpper bound\n4/3 [3]\n4/3\n8/7 [9, 7, 19]\n4/3 [3]\n17/11\nOP T [4]\n7/6 [7]\n2 [17]\u221a\n7/6 [7]\nmin{e, 3 \u2212 2/ b, Hb }\u2217\u2217\n\nTrees\nLower Bound\nUpper bound\nOP T [16]\nopen\u2217\nP T AS [19, 12]\nopen\u2217\nPTAS\nOP T [4]\nopen\u2217\n3/2 [18]\nNP-complete\n2\n\nTable 1: Known and ours (in bold) approximability results for bounded and/or max coloring\n\u2217\nproblems.\nEven the complexity of the problem is unknown. \u2217\u2217 We also show a ratio of min{3 \u2212\n\u221a\n2/ 2b, Hb } for general graphs. In both cases, the ratio Hb holds only if b is fixed.\nOur results and organization of the paper. In this paper we deal with bounded max-coloring\nproblems on general graphs, bipartite graphs and trees. Our interest in bipartite graphs and trees\nis two-fold. Despite their simplicity, these classes of graphs are important in their own right both\nfrom a theoretical point of view but also from the applications' perspective [17, 19].\nIn the next section, we relate our problems with two well known problems, namely the list\ncoloring and the set cover problems. We also introduce some useful notation. In Section 3, we\ndeal with the VC(w, b) problem and we give a simple 2-approximation algorithm for bipartite\ngraphs. As a byproduct, we show that this algorithm becomes a 4/3-approximation algorithm for\n\n2\n\n\fthe VC(b) problem, which matches the 4/3 inapproximability bound. Then, we present a generic\nscheme that we show to be a 17/11-approximation algorithm for bipartite graphs, while it becomes\na PTAS for trees as well as for bipartite graphs when b is a fixed constant. In Section 4,\u221awe deal with\nthe EC(w, b) problem and we present\n\u221a approximation algorithms of ratios min{3 \u2212 2/ 2b, Hb }, for\ngeneral graphs, and min{e, 3 \u2212 2/ b, Hb }, for bipartite graphs. More interestingly, we prove that\nthe EC(w, b) problem on trees is NP-complete. Given that the complexity question of VC(w),\nEC(w) and VC(w, b) problems for trees remains open, this is the first max-coloring problem on\ntrees proven to be NP-hard. Finally, we propose a 2-approximation algorithm for the EC(w, b)\nproblem on trees.\n\n2\n\nPreliminaries and Notation\n\nWe first establish a relation between our problems and bounded list coloring.\nBounded List Vertex (resp. Edge) Coloring problem\nInstance: A graph G = (V, E), a set of colors C = {C1 , C2 , . . . , Ck }, a list of colors \u03c6(u) \u2286 C for\neach u \u2208 V (resp. \u03c6(e) \u2286 C for each e \u2208 E), and integers bi , 1 \u2264 i \u2264 k.\nQuestion: Is there a k-coloring of G such that each vertex u (resp. edge e) is assigned a color in\nits list \u03c6(u) (resp. \u03c6(e)) and every color Ci is used at most bi times?\nClearly, the bounded list coloring problems, denoted by VC(\u03c6, bi ) and EC(\u03c6, bi ), are generalizations of the VC(b) and EC(b) problems, as well as of the VC and EC problems, respectively.\nIn the next theorem we summarize some of the known results for the VC(\u03c6, bi ) and EC(\u03c6, bi )\nproblems that we shall use in the rest of the paper.\nTheorem 1\n(i) The VC(\u03c6, bi ) problem is NP-complete even for chains, |\u03c6(u)| \u2264 2, for all u \u2208 V , and bi \u2264 5,\n1 \u2264 i \u2264 k [10].\n(ii) Both VC(\u03c6, bi ) and EC(\u03c6, bi ) problems are polynomial for trees if the number of colors k is\nfixed [15, 8].\n(iii) The VC(\u03c6, bi ) problem is polynomial for general graphs if k = 2 [15].\nUsing an exhaustive transformation of an instance of the VC(w, b) and EC(w, b) problems to\nan instance of the VC(\u03c6, b) and EC(\u03c6, b) problems (where b = bi , 1 \u2264 i \u2264 k), respectively, and\nTheorem 1(ii) ([15, 8]) we get next proposition.\nProposition 1 For a fixed number of colors k, both the VC(w, b) and EC(w, b) problems on trees\nare polynomial.\nProof: We give here the proof for the VC(w, b) problem; the proof for the\u0010 EC(w,\n\u0011 b) problem is\n|V |\nquite similar. Given a vertex weighted graph G = (V, E) we generate all k possible combinations for the weights of the k colors. Let w1 \u2265 w2 \u2265 . . . \u2265 wk be the colors' weights in such a\ncombination. For each one of these combinations we construct an instance of the VC(\u03c6, b) problem\non the graph G: is there a k-coloring of the vertices of G such that each color is used at most b\ntimes and each vertex v \u2208 V is assigned a color in \u03c6(u) = {Ci : w(u) \u2264 wi , 1 \u2264 i \u2264 k}? A \"yes\"\nanswer to this instance of the VC(\u03c6, b) problem corresponds to a feasible solution for the VC(w, b)\nP\nproblem of weight W = ki=1 wi . An optimal solution to the VC(w, b) problem corresponds to\nthe combination where W is minimized.\nThere are O(|V |k ) combinations of weights to be generated. For a fixed k, by Theorem 1(ii)\n([15, 8]), the VC(\u03c6, b) and EC(\u03c6, b) problems are polynomial and the proposition follows.\nNext proposition is based on a relation between VC(w, b) and EC(w, b) problems and the set cover\nproblem.\n3\n\n\fProposition 2 For a fixed bound b, there is an Hb -approximation algorithm for both VC(w, b)\nand EC(w, b) problems on general graphs.\nProof: In the set cover problem, we are given a universe U of elements, and a collection, S =\n{S1 , S2 , . . . , Sm }, of subsets of U , each one of positive cost ci , 1 \u2264 i \u2264 m, and we ask for a minimum\ncost subset of S that covers all elements of U . For an instance of the VC(w, b) (resp. EC(w, b))\nproblem on a graph G = (V, E) we consider the set of vertices\n\u0010 V\u0011(resp. edges\n\u0010 \u0011E) corresponding\nto the universe set U . For each j, 1 \u2264 j \u2264 b, we generate all |Vj | (resp. |E|\n) possible subsets\nj\nof cardinality j of vertices (resp. edges) of G. From all these subsets we get rid those containing\nadjacent vertices (resp. edges) and we consider the rest corresponding to the set S. For each such\nsubset Si \u2208 S we set ci = max{w(u)|u \u2208 Si } (resp. ci = max{w(e)|e \u2208 Si }).\nThe cardinality of S is O(|V |b ), since b is O(|V |), and as an Hb -approximation algorithm is\nknown for the set cover problem [6], the proposition follows.\n\nOur notation. Given a set S and a positive integer weight w(s) for every element s \u2208 S, we\ndenote by hSi = hs1 , s2 , . . . , s|S| i an ordering of S such that w(s1 ) \u2265 w(s2 ) \u2265 . . . \u2265 w(s|S| ). For\nsuch an ordering of S and a positive integer b, let kS = \u2308 |S|\nb \u2309. We define the ordered b-partition\nof S, denoted by PS = {S1 , S2 , . . . , Sk|S| }, to be the partition of S into kS subsets, such that\nSi = {sj , sj+1 , . . . , smin{j+b\u22121,|S|} }, i = 1, 2, . . . , k, j = (i \u2212 1)b + 1. In other words, S1 contains\nthe b heaviest elements of S, S2 contains the next b heaviest elements of S and so on; clearly, Sk|S|\ncontains the |S| mod b lightest elements of S.\nBy OP T = w1\u2217 + w2\u2217 + . . . + wk\u2217\u2217 we denote the weight of an optimal solution to the VC(w, b)\nor EC(w, b) problem, where wi\u2217 , 1 \u2264 i \u2264 k \u2217 , is the weight of the i-th color class. By \u2206 we denote\nthe maximum degree of a graph.\n\n3\n\nBounded Max-Vertex-Coloring\n\nIn this section we first present a simple 2-approximation algorithm for the VC(w, b) problem on\nbipartite graphs. The unweighted variant of this algorithm gives a 34 approximation ratio for the\nVC(b) problem on bipartite graphs, which closes the approximability question for this case. Then,\n17\n-approximation algorithm for bipartite graphs, a\nwe give a generic scheme which becomes a 11\nPTAS for bipartite graphs and fixed b, as well as a PTAS for trees. Recall also that by Proposition\n2 there is an Hb approximation ratio for general graphs, if b is fixed.\n\n3.1\n\nA simple split algorithm\n\nLet G = (U \u222a V, E), |U \u222a V | = n, be a vertex weighted bipartite graph. Our first algorithm\ncolors the vertices of each class of G separately, by finding the ordered b-partitions of classes\n|\nU and V . For the minimum number of colors k \u2217 it holds that k \u2217 \u2265 \u2308 |U|+|V\n\u2309 and, therefore,\nb\n|V |\n|U|+|V |\n\u2217\nk = \u2308 |U|\n\u2309\n+\n\u2308\n\u2309\n\u2264\n\u2308\n\u2309\n+\n1\n\u2264\nk\n+\n1.\nb\nb\nb\nAlgorithm Split\n1. Let PU = {U1 , U2 , . . . , UkU } be the ordered b-partition of U ;\n2. Let PV = {V1 , V2 , . . . , VkV } be the ordered b-partition of V ;\n3. Return the coloring C = PU \u222a PV ;\nTheorem 2 Algorithm Split returns a solution of weight W \u2264 2 * w1\u2217 + w2\u2217 + . . . + wk\u2217\u2217 \u2264 2 * OP T\nfor the VC(w, b) problem in bipartite graphs.\nProof: Let hCi = hC1 , C2 , . . . , Ck i be the colors constructed by Algorithm Split, that is w1 \u2265\nw2 \u2265 . . . \u2265 wk . Assume, w.l.o.g., that Ux , 1 \u2264 x \u2264 kU , is the i \u2212 th color in hCi. Let also u be the\nheaviest vertex of Ux , that is w(u) = wi .\nThe ordered b-partition of U and V implies that colors U1 , U2 , . . . , Ux\u22121 and colors V1 , V2 , . . . , Vy ,\ny = i \u2212 x, appear before color Ux in hCi. Then, all (x \u2212 1) * b vertices of colors U1 , U2 , . . . , Ux\u22121\n4\n\n\fare of weight at least w(v). Also, all (y \u2212 1) * b vertices of colors V1 , V2 , . . . , Vy\u22121 , are of weight at\nleast the weight of the heaviest vertex of color Vy which is at least w(v). Therefore, there are in\nG at least (x \u2212 1) * b + [(y \u2212 1) * b + 1] + 1 = (x + y \u2212 2) * b + 2 = (i \u2212 2) * b + 2 vertices of weight\nat least w(v) = wi . In an optimal solution, these vertices belong into at least \u2308 (i\u22122)*b+2\n\u2309 = (i \u2212 1)\nb\n\u2217\ncolors, each one of weight at least wi . Hence, wi\u22121\n\u2265 wi , 2 \u2264 i \u2264 k. Clearly, w1 = w1\u2217 , since both\nare equal to the weight of the heaviest vertex of the graph, and as k \u2264 k \u2217 + 1, we obtain\nPk \u2217\nPk\u22121\nPk\nPk\nW = i=1 wi = w1\u2217 + i=2 wi \u2264 w1\u2217 + i=1 wi\u2217 \u2264 w1\u2217 + i=1 wi\u2217\n= 2 * w1\u2217 + w2\u2217 + . . . + wk\u2217\u2217 \u2264 2 * OP T .\n\nThe complexity of Algorithm Split is dominated by the sorting needed to obtain the ordered\nb-partitions of U and V in Lines 1 and 2, that is O(n * log n).\nAlgorithm Split applies also to the VC(b) problem on bipartite graphs. Moreover, the absence\nof weights in the VC(b) problem allows a tight analysis with respect to the 43 inapproximabilty\nbound.\nTheorem 3 There is a 34 -approximation algorithm for the VC(b) problem on bipartite graphs.\n\u2217\nProof: Assume, first, that |U | + |V | \u2265 2b + 1. Then, k \u2217 \u2265 \u2308 2b+1\nb \u2309 = 3 and, since k \u2264 k + 1, we\nk\n4\nget k\u2217 \u2264 3 .\nAssume, next, that b < |U | + |V | \u2264 2b. In this case the optimal solution consists of two or three\ncolors and it is polynomial to decide between them. In fact, it is polynomial to decide if such a\nbipartite graph can be colored with two colors even for the generalized VC(\u03c6, b) problem (see also\nTheorem 1(iii) ([15])).\nAssume, finally, that |U | + |V | \u2264 b. Then, an optimal solution consists of either two colors (if\nE 6= \u2205) or one color (if E = \u2205).\n\n3.2\n\nA generic scheme\n\nTo obtain our scheme we split a bipartite graph G = (U \u222a V, E), |U \u222a V | = n, into two subgraphs\nG1,j and Gj+1,n induced by the j heaviest and the n \u2212 j lightest vertices of G, respectively (by\nconvention, we consider G1,0 as an empty subgraph). Our scheme depends on a parameter p such\n\u2217\nthat all the vertices of G of weights w1\u2217 , w2\u2217 , . . . , wp\u22121\nare in a subgraph G1,j . This is always possible\nfor some j \u2264 b(p \u2212 1), since each color of an optimal solution for G contains at most b vertices.\nIn fact, for every j, 1 \u2264 j \u2264 b(p \u2212 1), we obtain a solution for the whole graph by concatenating\nan optimal solution of at most p \u2212 1 colors for G1,j , if there is one, and the solution obtained by\nAlgorithm Split for Gj+1,n .\nAlgorithm Scheme(p)\n1. Let hU \u222a V i = hu1 , u2 , . . . un i;\n2. For j = 0, 1, . . . , b * (p \u2212 1) do\n3.\nSplit the graph into two vertex induced subgraphs:\n- G1,j induced by vertices u1 , u2 , . . . , uj\n- Gj+1,n induced by vertices uj+1 , uj+2 , . . . , un\n4.\nIf there is a solution for G1,j with at most p \u2212 1 colors then\n5.\nFind an optimal solution for G1,j with at most p \u2212 1 colors;\n6.\nRun Algorithm Split for Gj+1,n ;\n7.\nConcatenate the two solutions found in Lines 5 and 6;\n8. Return the best solution found;\nLemma 1 Algorithm Scheme(p) achieves a (1 + H1p ) approximation ratio for the VC(w, b) problem.\n5\n\n\fProof: Consider the iteration j, j \u2264 b * (p \u2212 1), of the algorithm where the weight of the heaviest\nvertex in Gj+1,n equals to the weight of the i-th color of an optimal solution, i.e. w(uj+1 ) = wi\u2217 ,\n1 \u2264 i \u2264 p.\nThe vertices of G1,j are a subset of those appeared in the i \u2212 1 heaviest colors of the optimal\n\u2217\nsolution. Thus, an optimal solution for G1,j is of weight OP T1,j \u2264 w1\u2217 + w2\u2217 + . . . + wi\u22121\n.\n\u2217\nThe vertices of Gj+1,n are a superset of those appeared in the k \u2212 (i \u2212 1) lightest colors of\nthe optimal solution. The extra vertices of Gj+1,n are of weight at most wi\u2217 and appear in an\noptimal solution into at most i \u2212 1 colors. Thus, an optimal solution for Gj+1,n is of weight\n\u2217\n\u2217\nOP Tj+1,n \u2264 wi\u2217 + wi+1\n+ . . . + wk\u2217\u2217 + (i \u2212 1) * wi\u2217 = i * wi\u2217 + wi+1\n+ . . . + wk\u2217\u2217 . By Theorem 2,\n\u2217\nAlgorithm Split returns a solution for Gj+1,n of weight Wj+1,n \u2264 (i + 1) * wi\u2217 + wi+1\n+ . . . + wk\u2217\u2217 .\nTherefore, the solution found in this iteration j for the whole graph G is of weight Wi =\n\u2217\n\u2217\nOP T1,j + Wj+1,n \u2264 w1\u2217 + w2\u2217 + . . . + wi\u22121\n+ (i + 1) * wi\u2217 + wi+1\n+ . . . + wk\u2217\u2217 .\nIn all the iterations of the algorithm we obtain p such inequalities forPW . By multiplying the ip\nth, 1 \u2264 i \u2264 p, inequality by i*(H1p +1) and adding up all of them, we have ( i=1 i*(H1p +1) )*W \u2264 OP T ,\nthat is\n\nW\nOP T\n\n\u2264\n\nHp +1\nHp\n\n=1+\n\n1\nHp .\n\nThe complexity of the Algorithm Scheme(p) is O(bp(f (p) + n log n)), where O(f (p)) is the\ncomplexity of checking for the existence of solutions with at most p \u2212 1 colors for G1,j and finding\nan optimal one among them, while O(n log n) is the complexity of Algorithm Split. Algorithm\nScheme(1) coincides with Algorithm Split. Algorithm Scheme(2) has simply to check if the j \u2264 b\nvertices of G1,j are independent from each other and, therefore, it derives a 53 approximate solution\nin polynomial time. Algorithm Scheme(3) has to check and find, a two color solution for G1,j , if\nany. This can be done in polynomial time by Theorem 1(iii) ([15]). Thus, Algorithm Scheme(3)\nis a polynomial time 17\n11 -approximation algorithm for the VC(w, b) problem on bipartite graphs.\nHowever, when p \u2265 4 and b is a part of the instance, finding an optimal solution in G1,j is an\nNP-hard problem (even for the VC(b) problem [3]). Hence, we consider that b is a fixed constant.\nIn this case, we run an exhaustive algorithm for finding, if any, an optimal solution in G1,j of at\nmost p\u2212 1 colors. The complexity of such an exhaustive algorithm is O((p\u2212 1)b*(p\u22121) ) and thus, the\ncomplexity of Algorithm Scheme(p), p \u2265 4, becomes O(bpbp +n2 log n), since bp is O(n). Choosing\n1\n\u01eb = H1p , we get p = O(2 \u01eb ). Consequently, for fixed b, we have a PTAS for the VC(w, b) problem\n1\n\n1\n\non bipartite graphs, that is an approximation ratio of 1 + H1p = 1 + \u01eb within O(b(2 \u01eb )b2 \u01eb + n2 log n)\ntime.\nFurthermore, in the particular case of trees, checking the existence of solutions with at most\np \u2212 1 colors for G1,j , and finding an optimal one among them, can be done, by Proposition 1,\n1\n\n1\n\nin polynomial time for fixed p. The complexity of our scheme in this case becomes O(b2 \u01eb (n2 \u01eb +\nn2 log n)). Therefore, the following theorem holds.\nTheorem 4 For the VC(w, b) problem, Algorithm Scheme(p) is a\n(i) polynomial time 17\n11 -approximation algorithm for bipartite graphs (for p = 3),\n(ii) PTAS for bipartite graphs if b is fixed,\n(iii) PTAS for trees.\n\n4\n\nBounded Max-Edge-Coloring\n\nIn this section we deal with the complexity and approximability of the EC(w, b) problem. We\npresent, first, approximation results for general and bipartite graphs. Then, we prove that the\nproblem is NP-complete for trees and we give a 2-approximation algorithm for this case.\n\n4.1\n\nGeneral and bipartite graphs\n\nWe first adapt the greedy 2-approximation algorithm presented in [17] for the EC(w) problem to\nthe EC(w, b) problem.\n\n6\n\n\fAlgorithm Greedy\n1. Let hEi = he1 , e2 , . . . , e|E| i;\n2. For j = 1, 2, . . . , |E| do\n3.\nInsert edge ej in the first color of cardinality less than b\nwhich does not contain other edges adjacent to ej ;\nThe analysis of Algorithm Greedy is based on tight bounds on the number of colors in a\nsolution to the EC(w, b) problem.\nProposition 3 Algorithm Greedy achieves approximation ratios of (3 \u2212 \u221a22b ), on general graphs,\nand (3 \u2212 \u221a2b ), on bipartite graphs, for the EC(w, b) problem.\nProof: We call a solution hCi = hC1 , C2 , . . . , Ck i to the EC(w, b) problem nice if each color Ci ,\n1 \u2264 i \u2264 k, is of cardinality |Ci | = b or Ci is maximal in the subgraph induced by the edges\nSi\u22121\nE \\ j=1 Cj . We first bound the number of colors in such a solution.\nClaim. For the number of(colors k in any nice solution to the EC(w, b) problem it holds that:\n\u22062\n\u2308 |E|\n|E|\nb \u2309 \u2212 \u2308 2b \u2309 + (2\u2206 \u2212 1), for general graphs\nmax{\u2206, \u2308\n\u2309} \u2264 k \u2264\n\u22062\nb\n\u2308 |E|\nb \u2309 \u2212 \u2308 b \u2309 + (2\u2206 \u2212 1), for bipartite graphs\n\nThe lower bounds follow trivially. For the upper bounds, let hCi = hC1 , C2 , . . . , Ck i be a nice\nsolution, e = (u, v) be an edge in the last color Ck , and Eu and Ev be the sets of edges adjacent\nto vertices u and v, respectively. By the niceness of the solution C it follows that edge e does not\nappear in any color Ci , 1 \u2264 i \u2264 k \u2212 1, because |Ci | = b or Ci contains at least one edge in Eu or\nEv . Let W, X, Y \u2286 {C1 , C2 , . . . , Ck\u22121 } such that W = {Ci : |Ci | = b}, X = {Ci : |Ci | < b and Ci\ncontains an edge e \u2208 Eu } and Y = {Ci : |Ci | < b and Ci contains an edge e \u2208 Ev }. Let E1 be the\nset of edges in the colors in W and E2 = E \\ E1 be the set of edges in the colors in X \u222a Y \u222a {Ck }.\nThen, k = |Eb1 | + x + y + 1, where x = |X| and y = |Y |.\nAssume, w.l.o.g., that X1 Y1 X2 Y2 . . . Xl Yl is the order of colors in the nice solution hCi, where\nXi \u2286 X, Yi \u2286 Y , 1 \u2264 i \u2264 l, and X1 is possibly empty. Let xi = |Xi | and yi = |Yi |, 1 \u2264 i \u2264 l.\nS\nP\nFor general graphs, consider a color C \u2208 Xi and let Si = lj=i Yj and si = lj=i yj . The edge\n(u, z) \u2208 C \u2229 Eu prevents at most one edge (v, z) \u2208 Si \u2229 Ev from being into C. Moreover, each\nother edge (p, q) \u2208 C prevents at most two edges (v, p), (v, q) \u2208 Si \u2229 Ev from being into C. As the\ncolors in Si contain exactly si edges from Ev and all of them are prevented from being into color\nC, it follows that |C| \u2265 \u2308 si2\u22121 \u2309 + 1. Therefore, there exist at least xi * \u2308 si2\u22121 \u2309 + xi edges in Xi . In\na similar way, by considering a color C \u2208 Yi there exist at least yi * \u2308 ti \u22121\n2 \u2309 + yi edges in Yi , where\nPl\nti = j=i+1 xj . Summing up these bounds, and taking into account that yl \u2212 1 \u2265 0 (since Yl is\nnot empty), it follows that\n|E2 |\n\nl\nX\nti \u2212 1\nsi \u2212 1\n(yi * \u2308\n\u2309 + xi ) +\n\u2309 + yi )\n2\n2\ni=1\ni=1\nx(y \u2212 1) \u2212 (y1 + y2 + . . . + yl\u22121 )\n=\n+x+y+1\n2\nx(y \u2212 1) \u2212 (y1 + y2 + . . . + yl\u22121 + yl \u2212 1)\n\u2265\n+x+y+1\n2\n(x \u2212 1)(y \u2212 1)\n(x + 1)(y + 1)\n(x + 1)(y + 1)\n=\n+x+y+1\u2265\n+1\u2265\u2308\n\u2309.\n2\n2\n2\n\n\u2265\n\nl\nX\n\n(xi * \u2308\n\n(x+1)(y+1)\u2309\n2|\nTherefore, k = |E\\E\n+ x + y + 1 \u2264 \u2308 |E|\n\u2309 + x + y + 1 If \u2206 \u2264 2b then\nb\nb \u2309 \u2212 \u2308\n2b\n\u22062\nthis quantity is maximized when x = y = \u2206 \u2212 1 and hence k \u2264 \u2308 |E|\nb \u2309 \u2212 \u2308 2b \u2309 + (2\u2206 \u2212 1).\nIf \u2206 > 2b then the above quantity is maximized when x = \u2206 \u2212 1 and y = 0 and hence\n|E|\n\u2206\n\u22062\nk \u2264 \u2308 |E|\nb \u2309 \u2212 \u2308 2b \u2309 + \u2206 \u2264 \u2308 b \u2309 \u2212 \u2308 2b \u2309 + (2\u2206 \u2212 1).\n\n7\n\n\fFor bipartite graphs, the proof is similar. The structure of a bipartite graph allows a tighter bound\non the number of edges in the colors in Xi and Yi . Consider, again, a color C \u2208 Xi . For the edge\n(u, z) \u2208 C \u2229 Eu , there is no edge (v, z) \u2208 Si \u2229 Ev , while each other edge (p, q) \u2208 C prevents at most\none edge (v, p) or (v, q) in Si \u2229 Ev from being into C. Thus, |C| \u2265 si + 1 and, hence, there exist\nat least xi (si + 1) edges in Xi . Similarly there exist at least yi (ti + 1) edges in Yi . The rest of the\nproof is along the same lines, but using these bounds.\nWe return, now, to the solution, hCi = hC1 , C2 , . . . , Ck i, derived by Algorithm Greedy. Consider\nthe color Ci and let ej be the first edge inserted in Ci , i.e. wi = w(ej ). Let Ei = {e1 , e2 , . . . , ej },\nGi be the subgraph of G induced by the edges in Ei , and \u2206i be the maximum degree of Gi .\nThe solution hCi is a nice one, since it is constructed in a First-Fit manner. Moreover, an\noptimal solution can be also easily transformed into a nice one of the same total weight. For\n\u22062\ngeneral graphs, by the bounds above, it follows that (i) i \u2264 \u2308 |Ebi | \u2309 \u2212 \u2308 2bi \u2309 + (2\u2206i \u2212 1), and (ii)\nin an optimal solution the edges of Gi appear in at least i\u2217 \u2265 max{\u2206i , \u2308 |Ebi | \u2309} colors, each one\nof weight at least wi . Therefore,\n\ni\ni\u2217\n\n\u2264\n\n\u2308\n\n\u22062\n|Ei |\ni\nb \u2309\u2212\u2308 2b\n\n\u2309+(2\u2206i \u22121)\n\nmax{\u2206i ,\u2308\n\n|Ei |\nb \u2309}\n\n. By distinguish between \u2206i \u2265 \u2308 |Ebi | \u2309\n\n\u22062 +2b\n\ni\nand \u2206i < \u2308 |Ebi | \u2309 it follows that in either case ii\u2217 \u2264 3 \u2212 2b\u2206\n. This bound is maximized when\ni\n\u221a\n2\ni\n\u2217\n\u2217\n\u2206i = 2b, that is i\u2217 \u2264 3 \u2212 \u221a2b . Thus, wi \u2264 wi\u2217 \u2264 w\u2308i/(3\u2212 \u221a2 )\u2309 . Summing up these inequalities\n2b\n\nfor all i's, 1 \u2264 i \u2264 k, we obtain the (3 \u2212 \u221a22b ) ratio for general graphs.\nA similar analysis yields the (3 \u2212 \u221a2b ) ratio for bipartite graphs. We present here an example\nfor which the algorithm performs a ratio of exactly 3 \u2212 \u221a2b for bipartite graphs. There is, also, an\nanalogous example for general graphs. Consider the bipartite graph shown in Figure 1(a), where\nC >> \u01eb, and b = 9. The weight of the optimal solution shown in Figure 1(b) is 3C + 3\u01eb. The\nweight of the solution obtained by Algorithm Greedy, shown in Figure 1(c), is 7C \u2212 \u01eb. Thus, the\n7C\u2212\u01eb\n\u2243 37 = 3 \u2212 \u221a29 .\nratio for this instance is 3C+3\u01eb\nC \u2212\u01eb\n\nC +\u01eb\n\nC\n\nC \u2212\u01eb\n\nC\n\nC\n\nC\nC\nC \u2212\u01eb\n\nC\n\n(a)\nC +\u01eb\n\nC +\u01eb\n\nC +\u01eb\n\nC +\u01eb\n\nC +\u01eb\n\n(b)\n\nC\n\nC\n\nC \u2212\u01eb\n\nC \u2212\u01eb\n\nC \u2212\u01eb\n\n(c)\n\nFigure 1: (a) An instance of the EC(w, b) problem on bipartite graphs, C >> \u01eb, b = 9. (b) An\noptimal solution. (c) The solution obtained by Algorithm Greedy.\n\nAnother approximation result for the EC(w, b) problem is obtained by exploiting a general\nframework, presented in [11], which allows to convert a \u03c1-approximation algorithm for a coloring\nproblem into an e*\u03c1-approximation one for the corresponding max-coloring problem, for hereditary\nclasses of graphs. In fact, this framework has been presented for such a conversion from the VC\nto the VC(w) problem, but it can be easily seen that this applies also for conversions from the\nEC, VC(b) and EC(b) problems to the EC(w), VC(w, b) and EC(w, b) problems, respectively.\n8\n\n\fb\n3\n4\n5\n6\n...\n50\n51\n...\n\nGeneral graphs\n1.833\nHb\n2.083\nHb\n2.283\nHb\n\u221a\n2.423\n3 \u2212 2/\u221a2b\n...\n3 \u2212 2/\u221a2b\n2.800\n3 \u2212 2/\u221a2b\n2.802\n3 \u2212 2/\u221a2b\n...\n3 \u2212 2/ 2b\n\nBipartite graphs\n1.833\nHb\n\u221a\n2.000\n3 \u2212 2/\u221ab\n2.106\n3 \u2212 2/\u221ab\n2.184\n3 \u2212 2/\u221ab\n...\n3 \u2212 2/\u221ab\n2.717\n3 \u2212 2/ b\n2.718\ne\n...\ne\n\nTable 2: Approximation ratios for the EC(w, b) problem.\nHowever, this conversion leads to ratios greater than those shown in Table 1 for the EC(w) and\nVC(w, b) problems. For the EC(w, b) problem on general graphs this approach gives a ratio of at\nleast 34 * e > 3, as the EC, and hence the EC(b), problem cannot be approximated within a ratio\nless than 43 . On the other hand, the EC(w, b) problem on bipartite graphs can be approximated,\nthis way, with a ratio of e, as the EC(b) problem is polynomial in this case (see Table 1).\nCombining the discussion above with Propositions 3 and 2, it follows that\n\u221a\nTheorem 5 The EC(w, b) problem\n\u221a can be approximated with a ratio of min{3 \u2212 2/ 2b, Hb }, for\ngeneral graphs, and min{e, 3 \u2212 2/ b, Hb }, for bipartite graphs.\nNote that, the Hb ratio outperforms the other only for b \u2264 5, for general graphs, and b = 3, for\nbipartite graphs, and, hence, b can be considered as fixed. These ratios are shown in Table 2, for\nseveral values of b.\n\n4.2\n\nNP-completeness for trees\n\nWe prove first that the bounded list edge-coloring, EC(\u03c6, b), problem is NP-complete even if the\ngraph G = (V, E) is a set of chains, |\u03c6(e)| = 2, for all e \u2208 E, and b = 5. We denote this problem\nas EC(chains, |\u03c6(e)| = 2, b = 5).\nProposition 4 The EC(chains, |\u03c6(e)| = 2, b = 5) problem is NP-complete.\nProof: By Theorem 1(i) ([10]), the VC(chains, |\u03c6(v)| \u2264 2, bi \u2264 5) problem is NP-complete. Given\nthat the line-graph of a chain is also a chain, it follows that the EC(chains, |\u03c6(e)| \u2264 2, bi \u2264 5) problem is also NP-complete. The later problem can be easily reduced to the EC(chains, |\u03c6(e)| \u2264 2, b =\n5) problem, where bi = b = 5 for all colors: for every color Ci with bi < 5, add 5 \u2212 bi independent\nedges with just Ci in their lists. This last problem reduces to the EC(chains, |\u03c6(e)| = 2, b = 5)\nproblem, where |\u03c6(e)| = 2 for all edges. This can be done by transforming an instance of EC(chains,\n|\u03c6(v)| \u2264 2, b = 5) as following: (i) add two new colors Ck+1 and Ck+2 , both with cardinality bound\nb = 5, (ii) add color Ck+1 to the list of every edge e with |\u03c6(e)| = 1, (iii) add ten independent\nedges and put in their lists both colors Ck+1 and Ck+2 .\nTheorem 6 The EC(w, b) problem on trees is NP-complete.\nProof: Our reduction is from EC(chains, |\u03c6(e)| = 2, b = 5) problem. We construct an instance\nof the EC(w, b) problem on a forest G\u2032 = (V \u2032 , E \u2032 ) as follows.\nWe replace every edge e = (u, v) \u2208 E with a chain of three edges: e1 = (u, u\u2032 ), e2 = (u\u2032 , v \u2032 )\nand e3 = (v \u2032 , v), where w(e1 ) = w(e2 ) = w(e3 ) = 1. Moreover, we create k \u2212 |\u03c6(e)| = k \u2212 2 stars\nof k \u2212 1 edges each. We add edges (u\u2032 , st ), 1 \u2264 t \u2264 k \u2212 2, between u\u2032 and the central vertex st\nof each of these k \u2212 2 stars; thus every star has now exactly k edges. Let \u03c6(e) = {Ci , Cj }. The\nk \u2212 2 edges (u\u2032 , st ) take different weights in {1, 2, . . . , k} \\ {i, j}. Let q be the weight taken by an\n9\n\n\fedge (u\u2032 , st ). The remaining k \u2212 1 edges of the star t take different weights in {1, 2, . . . , k} \\ {q}.\nIn the same way, we add k \u2212 2 stars connected to v \u2032 . In Figure 2, is shown the u\u2032 's part of this\nedge-gadget for e = (u, v). For every edge e of G, we add 2(k \u2212 2) stars and 2(k \u2212 2)k + 2 edges.\n...\n2\n\n...\nk\n\n3\n\n...\ni\u22122\n\n1\n\ni\n\nk\n\n...\n\n...\n...\n\n...\n\n...\n1\n\ni\u22121\n\ni+1\n\n1\n\nu\u2032\n\n1\n\n...\n\nk\u22121\n\n2\n\n...\nj\u22121\n\nj+1\n\nk\n\n...\n\n...\n\n...\nu\n\nv\u2032\n\n1\n\n1\n\nv\n\nFigure 2: The gadget for an edge e = (u, v) with \u03c6(e) = {Ci , Cj }.\nTo complete our construction we define fi to be the frequency of color Ci in the lists of all\nedges and F = max{fi |1 \u2264 i \u2264 k}. For every color Ci we add F \u2212 fi disconnected copies of\nthe color-gadget shown in Figure 3. Such a gadget consists of an edge e = (x, y) and k \u2212 1 stars\nwith k \u2212 1 edges each. There are also edges between one of the endpoints of e, say y, and the\ncentral vertices of all stars; thus every star has now exactly k edges. The edge e takes weight i and\nthe edges in the stars of such a color-gadget take weights similarly with those in the stars of an\nedge-gadget. For a color Ci we add (F \u2212 fi )(k \u2212 1) stars and (F \u2212 fi )(k \u2212 1)k + (F \u2212 fi ) edges.\n...\n2\n\n3\n\n...\nk\n\n...\ni\u22122 i\n\n1\n\n...\nk\n\n1\n\n...\ni\n\n...\n\ni+2\n\n...\n\nk\n\n1\n\n2\n\nk\u22121\n\n...\ni\u22121\n\n1\n\nx\n\ni\n\ni+1\n\nk\n\ny\n\nFigure 3: A gadget for the color Ci .\nPk\nThe number of stars in the forest G\u2032 we have constructed is 2|E|(k \u2212 2) + i=1 (F \u2212 fi )(k \u2212 1) =\nPk\nk(k \u2212 1)F \u2212 2|E|, since i=1 fi = 2|E|. By setting b\u2032 = k(k \u2212 1)F \u2212 2|E| + 5 + F , we prove that:\n\"There is a k-coloring for EC(\u03c6, b) (chains, |\u03c6(e)| = 2, b = 5), if and only if, G\u2032 has a bounded\nPk\nmax-edge-coloring of total weight i=1 i such that every color is used at most b\u2032 times\".\nConsider, first, a solution C to the EC(\u03c6, b) problem. We construct a solution C \u2032 for the\nEC(w, b) problem as following. Let e = (u, v) \u2208 E be an edge with \u03c6(e) = {Ci , Cj }, which,\nw.l.o.g., appears in the color Ci of C. Put the edges e1 and e3 of the edge-gadget for e in color\nCi\u2032 , while the edge e2 in color Cj\u2032 . After doing this for all edges in E, each color Ci\u2032 contains at\nmost 2 * 5 + 1 * (fi \u2212 5) = fi + 5 edges. Next, put the edges with weight i, 1 \u2264 i \u2264 k, from\nthe k(k \u2212 1)F \u2212 2|E| stars into Ci\u2032 . Each color Ci\u2032 in C \u2032 constructed so far contains at most\nk(k \u2212 1)F \u2212 2|E| + fi + 5 = b\u2032 \u2212 (F \u2212 fi ) edges and, by the construction of G\u2032 , C \u2032 is a proper\ncoloring. In the F \u2212 fi color-gadgets for Ci there are F \u2212 fi remaining (x, y) edges of weight i,\nwhich can still be inserted into color Ci\u2032 . Thus, we get a solution for the EC(w, b) problem of k\nP\ncolors, each one of at most b\u2032 edges, and total weight ki=1 i.\nConversely, consider a solution C \u2032 to the EC(w, b) problem. C \u2032 consists of exactly k colors of\nweights 1, 2, . . . , k, since each star in G\u2032 has k edges and each edge has a different weight in the\nrange {1, 2, . . . , k}. Thus, all edges of the same weight, say i, should belong in the same color Ci\u2032\nof C \u2032 . Therefore, Ci\u2032 contains one edge from each one of the k(k \u2212 1)F \u2212 2|E| stars as well as the\nF \u2212 fi remaining (x, y) edges of the color-gadgets having weight i. Consider, now, the edges of G\u2032\ncorresponding to the edges e1 , e2 and e3 of the edge-gadget for an edge e with \u03c6(e) = {Ci , Cj }.\n10\n\n\fBy the construction of G\u2032 and the choice of edge weights, the edges e1 , e2 and e3 should appear\ninto colors Ci\u2032 and Cj\u2032 . Thus, edges e1 and e3 should appear, w.l.o.g., into color Ci\u2032 , while e2\ninto color Cj\u2032 . Therefore, the edge e \u2208 E can be colored by color Ci \u2208 \u03c6(e). Finally, a color Ci\u2032\ncontains at most 5 edges of type e1 (or e3 ), corresponding to at most 5 edges of E; otherwise\n|Ci\u2032 | \u2265 k(k \u2212 1)F \u2212 2|E| + (F \u2212 fi ) + (2 * 6 + 1 * (fi \u2212 6)) > b\u2032 , a contradiction.\nTo complete our proof for the EC(w, b) problem on trees, let p be the number of trees in G\u2032 .\nWe add a set of p \u2212 1 edges of weight \u01eb < 1 to transform the forest G\u2032 into a single tree T . This\n\u2032\ncan be easily done since every tree of G\u2032 has at least two vertices. By keeping the same\nPk bound b ,\n\u2032\nit is easy to see that there is a solution for the EC(w, b) problem on G of weight i=1 i, if and\nP\nonly if, there is a solution for the EC(w, b) problem on T whose weight is equal to ki=1 i+\u2308 p\u22121\nb\u2032 \u2309\u01eb.\n\n4.3\n\nA 2-approximation algorithm for trees\n\nIn [18] a 2-approximation algorithm for the EC(w) problem on trees has been presented, which is\nalso exploited to derive a ratio of 3/2 for that problem. This algorithm yields to a solution of \u2206\ncolors, M = {M1 , M2 , . . . , M\u2206 }. Starting from this solution we obtain a solution to the EC(w, b)\nproblem by finding the ordered b-partition of each color in M. For the sake of completeness we\ngive below the whole algorithm.\nAlgorithm Convert\n1. Let Tr be the tree rooted in an arbitrary vertex r;\n2. For each vertex v in pre-order traversal of Tr do\n3.\nLet hEv i = he1 , e2 , . . . , ed(v) i be the edges adjacent to v,\nand (v, p) be the edge from v, v 6\u2261 r, to its parent;\n4.\nUsing ordering hEv i, insert each edge in Ev , but (v, p),\ninto the first matching which does not contain an edge in Ev ;\n5. Let M = {M1 , M2 , . . . , M\u2206 } be the colors constructed;\n6. For i = 1 to \u2206 do\n7.\nLet PMi = {M1i , M2i , . . . , Mki i } be the ordered b-partition of hMi i;\nS\u2206\n8. Return a solution hCi = hC1 , C2 , . . . , Ck i, C = i=1 PMi ;\n\nTheorem 7 Algorithm Convert is a 2-approximation one for the EC(w, b) problem on trees.\n\nProof: Consider the color Cj in the solution hCi and let e be the heaviest edge in Cj , i.e.,\nw(e) = wj . Let X \u2286 Cj = {C1 , C2 , . . . , Cj\u22121 } such that each color Cp \u2208 X has (i) |Cp | = b,\nand (ii) all edges of weight at least w(e). Let also Y = Cj \\ X, |X| = x and |Y | = y. Clearly,\nx + y = j \u2212 1. Let j \u2217 be the number of colors in an optimal solution of weight at least w(e), that\nis wj = wj\u2217\u2217 .\nThere are at least x * b + y + 1 edges of weight at least w(e). These edges in an optimal solution\n\u2309 \u2265 x + 1 colors, that is, j \u2217 \u2265 x + 1.\nappear in at least \u2308 x*b+y+1\nb\nWe show, next, that all colors in Y \u222a {Cj } come from y + 1 different colors in M. Assume\nthat two of these colors, Cq and Cr , come from the ordered b-partition of the same color Mt \u2208 M.\nAssume, w.l.o.g., that wq \u2265 wr , and let f be the heaviest edge in Cr . Note that Cr may coincide\nwith Cj , while Cq cannot. As Cq \u2208 Y , it follows that |Cq | = b and there is an edge f \u2032 \u2208 Cq with\nw(f \u2032 ) < w(e) \u2264 w(f ), a contradiction to the definition of the ordered b-partition of Mt . Therefore,\nCj comes from a color Mi \u2208 M, i \u2265 y + 1, that is e \u2208 Mi . By the construction of the coloring M,\nthere are at least i \u2212 1 edges, adjacent to each other, of weight at least w(e) (i.e., i \u2212 2 of them\nadjacent to e and e itself). These i \u2212 1 edges appear in different colors in an optimal solution, that\nis, j \u2217 \u2265 y.\nCombining the two lower bounds for j \u2217 and taking into account that x + y = j \u2212 1 we get\n\u2217\nj \u2265 \u2308 2j \u2309. Therefore, wj = wj\u2217\u2217 \u2264 w\u2308\u2217 j \u2309 and summing up the weights wj of all colors in C we get\nP2k\u2217\nP\u2308k/2\u2309\nPk\nW = j=1 wj \u2264 2 j=1 wj\u2217 \u2264 2 j=1 wj\u2217 \u2264 2OP T , since k \u2217 \u2265 \u2308 k2 \u2309. A tight example for this\nalgorithm, is given in [18], as for large values of b the EC(w, b) coincides with the EC(w) problem.\n11\n\n\fBy a careful analysis, the complexity of both Lines 2 and 6 of the algorithm is O(n log n), where\nn is the number of vertices of the tree.\n\nReferences\n[1] N. Alon. A note on the decomposition of graphs into isomorphic matchings. Acta Mathematica\nHungarica, 42:221\u2013223, 1983.\n[2] B. S. Baker and E. G. Coffman Jr. Mutual exclusion scheduling. Theoretical Computer Science,\n162:225\u2013243, 1996.\n[3] H. L. Bodlaender and K. Jansen. Restrictions of graph partition problems. Part I. Theoretical\nComputer Science, 148:93\u2013109, 1995.\n[4] G. Bongiovanni, D. Coppersmith, and C. K. Wong. An optimum time slot assignment algorithm for an SS/TDMA system with variable number of transponders. IEEE Trans. on\nCommunications, 29:721\u2013726, 1981.\n[5] M. Boudhar and G. Finke. Scheduling on a batch machine with job compatibilities. Belgian\nJournal of Oper. Res., Statistics and Computer Science, 40:69\u201380, 2000.\n[6] V. Chv\u00e1tal. A greedy heuristic for the set-covering problem. Mathematics of Operations\nResearch, 4:233\u2013235, 1979.\n[7] D. de Werra, M. Demange, B. Escoffier, J. Monnot, and V. Th. Paschos. Weighted coloring on planar, bipartite and split graphs: Complexity and approximation. Discrete Applied\nMathematics, In Press. (also in Proc. ISAAC'04).\n[8] D. de Werra, A. Hertz, D. Kobler, and N. V. R. Mahadev. Feasible edge coloring of trees with\ncardinality constraints. Discrete Mathematics, 222:61\u201372, 2000.\n[9] M. Demange, D. de Werra, J. Monnot, and V. Th. Paschos. Time slot scheduling of compatible\njobs. Journal of Scheduling, 10:111\u2013127, 2007. (also in Proc. WG'02).\n[10] M. Dror, G. Finke, S. Gravier, and W. Kubiak. On the complexity of a restricted list-coloring\nproblem. Discrete Mathematics, 195:103\u2013109, 1999.\n[11] L. Epstein and A. Levin. On the max coloring problem. In 5th Workshop on Approximation\nand Online Algorithms (WAOA'07), volume 4927 of LNCS, pages 142\u2013155. Springer, 2008.\n[12] B. Escoffier, J. Monnot, and V. Th. Paschos. Weighted coloring: Further complexity and\napproximability results. Information Processing Letters, 97:98\u2013103, 2006. (also in Proc.\nICTCS'05).\n[13] G. Finke, V. Jost, M. Queyranne, and A. Seb\u0151. Batch processing with interval graph compatibilities between tasks. Discrete Applied Mathematics, 156:556\u2013568, 2008.\n[14] F. Gardi. Mutual exclusion scheduling with interval graphs or related classes. Part II. Discrete\nApplied Mathematics, 156:794\u2013812, 2008.\n[15] S. Gravier, D. Kobler, and W. Kubiak. Complexity of list coloring problems with a fixed total\nnumber of colors. Discrete Applied Mathematics, 117:65\u201379, 2002.\n[16] M. Jarvis and B. Zhou. Bounded vertex coloring of trees. Discrete Mathematics, 232:145\u2013151,\n2001.\n[17] A. Kesselman and K. Kogan. Nonpreemptive scheduling of optical switches. IEEE Trans. on\nCommunications, 55:1212\u20131219, 2007. (also in Proc. GLOBECOM'04).\n\n12\n\n\f[18] G. Lucarelli, I. Milis, and V. Th. Paschos. Maximum edge coloring of trees. CoRR, 0901.4002,\n2009.\n[19] S. V. Pemmaraju and R. Raman. Approximation algorithms for the max-coloring problem.\nIn 32nd International Colloquium on Automata, Languages and Programming (ICALP'05),\nvolume 3580 of LNCS, pages 1064\u20131075. Springer, 2005.\n[20] S. V. Pemmaraju, R. Raman, and K. R. Varadarajan. Buffer minimization using max-coloring.\nIn 15th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA'04), pages 562\u2013571,\n2004.\n\n13\n\n\f"}