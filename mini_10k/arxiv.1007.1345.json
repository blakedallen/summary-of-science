{"id": "http://arxiv.org/abs/1007.1345v1", "guidislink": true, "updated": "2010-07-08T10:56:15Z", "updated_parsed": [2010, 7, 8, 10, 56, 15, 3, 189, 0], "published": "2010-07-08T10:56:15Z", "published_parsed": [2010, 7, 8, 10, 56, 15, 3, 189, 0], "title": "Improved approximation bounds for Vector Bin Packing", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1007.4489%2C1007.2387%2C1007.0101%2C1007.1650%2C1007.2485%2C1007.5041%2C1007.2019%2C1007.1391%2C1007.3819%2C1007.1865%2C1007.3088%2C1007.4345%2C1007.2986%2C1007.4011%2C1007.0381%2C1007.1529%2C1007.4409%2C1007.2775%2C1007.3526%2C1007.3602%2C1007.0876%2C1007.3281%2C1007.5488%2C1007.2103%2C1007.2864%2C1007.5284%2C1007.1345%2C1007.2361%2C1007.1310%2C1007.1863%2C1007.1317%2C1007.0652%2C1007.3590%2C1007.3649%2C1007.4957%2C1007.2233%2C1007.0660%2C1007.4692%2C1007.2398%2C1007.1966%2C1007.5000%2C1007.0330%2C1007.2065%2C1007.1278%2C1007.2727%2C1007.1951%2C1007.2114%2C1007.0246%2C1007.2743%2C1007.4829%2C1007.4721%2C1007.5521%2C1007.2892%2C1007.5359%2C1007.4129%2C1007.1413%2C1007.0647%2C1007.1558%2C1007.3342%2C1007.1586%2C1007.0153%2C1007.0103%2C1007.0754%2C1007.5036%2C1007.2589%2C1007.4094%2C1007.5160%2C1007.2874%2C1007.4488%2C1007.1960%2C1007.2354%2C1007.4480%2C1007.1520%2C1007.1967%2C1007.2433%2C1007.4599%2C1007.2766%2C1007.0193%2C1007.4305%2C1007.3086%2C1007.1428%2C1007.5239%2C1007.1712%2C1007.0895%2C1007.2863%2C1007.1804%2C1007.1608%2C1007.2287%2C1007.3243%2C1007.5046%2C1007.3866%2C1007.4882%2C1007.5206%2C1007.5348%2C1007.4549%2C1007.0583%2C1007.4189%2C1007.4617%2C1007.2671%2C1007.2463%2C1007.0762&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Improved approximation bounds for Vector Bin Packing"}, "summary": "In this paper we propose an improved approximation scheme for the Vector Bin\nPacking problem (VBP), based on the combination of (near-)optimal solution of\nthe Linear Programming (LP) relaxation and a greedy (modified first-fit)\nheuristic. The Vector Bin Packing problem of higher dimension (d \\geq 2) is not\nknown to have asymptotic polynomial-time approximation schemes (unless P = NP).\n  Our algorithm improves over the previously-known guarantee of (ln d + 1 +\nepsilon) by Bansal et al. [1] for higher dimensions (d > 2). We provide a\n{\\theta}(1) approximation scheme for certain set of inputs for any dimension d.\nMore precisely, we provide a 2-OPT algorithm, a result which is irrespective of\nthe number of dimensions d.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1007.4489%2C1007.2387%2C1007.0101%2C1007.1650%2C1007.2485%2C1007.5041%2C1007.2019%2C1007.1391%2C1007.3819%2C1007.1865%2C1007.3088%2C1007.4345%2C1007.2986%2C1007.4011%2C1007.0381%2C1007.1529%2C1007.4409%2C1007.2775%2C1007.3526%2C1007.3602%2C1007.0876%2C1007.3281%2C1007.5488%2C1007.2103%2C1007.2864%2C1007.5284%2C1007.1345%2C1007.2361%2C1007.1310%2C1007.1863%2C1007.1317%2C1007.0652%2C1007.3590%2C1007.3649%2C1007.4957%2C1007.2233%2C1007.0660%2C1007.4692%2C1007.2398%2C1007.1966%2C1007.5000%2C1007.0330%2C1007.2065%2C1007.1278%2C1007.2727%2C1007.1951%2C1007.2114%2C1007.0246%2C1007.2743%2C1007.4829%2C1007.4721%2C1007.5521%2C1007.2892%2C1007.5359%2C1007.4129%2C1007.1413%2C1007.0647%2C1007.1558%2C1007.3342%2C1007.1586%2C1007.0153%2C1007.0103%2C1007.0754%2C1007.5036%2C1007.2589%2C1007.4094%2C1007.5160%2C1007.2874%2C1007.4488%2C1007.1960%2C1007.2354%2C1007.4480%2C1007.1520%2C1007.1967%2C1007.2433%2C1007.4599%2C1007.2766%2C1007.0193%2C1007.4305%2C1007.3086%2C1007.1428%2C1007.5239%2C1007.1712%2C1007.0895%2C1007.2863%2C1007.1804%2C1007.1608%2C1007.2287%2C1007.3243%2C1007.5046%2C1007.3866%2C1007.4882%2C1007.5206%2C1007.5348%2C1007.4549%2C1007.0583%2C1007.4189%2C1007.4617%2C1007.2671%2C1007.2463%2C1007.0762&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "In this paper we propose an improved approximation scheme for the Vector Bin\nPacking problem (VBP), based on the combination of (near-)optimal solution of\nthe Linear Programming (LP) relaxation and a greedy (modified first-fit)\nheuristic. The Vector Bin Packing problem of higher dimension (d \\geq 2) is not\nknown to have asymptotic polynomial-time approximation schemes (unless P = NP).\n  Our algorithm improves over the previously-known guarantee of (ln d + 1 +\nepsilon) by Bansal et al. [1] for higher dimensions (d > 2). We provide a\n{\\theta}(1) approximation scheme for certain set of inputs for any dimension d.\nMore precisely, we provide a 2-OPT algorithm, a result which is irrespective of\nthe number of dimensions d."}, "authors": ["Chetan S Rao", "Jeffrey John Geevarghese", "Karthik Rajan"], "author_detail": {"name": "Karthik Rajan"}, "author": "Karthik Rajan", "arxiv_comment": "15 pages, 3 algorithms", "links": [{"href": "http://arxiv.org/abs/1007.1345v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1007.1345v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.DM", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "math.OC", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1007.1345v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1007.1345v1", "journal_reference": null, "doi": null, "fulltext": "arXiv:1007.1345v1 [cs.DS] 8 Jul 2010\n\nImproved approximation bounds for Vector Bin\nPacking\nChetan S. Rao\nDepartment of Computer Science & Engineering\nNational Institute of Technology Calicut\nKerala 673601, India\nJeffrey John Geevarghese\nDepartment of Computer Science & Engineering\nNational Institute of Technology Calicut\nKerala 673601, India\nKarthik Rajan\nDepartment of Computer Science & Engineering\nNational Institute of Technology Calicut\nKerala 673601, India\nNovember 2, 2018\nAbstract\nIn this paper we propose an improved approximation scheme for\nthe Vector Bin Packing problem (VBP), based on the combination\nof (near-)optimal solution of the Linear Programming (LP) relaxation\nand a greedy (modified first-fit) heuristic. The Vector Bin Packing\nproblem of higher dimension (d \u2265 2) is not known to have asymptotic\npolynomial-time approximation schemes (unless P = NP).\nOur algorithm improves over the previously-known guarantee of (ln\nd + 1 + \u01eb) by Bansal et al. [1] for higher dimensions (d > 2). We\nprovide a \u03b8(1) approximation scheme for certain set of inputs for any\ndimension d. More precisely, we provide a 2-OPT algorithm, a result\nwhich is irrespective of the number of dimensions d.\n\n1\n\nIntroduction\n\nPacking items of variable sizes into a given space is a fundamental problem\nof combinatorial optimization. This problem dates back to the origin of Op1\n\n\ferations Research. The packing problem and it's multidimensional variants\nhave vital practical applications in diverse domains including the cutting,\npackaging and other industries. In this paper, we consider a type of packing\nproblem called the Vector Bin Packing (Vector Packing) problem and propose a better bound for the multidimensional version of the problem. The\nitems of variable sizes are packed into containers called bins with fixed size\nalong all dimensions.\nMultidimensionality plays an important role in capturing incomparable\ncharacteristics of the objects that are to be packed. For example, the memory requirements and bandwidth requirements in a distributed computing\nenvironment are incomparable. Multidimensionality also suffices the different costs that may be associated with each of these requirements. In this\npaper, we provide a method which is applicable to any dimension d.\n\n1.1\n\nProblem Definition\n\nWe now formulate the optimization problem that we are addressing.\nVector Bin Packing problem (VBP)\nGiven a set S of n d-dimensional vectors p1 , p2 , . . . , pnP\nfrom [0,1]d , find a\npacking (partition) of S into A1 , A2 , . . . , Am such that p\u2208Ai pk \u2264 1, \u2200i, k\n(pk denotes the projection of vector p along 'k'th dimension). The objective\nis minimize the value of m, the number of partitions.\nWhen d = 1, the problem is an instance of the classical bin packing problem\n(BP).\n\n1.2\n\nRelated work\n\nOne dimensional bin packing problem has been studied extensively. Fernandez de la Vega and Lueker [7] gave the first asymptotic polynomial-time\napproximation scheme (APTAS). They put forward a rounding technique\nthat allowed them to reduce the problem of packing large items to finding\nan optimum packing of just a constant number of items (at a cost of \u01eb times\nOPT). Their algorithm was later improved by Karmarkar and Karp [9], to\na (1+log 2 )-OPT bound.\nFor 2-dimensional vector bin packing, Woeginger [12] proved that there\nis no APTAS. For higher dimensions, Fernandez de la Vega and Lueker [7]\nproposed a simple (d + \u01eb)-OPT algorithm, which extends the idea of 1dimensional bin packing. Chekuri and Khanna [5] showed an O(log d)approximation algorithm that runs in polynomial time for fixed d. Bansal\n2\n\n\fet al. [1] improved this result, showing an (ln d + 1 + \u01eb)-approximation algorithm for any \u01eb \u2265 0. Karger et al. [8] have recently proposed a polynomial\napproximation scheme for randomized instances of the multidimensional vector bin packing using smoothing techniques. Patt-Shamir et al. [11] have\nrecently explored the vector bin packing problem with bins of varying sizes\nand propose a (ln 2d + 1 + \u01eb)-approximation algorithm for any \u01eb \u2265 0.\n\n1.3\n\nOur results and organization\n\nIn this paper, we provide an improved approximation bound for the vector\nbin packing problem of any dimension. We provide a \u03b8(1) approximation\nguarantee for certain set of inputs for any dimension d. In more specific\nsettings, we provide a 2-OPT guarantee for large inputs irrespective of the\ndimension d. This is a notable improvement over the previously known\nguarantee of (ln d + 1 + \u01eb) for higher dimensions (d > 2).\nThe rest of the paper is organized as follows. Section 2 gives the linear\nprogram (LP) formulation of the problem. In Section 3, we provide the\napproximation algorithm and prove the bounds.\n\n2\n\nProblem formulation\n\nWe formulate the problem as an integer program in 2.1. The integer constraints are relaxed and we formulate it's dual (2.2). The solution of the\nrelaxed integer program gives a thoughtful insight about the optimal number of bins.\n\n2.1\n\nInteger Linear Program (ILP) formulation\n\nThe vector bin packing problem (VBP) can be formulated as an integer\nprogram. We use two binary variables xij and yj . The binary variable xij\nindicates if vector pi is assigned to bin j and the binary variable yj indicates\nwhether bin j is in use or not. Our objective is to minimize the number of\nbins used.\nThe number of bins m can initially be set to a sufficiently large value\narrived at by any heuristic (example - de la Vega and Leuker [7] give a\nO(d)-OPT bound on the number of bins). Then, we formulate the integer\nprogram (ILP) as follows -\n\n3\n\n\fminimize :\n\nX\n\n(1)\n\nyj\n\nj\n\nsuch that\n\nX\n\nxij = 1\n\nX\n\npki .xij \u2264 1\n\n1\u2264i\u2264n\n\n(2)\n\n1 \u2264 j \u2264 m, 1 \u2264 k \u2264 d\n\n(3)\n\nyj \u2265 xij\n\n1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m\n\n(4)\n\nxij \u2208 {0, 1}\n\n1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m\n\n(5)\n\nj\n\ni\n\nThe constraints of the ILP are as follows \u2022 Constraint (2) states that every vector is packed in a bin.\n\u2022 Constraint (3) ensures that the packed vectors do not exceed the bin\ndimensions.\n\u2022 Constraint (4) tells whether a bin is used or not.\n\u2022 Constraint (5) ensures that a vector is either packed entirely in a bin\nor not.\nConstraint (5) can be relaxed as follows to obtain a linear program (LP).\nxij \u2265 0\n\n1 \u2264 i \u2264 n,\n\n1\u2264j\u2264m\n\n(5a)\n\nWe can obtain a feasible solution for the LP using any standard method [6].\n\u2032\nUsing binary search technique, we can also find the least value of m, m \u2208 Z +\n\u2032\nfor the relaxed ILP for which a feasible solution exists. The value of m\nthus obtained will be less than the optimal solution for the integer program\n\u2032\ni.e. (m \u2264 OPT). However, the solution obtained is usually not integral.\nTo tackle this problem, we formulate a dual-maximization problem for the\nabove relaxed ILP.\nTheorem 1. [5] Any basic feasible solution to the relaxed LP defined by\nEquations 2, 3, and 5a has at most d*m vectors that are fractionally assigned\nto more than one bin.\n\n4\n\n\f2.2\n\nDual-maximization problem\n\nWe introduce several new variables zij to formulate the dual. The dualmaximization problem formulation is given in the Appendix 4.1. We arrive\nat the following set of equations and constraints maximize :\n\nXX\ni\n\nsuch that\n\nX\n\nxij = 1\n\nX\n\npki .xij \u2264 1\n\nX\n\n(6)\n\nxij zij\n\nj\n\n1\u2264i\u2264n\n\n(7)\n\n1 \u2264 j \u2264 m, 1 \u2264 k \u2264 d\n\n(8)\n\nzij \u2264 1\n\n1\u2264j\u2264m\n\n(9)\n\nxij , zij \u2265 0\n\n1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m\n\n(10)\n\nj\n\ni\n\ni\n\nThis is a nonlinear program (NLP) as the objective function is nonlinear.\nHereafter, we shall refer to it as NLP.\nLemma 2. The value of the objective function of the nonlinear program\n(NLP) lies between 1 and m.\nProof.\nLower bound : Let zij = n1 \u2200(i, j). Then, the objective function becomes Obj =\n\nXX\ni\n\nj\n\nxij\n\n1\n1 XX\n1\n= (\nxij ) = (n) = 1\nn\nn\nn\ni\n\nj\n\nUpper bound : The value of the objective function is upper bounded as\nfollows XX\nXX\nXX\nX\nObj =\nxij zij \u2264\nzij =\n(\nzij ) \u2264\n(1) = m\ni\n\nj\n\ni\n\nj\n\nj\n\ni\n\nj\n\nThus, the range of values the objective function will assume is between 1\nand m.\nP P\nThe actual range of values that i j xij zij (given the constraints) is\n0 to m. The objective function gives us a hint about the utility of the bins.\nIntuitively, if the value of the objective function is k, we can assume that\nk\n.\nthe expected utility of each bin is m\n5\n\n\fLemma 3. In the optimal solution to the nonlinear program (NLP), if any\nvalues of xij 's are 0, the corresponding values of zij 's are 0.\nProof. Let xi1 j1 = 0 for some value of (i1 , j1 ). From constraint (9) of the\nnonlinear program, we have X\nzij1 = z1j1 + z2j1 + . . . + zi1 j1 + . . . + znj1 \u2264 1\ni\n\nAtleast one vector i(i 6= i1 ) is packed in bin j1 (i.e. xij1 > 0).PFor this\nvector i, the value of zij1 > 0 in the optimal solution. The term i xij1 zij1\nis maximized iff the value of zi1 j1 is redistributed among other zij1 values\nwhere xij1 > 0. Hence, the value of zi1 j1 must be 0.\nTheorem 4. Given a sufficiently large value of m(m \u2265 OP T ), the solution\n(value of xij ) returned by the nonlinear program NLP will be integral, given\nthat zij is non-zero whenever xij 6= 0.\nProof. Consider n vectors which are to be packed. Assume that the the\noptimal packing can be done with 2 bins (i.e. OPT=2). Without loss of\ngenerality, let us assume that the vectors 1, 2, . . . , k1 (k1 < n) be packed in\nbin 1, and vectors k1 + 1, k1 + 2, . . . , n be packed in bin 2 in the optimal\nsolution OPT.\nThat is, let x11 = x21 = . . . = xk1 1 = x(k1 +1)2 = . . . = xn2 = 1. The\nmaximum value of the objective function in this case will be Obj =\n\nk1\nX\n\nzi1 +\n\nn\nX\n\nzi2\n\ni=k1 +1\n\ni=1\n\n\u22641+1=2\nNow, let us assume that the vector k1 + 1 be fractionally packable in bin 1\nand bin 2. Let the fraction that can be packed be t(0 < t < 1) in bin 1 and\n(1 \u2212 t) in bin 2. The objective function in this case can be shown to be Obj =\n\nk1\nX\n\nzi1 + tz(k1 +1)1 +\n\nn\nX\n\nzi2 + (1 \u2212 t)z(k1 +1)2\n\ni=k1 +2\n\ni=1\n\n\u2264 1 \u2212 (1 \u2212 t)z(k1 +1)1 + 1 \u2212 tz(k1 +1)2\n\u2264 2 \u2212 (1 \u2212 t)z(k1 +1)1 \u2212 tz(k1 +1)2\n< 2.\n\n6\n\n\fSimilarly, we can extend the same argument when more than 1 vectors\nfrom bin 2 are fractionally packed in bin 1. The objective function strictly\ndecreases as follows k1\nX\n\nzi1 +\n\n\u22641\u2212\n\nn\nX\n\nObj =\n\ni=1\n\n\u22642\u2212\n\nn\nX\n\nn\nX\n\nti zi1 +\n\n(1 \u2212 ti )zi2\n\ni=k1 +1\n\ni=k1\n\n(1 \u2212 ti )zi1 + 1 \u2212\n\ni=k1 +1\nn\nX\n\nn\nX\n\nti zi2\n\ni=k1 +1\n\n(1 \u2212 ti )zi1 \u2212\n\ni=k1 +1\n\nn\nX\n\nti zi2\n\ni=k1 +1\n\n< 2.\nwhere ti and (1-ti ) are the fractional packings of vector i in bin 1 & 2\nrespectively.\nBy induction, the same proof can be extended when the number of required bins is more than 2 (i.e. OPT > 2). Thus, the maximum value of\nthe objective function occurs when the variables xij are integral.\nTheorem 5. For the solution to be (near-) optimal and integral, the value\nof zij should be a function of xij .\nProof. The integral part follows from Theorem 4. Let us look into the\noptimality of the solution obtained.\nFrom the Jensen's Inequality, we have that if f is a convex function (\"concaveup\") on an interval I and ai \u2208 I then for weights \u03bbi summing to 1 n\nn\nX\nX\n\u03bbi f (ai )\n\u03bbi ai ) \u2264\nf(\ni=1\n\ni=1\n\nWe can apply Jensen's inequality with \u03bbi and ai corresponding to xij and\nzij , respectively. The modified set of equations in this case is as follows m\nm\nX\nX\nxij f (zij )\nxij zij ) \u2264\nf(\nj=1\n\n1\u2264i\u2264n\n\n(a)\n\nj=1\n\nFrom the property of convex functions, we have f (tx) \u2264 tf (x)\n\n0\u2264t\u22641\n\n7\n\n(b)\n\n\fFrom (a) and (b), we have m\n\nn\n\nn\n\nm\n\n1 XX\n1 XX\nf(\nxij zij ) \u2264\nxij f (zij )\nn\nn\ni=1 j=1\n\n(c)\n\ni=1 j=1\n\nSince f (x) is a convex function, any value which maximizes x also maximizes\nf (x) and vice-versa. Hence, from the inequality (c), we have that the term\nxij f (zij ) should be maximized for the objective function to be maximized.\nIndirectly, zij has to be maximized relative to the values of xij . The value\nof zij is constrained by the constraint (9), and hence we come up with the\nfollowing function for zij xij\nzij = P\ni xij\nX\nX xij\nP\n=1\n=\u21d2\nzij =\ni xij\ni\n\n(11)\n\ni\n\nThus, from (11), the objective function is as follows Obj =\n\nXX\ni\n\nxij zij =\n\nj\n\nXX\ni\n\nj\n\nP\nX X x2ij\nX i x2ij\nxij\nP\nP\n)=\n=\nxij ( P\ni xij\ni xij\ni xij\nj\n\ni\n\nj\n\nFrom the RMS (root mean square), arithmetic mean and standard deviation\nrelation, we have -\n\nwhere\n\nx2RM S = x2M + \u03c3x2\nr\nx21 + x22 + . . . + x2n\nxRM S =\nn\nx1 + x2 + . . . + xn\nxM =\nn\nv\nu n\nu1 X\n\u03c3x = t\n(xi \u2212 xM )2\nn\ni=1\n\nOn simplifying (12), (13), (14) and (15), we have P 2\nP\nxij\nn\u03c3 2\ni xij\nP\n+P x\n= i\nn\ni xij\ni xij\nP\nP\nn( n1 ni=1 (xij \u2212 xM )2 )\ni xij\nP\n+\n=\nn\ni xij\n8\n\n(12)\n(13)\n(14)\n(15)\n\n\f1\nFrom constraint (2), we have xM = m\nand Theorem 1 states that there\nexists at least n \u2212 d * m elements having xij = 1 (i.e. on an average n\u2212d*m\nm\nper bin).\nThus,\nP 2\nP\nP\n1 2\nn( n1 ni=1 (xij \u2212 m\n) )\nxij\ni xij\ni\nP\nP\n+\n=\nn\ni xij\ni xij\nPn\nP\n1 2\n)\n(xij \u2212 m\nxij\n= i\n+ i=1P\nn\ni xij\nP\nn\u2212dm\n1 2\n(1 \u2212 m\n)\nxij\n+ mP\n\u2265 i\nn\ni xij\nP\nn\u2212dm\n(1 \u2212 1 )2\nxij\n+ m n m\n\u2265 i\nn\nm\n\n=\u21d2\n\nX\nj\n\nP 2\nX P xij X n\u2212dm (1 \u2212\ni xij\nm\ni\nP\n+\n\u2265\nn\nn\nx\nij\ni\nm\nj\nj\nP\nn\u2212dm\n(1 \u2212 1 )2\nij xij\n+m m n m\n=\nn\nm\n1 2\n)\n(n \u2212 dm)(1 \u2212 m\nn\n+m\nn\nn\n2\n)\n(n \u2212 dm)(1 \u2212 m\n\u22651+m\nn\ndm\n2\n= 1 + m(1 \u2212\n)(1 \u2212 )\nn\nm\ndm\n=m\u22121+\n(2 \u2212 m)\nn\n\u2248m\u22121\n(n >> dm)\n\n1 2\nm)\n\n=\n\n(15a)\n\nHence, the value of the objective function (\u2248 m \u2212 1) is close to it's upper\nbound (= m) indicating the near optimal usage of the bins. Any basic\nfeasible solution would provide a near optimal packing when n >> d * m\nP 2\nP\nx\nPi ij\nx\n,\nthe\nminimum\nvalue\nof\nCorollary 6. For a fixed value of\ni ij\ni xij\noccurs when all xij 's are equal. Also, the minimum value is equal to xij .\n\n9\n\n\fProof.\n\nFrom equations (12), (13), (14) and (15), we have P 2\nP\nn\u03c3 2\nxij\ni xij\nP\n+P x\n= i\nn\ni xij\ni xij\n\u2265 xM\n\nThe equality holds only when all the xij 's are equal\nAny basic feasible solution for the relaxed LP will not necessarily be\nintegral. However, from Theorem 5, we have seen that any such solution\nwill be close to the optimal integer solution. We now present an algorithm\nwhich will provide the near optimal integer solution.\n\n3\n\nApproximation algorithm and it's bounds\n\nAlgorithm 1 PackingVectors(Pn , d)\nRequire: An set of vectors p1 , p2 , . . . , pn ; Pn .\n1:\n2:\n3:\n4:\n5:\n6:\n7:\n8:\n\n(m, X) = SolveLP (Pn , d)\nif m \u2265 n2 then\nreturn p\nF irstF it(Pn , d)\nelse if m \u2264 nd then\nreturn GreedyLP (Pn , X, d)\nelse\nreturn IterativeP ack(Pn , X, d)\nend if\n\nTheorem 7. Algorithm 1 provides a \u03b8(1)-optimal guarantee to the Vector\nBin Packing problem (VBP).\nProof. From the solution of the relaxed LP, the packing problem is classified into 3 casesCase 1 : m \u2265 n2 The optimal solution for an integer program is a feasible\nsolution for the corresponding relaxed linear program. Thus, the optimal\nsolution for a linear program is lesser than the optimal solution for an integer\nprogram (in a minimization problem). Thus, we have that m \u2264 OPT\nn\nm\u2265\n2\n10\n\n\fCombining the above, we get OPT \u2265 m \u2265\n\nn\n2\n\nSince the total number of bins cannot exceed the number of vectors n, any\nfirst fit algorithm in the worst case can have an approximation factor of 2.\npn\nCase 2 : m\np\u2264n d\nSince m \u2264 d , we have that -\n\nn \u2265 dm2 = m * dm\n\nLet n = k * dm for some value of k. The equation (15a) in Theorem 5 is then\n2\ndm\n)(1 \u2212 )\nn\nm\n1\n2\n= 1 + m(1 \u2212 )(1 \u2212 )\nk\nm\n(m \u2212 2)\n=m\u22121\u2212\nk\n\nObj \u2265 1 + m(1 \u2212\n\nIf k = \u03a9(m), the equation then becomes Obj = m \u2212 1 \u2212 O(1)\n\u2265m\u22122\n\n(k \u2265 m)\n\nThus, the value of objective function is \u2265 m \u2212 2, indicating a (near-)optimal\nutility of each bin. We use this knowledge and apply a greedy heuristic as\ngiven in Algorithm 2.\nFrom Theorem 1, the algorithm completely packs a majority of the vectors into the bins (i.e. n \u2212 dm \u2265 dm(m \u2212 1) \u2265 n2 for m \u2265 2). Less than\nhalf of the vectors remain to be packed by the repeated iteration. Hence,\nthe required bins \u2264 2-OPT.\np\nCase 3 : n2 \u2265 m \u2265 nd\nP\nP\nWe find all the instances where i xij zij \u2265 12 . From corollary 6, i xij zij \u2265\n1\n2 happens only when more than half of the non-zero values of xij 's are\ngreater than 12 or the standard deviation is fairly high. Also, the utility of\nthe bin is more than 21 .\nOnly those bins whose utility exceeds half are chosen, and the values of\nxij 's are sorted in descending order. The values of xij 's less than half are\nignored (less than half the number of non-zero xij 's). The value of standard\n11\n\n\fAlgorithm 2 GreedyLP(Pn , X, d)\nRequire: An set of vectors p1 , p2 , . . . , pn ; Pn and a set of xij values X.\n1:\n2:\n3:\n4:\n5:\n6:\n7:\n8:\n9:\n10:\n11:\n\n\u2032\n\nPn = Pn\n\u2032\nX = SortDescending(X)\n\u2032\nwhile X 6= \u03a6 do\n\u2032\nRemove the top element xij in X\nif vector pi fits in bin j then\nP ack(i, j)\n\u2032\n\u2032\nPn = Pn \\(pi )\nend if\n\u2032\n\u2032\nX = X \\{xij }\nend while\n\u2032\nP ackingV ectors(Pn , d)\n\nAlgorithm 3 IterativePack(Pn , X, d)\nRequire: An set of vectors p1 , p2 , . . . , pn ; Pn and a set of xij values X.\n1:\n2:\n3:\n4:\n5:\n6:\n7:\n8:\n9:\n10:\n11:\n\n\u2032\n\nPn = Pn\nZ = F indDualObj(X, d)\nfor j =P\n1 to m do\nif i xij zij \u2265 21 then\n\u2032\nXj = SortDescending(Xj )\n\u2032\u2032\n\u2032\nXj = RemoveLessT hanHalf (Xj )\n\u2032\u2032\nP ack(Xj )\n\u2032\n\u2032\nPn = Pn \\P ackedV ectors\nend if\nend for\n\u2032\nP ackingV ectors(Pn , d)\n\ndeviation can also be high in which case, we have achieved our objective of\nincreasing the gap between the values of xij .\nWe now proceed to packing the vectors into their respective bins. Since\nthe number of xij 's thrown away are less than half and the remaining values of xij 's are \u2265 12 . Atmost twice the number of bins are used to pack\nthese vectors with xij \u2265 21 . The remaining vectors are deferred to the next\niteration.\nThus, in each stage of the algorithm, the number of bins used is atmost\ntwice the optimal since we are packing vectors with xij \u2265 21 . Hence, we have\n12\n\n\fproved that the number of bins used is atmost 2-OPT.\n\nReferences\n[1] Nikhil Bansal and Alberto Caprara and Maxim Sviridenko.\nImproved approximation algorithms for multidimensional bin packing\nproblems. FOCS '06: Proceedings of the 47th Annual IEEE Symposium on Foundations of Computer Science, IEEE Computer Society,\nWashington, DC, USA (2006) 697\u2013708\n[2] Nikhil Bansal and Jos R. Correa and Claire Kenyon and\nMaxim Sviridenko. Bin Packing in Multiple Dimensions: Inapproximability Results and Approximation Schemes. Math. Oper. Res. 31(1),\n(2006) 31\u201349\n[3] Alberto Caprara. Packing 2-Dimensional Bins in Harmony. FOCS\n'02: Proceedings of the 43rd Symposium on Foundations of Computer\nScience, IEEE Computer Society, Washington, DC, USA (2002) 490\u2013\n499\n[4] Alberto Caprara and Paola Toth. Lower bounds and algorithms\nfor the 2-dimensional vector packing problem. Discrete Appl. Math.\n111(3), (2001) 231\u2013262\n[5] Chandra Chekuri and Sanjeev Khanna. On multi-dimensional\npacking problems. SODA '99: Proceedings of the tenth annual ACMSIAM symposium on Discrete algorithms, Society for Industrial and\nApplied Mathematics, Baltimore, Maryland, USA (1999) 185\u2013194\n[6] George Bernard Dantzig and Mukund Narain Thapa. Linear\nProgramming: Theory and extensions, Springer-Verlag (2003).\n[7] Wenceslas Fernandez de la Vega and George S. Lueker. Bin\npacking can be solved within 1+epsilon in linear time. Combinatorica\n1(4), (1981) 349\u2013355\n[8] David Karger and Krzysztof Onak. Polynomial approximation\nschemes for smoothed and random instances of multidimensional packing problems. SODA '07: Proceedings of the eighteenth annual ACMSIAM symposium on Discrete algorithms, Society for Industrial and\nApplied Mathematics, Philadelphia, PA, USA (2007) 1207\u20131216\n13\n\n\f[9] Narendra Karmarkar and Richard M. Karp. An efficient approximation scheme for the one-dimensional bin-packing problem.\nSFCS '82: Proceedings of the 23rd Annual Symposium on Foundations\nof Computer Science, IEEE Computer Society, Washington, DC, USA\n(1982) 312\u2013320\n[10] Hans Kellerer and Vladimir Kotov. An approximation algorithm\nwith absolute worst-case performance ratio 2 for two-dimensional vector\npacking. Operations Research Letters 31(1), (2003) 35\u201341\n[11] Boaz Patt-Shamir and Dror Rawitz. Vector Bin Packing with Multiple-Choice. CoRR abs/0910.5599,\n(2009)\nhttp://arxiv.org/abs/0910.559\n[12] Gerhard J. Woeginger. There is no asymptotic PTAS for twodimensional vector packing. Information Processing Letters 64(6),\n(1997) 293\u2013297\n\n4\n4.1\n\nAppendix\nDual formulation of the ILP\nminimize :\n\nX\n\n(16)\n\nyj\n\nj\n\nsuch that\n\nX\n\nxij = 1\n\nX\n\npki .xij \u2264 1\n\n1\u2264i\u2264n\n\n(17)\n\n1 \u2264 j \u2264 m, 1 \u2264 k \u2264 d\n\n(18)\n\nyj \u2265 xij\n\n1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m\n\n(19)\n\nxij \u2208 {0, 1}\n\n1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m\n\n(20)\n\nj\n\ni\n\nMultiply constraint (19) by positive multipliers zij corresponding to xij 's.\nAdding all such constraints, we obtain X\nX\nzij )yj \u2265\nxij zij\n1\u2264j\u2264m\n(\ni\n\ni\n\nXX\nXX\nzij )yj \u2265\nxij zij\n(\nj\n\ni\n\nj\n\ni\n\n14\n\n\fFurther, we have X\nj\n\nyj \u2265\n\nXX\nXX\n(\nzij )yj \u2265\nxij zij\nj\n\ni\n\nj\n\nX\n\nsubject to\n\ni\n\nzij \u2264 1\n\n(21)\n\ni\n\nThus, the minimization problem can be reframed as a maximization problem\nwith the constaint (21) and objective function being XX\nmax :\nxij zij\ni\n\nj\n\nAdding the new constraints and relaxing constraint (20), the dual problem\nis as follows XX\nmaximize :\nxij zij\ni\n\nsuch that\n\nj\n\nX\n\nxij = 1\n\nX\n\npki .xij \u2264 1\n\nX\n\nzij \u2264 1\n\n1\u2264j\u2264m\n\nxij , zij \u2265 0\n\n1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m\n\n1\u2264i\u2264n\n\nj\n\n1 \u2264 j \u2264 m, 1 \u2264 k \u2264 d\n\ni\n\ni\n\n15\n\n\f"}