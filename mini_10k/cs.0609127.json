{"id": "http://arxiv.org/abs/cs/0609127v1", "guidislink": true, "updated": "2006-09-22T18:01:17Z", "updated_parsed": [2006, 9, 22, 18, 1, 17, 4, 265, 0], "published": "2006-09-22T18:01:17Z", "published_parsed": [2006, 9, 22, 18, 1, 17, 4, 265, 0], "title": "On Bus Graph Realizability", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0101002%2Ccs%2F0101029%2Ccs%2F0101033%2Ccs%2F0101024%2Ccs%2F0101027%2Ccs%2F0101019%2Ccs%2F0101009%2Ccs%2F0101034%2Ccs%2F0101030%2Ccs%2F0101003%2Ccs%2F0101028%2Ccs%2F0101013%2Ccs%2F0101023%2Ccs%2F0101017%2Ccs%2F0101010%2Ccs%2F0101007%2Ccs%2F0101016%2Ccs%2F0101011%2Ccs%2F0609058%2Ccs%2F0609012%2Ccs%2F0609014%2Ccs%2F0609156%2Ccs%2F0609114%2Ccs%2F0609098%2Ccs%2F0609143%2Ccs%2F0609038%2Ccs%2F0609034%2Ccs%2F0609013%2Ccs%2F0609078%2Ccs%2F0609048%2Ccs%2F0609145%2Ccs%2F0609119%2Ccs%2F0609011%2Ccs%2F0609091%2Ccs%2F0609117%2Ccs%2F0609063%2Ccs%2F0609057%2Ccs%2F0609006%2Ccs%2F0609131%2Ccs%2F0609113%2Ccs%2F0609003%2Ccs%2F0609072%2Ccs%2F0609081%2Ccs%2F0609147%2Ccs%2F0609110%2Ccs%2F0609005%2Ccs%2F0609107%2Ccs%2F0609027%2Ccs%2F0609128%2Ccs%2F0609111%2Ccs%2F0609154%2Ccs%2F0609144%2Ccs%2F0609083%2Ccs%2F0609121%2Ccs%2F0609090%2Ccs%2F0609042%2Ccs%2F0609161%2Ccs%2F0609137%2Ccs%2F0609040%2Ccs%2F0609109%2Ccs%2F0609050%2Ccs%2F0609089%2Ccs%2F0609127%2Ccs%2F0609085%2Ccs%2F0609059%2Ccs%2F0609020%2Ccs%2F0609152%2Ccs%2F0609066%2Ccs%2F0609015%2Ccs%2F0609055%2Ccs%2F0609044%2Ccs%2F0609153%2Ccs%2F0609043%2Ccs%2F0609133%2Ccs%2F0609071%2Ccs%2F0609068%2Ccs%2F0609096%2Ccs%2F0609026%2Ccs%2F0609118%2Ccs%2F0609004%2Ccs%2F0609064%2Ccs%2F0609132%2Ccs%2F0609157%2Ccs%2F0609099%2Ccs%2F0609151%2Ccs%2F0609155%2Ccs%2F0609135%2Ccs%2F0609030%2Ccs%2F0609075%2Ccs%2F0609036%2Ccs%2F0609019%2Ccs%2F0609148%2Ccs%2F0609023%2Ccs%2F0609079%2Ccs%2F0609100%2Ccs%2F0609062%2Ccs%2F0609142%2Ccs%2F0609060%2Ccs%2F0609032%2Ccs%2F0609101%2Ccs%2F0609123&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "On Bus Graph Realizability"}, "summary": "In this paper, we consider the following graph embedding problem: Given a\nbipartite graph G = (V1; V2;E), where the maximum degree of vertices in V2 is\n4, can G be embedded on a two dimensional grid such that each vertex in V1 is\ndrawn as a line segment along a grid line, each vertex in V2 is drawn as a\npoint at a grid point, and each edge e = (u; v) for some u 2 V1 and v 2 V2 is\ndrawn as a line segment connecting u and v, perpendicular to the line segment\nfor u? We show that this problem is NP-complete, and sketch how our proof\ntechniques can be used to show the hardness of several other related problems.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0101002%2Ccs%2F0101029%2Ccs%2F0101033%2Ccs%2F0101024%2Ccs%2F0101027%2Ccs%2F0101019%2Ccs%2F0101009%2Ccs%2F0101034%2Ccs%2F0101030%2Ccs%2F0101003%2Ccs%2F0101028%2Ccs%2F0101013%2Ccs%2F0101023%2Ccs%2F0101017%2Ccs%2F0101010%2Ccs%2F0101007%2Ccs%2F0101016%2Ccs%2F0101011%2Ccs%2F0609058%2Ccs%2F0609012%2Ccs%2F0609014%2Ccs%2F0609156%2Ccs%2F0609114%2Ccs%2F0609098%2Ccs%2F0609143%2Ccs%2F0609038%2Ccs%2F0609034%2Ccs%2F0609013%2Ccs%2F0609078%2Ccs%2F0609048%2Ccs%2F0609145%2Ccs%2F0609119%2Ccs%2F0609011%2Ccs%2F0609091%2Ccs%2F0609117%2Ccs%2F0609063%2Ccs%2F0609057%2Ccs%2F0609006%2Ccs%2F0609131%2Ccs%2F0609113%2Ccs%2F0609003%2Ccs%2F0609072%2Ccs%2F0609081%2Ccs%2F0609147%2Ccs%2F0609110%2Ccs%2F0609005%2Ccs%2F0609107%2Ccs%2F0609027%2Ccs%2F0609128%2Ccs%2F0609111%2Ccs%2F0609154%2Ccs%2F0609144%2Ccs%2F0609083%2Ccs%2F0609121%2Ccs%2F0609090%2Ccs%2F0609042%2Ccs%2F0609161%2Ccs%2F0609137%2Ccs%2F0609040%2Ccs%2F0609109%2Ccs%2F0609050%2Ccs%2F0609089%2Ccs%2F0609127%2Ccs%2F0609085%2Ccs%2F0609059%2Ccs%2F0609020%2Ccs%2F0609152%2Ccs%2F0609066%2Ccs%2F0609015%2Ccs%2F0609055%2Ccs%2F0609044%2Ccs%2F0609153%2Ccs%2F0609043%2Ccs%2F0609133%2Ccs%2F0609071%2Ccs%2F0609068%2Ccs%2F0609096%2Ccs%2F0609026%2Ccs%2F0609118%2Ccs%2F0609004%2Ccs%2F0609064%2Ccs%2F0609132%2Ccs%2F0609157%2Ccs%2F0609099%2Ccs%2F0609151%2Ccs%2F0609155%2Ccs%2F0609135%2Ccs%2F0609030%2Ccs%2F0609075%2Ccs%2F0609036%2Ccs%2F0609019%2Ccs%2F0609148%2Ccs%2F0609023%2Ccs%2F0609079%2Ccs%2F0609100%2Ccs%2F0609062%2Ccs%2F0609142%2Ccs%2F0609060%2Ccs%2F0609032%2Ccs%2F0609101%2Ccs%2F0609123&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "In this paper, we consider the following graph embedding problem: Given a\nbipartite graph G = (V1; V2;E), where the maximum degree of vertices in V2 is\n4, can G be embedded on a two dimensional grid such that each vertex in V1 is\ndrawn as a line segment along a grid line, each vertex in V2 is drawn as a\npoint at a grid point, and each edge e = (u; v) for some u 2 V1 and v 2 V2 is\ndrawn as a line segment connecting u and v, perpendicular to the line segment\nfor u? We show that this problem is NP-complete, and sketch how our proof\ntechniques can be used to show the hardness of several other related problems."}, "authors": ["Anil Ada", "Melanie Coggan", "Paul Di Marco", "Alain Doyon", "Liam Flookes", "Samuli Heilala", "Ethan Kim", "Jonathan Li On Wing", "Louis-Francois Preville-Ratelle", "Sue Whitesides", "Nuo Yu"], "author_detail": {"name": "Nuo Yu"}, "author": "Nuo Yu", "arxiv_comment": "Tech Report in School of Computer Science, McGill University Poster\n  version of this paper was presented at the International Symposium on Graph\n  Drawing 2006", "links": [{"href": "http://arxiv.org/abs/cs/0609127v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cs/0609127v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.CG", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.CG", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.DM", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cs/0609127v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/cs/0609127v1", "journal_reference": null, "doi": null, "fulltext": "On Bus Graph Realizability\u22c6\n\narXiv:cs/0609127v1 [cs.CG] 22 Sep 2006\n\nAnil Ada, Melanie Coggan, Paul Di Marco, Alain Doyon, Liam Flookes, Samuli\nHeilala, Ethan Kim, Jonathan Li On Wing, Louis-Francois Preville-Ratelle,\nSue Whitesides, and Nuo Yu\nSchool of Computer Science\nMcGill University\nMontr\u00e9al, Canada\n\nTechnical Report SOCS-TR-2006.1, September 2006\nAbstract. In this paper, we consider the following graph embedding\nproblem: Given a bipartite graph G = (V1 , V2 ; E), where the maximum\ndegree of vertices in V2 is 4, can G be embedded on a two dimensional\ngrid such that each vertex in V1 is drawn as a line segment along a grid\nline, each vertex in V2 is drawn as a point at a grid point, and each\nedge e = (u, v) for some u \u2208 V1 and v \u2208 V2 is drawn as a line segment\nconnecting u and v, perpendicular to the line segment for u? We show\nthat this problem is NP-complete, and sketch how our proof techniques\ncan be used to show the hardness of several other related problems.\n\n1\n\nIntroduction\n\nOrthogonal graph drawing is a well studied area in the graph drawing community, and one may find many applications in VLSI design. In this paper, we\nstudy orthogonal drawings of bus graphs, which represent interconnectivity of\nfunctional entities in a chip. In VLSI layouts, a bus is a line segment drawn on\na plane. To establish a connection among a collection of buses, a connector is\ndrawn as a point on the plane, and then joined to the buses by line segments.\nThus, the interconnections of the buses can be represented by a bipartite graph,\nwhere one partition of vertices corresponds to the set of buses, and the other\ncorresponds to the set of connectors. We call such bipartite graphs bus graphs,\nand we are interested in the problem of drawing bus graphs on the plane.\nFor manufacturing purposes, it is desired that all the buses and the edges\nthat join them are laid out either horizontally or vertically. Furthermore, it is\nalso necessary to lay out the components of a chip, i.e. buses and connectors,\nsufficiently far from each other. Thus, we wish to draw the bus graph on a grid,\nwhere each bus is laid out along a grid line, and each connector is drawn at a grid\n\u22c6\n\nOur interest in bus graph problems is a consequence of the participation of one\nof us in Bertinoro Workshop on Graph Drawing, 5\u201310 March, 2006 where the\nproblem was presented as an open problem. Contact author: Ethan Kim, School\nof Computer Science, McGill University, 3480 University St., Montr\u00e9al, Canada,\nethan@cs.mcgill.ca\n\n\fFig. 1. A combinatorial bus graph and its realization. This graph is a gadget called an\n(A, B)-perp, defined in Sect. 3.2, Definition 1.\n\npoint. Each edge between a bus and a connector is also drawn along a grid line. In\nparticular, an edge joining a bus is drawn as a line segment perpendicular to the\nbus. We do not allow any edge to intersect with any connectors or buses, except\nat endpoints of the edge. However, a horizontal edge may cross a vertical edge.\nThus, each connector can connect at most 4 buses. We define the combinatorial\nbus graphs as the class of bipartite graphs G = (B, C; E), where the degree of\nconnector vertices in C is at most 4.\nWe say a (combinatorial) bus graph G is realizable if G can be drawn while\nmeeting the conditions above. See Fig. 1 for an example of a bus graph and its\nrealization. We now formally define the Bus Graph Realizability (BGR) problem\nas follows:\nInstance: A bipartite graph G = (B, C; E) such that \u2200c \u2208 C, deg(c) \u2264 4.\nQuestion: Can G be drawn onto a grid so that the following properties hold?\n1. Each vertex B \u2208 B is drawn as a closed line segment along a grid line.\n2. Each vertex c \u2208 C is drawn as a point at a grid point.\n3. Each edge (B, c) \u2208 E is drawn as a closed line segment between B and\nc, that is perpendicular to B, and contains no other connectors or buses\napart from B and c; an edge can, however, cross other edges as shown\nin Fig. 1. An edge may connect to a bus at an endpoint of the bus.\n4. No buses or connectors may intersect.\nNow we are ready to state our main result.\nTheorem 1. Bus Graph Realizability is NP-complete.\nThe rest of this paper is organized as follows. In Sect. 2, we give definitions\nand preliminaries. A proof of our main theorem is given in Sect. 3. In Sect. 4, we\nshow that the techniques we use to prove Theorem 1 can be applied to related\n\n\fproblems. In Sect. 5, we look at a variation of the problem where the lengths\nof the buses are given as input, and prove that this version of the problem is\nNP-hard. Finally, we conclude with some open problems in Sect. 6.\nRelated Work. The orthogonal graph drawing style has found many applications in VLSI design since its introduction in [1], [2], and [3]. Many optimization\ncriteria have been suggested, such as minimizing layout area, minimizing the\nnumber of wire crossings in a layout, etc. ([4], [5])\nA realization of a bus graph conveys visibility relations among the buses\nand connectors. Given an arrangement of points (connectors) and axis-parallel\nline segments (buses) on a grid, if a bus Bi and a connector cj can be joined\nby a straight-line edge, then there exists an axis-parallel line of sight that does\nnot intersect any buses or connectors except Bi and cj . Furthermore, if all the\nbuses are drawn horizontally, the bus graph G is a subgraph of the visibility\ngraph representing the vertical visibility among the bus segments. There is an\nabundance of prior work on the visibility graphs based on axis-parallel lines of\nsight, for example, in [6], [7], [8], [9], [10], [11], [12], and [13]. In particular, [10]\nand [11] study bar visibility graphs (BVGs), where each vertex in the graph is\ndrawn as a horizontal line segment in IR2 , and the adjacency among the vertices\nrepresent vertical visibility. It is shown that the recognition problem of such\ngraphs can be solved in linear time. In [7], [9], [8], [12], [13], the authors study\nrectangle visibility graphs (RVGs), where each vertex is drawn as a rectangle, and\nthe adjacency among the vertices represent axis-parallel lines of sight. Reference\n[13] shows that the recognition problem of such graphs is NP-complete. The bus\ngraphs that we study in this paper can be regarded as related to RVGs, where\nthe vertices are restricted to degenerate rectangles such as line segments and\npoints.\n\n2\n\nPreliminaries\n\nGiven a bus graph G = (B, C; E), we call a vertex B a B-vertex if B \u2208 B;\nits realization is called a bus. Similarly, a C-vertex refers to a vertex in C, and\nits realization is called a connector. We often use uppercase letters to denote\nB-vertices, and lowercase letters to denote C-vertices.\nWe use a function \u0393 to denote an embedding of a combinatorial bus graph\nG. For example, \u0393 (c) for some C-vertex c denotes the grid point where c is laid\nout in the embedding, and \u0393 (B) for some B-vertex B or \u0393 ((B, c)) for some edge\n(B, c) denotes the line segment along a grid line where the bus or edge is laid out.\nWe call a grid point an event point if there is either a connector or an endpoint\nof a bus at that grid point.\nIt is important to note here that many variations of the bus graph problem\ncan be devised, yet several are equivalent. For example, suppose the buses are\nrealized as open line segments. It is not hard to see that this variation is equivalent to the problem stated in Sect. 1, as an embedding with buses as open line\n\n\fsegments can easily be transformed into an embedding with buses as closed line\nsegments, and vice versa.\nFor another variation, note that a bus graph G = (B, C; E) can be regarded\nas a hypergraph, where B is the set of vertices, and C is the set of hyperedges,\neach connecting at most four vertices. In this context, it is of interest to see if the\nrealizability problem changes if we disallow multiple hyperedges in the hypergraph G. In other words, we would assume that no two C-vertices are adjacent\nto the same set of B-vertices. As the following lemma shows, this assumption\ndoes not change our problem.\nLemma 1. Let G be a bus graph with multiple hyperedges in C, and let G\u2032 be\nthe bus graph constructed from G by removing hyperedge duplicates. Then G is\nrealizable if and only if G\u2032 is realizable.\nProof. Necessity is trivial. Conversely, suppose G\u2032 is realizable. Take any embedding of G\u2032 , and let c be a connector in the embedding at some position (i, j).\nThen, create a copy of c with the same connectivity to buses as follows. For\neach event point in the embedding, if its x-coordinate is strictly greater than i,\nincrease its x-coordinate by 1. Then, if c is connected to the rightmost endpoint\nof a horizontal bus B, where the endpoint is at an x-coordinate equal to i, increase the x-coordinate of the endpoint by 1. Similarly, if an event point has a\ny-coordinate strictly greater than j, increase its y-coordinate by 1. Then, if c is\nconnected to the topmost endpoint of a vertical bus B \u2032 , where the endpoint is at\na y-coordinate equal to j, increase the y-coordinate of the endpoint by 1. Finally,\ncreate a copy of c, and place it at (i + 1, j + 1). Intuitively, we are stretching the\nbuses that intersect either of the two grid lines x = i and y = j, so that there\nis a grid point for the newly created copy of c, without making any collisions.\nRepeat this for each C-vertex in G\u2032 , until a realization of G is obtained.\n\u2293\n\u2294\n\n3\n3.1\n\nNP-Completeness\nMembership in NP\n\nLemma 2. Bus graph realizability is in NP.\nProof. First, we claim that if a bus graph G is realizable, there exists a compact\nlayout such that the size of the layout is linear in each dimension. To see this,\ntake any layout of G, and compact the layout as follows. Take a vertical grid\nline with no event points on it. Then, for each event point at (x, y) appearing to\nthe right of this grid line, shift it to (x \u2212 1, y). Observe that this operation still\nguarantees a legal layout. Repeat this for each such vertical grid line. Notice that\nthe width of the layout is now linear in the size of G. We can apply a similar\noperation for all such horizontal grid lines. Thus, the claim is true, so there\nexists a short certificate for each realizable graph G that gives the coordinates\nof the event points in a compact layout. It is easy to see that we can check, in\npolynomial time, if such a certificate represents a correct solution.\n\u2293\n\u2294\n\n\f3.2\n\nNP-Hardness\n\nIn this section, we prove the NP-hardness of BGR by a reduction from NAE3SAT [14]. We first introduce and discuss properties of several gadgets, and then\ngive the transformation.\nDefinition 1. An (A, B)-perp is a bus graph component consisting of three Cvertices x, y, z, five B-vertices A, A\u2032 , B, B \u2032 , C, and twelve edges (A, x), (A\u2032 , x),\n(B, x), (B \u2032 , x), (A, y), (A\u2032 , y), (B, y), (C, y), (A, z), (A\u2032 , z), (B \u2032 , z), (C, z).\nA combinatorial graph of an (A, B)-perp and an example embedding of it\nare shown in Fig. 1.\nLemma 3. In any embedding \u0393 of an (A, B)-perp,\n1. \u0393 (B) and \u0393 (B \u2032 ) are parallel,\n2. \u0393 (A) and \u0393 (B) are perpendicular, and\n3. \u0393 (A) and \u0393 (A\u2032 ) are parallel.\nProof.\n1. Note that y and z are both adjacent to A, A\u2032 and C. \u0393 ((B, y)) and \u0393 ((B \u2032 , z))\nare then parallel, so \u0393 (B) and \u0393 (B \u2032 ) are parallel.\n2. By 1, \u0393 (B) and \u0393 (B \u2032 ) are parallel. So if \u0393 (A) were parallel to \u0393 (B), then\nx would be adjacent to three parallel buses. This is a contradiction.\n3. By 2, \u0393 (A) and \u0393 (B) are perpendicular. If \u0393 (A\u2032 ) were perpendicular to\n\u0393 (A), then \u0393 (A\u2032 ) would be parallel to \u0393 (B), making x adjacent to three\nparallel buses. This is a contradiction.\n\u2293\n\u2294\nDefinition 2. A (B, o)-flipper is a bus graph component consisting of an (A, B)perp, one additional C-vertex o, and two additional edges (B, o), (B \u2032 , o).\nAn example embedding of a (B, o)-flipper is shown in Fig. 2.\nLemma 4. Let i be a C-vertex, and O be a B-vertex. If i is joined with a (B, o)flipper by an edge (B, i), and O is joined with the (B, o)-flipper by an edge (O, o),\nthen in any embedding \u0393 ,\n1. \u0393 ((B, i)) and \u0393 ((O, o)) are perpendicular, and\n2. \u0393 (B) and \u0393 (O) are perpendicular.\nProof.\n1. By Lemma 3, \u0393 (B) and \u0393 (B \u2032 ) are parallel, so \u0393 ((B, o)) and \u0393 ((B \u2032 , o)) are\nalso parallel. \u0393 ((O, o)) is then perpendicular to \u0393 ((B, o)). Thus, \u0393 ((O, o))\nis parallel to \u0393 (B) and perpendicular to \u0393 ((B, i)).\n2. Follows immediately from 1.\n\u2293\n\u2294\n\n\fFig. 2. Example embedding of a\n(B, o)-flipper.\n\nFig. 3. Example embedding\n(A, 2, B, 2)-variable-box.\n\nof\n\nan\n\nDefinition 3. An (A, k, B, l)-variable-box is a bus graph component consisting\nof an (A, B)-perp, (3 + k) + (3 + l) additional C-vertices xA , yA , zA , o1A , o2A , . . . ,\nokA , xB , yB , zB , o1B , o2B , . . . , olB , eight additional B-vertices RA , SA , TA , UA ,\nRB , SB , TB , UB , and (12 + 2k) + (12 + 2l) additional edges\n(A, xA ), (RA , xA ), (SA , xA ), (UA , xA ),\n(A, yA ), (RA , yA ), (TA , yA ), (UA , yA ),\n(A, zA ), (SA , zA ), (TA , zA ), (UA , zA ),\n(RA , oiA ), (SA , oiA ) for i = 1, 2, . . . , k,\n(B, xB ), (RB , xB ), (SB , xB ), (UB , xB ),\n(B, yB ), (RB , yB ), (TB , yB ), (UB , yB ),\n(B, zB ), (SB , zB ), (TB , zB ), (UB , zB ),\n(RB , oiB ), (SB , oiB ) for i = 1, 2, . . . , l.\nAn example embedding of an (A, 2, B, 2)-variable-box is shown in Fig. 3.\nj\ni\n, ojB ) for j = 1, 2, . . . , l be\nLemma 5. Let (OA\n, oiA ) for i = 1, 2, . . . , k and (OB\nedges joined with an (A, k, B, l)-variable-box. Then in any embedding \u0393 ,\ni\n1. \u0393 ((OA\n, oiA )) and \u0393 (A) are perpendicular for any i = 1, 2, . . . , k.\ni\n2. \u0393 ((OB , oiB )) and \u0393 (B) are perpendicular for any i = 1, 2, . . . , l.\n\nProof. We prove the first statement; the proof of the second is analogous. Notice\nthat vertices xA , yA , zA , RA , SA , TA , UA , o1A , o2A , . . . , okA form an (RA , oiA )flipper with multiple output C-vertices. As shown in the proof of Lemma 4,\n\n\fFig. 4. Example embedding of an (I, O)-chain.\n\ni\n\u0393 ((OA\n, oiA )) is parallel to \u0393 (RA ) for all i = 1, 2, . . . , k. Using the same reasoning\nas in the proof of Lemma 3, \u0393 (RA ) is perpendicular to \u0393 (A). It follows that\ni\nevery edge \u0393 ((OA\n, oiA )) is perpendicular to \u0393 (A).\n\u2293\n\u2294\n\nDefinition 4. An (I, O)-chain is a bus graph component consisting of\n1.\n2.\n3.\n4.\n\nan\nan\nan\nan\n\n(I, o1 )-flipper,\n(I1 , o2 )-flipper,\n(I2 , o3 )-flipper,\n(I3 , O)-perp,\n\nand three additional edges (I1 , o1 ), (I2 , o2 ), (I3 , o3 ).\nAn example embedding of an (I, O)-chain is shown in Fig. 4.\nLemma 6. In any embedding \u0393 of an (I, O)-chain, \u0393 (I) and \u0393 (O) are parallel.\nProof. By repeatedly applying Lemma 4, \u0393 (I) is perpendicular to \u0393 (I1 ), \u0393 (I1 )\nis perpendicular to \u0393 (I2 ), and \u0393 (I2 ) is perpendicular to \u0393 (I3 ). By Lemma 3,\n\u0393 (I3 ) is perpendicular to \u0393 (O). It follows that \u0393 (I) is parallel to \u0393 (O).\n\u2293\n\u2294\nFinally, we are ready to give the transformation from NAE-3SAT to BGR.\nLet \u03c6 be an instance of NAE-3SAT, consisting of boolean variables x1 , . . . , xn ,\nand clauses C1 , . . . , Cm . Construct a bus graph G as follows.\n1. For each boolean variable xi , create a (Xi , ti , X i , fi )-variable-box, where ti\nand fi are the numbers of distinct occurrences of the literals xi and xi ,\nrespectively, in \u03c6.\n2. For each clause Cq = (x\u2217i \u2228 x\u2217j \u2228 x\u2217k ), where x\u2217 is either x or x, create\n(a) a C-vertex cq ,\n(b) an (Iq,1 , Oq,1 )-chain, an (Iq,2 , Oq,2 )-chain, and an (Iq,3 , Oq,3 )-chain,\n(c) edges (Oq,1 , cq ), (Oq,2 , cq ) and (Oq,3 , cq ),\n\n\fFig. 5. A schematic embedding of G, where \u03c6 consists of the clauses C1 = (x2 \u2228x3 \u2228x4 ),\nC2 = (x1 \u2228 x2 \u2228 x3 ),and C3 = (x1 \u2228 x2 \u2228 x4 ) with a satisfying truth assignment\nx1 = x3 = x4 = true and x2 =false. Note the regions separated by the dashed lines\nand x\u2212, y\u2212axes. Complete instructions for the embedding is included in Appendix.\n\n(d) edges (Iq,1 , pi ), (Iq,2 , pj ) and (Iq,1 , pk ), where pi = orXi if x\u2217i = xi and\npi = orX if x\u2217i = xi , and it is the rth occurrence of x\u2217i being considered.\ni\n\nSince every gadget is of linear size, the transformation clearly takes polynomial time. Finally, the following lemma completes the proof of Theorem 1.\nLemma 7. \u03c6 \u2208 NAE-3SAT if and only if G \u2208 BGR.\nProof. Suppose \u03c6 \u2208 NAE-3SAT. An embedding \u0393 of G can be constructed as\ndemonstrated in Fig. 5. Notice that the variable boxes are embedded in such a\nway that the buses corresponding to true literals are drawn vertically and the\nbuses corresponding to false literals are drawn horizontally. See Appendix for a\nfull description of this layout.\nConversely, suppose G \u2208 BGR, and take an embedding \u0393 of G. By Lemma 3,\n\u0393 (Xi ) is perpendicular to \u0393 (X i ) for each variable box, so assign each variable\nxi to be true if \u0393 (Xi ) is vertical and false otherwise. To see that this truthassignment satisfies the clauses, consider a clause Cq = (x\u2217i \u2228 x\u2217j \u2228 x\u2217k ). The\nclause vertex cq is adjacent to three buses Oq,1 , Oq,2 , and Oq,3 at the end of\n\n\f(I, O)-chains. Since cq can be joined to at most two parallel buses, at least one\nof these three buses must be drawn horizontally, and at least one must be drawn\nvertically. Take any one of the three buses, say Oq,1 , and consider the literal\nbus to which Oq,1 connects in the variable box. By Lemma 5 and Lemma 6, the\norientation of these two buses must be the same. This implies that the clause\nvertex cq is connected to at least one vertically drawn literal bus, and at least one\nhorizontally drawn literal bus. Therefore, the truth-assignment satisfies \u03c6.\n\u2293\n\u2294\n\n4\n\nApplications of Proof Techniques\n\nIn this section, we look at variations of the bus graph realizability problem in\nwhich the degree of C-vertices is restricted. In the original bus graph realizability\nproblem presented in Sect. 1, each C-vertex has a maximum degree of 4, due to\nthe orthogonal drawing style. An analogous problem can be devised for the class\nof bus graphs where the C-vertices have maximum degrees of either 2 or 3. In\nwhat follows, we show that these variations are also NP-complete. Finally, we\ndiscuss the problem of merely deciding the orientation of buses, which also turns\nout to be NP-complete.\n4.1\n\nConnectors with Bounded Degree\n\nFirst, consider the class of bus graphs where the C-vertices have maximum degree\n1. These graphs are trivially realizable by simply drawing all the buses along a\ngrid line. However, if the maximum degree of C-vertices is greater than or equal to\n2, the problem becomes harder. Recall from the proof of Theorem 1 in Sect. 3 that\nthe reduction from NAE-3SAT was done using a series of gadgets, each of which\nwas based on the (A, B)-perp. The following results follow from constructing an\n(A, B)-perp gadget for each case, and then constructing the remaining gadgets\nin a similar fashion.\nTheorem 2. Bus Graph Realizability is NP-complete when the maximum degree\nof C-vertices is 2.\nProof sketch. If every C-vertex has degree 2, we may regard each C-vertex as\nan edge connecting two B-vertices. Thus, in the following description, when we\nsay to join two B-vertices, we mean to create a C-vertex that joins the two Bvertices. To construct the perp gadget, start with a complete graph K8 , with\nvertices labeled B1 through B8 . Then, create another vertex B9 , and join it with\nvertices B1 through B7 . Finally, create a vertex B10 , and join it to vertices B1\nthrough B6 , B8 , and B9 . It can be shown that the buses B8 and B10 must be\ndrawn perpendicularly to each other, and all other gadgets can be constructed\nbased on this structure.1\n\u2293\n\u2294\nTheorem 3. Bus Graph Realizability is NP-complete, when the maximum degree of C-vertices is 3.\n1\n\nFor obvious reasons, we cannot use a single C-vertex to represent a clause. This can\nbe resolved by creating a combination of perp gadgets and (I, O)-chains.\n\n\fProof sketch. The perp gadget for this case is a bus graph component consisting\nof eight C-vertices s, t, u, v, w, x, y, z, six B-vertices A, A\u2032 , B, B \u2032 , C, D and 24\nedges, connecting the B-vertices to the C-vertices as follows: s to A, B, C; t to\nA, B, A\u2032 ; u to A, B ,B \u2032 ; v to C, A\u2032 , B \u2032 ; w to A\u2032 , B, D; x to A\u2032 , B, B \u2032 ; y to D,\nA, B \u2032 ; z to A\u2032 , B \u2032 , A. It can be shown that the buses A and B must be drawn\nperpendicularly to each other, and parallel to A\u2032 and B \u2032 , respectively. All other\ngadgets can be constructed based on this structure.\n\u2293\n\u2294\nOur results can be summarized as follows.\nTheorem 4. Bus Graph Realizability is NP-complete if and only if the maximum degree of C-vertices in the given graph is 2, 3, or 4.\n4.2\n\nPartition by Orientation\n\nIn order to realize a given bus graph, one must decide the orientations of the\nbuses. Since a connector can be joined to at most two horizontal buses and at\nmost two vertical buses, all realizable bus graphs admit a bipartition of buses\nby orientation. As we will see shortly, even deciding whether the buses can be\nproperly oriented is hard to compute. Note, however, that a proper bipartition\nby orientation does not guarantee that the graph is realizable.2\nWe define the problem PARTITION-BY-ORIENTATION as follows:\nInstance: A bipartite graph G = (B, C; E) such that \u2200c \u2208 C, deg(c) \u2264 4.\nQuestion: Can B be partitioned into two disjoint sets BH and BV , such that\n\u2200c \u2208 C, c is adjacent to no more than two vertices in BH and no more than\ntwo vertices in BV ?\nTheorem 5. PARTITION-BY-ORIENTATION is NP-complete.\nProof. The problem is clearly in NP, as one could guess a partition and check\nfor its correctness in polynomial time. For the reduction, we use NAE-3SAT.\nGiven an instance \u03c6 of NAE-3SAT, we construct a graph G as follows. First, for\neach variable xi in \u03c6, create an (A, B)-perp. Vertex A corresponds to xi , whereas\nvertex B corresponds to xi . Then, for each clause Cq = (x\u2217i \u2228 x\u2217j \u2228 x\u2217k ), create\na C-vertex cq , and join it to the three literal vertices. The rest of the proof is\nsimilar to the proof of Lemma 7, and follows from Lemma 3.\n\u2293\n\u2294\n\n5\n\nBus Graph Realizability with Given Bus Lengths\n\nIn this section, we study a variation of bus graph realizability in which the lengths\nof buses are given as input (BGR+BL). We devise a new encoding scheme for the\ninstances of this problem. The purpose of this encoding scheme will become clear\nshortly. Recall from the discussion in Sect. 2 that bus graphs can be regarded\n2\n\nA simple counterexample can be constructed by first creating a complete graph with\n9 B-vertices, and then placing a C-vertex on each edge.\n\n\fas hypergraphs, where each C-vertex corresponds to a hyperedge. In the new\nencoding scheme, we assume that the problem instance is given as a list of\nsubsets of B, where each subset is of cardinality at most 4. For each subset, we\nalso encode the number of C-vertices that are adjacent to exactly that subset of Bvertices. Notice that this is a form of adjacency matrix for the hypergraph, where\neach entry in the matrix denotes the number of hyperedges for that particular\nsubset of buses. In the case of hypergraphs where no multiple hyperedges are\nallowed, each entry in the matrix would be either 1 or 0.\nNow we are ready to state and prove the main result of this section.\nTheorem 6. BGR+BL is NP-hard. It is also NP-hard if the maximum degree\nof C-vertices is 2, or if we require the buses to be parallel to each other.\nProof. The reduction is from PARTITION [14]. Let hA, si be an instance of\nPARTITION, where A is a set of elements, and s : A \u2192 Z + is a size function\nfor each element. For simplicity, we assume that no element is of size 1, as we\ncan scale the size function appropriately.\nWe construct a bus graph G as follows.\nP\nCreate a B-vertex B \u2217 of length 12 a\u2208A s(a) \u2212 1. Then, for each a \u2208 A, create a\nB-vertex Ba of length s(a) \u2212 1. Now, for each element a \u2208 A, create exactly s(a)\ncopies of C-vertex, and join them to both Ba and B \u2217 . With the new encoding\nscheme, this transformation can be done in polynomial time.\nSuppose hA, si \u2208 PARTITION. First, lay out the bus B \u2217 horizontally along\nthe x-axis. It is easy to see that one can place the buses Ba for all a \u2208 A\u2032\nhorizontally along the grid line y = 1 (above B \u2217 ), and place the rest horizontally\nalong the grid line y = \u22121 (below B \u2217 ). This is a legal layout.\nConversely, suppose G is a yes-instance of BGR+BL. Take an embedding of\nG, and assume without loss of generality that B \u2217 is drawn horizontally. Then,\neach bus Ba must be laid out either completely above B \u2217 , or completely below\nB \u2217 . To see this, suppose otherwise. This means either (1) some Ba is drawn on\nthe same grid line as B \u2217 , or (2) some Ba is drawn vertically, where one endpoint\nof Ba is above B \u2217 , and the other endpoint is below B \u2217 . Case (1) is not possible,\nas no connector can join Ba with B \u2217 . Consider case (2). Then, there exists a\ngrid point p at the intersection of Ba and the grid line where B \u2217 is drawn. No\nconnector can connect p with B \u2217 , since every edge must connect to a bus (B \u2217 ,\nin particular) perpendicularly. This is a contradiction because each grid point\nalong the bus Ba must connect to B \u2217 via a connector.\nThis implies that the number of grid points along the buses drawn above\nB \u2217 equals the number of grid points along B \u2217 . Similarly, the number of grid\npoints along the buses drawn below B \u2217 equals the number of grid points along\nB \u2217 . Therefore, we have a subset A\u2032 \u2282 A, where A\u2032 is the set of elements that\ncorrespond to the buses drawn above B \u2217 , and this is a valid partition.\n\u2293\n\u2294\n\n6\n\nConcluding Remarks and Open Problems\n\nAlthough bus graph realizability is an NP-complete problem in general, some\nspecial classes of graphs admit polynomial time solutions. For example, if the\n\n\fgiven bus graph G is a tree, it is simple to devise an algorithm to produce a\nrealization of G, and hence G always admits a bus graph embedding. However,\nwhat other classes of graphs admit polynomial time recognition algorithms for\nrealizable bus graphs is an unexplored question.\nAs a consequence of the hardness results of this paper, one may search for\napproximate solutions to the problems. It is unclear, however, what optimization\ncriteria would be used. With applications in VLSI in mind, one may wish to lay\nout all the buses first, and then maximize the connectivity by maximizing the\nnumber of connectors realized in the layout.\nAcknowledgments. We thank Olivier Mireault for his interest and support.\nThose of us who hold research grants or government scholarships gratefully acknowledge NSERC and FQRNT for their support.\n\nReferences\n1. Thompson, C.D.: Area-time complexity for vlsi. In: Eleventh Annual ACM Symposium on Theory of Computing. (1979)\n2. Thompson, C.D.: A Complexity Theory for VLSI. PhD thesis, Carnegie-Mellon\nUniversity (1980)\n3. Bhatt, S.N., Leighton, F.T.: A framework for solving vlsi graph layout problems.\nTechnical report, MIT/LCS/TR-305 (1983)\n4. Leighton, F.T.: A layout strategy for vlsi which is provably good (extended abstract). In: Proceedings of the fourteenth annual ACM symposium on Theory of\ncomputing. (1982)\n5. Leighton, F.T.: New lower bound techniques for vlsi. Theory of Computing Systems\n17, 1 (1984) 47 \u2013 70\n6. F\u00f6\u00dfmeier, U., Kant, G., Kaufmann, M.: 2-visibility drawings of planar graphs. In:\nSymposium on Graph Drawing. (1996)\n7. Dean, A.M., Hutchinson, J.P.: Rectangle-visibility representations of bipartite\ngraphs. Discrete Applied Mathematics 75 (1997) 9\u201325\n8. Hutchinson, J.P., Shermer, T., Vince, A.: On representations of some thickness-two\ngraphs. Computational Geometry: Theory and Applications 13(3) (1999) 161\u2013171\n9. Streinu, I., Whitesides, S.: Rectangle visibility graphs: Characterization, construction, and compaction. In: Proceedings of the 20th Annual Symposium on Theoretical Aspects of Computer Science. (2003)\n10. Wismath, S.K.: Characterizing bar line-of-sight graphs. In: Annual Symposium\non Computational Geometry. (1985)\n11. Tamassia, R., Tollis, I.G.: A unified approach to visibility representations of planar\ngraphs. Discrete and Computational Geometry 1 (1986) 321\u2013341\n12. Bose, P., Dean, A., Hutchinson, J., Shermer, T.: On rectangle visibility graphs i:\nk-trees and caterpillar forests. Technical report, DIMACS and Simon Fraser U.\n(1996)\n13. Shermer, T.: On rectangle visibility graphs. iii: External visibility and complexity.\nIn: Proceedings of 8th Canadian Conference on Computational Geometry. (1996)\n14. Garey, M.R., Johnson, D.S.: Computers and Intractability. Freeman (1979)\n\n\fAppendix: Necessity Proof for Lemma 7\nIn this section, a full proof for the necessity of the Lemma 7 is given. Let \u03c6 denote\na boolean formula for NAE-3SAT, consisting of n variables and m clauses, and\nlet \u03c3 : X \u2192 {T, F } be a satisfying truth assignment for \u03c6. Given \u03c6, our goal is to\nshow that the bus graph G, constructed from the transformation shown in Sect.\n3.2, is realizable. We first describe how each gadget, as introduced in Sect. 3.1,\ncan be embedded within a bounding box of predefined size. Then, the overall\nembedding of G is presented by explicitly giving coordinates for each gadget\nbounding box. Finally, we show that the so-described embedding of G is a legal\nlayout of a bus graph, which completes the proof. For simplicity, we often refer\nto a bounding box as an n \u00d7 n subgrid, which is a square of size (n \u2212 1) \u00d7 (n \u2212 1),\nwith n grid points along each side.\nA. Embedding of Gadgets\nNote that the coordinates used in this section are relative to each corresponding\ngadget only.\nPerps and Flippers. We embed a perp within an 9 \u00d7 9 subgrid, as shown in\nFig. 1. In the case of the (I3 , O)-perp inside an (I, O)-chain, its incoming edge\nis connected to the grid point at the center of the bus \u0393 (I3 ). See Fig. 4 for an\nexample. Similarly, a flipper is embedded in a 9 \u00d7 9 subgrid, and the incoming\nand outgoing edges are drawn so that they lie along the same grid line as the\ncenter grid point of the subgrid. See Fig. 2 for an illustration of the embedding.\nVariable Boxes. Let a denote the maximum number of occurrences of a literal\nin \u03c6. Then, draw each variable box in a K \u00d7 K subgrid, where K = 11a + 18.\nThen, using the upper-left corner of the subgrid as the origin:\n1. Embed the horizontal outgoing edges along the grid lines y = \u221210i\n2. Embed the vertical outgoing edges along the grid lines x = 10i\nfor all i = 1 . . . a. See Fig. 6 for the embedding of a (X, 4, X, 4)-variable box.\nNotice that some literals may not appear a times in \u03c6, but the embedding reserves a fixed area for every variable box to accommodate all the occurrences of\na literal in \u03c6. Notice that all parallel outgoing edges are spaced apart by 9 grid\nlines. It is also important to note that the embedding is symmetric along the\ndiagonal of the subgrid with respect to the position of outgoing edges. This is\ncrucial for the embedding, as the orientation of the embedding is decided upon\nthe satisfying assignment \u03c3. If a variable Xi is assigned true by \u03c3, then the corresponding variable box is embedded so that the bus \u0393 (Xi ) is drawn vertically.\nOtherwise, it is embedded as a reflection about the diagonal so that \u0393 (Xi ) is\ndrawn horizontally.\n\n\fFig. 6. Embedding of a (X, 4, X, 4)-variable box. Observe that there are 16 grid points\nalong each side of the shaded region, and (10a + 1) + (a + 1) grid points on either side\nof the shaded region. The orientation in the figure assumes X =true.\n\nClause Boxes. Although not presented as a gadget in Sect. 3.2, each clause\nconnector ci can be embedded on a 40 \u00d7 40 subgrid, along with some components of (I, O)-chains joined to ci . As with the embedding of variable boxes, the\nembedding of clause boxes depends on \u03c3. Since \u03c3 is a satisfying assignment of\nNAE-3SAT, there are 2 cases for the truth assignment of each clause: (T, F, F ),\nand (T, T, F ). See Fig. 7 for the embedding of both cases. Observe that if a literal\nin the clause is assigned to true, then the (I2 , o3 )-flipper and (I3 , O)-perp component in the corresponding (I, O)-chain is drawn inside the subgrid. Otherwise,\nonly the (I3 , O)-perp component is drawn inside the subgrid. Observe that the\nincoming edges are drawn at fixed y-coordinates, regardless of the assignment\nfor the clause.\nB. Embedding of G\nWe are now ready to realize G. For an overview of the embedding, see Fig. 5.\nFirst, we begin by embedding the variable boxes. For each boolean variable Xi ,\nlay out the corresponding variable box on the subgrid bounded by x \u2208 [\u2212K, \u22121]\nand y \u2208 [(K + 10a + 2)i \u2212 K + 1, (K + 10a + 2)i], in the orientation determined\nby \u03c3. Observe that each variable box is embedded in the second quadrant, and\nevery two neighboring subgrids are 10a + 2 grid lines apart from each other.\nThen, for each clause cq , lay out the corresponding clause box on the subgrid\nbounded by x \u2208 [(K + 10a + 2)n, (K + 10a + 2)n + 39] and y \u2208 [\u221240q, \u221240q + 39].\nThe internal layout of each clause box is determined by \u03c3, but the three incoming\n\n\fFig. 7. Embedding for a clause box assigned with T, F, F (left), and a clause box assigned with T, T, F (right). Shaded boxes denote flipper components, whereas unshaded\nboxes denote perp components, for each corresponding (I, O)-chain.\n\nedges are always located at y = \u221240q + 5, y = \u221240q + 20, and y = \u221240q + 35.\nObserve that each clause box is embedded to the right of the grid line y =\n(K + 10a + 2)n.\nWe now need to lay out the (I, O)-chains that join the variable boxes with\nclause boxes. There are two types of embedding for (I, O)-chains, determined\nby the truth-assignment of the literal bus that the (I, O)-chain connects to. If\nan (I, O)-chain connects to a literal assigned true, we say that its embedding is\nof Type-T . If an (I, O)-chain connects to a literal assigned false, we say that its\nembedding is of Type-F . We describe the two embedding types separately. See\nFig. 8 for an illustration.\n\nFig. 8. Type-T embedding and Type-F embedding\n\nType-T Embedding. Let cq be the clause vertex inside the clause box, and let\norXii be the literal vertex inside the variable box. Our aim is to connect cq to orXii\n\n\fusing an (I, O)-chain. For Type-T , recall that (I2 , o3 )-flipper and (I3 , O)-perp\nare embedded within the clause box. Thus, it suffices to describe the positions\nfor the (I, o1 )-flipper and the (I1 , o2 )-flipper.\nObserve that the (I, O)-chain must exit the variable box horizontally at y =\ny1 , where y1 is the y-coordinate of orXii , and enter the clause box horizontally\nat y = y2 , where y2 is the position defined by the clause box type as shown in\nFig. 7. Place the two flippers as follows.\n1. Embed the (I, o1 )-flipper in the subgrid bounded by x, y \u2208 [y1 \u2212 4, y1 + 4].\n2. Embed the (I1 , o2 )-flipper in the subgrid bounded by x \u2208 [y1 \u2212 4, y1 + 4] and\ny \u2208 [y2 \u2212 4, y2 + 4].\nType-F Embedding. Let cq be the clause vertex inside the clause box, and\nr\nlet oXj be the literal vertex inside the variable box. Our aim is to connect cq\nr\n\nj\n\nto oXj using an (I, O)-chain. For Type-F , only the (I3 , O)-perp is embedded\nj\n\nwithin the clause box. Hence, we must describe the positions for (I, o1 )-flipper,\n(I1 , o2 )-flipper, and (I2 , o3 )-flipper.\nObserve that the (I, O)-chain must exit the variable box vertically at x = x1 ,\nr\nwhere x1 is the x-coordinate of oXj , and enter the clause box horizontally at\nj\ny = y2 , where y2 is the position defined by the clause box type as shown in\nFig. 7. Place the three flippers as follows.\n1. Embed the (I, o1 )-flipper in the subgrid bounded by x \u2208 [x1 \u2212 4, x1 + 4] and\ny \u2208 [y1 \u2212 4, y1 + 4], where y1 = (K + 10a + 2)(j \u2212 1) + 6 + 10(rj \u2212 1).\n2. Embed the (I1 , o2 )-flipper in the subgrid bounded by x, y \u2208 [y1 \u2212 4, y1 + 4].\n3. Embed the (I2 , o3 )-flipper in the subgrid bounded by x \u2208 [y1 \u2212 4, y1 + 4] and\ny \u2208 [y2 \u2212 4, y2 + 4].\nC. Correctness of the Embedding\nIn this section, we show that the embedding of G is a legal layout. To do this,\nwe refer back to the four properties stated in the problem definition in Sect. 1.\nThe first two properties hold trivially by construction. Hence, it suffices to show\nthat the other two properties hold.\nProof. We check if the properties hold as we lay out each gadget. By construction, the embedding of each individual gadget is legal. So first lay out the variable\nboxes and clause boxes. The embedding of these boxes together is legal, since no\ntwo boxes overlap. Now, lay out the (I, O)-chains and see if the two properties\nstill hold.\n(Property 3.) We say an edge passes through a gadget if the embedded edge\nenters and exits the bounding box of the gadget. Since each bus or connector\nis drawn within the bounding box of a gadget, we need to show that no edge\npasses through a gadget. Note that we need only consider the edges along the\n(I, O)-chains, as all other edges are embedded inside gadget bounding boxes.\n\n\fNotice that for each flipper f in some (I, O)-chain in the embedding, f is joined\nto other components by a horizontal edge fH and a vertical edge fV .\nNow, take a horizontal edge eH on some grid line y = y1 . There are three\ncases to consider. (1) Suppose eH passes through a flipper f in some (I, O)-chain.\nThen eH must be fewer than 4 grid lines apart from fH . This is a contradiction,\nas any two horizontal edges in the embedding are at least 9 grid lines apart from\neach other. (2) Suppose eH passes through a variable box. If y1 > 0, there is\nexactly one variable box at y = y1 , which eH connects to at its endpoint. If\ny1 \u2264 0, eH cannot reach any variable box because all variable boxes are above\nthe x-axis. This is a contradiction. (3) Suppose eH passes through a clause box.\nIf y1 \u2264 0, there is exactly one clause box at y = y1 , which eH connects to at its\nendpoint. If y1 > 0, eH cannot reach any clause box because all clause boxes are\nbelow the y-axis, hence a contradiction.\nTake a vertical edge eV on some grid line x = x1 . Note that eV cannot\npass through a clause box, since all vertical edges lie to the left of the grid line\nx = (K + 10a + 2)n. Secondly, eV cannot pass through a variable box, since the\ny-axis separates ev from variable boxes when x1 > 0, or ev completely lies within\nregion between two neighboring variable boxes when x1 \u2264 0. Finally, ev cannot\npass through flippers, either because the vertical edge fV for any flipper f is\nsufficiently far from ev , or ev and f lie in different regions separated by variable\nboxes.\n(Property 4.) We say two gadgets intersect if the bounding boxes of the two embedded gadgets intersect. Since each bus or connector is embedded within some\ngadget, if no two gadgets intersect then no buses or connectors may intersect.\nWe categorize the gadgets into 5 types as follows.\n1.\n2.\n3.\n4.\n5.\n\nType-Q1 flipper: a flipper embedded in the first quadrant\nType-Q2 flipper: a flipper embedded in the second quadrant\nType-Q4 flipper: a flipper embedded in the fourth quadrant\na variable box\na clause box\n\nIt is easy to check that each gadget belongs the exactly one of these types. By\nconstruction, no two gadgets of the same type may intersect. Take a variable box\nXi and a Type-Q2 flipper fj joined to a variable box Xj . Since fj is embedded\nstrictly below the variable box Xj and strictly above the variable box Xj+1 , Xi\nand fj cannot intersect, regardless of values for i and j.\nNow, take a clause box Ci and a Type-Q4 flipper fj joined to a clause box\nCj . Observe that the grid line x = (K + 10a + 2)n separates the embedding\nof flippers and clause boxes. Hence, Ci and fj may not intersect, regardless of\nvalues for i and j.\nFor any other pair of types, they may not intersect since they belong to\ndifferent quadrants.\n\u2293\n\u2294\n\n\f"}