{"id": "http://arxiv.org/abs/1007.2140v1", "guidislink": true, "updated": "2010-07-13T16:46:51Z", "updated_parsed": [2010, 7, 13, 16, 46, 51, 1, 194, 0], "published": "2010-07-13T16:46:51Z", "published_parsed": [2010, 7, 13, 16, 46, 51, 1, 194, 0], "title": "Symmetric Submodular Function Minimization Under Hereditary Family\n  Constraints", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1007.1305%2C1007.3901%2C1007.2548%2C1007.4811%2C1007.1700%2C1007.3664%2C1007.5117%2C1007.4606%2C1007.5499%2C1007.1415%2C1007.0013%2C1007.2662%2C1007.5510%2C1007.3462%2C1007.0662%2C1007.2672%2C1007.4676%2C1007.4681%2C1007.4627%2C1007.0512%2C1007.4272%2C1007.3606%2C1007.5076%2C1007.0802%2C1007.4274%2C1007.2812%2C1007.2326%2C1007.0532%2C1007.4528%2C1007.0694%2C1007.1239%2C1007.2724%2C1007.1776%2C1007.0176%2C1007.0368%2C1007.0873%2C1007.5008%2C1007.3785%2C1007.3805%2C1007.2757%2C1007.3097%2C1007.4097%2C1007.0612%2C1007.4116%2C1007.4143%2C1007.1964%2C1007.1192%2C1007.1024%2C1007.0619%2C1007.0593%2C1007.5118%2C1007.3747%2C1007.1482%2C1007.1389%2C1007.5513%2C1007.0806%2C1007.1322%2C1007.3448%2C1007.2603%2C1007.4469%2C1007.5281%2C1007.4910%2C1007.5436%2C1007.0623%2C1007.4231%2C1007.5257%2C1007.2855%2C1007.5023%2C1007.0533%2C1007.4089%2C1007.5351%2C1007.2999%2C1007.2312%2C1007.2568%2C1007.1860%2C1007.4620%2C1007.2684%2C1007.4066%2C1007.2598%2C1007.4711%2C1007.1083%2C1007.4340%2C1007.2140%2C1007.5372%2C1007.0602%2C1007.1370%2C1007.2532%2C1007.4615%2C1007.3877%2C1007.4487%2C1007.2592%2C1007.5078%2C1007.0486%2C1007.5333%2C1007.1563%2C1007.2286%2C1007.4576%2C1007.0881%2C1007.0622%2C1007.2038%2C1007.4554&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Symmetric Submodular Function Minimization Under Hereditary Family\n  Constraints"}, "summary": "We present an efficient algorithm to find non-empty minimizers of a symmetric\nsubmodular function over any family of sets closed under inclusion. This for\nexample includes families defined by a cardinality constraint, a knapsack\nconstraint, a matroid independence constraint, or any combination of such\nconstraints. Our algorithm make $O(n^3)$ oracle calls to the submodular\nfunction where $n$ is the cardinality of the ground set. In contrast, the\nproblem of minimizing a general submodular function under a cardinality\nconstraint is known to be inapproximable within $o(\\sqrt{n/\\log n})$ (Svitkina\nand Fleischer [2008]).\n  The algorithm is similar to an algorithm of Nagamochi and Ibaraki [1998] to\nfind all nontrivial inclusionwise minimal minimizers of a symmetric submodular\nfunction over a set of cardinality $n$ using $O(n^3)$ oracle calls. Their\nprocedure in turn is based on Queyranne's algorithm [1998] to minimize a\nsymmetric submodular", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1007.1305%2C1007.3901%2C1007.2548%2C1007.4811%2C1007.1700%2C1007.3664%2C1007.5117%2C1007.4606%2C1007.5499%2C1007.1415%2C1007.0013%2C1007.2662%2C1007.5510%2C1007.3462%2C1007.0662%2C1007.2672%2C1007.4676%2C1007.4681%2C1007.4627%2C1007.0512%2C1007.4272%2C1007.3606%2C1007.5076%2C1007.0802%2C1007.4274%2C1007.2812%2C1007.2326%2C1007.0532%2C1007.4528%2C1007.0694%2C1007.1239%2C1007.2724%2C1007.1776%2C1007.0176%2C1007.0368%2C1007.0873%2C1007.5008%2C1007.3785%2C1007.3805%2C1007.2757%2C1007.3097%2C1007.4097%2C1007.0612%2C1007.4116%2C1007.4143%2C1007.1964%2C1007.1192%2C1007.1024%2C1007.0619%2C1007.0593%2C1007.5118%2C1007.3747%2C1007.1482%2C1007.1389%2C1007.5513%2C1007.0806%2C1007.1322%2C1007.3448%2C1007.2603%2C1007.4469%2C1007.5281%2C1007.4910%2C1007.5436%2C1007.0623%2C1007.4231%2C1007.5257%2C1007.2855%2C1007.5023%2C1007.0533%2C1007.4089%2C1007.5351%2C1007.2999%2C1007.2312%2C1007.2568%2C1007.1860%2C1007.4620%2C1007.2684%2C1007.4066%2C1007.2598%2C1007.4711%2C1007.1083%2C1007.4340%2C1007.2140%2C1007.5372%2C1007.0602%2C1007.1370%2C1007.2532%2C1007.4615%2C1007.3877%2C1007.4487%2C1007.2592%2C1007.5078%2C1007.0486%2C1007.5333%2C1007.1563%2C1007.2286%2C1007.4576%2C1007.0881%2C1007.0622%2C1007.2038%2C1007.4554&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We present an efficient algorithm to find non-empty minimizers of a symmetric\nsubmodular function over any family of sets closed under inclusion. This for\nexample includes families defined by a cardinality constraint, a knapsack\nconstraint, a matroid independence constraint, or any combination of such\nconstraints. Our algorithm make $O(n^3)$ oracle calls to the submodular\nfunction where $n$ is the cardinality of the ground set. In contrast, the\nproblem of minimizing a general submodular function under a cardinality\nconstraint is known to be inapproximable within $o(\\sqrt{n/\\log n})$ (Svitkina\nand Fleischer [2008]).\n  The algorithm is similar to an algorithm of Nagamochi and Ibaraki [1998] to\nfind all nontrivial inclusionwise minimal minimizers of a symmetric submodular\nfunction over a set of cardinality $n$ using $O(n^3)$ oracle calls. Their\nprocedure in turn is based on Queyranne's algorithm [1998] to minimize a\nsymmetric submodular"}, "authors": ["Michel X. Goemans", "Jos\u00e9 A. Soto"], "author_detail": {"name": "Jos\u00e9 A. Soto"}, "author": "Jos\u00e9 A. Soto", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1137/120891502", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1007.2140v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1007.2140v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "13 pages, Submitted to SODA 2011", "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1007.2140v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1007.2140v1", "journal_reference": "SIAM J. Discrete Math., 27(2), 1123--1145. 2013", "doi": "10.1137/120891502", "fulltext": "Symmetric Submodular Function Minimization\nUnder Hereditary Family Constraints\u2217\n\narXiv:1007.2140v1 [cs.DS] 13 Jul 2010\n\nMichel X. Goemans\u2020\n\nJos\u00e9 A. Soto\u2021\n\nAbstract\nWe present an efficient algorithm to find non-empty minimizers of a symmetric submodular\nfunction over any family of sets closed under inclusion. This for example includes families defined\nby a cardinality constraint, a knapsack constraint, a matroid independence constraint, or any\ncombination of such constraints. Our algorithm make O(n3 ) oracle calls to the submodular\nfunction where n is the cardinality of the ground set. In contrast, the problem of minimizing\na generalp\nsubmodular function under a cardinality constraint is known to be inapproximable\nwithin o( n/ log n) (Svitkina and Fleischer [2008]).\nThe algorithm is similar to an algorithm of Nagamochi and Ibaraki [1998] to find all nontrivial\ninclusionwise minimal minimizers of a symmetric submodular function over a set of cardinality\nn using O(n3 ) oracle calls. Their procedure in turn is based on Queyranne's algorithm [1998]\nto minimize a symmetric submodular function.\n\n\u2217\n\nThis work was partially supported by NSF contract CCF-0829878 and by ONR grant N00014-05-1-0148.\nMIT, Dept. of Math., Cambridge, MA 02139. goemans@math.mit.edu.\n\u2021\nMIT, Dept. of Math., Cambridge, MA 02139. jsoto@math.mit.edu.\n\u2020\n\n\f1\n\nIntroduction\n\nConsider a finite set V , and a real set function f : 2V \u2192 R on V . Given two different sets A, B \u2286 V ,\nwe say that A and B are crossing if A \\ B, B \\ A, A \u2229 B and V \\ (A \u222a B) are all non-empty. The\nfunction f is submodular (resp. crossing submodular ) over V if\nf (A \u222a B) + f (A \u2229 B) \u2264 f (A) + f (B),\n\n(1)\n\nfor every pair of subsets (resp. crossing subsets) A and B of V . Observe that any submodular\nfunction is also crossing submodular, by definition. A pair (V, f ) where f is (crossing) submodular\nis called a submodular system. The function f is further called symmetric if\nf (A) = f (V \\ A), for all A \u2286 V .\n\n(2)\n\nSubmodularity is observed in a wide family of problems. The rank function of a matroid,\nthe cut function of a (weighted, directed or undirected) graph, the entropy of a set of random\nvariables, or the logarithm of the volume of the parallelipiped formed by a set of vectors are all\nexamples of submodular functions. Furthermore, many combinatorial optimization problems can\nbe formulated as minimizing a submodular function; this is for example the case for the problem\nof finding the smallest number of edges to add to make a graph k-edge-connected. Therefore, the\nfollowing problem is considered a fundamental problem in combinatorial optimization.\nUnconstrained Minimization Problem:\nA\u2217 \u2286 V that minimizes f (A\u2217 ).\n\nGiven a submodular system (V, f ), find a subset\n\nA submodular function f is usually given by an oracle which, given a set S, returns f (S).\nGr\u00f6tschel, Lov\u00e1sz and Schrijver [6, 7] show that this problem can be solved in strongly polynomial\ntime using the ellipsoid method; by running time we mean both the computation time and the\nnumber of oracle calls. Later, a collection of combinatorial strongly polynomial algorithm have\nbeen developed by several authors [2, 9, 8, 17, 21, 11]. The fastest purely combinatorial algorithms\nknown so far, due to Iwata and Orlin [11] and Orlin [17] make O(|V |5 log(|V |)) and O(|V |5 ) function\noracle calls respectively.\nWhen f has more structure, faster algorithms are known. The case where f is symmetric is of\nspecial interest. In this case, we also require the minimizer A\u2217 of f to be a nontrivial subset of V ,\nthat is \u2205 \u2282 A\u2217 \u2282 V , otherwise the problem becomes trivial since, by symmetry and submodularity,\nf (\u2205) = 12 (f (\u2205) + f (V )) \u2264 21 (f (A) + f (V \\ A)) = f (A), for all A \u2286 V .\nThe canonical example of a symmetric submodular function is the cut capacity function of a\nnonnegatively weighted undirected graph. Minimizing such a function corresponds to the minimum\ncut problem. Nagamochi and Ibaraki [13, 14] give a combinatorial algorithm to solve this problem\nwithout relying on network flows. This algorithm has been improved and simplified independently\nby Stoer and Wagner [22] and Frank [3]. Queyranne [19] generalizes this and obtains a purely combinatorial algorithm that minimizes a symmetric submodular function using only O(|V |3 ) function\noracle calls.\nIn this paper, we are interested in the problem of minimizing symmetric submodular functions\nover subfamilies of 2V that are closed under inclusion. More precisely, an hereditary family I (also\ncalled a lower ideal, or a down-monotone family) over V is defined as a collection of subsets of V\nsuch that if a set is in the family, so are all its subsets. A triple (V, f, I) where f is symmetric and\n1\n\n\fsubmodular on V , and I is an hereditary family on V is called an hereditary submodular system.\nA natural version of the minimization problem associated to hereditary submodular systems is the\nfollowing.\nHereditary Minimization Problem: Given an hereditary submodular system (V, f, I), find a\nsubset \u2205 =\n6 A\u2217 \u2208 I that minimizes f (A) over all the sets A \u2208 I.\nCommon examples of hereditary families include\n\u2022 Cardinality families: For k \u2265 0, the family of all subsets with at most k elements: I =\n{A \u2286 V : |A| \u2264 k}.\n\u2022 Knapsack families: Given a weight function\nP w : V \u2192 R+ , consider the family of all subsets\nof weight at most one unit: I = {A \u2286 V : v\u2208A w(v) \u2264 1}.\n\n\u2022 Matroid families: Given a matroid M over V , consider the family of independent sets of\nM.\n\n\u2022 Hereditary graph families: Given a graph G = (V, E), consider the family of sets S of\nvertices such that the induced subgraph G[S] satisfies some hereditary property such as being\na clique, being triangle-free, being planar (or exclude certain minors).\n\u2022 Matching families: Given a hypergraph H = (V, E), consider the family of matchings of\nH, that is sets of edges that are pairwise disjoint.\nThe hereditary minimization problem includes, for example, the problem of finding a planar induced\nsubgraph in an undirected graph minimizing the number (or the weight) of edges in its coboundary\n(i.e. with precisely one endpoint in the set).\nNoting that the intersection of hereditary families is also hereditary we can see that the previous\nminimization problem is very general.\nIn fact, for general submodular functions, this problem\np\ncannot be approximated within o( |V |/ log |V |) using a polynomial number of queries even for\nthe simpler case of cardinality families (see [23]). In this paper we focus on the symmetric case,\nextending Queyranne's algorithm as follows.\nTheorem 1. Given a symmetric and crossing submodular function f on V , and an hereditary\nfamily I of subsets of V , an optimal solution for the associated hereditary minimization problem\ncan be found using O(|V |3 ) function value oracle calls.\nIn this statement, an optimal solution refers to a nonempty set A\u2217 \u2208 I that attains the minimum\nin the hereditary minimization problem. Our algorithm in fact returns a minimal solution among\nall optimal solutions, that is one such that no proper subset of it is also optimal.\nFor the unrestricted problem, Nagamochi and Ibaraki [15] present a modification of Queyranne's\nalgorithm that finds all inclusionwise minimal minimizers of a symmetric submodular function still\nusing a cubic number of oracle calls. Using similar ideas, we can also list all minimal solutions of\nan hereditary minimization problem using only O(|V |3 ) oracle calls. As these minimal solutions\ncan be shown to be disjoint, there are at most |V | of them.\nTheorem 2. Given a symmetric and crossing submodular function f on V , and an hereditary\nfamily I of subsets of V , the collection of all minimal optimal solutions for the associated hereditary\nminimization problem can be found using O(|V |3 ) function value oracle calls.\n2\n\n\fFinally, we also give some general conditions for other classes of functions for which our methods\ncan still be applied, see Section 4. For instance, we can find all the minimal minimizers of a function\nf under hereditary constraints when f is a restriction of a symmetric submodular function (also\nknown as submodular-posimodular functions) or when f (S) is defined as d(S, V \\ S) for a monotone\nand consistent symmetric set map d in the sense of Rizzi [20]. See section 4 for definitions and\nprecise statements. An example of the latter setting is to find an induced subgraph G[S] satisfying\ncertain hereditary property (e.g. being planar or bipartite) and minimizing the maximum (weighted)\ndistance between any vertex in S and any vertex in V \\ S (and this does not define a submodular\nfunction).\nOther related work. Constrained submodular function minimization problems, i.e. the minimization of a submodular function over subfamilies of 2V , have also been studied in different\ncontexts. Padberg and Rao [18] show that the minimum odd cut problem obtained by restricting\nthe minimization over all odd sets can be solved in polynomial time. This was generalized to submodular functions over larger families of sets (satisfying certain axioms) by Gr\u00f6tschel, Lov\u00e1sz and\nSchrijver [7] and by Goemans and Ramakrishnan [5]. This covers for example the minimization\nover all even sets, or all sets not belonging to a given antichain, or all sets excluding all minimizers\n(i.e. to find the second minimum). For the particular case of minimizing a symmetric submodular\nfunction under cardinality constraints the best previous result is a 2-approximation algorithm by\nShaddin Dughmi [1]. Recently, Goel et al [4] have studied the minimization of monotone submodular functions constrained to sets satisfying combinatorial structures on graphs, such as vertex\ncovers, shortest paths, perfect matchings and spanning trees, giving inapproximability results and\nalmost matching approximation algorithms for them. Independently, Iwata and Nagano [10] study\nboth the vertex and the edge covering version of this problem.\nThe algorithm of Nagamochi and Ibaraki [15] also works with functions satisfying a less restrictive symmetry condition. Narayanan [16] shows that Queyranne's algorithm can be used to\nminimize a wider class of submodular functions, namely functions that are contractions or restrictions of symmetric submodular functions. Rizzi [20] has given further extension of this algorithm\nfor a different class of functions.\n\n2\n\nPendant pairs and Queyranne's algorithm\n\nIn this section we review Queyranne's algorithm for the unconstrained minimization problem of a\nsystem (V, f ), where f is symmetric and crossing submodular. An ordered pair (t, u) of elements\nof V is called a pendant pair for (V, f ) if {u} has the minimum f -value among all the subsets of V\ncontaining u but not t, that is:\nf ({u}) = min{f (U ) : U \u2282 V, t 6\u2208 U and u \u2208 U }.\n\n(3)\n\nWe can find a pendant pair by constructing an ordering v1 , . . . , vn of the elements of V , with\n|V | = n, such that\nf (Wi\u22121 + vi ) \u2212 f (vi ) \u2264 f (Wi\u22121 + vj ) \u2212 f (vj ), for all 2 \u2264 i \u2264 j \u2264 n,\n\n(4)\n\nwhere v1 can be chosen arbitrarily, and Wi denotes the set {v1 , . . . , vi }. In the above inequality,\nwe have used the notation W + v for W \u222a {v}. An order successively satisfying (4) is called a legal\norder. Queyranne [19] shows the following result:\n3\n\n\fLemma 3. For a symmetric and crossing submodular function f on V , and an arbitrarily chosen\nelement v1 \u2208 V , the last two elements (vn\u22121 , vn ) of a legal order of V starting from v1 constitute a\npendant pair. Furthermore, this legal ordering can be found by using O(|V |2 ) function value oracle\ncalls.\nQueyranne proves this for a symmetric and submodular function f . However, as observed by\nNagamochi and Ibaraki [15], this proof only requires symmetry and crossing submodularity, so\nLemma 3 holds.\nObserve that if (t, u) is a pendant pair for a symmetric and crossing submodular function f ,\nand X \u2217 is an optimal set, then either X \u2217 separates t from u, in which case {u} must also be an\noptimal solution, or X \u2217 does not separate t from u. In the latter case we can contract the pair t\nand u into t (for simplicity, we reuse t), this is, consider the symmetric and crossing submodular\nfunction f \u2032 on V \u2032 = V \\ {u} defined by:\n(\nf (X),\nif t 6\u2208 X \u2286 V \u2032\n\u2032\n(5)\nf (X) =\nf (X + u), if t \u2208 X \u2286 V \u2032 .\nNow (still assuming that not all minimums of f separate t and u), we can obtain an optimal solution\nX \u2217 for f from an optimal solution X\u0302 for f \u2032 . If t \u2208\n/ X\u0302, we set X \u2217 = X\u0302, while if t \u2208 X\u0302, we set\n\u2217\nX = X\u0302 + u. Applying this argument n \u2212 1 times and Lemma 3, one can find an optimal solution\nfor the original function by using O(|V |3 ) function value oracle calls.\nBy exploiting the fact that the first element in a legal order can be chosen arbitrarily, we modify\nthe above argument to also work in the hereditary version. In order to do this, it is useful to extend\nthe notion of contraction as follows.\nDefinition 4. Given an hereditary submodular system (V, f, I), an element t \u2208 V and a set of\nelements L \u2286 V containing t, the system (V \u2032 , f \u2032 , I \u2032 ) obtained by contracting L into t is defined as\nfollows\nV \u2032 = V \\ L + t;\n(\nf (X),\nif t 6\u2208 X \u2286 V \u2032\n\u2032\nf (X) =\nf (X \u222a L), if t \u2208 X \u2286 V \u2032 ;\nI \u2032 = {X \u2286 V \u2032 : t \u2208 X, X \u222a L \u2208 I} \u222a {X \u2286 V \u2032 : t 6\u2208 X, X \u2208 I}.\n\n(6)\n(7)\n(8)\n\nIt is easy to check that this construction preserves submodularity (even crossing submodularity)\nand symmetry, and that the new family I \u2032 is also hereditary. In the next section we use this notion\nof contraction iteratively, so it is useful to explore some of its properties. We associate to each\nelement w of the ground set of a particular iteration the subset Xw of elements in the original\nground set that have been contracted to it so far. It is easy to check that a set A of elements\nS in the\ncurrent ground set belongs to the contracted hereditary family if and only if the set XA = w\u2208A Xw\nis a member of the original hereditary family, and in fact, for every set A in the contracted family,\nf \u2032 (A) = f (XA ). We also need some extra notions. An element v \u2208 V such that {v} 6\u2208 I is called\na loop of I. In particular, if s is a loop in the original family and we contract some elements into\ns then, in the resulting contracted family, s is still a loop (by the hereditary property). Also, for\nany two (possibly contracted) elements t and u of V \u2032 , we say that a set X \u2286 V separates t and u\nif Xt \u2286 X and Xu \u2286 V \\ X or vice versa.\n4\n\n\f3\n\nHereditary minimization problem\n\nIn what follows, assume that f is a symmetric and crossing submodular function on V , and I is a\nnon-trivial hereditary family (i.e. V 6\u2208 I). We show how to compute all minimal optimal solutions\nof the hereditary minimization problem given by (V, f, I).\nNote that if X and Y are two minimal solutions in I that cross then X \\ Y and Y \\ X are\nalso in I and, by minimality, we have f (X \\ Y ) > f (X) and f (Y \\ X) > f (Y ), implying that\nf (X \\ Y ) + f (Y \\ X) > f (X) + f (Y ). Since X and Y cross, the sets X and V \\ Y are also crossing\nand so, using the symmetry and crossing submodularity of f we also get\nf (X \\ Y ) + f (Y \\ X) \u2264 f (X) + f (Y ),\ncontradicting our assumptions. Now suppose that X and Y are minimal solutions that intersect\nbut not cross (i.e. X \u222a Y = V ), then by symmetry V \\ X \u2282 Y and V \\ Y \u2282 X are also optimal\nsolutions, contradicting the minimality of the original sets. The previous discussion implies that all\nminimal solutions are pairwise disjoint and, in particular, there are only a linear number of them.\nProposition 5. Given a symmetric and crossing submodular function f on V , and an hereditary\nfamily I of subsets of V , the collection of all minimal optimal solutions for the associated hereditary\nminimization problem are disjoint.\nIn what follows we present two algorithms, one to find a particular minimal optimal solution\nof the system and another to find all of them. We remark here that both algorithms are direct\nextensions of the algorithms presented by Nagamochi and Ibaraki [15], and in fact if we set I to\nbe the hereditary family of sets not containing a particular element s, we recover their algorithms.\nSince f is crossing submodular we can use Queyranne's lemma to find a pendant pair (t, u),\nkeep the set associated to u as a candidate for the optimal solution, contract the pendant pair and\ncontinue. However, this might introduce candidates that are not in the original hereditary family.\nIn order to avoid that, we first contract all the loops, if any, of I into a single loop s, and proceed\nto find a pendant pair not containing it, by using s as the first element of the legal order. In this\nway, we can ensure that every candidate for optimal solution belongs to I. If the hereditary family\nhas no loops, then we simply use Queyranne's procedure until a loop s is created. From that point\non we continue as before. The complete procedure is depicted in Algorithm 1.\nTheorem 6. Given a symmetric and crossing submodular function f on V , and an hereditary family I of subsets of V , Algorithm 1 outputs a minimal optimal solution for the associated hereditary\nminimization problem in O(|V |3 ) function value oracle calls.\nLet us check the correctness of the algorithm. By induction we can check that at the beginning\nof each iteration, either I \u2032 is loopless or s is its only loop. From here, we get that the element u\nof the pendant pair (t, u) found by the algorithm is not a loop of I \u2032 , and thus, every candidate set\nXu is an element of the original hereditary family I.\nTo check optimality of X \u2217 , we claim that if there is a non-empty set Y \u2208 I such that f (Y ) <\nf (X \u2217 ), then this set Y must separate t and u for some pendant pair (t, u) found in the execution of\nthe algorithm. Indeed, suppose that this was not the case. Then, by induction, for every element v\nof the ground set at a particular iteration, the associated set Xv of elements in the original ground\nset that have been contracted into v so far, is always either completely inside Y or completely\noutside Y . In particular, in the last iteration Xs must always be outside Y . Therefore, at the end\n5\n\n\fAlgorithm 1 FindOptimal (V, f, I)\nInput: A submodular system (V, f, I) where f is symmetric and crossing submodular, and I is\nnot trivial.\nOutput: An optimal set X \u2217 for the hereditary minimization problem.\n1: Let (V \u2032 , f \u2032 , I \u2032 ) = (V, f, I), and C = \u2205.\n\u22b2 C is the set of candidates.\n2: while I has no loops do\n3:\nFind any pendant pair (t, u) of f \u2032 .\n4:\nAdd Xu to C.\n\u22b2 Xu is the set of elements of V that have been contracted to u.\n\u2032\n\u2032\n\u2032\n5:\nUpdate (V , f , I ) by contracting {t, u} into t.\n6: end while\n\u22b2 I \u2032 has at least one loop.\n7: Let (V \u2032 + s, f \u2032 , I \u2032 ) be the system obtained by contracting all the loops of I into s (during the\nrest of the algorithm, we keep s as an element outside V \u2032 )\n8: while |V \u2032 | \u2265 2 do\n9:\nFind a pendant pair (t, u) of f \u2032 not containing s.\n10:\nAdd Xu to C.\n11:\nif {t, u} \u2208 I \u2032 then\n12:\nUpdate (V \u2032 + s, f \u2032 , I \u2032 ) by contracting {t, u} into t.\n13:\nelse\n14:\nUpdate (V \u2032 + s, f \u2032 , I \u2032 ) by contracting {s, t, u} into s.\n15:\nend if\n16: end while\n17: if |V \u2032 | = 1 (say V \u2032 = {t}) then\n18:\nAdd Xt to C.\n19: end if\n20: Return the set X \u2217 in C with minimum f -value that was added first to C.\nof the algorithm, Y must be equal to the set Xt defined in line 18 and so it is included in the set of\ncandidates, contradicting the definition of X \u2217 . Consider then the first pendant pair (t, u) separated\nby Y . By the property of pendant pairs, f \u2032 ({u}) \u2264 f (Y ) for the function f \u2032 at that iteration.\nBut then, the set Xu \u2208 V of elements that were contracted to u is a candidate considered by the\nalgorithm. Therefore f (X \u2217 ) \u2264 f (Xu ) = f \u2032 ({u}) \u2264 f (Y ), which contradicts our assumption.\nFurthermore, since we choose X \u2217 as the set that is introduced first into the family of candidates\nC (among the ones of minimum value), then this set X \u2217 is also be a minimal optimal solution of\n(V, f, I). Indeed, if there is a set Y \u2208 I such that f (Y ) = f (X \u2217 ), with \u2205 =\n6 Y \u2282 X \u2217 , then this\n\u2217\nset must separate two elements of X . This means that at some moment before the introduction\nof X \u2217 as a candidate, the algorithm finds a pendant pair (t, u) separated by the set Y with both\nt, u \u2208 X \u2217 . At this iteration, the candidate Xu introduced is such that f (Xu ) = f (Y ) = f (X \u2217 ),\nwhich is a contradiction since Xu is introduced earlier than X \u2217 to the set of candidates.\nIn order to achieve O(|V |3 ) function value oracle calls we don't compute the functions f \u2032 explicitly, but instead we keep track of the partition of V induced by the contraction of the elements. By\nusing the fact that each iteration decreases the cardinality of V \u2032 by one or two units and Lemma\n3 we obtain the desired bound on the number of function value oracle calls. This completes the\nproof of Theorem 6 (and hence of Theorem 1 as well).\nWe can use the fact that the minimal solutions are disjoint to find all minimal solutions. We\nfirst compute one particular minimal solution X \u2217 of the system and contract it into a single element\n6\n\n\fs which we will consider a loop for the new family. Then we run the algorithm again in such a way\nthat, every time a minimal solution X is found we contract X + s into s in order to avoid finding\nsolutions containing X after that. The procedure is described in Algorithm 2.\nAlgorithm 2 FindMinimals (V, f, I)\nInput: A submodular system (V, f, I) where f is symmetric and crossing submodular and I is not\ntrivial.\nOutput: The family F of minimal optimal solutions for the hereditary minimization problem.\n1: Compute, using FindOptimal, a minimal optimal solution X \u2217 for the system. Let \u03bb\u2217 = f (X \u2217 ).\n2: Let (V \u2032 + s, f \u2032 , I \u2032 ) be the system obtained by contracting X \u2217 and all the loops of I into a single\nelement, denoted s. (During the execution of the algorithm, we keep s as an element outside\nV \u2032 .)\n3: I \u2032 \u2190 I \u2032 \\ {A \u2208 I \u2032 : s \u2208 A}.\n\u22b2 If s is not a loop, we consider it as one.\n4: Let F = {X \u2217 }.\n5: for each v \u2208 V with f \u2032 ({v}) = \u03bb\u2217 do\n6:\nAdd {v} to F\n7:\nUpdate (V \u2032 + s, f \u2032 , I \u2032 ) by contracting {s, v} into s.\n8: end for\n9: while |V \u2032 | \u2265 2 do\n\u22b2 f \u2032 ({v}) > \u03bb\u2217 for all v \u2208 V \u2032 , and s is the only loop of I \u2032 .\n\u2032\n10:\nFind a pendant pair (t, u) of f not containing s.\n11:\nif {t, u} \u2208 I \u2032 and f \u2032 ({t, u}) = \u03bb\u2217 then\n12:\nAdd Xt \u222a Xu to F.\n13:\nUpdate (V \u2032 + s, f \u2032 , I \u2032 ) by contracting {s, t, u} into s.\n14:\nelse if {t, u} \u2208 I \u2032 and f \u2032 ({t, u}) > \u03bb\u2217 then\n15:\nUpdate (V \u2032 + s, f \u2032 , I \u2032 ) by contracting {t, u} into t.\n16:\nelse\n\u22b2 {t, u} 6\u2208 I \u2032 .\n\u2032\n\u2032\n\u2032\n17:\nUpdate (V + s, f , I ) by contracting {s, t, u} into s.\n18:\nend if\n19: end while\n20: Return the family F.\nTheorem 7. Given a symmetric and crossing submodular function f on V , and an hereditary\nfamily I of subsets of V , Algorithm 2 outputs the collection of all minimal optimal solutions for\nthe associated hereditary minimization problem in O(|V |3 ) function value oracle calls.\nBy the previous discussion, we can see that every set added to F during the execution of this\nalgorithm is a minimal optimal solution of (V, f, I). We only need to show that no other minimal\noptimal solution exists. Assume that this is not the case, i.e. that there is a nonempty set Y \u2208 I\nthat is a minimal optimal solution of (V, f, I) with Y 6\u2208 F.\nWe first claim that at every moment and for every v \u2208 V \u2032 + s, the associated set Xv is always\ncompletely inside or completely outside Y . We prove this by induction. The claim is true at the\nbeginning of the algorithm, and immediately after all the optimal singletons are added to F and\ncontracted into s. Suppose that the claim holds at the beginning of an iteration in the while-loop\nand let (t, u) be the pendant pair found at that moment. We note that Y can't separate t from\nu, since in that case we would have f \u2032 ({u}) = f (Y ) = \u03bb\u2217 . But, by construction, the algorithm\nensures that at every iteration the singletons are not optimal, i.e., f \u2032 ({v}) > \u03bb\u2217 for every v \u2208 V \u2032 .\n7\n\n\fIt follows that both Xt and Xu are either completely inside or completely outside Y . If all the\nelements participating in a contraction at this iteration are completely inside or completely outside\nY then the claim will still hold at the end of the iteration. The only case left to consider is that\nXt \u222a Xu \u2286 Y , Xs \u2286 V \\ Y and we contract {s, t, u} into s. We only do this when {t, u} \u2208 I \u2032 and\nf \u2032 ({t, u}) = \u03bb\u2217 or when {t, u} 6\u2208 I \u2032 . Since Y \u2208 I, we must be in the first case, and so, according\nto the algorithm, Xt,u = Xt \u222a Xu gets added to F. By minimality of Y we obtain Y = Xt,u which\ncontradicts the fact that Y 6\u2208 F. This proves the claim.\nSince Y is never added to F, and Xs \u2287 X \u2217 is completely outside Y , the previous claim implies\nthat after the while-loop, the set Y must correspond to the unique element in V \u2032 , say Y = Xt ,\nfor V \u2032 = {t}. But by construction, we know that a singleton cannot be optimal, reaching a\ncontradiction. This proves the correctness of the algorithm and, using the fact that both algorithms\npresented compute pendant pairs O(|V |) times, it also completes the proof of Theorem 7.\n\n4\n\nExtensions\n\nWe observe here that the proof of correctness of the first algorithm relies only on the fact that\nwe can find pendant pairs not containing a particular element s in each iteration. The second\nalgorithm also needs that minimal optimal solutions are disjoint. We can use this to generalize the\nprevious results to wider classes of functions.\nGiven a set function f on V , and a partition \u03a0 (= {V1 , V2 , * * * , Vk }) of V , we define the fusion\nof f relative to \u03a0 (also called the induced set function on \u03a0), denoted by f\u03a0 , to be the function\ndefined on subsets X \u2286 \u03a0 by\n\u0012[ \u0013\nS .\nf\u03a0 (X) = f\nS\u2208X\n\nWe say that a set function f on V is admissible if for every partition \u03a0 of V in at least three parts,\nand for every S \u2208 \u03a0, the function f\u03a0 admits a pendant pair (defined as before) avoiding S, that is,\na pendant pair (T, U ) with S 6\u2208 {T, U }. We observe that if f is a symmetric crossing submodular\nfunction on V , so are all the functions induced by partitions. Lemma 3 says not only that symmetric\ncrossing submodular functions are admissible (a fact originally proven by Mader [12]), but that for\nevery induced function we can find such a pendant pair efficiently: for each f\u03a0 we use O(|\u03a0|2 )\noracle calls to f .\nThe discussion at the beginning of this section implies the following result.\nTheorem 8. Given an hereditary family I on V and an admissible function f on V such that for\nany partition \u03a0 of V in at least three parts and for every S \u2208 \u03a0 we can find a pendant pair avoiding\nS using T (|\u03a0|) calls to some oracle. Then, there is an algorithm that finds a minimal optimal\nsolution for the associated hereditary minimization problem using O(|V | * T (|V |)) oracle calls. If\nwe can further ensure that minimal solutions are disjoint, then we can find all minimal solutions\nusing O(|V | * T (|V |)) oracle calls.\nRizzi [20] exhibits a wider class of admissible functions for which pendant pairs can be found\nefficiently. Consider a real valued map d defined on pairs of disjoint subsets of V , that satisfies:\n1. Symmetry: d(A, B) = d(B, A) for every A, B disjoint.\n2. Monotonicity: d(A, B) \u2264 d(A, B \u222a W ) for every A, B, W pairwise disjoint.\n\n8\n\n\f3. Consistency: d(A, W ) \u2265 d(B, W ) implies that d(A, W \u222aB) \u2265 d(B, W \u222aA) for every A, B, W\npairwise disjoint.\nFor example, if G is a graph with vertex set V then the function d(A, B) defined as the\nweight of the edges having one endpoint in A and the other in B satisfies the previous properties. More generally, if f is a symmetric crossing submodular function then the function d(A, B) =\n1\n2 (f (A) + f (B) \u2212 f (A \u222a B)) is symmetric, monotone and consistent. The following more interesting\nexample shows that if d is symmetric, monotone and consistent then f (S) = d(S, V \\S) is not necessarily a (crossing) submodular function. This example is given by Rizzi. Given a weighted graph G\non V , let \u03bb(u, v) be the shortest path distance between u and v, and define the function d(A, B) as\nthe maximum value of \u03bb(u, v) for u \u2208 A and b \u2208 B. It is easy to check that this map is symmetric,\nmonotone and consistent. The coresponding function f given by f (S) = d(S, V \\S) is, however, not\ncrossing submodular. Consider indeed the 4-cycle (V, E) = {{a, b, c, d}, {ab, bc, cd, da}} with unit\nweights. We have 3 = f ({a, c}) + f ({a, d}) < f ({a, c, d}) + f ({a}) = 4, and so it is not (crossing)\nsubmodular.\nIn our terminology, Rizzi shows that for every such function d, the set function f (S) = d(S, V \\S)\nis admissible and we can find a pendant pair avoiding any element by using a procedure similar to\nQueyranne's. This procedure uses O(|V |2 ) oracle calls for d. Our theorem then implies that we can\nfind one minimal minimizer for an admissible function f constrained to a hereditary family using\nO(|V |3 ) oracle calls.\nOur second algorithm to find all minimal optimal solutions when restricted to a hereditary\nfamily also applies to set functions f arising from a symmetric, monotone and consistent map d,\nas we can argue that the minimal optimal solutions are disjoint.\nLemma 9. Let d be a symmetric, monotone and consistent map on V as defined above, and let\nf be defined by f (S) = d(S, V \\ S) for all S \u2282 V . Let I be an hereditary family of subsets of V .\nThen the minimal minimizers of f constrained to I are disjoint.\nProof. Let S and T be two intersecting minimal minimizers of f over I. Since I is hereditary, S \\ T\nand T \\ S are also in I, and by minimality, we have that f (S \\ T ) > f (S) and f (T \\ S) > f (T ).\nBy the consistency assumption applied to A = V \\ T , B = T \\ S and W = S \u2229 T , we derive\nthat d(B, W ) > d(A, W ), i.e. d(T \\ S, S \u2229 T ) > d(V \\ T, S \u2229 T ). Furthermore, by monotonicity, we\nget d(V \\ T, S \u2229 T ) \u2265 d(S \\ T, S \u2229 T ) implying that\nd(T \\ S, S \u2229 T ) > d(S \\ T, S \u2229 T ).\nBut, by exchanging the roles of S and T , we get the reverse inequality, contradicting the fact that\ntwo minimal minimizers can intersect.\nAnother line of generalization is the one proposed by Nagamochi and Ibaraki [15] and Narayanan [16].\nThey consider restrictions of symmetric and crossing submodular functions. Note that if h is a\nsymmetric and crossing submodular function on V , and T is a nonempty subset T of V , then the\nrestriction f of h to the set T defined as f (X) = h(X) for all X \u2286 T is intersecting submodular\n(i.e. the submodular inequality holds for any pair of intersecting sets A, B \u2286 V , that is sets with\nA \\ B 6= \u2205, B \\ A 6= \u2205, and A \u2229 B 6= \u2205), but it is not necessarily symmetric. However, it still satisfies\na weaker property known as intersecting posimodularity, that is:\nf (A \\ B) + f (B \\ A) \u2264 f (A) + f (B),\n9\n\n(9)\n\n\ffor every pair of intersecting subsets A and B of V . In fact, it is easy to see that any intersecting\nsubmodular and intersecting posimodular function can be obtained as a restriction of a symmetric\ncrossing submodular function (see [16]). To be precise, if f is intersecting submodular and intersecting posimodular on V , and s is an element outside V , then the antirestriction function g on\nV + s defined as:\n(\nf (X),\nif s 6\u2208 X\n(10)\ng(X) =\nf (V \\ X), if s \u2208 X.\nis a symmetric and crossing submodular function on V + s. Note also that for any hereditary\nfamily I on V , the set of optimal solutions of the system (V, f, I) is the same as the set of optimal\nsolutions of (V + s, g, I), and so, we can find all the minimal minimizers of the original system by\napplying our algorithms to the second one. This type of functions appears very often, for example,\nthe sum of a symmetric submodular function with a modular function is clearly posimodular but\nit is not necessarily symmetric.\nIt is worth noting at this point that we can also use our methods to find all the inclusionwise maximum minimizers of contractions (in the submodular sense) of symmetric and crossing submodular\nfunctions constrained to co-hereditary families (closed under union). Given a symmetric crossing\nsubmodular function h on V , and a nonempty set T \u2286 V , the contraction f of h to the nonempty\nsubset T of V is defined as f (X) = h(X \u222a(V \\T ))\u2212h(V \\T ). Then, it is easy to see that the function\nf \u0304 : T \u2192 R defined as f \u0304(X) = f (T \\ X) is intersecting submodular and intersecting posimodular\nsince f \u0304(X) = f (T \\X) = h(T \\X \u222a(V \\T ))\u2212h(V \\T ) = h(V \\X)\u2212h(V \\T ) = h(X)\u2212h(V \\T ). And\nso, in order to find all the maximum minimizers of f under a co-hereditary family I of T we can\nsimply find the minimum minimizers of f \u0304 under the hereditary family formed by the complements\nof the sets in I.\nAcknowledgment: We would like to thank Shaddin Dughmi and Jan Vondrak for introducing\nus to the problem of minimizing submodular functions under cardinality constraints and for very\nuseful discussions.\n\nReferences\n[1] S. Dughmi. Submodular functions: Extensions, distributions, and algorithms a survey, 2009.\nPhD Qualifying Exam Report, Department of Computer Science, Stanford University.\n[2] L. Fleischer and S. Iwata. A push-relabel framework for submodular function minimization\nand applications to parametric optimization. Discrete Applied Mathematics, 131(2):311\u2013322,\nSept. 2003.\n[3] A. Frank. On the edge-connectivity algorithm of Nagamochi and Ibaraki. Laboratoire Artemis,\nIMAG, Universit\u00e9 J. Fourier, Grenoble, 1994.\n[4] G. Goel, C. Karande, P. Tripathi, and L. Wang. Approximability of combinatorial problems\nwith multi-agent submodular cost functions. In Proceedings of the 50th Annual IEEE Symposium on Foundations of Computer Science, pages 755\u2013764, 2009.\n[5] M. X. Goemans and V. S. Ramakrishnan. Minimizing submodular functions over families of\nsets. Combinatorica, 15(4):499\u2013513, Dec. 1995.\n10\n\n\f[6] M. Gr\u00f6tschel, L. Lov\u00e1sz, and A. Schrijver. The ellipsoid method and its consequences in\ncombinatorial optimization. Combinatorica, 1(2):169\u2013197, 1981.\n[7] M. Gr\u00f6tschel, L. Lov\u00e1sz, and A. Schrijver. Geometric algorithms and combinatorial optimization. Second edition. Springer-Verlag (Berlin), 1993.\n[8] S. Iwata. A fully combinatorial algorithm for submodular function minimization. Journal of\nCombinatorial Theory, Series B, 84(2):203\u2013212, Mar. 2002.\n[9] S. Iwata, L. Fleischer, and S. Fujishige. A combinatorial strongly polynomial algorithm for\nminimizing submodular functions. Journal of the ACM, 48(4):761\u2013777, 2001.\n[10] S. Iwata and K. Nagano. Submodular function minimization under covering constraints. In\nProceedings of the 50th Annual IEEE Symposium on Foundations of Computer Science, pages\n671\u2013680, 2009.\n[11] S. Iwata and J. B. Orlin. A simple combinatorial algorithm for submodular function minimization. In Proceedings of the Twentieth Annual ACM -SIAM Symposium on Discrete Algorithms,\npages 1230\u20131237, 2009.\n[12] W. Mader. \u00dcber n-fach zusammenh\u00e4ngende eckenmengen in graphen. Journal of Combinatorial Theory. Series B, 25(1):74\u201393, 1978.\n[13] H. Nagamochi and T. Ibaraki. Computing Edge-Connectivity in multigraphs and capacitated\ngraphs. SIAM Journal on Discrete Mathematics, 5(1):54\u201366, Feb. 1992.\n[14] H. Nagamochi and T. Ibaraki. A linear-time algorithm for finding a sparse k -connected\nspanning subgraph of a k -connected graph. Algorithmica, 7(1):583\u2013596, June 1992.\n[15] H. Nagamochi and T. Ibaraki. A note on minimizing submodular functions. Information\nProcessing Letters, 67(5):239\u2013244, Sept. 1998.\n[16] H. Narayanan. A note on the minimization of symmetric and general submodular functions.\nDiscrete Applied Mathematics, 131(2):513\u2013522, 2003.\n[17] J. B. Orlin. A faster strongly polynomial time algorithm for submodular function minimization.\nMathematical Programming, 118(2):237\u2013251, 2007.\n[18] M. Padberg and M. Rao. Odd minimum cut-sets and b-matchings. Mathematics of Operations\nResearch, 7:67\u201380, 1982.\n[19] M. Queyranne. Minimizing symmetric submodular functions. Mathematical Programming,\n82(1):3\u201312, June 1998.\n[20] R. Rizzi. On minimizing symmetric set functions. Combinatorica, 20(3):445\u2013450, Mar. 2000.\n[21] A. Schrijver. A combinatorial algorithm minimizing submodular functions in strongly polynomial time. Journal of Combinatorial Theory. Series B, 80(2):346\u2013355, 2000.\n[22] M. Stoer and F. Wagner. A simple min-cut algorithm. Journal of the ACM, 44(4):585\u2013591,\n1997.\n\n11\n\n\f[23] Z. Svitkina and L. Fleischer. Submodular approximation: Sampling-based algorithms and\nlower bounds. In Proceedings of the 49th Annual IEEE Symposium on Foundations of Computer Science, pages 697\u2013706, 2008.\n\n12\n\n\f"}