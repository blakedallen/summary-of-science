{"id": "http://arxiv.org/abs/1203.3593v1", "guidislink": true, "updated": "2012-03-16T00:31:18Z", "updated_parsed": [2012, 3, 16, 0, 31, 18, 4, 76, 0], "published": "2012-03-16T00:31:18Z", "published_parsed": [2012, 3, 16, 0, 31, 18, 4, 76, 0], "title": "Ad Serving Using a Compact Allocation Plan", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1203.6067%2C1203.5463%2C1203.2907%2C1203.2382%2C1203.5871%2C1203.3431%2C1203.0067%2C1203.1219%2C1203.4326%2C1203.5389%2C1203.1230%2C1203.1337%2C1203.0848%2C1203.0830%2C1203.5848%2C1203.3593%2C1203.4992%2C1203.2053%2C1203.6837%2C1203.2928%2C1203.4698%2C1203.1709%2C1203.4337%2C1203.4580%2C1203.6666%2C1203.2660%2C1203.2510%2C1203.6149%2C1203.6388%2C1203.2824%2C1203.5814%2C1203.0173%2C1203.3901%2C1203.1488%2C1203.5355%2C1203.3131%2C1203.0990%2C1203.2969%2C1203.0311%2C1203.2395%2C1203.5749%2C1203.0735%2C1203.5619%2C1203.5171%2C1203.2213%2C1203.2068%2C1203.5990%2C1203.4415%2C1203.5314%2C1203.2132%2C1203.1189%2C1203.6381%2C1203.2371%2C1203.1019%2C1203.1828%2C1203.4106%2C1203.4873%2C1203.0081%2C1203.2865%2C1203.0121%2C1203.5212%2C1203.5436%2C1203.6118%2C1203.4313%2C1203.5474%2C1203.3716%2C1203.5128%2C1203.3629%2C1203.6594%2C1203.4727%2C1203.1319%2C1203.6525%2C1203.6716%2C1203.2302%2C1203.1854%2C1203.1041%2C1203.3389%2C1203.3009%2C1203.4526%2C1203.3878%2C1203.6505%2C1203.6512%2C1203.3468%2C1203.2458%2C1203.3634%2C1203.2203%2C1203.1705%2C1203.0895%2C1203.2831%2C1203.6305%2C1203.2397%2C1203.3424%2C1203.1024%2C1203.1002%2C1203.6557%2C1203.4165%2C1203.2778%2C1203.0570%2C1203.6653%2C1203.1147%2C1203.1099&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Ad Serving Using a Compact Allocation Plan"}, "summary": "A large fraction of online display advertising is sold via guaranteed\ncontracts: a publisher guarantees to the advertiser a certain number of user\nvisits satisfying the targeting predicates of the contract. The publisher is\nthen tasked with solving the ad serving problem - given a user visit, which of\nthe thousands of matching contracts should be displayed, so that by the\nexpiration time every contract has obtained the requisite number of user\nvisits. The challenges of the problem come from (1) the sheer size of the\nproblem being solved, with tens of thousands of contracts and billions of user\nvisits, (2) the unpredictability of user behavior, since these contracts are\nsold months ahead of time, when only a forecast of user visits is available and\n(3) the minute amount of resources available online, as an ad server must\nrespond with a matching contract in a fraction of a second.\n  We present a solution to the guaranteed delivery ad serving problem using\n{\\em compact allocation plans}. These plans, computed offline, can be\nefficiently queried by the ad server during an ad call; they are small, using\nonly O(1) space for contract; and are stateless, allowing for distributed\nserving without any central coordination. We evaluate this approach on a real\nset of user visits and guaranteed contracts and show that the compact\nallocation plans are an effective way of solving the guaranteed delivery ad\nserving problem.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1203.6067%2C1203.5463%2C1203.2907%2C1203.2382%2C1203.5871%2C1203.3431%2C1203.0067%2C1203.1219%2C1203.4326%2C1203.5389%2C1203.1230%2C1203.1337%2C1203.0848%2C1203.0830%2C1203.5848%2C1203.3593%2C1203.4992%2C1203.2053%2C1203.6837%2C1203.2928%2C1203.4698%2C1203.1709%2C1203.4337%2C1203.4580%2C1203.6666%2C1203.2660%2C1203.2510%2C1203.6149%2C1203.6388%2C1203.2824%2C1203.5814%2C1203.0173%2C1203.3901%2C1203.1488%2C1203.5355%2C1203.3131%2C1203.0990%2C1203.2969%2C1203.0311%2C1203.2395%2C1203.5749%2C1203.0735%2C1203.5619%2C1203.5171%2C1203.2213%2C1203.2068%2C1203.5990%2C1203.4415%2C1203.5314%2C1203.2132%2C1203.1189%2C1203.6381%2C1203.2371%2C1203.1019%2C1203.1828%2C1203.4106%2C1203.4873%2C1203.0081%2C1203.2865%2C1203.0121%2C1203.5212%2C1203.5436%2C1203.6118%2C1203.4313%2C1203.5474%2C1203.3716%2C1203.5128%2C1203.3629%2C1203.6594%2C1203.4727%2C1203.1319%2C1203.6525%2C1203.6716%2C1203.2302%2C1203.1854%2C1203.1041%2C1203.3389%2C1203.3009%2C1203.4526%2C1203.3878%2C1203.6505%2C1203.6512%2C1203.3468%2C1203.2458%2C1203.3634%2C1203.2203%2C1203.1705%2C1203.0895%2C1203.2831%2C1203.6305%2C1203.2397%2C1203.3424%2C1203.1024%2C1203.1002%2C1203.6557%2C1203.4165%2C1203.2778%2C1203.0570%2C1203.6653%2C1203.1147%2C1203.1099&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "A large fraction of online display advertising is sold via guaranteed\ncontracts: a publisher guarantees to the advertiser a certain number of user\nvisits satisfying the targeting predicates of the contract. The publisher is\nthen tasked with solving the ad serving problem - given a user visit, which of\nthe thousands of matching contracts should be displayed, so that by the\nexpiration time every contract has obtained the requisite number of user\nvisits. The challenges of the problem come from (1) the sheer size of the\nproblem being solved, with tens of thousands of contracts and billions of user\nvisits, (2) the unpredictability of user behavior, since these contracts are\nsold months ahead of time, when only a forecast of user visits is available and\n(3) the minute amount of resources available online, as an ad server must\nrespond with a matching contract in a fraction of a second.\n  We present a solution to the guaranteed delivery ad serving problem using\n{\\em compact allocation plans}. These plans, computed offline, can be\nefficiently queried by the ad server during an ad call; they are small, using\nonly O(1) space for contract; and are stateless, allowing for distributed\nserving without any central coordination. We evaluate this approach on a real\nset of user visits and guaranteed contracts and show that the compact\nallocation plans are an effective way of solving the guaranteed delivery ad\nserving problem."}, "authors": ["Peiji Chen", "Wenjing Ma", "Srinath Mandalapu", "Chandrashekhar Nagarajan", "Jayavel Shanmugasundaram", "Sergei Vassilvitskii", "Erik Vee", "Manfai Yu", "Jason Zien"], "author_detail": {"name": "Jason Zien"}, "author": "Jason Zien", "links": [{"href": "http://arxiv.org/abs/1203.3593v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1203.3593v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.DS", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1203.3593v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1203.3593v1", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "Ad Serving Using a Compact Allocation Plan\nPeiji Chen\n\nWenjing Ma\n\nYahoo!Labs\n\nYahoo!Labs\n\npeiji@yahoo-inc.com\nChandrashekhar\nNagarajan\nYahoo!Labs\n\narXiv:1203.3593v1 [cs.DS] 16 Mar 2012\n\ncn54@yahoo-inc.com\nErik Vee\nYahoo!Labs\n\nerikvee@yahoo-inc.com\n\nwenjingm@yahooinc.com\nJayavel\nShanmugasundaram\n\nYahoo!Labs\n\nmanfai@yahoo-inc.com\n\nINTRODUCTION\n\nA central problem facing online advertising systems is ad\nserving, i.e., deciding how to rapidly match supply (user\nvisits) and demand (ads) in a way that meets an overall objective. Our focus in this paper is on guaranteed delivery\ndisplay advertising, a multi-billion dollar industry, whereby\nadvertisers can buy a fixed number of targeted user visits\n(e.g., 100 million user visits by Males in California visiting\nSports web pages) for a future duration (e.g. July-August\n2011), and internet publishers guarantee these visits months\nin advance. In such cases, when the user visits (supply) actually occur, the publisher's ad server is faced with a splitsecond decision of choosing an appropriate guaranteed contract (demand) in such a way that in the aggregate, all the\nWork was done while with Yahoo! Labs\n\nSergei Vassilvitskii\nYahoo!Labs\n\nsergei@yahoo-inc.com\njayavel.shanmugasundaram@acm.org\nManfai Yu\nJason Zien\n\nA large fraction of online display advertising is sold via guaranteed contracts: a publisher guarantees to the advertiser a\ncertain number of user visits satisfying the targeting predicates of the contract. The publisher is then tasked with\nsolving the ad serving problem -given a user visit, which\nof the thousands of matching contracts should be displayed,\nso that by the expiration time every contract has obtained\nthe requisite number of user visits. The challenges of the\nproblem come from (1) the sheer size of the problem being\nsolved, with tens of thousands of contracts and billions of\nuser visits, (2) the unpredictability of user behavior, since\nthese contracts are sold months ahead of time, when only a\nforecast of user visits is available and (3) the minute amount\nof resources available online, as an ad server must respond\nwith a matching contract in a fraction of a second.\nWe present a solution to the guaranteed delivery ad serving problem using compact allocation plans. These plans,\ncomputed offline, can be efficiently queried by the ad server\nduring an ad call; they are small, using only O(1) space\nfor contract; and are stateless, allowing for distributed serving without any central coordination. We evaluate this approach on a real set of user visits and guaranteed contracts\nand show that the compact allocation plans are an effective\nway of solving the guaranteed delivery ad serving problem.\n\n\u2217\n\nYahoo!Labs\n\nsrinathm@yahooinc.com\n\nGoogle\u2217\n\nABSTRACT\n\n1.\n\nSrinath Mandalapu\n\nYahoo!Labs\n\njasonyz@yahoo-inc.com\n\nguarantees are met. In addition, as part of the split-second\ndecision, the ad server also needs to ensure some secondary\nobjectives such as uniformly serving user visits to guaranteed\ncontracts; e.g., if there is a guaranteed contract that spans\ntwo months, the advertiser expects their ad to be shown\nthroughout the duration, rather than just being shown to\nuser visits that occur during the first few days.\nThe above scenario can be modeled as an assignment problem. We are presented with a set of user visits I, a set of\nguaranteed contracts J, and a set of feasible allocation edges\nE \u2286 I \u00d7 J, which indicates which user visits are eligible to\nbe served by which guaranteed contracts. Each guaranteed\ncontract j \u2208 J has a demand dj , and we are asked to allocate\nthe user visits to satisfy the demands. In addition, there is\nan objective function over the feasible allocations, such as\nuniform delivery over the duration of the contracts, and the\ngoal is to find the allocation that maximizes the objective\nfunction.\nSolving the above problem even in an offline setting presents\na formidable set of challenges. First, the set I is extremely\nlarge, approaching tens of billions of user visits every day\nfor large publishers; since we may have to solve the problem\nfor up to a year in advance in the case of guaranteed contracts, this results in an effective set size of tens to hundreds\nof trillions! (Note that the set of edges E \u2286 I \u00d7 J is even\nlarger!) Second, we often do not know the set I exactly, but\nonly approximately; for instance, we do not know precisely\nwhich users will visit a particular web page, but only have\na stochastic estimate of the set based on past history.\nOf course, our actual situation is even more challenging\nbecause the ad server needs to solve the above problem online, usually within a hundred milliseconds per request, in\norder to meet the latencies for end-user facing actions such\nas page views. Further, in order to meet the throughput requirements, the ad server needs to solve the online problem\nin parallel among hundreds to thousands of distributed machines that do not communicate directly with each other for\neach user visit, while still ensuring that the online decisions\nattempt to maximize the overall objective. Finally, due to\nthe long-tailed nature of user behavior, the ad server needs\nto explicitly deal with the fact that it may encounter user\nvisits that have not been seen before, but must nevertheless\n\n\fensure that the online decisions attempt to maximize the\noverall objective. These are a daunting set of issues - what\ndo we do?\nOne simple approach is to design an ad server that selects\na contract based on how many impressions (i.e. user visits)\nhave been previously served to each eligible contract. For\ninstance, if there are two competing contracts, one of which\nis severely under-delivering and the other which is delivering well (or even slightly over-delivering), the ad server may\ndecide to serve the under-delivering contract. While this approach is conceptually simple and practical (in fact, it serves\nas the baseline in our experiments), it has a number of subtle\nproblems. First, the above approach requires a good definition of the notion of \"under-delivering.\" The most straightforward method is simply to assume that contracts should\nbe served at a uniform rate - a contract with demand of 30\nmillion impressions and a duration of 30 days should deliver\nabout 1 million impressions a day. This has the advantage of\nmaking delivery smooth, when possible. But it ignores the\nfact that the actual traffic varies greatly over time. Weekends have less traffic than weekdays, while the traffic at\nnight is typically much smaller than the traffic during the\nday. In addition, there may be an upcoming dearth of impressions available for contracts, which may require the ad\nserver to deviate from the uniform rate in order to meet the\nguarantee. This can occur, for instance, when some type of\nuser visits are promised exclusively for premium contracts\nat some time in the future (e.g., a sports company buys out\nall visits to Yahoo! Super Bowl pages); this may require the\nad server to deliver more than the uniform rate during the\ndays before the event in order to meet guarantees. Second,\nusing the above approach, the ad servers need to maintain\nsome notion of how much a contract has delivered in (near)\nreal-time so that they can compute under-delivery at any\npoint in time. In cases where there are thousands of ad\nservers distributed across the world, this problem becomes\nquite challenging, especially when user visits exhibit certain\nlocality patterns that cause non-uniform traffic to be sent to\ndifferent ad servers.\nAnother approach [Vee et al. 2010] that addresses many\nof the above issues is to solve an allocation problem offline,\nand then send a rate-based compact allocation plan to the\ndistributed ad servers. The allocation plan is based on a\nforecast of user visits over the lifetime of the contracts, so\nit effectively addresses the issue of what it means for a contract to under-deliver. (It is when it does not meet the\ngoal at the end of its lifetime, even if it is above or below\nthe uniform serving rate currently). Further, for a certain\nclass of objectives, the allocation plan is rate-based, meaning that the ad server does not rely on any online counts\nof how much a contract has served in the immediate past,\nbut is based on a serving probability that does not require\nonline state [Vee et al. 2010]. However, this approach also\nhas a set of issues that need to be addressed. First, this\napproach is very sensitive to the accuracy of the forecast of\nuser visits. For instance, if the forecast for a certain set of\nuser visits is twice a large, then the the serving rate will be\nhalf as large as it should be. Second, this approach typically\nrequires solving a non-linear convex optimization problem,\nwhich can have on the order of billions of variables, which\ncan be quite expensive in terms of time and resources.\n\n1.1\n\nContributions\n\nIn order to address the above issues with ad serving, we\npropose the following two-part solution. First, we introduce\na novel, lightweight algorithm for solving the offline allocation problem. The algorithm, which we call High Water\nMark (HWM), produces a compact allocation plan, requiring O(1) numbers per contract. Further, it is stateless and\nrate-based, which ensures that multiple ad servers can execute the algorithm in parallel without any bottlenecks. Although it does not have the strong theoretical guarantees\nof [Vee et al. 2010], it has the advantage of quick optimization. (Finding an allocation plan takes only a few minutes, even with a billion arcs in the demand-supply forecast\ngraph.) Second, we introduce a rapid feedback loop from\nthe ad server to the optimization system, which reacts to\nrecent aggregate delivery statistics in order to correct for\nany supply forecasting errors. In fact, we can even provide\ntheoretical bounds on how the frequency of feedback enables\nthe HWM algorithm to correct for supply forecasting errors\n(these bounds are also borne out experimentally). Thus, the\nfeedback loop, coupled with the quick HWM optimization,\nenables the ad serving system to quickly react to unforeseen\neffects, while still effectively addressing supply and demand\nconstraints that vary over the duration of the contracts.\nIn addition, we briefly describe an implementation of a\nvariant of the algorithm of [Vee et al. 2010] as a point of\ncomparison, which we call the DUAL algorithm.\nWe present a thorough evaluation of the HWM algorithm,\ncomparing it to a real world baseline which is currently responsible for serving a large fraction of Yahoo!'s guaranteed contracts. Unlike the HWM algorithm, which relies\non forecasts of user supply to make allocation decisions, the\nbaseline algorithm is a well-tuned feedback based approach.\nAt a very high level, it increases the serving rate for the\nunderdelivering contracts, and, vice-versa, decreases it for\nthose serving too aggressively. We show that the proposed\nalgorithm greatly improves overall delivery of the contracts,\nwhile maintain a smooth serving rate.\nWe further present experiments comparing HWM and DUAL.\nWe see that the two perform effectively the same- the\nunder-delivery for HWM is on par with DUAL, and its\nsmoothness is actually better. Thus, HWM is a good choice\nin practice, due to its lightweight implementation and quick\noptimization cycle time.\n\n1.2\n\nPaper Outline\n\nWe formally define the guaranteed delivery allocation problem in Section 2 and present an overview and the system architecture in Section 3. We state the proposed HWM offline\nalgorithm along with the online HWM allocation algorithms\nin Section 4. In Section 5 we describe our experiment and\nmetrics. In Section 6, we thoroughly evaluate the proposed\napproach against a real world production baseline. Then,\nin Section 7, we compare HWM and DUAL. We review the\nrelated work in Section 8 and conclude with some open problems in Section 9.\n\n2.\n\nMODEL AND PROBLEM STATEMENT\n\nWe begin by providing a detailed example of the guaranteed delivery display advertising problem. Recall that we\nare presented with a set of advertisers, each aiming to reach\na specific number of user visits (contract demand) that fall\nunder the targeting parameters.\nConsider the problem pictorially represented in Figure 1.\n\n\fSUPPLY\n\nDEMAND\n\n{Male, Age =5}\n400K\n{Male, WA, Age =5}\n400K\n{Male, CA, Age =5}\n100K\n{CA, Age =5}\n100K\n{NV, Age =5}\n500K\n\n200K {Male}\n\n200K {CA}\n\n1M {Age = 5}\n\n{Age =5}\n300K\n\nFigure 1: An example allocation problem. Each user\n(left) is connected to the contracts that it is eligible\nfor (right).\n\nThere are three advertisers, targeting Males, users from California, and users with Age in the 5th bucket. There are 6\ndifferent kinds of users, all of them satisfying the age constraint. Some of the users are known to be from California,\nWashington or Nevada; while for others their location is unknown. Similarly, some the publisher knows are male, while\nfor others the gender is unknown. Each node on the supply\nside is annotated with the total forecasted number of visits,\nfor example we expect to see 100,000 user visits from Californians with age in the 5th bucket and unknown gender.\nOn the demand side each contract is annotated with the total number of user visits guaranteed to it by the publisher.\nAn edge between a supply node i and a demand node j indicates that supply i is eligible for j, that is it satisfies all of\nthe targeting criteria.\nThe ad server must find an allocation of each supply node\nto the demand. For example, to satisfy the second contract\nboth the third (Male, CA, Age = 5) and the fourth (CA, Age\n= 5) nodes must be fully allocated to the second contract.\nWhen a Male user from California with Age=5 arrives it\nis eligible for all three of the contracts. However, it must\nbe allocated to the second contract; otherwise the second\ncontract will not reach its desired demand and the publisher\nwill be hit with underdelivery penalties.\nWe note that while the above example is a small illustration, the actual problem is much bigger in at least three\ndimensions. First, the number of user visits is of the order of\nbillions per day, and guaranteed contracts can be sold several months in advance. Second, the number of attributes\nper user visit is of the order of hundreds, including demographic information such as age, gender, location, explicit\ninterest, inferred interests, recent browsing behavior, and so\non; page information such as the topic and ad-size; and time\ninformation including date, user time and global time. Finally, the number of guaranteed contracts is of the order of\ntens to hundreds of thousands for large publishers. Consequently, the scale of the graph - both in terms of supply\nand demand - is quite large. Also, in practice, the advertiser targeting constraints are complex boolean expressions\non the attributes of the supply.\n\n2.1\n\nProblem Statement\n\nLet I be the set of [forecasted] user visits, and J be the set\nof contracts. We model the allocation problem as a bipartite\ngraph G = (I \u222a J, E) where there is an edge (i, j) \u2208 E\nif the user visit i can be used to satisfy contract j. The\nbipartite graph encodes the contention between contracts,\nfor example, a node j \u2208 J with few outgoing edges means\nthat it is a finely targeted contract, and there are few users\nsatisfying the targeting constraints. Conversely, a node i \u2208 I\nwith a high degree means that it is a highly contended user,\nthat is there are many contracts that wish to advertise to\nthis particular user.\nIn addition to the targeting constraints, each contract j \u2208\nJ specifies its desired demand dj . Likewise, a user may have\nmultiple identical visits, so each node i \u2208 I is labeled with\nthe total supply, si .\nWe wish to find a feasible allocation, that is a value on\neach edge xij , representing the fraction of supply i is allocated to contract j. We say that x is a feasible solution if it\nsatisfies:\nP\n\u2200j\ndemand constraints\ni\u2208\u0393(j) xij si \u2265 dj\nP\n\u2200i ,\nsupply constraints\nj\u2208\u0393(i) xij \u2264 1\n\u2200(i,j)\u2208E , xij \u2265 0\n\nnon-negativity constraints,\n\nwhere following standard notation, \u0393(i) are the neighbors of\ni: \u0393(i) = {j : (i, j) \u2208 E}, and similarly for \u0393(j).\nAlthough we do not explicitly require it, one important\naspect of serving is smoothness of delivery. Advertisers do\nnot want their entire demand to be served in a single hour\n(nor do users!), even if this technical satisfies the demand.\nThus, any serving method should roughly serve an equal\nnumber of impression each day for a given contract, subject\nto natural variations in contention, sell-through rate, and\noverall traffic patterns.\nThere are, of course, potentially many additional secondary\nconsiderations. For a longer description of the formal model\nand possible competing objectives of the offline optimization\nsystem see [Yang and Tomlin 2008, Bharadwaj et al. 2010,\nGhosh et al. 2009, Alaei et al. 2010].\n\n3.\n\nSOLUTION OVERVIEW AND SYSTEM\nARCHITECTURE\n\nBefore laying out our solution, we first discuss several alternatives.\nPerhaps the simplest ad serving solution is to randomly\nflip an unbiased coin between all the matching contracts.\nThis solution is fast, space-efficient, has a large throughput,\nrequires no coordination, and generalizes to previously unseen input. Unfortunately, what it gains in speed and flexibility, it loses in accuracy. Indeed, because this approach\nmakes no distinction between contracts during contract selection, it will typically lead to severe under-delivery and\nthus loss of revenue. For instance, in the example in Figure 1, all Males in CA in Age Group 5 should be allocated\nto the second contract even though it is eligible for all three\ncontracts, or the second contract will under-deliver.\nAn alternative solution that tries to maximize accuracy is\nas follows. Solve the allocation problem offline, and remember the allocation values xij on all the arcs of the bipartite\ngraphs in the ad server machines. Then, given a user visit,\nthe ad server can simply look up the allocation and assign\nit to the appropriate contract. While this would certainly\n\n\f!\"#$%&'($)*+'$#*\n,-'-('*./011234\nDelivery\nStatistics\n\n5\"\"6$)*7\"8(#&%('*\n.9$:&8)4\n;22\"%&<\"8*/\"2?$#\n\n;)*/$#?$#\n;)*/$#?$#\n\n;22\"%&<\"8*=2&8*\n>$8$#&(\"#\n@A-8$\n\nAllocation\nPlan\n\n;)*/$#?$#\n\n@82-8$\n\nFigure 2: Proposed System Architecture\n\nbe accurate (it implements the optimal allocation), it is very\nmemory intensive given the large number of nodes and edges\nthat need to be stored. Further, and perhaps more importantly, it is not generalizable. Specifically, it is impractical\nto assume that we can predict all the possible user visit\ntypes that could possibly occur (recall that it is a combination of dynamic user characteristics such as interests, along\nwith their IP location, pages they visit, etc.) and solve an\noptimization problem for all such visits. As an illustration,\nconsider again the example in Figure 1, and a Female user\nfrom California with Age=5. Since this type of user was\nnot considered in computing the offline allocation, there are\nno xij values present. Therefore, while there are two eligible contracts, the ad server has no information as to which\ncontract should be shown. In this example we would prefer to show the \"CA\" contract, since it is harder to satisfy.\nHowever, this information is not easy to elicit from the xij\nvalues.\nIntuitively, we want to get the best of both approaches,\nobtaining the accuracy of the second approach, while retaining the simplicity and scalability of the first approach. In\nSection 4, we present the overview of a solution that achieves\nthese goals.\n\n3.1\n\nSystem Architecture\n\nFigure 2 shows the proposed system architecture. As\nshown, there is an offline component called the Allocation\nPlan Generator that takes in a forecast of user visits and\nbooked contracts, and solves the allocation problem. We\nsolve the problem on a sample of user visits, which makes\ncomputing the offline solution of the problem fast and practical. The resulting allocation plan is sent to all the ad server\nmachines.\nEach ad server machine loads up the allocation plan at\nstart-up time, and stores the plan in memory. Then, whenever it needs to process a user visit, it first finds the matching contracts, and then uses the allocation plan to select a\ncontract to show. Since the latter phase is local (it only involves the user visit and its matching contracts), there is no\nneed for the ad server machines to communicate with each\nother during serving, nor is there any need for an ad server\nmachine to maintain global state or even local counters!\nFurther, as shown in the figure, there is a feedback loop\nfrom the Ad Server to the Booked Contract Demand. Specifically, the demand of a contract is adjusted to account for\nthe actual delivered impressions. Since there can be errors\nin the forecast, the Allocation Plan Generator is re-run periodically to correct for any forecast errors based on this\n\nactual remaining demand and a new allocation plan is then\ndistributed to the ad servers.\nIn the subsequent section of the paper, we elaborate on\nthe Allocation Plan Generator and the Ad Server components in more detail. (A more detailed discussion of the\nUser Visit Forecasting system is beyond the scope of this\npaper. See [Agarwal et al. 2010] for a description of one\nsuch possible system.)\n\n4.\n\nRATE-BASED ALGORITHMS\n\nIn this section, we describe two rate-based serving algorithms. The first is the High Water Mark Algorithm (HWM).\nThe second is an implementation of the dual-based method\nof [Vee et al. 2010], which we will refer to as DUAL.\nBoth algorithms involve two phases. The offline phase,\ndescribed in Section 4.1, takes as input the demand-supply\nforecast graph and produces an allocation plan. This allocation plan is just a few numbers per contract, independent\nof the number of impressions. The online phase, described\nin Section 4.1.1, repeatedly takes as input a user visit and\nthe set of eligible contracts for that user visit, and decides\nwhich ad to serve based on the allocation plan.\nThe HWM algorithm is lightweight and fast, even in the\noffline phase. The DUAL algorithm, while lightweight and\nfast during the online phase, is not nearly as fast in the\noffline phase. (In our experience, it is more than an order of magnitude slower.) However, it has the advantage\nof yielding provably optimal allocation during serving, assuming that forecasts are perfect. Of course, forecasts are\nfar from perfect in practice. Thus, the benefits of allocation\nusing DUAL are somewhat mitigated.\nThe key to having a compact allocation plan is having\na way to infer the the xij values at serving time without\nexplicitly storing them. This can be done by creating an \u03b1j\nfraction which represents the fraction of demand to be give\nto the contract, and which is the same for all neighboring\nsupply nodes of a contract. The mathematical basis of this\nrepresentation comes from the fact that an optimal solution\ncan be represented using these \u03b1j values [Vee et al. 2010].\nAlthough Linear Programming solvers can be used to find\nan optimal solution, due to the size of the problem and time\nconstraints, we describe a much faster heuristic.\n\n4.1\n\nHWM Algorithm\n\nOffline optimization for HWM uses a simple, but surprisingly effective heuristic for generating the allocation plan.\nThe algorithm generates a serving rate for each contract\nj, denoted \u03b1j , together with an allocation order. The allocation order\nP is set so that a contract j with less eligible\nsupply (i.e.\ni\u2208\u0393(j) si ) has higher priority than those with\nmore eligible supply. By labeling each contract with just\ntwo numbers, the HWM algorithm creates a compact and\nrobust allocation plan.\nDuring online serving, every contract gets an \u03b1j fraction of\nevery impression, unless this would mean giving more than\n100% of the impression away. In this case, ties are broken in\nallocation order: a contract j coming first in the allocation\norder will get its \u03b1j fraction, while a contract j 0 coming later\nwill get whatever fraction is left, up to \u03b1j 0 (possibly getting\nnothing for some impressions).\nThe algorithm itself labels every contract j with its eligible\nsupply, denoted Sj , which is used to determine the allocation\norder; contracts with smaller Sj values come earlier in the\n\n\fSUPPLY\n\nDEMAND\n\n{Male, Age =5}\n400K\nD =200K {Male}\nOrder = 2, Alpha = 1/4\n\n{Male, WA, Age =5}\n400K\n{Male, CA, Age =5}\n100K\n\nD = 200K {CA}\nOrder = 1, Alpha = 1\n\n{CA, Age =5}\n100K\n{NV, Age =5}\n500K\n\nD = 1M {Age = 5}\nOrder = 3, Alpha = 5/8\n\n{Age =5}\n300K\n\nFigure 3: An example compact allocation plan with\nthe complete supply-demand graph. Note that only\nthe data on the RHS of the figure is sent to the ad\nservers.\n\nP\n\u03b1j > 1, let ` be the maximum value so that\n2. If |J|\nP` j=1\nP`\n0\nj=1 \u03b1j \u2264 1. Finally, let \u03b1`+1 = 1 \u2212\nj=1 \u03b1j . Note\n0\nthat by definition of `, \u03b1`+1\n< \u03b1`+1 .\n3. Select a contract j \u2208 [1, `] with probability \u03b1j and\n0\nthe contract ` + 1 with probability \u03b1`+1\n. Note that in\nP|J|\nthe case that j=1 \u03b1j < 1 with some probability no\ncontract is selected.\nConsider the running example from Figure 3. In the case\nan impression of type {CA, Age = 5} arrives, ` = 1 and the\nmiddle contract with allocation order 1 is always selected,\nsince its serving rate is 1. On the other hand, suppose an impression of type {Male, Age = 5} arrives. Then with probability 1/4 it is allocated to contract 1, and with probability\n5/8 it is allocated to contract 3, with the remaining probability (1/8) it is left unallocated. (In case no contract is selected,\nthe impression is then auctioned off in the Non-Guaranteed\nMarketplace.)\n\n4.2\nallocation order. In order to determine the serving rate, \u03b1j\nfor each j, the HWM algorithm does the following steps.\n1. Initialize remaining supply ri = si for all i.\n2. For each contract j, in allocation order, do:\n(a) Solve the following for \u03b1j :\nX\nmin{ri , si \u03b1j } = dj ,\ni\u2208\u0393(j)\n\nsetting \u03b1j = 1 if there is no solution.\n(b) Update ri = ri \u2212 min{ri , si \u03b1j } for all i \u2208 \u0393(j).\nNotice that it is a simple manner to choose the allocation\norder using a different heuristic. In our experience, the available supply works quite well. Contracts that have very little\ntime left will also have very little supply and naturally become high priority. Likewise, highly targeted contracts also\ntend to have much less inventory. This generally means they\nhave less flexibility in which user visits they can be served,\nand they are treated with higher priority. Contrast this\nwith a large, untargeted contract that can easily forego certain types of users visits when other highly targeted (and\ngenerally more expensive) contracts may need those visits\nin order to satisfy their demands.\nThe compact allocation plan produced by the HWM algorithm is shown in Figure 3. Note that only the right hand\nside of the graph is sent to the Ad Servers. In this example\nthe allocation plan results in a feasible solution. We note\nthat the allocation plan is highly dependent on the supply\nforecast, and an incorrect supply forecast may yield suboptimal results. We will explore this issue in detail in Section\n4.3.\n\n4.1.1\n\nOnline Evaluation for HWM\n\nGiven an allocation plan, which consists of the allocation\norder and serving rate \u03b1j for each contract j, the role of\nthe ad server is to select one of the matching contracts. We\npresent the algorithm that the ad server follows below:\n1. Given an impression i, let J = {c1 , c2 , . . . , c|J| } be the\nset of matching contracts listed in the allocation order.\n\nThe DUAL Algorithm\n\nThe DUAL algorithm replaces the demand constraints described in Section 2.1 with the following:\nP\n\u2200j\ni\u2208\u0393(j) xij si + uj \u2265 dj\nwhere we think of uj as the under-delivery for contract j. We\nadditionally add the constraint that uj \u2265 0. Our objective\nis then\nP P\nP\n2\nMinimize\nj\ni\u2208\u0393(j) si (xij \u2212 \u03b8j ) /\u03b8j +\nj pj uj\nwhere \u03b8j and pj are fixed. The first term attempts to minimize the distance of the allocation from some target, \u03b8j . We\nset \u03b8j to be the total demand of contract j divided by its total (forecasted) supply. In this way, we attempt to make the\noverall mix of impressions as uniform as possible. (See [Yang\nand Tomlin 2008, Bharadwaj et al. 2010, Ghosh et al. 2009,\nAlaei et al. 2010] for more discussion on this.)\nThe second term represents the under-delivery penalty for\nthe contracts. We set pj (the penalty value per impression\nfor contract j) to be 10 for each contract. This heuristically\nchosen value performs well in practice.\nIn order to produce an allocation plan, DUAL simply reports the dual values of the modified demand constraints for\nan optimal solution - in practice, these are actually the duals for an approximately optimal solution. Note that there\nis one dual value per contract.\n\n4.2.1\n\nOnline Evaluation for DUAL\n\nFor each impression, we find the set of eligible contract.\nThis, together with the dual values for their respective demand constraints, is enough to compute the value of the\nprimal solution on the corresponding edges (i.e. the xij values) computed during the offline phase. In fact, if the set\nof impressions seen during serving is the same as the set of\nimpressions used during the offline phase, this method will\nfaithfully reproduce exactly the same allocation. Mathematically, define gij (z) = max{0, \u03b8j (1+z)}. For an impression i,\nlet Ci be the set of eligible contracts, and let \u03b1j be the dual\nof the modified demand constraint for each j \u2208 Ci . Then\nwe first solve the following for X:\nP\nj\u2208Ci gij (\u03b1j \u2212 X) = 1 .\nThen, we set \u03b2 = max{0, X}. (It turns out that \u03b2 is the dual\nvalue for the supply constraint for impression i.) Finally, we\n\n\fTable 1: Increasing serving rate due to supply forecast errors\nPredicted Remaining Serving\nActual\nDay\nSupply\nDemand\nRate\nDelivery\n1\n5M\n2.5M\n0.50\n0.4M\n2\n4M\n2.1M\n0.525\n0.42M\n3\n3M\n1.68M\n0.56\n0.45M\n4\n2M\n1.23M\n0.62\n0.49M\n5\n1M\n0.74M\n0.74\n0.59M\n6\n0.15M\n\nset xij = gij (\u03b1j \u2212 \u03b2) for all j \u2208 Ci ; note that xij = 0 for all\nj \u2208\n/ Ci . As shown in [Vee et al. 2010], this reproduces the\nprimal solution.\nAs with HWM, the fractional solution is interpreted as\na probability for serving. That is, contract j is served to\nimpression i with probability xij .\n\n4.3\n\nRobustness to Forecast Errors\n\nSince rate-based algorithms produce serving rates rather\nthan absolute goals, it becomes much more robust to load\nbalancing, server failures, and so on. However, it becomes\nmore sensitive to forecast errors. For example, if the forecast\nis double the true value, the serving rate is half what it\nshould be, roughly speaking. In this section, we show that\nin an idealized setting, frequent re-optimization mitigates\nthis problem greatly. Note that this simple analysis applies\nto both HWM and DUAL.\nLet us take a simple example in which our forecast is much\nhigher than reality for all contracts. Initially, all of the contracts are underdelivering, since the actual supply is lower\nthan the forecasted supply, the \u03b1j given in the allocation\nplan is too low. As time passes, however, the rate begins\nto increase. This increase is not because the supply forecast\nerrors are recognized, rather, as the expiration date for the\ncontract approaches, the urgency with which impressions\nshould be served to the particular contract increases.\nTo illustrate this point, consider a five day contract j with\nforecasted supply of 1M impressions per day, and total demand of 2.5M impressions. If this is the only contract in the\nsystem, we should serve it at the rate of \u03b1j = 2.5M/5M = 0.5.\nIf the supply forecasts are perfect, then the contract will finish delivering exactly at the end of the last day. On the other\nhand, suppose that the actual supply is only 800K impressions per day (a 20% supply forecasting error rate). Then at\nthe end of the first day the new serving rate would be recomputed to = \u03b1j = 2.1M/4M = 0.525. Continuing with the\nexample, we observe the behavior in Table 1, which shows\nthat after 5 days the contract would have underdelivered by\n.15M/2.5M = 6%. Note that without this re-optimization, the\nunderdelivery would be exactly 20%, thus frequent reoptimizations help mitigate supply forecast errors.\nWe formalize the example above in the following theorem.\nTheorem 1. Suppose we have k optimization cycles, the\nsupply forecast error rate (defined to be 1 minus the ratio\nof real supply to predicted supply) is r, and the contract is\nnever infeasible. In the case that r > 0, the underdelivery is\n2\npositive and bounded above by kr+r\n1\u2212r . In the case that r < 0,\n|r|\nthe overdelivery is positive and bounded above by k1\u2212r\n.\n\nProof. In the i-th round, the optimizer will allocate a\nfraction of supply, of which a (1 \u2212 r) fraction will\nbe delivered. Therefore, the desired demand will decrease\n1\u2212r\nby a factor of 1 \u2212 k\u2212i+1\n. Therefore, the supply available in\nthe last round (i.e. the underdelivery) is:\n\u0013 Y\n\u0013\nk\u22121\nk \u0012\nk \u0012\nY\nr\u0011\n1\u2212r\nk\u2212i+r\nr Y\u0010\n1+\n1\u2212\n=\n=\nk\u2212i+1\nk\u2212i+1\nk i=1\ni\ni=1\ni=1\n1/(k\u2212i+1)\n\nNotice that when r > 0, this value is positive (i.e. meaning\nwe underdeliver), while when r < 0, this value is negative\n(i.e. meaning we overdeliver). First, consider the case that\nP\n1\nr > 0. We use the fact that k\u22121\ni=2 i \u2264 ln(k \u2212 1) < ln k. We\nhave\n!\nk\u22121\nk\u22121\nXr\nr(1 + r)\nr Y\u0010\nr\u0011\n1+\n\u2264\nexp\nk i=1\ni\nk\ni\ni=2\nr + r2\nr + r2\nexp (r ln k) = 1\u2212r\nk\nk\nNow,P\nconsider the case that r < 0. Here, we use the fact\nk\u22121 1\n\u2265 ln k. Hence, we have\nthat i=1\ni\n!\nk\u22121\nk\u22121\nXr\n|r| Y \u0010\n|r|\nr\u0011\n1+\n\u2264\nexp\nk i=1\ni\nk\ni\ni=1\n\u2264\n\n\u2264\n\n|r|\n|r|\nexp (r ln k) = 1\u2212r\nk\nk\n\nSo even a large 2X forecast error, leading to delivery rate\nof 0.5 of what it should be, does not result in delivering\nonly 50% of the required demand. On a week-long contract,\nre-optimizing every two hours, we have k = 84 cycles, and\nour under-delivery is only 8.2%. Forecast errors in the other\ndirection (which would lead to over-delivery) are even less severe. A 0.5X forecast error, leading to delivery rate of twice\nwhat it should be, does not result on 100% over-delivery.\nInstead, the over-delivery is much less than 1%.\n\n4.4\n\nFeedback-Based Correction\n\nIn the previous section we showed how the supply forecast\nerrors are mitigated by frequent reoptimization. Although\nthis guards against large underdeliveries, the offline optimization is slow to recognize the forecast error, and the delivery rate increases very slowly in the beginning, even when\nfaced with very large errors. An alternative solution is to\nemploy a feedback system that would recognize the errors\nand correct the allocations accordingly.\nSuch a feedback system falls squarely in the realm of control theory, and one can imagine many feedback controllers\nthat would achieve this task. We present a very simple protocol, which we will show performs quite well in practice.\nThe protocol is parameterized by two variables: \u03b4, which\ncontrols the allowed slack in delivery, and a pair (\u03b2+, \u03b2\u2212)\nwhich control the boost to the serving rate.\nIf, during the lifetime of a contract, the contract is delivering more than \u03b4 hours behind, the feedback system increases\nthe reported demand left for the contract by a factor of \u03b2\u2212.\nFor example, let \u03b4 = 12, and consider a 7 day contract for\n70M impressions. Ideally, the contract should deliver 3M\nimpressions by the end of day 3. If, say, only 2M impressions were still not delivered by noon on day 4, the feedback\nsystem would increase the demand left (5M = 7M-2M) by a\n\n\fSupply\nForecast\n\nOptimization\n\nAllocation Plan\n\nAd Server\n\nContract\nDatabase\n\nDelivery Stats\n\nSupply\nForecast\n\nOptimization\n\nAllocation Plan\n\nAd Server\n\nContract\nDatabase\n\nDelivery Stats\nFigure 4: Experimental\nSetup\n\nfactor of \u03b2+, making it 5M\u00d7\u03b2+. If on the other hand, the\ncontract had already delivered 3M impressions by noon on\nday 3, the feedback system would decrease its demand left\nby a factor of \u03b2\u2212. We will show experimentally in Section\n5 that this, admittedly simple, system performs very well in\nreal world scenarios.\n\n5.\n\nEXPERIMENTAL SETUP\n\nTo validate our approach we implemented our algorithms\nand evaluated them using a large snapshot of real guaranteed\ndelivery contracts and a log of two weeks of user visits. We\ndescribe the setup in detail below.\n\n5.1\n\nData flow\n\nFigure 4 shows the experimental setup flow. To simulate\nthe offline procedures, we use a snapshot of guaranteed contracts stored in a contract database. A supply forecasting\nsystem using historical information produces predicted user\nvisits matching each of the contracts in the database. The\nforecasted user visits along with the contracts are passed to\na graph generator which generates a corresponding snapshot\nof the supply-demand bipartite graph. Finally, the compact\nallocation plan is generated as described in Section 4.1.\nTo simulate the online environment, an ad server receives\nthe compact allocation produced by the offline phase. We\nonly used one ad server for each experiment since all the ad\nservers are completely symmetric with respect to the allocation plan they receive and the decisions they make (this\nsymmetry is, in fact, one of the key advantages of the proposed architecture with respect to load balancing, etc.). A\nset of user visits recorded from real ad serving logs is then\nstreamed through the ad server, which uses the allocation\nplan based reconstruction procedure detailed in Section 4\nto select the appropriate contract. Finally, we record the\nnumber of user visits allocated to each contract.\n\n5.2\n\nMetrics\n\nThe main metric for ad serving is total delivery rate, defined as the total number of impression delivered, divided\nby the total number of impressions booked (of course for\na single contract, the number of delivered impressions is\nbounded by its demand). Since the contracts are sold in\na guaranteed fashion, underdelivery represents not only unrealized revenue (since one cannot charge for impressions\nnot delivered), but also bad will towards the advertisers,\n\nas they typically rely on guaranteed delivery contracts for\nmajor marketing campaigns (e.g. new movies, car model\nlaunches, etc.). We will measure our results as percentage\nimprovement in underdelivery over the baseline system. For\nexample, if the baseline system had underdelivered on 10%\nof impressions, and the HWM approach underdelivered on\n7%, this would result in a 30% improvement.\nA secondary measure of the quality of the delivery is the\nsmoothness of the delivery. Intuitively, a week long contract\nshould delivery about 1/7 of its impressions on every day of\nthe week; it should not deliver all of the impressions in the\nfirst day (or the last day) of the campaign. Of course, due\nto the interaction between different advertisers, such perfect\nsmoothness is not always possible, however the ad server\nshould strive to deliver impressions as smoothly as possible.\nTo measure smoothness formally, denote by yj (t) the total\ndelivery to contract j at time t, and yj\u2217 (t) the optimal smooth\ndelivery at time t. For example, for a week long contract\nfor 7M impressions that begins at noon on Sunday, yj\u2217 (t)\nwould be 1M at noon on Monday, and 5.5M at 11:59PM\non Friday night. We can then denote the smoothness of\nyj (t)\u2212yj\u2217 (t)\n. Finally, to\na contract at time t, \u03c3j (t) = 100 *\ndj (t)\nreduce smoothness to a single number, let \u03c3 f (t) denote the\nf -th quantile of \u03c3j (t) over all contracts j. We will typically\nbe interested in smoothness at the 75th and 95th percentiles.\nFinally, we will report \u03c3 f = maxt \u03c3 f (t). So, for example, a\nsmoothness of score of 4.5 at 95th percentile means that 95%\nof contracts were never over-delivering by more than 4.5%\ncompared to the optimal smooth delivery.\n\n6.\n\nCOMPARISON OF HWM AND BASELINE\n\nOur first set of experiments compare a production-quality\nbaseline to the HWM algorithm.\n\n6.1\n\nData\n\nWe used a two week period as our simulated testing time\nperiod. From the many real contract active during that\ntime window, we selected a representative set of 1986, which\nincluded a mix of day long, multi day and multi week long\ncontracts; ranging from very targeted to broad, untargeted\ncontracts.\nOn the impression side, we use actual ad serving logs to\nproduce a set of real impressions for our test. For scalability, we downsample at a rate greater than 1%, resulting in\n20M impressions total. (The real traffic rate is impossible\nto simulate without utilizing hundreds of machines.) Even\nat such a high sampling rate, the full two week simulation\nrequires about tens hours of processing to evaluate.\n\n6.2\n\nBaseline\n\nWe used the current guaranteed delivery system, named\nBase, as a baseline for our experiments. This is a system\nthat aims to maintain a smooth temporal delivery on all\nof the contracts. At a high level, it frequently checks and\nincreases the serving rate of contracts that are falling behind\ntheir ideal delivery numbers, and decreases the rate of those\nthat have gotten too far ahead. The system is very robust\nto traffic changes and supply forecast errors, but, in contrast\nto the proposed HWM approach, it is reactive, rather than\nproactive. For example, if a certain slice of inventory is\nsold out in the coming days, the offline optimization will\nrecognize the fact and may frontload a competing contract\n\n\ftargeting that area. The reactive system, on the other hand,\nwill not recognize the error until it is too late.\n\n6.3\n\nExperimental Results: Regular Serving\n\nThe experimental results are shown in Table 2. As we\ncan see, the overall delivery is much better with the HWM\napproach, as the underdelivery rate falls by 53%. However,\nthe extra delivery comes at the cost of smoothness - of\nthe 25% of contracts that frontloaded, most did so by almost 3 times the frontloading rate of Base. Recall that Base\nspecifically targets perfectly smooth delivery. So although\nthe smoothness of HWM here is higher than ideal, it is still\nnot dramatically unacceptable.\nTable 2: Total delivery for Base and HWM approaches. Note that HWM reduces underdelivery\nby 53%, but has worse overall smoothness.\nAlgorithm Delivery Improvement\n\u03c3 75\n\u03c3 95\nBase\n-\n-\n-\nHWM\n53%\n+288% +634%\n\n6.4\n\nExperimental Results: Supply Forecast Errors\n\nThe main culprit behind the inferior smoothness are the\nsupply forecast errors. Recall, that the allocation plan,\nwhich determines the serving rates, \u03b1j for each contract j, is\ncomputed offline using a forecast of the expected supply. In\nthe case that the forecast is lower than the actual supply, the\nsystem will use a higher rate of serving than necessary, resulting in frontloading, that is delivering impressions ahead\nof the smooth linear goal. On the other hand, if the forecast\nis higher than actual supply, this will result in backloading,\nand potential underdelivery of the contracts.\nThe description of the supply forecasting system is beyond the scope of this work, but the distribution of errors is\nshown in Figure 5. (The scale of the y-axis is suppressed for\nconfidentiality reasons.) Although many of the forecasts are\naccurate, we can see that a significant fraction have predictions that are inaccurate enough to potentially cause serving\nerrors.\n\nFigure 5: A distribution of supply forecast errors..\n\n6.4.1\n\nSmoothness\n\nTo improve the smoothness of delivery we consider the\nfeedback system described in Section 4.4. We set the \u03b4 parameter to 4 hours, and \u03b2\u2212 to 10, implying that a contract\nthat frontloads by more than 4 hours will get its delivery\nrate reduced to 10% of its original value. This effectively reduces the frontloading performed by the system. We denote\nthis algorithm HWM+, and show the results in Table 3.\n\nTable 3: Total delivery for Base and HWM approaches. Note that HWM+ obtains comparable\nsmoothness to the baseline, while still drastically\nimproving overall delivery.\nAlgorithm Delivery Improvement\n\u03c3 75\n\u03c3 95\nBase\n-\n-\n-\nHWM\n53%\n+288% +634%\nHWM+\n40%\n-66.0% +20.9%\n\nObserve that HWM+ slightly decreased total delivey compared to HWM. However, it still dramatically improves delivery compared to the current baseline system, and its smoothness is on par - for the majority of the contracts the delivery\nis even smoother.\n\n6.4.2\n\nStress Test\n\nWe have already observed that an accurate supply forecast\nis an integral component of the system. As we saw in Section 4.3, the HWM algorithm, when allowed to periodically\nre-optimize based on the latest delivery statistics, gracefully\nhandles forecast errors. In this subsection, we empirically\nverify that the system indeed performs well even with large\nforecasting errors.\nWe altered the supply forecast to be biased towards underdelivery. To do this, we effectively doubled the supply\nforecast for all of the contracts. In this case, the supply\nforecasting system was over-predicting the available supply\non more than three-quarters of the contracts. Although such\na high supply forecasting error rate should be unlikely to occur in practice, it is a good demonstration of the system's\nrobustness, even in adverse settings.\nThe results for the supply forecasting stress test are shown\nin Table 4. Note that since the current system, Base, does\nnot use supply forecasting to make its serving decisions, its\ndelivery is unaffected. It is not surprising that the overall\ndelivery of HWM+ is lower; on the other hand, we observe\nthat frequent reoptimization (the re-optimization happens\n12 times per day) limits the impact of such high supply\nforecast errors. Moreover, even in such a stressed state, the\nHWM+ algorithm performs better than Base.\nFinally, just as we used a simple feedback system to remedy frontloading errors, we use the same system system to\nbattle the underdelivery. Keeping \u03b4 at 4 hours, and \u03b2\u2212 at\n10, we set \u03b2+ to 1.5. In this scenario, when the delivery is 4\nhours behind (with respect to the linear goal) we artificially\nincrease the demand of the contract by 50%. This increases\nthe urgency on the contract, which leads it to deliver at a\nhigher rate in the short term. Note that once the total delivery is within two cycles of the linear goal, the demand is no\nlonger artificially boosted. We call this algorithm HWM++\nand show its results in Table 4. This admittedly simple feed-\n\n\fback mechanism almost completely counteracts the effects of\nthe supply forecast errors, resulting in near optimal delivery.\nTable 4: Total delivery for the Base and HWM approaches. Note that HWM++ obtains comparable\nsmoothness to the baseline, while still drastically improving overall delivery.\nAlgorithm\nBase\nHWM\nHWM+\nHWM (2x SF errors)\nHWM++ (2x SF errors)\n\n7.\n\nDelivery\nImprv.\n-\n53%\n40%\n6%\n47%\n\n\u03c3 75\n\n\u03c3 95\n\n-\n+288%\n-66.0%\n-5.0%\n+2.6%%\n\n-\n+634%\n+20.9%\n+92.8%\n+116%\n\nCOMPARISON OF DUAL AND HWM\n\nWe ran further experiments on DUAL and HWM, showing\nthat the two perform comparably.\n\n7.1\n\nData\n\nWe used a snapshot of actual data from two different time\nperiods on two different areas of traffic to run our simulations. The first uses a week-long period of actual ad logs,\ndownsampled at a rate of 10%. We further used a set of\nreal contracts active during that time period. The second\nalso uses a week-long period of actual ad logs, but downsampled at a rate of 0.25%. (The traffic on this area was\nmuch greater.)\n\n7.2\n\nExperimental Results\n\nThis experiment compares the HWM and DUAL algorithms, both with and without feedback. Our results report\nthe delivery and smoothness for contracts that finished during the active time period, as well as the smoothness of\nthe unfinished contracts during the active period. They are\nshown in Table 5, with ++ denoting algorithms with feedback. As we see, the general trend for smoothness is the\nsame for both finished and unfinished contracts.\nTable 5: Comparison of HWM and DUAL on the\nfirst data set\nAlgorithm\nHWM++\nDUAL++\nHWM\nDUAL\n\nDelivery\nImprv.\n-\n+4.82%\n-43.89%\n-3.85%\n\n\u03c3 75\n(finished)\n-\n+16.96%\n+143.79%\n+173.16%\n\n\u03c3 95\n(finished)\n-\n+2.44%\n+367.30%\n+375.44%\n\n\u03c3 75\n(unfinished)\n-\n+3.36%\n+107.62%\n+126.89%\n\nWe also ran the comparison between HWM and DUAL\non our larger data set. Here, we compare only the feedback\nalgorithms. The results are shown in Table 6.\nClearly, the algorithms perform much better, both in terms\nof under-delivery and smoothness, when using feedback. However, we see two somewhat surprising things. First, the\nunder-delivery rate for both HWM and DUAL are comparable. In fact, HWM does somewhat better in the second\n\nTable 6: Comparison of HWM and DUAL on the\nsecond data set\nAlgorithm\nHWM++\nDUAL++\n\nDelivery\nImprv.\n-\n-11.79%\n\n\u03c3 75\n(finished)\n-\n+95.24%\n\n\u03c3 95\n(finished)\n-\n+155.99%\n\n\u03c3 75\n(unfinished)\n-\n+95.24%\n\ndata set. Note that both algorithms have very low underdelivery rates (although we cannot display the absolute values for confidentiality reasons), hence a difference of 5 or\n10% translates to a very small absolute difference.\nSecond, DUAL is actually worse in terms of smoothness,\ndespite the first term of its objective. Indeed, we see the first\nterm of the DUAL objective (which attempts smoothness\nover all impressions) evaluates to a better value for the online\nDUAL allocation than the online HWM allocation. Yet the\ntemporal smoothness that we report is worse.\nOur belief is that this has three contributing factors: (1)\nThe first term of the DUAL objective attempts smooth allocation across all impressions, with time being just one dimension among many (with others, like gender, age, interests, and so on being just as important), (2) HWM's firstcome-first-served approach tends to give many contracts very\nsmooth allocation, with the contracts allocated near the end\nhaving potentially blocky distributions, while DUAL tends\nto distribute non-smoothness among all contracts, and (3)\nsupply forecasting errors make it difficult for an optimal offline solution to translate to a truly smooth online allocation.\nIn general, many of the advantages of generating an optimal serving plan using a method like DUAL are mitigating\nbecause of forecasting errors and the feedback needed to correct for those errors. Thus, HWM provides a very practical\nsolution in terms of speed and performance.\n\n8.\n\nRELATED WORK\n\nThere are three major related problems in the context of\nguaranteed display advertising: the allocation problem, the\nbooking problem, and the ad serving problem (the focus of\nthis paper). In the allocation problem, the goal is to find\nan allocation of supply (user visits) and demand (contracts)\nso as to meet an optimization objective. In this context,\n[Ghosh et al. 2009] and [Yang and Tomlin 2008] propose\nvarious objectives to smooth the allocation of supply to demand so as to avoid the \"lumpy\" solutions characteristic\nof simple linear programming formulations [Nakamura and\nAbe 2005]. In the booking problem, the goal is to efficiently\ndetermine whether a new contract can be booked without\nviolating the guarantees of existing booked contracts. The\nwork of [Feige et al. 2008], [Aleai et al. 2009], [Negruseri\net al. 2009] and [Radovanovic and Zeevi 2009] consider various techniques and relaxations to solve this problem efficiently.\nThe guaranteed ad serving problem can be viewed as an\nonline assignment problem, where some information is known\nabout the future input, but the input is revealed in an online fashion one vertex at a time, and the goal is to optimize\nfor an allocation objective. As such, this is related to the\nliterature on online matching. In a celebrated result, [Karp\net al. 1990] showed that a simple randomized algorithm that\n\n\ffinds a matching of size n(1 \u2212 1e ). However, Karp et al.'s\nsolution only works for simple matching, requires maintaining counters across distributed servers, and does not apply\nto more general allocation objectives that are considered in\ndisplay advertising. Feldman et al. [Feldman et al. 2009]\nextend Karp et al.'s results and show that if some information about the future is available, the n(1 \u2212 1e ) bounds can\nbe further improved. The proposed solution works by solving two problems offline, and using both solutions online.\nHowever, the entire solution graph, including both supply\nand demand nodes and the edges, has to be sent to the\nonline server. Consequently, the plan as described is not\ncompact, cannot be based on sampled user visits, and cannot generalize to unseen user visits - all of which are crucial\nrequirements for guaranteed ad serving.\nAnother area of work that is related to the online allocation problem is two-stage stochastic optimization with recourse. In this model, the future arrival distribution is assumed to be known in advance, and the goal is to find an\nallocation that best matches the distribution. However, all\nof the algorithms (e.g., [Katriel et al. 2007]) assume that the\ninput is revealed in two stages, at first just the distribution\nof the future input, and then the full input is revealed. Consequently, these algorithms do not work in an online fashion,\nand the solution computed in the first stage does not generalize to unseen input.\nThe ad serving solution presented in this paper builds\nupon a mathematical result by Vee et al. [Vee et al. 2010]\nthat shows that for a fairly general set of allocation objectives, the optimal solution (except for sampling errors) can\nbe compactly encoded as just the dual values of the demand constraints. Note that the approach of Devanur and\nHayes [Devenur and Hayes 2009], which also uses dual-based\nmethods, does not apply in our setting since it cannot handle\n\"at least\" constraints.\nWe leverage the result of [Vee et al. 2010] and propose\na novel and efficient High Water Mark (HWM) algorithm\nthat can be used to rapidly solve the allocation problem for\nlarge graphs and produce a compact, generalizable, ratebased allocation plan for a distributed ad server. Further,\nwe introduce a rapid feedback loop, and show how this can\nform a theoretical basis for dealing with supply forecasting\nerrors using the HWM algorithm. Finally, we also present\nan experimental evaluation of the proposed approach using\nreal-world data.\n\n9.\n\nCONCLUSION & FUTURE WORK\n\nWe have presented a new ad serving system that relies on a\ncompact allocation plan to decide which matching contract\nto show for every user visit. This plan-based approach is\nstateless, generalizable, allows for very high throughput and\nat the same time performs better than the current quotabased system. While the approach is sensitive to supply\nforecast errors, we have shown that frequent re-optimization\nhelps correct supply forecast errors, and diminishes the impact that these errors have on delivery.\nThese rate-based algorithms show clear improvement in\nunder-delivery for ad serving, while maintaining comparable smoothness. However, there is no clear winner between\nHWM and DUAL. Although DUAL performs better under\nperfect forecasts, its performance in practice is severely impacted by forecasting errors and feedback corrections. Thus,\n\nHWM is quite attractive due to its lightweight implementation and speed, coupled with good overall performance.\n\n10.\n\nREFERENCES\n\n[Agarwal et al. 2010] Agarwal, D., Chen, D., ji Lin, L.,\nShanmugasundaram, J., and Vee, E. 2010.\nForecasting high-dimensional data. In SIGMOD\nConference, A. K. Elmagarmid and D. Agrawal, Eds.\nACM, 1003\u20131012.\n[Alaei et al. 2010] Alaei, S., Kumar, R., Malekian, A.,\nand Vee, E. 2010. Balanced allocation with succinct\nrepresentation. In ACM SIGKDD Conference on\nKnowledge Discovery and Data Mining. 523\u2013532.\n[Aleai et al. 2009] Aleai, S., Arcaute, E., Khuller, S.,\nMa, W., Malekian, A., and Tomlin, J. 2009. Online\nallocation of display advertisements subject to advanced\nsales contracts. In Proc. of the 3rd Int. Workshop on\nData Mining and Audience Intelligence for Advertising\n(ADKDD).\n[Bharadwaj et al. 2010] Bharadwaj, V., Ma, W.,\nSchwarz, M., Shanmugasundaram, J., Vee, E., Xie,\nJ., and Yang, J. 2010. Pricing guaranteed contracts in\nonline display advertising.\n[Devenur and Hayes 2009] Devenur, N. R. and Hayes,\nT. P. 2009. The adwords problem: online keyword\nmatching with budgeted bidders under random\npermutations. In ACM Conference on Electronic\nCommerce. 71\u201378.\n[Feige et al. 2008] Feige, U., Immorlica, N., Mirrokni,\nV., and Nazerzadeh, H. 2008. A combinatorial\nallocation mechanism with penalties for banner\nadvertising. Presented at INFORMS.\n[Feldman et al. 2009] Feldman, J., Mehta, A.,\nMirrokni, V. S., and Muthukrishnan, S. 2009.\nOnline stochastic matching: Beating 1-1/e. In FOCS.\nIEEE Computer Society, 117\u2013126.\n[Ghosh et al. 2009] Ghosh, A., McAfee, P., Papineni,\nK., and Vassilvitskii, S. 2009. Bidding for\nrepresentative allocations for display advertising. In\nWINE, S. Leonardi, Ed. Lecture Notes in Computer\nScience Series, vol. 5929. Springer, 208\u2013219.\n[Karp et al. 1990] Karp, R. M., Vazirani, U. V., and\nVazirani, V. V. 1990. An optimal algorithm for on-line\nbipartite matching. In STOC '90: Proceedings of the\ntwenty-second annual ACM symposium on Theory of\ncomputing. ACM, New York, NY, USA, 352\u2013358.\n[Katriel et al. 2007] Katriel, I., Kenyon-Mathieu, C.,\nand Upfal, E. 2007. Commitment under uncertainty:\nTwo-stage stochastic matching problems. In ICALP,\nL. Arge, C. Cachin, T. Jurdzinski, and A. Tarlecki, Eds.\nLecture Notes in Computer Science Series, vol. 4596.\nSpringer, 171\u2013182.\n[Nakamura and Abe 2005] Nakamura, A. and Abe, N.\n2005. Improvements to the linear programming based\nscheduling of web advertisements. J. Electronic\nCommerce Research 5, 75\u201398.\n[Negruseri et al. 2009] Negruseri, C. S., Pasoi, M. B.,\nStanley, B., Stein, C., and Strat, C. G. 2009.\nSolving maximum flow problems on real world bipartite\ngraphs. In ALENEX, I. Finocchi and J. Hershberger,\nEds. SIAM, 14\u201328.\n\n\f[Radovanovic and Zeevi 2009] Radovanovic, A. and\nZeevi, A. 2009. Revenue maximization in\nreservation-based online advertising. Presented at\nINFORMS.\n[Vee et al. 2010] Vee, E., Vassilvitskii, S., and\nShanmugasundarum, J. 2010. Optimal online\nassignment with forecasts. Proc. of the ACM Conf. on\nElectronic Commerce.\n[Yang and Tomlin 2008] Yang, J. and Tomlin, J. 2008.\nAdvertising inventory allocation based on\nmulti-objective optimization. Presented at INFORMS.\n\n\f"}