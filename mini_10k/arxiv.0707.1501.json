{"id": "http://arxiv.org/abs/0707.1501v1", "guidislink": true, "updated": "2007-07-10T17:38:26Z", "updated_parsed": [2007, 7, 10, 17, 38, 26, 1, 191, 0], "published": "2007-07-10T17:38:26Z", "published_parsed": [2007, 7, 10, 17, 38, 26, 1, 191, 0], "title": "Random subgroups and analysis of the length-based and quotient attacks", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0707.4368%2C0707.2173%2C0707.2120%2C0707.2762%2C0707.4377%2C0707.4431%2C0707.1284%2C0707.2645%2C0707.3016%2C0707.3259%2C0707.3089%2C0707.4414%2C0707.1914%2C0707.0070%2C0707.0569%2C0707.1501%2C0707.4148%2C0707.3836%2C0707.0752%2C0707.1408%2C0707.2502%2C0707.1916%2C0707.2752%2C0707.3602%2C0707.0683%2C0707.3256%2C0707.0304%2C0707.3307%2C0707.2571%2C0707.1156%2C0707.3555%2C0707.4596%2C0707.0931%2C0707.2928%2C0707.1906%2C0707.4262%2C0707.3260%2C0707.1278%2C0707.0528%2C0707.1813%2C0707.2865%2C0707.0782%2C0707.1645%2C0707.0142%2C0707.2342%2C0707.1492%2C0707.1841%2C0707.0220%2C0707.2480%2C0707.0737%2C0707.0733%2C0707.0608%2C0707.4037%2C0707.3747%2C0707.3699%2C0707.3318%2C0707.1380%2C0707.0820%2C0707.1925%2C0707.2225%2C0707.2252%2C0707.1009%2C0707.3362%2C0707.3512%2C0707.2433%2C0707.2150%2C0707.1457%2C0707.2292%2C0707.3462%2C0707.2663%2C0707.3892%2C0707.3361%2C0707.1969%2C0707.3303%2C0707.4529%2C0707.0902%2C0707.3047%2C0707.1971%2C0707.0023%2C0707.2400%2C0707.3767%2C0707.0991%2C0707.1677%2C0707.3428%2C0707.2606%2C0707.1386%2C0707.2189%2C0707.1785%2C0707.3020%2C0707.0175%2C0707.0093%2C0707.0256%2C0707.3118%2C0707.4651%2C0707.3214%2C0707.1002%2C0707.1423%2C0707.2862%2C0707.3955%2C0707.3841%2C0707.3040&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Random subgroups and analysis of the length-based and quotient attacks"}, "summary": "In this paper we discuss generic properties of \"random subgroups\" of a given\ngroup G. It turns out that in many groups G (even in most exotic of them) the\nrandom subgroups have a simple algebraic structure and they \"sit\" inside G in a\nvery particular way. This gives a strong mathematical foundation for\ncryptanalysis of several group-based cryptosystems and indicates on how to\nchose \"strong keys\". To illustrate our technique we analyze the\nAnshel-Anshel-Goldfeld (AAG) cryptosystem and give a mathematical explanation\nof recent success of some heuristic length-based attacks on it. Furthermore, we\ndesign and analyze a new type of attacks, which we term the quotient attacks.\nMathematical methods we develop here also indicate how one can try to choose\n\"parameters\" in AAG to foil the attacks.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0707.4368%2C0707.2173%2C0707.2120%2C0707.2762%2C0707.4377%2C0707.4431%2C0707.1284%2C0707.2645%2C0707.3016%2C0707.3259%2C0707.3089%2C0707.4414%2C0707.1914%2C0707.0070%2C0707.0569%2C0707.1501%2C0707.4148%2C0707.3836%2C0707.0752%2C0707.1408%2C0707.2502%2C0707.1916%2C0707.2752%2C0707.3602%2C0707.0683%2C0707.3256%2C0707.0304%2C0707.3307%2C0707.2571%2C0707.1156%2C0707.3555%2C0707.4596%2C0707.0931%2C0707.2928%2C0707.1906%2C0707.4262%2C0707.3260%2C0707.1278%2C0707.0528%2C0707.1813%2C0707.2865%2C0707.0782%2C0707.1645%2C0707.0142%2C0707.2342%2C0707.1492%2C0707.1841%2C0707.0220%2C0707.2480%2C0707.0737%2C0707.0733%2C0707.0608%2C0707.4037%2C0707.3747%2C0707.3699%2C0707.3318%2C0707.1380%2C0707.0820%2C0707.1925%2C0707.2225%2C0707.2252%2C0707.1009%2C0707.3362%2C0707.3512%2C0707.2433%2C0707.2150%2C0707.1457%2C0707.2292%2C0707.3462%2C0707.2663%2C0707.3892%2C0707.3361%2C0707.1969%2C0707.3303%2C0707.4529%2C0707.0902%2C0707.3047%2C0707.1971%2C0707.0023%2C0707.2400%2C0707.3767%2C0707.0991%2C0707.1677%2C0707.3428%2C0707.2606%2C0707.1386%2C0707.2189%2C0707.1785%2C0707.3020%2C0707.0175%2C0707.0093%2C0707.0256%2C0707.3118%2C0707.4651%2C0707.3214%2C0707.1002%2C0707.1423%2C0707.2862%2C0707.3955%2C0707.3841%2C0707.3040&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "In this paper we discuss generic properties of \"random subgroups\" of a given\ngroup G. It turns out that in many groups G (even in most exotic of them) the\nrandom subgroups have a simple algebraic structure and they \"sit\" inside G in a\nvery particular way. This gives a strong mathematical foundation for\ncryptanalysis of several group-based cryptosystems and indicates on how to\nchose \"strong keys\". To illustrate our technique we analyze the\nAnshel-Anshel-Goldfeld (AAG) cryptosystem and give a mathematical explanation\nof recent success of some heuristic length-based attacks on it. Furthermore, we\ndesign and analyze a new type of attacks, which we term the quotient attacks.\nMathematical methods we develop here also indicate how one can try to choose\n\"parameters\" in AAG to foil the attacks."}, "authors": ["Alexei G. Myasnikov", "Alexander Ushakov"], "author_detail": {"name": "Alexander Ushakov"}, "author": "Alexander Ushakov", "links": [{"href": "http://arxiv.org/abs/0707.1501v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0707.1501v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "math.GR", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "math.GR", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.CR", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0707.1501v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0707.1501v1", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "arXiv:0707.1501v1 [math.GR] 10 Jul 2007\n\nRandom subgroups and analysis\nof the length-based and quotient attacks\nAlexei G. Myasnikov and Alexander Ushakov\nJuly 09, 2007\nAbstract\nIn this paper we discuss generic properties of \"random subgroups\" of\na given group G. It turns out that in many groups G (even in most exotic of them) the random subgroups have a simple algebraic structure and\nthey \"sit\" inside G in a very particular way. This gives a strong mathematical foundation for cryptanalysis of several group-based cryptosystems\nand indicates on how to chose \"strong keys\". To illustrate our technique\nwe analyze the Anshel-Anshel-Goldfeld (AAG) cryptosystem and give a\nmathematical explanation of recent success of some heuristic length-based\nattacks on it. Furthermore, we design and analyze a new type of attacks,\nwhich we term the quotient attacks. Mathematical methods we develop\nhere also indicate how one can try to choose \"parameters\" in AAG to foil\nthe attacks.\n\nContents\n1 Introduction\n\n2\n\n2 Asymptotically dominant properties\n2.1 A brief description . . . . . . . . . . . . .\n2.2 Random subgroups and generating tuples\n2.3 Asymptotic properties of subgroups . . . .\n2.4 Groups with generic free basis property .\n2.5 Quasi-isometrically embedded subgroups .\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n\n4\n5\n6\n7\n8\n10\n\n3 Anshel-Anshel-Goldfeld scheme\n13\n3.1 Description of Anshel-Anshel-Goldfeld scheme . . . . . . . . . . . 13\n3.2 Security assumptions of AAG scheme . . . . . . . . . . . . . . . . 13\n4\n\nLength Based Attacks\n15\n4.1 A general description . . . . . . . . . . . . . . . . . . . . . . . . . 16\n4.2 LBA in free groups . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n4.3 LBA in groups from F B exp . . . . . . . . . . . . . . . . . . . . . 20\n\n1\n\n\f5 Computing the geodesic length in a subgroup\n21\n5.1 Related algorithmic problems . . . . . . . . . . . . . . . . . . . . 22\n5.2 Geodesic length in braid groups . . . . . . . . . . . . . . . . . . . 23\n6 Quotient attacks\n25\n6.1 Membership Problems in free groups . . . . . . . . . . . . . . . . 26\n6.2 The Conjugacy Problems in free groups . . . . . . . . . . . . . . 28\n6.3 The MSP and SCSP* problems in groups with \"good\" quotients 30\n\n1\n\nIntroduction\n\nMost of the modern cryptosystems use algebraic structures as their platforms\nsuch as rings, groups, lattices, etc. Typically, cryptographic protocols involve a\nrandom choice of various algebraic objects related to the platforms: elements,\nsubgroups, or homomorphisms. One of the key points to use randomness is to\nfoil various statistical attacks, or attacks which could use some specific properties of objects if they are not chosen randomly. The main goal of this paper is\nto show that randomly chosen objects quite often have very particular properties, which allow some \"unexpected\" attacks. We argue that knowledge of basic\nproperties of the random objects must be a part of any serious cryptanalysis\nand it has to be one of the principal tools in choosing good keys.\nIn the paper [37] we studied asymptotic properties of words representing the\ntrivial element in a given finitely presented group G. It turned out that a randomly chosen trivial word in G has a \"hyperbolic\" van Kampen diagram, even\nif the group G itself is not hyperbolic. This allows one to design a correct (no\nerrors) search decision algorithm which gives the answer in polynomial time on\na generic subset (i.e., on \"most\" elements) of the Word Search Problem in G.\nA similar result for the Conjugacy Search Problem in finitely presented groups\nhas been proven in [38]. These results show that the group-based cryptosystems\nwhose security is based on the word or conjugacy search problems are subject\nto effective attacks, unless the keys are chosen in the complements of the corresponding generic sets. Rigorous proofs of results of [37] and [38] are available\nin [50].\nIn this paper we study asymptotic properties of finitely generated subgroup\nof groups. We start by introducing a methodology to deal with asymptotic\nproperties of subgroups in a given finitely generated group, then we describe\ntwo such properties, and finally we show how one can use them in cryptanalysis\nof group based cryptosystems.\nThen we dwell on the role of asymptotically dominant properties of subgroups in modern cryptanalysis. We mostly focus on one particular example the AAG cryptosystem [2], however, it seems plausible that a similar analysis\napplies to some other cryptosystems. One of our main goals here is to give\nmathematical reasons why the so-called Length Based Attacks give surprisingly\ngood results in breaking AAG. Another goal is to introduce and analyze a new\nattack that we coiled a quotient attack. We also want to emphasize that we\n\n2\n\n\fbelieve that this \"asymptotic cryptanalysis\" provides a good method to choose\nstrong keys (groups, subgroups, and elements) for AAG scheme (with different\ngroups as the platforms) that may prevent some of the known attacks, including\nthe ones discussed here.\nThe main focus is on security of the Anshel-Anshel-Goldfeld (AAG) public\nkey exchange scheme [2] and cryptanalysis of the Length Based Attack (LBA).\nThis attack appeared first in the paper [26] by J. Hughes and A. Tannenbaum,\nand later was further developed in a joint paper [23] by Garber, Kaplan, Teicher,\nTsaban, and Vishne. Recently, the most successful variation of this attack for\nbraid groups was developed in [39]. Notice that Ruinsky, Shamir, and Tsaban\nused LBA in attacking some other algorithmic problems in groups [45]. Our goal\nis to give mathematical reasons why Length Based Attacks, which are, in their\nbasic forms, very simple algorithms, give surprisingly good results in breaking\nAAG scheme. It seems plausible that a similar analysis applies to some other\ncryptosystems. We hope that this cryptanalysis provides also a good method\nto choose strong keys (groups, subgroups, and elements) for various realizations\nof AAG schemes that would prevent some of the known attacks.\nThe basic idea of LBA is very simple, one solves the Simultaneous Conjugacy\nSearch Problem relative to a subgroup (SCSP*) (with a constraint that the solutions are in a given subgroup) precisely in the same way as this would be done\nin a free group. Astonishingly, experiments show that this strategy works well\nin groups which are far from being free, for instance, in braid groups. We claim\nthat the primary reason for such phenomenon is that asymptotically finitely\ngenerated subgroups in many groups are free. Namely, in many groups a randomly chosen tuple of elements with overwhelming probability freely generates\na free subgroup (groups with Free Basis Property). This allows one to analyze the generic complexity of LBA, SCSP*, and some other related algorithmic\nproblems. Moreover, we argue that LBA implicitly relies on fast computing of\nthe geodesic length of elements in finitely generated subgroups of the platform\ngroup G, or some good approximations of that length. In fact, most of LBA\nstrategies tacitly assume that the geodesic length of elements in G is a good\napproximation of the geodesic length of the same elements in a subgroup. On\nthe first glance this is a provably wrong assumption, it is known that even in\na braid group Bn , n \u2265 3, there are infinitely many subgroups whose distortion\nfunction (that measures the geodesic length in a subgroup relative to the one\nin G) is not bounded by any recursive function. We show, nevertheless, that,\nagain, in many groups the distortion of randomly chosen finitely generated subgroups is at most linear. Our prime objective is the braid group Bn , n \u2265 3.\nUnfortunately, the scope of this paper does not allow a thorough investigation\nof asymptotic properties of subgroups of Bn . However, we prove the main results for the pure braid groups P Bn , which are subgroups of finite index in the\nambient braid groups. We conjecture that the results hold in the groups Bn as\nwell, and hope to fill in this gap elsewhere in the future. In fact, our results\nhold for all finitely generated groups G that have non-abelian free quotients.\nWhile studying the length based attacks we realized that there exists a new\npowerful type of attacks on AAG cryptosystems - the quotient attacks (QA).\n3\n\n\fThese attacks are just fast generic algorithms to solve various search problems\nin groups, such as the Membership Search Problem (MSP) and SCSP*. The\nmain idea behind QA is that to solve a computational problem in a group G\nit suffices, on most inputs, to solve it in a suitable quotient G/N , provided\nG/N has a fast decision algorithm for the problem. Robustness of such an\nalgorithm relies on the following property of the quotient G/N : a randomly\nchosen finitely generated subgroup of G has trivial intersection with the kernel\nN . In particular, this is the case, if G/N is a free non-abelian group. Notice,\nthat a similar idea was already exploited in [29], but there the answer was given\nonly for inputs in \"No\" part of a given decision problem, which, obviously, does\nnot apply to search problems at all. The strength of our approach comes from\nthe extra requirement that G/N has the free basis property.\nMore generally, our main goal concerns with the methods on how to use\nasymptotic algebra and generic case complexity in cryptanalysis of group based\ncryptosystems. All asymptotic results on subgroups, that are used here, are\nbased on the notion of an asymptotic density with respect to the standard distributions on generating sets of the subgroups. Essentially, this notion appeared\nfirst in the form of zero-one laws in probability theory and combinatorics. It\nbecame extremely popular after seminal works of Erdos, that shaped up the socalled The Probabilistic Method (see, for example, [1]). In infinite group theory\nit is due mostly to the famous Gromov's result on hyperbolicity of random\nfinitely generated groups (see [42] for a complete proof). Generic complexity\nof algorithmic problems appeared first in the papers [29, 30, 10, 9]. We refer\nthe reader to a comprehensive survey [24] on generic complexity of algorithms.\nSome recent relevant results on generic complexity of search problems in groups\n(which are of the main interest in cryptography) can be found in [50].\nThis paper is intended to both algebraists and cryptographers. We believe,\nthat AAG cryptosystem, despite being heavily battered by several attacks, is\nvery much alive still. It simply did not get a fair chance to survive because of\ninsufficient group theoretic research it required. It is still quite plausible that\nthere are platform groups G and methods to chose strong keys for AAG which\nwould foil all known attacks. To find such a group G is an interesting algebraic\nproblem. On the other hand, our method of analyzing generic complexity of\ncomputational security assumptions of AAG, which is based on the asymptotic\nbehavior of subgroups in a given group, creates a bridge between asymptotic\nalgebra and cryptanalysis. This could be applicable to other cryptosystems\nwhich rely on a random choice of algebraic objects: subgroups, elements, or\nhomomorphisms.\n\n2\n\nAsymptotically dominant properties\n\nIn this section we develop some tools to study asymptotic properties of subgroups of groups. Throughout this section by G we denote a group with a finite\ngenerating set X.\n\n4\n\n\f2.1\n\nA brief description\n\nAsymptotic properties of subgroups, a priori, depend on a given probability\ndistribution on these subgroups. In general, there are several natural procedures\nto generate subgroups in a given group. However, there is no a unique universal\ndistribution of this kind. We refer to [36] for a discussion on different approaches\nto random subgroup generation.\nOur basic principle here is that in applications one has to consider the particular distribution that comes from a particular random generator of subgroups\nused in the given application, say a cryptographic protocol. As soon as the\ndistribution is fixed one can approach asymptotic properties of subgroups via\nasymptotic densities with respect to a fixed stratification of the set of subgroups\n(which usually comes alone with the generating procedure). We briefly discuss\nthese ideas below and refer to [9, 10, 29, 30], and to a recent survey [24], for a\nthorough exposition. In Section 2.2 we adjust these general ideas to a particular\nway to generate subgroups which is used in cryptography.\nRecall, that G is a group generated by a finite set X. The first step is to\nchoose and fix a particular way to describe finitely generated subgroups H of\nG. For example, a description \u03b4 of H could be a tuple of words (u1 , . . . , uk ) in\nthe alphabet X \u00b11 = X \u222a X \u22121 representing a set of generators of H, or a set\nof words {u1 , . . . , uk } that generates H, or a folded finite graph that accepts\nthe subgroup generated by the generators {u1 , . . . , uk } of H in the ambient free\ngroup F (X) (see [28]), etc. In general, the descriptions above, by no means are\nunique for a given subgroup H, in fact, we listed them here in the decreasing\ndegree of repetition.\nWhen the way to describe subgroups in G is fixed one can consider the set\n\u2206 of all such descriptions of all finitely generated subgroups of G. The next\nstep is to define a size s(\u03b4) of a given description \u03b4 \u2208 \u2206, i.e., a function\ns:\u2206\u2192N\nin such a way that the set (the ball of radius n)\nBn = {\u03b4 \u2208 \u2206 | s(\u03b4) \u2264 n}\nis finite. This gives a stratification of the set \u2206 into a union of finite balls:\n\u2206 = \u222a\u221e\nn=1 Bn .\n\n(1)\n\nLet \u03bcn be a given probabilistic measure on Bn (it could be the measure induced on Bn by some fixed measure on the whole set \u2206 or a measure not related\nto any measure on \u2206). The stratification (1) and the ensemble of measures\n{\u03bcn } = {\u03bcn | n \u2208 N}\n\n(2)\n\nallow one to estimate the asymptotic behavior of subsets of \u2206. For a subset\nR \u2286 \u2206 the asymptotic density \u03c1\u03bc (R) is defined by the following limit (if it\nexists)\n\u03c1\u03bc (R) = lim \u03bcn (R \u2229 Bn ).\nn\u2192\u221e\n\n5\n\n\fIf \u03bcn is the uniform distribution on the finite set Bn then\n\u03bcn (R \u222a Bn ) =\n\n|R \u2229 Bn |\n|Bn |\n\nis the n-th frequency, or probability, to hit an element from R in the ball Bn .\nIn this case we refer to \u03c1\u03bc (R) as to the asymptotic density of R and denote it\nby \u03c1(R).\nOne can also define the asymptotic densities above using lim sup rather then\nlim, in which event \u03c1\u03bc (R) does always exist.\nWe say that a subset R \u2286 \u2206 is generic if \u03c1\u03bc (R) = 1 and negligible if \u03c1\u03bc (R) =\n0. It is worthwhile to mention that the asymptotic densities not only allow one\nto distinguish between \"large\" (generic) and \"small\" (negligible) sets, but give\na tool to differentiate between various large (or small) sets. For instance, we\nsay that R has asymptotic density \u03c1\u03bc (R) with a super-polynomial convergence\nrate if\n|\u03c1\u03bc (R) \u2212 \u03bcn (R \u2229 Bn )| = o(n\u2212k )\nfor any k \u2208 N. For brevity, R is called strongly generic if \u03c1\u03bc (R) = 1 with a superpolynomial convergence rate. The set R is strongly negligible if its complement\nS \u2212 R is strongly generic.\nSimilarly, one can define exponential convergence rates and exponentially\ngeneric (negligible) sets.\n\n2.2\n\nRandom subgroups and generating tuples\n\nIn this section we follow the most commonly used in cryptography procedure to\ngenerate random subgroups of a given group (see for example [2]). In brief, the\nfollowing procedure is often employed:\nRandom Generator of subgroups in G:\n\u2022 pick a random k \u2208 N between given boundaries K0 \u2264 k \u2264 K1 ;\n\u2022 pick randomly k words w1 , . . . , wk \u2208 F (X) with fixed length range L0 \u2264\n|wi | \u2264 L1 ;\n\u2022 output a subgroup hw1 , . . . , wk i of G.\nWithout loss of generality we may fix from the beginning a single natural number\nk, instead of choosing it from the finite interval [K0 , K1 ] (by the formula of\ncomplete probability the general case can be reduced to this one). Fix k \u2208 N,\nk \u2265 1, and focus on the set of all k-generated subgroups of G.\nThe corresponding descriptions \u03b4, the size function, and the corresponding\nstratification of the set of all descriptions can be formalized as follows. By a\ndescription \u03b4(H) of a k-generated subgroup H of G we understand here any\nk-tuple (w1 , . . . , wk ) of words from F (X) that generates H in G. Hence, in this\ncase the space of all descriptions is the cartesian product F (X)k of k copies of\nF (X):\n\u2206 = \u2206k = F (X)k .\n6\n\n\fThe size s(w1 , . . . , wk ) can be defined as the total length of the generators\ns(w1 , . . . , wk ) = |w1 | + . . . + |wk |,\nor as the maximal length of the components:\ns(w1 , . . . , wk ) = max{|w1 |, . . . , |wk |}.\nOur approach works for both definitions, so we do not specify which one we use\nhere. For n \u2208 N denote by Bn the ball of radius n in \u2206:\nBn = {(w1 , . . . , wk ) \u2208 F (X)k | s(w1 , . . . , wk ) \u2264 n}.\nThis gives the required stratification\n\u2206 = \u222a\u221e\nn=1 Bn .\nFor a subset M of \u2206 we define the asymptotic density \u03c1(M ) relative to the\nstratification above assuming the uniform distribution on the balls Bn :\n\u03c1(M ) = lim\n\nn\u2192\u221e\n\n|Bn \u2229 M |\n.\n|Bn |\n\nNotice, that there are several obvious deficiencies in this approach: we consider\nsubgroups with a fixed number of generators, every subgroup may have distinct\nk-generating tuples, every generator can be described by several distinct words\nfrom F (X), i.e., our descriptions are far from being unique. However, as we\nhave mentioned above, this models describe the standard methods to generate\nsubgroups in cryptographic protocols. We refer to [36] for other approaches.\n\n2.3\n\nAsymptotic properties of subgroups\n\nLet G be a group with a finite set of generators X and k a fixed positive natural\nnumber. Denote by P a property of descriptions of k-generated subgroups of\nG. By P(G) we denote the set of all descriptions from \u2206 = \u2206k that satisfy P\nin G.\nDefinition 2.1. We say that a property P \u2286 \u2206 of descriptions of k-generated\nsubgroups of G is:\n1) asymptotically visible in G if \u03c1(P(G)) > 0;\n2) generic in G if \u03c1(P(G)) = 1;\n3) strongly generic in G if \u03c1(P(G)) = 1 and the rate of convergence of\n\u03c1n (P(G)) is super-polynomial;\n4) exponentially generic in G if \u03c1(P(G)) = 1 and the rate of convergence of\n\u03c1n (P(G)) is exponential.\n\n7\n\n\fInformally, if P is asymptotically visible for k-generated subgroups of G\nthen there is a certain non-zero probability that a randomly and uniformly\nchosen description \u03b4 \u2208 \u2206 of a sufficiently big size results in a subgroup of G\nsatisfying P. Similarly, if P is exponentially generic for k-generated subgroups\nof G then a randomly and uniformly chosen description \u03b4 \u2208 \u2206 of a sufficiently\nbig size results in a subgroup of G satisfying P with overwhelming probability.\nLikewise, one can interpret generic and strongly generic properties of subgroups.\nIf a set of descriptions \u2206 of subgroups of G is fixed, then we sometimes abuse\nthe terminology and refer to asymptotic properties of descriptions of subgroups\nas asymptotic properties of the subgroups itself.\nExample 2.2. Let H be a fixed k-generated group. Consider the following\nproperty PH : a given description (w1 , . . . , wk ) \u2208 F (X)k satisfies PH if the\nsubgroup hw1 , . . . , wk i, generated in G by this tuple, is isomorphic to H. If\nPH (G) is asymptotically visible (generic) in \u2206 then we say that the group H is\nasymptotically visible (generic) in G (among k-generated subgroups).\nBy k-spectrum Speck (G) of G we denote the set of all (up to isomorphism)\nk-generated groups which are asymptotically visible in G.\nThere are several natural questions about asymptotically visible subgroups\nof G that play an important part in cryptography. For example, when choosing\nk-generated subgroups of G randomly it might be useful to know what kind of\nsubgroups you can get with non-zero probability. Hence the following question\nis of interest:\nProblem 2.3. What is the spectrum Speck (G) for a given group G and a\nnatural number k \u2265 1?\nMore technical, but also important in applications is the following question.\nProblem 2.4. Does the spectrum Speck (G) depend on a given finite set of\ngenerators of G?\nWe will see in due course that answers to these questions play an important\npart in the choice of strong keys in some group-based cryptosystems.\n\n2.4\n\nGroups with generic free basis property\n\nDefinition 2.5. We say that a tuple (u1 , . . . , uk ) \u2208 F (X)k has a free basis\nproperty (F B) in G if it freely generates a free subgroup in G.\nIn [27] Jitsukawa showed that F B is generic for k-generated subgroups of\na finitely generated non-abelian group F (X) for every k \u2265 1 with respect to\nthe standard basis X. Martino, Turner and Ventura strengthened this result in\n[35], they proved that F B is exponentially generic in F (X) for every k \u2265 1 with\nrespect to the standard basis X. Recently, it has been shown in [36] that F B\nis exponentially generic in arbitrary hyperbolic non-elementary (in particular,\nfree non-abelian) group for every k \u2265 1 and with respect to any finite set of\ngenerators.\n8\n\n\fWe say that the group G has the generic free basis property if F B is generic\nin G for every k \u2265 1 and every finite generating set of G. Similarly, we define\ngroups with strongly and exponentially generic free basis property. By F B gen ,\nF B st , F B exp we denote classes of finitely generated groups with, correspondingly, generic, strongly generic, and exponentially generic, free basis property.\nThe following result gives a host of examples of groups with generic F B.\nTheorem 2.6. Let G be a finitely generated group and N a normal subgroup\nof G. If the quotient group G/N is in F B gen , or in F B st , or in F B exp , then\nthe whole group G is in the same class.\nProof. Let H = G/N and \u03c6 : G \u2192 H be the canonical epimorphism. Fix a\nfinite generating set X of G and a natural number k \u2265 1. Clearly, X \u03c6 is a\nfinite generating set of H. By our assumption, the free basis property is generic\nin H with respect to the generating set X \u03c6 and given k. Identifying x \u2208 X\nwith x\u03c6 \u2208 H we may assume that a finitely generated subgroup A of G and\nthe subgroup A\u03c6 have the same set of descriptions. Observe now, that for a\nsubgroup A of G generated by a k-tuple (u1 , . . . , uk ) \u2208 F (X)k if A\u03c6 is free with\nbasis (u\u03c61 , . . . , u\u03c6k ) then A is also free with basis (u1 , . . . , uk ). Therefore for each\nt\u2208N\n|Bt \u2229 F B(G)|\n|Bt \u2229 F B(H)|\n\u2265\n.\n|Bt |\n|Bt |\nThis implies, that if F B(H) is generic in H = G/N , that F B(G) is also generic in\nG, and its convergence rate in G is not less then the corresponding convergence\nrate in H, as claimed.\nThe result above bears on some infinite groups used recently in group-based\ncryptography. Braid groups Bn appear as the main platform in the braid-group\ncryptography (see [2, 31, 17, 3]). Recall that the braid group Bn can be defined\nby the classical Artin presentation:\n\u001c\n\u001d\n\u03c3i \u03c3j \u03c3i = \u03c3j \u03c3i \u03c3j if |i \u2212 j| = 1\nBn =\n\u03c31 , . . . , \u03c3n\u22121\n.\n\u03c3i \u03c3j = \u03c3j \u03c3i\nif |i \u2212 j| > 1\nDenote by \u03c3i,i+1 the transposition (i, i+1) in the symmetric group \u03a3n . The map\n\u03c3i \u2192 \u03c3i,i+1 , i = 1, . . . , n gives rise to the canonical epimorphism \u03c0 : Bn \u2192 \u03a3n .\nThe kernel of \u03c0 is a subgroup of index n! in Bn , termed the pure braid group\nP Bn .\nCorollary 2.7. The free basis property is exponentially generic in the pure\nbraid groups P Bn for n \u2265 3.\nProof. It is known (see [5], for example) that a pure braid group P Bn , n \u2265 3,\nhas the group P B3 as its epimorphic quotient, and the group P B3 is isomorphic\nto F2 \u00d7 Z, so P Bn , n \u2265 3, has the free group F2 as its quotient. Now, the\nresult follows from Theorem 2.6 and the strong version of the Jitsukawa's result\n[35, 36, 27].\n9\n\n\fAs we have seen a pure braid group P Bn , n \u2265 3, has exponentially generic\nfree basis property and it is a subgroup of finite index in the braid group Bn .\nHowever, at the moment, we do not have a proof that Bn has exponentially\ngeneric free basis property. Though, we conjecture that this should be true.\nProblem 2.8. Is it true that the braid groups Bn , n \u2265 3, has exponentially\ngeneric free basis property?\nIn [51] partially commutative groups were proposed as possible platforms\nfor some cryptosystems. We refer to [8] for more recent discussion on this. By\ndefinition a partially commutative group G(\u0393) (also called, sometimes, as right\nangled Artin groups, or graph groups, or trace groups) is a group associated\nwith a finite graph \u0393 = (V, E), with a set of vertices V = {v1 , . . . , vn } and a set\nof edges E \u2286 V \u00d7 V , by the following presentation:\nG(\u0393) = hv1 , . . . , vn | vi vj = vj vi f or (vi , vj ) \u2208 Ei.\nObserve, that the group G(\u0393) is abelian if and only if the graph \u0393 is complete.\nCorollary 2.9. The free basis property is exponentially generic in non-abelian\npartially commutative groups.\nProof. Let G = G(\u0393) be a non-abelian partially commutative group corresponding to a finite graph \u0393. Then there are three vertices in \u0393, say v1 , v2 , v3 such\nthat the complete subgraph \u03930 of \u0393 generated by these vertices is not a triangle.\nIn particular, a partially commutative group G0 = G(\u03930 ) is either a free group\nF3 (no edges in \u03930 ), or (Z\u00d7 Z)\u2217 Z (only one edge in \u03930 ), or F2 \u00d7 Z (precisely two\nedges in \u03930 ). Notice that in all three cases the group G(\u03930 ) has F2 as its epimorphic quotient. Now, it suffices to show that G(\u03930 ) is an epimorphic quotient\nof G(\u0393), which is obtained from G(\u0393) by adding to the standard presentation of\nG(\u0393) all the relations of the type v = 1, where v is a vertex of \u0393 different from\nv1 , v2 , v3 . This shows that F2 is a quotient of G(\u0393) and the result follows from\nTheorem 2.6.\nObserve, that some other groups, that have been proposed as platforms in\nbased-group cryptography, do not have non-abelian free subgroups at all, so they\ndo not have free basis property for k \u2265 2. For instance, in [44] the Grigorchuk\ngroups were used as a platform. Since these groups are periodic (i.e., every\nelement has finite order) they do not contain non-trivial free subgroups. It is\nnot clear what are asymptotically visible subgroups in Grigorchuk groups. As\nanother example, notice that in [46] authors put forth the Thompson group F\nas a platform. It is known that there are no non-abelian free subgroups in F\n(see, for example, [12]), so F does not have free basis property. Recently, some\ninteresting results were obtain on the spectrum Speck (F ) in [20].\n\n2.5\n\nQuasi-isometrically embedded subgroups\n\nIn this section we discuss another property of subgroups of G that plays an\nimportant part in our cryptanalysis of group based cryptosystems.\n10\n\n\fLet G be a group with a finite generating set X. The Cayley graph \u0393(G, X)\nis an X-labeled directed graph with the vertex set G and such that any two\nvertices g, h \u2208 G are connected by an edge from g to h with a label x \u2208 X if and\nonly if gx = h in G. For convenience we usually assume that the set X is closed\nunder inversion, i.e., x\u22121 \u2208 X for every x \u2208 X. One can introduce a metric dX\non G setting dX (g, h) equal to the length of a shortest word in X \u00b11 = X \u222a X \u22121\nrepresenting the element g \u22121 h in G. It is easy to see that dX (g, h) is equal to\nthe length of a shortest path from g to h in the Cayley graph \u0393(G, X). This\nturns G into a metric space (G, dX ). By lX (g) we denote the length of a shortest\nword in generators X \u00b11 representing the element g, clearly lX (g) = dX (1, g).\nLet H be a subgroup of G generated by a finite set of elements Y . Then\nthere are two metrics on H: the first one is dY described above and the other\none is the metric dX induced from the metric space (G, dX ) on the subspace\nH. The following notion allows one to compare these metrics. Recall that a\nmap f : M1 \u2192 M2 between two metric spaces (M1 , d1 ) and (M2 , d2 ) is a quasiisometric embedding if there are constants \u03bb > 1, c > 0 such that for every\nelements x, y \u2208 M1 the following inequalities hold:\n1\nd1 (x, y) \u2212 c \u2264 d2 (f (x), f (y)) \u2264 \u03bbd1 (x, y) + c.\n\u03bb\n\n(3)\n\nIn particular, we say that a subgroup H with a finite set of generators Y is\nquasi-isometrically embedded into G if the inclusion map i : H \u0592\u2192 G is a quasiisometric embedding i : (H, dY ) \u2192 (G, dX ). Notice, that in this case the righthand inequality in (3) always holds, since for all f, h \u2208 H\ndX (i(f ), i(h)) \u2264 max{lX (y)} * dY (f, h).\ny\u2208Y\n\nTherefore, the definition of quasi-isometrically embedded subgroup takes the\nfollowing simple form (in the notation above).\nDefinition 2.10. Let G be a group with a finite generating set X and H\na subgroup of G generated by a finite set of elements Y . Then H is quasiisometrically embedded into G if there are constants \u03bb > 1, c > 0 such that for\nevery elements f, h \u2208 H the following inequality holds:\n1\ndY (f, h) \u2212 c \u2264 dX (f, h).\n\u03bb\n\n(4)\n\nIt follows immediately from the definition, that if X and X \u2032 are two finite\ngenerating sets of G then the metric spaces (G, dX ) and (G, dX \u2032 ) are quasiisometrically embedded into each other. This implies that the notion of quasiisometrically embedded subgroups is independent of the choice of finite generating sets in H or in G (though the constants \u03bb and c could be different).\nDefinition 2.11. Let G be a group with a finite generating set X. We say that\na tuple (u1 , . . . , uk ) \u2208 F (X)k has a QI (quasi-isometric embedding) property\nin G if the subgroup it generates in G is quasi-isometrically embedded into G.\n11\n\n\fDenote by QI(G) the set of all tuples in F (X)k that satisfy the QI property in G. We term the property QI is generic in G if QI(G) is generic in\nG for every k \u2265 1 and every finite generating set of G. Similarly, we define groups with strongly and exponentially generic quasi-isometric embedding\nsubgroup property. Denote by QI gen , QI st , QI exp classes of finitely generated groups with, correspondingly, generic, strongly generic, and exponentially\ngeneric, quasi-isometric embedding subgroup property.\nIt is not hard to see that every finitely generated subgroup of a finitely\ngenerated free group F is quasi-isometrically embedded in F , so F \u2208 QI exp .\nThe following result gives further examples of groups with quasi-isometric\nembedding subgroup property.\nLet G \u2208 F B gen \u2229 QI gen . Notice, that the intersection of two generic sets\nF B(G) \u2286 F (X)k and QI(G) \u2286 F (X)k is again a generic set in F (X)k , so\nthe set F B(G) \u2229 QI(G) of all descriptions (u1 , . . . , uk ) \u2208 F (X)k that freely\ngenerate a quasi-isometrically embedded subgroup of G, is generic in F (X)k .\nObserve, that by the remark above, and the result on free basis property in free\ngroups, F B gen \u2229 QI gen contains all free groups of finite rank. The argument\napplies also to the strongly generic and exponentially generic variations of the\nproperties. To unify references we will use the following notation: F B \u2217 \u2229 QI \u2217\nfor \u2217 \u2208 {gen, st, exp}.\nTheorem 2.12. Let G be a finitely generated group with a quotient G/N . If\nG/N \u2208 F B \u2217 \u2229 QI \u2217 then G \u2208 F B \u2217 \u2229 QI \u2217 for any \u2217 \u2208 {gen, st, exp}.\nProof. Let G be a finitely generated group generated by X, N a normal subgroup of G such that the quotient G/N is in F B \u2217 \u2229 QI \u2217 . Let \u03c6 : G \u2192 G/N\nbe the canonical epimorphism. By Theorem 2.6 G \u2208 F B \u2217 , so it suffices to show\nnow that G \u2208 QI \u2217 .\nLet H be a k-generated subgroup with a set of generators Y = (u1 , . . . , uk ) \u2208\nF (X)k . Suppose that Y \u2208 F B \u2217 (G/N ) \u2229 QI \u2217 (G/N ), i.e., the image Y \u03c6 of Y\nin G/N freely generates a free group quasi-isometrically embedded into G/N .\nObserve, first, that for every element g \u2208 G one has lX (g) \u2265 lX \u03c6 (g \u03c6 ), where lX \u03c6\nis the length on G/N relative to the set of generators X \u03c6 . Since the subgroup\nH \u03c6 is quasi-isometrically embedded into G/N the metric space (H \u03c6 , dY \u03c6 ) quasiisometrically embeds into (G\u03c6 , dX \u03c6 ). On the other hand, \u03c6 maps the subgroup\nH onto the subgroup H \u03c6 isomorphically (since both are free groups with the\ncorresponding bases), such that for any h \u2208 H dY (h) = dY \u03c6 (h\u03c6 ). Now we can\ndeduce the following inequalities for g, h \u2208 H:\n1\n1\ndY (g, h) \u2212 c = dY \u03c6 (g \u03c6 , h\u03c6 ) \u2212 c \u2264 dX \u03c6 (g \u03c6 , h\u03c6 ) \u2264 dX (g, h)\n\u03bb\n\u03bb\nwhere \u03bb and c come from the quasi-isometric embedding of H \u03c6 into G/N . This\nshows that H is quasi-isometrically embedded into G, as required.\nCorollary 2.13. The following groups are in F B exp \u2229 QI exp :\n\n12\n\n\f1) Pure braid groups P Bn , n \u2265 3;\n2) Non-abelian partially commutative groups G(\u0393).\nProof. The arguments in Corollaries 2.7, 2.9 show that the groups P Bn , n \u2265 3,\nand G(\u0393), non-commutative, have quotient isomorphic to the free group F2 .\nNow the result follows from Theorems 2.6 and 2.12.\n\n3\n\nAnshel-Anshel-Goldfeld scheme\n\nIn this section we discuss the Anshel-Anshel-Goldfeld (AAG) cryptosystem for\npublic key exchange [2] and touch briefly on its algorithmic security.\n\n3.1\n\nDescription of Anshel-Anshel-Goldfeld scheme\n\nHere we give a general description of the Anshel-Anshel-Goldfeld cryptosystem.\nLet G be a group with a finite generating set X, it is called the platform\nof the scheme. We assume that elements w in G have unique normal forms w\u0304\nsuch that it is \"hard\" to reconstruct w from w\u0304 and there is a \"fast\" algorithm\nto compute w\u0304 when given w. We do not discuss here the security issues of these\ntwo components of the platform G, leaving this for the future.\nThe Anshel-Anshel-Goldfeld key exchange protocol requires the following\nsequence of steps. Alice [Bob resp.] chooses a random subgroup of G\nA = ha1 , . . . , am i\n\n[B = hb1 , . . . , bn i resp.]\n\nby randomly choosing generators a1 , . . . , am [b1 , . . . , bn resp.] as words in X \u00b11 ,\nand makes it public. Then Alice [Bob resp.] chooses randomly a secret element\na = u(a1 , . . . , am ) \u2208 A [b = v(b1 , . . . , bn ) \u2208 B resp.] as a product of the\ngenerators of A [B resp.] and their inverses, takes the conjugates ba1 , . . . , ban\n[ab1 , . . . , abm resp.], encodes them by taking their normal forms bai [abj resp.], and\nmakes these normal forms public:\nba1 , . . . , ban\n\n[ab1 , . . . , abm resp.].\n\nAfterward, they both can compute the secret shared element of G:\na\u22121 ab = [a, b] = (ba )\u22121 b\nand take its normal form as the secret shared key.\n\n3.2\n\nSecurity assumptions of AAG scheme\n\nIn this section we briefly discuss computational security features of the AAG\ncryptosystem. Unfortunately, in the original description of AAG the authors\ndid not state precisely what are the security assumptions that make the system\ndifficult to break. Here we dwell on several possible assumptions of this type,\n13\n\n\fthat often occur, though sometimes implicitly, in the literature on the AAG\ncryptosystem.\nIt seems that the security of AAG relies on the computational hardness of\nthe following, relatively new, computational problem in group theory:\nAAG Problem: given the whole public information from the scheme AAG,\ni.e., the group G, the elements a1 , . . . , am , b1 , . . . , bn , and ba1 , . . . , ban , ab1 , . . . , abn\nin a group G, find the shared secret key [a, b].\nThis problem is not a standard group-theoretic problem, not much is known\nabout its complexity, and it is quite technical to formulate. So it would be\nconvenient to reduce this problem to a standard algorithmic problem in groups\nor to a combination of such problems. The following problems seem to be\nrelevant here and they attracted quite a lot of attention recently, especially in\nthe braid groups \u2013 the original platform for AAG [2]. We refer to papers [11], [6],\n[7], [22], [33], [34]. Nevertheless, the precise relationship between these problems\nand AAG is unclear, see [47] for more details.\nThe Conjugacy Search Problem (CSP): given u, v \u2208 G such that an equation ux = v has a solution in G, find a solution.\nThe Simultaneous Conjugacy Search Problem (SCSP): given ui , vi \u2208 G,\nsuch that a system uxi = vi , i = 1, . . . , n has a solution in G, find a solution.\nThe Simultaneous Conjugacy Search Problem relative to a subgroup\n(SCSP*): given ui , vi \u2208 G and a finitely generated subgroup A of G such that\na system uxi = vi , i = 1, . . . , n has a solution in A, find such a solution.\nRemark 3.1. Observe, that if the Word Problem is decidable in G then all\nthe problems above are also decidable. Indeed, one can enumerate all possible\nelements x (either in G or in the subgroup A), substitute them one-by -one into\nthe equations, and check, using the decision algorithm for the Word Problem in\nG, if x is a solution or not. Since the systems above have some solutions this\nalgorithm will eventually find one. However, the main problem here is not about\ndecidability, the problem is whether or not one can find a solution sufficiently\n\"quickly\", say in polynomial time in the size of the inputs.\nThe following result is easy.\nLemma 3.2. For any group G the AAG problem can be reduced in linear time\nto the problem SCSP*.\nProof. Suppose in a finitely generated group G we are given the public data\nfrom the AAG scheme, i.e., the subgroups\nA = ha1 , . . . , am i, B = hb1 , . . . , bn i,\n\n14\n\n\fand the elements b \u0304a1 , . . . , b \u0304an and a \u0304b1 , . . . , a \u0304bn . If the problem SCSP relative to\nsubgroups A and B is decidable in G, then solving a system of equations\nbx1 = b \u0304a1 , . . . , bxn = b \u0304an\n\n(5)\n\nin A one can find a solution u \u2208 A. Similarly, solving a system of equations\nay1 = a \u0304b1 , . . . , aym = a \u0304bm\n\n(6)\n\nin B one can find a solution v \u2208 B. Notice, that all solutions of the system (5)\nare elements of the form ca where c is an arbitrary element from the centralizer\nCG (B), and all solutions of the system (6) are of the form db for some d \u2208 CG (A).\nIn this case, obviously [u, v] = [ca, db] = [a, b] gives a solution to the the AAG\nproblem.\nClearly, in some groups, for example, in abelian groups AAG problem as\nwell as the SCSP* are both decidable in polynomial time, which makes them\n(formally) polynomial time equivalent. We will see in Section 4.2 that SCSP*\nis easy in free groups.\nIt is not clear, in general, whether the SCSP is any harder or easier than the\nCSP. In hyperbolic groups SCSP, as well as CSP, is easy [11].\nThere are indications that in finite simple groups, at least generically, the\nSCSP* is not harder than the standard CSP (since, in this case, two randomly\nchosen elements generate the whole group). We refer to a preprint [24] for a\nbrief discussion on complexity of these problems.\nIt is interesting to get some information on the following problems, which\nwould shed some light on the complexity of AAG problem.\nProblem 3.3.\n1) In which groups AAG problem is poly-time equivalent to\nthe SCSP*?\n2) In which groups SCSP* is harder than the SCSP?\n3) In which groups SCSP is harder (easier) than CSP?\nIn the rest of the paper we study the hardness of SCSP* in various groups\nand analyze some of the most successful attacks on AAG from the view-point\nof asymptotic mathematics.\n\n4\n\nLength Based Attacks\n\nThe intuitive idea of the length based attack (LBA) was first put in the paper\n[26] by J. Hughes and A. Tannenbaum. Later it was further developed in a joint\npaper [23] by Garber, Kaplan, Teicher, Tsaban, and Vishne where the authors\ngave an experimental results concerning the success probability of LBA that\nsuggested that very large computational power is required for this method to\nsuccessfully solve the Conjugacy Search Problem.\n\n15\n\n\fRecently, the most successful variation of this attack for braid groups was\ndeveloped in [39] where the authors suggested to use a heuristic algorithm for\napproximation of the geodesic length of braids in conjunction with LBA. Furthermore, the authors analyzed the reasons for success/failure of their variation\nof the attack, in particular the practical importance of Alice's and Bob's subgroups A and B being non isometrically embedded and being able to choose the\nelements of these subgroups distorted in the group (they refer to such elements\nas peaks).\nIn this section we rigorously prove that the same results can be observed\nin much larger classes of groups. In particular our analysis works for the class\nF B exp and, hence, for free groups, pure braid groups, locally commutative nonabelian groups, etc.\n\n4.1\n\nA general description\n\nSince LBA is an attack on AAG scheme the inputs for LBA are precisely the\ninputs for AAG algorithmic problem. Moreover, in all its variations LBA attacks\nAAG via solving the corresponding conjugacy equations given in a particular\ninstance of AAG. In what follows we take a slightly more general approach and\nview the length based attack (LBA) as a correct partial search deterministic\nalgorithm of a particular type for the Simultaneous Conjugacy Search Problem\nrelative to a subgroup in a given group G. In this case LBA is employed to solve\nSCSP*, not AAG. Below we describe a basic LBA in its most simplistic form.\nLet G be a group with a finite generating set X. Suppose we are given a\nparticular instance of the SCSP*, i.e., a system of conjugacy equations uxi =\nvi , i = 1, . . . , m which has a solution in a subgroup A = hY i generated by a\nfinite set Y of elements in G (given by words in F (X)). The task is to find such\na solution in A. The main idea of LBA is very simple and it is based on the\nfollowing assumptions:\n(L1) for arbitrary \"randomly chosen\" elements u, w \u2208 G one has lX (uw ) >\nlX (u);\n(L2) for \"randomly chosen\" elements w, y1 , . . . , yk in G the element w has minimal lX -length among all elements of the type wy , where y runs over the\nsubgroup of G generated by y1 , . . . , yk .\nIt is not obvious at all whether this assumption is realistic or not, or even how to\nformulate it correctly. We will return to these issues in due course. Meantime,\nto make use of the assumptions above we assume that we are given an algorithm\nA to compute the length function lX (w) for a given element w \u2208 G.\nConsider Alice' public conjugates b\u0304a1 , . . . , b\u0304an , where a = as\u03b511 . . . a\u03b5sLL . Essentially each b\u0304ai is a result of a sequence of conjugations of bi by the factors of\n\n16\n\n\fA:\n1\nas\u2212\u03b5\n1\n2 \u2212\u03b51\nas\u2212\u03b5\nas1\n2\n\nL\n2 \u2212\u03b51\nb\u0304ai = as\u2212\u03b5\n. . . as\u2212\u03b5\nas1\nL\n2\n\nbi\n\u2193\nbi a\u03b5s11\n\u2193\nbi a\u03b5s11 a\u03b5s22\n\u2193\n...\n\u2193\nbi a\u03b5s11 a\u03b5s22 . . . a\u03b5sLL\n\n(7)\n\nA conjugating sequence is the same for each bi and is defined by the private key\na. The main goal of the attack is to reverse the sequence (7) and going back\nfrom the bottom to the top recover each conjugating factor. If successful the\nprocedure will result in the actual conjugator as a product of elements from a.\nThe next algorithm is the simplest realization of LBA called the best descend\nLBA. It takes as an input three tuples (a1 , . . . , am ), (b1 , . . . , bn ), and (c1 , . . . , cn )\nwhere the last tuple is assumed to be b\u0304a1 , . . . , b\u0304an . The algorithm is a sequence of\nthe following steps:\n\u2212 (Initialization) Put x = \u03b5.\n\u2212 (Main\nloop) For each i = 1, . . . , n and \u03b5 = \u00b11 compute li,\u03b5 =\nPn\n\u2212\u03b5\n\u03b5\nl\n(a\nj=1 X i cj ai ).\nPn\n\u2013 If for each i = 1, . . . , n and \u03b5 = \u00b11 the inequality li,\u03b5 > j=1 lX (cj )\nis satisfied then output x.\n\u2013 Otherwise pick i and \u03b5 giving a least value li,\u03b5 . Multiply x on the\n\u03b5\nright by a\u03b5i . For each j = 1, . . . , n conjugate cj = a\u2212\u03b5\ni cj ai . Continue.\n\u2212 (Last step) If cj = bj for each j = 1, . . . , n then output the obtained\nelement x. Otherwise output F ailure.\nOther variations of LBA suggested in [39] are LBA with Backtracking and Generalized LBA. We refer to [39] for a detailed discussion on this.\nOne can notice that instead of the length function lX one can use any other\nobjective function satisfying assumptions (L1) and (L2). In this work besides\nlX we analyze the behavior of modifications of LBA relative to the following\nfunctions:\n(M1) Instead of computing the geodesic length lX (vi ) of the element vi \u2208 G\ncompute the geodesic length lZ (vi ) in the subgroup H generated by Z =\n{u} \u222a Y (clearly, vi \u2208 H). In this case, LBA in G is reduced to LBA in\nH, which might be easier. We term lZ the inner length in LBA.\n(M2) It might be difficult to compute the lengths lX (w) or lZ (w). In this case,\none can try to compute some \"good\", say linear, approximations of lX (w)\nor lZ (w), and then use some heuristic algorithms to carry over LBA (see\n[39]).\n17\n\n\fThese modifications can make LBA much more efficient as we will see in the\nsequel.\nIn what follows our main interest is in the generic time complexity of LBA.\nTo formulate this precisely one needs to describe the set of inputs for LBA and\nthe corresponding distribution on them.\nRecall that an input for SCSP* in a given group G with a fixed finite generating set X consists of a finitely generated subgroup A = ha1 , . . . , ak i of G given\nby a k-tuple (a1 , . . . , ak ) \u2208 F (X)k , and a finite system of conjugacy equations\nuxi = vi , where ui , vi \u2208 F (X), i = 1, . . . , m, that has a solution in A. We denote\nthis data by \u03b1 = (T, b), where T = (a1 , . . . , ak , u1 , . . . , um ) and b = (v1 , . . . , vm ).\nThe distinction that we make here between T and b will be in use later on. For\nfixed positive integers m, k we denote the set of all inputs \u03b1 = (T, b) as above\nby Ik,m .\nThe standard procedure to generate a \"random\" input of this type in AAG\nprotocol is as follows.\nA Random Generator of inputs for LBA in a given G:\n\u2022 pick a random k \u2208 N from a fixed interval K0 \u2264 k \u2264 K1 ;\n\u2022 pick randomly k words a1 , . . . , ak \u2208 F (X) with the length in fixed interval\nL0 \u2264 |wi | \u2264 L1 ;\n\u2022 pick a random m \u2208 N from a fixed interval M0 \u2264 m \u2264 M1 ;\n\u2022 pick randomly m words u1 , . . . , um \u2208 F (X) with the length in fixed interval N0 \u2264 |ui | \u2264 N1 ;\n\u2022 pick a random element w from the subgroup A = ha1 , . . . , ak i, as a random\nproduct w = ai1 ai2 . . . aic of elements from {a1 , . . . , ak } with the number\nof factors c in a fixed interval P1 \u2264 c \u2264 P2 ;\n\u2022 conjugate vi = uw\ni and compute the normal form \u1e7di of vi , i = 1, . . . , m.\nAs we have argued in Section 2.2 one can fix the numbers k, m, and the\nnumber of factors c in the product w, in advance. Observe, that the choice\nof the elements v1 , . . . , vm is completely determined by the choice of the tuple\nT = (a1 , . . . , ak , u1 , . . . , um ) \u2208 F (X)k+m and the word w.\nNotice, that the distribution on the subgroups H = hT i (more precisely,\ntheir descriptions from F (X)k+m ) that comes from the random generator above\ncoincides with the distribution on the (k + m)-generated subgroups (their descriptions) that was described in Section 2.2. We summarize this in the following\nremark.\nRemark 4.1.\n1) The choice of a tuple T = (a1 , . . . , ak , u1 , . . . , um ) \u2208\nF (X)k+m precisely corresponds to the choice of generators of random\nsubgroups described in Section 2.2.\n2) Asymptotic properties of the subgroups generated by T precisely correspond to the asymptotic properties of subgroups discussed in Section 2.\n18\n\n\f4.2\n\nLBA in free groups\n\nIn this section we discuss LBA in free groups. It is worthwhile to mention here\nthat there are fast (quadratic time) algorithms to solve SCSP* and, hence, AAG\nin free groups (see Section 6.2). However, results on LBA in free groups will\nserve us as a base for solving SCSP* in many other groups.\nLet k be a fixed positive natural number. We say that cancelation in a set\nof words Y = {y1 , . . . , yk } \u2286 F (X)k is at most \u03bb, where \u03bb \u2208 (0, 1/2), if for any\nu, v \u2208 Y \u00b11 the amount of cancelation in the product uv is strictly less then\n\u03bb min{lX (u), lX (v)}, provided u 6= v \u22121 in F (X).\nLemma 4.2. If the set Y = {y1 , . . . , yk } satisfies \u03bb-condition for some \u03bb \u2208\n(0, 1/2) then:\n\u2022 The set Y is Nielsen reduced. In particular, Y freely generates a free\nsubgroup and any element w \u2208 hY i can be uniquely represented as a reduced\nword in the generators Y and their inverses.\n\u2022 The Membership Search Problem for a subgroup hY i (see Section 6.1 for\ndetails) is decidable in linear time.\n\u2022 The geodesic length for elements of a subgroup hY i (see Section 5.1 for\ndetails) is computable in linear time.\nProof. Easy exercise.\nMoreover, the following result is proved in [35].\nTheorem 4.3. Let \u03bb \u2208 (0, 1/2). The set S of k-tuples (u1 , . . . , uk ) \u2208 F (X)k\nsatisfying \u03bb-condition is exponentially generic and, hence, the set of k-tuples\nwhich are the Nielsen reduced in F (X) is exponentially generic.\nNow we are ready to discuss the generic complexity of LBA in free groups.\nTheorem 4.4. Let F (X) be a free group with basis X. Then LBA with respect\nto the inner length lZ solves SCSP* in linear time on an exponentially generic\nset of inputs.\nProof. Let n and m be fixed positive integers. Denote by S a set of (n + m)tuples (u1 , . . . , un , a1 , . . . , am ) \u2208 F (X)n+m that satisfy 1/4-condition. It follows\nfrom Theorem 4.3 that the set S is exponentially generic.\nFurthermore, the system of conjugacy equations associated with such a tuple\nZ = (u1 , . . . , un , a1 , . . . , am ) has the form\n\uf8f1\n\uf8f2 v1 = ux1\n...\n\uf8f3\nvn = uxn ,\nwhere vi belong to the subgroup hZi generated by Z and x is searched in the\nsame subgroup. By Lemma 4.2 one can find expressions for vi in terms of the\n19\n\n\fgenerators Z in linear time. Now, since the generators a1 , . . . , am are part of the\nbasis of the subgroup hZi it follows that LBA relative to lZ successfully finds a\nsolution x = w(a1 , . . . , am ) in linear time.\n\n4.3\n\nLBA in groups from F Bexp\n\nThe result above for free groups is not very surprising because of the nature\nof cancelation in free groups. What, indeed, looks surprising is that LBA\nworks generically in some other groups which seem to be very different from\nfree groups. In this and the next section we outline a general mathematical\nexplanation why LBA has a high rate of success in various groups, including\nthe braid groups. In particular, it will be clear why Modification (M1) of LBA,\nwhich was discussed in Section 4.1, is very robust, provided one can compute\nthe geodesic length in subgroups.\nWe start with a slight generalization of the result of Theorem 4.4. Recall\n(from Section 4.1) that inputs for LBA, as well as for SCSP*, can be described\nin the form \u03b1 = (T, b), where T = (a1 , . . . , ak , u1 , . . . , um ) \u2208 F (X)k+m and\nb = (v1 , . . . , vm ), such that there is a solution of the system uxi = vi in the\nsubgroup A = ha1 , . . . , ak i.\nLemma 4.5. Let G be a group with a finite generating set X and Ik,m a set of\nall inputs (T, b) for LBA in G. Put\nIf ree = {(T, b) \u2208 Ik,m | T f reely generates a f ree subgroup in G}.\nSuppose there is an exponentially generic subset S of If ree and an algorithm\nA that computes the geodesic length lT of elements from the subgroup hT i,\n(T, b) \u2208 S, when these elements are given as words from F (X). Then there\nis an exponentially generic subset S \u2032 of If ree such that on inputs from S \u2032 LBA\nhalts and outputs a solution for the related SCSP* in at most quadratic time\nrelative to the algorithm A.\nProof. The result directly follows from Theorem 4.4.\nLet G \u2208 F B exp . In the next theorem we prove that the time complexity of\nSCSP* on an exponentially generic set of inputs is at most quadratic relative to\nthe time complexity of the problem of computing the geodesic length in finitely\ngenerated subgroup of G.\nTheorem 4.6. (Reducibility to subgroup-length function) Let G be a\ngroup with exponentially generic free basis property and X a finite generating\nset of G. Then there is an exponentially generic subset S of the set Ik,m of all\ninputs for LBA in G such that on inputs from S LBA relative to lT halts and\noutputs a solution for the related SCSP*. Moreover, the time complexity of LBA\non inputs from S is at most quadratic relative to the algorithm A that computes\nthe geodesic length lT of elements from the subgroup hT i when these elements\nare given as words from F (X).\n20\n\n\fProof. By Lemma 4.5 there is an exponentially generic subset S of If ree such\nthat on inputs from S LBA halts and outputs a solution for the related SCSP*.\nMoreover, the time complexity of LBA on inputs from S is at most quadratic\nrelative to the algorithm A that computes the geodesic length lT of elements\nfrom the subgroup hT i when these elements are given as words from F (X). It\nsuffices to show now that the set If ree is exponentially generic in the set of all\ninputs I for LBA in G. By Remark 4.1 asymptotic density of the set If ree in I\nis the same as the asymptotic density of the set of tuples T \u2208 F (X)k+m which\nhave free basis property in G. Since G is in F B exp this set is exponentially\ngeneric in F (X)k+m , so is If ree in I. This proves the theorem.\n\n5\n\nComputing the geodesic length in a subgroup\n\nFor groups G \u2208 F B exp Theorem 4.6 reduces in quadratic time the time complexity of LBA on an exponentially generic set of inputs to the time complexity\nof the problem of computing the geodesic length in finitely generated subgroups\nof G. In this section we discuss time complexity of algorithms to compute the\ngeodesic length in a subgroup of G. This discussion is related to Modification 2\nof LBA, introduced in Section 4.1. In particular, we focus on the situation when\nwe do not have fast algorithms to compute the geodesic length of elements in\nfinitely generated subgroups of G, or even in the group G itself. In this case,\nas was mentioned in Modification 2, one can try to compute some linear approximations of these lengths and then use heuristic algorithms to carry over\nLBA.\nIn Section 5.2 we discuss hardness of the problem of computing the geodesic\nlength (GL problem) in braid groups Bn \u2013 the original platforms of AAG protocol. The time complexity of GLP in Bn relative to the standard set of Artin\ngenerators \u03a3 is unknown. We discuss some recent results and conjectures in this\narea. However, there are efficient linear approximations of the geodesic length\nin Bn relative to the set of generators \u2206 (the generalized half-twists). Theoretically, this gives linear approximations of the geodesic length of elements in\nBn in the Artin generators, and, furthermore, linear approximations of geodesic\ninner length in quasi-isometrically embedded subgroups. If, as conjectured, the\nset of quasi-isometrically embedded subgroups is exponentially generic in braid\ngroups, then this gives a sound foundation for LBA in braid groups. Notice,\nthat even linear approximations alone are not entirely sufficient for successful\nLBA. To get a precise solution of SCSP* one needs also a robust \"local search\"\nnear a given approximation of the solution. To this end several efficient heuristic\nalgorithms have been developed [40], [39]. Nevertheless, by far none of them\nexploited directly the interesting interplay between geodesic lengths in \u03a3 and\n\u2206, as well as quasi-isometric embeddings of subgroups.\n\n21\n\n\f5.1\n\nRelated algorithmic problems\n\nWe start with precise formulation of some problems related to computing\ngeodesics in G.\nComputing the geodesic length in a group (GL): Let G be a group with\na finite generating set X. Given an element w \u2208 G, as a product of generators\nform X, compute the geodesic length lX (w).\nComputing the geodesic length in a subgroup (GLS): Let G be a group\nwith a finite generating set X and A a subgroup of G generated by a finite set\nof elements Y = {a1 , . . . , ak } of G given as words from F (X). Given an element\nw \u2208 A, as a product of generators of A, compute the geodesic length lY (w).\nThere is another (harder) variation of this problem, that comes from the\nSCSP* problem:\nComputing the geodesic length in a subgroup (GLS*): Let G be a group\nwith a finite generating set X and A a subgroup of G generated by a finite set\nof elements Y = {a1 , . . . , ak } of G given as words from F (X). Given an element\nw \u2208 A, as a word from F (X), compute the geodesic length lY (w).\nThe following lemma is obvious. Recall, that The Membership Search Problem (MSP) for a subgroup A in G requires for a given element w \u2208 F (X), which\nbelongs to A, to find a decomposition of w into a product of generators from Y\nand their inverses.\nLemma 5.1. Let G be a finitely generated group and A a finitely generated\nsubgroup of G. Then:\n1) GLS is linear time reducible to GLS*;\n2) GLS* is linear time reducible to GLS relative to the Membership Search\nProblem in A.\nObserve, that if GLS has a \"fast\" solution for A = G in G then there is a\nfast algorithm to find the geodesic length of elements of G with respect to X.\nIn particular, the Word Problem in G has a fast decision algorithm. In some\ngroups, like free groups or partially commutative groups, given by the standard\ngenerating sets, there are fast algorithms for computing the geodesic length\nof elements. In many other groups, like braid groups, or nilpotent groups,\nthe computation of the geodesic length of elements is hard. Nevertheless, in\nmany applications, including cryptography, it suffices to have a fast algorithm\nto compute a reasonable, say linear, approximation of the geodesic length of a\ngiven element. To this end we formulate the following problem.\nComputing a linear approximation of the geodesic length in a group\n(AGL): Let G be a group with a finite generating set X. Given a word\n22\n\n\fw \u2208 F (X) compute a linear approximation of the geodesic length of w. More\nprecisely, find an algorithm that for w \u2208 F (X) outputs a word w\u2032 \u2208 F (X) such\nthat \u03bblX (w) + c \u2265 lX (w\u2032 ), where \u03bb and c are independent of w.\nAnother problem is to compute a good approximation in a subgroup of a\ngroup.\nComputing a linear approximation of the geodesic length in a subgroup (AGLS): Let G be a group with a finite generating set X and A a\nsubgroup of G generated by a finite set of elements Y = {a1 , . . . , ak } of G given\nas words from F (X). Given an element w \u2208 A, as a word from F (X), compute\na linear approximation of the geodesic length lY (w) of w.\nAssume now that there is a \"fast\" algorithm to compute AGL in the group\nG. However, this does not imply that there is a fast algorithm to compute a\nlinear approximation of the geodesic length in a given subgroup A of G. Unless,\nthe subgroup A is quasi-isometrically embedded in G.\nLemma 5.2. Let G be a group with a finite generating set X and A is an\nalgorithm to compute AGL in G with respect to X. If H is a quasi-isometrically\nembedded subgroup of G generated by a finite set Y then for every w \u2208 H, given\nas a word from F (X), the algorithm A outputs a word w\u2032 \u2208 F (X) such that\nlY (w) \u2264 \u03bclX (w\u2032 ) + d for some constants \u03bc and d which depend only on A and\nH.\nProof. The proof is straightforward.\n\n5.2\n\nGeodesic length in braid groups\n\nThere is no any known efficient algorithm to compute the geodesic length of\nelements in braid groups with respect to the set \u03a3 of the standard Artin's\ngenerators. Some indications that this could be a hard problem are given in\n[43], where the authors prove that the set of geodesics in B\u221e is co-NP-complete.\nHowever, in a given group, the problem of computing the length of a word\ncould be easier then the problem of finding a geodesic of the word. Moreover,\ncomplexity of a set of geodesics in a group may not be a good indicator of\nthe time complexity of computing the geodesic length in a randomly chosen\nsubgroup. In fact, it has been shown in [40, 41] that in a braid group Bn\none can efficiently compute a reasonable approximation of the length function\non Bn (relative to \u03a3) which gives a foundation for successful LBA, without\ncomputing the length in the group. Furthermore, there are interesting open\nconjectures that, if settled affirmatively, will lead to more efficient algorithms\nfor computing the length of elements in braid groups and their subgroups. To\nexplain this we need to introduce some known facts and terminology.\nThe group Bn has the classical Artin presentation:\n\u001d\n\u001c\n\u03c3i \u03c3j \u03c3i = \u03c3j \u03c3i \u03c3j if |i \u2212 j| = 1\n.\nBn =\n\u03c31 , . . . , \u03c3n\u22121\n\u03c3i \u03c3j = \u03c3j \u03c3i\nif |i \u2212 j| > 1\n23\n\n\fBy l\u03a3 (w) we denote the length of a word w \u2208 Bn relative to the generating\nset \u03a3 = {\u03c31 , . . . , \u03c3n\u22121 }.\nElements in Bn admit so-called Garside normal forms. These forms are\nunique and the time complexity to compute the normal form of an element of\nBn given by a word w \u2208 F (\u03a3) is bounded by O(|w|2 n2 ). However, Garside\nnormal forms are far from being geodesic in Bn .\nIn 1991 Patrick Dehornoy introduced in [14] the following notion of \u03c3-positive\nbraid word and a handle-reduction algorithm to compute a \u03c3-positive representative of a given word. A braid word w is termed to be \u03c3k -positive (respectively,\nnegative), if it contains \u03c3k , but does not contain \u03c3k\u22121 and \u03c3i\u00b11 with i < k (respectively, contains \u03c3k\u22121 , but not \u03c3k and \u03c3i\u00b11 with i < k). A braid word w is\nsaid to be \u03c3-positive (respectively, \u03c3-negative), if it is \u03c3k -positive (respectively,\n\u03c3k -negative) for some k \u2264 n \u2212 1. A braid word w is said to be \u03c3-consistent if it\nis either trivial or \u03c3-positive, or \u03c3-negative.\nTheorem. [Dehornoy [14]]. For any braid \u03b2 \u2208 Bn , exactly one of the\nfollowing is true:\n1) \u03b2 is trivial;\n2) \u03b2 can be presented by \u03c3k -positive braid word for some k;\n3) \u03b2 can be presented by \u03c3k -negative braid word for some k.\nIn the latter two cases k is unique.\nThus, it makes sense to speak about \u03c3-positive and \u03c3k -positive (or \u03c3-, \u03c3k negative) braids.\nThe following question is of primary interest when solving AGL in braid\ngroups: is there a polynomial p(x) such that for every word w \u2208 F (\u03a3) p(l\u03a3 (w))\ngives an upper bound for the \u03a3-length of the shortest \u03c3-consistent braid word\nrepresenting w \u2208 Bn ? Dehornoy's original algorithms in [14], and the handle\nreduction from [15]), and the algorithm from [21], all of them give only an\nexponential bound on the length of the shortest \u03c3-consistent representative.\nIn [19] (see also [15, 21] for a related discussion) Dynnikov and Wiest formulated the following\nConjecture 5.3. There are numbers \u03bb, c such that every braid w \u2208 Bn has a\n\u03c3-consistent representative whose \u03a3-length is bounded linearly by the \u03a3-length\nof the braid.\nThey also showed that the conjecture above has a positive answer if the\n\u03a3-length of elements is replaced by the \u2206-length (relative to a set of generators\n\u2206).\nThe set of generators \u2206 consists of the braids \u2206ij , 1 \u2264 i < j \u2264 n, which are\nthe half-twists of strands i through j:\n\u2206ij = (\u03c3i ...\u03c3j\u22121 )(\u03c3i ...\u03c3j\u22122 )...\u03c3i .\n\u2206 is a generating set of Bn , containing the Artins generators \u03c3i = \u2206i,i+1 , and\nthe Garside fundamental braid \u22061n . The compressed \u2206-length of a word w of\n24\n\n\fthe form\nw = \u2206ki11j1 ...\u2206kissjs ,\nwhere kt 6= 0 and \u2206it ,jt 6= \u2206it+1 ,jt+1 for all t, is defined by\nL\u2206 (w) = \u03a3i=1 log2 (|ki | + 1).\nFor an element \u03b2 \u2208 Bn the value L\u2206 (\u03b2) is defined by\nL\u2206 (\u03b2) = min{L\u2206(w) | the word w represents \u03b2}.\nObviously, for any braid \u03b2, we have\nL\u2206 (\u03b2) \u2264 l\u2206 (\u03b2) \u2264 l\u03a3 (\u03b2).\nThe modified conjecture assumes the following extension of the notion of\n\u03c3-positive braid word: a word in the alphabet \u2206 = {\u2206ij | 0 < i < j < n} is\nsaid to be \u03c3-positive if, for some k < l, it contains \u2206kl , and contains neither\n\u00b11\n\u2206\u22121\nkj nor \u2206ij with i < k and any j. In other words, a word w in letters \u2206ij is\n\u03c3-positive (negative) if the word in standard generators \u03c3i obtained from w by\nthe obvious expansion is.\nTheorem [Dynnikov, Wiest [19]]. Any braid \u03b2 \u2208 Bn can be presented by a\n\u03c3-consistent word w in the alphabet {\u2206ij } such that\nl\u2206 (w) \u2264 30nl\u2206 (\u03b2).\n\nThis theorem gives a method to approximate geodesic length in braid groups,\nas well as in its quasi-isometrically embedded subgroups. It remains to be seen\nwhether this would lead to more efficient versions of LBA or not.\n\n6\n\nQuotient attacks\n\nIn this section we describe a new type of attacks, which we term quotient attacks\n(QA). In fact, the quotient attacks are just fast generic algorithms to solve\nsuch search problems in groups as the Membership Search Problem (MSP), the\nSimultaneous Conjugacy Search Problem (SCSP), the Simultaneous Conjugacy\nSearch Problem relative a to a subgroup (SCSP*), etc. The main idea behind\nQA is that to solve a problem in a group G it suffices, on most inputs, to solve\nit in a quotient G/N , provided G/N has generic free basis property and a fast\ndecision algorithm for the problem. In particular, this is the case, if G has a\nfree non-abelian quotient. Notice, that a similar idea was already exploited in\n[29], but there the answer was given only for inputs in \"No\" part of the decision\nproblem, which, obviously, does not apply to search problems. The strength of\nour approach comes from the extra requirement that G/N has the free basis\nproperty.\n25\n\n\fIn Sections 6.1 and 6.2 we discuss the Conjugacy and Membership Problems\nin all their variations in free groups. Some of these results were known in\nfolklore, some could be found in the literature. Nevertheless, we sketch most of\nthe proofs here, since this will serve us as the base for solving similar problems\nin other groups.\n\n6.1\n\nMembership Problems in free groups\n\nIn this section we discuss some algorithms to solve the Membership Problems\nin all their variations in free groups. We start with the classical Membership\nProblem (MP). Everywhere below G is a fixed group generated by a finite set\nX.\nThe Membership Problem (MP): Let A = ha1 , . . . , am i be a fixed finitely\ngenerated subgroup of G given by a finite set of generators a1 , . . . , am (viewed\nas words in F (X)). Given a word w \u2208 F (X) decide whether w belongs to A or\nnot.\nWhen the subgroup A is not fixed, but comes as a part of the input (like\nin AAG scheme) then the problem is more precisely described in its uniform\nvariation.\nThe Uniform Membership Problem (UMP): Given a finite tuple of elements w, a1 , . . . , am \u2208 F (X) decide whether or not w (viewed as an element of\nG) belongs to the subgroup A generated by the elements a1 , . . . , am in G.\nTo solve MP in free groups we use the folding technique introduced by\nStallings in [48], see also [28] for a more detailed treatment. Given a tuple\nof words a1 , . . . , am \u2208 F (X) one can construct a finite deterministic automaton\n\u0393A , which accepts a reduced word w \u2208 F (X) if and only if w belongs to the\nsubgroup A = ha1 , . . . , am i generated by a1 , . . . , am in F (X).\nTo describe the time complexity of MP and UMP recall that for a given\npositive integer n the function log2\u2217 n is defined as the least natural number m\nsuch that m-tower of exponents of 2 exceeds n, or equivalently, log2 \u25e6 log2 \u25e6 . . . \u25e6\nlog2 (n) \u2264 1, where on the left one has composition of m logarithms.\nLemma 6.1. There exists an algorithm which for any input w, a1 , . . . , am \u2208\nF (X) for UMP finds the correct answer in nearly linear time O(|w| + nlog \u2217 n)\nPk\nwhere n = i=1 |ai |. Furthermore, the algorithm works in linear time O(|w|+n)\non exponentially generic set of inputs.\nProof. Indeed, given w, a1 , . . . , am \u2208 F (X) one can construct \u0393A in worst time\nO(nlog \u2217 n) (see [49]) and check if \u0393A accepts w or not in time O(|w|), as required.\nTo prove the generic estimate recall that the set of m-tuples a1 , . . . , am \u2208\nF (X) satisfying 1/4-condition is exponentially generic and the Stalling's procedure constructs the automaton \u0393A in linear time O(n).\n\n26\n\n\fIn cryptography, the search variations of MP and UMP are the most interesting.\nThe Membership Search Problem (MSP): Let A = ha1 , . . . , am i be a fixed\nfinitely generated subgroup of G given by a finite set of generators a1 , . . . , am ,\nviewed as words in F (X). Given a word w \u2208 F (X), which belongs to A, find a\nrepresentation of w as a product of the generators a1 , . . . , am and their inverses.\nThe Uniform Membership Search Problem (UMSP): Given a finite tuple of elements w, a1 , . . . , am \u2208 F (X) such that w \u2208 A = ha1 , . . . , am i find a\nrepresentation of w as a product of the generators a1 , . . . , am and their inverses.\nTime complexity upper bounds for MSP easily follow from the corresponding\nbounds for M P .\nLemma 6.2. The time complexity of MSP in a free group is bounded from above\nby O(|w|).\nProof. Let A = ha1 , . . . , am i be a fixed finitely generated subgroup of G. As\nwas mentioned above in time O(nlog \u2217 n), where n = |a1 | + . . . + |an |, one can\nconstruct the Stallings' folding \u0393A . In linear time in n, using the breadth first\nsearch, one can construct a Nielsen basis S = {b1 , . . . , bn } of A (see [28]). Now,\ngiven a word w \u2208 F (X), that belongs to A, one can follow the accepting path\nfor w in \u0393A and rewrite w as a product of generators from S and their inverses.\nThis requires linear time in |w|. It is suffices to notice that the elements bi\ncan be expressed as fixed products of elements from the initial generators of A,\nbi = ui (a1 , . . . , an ), i = 1, . . . , m, therefore any expression of w as a product of\nelements from S \u00b11 can be rewritten in a linear time into a product of the initial\ngenerators.\nObserve, that in the proof above we used the fact that any product of new\ngenerators bi and their inversions can be rewritten in linear time into a product\nof the old generators ai and their inversions. That held because we assumed\nthat one can rewrite the new generators bi as products of the old generators ai\nin a constant time. This is correct if the subgroup A is fixed. Otherwise, say\nin UMSP, the assumption does not hold anymore. It is not even clear whether\none can do it in polynomial time or not. In fact, the time complexity of UMSP\nis unknown. The following problem is of prime interest in this area.\nProblem 6.3. Is the time complexity of UMSP in free groups polynomial?\nHowever, the generic case complexity of UMSP in free groups is known.\nLemma 6.4. The generic case time complexity of UMSP in free groups is linear.\nMore precisely, there is an exponentially generic subset T \u2286 F (X)n such that\nfor every tuple (w, a1 , . . . , am ) \u2208 F (X) \u00d7 T , such that w \u2208 ha1 , . . . , am i, one\ncan express w as a product of a1 , . . . , am and their inverses in time O(|w| + n)\nwhere n = |a1 | + . . . + |an |.\n\n27\n\n\fProof. Notice, first, that if in the argument of Lemma 6.2 the initial set of\ngenerators a1 , . . . , am of a subgroup A satisfy 1/4-condition then the set of the\nnew generators b1 , . . . , bm coincides with the set of the initial generators (see\n[28] for details). Moreover, as was noticed in the proof of Theorem 4.4 the\nset T of tuples (a1 , . . . , am ) \u2208 F (X)m , satisfying 1/4-condition is exponentially\ngeneric. Hence the argument from Lemma 6.2 proves the required upper bound\nfor UMSP on T .\n\n6.2\n\nThe Conjugacy Problems in free groups\n\nNow we turn to the conjugacy problems in free groups. Again, everywhere below\nG is a fixed group generated by a finite set X.\nIt is easy to see that the CP and CSP in free groups are decidable in at most\nquadratic time. It is quite tricky to show that CP and CSP are decidable in\nfree groups in linear time! This result is based on Knuth-Morris-Pratt substring\nsearching algorithm [32]. Similarly, the Root Search Problem (listed below) is\ndecidable in free groups in linear time.\nThe Root Search Problem (RSP): Given a word w \u2208 F (X) find a shortest\nword u \u2208 F (X) such that w = un for some positive integer n.\nNotice, that RSP in free groups can be interpreted as a problem of finding\na single generator of the centralizer of a non-trivial element.\nTheorem 6.5. The Simultaneous Conjugacy Problem (SCP) and Simultaneous\nConjugacy Search Problem (SCSP) are in linear time reducible to CP, CSP, and\nRP in free groups. In particular, it is decidable in linear time.\nProof. We briefly outline an algorithm that simultaneously solves the problems\nSCP and SCSP in free groups, i.e., given a finite system of conjugacy equations\n\uf8f1 x\n\uf8f2 u1 = v1 ,\n...\n(8)\n\uf8f3 x\nun = vn ,\n\nthe algorithm decides whether or not this system has a solution in a free group\nF (X), and if so, it finds a solution. Using the decision algorithm for CP one can\ncheck whether or not there is an equation in (8) that does not have solutions\nin F . If so the whole system does not have solutions in F and we are done.\nOtherwise, using the algorithm to solve CSP in F one can find a particular\nsolution di of every equation uxi = vi in (8). In this case the set of all solutions\nof the equation uxi = vi is equal to the coset C(ui )di of the centralizer C(ui ).\nObserve, that using the decision algorithm for RSP one can find a generator\n(the root of ui ) of the centralizer C(ui ) in F .\nConsider now the first two equations in (8). The system\nux1 = v1 , ux2 = v2\n28\n\n(9)\n\n\fhas a solution in F (X) if and only if the intersection V = C(u1 )d1 \u2229 C(u2 )d2 is\nnon-empty. In this case\nV = C(u1 )d1 \u2229 C(u2 )d2 = (C(u1 ) \u2229 C(u2 )) d\nfor some d \u2208 F .\nIf [u1 , u2 ] = 1 then V , as the intersection of two cosets, is non-trivial if and\nonly if the cosets coincide, i.e., [u1 , d1 d\u22121\n2 ] = 1. This can be checked in linear\ntime (since the word problem in F (X) is in linear time). Therefore, in linear\ntime we either check that the system (9), hence the system (8), does not have\nsolutions at all, or we confirm that (9) is equivalent to one of the equations, so\n(8) is equivalent to its own subsystem, where the first equation is removed. In\nthe latter case induction finishes the proof.\nIf [u1 , u2 ] 6= 1 then C(u1 ) \u2229 C(u2 ) = 1, so either V = \u2205 or V = {d}, in both\ncases one can easily find all solutions of (8). Indeed, if V = \u2205 then (8) does not\nhave solutions at all. If V = {d}, then d is the only potential solution of (8),\nand one can check whether or not d satisfies all other equations in (8) in linear\ntime by the direct verification.\nNow the problem is to verify in linear time whether V = \u2205 or not, which is\nequivalent to solving an equation\nk\num\n1 d1 = u2 d2\n\n(10)\n\nfor integers m, k. Finding in linear time the cyclically reduced decompositions\nof u1 and u2 one can rewrite the equation (10) into an equivalent one in the\nform:\nw2\u2212k cw1m = b\n(11)\nwhere w1 , w2 are cyclically reduced forms of u1 , u2 , and either w2\u22121 c or cw1 (or\nboth) are reduced as written, and b does not begin with w2\u22121 and does not end\nwith w1 . Again, in linear time one can find the maximal possible cancelation in\nw2\u2212k c, and in cw1 , and rewrite (11) in the form:\nw2\u2212k w\u03031s = b\u0303\n\n(12)\n\nwhere w\u03031 is a cyclic permutation of w1 , and |b\u0303| \u2264 |b| + |w1 |. Notice, that\ntwo cyclically reduced periodic words w2 , w\u03031 either commute or do not have a\ncommon subword of length exceeding |w2 | + |w\u03031 |. If they commute then the\nequation (12) becomes a power equation, which is easy to solve. Otherwise,\nexecuting (in linear time) possible cancelation in the left-hand side of (12) one\narrives to an equation of the type\nw2\u2212r ew\u03031t = b\u0303\n\n(13)\n\nwhere there is no cancelation at all. This can be easily solved for r and t. This\nproves the result.\n\n29\n\n\fAs we have seen in the proof of Theorem 6.5 one of the main difficulties\nin solving SCSP in groups lies in computing the intersection of two finitely\ngenerated subgroups or their cosets. Notice, that finitely generated subgroups\nof F (X) are regular sets (which are accepted by their Stallings' automata). It\nis well known in the language theory that the intersection of two regular sets is\nagain regular, and one can find an automaton accepting the intersection in at\nmost quadratic time. This leads to the following corollary.\nCorollary 6.6. The SCSP* in free groups is decidable in at most quadratic\ntime.\nProof. Recall from the proof of Theorem 6.5 that the algorithm solving a finite\nsystem of conjugacy equations in a free group either decides that there is no\nsolution to the system, or produces a unique solution, or gives the whole solution\nset as a coset Cd of some centralizer C. In the first case, the corresponding\nSCSP* has no solutions in a given finitely generated subgroup A; in the second\ncase, given a unique solution w of the system one can construct the automaton\n\u0393A , that accepts A, and check whether w is in A or not (it requires nlog \u2217 n\ntime); and in the third case, one needs to verify if Cd \u2229 A is empty or not - this\ncan be done, as we have mentioned above, in at most quadratic time (as the\nintersection of two regular subsets).\nObserve from the proof above, that the most time consuming case in solving\nSCSP* in free groups occurs when all the elements u1 , . . . , un in the system\n(8) commute. The set of such inputs for SCSP* is, obviously, exponentially\nnegligible. As we proved in Theorem 4.4 that LBA relative to lT solves SCSP*\nin linear time.\nSince AAG is reducible in linear time to SCSP* (Lemma 3.2) we have the\nfollowing results.\nCorollary 6.7. The following hold in an arbitrary free group F .\n1) The AAG algorithmic problem in F is decidable in at most quadratic\ntime in the size of the input (the size of the public information in the\nAAG scheme).\n2) The AAG algorithmic problem in F is decidable in linear time on an\nexponentially generic set of inputs.\n\n6.3\n\nThe MSP and SCSP* problems in groups with \"good\"\nquotients\n\nIn this section we discuss the generic complexity of the Membership Search\nProblem MSP and the Simultaneous Conjugacy Search Problem relative to a\nsubgroup SCSP* in groups that have \"good\" factors in F B exp .\nLet G be a group generate by a finite set X, G/N is a quotient of G, and\n\u03c6 : G \u2192 G/N a canonical epimorphism. Let H = hu1 , . . . , uk i be a finitely\ngenerated subgroup of G. To solve the membership search problem for H one can\nemploy the following simple heuristic idea which we formulate as an algorithm.\n30\n\n\fAlgorithm 6.8. (Heuristic solution to MSP)\nInput: A word w = w(X) and generators {u1 , . . . , uk } \u2282 F (X) of a subgroup\nH.\nOutput: A representation W (u1 , . . . , uk ) of w as an element of H or F ailure.\nComputations:\nA. Compute the generators u\u03c61 , . . . , u\u03c6k of H \u03c6 in G/N .\nB. Compute w\u03c6 , solve MSP for w\u03c6 and H \u03c6 , and find a representation\nW (u\u03c61 , . . . , u\u03c6k ) of w\u03c6 as a product of the generators of u\u03c61 , . . . , u\u03c6k and\ntheir inverses.\nC. Check if W (u1 , . . . , uk ) is equal to w in G. If this is the case then output\nW . Otherwise output F ailure.\nObserve that to run Algorithm 6.8 one needs to be able to solve MSP in the\nquotient G/N (Step B) and to check the result in the original group (Step C),\ni.e., to solve the Word Problem in G. If these conditions are satisfied Algorithm\n6.8 is a partial deterministic correct algorithm, it gives only the correct answers.\nHowever, it is far from being obvious, even the conditions are satisfied, that this\nheuristic algorithm can be robust in any interesting class of groups. The next\ntheorem, which is the main result of this section, states that Algorithm 6.8 is\nvery robust for groups from F B exp with a few additional requirements.\nTheorem 6.9. (Reduction to a quotient) Let G be a group generated by a\nfinite set X and with the Word Problem in a complexity class C1 (n). Suppose\nG/N is a quotient of G such that:\n1) G/N \u2208 F B exp .\n2) The canonical epimorphism \u03c6 : G \u2192 G/N is computable within time\nC2 (n).\n3) For every k \u2208 N there exists an algorithm Ak in a complexity class C3 (n),\nwhich solves the Membership Search Problem in G/N for an exponentially\ngeneric set Mk \u2286 F (X)k of descriptions of k-generated subgroups in G/N .\nThen for every k Algorithm 6.8 solves the Membership Search Problem on\nan exponentially generic set Tk \u2286 F (X)k of descriptions of k-generated subgroups in G. Furthermore, Algorithm 6.8 belongs to the complexity class\nC1 (n) + C2 (n) + C3 (n).\nProof. We need to show that Algorithm 6.8 successfully halts on an exponentially generic set of tuples from F (X)k . By the conditions of the theorem the\nset Sk of all k-tuples from F (X)k whose images in G/N freely generate free\nsubgroups is exponentially generic, as well as, the set Mk of all tuples from\nF (X)k where the algorithm Ak applies. Hence the intersection Tk = Sk \u2229 Mk\nis exponentially generic in F (X)k . We claim that Algorithm 6.8 applies to the\nsubgroups with descriptions from Tk . Indeed, the algorithm Ak applies to subgroups generated by tuples Y = (u1 , . . . , uk ) from Tk , so if w\u03c6 \u2208 H \u03c6 = hY \u03c6 i\n31\n\n\fthen Ak outputs a required representation w\u03c6 = W (Y \u03c6 ) in G/N . Notice, that\nH \u03c6 is freely generated by Y \u03c6 since Y \u2208 Sk , therefore \u03c6 is injective on H. It\nfollows that w = W (Y ) in G, as required. This proves the theorem.\nTheorems 4.6 and 6.9 imply the following result.\nCorollary 6.10. Let G be as in Theorem 6.9. Then for every k, m > 0 there\nexists an algorithm Ck,m that solves the SCSP* on an exponentially generic\nsubset of the set of all inputs Ik,m for SCSP*. Furthermore, Ck,m belongs to the\ncomplexity class n2 + C1 (n) + C2 (n) + C3 (n).\nCorollary 6.11. Let G be a group of pure braids P Bn , n \u2265 3, or a non-abelian\npartially commutative group G(\u0393). Then for every k, m > 0 there exists an\nalgorithm Ck,m that solves the SCSP* on an exponentially generic subset of the\nset of all inputs Ik,m for SCSP*. Furthermore, Ck,m belongs to the complexity\nclass O(n2 ).\nProof. Recall that the for any pure braid group or a non-abelian partially commutative group the Word problem can be solved by a quadratic time algorithm.\nNow the statement follows from Corollary 6.10 and Corollaries 2.7 and 2.9.\n\nReferences\n[1] N. Alon, J. Spencer, \"The Probabilistic method\", Second Eddition,\nWilley, Interscience Series in Discrete Mathematics and Optimization, 2000.\n[2] I. Anshel, M. Anshel, D. Goldfeld, \"An algebraic method for publickey cryptography\". Math. Res. Lett. 6 (1999), 287\u2013291.\n[3] I. Anshel, M. Anshel, D. Goldfeld, S. Lemieux, \"Key Agreement, The\nAlgebraic EraserT M , and Lightweight Cryptography\". In \"Algebraic\nMethods in Cryptography\", Contemporary Math. 418 (2006), 1\u201317.\n[4] L. Babai, \"The probability of generating the symmetric group\". J.\nCombin. Theory (Ser. A) 52 (1989), 148\u2013153.\n[5] J. Birman, \"Braids, Links and Mapping Class Groups\", Annals of\nMath. Studies 82, 1974.\n[6] J. Birman, V. Gebhardt, J. Gonzalez-Meneses, \"Conjugacy in Garside groups I: Cyclings, powers, and rigidity\",\nhttp://arxiv.org/abs/math/0605230.\n[7] J. Birman, V. Gebhardt, J. Gonzalez-Meneses, \"Conjugacy\nin Garside groups II: Structure of the ultra summit set\",\nhttp://arxiv.org/abs/math/0606652.\n\n32\n\n\f[8] J-C. Birget, S. S. Magliveras, M. Sramka, \"On public-key cryptosystems based on combinatorial group theory\", Tatra Mountains Mathematical Publications, 33 (2006), 137\u2013148.\n[9] A. Borovik, A. Myasnikov, V. Shpilrain, \"Measuring sets in infinite\ngroups\". In \"Computational and Statistical Group Theory\", Contemporary Math., 298 (2002), 21\u201342.\n[10] A. V. Borovik, A. G. Myasnikov, V. N. Remeslennikov, \"Multiplicative measures on free groups\", Internat. J. Algebra Comput., 13\n(2003), No. 6, 705\u2013731.\n[11] M. Bridson, J. Howie, \"Conjugacy of finite subsets in hyperbolic\ngroups\", Internat. J. Algebra Comput., 15 (2005), no. 4, 725\u2013756.\n[12] M. Brin, C. Squier, \"Groups of Piecewise Linear Homomorphisms of\nthe Real Line\", Invent. Math., 79 (1985), no. 3, 485\u2013498.\n[13] C. Champetier, V. Guirardel, \"Limit groups as limits of free groups:\ncompactifying the set of free groups\", Israel Journal of Mathematics,\n146 (2005), 1\u201376.\n[14] P. Dehornoy, \"Braid groups and left distributive operations\", Trans.\nAmer. Math. Soc., 345 (1994), no. 1, 115\u2013151\n[15] P. Dehornoy, \"A fast method for comparing braids\", Adv. Math.,\n125 (1997), 200\u2013235.\n[16] P. Dehornoy, I. Dynnikov, D. Rolfsen, B. Wiest, \"Why are braids\norderable\", Panoramas et Synth'eses 14, Soc. math. francaise, 2002\n[17] P. Dehornoy, \"Using shifted conjugacy in braid-based cryptography\", Contemporary Mathematics, to appear. Also available at\nhttp://www.math.unicaen.fr/\u223cdehornoy/Papers/Dhk.pdf.\n[18] J. D. Dixon, \"The probability of generating the symmetric group\",\nMath. Z., 110 (1969), 199\u2013205.\n[19] I. Dynnikov, B. Wiest, \"On the complexity of braids\", preprint.\nAvailable at http://hal.archives-ouvertes.fr/hal-00001267/en/.\n[20] S. Cleary, M. Elder, A. Rechnitzer, J. Taback, \"Random subgroups\nof Thompson's group F \", preprint.\n[21] R. Fenn, M. T. Greene, D. Rolfsen, C. Rourke, B. Wiest, \"Ordering\nthe braid groups\", Pacific J. Math., 191 (1999), No. 1, 49-74.\n[22] V. Gebhardt, \"A New Approach to the Conjugacy Problem in Garside Groups\", to appear in Journal of Algebra.\n\n33\n\n\f[23] D. Garber, S. Kaplan, M. Teicher, B. Tsaban, U. Vishne \"Lengthbased conjugacy search in the Braid group\", preprint. Available at\nhttp://arxiv.org/abs/math.GR/0209267.\n[24] R. Gilman, A. Myasnikov, A. Miasnikov, A. Ushakov, \"Generic complexity of algorithmic problems\", preprint.\n[25] J. E. Hopcroft, J. D. Ulman, \"Introduction to Automata Theory,\nLanguages and Computation\", Addison-Wesley, 1979.\n[26] J. Hughes, A. Tannenbaum, \"Length-based attacks for certain group\nbased encryption rewriting systems\". In: Workshop SECI02 Securit\u00e8\nde la Communication sur Intenet, September 2002, Tunis, Tunisia.\n[27] T. Jitsukawa, \"Malnormal subgroups of free groups\". In \"Computational and Statistical Group Theory\", Contemporary Math. 212\n(2002), 83\u201395.\n[28] I. Kapovich, A. Myasnikov, \"Stallings foldings and subgroups of free\ngroups\", Journal of Algebra, 248 (2002), 608\u2013668.\n[29] I. Kapovich, A. Myasnikov, P. Schupp, V. Shpilrain, \"Generic-case\ncomplexity and decision problems in group theory\", Journal of Algebra, 264 (2003), 665\u2013694.\n[30] I. Kapovich, A. Myasnikov, P. Schupp, V. Shpilrain, \"Average-case\ncomplexity for the word and membership problems in group theory\",\nAdvances in Mathematics, 190 (2005), no. 2, 343\u2013359.\n[31] K. H. Ko, S. J. Lee, J. H. Cheon, J. W. Han, J. Kang, C. Park,\n\"New public-key cryptosystem using braid groups\", CRYPTO 2000,\nLecture Notes in Computer Science 1880 (2000), 166\u2013183.\n[32] D. Knuth, J. H. Morris Jr, V. Pratt, \"Fast pattern matching in\nstrings\", SIAM Journal on Computing, 6 (1977), no. 2, 323\u2013350.\n[33] S. J. Lee, \"Algorithmic Solutions to Decision Problems in the Braid\nGroup\", Ph.D. thesis, KAIST (2000).\n[34] S. J. Lee, E. Lee, \"Potential Weaknesses of the Commutator Key\nAgreement Protocol Based on Braid Groups\", EUROCRYPT 2002,\nLecture Notes Computer Science, 2332 (2002), 14\u201328.\n[35] A. Martino, T. Turner, E. Ventura, \"The density of injective endomorphisms of a free group\", CRM, Barcelona, preprint 685 (2006),\n1\u201319.\n[36] A. Myasnikov, D. Osin, \"Random subgroups of finitely generated\ngroups\", preprint.\n\n34\n\n\f[37] A. Myasnikov, A. Ushakov, \"Random van Kampen diagrams and the\nword problem in groups\", preprint.\n[38] A. Myasnikov, A. Ushakov, \"Generic complexity of the Conjugacy\nSearch Problem in groups\", preprint.\n[39] A. D. Myasnikov, A. Ushakov, \"Length Based Attack and Braid\nGroups: Cryptanalysis of Anshel-Anshel-Goldfeld Key Exchange\nProtocol\", PKC 2007, Lecture Notes in Computer Science 4450\n(2007), 76\u201388.\n[40] A. Myasnikov, V. Shpilrain, A. Ushakov, \"A practical attack on some\nbraid group based cryptographic protocols\", CRYPTO 2005, Lecture\nNotes in Computer Science 3621 (2005), 86-96.\n[41] A. Myasnikov, V. Shpilrain, A. Ushakov, \"Random Subgroups of\nBraid Groups: An Approach to Cryptanalysis of a Braid Group\nBased Cryptographic Protocol\", PKC 2006, Lecture Notes in Computer Science 3958 (2006), 302-314.\n[42] A. Yu. Ol'shanskii, \"Almost every group is hyperbolic\", Internat. J.\nAlgebra Comput. 2 (1992), 1\u201317.\n[43] M. Paterson, A. Razborov, \"The set of minimal braids is co-NPcomplete\", J. Algorithms, 12 (1991), 393-408.\n[44] G. Petrides, \"Cryptanalysis of the Public Key Cryptosystem Based\non the Word Problem on the Grigorchuk Groups\", Proceedings of\nthe 9th IMA International Conference on Cryptography and Coding,\nLecture Notes in Computer Science 2898 (2003), 234\u2013244.\n[45] D. Ruinsky, R. Shamir, B. Tsaban, \"Cryptanalysis of group-based\nkey agreement protocols using subgroup distance functions\", PKC07,\nLecture Notes In Computer Science 4450 (2007), 61-75.\n[46] V. Shpilrain, A. Ushakov, \"Thompson's Group and Public Key Cryptography\". In \"Applied Cryptography and Network Security\", LNCS\n3531 (2005), 151\u2013164.\n[47] V. Shpilrain, A. Ushakov, \"The conjugacy search problem in public\nkey cryptography: unnecessary and insufficient\". In \"Applicable Algebra in Engineering, Communication and Computing\", 17 (2006),\n285\u2013289. Available at http://eprint.iacr.org/2004/321/.\n[48] J. Stallings, \"Topology of Finite Graphs\", Invent. Math., 71 (1981),\nno. 3, 551\u2013565.\n[49] N. Touikan, \"A Fast Algorithm for Stallings' Folding Process\", Internat. J. Algebra Comput., 16 (2006), no. 6, 1031\u20131046.\n\n35\n\n\f[50] A. Ushakov, \"Fundamental Search Problems in Groups\", Ph.D. thesis, Graduate Center/CUNY (2005).\n[51] N. R. Wagner, M. R. Magyarik, \"A public key cryptosystem based\non the word problem\", CRYPTO 84, Lecture Notes In Computer\nScience 196 (1985), 19\u201336.\n\n36\n\n\f"}