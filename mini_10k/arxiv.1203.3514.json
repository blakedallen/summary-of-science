{"id": "http://arxiv.org/abs/1203.3514v1", "guidislink": true, "updated": "2012-03-15T11:17:56Z", "updated_parsed": [2012, 3, 15, 11, 17, 56, 3, 75, 0], "published": "2012-03-15T11:17:56Z", "published_parsed": [2012, 3, 15, 11, 17, 56, 3, 75, 0], "title": "Maximizing the Spread of Cascades Using Network Design", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1203.4513%2C1203.2971%2C1203.0818%2C1203.1502%2C1203.1406%2C1203.4559%2C1203.3640%2C1203.3416%2C1203.4269%2C1203.3406%2C1203.0148%2C1203.4308%2C1203.0335%2C1203.3626%2C1203.2995%2C1203.1921%2C1203.5537%2C1203.1915%2C1203.3153%2C1203.5263%2C1203.1914%2C1203.6518%2C1203.2141%2C1203.3956%2C1203.5013%2C1203.2889%2C1203.0615%2C1203.0061%2C1203.3093%2C1203.2311%2C1203.3370%2C1203.5496%2C1203.6593%2C1203.4584%2C1203.4489%2C1203.5340%2C1203.5991%2C1203.4042%2C1203.2721%2C1203.2513%2C1203.0488%2C1203.0879%2C1203.0574%2C1203.1767%2C1203.0308%2C1203.0204%2C1203.6123%2C1203.1484%2C1203.4250%2C1203.0496%2C1203.1807%2C1203.3094%2C1203.4498%2C1203.2073%2C1203.2352%2C1203.4813%2C1203.0924%2C1203.5304%2C1203.6405%2C1203.1135%2C1203.2443%2C1203.6173%2C1203.5984%2C1203.2440%2C1203.5936%2C1203.3177%2C1203.0499%2C1203.4509%2C1203.3825%2C1203.0901%2C1203.2301%2C1203.1144%2C1203.4991%2C1203.3514%2C1203.0265%2C1203.3181%2C1203.1598%2C1203.6032%2C1203.3575%2C1203.2770%2C1203.5169%2C1203.3661%2C1203.2927%2C1203.4314%2C1203.2040%2C1203.6532%2C1203.5346%2C1203.0325%2C1203.3880%2C1203.5214%2C1203.1343%2C1203.2350%2C1203.1763%2C1203.6082%2C1203.4254%2C1203.6255%2C1203.0676%2C1203.5189%2C1203.1736%2C1203.0870%2C1203.5203&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Maximizing the Spread of Cascades Using Network Design"}, "summary": "We introduce a new optimization framework to maximize the expected spread of\ncascades in networks. Our model allows a rich set of actions that directly\nmanipulate cascade dynamics by adding nodes or edges to the network. Our\nmotivating application is one in spatial conservation planning, where a cascade\nmodels the dispersal of wild animals through a fragmented landscape. We propose\na mixed integer programming (MIP) formulation that combines elements from\nnetwork design and stochastic optimization. Our approach results in solutions\nwith stochastic optimality guarantees and points to conservation strategies\nthat are fundamentally different from naive approaches.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1203.4513%2C1203.2971%2C1203.0818%2C1203.1502%2C1203.1406%2C1203.4559%2C1203.3640%2C1203.3416%2C1203.4269%2C1203.3406%2C1203.0148%2C1203.4308%2C1203.0335%2C1203.3626%2C1203.2995%2C1203.1921%2C1203.5537%2C1203.1915%2C1203.3153%2C1203.5263%2C1203.1914%2C1203.6518%2C1203.2141%2C1203.3956%2C1203.5013%2C1203.2889%2C1203.0615%2C1203.0061%2C1203.3093%2C1203.2311%2C1203.3370%2C1203.5496%2C1203.6593%2C1203.4584%2C1203.4489%2C1203.5340%2C1203.5991%2C1203.4042%2C1203.2721%2C1203.2513%2C1203.0488%2C1203.0879%2C1203.0574%2C1203.1767%2C1203.0308%2C1203.0204%2C1203.6123%2C1203.1484%2C1203.4250%2C1203.0496%2C1203.1807%2C1203.3094%2C1203.4498%2C1203.2073%2C1203.2352%2C1203.4813%2C1203.0924%2C1203.5304%2C1203.6405%2C1203.1135%2C1203.2443%2C1203.6173%2C1203.5984%2C1203.2440%2C1203.5936%2C1203.3177%2C1203.0499%2C1203.4509%2C1203.3825%2C1203.0901%2C1203.2301%2C1203.1144%2C1203.4991%2C1203.3514%2C1203.0265%2C1203.3181%2C1203.1598%2C1203.6032%2C1203.3575%2C1203.2770%2C1203.5169%2C1203.3661%2C1203.2927%2C1203.4314%2C1203.2040%2C1203.6532%2C1203.5346%2C1203.0325%2C1203.3880%2C1203.5214%2C1203.1343%2C1203.2350%2C1203.1763%2C1203.6082%2C1203.4254%2C1203.6255%2C1203.0676%2C1203.5189%2C1203.1736%2C1203.0870%2C1203.5203&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "We introduce a new optimization framework to maximize the expected spread of\ncascades in networks. Our model allows a rich set of actions that directly\nmanipulate cascade dynamics by adding nodes or edges to the network. Our\nmotivating application is one in spatial conservation planning, where a cascade\nmodels the dispersal of wild animals through a fragmented landscape. We propose\na mixed integer programming (MIP) formulation that combines elements from\nnetwork design and stochastic optimization. Our approach results in solutions\nwith stochastic optimality guarantees and points to conservation strategies\nthat are fundamentally different from naive approaches."}, "authors": ["Daniel Sheldon", "Bistra Dilkina", "Adam N. Elmachtoub", "Ryan Finseth", "Ashish Sabharwal", "Jon Conrad", "Carla P. Gomes", "David Shmoys", "William Allen", "Ole Amundsen", "William Vaughan"], "author_detail": {"name": "William Vaughan"}, "author": "William Vaughan", "arxiv_comment": "Appears in Proceedings of the Twenty-Sixth Conference on Uncertainty\n  in Artificial Intelligence (UAI2010)", "links": [{"href": "http://arxiv.org/abs/1203.3514v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1203.3514v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.SI", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.SI", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "physics.soc-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1203.3514v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1203.3514v1", "journal_reference": null, "doi": null, "fulltext": "Maximizing the Spread of Cascades Using Network Design\n\nDaniel Sheldon, Bistra Dilkina, Adam N. Elmachtoub, Ryan Finseth, Ashish Sabharwal,\nJon Conrad, Carla Gomes, David Shmoys\nCornell University, Ithaca, NY\nWilliam Allen, Ole Amundsen, William Vaughan\nThe Conservation Fund, Arlington, VA\n\nAbstract\nWe introduce a new optimization framework\nto maximize the expected spread of cascades\nin networks. Our model allows a rich set of\nactions that directly manipulate cascade dynamics by adding nodes or edges to the network. Our motivating application is one in\nspatial conservation planning, where a cascade models the dispersal of wild animals\nthrough a fragmented landscape. We propose\na mixed integer programming (MIP) formulation that combines elements from network\ndesign and stochastic optimization. Our approach results in solutions with stochastic optimality guarantees and points to conservation strategies that are fundamentally different from naive approaches.\n\n1\n\nINTRODUCTION\n\nMany natural processes - such as the diffusion of information in a social network or the spread of animals\nthrough a fragmented landscape - can be described as\na network diffusion process or cascade. For example,\nan individual who buys a new product or adopts a new\ntechnology may trigger similar behavior in friends; if\nthis process gains momentum it can cascade through\na significant portion of a social network. The study\nof cascading behavior in networks is most familiar in\nsocial or epidemiological settings (Goldenberg et al.,\n2001; Leskovec et al., 2007a; Anderson and May, 1992;\nChakrabarti et al., 2008). However, a similar framework called metapopulation modeling exists in ecology\nto describe the occupancy pattern of habitat patches\nin a fragmented landscape (Hanski, 1999).\nOne would often like to intervene to steer the course\nof a cascade toward some goal, e.g., to maximize its\nspread through the network. However, a cascade is\na complex stochastic process and it is typically not\n\npossible to directly control the outcome, but only to\ninfluence certain underlying or initial conditions, such\nas where to initiate a cascade. This leaves great uncertainty as to the actual outcome of a given intervention.\nIn this paper, we contribute a new optimization framework to maximize the expected spread of a cascade\nunder a very general class of interventions.\nThe problem of maximizing the spread of a cascade is\nof great practical import. In the social network setting,\nDomingos and Richardson (2001) posed the problem\nof targeting individuals to maximize the effectiveness\nof a viral marketing strategy. Kempe, Kleinberg, and\nTardos (2003) later showed that for several different\ncascade models, finding the optimal set of k individuals to initiate a cascade in order to maximize its eventual spread is NP-hard, but because it is a submodular\noptimization problem, a greedy approach finds approximate solutions with strong performance guarantees.\nIn a conservation setting, maximizing the spread of a\ntarget species through the landscape given a limited\nmanagement budget is a central problem in the newly\nemerging field of computational sustainability (Gomes,\n2009). In this case, the management tools consist of\naugmenting the network of habitat patches through\nconservation or land acquisition. Unlike the social network example, the initial locations for the cascade are\npredetermined by the current spatial distribution of\nthe species, which is difficult to manipulate. Moreover, metapopulation models predict that long-term\npopulation dynamics are determined by properties of\nthe landscape much more so than initial occupancy\n(Ovaskainen and Hanski, 2001).\nMotivated by these considerations, we introduce a\nmuch more general optimization framework for cascades. In our model, one may choose from a rich set of\nmanagement actions to manipulate a cascade: in addition to choosing where to initiate the cascade, actions\nmay also intervene directly in the network to change\ncascade dynamics by adding nodes. This model is general enough to also capture adding edges, or increasing\n\n\fthe local probability of propagating the cascade.\nThe objective function is no longer submodular with\nrespect to this more general decision space, so optimization becomes more difficult. We formulate\nthe problem as mixed integer program (MIP) that\ncombines elements from deterministic network design\nproblems and stochastic optimization.\nOne of our main computational tools is sample average approximation (SAA): we find a solution that is\noptimal in hindsight for a number of training cascades\nthat are simulated in advance. The SAA optimum\nmay overfit for a small set of training cascades, but\nconverges to the true optimum with increasing training samples, and provides a stochastic bound on the\noptimality gap. Moreover, because the set of training\ncascades are known prior to optimization, SAA allows\nsignificant computational savings compared with other\nsimulation-based optimization methods.\nIn addition to the MIP-based SAA approach, we contribute a set of preprocessing techniques to reduce\ncomputation time for SAA and other algorithms that\nrepeatedly reason about a fixed set of training cascades. Our method compresses each training cascade\ninto a smaller cascade that is identical for reasoning\nabout the effects of management actions. Our experiments show that running times are greatly reduced by\npreprocessing, both for the saa approach and for two\ngreedy baselines. adapted from Kempe et al. (2003)\nand Leskovec et al. (2007b). After preprocessing, our\nSAA problem instances are amenable to solution by\nbranch-and-bound MIP solvers, even though they are\ninstances of an NP-hard network design problem.\nWe apply our model to a sustainability problem that\nis part of an ongoing collaboration with The Conservation Fund to optimize the conservation of land\nto assist in the recovery of the Red-cockaded Woodpecker (RCW), a federally listed rare and endangered\nspecies. Unlike heuristic methods that are often used\nin conservation planning, our method directly models\ndesired conservation outcome. For the RCW problem,\nwe find solutions with stochastic optimality guarantees\nthat demonstrate conservation strategies fundamentally different from those found by naive approaches.\n\n2\n\nPROBLEM STATEMENT\n\nWe begin by stating the generic optimization problem for progressive cascades; these serve as the foundation for all of our modeling. Specifics of our conservation application - which uses a variant called a\nnon-progressive cascade - are given in Section 2.3.\nA progressive cascade is a stochastic process in a graph\nG = (V, E) that begins with an initial set of active\n\nnodes; these proceed to activate new nodes over time\naccording to local activation rules among neighbors\nuntil no more activations are possible. Given a limited\nbudget and a set of target nodes, we wish to select from\na set of management actions that affect the activation\ndynamics in order to maximize the expected number\nof target nodes that become active.\nLet A = {1, . . . , L} be a set of management actions,\nand let c` be the cost of action `. Let y be a strategy\nvector that indicates which actions are to be taken:\ny is a 0-1 vector where y` = 1 if and only if action\n` is taken. Strategy y results in a particular cascade\nprocess based on the specification of the cascade model\nand management actions. Let {Xv (y)}v\u2208V be random\nvariables capturing the outcome of a cascade under\nstrategy y - the variable Xv (y) is 0 or 1 indicating\nwhether or not v is activated. Let B be the budget,\nand let T be a set of target nodes. The formal problem\nstatement is\nmax\ny\n\nX\n\nE[Xv (y)] s.t.\n\nv\u2208T\n\nL\nX\n\nc` y` \u2264 B.\n\n(1)\n\n`=1\n\nIn the remainder of this section we discuss the details\nof the cascade model and management actions.\n2.1\n\nCASCADE MODEL\n\nOur model is the independent cascade model (Goldenberg et al., 2001; Kempe et al., 2003). Consider\na graph G = (V, E) with activation probabilities pvw\nfor all (v, w) \u2208 E. Notationally, we sometimes write\np(v, w) for clarity, and adopt the convention that\npvw = 0 for (v, w) \u2208\n/ E.\nA (progressive) cascade proceeds is a sequence of activations. To begin, each node in a given source set S is\nactivated. When any node v is first activated, it has a\nsingle chance to activate each neighbor w. It succeeds\nwith probability pvw independent of the history of the\nprocess so far. If the attempt succeeds and w was not\nalready active, then w becomes newly activated, and\nwill have a chance to activate its neighbors in subsequent rounds. If the attempt fails, v will never attempt\nto activate w again. Pending activation attempts are\nsequenced arbitrarily.\nIn their proofs, Kempe et al. (2003) argue that the following procedure is an equivalent, albeit impractical,\nway of simulating a cascade. For each edge (v, w) \u2208 E,\nflip a coin with probability pvw to decide whether the\nedge is live. Then the set of activated nodes are those\nthat are reachable from S by live edges. This is tantamount to simulating the cascade, but flipping the coins\nfor each possible activation attempt in advance. Let\nthe subgraph G0 consisting of live edges be called the\n\n\fcascade graph. The SAA method presented in Section\n4 will optimize over a fixed set of cascade graphs that\nare simulated in advance.\nNon-progressive cascades. In a progressive cascade, an activated node remains so forever (even\nthough it only attempts to activate its neighbors once).\nThis is appropriate for social settings where a person\nadopts a new technology or buys a new product only\nonce. However, patch occupancy in a metapopulation\nis non-progressive: empty habitat patches may become\nunoccupied and then occupied again many times, and\noccupied patches may colonize others during any time\nstep, not only upon their first activation. To model\nthis, suppose that all activations are batched in rounds\ncorresponding to discrete time steps, and that an active node i has probability \u03b2i of becoming inactive\nduring each time step.\ni\n\npij\n\ni\n\ni\n\nj\n\n1\u2212\u03b2\n\nj\n\nj\n\nk\n\npkj\n\nt=1\n\nk\n\nk\n\nt=2\n\nt=3\n\nFigure 1: Cascade in layered graph\nKempe et al. showed how to reduce a non-progressive\ncascade in graph H = (V, E) to a progressive cascade\nin the layered graph G = (V T , E 0 ), where nodes are\nreplicated for each time step, and the nodes at time t\nconnect only to those at time t + 1 (see Figure 1). Let\nvi,t \u2208 V T represent the node i \u2208 V at time t. The nonprogressive cascade in H is equivalent to a progressive\ncascade in G with probabilities:\np(vi,t , vj,t+1 ) = pij ,\n\np(vi,t , vi,t+1 ) = 1 \u2212 \u03b2i ,\n\nand p(v, w) = 0 for all other v, w \u2208 V T . We think\nof this as node i at time t activating itself at time\nt + 1 with probability 1 \u2212 \u03b2i , and failing to do so with\nprobability \u03b2i so that it becomes inactive. (However it\nwill remain active if it is also activated by a neighbor\nin the same time step).\n2.2\n\nMANAGEMENT ACTIONS\n\nManagement actions in our model consist of predefined\nsets of nodes that may be added to the network for a\ncost. Consider the problem of augmenting a graph G0\non vertex set V0 to optimize for the spread of cascades.\nLet V` be the S\nset of nodes\npurchased by action `, and\n\u0001\nL\nlet V = V0 \u222a\nV\nbe\nthe\ncomplete set of vertices.\n`\n`=1\nLet G be the corresponding graph on vertex set V ,\nand assume that activation probabilities pvw for each\nv, w \u2208 V are known input parameters.\n\nGiven a strategy y, a cascade may proceed through\nnodes that are part of the resulting network, either\nbecause they belong to V0 or because some action\nwas\n\u0001 purchase the node. Let V (y) = V0 \u222a\nS taken to\nV\nbe the set of nodes purchased by y, and\n`\n`:y` =1\nlet G(y) be the corresponding subgraph of G. The\ncascade process is then fully specified by letting Xv (y)\nbe equal to one if v is reachable by live edges from S\nin the subgraph G(y), when each edge (v, w) \u2208 E is\nchosen to be live independently with probability pvw .\nA model that purchases sets of nodes is sufficiently\ngeneral to model other interesting management actions\nsuch as the purchase of edges or sources. For example,\nto purchase edges, modify the graph as follows: replace edge (v, w) by two edges (v, e) and (e, v), where\ne is a new node representing the edge purchase. Let\np0 (v, e) = p(v, w), p0 (e, w) = 1. Then the cascade proceeds from v to w in the new graph with probability\npvw , only if node e is purchased. Similar ideas can\nbe used to model actions that purchase sources, so\nthat the submodular influence-maximization problem\nof Kempe et al. can be seen as a special case of our\noptimization problem.\n2.3\n\nCONSERVATION APPLICATION\n\nHere we describe how this model of cascades and management actions relates to metapopulations and a conservation planning problem. A metapopulation model\nis a non-progressive cascade that describes the occupancy of different habitat patches over some time horizon T . Node vi,t represents habitat patch i at time t.\nFor i 6= j, the activation or colonization probability\npij represents the probability that an individual from\npatch i will colonize patch j in one time step. The extinction probability \u03b2i is the probability that the local\npopulation in patch i will go extinct in one time step.\nWe assume that colonization and extinction probabilities are specified in advance, although in practice they\nare very difficult to know precisely.\nPatches are grouped into non-overlapping parcels\nP1 , . . . , PL ; some are already conserved, and the others\nare available for purchase at time 0. For each unconserved parcel P` , there is a corresponding management\naction with node set V` containing the nodes vi,t for\nall patches i \u2208 P` and for all t. The set V0 consists of\nnodes representing patches in parcels that are already\nunder conservation. In other words, the target species\nmay only occupy patches that fall within conserved\nparcels, and the land manager may choose additional\nparcels to purchase for conservation. The fact that\nthe species may not exist outside of conserved parcels\nis a simplification, but there is flexibility in defining\n\"conserved\", which is adequate for our purposes.\n\n\fThe sources consist of nodes vi,0 such that patch i is\noccupied at the beginning of the time horizon. The\ntarget set is T = {vi,T }, i.e., the objective is to maximize the expected number of occupied patches at the\nend of the time horizon.\n2.4\n\nNON-SUBMODULARITY\n\nOur problem shares the same objective as the submodular influence-maximization problem. However, with\nrespect to our expanded set of actions, the objective\nis not submodular. A set function f is submodular if\nfor all S \u2286 T and for all m, the following holds:\nf (S \u222a {m}) \u2212 f (S) \u2265 f (T \u222a {m}) \u2212 f (T ).\nThis is a diminishing returns property: for any m, the\nmarginal gain from adding m to a set T is no more\nthan the gain of adding m to a subset S of T .\nIt is easy to see that submodularity does not hold for\nthe expanded set of actions in our problem, and that\nthe greedy solution can perform arbitrarily worse than\noptimal. This is true because an instance may contain\na high payoff action that is only enabled by first taking\na low payoff action.\n1\n2\n\na4\n\na1\n\n3\n\ns\n\na3\n\na2\n\nS\n{a1 , a2 }\n{a3 }\n{a4 }\n{a3 , a4 }\n\nf (S)\n4\n1\n0\nc+1\n\nc\n\nFigure 2: Example of non-submodularity.\nConsider the example in Figure 2, with a single source\nnode s, unit cost actions, and where activation probabilities are equal to 1 for all edges. Action a4 has\npayoff of c, but only if action a3 is also taken. Hence,\nthe marginal gain of adding a4 to {a3 } is greater than\nthat of adding a4 to the empty set, so the objective is\nnot submodular. For a budget of 2, the greedy algorithm will select {a1 , a2 } for a total reward of 4, but\nthe optimal solution {a3 , a4 } has objective value c + 1.\n\n3\n\n(1) provide bounds in the case of non-uniform sensor\ncosts and (2) greatly improve performance by introducing the CELF algorithm, which makes the same\nselections as a naive greedy algorithm with many fewer\nfunction evaluations by taking advantage of submodularity to avoid unnecessary evaluations.\n\nRELATED WORK\n\nCascades. Cascade optimization has also been considered by Leskovec et al. (2007b) and Krause et al.\n(2008) in their work on optimal sensor placement for\noutbreak detection in networks. They seek the optimal\nselection of nodes to detect cascades that occur in a\nnetwork, and show that this problem is also submodular so can be approximated well by a greedy approach.\nThey make improvements to the greedy approach to:\n\nStochastic Optimization. Stochastic optimization\nproblems have long been considered to be significantly\nharder computational problems than their deterministic counterparts. E.g., it is easy to show even in extremely simple settings that certain classes of stochastic linear programs are #P -hard (Dyer and Stougie,\n2006). Only in the last two decades has substantial attention been paid to solving stochastic integer programs as well (see, e.g., the survey of Ahmed\n(2004)), and the sample average approximation (SAA)\nhas been instrumental in recent advances. The survey\nof Shapiro (2003) outlines the range of convergence results for SAA that can be proved for a wide swath of\nstochastic optimization problems. The SAA also yields\nsurprising strong approximation algorithm results, for\nboth structured linear and integer programming problems, as surveyed by Swamy and Shmoys (2006). This\napproach has recently been applied to other large-scale\nstochastic combinatorial optimization problems, such\nas was done in the work of Verweij et al. (2003).\n\n4\n\nMETHODOLOGY\n\nIn this section, we describe our method to solve the\ncascade optimization problem (1). A major challenge\nis the fact that the objective itself is very difficult to\ncompute. Even for a fixed strategy y, the problem of\ncomputing E[Xv (y)] for a single node v is equivalent to\nthe #P -complete s-t reliability problem of computing\nthe probability that two terminals remain connected\nin a graph with random edge failures (Valiant, 1979).\n4.1\n\nSAA\n\nThe sample average approximation method (Shapiro,\n2003; Verweij et al., 2003) is a technique for solving\nstochastic optimization problems by sampling from the\nunderlying distribution to generate a finite number\nof scenarios and reducing the stochastic optimization\nproblem to a deterministic analogue. In our setting,\ninstead of maximizing the expected value in Problem\n(1) directly, the SAA method maximizes the empirical\naverage over a fixed set of samples from the underlying\nprobability space. It is important to note that the random variables Xv (y) can be measured in a fixed probability space defined over subgraphs of G that does not\ndepend on the particular strategy y. In other words, to\nsimulate a cascade in G(y), one can first flip coins for\n\n\fall edges in G to construct a subgraph G0 (the cascade\ngraph), and then compute reachability in G0 (y).\nLet G01 , . . . , G0N \u2286 G be a set of training cascades produced in this fashion, and let \u03bevk (y) be a deterministic\nvalue that indicates whether or not node v is reachable\nin G0k (y). The sample average approximation of (1) is\nN\nL\nX\n1 XX k\n\u03bev (y) s.t.\nmax\nc` y` \u2264 B.\ny N\nk=1 v\u2208T\n\nSolve M independent SAA problems of size N\nto produce candidate solutions y1 , . . . , P\nyM , and\nM\n1\nupper bounds Z\u03041 , . . . , Z\u0304M . Set Z\u0304 = M\ni=1 Z\u0304i .\n\n2\n\nChoose the best solution y\u2217 from y1 , . . . , yM by\nre-estimating the objective value of each using\nNvalid independent validation cascades.\n\n3\n\nCompute Z(y\u2217 ) using Ntest independent testing\ncascades. The estimated upper bound on the\noptimality gap is Z\u0304 \u2212 Z(y\u2217 ).\n\n(2)\n\nN\n1 XX k\nxv\nmax\nx,y N\nk=1 v\u2208T\nL\nX\n\n1\n\n`=1\n\nTo encode this as a MIP, we introduce reachability\nvariables xkv to represent the values \u03bevk (y), and a set of\nlinear constraints that enforce consistency among the\nx and y variables such that they have the intended\nmeaning. Let A(v) be the subset of actions that purchase node v. To match our application, we use the\nfollowing formulation tailored to non-progressive cascades, for which G0k is guaranteed to be acyclic, though\nthis is not a fundamental limitation.\n\ns.t.\n\nAlgorithm 1: The SAA procedure.\nInput: M samples of N training cascades, Nvalid\nvalidation cascades, Ntest testing cascades\n\nrouting links (and nodes) that can be purchased to\nprovide a specified quality of service, and the aim is to\ndo this at minimum cost. Our formulation is similar\nto standard flow-variable based network design MIPs\n(e.g., see Magnanti and Wong (1984)), but since the\ninput graphs are acyclic and purchases are made on\nnodes instead of edges, we can utilize a more compact\nformulation without any edge variables.\n\nc` y` \u2264 B\n\n`=1\n\nxkv \u2264\n\nX\n\ny` ,\n\n\u2200v \u2208\n/ V0 , \u2200k (3)\n\n`\u2208A(v)\n\nxkv \u2264\n\nX\n\nxku ,\n\n\u2200v \u2208\n/ S, \u2200k (4)\n\n(u,v)\u2208Ek\n\n0 \u2264 xkv \u2264 1, y` \u2208 {0, 1}.\nConsider a fixed y. We say that node v is purchased if\nP\n`\u2208A(v) y` \u2265 1. The constraints (3) and (4) together\nimply that xkv > 0 only if there is a path in G0k from\nthe sources S to v consisting of purchased nodes. In\nthis case, the constraints are redundant and xku may be\nset to the upper bound of 1 for all nodes u on the path.\nIf there is no path to v, then an inductive argument\nshows that xkv must be equal to 0. Otherwise, by (4),\nthere must be some node u such that xku > 0 and\n(u, v) \u2208 Ek . By induction, we can build a reverse path\nfrom v comprised of nodes w such that xkw > 0. Such\na path must end at a source (recall that G0k is acyclic),\ncontradicting the fact that v is not reachable.\nRelationship to Network Design. After sampling the\ntraining cascades, our problem is a deterministic network design problem: which sets of nodes should be\npurchased to connect the most targets? Network design is one of the most well-studied classes of deterministic combinatorial optimization problems. Traditionally, these problems arise in applications such as\ntelecommunication networks and supply chains, where\nthere is a given input graph that specifies potential\n\nBounding Sub-Optimality of SAA. The SAA\noptimum converges to the true optimum of (1) as\nN \u2192 \u221e, but for small N the optimal value may be optimistic, and the solution sub-optimal. Verweij et al.\ndescribe the following methodology to derive stochastic bounds on the quality of the SAA solution compared with the true optimum (Verweij et al., 2003).\nLet OPT be the true optimal value of problem (1), and\nlet Z\u0304 be the optimal value of the SAA problem (2) for\na fixed set of N training cascades. For any solution\ny (typically the SAA optimum), let Z(y) be an estimate of the objective value of solution y for problem\n(1) made by simulating Ntest cascades in G(y). The\nbounds are based on the fact that\nE[Z(y)] \u2264 OPT \u2264 E[Z\u0304].\nThe value E[Z\u0304 \u2212 Z(y)] is then an upper bound on the\noptimality gap OPT \u2212 E[Z(y)], and the random variable Z\u0304 \u2212 Z(y) is an unbiased estimate of the upper\nbound. To reduce the variance, one solves the SAA\nproblem many times with independent samples and\nlets Z\u0304 be the average of the upper bounds obtained\nin this way. This also gives many candidate solutions,\nof which the best is selected using validation samples.\nThe overall procedure is specified in Algorithm 1. Note\nthat if the SAA problem in line 1 is not solved optimally, the upper bound Z\u0304i is the best upper found\nduring optimization, not the objective value of yi .\n\n\f4.2\n\nPREPROCESSING\n\nBecause the SAA problem optimizes over a fixed set\nof training cascades that are sampled in advance, it\nis possible to achieve significant computational savings by preprocessing the cascades to accelerate later\ncomputations. For example, we defined the training\ncascade G0k to be a subgraph of G obtained by retaining each edge (u, v) independently with probability\np(u, v). However, this may be an inefficient representation of a cascade. A more compact representation is\nattained by simulating the cascade forward from S so\nthat nodes and edges that are not reachable under any\nstrategy are never explored. Such a simulation results\nin a graph that is equivalent for computing reachability from S under any strategy y.\nIn general, during preprocessing of a cascade we will\nconsider arbitrary transformations of the problem data\nfor each training cascade - originally consisting of\nthe tuple (S, T , A, G0k ) - to a more compact representation that preserves computation of the objective for any strategy y. This is done separately for\neach training cascade resulting in parameters Sk , Tk ,\nand Ak that are now specific to the kth training cascade; the MIP formulation is modified in the obvious way to accommodate this. We first introduce\none generalization: let the reward vector rk replace\nthe target\nset T so that the objective is computed as\nP P\n(1/N ) k v\u2208V k rvk xkv . Initially, rvk = 1 for v \u2208 T ,\nand 0 otherwise. There are two elementary preprocessing steps: pruning and collapsing sources.\nPruning. We exclude any nodes that are not reachable\nfrom S by generating the cascade graph via forward\nsimulation from S. We additionally prune all nodes v\nwith no path to T .\nCollapsing Sources. If there is a path from S to v\nconsisting exclusively of nodes from V0 , then v will be\nreachable for any strategy y. In this case, v is added\nto Sk as a new source. The set S is collapsed to a\nsingle source node s with an outgoing edge (s, v) for\neach (u, v) \u2208 Ek such that u \u2208 S.\nWe also contribute a method to find sets of nodes that\ncan be collapsed into singletons because the fates of\nall nodes in the set are tied together - i.e, for any\nstrategy, whenever one node in the group is reachable,\nall are. The simplest example of this is a strongly\nconnected component consisting of nodes purchased\nby the same action(s). In general, let u \u21d2 v denote\nthe situation in which, for any strategy y, if node u\nis reachable, then node v is also reachable. There are\ntwo basic cases that guarantee that u \u21d2 v:\n1. (u, v) \u2208 E and A(u) \u2286 A(v). I.e., u links to v,\nand whenever u is purchased v is also purchased.\n\n2. (v, u) \u2208 E and 6 \u2203w : (w, u) \u2208 E. I.e., the only\nlink to u comes through v; hence, any path that\nreaches v must go through u.\nThe relation u \u21d2 v is clearly transitive, so to find all\npairs such that u \u21d4 v, we build a graph with directed\nedges corresponding to the two basic cases above and\ncompute its strongly connected components (SCCs).\nOnce we have computed the SCCs, we form the quotient graph by collapsing each strongly-connected component C into a single node and updating the edge\nset accordingly. We must also update the other parameters of the problem. Let vC be the node corresponding to component C. Then: (i) vC becomes a\nsource if any node in C was originally a source, (ii)\nthe reward of vC is equal to the sum of rewards for\nthe original nodes\nT in C, and (iii) the new action set of\nvC is A(vC ) = u\u2208C A(u). To justify (iii), note that\nany strategy under which all of C is reachable must\npurchase everyT\nnode in C: the set of actions that does\nthis is exactly u\u2208C A(u).\nThese preprocessing steps may be repeated until no\nadditional progress is made and we have obtained a reduced cascade. Because preprocessing results in training cascades that are completely equivalent for reasoning about the objective values of strategies, they may\nbe used in conjunction with any algorithm.\n4.3\n\nGREEDY BASELINES\n\nIn our experiments, we use two greedy algorithms\nadapted from Kempe et al. (2003) and Leskovec et al.\n(2007b) as baselines. Each starts with an empty set\nof actions, and repeatedly adds the \"best\" action that\ndoes not violate the budget. The algorithm greedyuc (for uniform cost) chooses the action that results\nin the greatest increase in objective value. The algorithm greedy-cb (for cost-benefit) chooses the action\nwith the highest ratio of increase in objective value to\ncost.\nIn each step, the increase in objective value is evaluated for each possible action by simulating N cascades. For our problem instances, it is prohibitively\ntime consuming to simulate new cascades for each objective function evaluation. Instead, we reuse a set\nof N pre-sampled training cascades as in the SAA\nmethod. Simulations in pre-sampled cascades require\nmany fewer edge explorations, because only live edges\nfrom the original cascade are considered. We may also\napply our preprocessing techniques in this case. The\nincremental nature of the greedy algorithms allow for\nan additional optimization: after action ` is selected\nin some step, every subsequent strategy will include\naction `. Hence we may modify the problem by moving the nodes of V` to V0 so that they become part of\n\n\fthe \"original\" graph to be augmented, and then repeat\npreprocessing. The accumulated speedups from these\noptimizations are quite significant: as much as 1000x\nin our experiments.\n\n5\n\nEXPERIMENTS\n\nOur application is part of an ongoing collaboration\nwith The Conservation Fund to optimize land conservation to assist the recovery of the Red-cockaded\nWoodpecker (RCW), a federally listed rare and endangered species. RCW are a \"keystone species\" in\nthe southeastern US: they excavate tree cavities used\nby at least 27 other vertebrate species (USFWS, 2003).\nHowever, habitat degradation has led to severe population declines, and existing populations are highly\nfragmented (Conner et al., 2001). As a result, habitat conservation and management are crucial to the\ncontinued viability of RCW.\nWe use the RCW recovery problem as a test bed for\nthe computational approaches developed in this work.\nThe scientific and political issues surrounding endangered species are complex, and great care must be\ntaken when developing models that predict their fate.\nAlthough we use real data for this study, some parameter choices and assumptions have not been thoroughly verified with respect to RCW ecology. Hence\none should not draw specific conclusions about RCW\nconservation planning from the particular results presented here. We stress instead the general applicability\nof the computational model to a variety of specific conservation problems: coupled with diffusion parameters\ntailored to a given target species, our model can provide decision makers with key information about balancing management options and resource constraints.\n\"\n\n!\"#$%#\n\nFigure 3: The study area. Left: spatial layout of\nparcels; dark parcels are conserved. Inset: circles indicate territories; filled circles are occupied. There are\nno occupied territories outside the inset area.\nThe study area for these experiments consists of 443\nnon-overlapping parcels of land within a coastal area\nin the southeastern United States (see Figure 3); each\n\nparcel is at least 125 acres in area (the estimated minimum size to support a RCW territory). The cost to\nconserve a new parcel is equal to its assessed property\nvalue, while already-conserved parcels are free.\nRCWs live in small groups in a well-defined territory\n(i.e., patch) that is centered around a cluster of cavity\ntrees where the individual birds roost (Letcher et al.,\n1998). Presently, the study area contains 63 occupied\nRCW territories (these determine the sources S), the\nvast majority of which fall within conserved parcels.\nWe identify almost 2500 potential RCW territories satisfying minimum habitat and area requirements, using a 30 by 30 km habitat suitability raster of the\nstudy area that is calculated using land cover type,\nhurricane/climate change risk, and development risk.\nThe fact that these territories are specified in advance\nand assumed to exist at time zero is a simplification,\nbut compatible with RCW ecology and management\nstrategies. Because of restrictive requirements for cavity trees (live old-growth pines 80 to 150 years old)\nand significant time investments to excavate cavities\n(one to six years), the locations of territories are stable over time: it is far more common for an individual\nto fill a vacancy in an existing territory than to build\na new one (Letcher et al., 1998). Further, it is a common management practice for land managers to drill\nor install artificial cavities to construct a new territory (USFWS, 2003), which is compatible with the assumption that potential territory locations are chosen\nin advance of them becoming populated.\nThe parcel composition can be seen on the left of Figure 3, while the location of active and potential RCW\nterritories can be seen on the right of Figure 3. Given\na specific budget, the goal is to decide which parcels\nto conserve in order to maximize the expected number\nof active territories at a 100 year time horizon.\nTo model the dispersal process among RCW territories, we utilize a simple parametric form for colonization probabilities based on previous theoretical work\nabout metapopulations, and the parameter values are\nadapted to loosely match an individual-based model\nfor the RCW (Letcher et al., 1998). In particular, the\nprobability that some individual from an active territory i colonizes an unoccupied territory j in one year\nis computed according to Equation 5.\n(\n1/Ci\nd(i, j) \u2264 r0\np(i, j) =\n(5)\n\u03b1 exp(\u2212\u03b3 * d(i, j)) d(i, j) > r0\nWhen the distance d(i, j) between territories i and j is\nwithin the species foraging radius r0 , the colonization\nprobability is inversely proportional to the number Ci\nof neighboring territories within distance r0 . When\nd(i, j) > r0 , the colonization probability decays ex-\n\n\f700\n\n730\n\n600\n500\n400\nsaa\u2212ub\nsaa\ngreedy\u2212cb\ngreedy\u2212uc\n\n300\n200\n0\n\n1\n\n2\n\n3\n4\nBudget\n\n5\n\n6\n\ngreedy\u2212cb\nsaa\u2212ub\nsaa\n\n720\n710\n700\n690\n680\n\n7\n8\n\n670\n0\n\n700\nOccupied Territories\n\n740\n\nOccupied Territories\n\nOccupied Territories\n\n800\n\n600\n\n500\n\n400\n\nsaa\u2212ub\nsaa\ngreedy\u2212cb\ngreedy\u2212uc\n\n300\n5\n\nx 10\n\n(a)\n\n10\n\n15\n\n20\n\n1.5\n\n2\n\nN\n\n(b)\n\n2.5\n3\nBudget\n\n3.5\n\n4\n8\nx 10\n\n(c)\n\nFigure 4: (a) Objective values for saa and greedy, and saa upper bound, for various budgets. (b) Upper and\nlower bounds on objective as a function of training size N. (c) Results for mod instance, K=20.\nponentially with distance. In our study, the foraging\nradius is r0 = 3 km, and the other parameter values\nare \u03b1 = 0.1 and \u03b3 =7.69e-4. The single-year extinction\nprobability is \u03b2i = 0.29 for all territories i.\n5.1\n\nPERFORMANCE AND BOUNDS\n\nWe compared the quality of the solutions that the algorithms saa, greedy-uc and greedy-cb found for\nour test instance for a range of different budgets. For\nthe algorithm saa, we solved M = 50 SAA problems\non samples of size N = 10 training cascades using the\nCPLEX optimization software, with the best solution\nchosen using Nvalid = 500 validation cascades, and finally evaluated using Ntest = 500 test cascades (see\nAlgorithm 1). The greedy algorithms were run with\n100 training cascades and then evaluated using the\nsame 500 test cascades used for saa. Performance is\nmeasured as the number of occupied territories at the\nend of 100 years, averaged over the test cascades.\nIn Figure 4, we plot performance versus budget for\nthe three algorithms, and also the stochastic upper\nbound ('saa-ub') obtained from saa. The saa solutions are very close to this upper bound which indicates that they are essentially optimal. The saa algorithm outperforms both greedy approaches, although\ngreedy-cb also performs very well in this case. Later\nwe will see that certain problem instances exhibit a\nmuch bigger performance gap between saa and the\ngreedy algorithms. Also note that greedy-cb outperforms greedy-uc, which indicates the importance\nof considering the benefit of each parcel in conjunction\nwith its cost.\nTo test whether the number of training cascades we\nused was sufficient, we evaluated the performance as\na function of N at a fixed budget of $398M (10% of\nthe total parcel cost). Figure 4(b) shows the estimated\nupper and lower bounds on the objective obtained for\neach training size. Note that the gaps are quite small:\n\nfor N = 10 the upper bound is 696.07 and the lower\nbound is 687.97, only a 1.16% gap. Moreover, the gap\ndoes not decrease significantly for N > 10, indicating\nthat N = 10 is a large enough sample size for saa\nto obtain high quality solutions. The error bars in\nthe figure represent 95% confidence intervals that are\ncomputed over the M training samples averaged to\nobtain the upper bound, and the Ntest cascades for\nthe lower bound. These indicate high confidence that\nsaa is close to the true optimum for the stochastic\noptimization problem. Error bars for Figure 4(a) are\nof similar size, but are omitted because they are too\nsmall to be seen relative to the scale of the figure.\n\n5.2\n\nPREPROCESSING\n\nPreprocessing is critical to the running time of our\nalgorithms. Our average training cascade has 44K\nnodes after pruning (of 256K possible nodes). The\nadditional preprocessing steps reduce the average cascade size to under 20K nodes and 43K edges. We\nmeasured the running time savings by solving SAA\ninstances (T = 20, N = 10) with and without preprocessing (see Figure 5(a)). Running time is typically\nreduced by a factor of 3\u201310 for the range of budgets.\nWe also evaluated the benefits of preprocessing on the\nrunning time of the greedy algorithms, as illustrated\nin Figure 5(b). The lines are labeled as follows: 'fresh'\nis the variant of the greedy algorithm that evaluates\nthe marginal benefit of each action by simulating a\nfresh set of training cascades each time; 'reuse' is the\nvariant where training cascades are simulated in advance as in SAA; 'reuse+pre' also includes preprocessing of the training cascades; and 'reuse+pre+repeat'\nreapplies the preprocessing step each time the greedy\nalgorithm commits to a management action. The results indicate the dramatic runtime savings accrued\nby: (1) generating training cascades in advance and\n(2) preprocessing cascades to reduce their size.\n\n\f30\n\nsaa\nsaa+pre\n\nRuning Time (seconds)\n\n25\n20\n15\n10\n5\n0\n0\n\n2\n\n4\nBudget\n\n6\n\n8\n8\n\nx 10\n\n(a)\n4000\n\nRuning Time (seconds)\n\n3500\n3000\n2500\n\nfresh\nreuse\nreuse+pre\nreuse+pre+repeat\n\n2000\n1500\n1000\n500\n0\n0\n\n2\n\n4\nBudget\n\n6\n\n8\n8\nx 10\n\n(b)\nFigure 5: Run times with different levels of preprocessing: (a) saa, (b) greedy-uc.\n\n6\n\nthis is not the case. We have modified the problem\ninstance to demonstrate this point, by taking many\nof the parcels in the northeast quadrant out of conservation and assigning them costs, and then making\nmany of the parcels farther to the west and southwest\nconserved (i.e., available at no cost). This reflects a\nsituation where an existing population is located at\nsome distance from a reservoir of conservation land\nthat is suitable for habitation, or could be made suitable by low-cost management strategies. All other details of the problem such as colonization probabilities\nand time horizon remain the same.\nIn Figure 4(c), we evaluate performance of saa,\ngreedy-cb and greedy-ub across different budgets\nfor the modified instance. In this case, unlike in Figure\n4(a), there is a substantial performance gap between\nsaa and both greedy approaches.\nFigure 6 illustrates the actual strategies of greedy-cb\nand saa on this modified instance. We can see qualitatively different strategies between the two. In this\ncase, greedy-cb continues to follow the myopic conservation strategy of building outward from the initial\npopulation, while saa recognizes that there is a high\navailable payoff by connecting to existing conservation\nland and builds a path in that direction.\n\nDISCUSSION\n\nIn Section 2.4, we presented an example that showed\nthat the greedy algorithm can perform arbitrarily\nworse than optimal. However, in Figure 4(a), greedycb is often competitive with saa. Upon investigation,\nwe found that our study area is very well suited to a\nmyopic strategy such as greedy. The diffusion behavior\nof the RCW given by Equation (5) is such that short\nrange colonizations with hops smaller than the foraging radius r0 are much more common than long range\ncolonizations. Hence, any good solution is effectively\nconstrained to buy parcels that are contiguous with the\ninitially occupied territories, so new parcels can be colonized by short hops. However, the greedy algorithms\nbuild outwards myopically, never caring what lies beyond the current parcel they are purchasing, while the\nsaa algorithm is capable of setting goals, e.g., to build\na path from the sources to another area that is highly\nfavorable. However, one can see from Figure 3 that\nthe most favorable area is actually very close to the\nsources: there is a large block of conserved, but unoccupied, territories in the northeast quadrant of the\nstudy area that can support an increased population at\nno additional cost if they are connected to the sources.\nHence, due to the proximity, the greedy algorithm easily discovers a near-optimal solution even though it is\nbehaving myopically.\nIt is easy to imagine real conservation scenarios where\n\n7\n\nCONCLUSION\n\nIn this work, we addressed the problem of maximizing\nthe spread of cascades under budget restrictions. Our\nproblem formulation allows a powerful class of management actions that add nodes to the network. However, the cascade is a complex stochastic process so\nthe outcome of any particular action is uncertain, and\nunlike other cascade optimization problems, this one\ncannot be provably approximated by a naive greedy\napproach. We proposed a sample average approximation approach to reduce the stochastic problem to a\ndeterministic network design problem, while still retaining stochastic optimality guarantees. We evaluated our methodology on a key problem from the field\nof computational sustainability: spatial conservation\nplanning for species population growth. The SAA approach scaled well to this large real-world instance and\nfound better solutions than greedy baselines while also\nproviding optimality bounds. Moreover, preprocessing techniques resulted in a dramatic runtime speedup\nfor both the SAA and greedy algorithms. Most importantly, our results show that the optimal solutions\ngenerated by the SAA approach can be qualitatively\ndifferent than the ones obtained by a myopic greedy\napproach. A promising avenue of future research is to\nevaluate this methodology for other conservation and\ncascade optimization problems.\n\n\f$ 150M\n\n$ 260M\n\n$ 320M\n\n$ 400M\n\nFigure 6: Illustration of conservation strategies for different budget levels obtained by greedy (top row) and\nsaa (bottom row). The expected number of active territories is given for each solution.\n\nAcknowledgments\nThis work was supported by the National Science\nFoundation (grants IIS-0832782, IIS-0514429, and\nDBI-0905885) and the Air Force Office of Scientific\nResearch (grant FA9550-04-1-0151).\n\nReferences\nAhmed, S. (2004). Introduction to stochastic integer programming. COSP Stochastic Programming Introduction\n\u2013 http: // stoprog. org .\nAnderson, R. and May, R. (1992). Infectious diseases of\nhumans: dynamics and control. Oxford University Press.\nChakrabarti, D., Wang, Y., Wang, C., Leskovec, J., and\nFaloutsos, C. (2008). Epidemic thresholds in real networks. ACM Transactions on Information and System\nSecurity (TISSEC), 10(4):1.\nConner, R., Rudolph, D., Walters, J., and James, F.\n(2001). The Red-cockaded Woodpecker: surviving in a\nfire-maintained ecosystem. Univ of Texas Press.\nDomingos, P. and Richardson, M. (2001). Mining the network value of customers. In KDD, pages 57\u201366.\nDyer, M. and Stougie, L. (2006). Computational complexity of stochastic programming problems. Mathematical\nProgramming, 106(3):423\u2013432.\nGoldenberg, J., Libai, B., and Muller, E. (2001). Talk of\nthe network: A complex systems look at the underlying\nprocess of word-of-mouth. Marketing Letters, 12(3):211\u2013\n223.\nGomes, C. P. (Winter 2009). Computational Sustainability: Computational methods for a sustainable environment, economy, and society. The Bridge, National\nAcademy of Engineering, 39(4).\nHanski, I. (1999). Metapopulation ecology. Oxford University Press, USA.\nKempe, D., Kleinberg, J., and Tardos, \u00c9. (2003). Maximizing the spread of influence through a social network.\nIn KDD, pages 137\u2013146.\n\nKrause, A., Leskovec, J., Guestrin, C., VanBriesen, J., and\nFaloutsos, C. (2008). Efficient sensor placement optimization for securing large water distribution networks.\nJournal of Water Resources Planning and Management,\n134:516\u2013526.\nLeskovec, J., Adamic, L., and Huberman, B. (2007a). The\ndynamics of viral marketing. ACM Transactions on the\nWeb (TWEB), 1(1):5.\nLeskovec, J., Krause, A., Guestrin, C., Faloutsos, C., VanBriesen, J., and Glance, N. (2007b). Cost-effective outbreak detection in networks. In KDD, pages 420\u2013429.\nLetcher, B. H., Priddy, J. A., Walters, J. R., and Crowder,\nL. B. (1998). An individual-based, spatially-explicit simulation model of the population dynamics of the endangered red-cockaded woodpecker, picoides borealis. Biological Conservation, 86(1):1 \u2013 14.\nMagnanti, T. and Wong, R. (1984). Network design and\ntransportation planning: Models and algorithms. Transportation Science, 18(1):1.\nOvaskainen, O. and Hanski, I. (2001). Spatially structured\nmetapopulation models: global and local assessment of\nmetapopulation capacity. Theoretical Population Biology, 60(4):281\u2013302.\nShapiro, A. (2003). Monte Carlo sampling methods. In\nRuszczynski, A. and Shapiro, A., editors, Stochastic Programming, Handbooks in Operations Research and Management Science Vol. 10, pages 353\u2013426.\nSwamy, C. and Shmoys, D. (2006). Approximation algorithms for 2-stage stochastic optimization problems. In\nProceedings of FSTTCS, pages 5\u201319.\nUSFWS (2003). Red-cockaded woodpecker recovery plan.\nU.S. Fish and Wildlife Service, Atlanta, GA.\nValiant, L. G. (1979). The complexity of enumeration\nand reliability problems. SIAM Journal on Computing,\n8(3):410\u2013421.\nVerweij, B., Ahmed, S., Kleywegt, A., Nemhauser, G., and\nShapiro, A. (2003). The sample average approximation\nmethod applied to stochastic routing problems: a computational study. Computational Optimization and Applications, 24(2):289\u2013333.\n\n\f"}