{"id": "http://arxiv.org/abs/0704.3771v1", "guidislink": true, "updated": "2007-04-28T02:47:17Z", "updated_parsed": [2007, 4, 28, 2, 47, 17, 5, 118, 0], "published": "2007-04-28T02:47:17Z", "published_parsed": [2007, 4, 28, 2, 47, 17, 5, 118, 0], "title": "Primordial Evolution in the Finitary Process Soup", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0704.2629%2C0704.2994%2C0704.2385%2C0704.3172%2C0704.1465%2C0704.2669%2C0704.1630%2C0704.0669%2C0704.3056%2C0704.3897%2C0704.3138%2C0704.2351%2C0704.1934%2C0704.0455%2C0704.1564%2C0704.1013%2C0704.0768%2C0704.3128%2C0704.3042%2C0704.0279%2C0704.3720%2C0704.3369%2C0704.0448%2C0704.2275%2C0704.1868%2C0704.0665%2C0704.2185%2C0704.2129%2C0704.1031%2C0704.1495%2C0704.3227%2C0704.3578%2C0704.3546%2C0704.0880%2C0704.1148%2C0704.3900%2C0704.3530%2C0704.2885%2C0704.2028%2C0704.3747%2C0704.3165%2C0704.0236%2C0704.3635%2C0704.1511%2C0704.1365%2C0704.0719%2C0704.3771%2C0704.2431%2C0704.1039%2C0704.3962%2C0704.1571%2C0704.0012%2C0704.3161%2C0704.1922%2C0704.0651%2C0704.3498%2C0704.0881%2C0704.1471%2C0704.3136%2C0704.2138%2C0704.2100%2C0704.3221%2C0704.0497%2C0704.1028%2C0704.3630%2C0704.1139%2C0704.2223%2C0704.1287%2C0704.2365%2C0704.2727%2C0704.1162%2C0704.2132%2C0704.3520%2C0704.0484%2C0704.0022%2C0704.3235%2C0704.0208%2C0704.2937%2C0704.0915%2C0704.1704%2C0704.3497%2C0704.0571%2C0704.2427%2C0704.3013%2C0704.2721%2C0704.0185%2C0704.1562%2C0704.0692%2C0704.0322%2C0704.3770%2C0704.3989%2C0704.0617%2C0704.2530%2C0704.0430%2C0704.1652%2C0704.1135%2C0704.2523%2C0704.1987%2C0704.2338%2C0704.2970%2C0704.0989&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Primordial Evolution in the Finitary Process Soup"}, "summary": "A general and basic model of primordial evolution--a soup of reacting\nfinitary and discrete processes--is employed to identify and analyze\nfundamental mechanisms that generate and maintain complex structures in\nprebiotic systems. The processes--$\\epsilon$-machines as defined in\ncomputational mechanics--and their interaction networks both provide well\ndefined notions of structure. This enables us to quantitatively demonstrate\nhierarchical self-organization in the soup in terms of complexity. We found\nthat replicating processes evolve the strategy of successively building higher\nlevels of organization by autocatalysis. Moreover, this is facilitated by local\ncomponents that have low structural complexity, but high generality. In effect,\nthe finitary process soup spontaneously evolves a selection pressure that\nfavors such components. In light of the finitary process soup's generality,\nthese results suggest a fundamental law of hierarchical systems: global\ncomplexity requires local simplicity.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0704.2629%2C0704.2994%2C0704.2385%2C0704.3172%2C0704.1465%2C0704.2669%2C0704.1630%2C0704.0669%2C0704.3056%2C0704.3897%2C0704.3138%2C0704.2351%2C0704.1934%2C0704.0455%2C0704.1564%2C0704.1013%2C0704.0768%2C0704.3128%2C0704.3042%2C0704.0279%2C0704.3720%2C0704.3369%2C0704.0448%2C0704.2275%2C0704.1868%2C0704.0665%2C0704.2185%2C0704.2129%2C0704.1031%2C0704.1495%2C0704.3227%2C0704.3578%2C0704.3546%2C0704.0880%2C0704.1148%2C0704.3900%2C0704.3530%2C0704.2885%2C0704.2028%2C0704.3747%2C0704.3165%2C0704.0236%2C0704.3635%2C0704.1511%2C0704.1365%2C0704.0719%2C0704.3771%2C0704.2431%2C0704.1039%2C0704.3962%2C0704.1571%2C0704.0012%2C0704.3161%2C0704.1922%2C0704.0651%2C0704.3498%2C0704.0881%2C0704.1471%2C0704.3136%2C0704.2138%2C0704.2100%2C0704.3221%2C0704.0497%2C0704.1028%2C0704.3630%2C0704.1139%2C0704.2223%2C0704.1287%2C0704.2365%2C0704.2727%2C0704.1162%2C0704.2132%2C0704.3520%2C0704.0484%2C0704.0022%2C0704.3235%2C0704.0208%2C0704.2937%2C0704.0915%2C0704.1704%2C0704.3497%2C0704.0571%2C0704.2427%2C0704.3013%2C0704.2721%2C0704.0185%2C0704.1562%2C0704.0692%2C0704.0322%2C0704.3770%2C0704.3989%2C0704.0617%2C0704.2530%2C0704.0430%2C0704.1652%2C0704.1135%2C0704.2523%2C0704.1987%2C0704.2338%2C0704.2970%2C0704.0989&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "A general and basic model of primordial evolution--a soup of reacting\nfinitary and discrete processes--is employed to identify and analyze\nfundamental mechanisms that generate and maintain complex structures in\nprebiotic systems. The processes--$\\epsilon$-machines as defined in\ncomputational mechanics--and their interaction networks both provide well\ndefined notions of structure. This enables us to quantitatively demonstrate\nhierarchical self-organization in the soup in terms of complexity. We found\nthat replicating processes evolve the strategy of successively building higher\nlevels of organization by autocatalysis. Moreover, this is facilitated by local\ncomponents that have low structural complexity, but high generality. In effect,\nthe finitary process soup spontaneously evolves a selection pressure that\nfavors such components. In light of the finitary process soup's generality,\nthese results suggest a fundamental law of hierarchical systems: global\ncomplexity requires local simplicity."}, "authors": ["Olof Gornerup", "James P. Crutchfield"], "author_detail": {"name": "James P. Crutchfield"}, "author": "James P. Crutchfield", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1142/9789812779953_0012", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/0704.3771v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0704.3771v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "7 pages, 10 figures;\n  http://cse.ucdavis.edu/~cmg/compmech/pubs/pefps.htm", "arxiv_primary_category": {"term": "q-bio.PE", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "q-bio.PE", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "q-bio.MN", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0704.3771v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0704.3771v1", "journal_reference": null, "doi": "10.1142/9789812779953_0012", "fulltext": "Santa Fe Institute Working Paper 07-05-XXX\narxiv.org e-print adap-org/0705XXX\n\nPrimordial Evolution in the Finitary Process Soup\nOlof G\u00f6rnerup1, \u2217 and James P. Crutchfield2, \u2020\n1\n\narXiv:0704.3771v1 [q-bio.PE] 28 Apr 2007\n\nComplex Systems Group, Department of Energy and Environment,\nChalmers University of Technology, 412 96 G\u00f6teborg, Sweden\n2\nCenter for Computational Science & Engineering and Physics Department,\nUniversity of California, Davis, One Shields Avenue, Davis CA 95616, USA\n(Dated: October 28, 2018)\nA general and basic model of primordial evolution-a soup of reacting finitary and discrete\nprocesses-is employed to identify and analyze fundamental mechanisms that generate and maintain\ncomplex structures in prebiotic systems. The processes-\u01eb-machines as defined in computational\nmechanics-and their interaction networks both provide well defined notions of structure. This\nenables us to quantitatively demonstrate hierarchical self-organization in the soup in terms of complexity. We found that replicating processes evolve the strategy of successively building higher levels\nof organization by autocatalysis. Moreover, this is facilitated by local components that have low\nstructural complexity, but high generality. In effect, the finitary process soup spontaneously evolves\na selection pressure that favors such components. In light of the finitary process soup's generality,\nthese results suggest a fundamental law of hierarchical systems: global complexity requires local\nsimplicity.\nPACS numbers:\nKeywords: structural complexity; entropy; information; computational mechanics; population dynamics;\nhierarchical dynamics; emergence; evolution; self-organization; autocatalysis; autopoiesis.\n\nI.\n\nINTRODUCTION\n\nThe very earliest stages of evolution-or rather, preevolution-remain a mystery. How did structure emerge\nin a system of simple interacting objects, such as\nmolecules? How was this structure commandeered as\nsubstrate for subsequent evolution-evolution that continued to transform the objects themselves? One wonders\nif this recursive interplay between structure and dynamics facilitated the emergence of complex and functional\norganizations. Since these questions concern the most\nfundamental properties of evolutionary systems, we explore them using principled and rigorous methods.\nTo build a suitable model a few basic ingredients are\nrequired. First, one needs some type of elementary objects that constitute the state of the system at its finest\nresolution. Second, one needs rules for how the objects\ninteract. Third, one needs an environment in which the\nobjects interact. Fourth, one needs quantitative and calculable notions of structure and organization. These requirements led us to the finitary process soup model of\nprimordial evolution [1]. Simply stated, the soup's ingredients are, in order, \u01eb-machines, their functional composition, a flow reactor, and the structural complexity C\u03bc\nof \u01eb-machines.\nAfter explaining each of these ingredients, we will relate the model to classical replicator dynamics by reducing the soup to a special case. We then move on to contrast the limited case with the full-fledged finitary process\n\nsoup as a constructive, unrestricted dynamical system.\n\nII.\n\nOBJECTS: \u01eb-MACHINES\n\nHere we employ a finite-memory process called an \u01ebmachine [2, 3, 4], as our preferred representation of an\nevolving information-processing individual. Using a population of \u01eb-machines is particularly appropriate in studying self-organization and evolution from an informationtheoretic perspective as they allow quantitative measurements of storage capacity and randomness. Rather than\nusing the abstraction of a formal language-an arbitrary\nfinite set of finite length words-we consider a discretevalued, discrete-time stationary stochastic process described by a bi-infinite sequence of random variables St\nover an alphabet A:\n\u2194\n\nS = ...S1 S0 S1 ....\n\n(1)\n\nA process stores information in a set of causal states\nthat are equivalence classes of semi-infinite histories that\ncondition the same probability distribution for future\nstates. More formally, the causal states S of a process\n\u2190\n\n\u2190\n\n\u01eb( s ) = { s |P( S | S = s ) = P( S | S = s )} ,\n\n(2)\n\nare the members of the range of the map \u01eb : S 7\u2192 2 S\nfrom histories to sets of histories:\n\u2190\n\n\u2190\n\n\u2190\u2032\n\n\u2192\n\n\u2190\n\n\u2190\n\n\u2192\n\n\u2190\n\n\u2190\u2032\n\n\u2190\n\nwhere 2 S denotes the power set of S . Further, let S \u2208 S\n\u21921\n\n\u2217 Electronic\n\u2020 Electronic\n\naddress: olofgo@chalmers.se\naddress: chaos@cse.ucdavis.edu\n\nbe the current casual state, S \u2032 its successor, and S the\nnext symbol in the sequence (1). The transition from\none causal state Si to another Sj that emits the symbol\n\n\f2\n1|0\n0|0\n\nA\n\n1|1\n\nTA\n\n0|0\n\nA\n\nB\n\nA\n\nB\n\n0|1\n\n1|1\n\nTB\n\nTC\n\nFIG. 1: Three examples of \u01eb-machines. TA represents the\nidentity function and has the causal state A. TB has two\ncausal states (A and B), accepts the input string 1010 . . . or\n0101 . . ., and operates by flipping 0s to 1s and vice versa. TC\nhas the same domain and range as TB , but maps input strings\nonto themselves.\n\ns \u2208 A is given by a set of labeled transition matrices:\n(s)\nT = {Tij : s \u2208 A}, where\n(s)\n\n\u21921\n\nTij \u2261 P(S \u2032 = Sj , S = s|S = Si ).\n\n(3)\n\nThe \u01eb-machine of a process is the ordered pair {S, T }.\nOne can show that it is the minimal, maximally predictive causal representation of the process [4]. Unlike a\ngeneral probabilistic \u01eb-machine, for simplicity, here we\ntake causal-state transitions to have equal probabilities.\nThe finitary \u01eb-machines can be thought of as finite-state\nmachines with a certain properties [4]: (1) All states are\nstart states and accepting states; (2) All recurrent states\nform a single strongly connected component; (3) All transitions are deterministic: A causal state together with the\nnext value observed from the process determines a unique\nnext causal state; And (4) the set of causal states is minimal. Here we use an alphabet of input and output pairs\nover a binary alphabet: A = {0|0, 0|1, 1|0, 1|1}. This implies that the \u01eb-machines work as mappings between sets\nof strings. In other words, they are transducers [5].\nIn contrast to prior models of pre-biotic evolution, \u01ebmachines are simply finitely-specified mappings. More to\nthe point, they do not have two separate modes of representation (information storage) or functioning (transformation). The advantage is that there is no assumed\ndistinction between gene and protein [6, 7] or between\ndata and program [8, 9, 10, 11]. Instead, one recovers\nthe dichotomy by projecting onto (i) the sets that an \u01ebmachine recognizes and generates and (ii) the mapping\nbetween these sets. Examples of \u01eb-machines are shown\nin Figure 1.\n\nIII.\n\nINTERACTION: FUNCTIONAL\nCOMPOSITION\n\nThe basic pairwise interaction we use in the finitary\nprocess soup is functional composition. Two machines\ninteract and produce a third machine-their composition. Composition is not a symmetric operation. Machine TA composed with another TB does not necessarily\nresult in the same machine as TB composed with TA :\nTB \u25e6 TA 6= TA \u25e6 TB .\n\nThe upper bound on the number of states of the composition is the product of the number of states of the\nparents: |TB \u25e6 TA | \u2264 |TB | \u00d7 |TA |. Hence, there is the\npossibility of exponential growth of states and machine\ncomplexity if machines are iteratively composed. A composition, though, may also result in a machine with lower\ncomplexity than those of its parents.\nA.\n\nInteraction networks\n\nWe represent the interactions among a set of \u01ebmachines with an interaction network G which is a a\ngraph whose nodes correspond to \u01eb-machines and whose\ntransitions correspond to interactions. If Tk = Tj \u25e6 Ti\noccurs in the soup, then the edge from Ti to Tk is labeled\nTj . One may represent G with the binary matrices:\n(\n1 if Tk = Tj \u25e6 Ti\n(k)\nGij =\n(4)\n0 otherwise.\nConsider the \u01eb-machines in Fig. 1, for example. They\nare related via composition according to the interaction\ngraph shown in Fig. 2, which is given by the matrices\n\uf8ee\n\uf8f9\n1 0 0\nG (A) = \uf8f00 0 0\uf8fb ,\n(5)\n0 0 0\nG (B)\nand\nG (C)\n\nB.\n\n\uf8f9\n0 1 0\n= \uf8f0 1 0 1\uf8fb ,\n0 1 0\n\uf8ee\n\n\uf8ee\n\n\uf8f9\n0 0 1\n= \uf8f0 0 1 0\uf8fb .\n1 0 1\n\n(6)\n\n(7)\n\nMeta-machines\n\nFor a machine to survive in its environment somehow\nit needs to produce copies of itself. This can be done directly by self-reproduction, e.g. TA \u25e6 TA = TA , or it can\nbe done indirectly in cooperation with other machines:\ne.g., TA facilitates the production of TB , which facilitates\nthe production of TC , which, in turn, closes the loop by\nfacilitating the production of TA . In other words, there\ncan be sets of machines that interact with each other in\nsuch a way that they collectively self-reinforce the overall production of the set. This leads to the notion of an\nautonomous and self-replicating entity, which we call a\nmeta-machine. Inspired by Maturana and Varela's autopoietic set [12], Eigen and Schuster's hypercycle [13],\nand Fontana and Buss' organization [14], we define a\nmeta-machine \u03a9 to be a connected set of \u01eb-machines\n\n\f3\nTA\nTA\n\nTB\n\nTC\nTB\n\nTB\n\nTA , TC\n\nTC\n\nTB\n\nTA , TC\n\nFIG. 2: Interaction network of the \u01eb-machines in Fig. 1.\nThere is a transition, for example, that is labeled TC from\nthe node TA to the node TC , since TA composed with TC\nresults in TC (in fact, each transition from TA has the same\nlabel as the label of its respective sink node since TA is the\nidentity function).\n\nwhose interaction matrix consists of all and only the\nmembers of the set. That is, a set \u03a9 is a meta-machine\nif and only if (1) the composition of two \u01eb-machines from\nthe set is always itself a member of the set:\nTj \u25e6 Ti \u2208 \u03a9, \u2200Ti , Tj \u2208 \u03a9 ;\n\n(8)\n\n(2) all \u01eb-machines in the set can arise from the composition of two machines in the set:\n\u2203Ti , Tj \u2208 \u03a9, Tk = Tj \u25e6 Ti , \u2200Tk \u2208 \u03a9 ;\n\n(9)\n\nand (3) there is a nondirected path between every pair of\nnodes in \u03a9's interaction network G\u03a9 . The third property\nensures that there is no subset of \u03a9 that is isolated from\nthe rest of \u03a9 under composition. Consider, for example,\nthe union of two self-replicators, TA and TB , for which\nTB \u25e6 TA = TA \u25e6 TB = T\u2205 . According to property (3), they\nare not a meta-machine.\nIV.\n\nCOMPLEXITY MEASURES: C\u03bc\n\nIn previous computational pre-biotic models, the objects have been represented by, for example, assembly\nlanguage codes [8, 9, 10, 11], tags [15, 16], \u03bb-expressions\n[17] and cellular automata [18]. We employ \u01eb-machines\ninstead mainly for one reason: there is a well developed theory (computational mechanics) of their structural properties. Assembly language programs and \u03bbexpressions, for instance, are computational universal\nrepresentations and so one knows that it is not possible\nto calculate their complexity [5].\nFor finitary \u01eb-machines, in contrast, complexity can be\nreadily defined and analytically calculated in closed form.\nDefine the stochastic connection\nmatrix of an \u01eb-machine\nP\nM = {S, T } as T \u2261 s\u2208A T (s) . The probability distribution pS over the states in S-how often they are\nvisited-is given by the normalized left eigenvector of T\nassociated with eigenvalue 1.\n\nFIG. 3: A schematic illustration of the finitary process soup.\nTwo \u01eb-machines, TA and TB , are composed and produce a\nthird machine TC , or a random machine TR is introduced to\nthe soup. In either case, another randomly selected machine\nTD is removed to maintain a fixed population size. Note that\nthis is a well stirred setting, and so there is no spatial relationship in the population.\n\nThe structural complexity C\u03bc of M is the Shannon entropy of the distribution given by pS ,\nX (v)\n(v)\nC\u03bc (M ) \u2261\npS log2 pS .\n(10)\nv\u2208S\n\nThe structural complexity of an \u01eb-machine is the amount\nof information stored in the distribution over S, which\nis the minimum average amount of memory needed to\noptimally predict future configurations [4].\nTo measure the diversity of interactions in the soup we\ndefine the interaction network complexity C\u03bc (G) to be the\nShannon entropy of the distribution of effective transition\nprobabilities in the graph G. We consider, in particular,\nonly the transitions that have occurred between machine\ntypes that are present. That is,\nX\nk\nk\nC\u03bc (G) \u2261\n\u03c5ij\nlog2 \u03c5ij\n,\n(11)\npi,j,k 6=0\n\nwhere\nk\n\u03c5ij\n\n=\n\n(\n\npi pj /\n0\n\nP\n\nk\n\u03c5ij\n\nif Tk = Tj \u25e6 Ti has occurred\n(12)\notherwise.\n\nand pi is the fraction of machines of type i in the population. To monitor the emergence of actual and functional\nreproduction paths, we consider only those interactions\nthat occurred in the population.\nV.\n\nFRAMEWORK: THE SOUP\n\nThe \u01eb-machines interact in a well stirred reactor with\nthe following iterated dynamics:\n1. Production and influx :\n\n\f4\n(a) With probability \u03a6in generate a random \u01ebmachine TR .\n(b) With probability 1 \u2212 \u03a6in (reaction):\ni. Select TA and TB randomly.\nii. Form the composition TC = TB \u25e6 TA .\n\n0.2\n0.15\np\n\n2. Outflux :\n\n0.25\n\n0.1\n\n(a) Select an \u01eb-machine TD randomly from the\npopulation.\n(b) Replace TD with the \u01eb-machine produced in\nthe previous step-either TC or TR .\nTR is uniformly sampled from the set of all two-state\n\u01eb-machines in our simulations (see below). This sampling\nis also used when initializing the population. The insertion of TR corresponds to an influx while the removal\nof TD corresponds to an outflux. The latter keeps the\npopulation size constant. See Fig. 3 for a schematic illustration. There is no spatial dependence in this version\nof the soup as \u01eb-machines are sampled uniformly from\nthe population for each replication and removal.\nVI.\n\nCLOSED POPULATION DYNAMICS\n\nTo familiarize ourselves with the model we first examine a simple base case: a soup with no influx that is\ninitialized with machines taken from a finite set which\nis closed under composition. This case is also intended\nto work as a bridge between classical population dynamics and the general, constructive dynamics of the finitary\nprocess soup. The closure with respect to composition\nenables us to describe the system's temporal dynamics\nof \u01eb-machine concentrations by a coupled system of ordinary differential equations. In the limit of an infinite\nsoup size, the rate equation of concentration pk of machine type Tk is given by\n\u1e57k = \u03c8k \u2212 \u03a6out pk , k = 1, ..., n,\n\n(13)\n\nwhere the conditional production rate \u03c8k is the probability that Tk is produced given that two randomly sampled\nmachines are paired:\n\u03c8k =\n\nn\nX\n\n\u03b1kij pi pj ,\n\n(14)\n\ni,j=1\n\nand \u03b1kij is a second-order reaction rate constant:\n(\n1 if Tk = Tj \u25e6 Ti\nk\n\u03b1ij =\n0 otherwise.\n\n(15)\n\nThe outflux \u03a6out equals the total production rate of the\nsoup-i.e., the probability that a reaction occurs given\nthat two \u01eb-machines are paired. It keeps the size of the\nsoup constant:\n\u03a6out (t) =\n\nn\nX\ni=1\n\n\u03c8i .\n\n(16)\n\n0.05\n0\n0\n\n2\n\n4\n\n6\n\n8\n\n10\n\nt/N\n\nFIG. 4: A simple base case: Machine type frequencies of\nmono-machines as functions of time. N (= 100, 000) denotes\nthe population size. Dashed lines: simulation; solid lines: Eq.\n(17).\n\nGiven a soup with no influx, \u03a6in = 0, that hosts machines which are members of a set that is closed under\ncomposition, the distribution dynamics can alternatively\nbe predicted from by its interaction network:\n(k)\n\npt\n\n(k)\n\n= pt\u22121 * Gij * pTt\u22121 Z \u22121 ,\n\n(17)\n\n(k)\n\nwhere pt is the frequency of \u01eb-machine type k at time\nt and Z \u22121 is a normalization factor. This approximates\nthe soup's elements as updating synchronously.\nWe illustrate the closed case by initiating the soup\nwith machines that consist of only a single state-\nmono-machines. There are 15 mono-machines, the null\n(transition-less) transducer is excluded, and they form a\nclosed set under composition. See Fig. 4 for the temporal\ndynamics of their respective frequencies. Nine machine\ntypes remain in the population at equilibrium. They\nform a meta-machine M with C\u03bc (M) = 5.75 bits. In\nthis case, since C\u03bc (Ti ) = 0 for all mono-machines Ti , the\npopulation's structural complexity derives only from its\ninteraction network.\n\nVII.\n\nOPEN POPULATION DYNAMICS\n\nWe now move on to the general case of a soup with\npositive influx rate consisting of \u01eb-machines of arbitrary\nsize. The soup then constitutes a constructive dynamical system where there is a mutual dependence between\nits equations of motion and the individuals. Due to the\nopenness, Eqs. (13)-(17) do not necessarily apply. We\ntherefore turn to simulations.\nIn order to study dynamics that is ruled solely by compositional transformations we first set the influx rate to\nzero. A fine-grained description of the soup's history on\nthe \u01eb-machine level is given by a genealogy-a record of\ndescent of machine types. By studying the example in\n\n\f5\n\nFIG. 5: Genealogy of \u01eb-machine types in a soup with 100\nmachines. A solid line denotes that a machine type is present\nin the soup. Dashed lines (drawn from the parents to the\nchild) denote composition. Note that almost the the whole\nset of initial \u01eb-machine types (with one exception) is replaced\nby the dynamics.\n\nFig. 5, a simulation with N = 100 individuals, one important observation is that nearly all the \u01eb-machine types\nthat are present in the soup's initial population are replaced over time. Thus, genuine novelty emerges, in contrast to the closed soup just described. Initially, there\nis a rapid innovation phase in which novel machines are\nintroduced that displace the bulk of the initial machines.\nThe degree of innovation flattens out, along with the diversity of the soup, and eventually vanishes as the population becomes increasingly closed under composition.\nTo monitor the soup's organization over time, we superimpose C\u03bc (G) time series from several runs in Fig.\n6. One sees that plateaus are formed. These can be explained in terms of meta-machines. In addition to capturing the notion of self-replicating entities, meta-machines\nalso describe an invariant set of the population dynamics.\nThat is, formally,\n\u03a9 = G \u25e6 \u03a9,\n\n(18)\n\nwhere \u03a9 is the set of \u01eb-machines present in the population\nand G is their interaction network. These invariant sets\ncan be stable or unstable under the population dynamics.\nConsider, for example, the meta-machine in Fig. 2. It\nis unstable, since TA s are only produced by TA s, and will\ndecay over time to the meta-machine of Fig. 7. This\nalso illustrates, by the way, how trivial self-replication is\nspontaneously attenuated in the soup.\nThe plateaus at C\u03bc (G) = 4 bits, C\u03bc (G) = 2 bits, and\nC\u03bc (G) = 0 bits correspond to the largest meta-machine\nthat is present at that time. Since a meta-machine by\ndefinition is closed under composition, it itself does not\nproduce novel machines; thus, one has the upper bound\nof C\u03bc (G). As a meta-machine is reduced due to an internal instability or sampling fluctuations by the outflux,\nthe upper bound of C\u03bc (G) is lowered. This results in\n\nFIG. 6: Decomposition of meta-machines in a soup with no\ninflux. Superimposed plots of C\u03bc (G) from 15 separate runs\nwith N = 500. C\u03bc (G) is bounded by 4 bits while a 4-element\nmeta-machine (shown), denoted \u03a94 , is the largest one in the\nsoup. \u03a94 decays to \u03a92 , a 2-element meta-machine (shown)\ndue to fluctuations, that in turn decays to \u03a91 , a single selfreproducing \u01eb-machine.\n\nTB\nTC\n\nTB\n\nTC\n\nTC\n\nTB\nFIG. 7: The resulting meta-machine when the meta-machine\nin Fig. 2 decays under the population dynamics of Eq. (17).\n\na stepwise and irreversible succession of meta-machine\ndecompositions. Fig. 6 shows only three plateaus. In\nprinciple, however, there is one plateau for every metamachine that at some point is the largest one in the population. The diagram in Fig. 8 summarizes our results\nfrom a more systematic survey of spontaneously generated meta-machine hierarchies in simulations of soups\nwith 500 \u01eb-machines.\nWe now examine the effects of influx by studying the\npopulation-averaged \u01eb-machine complexity hC\u03bc (T )i and\nthe run-averaged interaction network complexity hC\u03bc (G)i\nas a function of t and \u03a6in , see Fig. 9.\nThe average \u01eb-machine complexity hC\u03bc (T )i increases\nrapidly initially before declining to a steady state. The\naverage interaction network complexity hC\u03bc (G)i is relatively high where the average structural complexity of the\n\u01eb-machines is low, and is maximized at \u03a6in \u2248 0.1. Higher\ninflux rates have a destructive effect on the populations'\ninteraction network due to the new individuals' low reproduction rate. hC\u03bc (T )i is, in contrast, maximized at a\nrelatively high influx rate (\u03a6in \u2248 0.75) at which hC\u03bc (G)i\nis relatively small. The maximum network complexity\nc\u03bc (G) of the population grows linearly at a positive rate\nC\nof approximately 7.6 * 10\u22124 bits per replication.\n\n\f6\n<C\u03bc(T)>\n4\n3\n2\n1\n0\n0\n\n10\n\n0\n\n10\n\n0\n\n-1\n\n20\n\n40\nt/N 60 80\n\n10\n10\n\n-2\n\n10\n\u03a6in\n\n-3\n\n(a)\n\n<C\u03bc(G)>\n4\n3\n2\n1\n0\n0\n\n-1\n\n20\n\n40\nt/N 60 80\n\n10\n10\n\n-2\n\n10\n\u03a6in\n\n-3\n\n(b)\nFIG. 9: (a) Population- and run-averaged \u01eb-machine complexity hC\u03bc (T )i and (b) run-averaged interaction network complexity hC\u03bc (G)i as a function of time t and influx rate \u03a6in for\na population of N = 100 objects. (Reprinted with permission\nfrom [1]).\nFIG. 8: Composition and decomposition hierarchy of metamachines. Dots denote self-replicating \u01eb-machines, solid lines\nTB\nTC transitions and dashed lines denote equivdenote TA \u2212\u2192\nT\n\nA\nTC transitions. The label of the source node\nalent TB \u2212\u2192\nand the transition label are interchanged in the latter transition type. This results in a redundant representation of the\ninteraction network, which is used to show how the metamachines are related. The interaction networks are shown in\na simplified way according to \u03a94 ; cf. Fig. 6.\n\nVIII.\n\nDISCUSSION\n\nWe presented a conceptual model of pre-biotic evolution: a soup consisting of objects that make new objects\n[1]. The objects are \u01eb-machines and they generate new\n\u01eb-machines by functional composition. The soup constitutes a constructive dynamical system since the population dynamics is not fixed and may itself evolve along\nwith the state space it operates on. Specifically, the dimension of the state space changes over time, which is\nreminiscent of the constructive population dynamics associated with punctuated equilibria [19].\nIn principle, this allows for open-ended evolution. The\nquantitative estimate quoted above for the linear growth\nof the interaction network complexity supports this in-\n\ntriguing possibility occurring in the open finitary process soup. In the case of no influx, though, the system reaches a steady state where the soup consists of\nonly one self-replicator. Growth and maintenance of organizational complexity requires that the system is dissipative; i.e., that there is a small, but steady inflow\nof random \u01eb-machines. Notably, in this case, the soup\nspontaneously evolves hierarchical organizations in the\npopulation-meta-machines that in turn are organized\nhierarchically.\nThese hierarchies are assembled from noncomplex,\ngeneral individual \u01eb-machines. In this way, the soup's\nemergent complexity derives largely from a network of\ninteractions, rather than from the unbounded increase\nin the structural complexity of individuals. It appears,\ntherefore, that higher-order complex organization not\nonly allows for simple local components but, in fact, requires them.\n\nAcknowledgments\n\nThis work was supported at the Santa Fe Institute\nunder the Networks Dynamics Program funded by the\n\n\f7\nIntel Corporation and under the Computation, Dynamics and Inference Program via SFI's core grants from\nthe National Science and MacArthur Foundations. Direct support was provided by NSF grants DMR-9820816\nand PHY-9910217 and DARPA Agreement F30602-002-0583. O.G. was partially funded by PACE (Pro-\n\ngrammable Artificial Cell Evolution), a European Integrated Project in the EU FP6-IST-FET Complex Systems Initiative, and by EMBIO (Emergent Organisation\nin Complex Biomolecular Systems), a European Project\nin the EU FP6-NEST Initiative.\n\n[1] J. P. Crutchfield and O. G\u00f6rnerup. Objects that make\nobjects: The population dynamics of structural complexity. J. Roy. Soc. Interface, 3:345\u2013349, 2006.\n[2] J. P. Crutchfield and K. Young. Inferring statistical complexity. Phys. Rev. Let., 63:105\u2013108, 1989.\n[3] J. P. Crutchfield. The calculi of emergence: Computation, dynamics, and induction. Physica D, 75:11 \u2013 54,\n1994.\n[4] J. P. Crutchfield and C. R. Shalizi. Thermodynamic\ndepth of causal states: Objective complexity via minimal representations. Physical Review E, 59(1):275\u2013283,\n1999.\n[5] J. G. Brookshear.\nTheory of computation: formal languages, automata, and complexity.\nBenjamin/Cummings, Redwood City, California, 1989.\n[6] E. Schr\u00f6dinger. What is Life? Mind and Matter. Cambridge Univ. Press, Cambridge, United Kingdom, 1967.\n[7] J. von Neumann. Theory of Self-Reproducing Automata.\nUniversity of Illinois Press, Urbana, 1966.\n[8] S. Rasmussen, C. Knudsen, P. Feldberg, and M. Hindsholm. The Coreworld: Emergence and evolution of cooperative structures in a computational chemistry. In\nEmergent Computation, pages 111\u2013134. North-Holland\nPublishing Co., 1990.\n[9] S. Rasmussen, C. Knudsen, and R. Feldberg. Dynamics\nof programmable matter. In Artificial Life II: Proceedings\nof an Interdisciplinary Workshop on the Synthesis and\nSimulation of Living Systems (Santa Fe Institute Studies\nin the Sciences of Complexity, Vol. 10). Addison-Wesley,\n1992.\n[10] T. S. Ray. An approach to the synthesis of life. In\nC. Langton, C. Taylor, J. D. Farmer, and S. Rasmussen,\neditors, Artificial Life II, volume XI of Santa Fe Institute\nStuides in the Sciences of Complexity, pages 371\u2013408,\n\nRedwood City, California, 1991. Addison-Wesley.\n[11] C. Adami and C. T. Brown. Evolutionary learning in\nthe 2D artificial life system 'Avida'. In Artificial Life 4,\npages 377\u2013381. MIT Press, 1994.\n[12] F. J. Varela, H. R. Maturana, and R. Uribe. Autopoiesis: The organization of living systems. BioSystems, 5(4):187\u2013196, 1974.\n[13] P. Schuster. The hypercycle: A principle of natural selforganization. Naturwissenschaften, 64:541\u2013565, 1977.\n[14] W. Fontana and L. W. Buss. The barrier of objects:\nFrom dynamical systems to bounded organizations'. In\nS. Casti and A. Karlqvist, editors, Boundaries and Barriers, pages 56\u2013116. Addison-Wesley, 1996.\n[15] J. D. Farmer, N. H. Packard, and A. S. Perelson. The\nimmune system, adaptation, and machine learning. Phys.\nD, 2(1-3):187\u2013204, 1986.\n[16] R. J. Bagley, J. D. Farmer, S. A. Kauffman, N. H.\nPackard, A. S. Perelson, and I. M. Stadnyk. Modeling adaptive biological systems. Biosystems, 23:113\u2013138,\n1989.\n[17] W. Fontana. Algorithmic chemistry. In C. Langton,\nC. Taylor, J. D. Farmer, and S. Rasmussen, editors, Artificial Life II, volume XI of Santa Fe Institute Stuides\nin the Sciences of Complexity, pages 159\u2013209, Redwood\nCity, California, 1991. Addison-Wesley.\n[18] J. P. Crutchfield and M. Mitchell. The evolution of\nemergent computation. Proc. Natl. Acad. Sci., 92:10742\u2013\n10746, 1995.\n[19] James P. Crutchfield. When evolution is revolution-\norigins of innovation.\nIn Evolutionary Dynamics-\nExploring the Interplay of Selection, Neutrality, Accident,\nand Function, Santa Fe Institute Series in the Sciences\nof Complexity, pages 101\u2013133. Oxford University Press,\n2001.\n\n\f"}