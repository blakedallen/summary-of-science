{"id": "http://arxiv.org/abs/0708.3477v2", "guidislink": true, "updated": "2007-11-14T12:01:15Z", "updated_parsed": [2007, 11, 14, 12, 1, 15, 2, 318, 0], "published": "2007-08-26T12:08:30Z", "published_parsed": [2007, 8, 26, 12, 8, 30, 6, 238, 0], "title": "The Church Synthesis Problem with Parameters", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0708.0304%2C0708.0879%2C0708.0395%2C0708.2412%2C0708.3547%2C0708.0396%2C0708.3422%2C0708.0690%2C0708.2151%2C0708.3355%2C0708.3875%2C0708.3381%2C0708.3827%2C0708.0190%2C0708.2973%2C0708.2719%2C0708.1089%2C0708.2415%2C0708.1923%2C0708.3393%2C0708.2366%2C0708.1982%2C0708.0649%2C0708.2122%2C0708.3377%2C0708.1855%2C0708.3991%2C0708.3407%2C0708.4079%2C0708.1222%2C0708.1598%2C0708.2070%2C0708.2976%2C0708.0320%2C0708.2488%2C0708.2435%2C0708.2966%2C0708.3434%2C0708.0650%2C0708.0861%2C0708.3802%2C0708.2532%2C0708.0327%2C0708.1908%2C0708.3618%2C0708.1526%2C0708.1175%2C0708.3175%2C0708.3638%2C0708.0006%2C0708.1065%2C0708.1434%2C0708.3392%2C0708.0428%2C0708.2854%2C0708.1706%2C0708.2534%2C0708.2751%2C0708.3869%2C0708.1471%2C0708.0769%2C0708.2810%2C0708.1273%2C0708.0828%2C0708.1821%2C0708.1178%2C0708.4145%2C0708.1363%2C0708.2935%2C0708.3067%2C0708.1194%2C0708.1192%2C0708.1774%2C0708.1703%2C0708.1726%2C0708.1016%2C0708.1547%2C0708.0416%2C0708.2663%2C0708.2003%2C0708.2636%2C0708.0494%2C0708.3477%2C0708.4261%2C0708.2678%2C0708.2090%2C0708.2812%2C0708.1978%2C0708.1676%2C0708.0940%2C0708.2644%2C0708.1388%2C0708.2476%2C0708.4319%2C0708.1475%2C0708.2999%2C0708.1242%2C0708.1080%2C0708.3450%2C0708.0103%2C0708.3251&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The Church Synthesis Problem with Parameters"}, "summary": "For a two-variable formula &psi;(X,Y) of Monadic Logic of Order (MLO) the\nChurch Synthesis Problem concerns the existence and construction of an operator\nY=F(X) such that &psi;(X,F(X)) is universally valid over Nat.\n  B\\\"{u}chi and Landweber proved that the Church synthesis problem is\ndecidable; moreover, they showed that if there is an operator F that solves the\nChurch Synthesis Problem, then it can also be solved by an operator defined by\na finite state automaton or equivalently by an MLO formula. We investigate a\nparameterized version of the Church synthesis problem. In this version &psi;\nmight contain as a parameter a unary predicate P. We show that the Church\nsynthesis problem for P is computable if and only if the monadic theory of\n<Nat,<,P> is decidable. We prove that the B\\\"{u}chi-Landweber theorem can be\nextended only to ultimately periodic parameters. However, the MLO-definability\npart of the B\\\"{u}chi-Landweber theorem holds for the parameterized version of\nthe Church synthesis problem.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0708.0304%2C0708.0879%2C0708.0395%2C0708.2412%2C0708.3547%2C0708.0396%2C0708.3422%2C0708.0690%2C0708.2151%2C0708.3355%2C0708.3875%2C0708.3381%2C0708.3827%2C0708.0190%2C0708.2973%2C0708.2719%2C0708.1089%2C0708.2415%2C0708.1923%2C0708.3393%2C0708.2366%2C0708.1982%2C0708.0649%2C0708.2122%2C0708.3377%2C0708.1855%2C0708.3991%2C0708.3407%2C0708.4079%2C0708.1222%2C0708.1598%2C0708.2070%2C0708.2976%2C0708.0320%2C0708.2488%2C0708.2435%2C0708.2966%2C0708.3434%2C0708.0650%2C0708.0861%2C0708.3802%2C0708.2532%2C0708.0327%2C0708.1908%2C0708.3618%2C0708.1526%2C0708.1175%2C0708.3175%2C0708.3638%2C0708.0006%2C0708.1065%2C0708.1434%2C0708.3392%2C0708.0428%2C0708.2854%2C0708.1706%2C0708.2534%2C0708.2751%2C0708.3869%2C0708.1471%2C0708.0769%2C0708.2810%2C0708.1273%2C0708.0828%2C0708.1821%2C0708.1178%2C0708.4145%2C0708.1363%2C0708.2935%2C0708.3067%2C0708.1194%2C0708.1192%2C0708.1774%2C0708.1703%2C0708.1726%2C0708.1016%2C0708.1547%2C0708.0416%2C0708.2663%2C0708.2003%2C0708.2636%2C0708.0494%2C0708.3477%2C0708.4261%2C0708.2678%2C0708.2090%2C0708.2812%2C0708.1978%2C0708.1676%2C0708.0940%2C0708.2644%2C0708.1388%2C0708.2476%2C0708.4319%2C0708.1475%2C0708.2999%2C0708.1242%2C0708.1080%2C0708.3450%2C0708.0103%2C0708.3251&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "For a two-variable formula &psi;(X,Y) of Monadic Logic of Order (MLO) the\nChurch Synthesis Problem concerns the existence and construction of an operator\nY=F(X) such that &psi;(X,F(X)) is universally valid over Nat.\n  B\\\"{u}chi and Landweber proved that the Church synthesis problem is\ndecidable; moreover, they showed that if there is an operator F that solves the\nChurch Synthesis Problem, then it can also be solved by an operator defined by\na finite state automaton or equivalently by an MLO formula. We investigate a\nparameterized version of the Church synthesis problem. In this version &psi;\nmight contain as a parameter a unary predicate P. We show that the Church\nsynthesis problem for P is computable if and only if the monadic theory of\n<Nat,<,P> is decidable. We prove that the B\\\"{u}chi-Landweber theorem can be\nextended only to ultimately periodic parameters. However, the MLO-definability\npart of the B\\\"{u}chi-Landweber theorem holds for the parameterized version of\nthe Church synthesis problem."}, "authors": ["Alexander Rabinovich"], "author_detail": {"name": "Alexander Rabinovich"}, "author": "Alexander Rabinovich", "links": [{"title": "doi", "href": "http://dx.doi.org/10.2168/LMCS-3(4:9)2007", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/0708.3477v2", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0708.3477v2", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.LO", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "F.4.1; F.4.3", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0708.3477v2", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0708.3477v2", "arxiv_comment": null, "journal_reference": "Logical Methods in Computer Science, Volume 3, Issue 4 (November\n  14, 2007) lmcs:1233", "doi": "10.2168/LMCS-3(4:9)2007", "fulltext": "Logical Methods in Computer Science\nVol. 3 (4:9) 2007, pp. 1\u201324\nwww.lmcs-online.org\n\nSubmitted\nPublished\n\nJan. , 2007\nNov. 14, 2007\n\nTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\nALEXANDER RABINOVICH\nSackler Faculty of Exact Sciences, Tel Aviv University, Israel 69978.\ne-mail address: rabinoa@post.tau.ac.il\nAbstract. For a two-variable formula \u03c8(X, Y ) of Monadic Logic of Order (MLO) the\nChurch Synthesis Problem concerns the existence and construction of an operator Y =\nF (X) such that \u03c8(X, F (X)) is universally valid over Nat .\nB\u00fcchi and Landweber proved that the Church synthesis problem is decidable; moreover,\nthey showed that if there is an operator F that solves the Church Synthesis Problem, then\nit can also be solved by an operator defined by a finite state automaton or equivalently\nby an MLO formula. We investigate a parameterized version of the Church synthesis\nproblem. In this version \u03c8 might contain as a parameter a unary predicate P . We show\nthat the Church synthesis problem for P is computable if and only if the monadic theory\nof hNat , <, P i is decidable. We prove that the B\u00fcchi-Landweber theorem can be extended\nonly to ultimately periodic parameters. However, the MLO-definability part of the B\u00fcchiLandweber theorem holds for the parameterized version of the Church synthesis problem.\n\n1. Introduction\nTwo fundamental results of classical automata theory are decidability of the monadic\nsecond-order logic of order (MLO) over \u03c9 = (Nat , <) and computability of the Church synthesis problem. These results have provided the underlying mathematical framework for the\ndevelopment of formalisms for the description of interactive systems and their desired properties, the algorithmic verification and the automatic synthesis of correct implementations\nfrom logical specifications, and advanced algorithmic techniques that are now embodied in\nindustrial tools for verification and validation.\nB\u00fcchi [Bu60] proved that the monadic theory of \u03c9 = hNat, <i is decidable. Even before\nthe decidability of the monadic theory of \u03c9 has been proved, it was shown that the expansions of \u03c9 by \"interesting\" functions have undecidable monadic theory. In particular, the\nmonadic theory of hNat, <, +i and the monadic theory of hNat, <, \u03bbx.2 \u00d7 xi are undecidable [Rob58, Trak61]. Therefore, most efforts to find decidable expansions of \u03c9 deal with\nexpansions of \u03c9 by monadic predicates.\nElgot and Rabin [ER66] found many interesting predicates P for which MLO over\nhNat, <, Pi is decidable. Among these predicates are the set of factorial numbers {n! : n \u2208\nNat}, the sets of k-th powers {nk : n \u2208 Nat} and the sets {kn : n \u2208 Nat} (for k \u2208 Nat ).\n1998 ACM Subject Classification: F.4.1;F.4.3.\nKey words and phrases: Synthesis Problem, Decidability, Monadic Logic.\n\nl\n\nLOGICAL METHODS\nIN COMPUTER SCIENCE\n\nc\nDOI:10.2168/LMCS-3 (4:9) 2007\n\nCC\n\nA. Rabinovich\nCreative Commons\n\n\f2\n\nA. RABINOVICH\n\nThe Elgot and Rabin method has been generalized and sharpened over the years and\ntheir results were extended to a variety of unary predicates (see e.g., [Ch69, Th75, Sem84,\nCT02]). In [Rab05, Rab07, RT06] we provided necessary and sufficient conditions for the decidability of monadic (second-order) theory of expansions of the linear order of the naturals\n\u03c9 by unary predicates.\nLet Spec be a specification language and Pr be an implementation language. The synthesis problem for these languages is stated as follows: find whether for a given specification\nS(I, O) \u2208SPEC there is a program P which implements it, i.e., \u2200I(S(I, P(I)).\nThe specification language for the Church Synthesis problem is the Monadic secondorder Logic of Order. An MLO formula \u03c6(X, Y ) specifies a binary relation on subsets of\nNat. Note that every subset P of Nat is associated with its characteristic \u03c9-string uP\n(where uP (i) = 1 if i \u2208 P and otherwise uP (i) = 0). Hence, \u03c6(X, Y ) can be considered as\na specification of a binary relation on \u03c9-strings.\nAs implementations, Church considers functions from the set {0, 1}\u03c9 of \u03c9-strings over\n{0, 1} to {0, 1}\u03c9 . Such functions are called operators. A machine that computes an operator\nat every moment t \u2208 Nat reads an input symbol X(t) \u2208 {0, 1} and produces an output\nsymbol Y (t) \u2208 {0, 1}. Hence, the output Y (t) produced at t depends only on inputs\nsymbols X(0), X(1), . . . , X(t). Such operators are called causal operators (C-operators); if\nthe output Y (t) produced at t depends only on inputs symbols X(0), X(1), . . . , X(t \u2212 1),\nthe corresponding operator is called strongly causal (SC-operator). The sets of recursive\ncausal and strongly causal operators are defined naturally; a C-or a SC-operator is a finite\nstate operator if it is computable by a finite state automaton (for precise definitions, see\nSubsection 4.4).\nThe following problem is known as the Church Synthesis problem.\nChurch Synthesis problem\nInput: an MLO formula \u03c8(X, Y ).\nTask: Check whether there is a C-operator F such that\nNat |= \u2200X\u03c8(X, F (X)) and if so, construct this operator.\nThe Church Synthesis problem is much more difficult than the decidability problem for\nMLO over \u03c9. B\u00fcchi and Landweber [BL69] proved that the Church synthesis problem is\ncomputable. Their main theorem is stated as follows:\nTheorem 1.1. For every MLO formula \u03c8(X, Y ) either there is a finite state C-operator F\nsuch that Nat |= \u2200X\u03c8(X, F (X)) or there is a finite state SC-operator G such that Nat |=\n\u2200Y \u00ac\u03c8(G(Y ), Y ). Moreover, it is decidable which of these cases holds and a corresponding\noperator is computable from \u03c8.\nIn this paper we consider natural generalizations of the Church Synthesis Problem over\nexpansions of \u03c9 by monadic predicates, i.e., over the structures hNat, <, Pi.\nFor example, let Fac = {n! : n \u2208 Nat} be the set of factorial numbers, and let\n\u03c6(X, Y, Fac) be a formula which specifies that t \u2208 Y iff t \u2208 Fac and (t\u2032 \u2208 X) \u2194\n(t\u2032 \u2208 Fac) for all t\u2032 \u2264 t. It is easy to observe that there is no finite state C-operator\nF such that \u2200X\u03c6(X, F (X), Fac). However, there is a recursive C-operator H such that\n\u2200X\u03c6(X, H(X), Fac). It is also easy to construct a finite state C-operator G(X, Z) such\nthat \u2200X\u03c6(X, G(X, Fac), Fac). It was surprising for us to discover that it is decidable\nwhether for a formula \u03c8(X, Y, Fac) there is a C-operator F such that \u2200X\u03c6(X, F (X), Fac)\nand if such an operator exists, then it is recursive and computable from \u03c8.\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n3\n\nHere is the summary of our results. We investigate a parameterized version of the\nChurch synthesis problem. In this version \u03c8 might contain as a parameter a unary predicate\nP . Below five synthesis problems with a parameter P \u2286 Nat are stated. We use capital\nitalic letters for unary predicate names and set variables and the corresponding bold letters\nfor their interpretation.\nSynthesis Problems for P \u2286 Nat\nInput: an MLO formula \u03c8(X, Y, P ).\nProblem 1: Check whether there is a C-operator Y = F (X, P ) such that\nNat |= \u2200X\u03c8(X, F (X, P), P) and if there is such a recursive operator\n- construct it.\nProblem 2: Check whether there is a recursive C-operator Y = F (X, P ) such\nthat Nat |= \u2200X\u03c8(X, F (X, P), P) and if so - construct this operator.\nProblem 3: Check whether there is a recursive C-operator Y = F (X) such\nthat Nat |= \u2200X\u03c8(X, F (X), P) and if so - construct this operator.\nThe next two problems are obtained from problems 2 an 3 when \"recursive\" is replaced\nby \"finite state\".\nSynthesis Problems for P \u2286 Nat\nInput: an MLO formula \u03c8(X, Y, P ).\nProblem 4: Check whether there is a finite state C-operator Y = F (X, P ) such\nthat Nat |= \u2200X\u03c8(X, F (X, P), P) and if so - construct this operator.\nProblem 5: Check whether there is a finite state C-operator Y = F (X) such\nthat Nat |= \u2200X\u03c8(X, F (X), P) and if so - construct this operator.\nWe show\nTheorem 1.2. Let P be a subset of Nat. The following conditions are equivalent:\n(1) Problem 1 for P is computable.\n(2) Problem 2 for P is computable.\n(3) Problem 3 for P is computable.\n(4) The monadic theory of hNat, <, Pi is decidable.\n(5) For every MLO formula \u03c8(X, Y, P ) either there is a recursive C-operator F such that\nNat |= \u2200X\u03c8(X, F (X), P) or there is a recursive SC-operator G such that Nat |=\n\u2200Y \u00ac\u03c8(G(Y ), Y, P). Moreover, it is decidable which of these cases holds and the (description of the) corresponding operator is computable from \u03c8.\nThe more difficult part of this theorem is the implication (4)\u21d2(5).\nThe trivial examples of predicates with decidable monadic theory are ultimately periodic predicates. Recall that a predicate P is ultimately periodic if there are 0 < p, d \u2208 Nat\nsuch that (n \u2208 P \u2194 n + p \u2208 P) for all n > d. Ultimately periodic predicates are MLOdefinable. Hence, for these predicates computability of Problems 1-5 can be derived from\nTheorem 1.1.\nWe prove that the B\u00fcchi-Landweber theorem can be extended only to ultimately periodic parameters.\nTheorem 1.3. Let P be a subset of Nat. The following conditions are equivalent and imply\ncomputability of Problem 4:\n\n\f4\n\nA. RABINOVICH\n\n(1) P is ultimately periodic.\n(2) For every MLO formula \u03c8(X, Y, P ) either there is a finite state C-operator F such\nthat Nat |= \u2200X\u03c8(X, F (X, P), P) or there is a finite state SC-operator G such that\nNat |= \u2200Y \u00ac\u03c8(G(Y, P), Y, P).\nIn Problems 1-5 we restrict the computational complexity of the C-operators (implementations) which meet specifications. Another approach is to restrict their descriptive\ncomplexity. The finite state operators are MLO-definable in \u03c9 = hNat, <i. An operator F\nis defined by a formula \u03c8(X, Y, P ) in an expansion M = hNat, <, Pi of \u03c9, if for all \u03c9-strings\nX and Y:\nY = F (X) iff \u03c9 |= \u03c8(X, Y, P)\nAn operator F is MLO-definable in M = hNat, <, Pi, if it is defined by an M LO formula\nin M\nOur main theorem which is stated in the next section implies\nTheorem 1.4. For every MLO formula \u03c8(X, Y, P ) and every expansion M = hNat, <, Pi of\n\u03c9 either there is an MLO-definable (in M ) C-operator F such that M |= \u2200X\u03c8(X, F (X), P )\nor there is an MLO-definable (in M ) SC-operator G such that M |= \u2200Y \u00ac\u03c8(G(Y ), Y, P ).\nMoreover, formulas which define these operators are computable from \u03c8\nThe paper is organized as follows. In the next section games and their connections to\nthe Church synthesis problem are discussed, the B\u00fcchi and Landweber theorem is rephrased\nin the game theoretical language, and our main definability result - Theorem 2.3 - which\nimplies Theorem 1.4 is stated.\nIn Section 3, Theorem 1.2 is derived as a consequence of Theorem 2.3. In Section 4,\nstandard definitions and facts about automata and logic are recalled. In Section 5, finite\nstate synthesis problems with parameters are considered and Theorem 1.3 is proved.\nIn Section 6, parity games on graphs and their connection to the synthesis problems\nare discussed and definability results needed in the proof of Theorem 2.3 are proved. The\nproof of Theorem 2.3 is given in Section 7.\nFinally, in Section 8, some open problems are stated and further results are discussed.\n2. Game Version of the Church Problem and Main Definability Result\nLet W be a set of pairs of \u03c9 strings over {0, 1}. A game G(W) is defined as follows.\n(1) The game is played by two players, called Player I (or Mr. X) and Player II (or Mr.\nY ).\n(2) A play of the game has \u03c9 rounds.\n(3) At round n: first, Player I chooses x(n) \u2208 {0, 1}; then, Player II chooses y(n) \u2208 {0, 1}.\n(4) By the end of the play the \u03c9 strings Y = y(0)y(1) . . . and X = x(0)x(1) . . . over {0, 1}\nhave been constructed.\nWinning conditions: Player II wins the play if the pair of \u03c9-strings hX, Yi is in W;\notherwise, Player I wins the play.\nWhat we want to know is: Does either one of the players have a winning strategy in\nG(W). That is, can Player I choose his moves so that in whatever way Player II responds,\nwe have hX, Yi 6\u2208 W? Or can Player II respond to Player I's moves in a way that ensures\nthe opposite?\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n5\n\nSince at round n, Player I has access only to Y \u2229 [0, n) and Player II has access only\nto X \u2229 [0, n], a strategy of Player I (respectively, of Player II) is a strongly causal (respectively, causal) operator. So, a winning strategy for Player II is a causal operator\nF : {0, 1}\u03c9 \u2192{0, 1}\u03c9 such that hX, F (X)i is in W for every X \u2208 {0, 1}\u03c9 , and a winning\nstrategy for Player I is a strongly causal operator G : {0, 1}\u03c9 \u2192{0, 1}\u03c9 such that hG(Y), Yi\nis not in W for every Y \u2208 {0, 1}\u03c9 .\nThere is a natural topology on the set of \u03c9-strings (see e.g., [PP04]). According to this\ntopology, subsets of \u03c9-strings can be classified as open, closed, Borel and so forth. The\nfollowing theorem of Martin is fundamental.\nTheorem 2.1 (Determinacy of Borel Games). For every Borel set W, one of the players\nhas a winning strategy in G(W).\nIt was McNaughton (see [Mc66]) who first observed that the Church problem can be\nequivalently phrased in game-theoretic language. Algorithmic questions deal with finitely\ndescribed objects. Hence, McNaughton considered games G(W) only for definable sets W.\nLet M = hNat, <, Pi be a structure. A set W \u2286 {0, 1}\u03c9 \u00d7 {0, 1}\u03c9 is defined by an MLO\nformula \u03c8(X, Y, P ) in M if W = {hX, Yi : M |= \u03c8(X, Y, P )}. A set is MLO-definable iff it\nis defined by an MLO formula. Similarly, an operator F : {0, 1}\u03c9 \u2192{0, 1}\u03c9 is definable in M\nif its graph {hX, Yi : Y = F (X)} is definable; a strategy is definable iff the corresponding\ncausal operator is definable.\nLet M = hNat, <, P1 , . . . , Pn i be an expansion of \u03c9 = hNat, <i by unary predicates\nand let \u03c8(X, Y, P1 , . . . , Pn ) be an MLO formula. The McNaughton game G\u03c8M is the game\nG(W), where W is the set definable by \u03c8 in M . Hence, the winning condition of G\u03c8M can\nbe stated as\nWinning conditions for G\u03c8M : Player II wins a play if M |= \u03c8(X, Y, P1 , . . . , Pn ); otherwise, Player I wins the play.\nThis leads to\nGame version of the Church problem: Let M = hNat , <, P1 , . . . , Pn i be an expansion of \u03c9 = hNat, <i by unary predicates. Given a formula \u03c8(X, Y, P1 , . . . , Pn ) decide\nwhether Player II has a winning strategy in G\u03c8M .\nTheorem 1.1 states the computability of the Church problem in the structure \u03c9 =\nhNat, <i (no additional unary predicates). Even more importantly, B\u00fcchi and Landweber show that in the case of \u03c9 we can restrict ourselves to definable strategies, i.e., to\ncausal (or strongly causal) operators computable by finite state automata or equivalently\nMLO-definable in \u03c9. The B\u00fcchi-Landweber theorem can be stated in the game theoretical\nlanguage as follows:\nTheorem 2.1 (B\u00fcchi-Landweber, 1969). Let \u03c8(X, Y ) be an MLO formula., Then:\nDeterminacy: One of the players has a winning strategy in the game G\u03c8\u03c9 .\nDecidability: It is decidable which of the players has a winning strategy.\nDefinable strategy: The player who has a winning strategy also has an MLO-definable\nwinning strategy.\nSynthesis algorithm: We can compute a formula \u03c6(X, Y ) that defines (in (\u03c9, <)) a\nwinning strategy for the winning player in G\u03c8\u03c9 .\nThe determinacy part of the B\u00fcchi-Landweber theorem follows from the determinacy of\nBorel games. More generally, it is well known that for each MLO formula \u03c8(X, Y, Z1 , . . . , Zn )\n\n\f6\n\nA. RABINOVICH\n\nand P1 , . . . , Pn \u2286 Nat the set W = {hX, Yi : hNat, <i |= \u03c8(X, Y, P1 , . . . , Pn )} is a Borel\nset (it is even inside the boolean closure of the second level of the Borel hierarchy, see\ne.g., [PP04]). Hence, by the determinacy of Borel games, we obtain determinacy of the\nMcNaughton games. In other words, we have the following corollary:\nCorollary 2.2 (Determinacy). Let M = hNat, <, P1 , . . . , Pn i be an expansion of \u03c9 by\nunary predicates. Then, for every MLO formula \u03c8(X, Y, P1 , . . . , Pn )\n(1) One of the players has a winning strategy in G\u03c8M .\n(2) Equivalently, either there is a C-operator F such that M |= \u2200X\u03c8(X, F (X)), or there is\na SC-operator G such that M |= \u2200Y \u00ac\u03c8(G(Y ), Y ).\nIn order to simplify notations, from now on, we will state our results only for the\nexpansions of \u03c9 by one unary predicate. The generalization to the expansions by any\nnumber of unary predicates is straightforward.\nNow, we are ready to state our main result which generalizes the definability and\nsynthesis parts of the B\u00fcchi-Landweber theorem in a uniform way to the expansions of\nhNat, <i by unary predicates.\nTheorem 2.3 (Main). There is an algorithm that given a formula \u03c6(X, Y, P ) constructs a\nsentence WIN\u03c6II (P ) and formulas St\u03c6I (X, Y, P ), St\u03c6II (X, Y, P ) such that for every structure\nM = hNat, <, Pi Player II wins the games G\u03c6M iff M |= WIN\u03c6II . Moreover, if Player II\nwins G\u03c6M , then St\u03c6II (X, Y, P ) defines his winning strategy; otherwise, St\u03c6I defines a winning\nstrategy of Player I.\nTheorem 1.4 is reformulated in the game language as follows.\nTheorem 2.4 (Game version of Theorem 1.4). For every MLO formula \u03c8(X, Y, P ) and\nevery expansion M = hNat , <, Pi of \u03c9:\nDeterminacy: One of the players has a winning strategy in the game G\u03c8M .\nDefinable strategy: The player who has a winning strategy also has an MLO-definable\n(in M ) winning strategy.\nSynthesis algorithm: We can compute a formula that defines (in M ) a winning strategy\nfor the winning player in G\u03c8M .\nThe determinacy part of Theorem 2.4 follows from Corollary 2.2. Its definability and\nsynthesis parts are immediate consequences of Theorem 2.3. In the next section, Theorem\n1.2 is derived as another consequence of Theorem 2.3 and of Corollary 2.2.\nThe proof of Theorem 2.3 will be given in Sect. 7. Section 4 provides an additional\nbackground on logic and automata, and Section 6 prepares definability results needed in\nthe proof of Theorem 2.3.\n3. Proof of Theorem 1.2\nIn this section we prove Theorem 1.2. Its more difficult part is the implication (4)\u21d2(5);\nthe proof of this implication is easily obtained from Theorem 2.3. The proof of the other\nequivalences of Theorem 1.2 uses only determinacy and some simple facts.\nWe start with the following simple Lemma:\nLemma 3.1. Assume that the monadic theory of M = hNat, <, P1 , . . . , Pn i is decidable\n(1) Every set Q \u2286 Nat definable in M is recursive.\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n7\n\n(2) Every C-operator F definable in M is recursive.\n(3) There is an algorithm that computes a program for Q (respectively, for F ) from a\nformula which defines Q (respectively, F ).\nProof. (1) Assume that Q is defined in M by a formula \u03c8(X). Each j \u2208 Nat is defined\nby an MLO formula \u03c6j (t). Hence, one can check whether j \u2208 Q, by testing whether the\nsentence \u2203X\u2203t\u03c6j (t) \u2227 \u03c8(X) \u2227 t \u2208 X holds in M .\n(2) Assume that a C-operator F is defined in M by a formula \u03c8(X, Y ). We have to\nshow that there is an algorithm which computes the n-th letter of F (X) from the first n\nletters of X. Let a = a0 . . . an \u2208 {0, 1}\u2217 . Define \u03b6ia (t, X) as \u03c6i (t) \u2227 t \u2208 X if ai is 1, and\nas \u03c6i (t) \u2227 t 6\u2208 X otherwise,\nwhere\n\u0001 \u03c6i (t) is a formula which defines a number i. Note that\nV\nM |= \u2203t0 \u2203t1 . . . \u2203tn ni=0 \u03b6ia (ti , X) iff the first n + 1 letters of X are a0 . . . an .\nNow, if a0 . . . an \u2208 {0, 1}\u2217 are the first n + 1 letters of X, then the n + 1-th letter of\nF (X) is 1 iff\nn\n^\n\u0001\n\u03b6ia (ti , X)\n\u2203X\u2203Y \u2203t0 \u2203t1 . . . \u2203tn \u03c8(X, Y ) \u2227 \u03c6n (tn ) \u2227 tn \u2208 Y \u2227\ni=0\n\nholds in M .\n(3) follows from the proofs of (1) and (2).\nLemma 3.2 (Implication (4)\u21d2(5) of Theorem 1.2). Assume that the monadic theory of\nM = hNat, <, Pi is decidable. Then for every MLO formula \u03c6(X, Y, P ) either there is\na recursive C-operator F such that Nat |= \u2200X\u03c6(X, F (X), P) or there is a recursive SCoperator G such that Nat |= \u2200Y \u00ac\u03c6(G(Y ), Y, P). Moreover, it is decidable which of these\ncases holds and the (description of the) corresponding operator is computable from \u03c6.\nProof. For a formula \u03c6, construct WIN\u03c6II (P ) and formulas St\u03c6I (X, Y, P ), St\u03c6II (X, Y, P ), as\nin Theorem 2.3.\nBy the assumption that the monadic theory of M is decidable, we can check whether\nWIN\u03c6II (P ) holds in M .\nIf WIN\u03c6II (P ) holds in M then, by Theorem 2.3, St\u03c6II (X, Y, P ) defines a winning strategy\nF for Player II. Hence, F is C-operator and Nat |= \u2200X\u03c6(X, F (X), P). By Lemma 3.1, F\nis recursive.\nIf WIN\u03c6II (P ) does not hold in M , then by Theorem 2.3, St\u03c6I (X, Y, P ) defines a winning\nstrategy G for Player I. Hence, G is SC-operator and Nat |= \u2200Y \u00ac\u03c6(G(Y ), Y, P). Moreover,\nby Lemma 3.1, G is recursive.\nLemma 3.3. If one of the Problems 1-5 is computable for P, then the monadic theory of\nhNat, <, Pi is decidable.\nProof. Let \u03b2(P ) be a sentence in MLO and let \u03c8\u03b2 (X, Y, P ) be defined as\n\u0001\n\u0001\n\u03b2\u2192(Y = {0}) \u2227 \u00ac\u03b2\u2192(X = \u2205) .\nObserve that Nat |= \u03b2(P) iff there is a C-operator F such that:\n\nNat |= \u2200X\u03c8\u03b2 (X, F (X, P), P) iff Nat |= \u2200X\u03c8\u03b2 (X, H(X, P), P)\nwhere H is a constant C-operator defined as H = \u03bbhX, P i.10\u03c9 .\nHence, if one of the Problems 1-5 is computable for P, then we can decide whether\nNat |= \u03b2(P).\n\n\f8\n\nA. RABINOVICH\n\nThe proof of Lemma 3.3 also implies that if the following Problem 1\u2032 is decidable for\nP, then the monadic theory of hNat , <, Pi is decidable.\nDecision Problem 1\u2032 for P \u2286 Nat\nInput: an MLO formulas \u03c8(X, Y, P ).\nQuestion: Check whether there is a C-operator Y = F (X, P ) such that\nNat |= \u2200X\u03c8(X, F (X, P), P).\nProblem 1\u2032 is actually Problem 1 without construction part.\nFinally, we have\nLemma 3.4. The implications (5)\u21d2(1), (5)\u21d2(2) and (5)\u21d2(3) hold.\nProof. Let \u03c8(X, Y, P ) be a formula. By (5) either there is a recursive C-operator F such\nthat Nat |= \u2200X\u03c8(X, F (X), P) or there is a recursive SC-operator G such that Nat |=\n\u2200Y \u00ac\u03c8(G(Y ), Y, P). Moreover, it is decidable which of these cases holds and the corresponding operator is computable from \u03c8.\nIn the first case, the answer to Problems 1-3 is positive and F is a corresponding\noperator.\nIn the second case, the answer to Problems 1-3 is negative.\nIndeed, for the sake of contradiction, assume that there is a C-operator (even nonrecursive) F such that Nat |= \u2200X\u03c8(X, F (X, P), P). Observe that F is a C-operator and\nG is a SC-operator. Hence, H = \u03bbX.G(F (X, P)) is a SC-operator. Every SC-operator\nhas a fixed point. Let X0 be a fixed point of H and let Y0 = F (X0 , P). Then we have:\nX0 = G(Y0 ). Therefore, we obtain\nNat |= \u03c8(X0 , Y0 , P)\nNat |= \u00ac\u03c8(X0 , Y0 , P)\n\nbecause Nat |= \u2200X\u03c8(X, F (X, P), P) ,\n\nand\n\nbecause Nat |= \u2200Y \u00ac\u03c8(G(Y ), Y, P) .\n\nContradiction.\n4. Background on Logic and Automata\n4.1. Notations and Terminology. We use k, l, m, n, i for natural numbers; Nat for\nthe set of natural numbers and capital bold letters P, S, R for subsets of Nat. We identify\nsubsets of a set A and the corresponding unary (monadic) predicates on A.\nThe set of all (respectively, non-empty) finite strings over an alphabet \u03a3 is denoted by\n\u03a3\u2217 (respectively, by \u03a3+ ). The set of \u03c9-strings over \u03a3 is denoted by \u03a3\u03c9 .\nLet a0 . . . ak . . . and b0 . . . bk . . . be \u03c9-strings. We say that these \u03c9-strings coincide on\nan interval [i, j] if ak = bk for i \u2264 k \u2264 j. A function F from \u03a3\u03c91 to \u03a3\u03c92 will be called\nan operator of type \u03a31 \u2192\u03a32 . An operator F is called causal (respectively, strongly causal)\noperator, if F (X) and F (Y ) coincide on an interval [0, t], whenever X and Y coincide on\n[0, t] (respectively, on [0, t)). We will refer to causal (respectively, strongly causal) operators\nas C-operators (respectively, SC-operators).\nLet \u03a31 and \u03a32 be finite alphabet and let F : \u03a3\u03c91 \u2192\u03a3\u03c92 be a C-operator. Note that there\nis a unique function hF : \u03a3\u22171 \u2192\u03a32 such that F (a1 . . . an ) = bn if for some (equivalently for all)\n\u03c9-string y: bn is the n-th letter of F (a1 . . . an y). F is said to be recursive if hF is recursive.\nEvery SC-operator F of type \u03a3\u2192\u03a3 has a unique fixed point, i.e., there is a unique\nX \u2208 \u03a3\u03c9 such that X = F (X).\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n9\n\nLet G : \u03a3\u03c9 \u2192\u2206\u03c9 be an operator. In the case \u03a3 is the Cartesian product \u03a31 \u00d7 \u03a32 we will\nidentify G with the corresponding operator F : \u03a3\u03c91 \u00d7\u03a3\u03c92 \u2192\u2206\u03c9 . An operator F : \u03a3\u03c91 \u00d7\u03a3\u03c92 \u2192\u2206\u03c9\nis said to be SC-operator (C-operator) if G is SC-operator (respectively, C-operator).\nThere exists a one-one correspondence between the set of all \u03c9-strings over the alphabet\n{0, 1}n and the set of all n-tuples hP1 , . . . , Pn i of unary predicates over the set of natural\nnumbers. With an n-tuple hP1 , . . . , Pn i of unary predicates over Nat, we associate the\n\u03c9-string a0 a1 . . . ak . . . over alphabet {0, 1}n defined by ak =def hbk1 , . . . bkn i where bki is 1 if\nPi (k) holds and bki is 0 otherwise. Let Q = {q1 , . . . , qm } be a finite set of state. There is\na natural one-one correspondence between the subsets of Q \u00d7 Nat and the set of m-tuples\nof unary predicates over Nat: with U \u2286 Q \u00d7 Nat we associate the m-tuple hP1 , . . . , Pm i\ndefined as i \u2208 Pj iff U (qj , i) (for i \u2208 Nat and j \u2264 m).\nSimilarly, there is a one-one correspondence between the set of all strings of length m\nover the alphabet {0, 1}n and the set of all n-tuples hP1 , . . . , Pn i of unary predicates over\nthe set {0, . . . , m \u2212 1}.\nA linearly ordered set will be called a chain. A chain with n monadic predicates over its\ndomain will be called an n-labelled chain; whenever n is clear from the context, n-labelled\nchains will be called labelled chains.\nWe will sometimes identify an n-labelled chain M = hNat, <, P1 , . . . , Pn i with the \u03c9string over the alphabet {0, 1}n which corresponds to the n-tuple hP1 , . . . , Pn i; this \u03c9-string\nwill be called the characteristic \u03c9-string (or \u03c9-word) of M . Similarly, we will identify finite\nn-labelled chains with corresponding strings over {0, 1}n .\n4.2. Monadic Second-Order Logic and Monadic Logic of Order. Let \u03c3 be a relational signature. Atomic formulas of the monadic second-order logic over \u03c3 are R(t1 , ..., tn ),\nt1 = t2 , and t1 \u2208 X where t1 , . . . , tn are individual variables, R \u2208 \u03c3 is an n-are relational\nsymbol, and X is a set variable. Formulas are obtained from atomic formulas by conjunction, negation, and quantification \u2203t and \u2203X for t an individual and X a set variable. The\nsatisfaction relation M, \u03c41 , . . . \u03c4k ; S1 , . . . , Sm |= \u03c6(t1 , . . . , tk ; X1 , . . . , Xm ) is defined as usual\nwith the understanding that set variables range over subsets of M .\nWe use standard abbreviations, e.g., we write X \u2286 X \u2032 for \u2200t. X(t)\u2192X \u2032 (t); we write\nX = X \u2032 for \u2200t. X(t) \u2194 X \u2032 (t); symbols \"\u2203\u22641 \" and \"\u2203!\" stands for \"there is at most one\"\nand \"there is a unique\".\nIf a signature \u03c3 contains one binary predicate < which is interpreted as a linear order,\nand all other predicates are unary, the monadic second-order logic for this signature is called\nMonadic Logic of Order (MLO). The formulas of MLO are interpreted over labelled chains.\nThe monadic theory of a labelled chain M is the set of all MLO sentences which hold\nin M .\nWe will deal with the expansions of \u03c9 by monadic predicates, i.e., with the structures\nof the form M = hNat, <, P1 , . . . , Pn i. We say that a chain M = hNat , <, P1 , . . . , Pn i is\nrecursive if all Pi are recursive subsets of Nat.\nAn \u03c9-language L is said to be defined by an MLO formula \u03c8(X1 , . . . , Xn ) if the following\ncondition holds: an \u03c9 string is in L iff the corresponding n-tuple of unary predicates satisfies\n\u03c8.\n\n\f10\n\nA. RABINOVICH\n\n4.3. The First-Order Version of the Monadic Second-Order Logic. Sometimes it\nwill be convenient for us to consider the first-order version of the monadic second order\nlogic.\nLet \u03c3 be a relational signature and M be a structure for \u03c3.\nLet \u03c3\u0304 = \u03c3 \u222a {Sing, \u2286} where Sing is a new unary relational symbol and \u2286 a new binary\nrelational symbol. Let M\u0304 be the structure for \u03c3\u0304 defined as follows: The domain of M\u0304 is\nthe set of all subsets of the domain of M . Sing(A) holds in M\u0304 if A is one element subset;\nA \u2286 B holds if A is a subset of B; for k-ary relational symbol R \u2208 \u03c3:\nR(A1 , . . . Ak ) holds in M\u0304 iff\nA1 = {a1 }, . . . , Ak = {ak } and R(a1 , . . . ak ) holds in M\nThe following lemma is well-known and is easily proved by the structural induction.\nLemma 4.1 (Equivalence of two Versions of Monadic Logic). The two versions of Monadic\nlogic are expressive equivalent, that is\n(1) Let \u03c8(X1 , . . . , Xk ) be a formula of the monadic second-order logic for a signature \u03c3.\nThere is a first-order formula \u03c6(X1 , . . . , Xk ) in the signature \u03c3\u0304 such that for every\nstructure M for the signature \u03c3 and for subsets A1 , . . . , Ak of the domain of M\nM, A1 , . . . , Ak |= \u03c8(X1 , . . . , Xk ) iff M\u0304 , A1 , . . . , Ak |= \u03c6(X1 , . . . , Xk ).\nMoreover there is an algorithm that computes \u03c6 from \u03c8.\n(2) Let \u03c6(X1 , . . . , Xk ) be a first-order formula in the signature \u03c3\u0304. There is a formula in the\nmonadic second-order logic for the signature \u03c3 such that for every structure M for the\nsignature \u03c3 and for subsets A1 , . . . , Ak of the domain of M\nM, A1 , . . . , Ak |= \u03c8(X1 , . . . , Xk ) iff M\u0304 , A1 , . . . , Ak |= \u03c6(X1 , . . . , Xk ).\nMoreover there is an algorithm that computes \u03c8 from \u03c6.\n4.4. Automata. A deterministic transition system D is a tuple hQ, \u03a3, \u03b4, qinit i, consisting\nof a set Q of states, an alphabet \u03a3, a transition function \u03b4 : Q \u00d7 \u03a3\u2192Q and initial state\nqinit \u2208 Q. The transition function is extended as usual to a function from Q \u00d7 \u03a3\u2217 to Q\nwhich will be also denoted by \u03b4. The function \u03b4init :\u03a3\u2217 \u2192Q is defined as \u03b4init (\u03c0) = \u03b4(qinit , \u03c0).\nA transition systems is finite if Q and \u03a3 are finite.\nA finite deterministic automaton A is a tuple hQ, \u03a3, \u03b4, qinit , F i, where hQ, \u03a3, \u03b4, qinit i is\na finite deterministic transition system and F is a subset of Q. A string \u03c0 \u2208 \u03a3\u2217 is accepted\nby A if \u03b4init (\u03c0) \u2208 F . The language accepted (or defined) by A is the set of string accepted\nby A.\nA Mealey automaton is a tuple hQ, \u03a3, \u03b4, qinit , \u2206, outi, where hQ, \u03a3, \u03b4, qinit i is a deterministic transition system, \u2206 is an alphabet and out : Q\u2192\u2206 is an output function. With\na Mealey automaton A = hQ, \u03a3, \u03b4, qinit , \u2206, outi we associate a function hA : \u03a3\u2217 \u2192\u2206 and an\noperator FA : \u03a3\u03c9 \u2192\u2206\u03c9 defined as follows:\nhA (a0 . . . ai\u22121 ) = out(\u03b4init (a0 . . . ai\u22121 ))\nFA (a0 . . . ai . . . ) = b0 . . . bi . . . iff bi = hA (a0 . . . ai\u22121 )\nIt is easy to see that an operator is strongly causal (SC-operator) iff it is definable by a\nMealey automaton. We say that a SC-operator F : \u03a3\u03c9 \u2192\u2206\u03c9 is finite state iff it is definable\nby a finite state Mealey automaton.\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n11\n\nA finite Mealey automaton A = hQ, \u03a3, \u2192, \u03b4, qinit , \u2206, col i, where the output alphabet \u2206\nis a (finite) subset of Nat, is called a (deterministic) parity automaton; the output function\ncol is usually refered to as coloring function.\nWith every \u03c9-string a0 a1 * * * ai * * * \u2208 \u03a3\u03c9 we associate the \u03c9-sequence of successive states\n\u03b4init (a0 )\u03b4init (a0 a1 ) * * * \u03b4init (a0 * * * ai ) * * * and the set Inf of all q \u2208 Q that appear infinitely\nmany times in this sequence. An \u03c9-string is accepted by A if the minimal element of the\nset {col (q) : q \u2208 Inf} is even. The \u03c9-language accepted (or defined) by A is the set of all\n\u03c9-strings accepted by A.\nSometimes the alphabet \u03a3 of A will be the Cartesian product \u03a31 \u00d7 \u03a32 \u00d7 \u03a33 of other\nalphabets. In this case we say that A defines a relation RA \u2286 \u03a3\u03c91 \u00d7 \u03a3\u03c92 \u00d7 \u03a3\u03c93 ; a triplet\nha, b, ci of \u03c9-strings is in RA iff the \u03c9 string (a0 , b0 , c0 )(a1 , b1 , c1 ) . . . (ai , bi , ci ) . . . is accepted\nby A.\nHere is the classical theorem due to B\u00fcchi, Elgot and Trakhtenbrot.\nTheorem 4.1. (1) A language is accepted by a finite deterministic automaton iff it is definable by an MLO formula.\n(2) An \u03c9-language is accepted by a deterministic parity automaton iff it is definable by an\nMLO formula.\n(3) Moreover, there is an algorithm which for every formula \u03c6(X1 , . . . , Xm ) computes an\nequivalent deterministic automaton A i.e., the language definable by \u03c6 is accepted by\nA. There is an algorithm which for every deterministic automaton A computes an\nequivalent MLO formula. Similarly, there are translation algorithms between formulas\nand deterministic parity automata.\nA Moore automaton is a tuple hQ, \u03a3, \u03b4, qinit , \u2206, outi, where hQ, \u03a3, \u03b4, qinit i is a deterministic transition system, \u2206 is an alphabet and out : Q \u00d7 \u03a3\u2192\u2206 is an output function.\nWith a Moore automaton A = hQ, \u03a3, \u03b4, qinit , \u2206, out i we associate a function hA :\u03a3+ \u2192\u2206\nand an operator FA : \u03a3\u03c9 \u2192\u2206\u03c9 defined as follows:\nhA (a0 . . . , ai ) = out(\u03b4init (a0 . . . ai\u22121 ), ai )\nFA (a0 . . . ai . . . ) = b0 . . . bi . . . iff bi = hA (a0 . . . , ai )\nIt is easy to see that an operator is causal (C-operator) iff it is definable by a Moore\nautomaton.\nWe say that a C-operator F : \u03a3\u03c9 \u2192\u2206\u03c9 is finite state iff it is definable by a finite state\nMoore automaton.\n5. Finite State Synthesis Problems with Parameters\nRecall that a predicate P \u2286 Nat is ultimately periodic if there is p, d \u2208 Nat such that\n(n \u2208 P \u2194 n + p \u2208 P) for all n > d. Ultimately periodic predicates are MLO-definable.\nTherefore, for every ultimately periodic predicate P the monadic theory of hNat, <, Pi is\ndecidable.\nThe next theorem implies Theorem 1.3 and shows that Theorem 1.1 can be extended\nonly to ultimately periodic predicates.\nTheorem 5.1. Let P be a subset of Nat. The following conditions are equivalent and imply\ncomputability of Problem 4:\n(1) P is ultimately periodic.\n\n\f12\n\nA. RABINOVICH\n\n(2) For every MLO formula \u03c8(X, Y, P ) either there is a finite state C-operator F such that\nNat |= \u2200X\u03c8(X, F (X, P), P) or there is a finite state C-operator G such that Nat |=\n\u2200Y \u00ac\u03c8(G(Y, P), Y, P).\n(3) P satisfies the following selection condition:\nFor every formula \u03b1(X, P ) such that Nat |= \u2203X\u03b1(X, P) there is a finite state\nC-operator H : {0, 1}\u03c9 \u2192{0, 1}\u03c9 such that Nat |= \u03b1(H(P), P).\nProof. The implication (1)\u21d2 (2) follows from Theorem 1.1 and the fact that every ultimately periodic predicate is definable by an MLO formula. The implication (2)\u21d2(3) is\ntrivial.\n\u0001\nThe implication (3)\u21d2(1) is derived as follows. Let \u03b1(X, P ) be \u2200t X(t) \u2194 P (t + 1) .\nNote Nat |= \u2203X\u03b1(X, P) for every P \u2286 Nat. Therefore, if P satisfies selection condition,\nthen there is C-operator H : {0, 1}\u03c9 \u2192{0, 1}\u03c9 such that Nat |= \u03b1(H(P), P).\nAssume that a finite state Moore automaton A computes H and has n states. We are\ngoing to show that P is ultimately periodic with period at most 2n + 1. For i \u2208 Nat let\nai be one if i \u2208 P and ai be zero otherwise. Let q0 q1 . . . q2n+1 . . . be the sequence states\npassed by A on the input a0 a1 . . . a2n+1 . . . . There are i < j < 2n such that ai = aj and\nqi = qj . Observe that qi+1 = \u03b4A (qi , ai ) = \u03b4A (qj , aj ) = qj+1 and ai+1 = out A (qi , ai ) =\nout A (qj , aj ) = aj+1 . And by induction we get that qi+m = qj+m and ai+m = aj+m for all\nm \u2208 Nat. Therefore, P is an ultimately periodic with a period j \u2212 i < 2n.\nNote that this theorem does not imply that Problem 4 is computable only for ultimately\nperiodic predicates. The next theorem can be established by the same arguments.\nTheorem 5.2. The following conditions are equivalent and imply computability of Problem\n5:\n(1) P is ultimately periodic.\n(2) For every MLO formula \u03c8(X, Y, P ) either there is a finite state C-operator F such that\nNat |= \u2200X\u03c8(X, F (X), P) or there is a finite state SC-operator G such that Nat |=\n\u2200Y \u00ac\u03c8(G(Y ), Y, P). Moreover, it is decidable which of these cases holds and the corresponding operator is computable from \u03c8.\n6. Parity Games on Graphs and the Synthesis Problem\nIn subsection 6.1, we provide standard definitions and facts about infinite two-player\nperfect information games on graphs. In [BL69], a reduction of the Church synthesis problem to infinite two-player games on finite graphs was provided. In subsection 6.2, we provide\na reduction of the Church synthesis problem with parameters to infinite two-player games\non infinite graphs; this reduction is \"uniform\" in the parameters. The main definability\nresults needed for the proof of Theorem 2.3 are given in Sect. 6.3 and Sect. 6.4.\n6.1. Parity Games on Graphs. We consider here two-player perfect information games,\nplayed on graphs, in which each player chooses, in turn, a vertex adjacent to a current\nvertex. The presentation is based on [PP04].\nA (directed) bipartite graph G = (V1 , V2 , E) is called a game arena if the outdegree of\nevery vertex is at least one. If G is an arena, a game on G is defined by an initial node\nvinit \u2208 V1 and a set of winning \u03c9-paths F from this node.\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n13\n\nPlayer I plays on vertices in V1 and Player II on vertices in V2 . A play from a node\nv1 = vinit is an infinite path v1 v2 . . . vi . . . in G formed by the two players starting from the\ninitial position v1 . Whenever the current position vi belongs to V1 (respectively V2 ), then\nPlayer I (respectively, Player II) chooses a successor node vi+1 such E(vi , vi+1 ). Since the\ngraph is bipartite, Player I plays at the odd positions (v2i+1 \u2208 Vi ) and Player II plays at\nthe even positions (v2i \u2208 V2 ). Player I wins if the play belongs to F.\nA strategy f for Player I (Player II) is a function which assigns to every path of\neven (respectively, odd) length a node adjacent to the last node of the path. A play\nvinit v2 v3 . . . is played according to a strategy f1 of Player I (strategy f2 of Player II) if for\nevery prefix \u03c0 = vinit v2 . . . vn of even (respectively, odd) length vn+1 = f1 (\u03c0) (respectively,\nvn+1 = f2 (\u03c0)). A strategy is winning for Player I (respectively, for Player II) if all the\nplays played according to this strategy are in F (respectively, in the complement of F). A\nstrategy is memoryless if it depends only on the last nodes in the path.\nParity games are games on graphs in which the set of winning paths are defined by\nparity conditions. More precisely, let G = (V1 , V2 , E) be a game arena and let c : V1 \u222a\nV2 \u2192{0, 1, . . . m} be a coloring.\nLet \u03c1 = v1 v2 . . . be a play. With such a play \u03c1, we associate the set of colors C\u03c1 that\nappear infinitely many times in the \u03c9-sequence col (v1 )col(v2 ) . . . ; a play \u03c1 is winning for\nPlayer I if the minimal element of C\u03c1 is odd. The following theorem due to Emerson/Julta\nand Mostowski (see, [EJ91, GTW02, PP04]) is fundamental:\nTheorem 6.1. In a parity game, one of the players has a memoryless winning strategy.\n6.2. Games and the Church Synthesis Problem. Let A = hQ, \u03a3, \u03b4A , qinit , col i be a\ndeterministic parity automaton over the alphabet \u03a3 = {0, 1} \u00d7 {0, 1} \u00d7 {0, 1}, let RA \u2286\n{0, 1}\u03c9 \u00d7 {0, 1}\u03c9 \u00d7 {0, 1}\u03c9 be the relation defined by A and let P be a subset of Nat. We\nwill define a parity game GA,P such that\n(1) Player I has a winning strategy in GA,P iff there is a SC-operator G : {0, 1}\u03c9 \u2192{0, 1}\u03c9\nsuch that \u00acRA (G(Y ), Y, P) holds for every Y .\n(2) Player II has a winning strategy in GA,P iff there is a C-operator F : {0, 1}\u03c9 \u2192{0, 1}\u03c9\nsuch that RA (X, F (X), P) holds for every X.\nThe arena G(V1 , V2 , E) of GA,P is defined as follows:\nNodes: V1 = Q \u00d7 Nat and V2 = Q \u00d7 {0, 1} \u00d7 Nat.\nEdges from V1 : From hq, ni \u2208 V1 two edges exit; one to hq, 0, ni \u2208 V2 , and the second to\nhq, 1, ni \u2208 V2 . We will assign labels to these edges. The first one will be labeled by 0 and\nthe second one will be labeled by 1. These edge labels play no role in the game on our\ngraph; however, it will be convenient to refer to them later.\nEdges from V2 : From hq, a, ni \u2208 V2 two edges exit defined as follows: let c be 1 if n \u2208 P\nand 0 if n 6\u2208 P; and for b \u2208 {0, 1} let qb be \u03b4A (q, ha, b, ci). One edge from hq, a, ni is\nconnected to hq0 , n + 1i, and the second one to hq1 , n + 1i. We label the first edge by 0,\nand the second one by 1.\nThe color of a node of the arena is defined by the color of its automaton's component, i.e.,\nc(hq, ni) = c(hq, a, ni = col (q).\nThe node hqinit , 0i is the initial node of the game.\nEvery node of the game graph for GA,P has two successors. The subsets of V1 (respectively, of V2 ) can be identified with the memoryless strategies of Player I (respectively, of\n\n\f14\n\nA. RABINOVICH\n\nPlayer II). For a subset U1 \u2286 V1 , the corresponding memoryless strategy fU1 is defined as\n\u001a\nhq, 1, ni if hq, ni \u2208 U1\nfU1 (hq, ni) =\nhq, 0, ni otherwise\nIn other words, for v \u2208 V1 the strategy fU1 chooses the nodes reachable from v by the edge\nwith the label U1 (v).\nObservation 6.1 (bijection between the memoryless strategies and the subset of nodes).\nThe function that assigns to every subset U of V1 the strategy fU for Player I is a bijection\nbetween the set of memoryless strategies for Player I and the subset of V1 . Similarly, the\nfunction that assigns to every subset U of V2 the strategy fU is a bijection between the set\nof memoryless strategies for Player II and the subset of V2 .\nA subset U1 \u2286 V1 , induces a function hU1 : {0, 1}\u2217 \u2192V2 and a SC-operator FU1 :\n{0, 1}\u03c9 \u2192{0, 1}\u03c9 . First, we provide the definition for hU1 , and later for FU1 .\nLet GU1 be the subgraph of GA,P , obtained by removing from every node v \u2208 V1 the\nedge labelled by \u00acU1 (v), and removing the label from the other edge exiting v. In this\ngraph, every V1 node has outdegree one, and every V2 node has two exiting edges; one is\nlabeled by 0 and the other is labeled by 1. For every \u03c0 in {0, 1}\u2217 there is a unique path\nfrom hqinit , 0i to a state v2 \u2208 V2 such that \u03c0 is the sequence of labels on the edges of this\npath; this node v2 is hU1 image of \u03c0.\nNow a SC-operator FU1 : {0, 1}\u03c9 \u2192{0, 1}\u03c9 induced by U1 is defined as follows. Let\n\u03c0 = b0 b1 . . . be an \u03c9-string. There is a unique \u03c9-path \u03c1 from hqinit , 0i in GU1 such that \u03c0\nis the sequence labels on the edges of this path. Let v1 v2 . . . be the sequence of V1 nodes\non \u03c1 and let ai = 1 if vi \u2208 U1 and 0 otherwise. The \u03c9 sequence a0 a1 . . . is defined as the\nFU1 image of \u03c0.\nSimilarly, U2 \u2286 V2 induces a function hU2 : {0, 1}+ \u2192V1 and C-operator FU2 .\nBelow we often use \"a function F corresponds to a set U \" as synonym \"a set U induces\na function F \".\nThe properties of the above constructions are summarized as follows:\nLemma 6.2. (1) Let U1 be a subset of V1 . The memoryless strategy defined by U1 is winning for Player I in GA,P iff \u00acRA (FU1 (Y ), Y, P) holds for every Y .\n(2) Let U2 be a subset of V2 . The memoryless strategy defined by U2 is winning for Player\nII in GA,P iff RA (X, FU2 (X), P) holds for every X.\n(3) Let \u03c6(X, Y, Z) be an MLO formula equivalent to A, let \u03c8 be \u03c6(X, Y, P ) and let M be\nhNat, <, Pi. The memoryless strategy defined by U is winning for Player I (respectively,\nPlayer II) in GA,P iff the operator induced by U is a winning strategy for Player I\n(respectively, for Player II) in G\u03c8M .\nOur next objective is to show that the set of memoryless winning strategies and the\noperator induced by a memoryless strategy are MLO-definable in hNat, <, Pi. For this\npurpose, we show in 6.3 that these are definable in the monadic-second order logic for the\nstructure appropriate for the game graph GA,P . Then, in Sect. 6.4, we translate these\ndefinitions to MLO formulas over hNat, <, Pi.\n6.3. Definability in the game structure. The game arena GA,P can be considered as a\nlogical structure M = MA,P for the signature \u03c4A = {Ri : i \u2208 Q \u222a Q \u00d7 {0, 1}} \u222a {Init , P, \u227a\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n15\n\n, E0 , E1 }, where Ri , Init and P are unary predicates and \u227a, , E0 , E1 are binary predicates\nwith the interpretation\n\u001a\n{hq, ji : j \u2208 Nat}\nfor i = q \u2208 Q\nM\nRi =\n{hq, a, ji : j \u2208 Nat} for i = hq, ai \u2208 Q \u00d7 {0, 1}\nP M = {hq, mi : m \u2208 P} \u222a {hq, a, mi : a \u2208 {0, 1} and m \u2208 P}\nInit M = {hqinit , 0i}\nM\nEM\n0 (v1 , v2 ) (respectively, E1 (v1 , v2 )) holds\niff there is an edge labeled by 0 (respectively, by 1) from v1 to v2 .\nv1 \u227a v2 iff v1 = hi1 , j1 i and v2 = hi2 , j2 i and j1 < j2 .\nThe next lemma shows that the set of memoryless winning strategies is definable in\nMA,P .\nLemma 6.3 (The set of memoryless winning strategies is definable in MA,P ). Let A be a\nparity automaton.\n(1) There is a monadic second-order formula winSt IGA (X) such that MA,P |= winSt IGA (U )\niff U corresponds to a memoryless winning strategy for Player I.\nII\n(2) There is a monadic second-order formula winSt II\nGA (X) such that MA,P |= winSt GA (U )\niff U corresponds to a memoryless winning strategy for Player II.\n(3) Moreover, winSt IGA (X) and winSt II\nGA (X) are computable from A.\nProof. We will formalize that \"player I wins all the plays consistent with a memoryless\nstrategy X\".\nA play is an infinite path that starts from the initial node. Note that the arena GA,P\nis an acyclic graph. Hence, we can formalize that \"Z is the set of nodes of an infinite path\nthat starts from a node v\" as a formula Play(v, Z) which is the conjunction of the following\nformulas:\n(1) For every node u of Z there is a unique node u\u2032 \u2208 Z such that an edge from u enters u\u2032 .\n(2) For every node u 6= v of Z there is a unique node u\u2032 \u2208 Z such that an edge from u\u2032\nenters u; there is no edge that enters from a node of Z into v.\n(3) v is in Z.\n(4) For every partition of Z into two non-empty set Z1 and Z2 there is an edge between a\nnode in Z1 and a node in Z2 .\nThe assertion \"u is a Player I node\" is formalized by the formula Pos 1 (u), defined as\nW\nq\u2208Q Rq (u). Next, we formalize that \"Z is the set of nodes of a play consistent with\na strategy U of Player I\" by the formula Consis(U, Z) which is the conjunction of the\nfollowing formulas:\n(1) \"U is a subset of Player I nodes\" is formalized by\n\u2200u(u \u2208 U \u2192Pos 1 (u))\n(2) \"Z is the set of nodes of a play from the initial node\":\n\u2203v(Init(v) \u2227 Play(v, Z))\n(3) \"Z is consistent with U \"\n\u0001\n\u2200zz \u2032 \u2208 Z Pos 1 (z) \u2227 (E1 (z, z \u2032 ) \u2228 E1 (z.z \u2032 )) \u2192(E1 (z, z \u2032 ) \u2194 z \u2208 U )\n\n\f16\n\nA. RABINOVICH\n\nAssume that the coloring function of A assigns to the states numbers in the set\n{0, 1 . . . , m}, and let Qi (i = 0, . . . m) be the set of states of A which are colored by i.\nColor i appears infinitely often in a play with the set of nodes Z if inf i (Z) defined as\n\u2200z\u2203z \u2032 \u2208 Z(z \u227a z \u2032 \u2227 (\u2228q\u2208Qi Rq (z \u2032 ))) holds. Hence, the formula Even(Z) defined as\n^\n_\n\u0001\ninf 2k (Z) \u2227\n\u00acinf 2k (Z)\nk\u2264m/2\n\nj<2k\n\nholds for a play Z iff the minimal color that appears infinitely often in Z is even.\nFinally, winSt IGA (X) can be defined as \u2200Z(Consis(X, Z)\u2192\u00acEven(Z)).\nNote that our construction of winSt IGA (X) from A is algorithmic.\nThe formula winSt II\nGA (X) is defined from A similarly.\nNext, we will show that the operator FU : {0, 1}\u03c9 \u2192{0, 1}\u03c9 induced by a memoryless\nstrategy U of one of the players is definable in MA,P . The operator FU maps \u03c9-strings to\n\u03c9 strings. Therefore, we should agree how the \u03c9-strings are encoded by subset of MA,P .\nNote that for q \u2208 Q the set of elements in Rq ordered by \u227a is isomorphic to hNat, <i.\nAccordingly, we can represent the \u03c9-strings by the subsets of Rqinit , and in the next lemma\nthe operators from {0, 1}\u03c9 to {0, 1}\u03c9 are identified with corresponding functions from the\nset of subset of Rqinit to the set of subset of Rqinit .\nLemma 6.4 (Definability of the operator induced by a memoryless strategy). Let A be a\nparity automaton.\n(1) There is a monadic second-order formula \u03c8I (X, Y, U ) such that MA,P |= \u03c8I (X, Y, U)\niff U is a memoryless strategy for Player I in GA,P , X, Y \u2286 Rqinit and X = FU (Y),\nwhere FU is the operator induced by U.\n(2) There is a monadic second-order formula \u03c8II (X, Y, U ) such that MA,P |= \u03c8II (X, Y, U)\niff U is a memoryless strategy for Player II in GA,P , X, Y \u2286 Rqinit and Y = FU (X),\nwhere FU is the operator induced by U.\n(3) Moreover, \u03c8I and \u03c8II are computable from A.\nProof. We just formalize in the monadic-second order logic the construction of FU given in\nSect. 6.2.\nLet Consis(U, Z) be the formula from the proof of Lemma 6.3 which expresses \"Z is\nthe set of nodes of a play consistent with a strategy U of Player I\". We need to say that X\n(respectively, Y ) is the sequence of edges1 chosen by Player I (respectively, by Player II) in\nthe play Z. It can be formalized by formula moves(X, Y, Z) which is the conjunction of\n(1) X \u2286 Rqinit \u2227 Y \u2286 Rqinit - X and Y \"encodes\" \u03c9 strings over {0, 1}.\n(2) We can formalize that X is the sequence of edges chosen by Player I as follows. Let\nu \u2208 Z be a node of Player II. Then, u is hq, 1, ji iff hqinit , ji is in X:\n_\n\u0001\n\u0001\n\u2200u \u2208 Z\u2200v \u2208 X P osII (u) \u2227 \u00ac(u \u227a v) \u2227 \u00ac(v \u227a u) \u2192 v \u2208 X \u2194\nu \u2208 Rq,1\nq\u2208Q\n\n(3) Similarly, we can formalize that Y is the sequence of edges chosen by Player II as follows.\nLet u = hq, a, ji \u2208 Z and u\u2032 = hq \u2032 , j + 1i \u2208 Z and let c be 1 (respectively, c be 0) if j \u2208 P\n(respectively, j 6\u2208 P) and let b be 1 (respectively, b be 0) if hqinit , ji \u2208 Y (respectively,\nhqinit , ji 6\u2208 Y ). Then, q \u2032 = \u03b4A (q, ha, b, ci).\n1Strictly speaking, the sequence of labels of the edges.\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n17\n\nNote that for each memoryless strategy U of Player I, we have\n\u2200Y \u2286 Rqinit \u2203!Z\u2203!XConsis(U, Z) \u2227 moves(X, Y, Z)\n. Finally, \u03c8I (X, Y, U ) can be defined as \u2203ZConsis(U, Z) \u2227 moves(X, Y, Z).\n\u03c8II (X, Y, U ) is defined in a similar way.\n6.4. Interpretation of MA,P in the structure hNat, < Pi. Every set S of nodes in MA,P\ncorresponds to the tuple h. . . , Wi , . . . i where i \u2208 Q \u222a Q \u00d7 {0, 1}) of subsets of Nat, such\nthat hq, mi \u2208 S iff m \u2208 Wq and hq, a, mi \u2208 S iff m \u2208 Whq,ai .\nThe proof of the following lemma shows that there is an interpretation of the structure\nMA,P in the structure hNat, < Pi.\nLemma 6.5. For every formula \u03c8(X 1 , . . . X k ) in the second order monadic logic over the\n\u2212\n\u2192\n\u2212\n\u2192\nsignature \u03c4A with free monadic variables X 1 , . . . , X k there is a formula \u03c6(Y, Z 1 . . . , Z k ),\n\u2212\n\u2192\nwhere Z j is a tuple of monadic variables {Zij : i \u2208 Q \u222a Q \u00d7 {0, 1}}, such that for every\nP \u2286 Nat and a tuple h. . . , Wij , . . . i where j \u2208 {1, . . . , k} and i \u2208 Q \u222a Q \u00d7 {0, 1}) of subsets\nof Nat the following equivalence holds:\nhNat, <i |= \u03c6(P, . . . , Wij , . . . ), iff MA,P |= \u03c8(S 1 , . . . , S k )\nwhere S j is the subset of nodes in GA,P , which corresponds to h. . . , Wij , . . . i.\nMoreover, there is an algorithms that computes \u03c6 from \u03c8.\nProof. The proof proceeds by the structural induction. It is more convenient to consider\nthe first-order version of the monadic second-order logic (see, Subsection 4.3).\nBasis - Atomic formulas.\n\u2022 Sing(X) is translated as\n_\n^\nSing(Zi ) \u2227\n(Sing(Zi )\u2192Empty(Zi\u2032 )),\ni\u2208Q\u222aQ\u00d7{0,1}\n\ni6=i\u2032 \u2208Q\u222aQ\u00d7{0,1}\n\nwhere Empty(W ) is a shorthand for \u2200W \u2032 (W \u2286 W \u2032 ).\n\u2022 X 1 \u2286 X 2 is translated as\n^\nZi1 \u2286 Zi2\ni\u2208Q\u222aQ\u00d7{0,1}\n\n\u2022\n\nX1\n\nX2\n\n\u227a\nis translated as the conjunction of the following:\n(1) one of the Zi1 (i \u2208 Q \u222a Q \u00d7 {0, 1}) is singleton and all the others are empty.\n(2) one of the Zi2 (i \u2208 Q \u222a Q \u00d7 {0, 1}) is singleton and all the others are empty.\n(3) if Zi11 and Zi22 are singletons, then Zi11 < Zi22 , i.e., the (unique) natural number which\nis in Zi11 is less than the natural number in Zi22 .\n\u2022 Other relations in \u03c4A are translated similarly just by the straightforward formalization of\nour definition of the game arena, e.g., E0 (X 1 , X 2 ) is translated as the conjunction of the\nfollowing:\n(1) one of the Zi1 (i \u2208 Q \u222a Q \u00d7 {0, 1}) is singleton and all others are empty.\n(2) one of the Zi2 (i \u2208 Q \u222a Q \u00d7 {0, 1}) is singleton and all others are empty.\n2\n(3) if Zq1 (for some q \u2208 Q) is singleton, then Zhq,0i\nis singleton and both of them contain\nthe same natural number.\n\n\f18\n\nA. RABINOVICH\n\n1\n(4) if Zhq,ai\n(for some q \u2208 Q and a \u2208 {0, 1, }) is singleton, and the unique number n from\n1\n1\nZhq,ai is in P (i.e., Zhq,ai\n\u2286 P) and q \u2032 is be \u03b4A (q, ha, 0, 1i), then Zq2\u2032 is singleton and\n1\n.\nthe unique element of Zq2\u2032 is the successor of the unique element of Zhq,ai\n1\n(5) if Zhq,ai (for some q \u2208 Q and a \u2208 {0, 1, }) is singleton, and the unique number n from\n1\n1\nZhq,ai\nis not in P (i.e., \u00ac(Zhq,ai\n\u2286 P)) and q \u2032 is \u03b4A (q, ha, 0, 0i), then Zq2\u2032 is singleton,\n1\n.\nand the unique element of Zq2\u2032 is the successor of the unique element of Zhq,ai\n\nInductive step. If \u03c6j is the translation of \u03c8j for j = 1, 2, then \u03c81 \u2227 \u03c82 is translated as \u03c61 \u2227 \u03c62\nand \u00ac\u03c81 is translated as \u00ac\u03c61 .\n\u2212\n\u2192\n\u2212\n\u2192\nFinally, if \u03c6(Y, Z 1 . . . , Z k ) is the translation of \u03c8(X 1 , . . . X k ), then \u2203X 1 \u03c8 is translated\n\u2212\n\u2192\nas \u2203Z 1 \u03c6.\nThe next two lemmas use the interpretation of MA,P in hN at, < Pi to show MLO\ndefinability in hN at, < Pi of the set of memoryless winning strategies and the operator\ninduced by a memoryless strategy.\nLemma 6.6 (The set of memoryless winning strategies is definable in hN at, < Pi).\nLet A = hQ, \u03a3, \u03b4A , qinit , col i, be a deterministic parity automaton over the alphabet \u03a3 =\n{0, 1} \u00d7 {0, 1} \u00d7 {0, 1}.\n(1) There is an MLO formula WinSt IA (Z1 , . . . , Z|Q| , Z) such that for every P \u2286 Nat and\nW1 , . . . , W|Q| \u2286 Nat:\nNat |= WinSt IA (W1 , . . . , W|Q| , P)\niff the corresponding subset U \u2286 Q \u00d7 Nat defines a memoryless winning strategy for\nPlayer I in GA,P .\n\u2032\n\u2032\n(2) There is an MLO formula WinSt II\nA (Z1 , . . . , Z|Q| , Z1 , . . . , Z|Q| , Z) such that for every\n\u2032 \u2286 Nat:\nP \u2286 Nat and W1 , . . . , W|Q| , W1\u2032 , . . . , W|Q|\n\u2032\n\u2032\nNat |= WinSt II\nA (W1 , . . . , W|Q| , W1 , . . . , W|Q| , P)\n\niff the corresponding subset U \u2286 Q \u00d7 {0, 1} \u00d7 Nat defines a memoryless winning strategy\nfor Player II in GA,P .\n(3) Moreover, there is an algorithm that computes formulas WinSt IA and WinSt II\nA from A.\nProof. Follows from Lemma 6.3 and Lemma 6.5. Let winSt IGA (X) be the formula constructed in Lemma 6.3 which defines (in MA,P ) the set of memoryless winning strategies of\n\u2212\n\u2192\nthe first player. Let \u03c8(Y, Z~1 ) be its translation, as in Lemma 6.5, where Z 1 is the tuple of\n\u2212\n\u2192\nvariables indexed by i \u2208 Q \u222a Q \u00d7 {0, 1}. Note that since Z 1 defines (in MA,P ) a strategy\nof Player I, Zhq,ai for q \u2208 Q and a \u2208 {0, 1} should be interpreted as the empty set. The\nformula WinSt IA is obtained from \u03c8 by replacing Zhq,ai for q \u2208 Q and a \u2208 {0, 1} by the\nempty set and replacing Y by Z.\nWinSt II\nA is defined in a similar way.\nFrom Lemma 6.4 and Lemma 6.5, by the same arguments, we can derive the following\nLemma:\nLemma 6.7 (The operator induced by a memoryless strategy is definable in hN at, < Pi).\nLet A = hQ, \u03a3, \u03b4A , qinit , col i, be a deterministic parity automaton over the alphabet \u03a3 =\n{0, 1} \u00d7 {0, 1} \u00d7 {0, 1}.\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n19\n\n(1) There is an MLO formula op IA (X, Y, Z1 , . . . , Z|Q| , Z) which has the following property:\nLet P \u2286 Nat and W1 , . . . , W|Q| \u2286 Nat, and let FU be the C-operator, induced by Player I memoryless strategy U \u2286 Q \u00d7 Nat which corresponds to\nhW1 , . . . , W|Q| i. Then, Nat |= op IA (X, Y, W1 , . . . , W|Q| , P) iff X = FU (Y ).\n\u2032\n\u2032\n(2) There is an MLO formula op II\nA A(X, Y, Z1 , . . . , Z|Q| , Z1 , . . . , Z|Q| , Z) which has the following property:\n\u2032\nLet P \u2286 Nat and W1 , . . . , W|Q| , W1\u2032 , . . . , W|Q|\n\u2286 Nat and let FU be the Coperator, induced by Player II memoryless strategy U \u2286 Q \u00d7 {0, 1} \u00d7 Nat\n\u2032 i. Then,\nwhich corresponds to hW1 , . . . , W|Q| , W1\u2032 , . . . , W|Q|\n\u2032\n\u2032\nNat |= op II\nA (X, Y, W1 , . . . , W|Q| , W1 , . . . , W|Q| , P) iff Y = FU (X).\n\n(3) Moreover, there is an algorithm that computes formulas op IA and op II\nA from A.\n7. Proof of Theorem 2.3\nWe are now almost ready to prove Theorem 2.3. We will show an algorithm that, given\na formula \u03c6(X, Y, P ), constructs\n(1) a sentence WIN II\n\u03c6 (P ) and\nI\n(2) formulas St\u03c6 (X, Y, P ) and St\u03c6II (X, Y, P )\nsuch that for every structure M = hNat, <, Pi, Player II has a winning strategy in the\ngames G\u03c6M iff M |= WIN II\n\u03c6 . If Player II (respectively, Player I) has a winning strategy, then\nSt\u03c6II (X, Y, P ) (respectively, St\u03c6I (X, Y, P )) defines his winning strategy.\nLet \u03c6(X, Y, P ) be a formula. We are going to construct WIN II\n\u03c6 (P ), as follows. First,\n\u2032\nlet \u03c6 (X, Y, Z) be a formula obtained from \u03c6 by replacing all the occurrences of P by a\nfresh variable Z.\nLet A = hQ, \u03a3, \u03b4A , qinit , col i be a deterministic parity automaton over the alphabet\n\u03a3 = {0, 1} \u00d7 {0, 1} \u00d7 {0, 1}, which is equivalent to \u03c6\u2032 . Let WinSt IA (Z1 , . . . , Z|Q| , Z) be\nconstructed from A, as in Lemma 6.6. Player I has a winning strategy iff\nM |= \u2203Z1 . . . \u2203Z|Q|WinSt IA (Z1 , . . . , Z|Q| , P ) .\nI\nFinally, WIN II\n\u03c6 (P ) can be defined as \u00ac\u2203Z1 . . . \u2203Z|Q| WinSt A (Z1 , . . . , Z|Q| , P ).\nThe correctness of the construction follows from Lemma 6.6 and Lemma 6.2.\nIn order to construct St\u03c6I (X, Y, P ), St\u03c6II (X, Y, P ), we need the following definition and\nTheorem.\n\nDefinition 7.1 (Selection). Let \u03c6(\u0232 ), \u03c8(\u0232 ) be formulas and C a class of structures. We\nsay that \u03c8 selects (or, is a selector for) \u03c6 over C iff for every M \u2208 C:\n(1) M |= \u2203\u22641 \u0232 \u03c8(\u0232 ),\n(2) M |= \u2200\u0232 (\u03c8(\u0232 ) \u2192 \u03c6(\u0232 )), and\n(3) M |= \u2203\u0232 \u03c6(\u0232 ) \u2192 \u2203\u0232 \u03c8(\u0232 ).\nHere, \u0232 is a tuple of distinct variables and \"\u2203\u22641 \u0232 . . .\" stands for \"there exists at most\none...\". The definition can be rephrased as \u03c8 is a selector of \u03c6 over C iff for each M \u2208 C,\nif \u03c6 is satisfiable in M , then it is satisfiable by the (unique) tuple defined by \u03c8.\nWe say that C has the selection property iff every formula \u03c6 has a selector \u03c8 over C.\n\n\f20\n\nA. RABINOVICH\n\nTheorem 7.2. The class of labelled \u03c9-chains has the selection property. Moreover, there\nis an algorithm which constructs for every \u03c6 a formula \u03c8 which selects \u03c6 over the class of\nlabelled \u03c9-chains.\nTheorem 7.2 was proved in [Rab07]. Its version without the \"Moreover\" clause was\nstated without proof in [LS98].\nNow, we are ready to define St\u03c6I (X, Y, P ) and St\u03c6II (X, Y, P ).\nLet A = hQ, \u03a3, \u03b4A , qinit , col i and WinSt IA (Z1 , . . . , Z|Q| , Z) be as in the construction of\nWIN II\n\u03c6 (P ) above.\nConstruct \u03b1(Z1 , . . . , Z|Q| , P ) as a selector for WinSt IA (Z1 , . . . , Z|Q| , P ) over the class\n{hNat , <, Pi : P \u2286 Nat} of structures. If WinSt IA (Z1 , . . . , Z|Q| , P ) is satisfiable in M , then\nevery tuple which satisfies it corresponds to a memoryless winning strategy of Player I\nin the parity game GA,P . In particular, the tuple defined by \u03b1 describes a memoryless\nI\nwinning strategy of Player I in the parity game GA,P . Let\n\u0001 op A be as in Lemma 6.6. Then,\nI\n\u2203Z1 . . . \u2203Z|Q| \u03b1(Z1 , . . . , Z|Q| , P ) \u2227 op A (X, Y, Z1 , . . . , Z|Q| defines in M a SC-operator F ,\ninduced by a memoryless winning strategy of Player I in the parity game GA,P .\nHence, by Lemma 6.2, \u00acRA (F (Y ), Y, P) holds for every Y . Therefore, by the definitions\nof A and RA , we have\nhNat, <i |= \u2200Y \u00ac\u03c8((F (Y ), Y, P).\n\u0001\nHence F , defined by \u2203Z1 . . . \u2203Z|Q| \u03b1 \u2227 op IA (X, Y, Z1 , . . . , Z|Q| , is a winning strategy for\nPlayer I in G\u03c6M .\nThe formula St\u03c6II (X, Y, P ) which defines a winning strategy for Player II is constructed\nsimilarly.\n8. Conclusion and Related Work\nWe investigated the Church synthesis problem with parameters. We provided the necessary and sufficient conditions for the computability of Synthesis problems 1-3.\nThe conditions of Theorem 5.1 and Theorem 5.2 are sufficient, but are not necessary\nfor the computability of Synthesis problems 4-5. For example, let Fac = {n! : n \u2208 Nat}\nbe the set of factorial numbers. We can show that Problems 4-5 are computable for this\npredicate Fac [Rab06].\nIt is an open question whether the decidability of hNat, <, Pi is a sufficient condition\nfor the computability of Synthesis problems 4-5.\nWe proved that the definability and synthesis parts of the B\u00fcchi and Landweber theorem\nhold for all expansions of \u03c9 by unary predicates.\nB\u00fcchi proved that the MLO-theory of any countable ordinal is decidable. After stating\ntheir main theorem, B\u00fcchi and Landweber write:\n\"We hope to present elsewhere a corresponding extension of [our main theorem] from \u03c9 to any countable ordinal.\"\nHowever, despite the fundamental role of the Church problem, no such extension is even\nmentioned in a later book by B\u00fcchi and Siefkes [BS73], which summarizes the theory of\nfinite automata and MLO over words of countable length.\nIn [Rab06a], we proved that the determinacy and decidability parts of the B\u00fcchi and\nLandweber theorem hold for all countable ordinals; however, its definability and synthesis\nparts hold for an ordinal \u03b1 iff \u03b1 < \u03c9 \u03c9 [RS06].\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n21\n\nIn [RT07], the Church Problem for fragments of MLO was considered. First-order MLO\nformulas are MLO formulas without the second-order quantifiers. In [RT06], it was proved\nthat if \u03c8(X, Y ) is a first-order MLO formula, then one of the players has a first-order definable winning strategy in G\u03c8\u03c9 . Similar results were obtained for several interesting fragments\nof MLO. However, it is an open question whether these results hold when parameters are\nadded.\nKupferman and Vardi [KV97] considered the synthesis problem with incomplete information for the specifications described by temporal logics LTL and CTL\u2217 . Their main\nresults deal with the complexity of this synthesis problem. The decidability of the synthesis\nproblem with incomplete information for LTL (respectively, for CTL\u2217 ) can be easily derived\nfrom the B\u00fcchi-Landweber (respectively, Rabin) theorem. It seems that there are no interesting connections between the synthesis problems with incomplete information and the\nsynthesis problems with parameters considered here.\nIn [RT98] a program for the relativization of finite automata theory was proposed. Our\nresults can be seen as the first step in this direction. This step corresponds to the case\nwhere oracles are C-operators without inputs.\nIn the rest of this section we comment on Rabin's proof of the Church synthesis Problem,\ndiscuss possibilities of extending it to the Church synthesis Problem with parameters, and\nstate some open questions.\nRabin [Rab72] provided an alternative proof for computability of the Church synthesis\nproblem. This proof uses an automata on infinite trees as a natural tool for treating the\nsynthesis problem. A C-operator F :{0, 1}\u03c9 \u2192{0, 1}\u03c9 can be represented by a labelled infinite\nfull binary tree hT2 , <, Si, where S is a subset of the tree nodes. Namely, the branches of\nthe tree represent X \u2208 {0, 1}\u03c9 and the sequence of values assigned by S to the nodes along\nthe branch X represents F (X) = Y \u2208 {0, 1}\u03c9 . Also, the fact that S represents a C-operator\nF which uniformizes \u03c6(X, Y ) can be expressed by an MLO formula \u03c8(Z) (computable\nfrom \u03c6(X, Y )): T2 |= \u03c8(S) iff Nat |= \u2200\u03c6(X, FS (X)) , where FS is the C-operator that\ncorresponds to S. Hence, the question whether there exists a C-operator which uniformizes\n\u03c6 is reduced to the problem whether T2 |= \u2203Z\u03c8(Z). Now, the Rabin basis theorem states\nthat if T2 |= \u2203Z\u03c8(Z) then there is a regular subset S \u2286 T2 such that T2 |= \u03c8(S). The\nC-operator which corresponds to a regular set S is computable by a finite state automaton.\nHence, the B\u00fcchi and Landweber theorem is obtained as a consequence of the decidability\nof the monadic logic of order of the full binary tree and the basis theorem.\nOne could try to apply the Rabin method to the Church synthesis problem with parameters. The reduction which is similar to Rabin's reduction shows that for every \u03c6(X, Y, P )\nthere is a sentence WIN\u03c6II (Q) such that for every structure M = hNat, <, Pi Player II wins\nthe games G\u03c6M iff\nhT2 , <, Qi |= WIN\u03c6II (Q),\nwhere a node is in Q if its distance from the root is in P. Moreover, WIN\u03c6II (Q) is computable\nfrom \u03c6 (cf. Theorem 2.3).\nHence, the decidability of Problem 1\u2032 for P \u2286 Nat (recall that this is Problem 1 without\nits constructive part, see Sect. 3) is reduced to the decidability of the monadic theory of\nthe labelled full binary tree hT2 , <, Qi, where a node is in Q, if its distance from the root\nis in P. The decidability of the latter problem can be reduced by Shelah-Stupp Muchnick\nTheorem [Shel75, Wal02, Th03] to the decidability of hNat, <, Pi. Now, in order to establish computability of problems 1-3, one can try to prove the basis theorem for hT2 , <, Qi.\n\n\f22\n\nA. RABINOVICH\n\nUnfortunately, arguments similar to the proof of Theorem 5.1 show that for P, Q, as above,\nthe following are equivalent:\n(1) P is ultimately periodic.\n(2) For every \u03c8(Z, Q) such that T2 |= \u2203Z\u03c8(Z, Q) there is a finite state operator F (Y, U )\nsuch that the set which corresponds to the C-operator \u03bbXF (X, P) satisfies \u03c8(Z, Q).\nIn case selector over hT2 , <, Qi is computable, it would be easy to derive the computability of Problems 1-3. However, even the following is open\nOpen Question - Selectoion property for an expansion of T2 by unary predicate.\nIs it true that for every Q \u2286 T2 every formula \u03c6(Y, Q) has a selector over\nhT2 , <, Qi, i.e., there is \u03c8(Y, Q) such that (1) hT2 , < .Qi |= \u2203\u22641 Y \u03c8(Y ), (2)\nhT2 , <, Qi |= \u2200Y (\u03c8(Y ) \u2192 \u03c6(Y )), and (3) hT2 , < .Qi |= \u2203Y \u03c6(Y ) \u2192 \u2203\u0232 \u03c8(Y ).\nNote that this question asks whether every expansion of T2 has the selection property\nand is different from the Rabin's uniformization problem over T2 , which asks whether every\nformula has a selector over the class of all the expansions of T2 by unary predicates. The\nnegative answer to the Rabin uniformization problem was obtained by Gurevich and Shelah\n[GS83] who proved that a formula \u03c6(Y, Q) which express that \"if Q is not empty than Y is\na singleton set which is a subset of Q\" has no selector over the class of all the expansions\nof T2 .\nWe believe that if the answer to the above mentioned question is positive, then its proof\nis non-trivial.\nOur proof of Theorem 1.2 implies that for P \u2286 Nat and Q \u2286 T2 , where a node is in Q\nif its distance from the root is in P, the following are equivalent:\n(1) The monadic theory of hNat , <, Pi is decidable,\n(2) For every \u03c8(Z, Q) such that T2 |= \u2203Z\u03c8(Z, Q) there is a recursive S \u2282 T2 such that\nT2 |= \u03c8(S, Q).\nHowever, we do not know the answer to the following question:\nOpen Question: Are the following assertions equivalent?\n(1) The monadic theory of hT2 , < Si is decidable.\n(2) For every \u03c8(Z, U ) such that T2 |= \u2203Z\u03c8(Z, S) there is a recursive set Q \u2282 T2 such that\nT2 |= \u03c8(Q, S).\nAcknowledgments\nI am grateful to the anonymous referees for their suggestions.\nReferences\n[Bu60]\n\n[BL69]\n[BS73]\n[CT02]\n[Ch69]\n\nJ. R. B\u00fcchi. On a decision method in restricted second order arithmetic In Proc. International\nCongress on Logic, Methodology and Philosophy of Science, E. Nagel at al. eds, Stanford University\nPress, pp 1-11, 1960.\nJ. R. B\u00fcchi and L. H. Landweber. Solving sequential conditions by finitestate strategies. Transactions of the AMS, 138(27):295\u2013311, 1969.\nJ. R. B\u00fcchi, D. Siefkes, The Monadic Second-order Theory of all Countable Ordinals, Springer\nLecture Notes 328 (1973), pp. 1-126.\nO. Carton and W.Thomas. The Monadic Theory of Morphic Infinite Words and Generalizations.\nInf. Comput. 176(1), pp. 51-65, 2002.\nY. Choueka. Finite Automata on Infinite Structure. Ph.D Thesis, Hebrew University, 1970.\n\n\fTHE CHURCH SYNTHESIS PROBLEM WITH PARAMETERS\n\n23\n\n[ER66]\n\nC. Elgot and M. O. Rabin. Decidability and Undecidability of Extensions of Second (First) Order\nTheory of (Generalized) Successor. J. Symb. Log., 31(2), pp. 169-181, 1966.\n[EJ91]\nE. A. Emerson, C. S. Jutla: Tree Automata, Mu-Calculus and Determinacy (Extended Abstract)\nFOCS91: 368-377, 1991.\n[GTW02] E. Gr\u00e4del, W. Thomas and T. Wilke. Automata, Logics, and Infinite Games, LNCS 2500, 2002.\n[GS83]\nY. Gurevich and S. Shelah. Rabin's uniformization problem. The Journal of Symbolic Logic,\n48:1105-1119, 1983.\n[KV97] O. Kupferman and M.Y. Vardi, Synthesis with incomplete information, In 2nd International Conference on Temporal Logic, pp 91\u2013106, 1997.\n[Mc66]\nR. McNaughton, Testing and generating infinite sequences by a finite automaton, Information and\nControl 9 (1966), pp. 521-530.\n[LS98]\nS. Lifsches, S. Shelah, Uniformization and skolem functions in the class of trees, Jou. of Symolic\nLogic, Vol. 63(1) (Mar. 1998), pp. 103-127.\n[PP04]\nD. Perrin and J. E. Pin. Infinite Words Automata, Semigroups, Logic and Games. Pure and\nApplied Mathematics Vol 141 Elsevier, 2004.\n[Rab72] M. O. Rabin. Automata on Infinite Objects and Church's Problem Amer. Math. Soc. Providence,\nRI, 1972.\n[Rab05] A. Rabinovich. On decidability of monadic logic of order over the naturals extended by monadic\npredicates. 2005 Summer Meeting of the Association for Symbolic Logic, Logic Colloquium 05.\nThe Bulletin of Symbolic Logic 12:343-344, 2006.\n[Rab06] A. Rabinovich. The Church problem over \u03c9 expanded by factorial numbers. In preparation, 2006.\n[Rab06a] A. Rabinovich. The Church Problem for Countable Ordinals. Submitted, 2006.\n[Rab07] A. Rabinovich. On decidability of Monadic logic of order over the naturals extended by monadic\npredicates. Information and Computation, 2007.\n[RT98]\nA. Rabinovich and B.A. Trakhtenbrot. From Finite Automata toward Hybrid Systems Proceddings\nof Fundamentals of Computation Theory. Lecture Notes in Computer Science 1450, pp. 411-422,\nSpringer, 1998.\n[RS06]\nA. Rabinovich and A. Shomrat. Selection in the Monadic Theory of Countable Ordinals. Submitted\n2006.\n[RT06]\nA. Rabinovich and W. Thomas. Decidable Theories of the Ordering of Natural Numbers with\nUnary Predicates. In CSL 2006, Springer LNCS 4207, 562-574, 2006.\n[RT07]\nA. Rabinovich and W. Thomas. Logical Refinements of Church's Problem. In CSL 2007, LNCS\n4646, 69-83, 2007.\n[Rob58] R. M. Robinson. Restricted Set-Theoretical Definitions in Arithmetic. In Proceedings of the AMS\nVol. 9, No. 2. pp. 238-242, 1958.\n[Sem84] A. Semenov. Logical theories of one-place functions on the set of natural numbers. Mathematics\nof the USSR - Izvestia, vol. 22, pp 587-618, 1984.\n[Se04]\nO. Serre. Games With Winning Conditions of High Borel Complexity. In ICALP 2004, LNCS\nvolume 3142, pp. 1150-1162, 2004.\n[Shel75] S. Shelah. The monadic theory of order. Ann. of Math. 102:379\u2013419, 1975.\n[Sie75]\nD. Siefkes. The recursive sets in certain monadic second order fragments of arithmetic. Arch. Math.\nLogik, pp71-80, 17(1975).\n[Th75]\nW. Thomas. Das Entscheidungsproblem f\u00fcr einige Erweiterungen der Nachfalger-Arithmetic. Ph.\nD. Thesis Albert-Ludwigs Universit\u00e4t, 1975.\n[Th95]\nW. Thomas. On the synthesis of strategies in infinite games. In STACS '95, LNCS vo. 900, pp.\n1-13. 1995.\n[Th03]\nW. Thomas. Constructing infinite graphs with a decidable MSO-theory. In MFCS03, LNCS 2747,\n2003.\n[Trak61] B. A. Trakhtenbrot. Finite automata and the logic of one-place predicates. (Russian version 1961).\nIn AMS Transl. 59, 1966, pp. 23-55.\n[Wal02] I. Walukiewicz. Monadic second order logic on tree-like structures.TCS 1:275, pp 311-346, 2002.\n\nThis work is licensed under the Creative Commons Attribution-NoDerivs License. To view\na copy of this license, visit http://creativecommons.org/licenses/by-nd/2.0/ or send a\nletter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.\n\n\f"}