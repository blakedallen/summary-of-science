{"id": "http://arxiv.org/abs/0902.0382v1", "guidislink": true, "updated": "2009-02-02T21:37:22Z", "updated_parsed": [2009, 2, 2, 21, 37, 22, 0, 33, 0], "published": "2009-02-02T21:37:22Z", "published_parsed": [2009, 2, 2, 21, 37, 22, 0, 33, 0], "title": "On the complexity of Nash dynamics and Sink Equilibria", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0902.2081%2C0902.0797%2C0902.2122%2C0902.1331%2C0902.3190%2C0902.0466%2C0902.1542%2C0902.1807%2C0902.1712%2C0902.0975%2C0902.1031%2C0902.3546%2C0902.3520%2C0902.0685%2C0902.0573%2C0902.0382%2C0902.1938%2C0902.2402%2C0902.2877%2C0902.0033%2C0902.1217%2C0902.1728%2C0902.1561%2C0902.2272%2C0902.2102%2C0902.4149%2C0902.4500%2C0902.0705%2C0902.4400%2C0902.3817%2C0902.4231%2C0902.3803%2C0902.1097%2C0902.4321%2C0902.2858%2C0902.4355%2C0902.1273%2C0902.2615%2C0902.1870%2C0902.4302%2C0902.0196%2C0902.4643%2C0902.3531%2C0902.2410%2C0902.4750%2C0902.4419%2C0902.0435%2C0902.4333%2C0902.2837%2C0902.4248%2C0902.1494%2C0902.1832%2C0902.1720%2C0902.1551%2C0902.0517%2C0902.4258%2C0902.1965%2C0902.1148%2C0902.1077%2C0902.1534%2C0902.0616%2C0902.0447%2C0902.2433%2C0902.0121%2C0902.2364%2C0902.1525%2C0902.3244%2C0902.1056%2C0902.4071%2C0902.3469%2C0902.4580%2C0902.0594%2C0902.4586%2C0902.1615%2C0902.0334%2C0902.2767%2C0902.2014%2C0902.4701%2C0902.1540%2C0902.3993%2C0902.4873%2C0902.4393%2C0902.2432%2C0902.3532%2C0902.3265%2C0902.0589%2C0902.4578%2C0902.2309%2C0902.1867%2C0902.0430%2C0902.1430%2C0902.0968%2C0902.1408%2C0902.4517%2C0902.4424%2C0902.0248%2C0902.3067%2C0902.1180%2C0902.2791%2C0902.0893%2C0902.4408&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "On the complexity of Nash dynamics and Sink Equilibria"}, "summary": "Studying Nash dynamics is an important approach for analyzing the outcome of\ngames with repeated selfish behavior of self-interested agents. Sink equilibria\nhas been introduced by Goemans, Mirrokni, and Vetta for studying social cost on\nNash dynamics over pure strategies in games. However, they do not address the\ncomplexity of sink equilibria in these games. Recently, Fabrikant and\nPapadimitriou initiated the study of the complexity of Nash dynamics in two\nclasses of games. In order to completely understand the complexity of Nash\ndynamics in a variety of games, we study the following three questions for\nvarious games: (i) given a state in game, can we verify if this state is in a\nsink equilibrium or not? (ii) given an instance of a game, can we verify if\nthere exists any sink equilibrium other than pure Nash equilibria? and (iii)\ngiven an instance of a game, can we verify if there exists a pure Nash\nequilibrium (i.e, a sink equilibrium with one state)?\n  In this paper, we almost answer all of the above questions for a variety of\nclasses of games with succinct representation, including anonymous games,\nplayer-specific and weighted congestion games, valid-utility games, and\ntwo-sided market games. In particular, for most of these problems, we show that\n(i) it is PSPACE-complete to verify if a given state is in a sink equilibrium,\n(ii) it is NP-hard to verify if there exists a pure Nash equilibrium in the\ngame or not, (iii) it is PSPACE-complete to verify if there exists any sink\nequilibrium other than pure Nash equilibria. To solve these problems, we\nillustrate general techniques that could be used to answer similar questions in\nother classes of games.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0902.2081%2C0902.0797%2C0902.2122%2C0902.1331%2C0902.3190%2C0902.0466%2C0902.1542%2C0902.1807%2C0902.1712%2C0902.0975%2C0902.1031%2C0902.3546%2C0902.3520%2C0902.0685%2C0902.0573%2C0902.0382%2C0902.1938%2C0902.2402%2C0902.2877%2C0902.0033%2C0902.1217%2C0902.1728%2C0902.1561%2C0902.2272%2C0902.2102%2C0902.4149%2C0902.4500%2C0902.0705%2C0902.4400%2C0902.3817%2C0902.4231%2C0902.3803%2C0902.1097%2C0902.4321%2C0902.2858%2C0902.4355%2C0902.1273%2C0902.2615%2C0902.1870%2C0902.4302%2C0902.0196%2C0902.4643%2C0902.3531%2C0902.2410%2C0902.4750%2C0902.4419%2C0902.0435%2C0902.4333%2C0902.2837%2C0902.4248%2C0902.1494%2C0902.1832%2C0902.1720%2C0902.1551%2C0902.0517%2C0902.4258%2C0902.1965%2C0902.1148%2C0902.1077%2C0902.1534%2C0902.0616%2C0902.0447%2C0902.2433%2C0902.0121%2C0902.2364%2C0902.1525%2C0902.3244%2C0902.1056%2C0902.4071%2C0902.3469%2C0902.4580%2C0902.0594%2C0902.4586%2C0902.1615%2C0902.0334%2C0902.2767%2C0902.2014%2C0902.4701%2C0902.1540%2C0902.3993%2C0902.4873%2C0902.4393%2C0902.2432%2C0902.3532%2C0902.3265%2C0902.0589%2C0902.4578%2C0902.2309%2C0902.1867%2C0902.0430%2C0902.1430%2C0902.0968%2C0902.1408%2C0902.4517%2C0902.4424%2C0902.0248%2C0902.3067%2C0902.1180%2C0902.2791%2C0902.0893%2C0902.4408&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Studying Nash dynamics is an important approach for analyzing the outcome of\ngames with repeated selfish behavior of self-interested agents. Sink equilibria\nhas been introduced by Goemans, Mirrokni, and Vetta for studying social cost on\nNash dynamics over pure strategies in games. However, they do not address the\ncomplexity of sink equilibria in these games. Recently, Fabrikant and\nPapadimitriou initiated the study of the complexity of Nash dynamics in two\nclasses of games. In order to completely understand the complexity of Nash\ndynamics in a variety of games, we study the following three questions for\nvarious games: (i) given a state in game, can we verify if this state is in a\nsink equilibrium or not? (ii) given an instance of a game, can we verify if\nthere exists any sink equilibrium other than pure Nash equilibria? and (iii)\ngiven an instance of a game, can we verify if there exists a pure Nash\nequilibrium (i.e, a sink equilibrium with one state)?\n  In this paper, we almost answer all of the above questions for a variety of\nclasses of games with succinct representation, including anonymous games,\nplayer-specific and weighted congestion games, valid-utility games, and\ntwo-sided market games. In particular, for most of these problems, we show that\n(i) it is PSPACE-complete to verify if a given state is in a sink equilibrium,\n(ii) it is NP-hard to verify if there exists a pure Nash equilibrium in the\ngame or not, (iii) it is PSPACE-complete to verify if there exists any sink\nequilibrium other than pure Nash equilibria. To solve these problems, we\nillustrate general techniques that could be used to answer similar questions in\nother classes of games."}, "authors": ["Vahab Mirrokni", "Alexander Skopalik"], "author_detail": {"name": "Alexander Skopalik"}, "author": "Alexander Skopalik", "links": [{"href": "http://arxiv.org/abs/0902.0382v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0902.0382v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.GT", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.GT", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "cs.CC", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0902.0382v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/0902.0382v1", "arxiv_comment": null, "journal_reference": null, "doi": null, "fulltext": "On the Complexity of Nash Dynamics and Sink equilibria\nVahab S. Mirrokni\n\n\u2217\n\nAlexander Skopalik\n\n\u2020\n\narXiv:0902.0382v1 [cs.GT] 2 Feb 2009\n\nAbstract\nStudying Nash dynamics is an important approach for analyzing the outcome of games with\nrepeated selfish behavior of self-interested agents. Sink equilibria has been introduced by Goemans,\nMirrokni, and Vetta for studying social cost on Nash dynamics over pure strategies in games.\nHowever, they do not address the complexity of sink equilibria in these games. Recently, Fabrikant\nand Papadimitriou initiated the study of the complexity of Nash dynamics in two classes of games.\nIn order to completely understand the complexity of Nash dynamics in a variety of games, we study\nthe following three questions for various games: (i) given a state in game, can we verify if this state\nis in a sink equilibrium or not? (ii) given an instance of a game, can we verify if there exists any\nsink equilibrium other than pure Nash equilibria? and (iii) given an instance of a game, can we\nverify if there exists a pure Nash equilibrium (i.e, a sink equilibrium with one state)?\nIn this paper, we almost answer all of the above questions for a variety of classes of games\nwith succinct representation, including anonymous games, player-specific and weighted congestion\ngames, valid-utility games, and two-sided market games. In particular, for most of these problems,\nwe show that (i) it is PSPACE-complete to verify if a given state is in a sink equilibrium, (ii) it is\nNP-hard to verify if there exists a pure Nash equilibrium in the game or not, (iii) it is PSPACEcomplete to verify if there exists any sink equilibrium other than pure Nash equilibria. To solve\nthese problems, we illustrate general techniques that could be used to answer similar questions in\nother classes of games.\n\nKeywords: Nash equilibria, potential games, sink equilibria\n\n\u2217\n\nTheory Group, Microsoft Research, E-Mail: mirrokni@microsoft.com.\nDept. of Computer Science, RWTH Aachen, E-Mail: skopalik@cs.rwth-aachen.de. Research supported in part by\nthe German-Israeli Foundation.\n\u2020\n\n\f1\n\nIntroduction\n\nA standard approach in studying the outcome of a system involving self-interested behavior of agents\nis to investigate the Nash dynamics of the corresponding games. In Nash dynamics, agents repeatedly\nrespond to the current state of the game by playing a best-response strategy. Studying such dynamics\nis very important for understanding the behavior of a system throughout time, and the outcome of\nthe game after many repeated game play. Similar to the recent efforts in studying the complexity\nof game theoretic concepts such as mixed Nash equilibria [8, 4], and pure NE [10, 21], studying the\ncomplexity of Nash dynamics can help us better understand the outcome of a game.\nIn an attempt to study such dynamics for pure strategies, Goemans, Mirrokni, and Vetta [15]\nintroduced the concept of sink equilibria in games: sink equilibria are strongly connected components\nof a strategy profile graph associated with the game with no outgoing edges. Equivalently, sink\nequilibria characterize all states for which the probability of reaching that state after a sufficiently large\nrandom best-response sequence is nonzero. Also any random best-response sequence will converge to\na sink equilibrium with probability one. Moreover, sink equilibria generalize pure Nash equilibria in\nthat a pure Nash equilibrium is a single-state sink equilibrium of the game.\nGoemans et al. [15] studied sink equilibria for their social cost in two classes of games. However,\nthey did not consider the complexity of sink equilibria or Nash dynamics in those games. Recently,\nFabrikant and Papadimitriou [11] initiated the study of the complexity of sink equilibria. by studying\nthe problem of verifying if a state is in a sink equilibria for two classes of games. Extending on these\nideas, we formalize several questions related to Nash dynamics of various games and completely study\nthe complexity of the Nash dynamics and sink equilibria in these games.\nSink equilibria characterize all strategy profiles in the game with a nonzero probability of reaching\nthem after a long enough best-response walk. Therefore, given a strategy profile, in order to verify\nif there is a non-zero probability of reaching this state after a sufficiently long random best-response\nwalk we need to verify if this state is in a sink equilibrium or not. This problem has been considered\nby Fabrikant and Papadimitriou [11] for two classes of games, and is as follows:\nIn a Sink problem. Given an instance of a game and a strategy profile in this game, can we verify\nif this strategy profile belongs to any sink equilibria or not?\nFor a given state in a game, an interesting problem is to estimate the probability of reaching this\nstate after a long random best-response walk. Note that a hardness result for in a sink problem\nimplies that for a given state, even approximating this probability is a computationally hard problem,\n(since distinguishing the probability of zero and nonzero is hard). Fabrikant and Papadimitriou\nshowed that in a sink problem is PSPACE-hard for graphical games and a BGP next-hop routing\ngame [11]. We show that this problem is PSPACE-complete for weighted/player-specific congestion\ngames, valid-utility games, two-sided market games, and anonymous games. The proofs for all the\nabove games except anonymous games are similar and based on a reduction from halting problem of a\nspace bounded Turing machine. The proof for anonymous games has unique features and is different\nfrom the rest.\nGiven an instance of a game, it is very helpful to know if the random repeated self-interested actions\nof the agents in the game can cycle forever or such dynamics will converge to a pure Nash equilibria\nwith probability one. This problem is related to characterizing the structure of sink equilibria in a\ngame, and in particular the existence of non-singleton sink equilibria. Having such a sink equilibrium\nindicates that even random Nash dynamics may also converge to an everlasting cycle. As a result, we\nformalize the following problem in games:\nHas a Non-singleton Sink problem. Given an instance of a game, can we verify if this game\npossesses a non-singleton sink equilibrium, i.e., sink equilibria other than pure Nash equilibria.\n\n1\n\n\fPure Nash equilibria (if they exist) are local optima of the Nash dynamics. Other than the problem\nof computing a pure Nash equilibrium in various games, the problem of verifying if such equilibria\nexist has been studied for various classes of games. We complement the previous questions with the\nfollowing problem:\nHas a Singleton Sink problem. Given an instance of a game, can we verify if this game possesses\na pure Nash equilibrium (singleton sink equilibrium)?\nAnswering all the above questions for a game gives a thorough understanding of the complexity\nof Nash dynamics and the complexity of characterizing sink equilibria in that game.\nOur Results. We study the above four problems in a variety of games with succinct representation\nincluding player-specific and weighted congestion games, anonymous games, valid-utility games, and\ntwo-sided market games. All of these games are well-studied for their existence of pure Nash equilibria,\ncomplexity of mixed and pure NE, or/and their price of anarchy for different social functions [13, 19,\n18, 16, 6]. To solve these problems, we illustrate general techniques that could be used as tools to\nanswer similar questions for other classes of games.\nFabrikant and Papadimitriou showed that in a sink problem is PSPACE-hard for graphical games\nand a BGP next-hop routing game [11]. They posed this problem as an open question for weighted\ncongestion games, and valid-utility games. We show that this problem is PSPACE-complete for\nweighted/player-specific congestion games, valid-utility games, two-sided market games, and anonymous games. The proofs for all the above games except anonymous games are similar and based\non a reduction from halting problem of a space bounded Turing machine. The proof for anonymous\ngames has unique features and is different from the rest. The hardness of the in a sink problem in\nanonymous games is despite the fact that approximate pure Nash equilibria can be computed in these\ngames in polynomial time [?].\nFor Has a non-singleton sink problem, we prove that it is PSPACE-complete for weighted/playerspecific congestion games, valid-utility games, two-sided market games, and anonymous games. The\nreductions for Has a non-singleton sink problem extend the proofs for the in a sink problem.\nHas a singleton sink problem has been well-studied for all games in this paper except for\nvalid-utility games and two-sided market games. We show that has a singleton sink problem\nis NP-hard for these games as well. Our results for two-sided markets characterize the complexity\nof existence of a stable matching in many-to-one two-sided matching markets; an extensively studied\nproblem in the economics literature [13, 20, 17]. Existing results for many-to-one two-sided markets\ngive sufficient conditions for existence of stable matchings (or pure Nash equilibria) in different variants\nof the problem [13, 20, 17], but they have not explored the complexity of verifying the existence of\nstable matchings (or pure Nash equilibria) in these games.\nRelated Work. Prior to this paper, the Has a non-singleton sink problem has not been studied\nfor any of the above games. In a sink problem has been studied only for graphical games [11]. Has\nsingleton Sink problem, however, has been studied extensively for all the above games except validutility games and two-sided market games. In fact, it has been shown that has a singleton sink\nproblem is NP-hard for weighted congestion games and local-effect games[9], player-specific congestion\ngames [2], graphical games [11], and action-graph games [16]. For anonymous games it has been shown\nthat hat an approximate NE are computable in polynomial time[7] and that has a singleton sink\nis TC0 -complete[3].\nThere has been a recent significant progress in understanding the complexity of equilibria in games.\nThe complexity of mixed Nash equilibria is now well-understood by the recent results on PPAD-hardness of computing mixed NE[8, 4], and even for computing approximate mixed NE[5]. The complexity\nof pure Nash equilibria in various games (especially congestion games) have also been well-studied\nby recent results on PLS-completeness of computing a pure Nash equilibrium[10, 1], and even for\n\n2\n\n\fcomputing an approximate pure NE [21].\n\n2\n2.1\n\nPreliminaries\nGeneral Definitions\n\nStrategic games. A strategic game (or a normal-form game) \u039b =< N, (\u03a3i ), (ui ) > has a finite set\nN = {1, . . . , n} of players. Player i \u2208 N has a set \u03a3i of strategies (or strategies). The whole strategy\nset is \u03a3 = \u03a31 \u00d7* * *\u00d7\u03a3n and a strategy profile S \u2208 \u03a3 is also called a profile or state. The utility function\nof player i is ui : \u03a3 \u2192 R, which maps the joint strategy S \u2208 \u03a3 to a real number. Let S = (s1 , . . . , sn )\ndenote the profile of strategies taken by the players, and let s\u2212i = (s1 , . . . , si\u22121 , si+1 , . . . , sn ) denote the\nprofile of strategies taken by all players other than player i. Note that S = (si , s\u2212i ). An improvement\nmove s0i for a player i in a profile S is a move for which ui (s\u2212i , s0i ) \u2265 ui (S). A best response move\nSi00 for a player i in a profile S is an improvement move that has the maximum utility. Note that in\ncost minimizing games, each player i wants to minimize the cost ci (S) = \u2212ui (S) in strategy profile\nS. This type of games include congestion games with delay functions on edges which will be defined\nlater.\nNash equilibria (NE): A strategy profile S \u2208 \u03a3 is a pure Nash equilibrium if no player i \u2208 N can\nbenefit from unilaterally deviating from his strategy to another strategy, i.e., \u2200i \u2208 N \u2200s0i \u2208 \u03a3i :\nui (s\u2212i , s0i ) \u2264 ui (S). We can also define \u03b1-Nash equilibria as follows. For 1 > \u03b1 > 0, a state S is an\n\u03b1-Nash equilibrium if for every player i, ci (s\u2212i , s0i ) \u2265 (1 \u2212 \u03b1)ci (S) for all s0i \u2208 \u03a3i .\nState graph. Given any game \u039b, the state graph G(\u039b) is an arc-labeled directed graph as follows.\nEach vertex in the graph represents a joint strategy S. There is an arc from state S to state S 0 with\nlabel i iff there exists player i and strategy s0i \u2208 \u03a3i such that S 0 = (s\u2212i , s0i ), i.e., S 0 is obtained from\nS by a move of a single player i that improves his utility from S to S 0 .\nNash dynamics. A Nash dynamics or best-response dynamics is equivalent to a walk in the state\ngraph.\nSink equilibria. Given any game \u039b, a sink equilibrium is a subset of states T that form a strongly\nconnected component of the state graph such that there is no outgoing edge from states in T to any\nstate outside T . As a result, any pure Nash equilibrium of a game is a single-state sink equilibrium,\nand a game may have several sink equilibria.\n\n2.2\n\nDefinition of games\n\n(Unweighted) Congestion Games. An (unweighted) congestion game is defined by a tuple <\nN, E, (\u03a3i )i\u2208N , (de )e\u2208E > where E is a set of resources, \u03a3i \u2286 2E is the strategy space of player i, and\nde : N \u2192 Z is a delay function associated with resource e. For a strategy profile S = (s1 , . . . , sn ),\nwe define the congestion ne (S) on resource e by ne (S) = |{i|e \u2208 si }|, that is ne (S) is the number of\nplayers that selected an strategy containing\nP resource e in S. The cost (or delay) ci (S) of player i in a\nstrategy profile S is ci (S) = \u2212ui (S) = e\u2208si de (ne (S)).\nIn weighted congestion games, player i has weighted demand wi . In thisPgame, the congestion\n(load) on resource e in a state S, denoted by by le (S) is as follows le (S) = i|e\u2208si wi . The cost or\ndelay of players is defined the same way as the congestion games. A player-specific congestion game is\ndefined by a tuple < N, E, (\u03a3i )i\u2208N , (de,i )e\u2208E,i\u2208N > where E and \u03a3i \u2286 2E are the same as congestion\ngames, and de,i : N \u2192 Z is a delay function associated with resource e and player i. The congestion\nne (S) on resource e is defined the samePas congestion games. The cost (delay) ci (S) of player i in a\nstrategy profile S is ci (S) = \u2212ui (S) = e\u2208si de,i (ne (S)).\n\n3\n\n\fMany-to-one Two-sided Markets. We model the many-to-one two-sided market (X , Y) between\ntwo sides of active agents X and passive agents Y as a game G(X , Y) among active agents x \u2208 X .\nThe strategy set of each active agent x \u2208 X is a lower-ideal 1 family of subsets of passive agents Fx\nwhere Fx \u2286 2Y , i. e., an active agent x \u2208 X can play a subset sx \u2208 Fx of passive agents. Each agent\nx \u2208 X also has a preference (a.k.a social choice) over its strategies. This preference is capture by a\nutility function ux : 2Y \u2192 R which assigns a utility, ux (T ), to each subset T \u2286 Y. Each agent y \u2208 Y\nhas a strict preference list over the set of agents x \u2208 X that can play this set, i. e., x is preferred to x0\nby y iff uy (x) > uy (x0 ). We assume that uy (x) 6= uy (x0 ) for any two agents x and x0 . Given a vector\nof strategies S = (s1 , . . . , sn ) for active agents, agent y is matched to the best agent x \u2208 X in the\npreference list of agent y such that y \u2208 sx . In this case, we say that x is the winner of agent y, or\nequivalently, agent x wins agent y. The goal of each active agent x is to maximize the utility of the\nset of passive agents that she wins. Given a strategy profile S, let Tx (S) \u2286 sx be the set of passive\nagents that agent x wins. The utility of player x in strategy profile S is equal to ux (Tx (S)), the goal\nof x is to maximize this utility.\nIt is not see that pure Nash equilibria of the above game correspond to stable matchings for\nmany-to-one two-sided markets as defined by ...\nValid-utility Games. Here we briefly define the class of valid-utility games; see [22] for more details.\nIn valid-utility games, for each player i, there exists a ground set of markets Vi . We denote by V the\nunion of ground sets of all players, i.e., V = \u222ai\u2208U Vi . The feasible strategy set Fi of player i is a subset\nof the power set, 2Vi , of Vi . Thus, a strategy si of player i is a subset of Vi (si \u2286 Vi ). The empty set,\ndenoted \u2205i for player i, corresponds to player i taking no action.\nLet G(U, {Fi |i \u2208 U }, {ui ()|i \u2208 U }) be a non-cooperative strategic game where Fi \u2286 2Vi is a family of\nfeasible strategies for player i. Let V = \u222ai\u2208U Vi and let the social function be \u03b3 : \u03a0i\u2208U 2V \u2192 R+ \u222a {0}.\nThen G is a valid-utility game if it satisfies the following properties: (1) The social function \u03b3 is\nsubmodular and non-decreasing, (2) The utility of a player is at least the difference in the social\nfunction when the player participates versus when it does not participate. and (3) For any strategy\nprofile, the sum of the utilities of players should be less than or equal to the social function for that\nstrategy profile.\nThis framework encompasses a wide range of games including the facility location games, traffic\nrouting games, auctions [22], market sharing games [14], and distributed caching games [12]. In [22]\nit was shown that the price of anarchy (for mixed Nash equilibria) in valid-utility games is at most 2.\nAnonymous games. Anonymous game[6] are games in which players have the same strategy sets,\nbut different utilities for the same strategies; however, these utilities do not depend on the identity of\nthe other players, but only on the number of other players taking each action. An interesting subclass\nof these games is anonymous games with a constant-size strategy set in which the size of the strategy\nset of players is a fixed constant.\n\n3\n\nExistence of Pure Nash Equilibria\n\nIn this section, we study the Has a Pure problem for succinct games. This problem has been already\nconsidered and resolved for weighted congestion games [] and player-specific congestion games []. We\nresolve this problem for many-to-one two-sided markets and valid-utility games. The result for twosided markets imply that given an instance of the many-to-one stable matching problem, verifying if\nthere exists a stable matching is NP-hard.\n1\n\nA family F of subsets is lower-ideal if and only if for any subset S \u2208 F and S 0 \u2208 S, then S 0 \u2208 F.\n\n4\n\n\fTheorem 1. Has a singleton Sink is NP-hard for (i) uniform utility-based two-sided market games,\n(ii) many-to-one two-sided market games, and (iii) valid-utility games.\nProof. To prove NP-completeness, we give a reduction from the 3Sat problem. Given an instance of\nthe 3Sat problem, we construct an instance of the utility-based two-sided market game as follows:\nfor each variable xi , we put a player Xi with a one and a zero strategy. For each clause cj , we put two\nplayers Cj and Kj each with a one and a zero strategy. We construct the game such that Cj and Kj\nhave a cycle of best responses if and only if the clause is not satisfied. In other words, if the X-players\nchoose a strategy profile that satisfies all clauses, all clause players eventually reach a stable solution.\nThe zero strategy of Cj is {aj , bj } and the one strategy is {cj }. The zero strategy of Kj is {aj }\nand the one strategy is {bj } \u222a {rj,i |for all variablesxi in clause cj }. The a-markets have utility 305\nand prefer the K-players. The b-markets have utility 8 and prefer the C-players. The c-markets\nhave utility 310. The r-markets have utility 100 and prefer the X-players. Note that there is a best\nresponse cycle of Cj and Kj if and only if none of the three ri,j -markets is allocated by an X-player.\nThe zero strategy of a player Xi is {ri,j |xi \u2208 cj } \u222a {pi,j |x\u0304i \u2208 cj }. The one strategy of a player Xi\nis {ri,j |x\u0304i \u2208 cj } \u222a {pi,j |xi \u2208 cj }. The p-markets have utility 100. Note that both strategies have the\nsame utility for a X-player independent of the strategy profile of other players. Furthermore, Xi gets\nthe utility from ri,j , if and only if it satisfies clause cj ,\nThe above theorem implies that given an instance of the many-to-one stable matching problem,\nthe problem of verifying if this game has a stable matching or not is NP-hard. Known results in the\neconomic literature for many-to-one two-sided markets discuss necessary and sufficient conditions for\nexistence of stable matchings (or pure Nash equilibria) for different variants of two-sided markets [13,\n20, 17], however, before our results, the known results have not addressed the complexity of verifying\nthe existence of stable matchings (or pure Nash equilibria) given an instance of these markets.\n\n4\n\nSink Equilibria and Weighted Congestion Games\n\nIn this section, we study the complexity of the In a Sink and Has a Sink problem for weighted\ncongestion games. The interesting aspect of this proof is that we can use similar reductions for a\nvariety of games with succinct representation. Applying this proof on many examples shows the\nstrength of the proof technique.\nTheorem 2. In a Sink is PSPACE-hard for weighted congestion games.\nProof. We give a reduction from the space-bounded halting problem for Turing machines. First, we\nreduce an instance of this problem (a TM M , an input x and a tape bound t) to the halting problem\nfor a TM M 0 = (Q, \u03a3, b, \u0393, \u03b4, q0 , {qh }) which simulates M on x without its own input. Let \u03a3 = {0, 1}\nand \u0393 = {0, 1, b}. Starting from an empty tape, M 0 halts if and only if M rejects x . Furthermore, M 0\nuses additional tape cells and states for a counter that counts up to the total number of configurations\nof M . When M accepts, the counter overflows, or M exceeds the tape bound t, M 0 erases the whole\ntape, moves the head to the initial position and returns to state q0 . M 0 uses tape cells only right of its\ninitial position and at most t0 tape cells. Note that starting from every total configuration M 0 never\nstops only if M rejects x.\nTo complete the proof, we construct a congestion game GM 0 that simulates Turing machine M 0 .\nA strategy profile s which we define later is in a sink equilibrium if and only if M 0 runs forever. The\ngame consists of three types of configuration players, a transition player, a set of control players, and\na clock player. The first type of configuration players is a state player with |Q| strategies. The second\n\n5\n\n\ftype of configuration players is a position player for the position of the head with t0 strategies; and\nthe third type of configuration players is a set of cell players celli for each tape cell 0 \u2264 i \u2264 t0 with\nthe |\u0393| strategies for the content of the tape cell i. There is a simple bijective mapping between the\nstrategy profiles of the configuration players and the configurations of M 0 .\nThe game is constructed in such a way that every sequence of improvement steps can be divided\nin rounds. At the end of a round i, let ci be the configuration obtained from the strategy profile of\nthe configuration players. For every sequence of improvement steps, c1 ` c2 ` c3 ` . . . denotes the run\nof M 0 starting from c1 .\nWe now describe our construction in more details. The strategies of the configuration players are\ndescribed in Figure 1. Every strategy of a configuration player has two unique resources, an \u03b1 resource\nand a \u03b2 resource. The \u03b1 resources have delay 0 if allocated by one player and delay 1 otherwise. The\n\u03b2 resources have delay 0 if allocated by one player and delay M otherwise.\nstate player\nstrategies resources\nq\u2208Q\n\u03b1q\n\u03b2q\n\ndelays\n0/1\n0/M\n\nposition player\nstrategies resources\n0 \u2264 i \u2264 t0 \u03b1i\n\u03b2i\n\ndelays\n0/1\n0/M\n\nplayer celli with 0 \u2264 i \u2264 t0\nstrategies resources delays\n\u03c3\u2208\u0393\n\u03b1i\u03c3\n0/1\n\u03c3\n\u03b2i\n0/M\n\nFigure 1: Definition of strategies of the three types of configuration players\nPlayer ControlW,q,i,i0 ,\u03c3\nStrategy Resources\n0\nZero\n\u03b2W,q,i,i\n0 ,\u03c3\n0\n\u03b1W,q,i,i0 ,\u03c3\n1\nOne\n\u03b2W,q,i,i\n0 ,\u03c3\n1\n\u03b1W,q,i,i\n0 ,\u03c3\n\nDelays\n0/M\n0/1\n0/M\n0/1\n\nPlayer ControlV,q,i,i0 ,\u03c3\nStrategy Resources\n0\nZero\n\u03b2V,q,i,i\n0 ,\u03c3\n0\n\u03b1V,q,i,i0 ,\u03c3\n1\nOne\n\u03b2V,q,i,i\n0 ,\u03c3\n1\n\u03b1V,q,i,i\n0 ,\u03c3\n\nDelays\n0/M\n0/1\n0/M\n0/1\n\nControlD\nStrategy\nZero\nOne\n\nResources\n0\n\u03b2D\n0\n\u03b1D\n1\n\u03b2D\n1\n\u03b1D\n\nDelays\n0/M\n0/1\n0/M\n0/1\n\nFigure 2: Strategies of the control players, for each q \u2208 Q, 0 \u2264 i \u2264 n, i0 \u2208 {i \u2212 1, 1, i + 1}, and \u03c3 \u2208 \u0393\nEach control player has two strategies, Zero and One, which are constructed in the same manner\nlike strategies of configuration players (see Figure 2). The transition player has the following strategies\nWait, Done, Halt, and several strategies Readq,i,\u03c3 , Writeq0 ,i0 ,i,\u03c30 , and Verifyq0 ,i0 ,i,\u03c30 (for each i, i0 \u2208\n{1, . . . , t0 }, q, q 0 \u2208 Q, and \u03c3, \u03c3 0 \u2208 \u03a3). The details of theses strategies and the resources they contain\nare listed in Figure 3. The clock player has two strategies, Trigger and Wait. Trigger contains the\ntwo resources, TriggerMain and TriggerClock. The strategy Wait contains one resource with constant\ndelay of 110.\nLet us remark that each \u03b1- or \u03b2-resource is allocated by at most two players; the transition player\nand one of the configuration or control players. The general idea is that the improvement steps for\nthe transition player is determined by the strategy profile of the configuration and control players.\nThat is, the transition player never deviates to a strategy that contains a \u03b2-resource which is allocated\nby another player. On the other hand, the transition player determines the improvement steps for\nconfiguration and control players if he allocates \u03b1-resources. Note that each \u03b1-resource is associated\nwith exactly one strategy of exactly one configuration or control player.\nNow, we are ready to describe the aforementioned sequence of improvement steps that corresponds\nto one round in more details. Consider any strategy profile in which the clock players are on Trigger,\nthe transition player is on Wait and all control players except controlD are on One. Let q be the\nstrategy of the state player, i the strategy of the position player and \u03c30 , . . . , \u03c3t0 the strategies played\n\n6\n\n\fStrategy\nWait\n\nReadq,i,\u03c3\nfor each q \u2208 Q,\n0 \u2264 i \u2264 t0 and \u03c3 \u2208 \u0393\n\nW riteq0 ,i0 ,i,\u03c30\nfor each q 0 \u2208 Q, 0 \u2264 i \u2264 t0 ,\ni0 \u2208 {i \u2212 1, i, i + 1},\nand \u03c3 0 \u2208 \u0393\n\nV erif yq0 ,i0 ,i,\u03c30\nfor each q 0 \u2208 Q, 0 \u2264 i \u2264 t0 ,\ni0 \u2208 {i \u2212 1, i, i + 1},\nand \u03c3 0 \u2208 \u0393\n\nDone\n\nHalt\n\nResources\n1\n1 0 0\n0\n0 0\n0\n\u03b2W,q\n0 ,i0 ,i,\u03c3 0 , \u03b2V q , i , i, \u03c3 for all q , i , i, \u03c3\n1\n\u03b1D\nTriggerMain\n\u03b2 p for all p \u2208 Q \\ q\n\u03b2 j for all j 6= i\n0\n\u03b2i\u03c3 for all \u03c3 0 \u2208 \u0393 \\ \u03c3\n1\n\u03b2D\n0\n0\n0\n0\n\u03b1W,q\n0 ,i0 ,i,\u03c3 0 with \u03b4(q, \u03c3) = (q , \u03c3 , d) and i = i + d\nN.N.\n\u03b1p for all p \u2208 Q0 \\ q 0\n\u03b1j for all j 6= i0\n\u03b1i\u03c3 for all \u03c3 \u2208 \u0393 \\ \u03c3 0\n0\n\u03b1V,q\n0 ,i0 ,i,\u03c3 0\n0\n\u03b2W,q0 ,i0 ,i,\u03c30\nN.N.\n\u03b2 p for all p \u2208 Q \\ q 0\n\u03b2 j for all j 6= i0\n\u03b2i\u03c3 for all \u03c3 \u2208 \u0393 \\ \u03c3 0\n0\n\u03b2V,q\n0 ,i0 ,i,\u03c3 0\n0\n\u03b1D\nN.N.\ntriggerClock\n0\n\u03b2D\n1\n1\n0 0\n0\n\u03b1W,q\n0 ,i0 ,i,\u03c3 0 , \u03b1V,q 0 ,i0 ,i,\u03c3 0 for all q , i , i, \u03c3\nN.N.\n\u03b2 q for all q \u2208 Q \\ qh\n\nDelays\n0/M\n0/1\n0/100/100\n0/M\n0/M\n0/M\n0/M\n0/1\n80\n0/1\n0/1\n0/1\n0/1\n0/M\n60\n0/M\n0/M\n0/M\n0/M\n0/1\n40\n0/0/20\n0/M\n0/1\n20\n0/M\n\nFigure 3: Definition of strategies of the transition player. Resources that are denoted by N.N. are\nused by the transition player only and have a constant delay.\nby the players cell0 , . . . , cellt0 . Figure 4 describes the sequence of improvement steps emerging from\nthis strategy profile. The strategy profile at the end of the round differs from the initial one only in\nthe choices of the configuration players. The deviations of the configuration players corresponds to a\nstep of the Turing machine M 0 . Note that this sequence is essentially unique as there are no other\nimproving deviations. If and only if the state player is on qh , the transition player may deviate to the\nstrategy Halt. This is a Nash equilibrium of GM 0 . Now let s be a strategy profile in which the clock\nplayers is on Trigger, the transition player on Wait, and all control players except controlD on One.\nLet the configuration players' choice in s correspond to the initial configuration of M 0 . Then, s is in\na sink equilibrium if and only if M 0 does not halt.\nWe now consider the problem Has a non-singleton Sink for weighted congestion games.\nTheorem 3. Has a non-singleton Sink is PSPACE-hard for weighted congestion games.\nThis results follows from the proof of Theorem 2 and the following Lemma. The lemma implies\nthat there is at most one unique sink equilibrium in the constructed game.\n\n7\n\n\f(1)\n(2)\n(3)\n(4)\n(5)\n(6)\n(7)\n(8)\n(9)\n(10)\n\nThe transition player deviates from Wait to Readq,i,\u03c3i .\nPlayer controlW,q0 ,i0 ,i,\u03c30 deviates to Zero.\nThe transition player deviates to Writeq0 ,i0 ,i,\u03c30 .\nThe configuration players deviate to the new configuration\nand the player controlV,q0 ,i0 ,i,\u03c30 deviates to Zero.\nThe transition player deviates to Verifyq0 ,i0 ,i,\u03c30 .\nThe player controlD deviates to One.\nThe transition player deviates to Done.\nThe clock player deviates to Wait and\nthe controll players except controlD deviate to Zero\nThe transition player deviates to Wait.\nThe clock player deviates to Trigger and\nthe player controlD deviates to Zero\nFigure 4: Description of a round.\n\nLemma 4. Every Sink equilibrium contains a strategy profile in which the clock player is on Trigger,\nthe main player on Wait and all controll players on their Zero strategy.\nProof. If no player has delay M or greater, the game converges as described in Figure 4 and eventually\nreaches a strategy profile in which the clock player is on Trigger, the main player on Wait and all\ncontroll players on their Zero strategy. Note that no strategy profile with a player having delay M or\ngreater is reachable. If players have delay of M or greater, there is a sequence of improvement steps\nsuch that no player has delay of M or more, e.g. each control or configuration player with delay of\nM changes to another strategy.\nThus, every sink equilibrium also contains the strategy profile that corresponds to the initial\nconfiguration of M 0 . Therefore, there is a unique sink equilibrium if and only if M rejects x.\n\n5\n\nSink Equilibria and Player-Specific Congestion Games\n\nTheorem 5. In a Sink is PSPACE-hard for player-specific congestion games.\nOne can easily replace the clock player in the construction which is the only player with nonuniform weight by a player with weight 1 and modify the (player-specific) delay functions as follows.\nFor the transition player the resource TriggerMain has delay 0 if one player allocates it and delay 100\notherwise. For the clock player the resource TriggerMain has always delay 100. The delay functions\nof the resource TriggerClock is identical for both players. It has delay 0 if one player allocates the\nresource and delay 20 for two or more players. For each strategy profile the delay for each player is\nidentical to the delay in the previous example.\nTheorem 6. Has a non-singleton Sink is PSPACE-hard for player-specific congestion games.\nProof. This result follows by the same argument as for Theorem 3.\n\n8\n\n\f6\n\nSink Equilibria and Anonymous Games\n\nNext, we consider anonymous games with constant-size strategy set and show that in a sink for this\ngame is also PSPACE-complete.\nTheorem 7. In a Sink is PSPACE-hard for anonymous games with constant-size strategy sets.\nWe give a reduction from the halting problem of a space bounded Turing machine M 0 as defined\nin the proof of Theorem 2. Additionally, we assume that states of M 0 are denoted by q 0 , . . . , qm where\nqm is the halting state. We construct an anonymous game with a constant number of strategies. Each\nplayer has a set of (allowed) strategies. Every strategy that is not allowed always has utility 0. The\nonly other utility values in the game are 1 and 2. Given a strategy profile s = (s1 , . . . , sk ), let |si |\ndenotes the number of players that play strategy si .\nThe game consists of the three types of configuration players and five types of auxiliary players and\ntwo control players. The strategy choices of the configuration players can be mapped to configurations\nof the TM M 0 . Every sequence of improvement steps can be partitioned into rounds. Each round\nsimulates one step of M 0 . At the end of a round i, let ci be the configuration obtained from the strategy\nprofile of the configuration players. For every sequence of improvement steps, c1 ` c2 ` c3 ` . . . equals\nthe run of M 0 starting from c1 .\nWe first describe the configuration players before we describe the remaining players and the process\nthat simulates one step of M 0 . The first type of configuration players are |Q| identical state players\nthat choose between the two actions state1 and state0 . For j = |state1 | corresponds to M 0 being\nin state qj . The second type are t0 identical position players that choose between the two actions\nposition1 and position0 . For p = |position1 | corresponds to the head of M 0 being in position p. The\nthird type are the cell players cell0 , . . . ,cellt0 which choose between the actions cell0 , cell1 , cellb , and\nchange. Unlike the previous two types of players, the cell players are non-identical, i.e., each player has\na different payoff function. For each 1 \u2264 i \u2264 t0 , player celli on action cell0 (cell1 or cellb ) corresponds\nto the fact that tape cell i contains the symbol 0 (1 or blank).\nPlayers\ncell1 , . . . , cellt0\nposition1 , . . . , positiont0\nstate1 , . . . , statem\ntape1 , . . . , tapet0\nsymbol\nnew-sym\nnew-pos1 , . . . , new-post0\nnew-state1 , . . . , new-statem\ntransition1\ntransition2\n\nallowed strategies\ncell0 ,cell1 , cellb , change\nposition1 , position0\nstate1 , state0\ntape0 , tape1 , tapeb\nsymbol0 ,symbol1 ,symbolb\nnew-sym0 ,new-sym1 , new-symb\nnew-pos1 , new-pos0\nnew-state1 , new-state0\ninit, tape-change, eval-tape, new-sym, new-sym2, new-pos,\nnew-pos2, new-state, new-state2, halt\nXinit, Xtape-change, Xeval-tape, Xfnew-sym, Xnew-sym2,\nXnew-pos Xnew-pos2, Xnew-state, Xnew-state2\n\nFigure 5: Players and their strategies\nThere are five types of auxiliary players and two control players. All players and their allowed\nstrategies are listed in Figure 5. The utility functions for each player are described in Appendix B.\n\n9\n\n\fThe players tape1 , . . . , tapet0 have identical payoff functions. They are used to evaluate symbol at the\ncurrent position. The player symbol saves this symbol. The players new-sym, new-pos1 , . . . , new-post0 ,\nnew-state1 , . . . , new-statem calculate the changes to the configuration. The control players ensure that\nstrategy changes happen in a certain order that corresponds to one step.\nLemma 8. Let c be a configuration of M 0 and c0 the successor configuration. Every sequence of\nimprovement steps from a strategy profile in which the configuration players play corresponding to c\nand the first control player is on init, reaches a strategy profile in which the configuration players play\ncorresponding to c0 and the first control player is on init.\nProof. We now describe this sequence of improvement steps which we call a round. It is listed in\nFigure 1 in detail. One can easily check for each of the strategy profiles that the next one is essentially\nunique.\nIn a round, the first control player successively changes through his strategies (c.f. steps (2),(4),...).\nThe second control player follows his choices in his corresponding strategies. By construction of the\npayoff function, this ensures that the control players only change their strategies in a certain order.\nEach of these steps of the first control player is interrupted by improvement steps of subsets of\nconfiguration or auxiliary players. The utility functions (cf. Figure 7) are designed in such a way that\nthese improvement steps are possible if and only if the control player plays the corresponding strategy.\nAdditionally, the control player may only continue with his next step after these other player have\nchanged their strategies (cf. Figure 8) .\nWe now describe the improvement steps of the configuration and auxiliary players only. Consider\nany strategy profile of the configuration players and assume the first control player is on init (strategy\nprofile (1) in Figure 1 in Appendix B. The t0 tape players change to a strategy profile in that the\nnumber of players on tape0 , tape1 , and tapeb equals the number of players on cell0 , cell1 , and cellb (2).\nThe player celli with i = |positioni | changes to his strategy to change (4).The symbol player changes\nto symbol0 , symbol1 , or symbolb depending on which strategy was left by the player celli (6). This\ncan be coded into the utility function by evaluating the difference of number of players in the cell and\n0\ntape strategies. The player new-symbol changes to the strategy new-symbol\u03c3 where \u03c3 0 corresponds to\nthe new symbol (8). This can be coded as a function as from number of players on symbol0 , symbol1 ,\n0\nsymbolb , and state1 . The player celli changes to the strategy cell\u03c3 (10). Exactly i0 players choose\nnew-pos1 where i0 is the new position of M 0 (12). The players position change their strategies such\nthat |position1 | = |new-pos1 | = i0 (14). Exactly q 0 players new-state choose new-state1 where qq0 is the\nnew state of M 0 (16). The players state change their strategies such that |state1 | = |new-state1 | = q 0\n(18). The configuration players' strategy profile now corresponds to the new configuration after one\nstep of M 0 .\nTheorem 9. Has a non-singleton Sink is PSPACE-hard for anonymous games.\nProof. By construction of M 0 and the proof of Theorem 7, it suffices to show that every infinite\nsequence of improvement steps contains a strategy profile with player control1 on init, i.e. a profile\nlisted in the first row of Table 1.\nThe strategy changes of control1 have to occur in the same order as listed in Table 1. Therefore,\nevery sequence with infinite strategy changes of control1 contains a profile with control1 on init. We,\ntherefore, show that there is no infinite sequence that contains no strategy change of control1. Thus,\nfix any strategy choice for player control1. Observe that the utility functions of the remaining players\n(cf. Figure 7) do not allow an infinite sequence.\n\n10\n\n\f7\n\nSink Equilibria in other Games\n\nTheorem 10. In a Sink is PSPACE-hard for (i) uniform utility-based two-sided market games, (ii)\nmany-to-one two-sided market games, and (iii) valid-utility games.\nTheorem 11. Has a non-singleton Sink is PSPACE-hard for (i) uniform utility-based two-sided\nmarket games, (ii) many-to-one two-sided market games, and (iii) valid-utility games.\nThe proof is a rework of the proof for Theorem 2 and is shifted to Appendix A. The Nash dynamics\nof the uniform utility-based two-sided market game that we describe there is isomorphic to the Nash\ndynamics of the congestion game in the proof for Theorem 2.\n\nReferences\n[1] H. Ackermann, H. R\u00f6glin, and B. V\u00f6cking. Pure Nash equilibria in player-specific and weighted\ncongestion games. In Proceedings of the 2nd International Workshop on Internet and Network\nEconomics (WINE), pages 50\u201361, 2006.\n[2] Heiner Ackermann and Alexander Skopalik. On the complexity of pure Nash equilibria in playerspecific network congestion games. In In Proceedings of 3nd International Workshop on Internet\nand Network Economics (WINE), pages 419\u2013430, 2007.\n[3] Felix Brandt, Felix A. Fischer, and Markus Holzer. Symmetries and the complexity of pure nash\nequilibrium. In Wolfgang Thomas and Pascal Weil, editors, STACS, volume 4393 of Lecture Notes\nin Computer Science, pages 212\u2013223. Springer, 2007.\n[4] Xi Chen and Xiaotie Deng. Settling the complexity of two-player nash equilibrium. In FOCS,\npages 261\u2013272, 2006.\n[5] Xi Chen, Xiaotie Deng, and Shang-Hua Teng. Computing nash equilibria: Approximation and\nsmoothed complexity. In FOCS, pages 603\u2013612, 2006.\n[6] C. Daskalakis and C. H. Papadimitriou. Computing equilibria in anonymous games. In IEEE\nSymposium on Foundations of Computer Science, 2007.\n[7] C. Daskalakis and C. H. Papadimitriou. On the exhaustive algorithm for nash equilibria. page\nUnpublished Manuscript, 2007.\n[8] Constantinos Daskalakis, Paul W. Goldberg, and Christos H. Papadimitriou. The complexity of\ncomputing a nash equilibrium. In STOC, pages 71\u201378, 2006.\n[9] Juliane Dunkel and Andreas S. Schulz. On the complexity of pure-strategy Nash equilibria in\ncongestion and local-effect games. In In Proceedings of 2nd International Workshop on Internet\nand Network Economics (WINE), pages 62\u201373, 2006.\n[10] A. Fabrikant, C. Papadimitriou, and K. Talwar. On the complexity of pure equilibria. In Proceedings of the 36th Annual ACM Symposium on Theory of Computing (STOC), pages 604\u2013612,\n2004.\n\n11\n\n\f[11] Alex Fabrikant and Christos H. Papadimitriou. The complexity of game dynamics: Bgp oscillations, sink equilibria, and beyond. In SODA '08: Proceedings of the nineteenth annual ACMSIAM symposium on Discrete algorithms, pages 844\u2013853, Philadelphia, PA, USA, 2008. Society\nfor Industrial and Applied Mathematics.\n[12] L. Fleischer, M. Goemans, V. S. Mirrokni, and M. Sviridenko. Tight approximation algorithms\nfor maximum general assignment problems. In Proceedings of the 16th Annual ACM\u2013SIAM\nSymposium on Discrete Algorithms (SODA), pages 611\u2013620, 2006.\n[13] D. Gale and L. Shapley. College admissions and the stability of marriage. American Mathematical\nMonthly, 69:9\u201315, 1962.\n[14] M. Goemans, L. Li, V. S. Mirrokni, and M. Thottan. Market sharing games applied to content\ndistribution in ad-hoc networks. In Proceedings of the 5th ACM International Symposium on\nMobile Ad Hoc Networking and Computing (MobiHoc), pages 1020\u20131033, 2004.\n[15] M. Goemans, V. S. Mirrokni, and A. Vetta. Sink equilibria and convergence. In FOCS, 2005.\n[16] Albert Xin Jiang and Kevin Leyton-Brown. Computing pure nash equilibria in symmetric ActionGraph Games. In Association for the Advancement of Artificial Intelligence (AAAI), pages 79\u201385,\n2007.\n[17] F. Kojima and \u00dc. Unver. Random paths to pairwise stability in many-to-many matching problems: a study on market equilibration. International Journal of Game Theory, 2006.\n[18] I. Milchtaich. Congestion games with player-specific payoff functions. Games and Economics\nBehavior, 13:111\u2013124, 1996.\n[19] R. W. Rosenthal. A class of games possessing pure-strategy Nash equilibria. International Journal\nof Game Theory, 2:65\u201367, 1973.\n[20] A. E. Roth and J. H. Vande Vate. Random paths to stability in two-sided matching. Econometrica,\n58(6):1475\u20131480, 1990.\n[21] Alexander Skopalik and Berthold V\u00f6cking. Inapproximability of pure Nash equilibria. In STOC\n'08: Proceedings of the 40th annual ACM symposium on Theory of computing, pages 355\u2013364,\nNew York, NY, USA, 2008. ACM.\n[22] A. Vetta. Nash equilibria in competitive societies, with applications to facility location, traffic\nrouting and auctions. In 43rd Symp. on Foundations of Computer Science (FOCS), pages 416\u2013\n425, 2002.\n\n12\n\n\fA\n\nProof of Theorem 10\n\nThe Nash dynamics of the uniform utility-based two-sided market game that we describe here is\nisomorphic to the Nash dynamics of the congestion game in the proof for Theorem 2. Thus, all\nproperties easily transfer. The strategies of the transition player and the preferences of the markets\ncan be found in Figure 6. The strategies of the remaining players can be obtained from the previous\nproof.\nStrategy\nWait\n\nReadq,i,\u03c3\nfor each q \u2208 Q,\n0 \u2264 i \u2264 t0 and \u03c3 \u2208 \u0393\n\nW riteq0 ,i0 ,i,\u03c30\nfor each q 0 \u2208 Q, 0 \u2264 i \u2264 t0 ,\ni0 \u2208 {i \u2212 1, i, i + 1},\nand \u03c3 0 \u2208 \u0393\n\nV erif yq0 ,i0 ,i,\u03c30\nfor each q 0 \u2208 Q, 0 \u2264 i \u2264 t0 ,\ni0 \u2208 {i \u2212 1, i, i + 1},\nand \u03c3 0 \u2208 \u0393\n\nDone\n\nHalt\n\nMarkets\n1\n0 0\n0\n\u03b2W,q\n0 ,i0 ,i,\u03c3 0 for all q , i , i, \u03c3\n1\n0\n0\n0\n0\n0\n\u03b2V q , i , i, \u03c3 for all q , i , i, \u03c3 0\n1\n\u03b1D\nTriggerMain\n\u03b2 p for all p \u2208 Q \\ q\n\u03b2 j for all j 6= i\n0\n\u03b2i\u03c3 for all \u03c3 0 \u2208 \u0393 \\ \u03c3\n1\n\u03b2D\n0\n0\n0\n\u03b1W,q\n0 ,i0 ,i,\u03c3 0 with \u03b4(q, \u03c3) = (q , \u03c3 , d)\nand i0 = i + d\nN.N.\n\u03b1p for all p \u2208 Q0 \\ q 0\n\u03b1j for all j 6= i0\n\u03b1i\u03c3 for all \u03c3 \u2208 \u0393 \\ \u03c3 0\n0\n\u03b1V,q\n0 ,i0 ,i,\u03c3 0\n0\n\u03b2W,q0 ,i0 ,i,\u03c30\nN.N.\n\u03b2 p for all p \u2208 Q \\ q 0\n\u03b2 j for all j 6= i0\n\u03b2i\u03c3 for all \u03c3 \u2208 \u0393 \\ \u03c3 0\n0\n\u03b2V,q\n0 ,i0 ,i,\u03c3 0\n0\n\u03b1D\nN.N.\ntriggerClock\n0\n\u03b2D\n0 0\n0\n1\n\u03b1W,q\n0 ,i0 ,i,\u03c3 0 for all q , i , i, \u03c3\n1\n0\n0\n0\n\u03b1V,q0 ,i0 ,i,\u03c30 for all q , i , i, \u03c3\nN.N.\n\u03b2 q for all q \u2208 Q \\ qh\nN.N.\n\nUtilities (Preference)\nM (ControlW,q0 ,i0 ,i,\u03c30 , transition player)\nM (ControlV,q0 ,i0 ,i,\u03c30 , transition player)\n1 (transition player, ControlD )\n100 (clock player, transition player)\nM (state player, transition player)\nM (position player, transition player)\nM (celli , transition player)\nM (ControlD , transition player)\n1 (transition player,ControlW,q0 ,i0 ,i,\u03c30 )\nN \u2212 (|Q| + t0 + |\u0393| \u2212 1)M + 20\n1 (transition player, state player)\n1 (transition player, position player)\n1 (transition player, celli\n1 (transition player, ControlV,q0 ,i0 ,i,\u03c30 )\nM (ControlW,q0 ,i0 ,i,\u03c30 ,transition player)\nN \u2212 M + 40\nM (state player, transition player)\nM (position player, transition player)\nM (celli , transition player)\nM (ControlV,q0 ,i0 ,i,\u03c30 ,transition player)\n1 (transition player, ControlD )\nN \u2212 (|Q| + t0 + |\u0393| \u2212 1)M + 60\n80 (transition player, clock player)\nM (ControlD , transition player)\n1 (transition player, ControlW,q0 ,i0 ,i,\u03c30 )\n1 (transition player, ControlV,q0 ,i0 ,i,\u03c30 )\nN \u2212 M + 20\nM (state player, transition player)\nN \u2212M\n\nFigure 6: Strategies of the transition players. Markets denoted by N.N. are used by the transition\nplayers only. Let N = |Q|(t + 1)6|\u0393|M\n.\n\n13\n\n\fB\n\nDetails of the proof of Theorem 7\n\nPlayer\ncelli\n\ntapei\n\nsymbol\n\nnew-sym\n\nnew-pos\nnew-state\nposition\nstate\nhalt\n\nstrategy\nchange\ncell0\ncell1\ncellb\ntape0\ntape1\ntapeb\nsymbol0\nsymbol1\nsymbolb\nnew-sym0\nnew-sym1\nnew-symb\nnew-pos1\nnew-pos0\nnew-state1\nnew-state0\nposition1\nposition0\nstate1\nstate0\n|state1 | = m\n\npartitions with utility 2\n|tape-change| =\n6 0 and |position1 | = i\n|new-tape| =\n6 0 and |new-sym0 | > 0\n|new-tape| =\n6 0 and |new-sym1 | > 0\n|new-tape| =\n6 0 and |new-symb | > 0\n|init| =\n6 0 and |cell0 | > |tape0 |\n|init| =\n6 0 and |cell1 | > |tape1 |\n|init| =\n6 0 and |cellb | > |tapeb |\n|eval-tape| =\n6 0 and |cell0 |-|tape0 | < 0\n|eval-tape| =\n6 0 and |cell1 |-|tape1 | < 0\n|eval-tape| =\n6 0 and |cellb |-|tapeb | < 0\n|new-symbol| =\n6 0 and if 0 is new symbol\n|new-symbol| =\n6 0 and if 1 is new symbol\n|new-symbol| =\n6 0 and if b is new symbol\n|new-pos| =\n6 0 and |new-pos1 | < new position\n|new-pos| =\n6 0 and |new-pos1 | > new position\n|new-state| =\n6 0 and |new-state1 | > new state\n|new-state| =\n6 0 and |new-state1 | < new state\n|new-pos2| =\n6 0 and |position1 | < |new-pos1 |\n|new-pos2| =\n6 0 and |position1 | > |new-pos1 |\n|new-state2| =\n6 0 and |state1 | < |new-state1 |\n|new-state2| =\n6 0 and |state1 | > |new-state1 |\n\nFigure 7: The strategy partition combinations are listed that induce utility 2. Note that the new\nsymbol, new position, and new state can be coded as a function of |symbol0 |,|symbol1 |,|symbolb |, and\n|state1 |.\n\n14\n\n\fstrategy\ntape-change\neval-tape\nnew-sym\nnew-sym2\nnew-pos\nnew-pos2\nnew-state\nnew-state2\ninit\nstop\n\npartitions with utility 2\n|Xinit| > 0 and |cell0 | = |tape0 | and |cell1 | = |tape1 |\nand |cellb | = |tapeb |\n|Xtape-change| > 0 and |cell-change| = 1\n|Xeval-tape| > 0 and |cell0 | + |symbol0 | = |tape0 | and |cell1 | + |symbol1 | = |tape1 |\nand |cellb | + |symbolb | = |tapeb |\n0\n|Xnew-sym| > 0 and |new-sym\u03c3 | = 1 for \u03c3 0 = new symbol\n|Xnew-sym2| > 0 and |change| = 0\n|Xnew-pos| > 0 and |new-pos1 | = new position\n|Xnew-pos2| > 0 and d |position1 | = |new-pos1 |\n|Xnew-state| > 0 and |new-state1 | = new state\n|Xnew-state2| > 0 and |state1 | = |new-state1 |\n|position1 | = m\n\nFigure 8: The strategy/partition combinations of the first control player are listed that induce utility\nof 2.\n\nstrategy\nXinit\nXtape-change\nXeval-tape\nXnew-sym\nXnew-sym2\nXnew-pos\nXnew-pos2\nXnew-state\nXnew-state2\n\npartitions with utility 2\n|init| > 0\n|tape-change| > 0\n|eval-tape| > 0\n|new-sym| > 0\n|new-sym2| > 0\n|new-pos| > 0\n|new-pos2| > 0\n|new-state| > 0\n|new-state2| > 0\n\nFigure 9: The strategy/partition combinations of the second control player that induce utility of 2.\n\n15\n\n\f16\n\nConfiguration players\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3i , \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3i , \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3i , \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , change, \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , change, \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , change, \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , change, \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , change, \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , change, \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3 0 , \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3 0 , \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3 0 , \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3 0 , \u03c3i+1 . . . \u03c3t0 ), q, i\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3 0 , \u03c3i+1 . . . \u03c3t0 ), q, i0\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3 0 , \u03c3i+1 . . . \u03c3t0 ), q, i0\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3 0 , \u03c3i+1 . . . \u03c3t0 ), q, i0\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3 0 , \u03c3i+1 . . . \u03c3t0 ), q, i0\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3 0 , \u03c3i+1 . . . \u03c3t0 ), q 0 , i0\n(\u03c31 , . . . , \u03c3i\u22121 , \u03c3 0 , \u03c3i+1 . . . \u03c3t0 ), q 0 , i0\n\ntape\n*\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\np0 , p1 , pb\n\nsymbol\n*\n*\n*\n\u2217\n\u2217\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\u03c3i\n\nnew-sym\n*\n*\n*\n*\n*\n*\n*\n\u03c30\n\u03c30\n\u03c30\n\u03c30\n\u03c30\n\u03c30\n\u03c30\n\u03c30\n\u03c30\n\u03c30\n\u03c30\n\u03c30\n\nnew-pos\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\ni0\ni0\ni0\ni0\ni0\ni0\ni0\ni0\n\nnew-state\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\nq0\nq0\nq0\nq0\n\ncontrol1\ninit\ninit\ntape-change\ntape-change\neval-tape\neval-tape\nnew-sym\nnew-sym\nnew-sym2\nnew-sym2\nnew-pos\nnew-pos\nnew-pos2\nnew-pos2\nnew-state\nnew-state\nnew-state2\nnew-state2\ninit\n\ncontrol2\n*\nXinit\nXinit\nXtape-change\nXtape-change\nXeval-tape\nXeval-tape\nXnew-sym\nXnew-sym\nXnew-sym2\nXnew-sym\nXnew-pos\nXnew-pos\nXnew-pos2\nXnew-pos2\nXnew-state\nXnew-state\nXnew-state2\nXnew-state2\n\nTable 1: This figure shows the sequence of strategy profiles during one round. A strategy profile is described es follows. The strategy\n0\nprofile of the cell players is given as a vector \u03c3 \u2208 {0, 1, b, change}t where \u03c3i denotes strategy cell\u03c3i for player celli . For the state,\nposition, new-pos, new-state players, we give the number of players on state1 , position1 , new-pos1 , and new-state1 , respectively. The\nstrategy profile of the tape players is described by a vector p \u2208 {0, . . . , t0 }3 that denotes the number of players on tape0 ,tape1 , and\ntapeb , respectively. For the players symbol and new-sym, \u03c3 denotes strategy symbol\u03c3 and new-sym\u03c3 , respectively. The round starts\nwith each player celli on \u03c3i \u2208 {0, 1, b} , q state players on state1 , i position players on position1 and the first control player on init.\nThe underlined strategies indicate the players that have an incentive to deviate from their current strategies.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\f"}