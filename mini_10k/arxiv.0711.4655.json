{"id": "http://arxiv.org/abs/0711.4655v1", "guidislink": true, "updated": "2007-11-29T17:28:40Z", "updated_parsed": [2007, 11, 29, 17, 28, 40, 3, 333, 0], "published": "2007-11-29T17:28:40Z", "published_parsed": [2007, 11, 29, 17, 28, 40, 3, 333, 0], "title": "GRAvitational COSmology (GRACOS) code release announcement, for version\n  1.0.1a9", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0711.0599%2C0711.2435%2C0711.2838%2C0711.2327%2C0711.4232%2C0711.4299%2C0711.1340%2C0711.4176%2C0711.3699%2C0711.4355%2C0711.0301%2C0711.4454%2C0711.4435%2C0711.1296%2C0711.2973%2C0711.0152%2C0711.0457%2C0711.4904%2C0711.1759%2C0711.1134%2C0711.2075%2C0711.2099%2C0711.4005%2C0711.0284%2C0711.4516%2C0711.3694%2C0711.1303%2C0711.2165%2C0711.0015%2C0711.2739%2C0711.2162%2C0711.3539%2C0711.0672%2C0711.1460%2C0711.4655%2C0711.4195%2C0711.1379%2C0711.4132%2C0711.0548%2C0711.0875%2C0711.3232%2C0711.3323%2C0711.1951%2C0711.0203%2C0711.0593%2C0711.0171%2C0711.3400%2C0711.2622%2C0711.4842%2C0711.4895%2C0711.4670%2C0711.2154%2C0711.2780%2C0711.4318%2C0711.3661%2C0711.4472%2C0711.0270%2C0711.2407%2C0711.4386%2C0711.3139%2C0711.1917%2C0711.4671%2C0711.3906%2C0711.0847%2C0711.1829%2C0711.4118%2C0711.0661%2C0711.2831%2C0711.2668%2C0711.1418%2C0711.0720%2C0711.4040%2C0711.1113%2C0711.1350%2C0711.3970%2C0711.3001%2C0711.1737%2C0711.3346%2C0711.1453%2C0711.3905%2C0711.0985%2C0711.4105%2C0711.1786%2C0711.4943%2C0711.4882%2C0711.2083%2C0711.1487%2C0711.1606%2C0711.4229%2C0711.3143%2C0711.3834%2C0711.3769%2C0711.2499%2C0711.2585%2C0711.3233%2C0711.4428%2C0711.2248%2C0711.4010%2C0711.0259%2C0711.3354%2C0711.3874&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "GRAvitational COSmology (GRACOS) code release announcement, for version\n  1.0.1a9"}, "summary": "This is to announce a recent release of version 1.0.1a9 of parallel load\nbalanced adaptive P3M cosmological N-body code named GRACOS. The code has been\nunder development over years and is available for the download at\nhttp://www.gracos.org. GRACOS features: embedded script environment,\ncosmological initial conditions generator including non-gaussian initial\nconditions, particle data imager, mass density power spectrum estimator,\nparticle position and velocity integrator with a choice between KDK and DKD\nintegration schemes with Plummer force softening, file input and output with\nfour supported serial and one dynamic distributed data format, standard\ninstallation procedure, and version specific documentation. GRACOS is released\nunder the GNU General Public License (GPL). High efficiency is achieved with a\nnumber of implemented techniques such as timer-based load balancing using\nHilbert space filling curve, adaptive P3M method for short range force\ncomputation, run-level compression in interprocessor communication, dynamic\nallocation for irregular domains and various sorting algorithms.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=0711.0599%2C0711.2435%2C0711.2838%2C0711.2327%2C0711.4232%2C0711.4299%2C0711.1340%2C0711.4176%2C0711.3699%2C0711.4355%2C0711.0301%2C0711.4454%2C0711.4435%2C0711.1296%2C0711.2973%2C0711.0152%2C0711.0457%2C0711.4904%2C0711.1759%2C0711.1134%2C0711.2075%2C0711.2099%2C0711.4005%2C0711.0284%2C0711.4516%2C0711.3694%2C0711.1303%2C0711.2165%2C0711.0015%2C0711.2739%2C0711.2162%2C0711.3539%2C0711.0672%2C0711.1460%2C0711.4655%2C0711.4195%2C0711.1379%2C0711.4132%2C0711.0548%2C0711.0875%2C0711.3232%2C0711.3323%2C0711.1951%2C0711.0203%2C0711.0593%2C0711.0171%2C0711.3400%2C0711.2622%2C0711.4842%2C0711.4895%2C0711.4670%2C0711.2154%2C0711.2780%2C0711.4318%2C0711.3661%2C0711.4472%2C0711.0270%2C0711.2407%2C0711.4386%2C0711.3139%2C0711.1917%2C0711.4671%2C0711.3906%2C0711.0847%2C0711.1829%2C0711.4118%2C0711.0661%2C0711.2831%2C0711.2668%2C0711.1418%2C0711.0720%2C0711.4040%2C0711.1113%2C0711.1350%2C0711.3970%2C0711.3001%2C0711.1737%2C0711.3346%2C0711.1453%2C0711.3905%2C0711.0985%2C0711.4105%2C0711.1786%2C0711.4943%2C0711.4882%2C0711.2083%2C0711.1487%2C0711.1606%2C0711.4229%2C0711.3143%2C0711.3834%2C0711.3769%2C0711.2499%2C0711.2585%2C0711.3233%2C0711.4428%2C0711.2248%2C0711.4010%2C0711.0259%2C0711.3354%2C0711.3874&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "This is to announce a recent release of version 1.0.1a9 of parallel load\nbalanced adaptive P3M cosmological N-body code named GRACOS. The code has been\nunder development over years and is available for the download at\nhttp://www.gracos.org. GRACOS features: embedded script environment,\ncosmological initial conditions generator including non-gaussian initial\nconditions, particle data imager, mass density power spectrum estimator,\nparticle position and velocity integrator with a choice between KDK and DKD\nintegration schemes with Plummer force softening, file input and output with\nfour supported serial and one dynamic distributed data format, standard\ninstallation procedure, and version specific documentation. GRACOS is released\nunder the GNU General Public License (GPL). High efficiency is achieved with a\nnumber of implemented techniques such as timer-based load balancing using\nHilbert space filling curve, adaptive P3M method for short range force\ncomputation, run-level compression in interprocessor communication, dynamic\nallocation for irregular domains and various sorting algorithms."}, "authors": ["Alexander Shirokov"], "author_detail": {"name": "Alexander Shirokov"}, "author": "Alexander Shirokov", "arxiv_comment": "Complete package distribution is located: at http://www.gracos.org", "links": [{"href": "http://arxiv.org/abs/0711.4655v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/0711.4655v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "astro-ph", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "astro-ph", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/0711.4655v1", "affiliation": "CITA", "arxiv_url": "http://arxiv.org/abs/0711.4655v1", "journal_reference": null, "doi": null, "fulltext": "arXiv:0711.4655v1 [astro-ph] 29 Nov 2007\n\nGRACOS Users Reference\nFor version 1.0.1a9, 29 November 2007\n\nAlexander Shirokov\n\n\fCopyright c 2002,2003,2004,2005,2006,2007 by Alexander Shirokov (CITA/MIT) and Edmund Bertschinger (MIT).\nThis material is distributed under the terms of the current GNU general public license,\nversion 2.\nThis package distribution includes other software whose copyrights are listed below\n\u2022 Hilbert Curve implementation by Doug Moore (packaged as 'hilbert') are Copyright\nc 1998, Rice University.\n\u2022 GIF image maker, packaged as 'wgifs'.\nThis package was originally in the form of cmap.h, wgif.c and compress.c files produced\nby Spencer W. Thomas, Jim McKie, Steve Davies, Ken Turkowski James A. Woods,\nand Joe Oros.\n\u2022 M4 Macros:\nMacro 'gse_get_version.m4' and script executable 'get_gse_version' for generating package version number are the direct derivatives of 'lam_get_version.m4' and\n'get_lam_version' of the lam-7.1.2 package.\nMacro 'acx_mpi.m4' for detection of MPI installation is written by Steven G. Johnson,\ncopied from the fftw-2.1.5 package.\n\u2022 The fitting formulae for CDM + Baryon + Massive Neutrino (MDM) cosmologies are\nby Daniel J. Eisenstein & Wayne Hu, of the Institute for Advanced Study.\n\n\fi\n\nTable of Contents\n1\n\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n\n2\n\nReference to gracos Executable . . . . . . . . . . . . . 3\n2.1\n\nIntroduction to Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n2.1.1 Running gracos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n2.1.2 gracos-examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n2.1.3 Command Line Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n2.1.4 Commands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n2.1.5 Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n2.1.6 Bitwise Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n2.1.7 Runtime Administration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n2.1.7.1 One Time Administration . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n2.1.7.2 Repeatable Administration . . . . . . . . . . . . . . . . . . . . . . . . . 12\n2.1.7.3 Scheduled Administration . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n2.1.8 Primary Output Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n2.1.9 Error Behavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n2.2 File Input and Output with dataman . . . . . . . . . . . . . . . . . . . . . . . . 15\n2.2.1 Physical Units . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n2.2.2 binpart: The Simplest Format . . . . . . . . . . . . . . . . . . . . . . . . . 17\n2.2.3 udf: Unified Datafile Format . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n2.2.4 tpm: Tree-Particle-Mesh format . . . . . . . . . . . . . . . . . . . . . . . . . 19\n2.2.5 p3mdat: Fortran p3m Datafile Format . . . . . . . . . . . . . . . . . . . 19\n2.2.6 mwhite: Martin White format . . . . . . . . . . . . . . . . . . . . . . . . . . 20\n2.2.7 Example: Datafile Manipulations . . . . . . . . . . . . . . . . . . . . . . . 20\n2.2.8 Example: Santa Barbara Cluster Project . . . . . . . . . . . . . . . . 23\n2.3 integ: Running an N-body simulation . . . . . . . . . . . . . . . . . . . . . . . 27\n2.3.1 Checkpoint Control Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n2.3.2 checkpoint Command . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n2.3.3 Automatic Backup Option . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n2.4 image: Particle Data Imaging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n2.4.1 Example: Particle Data Imaging . . . . . . . . . . . . . . . . . . . . . . . . 31\n2.5 pmpower: Power Spectrum Estimation . . . . . . . . . . . . . . . . . . . . . . . 34\n2.6 Initial Condition Generators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n2.6.1 grafic: the Initial Conditions Generator . . . . . . . . . . . . . . . . 35\n2.6.1.1 Example: Tabulated Transfer Function. . . . . . . . . . . . . . 39\n2.6.1.2 Example: lingers Initial conditions . . . . . . . . . . . . . . . . 45\n2.6.1.3 Example: BBKS Initial Conditions . . . . . . . . . . . . . . . . . 48\n2.6.1.4 Example: Scale-Free Initial Conditions . . . . . . . . . . . . . . 48\n2.6.2 poisson: Poisson Distribution . . . . . . . . . . . . . . . . . . . . . . . . . . 50\n2.6.2.1 Example: Poisson Distribution . . . . . . . . . . . . . . . . . . . . . 51\n2.6.2.2 Example: generating the glass Distribution . . . . . . . . . . 52\n2.6.3 Glass Extension . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\n2.7 halo_finder: Halo Finder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n\n\fii\n\nGRACOS\n2.8\n\n3\n\nTables of Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n2.8.1 gracos Commands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n2.8.2 gracos Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n\nAdditional Programs and Libraries . . . . . . . . 69\n3.1 gracos-pkgs: Required Package Installer . . . . . . . . . . . . . . . . . . . .\n3.2 gracos-clean: Directory Cleanup Utility . . . . . . . . . . . . . . . . . . . .\n3.3 gracos-config: Utility for Linking Programs with GRACOS . .\n3.4 GRACOS Library . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n3.5 gracos-rw: Cosmographic Quantities for FLRW Cosmology . . .\n3.6 gracos-ehu: Eisenstein-Hu Transfer Function . . . . . . . . . . . . . . . .\n3.7 gracos-hist: Utility for Plotting Histograms . . . . . . . . . . . . . . . .\n3.8 Serial Fortran N-body Codes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n3.9 bits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n3.10 System Tests. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n3.10.1 ibtest: System Call Portability Test. . . . . . . . . . . . . . . . . . .\n3.10.2 memtest: Hardware Memory Test . . . . . . . . . . . . . . . . . . . . . .\n\n4\n\n69\n70\n71\n72\n73\n74\n75\n75\n76\n77\n77\n77\n\nInstallation Procedure . . . . . . . . . . . . . . . . . . . . 79\n4.1\n4.2\n4.3\n\nSystem Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nRequired and Recommended Packages . . . . . . . . . . . . . . . . . . . . . . .\nGRACOS Package Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n4.3.1 Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n4.3.2 Compilation and Installation . . . . . . . . . . . . . . . . . . . . . . . . . . .\n4.3.3 Environment Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n4.3.4 Uninstallation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n4.4 Source code Directory Cleanup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n79\n79\n79\n79\n80\n81\n81\n81\n\n5\n\nAuthors and Copyrights . . . . . . . . . . . . . . . . . . . 83\n\n6\n\nAcknowledgements . . . . . . . . . . . . . . . . . . . . . . . . 85\n\n\fChapter 1: Introduction\n\n1\n\n1 Introduction\nThis reference documents version 1.0.1a9 of GRACOS, the GRAvitational COS mology\nsuite, or a collection of software for cosmological N-body type simulations and data analysis.\nThe primary component of GRACOS is the gracos code, \u2013 a parallel cosmological N-body\ncode.\nThe gracos executable uses a set of optimization techniques developed over many\nyears and first then completely documented on March 2004 in the MIT Ph.D. Thesis\n(http://library.mit.edu) by Alexander Shirokov, and astro-ph/0505087 (in the reduced\nform). The most up-to-date version of gracos can be found at http://www.gracos.org.\nCosmological N-body type work generally employs highly computationally challenging\nand versatile applications. However it is not just the solving the computational algorithm\nthat is challenging, but also bringing it in a usable form to you, the end user. It is generally\nconsidered very complicated to run an N-body simulation, especially for large problems,\nbecause many, if not all, of the current N-body code distributions come without many\ncommonly used options, such as ability to generate the initial conditions given a set of\ncosmological parameters, especially when heavy amounts of data are involved; file inputoutput format is still an outstanding issue. This situation gets more complicated after one\nincludes common data analysis tasks, such as the group finder, imaging or power spectrum\nestimation.\ngracos comes with a built-in command-line interface that makes it easy to manipulate\nwith the parallel application, raising the level of the communication between the researcher\nand the implementation, and thus substantially simplifying all the engineering tasks associated with the scientific problems and helping document the simulations. New commands\ncan be introduced easily (once you know how to do it). GRACOS distribution provides a\nrather extensive the gracos-examples directory containing the scripts, that can be readily\nused upon the completion of the installation procedure. These scripts are to be used for\ntesting, as templates for large N-body simulations and for doing some common parallel cosmological simulation tasks. Command line interface extends gracos development horizons\nto a new level.\nThis reference is mostly error-free, because a substantial fraction of its content is automatically generated in a one time procedure that runs GRACOS to generate most plots,\nimages and tables presented throughout this reference (doc/src/README shows how to run\nthe procedure). In particular, the procedure executes many scripts later described, following\nthe guidelines in this reference.\nIn addition to the main executable, GRACOS installation provides the C-libraries and\nthe associated C-header files that are used for gracos but are also suitable for more generic\napplications.\n\n\f2\n\nGRACOS\n\n\fChapter 2: Reference to gracos Executable\n\n3\n\n2 Reference to gracos Executable\nThis chapter documents gracos executable, - our main product.\nN-body simulations tend to be massive; however before any computationally large problem is submitted to a cluster it is more than useful to test the same problem for a reduced\nproblem size. The script examples presented thoughout this reference are just those small\ntest cases. In order to extend them to larger problems just increase the number of processes,\nthe gridsize and make sure no part of the script is intrinsically unscalable. This chapter\nassumes the successful completion of the installation procedure, See Chapter 4 [Installation\nProcedure], page 79.\n\n2.1 Introduction to Interface\nSophisticated interface is used to extend gracos capabilities and make it easier to document\nthe simulations. This section provides necessary introduction.\n\n2.1.1 Running gracos\ngracos can be run both in parallel and serially; typing gracos --help or gracos -? yields\na useful help message.\nUsage: gracos [OPTION...]\nA parallel program for N-body simulations and data analysis.\n-c, -e, --command=string\n-f\n-i,\n-t,\n-v,\n-?,\n\n--input=FILE\n--term\n--verb=integer\n--help\n--usage\n-V, --version\n\nRead and execute commands from\nForward the standard output of\nprocess to an so-0 file\nRead and execute commands from\nRead and execute commands from\nSet the verbosity level\nGive this help list\nGive a short usage message\nPrint program version\n\nthe string\nthe head\nFILE\nstandard input\n\nMandatory or optional arguments to long options are also mandatory or optional\nfor any corresponding short options.\nReport bugs to Alexander Shirokov.\nThe user interacts with gracos by passing the commands within the gracos scripting\nsession. The commands can be entered from standard input (option -t or the default), a\nfile (option -i), or passed in the command line (option -e). The commands are executed\nusing the Tcl embedded interpreter, See Section 2.1.4 [Commands], page 6 for more detail.\nTo enter the commands through the standard input, simply type gracos or, for a parallel\nrun on Nproc logical processes type\nSHELL$ mpirun -np Nproc gracos\n\nYou may use any integer number Nproc of processes greater than zero on any machine, however it is best to accomodate the agreement between the number Nproc of logical processes\nand the number of physical processes and cores available on the system.\n\n\f4\n\nGRACOS\n\nThe gracos% token that will appear prompts the user to enter a new command from\nthe standard input in the newly opened gracos scripting session. As can be seen from the\nfollowing example by a user familiar with Tcl, indeed gracos uses the facilities provided by\nthe Tcl computing language:\nSHELL$ mpirun -np 4 gracos\n/---------------------------------------------------\\\n|\nGRACOS, VERSION: 1.0.1a9\n|\n\\___________________________________________________/\ngracos% puts \"Hello\"\nHello\ngracos% foreach i { 1 2 3 4 } {\n.......\nputs $i\n....... }\n1\n2\n3\n4\ngracos%\n\nThe input is distinguished from the output by the presence or absence of the prompts\n(\"gracos% \" and \"....... \" - for incomplete commands). In the above example, $i refers\nto a Tcl variable, and foreach is a Tcl built-in command. As soon as the complete\ncommand is entered within the scripting session, its copies are sent to the remaining MPI\nprocesses and the command is processed with the embedded Tcl interpreter individually on\neach process, See Section 2.1.4 [Commands], page 6 for more information.\nIn order to master gracos, the user should learn some basics of Tcl. Fortunately, Tcl is\nusually found easy to learn. A number of resources are available online; we refer the users to\nthe Tcl reference (http://aspn.activestate.com/ASPN/docs/ActiveTcl/8.4/tcl/tcl_\ncontents.htm), the Tcl manual (http://www.tcl.tk/man/tcl8.4) and the Tcl tutorial (http://www.tcl.tk/man/tcl8.5/tutorial/tcltutorial.html) for version 8.5. In\ngracos we avoid the use of any advanced Tcl feature, when possible. For those readers\nwhose access to the above online resources is restricted, let us just say that the Tcl builtin commands set and puts are used to manage the Tcl variables (setting a variable and\ndisplaying its value); the square brackets '[' and ']' are used for an in-line expansion of a\nTcl expression; the curly brackets '{' and '}' as well and the double quotation marks are\nused for quoting in slightly different contexts (mainly: the expansion of subexpressions is\nallowed in double quoted expressions but is not allowed in the curly bracket quotations);\nthe expr Tcl built-in command is used for arithmetic expression evaluation, the exec is for\nexternal shell expression evaluation, and the eval is for the evaluation of the arguments\npassed to the command in the current scripting session. Finally cd can be used to change\nthe current working directory path.\nIn addition to the more generic commands intrinsic to the Tcl, gracos has a number of\ncommands that are only specific to the gracos executable; their implementation forms the\ntrunk of the gracos C-code.\nAs soon as gracos executable is ran, a number of useful files appear in the working directory. File gracos_history contains the current listing of all the executed commands; files\nso-1 . . . so-(Nproc-1) show the standard output on non-server processes. The standard\noutput on process zero appears on the screen, it is not redirected unless the --f command\nline option is used.\n\n\fChapter 2: Reference to gracos Executable\n\n5\n\nTo execute the same commands as in the example above by reading them from a file,\ninstead of standard input, we create a temporary file with the mktemp linux command, fill\nit with the (identical) commands to be executed and pass the filename with the -i option\nto gracos\nSHELL$ TmpFile='mktemp tmp.XXXXXX'\nSHELL$ cat > $TmpFile\nputs \"Hello\"\nforeach i { 1 2 3 4 } {\nputs $i\n}\nSHELL$ mpirun -np 4 gracos -i $TmpFile\ngracos% puts \"Hello\"\nHello\ngracos% foreach i { 1 2 3 4 } {\nputs $i\n}\n1\n2\n3\n4\nSHELL$\n\nNow, instead of having to type the commands in through the shell session, we can place\nthem into a new file, make the file executable and run. Shown below is the copy of the\nworking script, also provided at gracos-examples/hello.sh\n#!/bin/bash\n# File: gracos-examples/hello.sh\n# GRACOS Session\nTmpFile='mktemp tmp.XXXXXX'\ncat <<EOF > $TmpFile\nputs \"Hello\"\nforeach i { 1 2 3 4 } {\nputs \\$i\n}\nEOF\nmpirun -np 4 gracos -i $TmpFile\nrm $TmpFile\nTyping\nchmod +x ./hello.sh\n./hello.sh\n\nyields the expected result. The important detail to notice in the last example above is using\nthe backslash character (\\) necessary to avoid the conflict between the interpretations of the\n'$' character, which is used for variable dereferencing by both Tcl and bash. If you do not use\nthe backslash character in the example above the variable $i is interpreted as a bash shell\nvariable and, according to the bash syntax, be expanded to empty value because no such\nbash variable is defined in the script. Because of the use of backslash character, this variable\nis interpreted as a Tcl variable which is set in the preceeding foreach Tcl statement. One\njust has to be careful using backslashes to avoid the similar misinterpretations.\n\n\f6\n\nGRACOS\n\n2.1.2 gracos-examples\nEach case considered in this reference is presented as a gracos script ready to be executed\nin your Unix-flavored shell, any time following the GRACOS installation procedure. These\nscripts are organized within the so called gracos-examples directory whose archieve is one\nof the products of GRACOS installation. In order to make a local copy of the directory,\nsimply type:\nSHELL$ cp 'gracos-config info pkgdatadir'/gracos-examples.tar.gz .\nSHELL$ tar zxf gracos-examples.tar.gz\n\nin your Unix flavored shell. The procedure creates the gracos-examples directory\nwhich contains all the example scripts presented in this reference. For example, the\nhello.sh script presented in Section 2.1.1 [Running gracos], page 3 is included as\ngracos-examples/hello.sh; you may execute it any time following the installation\nprocedure, See Chapter 4 [Installation Procedure], page 79.\nThe user may become confused by the large number of files automatically generated as\nthe examples are ran; type gracos-examples -r to clean the gracos-examples directory\nand return to the initial pristine state.\n\n2.1.3 Command Line Options\nThe full list of command line options is provided in Section 2.1.1 [Running gracos], page 3.\nIf you use a batch system for job submission we recommend using option -f. Job submission systems spool extra information into their standard output file, making it difficult to\nextract the standard output of process zero from the standard output of the job, the latter\nproduced only at the end of the run also. Do not use this option for interactive sessions as\nyou will not be able to see the prompt.\nRegarding the option -t, note that one of the previously released versions of LAM MPI\nare known to show an erroneous behavior on standard input: the interactive session would\nterminate as soon as it is started without prompting the user. Even though the bug was\ncorrected in the subsequent versions of LAM, it may be a good idea to always use a noninteractive session where possible (copy your input to a file and pass the using the -i option\nto gracos).\nOption -v controls the verbosity associated with the tverb internal gracos bitwise\nvariable. Use this option to set \"on\" the memory allocation verbosity when debugging\nmemory leaks. Using -v-1 sets verbosity to the maximum (all bits are \"on\" for -1 in its\nbitwise representation).\n\n2.1.4 Commands\ngracos interacts with the user via its own extendable command line-based language\nThe complete list of gracos commands is given in Chapter 2 [Reference to gracos Executable], page 3.\ngracos uses the Tcl (Tool Command Language) as the embedded interpreter ; which\nmeans that any command processed within the gracos scripting session is parsed and\nexecuted by the Tcl (version 8.4) interpreter. This interpreter is extended within\ngracos to include new gracos-specific commands and procedures. Tcl is currently\nchosen as the interpreter due to its ease of use, portability, light weight, and the open\nsource license. Typing tclsh in your Unix-type prompt brings you to the default Tcl\n\n\fChapter 2: Reference to gracos Executable\n\n7\n\nscripting session (in the same way as typing python for example brings you to the Python\nscripting session). We refer the users who are new to Tcl to the online Tcl reference\n(http://aspn.activestate.com/ASPN/docs/ActiveTcl/8.4/tcl/tcl_contents.htm),\nTcl manual (http://www.tcl.tk/man/tcl8.4) and Tcl (version 8.5) tutorial\n(http://www.tcl.tk/man/tcl8.5/tutorial/tcltutorial.html). The book Tcl and Tk\nToolkit 1994, by John K. Ousterhout is also recommended for its coverage of embedding;\nhowever it covers a much earlier version of Tcl. The gracos interpreter differs from the\ndefault Tcl interpreter exactly by the presence of the specific Tcl variables, procedures\ndefined in the init.tcl startup file, and the new commands linked to the internal gracos\nC-functions using the Tcl_CreateCommand function. File init.tcl is sourced each time\ngracos is started. This file contains definitions for custom gracos Tcl procedures and\nvariables. Tcl commands always originate on process zero for parallel runs with MPI. As\nsoon as a complete Tcl command is entered on process zero its copies are immediately\nsent to the remaining MPI processes. The identical commands are then synchronously\ninterpreted on all the remaining MPI processes.\n\n2.1.5 Variables\nIn addition to the usual Tcl variables, gracos operates with the so called gracos variables\n(those variables are bound to the pointers inside the C-code).\nThe complete list of the gracos variables is given in Chapter 2 [Reference to gracos\nExecutable], page 3.\ngracos variables are operated by varset, varunset, varputs, vars, and varchmod\ngracos commands, See Section 2.8.1 [gracos Commands], page 56. In addition, they are\nautomatically set or updated within the source code, at any point in the source code where\nsuch setting is rational.\ngracos variables are linked to the internal source code variables so that whenever a value\nof a gracos variable is changed in the script the corresponding variable within the source\ncode is also immediately changed. gracos variables are not associated with Tcl variables\nin any way and are referred to in this reference as simply variables. The list of all gracos\nvariables for this version of gracos is given in Section 2.8.2 [gracos Variables], page 61.\nCommands, varset, varunset, varputs, varchmod and vars are used to manage the\ngracos variables from within the gracos scripting session. C-macros varset, varget are\nused to manage gracos variables within the C-code. A gracos variable should be carefully\ndistinguished from a regular Tcl variable; the easiest way to do it is by keeping in mind\nthat the '$' character is always used for referring to a Tcl variable, but is never used for a\ngracos variable.\nIntentionally, no new gracos variables can be introduced in the runtime. Each variable\nis assigned a unique key and a type which do not change in the runtime, See Section 2.8.2\n[gracos Variables], page 61 for the complete list of gracos variables with their keys and\ntypes; however, as we already mentioned, a given variable can be either set or unset, that\nis - its status may change in the runtime.\ngracos variables provide us with an important method of error control intrinsic to the\ngracos scripts. In particular, any attempt to access a variable whose current status is unset\nresults in termination with an error message, regardless of the value of the memory space\nassociated with the variable. The termination behavior can be avoided if necessary, by\n\n\f8\n\nGRACOS\n\nsetting the unvar mode of tetol bitwise variable, See Section 2.1.6 [Bitwise Variables],\npage 9.\nThe list of all the currently set gracos variables is displayed by typing vars within\nthe gracos scripting session (use the vars -a for the complete list, including uninitialized\nvariables). The first three columns in the output of this command are each one character\nwide. The first column says if the variable is set (' ') or unset ('?'); the second column\nsays if the variable is currently writable (' ') or not ('r'); the third column says if the\nvariable is an array ('A') or a scalar variable (' '). The last two columns of vars output\nshow respectively the variable name and its value or values (for the array variables).\nCommand varchmod can be used to switch write protection status of a variable and is\nuseful for such purposes, as keeping the verbosity constant while loading a datafile which\nmay or may not contain verbosity assignments. The syntax is varchmod {+w|-w} KEY where\nKEY is the name of the gracos variable. The usage of other varcommands is explained in\nthe next subsection.\nIn the following example, we illustrate the use of the gracos variables versus usual Tcl\nvariables. We first display the list of the gracos variables using vars command twice: with\nand without the -a flag. Then we set a gracos variable nstep to a specific legal value\nusing the varset command; then we set a Tcl variable to a different value choosing the\nsame variable name. Then we display their values by using varputs for gracos variable\nand puts for Tcl variable. We observe that the variables have kept their originally assigned\nvalues and are therefore indeed distinct.\n#!/bin/bash\n# File: gracos-examples/interface/vars.sh\n# GRACOS Session\nTmpFile='mktemp ./tmp.XXXXXXXX'\ncat > $TmpFile <<EOF\n# Display the list of the currently set application variables\nvars\n# Display the list of all application variables\n# (notice that variable nstep is currently unset)\nvars -a\n\n# Set an application variable nstep to value 2\nvarset nstep 2\n# Check to see that the status of the variable is indeed changed\nvars\n# Display the value of the application variable now\nvarputs nstep\n\n\fChapter 2: Reference to gracos Executable\n\n9\n\n# Define a new Tcl variable with the same name (nstep)\n# and set its value to 100\nset nstep 100\n# Show the value of Tcl variable nstep (the Tcl variable\n# dereferencing character is used)\nputs \\$nstep\n# The application variable with this name has kept its original value\nvarputs nstep\n# Application variables are entirely separate from the usual Tcl variables\n# even if they are assigned identical names\nEOF\nmpirun -np 4 gracos -i $TmpFile\nrm $TmpFile\n\n2.1.6 Bitwise Variables\nBitwise variables are technically just regular gracos 4 byte integer variables; they are\nused to control miscellaneous bitwise (\"yes\" or \"no\"s) modes. The varset and varputs\ncommands applicable to the gracos variables in general can be used to manage values of\nbitwise variables as well. Each bitwise variables can currently be assigned no more than 32\nmodes.\nType bitvar -vars to see the list of all bitwise variables; bitvars is a Tcl procedure\ndefined in init.tcl, See Section 2.1.4 [Commands], page 6.\nIn bitwise string representation bitwise variable is shown as a string of zeros and ones.\nThe in integer representation of bitwise variables is more compact than bitwise string\nrepresentation and is convenient in certain situations. Setting a bitwise variable to -1\nenables all the modes because all bits of the -1 integer are \"yes\". Setting the integer to\nzero disables all the modes at once. It is not convenient however to operate with integer\nvalues if one wants to set some specific bit of a bitwise variable.\nToken representation uses tokens to specify values of each mode. The user conveniently\noperates with tokens, combining them with the OR ('|'), AND ('&') and NOT ('~') bitwise operators. Section Section 2.8.2 [gracos Variables], page 61 lists all tokens with brief description\nfor each bitwise variable.\nThe bitvar procedure defined in init.tcl can be used to manipulate bitwise variables\nin their token representations. The highly commented example below illustrates different\nways of manilulating bitwise variables on the example of tverb bitwise variable.\n#!/bin/bash\n# File: gracos-examples/interface/bitvars.sh\n# GRACOS Session\nTmpFile='mktemp ./tmp.XXXXXXXX'\ncat > $TmpFile <<EOF\n\n\f10\n\nGRACOS\n\n# DISPLAY all bitwise variables\nbitvar -vars\n# tverb is a bitwise variable controlling the\n# gracos technical verbosity modes.\n# DISPLAY variable tverb\nvarputs tverb\n# Store its current value\nset storedvalue [varputs tverb]\n# DISPLAY its value as a string of '0's and '1's\neval [bitvar -bits tverb]\n# DISPLAY the its complete list of modes\neval [bitvar -toks tverb]\n# We allow unconventional order of the first two flags\neval [bitvar tverb -toks]\n# DISPLAY its token representation\neval [bitvar -see tverb]\n# TURN ON the allocation (alc) and MPI use (mpi) modes\neval [bitvar -add tverb {alc | mpi}]\n# TURN OFF both allocation and MPI use verbosities\neval [bitvar -del tverb {alc | mpi}]\n# Set verbosity to allocation (alc) and MPI use (mpi) only\neval [bitvar -set tverb {alc}]\n# Revert to the previously stored value\nvarset tverb \\$storedvalue\nputs \"bye!\"\nEOF\nmpirun -np 4 gracos -i $TmpFile\nrm $TmpFile\n\n2.1.7 Runtime Administration\nRuntime administration technique is the perfect tool for doing things on the fly (as the code\nruns).\n\n\fChapter 2: Reference to gracos Executable\n\n11\n\nThe user requests runtime administration by creating specifically named runtime administration file(s) within the working directory either before or during the run. The runtime\nadministration files are read by gracos as soon as the control reaches any of the runtime\nadministration checkpoints within the source code (functions admin_checkpoint)) with a\nunique label admin_label passed as an argument, See Section 2.1.7 [Runtime Administration], page 10 for their complete list.\nRuntime administration can be invoked explicitly, using the admin command. There are\na few kinds of runtime administration described in the following text.\nThere are two important points to keep in mind\n\u2022 Avoid partial updates of the runtime administration files If you edit runtime administration file during the run, casual saving an incomplete version of file may lead to\nerrors if the checkpoint is reached at the time.\n\u2022 Avoid possibility of infinite recursion loop. If your runtime administration method\ninvokes one of the commands that themselves contain a runtime administration checkpoint the infinite recursion loop is avoided by restricting the scope of administraction\nto particular checkpoints; See Section 2.6.1.1 [Example: Tabulated Transfer Function],\npage 39 for example.\nThe runtime administration files do not need to have the executable file permissions.\nThe following is the list of all runtime administration checkpoint ids.\ninteg\n\nInvoked each timestep of the particle integration run, See Section 2.3 [integ:\nRunning an N-body simulation], page 27.\n\ninteg_pre\nInvoked at the beginning in the integ command, just before the main timestepping loop of the integration of particle trajectories starts.\nimage\n\nInvoked just after the image data is projected to form a numerical matrix-plate\nbut before it is converted to produce a 'gif' file, during the image command,\nSee Section 2.4 [image: Particle Data Imaging], page 30. This administration\ncheckpoint can be used to tune the dynamic range covered by the image to the\nbrightness of the dimmest and the brightest spots on the image plate.\n\nadmin\n\nInvoked when command admin is executed in the interpreter.\n\nenv\n\nInvoked when command env is executed in the interpreter.\n\n2.1.7.1 One Time Administration\nFile inc.tcl, if found at the runtime administration checkpoint, is interpreted as an input\ngracos script and is then moved to inc.tcl~, unles the new admin_keep variable is set to\n1 while processing that script.\nTcl variable admin_label, temporarily defined as the label of the current administration\ncheckpoint, may be used to restrict the scope of one time administration to a particular\nadministration checkpoint in order to avoid infinite recursion. An example of one time\nadministration with such restricted scope of administration is presented in Section 2.6.1.1\n[Example: Tabulated Transfer Function], page 39.\nAs the most simple example, try executing the following bash shell command within the\nworking directory during any of the GRACOS runs to see the run stop:\n\n\f12\n\nGRACOS\n\nSHELL$ echo end > inc.tcl\n\nThe newly created file inc.tcl contains just a single gracos command end to request an\nend of the gracos session as soon as possible. One should not worry about infinite recursion\nin this example because, as we know from Section 2.1.7 [Runtime Administration], page 10\nthe command end does not itself contain another runtime administration checkpoints.\n\n2.1.7.2 Repeatable Administration\nThe gracos variable admin_path, if set, defines the name of the repeatable administration\nfile, which gets processed at each administration checkpoint without getting deleted. If\nthe repeatable administration file is defined but does not exist the code shall terminate\nwith the error message. In contrast to the one time administration file, the path of the\nrepeatable administration file is not fixed and the file is not removed after getting executed,\nthus getting processed each administration checkpoint for as long as it is defined and the\nrun is continued.\nThe content of the repeatable administration file is processed according to its filename\nextension.\nA file whose extension is .tcl is interpreted in the same way as described in Section\nSection 2.1.7.1 [One Time Administration], page 11, except that the file is not replaced after\nthe execution.\nA file whose extension is .py is processed under Python interpreter. The details of the\nintrinsic procedure are as follows. First an automatically generated header Python script is\nprocessed in which a number of variables are defined. Type\ngracos -e env\n\nto see what this Pythons header roughly looks like (the real header will differ only by the\nruntime generated values in the assignments). First, all the GRACOS variables are set\nunder their original GRACOS names (floating point numbers may lose significant bits in\nthis assignment); those GRACOS variables that are unset are initialized to the Pythons\nNone. Next, an unrestricted choice of variables are defined by convenience, according to\ntheir setting within the source code. The admin_label is also defined and can be used to\nrestrict the scope of the runtime administration to a particular checkpoint. The content\nof the repeatable administration file is then processed in the same Python session. Should\nthe user define the admin_out Python variable, the content of this variable is sources as an\ninput Tcl script within the GRACOS scripting session immediately following this checkpoint\ninstance.\nNote that Python interpreter is invoked by using the system C-function call, which is\nknown to have portability issues on some rare systems (the Infiniband networking systems\nis the only such system, as far as we currently know). You must have configured GRACOS\nwithout --disable-system-calls configure option for the Python runtime administration to work; See Sections Chapter 4 [Installation Procedure], page 79, and Section 3.10.1\n[ibtest: System Call Portability Test], page 77 for more details.\n\n2.1.7.3 Scheduled Administration\nScheduled administration method is useful for scheduling certain tasks to be executed at a\npre-specified time.\n\n\fChapter 2: Reference to gracos Executable\n\n13\n\nFile 'sched.txt', if present in the working directory, must be the text file containing the\ninteger (of may be floating point number) representing the number of seconds since 197001-01 00:00:00 UTC at which to schedule executing a command. the standard of output of\nC-command time(NULL) of shell command date +%s.\nThe command, which is the content of variable cmd_sched, will be executed as soon\nas control reaches one of the scheduled administration checkpoints and time exceeds the\nnumber written in file 'sched.txt'. The content of the variable is subject to the same substitution rules as those applicable to the output control variables described in Section 2.3.1\n[Checkpoint Control Variables], page 29.\nBelow is the exanmple of scheduled administration\n#!/bin/bash\n# File: gracos-examples/problems/sched.sh\ninput_file='gracos-config info pkgdatadir'/ParticleData/p3m-0.8_'uname -m'.dat\n# Setup scheduled administration in 5 seconds from now\nsched_sec=5\necho 'date +%s'+$sched_sec | bc > sched.txt\n# GRACOS Session\nTmpFile='mktemp ./tmp.XXXXXXXX'\ncat > $TmpFile <<EOF\n# Load particle data from the input file\ndataman -mode=load -fmtid=p3mdat -masseq -path=$input_file\n# Specify restart output\nvarset out_restart \"dataman @MODE@ -fmtid=udf -spec=nfio:1 -path=out-@LABEL@.udf-\"\n# Define scheduled administration command:\n# \"checkpoint using the restart output and exit\"\nvarset cmd_sched \"checkpoint --labels=r; end\"\n# Run integration with the target expansion factor '1' for restart\n# output. Note: due to scheduled administration it will be interrupted\n# in 5 seconds rather than actually finishing at this expansion factor.\ninteg -aouts=1.:r\nEOF\nmpirun -np 4 gracos -i $TmpFile\nrm $TmpFile\n\n2.1.8 Primary Output Files\nA run with gracos executable produces a number of primary output files within the working\ndirectory. These files contain useful information about the run and the used executable.\n\u2022 File gracos_history: The list of commands submitted to gracos interpreter so far.\nThis file is is created on process zero and is updated during the run as soon as a new\n\n\f14\n\nGRACOS\n\ncommand starts being interpreted. If you look at this file during the runtime, the line\nat the bottom indicates the currently processed command or procedure.\n\u2022 Files so-Rank : The standard output of process whose MPI rank is Rank (an integer).\nThe files are created, one for each process, and are updated as the run progresses. The\namount of data written into these files depends on the settings of the verbosities, controlled by the bitwise variables tverb and sverb See Section 2.1.6 [Bitwise Variables],\npage 9.\n\u2022 File gracos_info: Structured document containing the version- and run-specific information. This file is updated only a few times during the run and is created on process\nzero only.\nThe file is structured as an XML document, and is thus easily parseable by any of the\nstandard XML parsers, such as xml.dom in Python.\nThe first XML node configure contains the configuration and version information on\nthe executable. The second node run contains information specific to each particular\nrun: the time at which run was started in two formats (time and date), the number\nof MPI processes associated with the run (nproc), and the process specific information\nfor each process (processes): the rank, the hostname of the hosting node as the current\nprocess, the process ID on hosting node, and the multiplicity - the total number of\nprocesses assigned to the same hosting node as the current process. The greater than\none value of the multiplicity indicates that the resources of the node are shared with\nthe other processes associated with the same run.\nShown below is the example of this file, when created by the run on four processes in\nthe hello.sh example in Section 2.1.1 [Running gracos], page 3\n<configure>\n<property key=\"PACKAGE\" value=\"gracos\"/>\n<property key=\"PACKAGE_VERSION\" value=\"1.0.1a9\"/>\n<property key=\"CONFIG_CFLAGS\" value=\"-Wall -O3 -fno-strict-aliasing\"/>\n<property key=\"CONFIG_CPPFLAGS\" value=\"-I/home/shirokov/local/arch/ [TRUNCATED]\n<property key=\"CONFIG_LDFLAGS\" value=\"-L/home/shirokov/local/arch/i [TRUNCATED]\n<property key=\"CONFIG_DATECFG\" value=\"Thu Nov 29 00:50:43 EST 2007\"/>\n<property key=\"CONFIG_USERCFG\" value=\"shirokov\"/>\n<property key=\"CONFIG_ABS_TOP_SRCDIR\" value=\"/home/shirokov/gracos- [TRUNCATED]\n</configure>\n<run status=\"initial\">\n<property nproc=\"4\"/>\n<property time=\"1196316597\"/>\n<property date=\"Thu Nov 29 01:09:57 2007\"/>\n<processes>\n<process rank=\"0\" hostname=\"procion\" pid=\"28704\" multiplicity=\"4\">\n<process rank=\"1\" hostname=\"procion\" pid=\"28705\" multiplicity=\"4\">\n<process rank=\"2\" hostname=\"procion\" pid=\"28706\" multiplicity=\"4\">\n<process rank=\"3\" hostname=\"procion\" pid=\"28707\" multiplicity=\"4\">\n</processes>\n</run>\n<run status=\"final\">\n<property runtime=\"0\">\n</run>\n\n\fChapter 2: Reference to gracos Executable\n\n15\n\n2.1.9 Error Behavior\nIf gracos halts before having reached the return statement of main C-function it does so\nabnormally. These failures may be due to a variety of reasons. Excepting the batch job\nresource limit and\nInternal test failures\nInternal test failures always trigger a call to one of the C-macros stop or\nstopm(\"ERROR MESSAGE\") defined in zero.h. The macros produce message(s)\nsimilar to these\nExit (gracos.c:278) rank=rank\nor simply\nERROR MESSAGE\nExit (gracos.c:278) rank=rank\n\nin both the standard output and error outputs of the process(es) where the\ninternal test failure(s) occurred. These messages show the location of error in\nthe source code and the rank of the process that triggered the error message.\nThe ERROR MESSAGE, if present, usually provides some hints on the nature\nof the problem; e.g. that a particular variable is used but not initialized.\nWarnings\nRare warnings produce messages similar to those above but do not result in\nprogram termination.\nMemory leaks\nA memory leak always indicates the presence of a bug, and resolving it is a very\nhigh priority. In GRACOS all allocated memory is carefully tracked to ensure\nagainst memory leaks. If it does occur, the following message appears at the\nend of standard output and error outputs of proces zero:\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nWARNING: memory leak on at least one process:\ncntsum=4 memsum=20\n\nif you observe a memory leak message please report it to gracos authors.\n\n2.2 File Input and Output with dataman\nGRACOS supports a number of formats for primary (e.g. suitable for a whole restart of\nthe simulation) file input-output; they all are implemented with the dataman command\nmanaging high level file input-output. The data is converted when needed from the the\nunits particular to the datafile format into the units used by gracos. Sometimes, as in case\nconsidered in Section Section 2.2.8 [Example: Santa Barbara Cluster Project], page 23 such\nunit conversion requires same gracos variables to be set; if so, not having them set will\nresult in an error message indicating which of the required parameters are missing.\nA data file format can be static or dynamic. The static datafile format allows only a\npredefined number and type of the simulation parameters be stored; while the dynamic\nformat allows more freedom. In addition, a data file format can be distributed and serial.\nIn the distributed File I/O format, more than one process are allowed to write data on\ndisks. For the serial datafile format the whole file I/O procedure is always performed on\n\n\f16\n\nGRACOS\n\none process only. In the parallel runs the processes exchange messages with the process\nusing MPI.\nBelow is the full description of the options; Section Section 2.2 [File Input and Output\nwith dataman], page 15 lists all the available datafile formats for dataman.\ndataman OPTIONS....\nLoad or save the data from or into a datafile(s).\nThe following table lists the available OPTIONS.\n-mode=string\nMandatory flag used to specify the required action. The possible values of\nthe string argument are save,load, or delete, indicating file output, input or\ndeletion.\n-fmtid=string\nThis is a mandatory flag. The data formats used for file I/O are identified by\ntheir Format ID, the argument of -fmtid specifies the Format ID (See below\nfor the list of all the supported formats). In the absence of this option, the\ncode tries to determine the format using the extension of the path given by the\n-path flag argument. If both methods fail the run stops with an error message,\nsince the machine does not know which format to use for file I/O.\n-path=string\nThis is a mandatory flag; its argument provides the longest path prefix that\nis a prefix of all the paths used for I/O in the current instance of file inputoutput. The final file pathname will be appended when necessary: for example,\nin parallel I/O the path is appended with MPI ID of the process performing the\nI/O; in case when many file paths are used on one process a proper extension\nused to distinguish the path is added; See also the -suf and -prefixes options.\n-suf=string\nOptional flag, used to append a string to the end of the file path.\n-prefixes=string\nWhen local disks are cross-mounted, this option can be used to modify the\nleading parts of -path. The argument of -prefixes is a text file, readable on\nprocess zero, and is the list of the prefixes in order of their process ids. The\nleading portion of the -path argument is appended individually for each process\nwhose process id is rank with the content of the row number rank in this file.\nIf the file has less than rank rows the path is reset to NULL for this process.\nThe file should end with a newline.\n-spec=string\nThe argument provides the format specification string and is used in conjunction\nwith the format ids for which such format specification is applicable; see the\ndescription for each format below for documentation.\n-masseq\n\nIf masses of all particles are the same it is not efficient to store them in a\ndatafile. If masses of particles are not stored in a datafile used for particle data\ninput, this option should be used to initialize them to the same value.\n\n\fChapter 2: Reference to gracos Executable\n\n-sort\n\n17\n\nSort particles with respect to their particle ids before writing them to disk.\nThis option is applicable only for data output (-fmtid=save) using serial data\nfile formats and is silently ignored when used in all other cases.\n\n2.2.1 Physical Units\nThe particle data are normally expressed within gracos source code in so called gracos code\nunits: the particle positions are comoving, in the units of dx; the velocities are proper, in\nthe units of (h0*dx/a), See Section 2.8.2 [gracos Variables], page 61 for the definitions of\nh0, dx, and a. The units of mass are chosen so that the total mass of all the particles in\nthe simulation box is normalized to equal the number of PM density/force mesh grid points\nnx*ny*nz. For the case of equivalent particles, one particle per each PM-mesh cell, each\nparticle has a unit weight in code units.\n\n2.2.2 binpart: The Simplest Format\nIn this dynamic serial format (binpart signifies the Format ID) the particle data are stored\nin a single file in the most simple possible way, controlled by the user. No header is used,\nand the data is read or written in a simple sequence of records, one for each particle in the\nsimulation volume.\nThe user must provide the definition for the layout of data in the record using the format\nspecification option -spec to the dataman command. The syntax for the -spec argument\nstring is a comma-separated list of tokens given below\nx, y , or z\nThe x,y, or z- components of the comoving particles coordinates, in\nMegaparsec.\nvx, vy, or vz\nThe x,y, or z- components of the proper peculiar velocity, in km/s.\nvxc, vyc, or vzc\nThe x,y, or z- components of the comoving peculiar velocity, in\nkm/s.\nm\n\nThe mass of the particle in the solar masses.\n\nid\n\nThe particle id, currently a 4 byte integer.\n\nxs, ys, zs\nvxs, vys, or vzs\nms\ngxs, gys, or gzs\nThe coordinates, velocities, masses and gravitational accelerations,\nin the GRACOS code units, See Section 2.2.1 [Physical Units],\npage 17.\nIf the id specifier is not supplied on input, the particle ids are assigned sequentially in\norder of their appearance in the file, starting from 1.\nThe binpart format is already used widely due to its simplicity. For example The Santa\nBarbara Cluster project (http://t8web.lanl.gov/people/heitmann/arxiv/sb.html)\nhas adopted a variation of this format to publish their particle data. Section Section 2.2.8\n\n\f18\n\nGRACOS\n\n[Example: Santa Barbara Cluster Project], page 23 shows how, using the dataman to load\nthe particle data in their format directly into gracos and start N-body simulation in the\nsame session.\nThis format does not have any built-in header for holding any variables. Some additional\nparameters are generally required if one uses this format for input, e.g. for the domain decomposition. One has to manually supply the missing information with varset before the\ndataman command can be called successfully. If a required variable is unset the run terminates with an error message indicating the name of the required variable. The npartall\nvariable is set automatically based on the input file size and the format specification.\n\n2.2.3 udf: Unified Datafile Format\nThis dynamic distributed format (Format ID: udf ) is the perfect choice for easy simulation\nrestart and runtime backups automatically stores all the necessary gracos variables and\ndata, being also very fast due to the usage of local disk space (some networking systems\nhowever do not have local disk spaces). The udf format is however somewhat frequently\nchanged between different gracos versions and is hard to be interpreted by other software.\nHowever, if the data is written in this format one can always restart the simulation and\nconvert the data to other easily interpretable formats such as binpart, See Section 2.2.2\n[binpart: The Simplest Format], page 17.\nThe udf format is customizable and self-describing. It allows the option for the arbitrary\nnumber of the output files not exceeding the number of running MPI processes. Each process\nwrites at most one output file. This format is portable between the machines of the same\nCPU-endian types. The datafiles are currently designed to store all the code variables,\nparticle data, and the refinement numbers of the chaining mesh cell.\nThe -spec argument is used for file output only. The argument of -spec option is\na string: a comma-separated list of tokens with their subarguments, following the below\nsyntax\neq\n\nRequest equal sized output files. The cost is slightly slower completion due to the necessary interprocessor communications. This\noption is useful for use in clusters with local disc spaces on each\nnode; it ensures that the disc space gets used up uniformly.\n\nnfio:int32\nInteger (the default value is Nproc); option results in the specified\nnumber of the output files. If option -eq is given, these files will\nbe equal sized. The actual data is not moved while their copies are\nmoved between the processes in the failure tolerant way so as to\naccommodate the specified number of the output files. This option\nshould be used if one wants to reduce the number of output files\nwithout compressing the data to the bottom processes. if nfio is\nless than nshr (below) then the option -eq is automatically set. If\nnshr is less than nfio then nfio=nshr is set automatically.\nnshr:int32\nInteger, less than or equal to Nproc; the option allows user the\nability to later restart the simulation on fewer number of processes\nthan the running number of processes (Nproc). Repartitioning of\n\n\fChapter 2: Reference to gracos Executable\n\n19\n\ndomain decomposition is performed so that the whole domain gets\ndivided evenly (weighed by the workload per cell) in the result\nbetween the nshr (as opposed to Nproc as it normally is) bottom\nprocesses before data is saved into the datafiles. The simulation\ncan be restarted in a separate gracos session using a number of\nprocesses (that is equal or higher than nshr). Do not use this\noption if you do not plan to restart the same simulation on fewer\nnumber of processes.\n\n2.2.4 tpm: Tree-Particle-Mesh format\nThe static serial data format (Format ID: tpm) adopted by the TPM code version 1.2, See\nhttp://www.astro.princeton.edu/~bode/TPM is composed of 6 binary files with the same\nbasename and extensions '.px', '.py', '.pz' and '.vx', '.vy', '.vz'. They contain identical\ninformation in the header and the corresponding component of position or velocities of the\nparticles in their main bodies.\n\n2.2.5 p3mdat: Fortran p3m Datafile Format\nThe static serial format (Format ID: p3mdat) used by the p3m serial Fortran 77 codes.\nThe data is saved onto one file consisting of the header and the main body. The number\nof particles that can be saved is limited in the format to the maximum numbed held by an\ninteger (INT_MAX as defined in the standard 'limits.h' C-header). The error message will\nappear and the run will stop if this limit is exceeded.\nParticle IDs are not stored. However one may use particle sorting procedure to store\nparticle IDs implicitly. Pass -sort option to dataman and particles will be written into the\ndisk in the order of increasing particle IDs. While loading from a p3mdat datafile, particle\nids are automatically set to the sequential number (starting from one) in which the particle\nappears in the datafile. In this way particle IDs are easily recovered.\nThe masses of particles are also not directly stored. The -masseq option must be used\nto initialize the masses to the equal value. The p3mdat format is supported by the Serial\nFortran 77 codes that we are using for tests and verification against the older p3m2_93\ncodes.\nThe following table lists the data items stored in a p3m.dat header in the order of their\nappearance in case.\nlong unsigned\nFortran 77 conventional mark for the start of a binary File I/O record.\nnpartall\n\nSame as npartall from Section 2.8.2 [gracos Variables], page 61, but here\nconstrained to 32 bits. The number of particles can not exceed INT_MAX in this\nformat.\n\nnx, ny, nz\nSee Section 2.8.2 [gracos Variables], page 61.\ndx, epsilon\nExpressed in the comoving Megaparsecs.\na, omegam, omegav, h0, dtsin, etat, and nstep\nSee Section 2.8.2 [gracos Variables], page 61.\n\n\f20\n\nGRACOS\n\nekin, egrav, and egint\nSame as in Section Section 2.8.2 [gracos Variables], page 61, but expressed in the\nphysical units; the conversion factor is given in Section Section 2.2.1 [Physical\nUnits], page 17.\nlong unsigned\nEnd of the Fortran 77 record.\n\n2.2.6 mwhite: Martin White format\nThis format has at some point been adopted by Martin White for his codes. Its original\ndescription follows\nThe phase space data files have to be in a specific format. First there is a 4-byte integer,\nwhich should be 1. Then an integer 20. Then a header which contains: number of DM\nparticles, number of SPH particles (0 in our case), number of star particles (0), scalefactor of the output, spline softening length in units of the box size. The first 3 entries\nare 4 byte ints, the last 2 are 4 byte floats. If you know a Plummer softening, the spline\nsoftening is a factor 2.8 larger. Then all of the particle positions, 3x 4-byte floats per\nparticle, in units of the box length. So all coordinates should run [0,1) and the order is\nx0,y0,z0,x1,y1,z1, etc. After the positions are the velocities vx0,vy0,vz0,vx1,vy1,vz1,...\nThese are stored in units of the Hubble velocity across the box. If you have them in\nkm/s then divide by a.H.Lbox. Finally the particle ID number for each particle, as a\n4-byte integer. And that's it.\nThis format allows the following specification with -spec option, whose argument should\nbe a comma-separated list of tokens given in table below\nnfh:int32\nAllows one to use nfh files instead of just one (the default); the files are still\nwritten/read on process zero. Files written with some value of the argument of\nnfh should be read with the same argument to nfh.\n\n2.2.7 Example: Datafile Manipulations\nN-body problems generally require storing many kinds of data on a disk for various purposes\nsuch as to be able to restart the simulation from a midpoint, or perform data analysis on\nparticles in a separate run. New datafile formats are routinely devised in the N-body\ncommunity in order to fit particular problems.\ngracos offers a file interface that supports a few data formats, See Section 2.2 [File Input\nand Output with dataman], page 15. The interface is implemented through the dataman\ncommand, allowing the user to load, save, or delete the data stored in dataliles, or make\na conversion between the supported formats. The list of the supported file formats will be\nupdated based on the need.\nMost of the examples in this reference use dataman in one way or another. Any of\nthe supported datafile formats can be used, for example, to start a full N-body simulation\nwith gracos in the same session. The example in Section 2.2.8 [Example: Santa Barbara\nCluster Project], page 23 shows how to load data files using the format adopted by the\nSanta Barbara Cluster Project.\nIn the densely commented example below we perform a few conversion between various\nsupported formats listed in Section 2.2 [File Input and Output with dataman], page 15.\n\n\fChapter 2: Reference to gracos Executable\n\n#/bin/bash\n# File: gracos-examples/interface/fio.sh\n# Terminate shell session on any errors\nset -e\n# Specify the input datafile\nInputFile='gracos-config info pkgdatadir'\nInputFile=${InputFile}/ParticleData/p3m-0.8_'uname -m'.dat\n\n# Running gracos on 8 processes\nTmpFile='mktemp ./tmp.XXXXXXXX'\ncat > $TmpFile <<EOF\n# Load data from a p3m.dat file, assign equal masses to all\n# the loaded particles.\ndataman -mode=load -fmtid=p3mdat \\\n-masseq \\\n-path=$InputFile\n# Compute acceleration to find cell workloads\naccel\n# Save data in three files with possibility to restart\n# on four or more processes.\ndataman -mode=save -fmtid=udf \\\n-spec=nshr:4,nfio:3 \\\n-path=a.udfEOF\nmpirun -np 8 gracos\n\n-i $TmpFile\n\n# Restarting gracos on the smaller number (4) of processes\ncat > $TmpFile <<EOF\n# Read the output of the previous run\ndataman -mode=load \\\n-fmtid=udf \\\n-masseq \\\n-path=a.udf# Save into four files of equal size\ndataman -mode=save -fmtid=udf \\\n-spec=eq \\\n-path=b.udf-\n\n21\n\n\f22\n\nGRACOS\n\n# Save particle data into one file in the most simple binary\n# format possible: the sequence of binary numbers representing the\n# particle positions (x,y,z), velovities (vx,vy,vz), the mass (m)\n# and the particle id (id) for each particle in the simulation volume.\ndataman -mode=save -fmtid=binpart \\\n-spec=x,y,z,vx,vy,vz,m,id \\\n-path=t1.bin\n#\n# Save particle data similarly to the above case, now using\n# other choice for units of coordinates and velocities;\n# and the produced sequence of particles in the file is now\n# sorted with particle ids.\n#\ndataman -mode=save -fmtid=binpart \\\n-spec=xs,ys,zs,vxs,vys,vzs,id \\\n-sort \\\n-path=t2.bin\n# Again, a similar procedure\ndataman -mode=save -fmtid=binpart \\\n-spec=x,y,z,vx,vy,vz \\\n-path=t3.bin\nEOF\nmpirun -np 4 gracos -i $TmpFile\n\n# Restart gracos on a larger number (10) of processes\n# and read the output produced by the previous run.\ncat > $TmpFile <<EOF\n# Set the necessary missing parameters\nvarset epsilon 0.1\nvarset nx 32\nvarset ny 32\nvarset nz 32\nvarset dx 1.0\nvarset h0 50\nvarset a 0.8\nvarset omegam 1.0\n# Load particle data from the file written in the above\n# gracos session.\ndataman -mode=load -fmtid=binpart \\\n\n\fChapter 2: Reference to gracos Executable\n\n23\n\n-spec=x,y,z,vx,vy,vz -masseq \\\n-path=t3.bin\n# Save particles\ndataman -fmtid=binpart -suf=.bin \\\n-spec=xs,ys,zs,vxs,vys,vzs,ms \\\n-mode=save -path=a-0\n\nvars\nEOF\nmpirun -np 10 gracos -i $TmpFile\nrm $TmpFile\n\n2.2.8 Example: Santa Barbara Cluster Project\nIn our next example, we start the simulation with the Santa Barbara Cluster Project (SBCP)\ninitial conditions. These particle data initial conditions must first be downloaded and\nunarchieved using the following Unix-flavored shell commands\n\nSHELL$ wget \\vrule width0pt\\hrefhttp://t8web.lanl.gov/cosmic/ic_sb128.tarhttp://t8web.lanl.gov/cosmic/ic_sb12\nSHELL$ tar xvf ic_sb128.tar\nparticles_ic_sb128\ninput_sb\n\nThe data in the unpacked data files is written using the following format, as quoted from\nthe SBCP webpage:\n. . . There are two files in the archives: particles name, which has the following content:\nx[Mpc], v x[km/s], y[Mpc], v y[km/s], z[Mpc], v z[km/s], particle mass[M sol], particle\ntag. This file is written in single precision and binary format. . . . All data are given\nin comoving units . . .\nNote that the velocities are expressed in comoving km/s, which is unusual.\nIn order to load the datafiles into gracos, we use the above description to set the -spec\nflag appropriately in the example below, See Section 2.2.2 [binpart: The Simplest Format],\npage 17.\nThe example below is a script that should be executed in the same directory as the above\ndownload procedure. The important thing to notice here is that the particle datafile alone\ndoes not completely specify the simulation parameters in this case. Additional simulation\nparameters must be set in order for GRACOS to read the particle datafile; this is because\npart of the necessary information is supplied in the text file 'input_sb', some more information (the initial redshift or the starting expansion factor a, etc) are provided in the SBCP\nweb page; additionally, GRACOS uses its own units for data and domain decomposition\nwhich depend on a few more simulation parameters such as epsilon and etat. It is easy\nto find the list of the necessary parameters since skipping any of the settings inevitably\nresults in a crash with the appropriate error message indicating which of the parameters is\nmissing. Another important thing is the use of the -spec option to dataman. The format\nspecification is made consistent with the description quoted above.\n\n\f24\n\nGRACOS\n\nNext to loading the particle data from the SBCP initial conditions data, the script executable below generates the power spectrum, and the images of the density distribution\nsimulation box as commented in the script. According to the setting for img_slabs code\nvariable, four images are produced in slabs along the line of sight, See Section 2.4 [image: Particle Data Imaging], page 30 for more examples and explanations on the image\nparameters.\nWe encourage the users to execute the below script (after finishing the above procedure\nfor downloading the SBPC data) to reproduce the results.\n#!/bin/bash\n# File: gracos-examples/problems/sbarb.sh\n# Make bash session halt on any errors\nset -e\nTmpFile='mktemp tmp.XXXXXXXX'\n# Files downloaded from the Santa Barbara Cluster Project webpage\nSB_header=input_sb\nSB_particles=particles_ic_sb128\nif [ ! -f $SB_header ] || [ ! -f $SB_particles ]; then\necho \"Missing one or both files: \\\"$SB_header\\\", \\\"$SB_particles\\\"\"\nexit 2\nfi\n# Extract more simulation parameters from the header datafile.\n# This defines: Lb, Om, Ov, h0\nsed 's/ //g' input_sb > $TmpFile\n. $TmpFile\n\nz=63.;\nNgrid=128;\nastart=$(echo \"1./(1.+$z)\" | bc -l)\n\ndx=$(echo \"$Lb/$Ngrid\" | bc -l)\n\n# GRACOS Session\ncat > $TmpFile <<EOF\n# Set the necessary parameters\nvarset nx $Ngrid\nvarset ny $Ngrid\nvarset nz $Ngrid\nvarset dx $dx\nvarset h0 $H0\nvarset a $astart\n\n\fChapter 2: Reference to gracos Executable\n\n25\n\nvarset omegam $Omega_m\n# Specify the Plummer softening distance and\n# Load the Santa Barbara Cluster Project datafiles into GRACOS.\nvarset epsilon 0.1\ndataman -mode=load \\\n-fmtid=binpart \\\n-spec=x,vxc,y,vyc,z,vzc,m,id \\\n-path=$SB_particles\n\n# Measure the power spectrum of density perturbations;\n# display power spectrum with the \"pmpower\" MATLAB command.\npmpower\n# Produce the images of the simulation box:\n# First, Set the image parameters \"reasonably\", without producing\n#\nthe actual image yet\nimage --set-defaults -no-image\n# Second, Set a few selected image parameters to more preferred values\nvarset img_rbl 0.95\nvarset img_rbr 1.4\n# Make four image snapshots in slabs, along the line of sight\nvarset img_slabs 4\nvarset img_pixw 500\n# Increase the default img_rsmoo by a factor of 1.5\nvarset img_rsmoo [expr 1.5*[varputs img_rsmoo]]\n# Finally, produce the actual images\nimage -path=sbarb.gif\nEOF\nmpirun -np 8 gracos -i $TmpFile\nrm $TmpFile\n\nThe image below shows the power spectrum measurement for matter distribution in\nthe particle data volume. The image data are generated as the result of the pmpower call\nin the above example; the data are written into file pmpower.dat and the image itself is\ngenerated by typing the same pmpower (in MATLAB ) in the same directory, See Section 2.5\n[pmpower: Power Spectrum Estimation], page 34. The lower half of error bars os longer\n\n\f26\n\nGRACOS\n\nthan the upper one due to the non-linearity of logarythm while we use linear values power\nspectra for variance estimators.\n\nPower spectrum of density perturbations\n\u22121\n\nlog10 ( P(k), [comov. Mpc]3 )\n\n\u22122\n\n\u22123\n\n\u22124\n\n\u22125\n\n\u22126\n\n\u22127\n\u22121.5\n\n\u22121\n\n\u22120.5\n0\nlog10 ( k, [ 1 / (comov. Mpc) ] )\n\n0.5\n\n1\n\n\fChapter 2: Reference to gracos Executable\n\n27\n\nThe following four images appear as the result of the image call in the above example;\nthe number of images is defined by the img_slabs variable setting the number of image\nslab along the line of sight.\n\n2.3 integ: Running an N-body simulation\nThe integ command starts the N-body simulation on the currently loaded particle data.\nThe acceleration mode is controlled by the acc bitwise variable whose default value is \"full\nacceleration\": (PM | PP | FPM | FPP), See Section 2.1.6 [Bitwise Variables], page 9.\nTimesteps are normally computed using a particular time stepping criterion during an\nN-body simulation; the positions and velocities of the particles are made synchronized at the\ncertain points in time. The output expansion factors specified using the -aouts option do\nnot generally coinside with the expansion factors corresponding to the particle data synchronization points; when, during the integration procedure, the next output expansion factor\nfalls within the next timestep, the value of this timestep is normally truncated to match\nthe output expansion factor to the roundoff error; See the disable_timestep_truncation\nsub-option.\n\n\f28\n\nGRACOS\n\nIn addition to variables needed for domain decomposition, variable etat must be set\nbefore calling integ. A reasonable value for this variable is 0.05; setting this variable to\nlower values can be used to increase time resolution of the simulation.\nThe following two options are available\n-aouts\nMandatory opton, a string containing the comma separated list of output specifiers each formatted as A[:B], where A is either the floating point number\nsetting the output expansion factor at which to produce data output or the\nword INF to indicate unlimited integration of particle trajectories. Optional\ncolumn separated modifier B (the default value is r) may have the following\nmnemonic values\nr\n\nRestart output, using the expansion of variable out_restart, See\nSection 2.3.1 [Checkpoint Control Variables], page 29.\n\na\n\nAnalysis output, using the expansion of variable out_analysis, See\nSection 2.3.1 [Checkpoint Control Variables], page 29.\n\nb\n\nBackup output, using the expansion of variable out_backup, See\nSection 2.3.1 [Checkpoint Control Variables], page 29.\n\nn\n\nNo output\n\nFor example, command integ -aout=0.1:a,1:ra indicates that the analysis\noutput will be executed at expansion factor 0.1; both the restart and analysis\noutputs will be executed at expansion factor 1.\nThe user may define actions performed at the restart, backup and analysis\noutputs by setting the variables out_restart, out_backup and out_analysis,\nSee Section 2.3.1 [Checkpoint Control Variables], page 29.\n-mode\n\nOptional argument. The default value is \"-mode=scheme:DKD\"\nscheme:string\nThe scheme specifies the time integration scheme used for particles.\nThe allowed values are KDK for Kick-Drift-Kick integration scheme\nand DKD for Drift-Kick-Drift integration scheme; the default is DKD.\nreset_econ\nReset the energy conservation measure (egrav+ekin-egint) to zero\nat the beginning of the run, by modifying egint. The status of energy conservation is normally something that accumulates from the\ninitial conditions produced by the particle initial conditions generator. The use of this option leads to resetting the energy conservation history to zero, so that any accumulated value during the integration run will have resulted from energy computation occurred\nduring the current run as opposed to the cumulative value.\ndisable_timestep_truncation\nBy default, this option is disabled. The use of this option disables\ntimestep truncation needed to match the output expansion factors\nset by the -aouts flag. For each output expansion factor the data\n\n\fChapter 2: Reference to gracos Executable\n\n29\n\nis saved at the end of the current timestep without timestep truncation. This leads to preserving the natural, non-truncated values\nfor all time steps in the simulation at the inconvenience of having\nslightly higher output expansion factors than those specified by the\nuser.\nbreak:nsteps\nThis option should not be normally used. The mandatory positive\ninteger argument nsteps of this option gives number of time steps\nfor the simulation, after which the integration loop is exited even if\nthe aimed expansion factors specified by the aout are not reached.\nmult\n\nUse multiple timestepping scheme (this option is not currently\navailable).\n\n2.3.1 Checkpoint Control Variables\nThe expanded values of output control variables\nout restart\nout analyze\nout backup\nyield the command to be executed at a checkpoint, See Section 2.3 [integ: Running an\nN-body simulation], page 27.\nIn addition to usual Tcl expansion, the following pattern expansion takes place\n@MODE@\n\nExpands to -mode=save, this pattern should be used in the dataman commands.\n\n@OUTID@\n\nIn case of integ, expands to the id of the current output specifier given in\n-aouts flag, See Section 2.3 [integ: Running an N-body simulation], page 27.\nIn all other cases expands to \"outid\".\n\n@LABEL@\n\nexpands to \"r\", \"a\", \"b\", or \"n\" for restart, analysis, backup or no outputs,\nrespectively.\n\n2.3.2 checkpoint Command\nIf you wish to checkpoint at an arbitrary time, independently of the outputs specified by\nthe -aouts argument to integ, use the checkpoint command; Its usage is as follows\ncheckpoint -labels=LABELS\nwhere LABELS is a string containing any combination of \"r\", \"a\",\nand \"b\", See Section 2.3.1 [Checkpoint Control Variables], page 29.\n\n2.3.3 Automatic Backup Option\nVariable nchkpt (See Section 2.8.2 [gracos Variables], page 61), if set, indicates the backup\nperiod, in seconds. For large integration times it may it may be necessary to leverage the\nsystem failure risk with this option. The timer is started at the beginning of a run with\ngracos. Once nchkpt seconds are passed, variable out_backup is expanded and its content\nis executed. No backups are performed if nchkpt variable is unset.\n\n\f30\n\nGRACOS\n\nGiven extremely large integration times, many instances of the backup are executed. To\navoid unnecessary file accumulation, old backups are removed at each new backup output,\nat this point the @MODE@ pattern is expanded into -mode=delete and @OUTID@ expands to\nthe value OUTID-1.\n\n2.4 image: Particle Data Imaging\nimage is a gracos command implementing the imaging of particles with variaus choices for\nthe projection volume, direction and other imaging parameters. The maximum dynamic\nrange of 256 colors is currently allowed for imaging. The color 0 in the palette corresponds\nto the lowest threshold value below which no contrast can be discerned from the image.\nSimilarly, the color 255 corresponds to the highest threshold in the plotted value.\nA number of code variables must be set before this command is called. One can avoid\nhaving to set them all manually by using the -set-defaults flag:\ngracos% image -set-defaults\n\nto generate a reasonable guess to all the required variables from the current data, See\nSection Section 2.4.1 [Example: Particle Data Imaging], page 31 or Section 2.6.1.1 [Example:\nTabulated Transfer Function], page 39 for the examples of the use of this command.\nThe following is the complete list of the required variables\nimg_cmap\n\nAn integer within the range 0-4, specifying the colormap to be used for images.\nWe found the colormaps 1 and 4 to be most useful. The colormap 4 produces\nblack and white images.\n\nimg_dim\n\nAn integer 1,2 or 3, stands for the direction (x,y or z) of the axis used for the\nprojection of the simulation box. The plane of the generated image will span\nthe remaining two dimensions as shown in the following figure.\n\nimg_idim = 1\n\nimg_idim = 2\n\nz\n\ny\n\nimg_idim = 3\n\nx\n\nz\n\nx\n\ny\n\nimg_cx, img_cy, img_cz\nSpecify the center of the main image box within the simulation volume.\nimg_bx, img_by, img_bz\nSpecify the size of the main image box.\nimg_slabs\nAn integer greater than zero, setting the number of images in the output of\nthe image command. If this number is 1 (the default), then the content of\nthe whole main image box, whose dimensions are given by (img_cx, img_cy,\n\n\fChapter 2: Reference to gracos Executable\n\n31\n\nimg_cz), and (img_bx, img_by, img_bz) is projected into the image plane. If\nthis number is greater than one, then the main image box is split into the same\nnumber of slabs of equal thickness and the output images are the projections\nfor each individual slab in the sequence.\nimg_pixw\n\nSpecify the output image width, in pixels. The height is found automatically\nso as to observe isotropic scaling in all directions within the image plane.\n\nimg_rsmoo\nImage smoothing length.\nimg_rbl, img_rbr\nThe two floating point variables set the contrast.\n\n2.4.1 Example: Particle Data Imaging\nIn the example below, we first load the particle data from a sample datafile (supplied\nalong with the source code distribution) using dataman, then we produce the images of\nthe distribution of particles in the simulation box using different colormaps, projection\ndimensions, image sharpness and image dimensions.\n#!/bin/bash\n# File: gracos-examples/problems/imaging.sh\n# Specify input datafile\npkgdatadir='gracos-config info pkgdatadir'\nInputFile=$pkgdatadir/ParticleData/p3m-0.8_'uname -m'.dat\n# GRACOS Session\nTmpFile='mktemp ./tmp.XXXXXXXX'\ncat > $TmpFile <<EOF\n# Load particles from a sample datafile\ndataman -mode=load -fmtid=p3mdat -masseq\n\n-path=$InputFile\n\n# Set image parameters \"reasonably\", do not actually write the image\nimage --set-defaults -no-image\n# Produce four images with various choices on image parameters:\n# Image 1: the default parameters, set by \"image --set-defaults\"\nimage -path=im1.gif\n# Image 2: change the projection dimension (project along the Y-axis)\n#\nchange to another colormap\nvarset img_cmap 4\nvarset img_dim 2\nimage -path=im2.gif\n# Image 3: Recenter the frame to the halo at the upper right edge\n#\nzoom in, sharpen the resolution scale by the factor of two,\n\n\f32\n\nGRACOS\n\n#\nincrease the upper brightness limit range by a factor of two.\nvarset img_cmap 0\nvarset img_cx [expr [varputs img_cx]+0.5*[varputs img_bx]]\nvarset img_cz [expr [varputs img_cz]-0.2*[varputs img_bz]]\nvarset img_bx [expr 0.3*[varputs img_bx]]\nvarset img_bz [expr 0.3*[varputs img_bz]]\nvarset img_rsmoo [expr 0.5*[varputs img_rsmoo]]\nimage -path=im3.gif\n# Image 4: Invoke Runtime Administration\nvarset admin_path imaging-admin.py\nimage -path=im4.gif\nvarunset admin_path\nEOF\nmpirun -np 4 gracos -i $TmpFile\nrm $TmpFile\n\nThe following runtime administration file must be placed into the same directory under\nthe name imaging-admin.py, See Section 2.1.7 [Runtime Administration], page 10.\n\n# Runtime administration file for imaging.sh\n# File: gracos-examples/problems/imaging-admin.py\nif admin_label == \"image\":\nadmin_out = \"varset img_rbr %E\" % readonly_cmlup\n\n\fChapter 2: Reference to gracos Executable\n\n33\n\nThe four images below have been produced by running the above script. They are\noriginated in the left-to-right, top to bottom order as files im1.gif, im2.gif, im3.gif, and\nim4.gif.\n\nNote that the third image is particularly overexposed. This is because, the default\nvalue (10.) for the img_rbr code variable, giving the upper threshold for the brightness\nrange sampled by the available colormap, is too low for this overdense halo; so that most\npixels on the image fall above the threshold (this default value is set by the image --setdefaults in the above script). In order to tune the threshold to the brightness distribution\nof the pixels we have to use runtime administration technique described in Section 2.1.7.2\n[Repeatable Administration], page 12 because it is generally not possible to determine the\ncorrect value for the upper brightness threshold before the actual data is projected onto the\nimage plate. The instance of runtime administration is invoked for the last image, at the\nimage checkpoint in which the upper brightness threshold is set exactly to the value of the\n\n\f34\n\nGRACOS\n\nbrightness threshold Out_cmlup exceeded by a low fraction (0.003) of the total number of\npixels in the image. This is an example where runtime administration technique is useful.\n\n2.5 pmpower: Power Spectrum Estimation\nPower spectrum is a very frequently used statistics of density field with many analytical\nfits and expressions given in the literature and is directly related to two point correlation\nfunction.\nTyping in gracos prompt\npmpower [--path=FILE ] [--nbins=NBINS ]\n\nyields the binned power spectrum of the currently loaded particle data written in the text\nfile FILE (the default is 'pmpower.dat'); NBINS is the number of bins used within the range\nof the wavevectors of the main Brillouin zone.\nThe data can be visualized by typing the same command in MATLAB :\n>> pmpower [(FILE )]\n\nusing the same default name for FILE .\nIn Section 2.2.8 [Example: Santa Barbara Cluster Project], page 23 and Section 2.6.1.1\n[Example: Tabulated Transfer Function], page 39 we show an example of thus produced\nimage of the power spectrum.\nThe internal procedure for computing the power spectrum is as follows. First, particle\nmass is interpolated on the grid using the TSC density assignment scheme; then the Fourier\ntransform is performed. The value of the power spectrum is estimated for each grid point in\nthe fourier space as proportional to the square of the Fourier transform of the density at the\nsame gridpoint. The binned values of the power spectrum are found by averaging of these\nvalues for each wave vector bin, up to the Nyquist frequency. The rms deviation (the error\nbars) of the binned values are found by dividing the rms deviation of the measurements by\nthe square root of the number of measurements for each bin (the Central Limit Theorem).\n\n2.6 Initial Condition Generators\nIn general, any data simulation or data analysis task is preceded by the specification of the\ncurrent state of the system. In our case, we specify the data such as the particle positions,\nvelocities etc; followed by the parallel domain decomposition.\nThis section shows the examples of running a large simulation with GRACOS for various\nchoices of the initial conditions; these examples are presented in the form of readily executable scripts. Cosmological initial conditions are currently generated using the Zeldovich\napproximation with four methods of specifying the initial power spectrum of density perturbations. This section lists all the currently available methods of automatically generating\nthe initial conditions; both rectangular and glass initial particle grid can be used.\nOnce the initial conditions are generated: the data can be analyzed or evolved, and\nsaved into the datafiles using one of the methods described in Section Section 2.2 [File\nInput and Output with dataman], page 15. Once saved into datafiles, the data can be\nloaded evolved and analyzed again in a separate GRACOS scripting session. In general,\nto start a cosmological simulation, the user is only required to provide the cosmological\nand other simulation parameters. GRACOS starts with those parameters in the input and\nfinishes with the complete realization of the required data, usually the particle data at the\ngiven expansion factors.\n\n\fChapter 2: Reference to gracos Executable\n\n35\n\n2.6.1 grafic: the Initial Conditions Generator\nThis command implements an extension of the grafic1 initial conditions generator originally presented as an Fortran77 code by E. Bertschinger, See Section 3.8 [Serial Fortran\nN-body Codes], page 75.\nSection hundefinedi [sec cgf], page hundefinedi provides us with the test scripts that\nshould be used to verify the compatibility of the result of the gracos command with the\noutput of original Fortran codes.\nThe following gracos variables must be set before this command is called\nnx,ny,nz,dx\nMandatory\nepsilon\n\nUnless the option -nodom is used\n\nomegam, omegav and h0\nUnless the option -lingerdat is used\na\n\nIf this variable is set, it defines the starting expansion factor of the universe.\nEither set this variable or use the -sigstart option described below; error\nmessage terminates the run when attempting to use both ways.\n\nThe grafic command accepts the following options\n-icase=int32\nSelect the type of initial power spectrum (matter transfer function T(k)). The\nInteger takes the following values:\n0\n\nUse tabulated values for the power spectrum. See the -table option.\n\n1\n\nUse the transfer command tabulated in a 'linger.dat' file. See the\n-lingerdat option. Set the omegam, omegav and h0 code variables\nfrom the 'linger.dat' file header.\n\n2\n\nUse the BBKS analytical approximation for the T(k).\n\n3\n\nUse T(k) = 1 (the scale-free case).\n\n-pnorm=float32\nMandatory option. A floating point number, sets the desired normalization at\na = 1:\nfor icase = 0\nMandatory option. pnorm equals -sigma_8 at the present epoch\n(only negative pnorm is cureently allowed).\nfor icase = 1,2\nif pnorm > 0\npnorm equals Qrms-ps/micro-K\nif pnorm < 0\npnorm equals -sigma_8 at the present epoch.\n\n\f36\n\nGRACOS\n\nfor icase = 3\nif pnorm > 0\npnorm equals k^3 * P(k), where P(k) is an unfiltered\nvalue, e.g. with the Gaussian or Hanning filters, of\nthe initial power spectrum, and k = pi/dx (or k =\npi/rsmoo, if the -rsmoo option (down the list) is set\nand rsmoo > dx).\nif pnorm < 0\npnorm equals -sigma_8 at the present epoch.\n-lingerdat\nProvide the name of the lingerdat file (for -icase value 1 only).\n-enable-baryons\nGRACOS currently does not have the capability for gas N-body simulations.\nBy using this option, however, one generates the velocities for baryonic matter,\njust as they would be generated with the original grafic1 code, See Section 3.8\n[Serial Fortran N-body Codes], page 75; this data, however is not used for CDM\nor any other particle initializations. Using this option in conjunction with -icvel-files allows one to save baryonic data into files and analyze it.\n-offvelc=int32\n-offvelb=int32\nInteger parameters for offsetting baryon and CDM velocity fields by 0.5 grid\nspacing. The argument should be +/-1 or 0; the default value is +1, just as\nthe default in the grafic1 code. The origin of the baryon velocity field will be\noffvelb*(0.5,0.5,0.5)*dx and similarly for offvelc.\n-sigstart=float32\nThis option is mandatory unless the a code variable is set before calling grafic.\nsigstart sets the initial linear density fluctuation amplitude on the ultimate sub\ngrid scale (or the approximately starting expansion factor). You must either\nset this option or preset the a code variable before calling grafic.\nIf the power spectrum is sufficiently steep so that k^2 P(k) converges slowly at\nlow wavenumbers (consider for example the scale-free free power spectrum with\nns=-3) the internal romberg integrator fails; use the -trlowk option to avoid\nthis problem.\n-ns=float32\nLong-wave spectral index (scale-invariant is ns = 1.), a floating point number;\ndefines the shape of the primordial power spectrum. This option is mandsatory\nwhen -fnl is used or -table is used with choice:transfer_function.\n-seed=uns32\nMandatory option. The random number seed, - a positive integer smaller than\n2^32-5=4294967291.\n-power-plot=kmin :kmax\nUse this option to make a plot of the power spectrum used to generate the\ninitial conditions. Floating point numbers kmin and kmax define the range of\n\n\fChapter 2: Reference to gracos Executable\n\n37\n\nthe wave vectors (in the units of inverse comoving Megaparsecs) covered by the\nplot. The text file power.dat is produced in the working directory as the initial\nconditions are generated. The first row in this file shows ns and pnorm; the\nremaining rows are\nk/h,\n\nP(k)*h^3, and 4*pi*P(k)*k^3\n\nwhere h equals h0/100; k is the wave vector in the units of inverse comoving\nMegaparsecs; and P(k) is the power spectrum in comoving Megaparsecs cubed.\nIn addition to the data we described each rows may contain additional data\nappended at the end of each line. If this is the case, the specification for the\nadditional data is outside the scope of this reference.\n-unscalable\nUsing this option gives the advantage that the particle realization does not\ndepend on the number of processes used while running gracos. Thus one is\nable to completely replicate the initial particle data realization of the original\ngrafic-2 101 code, See Section 3.8 [Serial Fortran N-body Codes], page 75,\nSee hundefinedi [sec cgf], page hundefinedi. The expense is somewhat slower\nperformance because the last process has to replay the complete sequence of\nrandom numbers almost for the entire box in order to arrive to its starting\nposition in the sequence of random numbers.\nRundom number generators are very fast, and we would generally recommend\nusing this option for any runs smaller than 800^3 particles.\n-ic-vel-files\nGenerate files ic_deltab, ic_velbx, ic_velby, ic_velby, ic_deltac, ic_\nvelcx, ic_velcy, ic_velcy; replicating the output of the original grafic1 code.\nIf gracos is ran in parallel, then for each of the file of the above list, a set of\nfiles file-rank are generated instead, where rank goes from 0 to Nproc-1. This\noption may be useful if you are familiar with the traditional grafic1 output\nand, perhaps, have some data analysis routines that take these file as the input.\nIt may as well be useful as a way to extract the generated baryonic initial\nconditions in case you have chose option -enable-baryons. Note if you are\nusing the -fnl or -glass extensions (See the following table): their effect does\nnot extend to the generated ic_* files.\n-disable-domain-decomposition\nAfter having completely computed the overdensities, and velocities while calling\nthe grafic command, gracos by default uses this information to completely\ninitialize the particle data array and perform the parallel volume domain decomposition, sending particles between the processes; the latter procedure results in the complete setup, such that the commands pmpower or integ may\nbe used, for example without much additional work. The domain decomposition may take a considerable amount of time for very large problem sizes, but\nis necessary for the followup with most of the other gracos commands. Using the -disable-domain-decomposition option will disable particle domain\ndecomposition.\n\n\f38\n\nGRACOS\n\nThis option combined with the -ic-vel-files and -unscalable for icase>0\nwill just result in the very close replication of the result as computed by the\nserial grafic1 code, See Section 3.8 [Serial Fortran N-body Codes], page 75.\n\nIf only the above options are used (excluding the case icase = 0) the produced result will\nbe identical to the roundoff error to the equivalent serial run with the grafic-2_101 code,\nSee Section 3.8 [Serial Fortran N-body Codes], page 75. The following list adds important\noptimization options and a few new options compared to those provided by the original\ngrafic-2_101 code.\n-table=path:string,choice:string\nThis option is applicable for the case icase=0 only. Both path and choice\nsuboptions are mandatory. path gives the name of the two column ASCII file,\nwhose first column is the wave vector expressed in inverse comoving Megaparsecs. The interpretation of the second column depends on the other suboption. If choice equals \"power_spectrum\" then the second column gives the\nprimary power spectrum to be used to setup the initial conditions; if choice\ninstead equals \"transfer_function\" then the second column yields the transfer function. The normalization of the data in the second column is irrelevant\nas the power spectrum is normalized intrinsically.\nThe rows in file path can be given in an arbitrary order. However, the wavevector values given in the table should cover the complete wavevector range used\nin the code, since no automatic extrapolation in the wavevector space is performed. A table with a limited wavevector range should be manually appended\nwith one or two entries to extend the wavevector range as needed at both high\nand low wavevector values.\n-disable-hanning\nDisable the use of Hanning filter, particular to the grafic1 code.\n-fnl=float32\nApply non-Gaussianity correction to the generated initial conditions, fnl is the\nsecond order correction to the primordial proper potential \u03c6 . The motivation\nfor the fnl model of initial conditions, pioneered, among others, by E. Komatsu\nis to explore the possibility that the initial conditions in our universe are slightly\nnon-gaussian, in which the true initial conditions potential \u03c6 can be expanded\nin terms of the gaussian potential \u03c60 as \u03c6 = \u03c60 + fnl (\u03c62 \u2212 h\u03c620 i) when expressed\nin the units of the speed of light squared. The -ns option to grafic must also\nbe set.\n-rsmoo=float32\nApply the gaussian filter; the power spectrum used for the generation of the\ninitial conditions is multiplied by exp(\u2212k2 rsmoo2 ) ; rsmoo is expressed in\ncomoving Mpc.\n-trlowk\n\nLimit the integration to the frequencies above pi/(dx*nx), while computing\npower spectrum normalization to find starting expansion factor using\n-sigstart option; see the description above for the -sigstart option.\n\n\fChapter 2: Reference to gracos Executable\n\n39\n\n-glass=seed:uns32,nexp:float\nGenerate glass initial conditions, instead of those on the regular grid. The seed\nsuboption is mandatory and is used to initialize the initial poisson distribution,\nnecessary for making the glass particle distribution. The nexp suboption is the\nnumber of expansion factors to evolve the poisson distribution with negative\ngravity requested to arrive to the target glass distribution. The quelity of the\nlatter improves with the increase nexp; if no option is given, this number is automatically initialized to the theoretical estimate nmax1 2 , where nmax equals\nthe maximum of nx, ny and nz; even though the theoretically estimated numerical value of nexp is rather large, the nbody simulation will proceed rapidly\nunder the repulsive gravity. One may run the power spectrum tests like those\nshown in Section 2.6.2.2 [Example: generating the glass Distribution], page 52\nin order to show that the generated glass is reliable.\n\n2.6.1.1 Example: Tabulated Transfer Function\nIn this section, we show how to start an arbitrarily large simulation starting from the values\nof cosmological parameters and tabulation for the power spectrum P(k) of matter density\nperturbations; we present the readily executable gracos script below.\nLet us assume that we are having a table of the power spectrum P(k): the values of Pi ,\ntabulated at the wave numbers ki ; where P is expressed in arbitrary units (consistent for\ndifferent i ) and ki is expressed in the units of h/(Mpc comov), where h is the present time\nHubble constant, in the units of 100*km/s/Mpc. The power spectrum table should cover\nthe entire range of the wave vectors used during the gracos run because gracos does not\ndo any extrapolation of power spectrum in this case. The GRACOS installation provides a\nsample of such power spectrum table for use in this example of the gracos-examples, but\nyou should use your own power spectrum table.\nAt the end of this subsection we provide the complete details on how we generated this\npower spectrum table using CMBFAST ).\nFirst, we define the WMAP3 cosmological parameters (we remind that the \".\" at the\nbeginning of the line in bash means sourcing the path as if it were included into the script).\nThe gracos-config executable is a part of GRACOS installation and is used to locate files\nprovided with GRACOS installaion; type\ncat 'gracos-config info pkgdatadir'/CosmoParams/WMAP3\n\nin your shell prompt to see the WMAP3 parameters used.\nThe following line in the script defines the path to the power spectrum file that we\ngenerated using CMBFAST, also the part of the installation for the purpose of this reference;\nagain, the user should generally use their own power spectrum table as the power spectrum\nused in our example is in not suitable for a general situation (as we see at the end of this\nsection).\nNext, we specify the random number seed seed used to generate the sequence of random\nnumbers used by the initial conditions generator and the size of the particle mesh Ngrid\nthe user is free to change this number. The Ngrid parameter is low for the purpose of\nthis example; the user is free to change this number as needed to change the resolution of\nthe N-body simulation (if you significantly increase this number you should also increase\nthe number of processes for the mpirun command line prefix). Next, we arbitrarily set the\n\n\f40\n\nGRACOS\n\nsimulation boxsize Lbox, expresses in comoving Megaparsec (not the Megaparsec/h!) and\ncompute the cell spacing dx using bc (the bc is a simple calculator, usually provided with\nany standard Unix distribution).\nNext, we set the Plummer force siftening length epsilon (expressed in the units of dx)\nand the integration timestepping parameter etat; the 0.05 is a good value; using lower\nvalue will result in more timesteps needed to complete the simulation. Finally, we provide\nthe comma separated list of of output specifiers with aouts (only one in our example); each\nformatted as aout[:modifier], where aouts is the output expansion factor and the modifier\nis a character specifying what to do at the given expansion factor, See Section 2.3 [integ:\nRunning an N-body simulation], page 27 for more explanations.\nNow that we have defined all the simulation parameters, we begin writing the body of\nthe gracos script into a temporary file whose name is generated with a standard mktemp\nUnix command.\nFirst we set the necessary simulation parameters for gracos with a set of varset commands, See Section 2.1.5 [Variables], page 7, Section 2.1.5 [Variables], page 7 and Section 2.8.2 [gracos Variables], page 61. The list of all the necessary parameters for this run\ncan easily be found by the trial and error method (this is indeed how we knew which parameters are needed to be set): gracos terminates with a useful error message any time a\nrequired variable is uninitialized.\nNext, we generate the particle initial conditions by calling the grafic command using\nthe icase=0 selection, See Section 2.6.1 [grafic: the Initial Conditions Generator], page 35.\nThe arguments of this command completely specify al the additional information needed\nto generate the particle realization of the given power spectrum. The -power-plot flag\nprovedes the option to output the power spectrum plot in the given range of wave vectors.\nNext, we call image to generate and image of the simulation box, See Section 2.4 [image:\nParticle Data Imaging], page 30. The -set-defaults flag automatically sets up a default\nselection for all the image parameters. The result is a new GIF file 'i.gif' in the current\nworking directory.\nNext, using dataman (See Section 2.2 [File Input and Output with dataman], page 15)\nwe save the initial conditions data into file using the distributed file input-output, See Section 2.2.3 [udf: Unified Datafile Format], page 18; call integ to start an N-body simulation,\nmake an image using image, and call dataman again to save the data in the evolved state.\nFinally, we make another image of the simulation box, producing file 'f.gif'.\nThe entire gracos session is written into a temporary file $TmpFile, whose name is\npassed as the argument to the -i option to gracos; gracos is ran in parallel with mpirun\ncommand on four processes.\nThe user is free to increase the problem size by increasing Ngrid and the number of\nprocesses, up to the system resource limitation.\n#!/bin/bash\n# File: gracos-examples/problems/pktable.sh\n# Define cosmlogical parameters: H0,Om,Ob,Ov,Oc,ns,sig8,taulss\n. 'gracos-config info pkgdatadir'/CosmoParams/WMAP3\n# Produce the transfer function table using\n\n\fChapter 2: Reference to gracos Executable\n\n# the Eisenstein and Hu fitting formula\ntable=table.dat\ngracos-ehu \\\n--hubble='echo \"$H0/100.\" | bc -l' \\\n--krange=1.E-5:300:100. \\\n--omega_baryon=$Ob \\\n--omega_lambda=$Ov \\\n--omega_matter=$Om \\\n--redshift=0 \\\n> $table\n# Extend the wavevector range covered by the table manually\n# with one k_low, T(k_low) pair, borrowing the value of the transfer\n# function from the first entry of the already existing table\n# (since T=const at low k).\ntable_ext=table-ext.dat\nawk 'NR == 1 {print 1.0E-50, $2}' $table > $table_ext\ncat $table >> $table_ext\n\n# Set simulation Parameters for GRACOS\n# Random number seed\nseed=123456789\n# Number of particles and PM-grid points per one side\nNgrid=32\n# Simulation boxsize, comoving Megaparsec\nLbox=200.\n# Grid spacing\ndx=$(echo \"$Lbox/$Ngrid\" | bc -l)\n# Integration timestep parameter\netat=0.05\n# Plummer force softening length (in units of dx)\nepsilon=0.1\n# GRACOS Session\nTmpFile='mktemp ./tmp.XXXXXXXX'\ncat > $TmpFile <<EOF\nvarset epsilon $epsilon\nvarset\nvarset\nvarset\nvarset\nvarset\nvarset\nvarset\n\nnx $Ngrid\nny $Ngrid\nnz $Ngrid\nomegam $Om\nomegav $Ov\nh0 $H0\ndx $dx\n\n41\n\n\f42\n\nGRACOS\n\ngrafic -icase=0 \\\n-table=path:$table_ext,choice:transfer_function \\\n-offvelc=1 -ns=$ns \\\n-sigstart=0.2 \\\n-pnorm=-$sig8 -seed=$seed \\\n-power-plot=1E-5:10\n# Measure the power spectrum from the box.\npmpower -nbins=100\n# Make an image\nimage --set-defaults -path=ini.gif\n# Integration parameter\nvarset etat $etat\n# Measure the initial conditions power spectrum\npmpower -path=pmpower-ini.dat\n# Optionally pass extra commands from users SHELL environment\n$gracos_extra_commands\n# Saving data using the Unified Data Format\ndataman -mode=save -fmtid=udf -path=ini.udf# Start the N-body simulation\n# The -aouts argument is a comma-separated list of output specifiers\ninteg -aouts=1.:n\n# Make an image\nimage --set-defaults -path=fin.gif\n# Measure the evolved state power spectrum\npmpower -path=pmpower-fin.dat\n# Again, saving data using the Unified Data Format\ndataman -mode=save -fmtid=udf -path=fin.udfEOF\nmpirun -np 4 gracos -i $TmpFile\nrm $TmpFile\n\nImaging\nShown below are the images in files ini.gif and fin.gif (the latter is at redshift zero) produced by the image command just before and after the particles are evolved with the integ\nGRACOS command as shown in the script above. If we makes a sequence of these images as\n\n\fChapter 2: Reference to gracos Executable\n\n43\n\nwe evolve the box we can actually observe that the large scale structure is smoothly transformed from that of shown on the left panel to that on the right (please See Section 2.1.7\n[Runtime Administration], page 10 for the available options on executing arbitrary commands, such as image for making images, in the runtime).\n\nAn Example of Run Time Administration\nIt is generlly possible to make the images on the fly, using the technique described in See\nSection 2.1.7 [Runtime Administration], page 10. Here we demonstrate an example of this.\nBy copying the example below into file inc.tcl within the working directory during the run,\nwe execute the imaging command (see the example) as soon as the runtime control reaches\nthe integ checkpoint; the current images are then created and this file is automatically\nerased. We do not show the image generated; because they apparently depend on the exact\ntime at which the inc.tcl file is created. You should try this copy command while running\nthe above script.\n# File: gracos-examples/problems/admin-image.tcl\nif { $admin_label eq \"integ\" } {\n# Make the images as soon as the 'integ' checkpoint\n# is reached\n# This file is deleted because 'admin_keep' is unset.\nimage -set-defaults\n} else {\n# Keep this file in case of other checkpoints\nset admin_keep 1\n}\n\nThe Power Spectrum\nNow, typing\n\n\f44\n\nGRACOS\n\npmpower('pmpower-fin.dat')\npmpower('pmpower-ini.dat')\nicpower\n\nin MATLAB in the same directory yields the plot below of the power spectrum of density\nperturbations as a function of the wave number, spanning the range of [2\u03c0/(nx * dx) ,\u03c0/dx)\nas shown by the two vertical dash-dotted green lines.\n\nThe red line at the bottom is the power spectrum used for the generation of particle\ninitial conditions. The oscillations of this curve above the Nyquist frequency are caused\nby the use of the Hanning filter and should not worry the reader, as they are outside\nthe wavevector range used. Passing the -disable-hanning option to grafic disables the\nHanning filter; the black dashed line shows the unfiltered power spectrum.\n\nThe lower broken blue line is the measurement of the power spectrum based on the\nunevolved particle positions (See the first pmpower call in the GRACOS script above). The\ndeviations from the red curve are due to the following effects: 1) Cosmic variance at low\nwavenumbers; 2) the effect of the randomness of the current particle realization given the\npower spectrum; 3) coarse graining near the Nyquist frequency.\n\nThe upper blue broken line is the power spectrum of matter perturbations in the evolved\nstate (the second pmpower call) and the black dash-dotted line shows the initial power\nspectrum given by the red line corrected multiplied by the linear growth rate characteristic\nfor the expansion from the starting expansion factor to redshift zero, the final point of our\nsimulation. The systematic deviation of the black dash dotted line with the upper blue\nbroken line is due to the nonlinear evolution.\n\n\fChapter 2: Reference to gracos Executable\n\n45\n\nInitial power spectrum of density fluctuations\n3\n\nlog10 ( P(k), [comov. Mpc]3 )\n\n2\n1\n0\n\u22121\n\u22122\n\u22123\n\u22124\n\u22125\n\n\u22122.5\n\n\u22122\n\n\u22121.5\n\u22121\n\u22120.5\nlog10 ( k, [ 1 / (comov. Mpc) ] )\n\n0\n\n0.5\n\n2.6.1.2 Example: lingers Initial conditions\nIn this section we show how to start an arbitrarily large simulation of CDM with gracos\ndirectly, starting from the values of the cosmological parameters using the included lingers\npackage, a subpackage by C. Ma, E. Bertschinger, 1995 included into GRACOS, See Section 3.8 [Serial Fortran N-body Codes], page 75. lingers is automatically installed during\nthe Section 4.3 [GRACOS Package Installation], page 79. The transfer function tabulated\nin both redshift and k-space is included into the linger.dat file automatically generated\nusing lingers.\nAs we know, the baryonic, CDM and matter transfer functions agree to within the\npercent level close to z = 0. For the power spectrum normalization we use sigma8 of the\npower spectrum of all matter linearly evolved to z = 0. \u03c38 is measured as an integral\nwith respect to k over the power spectrum at a given a. Usually it is assumed that the\npower spectrum grows as D+ . With lingers however this dependence is intrinsic and is not\nfactored out.\nIf we plot the power spectrum at a=0.02 (normalized at z=0), then we go back by\nthe intrinsic growth factor and by the D+ in the two cases. In the result we get a good\nagreement between the curves. The ehu curve goes right through the middle of the matter\npower spectrum oscillations. But the CDM particle displacements are generated with the\nCDM power spectrum, not matter. The CDM and MATTER power spectra, while almost\n\n\f46\n\nGRACOS\n\nmatching exactly each other at z=0, are very far apart at a=0.02 (about 12% or dlog10 =\n0.05).\nNow, if we assume that Om=Oc+Ob, we imply that the power spectra of Oc and Ob\nexactly match each other at a=0.02. The correct thing to do would be to generate the\ndisplacements using the matter power spectrum at astart.\nThe evolution factor of CDM is different than that for MATTER.\n#!/bin/bash\n# File: gracos-examples/problems/lingers.sh\n# Define cosmlogical parameters: H0,Om,Ob,Ov,Oc,ns,sig8,taulss\n. 'gracos-config info pkgdatadir'/CosmoParams/WMAP3\n# Run lingers from the included grafic1 package to generate transfer\n# function and store it in 'linger.dat' file.\ntcmb=2.726; yhe=0.24\nkmin=1.E-5; kmax=10.; nk=121\nzend=0.; case=1\nTmpFile='mktemp ./tmp.XXXXXXXX'\ncat > $TmpFile <<EOF\n$Ob $Oc $Ov 0\n$H0 $tcmb $yhe 0\n$kmin $kmax $nk $zend\n$case\nEOF\ncat $TmpFile | lingers\n# Set the simulation Parameters for GRACOS\n# Random number seed\nseed=123456789\n# Number of particles and PM-grid points per one side\nNgrid=32\n# Simulation boxsize, comoving Megaparsec\nLbox=200.\n# Grid spacing\ndx=$(echo \"$Lbox/$Ngrid\" | bc -l)\n# Integration timesteping parameter\netat=0.05\n# Plummer force softening length (in units of dx)\nepsilon=0.1\n# GRACOS Session\ncat > $TmpFile <<EOF\nvarset epsilon $epsilon\nvarset dx $dx\n\n\fChapter 2: Reference to gracos Executable\n\nvarset nx $Ngrid\nvarset ny $Ngrid\nvarset nz $Ngrid\n# Generate Initial Conditions with grafic\ngrafic -icase=1 \\\n-offvelc=1 \\\n-sigstart=0.2 -ns=$ns -lingerdat=linger.dat \\\n-pnorm=-$sig8 -seed=$seed \\\n-power-plot=$kmin:$kmax \\\n$grafic_flags_extras\n# Measure the power spectrum; display with pmpower MATLAB command.\npmpower\n# Make an image\nimage --set-defaults -path=ini.gif\n# Optionally pass extra commands from users SHELL environment\n$gracos_extra_commands\n# Integration parameter\nvarset etat $etat\n# Saving data using the Unified Data Format\ndataman -mode=save -fmtid=udf -path=ini.udf# Start the N-body simulation\n# The -aouts argument is a comma-separated list of output specifiers\ninteg -aouts=1.:n\n# Make an image\nimage --set-defaults -path=fin.gif\n# Again, saving data using the Unified Data Format\ndataman -mode=save -fmtid=udf -path=fin.udfEOF\nmpirun -np 8 gracos -i $TmpFile\nrm $TmpFile\n\n47\n\n\f48\n\nGRACOS\n\nTyping icpower and pmpower now, in MATLAB, within the working directory yields\nthe power spectrum plot. The resulting plot is distinguishable from the plot in the previous\nsection, by the presence of the baryonic oscillations.\nInitial power spectrum of density fluctuations\n2\n\nlog10 ( P(k), [comov. Mpc]3 )\n\n1\n0\n\u22121\n\u22122\n\u22123\n\u22124\n\u22125\n\n\u22122.5\n\n\u22122\n\n\u22121.5\n\u22121\n\u22120.5\nlog10 ( k, [ 1 / (comov. Mpc) ] )\n\n0\n\n0.5\n\n2.6.1.3 Example: BBKS Initial Conditions\nAn analytical approximation to the initial power spectrum by Bardeen, Bond, Kaiser and\nSzalay named thus the BBKS approximation is directly applicable in gracos.\nFile gracos-examples/problems/bbks.sh In this section we show how to start an arbitrarily large cosmological N-body simulation starting with values for a few cosmological\nand simulation parameters, and assuming that the initial power spectrum is described by\nthe BBKS approximation.\nThe user should be familiar with the content of the script shown below from the discussion in the two previous sections. The script below does not make calls to executables\nrather than gracos: using the BBKS approximation is reserved for icase=2:\nTyping icpower in MATLAB within the working directory yields the power spectrum\nplot below. As we see by comparison with the power spectrum plot generated with CMBFAST and lingers, the BBKS approximation is slightly underestimates power for lower\nwave vectors, while slightly exaggerating for larger k's.\n\n2.6.1.4 Example: Scale-Free Initial Conditions\nSometimes it is useful to start a simulation using scale-free initial conditions with P(k)\nproportional to k^ns.\n\n\fChapter 2: Reference to gracos Executable\n\n49\n\nThis section shows how, given a few required parameters, to start an arbitrarily large\nsimulation with scale-free power spectrum of matter perturbations. The icase=3 option\nto grafic is dedicated to scale free initial conditions. The script below is very similar to\nthe one in the previous section, which, similarly to the present case, uses an analytical\nexpression for the initial power spectrum of CDM density perturbations.\n#!/bin/bash\n# File: gracos-examples/problems/scalefree.sh\n# Define cosmlogical parameters: H0,Om,Ob,Ov,Oc,ns,sig8,taulss\n. 'gracos-config info pkgdatadir'/CosmoParams/WMAP3\n# Set simulation Parameters for GRACOS\n# Random number seed\nseed=123456789\n# Number of particles and PM-grid points per one side\nNgrid=32\n# Simulation boxsize, comoving Megaparsec\nLbox=200.\n# Grid spacing\ndx=$(echo \"$Lbox/$Ngrid\" | bc -l)\n# Integration timestep parameter\netat=0.05\n# Plummer force softening length (in units of dx)\nepsilon=0.1\n# GRACOS Session\nTmpFile='mktemp ./tmp.XXXXXXXX'\ncat > $TmpFile <<EOF\nvarset epsilon $epsilon\nvarset\nvarset\nvarset\nvarset\nvarset\nvarset\nvarset\n\nnx $Ngrid\nny $Ngrid\nnz $Ngrid\nomegam $Om\nomegav $Ov\nh0 $H0\ndx $dx\n\ngrafic -icase=3 \\\n-seed=$seed \\\n-offvelc=1 \\\n-sigstart=0.2 -ns=$ns -pnorm=-$sig8 \\\n-power-plot=1.E-5:10 \\\n$grafic_flags_extras\n\n\f50\n\nGRACOS\n\n# Make an image\nimage --set-defaults -path=ini.gif\n# Integration parameter\nvarset etat $etat\n# Saving data using the Unified Data Format\ndataman -mode=save -fmtid=udf -path=ini.udf# Start the N-body simulation\n# The -aouts argument is a comma-separated list of output specifiers\ninteg -aouts=1.:n\n# Make an image\nimage --set-defaults -path=fin.gif\n# Again, saving data using the Unified Data Format\ndataman -mode=save -fmtid=udf -path=fin.udfEOF\nmpirun -np 4 gracos -i $TmpFile\nrm $TmpFile\n\n2.6.2 poisson: Poisson Distribution\nThis routine may be a good starting point if you want to write your own initial conditions\ngenerator that can not be expressed as an extension of grafic.\nThis command generates N Poisson-distributed particles across the box. The syntax is\npoisson -seed=seed\n\nwhere seed is a random number seed.\nVariables nx, ny and nz must be set. If npartall code variable is unset, then the total\nnumber of generated particles along with the npartall code variable are set to nx*ny*nz;\notherwise N equals npartall.\nThe internal procedure is as follows. The volume domain decomposition is performed\nso that approximately equal volumes are assigned to each process. The Poisson random\nnumber generator is called on each process with exactly the same random number seed\nso that each process scans the identical sequence of randomly distributed particles. If a\nparticle belongs to a given process, that process assigns that particle to itself; the entire\nseqence of particles is thus assigned to all Nproc processes.\nThe Poisson random number generation is relatively fast. However, the procedure described above, is not scalable. In principle, by generating particles with varying random\nnumber seed on each process, one can make this procedure scalable: each process would try\nto assign each particle in the sequence by a certain mapping from the uniform distribution\nwithin simulation volume into the irregular volume particular to each process. The Jacobian\nof the mapping must equal to one; we are not certain at this point however on how to setup\n\n\fChapter 2: Reference to gracos Executable\n\n51\n\nsuch a mapping, suggestions are welcome however. Hence, we are currently employing the\nabove non-scalable procedure which is safe against any tiling effects.\n\n2.6.2.1 Example: Poisson Distribution\nIn the example below we generate the power spectrum of the Poisson particle distribution\n(See Section 2.6.2 [poisson: Poisson Distribution], page 50) and compare it with the analytic\nslope (zero).\n#!/bin/bash\n# File: gracos-examples/tests/powersp/poisson.sh\nNgrid=128\n# GRACOS Session\nTmpFile='mktemp ./tmp.XXXXXXXX'\ncat > $TmpFile <<EOF\n# Gridsize and particle number\nvarset nz $Ngrid\nvarset ny $Ngrid\nvarset nx $Ngrid\n# Needed for domain decomposition\nvarset epsilon 0.1\nvarset dx 1.0\n# Generate Poisson particle distribution\npoisson -seed=123456789\n# Measure the power spectrum. Use pmpower MATLAB command to visualize.\npmpower\ndataman -mode=save -fmtid=binpart -spec=xs,ys,zs -path=poisson.bin\nEOF\nmpirun -np 4 gracos -i $TmpFile\nrm $TmpFile\nTyping\npmpower\nyline( log10(1/(2*pi)^3) )\n\nin MATLAB yields the image below. The theoretical power spectrum of the Poisson\ndistribution is the constant 1/(2*pi)^3, shown with the horizontal slash-dotted line; this\nprediction is mostly observed in the plot generated. The large error bars on large scales (low\nwavevectors) are due to cosmic variance or low statistical sample of these modes; while at the\n\n\f52\n\nGRACOS\n\nvery high wavenumbers there is a characteristic upturn, whose nature is not entirely obvious.\nThe plot shows the bounds of the validity of the power spectrum generated with pmpower.\nPower spectrum of density perturbations\n\u22121.8\n\nlog10 ( P(k), [comov. Mpc]3 )\n\n\u22122\n\u22122.2\n\u22122.4\n\u22122.6\n\u22122.8\n\u22123\n\u22123.2\n\u22121.4\n\n\u22121.2\n\n\u22121\n\n\u22120.8\n\n\u22120.6\n\u22120.4\n\u22120.2\n0\nlog10 ( k, [ 1 / (comov. Mpc) ] )\n\n0.2\n\n0.4\n\n2.6.2.2 Example: generating the glass Distribution\nThis command generates N Glass-distributed particles across the box. The syntax is\nglass -seed=seed -nexp=nexp\n\nwhere seed is a random number seed and nexp is the number of expansion factors requested\nto evolve glass. Further in this Section Section 2.6.2.2 [Example: generating the glass\nDistribution], page 52 we provide an example of using this command.\nIn GRACOS, the procedure for making glass distribution is defined as follows: first\nwe distribute particles uniformly across the box, using the Poisson distribution; then we\nevolve the particles with negative gravity. By measuring the power spectrum, we find that\nthe power spectrum, initially dominated by the shot noise, settles down to form the single\npower law power spectrum characteristic for glass P (k) .\nGlass distribution for particles, introduced by S. White, is similar to the distribution of\nmoleculae in a liquid, (we know from the statistical mechanics background that the glass\nmaterial is liquid). GRACOS provides the utility for generating glass distribution and glass\ninitial conditions, See Section 2.6.2.2 [Example: generating the glass Distribution], page 52\nfor more details.\nAs a good test of GRACOS one can run a simulation to produce the glass structure and\nmeasure the power spectrum during the inversed gravity run. Shown below, as usual is the\nGRACOS script that does the job. This is also, the first script in this reference that makes\nuse of the runtime administration technique to measure the power spectrum on the fly (See\nfurther below for more details).\n\n0.6\n\n\fChapter 2: Reference to gracos Executable\n\n53\n\n#!/bin/bash\n# File: gracos-examples/tests/powersp/glass/generate.sh\nTmpFile='mktemp ./tmp.XXXXXXXX'\ncat > $TmpFile <<EOF\n# Set simulation parameters\nvarset nz 32\nvarset ny 32\nvarset nx 32\nvarset omegam 1.0\nvarset omegav 0.0\nvarset dx 1.\nvarset a 0.00001\nvarset epsilon 0.1\nvarset etat 0.05\n# Request a repeated runtime administration\n# to measure power spectrum on the fly.\nvarset admin_path generate-admin.py\n# Generate glass particle distribution by expanding the\n# uniform poisson initial particle distribution with inverse gravity\n# for the 1.E15 expansion factors.\nglass -seed=123456789 -nexp=1.E15\n# Invoke an additional instance of runtime administration explicitly\nadmin\n# Save the data into one file in the xs,ys,zs binary format\ndataman -mode=save -fmtid=binpart -spec=xs,ys,zs -path=glass.bin\nEOF\nmpirun -np 4 gracos -i $TmpFile\nrm $TmpFile\nThe above script as is will just generate the assumed glass particle distribution. But\nin order to test wether a reliable glass distribution is indeed generated we must measure\nthe power spectrum and compare it with the power spectrum of glass distribution which\nis shown theoretically to be a fourth power low of the wave number k. We can just place\nthe pmpower command at the end of the above script. But it would be useful to see\nhow the power spectrum really evolves as we evolve particles with negative gravity for\nthis purpose we make use of the repeated runtime administration method described in\nSection Section 2.1.7.2 [Repeatable Administration], page 12. Shown below is the Python\nruntime administration file that should be placed into the same directory as the script above.\nThe runtime administration script conditionally invokes a set of GRACOS commands to\nexecute in a GRACOS subsession. The script mostly consists of the useful comments but\nis essentially just a few lines long.\n\n\f54\n\nGRACOS\n\n#!/usr/bin/python\n# File: gracos-examples/tests/powersp/glass/generate-admin.py\n# Runtime administration file to measure the power spectrum\n# at the specified timesteps and on any explicit administration call.\n# First, restrict the administration to the specified checkpoints\nif admin_label == 'integ_pre' or admin_label == 'integ' or admin_label == 'admin':\n#\n#\n#\n#\n#\n\nThe condition to measure the power spectrum:\nSpecify the timesteps at which to measure the power spectrum\n1. Measure the power spectrum at the specified timesteps\n2. Measure the power spectrum each 'admin' administration checkpoint\nindependently of the timestep\n\nspecific_nsteps = [0, 22, 62, 116, 149, 194]\ntag = None\n# Check to see if the current administration checkpoint is labeled 'admin'\nif admin_label == 'admin':\ntag = \"fin\"\n# Check to see if the current timestep is one of the specified in the list\nelif nstep in specific_nsteps:\ntag = \"%d\" % nstep\n# Conditionally measure the power spectrum. The admin_out variable,\n# when set in this script, yields the GRACOS script to execute.\nif tag:\nadmin_out = [\n'# ::::::: Instance of Runtime Administration at timestep %d\"' % nstep\n, 'pmpower --path=glass-%s.dat' % ( tag )\n, '# :::::: Runtime administration finished'\n]\nUsing the Pythons flexibility it is quite easy to make any other selection in the above\nscript, say, for example, to make power spectrum measurements each specified number of\ntimesteps, make images of the particle distribution, save the data into files, or any other\noperation allowed by the set of the GRACOS commands. One can modify the content\nof this file during the run to change the administration mode as needed. Using runtime\nadministration thus yields a very powerful method of control.\nNow, if you run the bash shell script at the beginning of this section, and issue the\nfollowing commands in MATLAB (in the same directory)\n>>\n>>\n>>\n>>\n>>\n>>\n\npmpower('glass-0.dat')\npmpower('glass-22.dat')\npmpower('glass-62.dat')\npmpower('glass-116.dat')\npmpower('glass-149.dat')\npmpower('glass-194.dat')\n\n\fChapter 2: Reference to gracos Executable\n\n55\n\n>> pmpower('glass-fin.dat')\n\nyou will see the following plot of the power spectra at the timesteps specified in the runtime\nadministration script.\n\nPower spectrum of density perturbations\n\u22121\n\nlog10 ( P(k), [comov. Mpc]3 )\n\n\u22122\n\u22123\n\u22124\n\u22125\n\u22126\n\u22127\n\u22128\n\u22129\n\u221210\n\u22120.8\n\n\u22120.6\n\n\u22120.4\n\u22120.2\n0\n0.2\nlog10 ( k, [ 1 / (comov. Mpc) ] )\n\n0.4\n\n0.6\n\nThe upper curve on the plot just shows the white noise of the initial Poisson distribution\n(glass generation starts with uniformly distributed random poisson particle distribution,\nSee Section 2.6.2.2 [Example: generating the glass Distribution], page 52 for more details).\nThe white noise curve is in agreement with the theoretically predicted zero white noise\npower slope. As we evolve matter with the negative gravity to form glass distribution the\nmatter becomes less and less chaotic as particles move under the repulsive force from each\nother; the power spectrum thus settles down on all scales. Since the theoretical slope of the\nglass distribution is approximately the fourth power of the wave vector, the modes with the\nhighest wave number hit their theoretical glass power spoectrum curve, in agreement with\nthe behavior shoun, where for the timestep 62, for example, the small scale perturbations\nare smoothly distributed along the theoretical curve and the largest scale perturbations\nare still settling down. Finally, as we evolve matter for 15 powers of the expansion factor,\nthe matter settles down on all scales sampled by the simulation desolution. We have thus\nreached the accurate distribution on all scales.\n\n2.6.3 Glass Extension\nThis option is under development; please, email GRACOS authors if you have any specific\nsuggestions.\n\n\f56\n\nGRACOS\n\n2.7 halo_finder: Halo Finder\nThis command is currently under development; email GRACOS authors to indicate your\ninterest in this command or any suggestions you may have.\n\n2.8 Tables of Reference\nThis section provides the tables of all the available gracos commands, variables and modes.\nA short description (a docstring) is supplied for each entry; the detailed descriptions may\nbe found in more specialized sections of this reference.\n\n2.8.1 gracos Commands\nThe following table lists all the available gracos commands and options. The internal\nTcl procedures and the procedures sourced in the gracos startup file init.tcl (See Section 2.1.4 [Commands], page 6) are not listed here.\nhelp\nDisplay Reference Tables in XML format\nLocation: gracos.c:295\nARGUMENTS\n-o string\nend\nRequest an end to the scripting session as soon as possible.\nLocation: cdcom.c:407\ninc\nProcess commands given in the file.\nLocation: cdcom.c:389\nARGUMENTS\n-path string\nadmin\nInvoke an instance of runtime administration now\nLocation: gracos.c:82\nARGUMENTS\n-i string\nenv\ncvars , Print values of environment variables\nLocation: cdcom.c:505\nARGUMENTS\n-xml int32\n-o string\nvarset\nSet a given variable to a given value.\nLocation: cdvar.c:423\nvarunset\n\n\fChapter 2: Reference to gracos Executable\n\nUnset a variable\nLocation: cdvar.c:354\nvarputs\n\nPrint the value of a specified variable\nLocation: cdvar.c:570\nvars\n\nShow current values for a code variable\nLocation: cdvar.c:610\nARGUMENTS\n-a int32\n\n-v string\nvarchmod\n\nSet write permission for a given variable.\nLocation: cdvar.c:395\ndataman\n\nManage data and datafiles\nLocation: dataman.c:204\nARGUMENTS\n-prefixes string\n-suf string\n-mode string\n-fmtid string\n-masseq int32\n-path string\n-spec string\n-sort int32\ngrafic\n\n57\n\n\f58\n\nGRACOS\n\nGenerate particle cosmological initial conditions\nLocation: grafic.c:224\nARGUMENTS\n-lingerdat string\n-disable-hanning int32\n-ic-vel-files int32\n-unscalable int32\n-rsmoo float32\n-power-plot string\n-disable-domain-decomposition int32\n-sigstart float32\n-pnorm float32\n-trlowk int32\n-glass string\n-seed long unsigned\n-enable-baryons int32\n-fnl float32\n-icase int32\n-table string\n-ns float32\n-offvelc int32\n-offvelb int32\nglass\nGenerate glass particle distribution\nLocation: glass.cc:107\nARGUMENTS\n-nexp float32\n-seed long unsigned\npoisson\nGenerate Poisson particle distribution\nLocation: poisson.cc:154\nARGUMENTS\n-seed long unsigned\ninteg\nStart an N-body simulation\nLocation: integ.c:320\nARGUMENTS\n-aouts string\n-mode string\ncheckpoint\nCheckpoint your simulation\nLocation: misc.cc:273\nARGUMENTS\n-labels string\naccel\n\n\fChapter 2: Reference to gracos Executable\n\nCompute particle accelerations\nLocation: singular.cc:122\nimage\n\nVisualization\nLocation: wimage.c:276\nARGUMENTS\n-path string\n-no-image int32\n-set-defaults int32\npmpower\n\nDensity power spectrum estimation using, PM interpolation.\nLocation: pmpower.c:244\nARGUMENTS\n-path string\n-nbins int32\nlbal\n\nRepartitioning: Calculate current loads and adjust partitions.\nLocation: lbal.c:712\nhc partit set\nSet partitions to the given state.\nLocation: repartit.cc:1369\nhc shrink\n\nShrink particle data to the bottom processes\nLocation: repartit.cc:1508\nARGUMENTS\n-np int32\nhc adj\n\n59\n\n\f60\n\nGRACOS\n\nMove the top partition of the specified process by a specified number\nof cells\nLocation: repartit.cc:1194\nhc adj shift\nShift all the partitions by the given number calls along the SFC.\nLocation: repartit.cc:1403\nhc loadplot\nOutput ASCII data files with information on current workload\ndistribution.\nLocation: lbal_loads.cc:727\ncompare particles serial\nAnalyze particle data in data files\nLocation: gtool.c:49\nARGUMENTS\n-load1 string\n-load2 string\n-include string\nsam selectbox\nSelect all particles within the given box. By marking them with\nnegative ids.\nLocation: sampling.c:99\nARGUMENTS\n-xc float32\n-yc float32\n-b float32\n-zc float32\nsam unselectall\nUnselect particles by setting their ids to be positive.\nLocation: sampling.c:123\nsam traj\nUpdate an ASCII datafile the trajectories of the selected particles\nLocation: sampling.c:229\nan\nGiven the particle id, show the process it resides on and its\nx,m,v,g.\nLocation: gtoolp.cc:101\nARGUMENTS\n-id int32\nan idsort\n\n\fChapter 2: Reference to gracos Executable\n\n61\n\nSort particles by their ids, placing them contiguously and\ndestroying the HC structure.\nLocation: gtoolp.cc:148\nan compare\nCompare in parallel, id sorted sets of particles in two datafiles at\ngiven paths\nLocation: gtoolp.cc:527\nARGUMENTS\n-path2 string\n-path1 string\neuler planes\nOutput some eulerian space analysis.\nLocation: sampling.c:502\nARGUMENTS\n-what string\n-id int32\n\n2.8.2 gracos Variables\nThe following table lists of all the gracos variables for version 1.0.1a9. The description of\nbitwise variables also lists the available modes.\nversion\nVersion number, when last configured\nFormat: string\nInitialization value: 1.0.1a9\nnproc\nThe number of processes\nFormat: int32\nInitialized to the current number of MPI processes\ntverb\nGlobal verbosity\nFormat: int32\nInitialization value: 8451\n(which is, in token representation: prm | eval | sci | dat)\nVariable \"tverb\" is bitwise, the following table lists all the\nallowed modes.\nprm\n\nShow Prompt\n\neval\n\nShow all Tcl commands being processed\n\nprogr\n\nShow progress updates in the position and potentially lengthy routines\n\ntimers\n\nTimer operations\n\n\f62\n\nGRACOS\n\nmpi\n\nShow where MPI Commands start and finish\n\nfftw\n\nShow where FFTW starts and finishes\n\nalc\n\nMemory allocation and release\n\npaths\n\nShow file I/O paths\n\nsci\n\nShow some science data\n\npars\n\nParsing results for options and suboptions\n\nvar\n\nVariable management\n\nmk\n\nSelected data on all processes\n\nmk1\n\nExtension of mk (large, use with caution)\n\ndat\n\nTechnical data in a human readable form\n\ndat1\n\nExtension of dat: arbitrary form of output\n\ndat2\n\nExtension of dat1 for more verbose outputs\n\ndump\n\nDebug data dumps (large, use with caution)\n\ntmode\nGlobal mode\nFormat: int32\nInitialization value: 1\n(which is, in token representation: warn)\nVariable \"tmode\" is bitwise, the following table lists all the\nallowed modes.\nwarn\n\nShow warning messages\n\ndeb2\n\nRun heavy error checking routines along the way\n\nwraps\n\nEnable misc. (e.g. MPI and FFTW) wrappers\n\ntetol\nGlobal error tolerance mode\nFormat: int32\nInitialization value: 0\nVariable \"tetol\" is bitwise, the following table lists all the\nallowed modes.\n\nsmode\n\nvar\n\nIgnore any uses of a variable with unknown name\n\nfun\n\nIgnore calls unknown function calls\n\nsys\n\nIgnore system calls that return error\n\n\fChapter 2: Reference to gracos Executable\n\n63\n\ngracos-specific mode\nFormat: int32\nInitialization value: 0\nVariable \"smode\" is bitwise, the following table lists all the\nallowed modes.\nfast\n\nSpeedup, by disabling accompanying time consuming science computations\n\nspeedup\n\nSpeedup by disabling some inexpensive error checks\n\nfftw work\n\nEnable the FFTW work buffer allocation while computing FFT's..\n\norigmode\nMode to immitate the Fortran codes\nFormat: int32\nInitialization value: 0\nVariable \"origmode\" is bitwise, the following table lists all the\nallowed modes.\nold tschm Do not use new scheme for timesteps\nold pmtab Do not use new pmtables\nold spl\n\nDo not use splines for short range forces\n\nold crmax Do not use new method for crmax\nold rfmt\n\nDo not select refinement number based on timing\n\nold lintab\n\nDo not use linear table at inner radii\n\nonly dkd\n\nHalt, if trying to use not the original (DKD, single timestepping)\nintegration scheme.\n\norig filter\n\nDo not use A.V.S. Hanning filter use correction.\n\nlowk bug\n\nDo not apply low k interpolation bugfix in linger.dat input.\n\nlingers norm\nDo not fix lingers expansion factor normalization bug\ngrafic1\n\nDo not apply various grafic1 fixes\n\nadmin_path\nThe default name of the script to process to invoke subinterpreter.\nFormat: string\nNot initialized\nh0\nPresent value of the Hubble constant, expressed in (km/s)/Mpc\nFormat: float32\nNot initialized\na\n\n\f64\n\nGRACOS\n\nUniverse expansion factor\nFormat: float32\nNot initialized\nomegam\nUniverse matter density parameter (CDM + baryonic + cold neutrinos)\nFormat: float32\nNot initialized\nomegav\nUniverse vacum energy density parameter\nFormat: float32\nNot initialized\ndx\nThe density and force mesh cell spacing, expressed in comoving\nMegaparsecs.\nFormat: float32\nNot initialized\nnx\nSimulation volume size along the X-dimension, in PM-cells\nFormat: int32\nNot initialized\nny\nSimulation volume size along the Y-dimension, in PM-cells\nFormat: int32\nNot initialized\nnz\nSimulation volume size along the Z-dimension, in PM-cells\nFormat: int32\nNot initialized\nfm_cf\nFPM Cf-parameter\nFormat: float32\nInitialization value: 15\nfm_lmax\nFPM maximum alias number\nFormat: int32\nInitialization value: 0\npm_eta\nPM kernel size, in code units\nFormat: float32\nInitialization value: 3.29999995\npm_lmax\n\n\fChapter 2: Reference to gracos Executable\n\n65\n\nParameter lmax in PM summation\nFormat: int32\nInitialization value: 2\nepsilon\nPlummer force softening length.\nFormat: float32\nNot initialized\nntab\nThe number of elements in the force tables\nFormat: int32\nInitialization value: 20001\npm_work\nSet to non-zero value to enable *work array allocation for FFTW\nFormat: int32\nInitialization value: 1\nacc\nAcceleration mode\nFormat: int32\nInitialization value: 15\n(which is, in token representation: PM | PP | FPM | FPP)\nVariable \"acc\" is bitwise, the following table lists all the allowed\nmodes.\nPM\n\nEnable PM force\n\nPP\n\nEnable PP force\n\nFPM\n\nEnable FPM force\n\nFPP\n\nEnable FPP force\n\nnstep\nThe current timestep number\nFormat: int32\nNot initialized\netat\nIntegration timestep parameter\nFormat: float32\nNot initialized\nnchkpt\nCheckpoint each nchkpt seconds\nFormat: int32\nNot initialized\ndt_sing\n\n\f66\n\nGRACOS\n\nThe value of timestep suitable for singular timestepping scheme\nFormat: float32\nNot initialized\negrav\nPotential Energy, at the last synchronization point\nFormat: float32\nNot initialized\negint\nThe integral term in the Lazer-Irvine equation\nFormat: float32\nNot initialized\nekin\nKinetic energy, at the last synchronization point\nFormat: float32\nNot initialized\nout_restart\noutput flags for restart output\nFormat: string\nNot initialized\nout_backup\noutput flags for backup output\nFormat: string\nNot initialized\nout_analyze\noutput flags for analysis output\nFormat: string\nNot initialized\ncmd_sched\nScheduled administration command\nFormat: string\nNot initialized\nufp\nParticle type\nFormat: string\nInitialization value: xvi\nufc\nSaved (udf) members of chaining mesh structured.\nFormat: string\nInitialization value: r\npa_incr\n\n\fChapter 2: Reference to gracos Executable\n\nExtra margin allocation parameter\nFormat: float32\nInitialization value: 1.005\nnpartall\nThe total number of particles in the simulation.\nFormat: long long unsigned\nNot initialized\nnploc\nLocal Number of particles\nFormat: unsigned\nNot initialized\nhc_rawb\nThe index of the first cell in this process domain\nFormat: long long unsigned\nNot initialized\nhc_rawn\nThe number of space filling curve cells within this process\nFormat: long long unsigned\nNot initialized\nlbal_tol\nLoad imbalance tolerance to initiate repartitioning\nFormat: float32\nInitialization value: 0\nlbal_fudge\nWorkload estimator parameter\nFormat: float32\nInitialization value: 0.699999988\nimg_cmap\nImage colormap, integer within the range 0-4\nFormat: int32\nNot initialized\nimg_dim\nProjection dimension, integer ranged 1-3\nFormat: int32\nNot initialized\nimg_slabs\nImage the specified number of slices along the line of sight\nFormat: int32\nNot initialized\nimg_pixw\n\n67\n\n\f68\n\nGRACOS\n\nImage width, in pixels\nFormat: int32\nNot initialized\nimg_cx\nX-coordinate of the center of image\nFormat: float32\nNot initialized\nimg_cy\nY-coordinate of the center of image\nFormat: float32\nNot initialized\nimg_cz\nZ-coordinate of the center of image\nFormat: float32\nNot initialized\nimg_bx\nSize of the whole image box in X-dimension\nFormat: float32\nNot initialized\nimg_by\nSize of the whole image box in Y-dimension\nFormat: float32\nNot initialized\nimg_bz\nSize of the whole image box in Z-dimension\nFormat: float32\nNot initialized\nimg_rsmoo\nImage smoothing length\nFormat: float32\nNot initialized\nimg_rbl\nBlack color threshold\nFormat: float32\nNot initialized\nimg_rbr\nWhite color threshold\nFormat: float32\nNot initialized\n\n\fChapter 3: Additional Programs and Libraries\n\n69\n\n3 Additional Programs and Libraries\n3.1 gracos-pkgs: Required Package Installer\nThe fastest way to assure the proper installation of the required packages listed in Section 4.2\n[Required and Recommended Packages], page 79 is probably using the gracos-pkgs scriptexecutable (only 70+ lines) included with GRACOS source code distribution, located under\nthe bin subdirectory of the GRACOS top source code directory tree. This script-executable\nis just a sequence of simple shell commands sufficient for completing all the necessary downloads and installations for the required packages, and is entirely self-sufficient, - there are\nno prerequisites except for the bare Unix-flavored computer system, an internet connection\nand the reliability of our server storing the packages.\nThe gracos-pkgs executable can be copied to any machine and should simply be executed (no root password is needed). The automatic procedure that follows, involving all the\ndownloads and installations takes about ten minutes. In the result, all the packages required\nfor GRACOS installation are automatically downloaded under $HOME/downloads.tmp and\ninstalled under $HOME/local with no other system paths involved. After the installation\nprocedure has completed for all the packages, the $HOME/downloads.tmp directory is automatically removed. There are a few important points to be aware of before you actually\nrun the executable:\n\u2022 Your home directory should have at least 24Mb permanently available space for installations and about 200Mb temporarily available space for package compilation products\n\u2022 Beware if you are already using either the $HOME/local or $HOME/downloads.tmp\ndirectory paths for any other purpose; - please modify the script if necessary.\n\u2022 The configure commands used to build the makefiles for the compiled packages assume\nyour current environment settings. Beware if you are using your special user specific\nsettings for such environment variables as LDFLAGS or CPPFLAGS. The user environment\nis imported by the package specific configure scripts invoked within gracos-pkgs. It\nis safest to run gracos-pkgs on the default unmodified user system environment.\n\u2022 Even if some or all of them are already installed on your system, it is all right to install\nthem again. Not every systemwide FFTW installation, follows our selection for the\nFFTW ./configure flags, for example.\n\u2022 If you invoke the executable on the same system (including the CPU type) more than\nonce, all the previous effects of this executable are automatically erased. If you invoke\nthe executable on the same file on the machines of different CPU types (for example,\nwhen your home directry is NFS mounted across many machines) the effects of running\nthis executable will add up since the produced installation path is specific to the CPU\ntype (i686, x86_64, etc) of the target machine.\nThe installation locations of the packages are $HOME/local/arch/'uname -m'/PACKAGE_\nNAME . Architecture specific directory paths are absolutely required when installation paths\nare accessible via NFS (Network File System) by the machines of different CPU type.\nGenerally, the installation procedure should be repeated for each architecture type.\n\n\f70\n\nGRACOS\n\n3.2 gracos-clean: Directory Cleanup Utility\nAs with any other package, the users who look into the source code of will have to deal\nwith many files automatically generated as various utilities or applications (for example\nconfigure or make) are ran. When the number of these files is large it generally becomes\ndifficult to distinguish the automatically generated files from those manually updated. A\nuser who modifies a source code will generally want to package the directory into another\n.tar.gz file and give it to a collaborator; in order to do that he or she will have to first\nclean the directory of all the unnecessary files, such as the executable, the object files or\neven the Makefiles, which are automatically generated by the configure.\nThe Python gracos-clean utility we are introducing does not have any prerequisites,\nexcept for the .rules files (see below) properly maintained by the user, which is usually\nnot hard to do.\nUsage: gracos-clean [OPTION...]\nClean the GraCos package directory tree of the unnecessary files.\nThe selection procedures for the \"unnecessary\" files are path\nspecific and defined according to the \".rules\" files distributed\nthroughout the GraCos package directory tree, please see more\ninfomration in the GraCos reference.\n-?, -h\n--initial\n-r\n-m SETS\n\n-u SETS\n\n-q\n\nProduce this help message and exit\nEquivalent to \"-u b,g,d -r\".\nApply recursively on the subdirectories.\nBy default this option is not used.\nSelect the files matching any of the group\npatterns specified by SETS (the comma\nseparated list of the group patterns defined\nin the .rules files). By default this option\nis not used.\nSelect files that match any defined pattern\ndifferent from those specified by SETS.\nPassing an empty string will select files\nmatching any defined pattern. This option is\nmutually exclusive with \"-m\".\nOnly show what will be done and exit.\n\nReport bugs to Alexander Shirokov.\nIn the list below we classify all the possible procedures that locally automatically generate\nnew files; the characteristic patterns of the these files can be grouped by the types of\nthe generating procedure. The .rules text files present in most GRACOS source code\ndirectories are used to specify the group selection. Because the first three of the procedures\nin the list are not as portable as the the more standard configure and make procedures\nthat follow, the portable GRACOS package distribution includes the files generated by the\nformer.\n\n\fChapter 3: Additional Programs and Libraries\n\n71\n\n\u2022 The bootstrap procedure (label 'b').\nIn GRACOS, we run ./bootstrap in the top GRACOS source code directory; the\npackage distribution includes all the files generated by this procedure.\n\u2022 The generated source code files (label 'g').\nIn GRACOS, we run ./srcgen.sh in the top source code directory; the package distribution includes all the files generated by this procedure.\n\u2022 Generated document files (label 'd').\nIn GRACOS, we use the directions in doc/src/README under the top source code\ndirectory; the package distribution includes all the files generated by this procedure.\n\u2022 The configure procedure (label 'c').\nThe procedure is described for GRACOS in Section 4.3.1 [Configuration], page 79.\n\u2022 The make procudere (label 'm').\nThe make procedure is described for GRACOS in Section 4.3.2 [Compilation and Installation], page 80.\n\u2022 Running gracos or other executables, label 'r'.\nIn GRACOS, the procedure is to run any of the examples in Chapter 2 [Reference to\ngracos Executable], page 3.\n\u2022 Any other procedure introduced by a user (label 'u').\n\n3.3 gracos-config: Utility for Linking Programs with\nGRACOS\ngracos-config is a utility for linking programs with GRACOS. By installation procedure\n(See Chapter 4 [Installation Procedure], page 79), the PATH shell environment variable\ndirectly points to the location of the gracos-config executable. Now, using this executable\nallows one to immediately retrieve the locations for any other components of GRACOS\ninstallation (the location of include files and libraries, package data, etc). gracos-config\nis used in most of the cases presented in Chapter 2 [Reference to gracos Executable], page 3.\nTyping gracos-config --help yields the following message:\nUsage: gracos-config [OPTION...]\nor: gracos-config [OPTION...]\nor: gracos-config [OPTION...]\nor: gracos-config [OPTION...]\nor: gracos-config [OPTION...]\ngracos-config - GRACOS 1.0.1a9\n\nlink_mpi\nlink\ncompile\ninfo [VAR]\n\ninfo [VAR]:\n\nDisplay the value of the Makefile variable VAR used when GRACOS\nwas built. If VAR is omitted, display all Makefile variables.\nUse this command to find out where GRACOS was installed,\nwhere it will look for libraries at run-time, and so on.\n\nlink_mpi:\n\nPrint the linker command-line flags necessary to link against\nthe parallel GraCos library, and any other libraries it\nrequires.\n\n\f72\n\nGRACOS\n\nlink:\n\nPrint the linker command-line flags necessary to link against\nthe serial GraCos library, and any other libraries it requires.\n\ncompile:\n\nPrint C compiler flags for compiling code that uses GRACOS.\nThis includes any '-I' flags needed to find GRACOS's header\nfiles.\n\n-?, --help\n--usage\n-V, --version\n\nGive this help list\nGive a short usage message\nPrint program version\n\nReport bugs to Alexander Shirokov.\nThe info argument to gracos-config is used to retrieve the standard locations; the\nvalues of the following VARiables are currently displayed by typing gracos-config info:\ndatadir, pkgdatadir, prefix, bindir, top_srcdir, libexecdir, libdir, matlabdir, and includedir\n\nSee Section Variables for Installation Directories in GNU coding\n(http://www.gnu.org/prep/standards/standards.html) for explanations.\n\nstandards\n\n3.4 GRACOS Library\nA number of special purpose auxiliary sub packages were written to for applications with\ngracos and packaged as the so called GRACOS library\n\u2022 libgracos.a\n\u2022 libgracos_mpi.a\n(the paths are lower-cased for simplicity). The libraries and the corresponding header\nfiles get installed (unless the --disable-libs option is used for configure) during make\ninstall into one of the installation directories.\nThe following table lists the C-headers for the sub packages whose compiled object files\nare merged to create the libgracos.a and libgracos_mpi.a libraries.\nHeader\n\nSerial/MPI\n\nDescription\n\nbasal.h\n\nSerial\n\nBase Initializations\n\nrandom9.h\n\nSerial\n\nRandom number generators\n\ncirc.h\n\nSerial\n\nOperations on Circular topology\n\nsparse.h\n\nSerial\n\nSparse Volume Management\n\nlft.h\n\nSerial\n\nSorting\n\npack.h\n\nSerial\n\nRun-level packing and unpacking\nof data\n\n\fChapter 3: Additional Programs and Libraries\n\n73\n\nshift.h\n\nSerial\n\nNon-overlapping partition shift\nimplementation\n\ntypemap.h\n\nSerial\n\nType-map data manipulation\n\nfind.h\n\nSerial\n\nLinear logarithmic finders\n\nrw.h\n\nSerial\n\nRobertson-Walker Universe\n\nmpim.h\n\nMPI\n\nCustomized MPI Xxx style functions\n\nheavy.h\n\nMPI\n\nError tolerant MPI heavy routines\n\ncrown.h\n\nJoint MPI\n\nSession initialization and code\nvariable management\n\nmathmeth.h\n\nJoint MPI\n\nMathematical\nmethods\n\nhilbert.h\n\nSerial\n\nHilbert curve implementation\nwritten by by Doug Moore\n\nfftmesh.h\n\nMPI\n\nFixing FFTW package\n\nwgifs.h\n\nJoint MPI\n\nRaw and Smoothed GIFimage\ngenerator\n\nand\n\nstatistical\n\nThe second column shows the use of MPI in the sub packages. The sub packages marked\n'Serial' are compiled with a serial C compiler and are included into both libgracos.a and\nlibgracos_mpi.a.\nThe sub packages marked 'Joint MPI' are compiled twice: with serial and MPI compiler,\nusing different C preprocessing directive to separate group in and out the calls to MPI\nfunctions in the source code; these packages are also included into both libraries providing\nboth serial and parallel implementations of their declarations.\nThe sub packages marked 'MPI' contain unavoidable MPI library function calls. They\nare compiled with mpirun and are included only into the libgracos_mpi.a library.\n\n3.5 gracos-rw: Cosmographic Quantities for FLRW\nCosmology\nUsage: gracos-rw [OPTION...] { dplus | ETA }\nEvaluate miscellaneous, mostly cosmographic quantities for Friedmann Lemaitre\nRobertson Walker (FLRW) cosmology. Most of the quantities require the --omegam,\n--omegav and --aexp options to be set; use the -v option to check the parameter\nsettings. The source code is located in file dplus.c.\n\n\f74\n\nGRACOS\n\n-a, --aexp=float\n--omegam=float\n--omegav=float\n-v, --verbose\n-?, --help\n--usage\n-V, --version\n\nUniverse expansion factor\nOmega matter\nOmega vacuum\nProduce verbose output\nGive this help list\nGive a short usage message\nPrint program version\n\nMandatory or optional arguments to long options are also mandatory or optional\nfor any corresponding short options.\nReport bugs to Alexander Shirokov.\n\n3.6 gracos-ehu: Eisenstein-Hu Transfer Function\nA well-established fit for the matter transfer function (TF) by Daniel J. Eisenstein & Wayne\nHu yields the precision of matter transfer function within a few percent level across wide\nrange of the cosmological parameters. For convenience, GRACOS installation includes the\nexecutable, - the generator of the transfer function.\nUsage: gracos-ehu [OPTION...]\nProduce a transfer function table using the transfer function fitting formulae\nfor CDM + Baryon + Massive Neutrino (MDM) cosmologies, by Daniel J. Eisenstein\n& Wayne Hu, based on astro-ph/9710252. This fitting function is for the CDM\nVariants accurate for ( Wb / W0 < 0.3, Wn / W0 < 0.3). The default values for\nall option arguments are zeros. The source code used is originally downloaded\nfrom the authors resource at\nhttp://background.uchicago.edu/~whu/transfer/transferpage.html\non Mar 25, 2007 and is packaged within GRACOS with file 'ehu.c'.\n--degen_hdm=int\n--hubble=float\n--krange=str\n\n--omega_baryon=float\n--omega_hdm=float\n--omega_lambda=float\n--omega_matter=float\n--redshift=float\n-v, --verbose\n-?, --help\n--usage\n-V, --version\n\nNumber of degenerate massive neutrino species.\nHubble constant, in units of 100 km/s/Mpc.\nThe range of the wavevectors, formatted as\n\"kmin:nk:kmax\", where kmin and kmax are expressed\nin comoving Mpc^-1.\nDensity of baryons.\nDensity of massive neutrinos.\nCosmological constant.\nDensity of CDM, baryons, and massive neutrinos.\nThe redshift at which to evaluate the transfer\nfunction.\nProduce verbose output\nGive this help list\nGive a short usage message\nPrint program version\n\n\fChapter 3: Additional Programs and Libraries\n\n75\n\nReport bugs to Alexander Shirokov.\n\n3.7 gracos-hist: Utility for Plotting Histograms\nUsage: gracos-hist [OPTION...]\nTake numbers from the standard input and produce a histogram of the specified\nrange to the specified output file. This utility will work for any size of the\ninput dataset.\n-h, --high=float\n-l, --low=float\n-n, --nbins=int\n-o, --o=string\n-?, --help\n--usage\n-V, --version\n\nThe highest value to include into the histogram\n(default: 0).\nThe lowest value to include into the histogram\n(default: 0).\nNumber of bins in the histogram (default: 100).\nThe name of file for output (default: \"hist.dat\")\nGive this help list\nGive a short usage message\nPrint program version\n\nMandatory or optional arguments to long options are also mandatory or optional\nfor any corresponding short options.\nReport bugs to Alexander Shirokov.\n\n3.8 Serial Fortran N-body Codes\nThe src/f77 subdirectory in GRACOS contains the serial Fortran 77 N-body codes written in 1993-1994 that have been well known to the cosmological community (especially\nthe grafic-2_101 and p3m2-93 packages) and have served as the development base for\nGRACOS. The complete list is shown below, these codes are installed as a part of GRACOS package; they are used for testing and verification purpose in hundefinedi [sec cgf],\npage hundefinedi and for generating the matter transfer function, See Section 2.6.1 [grafic:\nthe Initial Conditions Generator], page 35.\nThe following is the complete list of the Fortran packages\ngrafic-2_101\nInstalled executables: grafic1 and lingers.\nlingers generates the transfer function and/or the initial particle\nvelocities from a given power spectrum of matter density perturbations.\nOnly minor differences from the original version, available at\nhttp://web.mit.edu/edbert/grafic-2.101.tar.gz; except for the new\nrandom9 random number generator that fixes the portability bug found in the\noriginal version.\np3m2-93\nInstalled executables: iniftab and p3m2-93.\n\n\f76\n\nGRACOS\n\niniftab is used to generate force tables, p3m2-93 is used to run an N-body\nsimulation using the generated force tables. The p3m2-93 code accepts files\nwritten in the Section 2.2.5 [p3mdat: Fortran p3m Datafile Format], page 19 as\nthe initial conditions and outputs the particle data in the same format at the\nuniverse expansion factors passed to the standard input by the user.\nic2dat\nA C-code converting the velocities of the particles stored in the ic_vel files\nproduced by the grafic-2_101 code into the particle data file suitable for\ninput for p3m2-93 executable, See Section 2.2.5 [p3mdat: Fortran p3m Datafile\nFormat], page 19.\nswapb\n\nConvert the float32 and int32 data from big endian to little and vice versa.\n\nThe grafic-2_101 and p3m2-93 packages distributed as the part of GRACOS slightly\ndiffer from their original versions. A very limited number of changes were introduced, See\nthe 'ChangeLog' files. These changes do not introduce any errors: the output of a run\nwith the original version of the codes is identical to the equivalent run accomplished with\nthe modified versions; the latter however introduce some additional options and minor bug\nfixes.\n\n3.9 bits\nbits is a utility used to convert between a 32 bit integer and its bitwise representation in\nthe form of a string of zeros and ones. The least significant bit corresponds to the rightmost\ncharacter in the string, unless the -t option is given (see below). The following flags to\nbits are accepted\n-s string Input the string and convert it to an integer\n-n int32\n\nInput the integer and convert it to a string\n\n-t\n\nReverse the order of the significance of the bits in the bit string, making the\nleftmost character represent the least significant bit.\n\n-L\n\nIf the -s option is present, check that the input string is 32 character long.\nIf the -n option is present, ensure that the output string is exactly 32 characters\nlong by padding it with '0's if necessary.\n\nAs an example, the string '1100' represents the number 12 in its bitwise representation,\nwhen the least significant bit corresponds to the rightmost character of the string. On\nthe other hand the same string shows the bitwise representation of 3 when the rightmost\ncharacter represents the least significant bit. We can use the bits as follows to perform the\nsame and the inverse conversions\nSHELL $ bits -n12\n1100\nSHELL $ bits -t -n3\n11\nSHELL $ bits\n12\n\n-s1100\n\nSHELL $ bits -t -s1100\n\n\fChapter 3: Additional Programs and Libraries\n\n77\n\n3\n\nFor a demonstration of the use of the -L flag execute the same commands with the flag\nadded.\n\n3.10 System Tests\nThis chapter describes a few non-standard system tests that have been successfully used\nfor identification of some particular system-related problems running gracos. The executables are installed during a regular gracos installation, See Section 4.3.2 [Compilation and\nInstallation], page 80. If your system fails on any of these tests, then you should either\nreconfigure gracos with some specific ./configure options to work around limitations, or\nreplace the faulty hardware. We hope that the need for this chapter will diminish as the\nLinux systems improve over time.\n\n3.10.1 ibtest: System Call Portability Test\nSome networking systems are known to have fork/system call portability issues for parallel\napplications. Infiniband, is the example: a parallel application using system calls terminates\nrandomly without an error message, leaving the impression that the errors are due to erroneous handling of dynamic memory allocation. This problem has initially been submitted\nas a bug report to the TACC computer center and according to Karl W. Schulz of the\nsupport staff, as of January 1, 2007 there is no available fix.\nibtest is the utility for testing your system for this issue. The following usage applies\nUsage: ibtest [OPTION...]\nDiagnistics tool for testing the portability of system calls in parallel\napplications to your networking system. Use the appropriate mpirun command\nprefix to run it in parallel, use four processes for optimal timing.\n-n, --no-sys-calls\n-?, --help\n--usage\n-V, --version\n\nDo not make system calls\nGive this help list\nGive a short usage message\nPrint program version\n\nReport bugs to Alexander Shirokov.\nTo test your networking system, run ibtest on your system in parallel on four processes.\nThe job should complete within a few minutes. The standard output of process zero indicates the test result. If it is positive you should not use --disable-system-calls for\nGRACOS configuration.\n\n3.10.2 memtest: Hardware Memory Test\nmemtest is a testing utility for memory hardware on your cluster and can be used to test\nmemory on all the nodes of your cluster simultaneously. The following usage applies\nUsage: memtest [OPTION...]\nParallel utility for testing memory hardware simultaneously on the entire\ncluster of computers. The test is performed for each node participating in the\nrun.\n\n\f78\n\nGRACOS\n\n-f, --mem-frac=NUMBER\n\nThe fraction of total system memory per node\n[0.2]\n-n, --number-iterations=NUMBER\nThe number of test iterations [5]\n-?, --help\nGive this help list\n--usage\nGive a short usage message\n-V, --version\nPrint program version\nMandatory or optional arguments to long options are also mandatory or optional\nfor any corresponding short options.\nReport bugs to Alexander Shirokov.\nRun memtest in parallel on all the nodes available in your cluster. The message shown\nin the standard output of process zero indicates the hostnames of the nodes (if any) that\nhave faulty memory chips.\nThe memory is tested by allocation of the total memory fraction given by the -f option\non all nodes, filling it with a prescribed sequence of data and later verifying that the sequence\nof data as written in the machine is authentic.\nThe default value used for --mem-frac option is sufficiently low to avoid swapping,\nincrease this number cautiously to improve the quality of the test result. Also, use larger\nvalue for --number-iterations than the default at your discretion using larger numbers\nincreases the intrinsic number of iterations and therefore also increases the quality of the\ndiagnostics.\nGenerally, only the manufacturer supplied diagnostic tools can reliably test the RAM\nchips on your system. Running manufacturers diagnostics tools is often hardware specific\nand running it in parallel may be tricky. memtest on the other hand is portable and will\ndiagnose only serious problems if they exist. The probability of a failure of any one memory\nRAM is quite low but is considerable for large clusters of computers. We suggest running\nmemtest from time to time to ensure no serious hardware problems.\nThe need to write this testing utility originated when one of our early gracos runs\ncrashed repeatedly with an error message indicating a segmentation fault. The error message\nalways appeared on one of the nodes, which lead us to believe that the problem was caused\nby a faulty memory chip as it was wearing down. memtest has been used to prove this and\nwas used to identify many more faulty memory chips on our cluster.\n\n\fChapter 4: Installation Procedure\n\n79\n\n4 Installation Procedure\n4.1 System Requirements\nGRACOS is ported to most UNIX flavored systems, except for the Mac OS, whose native\nC-compiler does not support ntptimeval. It may be possible to compile GRACOS on this\nsystem using a different C-compiler (either gcc or icc), however this has not been tested.\n\n4.2 Required and Recommended Packages\nGRACOS installation requires the following freely downloadable open source packages to\nbe installed on your system\n\u2022 A Message Passing Interface (MPI) implementation must be installed; the list\nof freely available implementations includes LAM (http://www.lam-mpi.org),\nMPICH\n(http://www-unix.mcs.anl.gov/mpi/mpich/),\nand\nOpen\nMPI\n(http://www.open-mpi.org).\n\u2022 The FFTW (http://www.fftw.org) package fftw-2.1.5 (http://www.fftw.org/fftw-2.1.5.tar.gz)\nmust be installed, configured with an --enable-mpi --enable-float --enabletype-prefix options to enable support for MPI, single precision mode and type\nprefix specification for the FFTW header files.\n\u2022 Tcl library version 8.4 (http://www.tcl.tk/man/tcl8.4) must be installed.\nThe following packages are recommended\n\u2022 MATLAB ; GRACOS provides a few MATLAB scripts to analyze various data from the\ndatafiles produced in the output. Those scripts, located upon finishing the installation\nprocedure at $PREFIX /matlab (See Section 4.3.3 [Environment Setup], page 81 for the\ndefinition of $PREFIX), can easily be rewritten for other plotting software.\n\n4.3 GRACOS Package Installation\nGRACOS installation procedure below follows the standard path widely adopted in the\nopen source software world. Once the package is installed it is not necessary to keep the\nsource code directory; keeping it may be useful however for reference or revision purposes.\nIf you have any problems with the GRACOS installation procedure below please consult\nthe GRACOS FAQ (http://www.gracos.org/faq/index.html) webpage. Then, if that\ndoes not help please let us know.\n\n4.3.1 Configuration\nThe GRACOS installation procedure starts with the conventional\n./configure [OPTION ]... [VAR=VALUE ]...\n\nassuming that the required packages are already installed. The setting of configure\nVARiables is probably simpler via the use of shell environment variables rather than the\nconfigure command line (type ./configure -h for more information). One should make\ncareful considerations for the settings for OPTION s and VARiables before proceeding with\nthe configure command. We provide useful guidelines below.\n\n\f80\n\nGRACOS\n\nFirst, one has to make a choice of the installation path for GRACOS and specify it with\nthe --prefix option to configure. It is recommended to install GRACOS into a unique\ndirectory by using --prefix=. . . SPECIFY . . . /gracos-1.0.1a9. If you skip the --prefix\nconfigure option the default systemwide setting (/usr/local) will be automatically used\nand you will be required to have a root password for install.\nSecond, one has to make sure that the required packages are found by configure.\nThe PATH shell environment variable must be set appropriately so that the location of the\ncompiled MPI executables (usually mpicc and mpirun) is automatically detected. If the\nlocation of any of the required Tcl and FFTW packages is not standard, the LDFLAGS and\nCPPFLAGS configure variables must be set accordingly.\nThird, one has to make a wise decision for the choice of the C-compiler flags, particularly\nthe optimization options. Setting CFLAGS=\"-Wall -O3 -fno-strict-aliasing\" is a good\ninitial guess. If you are using the icc compiler, you might be able to use '-fast' istead\nof '-O3'. If you plan running a massive N-body simulation, it may very well be worth\nresearching the compiler documentation in order to choose the most efficient optimization\noptions. For example, if you are using the icc compiler, read the \"Optimization Levels\"\nand \"Automatic Processor-specific Optimization\" sections in the manual page and find\noptions for optimizing by vectorization. Vectorization yields the runtime speedup by a\nsignificant fraction (roughly 20-30% or more) at the cost of slightly increased compilation\nand installation time.\nYou may switch between different C-compilers by using the CC configure variable.\nFinally, some important non-standard configure options are listed below (type\n./configure -h for the complete list of configure options).\nUsing --enable-tests option results in production of a number of light weight executables used for testing in the subpackages at the cost of slightly increased installation time.\nThose executables may serve as the hello world examples for the users who link their codes\nagainst GRACOS libraries.\nThe --disable-slibs option disables compilation of the serial libraries.\nThe\n--disable-libs options disables the installation of all libraries and header files at make\ninstall.\nThe --disable-system-calls configure option must be set on the systems that have\nfork/system support issues. If you do not use Infiniband networking system in your cluster\n(ask your system administrator) you are not likely to have this problem as this is the only\nsystem of the currently known to us having this problem. Use ibtest utility at any time\nto test your system for this issue, See Section 3.10.1 [ibtest: System Call Portability Test],\npage 77.\n\n4.3.2 Compilation and Installation\nAfter the configure command has finished successfully, type\nmake\n\nto compile and, if succeeded,\nmake install\n\nto install all the GRACOS components on your system.\n\n\fChapter 4: Installation Procedure\n\n81\n\n4.3.3 Environment Setup\nOnce make install is finished, the user should append the PATH and MATLABPATH environment variable in their shell profile appropriately. For example, the sh or bash shell users\nshould put the following into their ~/.bashrc file\nexport PATH=$PREFIX /bin:$PATH\nexport MATLABPATH=$PREFIX /matlab:$MATLABPATH\n\nwhere $PREFIX is normally the argument of the --prefix option used for the ./configure;\nthe tcsh or csh users should instead put\nsetenv PATH $PREFIX /bin:$PATH\nsetenv MATLABPATH $PREFIX /matlab:$MATLABPATH\n\ninto their ~/.tcshrc or ~/.cshrc files (whichever is applicable, or ask your system administrator).\n\n4.3.4 Uninstallation\nGRACOS can be uninstalled either by typing make uninstall within the source code directory or, if you did specify a unique installation path for $PREFIX , by invoking rm -rf for\nthe installation path.\n\n4.4 Source code Directory Cleanup\nAs a side effect of the package installation procedure, many files are automatically generated\nthroughout the source code directory tree, making it heavy sized and sometimes confusing\nfor the users who may wish to work with the source code. Type gracos-clean --initial\nanywhere within the source code directory to bring all the subdirectories to the initial\npristine state of the package; See Section 3.2 [gracos-clean: Directory Cleanup Utility],\npage 70 for more options and details.\n\n\f82\n\nGRACOS\n\n\fChapter 5: Authors and Copyrights\n\n83\n\n5 Authors and Copyrights\nThe gracos package is written by\n\u2022 Alexander Shirokov, (CITA/MIT)\n\u2022 Edmund Bertschinger (MIT)\nCopyright (C) 2002-2007 Alexander Shirokov and Edmund Bertschinger\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see <\\vrule width0pt\\href{http://www.gnu.org/licenses/}{http:\n\nSoftware Included in GRACOS:\nHilbert Curve implementation: files hilbert.h and hilbert.c\nCopyright 1998, Rice University\nGIF maker:\n\nbased on the original files wgif.c, compress.c and cmap.h\nCopyright 1989, 1990, 1991, 1992, 1993 by John Bradley\n\nM4 Macros:\n\nfiles gse_get_version.m4 and get_gse_version\nbased on the original files lam_get_version.m4 and get_lam_version\nCopyright (c) 2001-2006 The Trustees of Indiana University.\nCopyright (c) 1998-2001 University of Notre Dame. All rights reserved.\nCopyright (c) 1994-1998 The Ohio State University. All rights reserved.\nfile acx_mpi.m4 by Steven G. Johnson\nCopyright 1997-1999, 2003 Massachusetts Institute of Technology\n\nTransfer Function Fitting Formula: file ehu-power.c\nbased on the original files power.c by\nDaniel J. Eisenstein & Wayne Hu, Institute for Advanced Study\n\n\f84\n\nGRACOS\n\n\fChapter 6: Acknowledgements\n\n85\n\n6 Acknowledgements\nAlexander Shirokov would like to thank Neal Dalal for suggestions that helped to develop\nthis work.\nThis material is based upon work supported by the National Science Foundation under\nGrant No. 0407050. Any opinions, findings, and conclusions or recommendations expressed\nin this material are those of the author(s) and do not necessarily reflect the views of the\nNational Science Foundation.\nThis work was financially supported by the Canadian Institute for Theoretical Astrophysics (CITA) and the Natural Sciences and Engineering Research Council of Canada\n(NSERC).\n\n\f86\n\nGRACOS\n\n\f"}