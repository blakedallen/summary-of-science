{"id": "http://arxiv.org/abs/1202.5690v1", "guidislink": true, "updated": "2012-02-25T19:51:18Z", "updated_parsed": [2012, 2, 25, 19, 51, 18, 5, 56, 0], "published": "2012-02-25T19:51:18Z", "published_parsed": [2012, 2, 25, 19, 51, 18, 5, 56, 0], "title": "Embedded Network Test-Bed for Validating Real-Time Control Algorithms to\n  Ensure Optimal Time Domain Performance", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1202.4193%2C1202.0763%2C1202.4913%2C1202.2338%2C1202.2012%2C1202.4941%2C1202.5690%2C1202.4710%2C1202.6163%2C1202.5176%2C1202.0527%2C1202.5681%2C1202.3576%2C1202.6056%2C1202.3226%2C1202.1332%2C1202.5050%2C1202.3743%2C1202.0269%2C1202.1519%2C1202.4842%2C1202.2655%2C1202.2423%2C1202.2576%2C1202.5065%2C1202.2829%2C1202.2268%2C1202.6663%2C1202.2993%2C1202.6506%2C1202.5589%2C1202.5360%2C1202.2994%2C1202.2503%2C1202.0602%2C1202.6314%2C1202.6337%2C1202.0781%2C1202.0255%2C1202.2530%2C1202.5522%2C1202.4717%2C1202.6372%2C1202.0473%2C1202.3654%2C1202.0414%2C1202.4417%2C1202.6638%2C1202.6507%2C1202.5791%2C1202.5308%2C1202.1204%2C1202.3221%2C1202.5626%2C1202.6265%2C1202.6252%2C1202.5117%2C1202.5044%2C1202.6155%2C1202.6366%2C1202.1674%2C1202.5485%2C1202.5225%2C1202.1561%2C1202.0978%2C1202.1912%2C1202.2935%2C1202.3101%2C1202.0259%2C1202.0170%2C1202.3460%2C1202.2555%2C1202.2221%2C1202.3807%2C1202.3482%2C1202.4548%2C1202.5607%2C1202.5679%2C1202.6559%2C1202.1351%2C1202.4203%2C1202.3913%2C1202.5086%2C1202.4587%2C1202.5985%2C1202.1376%2C1202.1774%2C1202.2058%2C1202.0582%2C1202.0518%2C1202.2957%2C1202.6126%2C1202.3770%2C1202.6118%2C1202.2489%2C1202.3386%2C1202.2301%2C1202.5895%2C1202.3273%2C1202.3075%2C1202.6410&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Embedded Network Test-Bed for Validating Real-Time Control Algorithms to\n  Ensure Optimal Time Domain Performance"}, "summary": "The paper presents a Stateflow based network test-bed to validate real-time\noptimal control algorithms. Genetic Algorithm (GA) based time domain\nperformance index minimization is attempted for tuning of PI controller to\nhandle a balanced lag and delay type First Order Plus Time Delay (FOPTD)\nprocess over network. The tuning performance is validated on a real-time\ncommunication network with artificially simulated stochastic delay, packet loss\nand out-of order packets characterizing the network.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1202.4193%2C1202.0763%2C1202.4913%2C1202.2338%2C1202.2012%2C1202.4941%2C1202.5690%2C1202.4710%2C1202.6163%2C1202.5176%2C1202.0527%2C1202.5681%2C1202.3576%2C1202.6056%2C1202.3226%2C1202.1332%2C1202.5050%2C1202.3743%2C1202.0269%2C1202.1519%2C1202.4842%2C1202.2655%2C1202.2423%2C1202.2576%2C1202.5065%2C1202.2829%2C1202.2268%2C1202.6663%2C1202.2993%2C1202.6506%2C1202.5589%2C1202.5360%2C1202.2994%2C1202.2503%2C1202.0602%2C1202.6314%2C1202.6337%2C1202.0781%2C1202.0255%2C1202.2530%2C1202.5522%2C1202.4717%2C1202.6372%2C1202.0473%2C1202.3654%2C1202.0414%2C1202.4417%2C1202.6638%2C1202.6507%2C1202.5791%2C1202.5308%2C1202.1204%2C1202.3221%2C1202.5626%2C1202.6265%2C1202.6252%2C1202.5117%2C1202.5044%2C1202.6155%2C1202.6366%2C1202.1674%2C1202.5485%2C1202.5225%2C1202.1561%2C1202.0978%2C1202.1912%2C1202.2935%2C1202.3101%2C1202.0259%2C1202.0170%2C1202.3460%2C1202.2555%2C1202.2221%2C1202.3807%2C1202.3482%2C1202.4548%2C1202.5607%2C1202.5679%2C1202.6559%2C1202.1351%2C1202.4203%2C1202.3913%2C1202.5086%2C1202.4587%2C1202.5985%2C1202.1376%2C1202.1774%2C1202.2058%2C1202.0582%2C1202.0518%2C1202.2957%2C1202.6126%2C1202.3770%2C1202.6118%2C1202.2489%2C1202.3386%2C1202.2301%2C1202.5895%2C1202.3273%2C1202.3075%2C1202.6410&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "The paper presents a Stateflow based network test-bed to validate real-time\noptimal control algorithms. Genetic Algorithm (GA) based time domain\nperformance index minimization is attempted for tuning of PI controller to\nhandle a balanced lag and delay type First Order Plus Time Delay (FOPTD)\nprocess over network. The tuning performance is validated on a real-time\ncommunication network with artificially simulated stochastic delay, packet loss\nand out-of order packets characterizing the network."}, "authors": ["Ayan Mukherjee", "Anindya Pakhira", "Saptarshi Das", "Indranil Pan", "Amitava Gupta"], "author_detail": {"name": "Amitava Gupta"}, "author": "Amitava Gupta", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1109/PACC.2011.5979045", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1202.5690v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1202.5690v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "6 pages, 12 figures", "arxiv_primary_category": {"term": "cs.SY", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.SY", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1202.5690v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1202.5690v1", "journal_reference": "Proceedings of 2011 International Conference on Process\n  Automation, Control and Computing, PACC 2011, art. no. 5979045, July 2011,\n  Coimbatore", "doi": "10.1109/PACC.2011.5979045", "fulltext": "Embedded Network Test-Bed for Validating Real-Time Control\nAlgorithms to Ensure Optimal Time Domain Performance\nAyan Mukherjee, Anindya Pakhira, Saptarshi Das, Indranil Pan, Amitava Gupta\n\nAbstract-The paper presents a Stateflow based network\ntest-bed to validate real-time optimal control algorithms.\nGenetic Algorithm (GA) based time domain performance index\nminimization is attempted for tuning of PI controller to handle\na balanced lag and delay type First Order Plus Time Delay\n(FOPTD) process over network. The tuning performance is\nvalidated on a real-time communication network with\nartificially simulated stochastic delay, packet loss and out-oforder packets characterizing the network.\n\nI. INTRODUCTION\n\nN\n\nETWORKED control system (NCS) has emerged as a\nnew interdisciplinary research domain with the\nintroduction of real-time network in place of the\ntraditional closed loop control systems. Within a short span\nof time NCS has caught the attention of wide range of\ncommunities across the engineering research spectrum. This\npopularity can be attributed to inherent advantages that NCS\nenjoys over the traditional control system as well as its\nmulti-disciplinary\norigin\n(communication,\ncontrol,\ninstrumentation, etc) [1]. Some of the key advantages that\nNCS holds over traditional closed loop control system are\nreduced wiring (due to use of shared medium), increased\nagility of the system, low cost, modularity, flexibility\nregarding the data transmission architecture [2]. No wonder,\nNCS have found wide applicability in diverse fields like\naircraft and space applications, factory automation, remote\ndiagnostics etc. However, NCS is not without glitches. The\nintroduction of the network within the loop, which brought\nin so many advantages, is as well, responsible for\nintroducing some network related constraints which\ndegrades the closed loop performance. Among these\nconstraints, the first one is that of network induced delays\ni.e. the delay in transmission of data packets between\ndifferent nodes of the control system. Secondly, there may\nbe packet drop-outs (due to buffer overflows etc.) i.e. failure\nof the data packet to reach its intended recipient. Thirdly, the\norder of the packets may get changed during transmission\nand arrive at the recipient node in out-of-order sequence due\nto stochastic network induced delays with its upper\nmagnitude greater than the sampling time of the system.\nManuscript received April 14, 2011. This work has been supported by\nthe Board of Research in Nuclear Sciences (BRNS) of the Department of\nAtomic Energy (DAE), India, sanction no. 2009/36/62-BRNS, dated\nNovember 2009.\nA. Mukherjee, S. Das, I. Pan and A. Gupta are with Department of\nPower Engineering, Jadavpur University, Salt Lake Campus, LB-8, Sector\n3, Kolkata-700098, India (E-mail: ayanmukherjee.email@gmail.com).\nA. Pakhira is with Department of Instrumentation & Electronics\nEngineering, Jadavpur University, Salt Lake Campus, LB-8, Sector 3,\nKolkata-700098, India.\n\nThese three constraints play pivotal roles in deciding the\ncontrol loop performance over the network. Any one of the\nfactors alone or more in unison can degrade the control\nperformance of a well tuned loop. In worst case the system\nmay become unstable altogether if these constraints are not\ntaken into consideration during the controller design phase.\nResearch groups from diverse backgrounds have worked to\nfind ways to eliminate these factors all together or at least\nrestrict their detrimental effect on the system performance.\nThe current research activities in the field of NCS can be\nbroadly classified into three domains. The first domain is the\nanalysis and design of robust control systems that are\ncapable of handling network induced irregularities [3].\nDevelopment of newer network transmission architecture,\nprotocol and scheduling of events and revamping the\nexisting ones in order to neutralize the ill effects of network\ninduced delays and packet dropouts constitutes the second\ndomain [4]. The third domain consists of optimal time\ndomain tuning of PID controllers considering the random\nnetwork induced delays and packet drop outs in NCS [5].\nThis multipronged research in the field of NCS, especially\nfrom the control system designing aspect, necessitates the\nrequirement of a standard embeddable network test-bed to\nverify, in real-time, these proposed control algorithms [6][7]. Here, lies the motivation of the present work. This paper\npresents a detailed treatment on the design and\nimplementation of an embeddable network test-bed which\ncan be used as a platform to verify and validate real-time\ncontrol algorithms in order to ensure optimal time domain\nperformance in the presence of network induced delays and\npacket drop-outs even in the presence of out-of-order\npackets in the loop. These three features that essentially\ncharacterize the detrimental nature of a real-time\ntransmission network, namely stochastic delay, data packet\ndrop-out and arrival of packets out-of-order have been\nincorporated as a Stateflow based network test-bed. The\nsettings for these parameters can be specified by the user.\nHence, precise modeling of any given quality of network\ncan be done with this test-bed to develop offline control\nalgorithms that is capable of handling certain amount of\nstochastic delay, packet loss etc. Furthermore, a control\nalgorithm consisting of a conventional PI controller, with\noptimal time-domain performance index based tuning via a\nstochastic algorithm i.e. Genetic Algorithm is tested out on\nthe proposed network test-bed. The optimally tuned PI\ncontrol algorithm has been considered as a test case and can\nalso be easily extended to the other popular control methods\nto handle a specified level of network induced stochastic\ndelays and drop-outs.\n\n\fThe closed loop time domain performances like a suitable\nerror index and the control signal with the consideration of\nrandom network induced delays and packet drop-outs reflect\nstochastically varying non-smooth search space. Genetic\nalgorithm has capability to carry out optimization more\neffectively in comparison with other gradient based methods\nin a stochastically varying search space. Thus in this paper,\nGA has been used as the stochastic evolutionary algorithm to\ntune the offline system in order to handle the unreliable\nnetwork conditions effectively, as suggested by Pan et al.\n[5]. Integral of Time Multiplied Absolute Error (ITAE) has\nbeen taken as the time domain error index along with\nIntegral of Squared Controller Output (ISCO) in order to\nkeep the actuator size within limit and thereby preventing\nactuator saturation. In networked process control, the use of\nPI type controller is preferable since the derivative action of\nPID type controllers amplifies the randomness of the nonsmooth stochastically varying objective function even upon\noptimization [5]. Thus derivative action in the controller\nstructure is detrimental in NCS applications from actuator\ndesign point of view. The optimally tuned PI control\nalgorithm is tested next over a real communication network\nto verify its suitability in real-time automation.\nThe rest of the paper is organized as follows. Section II\ndescribes the theoretical formulation which includes the\nbasis for the process and tuning strategy selection etc. The\ndesign and modeling of the real-time network test-bed is\ndetailed in Section III. Section IV elucidates the real-time\nimplementation, results and discussions of the tuned control\nsystem performance over network. Section V contains the\nconclusions, followed by the references.\nII. THEORETICAL FORMULATION\nA. Design of PI Controller over NCS\nA suitable choice of a test plant is important in order to test\nout the effectiveness of the optimal PI controller tuning\nstrategy in the real-time network test-bed. The test plant\nconsidered for the present study is a FOPTD with balanced\nlag and delay type ( L = 1, T = 1.5, L \u2248 T ) as has been\nstudied Astrom & Hagglund [8] and is considered to be\nhandled over communication network by a simple PI\ncontroller (2) having parallel structure.\n5\n(1)\nP (s) =\ne\u2212s\n1.5 s + 1\n(2)\nC (s) = K p + ( K i s )\nThe rationale behind the selection of such a test plant is\nthat such systems are hard to control. More so in the\npresence of the stochastic network induced delays and dropouts, and out-of-order packets arrival. Hence the plant has to\nbe well tuned using a carefully chosen optimization\nalgorithm with proper consideration of the stochastic\nvariation in network conditions to get a stable time response.\nAlso the actual network conditions must be reproduced\nwithin the real-time network test-bed in order to test the\ncontrol algorithms during the design phase.\n\nB. Time Domain Optimal Tuning of Networked Process\nControllers via Stochastic Optimization\nThe optimal time domain tuning of the PI controllers (2)\nis done in order to stabilize the closed loop system in the\npresence of network induced irregularities relating to data\npacket transmission viz. random delay, packet drop and out\nof order packets. For optimal tuning of the PI controller a\nproper integral performance index needs to be chosen. Here,\nthe control objective ( J ) consists of a weighted summation\nof ITAE and ISCO which is minimized with GA to get the\noptimal PI controller parameters. Here, the weights\nw1 and w2 balances the impact of error index and control\neffort and have been chosen to be same for simulation study.\n\u221e\n\nJ = \u222b \u23a1\u23a3 w1 \u22c5 t e ( t ) + w 2 \u22c5 u 2 ( t ) \u23a4\u23a6dt\n\n(3)\n\n0\n\nThe objective function becomes stochastic in nature in the\npresence of packet drop-outs and delays and can not be\nminimized by conventional gradient based optimization\nalgorithms [5]. Hence GA is employed to find a near optimal\nsolution within the specified search spaces of PI controller\ngains. Optimal controller design with stochastic optimization\nin NCS applications has been detailed in Pan et al. [5].\nWhereas, the present paper focuses on the real-time network\ntest-bed development to verify such control algorithms. The\nrandom delay, drop-out and out-of-order packets are\nimplemented with Stateflow and its parameters can be prespecified by the user. This is done to ensure the repeatability\nof the experiments and validate such control algorithms in a\nreal-time controlled environment.\nThe PI parameters are tuned for a given probability of\npacket drop-out and stochastically varying delay with\nspecified upper bound which is larger than the sampling time\ninterval. Such a setting for stochastic delay propels the outof-order packet arrival. In comparison to constant time\ndelay, stochastic delays are much tougher to deal with [5]\nand can be efficiently stabilized by a non-gradient based\noptimization employed to minimize a stochastically varying\nfitness function (3).\nIII. MODELLING OF THE REAL-TIME NCS\nThe traditional PI controller is generally designed as a\ncontinuous time system. The introduction of communication\nnetwork within the loop imparts a partial discrete\ncharacteristic to the system. Hence, NCS with continuous\ntime plant and controller can be viewed as a hybrid system.\nFig. 1 shows the schematic of the control loop closed over a\nreal-time network. In the diagram, the controller-to-actuator\ndelay is represented by \u03c4 CA while \u03c4 SC represents the sensorto-controller delay. Both the delays are stochastically\nvarying in nature. Additionally, there are dropped packets in\nthe network due to buffer overflows, corrupt data etc.\n\n\fFig. 1. NCS block diagram with PI Controller, discrete time network and\ncontinuous time plant.\n\nWhile modelling the NCS, preservation of this hybrid trait\nis a must. In the present case, MATLAB/Simulink blocks\nhave been used to model the continuous time plant and the\nPI type controller, which is widely used in process\nautomation and controller design. The network has been\nsimulated with the help of Stateflow charts, Simulink blocks\nand MATLAB functions that results in a flexible, modular\nutility. This design is capable of accurately mimicking the\nnetwork delays (not limited to less than the sampling time\nlike [9]) and packet drop-outs that essentially characterizes a\nreal communication network.\nClassical NCS literatures concerning analytical stability\nissues like Zhang et al. [9], Montestruque & Antsaklis [10]\nhave considered network delays ( \u03c4 ) less than one samplingtime ( T ). This is an over-simplified assumption and is often\nviolated in practical NCS applications. A non-deterministic\nnetwork condition often results in delays considerably larger\nthan the sampling time of the NCS. Also, delay less than a\nsampling time rules out any possibility of out-of-order\npackets which is also not practical. In the present network\nmodeling strategy, the occurrence of delays greater than one\nsampling time have been considered, along with packetlosses and out-of-order packet reception in order to enhance\nthe controller design task in an optimization framework.\nThe network test-bed has been verified by sending\ncontinuous data packets and has been found to work reliably\nat the sampling rate used with no appreciable packet delays\nor drop-outs beyond specified limits. The network induced\nrandom delays are modeled, as mentioned above for both the\nforward loop (at the plant side) and the feedback loop (at the\ncontroller side). The presence of network induced stochastic\ndelays has been restricted to the software-based simulation\nonly to meet the control system designer's specification.\nThis is to facilitate testing of a well behaved GA based near\noptimal control algorithm in a real-time NCS test-bed for\nreproducibility of the results.\nA. Stateflow Based Real-Time Modeling of Random\nDelays, Packet Drops and Out-of-Order Packets in NCS\nStateflow is an interactive, graphical design tool, based on\nfinite-state machine theory that allows the user to develop\nand simulate event-driven systems [11]. It is tightly\nintegrated with MATLAB and Simulink, providing the\nability to include event-driven programming functionality\nwithin the Simulink models. A Stateflow chart can have\ninput and output data (which serve as an interface to the\nSimulink environment), events for triggering the chart and\nactions and conditions which direct the flow of logic\nbetween the states. The Stateflow chart which is then\navailable to the Simulink environment as another Simulink\n\nblock can be connected to other Simulink blocks in a\nconventional way. Through these connections, the Stateflow\nand Simulink models share their data and respond to events.\nFig. 2 shows the overall network simulation model using\nStateflow. The \"Packet drop-out block\" simulates the drop\nout of packets. The \"Random delay\" block is responsible for\ngenerating random stochastic delays in a specified\nprobability distribution. The \"Stateflow model for Out-oforder packet removal\" block discards the out-of-order\npackets since they are highly detrimental from control\nsystem design point of view as in Zhao et al. [12]. Each\nStateflow block except for \"Stateflow model for out-of-order\npacket removal\" block runs at a rate of 10 times higher than\nthat of the packet generation rate in order to simulate delay\nwith appreciable precision. \"Stateflow model for out-oforder packet removal\" block runs at the specified packet\ngeneration rate. New data is sampled in each of the\nStateflow blocks at the end of 10 runs.\n\nFig. 2. Simulink & Stateflow based network test-bed.\n\nAs shown in Fig. 3 the \"Packet drop-out model in\nStateflow\" block consists of a single state which calls an\nEmbedded MATLAB function drop() after every 10 steps of\nthe Stateflow chart. The function drop() determines whether\nan input will be accepted, based on the probability of packet\ndrop which can be specified by the user.\n\nFig.3. Stateflow model for simulating packet drop-out.\n\nThe \"Random delay model in Stateflow\" block, as shown\nin Fig. 4 consists of a single state and four Embedded\nMATLAB functions, viz. init(), in_q(), sel_q() and out_q(n).\nWithin this block, firstly the random delay is generated, the\ntype and upper bound of which can be specified by the user.\nThen each incoming packet is held up by an amount of the\ntime equal to its corresponding delay generated. The\ninitialization of buffer and counter is implemented through\ninit(). Function in_q() handles the data input and time\nstamping, sel_q() does the time-stamp comparison and\nout_q() outputs the data. The timing and order of execution\nof the Embedded MATLAB functions is controlled by the\nstate Delay_and_pop.\nThe \"Stateflow model for out-of-order packet removal\"\nblock, shown in Fig. 5, receives and stores (if needed) the\ntime-stamped inputs (the last 1000 data packets in the\npresent case). At every step, it outputs data corresponding to\nthe highest value of time-stamping present in the buffer\nconstrained to the condition that the present time stamp\n\n\fvalue should be greater than that of the last data passed\nthrough. Hence the older packets are sorted out and\ndiscarded.\n\nFig. 4. Stateflow model for simulating random delay.\n\nFig. 5. Stateflow model for eliminating out-of-order packets.\n\nB. Hardware Setup, Synchronization between NCS Nodes\nand Its Necessity\nThe hardware used to set up the embedded network testbed consists of two Single Board Computers (SBCs) with\nembeddable kernels, a work-station and a 100 Mbps\nswitched Ethernet. Switched Ethernet is a very effective\ncommunication medium for real-time system. Each SBC is\nan Advantech PCM-9572 board kernel based embedded\nsystem and acts as an xPC client. The work-station runs the\nMATLAB and Simulink based control algorithms and acts\nas the xPC host. The two SBCs running the xPC targets are\nused as the \"Plant\" and the \"Controller\" as shown in Fig. 6.\nThe transmission protocol chosen for real-time\ncommunication set-up is User Datagram Protocol/Internet\nProtocol (UDP/IP). Though otherwise perceived as an\nunreliable communication protocol, most of the features of\nUDP/IP like minimal error checking and no re-transmission\nensures less network delay and data drop-out compared to\nother more secured transmission protocols and hence makes\nit very suitable for use in real-time-communication [13].\nHence with UDP/IP, data may be easily lost if the receiver\nfails to intercept it at the time of transmission. In view of the\nfact that both the SBCs are essentially sampled devices with\nsuch choice of transmission protocol, the sampling instances\nof both the plant-target and controller-target should be same.\nFailing this might lead to increased loss of data packets over\nand above that due to network conditions. Both the discretetime sensor and the continuous-time plant and controller,\nreceiving the sensor data through the network are time\ndriven [14]. But being time driven with similar step size\ndoes not guarantee proper synchronization between the two\nnodes since the SBCs are physically separate devices and\nthus run on their own separate clocks. When a simulation is\nrun in these devices on the xPC kernel, each simulation time\nstep consist of a finite number of clock cycles. Since the two\nSBC clocks are not synchronized, the simulation time steps\nand consequently the time of packet transmission by the\nsender and polling for data by the receiver may not be at the\n\nexact same instance. Thus both the nodes need to be\nsynchronized in order to preserve data integrity. This\nsynchronism has been achieved by the use of interrupts and\na separate connection between the plant and controller\ntargets.\nOne of the xPC targets is considered to be the master\ndevice and the other as the slave. The data sending of the\nmaster xPC is allowed to run on its own clock-time and an\ninterrupt signal is generated on its Parallel/Line Print\nTerminal (LPT) port at every time-step. The slave xPC\nreceives those interrupts through its parallel port, then\nacknowledges the interrupt request and proceeds with its\nsimulation. In the present case, the plant-node is made the\nmaster and the controller-node is made as the slave. Fig. 6\nrepresents the schematic diagram about how the\nsynchronization is made to work between the two xPC\nnodes.\n\nFig. 6. Schematic diagram of synchronization between the two SBCs.\n\nC. Simulink Implementation of the NCS\nStateflow models representing the network delays, packet\ndrops etc. (in section IIIA) is used in the real-time NCS\ncontrol algorithm test-bed along with the synchronization\nmethod as discussed in section IIIB, in the following\nmanner:\n1) Simulation at Master (Plant) Side\n\nFig. 7. Simulink model of Plant (Master) node.\n\nFig. 7 depicts the Simulink model developed for the\nmaster node. The \"Synchronous pulse generation\" block\ngenerates pulse signal at specified sampling instances which\nis then written to LPT port (Address = 0x378). The system\nblock defines the plant model under consideration. The rest\nof the blocks are responsible for sampling plant output at\nspecified time interval, packing-unpacking of out-going and\nin-coming data-streams respectively. Most importantly, the\nStateflow based real-time network block mimics the\nspecified network delay and drop-out characteristics.\n\n\f2) Simulation at Slave (Controller) Side\nThe slave consists of an interrupt-triggered function call\nsubsystem which handles the data transmission and\nreception. Whenever a rising edge is received in the LPT\nport data LSB, an interrupt is generated and is acknowledged\nby the \"xPC Target IRQ Source\" block which then triggers\nthe function call subsystem. The PI controller is outside the\nsubsystem. Data flow between the asynchronous\n(Synchronization pulse-triggered) and synchronous parts are\nhandled by the \"xPC Target Asynchcronous Rate\nTransition\" or a combination of \"Asynchronous Buffer\nBlock Write\" and \"Asynchronous Buffer Block Read\"\nblocks as shown in Fig. 8. This is to prevent data loss in the\ncase when input or output to or from the triggered subsystem\ndoes not happen at the specific time-steps of the slave.\n\nFig. 8. Simulink model of Controller (Slave) node.\n\nD. Few Practical Implementation Issues\nPreviously, Simulink based delay simulation has been\nattempted using the \"Variable Transport Delay\" block in [5].\nHowever this approach has resulted in all the packets getting\nshifted in time whenever a delay is present at an instant\nwhich does not fully mimic real network scenarios and does\nnot allow packet level simulation. The use of the \"Variable\nTime Delay\" block results in non-deterministic data.\nDelayed data is not available at desired time instances as\nspecified by the delay parameter.\nThe packet level network simulation (with random delays\nand drops) for controller design has been improved in [14]\nwith the use of SimEvents blocks. SimEvents is a MATLAB\npackage for Discrete Event Simulation (DES) that is\nextremely well-suited to simulate real networks. However,\nSimulink models containing SimEvents blocks are not\nembeddable in Real-time xPC targets. Hence this package\nwas not usable for the present work. Stateflow overcomes all\nthe difficulties faced using the afore-mentioned methods. It\nprovides extremely flexible ways of manipulating data and\nprogram-flow and hence has successfully been used in the\npresent work for simulating the delays with acceptable\nrealism and accuracy. The delay generated is approximated\nto a value which is an integer multiple of the fixed step size.\nAny value of delay less than the fixed step size will fail to\nregister itself as delay to the program. Thus, lower the fixed\nstep size, finer will be the quantization level of the delay\nvalues. The fixed step size should not become comparable to\nthe Task Execution Time (TET) which may lead to CPU\noverload. In the present case, a fine balance has been made\nthat allows delay values to be generated with reasonable\nflexibility.\nThe present set-up does not include the scope to measure\n\nthe extent of packet drop-out within the physical link itself.\nThus before the actual implementation of the experimental\nset-up, the communication channel i.e. Ethernet link, in the\npresent case is tested under various settings to find out the\nlimits of different parameters and variables associated with\nthe test-bed within which the Ethernet serves as a reliable\ncommunication channel.\nE. Data Logging and Its Advantage in Quantitative\nPerformance Analysis in Real-Time NCS\nTwo monitors connected to the two SBCs shows the plant\nresponse and the corresponding controller output. But from\nthese outputs only the qualitative nature of the responses can\nbe judged and no further quantitative study can be made out\nof them. To overcome this limitation the data logging tool\navailable with the xPC target set-up has been used. The data\nlogging tool stores the specified signal values in actual\nruntime which can be retrieved later from the MATLAB\nWorkspace for detailed analysis.\nIV. SIMULATIONS AND TESTING OF THE REAL-TIME PI\nCONTROL ALGORITHM\nFor simulation study, the parameters adopted for optimal\ntuning (offline) of the PI parameters via GA are detailed\nnext. The data packets are generated every 0.1 seconds. The\nprobability of packet drop-out is set at 0.1 and the upper\nbound of network induced delay is taken to be 0.2 seconds.\nThe control tuning algorithm had been run for a 30 seconds\nof time horizon. The optimally tuned PI controller\nparameters are K p = 0.1563 and K i = 0.0939 respectively\nwith the corresponding expected minima of the\nstochastically varying objective function as J min = 5.1713 .\n\nFig. 9. Laboratory set-up for the real-time NCS test-bed.\n\nFig. 9 identifies the different hardware components of the\nNCS test-bed. The host xPC and the client xPCs (the two\nSBCs) are connected through 100 Mbps switched Ethernet.\nOne SBC is assigned to act as the master node whereas the\nother one as the slave as also shown in the schematic Fig. 6.\nAfter establishing connection between the host and the client\nxPCs, the Simulink models of the two nodes are downloaded\nto their respective terminals. The two respective parallel\nports are connected externally to ascertain proper\nsynchronization between the nodes. The outputs of the plant\nand the controller are viewed on the respective monitors and\nlogged in the computer memory. The plots are regenerated\nfrom the logged data as can be viewed in Fig. 10.\n\n\fREFERENCES\n[1]\n[2]\n[3]\n[4]\n[5]\nFig. 10. Step response and control signal of the networked PI control\nsystem.\n[6]\n\n[7]\n\n[8]\n[9]\nFig. 12. Random delay of each packet and packet losses.\n\nAs shown in Pan et al. [5], an optimally tuned PID\ncontroller can be used in networked process control but\nsuffers from large oscillation of control signal due to the\nrandomness in the loop. The present methodology gives a\nsmoother control action (Fig. 10) but the overshoot is\nslightly higher due to the absence of the derivative action as\ncompared to [5]. Additionally, the magnitude of stochastic\ndelay generated for each data packet as also the dropped\npackets are plotted in Fig.11. Here, the interspersed red\ncircles represent the dropped packets and the blue stems\ncorrespond to the respective magnitude of random delays.\nFrom Fig. 10 it is evident that the plant, after being\nembedded in the proposed real-time network test-bed shows\nreasonably good closed loop time domain response using the\noptimally tuned PI controller parameters obtained from GA\nbased tuning under network induced delays and drop-outs\nand filtering the order of data-packets.\nV. CONCLUSION\nThe new Stateflow based modeling of the network testbed is validated with an optimal PI control system in the\npresence of random delays and drops. Simulation and\nexperimental results on a real-time framework show the\neffectiveness of the proposed methodology. Future scope of\nresearch may be directed towards validating the network\ntest-bed for different random delay distribution and more\ncomplicated frequency domain design of networked process\ncontrollers.\n\n[10]\n[11]\n[12]\n\n[13]\n\n[14]\n[15]\n\nT.C. Yang, \"Networked control system: a brief survey\", IEE\nProceedings \u2013 Control Theory & Applications, vol. 153, no. 4, pp.\n403-412, July 2006.\nJoao P. Hespanha, Payam Naghshtabrizi, and Yonggang Xu, \"A\nsurvey of recent results in networked control systems\", Proceedings of\nthe IEEE, vol. 95, no. 1, pp. 138-162, Jan. 2007.\nDong Yue, Qing-Long Han, and James Lam, \"Network-based robust\nH\u221e control of systems with uncertainty\", Automatica, vol. 41, no. 6,\npp. 999-1007, June 2005.\nFeng-Li Lian, James R. Moyne, and Dawn M. Tilbury, \"Performance\nevaluation of control networks: Ethernet, ControlNet, and DeviceNet\",\nIEEE Control Systems Magazine, vol. 21, no. 1, pp. 66-83, Feb. 2001.\nIndranil Pan, Saptarshi Das, and Amitava Gupta, \"Tuning of an\noptimal fuzzy PID controller with stochastic algorithms for networked\ncontrol systems with random time delay\", ISA Transactions, vol. 50,\nno. 1, pp.28-36, Jan. 2011.\nMonotosh Das, Ratna Ghosh, Bhaswati Goswami, Amitava Gupta,\nA.P. Tiwari, R. Balasubramanian, and A.K. Chandra, \"Network\ncontrol system applied to a large pressurized heavy water reactor\",\nIEEE Transactions on Nuclear Science, vol. 53, no. 5, pp. 2948-2956,\nOct. 2006.\nM. Das, A. Banerjee, R. Ghosh, B. Goswami, R. Balasubramanian,\nA.K. Chandra, and A. Gupta, \"A study on multivariable process\ncontrol using message passing across embedded controllers\", ISA\nTransactions, vol. 46, no. 2, pp. 247-253, April 2007.\nK.J. Astrom and T. Hagglund, \"Revisiting the Ziegler-Nichols step\nresponse method for PID control\", Journal of Process Control, vol.14,\nno. 6, pp. 635-650, Sept. 2004.\nWei Zhang, Michael S. Branicky, and Stephen M. Phillips, \"Stability\nof networked control systems\", IEEE Control Systems Magazine, vol.\n21, no. 1, pp. 84-99, Feb. 2001.\nLuis A. Montestruque and Panos J. Antsaklis, \"On the model-based\ncontrol of networked systems\", Automatica, vol. 39, no. 10, pp. 18371843, Oct. 2003.\n\"MATLAB stateflow: user's guide\", MathWorks Inc., 2010.\nYun-Bo Zhao, Guo-Ping Liu, and David Rees, \"Actively\ncompensating for data packet disorder in networked control systems\",\nIEEE Transactions on Circuits and Systems-II: Express Briefs, vol.\n57, no. 11, pp. 913-917, Nov. 2010.\nLuca Schenato, Bruno Sinopoli, Massimo Franceschetti, Kameshwar\nPoolla, and Shankar Sastry, \"Foundations of control and estimation\nover lossy networks\", Proceedings of the IEEE, vol. 95, no.1, pp. 163187, Jan. 2007.\nT.C. Yang, C. Peng, D. Yue, and M.R. Fei, \"New study of controller\ndesign for networked control systems\", IET Control Theory &\nApplications, vol. 4, no. 7, pp. 1109-1121, July 2010.\nIndranil Pan, Ayan Mukherjee, Saptarshi Das, and Amitava Gupta,\n\"Real time implementation of a genetic algorithm based optimal PID\ncontroller to handle unreliable network conditions in NCS\napplications\", 2011 2nd National Conference on Emerging Trends and\nApplications in Computer Science (NCETACS), pp. 1-5, March 2011,\nShillong.\n\n\f"}