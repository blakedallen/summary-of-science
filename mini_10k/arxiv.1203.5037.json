{"id": "http://arxiv.org/abs/1203.5037v1", "guidislink": true, "updated": "2012-03-22T16:45:24Z", "updated_parsed": [2012, 3, 22, 16, 45, 24, 3, 82, 0], "published": "2012-03-22T16:45:24Z", "published_parsed": [2012, 3, 22, 16, 45, 24, 3, 82, 0], "title": "On the Convergence Speed of Turbo Demodulation with Turbo Decoding", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1203.1325%2C1203.5429%2C1203.2828%2C1203.5732%2C1203.2095%2C1203.2027%2C1203.0572%2C1203.1963%2C1203.1188%2C1203.1272%2C1203.3002%2C1203.5241%2C1203.4200%2C1203.5104%2C1203.5757%2C1203.5030%2C1203.6489%2C1203.5627%2C1203.6346%2C1203.4050%2C1203.4262%2C1203.3617%2C1203.6137%2C1203.2577%2C1203.1776%2C1203.0226%2C1203.2835%2C1203.6217%2C1203.1727%2C1203.6808%2C1203.2864%2C1203.3840%2C1203.1905%2C1203.0060%2C1203.2775%2C1203.1557%2C1203.2851%2C1203.4185%2C1203.1812%2C1203.6040%2C1203.6511%2C1203.4422%2C1203.2856%2C1203.2557%2C1203.4036%2C1203.4609%2C1203.5110%2C1203.3644%2C1203.3017%2C1203.3411%2C1203.6163%2C1203.5570%2C1203.0843%2C1203.4497%2C1203.2148%2C1203.4816%2C1203.3355%2C1203.4858%2C1203.2680%2C1203.5761%2C1203.3134%2C1203.3783%2C1203.5037%2C1203.0578%2C1203.0928%2C1203.2909%2C1203.3208%2C1203.6892%2C1203.5611%2C1203.5708%2C1203.4267%2C1203.1969%2C1203.3531%2C1203.6860%2C1203.1153%2C1203.2746%2C1203.1255%2C1203.6204%2C1203.3385%2C1203.3705%2C1203.4510%2C1203.3429%2C1203.6568%2C1203.3037%2C1203.6685%2C1203.3582%2C1203.6228%2C1203.2231%2C1203.5957%2C1203.4078%2C1203.4910%2C1203.2081%2C1203.1330%2C1203.4875%2C1203.0608%2C1203.0276%2C1203.1746%2C1203.4989%2C1203.3747%2C1203.2343%2C1203.2127&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "On the Convergence Speed of Turbo Demodulation with Turbo Decoding"}, "summary": "Iterative processing is widely adopted nowadays in modern wireless receivers\nfor advanced channel codes like turbo and LDPC codes. Extension of this\nprinciple with an additional iterative feedback loop to the demapping function\nhas proven to provide substantial error performance gain. However, the adoption\nof iterative demodulation with turbo decoding is constrained by the additional\nimplied implementation complexity, heavily impacting latency and power\nconsumption. In this paper, we analyze the convergence speed of these combined\ntwo iterative processes in order to determine the exact required number of\niterations at each level. Extrinsic information transfer (EXIT) charts are used\nfor a thorough analysis at different modulation orders and code rates. An\noriginal iteration scheduling is proposed reducing two demapping iterations\nwith reasonable performance loss of less than 0.15 dB. Analyzing and\nnormalizing the computational and memory access complexity, which directly\nimpact latency and power consumption, demonstrates the considerable gains of\nthe proposed scheduling and the promising contributions of the proposed\nanalysis.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1203.1325%2C1203.5429%2C1203.2828%2C1203.5732%2C1203.2095%2C1203.2027%2C1203.0572%2C1203.1963%2C1203.1188%2C1203.1272%2C1203.3002%2C1203.5241%2C1203.4200%2C1203.5104%2C1203.5757%2C1203.5030%2C1203.6489%2C1203.5627%2C1203.6346%2C1203.4050%2C1203.4262%2C1203.3617%2C1203.6137%2C1203.2577%2C1203.1776%2C1203.0226%2C1203.2835%2C1203.6217%2C1203.1727%2C1203.6808%2C1203.2864%2C1203.3840%2C1203.1905%2C1203.0060%2C1203.2775%2C1203.1557%2C1203.2851%2C1203.4185%2C1203.1812%2C1203.6040%2C1203.6511%2C1203.4422%2C1203.2856%2C1203.2557%2C1203.4036%2C1203.4609%2C1203.5110%2C1203.3644%2C1203.3017%2C1203.3411%2C1203.6163%2C1203.5570%2C1203.0843%2C1203.4497%2C1203.2148%2C1203.4816%2C1203.3355%2C1203.4858%2C1203.2680%2C1203.5761%2C1203.3134%2C1203.3783%2C1203.5037%2C1203.0578%2C1203.0928%2C1203.2909%2C1203.3208%2C1203.6892%2C1203.5611%2C1203.5708%2C1203.4267%2C1203.1969%2C1203.3531%2C1203.6860%2C1203.1153%2C1203.2746%2C1203.1255%2C1203.6204%2C1203.3385%2C1203.3705%2C1203.4510%2C1203.3429%2C1203.6568%2C1203.3037%2C1203.6685%2C1203.3582%2C1203.6228%2C1203.2231%2C1203.5957%2C1203.4078%2C1203.4910%2C1203.2081%2C1203.1330%2C1203.4875%2C1203.0608%2C1203.0276%2C1203.1746%2C1203.4989%2C1203.3747%2C1203.2343%2C1203.2127&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Iterative processing is widely adopted nowadays in modern wireless receivers\nfor advanced channel codes like turbo and LDPC codes. Extension of this\nprinciple with an additional iterative feedback loop to the demapping function\nhas proven to provide substantial error performance gain. However, the adoption\nof iterative demodulation with turbo decoding is constrained by the additional\nimplied implementation complexity, heavily impacting latency and power\nconsumption. In this paper, we analyze the convergence speed of these combined\ntwo iterative processes in order to determine the exact required number of\niterations at each level. Extrinsic information transfer (EXIT) charts are used\nfor a thorough analysis at different modulation orders and code rates. An\noriginal iteration scheduling is proposed reducing two demapping iterations\nwith reasonable performance loss of less than 0.15 dB. Analyzing and\nnormalizing the computational and memory access complexity, which directly\nimpact latency and power consumption, demonstrates the considerable gains of\nthe proposed scheduling and the promising contributions of the proposed\nanalysis."}, "authors": ["Salim Haddad", "Amer Baghdadi", "Michel Jezequel"], "author_detail": {"name": "Michel Jezequel"}, "author": "Michel Jezequel", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1109/TSP.2012.2198550", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/1203.5037v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1203.5037v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "Submitted to IEEE Transactions on Signal Processing on April 27, 2011", "arxiv_primary_category": {"term": "cs.IT", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.IT", "scheme": "http://arxiv.org/schemas/atom", "label": null}, {"term": "math.IT", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1203.5037v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1203.5037v1", "journal_reference": null, "doi": "10.1109/TSP.2012.2198550", "fulltext": "IEEE TRANSACTIONS ON SIGNAL PROCESSING\n\n1\n\nOn the Convergence Speed of Turbo\nDemodulation with Turbo Decoding\nSalim Haddad, Amer Baghdadi, and Michel Jezequel\n\nAbstract\nIterative processing is widely adopted nowadays in modern wireless receivers for advanced channel codes like turbo\n\narXiv:1203.5037v1 [cs.IT] 22 Mar 2012\n\nand LDPC codes. Extension of this principle with an additional iterative feedback loop to the demapping function has\nproven to provide substantial error performance gain. However, the adoption of iterative demodulation with turbo decoding\nis constrained by the additional implied implementation complexity, heavily impacting latency and power consumption.\nIn this paper, we analyze the convergence speed of these combined two iterative processes in order to determine the exact\nrequired number of iterations at each level. Extrinsic information transfer (EXIT) charts are used for a thorough analysis\nat different modulation orders and code rates. An original iteration scheduling is proposed reducing two demapping\niterations with reasonable performance loss of less than 0.15 dB. Analyzing and normalizing the computational and\nmemory access complexity, which directly impact latency and power consumption, demonstrates the considerable gains\nof the proposed scheduling and the promising contributions of the proposed analysis.\n\nI. I NTRODUCTION\nAdvanced wireless communication standards impose the use of modern techniques to improve spectral efficiency\nand reliability. Among these techniques Bit-Interleaved Coded Modulation (BICM) with different modulation orders\nand Turbo Codes with various code rates are frequently adopted.\nThe BICM principle [1] currently represents the state-of-the-art in coded modulations over fading channels. The BitInterleaved Coded Modulation with Iterative Demapping (BICM-ID) scheme proposed in [2] is based on BICM with\nadditional soft feedback from the Soft-Input Soft-Output (SISO) convolutional decoder to the constellation demapper.\nIn this context, several techniques and configurations have been explored. In [3], the authors investigated different\nmapping techniques suited for BICM-ID and QAM16 constellations. They proposed several mapping schemes providing\nsignificant coding gains. In [4], the convolutional code classically used in BICM-ID schemes was replaced by a turbo\ncode. Only a small gain of 0.1 dB was observed. This result may make BICM-ID with turbo-like coding solutions\n(TBICM-ID) unsatisfactory with respect to the added decoding complexity. On the other hand, authors in [5] have\npresented a technique intended to improve the performance of TBICM-ID over non Gaussian channels. The proposed\ntechnique, namely Signal Space Diversity (SSD), consists of a rotation of the constellation followed by a signal space\ncomponent interleaving. It has shown additional error correction at the receiver side in an iterative processing scenario.\nConstellation rotation enables to exploit higher code rates and to solve potential problems in selective channels while\nkeeping good performance. It has been proposed for all constellation orders of Quadrature Amplitude Modulation\n(QAM). Combining constellation rotation with signal space component interleaving leads to significant improvement\nin performance over fading and erasure channels. It increases the diversity order of a communication system without\nusing extra bandwidth. BICM coupled with SSD has been extensively studied for single carrier systems, e.g. in [6],\n[7] and the references therein.\n\nNovember 8, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\n2\n\nApplication of iterative demapping in this context has shown excellent error rate performance results particularly\nin severe channel conditions (erasure, multi-path, real fading models) [8]. In that work, LDPC channel coding was\nconsidered.\nNevertheless, most of the existing works have not considered these techniques from an implementation perspective.\nIn fact, the application of the iterative demapping in future receivers using advanced iterative channel decoding will\nlead to further latency problems, more power consumption and more complexity caused by feedback inner and outer the\ndecoder. Besides extrinsic information exchange inside the iterative channel decoder, additional extrinsic information\nis fed back as a priori information used by the demapper to improve the symbol to bit conversion. The number\nof iterations to be run at each level should be determined accurately as it impacts significantly, besides error rate\nperformance, latency, power consumption, and complexity.\nThis work discusses the implementation efficiency of iterative receiver based on turbo demodulation and turbo\ndecoding in order to achieve a gain in band-limited wireless communication systems. Convergence speed is analyzed for\nvarious system configurations to determine the exact required number of iterations at each level. Significant complexity\nreductions can be achieved by means of the proposed original iteration scheduling. Finally, an accurate normalized\ncomplexity analysis is presented in terms of arithmetic and memory access operations.\nII. S YSTEM MODEL\n\nAND\n\nA LGORITHMS\n\nA. System Model\nThe considered system uses one transmit and one receive antenna while assuming perfect synchronization. Fig. 1\nshows a basic transmitter and receiver model using turbo demodulation and decoding. We denote by TBICM-ID-SSD\na turbo BICM with iterative demapping coupled with signal space diversity.\nTURBO ENCODER\n\nSSD\n\nC\n\nU\n\nCC\u22121\n\nPUNCTURING\n\nINTERLEAVER\nQ\n\nV\n\n2\n\nQ\n\n1\n\nCC\u22122\n\nS\n\nMAPPER\n\nROTATION\n\n(QPSK, QAM16, QAM64)\n(QAM256)\n\nSr\nS\u2032r\n\nRAYLEIGH FADING CHANNEL (with or without erasure)\n\nDELAY d\n\nX\u2032r\n\nTURBO DECODER\n\nXr\u2032Q\n\nXr\u2032I\n\nL(s)\n\nDELAY d\n\nL(p1)\n\nLapr,Dem\n\nINTERLEAVER\nQ\n\nPUNCTURING\n\n2\n\nXr\n\nDEMAPPER\n\nLext,Dem\n\nDEINTERLEAVER\nQ\u22121\n2\n\nQ\n\n1\n\nL(p2)\n\nDEPUNCTURING\n\nTURBO\nDECODER\n\nDEC1\nQ\u22121\n1\n\nQ\n\n1\n\nDEC2\n\nDecoded Bits\n\nFig. 1: System model with TBICM-ID-SSD.\nOn the transmitter side, information bits U which are called systematic bits are regrouped into symbols up consisting\nof l bits, and encoded with an l-binary turbo encoder. It consists of a parallel concatenation of two identical convolutional codes (PCCC). The output codeword C is then punctured to reach a desired coding rate Rc . The 8-state double\nbinary (l = 2) recursive systematic convolutional code (RSC code), adopted in the WiMax standard, is considered for\nthe turbo encoder.\nIn order to gain resilience against error bursts, the resulting sequence is interleaved using an S-random interleaver\np\n\u03a02 with S = N/4. Punctured and interleaved bits denoted by V are then gray mapped to channel symbols sq\n\nchosen from a 2M -ary constellation X, M is the number of bits per modulated symbol.\n\nNovember 8, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\n3\n\nApplying the SSD consists first of the rotation of the mapped symbols sq . The resulting rotated symbols are denoted\nby sr,q . The performance gain obtained when using a rotated constellation Xr depends on the choice of the rotation\nangle. In this regard, a thorough analysis has been done for the 2nd-generation terrestrial transmission system developed\nby the DVB Project (DVB-T2) which adopted the rotated constellation technique. A single rotation angle [8] has been\nchosen for each constellation size independently of the channel type. Using these angles, and with LDPC code, gains of\n0.5 dB and 6 dB were shown for Rayleigh fading channel without and with erasure respectively for high code rate [8].\nThe second step consists of signal space component interleaving. When a constellation signal is submitted to a fading\nevent, its in-phase component I and quadrature component Q fade identically and suffers from an irreversible loss.\nA means of avoiding this loss involves making I and Q fade independently while each carrying all the information\nregarding the transmitted symbol. By inserting an interleaver (a simple delay for uncorrelated fast-fading channel)\nbetween the I and Q channels, the diversity order is doubled.\ns\u2032r,q symbols are then transmitted over a noisy and Rayleigh fast-fading channel with or without erasures. In fact,\nerasure events happen in single frequency network (SFN), as in DVB-T2 standard, due to destructive interferences.\nEach received symbol x\u2032r,q is affected by a different fading coefficient, an erasure coefficient, and additive Gaussian\nnoise.\nThe channel model considered is a frequency non-selective memoryless channel with erasure probability. The received\ndiscrete time baseband complex signal can be written as:\nx\u2032r,q\n\n=\n\nhq .\u03c1q .s\u2032r,q + nq\n\n=\n\nh\u2032q .s\u2032r,q + nq\n\n(1)\n\nwhere hq is the Rayleigh fast-fading coefficient, \u03c1q is the erasure coefficient probability taking value 0 with a\nprobability P\u03c1 and value 1 with a probability of 1 \u2212 P\u03c1 . nq is a complex white Gaussian noise with spectral density\nN0 /2 in each component axes, and h\u2032q is the channel attenuation. Note that, at the receiver side, the transmitted energy\np\nhas to be normalized by a 1 \u2212 P\u03c1 factor in order to cope with the loss of transmitted power.\nB. Max-Log-MAP Demapping Algorithm\nAt the receiver side, the complex received symbols x\u2032r,q have their Q-components re-shifted resulting in xr,q .\nAn extrinsic log-likelihood ratio Lext,Dem (cp,q /xr,q ) is calculated for each bit cp,q corresponding to the pth bit of\nthe received rotated and modulated symbol xr,q . After de-interleaving, de-puncturing and turbo decoding, extrinsic\ninformation from the turbo decoder Lext,Dec (cp,q ) is passed through the interleaver, punctured and fed back as a\npriori information Lapr,Dem (cp,q ) to the demapper in a turbo demapping scheme. Lext,Dem (cp,q /xr,q ) is the difference\nbetween the soft output a posteriori LDem (cp,q /xr,q ) and Lapr,Dem (cp,q ) at the demapper side, it is given by the\nexpression below:\nLext,Dem (cp,q /xr,q )\n\n= LDem (cp,q /xr,q ) \u2212 Lapr,Dem (cp,q )\n\u0012 \u0013\nZ1\n= log\nZ2\n\n(2)\n\nZl(l=0,1) can be expressed as:\nZl(l=0,1) =\n\nX\n\nk\nsr,j \u2208Xr,l\n\nNovember 8, 2018\n\ne\u2212Aq .\n\nM\u22121\nY\n\nP (ci,q )\n\n(3)\n\ni=0,i6=k\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\n4\n\nk\nwhere Xr,l\n, with l \u2208 {0, 1}, are the symbol sets of the constellation for which symbols have their ith bit equal\n\nto l. P (ci,q ) is the probability of the ith bit of constellation symbol sr,q computed through a priori information\nLapr,Dem (ci,q ). Reducing the complexity of the expressions above can be performed by applying the max-log approximation. Thus, equation (2) can be written as:\nLext,Dem (cp,q /xr,q ) =\n\nmin (Aq \u2212 Bp,q ) \u2212\n\nk\nsr,j \u2208Xr,0\n\nmin (Aq \u2212 Bp,q )\n\n(4)\n\nk\nsr,j \u2208Xr,1\n\nwhere Aq and Bp,q are computed as follows.\nAq =\n\uf8eb\n\nBp,q = \uf8ed\n\nM\u22121\nX\n\nh\u20322\nh\u20322\nq\u22121 Q\nq\nI\nI 2\n2\n|x\n\u2212\ns\n|\n+\n|xr,q \u2212 sQ\nr,q\nr,j\nr,j |\n2\n\u03c32\n\u03c3\n\uf8f6\n\ni=0,ci,q =1\n\n(5)\n\nLapr,Dem (ci,q )\uf8f8 \u2212 Lapr,Dem (cp,q )\n\n(6)\n\nIn fact, the above demapping equations are valid for both channel models (with or without erasures) through the use\nof h\u2032q coefficient (equation (1)).\nThese simplified expressions exhibit three main computation steps: (a) Euclidean distance computation referred by\nAq , (b) a priori adder referred by Bp,q , and (c) minimum finder referred by the min operation of equation (4).\nC. Max-Log-MAP Decoding Algorithm\nFollowing the demapping function at the receiver side, the turbo decoding algorithm is applied. The BCJR algorithm\nis considered for the Soft Input Soft Output (SISO) convolutional decoders. Using input symbols and a priori extrinsic\ninformation, each SISO decoder computes a posteriori probabilities. The BCJR SISO decoder computes first the\nbranch metrics \u03b3. Then it computes the forward \u03b1k and backward \u03b2k metrics between two trellis states s and s\u2032 [9].\n\u2032\n\n\u2032\n\n\u03b1k (s) = max\n(\u03b1k\u22121 (s ) + \u03b3k (s , s))\n\u2032\n\n(7)\n\n(s ,s)\n\n\u2032\n\n\u2032\n\n\u03b2k (s) = max\n(\u03b2k+1 (s ) + \u03b3k+1 (s , s))\n\u2032\n\n(8)\n\n(s ,s)\n\nwhere\n\u03b3k (s , s) = \u03b3kSys (s , s) + \u03b3kP arity (s , s) + \u03b3kExt (s , s)\n\u2032\n\n\u2032\n\n\u2032\n\n\u2032\n\n(9)\n\nThe soft output information so(dk = cp cp+1 ) and symbol-level extrinsic information z(dk = cp cp+1 ) of symbol k\nare then computed using equations (10) and (11). The extrinsic information, which is exchanged iteratively between\nthe two SISO decoders, is obtained by subtracting the intrinsic information from so(dk = cp cp+1 ).\n\u0010\n\u0011\n\u2032\n\u2032\nso(dk ) = \u2032 max\n\u03b1\n(s\n)\n+\n\u03b3\n(s\n,\ns)\n+\n\u03b2\n(s)\nk\u22121\nk\nk\n\u2032\n\n(10)\n\n(s ,s)/d(s ,s)=dk\n\nz(dk ) =\n\nmax\n\u2032\n\n(s\u2032 ,s)/d(s ,s)=dk\n\n\u0010\n\u0011\n\u2032\n\u2032\n\u03b1k\u22121 (s ) + \u03b3kExt (s , s) + \u03b2k (s)\n\n(11)\n\nz(dk ) can be multiplied by a constant scaling factor SF (typically equals to 0.75) for a modified Max-Log-MAP\nalgorithm improving the resultant error rate performance.\nFinally, in case of turbo demapping and only by one SISO decoder, the bit-level extrinsic information of systematic\nsymbols cp cp+1 are computed using equations (12) and (13). Similar computations are done for parity symbols\ncp+2 cp+3 .\n\nNovember 8, 2018\n\nLapr,Dem (cp ) = max[z(dk = 11), z(dk = 10)] \u2212 max[z(dk = 01), z(dk = 00)]\n\n(12)\n\nLapr,Dem (cp+1 ) = max[z(dk = 11), z(dk = 01)] \u2212 max[z(dk = 10), z(dk = 00)]\n\n(13)\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\n5\n\nThese expressions exhibit three main computation steps: (a) branch metrics computation referred by \u03b3k , (b) state\nmetrics computation referred by (\u03b1k and \u03b2k ), and (c) extrinsic information computation referred by Lapr,Dem and z.\nIII. TBICM-SSD\n\nAND\n\nTBICM-ID-SSD\n\nCONVERGENCE SPEED ANALYSIS\n\nThis section illustrates the impact of constellation rotation and iterative demapping on the convergence speed.\nConvergence speed designates the rapidity of the convergence of the iterative process.\nEXIT charts [10] are used as a useful tool for a clear and thorough analysis of the convergence speed. They were first\nproposed for parallel concatenated codes, and then extended to other iterative processes. For iterative demapping with\nturbo decoding (TBICM-ID-SSD), authors in [5] have used this tool to analyze the iterative exchange of information\nbetween the different SISO components. In this system receiver with two iterative processes, the response of the two\nSISO decoders is plotted while taking into consideration the SISO demapper with updated inputs and outputs.\nIn this scheme, IA1 , IA2 , IE1 , IE2 are used to designate the a priori and extrinsic information respectively for DEC1\nand DEC2 (Fig. 1). Iterations start without a priori information (IA1 = 0 and IA2 = 0). Then, extrinsic information\nIE1 of DEC1 is fed to DEC2 as a priori information IA2 and vice versa, i.e. IE1 = IA2 and IE2 = IA1 . Since\nthis EXIT chart analysis is asymptotic, infinite long BICM interleaver size should be assumed. The SISO decoder is\nrepresented by its transfer function:\nIE = T (IA, Eb /N0 )\n\n(14)\n\nExtensive analysis for different Eb /N0 and different system parameters (modulation orders and code rates) has been\nconducted and gave similar results. Fig. 2 illustrates one of these simulations for QAM64, code rate 54 , Eb /N0 =22 dB,\nand erasure probability equals to 0.15. The transfer function of the turbo decoder is represented by the two-dimensional\nchart as follows. One SISO decoder component is plotted with its input on the horizontal axis and its output on the\nvertical axis. The other SISO component is plotted with its input on the vertical axis and its output on the horizontal\naxis. The iterative decoding corresponds to the trajectory found by stepping between the two curves. For a successful\ndecoding, there must be a clear path between the two curves so that iterative decoding can proceed from 0 to 1 mutual\n\nOutput IE1 of DEC1 becomes input IA2 to DEC2\n\nextrinsic information.\n\n(2)\n\n(1)\n(1)\n\n(2)\n\n(2)\n(1)\n(2)\n(1)\n(1)\n(1)\n\n(1) (2)\n\n(1) Trajectory of TBICM-SSD\n(2) Trajectory of TBICM-ID-SSD\n\nOutput IE2 of DEC2 becomes input IA1 to DEC1\n\nFig. 2: EXIT chart analysis at an Eb /N0 = 22 dB of the dual binary turbo decoder for iterations to the QAM64\ndemapper. Code rate\n\n4\n5\n\nis considered for transmission over Rayleigh fast-fading channel with erasure probability\n\nequals to 0.15.\n\nNovember 8, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\n6\n\nThe plain curves of Fig. 2 correspond to the EXIT charts for the case with rotated constellation. Meanwhile,\nthe dashed curves correspond to the case with no rotation. Furthermore, the red curves correspond to non iterative\ndemapping, e.g. SISO demapper executed once in feed forward scheme. Applying demapping iterations corresponds\nto the other colored curves in the EXIT charts of Fig. 2.\nIn this figure, we observe that the EXIT tunnel is wider for the rotated case than the one without. Furthermore, the\ntunnel is limited to that of one demapping iteration for the latter case. Thus, making more demapping iterations will not\naffect the convergence speed of non rotated constellation configurations. However the tunnel is enlarging (improving)\nuntil three demapping iterations using the rotated constellation. For TBICM-SSD, EXIT charts show a need of more\nthan 6 turbo decoding iterations to attain convergence following the trajectory (1). Whereas 4 demapping iterations\nare sufficient following the trajectory (2).\nThus, in case of TBICM-ID-SSD, the iteration scheduling which optimize the convergence is the one that enlarge\nthe EXIT tunnel as soon as possible. Analyzing the different tunnel curves in the EXIT figure shows that the tunnel is\nenlarging for each demapping iteration. Thus, the optimized scheduling is to execute only one turbo decoding iteration\nfor each demapping iteration and then step forward to the next demapping iteration (enlarge the EXIT tunnel). This\nscheduling is the one adopted implicitly in [5]. Note that after the third demapping iteration, only a slight improvement\nin convergence is observed. Similar results have been found for all considered modulation orders, code rates and erasure\ncoefficients. This result will be used in the next section to reduce the number of demapping iterations.\nIV. R EDUCING\n\nTHE NUMBER OF DEMAPPING ITERATIONS\n\nAs mentioned in the previous section, the optimized profile applies one turbo code iteration for each demapping\niteration. Thus, reducing the number of turbo demapping iterations will reduce the total number of iterations for the\nturbo decoder.\nHowever, various constructed EXIT charts with different parameters show that after a specific number of demapping\niterations, only a slight improvement is predicted. As an example, in Fig. 2 decoder transfer functions coincide with\neach other after 3 demapping iterations. However, one can notice that turbo decoding iterations must continue until\nthat the two constituent decoders agree with each other. Thus, the number of demapping iterations can be reduced\nwithout affecting error rates, while keeping the same total number of turbo decoding iterations. This constitutes the\nbasis for our proposed original iteration scheduling.\nIn fact, to keep the same number of iterations for the decoder unaltered, one turbo code iteration is added after the\nlast iteration to the demapper for each eliminated demapping iteration. Fig. 3 simulates six turbo demapping iterations\nperforming one turbo decoding iteration for each. Hence, six turbo code iterations are performed in total. This scheme\nis denoted as 6IDem.\nWith the proposed iteration scheduling, 5IDem 1EIDec designates five demapping iterations (one turbo code\niteration is applied for each) followed by one extra turbo code iteration.\nReferring to Fig. 3, error rates associated to 6IDem and 5IDem 1EIDec show almost same performances, while\none feedback to the demapper is eliminated in the latter scheme. Similarly, for 4IDem 2EIDec, two feedbacks to\nthe demapper are eliminated. A slight loss of 0.025 dB is induced. Eliminating more demapping iterations will cause\nsignificant performance degradation. 3IDem 3EIDec is closer to 5IDem than to 6IDem.\nIn fact, 4IDem 2EIDec represents the most optimized curve for the 6IDem performance scheme as shown in Fig.\n3. EXIT charts do not agree with this consideration at the first sight, three demapping iterations were sufficient to do\nthe same correction as the eight iterations. EXIT charts are based on average calculations as many frames are simulated.\nNovember 8, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\n7\n\nFig. 3: BER performance comparison for TBICM-ID-SSD for the transmission of 1536 information bits frame over\nRayleigh fast-fading channel without erasure. QAM64 modulation scheme with code rate\nModulation scheme\n\n2\n3\n\nare considered.\n\nPerformance loss (dB)\nWithout Erasure\n\nWith Erasure\n\nRc = 6/7 \u2212\u22b2 Rc = 1/2\n\nRc = 6/7 \u2212\u22b2 Rc = 1/2\n\nQPSK\n\n0.02 \u2212\u22b2 0.03\n\n0.02 \u2212\u22b2 0.05\n\nQAM16\n\n0.04 \u2212\u22b2 0.06\n\n0.04 \u2212\u22b2 0.08\n\nQAM64\n\n0.05 \u2212\u22b2 0.08\n\n0.07 \u2212\u22b2 0.12\n\nQAM256\n\n0.07 \u2212\u22b2 0.10\n\n0.09 \u2212\u22b2 0.15\n\nTABLE I: Performance loss for different modulation schemes and code rates after 2 omitted demapping iterations.\nThe three demapping iterations represents the average number of demapping iterations needed to be sure that the two\nconstituent decoders agree with each other. Making more demapping iterations will provide more error correction.\nFurther simulations show performance loss of 0.02 dB to 0.1 dB and 0.02 dB to 0.15 dB for no erasure and erasure\nevents respectively when the proposed scheduling is applied. Table I summarizes the reduced performance loss for\ndifferent code rates and constellation orders after omitting two demapping iterations. These values were investigated\nfor the worst case corresponding to 3IDem 2EIDec in comparison to 5IDem. Note that for error floor region,\nsimulations show almost identical BER performance if applying more than 3 demapping iterations. Furthermore, it\nis worth noting that with a limited-diversity channel model, omitting 2 demapping iterations leads to slightly lower\nperformance loss than those of Table I for a fast-fading channel model. In fact, one demapping iteration with highdiversity channel model leads to more error correction compared to one iteration executed with limited-diversity one.\nConducted simulations with block-fading channel model have confirmed this result.\nUsing this technique, latency and complexity issues caused by the TBICM-ID-SSD are reduced. Two feedbacks to\nthe demapper with the associated delays, computations, and memory accesses are eliminated. It is worth noting that the\nproposed new scheduling does not have any impact on the receiver area (logic or memory). This scheduling is applied\non a TBICM-ID-SSD receiver and proposes complexity reduction in \"temporal dimension\" (which impacts power\nconsumption, throughput, and latency). Complexity reductions will be evaluated and discussed in the next section.\nV. C OMPLEXITY\n\nEVALUATION AND NORMALIZATION\n\nThe main motivation behind the conducted convergence speed analysis and the proposed technique for reducing\nthe number of iterations is to improve the receiver implementation quality. In order to appreciate the achieved\nimprovements, an accurate evaluation of the complexity in terms of number and type of operations and memory access\n\nNovember 8, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\nSISO\ndemapper\n\n8\n\nParameter\n\nNumber of bits\n\nReceived complex input (xIr,q , xQ\nr,q )\n\n(10,10)\n\n2\nCoeff. Fading & Variance (h\u20322\nq )/(\u03c3 )\n\n8\n\nArithmetic operations (n2 \u2265 n1 )\n\nNormalized arithmetic operations\n\nConstellation complex symbol (sIr,j , sQ\nr,j )\n\n(12,12)\n\n1 Add(n1 , n2 )\n\n0.5 \u00d7 (n1 + n2 \u2212 1)Add(1, 1)\n\nEuclidean distance Aq\n\n19\n\n1 Sub(n1 , n2 )\n\n0.5 \u00d7 (n1 + n2 )Add(1, 1)\n\n1 M ul(n1 , n2 )\n\n[(n1 \u2212 1)(n2 \u2212 1) + 1 \u2212 0.5 \u00d7 n1 ]Add(1, 1)\n\nReceived 4 LLRs\n\n4\u00d75\n\nSISO\n\nBranch metric \u03b3k\n\n10\n\ndecoder\n\nState metric \u03b1k , \u03b2k\n\n10\n\nTABLE III: Complexity normalization in terms of\n\nExtrinsic information z\n\n10\n\nAdd(1, 1).\n\nTABLE II: Typical quantization values.\n\nSISO rotated\ndemapper with\na priori input\n\nNumber and Type of operations per modulated symbol per turbo demapping iteration\n2M Add(18, 18) + 2M +1 Sub(8, 10) + 2M +1 M ul(8, 8) + 2M +1 M ul(8, 10) + 2load(10) + (1 + 2M )load(8)\n\na priori adder\n\nSISO double\nbinary turbo\ndecoder\n\nComputation units\nEuclidean distance\n\n(2M \u2212 2){E[ M2\u22121 ]Add(8, 8) + E[ M4\u22121 ]Add(9, 9) + E[ M8\u22121 ]Add(10, 10) + M Sub(8, 11) + M Sub(11, 19)} + M load(8) + 2M load(M )\nFor QPSK M \u2217 2M \u2212 2Sub(11, 19) + M load(8) + 2M load(M )\n\nMinimum finder\n\nM Sub(8, 8) + M.2M Sub(8, 19) + M store(8)\n\nComputation units\n\nNumber and Type of operations per coded symbol per turbo decoding iteration\n\nBranch metric\n\n4Add(5, 5) + 38Add(5, 10) + 4Sub(5, 5) + 8load(5) + 6load(10)\n\nState metric\n\n64Add(10, 10) + 48Sub(9, 9) + 8store(10)\n\nextrinsic information\n\n32Add(10, 10) + 32Sub(9, 9) + 9Sub(10, 10) + 3M ul(4, 10) + 8load(10) + 5store(10)\n\nTABLE IV: Complexity computation summary.\nis required. Such complexity evaluation is fair and generalized as it is independent from the architecture mode (serial\nor parallel) and remains valid for both of them. In fact, all architecture alternatives should execute the same number\nof operations (serially or concurrently) to process a received frame. In this section, we consider the two main blocks\nof the TBICM-ID-SSD system configuration which are the SISO demapper and the SISO decoder. The proposed\nevaluation considers the low complexity algorithms presented in section II. A typical fixed-point representation of\nchannel inputs and various metrics is considered. Table II summarizes the total number of required quantization bits\nfor each parameter.\nA. Complexity evaluation of SISO demapper\nThe complexity of SISO demapping depends on the modulation order (in the context of the above fixed parameters). We will now consider the equations of subsection II-B to compute: (1) the required number and type\nof arithmetic computations and (2) the required number of read memory access (load) and write memory access\n(store). The result of this evaluation is summarized in Table IV and explained below. We use the following notation operation(NbOfBitsOfOperand1,NbOfBitsOfOperand2) for arithmetic operations, and load(NbOfBits)/store(NbOfBits) for\nread/write memory operations. Thus, add(8, 10) indicates an addition operation of two operands; one quantized on 8\nbits and the second on 10 bits. Similarly, load(8) indicates a read access memory of 8-bit word length.\n1) Euclidean distance computation\nFor each modulated symbol (input of the demapper):\n\u2022\n\nOne load(8) to access the fading channel coefficient normalized by the channel variance\n\n\u2022\n\nTwo load(10) to access the channel symbols xIr,q and xQ\nr,q .\n\n\u2022\n\nFor each one of the 2M symbols of the constellation (sIr,j , sQ\nr,j ):\n\nh\u20322\nq\n\u03c32\n\n\u2013 Two load(8) to access the constellation symbols sIr,j and sQ\nr,j\nQ\n\u2013 Two Sub(8, 10) to compute (xIr,q \u2212 sIr,j ) and (xQ\nr,q \u2212 sr,j )\n\n\u2013 Two M ul(8, 10) to multiply with the channel coefficients\n\nh\u2032q\n\u03c3\n\nand\n\nh\u2032q\u22121\n\u03c3\n\n\u2013 Two M ul(10, 10) to compute the square of the results above\n\nNovember 8, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\n9\n\n\u2013 One Add(18, 18) to realize the sum of the two Euclidean distance terms\n2) A priori adder\nFor each modulated symbol (input of the demapper):\n\u2022\n\nM load(8) to access the a priori informations Lapr,Dem (cp,q )\n\n\u2022\n\nFor each one of the 2M symbols of the constellation (sIr,j , sQ\nr,j ), except two symbols corresponding to all\nzeros and all ones:\n\u2013 One load(M ) to access constellation symbol bits cp,q . k = 0, 1, . . . , M \u2212 1\n\u2013 E[ M\u22121\n2 ] Add(8, 8) to realize the sum of two Lapr,Dem (cp,q )\n\u2013 E[ M\u22121\n4 ] Add(9, 9) to realize the sum of four Lapr,Dem (cp,q )\n\u2013 E[ M\u22121\n8 ] Add(10, 10) to realize the sum of eight Lapr,Dem (cp,q )\n\u2013 M Sub(8, 11) to subtract the LLR of the specific pth bit and thus obtain Bp,q\n\u2013 M Sub(11, 19) to realize Aq \u2212 Bp,q\nE[x] represents here the ordinary rounding of the positive number x to the nearest integer.\n\nHowever, for the simple QPSK modulation the above operations can be simplified as only 2 LLRs exist for one\nmodulated symbol. In fact, in equation (6) there is no need to execute an addition followed by a subtraction of\nthe same LLR. Thus, the total number of required arithmetic operations in this case is 4Sub(11, 19).\n3) Minimum finder\nFor each one of the M bits per modulated symbol:\n\u2022\n\n2M Sub(19, 19) to realize the two min operations of equation (4)\n\n\u2022\n\nOne Sub(8, 8) to subtract the above found 2 minimum values resulting in the demapper extrinsic information\n\n\u2022\n\nOne store(8) to store the extrinsic information value\n\nB. Complexity evaluation of SISO decoder\nThe SISO decoder complexity is composed of 3 principal units: branch metric, state metric, and extrinsic information\nfunctions. As for the SISO demapper, the result of the complexity evaluation is summarized in Table IV and explained\nbelow. As stated before, the considered turbo code is an 8-state double binary one. At the turbo decoder side, each\ndouble binary symbol should be decoded to take a decision over the 4 possible values (00, 01, 10, 11).\n1) Branch metrics (\u03b3)\nFor each coded symbol (input of the decoder):\n\u2022\n\n4 load(5) to access systematic and parity LLRs\n\n\u2022\n\n3 load(10) to access demapper normalized extrinsic informations\n\n\u2022\n\nSys\nSys\nP arity\n2 Add(5, 5) and 2 Sub(5, 5) to compute systematic and parity branch metrics \u03b311\n, \u03b310\n, \u03b311\nand\nP arity\n\u03b310\n\n\u2022\n\n19 Add(5, 10) to compute branch metrics \u03b3k and \u03b3kSys + \u03b3kP arity\n\nOperations above should be multiplied by 2 to generate forward and backward branch metrics.\n2) State metrics (\u03b1,\u03b2)\nFor each coded symbol (input of the decoder):\n\u2032\n\n\u2032\n\n\u2022\n\n32 Add(10, 10) to compute \u03b1k\u22121 (s ) + \u03b3k (s , s) for the 32 trellis transitions (8-state double binary trellis)\n\n\u2022\n\n24 Sub(9, 9) to realize the 8 max (4-input) operations of equation (7). In fact, 1 max (N-input) can be\nimplemented as N-1 max (2-input) operations. 1 max (2-input) corresponds to 1 Sub\n\nNovember 8, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\n\u2022\n\n10\n\n8 store(10) to store computed state metrics only for left butterfly algorithm\n\nOperations above should be multiplied by 2 to generate forward \u03b1 and backward \u03b2 state metrics.\n3) Extrinsic information (z)\nFor each coded symbol (input of the decoder):\n\u2022\n\n8 load(10) to access state metric values\n\n\u2022\n\n32 Add(10, 10) to compute the second required addition operation in equation (10) for the 32 trellis\ntransitions\n\n\u2022\n\n28 Sub(9, 9) to realize the 4 max (8-input) operations of equation (10)\n\n\u2022\n\n4 Sub(10, 10) to subtract symbol-level intrinsic information from the computed soft value (generating\nsymbol-level extrinsic information)\n\n\u2022\n\n8 Sub(9, 9) and 4 Sub(10, 10) to realize the 8 max (2-input) operations and compute 4 bit-level (systematic and parity) extrinsic information as demapper a priori information (equations (12) and (13)). This\ncomputation is done only for one of the two SISO decoders\n\n\u2022\n\n4 store(10) to store the computed bit-level (systematic and parity) extrinsic information\n\n\u2022\n\n3 Sub(10, 10) to normalize symbol-level extrinsic information by subtracting the one related to decision 00\n\n\u2022\n\n3 M ul(4, 10) to multiply the symbol-level extrinsic information by a scaling factor SF\n\n\u2022\n\n3 store(10) to store the computed DEC1 symbol-level extrinsic information as DEC2 a priori information\n\nC. Complexity normalization\nThe above conducted complexity analysis exhibits different arithmetic and memory operation types and operand\nsizes. In order to provide a fair evaluation of the improvement in complexity and memory access with the technique\nproposed in section IV, complexity normalization is necessary.\nFor arithmetic operations, normalization can be done in terms of 2-input one bit full adders (Add(1, 1)). Each one\nof the adders, subtractors, and multipliers can be converted into an equivalent number of Add(1, 1). For adders and\nsubtractors, bit-to-bit half and full adders are used and generalized for operand sizes n1 and n2 . Obtained formulas\nare summarized in Table III with simple, yet accurate, analysis of all corner cases. Similarly, multiplication operations\nare normalized using successive addition operations. Memory access operation of m word of size n are normalized\nto one memory access operation of m \u00d7 n bits.\nApplying the proposed complexity normalization approach to Table IV leads to the results summarized in Table V.\nVI. D ISCUSSIONS\n\nAND ACHIEVED GAINS\n\nThis section evaluates and discusses the achieved complexity reductions using the proposed original iteration\nscheduling of TBICM-ID-SSD at different modulation orders and code rates. As concluded in section IV, two\ndemapping iterations can be eliminated while keeping the number of turbo decoding iterations unaltered. Overall,\nthis will lead to a reduction corresponding to two times the execution of the SISO demapping function. Besides the\nfact that the obtained results will depend on the modulation order and code rate, a third parameter should be considered\nregarding the iterative demapping implementation choice. In this regard, two configurations should be analyzed. In the\nfirst configuration, denoted CASE 1, the Euclidean distances are re-calculated at each demapping iteration. While in\nthe second configuration, denoted CASE 2, the computation of the Euclidean distances are done only once, at the first\niteration, then stored and reused in later demapping iterations. Thus, CASE 1 implies higher arithmetic computations,\nhowever less memory access, than CASE 2.\nNovember 8, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\nSISO rotated\ndemapper with\n\nComputation units\n\n123.75.2M +1 Add(1, 1) + load(28 + 2M +3 )\n(2M\n\na priori adder\n\n\u2212\n\n2){7.5E[ M2\u22121 ]+\n\n8.5E[ M4\u22121 ] + 9.5E[ M8\u22121 ] + 24.5.M }Add(1, 1) + load(8M ) + load(M 2M )\n\nFor QPSK 15.M (2M \u2212 2)Add(1, 1) + load(8.M + M.2M )\n\nMinimum finder\n\n(8 + 13.5.2M )M Add(1, 1) + store(8.M )\n\nComputation units\n\nNumber and Type of operations per coded symbol per turbo decoding iteration\n\nBranch metric\n\n304Add(1, 1) + load(100)\n\nState metric\n\n1040Add(1, 1) + store(80)\n\nextrinsic information\n\n760Add(1, 1) + load(80) + store(50)\n\nbinary turbo\ndecoder\n\nNumber and Type of operations per modulated symbol per turbo demapping iteration\n\nEuclidean distance\n\na priori input\n\nSISO double\n\n11\n\nTABLE V: Complexity computation summary after normalization.\nModulation scheme\n\nCASE1 (With recomputed Euclidean distances)\n\nCASE2 (With stored Euclidean distances)\n\nRc = 1/2\n\nRc = 6/7\n\nRc = 1/2\n\nRc = 6/7\n\nComplexity Reduction\n\nComplexity Reduction\n\nComplexity Reduction\n\nComplexity Reduction\n\narith\n\nload\n\nstore\n\narith\n\nload\n\nstore\n\narith\n\nload\n\nstore\n\narith\n\nload\n\nstore\n\nQPSK\n\n11.9%\n\n10.6%\n\n3.7%\n\n8.2%\n\n7.1%\n\n2.2%\n\n2.5%\n\n12%\n\n3.4%\n\n1.6%\n\n8.2%\n\n2.1%\n\nQAM16\n\n20.3%\n\n13.7%\n\n3.7%\n\n15.9%\n\n9.7%\n\n2.2%\n\n11.6%\n\n18.1%\n\n3.1%\n\n8.3%\n\n13.4%\n\n2%\n\nQAM64\n\n27.9%\n\n21.4%\n\n3.7%\n\n25%\n\n17.1%\n\n2.2%\n\n21.8%\n\n26.5%\n\n2.5%\n\n18.5%\n\n22.3%\n\n1.7%\n\nQAM256\n\n31.6%\n\n28.4%\n\n3.7%\n\n30.5%\n\n25.7%\n\n2.2%\n\n27.6%\n\n32.2%\n\n1.5%\n\n26.2%\n\n30%\n\n1.2%\n\nTABLE VI: Reduction in number of operations, read/write access memory comparing \"4IDem 2EIDec\" to \"6IDem\"\nfor different modulation schemes and code rates.\nUsing the normalized complexity evaluation of Table V, achieved gains comparing 4IDem 2EIDec to 6IDem for\nall configurations are summarized in Table VI. In the following we will explain first how these values are computed\nand then discuss the obtained results.\nIn fact, considering the code rate Rc and the number of bits per symbol M , the relation between the number of\ndouble binary coded symbols (NCodedSymb ) and the corresponding number of modulated symbols (NModSymb ) can\nbe written as follows.\nNM odSymb =\n\n2.NCodedSymb\nM.Rc\n\n(15)\n\nThe complexity reduction (G) corresponds to the ratio between the complexity of two SISO demapping executions\nand the complexity of the original TBICM-ID-SSD configuration. If the original TBICM-ID-SSD configuration requires\nNit iterations to process a frame composed of NModSymb modulated symbols (equivalent to NCodedSymb coded\nsymbols), the complexity reduction can be approximated by the following expression.\nG=\n\n2.FDem (M ).NM odSymb\nNit .FDem (M ).NM odSymb + Nit .FDec .NCodedSymb\n\n(16)\n\nwhere FDem designates the complexity of SISO demapper which depends on the constellation size and FDec designates\nthe complexity of SISO decoder. When converting in this equation the number of modulated symbols into equivalent\ncoded symbols using equation (15), we obtain the following equation.\nG=\n\n2.FDem (M )\nc\nNit .FDem (M ) + Nit .FDec . M.R\n2\n\n(17)\n\nThis last equation has been used to obtain individually the complexity reductions in terms of arithmetic, read\nmemory access, and write memory access operations of Table VI, for Nit = 6. For CASE 1, results show increased\nbenefits in terms of number of arithmetic operations (up to 31.6%) and read memory accesses (up to 28.6%) with\nhigher modulation orders. This can be easily predicted from equation (17) as the value of FDem increases with the\nconstellation size. The equation shows also that the higher the code rate is, lower the benefits are.\nNovember 8, 2018\n\nDRAFT\n\n\fIEEE TRANSACTIONS ON SIGNAL PROCESSING\n\n12\n\nOn the other hand, the improvement in write memory access (3.7% for Rc = 1/2 and 2.2% for Rc = 6/7) is\nlow and constant for all modulation orders. In fact, in Table VI the single memory store term which depends on the\nmodulation order is store(8.M ) for the minimum finder computation. This term is required per modulated symbol\nand when converted to the equivalent number per coded symbol (equation (15)) for a fixed code rate a constant value,\nindependent from M , is obtained.\nSimilar behavior is shown for CASE 2, except for two points. The first one concerns the improvements in arithmetic\noperations and read memory accesses. In fact, compared to CASE 1, this configuration implies less arithmetic and\nmore memory access operations which lead to less benefits for the former and more benefits for the latter (equation\n(17)). The second point concerns the improvement in write memory access. In fact, besides the term M \u00d7 8bits, a\nvalue of 19 \u00d7 2M is required only for the first iteration to store the 2M Euclidean distances quantized on 19 bits\neach. This added value is much higher in comparison to the reduced M \u00d7 8bits write memory access. Therefore the\nimprovement in write access memory operations will be less for higher constellation sizes (down to 1.2%).\nIt is worth noting that applying the proposed scheduling combined with an early stopping criteria might diminish\nthe benefit from the scheduling, but at the cost of an additional complexity.\nVII. C ONCLUSION\nConvergence speed analysis is crucial in TBICM-ID-SSD systems in order to tune the number of iterations to be\noptimal when considering the practical implementation perspectives. Conducted analysis has demonstrated that omitting\ntwo turbo demodulation iterations without decreasing the total number of turbo decoding iterations leads to promising\ncomplexity reductions while keeping error rate performance almost unaltered. A maximum loss of 0.15 dB is shown\nfor all modulation schemes and code rates in a fast-fading channel with and without erasure. The number of normalized\narithmetic operations is reduced from 8.2% for QPSK configuration to\n\n2\nNit %\n\nfor QAM256 (e.g. for Nit = 6 this gives\n\na reduction of 33.3%). Similarly, the number of read access memory is reduced in a range between 8.2% to\n\n2\nNit %.\n\nThis complexity reduction improves significantly latency and power consumption, and thus paves the way towards the\nadoption of TBICM-ID-SSD hardware implementations in future wireless receivers. Future work targets the extension\nof this analysis to other baseband iterative applications and its integration into available hardware prototypes.\nR EFERENCES\n[1] G. Caire, G. Taricco, and E. Biglieri, \"Bit-interleaved coded modulation,\" in IEEE International Symposium on Information Theory, 1997.\n[2] X. Li and J. Ritcey, \"Bit-interleaved coded modulation with iterative decoding,\" IEEE Communications Letters, vol. 1, no. 6, pp. 169\u2013171,\n1997.\n[3] A. Chindapol and J. Ritcey, \"Design, analysis, and performance evaluation for BICM-ID with square QAM constellations in rayleigh fading\nchannels,\" IEEE Journal on Selected Areas in Communications, vol. 19, no. 5, pp. 944\u2013957, 2001.\n[4] I. Abramovici and S. Shamai, \"On turbo encoded BICM,\" in Annales des telecommunications, vol. 54, 1999, pp. 225\u2013234.\n[5] C. Abdel Nour and C. Douillard, \"On lowering the error floor of high order turbo BICM schemes over fading channels,\" in IEEE Global\nTelecommunications Conference, GLOBECOM'06, 2006, pp. 1 \u20135.\n[6] N. Kiyani and J. Weber, \"Iterative demodulation and decoding for rotated MPSK constellations with convolutional coding and signal space\ndiversity,\" in IEEE Vehicular Technology Conference, VTC'07-Fall, 2007, pp. 1712\u20131716.\n[7] J. Boutros and E. Viterbo, \"Signal space diversity: a power- and bandwidth-efficient diversity technique for the rayleigh fading channel,\" IEEE\nTransactions on Information Theory, vol. 44, no. 4, pp. 1453\u20131467, 1998.\n[8] C. Abdel Nour and C. Douillard, \"Improving BICM performance of QAM constellations for broadcasting applications,\" in International\nSymposium on Turbo Codes and Related Topics, 2008, pp. 55\u201360.\n[9] O. Muller, A. Baghdadi, and M. Jezequel, \"Exploring Parallel Processing Levels for Convolutional Turbo Decoding,\" in International\nConference on Information and Communication Technologies, ICTTA'06, vol. 2, 2006, pp. 2353\u20132358.\n[10] S. ten Brink, \"Convergence of iterative decoding,\" Electronics Letters, vol. 35, no. 13, pp. 1117\u20131119, 1999.\n\nNovember 8, 2018\n\nDRAFT\n\n\f"}