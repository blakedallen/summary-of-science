{"id": "http://arxiv.org/abs/1110.3597v1", "guidislink": true, "updated": "2011-10-17T08:24:02Z", "updated_parsed": [2011, 10, 17, 8, 24, 2, 0, 290, 0], "published": "2011-10-17T08:24:02Z", "published_parsed": [2011, 10, 17, 8, 24, 2, 0, 290, 0], "title": "Performance Measurement of the Heterogeneous Network", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1110.6839%2C1110.2758%2C1110.5583%2C1110.1782%2C1110.4214%2C1110.2286%2C1110.0683%2C1110.5994%2C1110.5975%2C1110.4070%2C1110.5246%2C1110.3388%2C1110.0884%2C1110.3794%2C1110.5926%2C1110.3597%2C1110.4547%2C1110.2534%2C1110.5339%2C1110.3384%2C1110.5059%2C1110.2093%2C1110.4287%2C1110.5292%2C1110.2060%2C1110.6368%2C1110.0176%2C1110.5540%2C1110.0753%2C1110.4510%2C1110.6426%2C1110.1017%2C1110.2277%2C1110.1558%2C1110.5514%2C1110.4833%2C1110.5260%2C1110.1519%2C1110.1198%2C1110.4771%2C1110.3857%2C1110.5261%2C1110.6874%2C1110.5598%2C1110.6567%2C1110.3153%2C1110.4470%2C1110.5288%2C1110.6751%2C1110.2766%2C1110.2762%2C1110.0232%2C1110.5037%2C1110.2052%2C1110.3903%2C1110.2064%2C1110.3036%2C1110.2026%2C1110.1261%2C1110.1416%2C1110.3444%2C1110.5769%2C1110.3617%2C1110.5248%2C1110.4227%2C1110.2323%2C1110.4856%2C1110.2081%2C1110.1653%2C1110.2282%2C1110.1419%2C1110.4864%2C1110.1413%2C1110.1585%2C1110.2968%2C1110.4971%2C1110.3944%2C1110.6859%2C1110.5372%2C1110.0357%2C1110.0568%2C1110.4253%2C1110.0017%2C1110.2013%2C1110.0354%2C1110.1616%2C1110.3185%2C1110.0473%2C1110.4276%2C1110.1597%2C1110.6144%2C1110.4782%2C1110.2706%2C1110.6595%2C1110.1001%2C1110.5373%2C1110.5343%2C1110.0977%2C1110.3546%2C1110.2783%2C1110.3813&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Performance Measurement of the Heterogeneous Network"}, "summary": "Till today we dreamt of imperceptible delay in a network. The computer\nscience research grows today faster than ever offering more and more services\n(computational representational, graphical, intelligent implication etc) to its\nuser. But the problem lies in \"greater the volume of services greater the\nproblem of delay\". So tracing delay, or performance analysis focusing on time\nrequired for computation, in a existing or newly configured network is\nnecessary to conclude the improvement. In this paper, we have done the job of\ndelay analysis in a multi-server system,. For this proposed work we have used\ncontinuous -parameter Markov chains (Non -Birth -Death Process),for developing\nthe required models, and for developing the simulator we have used queuing\nnetworking, different scheduling algorithms at the servers queue and process\nscheduling . The work can be further extended to test the performance of\nwireless domain.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=1110.6839%2C1110.2758%2C1110.5583%2C1110.1782%2C1110.4214%2C1110.2286%2C1110.0683%2C1110.5994%2C1110.5975%2C1110.4070%2C1110.5246%2C1110.3388%2C1110.0884%2C1110.3794%2C1110.5926%2C1110.3597%2C1110.4547%2C1110.2534%2C1110.5339%2C1110.3384%2C1110.5059%2C1110.2093%2C1110.4287%2C1110.5292%2C1110.2060%2C1110.6368%2C1110.0176%2C1110.5540%2C1110.0753%2C1110.4510%2C1110.6426%2C1110.1017%2C1110.2277%2C1110.1558%2C1110.5514%2C1110.4833%2C1110.5260%2C1110.1519%2C1110.1198%2C1110.4771%2C1110.3857%2C1110.5261%2C1110.6874%2C1110.5598%2C1110.6567%2C1110.3153%2C1110.4470%2C1110.5288%2C1110.6751%2C1110.2766%2C1110.2762%2C1110.0232%2C1110.5037%2C1110.2052%2C1110.3903%2C1110.2064%2C1110.3036%2C1110.2026%2C1110.1261%2C1110.1416%2C1110.3444%2C1110.5769%2C1110.3617%2C1110.5248%2C1110.4227%2C1110.2323%2C1110.4856%2C1110.2081%2C1110.1653%2C1110.2282%2C1110.1419%2C1110.4864%2C1110.1413%2C1110.1585%2C1110.2968%2C1110.4971%2C1110.3944%2C1110.6859%2C1110.5372%2C1110.0357%2C1110.0568%2C1110.4253%2C1110.0017%2C1110.2013%2C1110.0354%2C1110.1616%2C1110.3185%2C1110.0473%2C1110.4276%2C1110.1597%2C1110.6144%2C1110.4782%2C1110.2706%2C1110.6595%2C1110.1001%2C1110.5373%2C1110.5343%2C1110.0977%2C1110.3546%2C1110.2783%2C1110.3813&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Till today we dreamt of imperceptible delay in a network. The computer\nscience research grows today faster than ever offering more and more services\n(computational representational, graphical, intelligent implication etc) to its\nuser. But the problem lies in \"greater the volume of services greater the\nproblem of delay\". So tracing delay, or performance analysis focusing on time\nrequired for computation, in a existing or newly configured network is\nnecessary to conclude the improvement. In this paper, we have done the job of\ndelay analysis in a multi-server system,. For this proposed work we have used\ncontinuous -parameter Markov chains (Non -Birth -Death Process),for developing\nthe required models, and for developing the simulator we have used queuing\nnetworking, different scheduling algorithms at the servers queue and process\nscheduling . The work can be further extended to test the performance of\nwireless domain."}, "authors": ["Soumen Kanrar", "M Siraj"], "author_detail": {"name": "M Siraj"}, "author": "M Siraj", "arxiv_comment": "7 pages; ISSN : 1738-7906", "links": [{"href": "http://arxiv.org/abs/1110.3597v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/1110.3597v1", "rel": "related", "type": "application/pdf"}], "arxiv_primary_category": {"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/1110.3597v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/1110.3597v1", "journal_reference": "IJCSNS 9(8) (2009) 255-261", "doi": null, "fulltext": "IJCSNS International Journal of Computer Science and Network Security, VOL.9 No.8, August 2009\n\n255\n\nPerformance Measurement of the Heterogeneous Network\nSoumen kanrar and Mohammad Siraj\nDepartment of Computer Engineering,\nCollege of Computer and Information Sciences\nKing Saud University - Riyadh\n\nAbstract\n\nThe actual problem\n\nTill today we dreamt of imperceptible delay in a network. The\ncomputer science research grows today faster than ever offering\nmore and more services (computational representational,\ngraphical, intelligent implication etc) to its user. But the problem\nlies in \"greater the volume of services greater the problem of\ndelay\". So tracing delay, or performance analysis focusing on\ntime required for computation, in a existing or newly configured\nnetwork is necessary to conclude the improvement. In this paper,\nwe have done the job of delay analysis in a multi-server system,.\nFor this proposed work we have used continuous \u2013parameter\nMarkov chains (Non \u2013Birth \u2013Death Process),for developing the\nrequired models, and for developing the simulator we have used\nqueuing networking, different scheduling algorithms at the\nservers queue and process scheduling .\nThe work can be further extended to test the performance of\nwireless domain.\n\nKeywords:\nDelay, LAN, Process scheduling, Queuing network\n\nwe can view the problem of delay analysis in a Network\nas the problem stated above. We can imagine that\nv1 , v2 ,...., vn \u22123 are the clients those are sending jobs at\nunpredictable interval of unpredictable volume. The jobs\nform a queue for waiting at the node vn \u2212 2 ( an\nintermediate machine) and then are sent to the server vn \u22121\nand vn for service. We offer the responsibility of\nmaintaining the queue and dispatching them to the server\ndepending on their capability. Now we are required to\nfind the queuing delay at the queue, transmission delay,\nprocessing delay etc. at the intermediate machine\n(node vn \u2212 2 ) the problem becomes more realistic and\nlogical.\n\nProblem definition\nDefine the problem in the following ways.\nlet G be a closed and connected graph such that\nG=(V,E) where V is the set of vertices or nodes,\nV={ vk | k=1,2...,n}\nand E is the set of edges, E={ ( vk ,\n\nvj ) | k \u2260 j\n\nand k =1,2,..,n\nand j=1,2....,n}\nand n is the number of nodes in the graph.\nNow we are considering a closed , directed and connected\ngraph G such that \u2013\n( vk , v j ) \u2209 E \u2200 k= 1,2,..,(n-3) \u2227 j =1,2,...,(n-3)\n( vk ,\n\nv j ) \u2209 E \u2200 k= 1,2,..,(n-3) \u2227 j =(n-1),n\n\n( vk ,\n\nv j ) \u2209 E for k= (n-1) \u2227 j =n\n\nv1\nv2\n...\n\nvn \u2212 2\n\nvn \u22121\n\nvn\n\nvn \u22123\nGraphical Representation of the Problem\n\nSo we can state the problem as\nThe clients C1, C2, ....,Cn are sending their jobs with\ndifferent probabilities \u03bb1 , \u03bb2 ,..., \u03bbn \u22121 and they forming a\n\n( vk , vn \u2212 2 )\n\n\u2208 E \u2200 k= 1,2,..,(n-3)\n( vn \u2212 2 , v j ) \u2208 E \u2200 j= (n-1),n\n\nqueue under the supervision of intermediate\nnode ( I ) and then dispatched to the servers S1 and S2\nwith probability \u03bc1 and\n\nTo measure the delay at the node vn \u2212 2 when nodes vk ,\n\n\u03bc2 depending on the capability of the servers to service.\n\nk=1,2,..(n-3) send the jobs and the jobs are executed at the\nnodes vn \u22121 and vn .\n\nIn the intermediate machine (I)\nwe did our calculations for performance measurement .\n\nManuscript received August 5, 2009\nManuscript revised August 20, 2009\n\n\fIJCSNS International Journal of Computer Science and Network Security, VOL.9 No.8, August 2009\n\n256\n\nC1\n\nC2\n\n\u03bb1\n\n\u03bc1\n\nS1\n\n\u03bb2\n\n:\n:\n:\nCn-1\n\nI\n\nJobs in the Queue\n\n\u03bc2\n\nS2\n\n\u03bbn \u22121\n\nQueue with heterogeneous servers\nIn an M/M/2 queuing system with heterogeneous servers\nthere are two server , which are of different processing\n\ncapability i.e service rates of the two servers are not\nidentical . The discipline used to schedule the jobs is\nFCFS. This is equivalent to saying that jobs are served in\nthe order of their arrival.\n\nn1\n\n\u03bc1 > \u03bc2\n\u03bc1\n\n\u03bc2\n\nIncoming rate \u03bb (average)\n\nn2\nClient side\nServer side\nHeterogeneous System\nThe state of the system is defined to be the tuple (n1,n2)\nwhere n1 denotes the number of Jobs in the queue\nincluding any at the faster server ,and n2 denotes the\nnumber of jobs at the slower server .Jobs wait in the order\n\nof their arrival .When both servers are idle, the faster\nserver is schedule for service before the slower one.\n\n\fIJCSNS International Journal of Computer Science and Network Security, VOL.9 No.8, August 2009\n\n257\n\n\u03bb\n0,\n0\n\n1,\n0\n\n\u03bc1\n\n\u03bb\n\n\u03bc2\n\n\u03bc2\n\u03bb\n0,\n1\n\n\u03bb\n\n\u03bb\n\u03bb\n\n1,\n1\n\n\u03bc1\n\n2,\n1\n\n\u03bc1 + \u03bc2\n\n\u03bb\nn,\n1\n\n\u03bc2 + \u03bc1\n\n\u03bc2 + \u03bc1\n\n\u03bc1 + \u03bc2\n\nState Transition Diagram of Heterogeneous system\n\nfrom equation (1) and (3) we can obtain by elimination :-\n\nIn the steady state we have\n\u03bb p(0,0) = \u03bc1 p(1,0) + \u03bc2 p(0,1) -----------(1)\n\n\u03c1\n\n( \u03bb + \u03bc1 )p(1,0) =\n\n\u03bc2 p(1,1) + \u03bb p(0,0) ------(2)\n( \u03bb + \u03bc 2 )p(0,1) = \u03bc1 p(1,1) -------------------(3)\n( \u03bb + \u03bc1 + \u03bc 2 )p(1,1) = \u03bc 2 p(0,1) + \u03bb p(1,0)\n+ \u03bc 2 )p(2,1) ------(4)\n( \u03bb + \u03bc1 + \u03bc 2 ) p(n,1) = \u03bb p(n-1,1) +( \u03bc1\n\np(0,1) = ---------- . ---------- p(0,0)\n1+2 \u03c1\n+ (\n\n+\n\n\u03bc1\n\n\u03bc2\n\n)\n\np( n+1,1) , n>1 -----(5)\n\n\u03bb\n\n+\n\n\u03bck ) pk\n\n+\n\n\u03bb pk \u22121\n\n+ pk +1\n\n\u03bck +1\n\n, k\u22651\n\nEquation (5) is similar to the balanced equation of a birth\n\u2013death process\nTherefore,\np(n,1) = { \u03bb / (\n\n\u03bc1 + \u03bc2 ) } p(n-1,1),\n\nn>1 ------(6)\n\nBy repeated use of equation (6) we get :p(n,1) = \u03c1 .p(n-1,1)\n= \u03c1 . \u03c1 .p(n-2,1)\n::::::::::::::::::::::\n::::::::::::::::::::::\n=\u03c1\n\nn \u22121\n\n.p(1,1)\n\n\u03bc2\n\n1+ \u03c1\n\n, n>1 -------------(7)\n\n\u03bb\n\np(1,0) = ---------- . ------ p(0,0)\n1+2 \u03c1\n\u03bc1\n\n\u03c1\n\nThe traffic intensity of the system is :\u03c1 = \u03bb / ( \u03bc1 + \u03bc2 )\n0 = -(\n\n\u03bb\n\n\u03bb (\u03bb\n\n+ \u03bc2 )\n\np(1,1) = --------- . ---------------- p(0,0)\n1+2 \u03c1\n\u03bc1 \u03bc2\nSome Simulated result and discussion\nThe figure -1 shows\nthe propagation delay per\njobs .propagation time is the time taken by the data to be\ntransmitted\nfrom source to destination .It is actually the delay taking\nplace due to the physical medium .The graph does not\nshow propagation time directly but measure the round trip\ntime (RTT) as an estimate.\nThe nature of the graph as seen from the figure is\nsomewhat spiky .We can see that the RTT is almost same\nfor different jobs (by using the job of same size).However,\nit is not fixed and it can be seen from the figure that it can\nvary depending upon certain conditions. In the graph the\naverage RTT is around one second .The best case is a\n\n\f258\n\nIJCSNS International Journal of Computer Science and Network Security, VOL.9 No.8, August 2009\n\nnear \u2013zero RTT and the worst case is slightly greater than\n\ntwo seconds.\n\nFigure -1\nThe figure -2 shows the amount of queuing delay for each\nindividual job.\nInitially the queue is empty and hence the incoming jobs\ndo not have to wait much in the queue .But as time\nincreases, more jobs come into the intermediate machine.\nThe job arrival rate is much more than the rate at which\nthe server the servers can process them. Hence the\npopulation in the queue increases. Since the jobs are sent\nto the servers following FCFS scheme, more number of\njobs in the queue implies higher queuing delay for the\n\njobs coming next. So if the clients throw jobs\ncontinuously (i.e in a particular session) the queuing delay\nis higher for the jobs that come later. When more than one\njob sending sessions are used, at the end of one session\nno new jobs arrives in the system for some time but the\nservers continue to pull jobs from the queue. Hence the\nnumber of jobs waiting in the queue decreases. Now at the\nbeginning of the next session new jobs find lesser number\nof jobs waiting in the queue and they have to wait for\nlesser amount of time in the queue.\n\nFigure -2\n\n\fIJCSNS International Journal of Computer Science and Network Security, VOL.9 No.8, August 2009\n\nThe figure-3 shows how much load or unprocessed jobs\nare waiting in the job queue at the intermediate machine\nin certain\nInstance of time. The time axis here is started whenever\nthe execution of dispatcher program begins.\nThe above graph shows the relationship between load vs\ntime i.e the number of jobs waiting in queue at any\ninstance. The rate of arrival of jobs from the clients is\nmuch more than the rate at which they can be dispatched\nto the two servers, hence as time increased load i.e the\nnumber of jobs queued up also increases. For example if\n\n259\n\n20 jobs are present at t1 instant and 10 jobs arrive within\n\n(t + 1 )\n1\n\nth\n\ninstant then it may happen that only 5 jobs\n\nare dispatched in this interval i.e the load at t1 was 20 and\nthat at t1 +1 was 20+10-5=25. In the case when no jobs\narrive, the load gradually decrease because the jobs are\ndispatched one by one without increasing the number of\njobs in the queue. This explains the falling edge of the\ncurve.\n\nFigure -3\nThe figure -4 shows the queuing delay, it is time for the\nwhich a jobs waits in the queue before being served by the\nserver and and by load it means the total number of jobs\nwaiting in the queue at a particular instance.\n\nThe figure -4 shows, initially when the load was low the\nqueuing delay was also minimum. Then as the load\nincrease the queuing delay also increased. This is because\ninitially the jobs didn't have to wait in the queue; they get\nserviced as they arrive in the queue.\n\nFigure -4\n\n\fIJCSNS International Journal of Computer Science and Network Security, VOL.9 No.8, August 2009\n\n260\n\nThe figure -5 shows the traffic intensity \u03c1 = ( \u03bb / \u03bc )\nalong Y \u2013axis. It is defined as the ratio of job arrival rate\n( \u03bb ) and Job service rate ( \u03bc ). The X- axis the time\nelapsed since beginning of the execution of the program at\nthe intermediate machine. The very beginning the servers\nare sitting idle, as there are no job assigned to service.\nHence the service rate \u03bc is zero thus making \u03c1 \u2212 > \u221e .\nfor the simulation considering this value to high enough\nfor this case so the curve at the beginning laying at very\nhigh value when jobs arrive at the intermediate machine\nthey forwarded to the servers to get processed .so \u03bc gets\n\nsome value as well as \u03bb thus curve down to certain value\ndepending on the intensity.\nWhenever servers sitting idle, the traffic intensity \u03c1 has\nvery high value to give a curve at the high end (as\ndenominator \u03bc becomes zero as explained earlier ) .And\nwhen servers are servicing previous jobs but queue has no\njobs waiting (making \u03bb ->0) The curve lies at the X-axis\n( i.e \u03c1 \u2212 > 0 )\n\nFigure -5\nFor the future, we want to integrate QoS and load\nbalancing considerations in this problem to provide a\ncomprehensive tree management architecture. I believe\nthat such an architecture will be necessary to meet the\nrequirements of future networks for high performance and\nreliability.\n\n[4]\n\nReferences\n\n[6]\n\n[1]\n\n[2]\n\n[3]\n\nPadhye, V. Firoiu,D. Towsley, J.Kurose, \"Modeling TCP\nReno Performance : A simple Model and its Empirical\nvalidation\" IEEE/ACM Transactions on Networking Vol\n8 No 2 (April -2000)\nT.V Lakshman U.Madho \" The performance of TCP/IP for\nNetworks with high bandwidth \u2013Delay products and\nrandom Loss\" IEEE/ACM Transaction on Networking vol5 No 3 (97)\nS.Floyd , V.Jacobson \" Random Early Detection Gateway\nfor Congestion Avoidance \" IEEE/ACM Transaction on\nNetworking Vol 1 No -4 (93)\n\n[5]\n\n[7]\n\n[8]\n\nS.Floyd and K Fall \" Promoting the use of End to End\nCongestion\ncontrol in the internet \" IEEE/ACM\nTransactions on networking Vol -6 No 5 (98)\nCheng Jin, David Wei, Steven H. Low, Julian Bunn,\nHyojeong D. Choe, John C. Doyle, Harvey Newman,\nSylvain Ravot, and Suresh Singh, Caltech Fernando\nPaganini, UCLA \" Fast TCP From Theory to Experiments\"\nIEEE Network \u2022 January/February 2005\nJun-Hong Cui, University of Connecticut An Architecture\nfor Scalable, Efficient, and Fast Fault-Tolerant Multicast\nProvisioning IEEE Network \u2022 March/April 2004\nChandi Barakat ,Eitan Altman and walid Dabbous On TCP\nPerformance in a heterogeneous network A survey IEEE\nCommunication Magazine 2000\nTrivedi ,Kishor Shridharbhai Probability and Statistics\nwith Reliability Queuing and Computer science application\nPrentice hall of India\n\n\fIJCSNS International Journal of Computer Science and Network Security, VOL.9 No.8, August 2009\n\nSoumen Kanrar received the\nM.Tech . degree in Computer\nScience and Data Processing from\nIndian Institute of Technology\nKharagpur \u2013India in 1999,and\nMS\ndegree\nin\nApplied\nMathematics\nFrom Jadavpur\nUniversity \u2013 India in 1996 .\nDuring 2000 - 2008, he stayed in\nDurgapur Institute of Advance\nTechnology\nas\nAcademic\nFellow .Currently working as a Research Associate in\nCollege of Computer & Information Sciences King Saud\nUniversity, Riyadh.\n\nMohammad Siraj received his\nM.E.\ndegree in Computer\nTechnology and Applications\nfrom\nDelhi\nCollege\nof\nEngineering, Delhi India\nin\n1997,and\nBE\ndegree\nin\nElectronics and Communication\nEngg.from Jamia Millia Islamia,\nNew Delhi India in 1995. He has\nworked as Scientist in Defence\nResearch and Development Organisation ,INDIA from\n1995 -2000. Currently he is working as a Lecturer in\nCollege of Computer & Information Sciences King Saud\nUniversity, Riyadh.\n\n261\n\n\f"}