{"id": "http://arxiv.org/abs/cs/0511102v1", "guidislink": true, "updated": "2005-11-29T19:38:58Z", "updated_parsed": [2005, 11, 29, 19, 38, 58, 1, 333, 0], "published": "2005-11-29T19:38:58Z", "published_parsed": [2005, 11, 29, 19, 38, 58, 1, 333, 0], "title": "Evaluating Mobility Pattern Space Routing for DTNs", "title_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0511003%2Ccs%2F0511065%2Ccs%2F0511030%2Ccs%2F0511045%2Ccs%2F0511007%2Ccs%2F0511086%2Ccs%2F0511100%2Ccs%2F0511051%2Ccs%2F0511040%2Ccs%2F0511066%2Ccs%2F0511058%2Ccs%2F0511048%2Ccs%2F0511090%2Ccs%2F0511064%2Ccs%2F0511102%2Ccs%2F0511059%2Ccs%2F0511052%2Ccs%2F0511105%2Ccs%2F0511063%2Ccs%2F0511020%2Ccs%2F0511053%2Ccs%2F0511011%2Ccs%2F0511035%2Ccs%2F0511026%2Ccs%2F0511093%2Ccs%2F0511037%2Ccs%2F0511019%2Ccs%2F0511041%2Ccs%2F0511103%2Ccs%2F0511082%2Ccs%2F0511106%2Ccs%2F0511076%2Ccs%2F0511027%2Ccs%2F0511002%2Ccs%2F0511074%2Ccs%2F0511085%2Ccs%2F0511099%2Ccs%2F0511008%2Ccs%2F0511056%2Ccs%2F0511024%2Ccs%2F0511060%2Ccs%2F0511039%2Ccs%2F0511022%2Ccs%2F0511080%2Ccs%2F0511013%2Ccs%2F0511067%2Ccs%2F0511062%2Ccs%2F0511073%2Ccs%2F0511025%2Ccs%2F0511012%2Ccs%2F0511014%2Ccs%2F0511091%2Ccs%2F0511089%2Ccs%2F0511078%2Ccs%2F0511042%2Ccs%2F0511055%2Ccs%2F0511097%2Ccs%2F0511032%2Ccs%2F0511077%2Ccs%2F0511088%2Ccs%2F0511016%2Ccs%2F0608088%2Ccs%2F0608004%2Ccs%2F0608110%2Ccs%2F0608049%2Ccs%2F0608118%2Ccs%2F0608065%2Ccs%2F0608075%2Ccs%2F0608102%2Ccs%2F0608035%2Ccs%2F0608059%2Ccs%2F0608076%2Ccs%2F0608067%2Ccs%2F0608078%2Ccs%2F0608124%2Ccs%2F0608012%2Ccs%2F0608097%2Ccs%2F0608036%2Ccs%2F0608071%2Ccs%2F0608043%2Ccs%2F0608109%2Ccs%2F0608058%2Ccs%2F0608034%2Ccs%2F0608042%2Ccs%2F0608090%2Ccs%2F0608113%2Ccs%2F0608121%2Ccs%2F0608083%2Ccs%2F0608047%2Ccs%2F0608079%2Ccs%2F0608087%2Ccs%2F0608011%2Ccs%2F0608041%2Ccs%2F0608040%2Ccs%2F0608100%2Ccs%2F0608031%2Ccs%2F0608091%2Ccs%2F0608103%2Ccs%2F0608032%2Ccs%2F0608115%2Ccs%2F0608114&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Evaluating Mobility Pattern Space Routing for DTNs"}, "summary": "Because a delay tolerant network (DTN) can often be partitioned, the problem\nof routing is very challenging. However, routing benefits considerably if one\ncan take advantage of knowledge concerning node mobility. This paper addresses\nthis problem with a generic algorithm based on the use of a high-dimensional\nEuclidean space, that we call MobySpace, constructed upon nodes' mobility\npatterns. We provide here an analysis and the large scale evaluation of this\nrouting scheme in the context of ambient networking by replaying real mobility\ntraces. The specific MobySpace evaluated is based on the frequency of visit of\nnodes for each possible location. We show that the MobySpace can achieve good\nperformance compared to that of the other algorithms we implemented, especially\nwhen we perform routing on the nodes that have a high connection time. We\ndetermine that the degree of homogeneity of mobility patterns of nodes has a\nhigh impact on routing. And finally, we study the ability of nodes to learn\ntheir own mobility patterns.", "summary_detail": {"type": "text/plain", "language": null, "base": "http://export.arxiv.org/api/query?search_query=&id_list=cs%2F0511003%2Ccs%2F0511065%2Ccs%2F0511030%2Ccs%2F0511045%2Ccs%2F0511007%2Ccs%2F0511086%2Ccs%2F0511100%2Ccs%2F0511051%2Ccs%2F0511040%2Ccs%2F0511066%2Ccs%2F0511058%2Ccs%2F0511048%2Ccs%2F0511090%2Ccs%2F0511064%2Ccs%2F0511102%2Ccs%2F0511059%2Ccs%2F0511052%2Ccs%2F0511105%2Ccs%2F0511063%2Ccs%2F0511020%2Ccs%2F0511053%2Ccs%2F0511011%2Ccs%2F0511035%2Ccs%2F0511026%2Ccs%2F0511093%2Ccs%2F0511037%2Ccs%2F0511019%2Ccs%2F0511041%2Ccs%2F0511103%2Ccs%2F0511082%2Ccs%2F0511106%2Ccs%2F0511076%2Ccs%2F0511027%2Ccs%2F0511002%2Ccs%2F0511074%2Ccs%2F0511085%2Ccs%2F0511099%2Ccs%2F0511008%2Ccs%2F0511056%2Ccs%2F0511024%2Ccs%2F0511060%2Ccs%2F0511039%2Ccs%2F0511022%2Ccs%2F0511080%2Ccs%2F0511013%2Ccs%2F0511067%2Ccs%2F0511062%2Ccs%2F0511073%2Ccs%2F0511025%2Ccs%2F0511012%2Ccs%2F0511014%2Ccs%2F0511091%2Ccs%2F0511089%2Ccs%2F0511078%2Ccs%2F0511042%2Ccs%2F0511055%2Ccs%2F0511097%2Ccs%2F0511032%2Ccs%2F0511077%2Ccs%2F0511088%2Ccs%2F0511016%2Ccs%2F0608088%2Ccs%2F0608004%2Ccs%2F0608110%2Ccs%2F0608049%2Ccs%2F0608118%2Ccs%2F0608065%2Ccs%2F0608075%2Ccs%2F0608102%2Ccs%2F0608035%2Ccs%2F0608059%2Ccs%2F0608076%2Ccs%2F0608067%2Ccs%2F0608078%2Ccs%2F0608124%2Ccs%2F0608012%2Ccs%2F0608097%2Ccs%2F0608036%2Ccs%2F0608071%2Ccs%2F0608043%2Ccs%2F0608109%2Ccs%2F0608058%2Ccs%2F0608034%2Ccs%2F0608042%2Ccs%2F0608090%2Ccs%2F0608113%2Ccs%2F0608121%2Ccs%2F0608083%2Ccs%2F0608047%2Ccs%2F0608079%2Ccs%2F0608087%2Ccs%2F0608011%2Ccs%2F0608041%2Ccs%2F0608040%2Ccs%2F0608100%2Ccs%2F0608031%2Ccs%2F0608091%2Ccs%2F0608103%2Ccs%2F0608032%2Ccs%2F0608115%2Ccs%2F0608114&start=0&max_results=1000&sortBy=relevance&sortOrder=descending", "value": "Because a delay tolerant network (DTN) can often be partitioned, the problem\nof routing is very challenging. However, routing benefits considerably if one\ncan take advantage of knowledge concerning node mobility. This paper addresses\nthis problem with a generic algorithm based on the use of a high-dimensional\nEuclidean space, that we call MobySpace, constructed upon nodes' mobility\npatterns. We provide here an analysis and the large scale evaluation of this\nrouting scheme in the context of ambient networking by replaying real mobility\ntraces. The specific MobySpace evaluated is based on the frequency of visit of\nnodes for each possible location. We show that the MobySpace can achieve good\nperformance compared to that of the other algorithms we implemented, especially\nwhen we perform routing on the nodes that have a high connection time. We\ndetermine that the degree of homogeneity of mobility patterns of nodes has a\nhigh impact on routing. And finally, we study the ability of nodes to learn\ntheir own mobility patterns."}, "authors": ["Jeremie Leguay", "Timur Friedman", "Vania Conan"], "author_detail": {"name": "Vania Conan"}, "author": "Vania Conan", "links": [{"title": "doi", "href": "http://dx.doi.org/10.1109/INFOCOM.2006.299", "rel": "related", "type": "text/html"}, {"href": "http://arxiv.org/abs/cs/0511102v1", "rel": "alternate", "type": "text/html"}, {"title": "pdf", "href": "http://arxiv.org/pdf/cs/0511102v1", "rel": "related", "type": "application/pdf"}], "arxiv_comment": "IEEE INFOCOM 2006 preprint", "arxiv_primary_category": {"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom"}, "tags": [{"term": "cs.NI", "scheme": "http://arxiv.org/schemas/atom", "label": null}], "pdf_url": "http://arxiv.org/pdf/cs/0511102v1", "affiliation": "None", "arxiv_url": "http://arxiv.org/abs/cs/0511102v1", "journal_reference": null, "doi": "10.1109/INFOCOM.2006.299", "fulltext": "Evaluating Mobility Pattern Space Routing\nfor DTNs\nJ\u00e9r\u00e9mie Leguay,\u2217\u2020 Timur Friedman,\u2217 Vania Conan\u2020\n\narXiv:cs/0511102v1 [cs.NI] 29 Nov 2005\n\n\u2217\n\nUniversit\u00e9 Pierre et Marie Curie, Laboratoire LiP6\u2013CNRS\n\u2020 Thales Communications\n\nAbstract- Because a delay tolerant network (DTN) can often\nbe partitioned, the problem of routing is very challenging.\nHowever, routing benefits considerably if one can take advantage\nof knowledge concerning node mobility. This paper addresses\nthis problem with a generic algorithm based on the use of\na high-dimensional Euclidean space, that we call MobySpace,\nconstructed upon nodes' mobility patterns. We provide here an\nanalysis and the large scale evaluation of this routing scheme\nin the context of ambient networking by replaying real mobility traces. The specific MobySpace evaluated is based on the\nfrequency of visit of nodes for each possible location. We show\nthat the MobySpace can achieve good performance compared to\nthat of the other algorithms we implemented, especially when\nwe perform routing on the nodes that have a high connection\ntime. We determine that the degree of homogeneity of mobility\npatterns of nodes has a high impact on routing. And finally, we\nstudy the ability of nodes to learn their own mobility patterns.\n\nI. I NTRODUCTION\nThis paper addresses the problem of routing in delay tolerant\nnetworks (DTNs) [1]. It evaluates a scheme, proposed in [2],\nthat turns the problem of DTN routing into a problem of\nrouting in a virtual space defined by the mobility patterns of\nnodes. The earlier work tested the scheme with an entirely\nartificial scenario. By driving simulations with real mobility\ntraces, in this paper we validate this routing scheme in the\ncontext of ambient networks. This paper also studies a number\nof important factors, such as the degree of homogeneity in the\nmobility of nodes, that impact routing performance. Finally,\nthe paper examines the ability of nodes to learn their own\nmobility, which is important for the feasibility of such a\nscheme.\nIn one common DTN scenario, like the one we consider in\nthis paper, nodes are mobile and have wireless networking\ncapabilities. They are able to communicate together only\nwhen they are within transmission range. The network suffers\nfrom frequent connectivity disruptions, making the topology\nintermittently and partially connected. This means that there is\na very low probability that an end-to-end path exists between\na given pair of nodes at a given time. End-to-end paths can\nexist temporarily, or may sometimes never exist, with only\npartial paths emerging. Due to these disruptions, regular adhoc networking approaches to routing and transport do not\nhold, and new solutions must be proposed.\nThe Delay Tolerant Network Research Group (DTNRG) [3]\nhas proposed an architecture [4] to support messaging that\nmay be used by delay tolerant applications in such a context. The architecture consists mainly of the addition of an\n\noverlay, called the bundle layer, above a network's transport\nlayer. Messages transferred in DTNs are called bundles. They\nare transferred in an atomic fashion between nodes using a\ntransport protocol that ensures node-to-node reliability. These\nmessages can be of any size. Nodes are assumed to have\nbuffers in which they can store the bundles.\nRouting is one of the very challenging open issues in\nDTNs, as mentioned by Jain et al. [5]. Indeed, since the\nnetwork suffers from connectivity problems, MANET [6]\nrouting algorithms such as OLSR, based on the spreading of\ncontrol information, or AODV, which is on-demand, fail to\nachieve routing. Different approaches have to be found.\nThe problem of routing in DTNs is not trivial. Epidemic\nrouting [7] studied by Vahdat et al. is a possible solution when\nnothing is known about the behavior of nodes. Since it leads\nto buffer overloads and inefficient use of transmission media,\none would prefer to limit bundle duplication and instead use\nrouting heuristics that can take advantage of the context. To\nmove in such a direction, the DTN architecture defines several\ntypes of contacts: scheduled, opportunistic, and predicted.\nScheduled contacts can exist, for instance, between a base\nstation somewhere on earth and a low earth orbiting relay\nsatellite. Opportunistic contacts are created simply by the presence of two entities at the same place, in a meeting that was\nneither scheduled nor predicted. Finally, predicted contacts are\nalso not scheduled, but predictions of their existence can be\nmade by analyzing previous observations.\nThe study presented in this paper relies also on contacts that\ncan be characterized as predicted, but the underlying concept is\na more generic abstraction compared to previous work, being\nable to capture the interesting properties of major mobility\npatterns for routing.\nThe main contribution of this paper is the validation of\na routing scheme for DTNs that uses the formalism of a\nhigh-dimensional Euclidean space based on nodes' mobility\npatterns. We show the feasibility of this concept through an\nexample in which each dimension represents the probability\nfor a node to be found in a particular location. We conduct\nsimulations by replaying mobility traces to analyse the feasibility and comparative performance of such a scheme.\nThe rest of this paper is structured as follows. Sec. II\ndescribes the general concept of the mobility pattern based\nrouting scheme, called the MobySpace. Sec. III presents the\nspecific MobySpace we have considered for the evaluation.\nSec. IV presents the simulation results. Sec. VI provides\n\n\fan overview of related work concerning routing in DTNs.\nSec. VII concludes the paper, discussing directions for future\nwork.\nII. M OBY S PACE :\n\nA\n\nM OBILITY PATTERN S PACE\n\nTwo people having similar mobility patterns are more likely\nto meet each other, thus to be able to communicate. Based on\nthis basic principle, we propose in [2] to use the formalism\nof a Euclidean virtual space, that we call MobySpace, as a\ntool to help nodes make routing decisions. These decisions\nrely on the notion that a node is a good candidate for taking\ncustody of a bundle if it has a mobility pattern similar to that\nof the bundle's destination. Routing is done by forwarding\nbundles toward nodes that have mobility patterns that are more\nand more similar to the mobility pattern of the destination.\nSince in the MobySpace, the mobility pattern of a node\nprovides its coordinates, called its MobyPoint, routing is done\nby forwarding bundles toward nodes that have their MobyPoint\ncloser and closer to the MobyPoint of the destination.\nIn this section, we describe manners in which mobility\npatterns can be characterized and the ways these patterns can\nbe managed by the nodes, and we discuss possible limits and\nissues surrounding the overall concept.\nA. Mobility pattern characterization\nSince the mobility pattern of a node provides its coordinates\nin the MobySpace, the way in which these patterns are characterized determines the way the virtual space is constructed.\nThe definition of a mobility pattern sets the number and\nthe type of the dimensions of the specific MobySpace. Many\nmethods could be employed to describe a mobility pattern,\nbut some requirements must be satisfied. We want mobility\npatterns to be simple to measure in order to keep them computationally inexpensive and to reduce the overhead associated\nwith exchanging them between nodes. Furthermore, they must\nbe relevant to routing, by helping nodes to take efficient\nrouting decisions.\nA mobility pattern could be based, for instance, upon historic information regarding contacts that the node has already\nhad. A recent study [8] by Hui et al. has shown the interest\nof such mobility patterns. It highlighted that contacts between\npeople at the Infocom 2005 conference follow power-laws in\nterm of their duration. If we want to route a bundle from one\nnode to another, we have an interest in considering information\non these contacts. Intuitively, it could be very efficient to\ntransmit a bundle to a relay that frequently encounters the\ndestination. A MobySpace based on this kind of pattern would\nbe as follows. Each possible contact is an axis, and the distance\nalong that axis indicates a measure of the probability of\ncontact. Two nodes that have a similar set of contacts that they\nsee with similar frequencies are close in this space, whereas\nnodes that have very different sets of contacts, or that see the\nsame contacts but with very different frequencies, are far from\neach other. It seems reasonable that one would wish to pass a\nbundle to a node that is as close as possible to the destination\n\nin this space, because this should improve the probability that\nit will eventually reach the destination.\nWe might wish to consider an alternative space in which\nthere is a more limited number of axes. If nodes' visits to\nparticular locations can be tracked, then the mobility pattern\nof a node can be described by its visits to these locations. In\nthis scenario, each axis represents a location, and the distance\nalong the axis represents the probability of finding a node at\nthat location. We can imagine that nodes that have similar\nprobabilities of visiting a similar set of locations are more\nlikely to encounter each other than nodes that are very different\nin these respects.\nPrior work [5], has demonstrated the interest of capturing\ntemporal information as well. It is well known that network\nusage patterns follow diurnal and weekly cycles. We could\neasily imagine two nodes that visit the same locations with\nthe same frequencies, but on different days of the week. This\nkind of desynchronisation could arise for instance in a campus\nat the scale of the hour if we consider two users each having\na course in the same lecture hall the same day but not at\nthe same time. Even so, it still might make sense to route to\none node in order to reach the other, especially if there is a\nrelay node at the commonly visited location. We can imagine\nways in which the dimensional representation could capture\ntemporal information as well. For instance, visit patterns could\nbe translated into the frequential domain. A node's visits to a\nlocation could be represented by a point on a frequency axis,\ncapturing the dominant frequency of visits, and a point on a\nphase axis, as well as a point on the axis already described,\nthat represents the overall probability of visiting the location.\nThe evaluation and the comparison of the different kind of\nmobility patterns are kept for further studies. In Secs. III and\nIV, we test a MobySpace based on the frequency with which\nnodes find themselves in certain locations\nB. Mobility pattern acquisition\nA node in the network has to determine its coordinates in\nthe MobySpace, the ones of the nodes it meets, and the ones\nof the destinations of the bundles it carries, in order to take\nappropriate routing decisions. Two problems arise: how does\na node learn its own mobility pattern, and how does a node\nlearn those of the others?\nThere are several ways a node can learn its own mobility\npattern. First, a node can learn its mobility pattern by observing its environment, e.g., by studying its contacts or its\nfrequency of visits to different locations. If the node requires\ninformation about its current position, we can assume that\nparticular tags are attached to each location. Alternatively, we\ncan imagine that nodes are able to interrogate an exiting infrastructure to obtain these patterns. This infrastructure would\nact as a passive monitoring tool for pattern calculation. The\nsystem can be accessible anywhere in a wireless or in a wired\nfashion or it can be located at certain places.\nSimilarly, there are several ways that a node can learn the\nmobility patterns of others. First, these mobility patterns can\nbe spread in an epidemic fashion. Meaning that they do not\n\n\fneed to be retransmitted by nodes in the network if we assume\nthat there are always nodes present in the network to make the\ninformation remain available to new nodes, and if we assume\nthat the mobility patterns of nodes are stable. Nodes could also\nspread just the most significant coordinates of their mobility\npatterns to reduce buffer occupancy and network resource\nconsumption. Finally, we can also imagine that nodes drop\noff their mobility patterns in repositories placed at strategic\nlocations, and at the same time they update their knowledge\nwith the content available at the repositories.\nC. Mobility pattern usage\nAs mentioned in the introduction, the mobility pattern of\na node determines its coordinates in the MobySpace, i.e.,\nthe position of its associated MobyPoint. The basic idea is\nthat bundles are forwarded to nodes having mobility patterns\nmore and more similar to that of the destination. This means\nthat in the MobySpace, we route bundles to nodes that have\nMobyPoints closer and closer to that of the destination. Let's\nconsider that the node A wants to route a bundle to B, while\nonly the node C is in its neighborhood. It has two possibilities:\nkeep the bundle or transmit the bundle to C. The MobyPoint\nof A is at a certain distance from the MobyPoint of B. If the\nMobyPoint of C is closer to the MobyPoint of B, then node\nA will decide to transmit to C. Otherwise, it will keep the\nbundle.\nFormally, let U be the set of all nodes and L be the set\nof all locations. The MobyPoint for a node k \u2208 U is a\npoint in an n-dimensional space, where n = |L|. We write\nmk = (c1k , ..., cnk ) for the MobyPoint of node k. The distance\nbetween two MobyPoints is written d(mi ,mj ).\nAt a point in time, t, the node k will have a set of\ndirectly connected neighbors, which we write as Wk (t) \u2286 U .\nWk+ (t) = Wk (t) \u222a {k} is the augmented neighborhood that\ncontains k. MobySpace routing consists of either choosing one\nof these neighbors to receive the bundle or deciding to keep\nthe bundle. The routing function, which we call f , chooses\nthe neighbor that is closest to the destination. The decision\nfor node k when sending a bundle to b is taken by applying\nthe function f :\nf (Wk+ (t),b) =\n(\nb if b \u2282 Wk (t), else\ni \u2208 Wk+ (t) : d(mi ,mb ) = minj\u2208W + (t) d(mj ,mb )\n\n(1)\n\nmobility patterns similar to the ones observed with random\nmobility models. The efficiency of the virtual space as a tool\nmay be limited if nodes change their habits too rapidly.\nSome problems could occur even if nodes have well defined mobility patterns, but their existence and nature may\ndepend on the particularities of the space. For instance, in the\nEuclidean space, a bundle may reach a local maximum if a\nnode has a mobility pattern that is the most similar in the local\nneighborhood to the destination node's mobility pattern, but is\nnot sufficient for one reason or another to achieve the delivery.\nIn the second type of space, where each dimension represents\na location, it can happen if nodes visit similar places, but for\ntiming reasons, such as being on opposite diurnal cycles, they\nnever meet. This kind of user behavior has been observed by\nHenderson et al. [9] and Hui et al. [8].\nThe Euclidean spaces that we have discussed here are finite\nin terms of number of dimensions, but in practice the number\nof dimensions might be unbounded. This is the case, for\ninstance, in the space we use as a case study in Sec. III.\nAdditional mechanisms must be found to allow this.\nFinally, the routing scheme presented here is based on each\nnode forwarding just a single copy of a bundle, which may be\na problem in case of node failure or nodes leaving the system\nfor extended periods of time. One may wish to introduce some\nredundancy into MobySpace routing. For instance, a node can\nbe allowed to transmit a bundle up to T times if, after the first\ntransmission, it meets other nodes having mobility patterns\neven more similar to that of the destination within a period P .\nIII. F REQUENCY\n\nOF VISIT BASED\n\nTo evaluate the routing scheme based on MobySpace, we\nused a simple kind of space that we describe in the first part\nof this section. The second part introduces the mobility data\nwe replayed for the evaluation.\nA. Description\nThe frequency of visit based MobySpace we evaluate works\nas follow. For each of the nodes, there is a well defined\nprobability of finding that node at each of the n locations.\nThis set of probabilities is a node's mobility pattern, and is\ndescribed by a MobyPoint in an n dimensional MobySpace.\nThe coordinate of a node for the axis i is its probability of\nvisit for the location i. All the MobyPoints are placed on a\nhyperplane since we have:\n\nk\n\nThe choice of the distance function d used in the routing\ndecision process is important. One straightforward choice is\nEuclidean distance. Examples of other distance functions can\nbe found in [2]. We leave their comparison to future work.\nD. Possible limits and issues\nDTN routing in a contact space or a mobility space is\nbased on the assumption that there will be regularities in the\ncontacts that nodes have, or in their choices of locations to\nvisit. There is always the possibility that we may encounter\n\nM OBY S PACE\n\nfor any point mi = (c1i , ..., cni ),\n\nn\nX\n\ncki = 1\n\n(2)\n\nk=1\n\nOne major motivation for this kind of space is the fact\nthat the distribution of the probabilities of visit to locations\nfollows generally a power law which can be used efficiently\nfor routing.\nIndeed, recent studies of the mobility of students in a\ncampus [10], [9] or corporate users [11], equipped with PDAs\nor laptops able to be connected to wireless access networks,\nshow that they follow common mobility patterns. They show\n\n\fv\nu n\nuX\n\u00012\ncki \u2212 ckj\nd(mi ,mj ) = t\n\nactive nodes\n\n4000\n3000\n2000\n1000\n0\n4\n/0\n06 04\n/\n05 04\n/\n04 04\n/\n03 04\n/\n02 04\n/\n01 03\n/\n12 03\n/\n11 03\n/\n10 03\n/\n09\n\nthat significant aspects of the behavior can be characterized\nby power law distributions. Specifically, the session durations\nand the frequencies of the places visited by users follow power\nlaws. This means that users typically visit a few access points\nfrequently while visiting the others rarely, and that users may\nstay at few locations for long periods while visiting the others\nfor very short periods. Henderson et al. observed [9] that 50%\nof users studied spent 62% of their time attached to a single\naccess point, and this proportion decreased exponentially.\nRegarding the distance function, we choose a straightforward one, the Euclidean distance:\n\ndate\nFig. 1.\n2004).\n\nNumber of actives users per day (from 1 September 2003 to 1 June\n\n(3)\n\nk=1\n\nB. Real mobility data used\n\nThere has been considerable growth in the number of\nsmall devices people carry every day, such as cell phones,\nPDAs, music players, and game consoles. The variety of their\ndifferent networking capabilities allows us to envisage new\napplications, such as distributed databases, content delivery\nsystems, or self organizing peer to peer networks. We can\nimagine that such spontaneous and autonomous networks\nspring up around the movement of people in campus or\ncorporate environments. Contextual applications, services, or\nbasic applications like text messaging could take advantage of\nsuch an infrastructure. These scenarios are studied within the\nframework of delay tolerant networks.\nFor the purpose of this study, we sought real mobility traces\nthat ressembled what one might find in an ambient network\nenvironment. Since there are very few traces of this kind, we\nchose data that tracks mobile users in a campus setting. We\nused the mobility data collected on the Wi-Fi campus network\nof Dartmouth College [9]. Jones et al. [12] have recently used\nthe traces in a similar way. The Dartmouth data is the most\nextensive data collection available that covers a large wireless\naccess network. The network is composed of about 550 access\npoints (APs), the number of different wireless cards (MAC\naddresses) seen by the network is about 13,000 and the data\nhave been collected between the years 2001 and 2004. The\nnetwork covers the college's academic buildings, the library,\nthe sport infrastructures, the administrative buildings and the\nstudent residences. Users are equipped with devices such as\nPDAs, laptops, and phones that support voice over IP (VoIP).\nThe majority of the end users are students, who make intensive\nuse of the network, especially since many of them are required\nto own a laptop. Fig. 1 illustrates the usage levels by showing\nthe evolution of the number of active nodes in the network\nper day.\nThe data we analysed track users' sessions in the wireless\nnetwork. These data have been pre-processed by Song et al. in\ntheir prior work [13] on mobility prediction. The traces show\nthe time at which a node associates or dissociates from an\naccess point. Data were collected by a central server with the\nSyslog [14] protocol. It could happen that a node does not\n\nsend a dissociation message, or that a Syslog UDP message\nis lost, in which case a session is considered finished after 30\nminutes of inactivity.\nFor our study, each access point represents a location. We\nassume that two nodes (represented as networking cards in the\ndata) are assumed to be able to communicate with a low range\ndevice (using Bluetooth for instance), if they are attached at\nthe same time to the same AP. This assumption is somewhat\nartificial as nodes that are attached to two different APs that\nclose to each other might be able to communicate directly.\nSimilarly, two nodes connected at the same AP might be out of\nrange of each other. Nonetheless, this is the best approximation\nwe can make with the data at hand.\nIV. S IMULATION\n\nRESULTS\n\nThis section presents the manner in which we evaluated\nthe routing scheme that uses a frequency of visit based\nMobySpace, and the results we obtained. Since we performed\nthe simulations using a subset of 45 days of mobility data, we\nfirst describe the properties of the traces collected during that\nperiod.\nA. Mobility traces\nWe replayed the mobility traces inferred from Dartmouth\ndata between January 26th 2004 and March 11th 2004. Fig. 2\nshows distributions that characterize users' behavior within\nthis period. We choose that period because, as shown in\nFig. 2(b), users make an intensive and regular use of the\nnetwork. As shown by Fig. 1, this period is between Christmas\nand the spring break. In this period, we have observed a total\nof 5,545 active users that have visited 536 locations.\nUsers are mobile. They visit on average 16.66 locations\nin the period (see Fig. 2(c)) and 1.75 locations per day (see\nFig. 2(d)). The distributions of the number of locations visited\nby the nodes during the period and per day follow heavy tailed\ndistributions. This means that the majority of users have a low\nlevel of mobility while some users are very mobile. Users with\na low mobility level regarding the number of locations they\nvisit may either be users that are not very present in the data\nor users that stay in one place, as in students who keep their\nlaptop connected in their room at the student residence.\n\n\f4000\nnumber of nodes\n\nnumber of nodes\n\n500\n450\n400\n350\n300\n250\n200\n150\n100\n50\n\n3500\n3000\n2500\n2000\n1500\n1000\n\n0\n\n10\n\n20\n\n30\n\n40\n\n50\n\n0\n\n10\n\nactive days\n\n50\n\n3000\n\n2500\n\nnumber of nodes\n\nnumber of nodes\n\n40\n\n(b) Active nodes per day\n\n3000\n2000\n1500\n1000\n500\n0\n\n2000\n1000\n\nB. Methodology\n\n0\n0 20 40 60 80 100 120 140 160\nnumber of AP visited\n\n0\n\n(c) Locations visited\n\n5\n10\n15\nnumber of visited AP\n\n20\n\n(d) Locations visited per day\n\n2000\nnumber of nodes\n\n1000\nnumber of nodes\n\n30\n\nday\n\n(a) Active days\n\n800\n600\n400\n200\n0\n\n1000\n\n0\n0\n\n200 400 600 800 1000\n\n0\n\ntotal connection time (h)\n\n10\n\n15\n\n20\n\n25\n\n\u2022\n\n(f) Connection time per day\n3000\nnumber of nodes\n\n3500\n3000\n2500\n2000\n1500\n1000\n500\n0\n\n5\n\nWe have implemented a stand alone simulator to evaluate the routing scheme. This simulator only implements\nthe transport and network layers and it makes simple assumptions regarding lower layers, for instance allowing for\ninfinite bandwidth. Nodes are supposed to have infinite buffers\nand are supposed to have the inherent knowledge of the\nmobility pattern of the others. We will study independently\nthe problematic of learning mobility patterns in Sec. V.\nWe compare the performance of the MobySpace against the\nfollowing:\n\naverage connection time per day (h)\n\n(e) Connection time\n\nnumber of nodes\n\n20\n\ndistributed over time. Thus, we analyse the distributions of\nthe apparition and disparition days of users, and their total\nnumber of days of presence. Fig. 2(g) and Fig. 2(h) show\nthat apparitions and disparitions generally occur close to the\nlimits of the period. This means that the probability that a\nnode will disappear close to the beginning of the simulation\nis low. Similarly, the probability that a node will appear for\nthe first time close to the end of the period is low. Looking at\nthe distribution of the number of days that users are present\n(Fig. 2(a)), 25.48 days on average, it appears that either users\nmake an intensive use of their laptop or PDA, or they seldom\nuse it, but a majority of users make an intensive use of the\nnetwork since 50% of users are present more than 30 days.\n\n2500\n2000\n1500\n1000\n500\n0\n\n0 5 10 15 20 25 30 35 40 45\nday of apparition\n\n(g) Apparition day\nFig. 2.\n\n\u2022\n0 5 10 15 20 25 30 35 40 45\nday of disparition\n\n(h) Disparition day\n\nStatistics on the data set used for the simulations.\n\nThe network usage displays a number of regularities.\nFig. 2(b) shows the evolution of the number of active users per\nday. It highlights the existence of regular weekly cycles and\na fairly constant number of active users: 2,901 users per day\non average. Regularity is a desirable property for this study\nbecause we wish to evaluate the MobySpace based routing\nscheme in a context were people move in their usual everyday\nenvironment having a number of constant habits.\nUsers make intensive use of the network. The mean presence\ntime for that period is 243 hours and is 5.18 hours per day\n(see Fig. 2(f)). Having users with a high level of presence\nis important but not sufficient. That presence must also be\n\n\u2022\n\n\u2022\n\nEpidemic routing: This is described by Vahdat and\nBecker [7]: Each time two nodes meet, they exchange\ntheir bundles. The major interest of this algorithm is\nthat it provides the optimum path and thus the minimum\nbundle delay. We use it here as a lower bound. This\nalgorithm can be also seen as the extension of Dijkstra's\nshortest path algorithm proposed by Jain et al. [5] that\ntakes into account time-varying edge weights. In practice,\nepidemic routing suffers from high buffer occupancy and\nhigh bandwidth utilization.\nOpportunistic routing: A node waits to meet the destination in order to transfer its bundle. The main advantage\nof this method is that it involves only one transmission\nper bundle. Bundle delivery relies just on the mobility of\nnodes and their contact opportunities.\nRandom routing: There are many ways to define a random routing algorithm. In order to design one that acts\nsimilarly to the MobySpace based routing scheme, we\nattribute for each destination node j a preference list lj ,\nwhich is a randomly ordered list of all of the nodes. When\na node has a bundle destined to j, it sends that bundle\nto the most preferred neighbor on the preference list lj .\nIf the most preferred neighbor has a lower preference\nthan the current node, the bundle is not forwarded. This\nmechanism avoids loops by construction.\nHot potato routing: When a node is at a location and the\nbundle's destination in not there, the node transfers the\nbundle to a neighbor chosen at random. We have added a\nrule to avoid local loops: a node can only handle a bundle\none time per location visit.\n\n\fWe will refer to them here by the following names: Epidemic, using Epidemic routing; Opportunistic, using Opportunistic routing; Random, using Random routing; Potato, using\nHot potato routing, and MobySpace, using the routing scheme\nthat relies on the MobySpace.\nAll the scenarios share common parameters that can be\nfound in Table I. We considered the whole set of 536 locations\nthat were visited over the course of the 45 days of data. The\nvirtual space used for routing thus has 536 dimensions. Due\nto the difficulty of running simulations with the totality of the\n5,545 nodes, especially with Epidemic, for which computation\nexplodes with the number of nodes and the number of bundles\ngenerated, we used a sampling method. We have defined two\nkind of users: active, which generate traffic, and inactive,\nwhich only participate in the routing effort. Every active node\nestablishes a connection towards 5 other nodes. An active node\nsends one bundle per connection. For active users, we chose\nonly the ones that appear at least one time in the first week of\nthe simulations in order to be able to study bundle propagation\nover an extended period. In each run, we sampled 300 users\nwith 100 of them generating traffic. The simulator used a time\nstep of 1s.\nParameter\nTotal nodes\nTotal locations\nUsers sampled\nUsers generating traffic\nSimulation duration\nConnections per user\nBundles per connection\nTime step\n\nValue\n5545\n536\n300\n100\n45 days\n5\n1\n1s\n\ndelivery ratio\n(%)\n82.0 \u00b12.7\n4.9 \u00b10.6\n7.2 \u00b10.5\n10.7 \u00b11.7\n14.9 \u00b12.9\n\nEpidemic\nOpportunistic\nRandom\nPotato\nMobySpace\n\nTABLE II\n\nThe first thing we can observe is the fact that within the 45\ndays of simulation there is still a certain number of bundles\nthat are not delivered with Epidemic. The mobility of the 300\nnodes or their level of presence were not sufficient to ensure\nall the deliveries. Our sample included just 5% of the entire\nset of nodes. By deploying this system on more nodes, the\ndelivery ratio would rise closer to 100%. Furthermore, we did\nnot select nodes based on their mobility characteristics. Some\nof the nodes may have poor mobility.\n100\n\n100\n\n100\n\n80\n\n80\n\n80\n\n60\n\n60\n\n60\n\n40\n\n40\n\n40\n\n20\n\n20\n\n0\n\n20\n\n0\n0\n\n10\n\n20\nday\n\n30\n\n40\n\n0\n0\n\n(a) Epidemic\n\nS IMULATION PARAMETERS .\n\n10\n\n100\n\n80\n\n80\n\n60\n\n60\n\n40\n\n40\n\nIn this scenario, we picked 300 users completely at random\nand we replayed their traces while simulating DTN routing.\nTable II shows the average simulation results. It shows for\neach of the implemented algorithms the average bundle delay\nin number of days, the average delivery ratio, which corresponds to the number of bundles received over the number of\nbundles sent, and the average route length in number of hops.\n\n0\n\n10\n\n20\nday\n\n30\n\n40\n\n(c) Random\n\n0\n10\n\n20\n\n30\n\nday\n\nWith randomly sampled users\n\n40\n\n20\n0\n\nWe evaluate the routing algorithms with respect to their\ntransport layer performance. We consider a good algorithm\nto be one that yields a low average bundle delay, the highest\nbundle delivery ratio and a low average route length.\nWe consider two different kind of scenarios. One with only\nrandomly sampled users and one with only the most active.\n\n30\n\n100\n\n20\n\n(d) Potato\nFig. 3.\n\n20\nday\n\n(b) Opportunistic\n\n0\n\nC. Results\n\nroute length\n(hops)\n7.10 \u00b10.2\n1.0 \u00b10.0\n3.12 \u00b10.2\n72.7 \u00b116.5\n3.8 \u00b10.2\n\nR ESULTS WITH RANDOMLY SAMPLED USERS .\n\nTABLE I\n\nWe performed 5 runs for each scenario. Simulation results\nreported in the following tables are mean results with confidence intervals at the 90% confidence level, obtained using\nthe Student t distribution.\n\ndelay\n(days)\n12.5 \u00b10.9\n15.9 \u00b12.5\n16.6 \u00b12.6\n19.1 \u00b11.6\n18.9 \u00b11.0\n\n40\n\n0\n\n10\n\n20\n\n30\n\n40\n\nday\n\n(e) MobySpace\n\nCumulative distribution of packets delivered over time.\n\nTable II shows that MobySpace delivers twice as many\nbundles as Random but still far less than Epidemic, which\ndoes not miss any opportunities. Random delivers somewhat\nmore bundles than Opportunistic because the bundles are more\nmobile. This phenomenon is even true for Potato, which outperforms Random but delivers fewer bundles than MobySpace.\nAt first glance, the average bundle delay of MobySpace\nseems poor. We believe this average is influenced by the\nfact that more bundles are delivered compared to the other\nschemes, except Epidemic. The additional bundles delivered\nby MobySpace might be more difficult to route than the others,\nleading to higher delays. The investigation of this issues is kept\nfor future work. However, the average bundle delay is an interesting indicator of the performance an algorithm can achieve.\nFig. 3 presents the cumulative distribution of packets delivered\nover time. It shows why the average bundle delay is higher\n\n\fWith the most active users\nWe also evaluate routing in a scenario with only the most\nactive users, to see the effect of activity on performance. Such\na scenario might also be more typical of an ambient network\nenvironment. Several metrics can characterize the level of\nactivity. We use the regularity of the users' presence in the\nnetwork, as measured by the number of active days. The\nnumber of users in our data that are active all 45 days is\n835. We consider these users as a pool from which we sample\nfor each simulation run.\n\nEpidemic\nOpportunistic\nRandom\nPotato\nMobySpace\n\ndelivery ratio\n(%)\n96.7 \u00b11.9\n10.7 \u00b11.1\n14.0 \u00b11.0\n38.9 \u00b11.0\n50.4 \u00b14.7\n\ndelay\n(days)\n3.1 \u00b10.4\n17.6 \u00b11.6\n17.9 \u00b11.8\n19.1 \u00b10.4\n19.5 \u00b11.3\n\nroute length\n(hops)\n7.9 \u00b10.3\n1.0 \u00b10.0\n3.5 \u00b10.1\n317.0 \u00b129.0\n5.1 \u00b10.2\n\nTABLE III\nR ESULTS WITH THE MOST ACTIVE USERS .\n\nSec. IV-C has shown encouraging results for the use of\nMobySpace. However, the simulations rely on the assumption\nthat nodes are aware of their mobility patterns. This section\nexamines two different factors that impact the feasibility of\nthis architecture: the characteristics of the mobility patterns\nand the possibility of learning them.\nA. Mobility pattern characteristics\nAs noted in our prior work [2], when nodes do not\nhave a high degree of segregation in their mobility patterns,\nMobySpace can not benefit from the patterns for efficient\nrouting. We analyse here the properties of the mobility patterns\nwe compute on users of Dartmouth College with the help of\nthe relative entropy, Sr , applied to the set of probabilities\nthat make up a mobility pattern. This metric describes the\nhomogeneity of mobility patterns, which is 1 for a pattern\nwith no preference among locations and is small for patterns\nthat strongly prefer a few locations. It is defined by:\nPn\npi ln pi\n(4)\nSr = \u2212 i=1\nln n\nThe relative entropy is relevant for the analysis of mobility\npatterns because it captures a number of important characteristics. The relative entropy is at the same time correlated to\nthe number of locations visited and to the time spent at each\nlocation. If a node is equally likely to be found in any location,\nit has the maximum relative entropy value of 1. If it is very\nlikely to be found in one of a few locations, and unlikely to\nbe found in any other, it has low relative entropy.\nFig. 4 shows the distribution of the relative entropy of users'\nmobility patterns for the period of 45 days. They display\ngenerally low entropy: on average 0.15. The patterns tend\nto demonstrate good properties for the MobySpace routing\nscheme because either they contain few components or they\ncontain many components in a non homogeneous fashion.\n2500\n2000\n1500\n1000\n500\n0\n.0\n-1\n0.9-0.9\n0.8-0.8\n0.7-0.7\n0.6-0.6\n0.5-0.5\n0.4-0.4\n0.3-0.3\n0.2-0.2\n0.1-0.1\n0.0\n\nTable III shows the average simulation results. Considering\nonly the most active users, more bundles are delivered by\nthe algorithms. MobySpace attains a delivery ratio of 50.4%\ninstead of 14.9%. The delivery ratio of MobySpace would\nhave been, as previously, higher if more nodes had participated\nin the scenario. We intend to study this in future work\nby performing larger simulations. The average bundle delay\nachieved is very low for Epidemic compared to the other\nalgorithms. Since nodes are more present in the network,\nEpidemic certainly needs fewer relays to deliver the packets.\nRoute lengths are still less than Epidemic for Opportunistic,\nRandom, and MobySpace, whereas it is higher for Potato\ncompared to the previous scenario with randomly sample\nusers.\nThese results confirm that the MobySpace evaluated in\nthis paper enhances routing as compared to various generic\napproaches for routing in an ambient network formed by users\ncarrying personal devices in a campus setting. MobySpace\nachieves a high delivery ratio compared the simple algorithms\nlike Opportunistic, Random, or Potato. It also leads to low\nbandwidth usage by using short route compared to Epidemic.\n\nV. F EASIBILITY\n\nnumber of patterns\n\nfor MobySpace compared to Random. It is simply because\nMobySpace delivers more packets in a constant fashion over\ntime. Looking now at the average route lengths, we see that in\nall the cases, except Potato, they are lower than for Epidemic.\nMobySpace engenders routes that are about half as long as\nthose created by Epidemic. With MobySpace, bundles are\ntransmitted from a node to another because of their mobility\npatterns, not simply because of the opportunities of contact.\nPotato engenders routes that are extremely long because, at\neach contact, bundles switch from one node to another. Potato\nmay not be suitable for a real system because of bandwidth\nand energy consumption issues.\n\nrelative entropy\nFig. 4.\n\nRelative entropy distribution of mobility patterns.\n\nWe study the effect of pattern entropy on MobySpace\nrouting. Table IV shows that the relative entropy of mobility\npatterns has a great influence the performance in terms of the\nnumber of packets that are delivered. The higher the relative\nentropy, the higher the delivery ratio. Route lengths are stable\n\n\fover the increase of the relative entropy, except for Potato that\ngenerates longer routes.\nThese results show that a lack of diversity in the movements\nof users does not favor routing in such an environment. In our\nprior work [2] we demonstrate, with an artificial scenario, that\ntoo much diversity can also be a problem if mobility patterns\ncan not be distinguished. In that case, distances in MobySpace\nhave little significance. We were not able to reproduce this\ndemonstration with Dartmouth data because there is no user\nin the data that visits almost all the locations in a regular\nfashion. We can conclude that a MobySpace approach is of\ninterest when mobility patterns display a low relative entropy,\nbut not too close to 0.\nmetric\n\nSr\n\nEpidemic\n\n[0.0 \u2212 0.1]\n[0.1 \u2212 0.2]\n[0.2 \u2212 0.3]\n[0.3 \u2212 0.4]\n[0.0 \u2212 0.1]\n[0.1 \u2212 0.2]\n[0.2 \u2212 0.3]\n[0.3 \u2212 0.4]\n[0.0 \u2212 0.1]\n[0.1 \u2212 0.2]\n[0.2 \u2212 0.3]\n[0.3 \u2212 0.4]\n[0.0 \u2212 0.1]\n[0.1 \u2212 0.2]\n[0.2 \u2212 0.3]\n[0.3 \u2212 0.4]\n[0.0 \u2212 0.1]\n[0.1 \u2212 0.2]\n[0.2 \u2212 0.3]\n[0.3 \u2212 0.4]\n\nOpportunistic\n\nRandom\n\nPotato\n\nMobySpace\n\ndelivery ratio\n(%)\n45.4 \u00b15.1\n79.6 \u00b13.2\n97.8 \u00b11.7\n99.0 \u00b10.5\n2.2 \u00b10.3\n4.4 \u00b10.9\n9.6 \u00b12.0\n24.5 \u00b12.5\n2.3 \u00b10.4\n5.8 \u00b11.2\n12.3 \u00b11.4\n29.5 \u00b13.0\n3.2 \u00b10.8\n9.6 \u00b11.1\n19.8 \u00b15.6\n36.6 \u00b14.9\n3.4 \u00b10.4\n8.4 \u00b12.4\n19.8 \u00b12.4\n42.3 \u00b14.8\n\ndelay\n(days)\n24.1 \u00b11.7\n13.1 \u00b11.8\n8.7 \u00b11.3\n6.0 \u00b10.9\n15.0 \u00b13.8\n19.8 \u00b12.4\n19.9 \u00b11.0\n10.9 \u00b10.9\n11.6 \u00b14.5\n20.0 \u00b12.6\n17.6 \u00b12.5\n12.5 \u00b11.1\n16.9 \u00b11.4\n19.8 \u00b12.8\n20.2 \u00b11.5\n12.0 \u00b11.3\n14.9 \u00b11.8\n19.5 \u00b12.3\n19.7 \u00b11.2\n13.4 \u00b11.3\n\nroute lengths\n(hops)\n7.0 \u00b10.2\n8.0 \u00b10.4\n7.5 \u00b10.4\n7.1 \u00b10.4\n1.0 \u00b10.0\n1.0 \u00b10.0\n1.0 \u00b10.0\n1.0 \u00b10.0\n2.0 \u00b10.3\n3.0 \u00b10.2\n3.5 \u00b10.1\n3.9 \u00b10.1\n43.0 \u00b112.0\n116.2 \u00b144.2\n162.7 \u00b144.7\n176.6 \u00b114.3\n2.5 \u00b10.2\n3.3 \u00b10.2\n4.0 \u00b10.2\n4.7 \u00b10.2\n\nTABLE IV\nR ESULTS WITH USERS HAVING DIFFERENT ENTROPY.\n\nwhere all the components are used. These simulations show\nthat only few components are needed to be exchanged between\nnodes in order to perform routing.\nC. Mobility pattern learning\nOne important condition for the applicability of the\nMobySpace is whether users can learn their own mobility\npatterns. In this section we provide a first study on this issue\nwith the Dartmouth data.\nFor that purpose, we split the 45 days of Dartmouth data\ninto two periods: the learning period and the routing period.\nThe learning period consists of the first 15 days and the\nrouting period, the last 30 days. We study here how well the\nmobility patterns of nodes learnt in the learning period match\nthe mobility patterns that characterize the routing period. The\nerror is measured as to be the Euclidean distance between\nthe two mobility patterns, divided by the maximum possible\ndistance between two mobility patterns in the hyperplane:\ndij\ne = \u221a , with n the number of dimensions\nn\n\nWe varied the number of days devoted to learning during\nthe learning period, starting with the one day immediately\nprior to the routing period, and working back to cover all\n15 days of the learning period. Fig. 5 shows the prediction\nerror of mobility patterns, as a function of the number of days\ndevoted to learning. We made this computation for all the\nnodes and for only the most active ones. We see that, in both\ncases, the longer nodes learn their own mobility, the closer\ntheir mobility patterns approximate the patterns of the routing\nperiod. As expected, the most active users learn their patterns\nmore rapidly than the others.\n\nl\nl=1\nl=2\nl=3\nl = 536\n\ndelivery ratio\n(%)\n39.2 \u00b15.9\n46.3 \u00b13.3\n47.5 \u00b14.6\n50.4 \u00b14.7\n\ndelay\n(days)\n20.2 \u00b12.6\n19.9 \u00b11.2\n19.4 \u00b11.8\n19.5 \u00b11.3\n\nroute length\n(hops)\n4.9 \u00b10.4\n5.2 \u00b10.2\n5.2 \u00b10.2\n5.1 \u00b10.2\n\nerror (%)\n\nB. Space reduction\nBecause transmitting nodes' mobility patterns can potentially consume bandwidth, we evaluate a scenario in which\nnodes only diffuse the main components of their mobility\npatterns. We ran simulations taking into account only the\nprincipal 1st , 2nd , or 3rd components of mobility patterns of\nnodes, and we consider the most active users.\n\n(5)\n\n2.6\n2.4\n2.2\n2\n1.8\n1.6\n1.4\n1.2\n1\n0.8\n0.6\n\nall users\nmost active users\n\n5\n\n10\n\n15\n\npast learning time (days)\nFig. 5.\n\nPrediction error of mobility patterns.\n\nTABLE V\nR ESULTS WITH SPACE REDUCTION . l\n\nIS THE NUMBER OF COMPONENTS\n\nTAKEN INTO ACCOUNT.\n\nTable V shows that the higher the number of components\ntaken into account, the higher the performance. Surprisingly,\nthe delivery ratio tends very quickly to that of the scenario\n\nThese initial results on the ability of nodes to learn their own\nmobility patterns are encouraging. They indicate that nodes\nmight be able to benefit from their past knowledge to make\nrouting decisions within the MobySpace. Nevertheless, further\nstudies are needed to quantify possible long and short term\ndependencies in mobility traces. This must be also validated\non other mobility traces.\n\n\fVI. R ELATED WORK\nSome work concerning routing in DTNs has been performed\nwith scheduled contacts, such as the paper by Jain et al. [5]\nthat tries to improve the connectivity of an isolated village to\nthe internet based on knowledge of when a low-earth orbiting\nrelay satellite and a motor bike might be available to make the\nnecessary connections. Also of interest, work on interplanetary\nnetworking [15], [16] uses predicted contacts such as the ones\nbetween planets within the framework of a DTN architecture.\nThe case of only opportunistic contacts has been analyzed\nby Vahdat and Becker [7] using the epidemic routing scheme\nthat consists of flooding. The ZebraNet project [17] is exploring this idea to perform studies of animal migrations and\ninter-species interactions. Data are flooded in the network such\nas they get back to access points using animals' mobility. In\norder to control flooding in DTN, Spyropoulos et al. have\nintroduced the Spray and Wait [18] protocol that distributes a\nnumber of copies to relays and then waits until the destination\nmeets one of them. Harras et al. [19] have evaluated simple\ncontrolled message flooding schemes with heuristics based,\nfor instance, on hop limits or timeouts. They also introduce a\nmechanism based on packet erasure. Once a message arrives\nat the destination after basic flooding, the remaining copies\nin the buffers of other nodes are erased. Wang et al. [20]\nreincode the messages with erasure codes and distribute their\ndifferent parts over a large number of relays, so that the\noriginal messages can be reconstituted even if not all packets\nare received. Widmer et al. [21] have explored network coding\ntechniques. All these approaches distribute multiple copies\nof packets, they ensure a high reliability of delivery, and a\nlow latency, but they imply high buffer occupancy and high\nbandwidth consumption. Small et al. [22] propose an analytical\nstudy of existing trade-offs between resources consumption\nsuch as energy, throughput, buffers and the performance in\nterm of latency.\nSome research projects such as Data Mules [23] or\nSeNTD [24] use mobile network elements to transport data\nfrom fixed sensors to a number of access points in an opportunistic fashion. For instance, in SeNTD, data from sensors\nplaced on buoys that monitor the water quality on a lake are\nrelayed by tourist tour-boats or pleasure cruisers.\nA large amount of work concerning routing in DTNs has\nalso been performed with predicted contacts, such as the algorithm of Lindgren et al. [25], which relies on nodes having a\ncommunity mobility pattern. Nodes mainly remain inside their\ncommunity and sometimes visit the others. As a consequence,\na node may transfer a bundle to a node that belongs to the\nsame community as the destination. This algorithm has been\ndesigned as a possible solution to provide internet connectivity\nto the Saami [26] population who live in Swedish Lapland with\na yearly cycle dictated by the natural behavior of reindeer. In a\nsimilar manner, Burns et al. [27] propose a routing algorithm\nthat uses past frequencies of contacts. Also making use of\npast contacts, Davis et al. [28] improved the basic epidemic\nscheme with the introduction of adaptive dropping policies.\n\nRecently, Musolesi et al. [29] have introduced a generic\nmethod that uses Kalman filters to combine and evaluate\nthe multiple dimensions of the context in which nodes are\nin order to take routing decisions. The context is made of\nmeasurements that nodes perform periodically, which can be\nrelated to connectivity, but not necessarily. This mechanism\nallows network architects to define their own hierarchy among\nthe different context attributes. LeBrun et al. [30] propose a\nrouting algorithm for vehicular DTNs using current position\nand trajectories of nodes to predict their future distance to the\ndestination. They replay GPS data collected from actual buses\nin the San Francisco MUNI System, through the NextBus\nproject. Finally, Jones et al. [12] propose a link state routing\nprotocol for DTNs that uses the minimum expected delay as\nthe metric.\nVII. C ONCLUSIONS\n\nAND FUTURE WORK\n\nThe main contribution of this paper has been the validation\nof a generic routing scheme that uses the formalism of a\nhigh-dimensional Euclidean space constructed upon mobility\npatterns, the MobySpace. We have shown through the replay\nof real mobility traces that it can applied to DTNs and that it\ncan bring benefits in terms of enhanced bundle delivery and\nreduced communication costs.\nThis paper has also presented results of a feasibility study\nin order to determine the impact of the characteristics of\nnodes' mobility patterns on the performance and to study\nnodes' ability to learn their patterns. Thus, to make DTN\nrouting work with the MobySpace, nodes need to have a\nminimum level of mobility with mobility patterns that can\nbe sufficiently discriminated. We present encouraging results\nabout the capacity of nodes to learn their own patterns. And,\nwe also see that nodes can reduce the number of components\nin the mobility patterns without a high impact on routing\nperformance. This can reduce the overhead of MobySpace and\nthe complexity of handling mobility patterns.\nFuture work along these lines might include studies concerning the impact of the structure of the Euclidean space, i.e.,\nthe number and type of dimensions, and the similarity function. Different kind of Euclidean space have to be investigated\nby considering schemes like the one described in Sec. III that\ntakes for each dimension the frequency of contacts between\na certain pair of nodes or the one that captures frequential\nproperties during nodes' visits to locations.\nFurther work remains to be done on the stability of mobility\npatterns over time and their ability to be learned by nodes. The\npatterns may contain long term and short term dependencies.\nNodes can have different mobility patterns that are each stable.\nFor instance, they can have one for the week-ends, one for the\nvacations, and one for working weeks.\nAdditionnaly, further validations need to be conducted on\nreal data and in different environments. MobySpace can be\ntested on traces coming from larger cell networks, like GSM\nnetworks. We might also want to evaluate MobySpace in\ndifferent social contexts where nodes have specific mobility\npatterns.\n\n\fACKNOWLEDGMENTS\nWe gratefully acknowledge David Kotz for enabling our\nuse of wireless trace data from the CRAWDAD archive at\nDartmouth College. We thank Marc Giusti and Pierre Lafon at\nthe STIX laboratory (\u00c9cole Polytechnique / CNRS) for access\nto the machines we used for the simulations. This work was\nsupported by E-NEXT, an FP6 IST Network of Excellence\nfunded by the European Commission. Also, LiP6 and Thales\nCommunications, which supported this work through their\njoint research laboratory, Euronetlab, and the ANRT (Association Nationale de la Recherche Technique), which provided\nthe CIFRE grant 135/2004.\nR EFERENCES\n[1] K. Fall, \"A delay-tolerant network architecture for challenged internets,\"\nin Proc. SIGCOMM, 2003.\n[2] J. Leguay, T. Friedman, and V. Conan, \"DTN routing in a mobility\npattern space,\" in Proc. WDTN, 2005.\n[3] \"Delay\nTolerant\nNetwork\nResearch\nGroup\n(DTNRG),\"\nhttp://www.dtnrg.org.\n[4] V. Cerf, S. Burleigh, A. Hooke, L. Torgerson, R. Durst, K. Scott, K. Fall,\nand H. Weiss, \"Delay tolerant network architecture, IRTF draft, draftirtf-dtnrg-arch-02.txt,\" July 2004.\n[5] S. Jain, K. Fall, and R. Patra, \"Routing in a delay tolerant network,\" in\nProc. SIGCOMM, 2004.\n[6] S. Corson, \"Mobile ad hoc networking (MANET): Routing protocol\nperformance issues and evaluation considerations,\" RFC 2501. IETF,\nJanuary 1999.\n[7] A. Vahdat and D. Becker, \"Epidemic routing for partially connected ad\nhoc networks,\" Tech. Rep. CS-200006, Duke University, April 2000.\n[8] P. Hui, A. Chaintreau, J. Scott, R. Gass, J. Crowcroft, and C. Diot,\n\"Pocket switched networks and human mobility in conference environments,\" in Proc. WDTN, 2005.\n[9] T. Henderson, D. Kotz, and I. Abyzov, \"The changing usage of a mature\ncampus-wide wireless network,\" in Proc. Mobicom, 2004.\n[10] M. McNett and G. M. Voelker, \"Access and mobility of wireless PDA\nusers,\" Tech. Rep., UC San Diego, 2004.\n[11] M. Balazinska and P. Castro, \"Characterizing Mobility and Network\nUsage in a Corporate Wireless Local-Area Network,\" in Proc. MobiSys,\n2003.\n[12] E. P. C. Jones, L. Li, and P. A. S. Ward, \"Practical routing in delaytolerant networks,\" in Proc. WDTN, 2005.\n[13] L. Song, D. Kotz, R. Jain, and X. He, \"Evaluating location predictors\nwith extensive Wi-Fi mobility data,\" in Proc. INFOCOM, 2004.\n[14] C. Lonvick, \"The BSD syslog protocol,\" RFC 3164. IETF, August 2001.\n[15] I. F. Akyildiz, O. Akan, C. Chen, J. Fang, and W. Su, \"Interplanetary\ninternet: state-of-the-art and research challenges,\" Computer Networks,\nvol. 43, no. 2, pp. 75\u2013112, 2003.\n[16] S. Burleigh, A. Hooke, L. Torgerson, K. Fall, V. Cerf, B. Durst, and\nK. Scott, \"Delay-tolerant networking: an approach to interplanetary\ninternet,\" IEEE Communications Magazine, vol. 41, no. 6, pp. 128\u2013\n136, 2003.\n[17] H Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, and D. Rubenstein,\n\"Energy-efficient computing for wildlife tracking: Design tradeoffs and\nearly experiences with zebranet,\" in Proc. ASPLOS-X, 2002.\n[18] T. Spyropoulos, K. Psounis, and C. Raghavendra, \"Spray and wait: An\nefficient routing scheme for intermittently connected mobile networks,\"\nin Proc. WDTN, 2005.\n[19] K. Harras, K. Almeroth, and E. Belding-Royer, \"Delay tolerant mobile networks (dtmns): Controlled flooding schemes in sparse mobile\nnetworks,\" in Proc. Netwoking, 2005.\n[20] Y. Wang, S. Jain, M. Martonosi, and K. Fall, \"Erasure coding based\nrouting for opportunistic networks,\" in Proc. WDTN, 2005.\n[21] J. Widmer and J. Le Boudec, \"Network coding for efficient communication in extreme networks,\" in Proc. WDTN, 2005.\n[22] T. Small and Z. J. Haas, \"Resource and performance tradeoffs in delaytolerant wireless networks,\" in Proc. WDTN, 2005.\n\n[23] R. Shah, S. Jain S. Roy, and W. Brunette, \"Data mules: Modeling a\nthree-tier architecture for sparse sensor networks,\" Tech. Rep. IRS-TR03-001, Intel Research Seattle, January 2003.\n[24] \"Sensor\nnetworking\nwith\ndelay\ntolerance\n(SeNDT),\"\nhttp://down.dsg.cs.tcd.ie/sendt/.\n[25] A. Lindgren, A. Doria, and O. Schelen, \"Probabilistic routing in\nintermittently connected networks,\" in Proc. SAPIR, 2004.\n[26] A. Doria, M. Uden, and D. P. Pandley, \"Providing connectivity to\nthe Saami nomadic community,\" in Proc. Developement by Design\nConference, 2002.\n[27] B. Burns, O. Brock, and B. N. Levine, \"MV routing and capacity\nbuilding in disruption tolerant networks,\" in Proc. Infocom, 2005.\n[28] J. A. Davis, A. H. Fagg, and B. N. Levine, \"Wearable computers as\npacket transport mechanisms in highly-partitioned ad-hoc networks,\" in\nProc. ISWC, 2001.\n[29] M. Musolesi, S. Hailes, and C. Mascolo, \"Adaptive routing for\nintermittently connected mobile ad hoc networks,\" in Proc. WOWMOM,\n2005.\n[30] J. LeBrun, C. Chuah, and D. Ghosal, \"Knowledge based opportunistic\nforwarding in vehicular wireless ad hoc networks,\" in Proc. VTC Spring,\n2005.\n\n\f"}