<PAPER>
  <S sid="0">Mixture-Model Adaptation for SMT</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We describe a mixture-model approach to adapting a Statistical Machine Translation System for new domains, using weights that depend on text distances to mixture components.</S>
    <S sid="2" ssid="2">We investigate a number of variants on this approach, including cross-domain versus dynamic adaptation; linear versus loglinear mixtures; language and translation model adaptation; different methods of assigning weights; and granularity of the source unit being adapted to.</S>
    <S sid="3" ssid="3">The best methods achieve gains of approximately one BLEU percentage point over a state-of-the art non-adapted baseline system.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="4" ssid="1">Language varies significantly across different genres, topics, styles, etc.</S>
    <S sid="5" ssid="2">This affects empirical models: a model trained on a corpus of car-repair manuals, for instance, will not be well suited to an application in the field of tourism.</S>
    <S sid="6" ssid="3">Ideally, models should be trained on text that is representative of the area in which they will be used, but such text is not always available.</S>
    <S sid="7" ssid="4">This is especially the case for bilingual applications, because parallel training corpora are relatively rare and tend to be drawn from specific domains such as parliamentary proceedings.</S>
    <S sid="8" ssid="5">In this paper we address the problem of adapting a statistical machine translation system by adjusting its parameters based on some information about a test domain.</S>
    <S sid="9" ssid="6">We assume two basic settings.</S>
    <S sid="10" ssid="7">In cross-domain adaptation, a small sample of parallel in-domain text is available, and it is used to optimize for translating future texts drawn from the same domain.</S>
    <S sid="11" ssid="8">In dynamic adaptation, no domain information is available ahead of time, and adaptation is based on the current source text under translation.</S>
    <S sid="12" ssid="9">Approaches developed for the two settings can be complementary: an in-domain development corpus can be used to make broad adjustments, which can then be fine tuned for individual source texts.</S>
    <S sid="13" ssid="10">Our method is based on the classical technique of mixture modeling (Hastie et al., 2001).</S>
    <S sid="14" ssid="11">This involves dividing the training corpus into different components, training a model on each part, then weighting each model appropriately for the current context.</S>
    <S sid="15" ssid="12">Mixture modeling is a simple framework that encompasses many different variants, as described below.</S>
    <S sid="16" ssid="13">It is naturally fairly low dimensional, because as the number of sub-models increases, the amount of text available to train each, and therefore its reliability, decreases.</S>
    <S sid="17" ssid="14">This makes it suitable for discriminative SMT training, which is still a challenge for large parameter sets (Tillmann and Zhang, 2006; Liang et al., 2006).</S>
    <S sid="18" ssid="15">Techniques for assigning mixture weights depend on the setting.</S>
    <S sid="19" ssid="16">In cross-domain adaptation, knowledge of both source and target texts in the in-domain sample can be used to optimize weights directly.</S>
    <S sid="20" ssid="17">In dynamic adaptation, training poses a problem because no reference text is available.</S>
    <S sid="21" ssid="18">Our solution is to construct a multi-domain development sample for learning parameter settings that are intended to generalize to new domains (ones not represented in the sample).</S>
    <S sid="22" ssid="19">We do not learn mixture weights directly with this method, because there is little hope that these would be well suited to new domains.</S>
    <S sid="23" ssid="20">Instead we attempt to learn how weights should be set as a function of distance.</S>
    <S sid="24" ssid="21">To our knowledge, this approach to dynamic adaptation for SMT is novel, and it is one of the main contributions of the paper.</S>
    <S sid="25" ssid="22">A second contribution is a fairly broad investigation of the large space of alternatives defined by the mixture-modeling framework, using a simple genrebased corpus decomposition.</S>
    <S sid="26" ssid="23">We experimented with the following choices: cross-domain versus dynamic adaptation; linear versus loglinear mixtures; language and translation model adaptation; various text distance metrics; different ways of converting distance metrics into weights; and granularity of the source unit being adapted to.</S>
    <S sid="27" ssid="24">The remainder of the paper is structured follows: section 2 briefly describes our phrase-based SMT system; section 3 describes mixture-model adaptation; section 4 gives experimental results; section 5 summarizes previous work; and section 6 concludes.</S>
  </SECTION>
  <SECTION title="2 Phrase-based Statistical MT" number="2">
    <S sid="28" ssid="1">Our baseline is a standard phrase-based SMT system (Koehn et al., 2003).</S>
    <S sid="29" ssid="2">Given a source sentence s, this tries to find the target sentence t&#65533; that is the most likely translation of s, using the Viterbi approximation: where alignment a = (91, &#65533;t1, j1), ..., (sK, tK, jK); tk are target phrases such that t = &#65533;t1 ... tK; sk are source phrases such that s = gj1 ... sjK; and 9k is the translation of the kth target phrase tk.</S>
    <S sid="30" ssid="3">To model p(t, a|s), we use a standard loglinear approach: where each fi(s, t, a) is a feature function, and weights &#945;i are set using Och&#8217;s algorithm (Och, 2003) to maximize the system&#8217;s BLEU score (Papineni et al., 2001) on a development corpus.</S>
    <S sid="31" ssid="4">The features used in this study are: the length of t; a single-parameter distortion penalty on phrase reordering in a, as described in (Koehn et al., 2003); phrase translation model probabilities; and 4-gram language model probabilities logp(t), using Kneser-Ney smoothing as implemented in the SRILM toolkit.</S>
    <S sid="32" ssid="5">Phrase translation model probabilities are features of the form: log p(s|t,a) &#8776; EKk=1 log p(gk|&#65533;tk).</S>
    <S sid="33" ssid="6">We use two different estimates for the conditional probabilities p(&#65533;t|g) and p(g|&#65533;t): relative frequencies and &#8220;lexical&#8221; probabilities as described in (Zens and Ney, 2004).</S>
    <S sid="34" ssid="7">In both cases, the &#8220;forward&#8221; phrase probabilities p(&#65533;t|s) are not used as features, but only as a filter on the set of possible translations: for each source phrase s&#65533; that matches some ngram in s, only the 30 top-ranked translations t according to p(&#65533;t|g) are retained.</S>
    <S sid="35" ssid="8">To derive the joint counts c(g, t) from which p(s|&#65533; and p(&#65533;t|s) are estimated, we use the phrase induction algorithm described in (Koehn et al., 2003), with symmetrized word alignments generated using IBM model 2 (Brown et al., 1993).</S>
  </SECTION>
  <SECTION title="3 Mixture-Model Adaptation" number="3">
    <S sid="36" ssid="1">Our approach to mixture-model adaptation can be summarized by the following general algorithm: from several different domains.</S>
    <S sid="37" ssid="2">Set mixture weights as a function of the distances from corpus components to the current source text.</S>
    <S sid="38" ssid="3">4.</S>
    <S sid="39" ssid="4">Combine weighted component models into a single global model, and use it to translate as described in the previous section.</S>
    <S sid="40" ssid="5">We now describe each aspect of this algorithm in more detail.</S>
    <S sid="41" ssid="6">We partition the corpus into different genres, defined as being roughly identical to corpus source.</S>
    <S sid="42" ssid="7">This is the simplest way to exploit heterogeneous training material for adaptation.</S>
    <S sid="43" ssid="8">An alternative, which we have not explored, would be to cluster the corpus automatically according to topic.</S>
    <S sid="44" ssid="9">We adapt both language and translation model features within the overall loglinear combination (1).</S>
    <S sid="45" ssid="10">To train translation models on each corpus component, we used a global IBM2 model for word alignment (in order to avoid degradation in alignment quality due to smaller training corpora), then extracted component-specific relative frequencies for phrase pairs.</S>
    <S sid="46" ssid="11">Lexical probabilities were also derived from the global IBM2 model, and were not adapted.</S>
    <S sid="47" ssid="12">The procedure for training component-specific language models on the target halves of each corpus component is identical to the procedure for the global model described in section 2.</S>
    <S sid="48" ssid="13">In addition to the component models, we also used a large static global model.</S>
    <S sid="49" ssid="14">The most commonly-used framework for mixture models is a linear one: where p(x|h) is either a language or translation model; pc(x|h) is a model trained on component c, and &#955;c is the corresponding weight.</S>
    <S sid="50" ssid="15">An alternative, suggested by the form of the global model, is a loglinear combination: where we write &#945;c to emphasize that in this case the mixing parameters are global weights, like the weights on the other features within the loglinear model.</S>
    <S sid="51" ssid="16">This is in contrast to linear mixing, where the combined model p(x|h) receives a loglinear weight, but the weights on the components do not participate in the global loglinear combination.</S>
    <S sid="52" ssid="17">One consequence is that it is more difficult to set linear weights using standard minimum-error training techniques, which assume only a &#8220;flat&#8221; loglinear model.</S>
    <S sid="53" ssid="18">We used four standard distance metrics to capture the relation between the current source or target text q and each corpus component.1 All are monolingual&#8212;they are applied only to source text or only to target text.</S>
    <S sid="54" ssid="19">The tf/idf metric commonly used in information retrieval is defined as cos(vc, vq), where vr and vq are vectors derived from component c and document q, each consisting of elements of the form: &#8722;p(w)log pdoc(w), where p(w) is the relative frequency of word w within the component or document, and pdoc(w) is the proportion of components it appears in.</S>
    <S sid="55" ssid="20">Latent Semantic Analysis (LSA) (Deerwester et al., 1990) is a technique for implicitly capturing the semantic properties of texts, based on the use of Singular Value Decomposition to produce a rankreduced approximation of an original matrix of word and document frequencies.</S>
    <S sid="56" ssid="21">We applied this technique to all documents in the training corpus (as opposed to components), reduced the rank to 100, then calculated the projections of the component and document vectors described in the previous paragraph into the reduced space.</S>
    <S sid="57" ssid="22">Perplexity (Jelinek, 1997) is a standard way of evaluating the quality of a language model on a test text.</S>
    <S sid="58" ssid="23">We define a perplexity-based distance metric pc(q)1/|q|, where pc(q) is the probability assigned to q by an ngram language model trained on component c. The final distance metric, which we call EM, is based on expressing the probability of q as a wordlevel mixture model: p(q) = &#65533;|q |Ec dcpc(wi|hi), where q = wl ... w|q|, and pc(w|h) is the ngram probability of w following word sequence h in component c. It is straighforward to use the EM algorithm to find the set of weights &#65533;dc, Vc that maximizes the likelihood of q.</S>
    <S sid="59" ssid="24">The weight dc is defined as the distance to component c. For all experiments described below, we used a probability difference threshold of 0.001 as the EM convergence criterion.</S>
    <S sid="60" ssid="25">Our focus in this paper is on adaptation via mixture weights.</S>
    <S sid="61" ssid="26">However, we note that the usual loglinear parameter tuning described in section 2 can also be considered adaptation in the cross-domain setting, because learned preferences for word penalty, relative LM/TM weighting, etc, will reflect the target domain.</S>
    <S sid="62" ssid="27">This is not the case for dynamic adaptation, where, in the absence of an in-domain development corpus, the only information we can hope to glean are the weights on adapted models compared to other features of the system.</S>
    <S sid="63" ssid="28">The method used for adapting mixture weights depends on both the combining framework (loglinear versus linear), and the adaptive setting (crossdomain versus dynamic), as described below.</S>
    <S sid="64" ssid="29">When using a loglinear combining framework as described in section 3.3, mixture weights are set in the same way as the other loglinear parameters when performing cross-domain adaptation.</S>
    <S sid="65" ssid="30">Loglinear mixture models were not used for dynamic adaptation.</S>
    <S sid="66" ssid="31">For both adaptive settings, linear mixture weights were set as a function of the distance metrics described in section 3.4.</S>
    <S sid="67" ssid="32">Given a set of metrics {D1, ... , Dm}, let di,c be the distance from the current text to component c according to metric Di.</S>
    <S sid="68" ssid="33">A simple approach to weighting is to choose a single metric Di, and set the weights in (2) to be proportional to the corresponding distances: Because different distance metrics may capture complementary information, and because optimal weights might be a non-linear function of distance, we also experimented with a linear combination of metrics transformed using a sigmoid function: where Qi reflects the relative predictive power of Di, and the sigmoid parametes ai and bi can be set to selectively suppress contributions from components that are far away.</S>
    <S sid="69" ssid="34">Here we assume that Qi absorbs a normalization constant, so that the Ac&#8217;s sum to 1.</S>
    <S sid="70" ssid="35">In this approach, there are three parameters per distance metric to learn: Qi, ai, and bi.</S>
    <S sid="71" ssid="36">In general, these parameters are also specific to the particular model being adapted, ie the LM or the TM.</S>
    <S sid="72" ssid="37">To optimize these parameters, we fixed global loglinear weights at values obtained with Och&#8217;s algorithm using representative adapted models based on a single distance metric in (3), then used the Downhill Simplex algorithm (Press et al., 2002) to maximize BLEU score on the development corpus.</S>
    <S sid="73" ssid="38">For tractability, we followed standard practice with this technique and considered only monotonic alignments when decoding (Zens and Ney, 2004).</S>
    <S sid="74" ssid="39">The two approaches just described avoid conditioning Ac explicitly on c. This is necessary for dynamic adaptation, since any genre preferences learned from the development corpus cannot be expected to generalize.</S>
    <S sid="75" ssid="40">However, it is not necessary for cross-domain adaptation, where the genre of the development corpus is assumed to represent the test domain.</S>
    <S sid="76" ssid="41">Therefore, we also experimented with using Downhill Simplex optimization to directly learn the set of linear weights Ac that yield maximum BLEU score on the development corpus.</S>
    <S sid="77" ssid="42">A final variant on setting linear mixture weights is a hybrid between cross-domain and dynamic adaptation.</S>
    <S sid="78" ssid="43">In this approach, both the global loglinear weights and, if they are being used, the mixture parameters Qi, ai, bi are set to characterize the test domain as in cross-domain adaptation.</S>
    <S sid="79" ssid="44">When translating, however, distances to the current source text are used in (3) or (4) instead of distances to the indomain development corpus.</S>
    <S sid="80" ssid="45">This obviously limits the metrics used to ones that depend only on source text.</S>
  </SECTION>
  <SECTION title="4 Experiments" number="4">
    <S sid="81" ssid="1">All experiments were run on the NIST MT evaluation 2006 Chinese data set.</S>
    <S sid="82" ssid="2">Table 1 summarizes the corpora used.</S>
    <S sid="83" ssid="3">The training corpus was divided into seven components according to genre; in all cases these were identical to LDC corpora, with the exception of the Newswire component, which was amalgamated from several smaller corpora.</S>
    <S sid="84" ssid="4">The target genre for cross-domain adaptation was newswire, for which high-quality training material is available.</S>
    <S sid="85" ssid="5">The cross-domain development set NIST04nw is the newswire subset of the NIST 2004 evaluation set, and the dynamic adaptation development set NIST04-mix is a balanced mixed-genre subset of NIST 2004.</S>
    <S sid="86" ssid="6">The NIST 2005 evaluation set was used for testing cross-domain adaptation, and the NIST 2006 evaluation set (both the &#8220;GALE&#8221; and &#8220;NIST&#8221; parts) was used to test dynamic adaptation.</S>
    <S sid="87" ssid="7">Because different development corpora are used for cross-domain and dynamic adaptation, we trained one static baseline model for each of these adaptation settings, on the corresponding development set.</S>
    <S sid="88" ssid="8">All results given in this section are BLEU scores. newswire, sp = speeches, ed = editorial, ng = newsgroup, bn = broadcast news, and bc = broadcast conversation.</S>
    <S sid="89" ssid="9">Table 2 shows a comparison between linear and loglinear mixing frameworks, with uniform weights used in the linear mixture.</S>
    <S sid="90" ssid="10">Both types of mixture model are better than the baseline, but the linear mixture is slightly better than the loglinear mixture.</S>
    <S sid="91" ssid="11">This is quite surprising, because these results are on the development set: the loglinear model tunes its component weights on this set, whereas the linear model only adjusts global LM and TM weights.</S>
    <S sid="92" ssid="12">We speculated that this may have been due to non-smooth component models, and tried various smoothing schemes, including Kneser-Ney phrase table smoothing similar to that described in (Foster et al., 2006), and binary features to indicate phrasepair presence within different components.</S>
    <S sid="93" ssid="13">None helped, however, and we conclude that the problem is most likely that Och&#8217;s algorithm is unable to find a good maximimum in this setting.</S>
    <S sid="94" ssid="14">Due to this result, all experiments we describe below involve linear mixtures only.</S>
    <S sid="95" ssid="15">Table 3 compares the performance of all distance metrics described in section 3.4 when used on their own as defined in (3).</S>
    <S sid="96" ssid="16">The difference between them is fairly small, but appears to be consistent across LM and TM adaptation and (for the LM metrics) across source and target side matching.</S>
    <S sid="97" ssid="17">In general, LM metrics seem to have a slight advantage over the vector space metrics, with EM being the best overall.</S>
    <S sid="98" ssid="18">We focus on this metric for most of the experiments that follow. the NIST04-nw development set.</S>
    <S sid="99" ssid="19">(Entries in the top right corner are missing due to lack of time.)</S>
    <S sid="100" ssid="20">Table 4 shows the performance of the parameterized weighting function described by (4), with source-side EM and LSA metrics as inputs.</S>
    <S sid="101" ssid="21">This is compared to direct weight optimization, as both these techniques use Downhill Simplex for parameter tuning.</S>
    <S sid="102" ssid="22">Unfortunately, neither is able to beat the performance of the normalized source-side EM metric on its own (reproduced on the first line from table 3).</S>
    <S sid="103" ssid="23">In additional tests we verified that this also holds for the test corpus.</S>
    <S sid="104" ssid="24">We speculate that this disappointing result is due to compromises made in order to run Downhill Simplex efficiently, including holding global weights fixed, using only a single starting point, and running with monotone decoding. tion on the NIST04-nw development set. formance of cross domain adaptation (reproduced from table 5 on the second line) is slightly better for the in-domain test set (NIST05), but worse than dynamic adaptation on the two mixed-domain sets.</S>
    <S sid="105" ssid="25">Table 5 shows results for cross-domain adaptation, using the source-side EM metric for linear weighting.</S>
    <S sid="106" ssid="26">Both LM and TM adaptation are effective, with test-set improvements of approximately 1 BLEU point over the baseline for LM adaptation and somewhat less for TM adaptation.</S>
    <S sid="107" ssid="27">Performance also improves on the NIST06 out-of-domain test set (although this set includes a newswire portion as well).</S>
    <S sid="108" ssid="28">However, combined LM and TM adaptation is not better than LM adaptation on its own, indicating that the individual adapted models may be capturing the same information.</S>
    <S sid="109" ssid="29">Table 6 contains results for dynamic adaptation, using the source-side EM metric for linear weighting.</S>
    <S sid="110" ssid="30">In this setting, TM adaptation is much less effective, not significantly better than the baseline; performance of combined LM and TM adaptation is also lower.</S>
    <S sid="111" ssid="31">However, LM adaptation improves over the baseline by up to a BLEU point.</S>
    <S sid="112" ssid="32">The perTable 7 shows results for the hybrid approach described at the end of section 3.5.2: global weights are learned on NIST04-nw, but linear weights are derived dynamically from the current test file.</S>
    <S sid="113" ssid="33">Performance drops slightly compared to pure crossdomain adaptation, indicating that it may be important to have a good fit between global and mixture weights.</S>
    <S sid="114" ssid="34">The results of the final experiment, to determine the effects of source granularity on dynamic adaptation, are shown in table 8.</S>
    <S sid="115" ssid="35">Source-side EM distances are applied to the whole test set, to genres within the set, and to each document individually.</S>
    <S sid="116" ssid="36">Global weights were tuned specifically for each of these conditions.</S>
    <S sid="117" ssid="37">There appears to be little difference among these approaches, although genre-based adaptation perhaps has a slight advantage.</S>
  </SECTION>
  <SECTION title="5 Related Work" number="5">
    <S sid="118" ssid="1">Mixture modeling is a standard technique in machine learning (Hastie et al., 2001).</S>
    <S sid="119" ssid="2">It has been widely used to adapt language models for speech recognition and other applications, for instance using cross-domain topic mixtures, (Iyer and Ostendorf, 1999), dynamic topic mixtures (Kneser and Steinbiss, 1993), hierachical mixtures (Florian and Yarowsky, 1999), and cache mixtures (Kuhn and De Mori, 1990).</S>
    <S sid="120" ssid="3">Most previous work on adaptive SMT focuses on the use of IR techniques to identify a relevant subset of the training corpus from which an adapted model can be learned.</S>
    <S sid="121" ssid="4">Byrne et al (2003) use cosine distance from the current source document to find relevant parallel texts for training an adapted translation model, with background information for smoothing alignments.</S>
    <S sid="122" ssid="5">Hildebrand et al (1995) describe a similar approach, but apply it at the sentence level, and use it for language model as well as translation model adaptation.</S>
    <S sid="123" ssid="6">They rely on a perplexity heuristic to determine an optimal size for the relevant subset.</S>
    <S sid="124" ssid="7">Zhao et al (2004) apply a slightly different sentence-level strategy to language model adaptation, first generating an nbest list with a baseline system, then finding similar sentences in a monolingual target-language corpus.</S>
    <S sid="125" ssid="8">This approach has the advantage of not limiting LM adaptation to a parallel corpus, but the disadvantage of requiring two translation passes (one to generate the nbest lists, and another to translate with the adapted model).</S>
    <S sid="126" ssid="9">Ueffing (2006) describes a self-training approach that also uses a two-pass algorithm.</S>
    <S sid="127" ssid="10">A baseline system generates translations that, after confidence filtering, are used to construct a parallel corpus based on the test set.</S>
    <S sid="128" ssid="11">Standard phrase-extraction techniques are then applied to extract an adapted phrase table from the system&#8217;s own output.</S>
    <S sid="129" ssid="12">Finally, Zhang et al (2006) cluster the parallel training corpus using an algorithm that heuristically minimizes the average entropy of source-side and target-side language models over a fixed number of clusters.</S>
    <S sid="130" ssid="13">Each source sentence is then decoded using the language model trained on the cluster that assigns highest likelihood to that sentence.</S>
    <S sid="131" ssid="14">The work we present here is complementary to both the IR approaches and Ueffing&#8217;s method because it provides a way of exploiting a preestablished corpus division.</S>
    <S sid="132" ssid="15">This has the potential to allow sentences having little surface similarity to the current source text to contribute statistics that may be relevant to its translation, for instance by raising the probability of rare but pertinent words.</S>
    <S sid="133" ssid="16">Our work can also be seen as extending all previous approaches in that it assigns weights to components depending on their degree of relevance, rather than assuming a binary distinction between relevant and non-relevant components.</S>
  </SECTION>
  <SECTION title="6 Conclusion and Future Work" number="6">
    <S sid="134" ssid="1">We have investigated a number of approaches to mixture-based adaptation using genres for Chinese to English translation.</S>
    <S sid="135" ssid="2">The most successful is to weight component models in proportion to maximum-likelihood (EM) weights for the current text given an ngram language model mixture trained on corpus components.</S>
    <S sid="136" ssid="3">This resulted in gains of around one BLEU point.</S>
    <S sid="137" ssid="4">A more sophisticated approach that attempts to transform and combine multiple distance metrics did not yield positive results, probably due to an unsucessful optmization procedure.</S>
    <S sid="138" ssid="5">Other conclusions are: linear mixtures are more tractable than loglinear ones; LM-based metrics are better than VS-based ones; LM adaptation works well, and adding an adapted TM yields no improvement; cross-domain adaptation is optimal, but dynamic adaptation is a good fallback strategy; and source granularity at the genre level is better than the document or test-set level.</S>
    <S sid="139" ssid="6">In future work, we plan to improve the optimization procedure for parameterized weight functions.</S>
    <S sid="140" ssid="7">We will also look at bilingual metrics for crossdomain adaptation, and investigate better combinations of cross-domain and dynamic adaptation.</S>
  </SECTION>
</PAPER>
