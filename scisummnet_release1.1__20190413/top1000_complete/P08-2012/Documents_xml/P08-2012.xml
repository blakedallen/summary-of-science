<PAPER>
  <S sid="0">Enforcing Transitivity in Coreference Resolution</S>
  <ABSTRACT>
    <S sid="1" ssid="1">A desirable quality of a coreference resolution system is the ability to handle transitivity constraints, such that even if it places high likelihood on a particular mention being coreferent with each of two other mentions, it will also consider the likelihood of those two mentions being coreferent when making a final assignment.</S>
    <S sid="2" ssid="2">This is exactly the kind of constraint that integer linear programming (ILP) is ideal for, but, surprisingly, previous work applying ILP to coreference resolution has not encoded this type of constraint.</S>
    <S sid="3" ssid="3">We train a coreference classifier over pairs of mentions, and show how to encode this type of constraint on top of the probabilities output from our pairwise classifier to extract the most probable legal entity assignments.</S>
    <S sid="4" ssid="4">We present results on two commonly used datasets which show that enforcement of transitive closure consistently improves performance, including imof up to 3.6% using the and up to 16.5% using cluster f-measure.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">Much recent work on coreference resolution, which is the task of deciding which noun phrases, or mentions, in a document refer to the same real world entity, builds on Soon et al. (2001).</S>
    <S sid="6" ssid="2">They built a decision tree classifier to label pairs of mentions as coreferent or not.</S>
    <S sid="7" ssid="3">Using their classifier, they would build up coreference chains, where each mention was linked up with the most recent previous mention that the classifier labeled as coreferent, if such a mention existed.</S>
    <S sid="8" ssid="4">Transitive closure in this model was done implicitly.</S>
    <S sid="9" ssid="5">If John Smith was labeled coreferent with Smith, and Smith with Jane Smith, then John Smith and Jane Smith were also coreferent regardless of the classifier&#8217;s evaluation of that pair.</S>
    <S sid="10" ssid="6">Much work that followed improved upon this strategy, by improving the features (Ng and Cardie, 2002b), the type of classifier (Denis and Baldridge, 2007), and changing mention links to be to the most likely antecedent rather than the most recent positively labeled antecedent (Ng and Cardie, 2002b).</S>
    <S sid="11" ssid="7">This line of work has largely ignored the implicit transitivity of the decisions made, and can result in unintuitive chains such as the Smith chain just described, where each pairwise decision is sensible, but the final result is not.</S>
    <S sid="12" ssid="8">Ng and Cardie (2002a) and Ng (2004) highlight the problem of determining whether or not common noun phrases are anaphoric.</S>
    <S sid="13" ssid="9">They use two classifiers, an anaphoricity classifier, which decides if a mention should have an antecedent and a pairwise classifier similar those just discussed, which are combined in a cascaded manner.</S>
    <S sid="14" ssid="10">More recently, Denis and Baldridge (2007) utilized an integer linear programming (ILP) solver to better combine the decisions made by these two complementary classifiers, by finding the globally optimal solution according to both classifiers.</S>
    <S sid="15" ssid="11">However, when encoding constraints into their ILP solver, they did not enforce transitivity.</S>
    <S sid="16" ssid="12">The goal of the present work is simply to show that transitivity constraints are a useful source of information, which can and should be incorporated into an ILP-based coreference system.</S>
    <S sid="17" ssid="13">For this goal, we put aside the anaphoricity classifier and focus on the pairwise classifier and transitivity constraints.</S>
    <S sid="18" ssid="14">We build a pairwise logistic classifier, trained on all pairs of mentions, and then at test time we use an ILP solver equipped with transitivity constraints to find the most likely legal assignment to the variables which represent the pairwise decisions.1 Our results show a significant improvement compared to the naive use of the pairwise classifier.</S>
    <S sid="19" ssid="15">Other work on global models of coreference (as opposed to pairwise models) has included: Luo et al. (2004) who used a Bell tree whose leaves represent possible partitionings of the mentions into entities and then trained a model for searching the tree; McCallum and Wellner (2004) who defined several conditional random field-based models; Ng (2005) who took a reranking approach; and Culotta et al.</S>
    <S sid="20" ssid="16">(2006) who use a probabilistic first-order logic model.</S>
  </SECTION>
  <SECTION title="2 Coreference Resolution" number="2">
    <S sid="21" ssid="1">For this task we are given a document which is annotated with a set of mentions, and the goal is to cluster the mentions which refer to the same entity.</S>
    <S sid="22" ssid="2">When describing our model, we build upon the notation used by Denis and Baldridge (2007).</S>
    <S sid="23" ssid="3">Our baseline systems are based on a logistic classifier over pairs of mentions.</S>
    <S sid="24" ssid="4">The probability of a pair of mentions takes the standard logistic form: where mi and mj correspond to mentions i and 3 respectively; f(mi, mj) is a feature function over a pair of mentions; 0 are the feature weights we wish to learn; and x(i j) is a boolean variable which takes value 1 if mi and mj are coreferent, and 0 if they are not.</S>
    <S sid="25" ssid="5">The log likelihood of a document is the sum of the log likelihoods of all pairs of mentions: (2) where m is the set of mentions in the document, and x is the set of variables representing each pairwise coreference decision x(i,j).</S>
    <S sid="26" ssid="6">Note that this model is degenerate, because it assigns probability mass to nonsensical clusterings.</S>
    <S sid="27" ssid="7">Specifically, it will allow Prior work (Soon et al., 2001; Denis and Baldridge, 2007) has generated training data for pairwise classifiers in the following manner.</S>
    <S sid="28" ssid="8">For each mention, work backwards through the preceding mentions in the document until you come to a true coreferent mention.</S>
    <S sid="29" ssid="9">Create negative examples for all intermediate mentions, and a positive example for the mention and its correct antecedent.</S>
    <S sid="30" ssid="10">This approach made sense for Soon et al. (2001) because testing proceeded in a similar manner: for each mention, work backwards until you find a previous mention which the classifier thinks is coreferent, add a link, and terminate the search.</S>
    <S sid="31" ssid="11">The COREF-ILP model of Denis and Baldridge (2007) took a different approach at test time: for each mention they would work backwards and add a link for all previous mentions which the classifier deemed coreferent.</S>
    <S sid="32" ssid="12">This is equivalent to finding the most likely assignment to each x(i,j) in Equation 2.</S>
    <S sid="33" ssid="13">As noted, these assignments may not be a legal clustering because there is no guarantee of transitivity.</S>
    <S sid="34" ssid="14">The transitive closure happens in an ad-hoc manner after this assignment is found: any two mentions linked through other mentions are determined to be coreferent.</S>
    <S sid="35" ssid="15">Our SOON-STYLE baseline used the same training and testing regimen as Soon et al. (2001).</S>
    <S sid="36" ssid="16">Our D&amp;B-STYLE baseline used the same test time method as Denis and Baldridge (2007), however at training time we created data for all mention pairs.</S>
    <S sid="37" ssid="17">Because of the ad-hoc manner in which transitivity is enforced in our baseline systems, we do not necessarily find the most probable legal clustering.</S>
    <S sid="38" ssid="18">This is exactly the kind of task at which integer linear programming excels.</S>
    <S sid="39" ssid="19">We need to first formulate the objective function which we wish the ILP solver to maximize at test time.2 Let p(i j) = log P(x(i ,j)  |mi, mj; 0), which is the log probability that mi and mj are coreferent according to the pairwise logistic classifier discussed in the previous section, and let p(i,j) = log(1 &#8722; p(i,j)), be the log probability that they are not coreferent.</S>
    <S sid="40" ssid="20">Our objective function is then the log probability of a particular (possibly illegal) variable assignment: We add binary constraints on each of the variables: x(i,j) E 10, 11.</S>
    <S sid="41" ssid="21">We also add constraints, over each triple of mentions, to enforce transitivity: This constraint ensures that whenever x(zj) = x(j&#65533;k) = 1 it must also be the case that x(z&#65533;k) = 1.</S>
  </SECTION>
  <SECTION title="3 Experiments" number="3">
    <S sid="42" ssid="1">We used lp solve3 to solve our ILP optimization problems.</S>
    <S sid="43" ssid="2">We ran experiments on two datasets.</S>
    <S sid="44" ssid="3">We used the MUC-6 formal training and test data, as well as the NWIRE and BNEWS portions of the ACE (Phase 2) corpus.</S>
    <S sid="45" ssid="4">This corpus had a third portion, NPAPER, but we found that several documents where too long for lp solve to find a solution.4 We added named entity (NE) tags to the data using the tagger of Finkel et al. (2005).</S>
    <S sid="46" ssid="5">The ACE data is already annotated with NE tags, so when they conflicted they overrode the tags output by the tagger.</S>
    <S sid="47" ssid="6">We also added part of speech (POS) tags to the data using the tagger of Toutanova et al. (2003), and used the tags to decide if mentions were plural or singular.</S>
    <S sid="48" ssid="7">The ACE data is labeled with mention type (pronominal, nominal, and name), but the MUC6 data is not, so the POS and NE tags were used to infer this information.</S>
    <S sid="49" ssid="8">Our feature set was simple, and included many features from (Soon et al., 2001), including the pronoun, string match, definite and demonstrative NP, number and gender agreement, proper name and appositive features.</S>
    <S sid="50" ssid="9">We had additional features for NE tags, head matching and head substring matching.</S>
    <S sid="51" ssid="10">The MUC scorer (Vilain et al., 1995) is a popular coreference evaluation metric, but we found it to be fatally flawed.</S>
    <S sid="52" ssid="11">As observed by Luo et al. (2004), if all mentions in each document are placed into a single entity, the results on the MUC-6 formal test set are 100% recall, 78.9% precision, and 88.2% F1 score &#8211; significantly higher than any published system.</S>
    <S sid="53" ssid="12">The V scorer (Amit and Baldwin, 1998) was proposed to overcome several shortcomings of the MUC scorer.</S>
    <S sid="54" ssid="13">However, coreference resolution is a clustering task, and many cluster scorers already exist.</S>
    <S sid="55" ssid="14">In addition to the MUC and V scorers, we also evaluate using cluster f-measure (Ghosh, 2003), which is the standard f-measure computed over true/false coreference decisions for pairs of mentions; the Rand index (Rand, 1971), which is pairwise accuracy of the clustering; and variation of information (Meila, 2003), which utilizes the entropy of the clusterings and their mutual information (and for which lower values are better).</S>
    <S sid="56" ssid="15">Our results are summarized in Table 1.</S>
    <S sid="57" ssid="16">We show performance for both baseline classifiers, as well as our ILP-based classifier, which finds the most probable legal assignment to the variables representing coreference decisions over pairs of mentions.</S>
    <S sid="58" ssid="17">For comparison, we also give the results of the COREFILP system of Denis and Baldridge (2007), which was also based on a naive pairwise classifier.</S>
    <S sid="59" ssid="18">They used an ILP solver to find an assignment for the variables, but as they note at the end of Section 5.1, it is equivalent to taking all links for which the classifier returns a probability &gt; 0.5, and so the ILP solver is not really necessary.</S>
    <S sid="60" ssid="19">We also include their JOINTILP numbers, however that system makes use of an additional anaphoricity classifier.</S>
    <S sid="61" ssid="20">For all three corpora, the ILP model beat both baselines for the cluster f-score, Rand index, and variation of information metrics.</S>
    <S sid="62" ssid="21">Using the V metric, the ILP system and the D&amp;B-STYLE baseline performed about the same on the MUC-6 corpus, though for both ACE corpora, the ILP system was the clear winner.</S>
    <S sid="63" ssid="22">When using the MUC scorer, the ILP system always did worse than the D&amp;B-STYLE baseline.</S>
    <S sid="64" ssid="23">However, this is precisely because the transitivity constraints tend to yield smaller clusters (which increase precision while decreasing recall).</S>
    <S sid="65" ssid="24">Remember that going in the opposite direction and simply putting all mentions in one cluster produces a MUC score which is higher than any in the table, even though this clustering is clearly not useful in applications.</S>
    <S sid="66" ssid="25">Hence, we are skeptical of this measure&#8217;s utility and provide it primarily for comparison with previous work.</S>
    <S sid="67" ssid="26">The improvements from the ILP system are most clearly shown on the ACE NWIRE corpus, where the V f-score improved 3.6%, and the cluster f-score improved 16.5%.</S>
  </SECTION>
  <SECTION title="4 Conclusion" number="4">
    <S sid="68" ssid="1">We showed how to use integer linear programming to encode transitivity constraints in a coreference classifier which models pairwise decisions over mentions.</S>
    <S sid="69" ssid="2">We also demonstrated that enforcing such constraints at test time can significantly improve performance, using a variety of evaluation metrics.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="5">
    <S sid="70" ssid="1">Thanks to the following members of the Stanford NLP reading group for helpful discussion: Sharon Goldwater, Michel Galley, Anna Rafferty.</S>
    <S sid="71" ssid="2">This paper is based on work funded by the Disruptive Technology Office (DTO) Phase III Program for Advanced Question Answering for Intelligence (AQUAINT).</S>
  </SECTION>
</PAPER>
