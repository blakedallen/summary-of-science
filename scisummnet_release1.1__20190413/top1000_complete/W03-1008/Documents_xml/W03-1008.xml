<PAPER>
  <S sid="0">Identifying Semantic Roles Using Combinatory Categorial Grammar</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We present a system for automatically identifying PropBank-style semantic roles based on the output of a statistical parser for Combinatory Categorial Grammar.</S>
    <S sid="2" ssid="2">This system performs at least as well as a system based on a traditional Treebank parser, and outperforms it on core argument roles.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="3" ssid="1">Correctly identifying the semantic roles of sentence constituents is a crucial part of interpreting text, and in addition to forming an important part of the information extraction problem, can serve as an intermediate step in machine translation or automatic summarization.</S>
    <S sid="4" ssid="2">Even for a single predicate, semantic arguments can have multiple syntactic realizations, as shown by the following paraphrases: Recently, attention has turned to creating corpora annotated with argument structures.</S>
    <S sid="5" ssid="3">The PropBank (Kingsbury and Palmer, 2002) and the FrameNet (Baker et al., 1998) projects both document the variation in syntactic realization of the arguments of predicates in general English text.</S>
    <S sid="6" ssid="4">Gildea and Palmer (2002) developed a system to predict semantic roles (as defined in PropBank) from sentences and their parse trees as determined by the statistical parser of Collins (1999).</S>
    <S sid="7" ssid="5">In this paper, we examine how the syntactic representations used by different statistical parsers affect the performance of such a system.</S>
    <S sid="8" ssid="6">We compare a parser based on Combinatory Categorial Grammar (CCG) (Hockenmaier and Steedman, 2002b) with the Collins parser.</S>
    <S sid="9" ssid="7">As the CCG parser is trained and tested on a corpus of CCG derivations that have been obtained by automatic conversion from the Penn Treebank, we are able to compare performance using both goldstandard and automatic parses for both CCG and the traditional Treebank representation.</S>
    <S sid="10" ssid="8">The Treebankparser returns skeletal phrase-structure trees without the traces or functional tags in the original Penn Treebank, whereas the CCG parser returns wordword dependencies that correspond to the underlying predicate-argument structure, including longrange dependencies arising through control, raising, extraction and coordination.</S>
  </SECTION>
  <SECTION title="2 Predicate-argument relations in PropBank" number="2">
    <S sid="11" ssid="1">The Proposition Bank (Kingsbury and Palmer, 2002) provides a human-annotated corpus of semantic verb-argument relations.</S>
    <S sid="12" ssid="2">For each verb appearing in the corpus, a set of semantic roles is defined.</S>
    <S sid="13" ssid="3">Roles for each verb are simply numbered Arg0, Arg1, Arg2, etc.</S>
    <S sid="14" ssid="4">As an example, the entryspecific roles for the verb offer are given below: These roles are then annotated for every instance of the verb appearing in the corpus, including the following examples: A variety of additional roles are assumed to apply across all verbs.</S>
    <S sid="15" ssid="5">These secondary roles can be thought of as being adjuncts, rather than arguments, although no claims are made as to optionality or other traditional argument/adjunct tests.</S>
    <S sid="16" ssid="6">The secondary roles include: Location in Tokyo, outside Time last week, on Tuesday, never Manner easily, dramatically Direction south, into the wind Cause due to pressure from Washington Discourse however, also, on the other hand Extent 15%, 289 points Purpose to satisfy requirements Negation not, n&#8217;t Modal can, might, should, will Adverbial (none of the above) and are represented in PropBank as &#8220;ArgM&#8221; with an additional function tag, for example ArgM-TMP for temporal.</S>
    <S sid="17" ssid="7">We refer to PropBank&#8217;s numbered arguments as &#8220;core&#8221; arguments.</S>
    <S sid="18" ssid="8">Core arguments represent 75% of the total labeled roles in the PropBank data.</S>
    <S sid="19" ssid="9">Our system predicts all the roles, including core arguments as well as the ArgM labels and their function tags.</S>
  </SECTION>
  <SECTION title="3 Predicate-argument relations in CCG" number="3">
    <S sid="20" ssid="1">Combinatory Categorial Grammar (CCG) (Steedman, 2000), is a grammatical theory which provides a completely transparent interface between surface syntax and underlying semantics, such that each syntactic derivation corresponds directly to an interpretable semantic representation which includes long-range dependencies that arise through control, raising, coordination and extraction.</S>
    <S sid="21" ssid="2">In CCG, words are assigned atomic categories such as NP, or functor categories like (S[dcl]\NP)/NP (transitive declarative verb) or S/S (sentential modifier).</S>
    <S sid="22" ssid="3">Adjuncts are represented as functor categories such as S/S which expect and return the same type.</S>
    <S sid="23" ssid="4">We use indices to number the arguments of functor categories, eg.</S>
    <S sid="24" ssid="5">(S[dcl]\NP1)/NP2, or S/S1, and indicate the wordword dependencies in the predicate-argument structure as tuples (wh, ch, i, wa), where ch is the lexical category of the head word wh, and wa is the head word of the constituent that fills the ith argument of ch.</S>
    <S sid="25" ssid="6">Long-range dependencies can be projected through certain types of lexical categories or through rules such as coordination of functor categories.</S>
    <S sid="26" ssid="7">For example, in the lexical category of a relative pronoun, (NP\NP;)/(S[dcl]/NP;), the head of the NP that is missing from the relative clause is unified with (as indicated by the indices i) the head of the NP that is modified by the entire relative clause.</S>
    <S sid="27" ssid="8">Figure 1 shows the derivations of an ordinary sentence, a relative clause and a right-node-raising construction.</S>
    <S sid="28" ssid="9">In all three sentences, the predicateargument relations between London and denied and plans and denied are the same, which in CCG is expressed by the fact that London fills the first (ie. subject) argument slot of the lexical category of denied, (S[dcl]\NP1)/NP2, and plans fills the second (object) slot.</S>
    <S sid="29" ssid="10">The relations extracted from the CCG derivation for the sentence &#8220;London denied plans on Monday&#8221; are shown in Table 1.</S>
    <S sid="30" ssid="11">The CCG parser returns the local and long-range word-word dependencies that express the predicateargument structure corresponding to the derivation.</S>
    <S sid="31" ssid="12">These relations are recovered with an accuracy of around 83% (labeled recovery) or 91% (unlabeled recovery) (Hockenmaier, 2003).</S>
    <S sid="32" ssid="13">By contrast, standard Treebank parsers such as (Collins, 1999) only return phrase-structure trees, from which non-local dependencies are difficult to recover.</S>
    <S sid="33" ssid="14">The CCG parser has been trained and tested on CCGbank (Hockenmaier and Steedman, 2002a), a treebank of CCG derivations obtained from the Penn Treebank, from which we also obtain our training data.</S>
  </SECTION>
  <SECTION title="4 Mapping between PropBank and CCGbank" number="4">
    <S sid="34" ssid="1">Our aim is to use CCG derivations as input to a system for automatically producing the argument labels of PropBank.</S>
    <S sid="35" ssid="2">In order to do this, we wish to correlate the CCG relations above with PropBank arguments.</S>
    <S sid="36" ssid="3">PropBank argument labels are assigned to nodes in the syntactic trees from the Penn Treebank.</S>
    <S sid="37" ssid="4">While the CCGbank is derived from the Penn Treebank, in many cases the constituent structures do not correspond.</S>
    <S sid="38" ssid="5">That is, there may be no constituent in the CCG derivation corresponding to the same sequence of words as a particular constituent in the Treebank tree.</S>
    <S sid="39" ssid="6">For this reason, we compute the correspondence between the CCG derivation and the PropBank labels at the level of head words.</S>
    <S sid="40" ssid="7">For each role label for a verb&#8217;s argument in PropBank, we first find the head word for its constituent according to the the head rules of (Collins, 1999).</S>
    <S sid="41" ssid="8">We then look for the label of the CCG relation between this head word and the verb itself.</S>
  </SECTION>
  <SECTION title="5 The Experiments" number="5">
    <S sid="42" ssid="1">In previous work using the PropBank corpus, Gildea and Palmer (2002) developed a system to predict semantic roles from sentences and their parse trees as determined by the statistical parser of Collins (1999).</S>
    <S sid="43" ssid="2">We will briefly review their probability model before adapting the system to incorporate features from the CCG derivations.</S>
    <S sid="44" ssid="3">For the Treebank-based system, we use the probability model of Gildea and Palmer (2002).</S>
    <S sid="45" ssid="4">Probabilities of a parse constituent belonging to a given semantic role are calculated from the following features: The phrase type feature indicates the syntactic type of the phrase expressing the semantic roles: examples include noun phrase (NP), verb phrase (VP) , and clause (S).</S>
    <S sid="46" ssid="5">The parse tree path feature is designed to capture the syntactic relation of a constituent to the predicate.</S>
    <S sid="47" ssid="6">It is defined as the path from the predicate through the parse tree to the constituent in question, represented as a string of parse tree nonterminals linked by symbols indicating upward or downward movement through the tree, as shown in Figure 2.</S>
    <S sid="48" ssid="7">Although the path is composed as a string of symbols, our systems will treat the string as an atomic value.</S>
    <S sid="49" ssid="8">The path includes, as the first element of the string, the part of speech of the predicate, and, as the last element, the phrase type or syntactic category of the sentence constituent marked as an argument.</S>
    <S sid="50" ssid="9">He ate some pancakes Figure 2: In this example, the path from the predicate ate to the argument NP He can be represented as VBTVPTS1NP, with T indicating upward movement in the parse tree and 1 downward movement.</S>
    <S sid="51" ssid="10">The position feature simply indicates whether the constituent to be labeled occurs before or after the predicate.</S>
    <S sid="52" ssid="11">This feature is highly correlated with grammatical function, since subjects will generally appear before a verb, and objects after.</S>
    <S sid="53" ssid="12">This feature may overcome the shortcomings of reading grammatical function from the parse tree, as well as errors in the parser output.</S>
    <S sid="54" ssid="13">The voice feature distinguishes between active and passive verbs, and is important in predicting semantic roles because direct objects of active verbs correspond to subjects of passive verbs.</S>
    <S sid="55" ssid="14">An instance of a verb was considered passive if it is tagged as a past participle (e.g. taken), unless it occurs as a descendent verb phrase headed by any form of have (e.g. has taken) without an intervening verb phrase headed by any form of be (e.g. has been taken).</S>
    <S sid="56" ssid="15">The head word is a lexical feature, and provides information about the semantic type of the role filler.</S>
    <S sid="57" ssid="16">Head words of nodes in the parse tree are determined using the same deterministic set of head word rules used by Collins (1999).</S>
    <S sid="58" ssid="17">The system attempts to predict argument roles in new data, looking for the highest probability assignment of roles ri to all constituents i in the sentence, given the set of features Fi = {pti, pathi, posi, vi, hi} at each constituent in the parse tree, and the predicate p: We break the probability estimation into two parts, the first being the probability P(riIFi, p) of a constituent&#8217;s role given our five features for the consituent, and the predicate p. Due to the sparsity of the data, it is not possible to estimate this probability from the counts in the training data.</S>
    <S sid="59" ssid="18">Instead, probabilities are estimated from various subsets of the features, and interpolated as a linear combination of the resulting distributions.</S>
    <S sid="60" ssid="19">The interpolation is performed over the most specific distributions for which data are available, which can be thought of as choosing the topmost distributions available from a backoff lattice, shown in Figure 3.</S>
    <S sid="61" ssid="20">The probabilities P(ri|Fi, p) are combined with the probabilities P({r1..n}|p) for a set of roles appearing in a sentence given a predicate, using the following formula: This approach, described in more detail in Gildea and Jurafsky (2002), allows interaction between the role assignments for individual constituents while making certain independence assumptions necessary for efficient probability estimation.</S>
    <S sid="62" ssid="21">In particular, we assume that sets of roles appear independent of their linear order, and that the features F of a constituents are independent of other constituents&#8217; features given the constituent&#8217;s role.</S>
    <S sid="63" ssid="22">In the CCG version, we replace the features above with corresponding features based on both the sentence&#8217;s CCG derivation tree (shown in Figure 1) and the CCG predicate-argument relations extracted from it (shown in Table 1).</S>
    <S sid="64" ssid="23">The parse tree path feature, designed to capture grammatical relations between constituents, is replaced with a feature defined as follows: If there is a dependency in the predicate-argument structure of the CCG derivation between two words w and w', the path feature from w to w' is defined as the lexical category of the functor, the argument slot i occupied by the argument, plus an arrow (&#8592; or &#8594;) to indicate whether w or w' is the categorial functor.</S>
    <S sid="65" ssid="24">For example, in our sentence &#8220;London denied plans on Monday&#8221;, the relation connecting the verb denied with plans is (S[dcl]\NP)/NP.2.&#8592;, with the left arrow indicating the lexical category included in the relation is that of the verb, while the relation connecting denied with on is ((S\NP)\(S\NP))/NP.2.&#8594;, with the right arrow indicating the the lexical category included in the relation is that of the modifier.</S>
    <S sid="66" ssid="25">If the CCG derivation does not define a predicateargument relation between the two words, we use the parse tree path feature described above, defined over the CCG derivation tree.</S>
    <S sid="67" ssid="26">In our training data, 77% of PropBank arguments corresponded directly to a relation in the CCG predicate-argument representation, and the path feature was used for the remaining 23%.</S>
    <S sid="68" ssid="27">Most of these mismatches arise because the CCG parser and PropBank differ in their definition of head words.</S>
    <S sid="69" ssid="28">For instance, the CCG parser always assumes that the head of a PP is the preposition, whereas PropBank roles can be assigned to the entire PP (7), or only to the NP argument of the preposition (8), in which case the head word comes from the NP: In embedded clauses, CCG assumes that the head is the complementizer, whereas in PropBank, the head comes from the embedded sentence itself.</S>
    <S sid="70" ssid="29">In complex verb phrases (eg.</S>
    <S sid="71" ssid="30">&#8220;might not have gone&#8221;), the CCG parser assumes that the first auxiliary (might) is head, whereas PropBank assumes it is the main verb (gone).</S>
    <S sid="72" ssid="31">Therefore, CCG assumes that not modifies might, whereas PropBank assumes it modifies gone.</S>
    <S sid="73" ssid="32">Although the head rules of the parser could in principle be changed to reflect more directly the dependencies in PropBank, we have not attempted to do so yet.</S>
    <S sid="74" ssid="33">Further mismatches occur because the predicate-argument structure returned by the CCG parser only contains syntactic dependencies, whereas the PropBank data also contain some anaphoric dependencies, eg.</S>
    <S sid="75" ssid="34">: Such dependencies also do not correspond to a relation in the predicate-argument structure of the CCG derivation, and cause the path feature to be used.</S>
    <S sid="76" ssid="35">The phrase type feature is replaced with the lexical category of the maximal projection of the PropBank argument&#8217;s head word in the CCG derivation tree.</S>
    <S sid="77" ssid="36">For example, the category of plans is N, and the category of denied is (S[dcl]\NP)/NP.</S>
    <S sid="78" ssid="37">The voice feature can be read off the CCG categories, since the CCG categories of past participles carry different features in active and passive voice (eg. sold can be (S[pt]\NP)/NP or S[pss]\NP).</S>
    <S sid="79" ssid="38">The head word of a constituent is indicated in the derivations returned by the CCG parser.</S>
    <S sid="80" ssid="39">We use data from the November 2002 release of PropBank.</S>
    <S sid="81" ssid="40">The dataset contains annotations for 72,109 predicate-argument structures with 190,815 individual arguments (of which 75% are core, or numbered, arguments) and has includes examples from 2462 lexical predicates (types).</S>
    <S sid="82" ssid="41">Annotations from Sections 2 through 21 of the Treebank were used for training; Section 23 was the test set.</S>
    <S sid="83" ssid="42">Both parsers were trained on Sections 2 through 21.</S>
  </SECTION>
  <SECTION title="6 Results" number="6">
    <S sid="84" ssid="1">Because of the mismatch between the constituent structures of CCG and the Treebank, we score both systems according to how well they identify the head words of PropBank&#8217;s arguments.</S>
    <S sid="85" ssid="2">Table 2 gives the performance of the system on both PropBank&#8217;s core, or numbered, arguments, and on all PropBank roles including the adjunct-like ArgM roles.</S>
    <S sid="86" ssid="3">In order to analyze the impact of errors in the syntactic parses, we present results using features extracted from both automatic parser output and the gold standard parses in the Penn Treebank (without functional tags) and in CCGbank.</S>
    <S sid="87" ssid="4">Using the gold standard parses provides an upper bound on the performance of the system based on automatic parses.</S>
    <S sid="88" ssid="5">Since the Collins parser does not provide trace information, its upper bound is given by the system tested on the gold-standard Treebank representation with traces removed.</S>
    <S sid="89" ssid="6">In Table 2, &#8220;core&#8221; indicates results on PropBank&#8217;s numbered arguments (ARG0...ARG5) only, and &#8220;all&#8221; includes numbered arguments as well as the ArgM roles.</S>
    <S sid="90" ssid="7">Most of the numbered arguments (in particular ARG0 and ARG1) correspond to arguments that the CCG category of the verb directly subcategorizes for.</S>
    <S sid="91" ssid="8">The CCG-based system outperforms the system based on the Collins parser on these core arguments, and has comparable performance when all PropBank labels are considered.</S>
    <S sid="92" ssid="9">We believe that the superior performance of the CCG system on this core arguments is due to its ability to recover long-distance dependencies, whereas we attribute its lower performance on non-core arguments mainly to the mismatches between PropBank and CCGbank.</S>
    <S sid="93" ssid="10">The importance of long-range dependencies for our task is indicated by the fact that the performance on the Penn Treebank gold standard without traces is significantly lower than that on the Penn Treebank with trace information.</S>
    <S sid="94" ssid="11">Long-range dependencies are especially important for core arguments, shown by the fact that removing trace information from the Treebank parses results in a bigger drop for core arguments (83.5 to 76.3 F-score) than for all roles (74.1 to 70.2).</S>
    <S sid="95" ssid="12">The ability of the CCG parser to recover these long-range dependencies accounts for its higher performance, and in particular its higher recall, on core arguments.</S>
    <S sid="96" ssid="13">The CCG gold standard performance is below that of the Penn Treebank gold standard with traces.</S>
    <S sid="97" ssid="14">We believe this performance gap to be caused by the mismatches between the CCG analyses and the PropBank annotations described in Section 5.2.</S>
    <S sid="98" ssid="15">For the reasons described, the head words of the constituents that have PropBank roles are not necessarily the head words that stand in a predicate-argument relation in CCGbank.</S>
    <S sid="99" ssid="16">If two words do not stand in a predicate-argument relation, the CCG system takes recourse to the path feature.</S>
    <S sid="100" ssid="17">This feature is much sparser in CCG: since CCG categories encode subcategorization information, the number of categories in CCGbank is much larger than that of Penn Treebank labels.</S>
    <S sid="101" ssid="18">Analysis of our system&#8217;s output shows that the system trained on the Penn Treebank gold standard obtains 55.5% recall on those relations that require the CCG path feature, whereas the system using CCGbank only achieves 36.9% recall on these.</S>
    <S sid="102" ssid="19">Also, in CCG, the complement-adjunct distinction is represented in the categories for the complement (eg.</S>
    <S sid="103" ssid="20">PP) or adjunct (eg.</S>
    <S sid="104" ssid="21">(S\NP)\(S\NP) and in the categories for the head (eg.</S>
    <S sid="105" ssid="22">(S[dcl]\NP)/PP or S[dcl]\NP).</S>
    <S sid="106" ssid="23">In generating the CCGbank, various heuristics were used to make this distinction.</S>
    <S sid="107" ssid="24">In particular, for PPs, it depends on the &#8220;closely-related&#8221; (CLR) function tag, which is known to be unreliable.</S>
    <S sid="108" ssid="25">The decisions made in deriving the CCGbank often do not match the hand-annotated complementadjunct distinctions in PropBank, and this inconsistency is likely to make our CCGbank-based features less predictive.</S>
    <S sid="109" ssid="26">A possible solution is to regenerate the CCGbank using the Propbank annotations.</S>
    <S sid="110" ssid="27">The impact of our head-word based scoring is analyzed in Table 3, which compares results when only the head word must be correctly identified (as in Table 2) and to results when both the beginning and end of the argument must be correctly identified in the sentence (as in Gildea and Palmer (2002)).</S>
    <S sid="111" ssid="28">Even if the head word is given the correct label, the boundaries of the entire argument may be different from those given in the PropBank annotation.</S>
    <S sid="112" ssid="29">Since constituents in CCGbank do not always match those in PropBank, even the CCG gold standard parses obtain comparatively low scores according to this metric.</S>
    <S sid="113" ssid="30">This is exacerbated when automatic parses are considered.</S>
  </SECTION>
  <SECTION title="7 Conclusion" number="7">
    <S sid="114" ssid="1">Our CCG-based system for automatically labeling verb arguments with PropBank-style semantic roles outperforms a system using a traditional Treebankbased parser for core arguments, which comprise 75% of the role labels, but scores lower on adjunctlike roles such as temporals and locatives.</S>
    <S sid="115" ssid="2">The CCG parser returns predicate-argument structures that include long-range dependencies; therefore, it seems inherently better suited for this task.</S>
    <S sid="116" ssid="3">However, the performance of our CCG system is lowered by the fact that the syntactic analyses in its training corpus differ from those that underlie PropBank in important ways (in particular in the notion of heads and the complement-adjunct distinction).</S>
    <S sid="117" ssid="4">We would expect a higher performance for the CCG-based system if the analyses in CCGbank resembled more closely those in PropBank.</S>
    <S sid="118" ssid="5">Our results also indicate the importance of recovering long-range dependencies, either through the trace information in the Penn Treebank, or directly, as in the predicate-argument structures returned by the CCG parser.</S>
    <S sid="119" ssid="6">We speculate that much of the performance improvement we show could be obtained with traditional (ie. non-CCG-based) parsers if they were designed to recover more of the information present in the Penn Treebank, in particular the trace co-indexation.</S>
    <S sid="120" ssid="7">An interesting experiment would be the application of our role-labeling system to the output of the trace recovery system of Johnson (2002).</S>
    <S sid="121" ssid="8">Our results also have implications for parser evaluation, as the most frequently used constituent-based precision and recall measures do not evaluate how well long-range dependencies can be recovered from the output of a parser.</S>
    <S sid="122" ssid="9">Measures based on dependencies, such as those of Lin (1995) and Carroll et al. (1998), are likely to be more relevant to real-world applications of parsing.</S>
    <S sid="123" ssid="10">Acknowledgments This work was supported by the Institute for Research in Cognitive Science at the University of Pennsylvania, the Propbank project (DoD Grant MDA904-00C2136), an EPSRC studentship and grant GR/M96889, and NSF ITR grant 0205 456.</S>
    <S sid="124" ssid="11">We thank Mark Steedman, Martha Palmer and Alexandra Kinyon for their comments on this work.</S>
  </SECTION>
</PAPER>
