<PAPER>
  <S sid="0">An Empirical Evaluation Of Knowledge Sources And Learning Algorithms For Word Sense Disambiguation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">In this paper, we evaluate a variety of knowledge sources and supervised learning algorithms for word sense disambiguation on SENSEVAL-2 and SENSEVAL-1 data.</S>
    <S sid="2" ssid="2">Our knowledge sources include the part-of-speech of neighboring words, single words in the surrounding context, local collocations, and syntactic relations.</S>
    <S sid="3" ssid="3">The learning algorithms evaluated include Support Vector Machines (SVM), Naive Bayes, AdaBoost, and decision tree algorithms.</S>
    <S sid="4" ssid="4">We present empirical results showing the relative contribution of the component knowledge sources and the different learning algorithms.</S>
    <S sid="5" ssid="5">In particular, using all of these knowledge sources and SVM (i.e., a single learning algorithm) achieves accuracy higher than the best official scores on both SENSEVAL-2 and SENSEVAL-1 test data.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">Natural language is inherently ambiguous.</S>
    <S sid="7" ssid="2">A word can have multiple meanings (or senses).</S>
    <S sid="8" ssid="3">Given an occurrence of a word in a natural language text, the task of word sense disambiguation (WSD) is to determine the correct sense of in that context.</S>
    <S sid="9" ssid="4">WSD is a fundamental problem of natural language processing.</S>
    <S sid="10" ssid="5">For example, effective WSD is crucial for high quality machine translation.</S>
    <S sid="11" ssid="6">One could envisage building a WSD system using handcrafted rules or knowledge obtained from linguists.</S>
    <S sid="12" ssid="7">Such an approach would be highly laborintensive, with questionable scalability.</S>
    <S sid="13" ssid="8">Another approach involves the use of dictionary or thesaurus to perform WSD.</S>
    <S sid="14" ssid="9">In this paper, we focus on a corpus-based, supervised learning approach.</S>
    <S sid="15" ssid="10">In this approach, to disambiguate a word , we first collect training texts in which instances of occur.</S>
    <S sid="16" ssid="11">Each occurrence of is manually tagged with the correct sense.</S>
    <S sid="17" ssid="12">We then train a WSD classifier based on these sample texts, such that the trained classifier is able to assign the sense of in a new context.</S>
    <S sid="18" ssid="13">Two WSD evaluation exercises, SENSEVAL-1 (Kilgarriff and Palmer, 2000) and SENSEVAL-2 (Edmonds and Cotton, 2001), were conducted in 1998 and 2001, respectively.</S>
    <S sid="19" ssid="14">The lexical sample task in these two SENSEVALs focuses on evaluating WSD systems in disambiguating a subset of nouns, verbs, and adjectives, for which manually sense-tagged training data have been collected.</S>
    <S sid="20" ssid="15">In this paper, we conduct a systematic evaluation of the various knowledge sources and supervised learning algorithms on the English lexical sample data sets of both SENSEVALs.</S>
  </SECTION>
  <SECTION title="2 Related Work" number="2">
    <S sid="21" ssid="1">There is a large body of prior research on WSD.</S>
    <S sid="22" ssid="2">Due to space constraints, we will only highlight prior research efforts that have investigated (1) contribution of various knowledge sources, or (2) relative performance of different learning algorithms.</S>
    <S sid="23" ssid="3">Early research efforts on comparing different learning algorithms (Mooney, 1996; Pedersen and Bruce, 1997) tend to base their comparison on only one word or at most a dozen words.</S>
    <S sid="24" ssid="4">Ng (1997) compared two learning algorithms, k-nearest neighbor and Naive Bayes, on the DSO corpus (191 words).</S>
    <S sid="25" ssid="5">Escudero et al. (2000) evaluated k-nearest neighbor, Naive Bayes, Winnow-based, and LazyBoosting algorithms on the DSO corpus.</S>
    <S sid="26" ssid="6">The recent work of Pedersen (2001a) and Zavrel et al. (2000) evaluated a variety of learning algorithms on the SENSEVAL1 data set.</S>
    <S sid="27" ssid="7">However, all of these research efforts concentrate only on evaluating different learning algorithms, without systematically considering their interaction with knowledge sources.</S>
    <S sid="28" ssid="8">Ng and Lee (1996) reported the relative contribution of different knowledge sources, but on only one word &#8220;interest&#8221;.</S>
    <S sid="29" ssid="9">Stevenson and Wilks (2001) investigated the interaction of knowledge sources, such as part-of-speech, dictionary definition, subject codes, etc. on WSD.</S>
    <S sid="30" ssid="10">However, they do not evaluate their method on a common benchmark data set, and there is no exploration on the interaction of knowledge sources with different learning algorithms.</S>
    <S sid="31" ssid="11">Participating systems at SENSEVAL-1 and SENSEVAL-2 tend to report accuracy using a particular set of knowledge sources and some particular learning algorithm, without investigating the effect of varying knowledge sources and learning algorithms.</S>
    <S sid="32" ssid="12">In SENSEVAL-2, the various Duluth systems (Pedersen, 2001b) attempted to investigate whether features or learning algorithms are more important.</S>
    <S sid="33" ssid="13">However, relative contribution of knowledge sources was not reported and only two main types of algorithms (Naive Bayes and decision tree) were tested.</S>
    <S sid="34" ssid="14">In contrast, in this paper, we systematically vary both knowledge sources and learning algorithms, and investigate the interaction between them.</S>
    <S sid="35" ssid="15">We also base our evaluation on both SENSEVAL-2 and SENSEVAL-1 official test data sets, and compare with the official scores of participating systems.</S>
  </SECTION>
  <SECTION title="3 Knowledge Sources" number="3">
    <S sid="36" ssid="1">To disambiguate a word occurrence , we consider four knowledge sources listed below.</S>
    <S sid="37" ssid="2">Each training (or test) context of generates one training (or test) feature vector.</S>
    <S sid="38" ssid="3">We use 7 features to encode this knowledge source: , where ( ) is the POS of theth token to the left (right) of , and is the POS of .</S>
    <S sid="39" ssid="4">A token can be a word or a punctuation symbol, and each of these neighboring tokens must be in the same sentence as .</S>
    <S sid="40" ssid="5">We use a sentence segmentation program (Reynar and Ratnaparkhi, 1997) and a POS tagger (Ratnaparkhi, 1996) to segment the tokens surrounding into sentences and assign POS tags to these tokens.</S>
    <S sid="41" ssid="6">For example, to disambiguate the word bars in the POS-tagged sentence &#8220;Reid/NNP saw/VBD me/PRP looking/VBG at/IN the/DT iron/NN bars/NNS ./.&#8221;, the POS feature vector is where denotes For this knowledge source, we consider all single words (unigrams) in the surrounding context of , and these words can be in a different sentence from .</S>
    <S sid="42" ssid="7">For each training or test example, the SENSEVAL data sets provide up to a few sentences as the surrounding context.</S>
    <S sid="43" ssid="8">In the results reported in this paper, we consider all words in the provided context.</S>
    <S sid="44" ssid="9">Specifically, all tokens in the surrounding context of are converted to lower case and replaced by their morphological root forms.</S>
    <S sid="45" ssid="10">Tokens present in a list of stop words or tokens that do not contain at least an alphabet character (such as numbers and punctuation symbols) are removed.</S>
    <S sid="46" ssid="11">All remaining tokens from all training contexts provided for are gathered.</S>
    <S sid="47" ssid="12">Each remaining token contributes one feature.</S>
    <S sid="48" ssid="13">In a training (or test) example, the feature corresponding to is set to 1 iff the context of in that training (or test) example contains.</S>
    <S sid="49" ssid="14">We attempted a simple feature selection method to investigate if a learning algorithm performs better with or without feature selection.</S>
    <S sid="50" ssid="15">The feature selection method employed has one parameter: .</S>
    <S sid="51" ssid="16">A feature is selected if occurs in some sense of or more times in the training data.</S>
    <S sid="52" ssid="17">This parameter is also used by (Ng and Lee, 1996).</S>
    <S sid="53" ssid="18">We have tried and (i.e., no feature selection) in the results reported in this paper. the POS tag of a null token.</S>
    <S sid="54" ssid="19">For example, if is the word bars and the set of selected unigrams is chocolate, iron, beer , the feature vector for the sentence &#8220;Reid saw me looking at the iron bars .&#8221; is 0, 1, 0 .</S>
    <S sid="55" ssid="20">A local collocation refers to the ordered sequence of tokens in the local, narrow context of .</S>
    <S sid="56" ssid="21">Offsets and denote the starting and ending position (relative to ) of the sequence, where a negative (positive) offset refers to a token to its left (right).</S>
    <S sid="57" ssid="22">For example, let be the word bars in the sentence &#8220;Reid saw me looking at the iron bars where denotes a null token.</S>
    <S sid="58" ssid="23">Like POS, a collocation does not cross sentence boundary.</S>
    <S sid="59" ssid="24">To represent this knowledge source of local collocations, we extracted 11 features corresponding to the following collocations: , , , , , , , , ,,and .</S>
    <S sid="60" ssid="25">This set of 11 features is the union of the collocation features used in Ng and Lee (1996) and Ng (1997).</S>
    <S sid="61" ssid="26">To extract the feature values of the collocation feature , we first collect all possible collocation strings (converted into lower case) corresponding to in all training contexts of .</S>
    <S sid="62" ssid="27">Unlike the case for surrounding words, we do not remove stop words, numbers, or punctuation symbols.</S>
    <S sid="63" ssid="28">Each collocation string is a possible feature value.</S>
    <S sid="64" ssid="29">Feature value selection using , analogous to that used to select surrounding words, can be optionally applied.</S>
    <S sid="65" ssid="30">If a training (or test) context of has collocation , and is a selected feature value, then the feature of has value .</S>
    <S sid="66" ssid="31">Otherwise, it has the value , denoting the null string.</S>
    <S sid="67" ssid="32">Note that each collocation is represented by one feature that can have many possible feature values (the local collocation strings), whereas each distinct surrounding word is represented by one feature that takes binary values (indicating presence or absence of that word).</S>
    <S sid="68" ssid="33">For example, if is the word bars and suppose the set of selected collocations for is a chocolate, the wine, the iron , then the feature value for collocation in the sentence &#8220;Reid saw me looking at the iron bars .&#8221; is the iron.</S>
    <S sid="69" ssid="34">We first parse the sentence containing with a statistical parser (Charniak, 2000).</S>
    <S sid="70" ssid="35">The constituent tree structure generated by Charniak&#8217;s parser is then converted into a dependency tree in which every word points to a parent headword.</S>
    <S sid="71" ssid="36">For example, in the sentence &#8220;Reid saw me looking at the iron bars .&#8221;, the word Reid points to the parent headword saw.</S>
    <S sid="72" ssid="37">Similarly, the word me also points to the parent headword saw.</S>
    <S sid="73" ssid="38">We use different types of syntactic relations, depending on the POS of .</S>
    <S sid="74" ssid="39">If is a noun, we use four features: its parent headword , the POS of , the voice of (active, passive, or if is nota verb), and the relative position of from (whether is to the left or right of ).</S>
    <S sid="75" ssid="40">If is a verb, we use six features: the nearest word to the left of such that is the parent headword of, the nearest word to the right of such that is the parent headword of , the POS of , the POS of , the POS of , and the voice of .</S>
    <S sid="76" ssid="41">If is an adjective, we use two features: its parent headword and the POS of .</S>
    <S sid="77" ssid="42">We also investigated the effect of feature selection on syntactic-relation features that are words (i.e., POS, voice, and relative position are excluded).</S>
    <S sid="78" ssid="43">Some examples are shown in Table 1.</S>
    <S sid="79" ssid="44">Each POS noun, verb, or adjective is illustrated by one example.</S>
    <S sid="80" ssid="45">For each example, (a) shows and its POS; (b) shows the sentence where occurs; and (c) shows the feature vector corresponding to syntactic relations.</S>
  </SECTION>
  <SECTION title="4 Learning Algorithms" number="4">
    <S sid="81" ssid="1">We evaluated four supervised learning algorithms: Support Vector Machines (SVM), AdaBoost with decision stumps (AdB), Naive Bayes (NB), and decision trees (DT).</S>
    <S sid="82" ssid="2">All the experimental results reported in this paper are obtained using the implementation of these algorithms in WEKA (Witten and Frank, 2000).</S>
    <S sid="83" ssid="3">All learning parameters use the default values in WEKA unless otherwise stated.</S>
    <S sid="84" ssid="4">The SVM (Vapnik, 1995) performs optimization to find a hyperplane with the largest margin that separates training examples into two classes.</S>
    <S sid="85" ssid="5">A test example is classified depending on the side of the hyperplane it lies in.</S>
    <S sid="86" ssid="6">Input features can be mapped into high dimensional space before performing the optimization and classification.</S>
    <S sid="87" ssid="7">A kernel function (linear by default) can be used to reduce the computational cost of training and testing in high dimensional space.</S>
    <S sid="88" ssid="8">If the training examples are nonseparable, a regularization parameter ( by default) can be used to control the trade-off between achieving a large margin and a low training error.</S>
    <S sid="89" ssid="9">In WEKA&#8217;s implementation of SVM, each nominal feature with possible values is converted into binary (0 or 1) features.</S>
    <S sid="90" ssid="10">If a nominal feature takes the th feature value, then the th binary feature is set to 1 and all the other binary features are set to 0.</S>
    <S sid="91" ssid="11">We tried higher order polynomial kernels, but they gave poorer results.</S>
    <S sid="92" ssid="12">Our reported results in this paper used the linear kernel.</S>
    <S sid="93" ssid="13">AdaBoost (Freund and Schapire, 1996) is a method of training an ensemble of weak learners such that the performance of the whole ensemble is higher than its constituents.</S>
    <S sid="94" ssid="14">The basic idea of boosting is to give more weights to misclassified training examples, forcing the new classifier to concentrate on these hard-to-classify examples.</S>
    <S sid="95" ssid="15">A test example is classified by a weighted vote of all trained classifiers.</S>
    <S sid="96" ssid="16">We use the decision stump (decision tree with only the root node) as the weak learner in AdaBoost.</S>
    <S sid="97" ssid="17">WEKA implements AdaBoost.M1.</S>
    <S sid="98" ssid="18">We used 100 iterations in AdaBoost as it gives higher accuracy than the default number of iterations in WEKA (10).</S>
    <S sid="99" ssid="19">The Naive Bayes classifier (Duda and Hart, 1973) assumes the features are independent given the class.</S>
    <S sid="100" ssid="20">During classification, it chooses the class with the highest posterior probability.</S>
    <S sid="101" ssid="21">The default setting uses Laplace (&#8220;add one&#8221;) smoothing.</S>
    <S sid="102" ssid="22">The decision tree algorithm (Quinlan, 1993) partitions the training examples using the feature with the highest information gain.</S>
    <S sid="103" ssid="23">It repeats this process recursively for each partition until all examples in each partition belong to one class.</S>
    <S sid="104" ssid="24">A test example is classified by traversing the learned decision tree.</S>
    <S sid="105" ssid="25">WEKA implements Quinlan&#8217;s C4.5 decision tree algorithm, with pruning by default.</S>
  </SECTION>
  <SECTION title="5 Evaluation Data Sets" number="5">
    <S sid="106" ssid="1">In the SENSEVAL-2 English lexical sample task, participating systems are required to disambiguate 73 words that have their POS predetermined.</S>
    <S sid="107" ssid="2">There are 8,611 training instances and 4,328 test instances tagged with WORDNET senses.</S>
    <S sid="108" ssid="3">Our evaluation is based on all the official training and test data of SENSEVAL-2.</S>
    <S sid="109" ssid="4">For SENSEVAL-1, we used the 36 trainable words for our evaluation.</S>
    <S sid="110" ssid="5">There are 13,845 training instances1 for these trainable words, and 7,446 test instances.</S>
    <S sid="111" ssid="6">For SENSEVAL-1, 4 trainable words belong to the indeterminate category, i.e., the POS is not provided.</S>
    <S sid="112" ssid="7">For these words, we first used a POS tagger (Ratnaparkhi, 1996) to determine the correct POS.</S>
    <S sid="113" ssid="8">For a word that may occur in phrasal word form (eg, the verb &#8220;turn&#8221; and the phrasal form &#8220;turn down&#8221;), we train a separate classifier for each phrasal word form.</S>
    <S sid="114" ssid="9">During testing, if appears in a phrasal word form, the classifier for that phrasal word form is used.</S>
    <S sid="115" ssid="10">Otherwise, the classifier for is used.</S>
  </SECTION>
  <SECTION title="6 Empirical Results" number="6">
    <S sid="116" ssid="1">We ran the different learning algorithms using various knowledge sources.</S>
    <S sid="117" ssid="2">Table 2 (Table 3) shows each algorithm evaluated and official scores of the top 3 participating systems of SENSEVAL-2 and SENSEVAL-1 the accuracy figures for the different combinations of knowledge sources and learning algorithms for the SENSEVAL-2 (SENSEVAL-1) data set.</S>
    <S sid="118" ssid="3">The nine columns correspond to: (i) using only POS of neighboring words (ii) using only single words in the surrounding context with feature selection ( ) (iii) same as (ii) but without feature selection ( ) (iv) using only local collocations with feature selection ( ) (v) same as (iv) but without feature selection ( ) (vi) using only syntactic relations with feature selection on words ( ) (vii) same as (vi) but without feature selection ( ) (viii) combining all four knowledge sources with feature selection (ix) combining all four knowledge sources without feature selection.</S>
    <S sid="119" ssid="4">SVM is only capable of handling binary class problems.</S>
    <S sid="120" ssid="5">The usual practice to deal with multiclass problems is to build one binary classifier per output class (denoted &#8220;1-per-class&#8221;).</S>
    <S sid="121" ssid="6">The original AdaBoost, Naive Bayes, and decision tree algoalgorithm is significantly better.</S>
    <S sid="122" ssid="7">&#8220; &#8221;) correspond to the p-value , , and respectively.</S>
    <S sid="123" ssid="8">&#8220; &#8221; or &#8220; &#8221; means our rithms can already handle multi-class problems, and we denote runs using the original AdB, NB, and DT algorithms as &#8220;normal&#8221; in Table 2 and Table 3.</S>
    <S sid="124" ssid="9">Accuracy for each word task can be measured by recall (r) or precision (p), defined by: no. of test instances correctly labeled no. of test instances in word task no. of test instances correctly labeled no. of test instances output in word task Recall is very close (but not always identical) to precision for the top SENSEVAL participating systems.</S>
    <S sid="125" ssid="10">In this paper, our reported results are based on the official fine-grained scoring method.</S>
    <S sid="126" ssid="11">To compute an average recall figure over a set of words, we can either adopt micro-averaging (mi) or macro-averaging (ma), defined by: total no. of test instances correctly labeled mi total no. of test instances in all word tasks That is, micro-averaging treats each test instance equally, so that a word task with many test instances will dominate the micro-averaged recall.</S>
    <S sid="127" ssid="12">On the other hand, macro-averaging treats each word task equally.</S>
    <S sid="128" ssid="13">As shown in Table 2 and Table 3, the best microaveraged recall for SENSEVAL-2 (SENSEVAL-1) is 65.4% (79.2%), obtained by combining all knowledge sources (without feature selection) and using SVM as the learning algorithm.</S>
    <S sid="129" ssid="14">In Table 4, we tabulate the best micro-averaged recall for each learning algorithm, broken down according to nouns, verbs, adjectives, indeterminates (for SENSEVAL-1), and all words.</S>
    <S sid="130" ssid="15">We also tabulate analogous figures for the top three participating systems for both SENSEVALs.</S>
    <S sid="131" ssid="16">The top three systems for SENSEVAL-2 are: JHU (S1) (Yarowsky et al., 2001), SMUls (S2) (Mihalcea and Moldovan, 2001), and KUNLP (S3) (Seo et al., 2001).</S>
    <S sid="132" ssid="17">The top three systems for SENSEVAL-1 are: hopkins (s1) (Yarowsky, 2000), ets-pu (s2) (Chodorow et al., 2000), and tilburg (s3) (Veenstra et al., 2000).</S>
    <S sid="133" ssid="18">As shown in Table 4, SVM with all four knowledge sources achieves accuracy higher than the best official scores of both SENSEVALs.</S>
    <S sid="134" ssid="19">We also conducted paired t test to see if one system is significantly better than another.</S>
    <S sid="135" ssid="20">The t statistic of the difference between each pair of recall figures (between each test instance pair for micro-averaging and between each word task pair for macro-averaging) is computed, giving rise to a p value.</S>
    <S sid="136" ssid="21">A large p value indicates that the two systems are not significantly different from each other.</S>
    <S sid="137" ssid="22">The comparison between our learning algorithms and the top three participating systems is given in Table 5.</S>
    <S sid="138" ssid="23">Note that we can only compare macroaveraged recall for SENSEVAL-1 systems, since the sense of each individual test instance output by the SENSEVAL-1 participating systems is not available.</S>
    <S sid="139" ssid="24">The comparison indicates that our SVM system is better than the best official SENSEVAL-2 and SENSEVAL-1 systems at the level of significance 0.05.</S>
    <S sid="140" ssid="25">Note that we are able to obtain state-of-the-art results using a single learning algorithm (SVM), without resorting to combining multiple learning algorithms.</S>
    <S sid="141" ssid="26">Several top SENSEVAL-2 participating systems have attempted the combination of classifiers using different learning algorithms.</S>
    <S sid="142" ssid="27">In SENSEVAL-2, JHU used a combination of various learning algorithms (decision lists, cosinebased vector models, and Bayesian models) with various knowledge sources such as surrounding words, local collocations, syntactic relations, and morphological information.</S>
    <S sid="143" ssid="28">SMUls used a k-nearest neighbor algorithm with features such as keywords, collocations, POS, and name entities.</S>
    <S sid="144" ssid="29">KUNLP used Classification Information Model, an entropy-based learning algorithm, with local, topical, and bigram contexts and their POS.</S>
    <S sid="145" ssid="30">In SENSEVAL-1, hopkins used hierarchical decision lists with features similar to those used by JHU in SENSEVAL-2. ets-pu used a Naive Bayes classifier with topical and local words and their POS. tilburg used a k-nearest neighbor algorithm with features similar to those used by (Ng and Lee, 1996). tilburg also used dictionary examples as additional training data.</S>
  </SECTION>
  <SECTION title="7 Discussions" number="7">
    <S sid="146" ssid="1">Based on our experimental results, there appears to be no single, universally best knowledge source.</S>
    <S sid="147" ssid="2">Instead, knowledge sources and learning algorithms interact and influence each other.</S>
    <S sid="148" ssid="3">For example, local collocations contribute the most for SVM, while parts-of-speech (POS) contribute the most for NB.</S>
    <S sid="149" ssid="4">NB even outperforms SVM if only POS is used.</S>
    <S sid="150" ssid="5">In addition, different learning algorithms benefit differently from feature selection.</S>
    <S sid="151" ssid="6">SVM performs best without feature selection, whereas NB performs best with some feature selection ( ).</S>
    <S sid="152" ssid="7">We will investigate the effect of more elaborate feature selection schemes on the performance of different learning algorithms for WSD in future work.</S>
    <S sid="153" ssid="8">Also, using the combination of four knowledge sources gives better performance than using any single individual knowledge source for most algorithms.</S>
    <S sid="154" ssid="9">On the SENSEVAL-2 test set, SVM achieves 65.4% (all 4 knowledge sources), 64.8% (remove syntactic relations), 61.8% (further remove POS), and 60.5% (only collocations) as knowledge sources are removed one at a time.</S>
    <S sid="155" ssid="10">Before concluding, we note that the SENSEVAL2 participating system UMD-SST (Cabezas et al., 2001) also used SVM, with surrounding words and local collocations as features.</S>
    <S sid="156" ssid="11">However, they reported recall of only 56.8%.</S>
    <S sid="157" ssid="12">In contrast, our implementation of SVM using the two knowledge sources of surrounding words and local collocations achieves recall of 61.8%.</S>
    <S sid="158" ssid="13">Following the description in (Cabezas et al., 2001), our own re-implementation of UMD-SST gives a recall of 58.6%, close to their reported figure of 56.8%.</S>
    <S sid="159" ssid="14">The performance drop from 61.8% may be due to the different collocations used in the two systems.</S>
  </SECTION>
</PAPER>
