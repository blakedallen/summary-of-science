<PAPER>
  <S sid="0">The Complexity of Phrase Alignment Problems</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Many phrase alignment models operate over combinatorial space of phrase We prove that finding an optimal alignment in this space is NP-hard, while computing alignment expectations is #P-hard.</S>
    <S sid="2" ssid="2">On the other hand, we show that the problem of finding an optimal alignment can be cast as an integer linear program, which provides a simple, declarative approach to Viterbi inference for phrase alignment models that is empirically quite efficient.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="3" ssid="1">Learning in phrase alignment models generally requires computing either Viterbi phrase alignments or expectations of alignment links.</S>
    <S sid="4" ssid="2">For some restricted combinatorial spaces of alignments&#8212;those that arise in ITG-based phrase models (Cherry and Lin, 2007) or local distortion models (Zens et al., 2004)&#8212;inference can be accomplished using polynomial time dynamic programs.</S>
    <S sid="5" ssid="3">However, for more permissive models such as Marcu and Wong (2002) and DeNero et al. (2006), which operate over the full space of bijective phrase alignments (see below), no polynomial time algorithms for exact inference have been exhibited.</S>
    <S sid="6" ssid="4">Indeed, Marcu and Wong (2002) conjectures that none exist.</S>
    <S sid="7" ssid="5">In this paper, we show that Viterbi inference in this full space is NP-hard, while computing expectations is #P-hard.</S>
    <S sid="8" ssid="6">On the other hand, we give a compact formulation of Viterbi inference as an integer linear program (ILP).</S>
    <S sid="9" ssid="7">Using this formulation, exact solutions to the Viterbi search problem can be found by highly optimized, general purpose ILP solvers.</S>
    <S sid="10" ssid="8">While ILP is of course also NP-hard, we show that, empirically, exact solutions are found very quickly for most problem instances.</S>
    <S sid="11" ssid="9">In an experiment intended to illustrate the practicality of the ILP approach, we show speed and search accuracy results for aligning phrases under a standard phrase translation model.</S>
  </SECTION>
  <SECTION title="2 Phrase Alignment Problems" number="2">
    <S sid="12" ssid="1">Rather than focus on a particular model, we describe four problems that arise in training phrase alignment models.</S>
    <S sid="13" ssid="2">A sentence pair consists of two word sequences, e and f. A set of phrases {eij} contains all spans eij from between-word positions i to j of e. A link is an aligned pair of phrases, denoted (eij, fkl).'</S>
    <S sid="14" ssid="3">Let a weighted sentence pair additionally include a real-valued function 0 : {eij}x{fkl} &#8212;* R, which scores links.</S>
    <S sid="15" ssid="4">0(eij, fkl) can be sentence-specific, for example encoding the product of a translation model and a distortion model for (eij, fkl).</S>
    <S sid="16" ssid="5">We impose no additional restrictions on 0 for our analysis.</S>
    <S sid="17" ssid="6">An alignment is a set of links.</S>
    <S sid="18" ssid="7">Given a weighted sentence pair, we will consider the space of bijective phrase alignments A: those a C {eij} x {fkl} that use each word token in exactly one link.</S>
    <S sid="19" ssid="8">We first define the notion of a partition: UiSi = T means Si are pairwise disjoint and cover T. Then, we can formally define the set of bijective phrase alignments: Both the conditional model of DeNero et al. (2006) and the joint model of Marcu and Wong (2002) operate in A, as does the phrase-based decoding framework of Koehn et al.</S>
    <S sid="20" ssid="9">(2003).</S>
    <S sid="21" ssid="10">For a weighted sentence pair (e, f, &#966;), let the score of an alignment be the product of its link scores: Four related problems involving scored alignments arise when training phrase alignment models.</S>
    <S sid="22" ssid="11">OPTIMIZATION, O: Given (e, f, &#966;), find the highest scoring alignment a.</S>
    <S sid="23" ssid="12">DECISION, D: Given (e, f, &#966;), decide if there is an alignment a with &#966;(a) &gt; 1.</S>
    <S sid="24" ssid="13">O arises in the popular Viterbi approximation to EM (Hard EM) that assumes probability mass is concentrated at the mode of the posterior distribution over alignments.</S>
    <S sid="25" ssid="14">D is the corresponding decision problem for O, useful in analysis.</S>
    <S sid="26" ssid="15">EXPECTATION, &#163;: Given a weighted sentence pair (e, f, &#966;) and indices i, j, k,l, compute Ea &#966;(a) over all a E A such that (eij, fkl) E a.</S>
    <S sid="27" ssid="16">SUM, S: Given (e, f, &#966;), compute EaEA &#966;(a).</S>
    <S sid="28" ssid="17">&#163; arises in computing sufficient statistics for re-estimating phrase translation probabilities (Estep) when training models.</S>
    <S sid="29" ssid="18">The existence of a polynomial time algorithm for &#163; implies a polynomial time algorithm for S, because A = U;e1 1 Ukf |0 Ulf=k+1 {a : (e0j, fkl) E a, a E A}.</S>
  </SECTION>
  <SECTION title="3 Complexity of Inference in A" number="3">
    <S sid="30" ssid="1">For the space A of bijective alignments, problems &#163; and O have long been suspected of being NP-hard, first asserted but not proven in Marcu and Wong (2002).</S>
    <S sid="31" ssid="2">We give a novel proof that O is NP-hard, showing that D is NP-complete by reduction from SAT, the boolean satisfiability problem.</S>
    <S sid="32" ssid="3">This result holds despite the fact that the related problem of finding an optimal matching in a weighted bipartite graph (the ASSIGNMENT problem) is polynomialtime solvable using the Hungarian algorithm.</S>
    <S sid="33" ssid="4">A reduction proof of NP-completeness gives a construction by which a known NP-complete problem can be solved via a newly proposed problem.</S>
    <S sid="34" ssid="5">From a SAT instance, we construct a weighted sentence pair for which alignments with positive score correspond exactly to the SAT solutions.</S>
    <S sid="35" ssid="6">Since SAT is NPcomplete and our construction requires only polynomial time, we conclude that D is NP-complete.2 SAT: Given vectors of boolean variables v = (v) and propositional clauses3 C = (C), decide whether there exists an assignment to v that simultaneously satisfies each clause in C. For a SAT instance (v, C), we construct f to contain one word for each clause, and e to contain several copies of the literals that appear in those clauses. &#966; scores only alignments from clauses to literals that satisfy the clauses.</S>
    <S sid="36" ssid="7">The crux of the construction lies in ensuring that no variable is assigned both true and false.</S>
    <S sid="37" ssid="8">The details of constructing such a weighted sentence pair wsp(v, C) = (e, f, &#966;), described below, are also depicted in figure 1.</S>
    <S sid="38" ssid="9">Then, we set &#966;(&#183;, &#183;) = 0 everywhere except: Proof.</S>
    <S sid="39" ssid="10">The score implies that f aligns using all oneword phrases and Vai E a, 0(ai) = 1.</S>
    <S sid="40" ssid="11">By condition 4, each fassign(v) aligns to all v&#65533; or all v in e. Then, assign each v to true if fassign(v) aligns to all v, and false otherwise.</S>
    <S sid="41" ssid="12">By condition 3, each C must align to a satisfying literal, while condition 4 assures that all available literals are consistent with this assignment to v, which therefore satisfies C. Claim 2.</S>
    <S sid="42" ssid="13">If (v, C) is satisfiable, then wsp(v, C) has an alignment a with 0(a) = 1.</S>
    <S sid="43" ssid="14">Proof.</S>
    <S sid="44" ssid="15">We construct such an alignment a from the satisfying assignment v. For each C, we choose a satisfying literal E consistent with the assignment.</S>
    <S sid="45" ssid="16">Align fC to the first available E token in e if the corresponding v is true, or the last if v is false.</S>
    <S sid="46" ssid="17">Align each fassign(v) to all remaining literals for v. Claims 1 and 2 together show that D is NPcomplete, and therefore that O is NP-hard.</S>
    <S sid="47" ssid="18">With another construction, we can show that S is #Phard, meaning that it is at least as hard as any #Pcomplete problem.</S>
    <S sid="48" ssid="19">#P is a class of counting problems related to NP, and #P-hard problems are NPhard as well.</S>
  </SECTION>
  <SECTION title="COUNTING PERFECT MATCHINGS, CPM" number="4">
    <S sid="49" ssid="1">Given a bipartite graph G with 2n vertices, count the number of matchings of size n. For a bipartite graph G with edge set E = {(vj, vl)}, we construct e and f with n words each, and set 0(ej&#8722;1 j, fl&#8722;1 l) = 1 and 0 otherwise.</S>
    <S sid="50" ssid="2">The number of perfect matchings in G is the sum S for this weighted sentence pair.</S>
    <S sid="51" ssid="3">CPM is #P-complete (Valiant, 1979), so S (and hence &#163;) is #P-hard.</S>
  </SECTION>
  <SECTION title="4 Solving the Optimization Problem" number="5">
    <S sid="52" ssid="1">Although O is NP-hard, we present an approach to solving it using integer linear programming (ILP).</S>
    <S sid="53" ssid="2">Marcu and Wong (2002) describes an approximation to O.</S>
    <S sid="54" ssid="3">Given a weighted sentence pair, high scoring phrases are linked together greedily to reach an initial alignment.</S>
    <S sid="55" ssid="4">Then, local operators are applied to hill-climb A in search of the maximum a.</S>
    <S sid="56" ssid="5">This procedure also approximates &#163; by collecting weighted counts as the space is traversed.</S>
    <S sid="57" ssid="6">DeNero et al. (2006) instead proposes an exponential-time dynamic program to systematically explore A, which can in principle solve either O or &#163;.</S>
    <S sid="58" ssid="7">In practice, however, the space of alignments has to be pruned severely using word alignments to control the running time of EM.</S>
    <S sid="59" ssid="8">Notably, neither of these inference approaches offers any test to know if the optimal alignment is ever found.</S>
    <S sid="60" ssid="9">Furthermore, they both require small data sets due to computational expense.</S>
    <S sid="61" ssid="10">We cast O as an ILP problem, for which many optimization techniques are well known.</S>
    <S sid="62" ssid="11">First, we introduce binary indicator variables ai,j,k,l denoting whether (eij, fkl) &#8712; a.</S>
    <S sid="63" ssid="12">Furthermore, we introduce binary indicators ei,j and fk,l that denote whether some (eij, &#183;) or (&#183;, fkl) appears in a, respectively.</S>
    <S sid="64" ssid="13">Finally, we represent the weight function 0 as a weight vector in the program: wi,j,k,l = log 0(eij, fkl).</S>
    <S sid="65" ssid="14">Now, we can express an integer program that, when optimized, will yield the optimal alignment of our weighted sentence pair.</S>
    <S sid="66" ssid="15">Sentences per hour on a four-core server Frequency of optimal solutions found Frequency of e-optimal solutions found Using an off-the-shelf ILP solver,4 we were able to quickly and reliably find the globally optimal phrase alignment under 0(eij, fkl) derived from the Moses pipeline (Koehn et al., 2007).5 Table 1 shows that finding the optimal phrase alignment is accurate and efficient.6 Hence, this simple search technique effectively addresses the intractability challenges inherent in evaluating new phrase alignment ideas.</S>
    <S sid="67" ssid="16">The objective function is log 0(a) for a implied by {ai,j,k,l = 1}.</S>
    <S sid="68" ssid="17">Constraint equation 1 ensures that the English phrases form a partition of e &#8211; each word in e appears in exactly one phrase &#8211; as does equation 2 for f. Constraint equation 3 ensures that each phrase in the chosen partition of e appears in exactly one link, and that phrases not in the partition are not aligned (and likewise constraint 4 for f).</S>
  </SECTION>
</PAPER>
