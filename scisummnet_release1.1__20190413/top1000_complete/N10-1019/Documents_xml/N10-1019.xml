<PAPER>
  <S sid="0">Using Mostly Native Data to Correct Errors in Learners&amp;rsquo; Writing</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We present results from a range of experiments on article and preposition error correction for non-native speakers of English.</S>
    <S sid="2" ssid="2">We first compare a language model and errorspecific classifiers (all trained on large English corpora) with respect to their performance in error detection and correction.</S>
    <S sid="3" ssid="3">We then combine the language model and the classifiers in a meta-classification approach by combining evidence from the classifiers and the language model as input features to the metaclassifier.</S>
    <S sid="4" ssid="4">The meta-classifier in turn is trained on error-annotated learner data, optimizing the error detection and correction performance on this domain.</S>
    <S sid="5" ssid="5">The meta-classification approach results in substantial gains over the classifieronly and language-model-only scenario.</S>
    <S sid="6" ssid="6">Since the meta-classifier requires error-annotated data for training, we investigate how much training data is needed to improve results over the baseline of not using a meta-classifier.</S>
    <S sid="7" ssid="7">All evaluations are conducted on a large errorannotated corpus of learner English.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="8" ssid="1">Research on the automatic correction of grammatical errors has undergone a renaissance in the past decade.</S>
    <S sid="9" ssid="2">This is, at least in part, based on the recognition that non-native speakers of English now outnumber native speakers by 2:1 in some estimates, so any tool in this domain could be of tremendous value.</S>
    <S sid="10" ssid="3">While earlier work in both native and non-native error correction was focused on the construction of grammars and analysis systems to detect and correct specific errors (see Heift and Schulze, 2005 for a detailed overview), more recent approaches have been based on data-driven methods.</S>
    <S sid="11" ssid="4">The majority of the data-driven methods use a classification technique to determine whether a word is used appropriately in its context, continuing the tradition established for contextual spelling correction by Golding (1995) and Golding and Roth (1996).</S>
    <S sid="12" ssid="5">The words investigated are typically articles and prepositions.</S>
    <S sid="13" ssid="6">They have two distinct advantages as the subject matter for investigation: They are a closed class and they comprise a substantial proportion of learners&#8217; errors.</S>
    <S sid="14" ssid="7">The investigation of preposition corrections can even be narrowed further: amongst the more than 150 English prepositions, the usage of the ten most frequent prepositions accounts for 82% of preposition errors in the 20 million word Cambridge University Press Learners&#8217; Corpus.</S>
    <S sid="15" ssid="8">Learning correct article use is most difficult for native speakers of an L1 that does not overtly mark definiteness and indefiniteness as English does.</S>
    <S sid="16" ssid="9">Prepositions, on the other hand, pose difficulties for language learners from all L1 backgrounds (Dalgish, 1995; Bitchener et al., 2005).</S>
    <S sid="17" ssid="10">Contextual classification methods represent the context of a preposition or article as a feature vector gleaned from a window of a few words around the preposition/article.</S>
    <S sid="18" ssid="11">Different systems typically vary along three dimensions: choice of features, choice of classifier, and choice of training data.</S>
    <S sid="19" ssid="12">Features range from words and morphological information (Knight and Chander, 1994) to the inclusion of part-of-speech tags (Minnen et al., 2000; Han et al., 2004, 2006; Chodorow et al., 2007; Gamon et al., 2008, 2009; Izumi et al., 2003, 2004; Tetrault and Chodorow, 2008) to features based on linguistic analysis and on WordNet (Lee, 2004; DeFelice and Pulman, 2007, 2008).</S>
    <S sid="20" ssid="13">Knight and Chander (1994) and Gamon et al. (2008) used decision tree classifiers but, in general, maximum entropy classifiers have become the classification algorithm of choice.</S>
    <S sid="21" ssid="14">Training data are normally drawn from sizeable corpora of native English text (British National Corpus for DeFelice and Pulman (2007, 2008), Wall Street Journal in Knight and Chander (1994), a mix of Reuters and Encarta in Gamon et al. (2008, 2009).</S>
    <S sid="22" ssid="15">In order to partially address the problem of domain mismatch between learners&#8217; writing and the news-heavy data sets often used in data-driven NLP applications, Han et al. (2004, 2006) use 31.5 million words from the MetaMetrics corpus, a diverse corpus of fiction, non-fiction and textbooks categorized by reading level.</S>
    <S sid="23" ssid="16">In addition to the classification approach to error detection, there is a line of research - going back to at least Atwell (1987) - that uses language models.</S>
    <S sid="24" ssid="17">The idea here is to detect errors in areas where the language model score is suspiciously low.</S>
    <S sid="25" ssid="18">Atwell (1987) uses a part-of-speech tag language model to detect errors, Chodorow and Leacock (2000) use mutual information and chi square statistics to identify unlikely function word and part-of-speech tag sequences, Turner and Charniak (2007) employ a language model based on a generative statistical parser, and Stehouwer and van Zaanen (2009) investigate a diverse set of language models with different backoff strategies to determine which choice, from a set of confusable words, is most likely in a given context.</S>
    <S sid="26" ssid="19">Gamon et al. (2008, 2009) use a combination of error-specific classifiers and a large generic language model with handtuned heuristics for combining their scores to maximize precision.</S>
    <S sid="27" ssid="20">Finally, Yi et al. (2008) and Hermet et al.</S>
    <S sid="28" ssid="21">(2008) use n-gram counts from the web as a language model approximation to identify likely errors and correction candidates.</S>
  </SECTION>
  <SECTION title="2 Our Approach" number="2">
    <S sid="29" ssid="1">We combine evidence from the two kinds of datadriven models that have been used for error detection and correction (error-specific classifiers and a language model) through a meta-classifier.</S>
    <S sid="30" ssid="2">We use the term primary models for both the initial errorspecific classifiers and a large generic language model.</S>
    <S sid="31" ssid="3">The meta-classifier takes the output of the primary models (language model scores and class probabilities) as input.</S>
    <S sid="32" ssid="4">Using a meta-classifier for ensemble learning has been proven effective for many machine learning problems (see e.g.</S>
    <S sid="33" ssid="5">Dietterich 1997), especially when the combined models are sufficiently different to make distinct kinds of errors.</S>
    <S sid="34" ssid="6">The meta-classification approach also has an advantage in terms of data requirements: Our primary models are trained on large sets of widely available well-formed English text.</S>
    <S sid="35" ssid="7">The metaclassifier, in contrast, is trained on a smaller set of error-annotated learner data.</S>
    <S sid="36" ssid="8">This allows us to address the problem of domain mismatch: We can leverage large well-formed data sets that are substantially different from real-life learner language for the primary models, and then fine-tune the output to learner English using a much smaller set of expensive and hard-to-come-by annotated learner writing.</S>
    <S sid="37" ssid="9">For the purpose of this paper, we restrict ourselves to article and preposition errors.</S>
    <S sid="38" ssid="10">The questions we address are: Our evaluation is conducted on a large data set of error-annotated learner data.</S>
  </SECTION>
  <SECTION title="3 Experimental Design" number="3">
    <S sid="39" ssid="1">Our error-specific primary models are maximum entropy classifiers (Rathnaparki 1997) for articles and for prepositions.</S>
    <S sid="40" ssid="2">Features include contextual features from a window of six tokens to the right and left, such as lexical features (word), part-ofspeech tags, and a handful of &#8220;custom features&#8221;, for example lexical head of governing VP or governed NP (as determined by part-of-speech-tag based heuristics).</S>
    <S sid="41" ssid="3">For both articles and prepositions, we employ two classifiers: the first determines the probability that a preposition/article is present in a given context (presence classifier), the second classifier determines the probability that a specific article or preposition is chosen (choice classifier).</S>
    <S sid="42" ssid="4">A training event for the presence classifier is any noun phrase boundary that is a potential location for a preposition or article.</S>
    <S sid="43" ssid="5">Whether a location is an NP boundary and a potential site for an article/preposition is determined by a simple heuristic based on part-of-speech tags.</S>
    <S sid="44" ssid="6">The candidates for article choice are the and a/an, and the choice for prepositions is limited to twelve very frequent prepositions (in, at, on, for, since, with, to, by, about, from, of, as) which account for 86.2 % of preposition errors in our learner data.</S>
    <S sid="45" ssid="7">At prediction time, the presence and choice classifiers produce a list of potential changes in preposition/article usage for the given context.</S>
    <S sid="46" ssid="8">Since the application of our system consists of suggesting corrections to a user, we do not consider identity operations where the suggested word choice equals the actual word choice.</S>
    <S sid="47" ssid="9">For a potential preposition/article location where there is no preposition/article, each of the candidates is considered for an insertion operation.</S>
    <S sid="48" ssid="10">For a potential location that contains a preposition/article, the possible operations include deletion of the existing token or substitution with another preposition/article from the candidate set.</S>
    <S sid="49" ssid="11">Training data for the classifiers is a mix of primarily well-formed data sources: There are about 2.5 million sentences, distributed roughly equally across Reuters newswire, Encarta encyclopedia, UN proceedings, Europarl and web-scraped general domain data1.</S>
    <S sid="50" ssid="12">From the total set of candidate operations (substitutions, insertions, and deletions) that each combination of presence and choice classifier produces for prepositions, we consider only the top three highest-scoring operations2.</S>
    <S sid="51" ssid="13">Our language model is trained on the Gigaword corpus (Linguistic Data Consortium, 2003) and utilizes 7-grams with absolute discount smoothing (Gao, Goodman, and Miao, 2001; Nguyen, Gao, and Mahajan, 2007).</S>
    <S sid="52" ssid="14">Each suggested revision from the preposition/article classifiers (top three for prepositions, all revisions from the article classifiers) are scored by the language model: for each revision, the language model score of the original and the suggested rewrite is recorded, as is the language model entropy (defined as the language model probability of the sentence, normalized by sentence length).</S>
    <S sid="53" ssid="15">1 We are not able to train the error-specific classifiers on a larger data set like the one we use for the language model.</S>
    <S sid="54" ssid="16">Note that the 2.5 million sentences used in the classifier training already produce 16.5 million training vectors.</S>
    <S sid="55" ssid="17">2 This increases runtime performance because fewer calls need to be made to the language model which resides on a server.</S>
    <S sid="56" ssid="18">In addition, we noticed that overall precision is increased by not considering the less likely suggestions by the classifier.</S>
    <S sid="57" ssid="19">For the meta-classifier we chose to use a decision tree, trained with the WinMine toolkit (Chickering 2002).</S>
    <S sid="58" ssid="20">The motivation for this choice is that decision trees are well-suited for continuously valued features and for non-linear decision surfaces.</S>
    <S sid="59" ssid="21">An obvious alternative would be to use a support vector machine with non-linear kernels, a route that we have not explored yet.</S>
    <S sid="60" ssid="22">The feature set for the meta-classifier consists of the following scores from the primary models, including some arithmetic combinations of scores: Ratio and delta of Log LM score of the original word choice and the suggested revision (2 features) Ratio and delta of the LM entropy for original and suggested revision (2 features).</S>
    <S sid="61" ssid="23">Products of the above ratios/deltas and classifier choice/presence probabilities Type of operation: deletion, insertion, substitution (3 features) For each preposition/article choice: P(choice): 13 features for prepositions (12 prepositions and other for a preposition not in that set), 2 for articles Original token: none (for insertion) or the original preposition/article (13 features for prepositions, 2 for articles) Suggested token: none (for deletion) or the suggested preposition/article (13 features for prepositions, 2 for articles) The total number of features is 63 for prepositions and 36 for articles.</S>
    <S sid="62" ssid="24">The meta-classifier is trained by collecting suggested corrections from the primary models on the error annotated data.</S>
    <S sid="63" ssid="25">The error-annotation provides the binary class label, i.e. whether the suggested revision is correct or incorrect.</S>
    <S sid="64" ssid="26">If the suggested revision matches an annotated correction, it counts as correct, if it does not match it counts as incorrect.</S>
    <S sid="65" ssid="27">To give an example, the top three preposition operations for the position before this test in the sentence I rely to this test are: Change_to_on Delete_to Change_to_of The class label in this example is &amp;quot;suggestion correct&amp;quot;, assuming that the change of preposition is annotated in the data.</S>
    <S sid="66" ssid="28">The operation Change&#8212;to&#8212;on in this example has the following feature values for An example of a path through the decision tree meta-classifier for prepositions is: Original_of is 0 and choice_prob is Not &lt; 0.329 and to_prob is &lt; 0.108 and Suggested_on is 1 and Original_in is 0 and choice_prob is Not &lt; 0.497 and choice_prob is Not &lt; 0.647 and presence_prob is Not &lt; 0.553 The leaf node at the end of this path has a 0.21 probability of changing &#8220;to&#8221; to &#8220;on&#8221; being a correct rewrite suggestion.</S>
    <S sid="67" ssid="29">The features selected by the decision trees range across all of the features discussed above.</S>
    <S sid="68" ssid="30">For both the article and preposition meta-classifiers, the ranking of features by importance (as measured by how close to the root the decision tree uses the feature) follows the order in which features are listed.</S>
    <S sid="69" ssid="31">In contrast to the training data for the primary models, the meta-classifier is trained on errorannotated data from the Cambridge University Press Learners&#8217; Corpus (CLC).</S>
    <S sid="70" ssid="32">The version of CLC that we have licensed currently contains a total of 20 million words from learner English essays written as part of one of Cambridge&#8217;s English Language Proficiency Tests (ESOL) &#8211; at all proficiency levels.</S>
    <S sid="71" ssid="33">The essays are annotated for error type, erroneous span and suggested correction.</S>
    <S sid="72" ssid="34">We first perform a random split of the essays into 70% training, 20% test and 10% for parameter tuning.</S>
    <S sid="73" ssid="35">Next, we create error-specific training, tuning and test sets by performing a number of cleanup steps on the data.</S>
    <S sid="74" ssid="36">First, we correct all errors that were flagged as being spelling errors, since we presume that the user will perform a spelling check on the data before proceeding to grammatical proofing.</S>
    <S sid="75" ssid="37">Spelling errors that were flagged as morphology errors were left alone.</S>
    <S sid="76" ssid="38">By the same token, we corrected confused words that are covered by MS Word.</S>
    <S sid="77" ssid="39">We then revised British English spelling to American English spelling conventions.</S>
    <S sid="78" ssid="40">In addition, we eliminated all annotations for nonpertinent errors (i.e., non-preposition/article errors, or errors that do not involve any of the targeted prepositions), but we maintained the original (erroneous) text for these.</S>
    <S sid="79" ssid="41">This makes our task harder since we will have to learn how to make predictions in text containing multiple errors, but it also is a more realistic scenario given real learner writing.</S>
    <S sid="80" ssid="42">Finally, we eliminated sentences containing nested errors and immediately adjacent errors when they involve pertinent (preposition/article) errors.</S>
    <S sid="81" ssid="43">For example, an annotated error &amp;quot;take a picture&amp;quot; with the correction &amp;quot;take pictures&amp;quot; is annotated as two consecutive errors: &amp;quot;delete a&amp;quot; and &amp;quot;rewrite picture as pictures&amp;quot;.</S>
    <S sid="82" ssid="44">Since the error involves operations on both the article and the noun, which our article correction module is not designed to cover, we eliminated the sentence from the data.</S>
    <S sid="83" ssid="45">(This last step eliminated 31% of the sentences annotated with preposition errors and 29% or the sentences annotated with article errors.)</S>
    <S sid="84" ssid="46">Sentences that were flagged for a replacement error but contained no replacement were also eliminated from the data.</S>
    <S sid="85" ssid="47">The final training, tuning and test set sizes are as follows (note that for prepositions we had to reduce the size of the training set by an additional 20% in order to avoid memory limitations of our decision tree tools).</S>
    <S sid="86" ssid="48">Prepositions: train: 584,485 sentences, 68,806 prep errors tuning: 105,166 sentences, 9918 prep errors test: 208,724 sentences, 19,706 prep errors Articles: train: 737,091 sentences, 58,356 article errors tuning: 106,052 sentences, 8341 article errors test: 210,577 sentences, 16,742 article errors This mix is strongly biased towards &#8220;correct&#8221; usage.</S>
    <S sid="87" ssid="49">After all, there are many more correct uses of articles and prepositions in the CLC data than incorrect ones.</S>
    <S sid="88" ssid="50">Again, this is likely to make our task harder, but more realistic, since both at training and test time we are working with the error distribution that is observed in learner data.</S>
    <S sid="89" ssid="51">To evaluate, we run our meta-classifier system on the preposition and article test sets described in above and calculate precision and recall.</S>
    <S sid="90" ssid="52">Precision and recall for the overall system are controlled by thresholding the meta-classifier class probability.</S>
    <S sid="91" ssid="53">As a point of comparison, we also evaluate the performance of the primary models (the error-specific classifier and the language model) in isolation.</S>
    <S sid="92" ssid="54">Precision and recall for the error-specific classifier is controlled by thresholding class probability.</S>
    <S sid="93" ssid="55">To control the precision-recall tradeoff for the language model, we calculate the difference between the log probabilities of the original user input and the suggested correction.</S>
    <S sid="94" ssid="56">We then vary that difference across all observed values in small increments, which affects precision and recall: the higher the difference, the fewer instances we find, but the higher the reliability of these instances is.</S>
    <S sid="95" ssid="57">This evaluation differs from many of the evaluations reported in the error detection/correction literature in several respects.</S>
    <S sid="96" ssid="58">First, the test set is a broad random sample across all proficiency levels in the CLC data.</S>
    <S sid="97" ssid="59">Second, it is far larger than any sets that have been so far to report results of preposition/article correction on learner data.</S>
    <S sid="98" ssid="60">Finally, we are only considering cases in which the system suggests a correction.</S>
    <S sid="99" ssid="61">In other words, we do not count as correct instances where the system's prediction matches a correct preposition/article.</S>
    <S sid="100" ssid="62">This evaluation scheme, however, ignores one aspect of a real user scenario.</S>
    <S sid="101" ssid="63">Of all the suggested changes that are counted as wrong in our evaluation because they do not match an annotated error, some may in fact be innocuous or even helpful for a real user.</S>
    <S sid="102" ssid="64">Such a situation can arise for a variety of reasons: In some cases, there are legitimate alternative ways to correct an error.</S>
    <S sid="103" ssid="65">In other cases, the classifier has identified the location of an error although that error is of a different kind (which can be beneficial because it causes the user to make a correction - see Leacock et al., 2009).</S>
    <S sid="104" ssid="66">Gamon et al. (2009), for example manually evaluate preposition suggestions as belonging to one of three categories: (a) properly correcting an existing error, (b) offering a suggestion that neither improves nor degrades the user sentence, (c) offering a suggestion that would degrade the user input.</S>
    <S sid="105" ssid="67">Obviously, (c) is a more serious error than (b).</S>
    <S sid="106" ssid="68">Similarly, Tetrault and Chodorow (2008) annotate their test set with preposition choices that are valid alternatives.</S>
    <S sid="107" ssid="69">We do not have similar information in the CLC data, but we can perform a manual analysis of a random subset of test data to estimate an &amp;quot;upper bound&amp;quot; for our precision/recall curve.</S>
    <S sid="108" ssid="70">Our annotator manually categorized each suggested correction into one of seven categories.</S>
    <S sid="109" ssid="71">Details of the distribution of suggested corrections into the seven categories are shown in Table 1.</S>
    <S sid="110" ssid="72">This analysis involves costly manual evaluation, so we only performed it at one point of the precision/recall curve (our current runtime system setting).</S>
    <S sid="111" ssid="73">The sample size was 6,000 sentences for prepositions and 5981 sentences for articles (half of the sentences were flagged as containing at least one article/preposition error while the other half were not).</S>
    <S sid="112" ssid="74">On this manual evaluation, we achieve 32.87% precision if we count all flags that do not perfectly match a CLC annotation as a false positive.</S>
    <S sid="113" ssid="75">Only counting the last category (introduction of an error) as a false positive, precision is at 85.34%.</S>
    <S sid="114" ssid="76">Similarly, for articles, the manual estimation arrives at 76.74% precision, where pure CLC annotation matching gives us 33.34%.</S>
  </SECTION>
  <SECTION title="4 Results" number="4">
    <S sid="115" ssid="1">Figure 1 and Figure 2 show the evaluation results of the meta-classifier for prepositions and articles, compared to the performance of the error-specific classifier and language model alone.</S>
    <S sid="116" ssid="2">For both prepositions and articles, the first notable observation is that the language model outperforms the classifier by a large margin.</S>
    <S sid="117" ssid="3">This came as a surprise to us, given the recent prevalence of classification approaches in this area of research and the fact that our classifiers produce state-of-the art performance when compared to other systems, on well-formed data.</S>
    <S sid="118" ssid="4">Second, the combination of scores from the classifier and language model through a metaclassifier clearly outperforms either one of them in isolation.</S>
    <S sid="119" ssid="5">This result, again, is consistent across prepositions and articles.</S>
    <S sid="120" ssid="6">We had previously used a hand-tuned score combination instead of a meta-classifier.</S>
    <S sid="121" ssid="7">We also established that this heuristic performs worse than the language model for prepositions, and just about at the same level as the language model for articles.</S>
    <S sid="122" ssid="8">Note, though, that the manual tuning was performed to optimize performance against a different data set (the Chinese Learners of English Corpus: CLEC), so the latter point is not really comparable and hence is not included in the charts.</S>
    <S sid="123" ssid="9">We now turn to the question of the required amount of annotated training data for the metaclassifier.</S>
    <S sid="124" ssid="10">CLC is commercially available, but it is obvious that for many researchers such a corpus will be too expensive and they will have to create or license their own error-annotated corpus.</S>
    <S sid="125" ssid="11">Thus the question of whether one could use less annotated data to train a meta-classifier and still achieve reasonable results becomes important.</S>
    <S sid="126" ssid="12">Figure 3 and Figure 4 show results obtained by using decreasing amounts of training data.</S>
    <S sid="127" ssid="13">The dotted line shows the language model baseline.</S>
    <S sid="128" ssid="14">Any result below the language model performance shows that the training data is insufficient to warrant the use of a metaclassifier.</S>
    <S sid="129" ssid="15">In these experiments there is a clear difference between prepositions and articles.</S>
    <S sid="130" ssid="16">We can reduce the amount of training data for prepositions to 10% of the original data and still outperform the language model baseline.</S>
    <S sid="131" ssid="17">10% of the data corresponds to 6,800 annotated preposition errors and 58,400 sentences.</S>
    <S sid="132" ssid="18">When we reduce the training data to 1% of the original amount (680 annotated errors, 5,800 sentences) we clearly see degraded results compared to the language model.</S>
    <S sid="133" ssid="19">With articles, the system is much less data-hungry.</S>
    <S sid="134" ssid="20">Reducing the training data to 1% (580 annotated errors, 7,400 sentences) still outperforms the language model alone.</S>
    <S sid="135" ssid="21">This result can most likely be explained by the different complexity of the preposition and article tasks.</S>
    <S sid="136" ssid="22">Article operations include only six distinct operations: deletion of the, deletion of a/an, insertion of the, insertion of a/an, change of the to a/an, and change of a/an to the.</S>
    <S sid="137" ssid="23">For the twelve prepositions that we work with, the total number of insertions, deletions and substitutions that require sufficient training events and might need different score combinations is 168, making the problem much harder.</S>
    <S sid="138" ssid="24">To find out if it is possible to reduce the required amount of annotated preposition errors for a system that still covers more than one third of the preposition errors, we ran the same learning curve experiments but now only taking the four most frequent prepositions into account: to, of, in, for.</S>
    <S sid="139" ssid="25">In the CLC, these four prepositions account for 39.8% of preposition error flags.</S>
    <S sid="140" ssid="26">As in the previous experiments, however, we found that we are not able to outperform the baseline by using just 1% of annotated data.</S>
  </SECTION>
  <SECTION title="5 Error Analysis" number="5">
    <S sid="141" ssid="1">We have conducted a failure analysis on examples where the system produces a blatantly bad suggestion in order to see whether this decision could be attributed to the error-specific classifier or to the language model, or both, and what the underlying cause is.</S>
    <S sid="142" ssid="2">This preliminary analysis highlights two common causes for bad flags.</S>
    <S sid="143" ssid="3">One is that of frequent lower order n-grams that dominate the language model score.</S>
    <S sid="144" ssid="4">Consider the CLEC sentence I get to know the world outside the campus by newspaper and television.</S>
    <S sid="145" ssid="5">The system suggests deleting by.</S>
    <S sid="146" ssid="6">The cause of this bad decision is that the bigram campus newspaper is extremely likely, trumping all other n-grams, and leading to a high probability for the suggested string compared to the original: Log (P(original)) _ -26.2 and Log (P(suggestion)) _ -22.4.</S>
    <S sid="147" ssid="7">This strong imbalance of the language model score causes the metaclassifier to assign a relatively high probability to this being a correct revision, even though the errorspecific classifier is on the right track and gives a relatively high probability for the presence of a preposition and the choice of by.</S>
    <S sid="148" ssid="8">A similar example, but for substitution, occurs in They give discounts to their workers on books.</S>
    <S sid="149" ssid="9">Here the bigram in books has a very high probability and the system incorrectly suggests replacing on with in.</S>
    <S sid="150" ssid="10">An example for insertion is seen in Please send me the letter back writing what happened.</S>
    <S sid="151" ssid="11">Here, the bigram back to causes the bad suggestion of inserting to after back.</S>
    <S sid="152" ssid="12">Since the language model is generally more accurate than the error-specific classifier, the meta-classifier tends to trust its score more than that of the classifier.</S>
    <S sid="153" ssid="13">As a result we see this kind of error quite frequently.</S>
    <S sid="154" ssid="14">Another common error class is the opposite situation: the language model is on the right track, but the classifier makes a wrong assessment.</S>
    <S sid="155" ssid="15">Consider Whatever direction my leg fought to stretch, with the suggested insertion of on before my leg.</S>
    <S sid="156" ssid="16">Here Log (P(original)) _ -31.5 and Log (P(suggestion)) _ -32.1, a slight preference for the original string.</S>
    <S sid="157" ssid="17">The error-specific classifier, however, assigns a probability of 0.65 for a preposition to be present, and 0.80 for that preposition to be on.</S>
    <S sid="158" ssid="18">The contextual features that are important in that decision are: the insertion site is between a pronoun and a noun, it is relatively close to the beginning of the sentence, and the head of the NP my leg has a possible mass noun sense.</S>
    <S sid="159" ssid="19">An example involving deletion is in Someone came to sort of it.</S>
    <S sid="160" ssid="20">While the language model assigns a high probability for deleting of, the error-specific classifier does not.</S>
    <S sid="161" ssid="21">Similarly, for substitution, in Your experience is very interesting for our company, the language model suggests substituting for with to while the classifier gives the substitution a very low probability.</S>
    <S sid="162" ssid="22">As can be seen from the learner sentences cited above, often, even though the sentences are grammatical, they are not idiomatic, which can confuse all of the classifiers.</S>
  </SECTION>
  <SECTION title="6 Conclusion and Future Work" number="6">
    <S sid="163" ssid="1">We have addressed two questions in this paper: 1.</S>
    <S sid="164" ssid="2">How effective is a meta-classification approach that combines language modeling and error-specific classification to the detection and correction of preposition and article errors by non-native speakers?</S>
    <S sid="165" ssid="3">2.</S>
    <S sid="166" ssid="4">How much error-annotated data is sufficient to produce positive results using that approach?</S>
    <S sid="167" ssid="5">We have shown that a meta-classifier approach outperforms using a language model or a classifier alone.</S>
    <S sid="168" ssid="6">An interesting side result is that the language model solidly outperforms the contextual classifier for both article and preposition correction, contrary to current practice in the field.</S>
    <S sid="169" ssid="7">Training data requirements for the meta-classifier vary significantly between article and preposition error detection.</S>
    <S sid="170" ssid="8">The article meta-classifier can be trained with as few as 600 annotated errors, but the preposition meta-classifier requires more annotated data by an order of magnitude.</S>
    <S sid="171" ssid="9">Still, the overall amount of expensive error-annotated data is relatively small, and the meta-classification approach makes it possible to leverage large amounts of wellformed text in the primary models, tuning to the non-native domain in the meta-classifier.</S>
    <S sid="172" ssid="10">We believe that the logical next step is to combine more primary models in the meta-classifier.</S>
    <S sid="173" ssid="11">Candidates for additional primary models include (1) more classifiers trained either on different data sets or with a different classification algorithm, and (2) more language models, such as skip models or part-of-speech n-gram language models.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="7">
    <S sid="174" ssid="1">We thank Claudia Leacock from the Butler Hill Group for detailed error analysis and the anonymous reviewers for helpful and constructive feedback.</S>
  </SECTION>
</PAPER>
