<PAPER>
  <S sid="0">An Unsupervised Morpheme-Based HMM For Hebrew Morphological Disambiguation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Morphological disambiguation is the process of assigning one set of morphological features to each individual word in a text.</S>
    <S sid="2" ssid="2">When the word is ambiguous (there are several possible analyses for the word), a disambiguation procedure based on the word context must be applied.</S>
    <S sid="3" ssid="3">This paper deals with morphological disambiguation of the Hebrew language, which combines morphemes into a word in both agglutinative and fusional ways.</S>
    <S sid="4" ssid="4">We present an unsupervised stochastic model &#8211; the only resource we use is a morphological analyzer &#8211; which deals with the data sparseness problem caused by the affixational morphology of the Hebrew language.</S>
    <S sid="5" ssid="5">We present a text encoding method for languages with affixational morphology in which the knowledge of word formation rules (which are quite restricted in Hebrew) helps in the disambiguation.</S>
    <S sid="6" ssid="6">We adapt HMM algorithms for learning and searching this text representation, in such a way that segmentation and tagging can be learned in parallel in one step.</S>
    <S sid="7" ssid="7">Results on a large scale evaluation indicate that this learning improves disambiguation for complex tag sets.</S>
    <S sid="8" ssid="8">Our method is applicable to other languages with affix morphology.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="9" ssid="1">Morphological disambiguation is the process of assigning one set of morphological features to each individual word in a text, according to the word context.</S>
    <S sid="10" ssid="2">In this work, we investigate morphological disambiguation in Modern Hebrew.</S>
    <S sid="11" ssid="3">We explore unsupervised learning method, which is more challenging than the supervised case.</S>
    <S sid="12" ssid="4">The main motivation for this approach is that despite the development of annotated corpora in Hebrew', there is still not enough data available for supervised training.</S>
    <S sid="13" ssid="5">The other reason, is that unsupervised methods can handle the dynamic nature of Modern Hebrew, as it evolves over time.</S>
    <S sid="14" ssid="6">In the case of English, because morphology is simpler, morphological disambiguation is generally covered under the task of part-of-speech tagging.</S>
    <S sid="15" ssid="7">The main morphological variations are embedded in the tag name (for example, Ns and Np for noun singular or plural).</S>
    <S sid="16" ssid="8">The tagging accuracy of supervised stochastic taggers is around 96%97% (Manning and Schutze, 1999, 10.6.1).</S>
    <S sid="17" ssid="9">Merialdo (1994) reports an accuracy of 86.6% for an unsupervised word-based HMM, trained on a corpus of 42,186 sentences (about 1M words), over a tag set of 159 different tags.</S>
    <S sid="18" ssid="10">Elworthy (1994), in contrast, reports an accuracy of 75.49%, 80.87% and 79.12% for unsupervised word-based HMM trained on parts of the LOB corpora, with a tagset of 134 tags.</S>
    <S sid="19" ssid="11">With good initial conditions, such as good approximation of the tag distribution for each word, Elworthy reports an improvement to 94.6%, 92.27% and 94.51% on the same data sets.</S>
    <S sid="20" ssid="12">Merialdo, on the other hand, reports an improvement to 92.6% and 94.4% for the case where 100 and 2000 sentences of the training corpus are manually tagged.</S>
    <S sid="21" ssid="13">Modern Hebrew is characterized by rich morphology, with a high level of ambiguity.</S>
    <S sid="22" ssid="14">On average, in our corpus, the number of possible analyses per word reached 2.4 (in contrast to 1.4 for English).</S>
    <S sid="23" ssid="15">In Hebrew, several morphemes combine into a single word in both agglutinative and fusional ways.</S>
    <S sid="24" ssid="16">This results in a potentially high number of tags for each word.</S>
    <S sid="25" ssid="17">In contrast to English tag sets whose sizes range from 48 to 195, the number of tags for Hebrew, based on all combinations of the morphological attributes (part-of-speech, gender, number, person, tense, status, and the affixes' properties2), can grow theoretically to about 300,000 tags.</S>
    <S sid="26" ssid="18">In practice, we found only 1,934 tags in a corpus of news stories we gathered, which contains about 6M words.</S>
    <S sid="27" ssid="19">The large size of such a tag set (about 10 times larger than the most comprehensive English tag set) is problematic in term of data sparseness.</S>
    <S sid="28" ssid="20">Each morphological combination appears rarely, and more samples are required in order to learn the probabilistic model.</S>
    <S sid="29" ssid="21">In this paper, we hypothesize that the large set of morphological features of Hebrew words, should be modeled by a compact morpheme model, based on the segmented words (into prefix, baseform, and suffix).</S>
    <S sid="30" ssid="22">Our main result is that best performance is obtained when learning segmentation and morpheme tagging in one step, which is made possible by an appropriate text representation.</S>
  </SECTION>
  <SECTION title="2 Hebrew and Arabic Tagging" number="2">
    <S sid="31" ssid="1">Several works have dealt with Hebrew tagging in the past decade.</S>
    <S sid="32" ssid="2">In Hebrew, morphological analysis requires complex processing according to the rules of Hebrew word formation.</S>
    <S sid="33" ssid="3">The task of a morphological analyzer is to produce all possible analyses for a given word.</S>
    <S sid="34" ssid="4">Recent analyzers provide good performance and documentation of this process (Yona and Wintner, 2005; Segal, 2000).</S>
    <S sid="35" ssid="5">Morphological analyzers rely on a dictionary, and their performance is, therefore, impacted by the occurrence of unknown words.</S>
    <S sid="36" ssid="6">The task of a morphological disambiguation system is to pick the most likely analysis produced by an analyzer in the context of a full sentence.</S>
    <S sid="37" ssid="7">Levinger et al. (1995) developed a context-free method in order to acquire the morpho-lexical probabilities, from an untagged corpus.</S>
    <S sid="38" ssid="8">Their method handles the data sparseness problem by using a set of similar words for each word, built according to a set of rules.</S>
    <S sid="39" ssid="9">The rules produce variations of the morphological properties of the word analyses.</S>
    <S sid="40" ssid="10">Their tests indicate an accuracy of about 88% for context-free analysis selection based on the approximated analysis distribution.</S>
    <S sid="41" ssid="11">In tests we reproduced on a larger data set (30K tagged words), the accuracy is only 78.2%.</S>
    <S sid="42" ssid="12">In order to improve the results, the authors recommend merging their method together with other morphological disambiguation methods &#8211; which is the approach we pursue in this work.</S>
    <S sid="43" ssid="13">Levinger's morphological disambiguation system (Levinger, 1992) combines the above approximated probabilities with an expert system, based on a manual set of 16 syntactic constraints .</S>
    <S sid="44" ssid="14">In the first phase, the expert system is applied, dis24&#8211;86). ambiguating 35% of the ambiguous words with an accuracy of 99.6%.</S>
    <S sid="45" ssid="15">In order to increase the applicability of the disambiguation, approximated probabilities are used for words that were not disambiguated in the first stage.</S>
    <S sid="46" ssid="16">Finally, the expert system is used again over the new probabilities that were set in the previous stage.</S>
    <S sid="47" ssid="17">Levinger reports an accuracy of about 94% for disambiguation of 85% of the words in the text (overall 80% disambiguation).</S>
    <S sid="48" ssid="18">The system was also applied to prune out the least likely analyses in a corpus but without, necessarily, selecting a single analysis for each word.</S>
    <S sid="49" ssid="19">For this task, an accuracy of 94% was reported while reducing 92% of the ambiguous analyses.</S>
    <S sid="50" ssid="20">Carmel and Maarek (1999) use the fact that on average 45% of the Hebrew words are unambiguous, to rank analyses, based on the number of disambiguated occurrences in the text, normalized by the total number of occurrences for each word.</S>
    <S sid="51" ssid="21">Their application &#8211; indexing for an information retrieval system &#8211; does not require all of the morphological attributes but only the lemma and the PoS of each word.</S>
    <S sid="52" ssid="22">As a result, for this case, 75% of the words remain with one analysis with 95% accuracy, 20% with two analyses and 5% with three analyses.</S>
    <S sid="53" ssid="23">Segal (2000) built a transformation-based tagger in the spirit of Brill (1995).</S>
    <S sid="54" ssid="24">In the first phase, the analyses of each word are ranked according to the frequencies of the possible lemmas and tags in a training corpus of about 5,000 words.</S>
    <S sid="55" ssid="25">Selection of the highest ranked analysis for each word gives an accuracy of 83% of the test text &#8211; which consists of about 1,000 words.</S>
    <S sid="56" ssid="26">In the second stage, a transformation learning algorithm is applied (in contrast to Brill, the observed transformations are not applied, but used for re-estimation of the word couples probabilities).</S>
    <S sid="57" ssid="27">After this stage, the accuracy is about 93%.</S>
    <S sid="58" ssid="28">The last stage uses a bottomup parser over a hand-crafted grammar with 150 rules, in order to select the analysis which causes the parsing to be more accurate.</S>
    <S sid="59" ssid="29">Segal reports an accuracy of 95%.</S>
    <S sid="60" ssid="30">Testing his system over a larger test corpus, gives poorer results: Lembersky (2001) reports an accuracy of about 85%.</S>
    <S sid="61" ssid="31">Bar-Haim et al. (2005) developed a word segmenter and PoS tagger for Hebrew.</S>
    <S sid="62" ssid="32">In their architecture, words are first segmented into morphemes, and then, as a second stage, these morphemes are tagged with PoS.</S>
    <S sid="63" ssid="33">The method proceeds in two sequential steps: segmentation into morphemes, then tagging over morphemes.</S>
    <S sid="64" ssid="34">The segmentation is based on an HMM and trained over a set of 30K annotated words.</S>
    <S sid="65" ssid="35">The segmentation step reaches an accuracy of 96.74%.</S>
    <S sid="66" ssid="36">PoS tagging, based on unsupervised estimation which combines a small annotated corpus with an untagged corpus of 340K words by using smoothing technique, gives an accuracy of 90.51%.</S>
    <S sid="67" ssid="37">As noted earlier, there is as yet no large scale Hebrew annotated corpus.</S>
    <S sid="68" ssid="38">We are in the process of developing such a corpus, and we have developed tagging guidelines (Elhadad et al., 2005) to define a comprehensive tag set, and assist human taggers achieve high agreement.</S>
    <S sid="69" ssid="39">The results discussed above should be taken as rough approximations of the real performance of the systems, until they can be re-evaluated on such a large scale corpus with a standard tag set.</S>
    <S sid="70" ssid="40">Arabic is a language with morphology quite similar to Hebrew.</S>
    <S sid="71" ssid="41">Theoretically, there might be 330,000 possible morphological tags, but in practice, Habash and Rambow (2005) extracted 2,200 different tags from their corpus, with an average number of 2 possible tags per word.</S>
    <S sid="72" ssid="42">As reported by Habash and Rambow, the first work on Arabic tagging which used a corpus for training and evaluation was the work of Diab et al. (2004).</S>
    <S sid="73" ssid="43">Habash and Rambow were the first to use a morphological analyzer as part of their tagger.</S>
    <S sid="74" ssid="44">They developed a supervised morphological disambiguator, based on training corpora of two sets of 120K words, which combines several classifiers of individual morphological features.</S>
    <S sid="75" ssid="45">The accuracy of their analyzer is 94.8% &#8211; 96.2% (depending on the test corpus).</S>
    <S sid="76" ssid="46">An unsupervised HMM model for dialectal Arabic (which is harder to be tagged than written Arabic), with accurracy of 69.83%, was presented by Duh and Kirchhoff (2005).</S>
    <S sid="77" ssid="47">Their supervised model, trained on a manually annotated corpus, reached an accuracy of 92.53%.</S>
    <S sid="78" ssid="48">Arabic morphology seems to be similar to Hebrew morphology, in term of complexity and data sparseness, but comparison of the performances of the baseline tagger used by Habash and Rambow &#8211; which selects the most frequent tag for a given word in the training corpus &#8211; for Hebrew and Arabic, shows some intriguing differences: 92.53% for Arabic and 71.85% for Hebrew.</S>
    <S sid="79" ssid="49">Furthermore, as mentioned above, even the use of a sophisticated context-free tagger, based on (Levinger et al., 1995), gives low accuracy of 78.2%.</S>
    <S sid="80" ssid="50">This might imply that, despite the similarities, morphological disambiguation in Hebrew might be harder than in Arabic.</S>
    <S sid="81" ssid="51">It could also mean that the tag set used for the Arabic corpora has not been adapted to the specific nature of Arabic morphology (a comment also made in (Habash and Rambow, 2005)).</S>
    <S sid="82" ssid="52">We propose an unsupervised morpheme-based HMM to address the data sparseness problem.</S>
    <S sid="83" ssid="53">In contrast to Bar-Haim et al., our model combines segmentation and morphological disambiguation, in parallel.</S>
    <S sid="84" ssid="54">The only resource we use in this work is a morphological analyzer.</S>
    <S sid="85" ssid="55">The analyzer itself can be generated from a word list and a morphological generation module, such as the HSpell wordlist (Har'el and Kenigsberg, 2004).</S>
  </SECTION>
  <SECTION title="3 Morpheme-Based Model for Hebrew" number="3">
    <S sid="86" ssid="1">The lexical items of word-based models are the words of the language.</S>
    <S sid="87" ssid="2">The implication of this decision is that both lexical and syntagmatic relations of the model, are based on a word-oriented tagset.</S>
    <S sid="88" ssid="3">With such a tagset, it must be possible to tag any word of the language with at least one tag.</S>
    <S sid="89" ssid="4">Let us consider, for instance, the Hebrew phrase bclm hn`im3, which contains two words.</S>
    <S sid="90" ssid="5">The word bclm has several possible morpheme segmentations and analyses as described in Table 1.</S>
    <S sid="91" ssid="6">In wordbased HMM, we consider such a phrase to be generated by a Markov process, based on the wordoriented tagset of N = 1934 tags/states and about M = 175K word types.</S>
    <S sid="92" ssid="7">Line W of Table 2 describes the size of a first-order word-based HMM, built over our corpus.</S>
    <S sid="93" ssid="8">In this model, we found 834 entries for the II vector (which models the distribution of tags in first position in sentences) out of possibly N = 1934, about 250K entries for the A matrix (which models the transition probabilities from tag to tag) out of possibly N2 ;::Li 3.7M, and about 300K entries for the B matrix (which models the emission probabilities from tag to word) out of possibly M &#183; N ;::Li 350M.</S>
    <S sid="94" ssid="9">For the case of a secondorder HMM, the size of the A2 matrix (which models the transition probabilities from two tags to the third one), grows to about 7M entries, where the size of the B2 matrix (which models the emission probabilities from two tags to a word) is about 5M.</S>
    <S sid="95" ssid="10">Despite the sparseness of these matrices, the number of their entries is still high, since we model the whole set of features of the complex word forms.</S>
    <S sid="96" ssid="11">Let us assume, that the right segmentation for the sentence is provided to us &#8211; for example: b clm hn`im &#8211; as is the case for English text.</S>
    <S sid="97" ssid="12">In such a way, the observation is composed of morphemes, generated by a Markov process, based on a morpheme-based tagset.</S>
    <S sid="98" ssid="13">The size of such a tagset for Hebrew is about 200, where the size of the II,A,B,A2 and B2 matrices is reduced to 145, 16K, 140K, 700K, and 1.7M correspondingly, as described in line M of Table 2 &#8211; a reduction of 90% when compared with the size of a word-based model.</S>
    <S sid="99" ssid="14">The problem in this approach, is that &#8221;someone&#8221; along the way, agglutinates the morphemes of each word leaving the observed morphemes uncertain.</S>
    <S sid="100" ssid="15">For example, the word bclm can be segmented in four different ways in Table 1, as indicated by the placement of the '-' in the Segmentation column, while the word hn`im can be segmented in two different ways.</S>
    <S sid="101" ssid="16">In the next section, we adapt the parameter estimation and the searching algorithms for such uncertain output observation.</S>
    <S sid="102" ssid="17">In contrast to standard HMM, the output observations of the above morpheme-based HMM are ambiguous.</S>
    <S sid="103" ssid="18">We adapted Baum-Welch (Baum, 1972) and Viterbi (Manning and Schutze, 1999, 9.3.2) algorithms for such uncertain observation.</S>
    <S sid="104" ssid="19">We first formalize the output representation and then describe the algorithms.</S>
    <S sid="105" ssid="20">Output Representation The learning and searching algorithms of HMM are based on the output sequence of the underlying Markov process.</S>
    <S sid="106" ssid="21">For the case of a morpheme-based model, the output sequence is uncertain &#8211; we don&#8217;t see the emitted morphemes but the words they form.</S>
    <S sid="107" ssid="22">If, for instance, the Markov process emitted the morphemes b clm h nim, we would see two words (bclm hn`im) instead.</S>
    <S sid="108" ssid="23">In order to handle the output ambiguity, we use static knowledge of how morphemes are combined into a word, such as the four known combinations of the word bclm, the two possible combinations of the word hn`im, and their possible tags within the original words.</S>
    <S sid="109" ssid="24">Based on this information, we encode the sentence into a structure that represents all the possible &#8220;readings&#8221; of the sentence, according to the possible morpheme combinations of the words, and their possible tags.</S>
    <S sid="110" ssid="25">The representation consists of a set of vectors, each vector containing the possible morphemes and their tags for each specific &#8220;time&#8221; (sequential position within the morpheme expansion of the words of the sentence).</S>
    <S sid="111" ssid="26">A morpheme is represented by a tuple (symbol, state, prev, next), where symbol denotes a morpheme, state is one possible tag for this morpheme, prev and next are sets of indexes, denoting the indexes of the morphemes (of the previous and the next vectors) that precede and follow the current morpheme in the overall lattice, representing the sentence.</S>
    <S sid="112" ssid="27">Fig.</S>
    <S sid="113" ssid="28">2 describes the representation of the sentence bclm hn`im.</S>
    <S sid="114" ssid="29">An emission is denoted in this figure by its symbol, its state index, directed edges from its previous emissions, and directed edges to its next emissions.</S>
    <S sid="115" ssid="30">In order to meet the condition of Baum-Eagon inequality (Baum, 1972) that the polynomial P(O|&#181;) &#8211; which represents the probability of an observed sequence O given a model &#181; &#8211; be homogeneous, we must add a sequence of special EOS (end of sentence) symbols at the end of each path up to the last vector, so that all the paths reach the same length.</S>
    <S sid="116" ssid="31">The above text representation can be used to model multi-word expressions (MWEs).</S>
    <S sid="117" ssid="32">Consider the Hebrew sentence: hw' `wrk dyn gdwl, which can be interpreted as composed of 3 units (he lawyer great / he is a great lawyer) or as 4 units (he edits law big / he is editing an important legal decision).</S>
    <S sid="118" ssid="33">In order to select the correct interpretation, we must determine whether `wrk dyn is an MWE.</S>
    <S sid="119" ssid="34">This is another case of uncertain output observation, which can be represented by our text encoding, as done in Fig.</S>
    <S sid="120" ssid="35">1.</S>
    <S sid="121" ssid="36">This representation seems to be expensive in term of the number of emissions per sentence.</S>
    <S sid="122" ssid="37">However, we observe in our data that most of the words have only one or two possible segmentations, and most of the segmentations consist of at most one affix.</S>
    <S sid="123" ssid="38">In practice, we found the average number of emissions per sentence in our corpus (where each symbol is counted as the number of its predecessor emissions) to be 455, where the average number of words per sentence is about 18.</S>
    <S sid="124" ssid="39">That is, the cost of operating over an ambiguous sentence representation increases the size of the sentence (from 18 to 455), but on the other hand, it reduces the probabilistic model by a factor of 10 (as discussed above).</S>
    <S sid="125" ssid="40">Morphological disambiguation over such a sequence of vectors of uncertain morphemes is similar to words extraction in automatic speech recognition (ASR)(Jurafsky and Martin, 2000, chp.</S>
    <S sid="126" ssid="41">5,7).</S>
    <S sid="127" ssid="42">The states of the ASR model are phones, where each observation is a vector of spectral features.</S>
    <S sid="128" ssid="43">Given a sequence of observations for a sentence, the encoding &#8211; based on the lattice formed by the phones distribution of the observations, and the language model &#8211; searches for the set of words, made of phones, which maximizes the acoustic likelihood and the language model probabilities.</S>
    <S sid="129" ssid="44">In a similar manner, the supervised training of a speech recognizer combines a training corpus of speech wave files, together with word-transcription, and language model probabilities, in order to learn the phones model.</S>
    <S sid="130" ssid="45">There are two main differences between the typical ASR model and ours: (1) an ASR decoder deals with one aspect - segmentation of the observations into a set of words, where this segmentation can be modeled at several levels: subphones, phones and words.</S>
    <S sid="131" ssid="46">These levels can be trained individually (such as training a language model from a written corpus, and training the phones model for each word type, given transcripted wave file), and then combined together (in a hierarchical model).</S>
    <S sid="132" ssid="47">Morphological disambiguation over uncertain morphemes, on the other hand, deals with both morpheme segmentation and the tagging of each morpheme with its morphological features.</S>
    <S sid="133" ssid="48">Modeling morpheme segmentation, within a given word, without its morphology features would be insufficient.</S>
    <S sid="134" ssid="49">(2) The supervised resources of ASR are not available for morphological disambiguation: we don&#8217;t have a model of morphological features sequences (equivalent to the language model of ASR) nor a tagged corpus (equivalent to the transcripted wave files of ASR).</S>
    <S sid="135" ssid="50">These two differences require a design which combines the two dimensions of the problem, in order to support unsupervised learning (and searching) of morpheme sequences and their morphological features, simultaneously.</S>
    <S sid="136" ssid="51">Parameter Estimation We present a variation of the Baum-Welch algorithm (Baum, 1972) which operates over the lattice representation we have defined above.</S>
    <S sid="137" ssid="52">The algorithm starts with a probabilistic model &#181; (which can be chosen randomly or obtained from good initial conditions), and at each iteration, a new model &#181;&#65533; is derived in order to better explain the given output observations.</S>
    <S sid="138" ssid="53">For a given sentence, we define T as the number of words in the sentence, and T as the number of vectors of the output representation O = {ot},1 &lt; t &lt; T, where each item in the output is denoted by olt = (sym, state, prev, next),1 &lt; t &lt; T,1 &lt; l &lt; |ot|.</S>
    <S sid="139" ssid="54">We define a(t, l) as the probability to reach olt at time t, and 0(t, l) as the probability to end the sequence from olt.</S>
    <S sid="140" ssid="55">Fig.</S>
    <S sid="141" ssid="56">3 describes the expectation and the maximization steps of the learning algorithm for a first-order HMM.</S>
    <S sid="142" ssid="57">The algorithm works in O(T) time complexity, where T is the total number of symbols in the output sequence encoding, where each symbol is counted as the size of its prev set.</S>
    <S sid="143" ssid="58">Searching for best state sequence The searching algorithm gets an observation sequence O and a probabilistic model &#181;, and looks for the best state sequence that generates the observation.</S>
    <S sid="144" ssid="59">We define S(t, l) as the probability of the best state sequence that leads to emission olt, and&#65533;(t, l) as the index of the emission at time t&#8722;1 that precedes olt in the best state sequence that leads to it.</S>
    <S sid="145" ssid="60">Fig.</S>
    <S sid="146" ssid="61">4 describes the adaptation of the Viterbi (Manning and Schutze, 1999, 9.3.2) algorithm to our text representation for first-order HMM, which works in O(T) time.</S>
  </SECTION>
  <SECTION title="4 Experimental Results" number="4">
    <S sid="147" ssid="1">We ran a series of experiments on a Hebrew corpus to compare various approaches to the full morphological disambiguation and PoS tagging tasks.</S>
    <S sid="148" ssid="2">The training corpus is obtained from various newspaper sources and is characterized by the following statistics: 6M word occurrences, 178,580 distinct words, 64,541 distinct lemmas.</S>
    <S sid="149" ssid="3">Overall, the ambiguity level is 2.4 (average number of analyses per word).</S>
    <S sid="150" ssid="4">We tested the results on a test corpus, manually annotated by 2 taggers according to the guidelines we published and checked for agreement.</S>
    <S sid="151" ssid="5">The test corpus contains about 30K words.</S>
    <S sid="152" ssid="6">We compared two unsupervised models over this data set: Word model [W], and Morpheme model [M].</S>
    <S sid="153" ssid="7">We also tested two different sets of initial conditions.</S>
    <S sid="154" ssid="8">Uniform distribution [Uniform]: For each word, each analysis provided by the analyzer is estimated with an equal likelihood.</S>
    <S sid="155" ssid="9">Context Free approximation [CF]: We applied the CF algorithm of Levinger et al. (1995) to estimate the likelihood of each analysis.</S>
    <S sid="156" ssid="10">Table 3 reports the results of full morphological disambiguation.</S>
    <S sid="157" ssid="11">For each morpheme and word models, three types of models were tested: [1] First-order HMM, [2-] Partial second-order HMM only state transitions were modeled (excluding B2 matrix), [2] Second-order HMM (including the B2 matrix).</S>
    <S sid="158" ssid="12">Analysis If we consider the tagger which selects the most probable morphological analysis for each word in the text, according to Levinger et al. (1995) approximations, with accuracy of 78.2%, as the baseline tagger, four steps of error reduction can be identified.</S>
    <S sid="159" ssid="13">(1) Contextual information: The simplest first-order word-based HMM with uniform initial conditions, achieves error reduction of 17.5% (78.2 &#8211; 82.01).</S>
    <S sid="160" ssid="14">(2) Initial conditions: Error reductions in the range: 11.5% &#8211; 37.8% (82.01 &#8211; 84.08 for word model 1, and 81.53 &#8211; 88.5 for morhpeme model 2-) were achieved by initializing the various models with context-free approximations.</S>
    <S sid="161" ssid="15">While this observation confirms Elworthy (1994), the impact of error reduction is much less than reported there for English - about 70% (79 &#8211; 94).</S>
    <S sid="162" ssid="16">The key difference (beside the unclear characteristic of Elworthy initial condition - since he made use of an annotated corpus) is the much higher quality of the uniform distribution for Hebrew.</S>
    <S sid="163" ssid="17">(3) Model order: The partial second-order HMM [2-] produced the best results for both word (85.75%) and morpheme (88.5%) models over the initial condition.</S>
    <S sid="164" ssid="18">The full second-order HMM [2] didn&#8217;t upgrade the accuracy of the partial second-order, but achieved the best results for the uniform distribution morpheme model.</S>
    <S sid="165" ssid="19">This is because the context-free approximation does not take into account the tag of the previous word, which is part of model 2.</S>
    <S sid="166" ssid="20">We believe that initializing the morpheme model over a small set of annotated corpus will set much stronger initial condition for this model.</S>
    <S sid="167" ssid="21">(4) Model type: The main result of this paper is the error reduction of the morpheme model with respect to the word model: about 19.3% (85.75 &#8211; 88.5).</S>
    <S sid="168" ssid="22">In addition, we apply the above models for the simpler task of segmentation and PoS tagging, as reported in Table 4.</S>
    <S sid="169" ssid="23">The task requires picking the correct morphemes of each word with their correct PoS (excluding all other morphological features).</S>
    <S sid="170" ssid="24">The best result for this task is obtained with the morpheme model 2: 92.32%.</S>
    <S sid="171" ssid="25">For this simpler task, the improvement brought by the morpheme model over the word model is less significant, but still consists of a 5% error reduction.</S>
    <S sid="172" ssid="26">Unknown words account for a significant chunk of the errors.</S>
    <S sid="173" ssid="27">Table 5 shows the distribution of errors contributed by unknown words (words that cannot be analyzed by the morphological analyzer).</S>
    <S sid="174" ssid="28">7.5% of the words in the test corpus are unknown: 4% are not recognized at all by the morphological analyzer (marked as [None] in the table), and for 3.5%, the set of analyses proposed by the analyzer does not contain the correct analysis [Missing].</S>
    <S sid="175" ssid="29">We extended the lexicon to include missing and none lexemes of the closed sets.</S>
    <S sid="176" ssid="30">In addition, we modified the analyzer to extract all possible segmentations of unknown words, with all the possible tags for the segmented affixes, where the remaining unknown baseforms are tagged as UK.</S>
    <S sid="177" ssid="31">The model was trained over this set.</S>
    <S sid="178" ssid="32">In the next phase, the corpus was automatically tagged, according to the trained model, in order to form a tag distribution for each unknown word, according to its context and its form.</S>
    <S sid="179" ssid="33">Finally, the tag for each unknown word were selected according to its tag distribution.</S>
    <S sid="180" ssid="34">This strategy accounts for about half of the 7.5% unknown words.</S>
    <S sid="181" ssid="35">Table 6 shows the confusion matrix for known words (5% and up).</S>
    <S sid="182" ssid="36">The key confusions can be attributed to linguistic properties of Modern Hebrew: most Hebrew proper names are also nouns (and they are not marked by capitalization) &#8211; which explains the PN/N confusion.</S>
    <S sid="183" ssid="37">The verb/noun and verb/adjective confusions are explained by the nature of the participle form in Hebrew (beinoni) &#8211; participles behave syntactically almost in an identical manner as nouns.</S>
  </SECTION>
  <SECTION title="5 Conclusions and future Work" number="5">
    <S sid="184" ssid="1">In this work, we have introduced a new text encoding method that captures rules of word formation in a language with affixational morphology such as Hebrew.</S>
    <S sid="185" ssid="2">This text encoding method allows us to learn in parallel segmentation and tagging rules in an unsupervised manner, despite the high ambiguity level of the morphological data (average number of 2.4 analyses per word).</S>
    <S sid="186" ssid="3">Reported results on a large scale corpus (6M words) with fully unsupervised learning are 92.32% for PoS tagging and 88.5% for full morphological disambiguation.</S>
    <S sid="187" ssid="4">In this work, we used the backoff smoothing method, suggested by Thede and Harper (1999), with an extension of additive smoothing (Chen, 1996, 2.2.1) for the lexical probabilities (B and B2 matrices).</S>
    <S sid="188" ssid="5">To complete this study, we are currently investigating several smoothing techniques (Chen, 1996), in order to check whether the morpheme model is critical for the data sparseness problem, or whether it can be handled with smoothing over a word model.</S>
    <S sid="189" ssid="6">We are currently investigating two major methods to improve our results: first, we have started gathering a larger corpus of manually tagged text and plan to perform semi-supervised learning on a corpus of 100K manually tagged words.</S>
    <S sid="190" ssid="7">Second, we plan to improve the unknown word model, such as integrating it with named entity recognition system (Ben-Mordechai, 2005).</S>
  </SECTION>
</PAPER>
