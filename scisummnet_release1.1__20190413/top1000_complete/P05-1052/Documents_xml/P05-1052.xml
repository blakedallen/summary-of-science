<PAPER>
  <S sid="0">Extracting Relations With Integrated Information Using Kernel Methods</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Entity relation detection is a form of information extraction that finds predefined relations between pairs of entities in text.</S>
    <S sid="2" ssid="2">This paper describes a relation detection approach that combines clues from different levels of syntactic processing using kernel methods.</S>
    <S sid="3" ssid="3">Information from three different levels of processing is considered: tokenization, sentence parsing and deep dependency analysis.</S>
    <S sid="4" ssid="4">Each source of information is represented by kernel functions.</S>
    <S sid="5" ssid="5">Then composite kernels are developed to integrate and extend individual kernels so that processing errors occurring at one level can be overcome by information from other levels.</S>
    <S sid="6" ssid="6">We present an evaluation of these methods on the 2004 ACE relation detection task, using Support Vector Machines, and show that each level of syntactic processing contributes useful information for this task.</S>
    <S sid="7" ssid="7">When evaluated on the official test data, our approach produced very competitive ACE value scores.</S>
    <S sid="8" ssid="8">We also compare the SVM with KNN on different kernels.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="9" ssid="1">Information extraction subsumes a broad range of tasks, including the extraction of entities, relations and events from various text sources, such as newswire documents and broadcast transcripts.</S>
    <S sid="10" ssid="2">One such task, relation detection, finds instances of predefined relations between pairs of entities, such as a Located-In relation between the entities Centre College and Danville, KY in the phrase Centre College in Danville, KY.</S>
    <S sid="11" ssid="3">The &#8216;entities&#8217; are the individuals of selected semantic types (such as people, organizations, countries, ...) which are referred to in the text.</S>
    <S sid="12" ssid="4">Prior approaches to this task (Miller et al., 2000; Zelenko et al., 2003) have relied on partial or full syntactic analysis.</S>
    <S sid="13" ssid="5">Syntactic analysis can find relations not readily identified based on sequences of tokens alone.</S>
    <S sid="14" ssid="6">Even &#8216;deeper&#8217; representations, such as logical syntactic relations or predicate-argument structure, can in principle capture additional generalizations and thus lead to the identification of additional instances of relations.</S>
    <S sid="15" ssid="7">However, a general problem in Natural Language Processing is that as the processing gets deeper, it becomes less accurate.</S>
    <S sid="16" ssid="8">For instance, the current accuracy of tokenization, chunking and sentence parsing for English is about 99%, 92%, and 90% respectively.</S>
    <S sid="17" ssid="9">Algorithms based solely on deeper representations inevitably suffer from the errors in computing these representations.</S>
    <S sid="18" ssid="10">On the other hand, low level processing such as tokenization will be more accurate, and may also contain useful information missed by deep processing of text.</S>
    <S sid="19" ssid="11">Systems based on a single level of representation are forced to choose between shallower representations, which will have fewer errors, and deeper representations, which may be more general.</S>
    <S sid="20" ssid="12">Based on these observations, Zhao et al. (2004) proposed a discriminative model to combine information from different syntactic sources using a kernel SVM (Support Vector Machine).</S>
    <S sid="21" ssid="13">We showed that adding sentence level word trigrams as global information to local dependency context boosted the performance of finding slot fillers for management succession events.</S>
    <S sid="22" ssid="14">This paper describes an extension of this approach to the identification of entity relations, in which syntactic information from sentence tokenization, parsing and deep dependency analysis is combined using kernel methods.</S>
    <S sid="23" ssid="15">At each level, kernel functions (or kernels) are developed to represent the syntactic information.</S>
    <S sid="24" ssid="16">Five kernels have been developed for this task, including two at the surface level, one at the parsing level and two at the deep dependency level.</S>
    <S sid="25" ssid="17">Our experiments show that each level of processing may contribute useful clues for this task, including surface information like word bigrams.</S>
    <S sid="26" ssid="18">Adding kernels one by one continuously improves performance.</S>
    <S sid="27" ssid="19">The experiments were carried out on the ACE RDR (Relation Detection and Recognition) task with annotated entities.</S>
    <S sid="28" ssid="20">Using SVM as a classifier along with the full composite kernel produced the best performance on this task.</S>
    <S sid="29" ssid="21">This paper will also show a comparison of SVM and KNN (k-Nearest-Neighbors) under different kernel setups.</S>
  </SECTION>
  <SECTION title="2 Kernel Methods" number="2">
    <S sid="30" ssid="1">Many machine learning algorithms involve only the dot product of vectors in a feature space, in which each vector represents an object in the object domain.</S>
    <S sid="31" ssid="2">Kernel methods (Muller et al., 2001) can be seen as a generalization of feature-based algorithms, in which the dot product is replaced by a kernel function (or kernel) &#936;(X,Y) between two vectors, or even between two objects.</S>
    <S sid="32" ssid="3">Mathematically, as long as &#936;(X,Y) is symmetric and the kernel matrix formed by &#936; is positive semi-definite, it forms a valid dot product in an implicit Hilbert space.</S>
    <S sid="33" ssid="4">In this implicit space, a kernel can be broken down into features, although the dimension of the feature space could be infinite.</S>
    <S sid="34" ssid="5">Normal feature-based learning can be implemented in kernel functions, but we can do more than that with kernels.</S>
    <S sid="35" ssid="6">First, there are many wellknown kernels, such as polynomial and radial basis kernels, which extend normal features into a high order space with very little computational cost.</S>
    <S sid="36" ssid="7">This could make a linearly non-separable problem separable in the high order feature space.</S>
    <S sid="37" ssid="8">Second, kernel functions have many nice combination properties: for example, the sum or product of existing kernels is a valid kernel.</S>
    <S sid="38" ssid="9">This forms the basis for the approach described in this paper.</S>
    <S sid="39" ssid="10">With these combination properties, we can combine individual kernels representing information from different sources in a principled way.</S>
    <S sid="40" ssid="11">Many classifiers can be used with kernels.</S>
    <S sid="41" ssid="12">The most popular ones are SVM, KNN, and voted perceptrons.</S>
    <S sid="42" ssid="13">Support Vector Machines (Vapnik, 1998; Cristianini and Shawe-Taylor, 2000) are linear classifiers that produce a separating hyperplane with largest margin.</S>
    <S sid="43" ssid="14">This property gives it good generalization ability in high-dimensional spaces, making it a good classifier for our approach where using all the levels of linguistic clues could result in a huge number of features.</S>
    <S sid="44" ssid="15">Given all the levels of features incorporated in kernels and training data with target examples labeled, an SVM can pick up the features that best separate the targets from other examples, no matter which level these features are from.</S>
    <S sid="45" ssid="16">In cases where an error occurs in one processing result (especially deep processing) and the features related to it become noisy, SVM may pick up clues from other sources which are not so noisy.</S>
    <S sid="46" ssid="17">This forms the basic idea of our approach.</S>
    <S sid="47" ssid="18">Therefore under this scheme we can overcome errors introduced by one processing level; more particularly, we expect accurate low level information to help with less accurate deep level information.</S>
  </SECTION>
  <SECTION title="3 Related Work" number="3">
    <S sid="48" ssid="1">Collins et al. (1997) and Miller et al.</S>
    <S sid="49" ssid="2">(2000) used statistical parsing models to extract relational facts from text, which avoided pipeline processing of data.</S>
    <S sid="50" ssid="3">However, their results are essentially based on the output of sentence parsing, which is a deep processing of text.</S>
    <S sid="51" ssid="4">So their approaches are vulnerable to errors in parsing.</S>
    <S sid="52" ssid="5">Collins et al. (1997) addressed a simplified task within a confined context in a target sentence.</S>
    <S sid="53" ssid="6">Zelenko et al. (2003) described a recursive kernel based on shallow parse trees to detect personaffiliation and organization-location relations, in which a relation example is the least common subtree containing two entity nodes.</S>
    <S sid="54" ssid="7">The kernel matches nodes starting from the roots of two subtrees and going recursively to the leaves.</S>
    <S sid="55" ssid="8">For each pair of nodes, a subsequence kernel on their child nodes is invoked, which matches either contiguous or non-contiguous subsequences of node.</S>
    <S sid="56" ssid="9">Compared with full parsing, shallow parsing is more reliable.</S>
    <S sid="57" ssid="10">But this model is based solely on the output of shallow parsing so it is still vulnerable to irrecoverable parsing errors.</S>
    <S sid="58" ssid="11">In their experiments, incorrectly parsed sentences were eliminated.</S>
    <S sid="59" ssid="12">Culotta and Sorensen (2004) described a slightly generalized version of this kernel based on dependency trees.</S>
    <S sid="60" ssid="13">Since their kernel is a recursive match from the root of a dependency tree down to the leaves where the entity nodes reside, a successful match of two relation examples requires their entity nodes to be at the same depth of the tree.</S>
    <S sid="61" ssid="14">This is a strong constraint on the matching of syntax so it is not surprising that the model has good precision but very low recall.</S>
    <S sid="62" ssid="15">In their solution a bag-of-words kernel was used to compensate for this problem.</S>
    <S sid="63" ssid="16">In our approach, more flexible kernels are used to capture regularization in syntax, and more levels of syntactic information are considered.</S>
    <S sid="64" ssid="17">Kambhatla (2004) described a Maximum Entropy model using features from various syntactic sources, but the number of features they used is limited and the selection of features has to be a manual process.1 In our model, we use kernels to incorporate more syntactic information and let a Support Vector Machine decide which clue is crucial.</S>
    <S sid="65" ssid="18">Some of the kernels are extended to generate high order features.</S>
    <S sid="66" ssid="19">We think a discriminative classifier trained with all the available syntactic features should do better on the sparse data.</S>
  </SECTION>
  <SECTION title="4 Kernel Relation Detection" number="4">
    <S sid="67" ssid="1">ACE (Automatic Content Extraction)2 is a research and development program in information extraction sponsored by the U.S. Government.</S>
    <S sid="68" ssid="2">The 2004 evaluation defined seven major types of relations between seven types of entities.</S>
    <S sid="69" ssid="3">The entity types are PER (Person), ORG (Organization), FAC (Facility), GPE (Geo-Political Entity: countries, cities, etc.</S>
    <S sid="70" ssid="4">), LOC (Location), WEA (Weapon) and VEH (Vehicle).</S>
    <S sid="71" ssid="5">Each mention of an entity has a mention type: NAM (proper name), NOM (nominal) or 1 Kambhatla also evaluated his system on the ACE relation detection task, but the results are reported for the 2003 task, which used different relations and different training and test data, and did not use hand-annotated entities, so they cannot be readily compared to our results.</S>
    <S sid="72" ssid="6">PRO (pronoun); for example George W. Bush, the president and he respectively.</S>
    <S sid="73" ssid="7">The seven relation types are EMP-ORG (Employment/Membership/Subsidiary), PHYS (Physical), PER-SOC (Personal/Social), GPE-AFF (GPEAffiliation), Other-AFF (Person/ORG Affiliation), ART (Agent-Artifact) and DISC (Discourse).</S>
    <S sid="74" ssid="8">There are also 27 relation subtypes defined by ACE, but this paper only focuses on detection of relation types.</S>
    <S sid="75" ssid="9">Table 1 lists examples of each relation type. heads of the two entity arguments in a relation are marked.</S>
    <S sid="76" ssid="10">Types are listed in decreasing order of frequency of occurrence in the ACE corpus.</S>
    <S sid="77" ssid="11">Figure 1 shows a sample newswire sentence, in which three relations are marked.</S>
    <S sid="78" ssid="12">In this sentence, we expect to find a PHYS relation between Hezbollah forces and areas, a PHYS relation between Syrian troops and areas and an EMP-ORG relation between Syrian troops and Syrian.</S>
    <S sid="79" ssid="13">In our approach, input text is preprocessed by the Charniak sentence parser (including tokenization and POS tagging) and the GLARF (Meyers et al., 2001) dependency analyzer produced by NYU.</S>
    <S sid="80" ssid="14">Based on treebank parsing, GLARF produces labeled deep dependencies between words (syntactic relations such as logical subject and logical object).</S>
    <S sid="81" ssid="15">It handles linguistic phenomena like passives, relatives, reduced relatives, conjunctions, etc.</S>
    <S sid="82" ssid="16">That's because Israel was expected to retaliate against Hezbollah forces in areas controlled by Syrian troops.</S>
  </SECTION>
  <SECTION title="PHYS PHYS EMP-ORG" number="5">
    <S sid="83" ssid="1">In our model, kernels incorporate information from tokenization, parsing and deep dependency analysis.</S>
    <S sid="84" ssid="2">A relation candidate R is defined as where arg1 and arg2 are the two entity arguments which may be related; seq=(t1, t2, ..., tn) is a token vector that covers the arguments and intervening words; link=(t1, t2, ..., tm) is also a token vector, generated from seq and the parse tree; path is a dependency path connecting arg1 and arg2 in the dependency graph produced by GLARF. path can be empty if no such dependency path exists.</S>
    <S sid="85" ssid="3">The difference between link and seq is that link only retains the &#8220;important&#8221; words in seq in terms of syntax.</S>
    <S sid="86" ssid="4">For example, all noun phrases occurring in seq are replaced by their heads.</S>
    <S sid="87" ssid="5">Words and constituent types in a stop list, such as time expressions, are also removed.</S>
    <S sid="88" ssid="6">A token T is defined as a string triple, where word, pos and base are strings representing the word, part-of-speech and morphological base form of T. Entity is a token augmented with other attributes, where tk is the token associated with E; type, subtype and mtype are strings representing the entity type, subtype and mention type of E. The subtype contains more specific information about an entity.</S>
    <S sid="89" ssid="7">For example, for a GPE entity, the subtype tells whether it is a country name, city name and so on.</S>
    <S sid="90" ssid="8">Mention type includes NAM, NOM and PRO.</S>
    <S sid="91" ssid="9">It is worth pointing out that we always treat an entity as a single token: for a nominal, it refers to its head, such as boys in the two boys; for a proper name, all the words are connected into one token, such as Bashar_Assad.</S>
    <S sid="92" ssid="10">So in a relation example R whose seq is (t1, t2, ..., tn), it is always true that arg1=t1 and arg2=tn.</S>
    <S sid="93" ssid="11">For names, the base form of an entity is its ACE type (person, organization, etc.).</S>
    <S sid="94" ssid="12">To introduce dependencies, we define a dependency token to be a token augmented with a vector of dependency arcs, DT=(word, pos, base, dseq), where dseq = (arc1, ... , arcn ).</S>
    <S sid="95" ssid="13">A dependency arc is ARC = (w, dw, label, e), where w is the current token; dw is a token connected by a dependency to w; and label and e are the role label and direction of this dependency arc respectively.</S>
    <S sid="96" ssid="14">From now on we upgrade the type of tk in arg1 and arg2 to be dependency tokens.</S>
    <S sid="97" ssid="15">Finally, path is a vector of dependency arcs, where l is the length of the path and arci (1&lt;i&lt;l) satisfies arc1.w=arg1.tk, arci+1.w=arci.dw and arcl.dw=arg2.tk.</S>
    <S sid="98" ssid="16">So path is a chain of dependencies connecting the two arguments in R. The arcs in it do not have to be in the same direction.</S>
    <S sid="99" ssid="17">Figure 2 shows a relation example generated from the text &#8220;... in areas controlled by Syrian troops&#8221;.</S>
    <S sid="100" ssid="18">In this relation example R, arg-, is ((&#8220;areas&#8221;, &#8220;NNS&#8221;, &#8220;area&#8221;, dseq), &#8220;LOC&#8221;, &#8220;Region&#8221;, &#8220;NOM&#8221;), and arg-,.dseq is ((OBJ, areas, in, 1), (OBJ, areas, controlled, 1)). arg2 is ((&#8220;troops&#8221;, &#8220;NNS&#8221;, &#8220;troop&#8221;, dseq), &#8220;ORG&#8221;, &#8220;Government&#8221;, &#8220;NOM&#8221;) and arg2.dseq = ((A-POS, troops, Syrian, 0), (SBJ, troops, controlled, 1)). path is ((OBJ, areas, controlled, 1), (SBJ, controlled, troops, 0)).</S>
    <S sid="101" ssid="19">The value 0 in a dependency arc indicates forward direction from w to dw, and 1 indicates backward direction.</S>
    <S sid="102" ssid="20">The seq and link sequences of R are shown in Figure 2.</S>
    <S sid="103" ssid="21">Some relations occur only between very restricted types of entities, but this is not true for every type of relation.</S>
    <S sid="104" ssid="22">For example, PER-SOC is a relation mainly between two person entities, while PHYS can happen between any type of entity and a GPE or LOC entity.</S>
    <S sid="105" ssid="23">In this section we will describe the kernels designed for different syntactic sources and explain the intuition behind them.</S>
    <S sid="106" ssid="24">We define two kernels to match relation examples at surface level.</S>
    <S sid="107" ssid="25">Using the notation just defined, we can write the two surface kernels as follows: KT is a kernel that matches two tokens.</S>
    <S sid="108" ssid="26">I(x, y) is a binary string match operator that gives 1 if x=y and 0 otherwise.</S>
    <S sid="109" ssid="27">Kernel &#936;1 matches attributes of two entity arguments respectively, such as type, subtype and lexical head of an entity.</S>
    <S sid="110" ssid="28">This is based on the observation that there are type constraints on the two arguments.</S>
    <S sid="111" ssid="29">For instance PER-SOC is a relation mostly between two person entities.</S>
    <S sid="112" ssid="30">So the attributes of the entities are crucial clues.</S>
    <S sid="113" ssid="31">Lexical information is also important to distinguish relation types.</S>
    <S sid="114" ssid="32">For instance, in the phrase U.S. president there is an EMP-ORG relation between president and U.S., while in a U.S. businessman there is a GPE-AFF relation between businessman and U.S. where Operator &lt;t1, t2&gt; concatenates all the string elements in tokens t1 and t2 to produce a new token.</S>
    <S sid="115" ssid="33">So &#936;2 is a kernel that simply matches unigrams and bigrams between the seq sequences of two relation examples.</S>
    <S sid="116" ssid="34">The information this kernel provides is faithful to the text. where min_len is the length of the shorter link sequence in R1 and R2.</S>
    <S sid="117" ssid="35">&#936;3 is a kernel that matches token by token between the link sequences of two relation examples.</S>
    <S sid="118" ssid="36">Since relations often occur in a short context, we expect many of them have similar link sequences.</S>
  </SECTION>
  <SECTION title="4) Dependency path kernel" number="6">
    <S sid="119" ssid="1">&#968; 4 (R1 , R2)= Kpath (R1. path, R2 . path ), where Intuitively the dependency path connecting two arguments could provide a high level of syntactic regularization.</S>
    <S sid="120" ssid="2">However, a complete match of two dependency paths is rare.</S>
    <S sid="121" ssid="3">So this kernel matches the component arcs in two dependency paths in a pairwise fashion.</S>
    <S sid="122" ssid="4">Two arcs can match only when they are in the same direction.</S>
    <S sid="123" ssid="5">In cases where two paths do not match exactly, this kernel can still tell us how similar they are.</S>
    <S sid="124" ssid="6">In our experiments we placed an upper bound on the length of dependency paths for which we computed a non-zero kernel. where This kernel matches the local dependency context around the relation arguments.</S>
    <S sid="125" ssid="7">This can be helpful especially when the dependency path between arguments does not exist.</S>
    <S sid="126" ssid="8">We also hope the dependencies on each argument may provide some useful clues about the entity or connection of the entity to the context outside of the relation example.</S>
    <S sid="127" ssid="9">Having defined all the kernels representing shallow and deep processing results, we can define composite kernels to combine and extend the individual kern d &#936;3 covers the most important clues for this task: information about the two arguments and the word link between them.</S>
    <S sid="128" ssid="10">The polynomial extension is equivalent to adding pairs of features as new features.</S>
    <S sid="129" ssid="11">Intuitively this introduces new features like: the subtype of the first argument is a country name and the word of the second argument is president, which could be a good clue for an EMP-ORG relation.</S>
    <S sid="130" ssid="12">The polynomial kernel is down weighted by a normalization factor because we do not want the high order features to overwhelm the original ones.</S>
    <S sid="131" ssid="13">In our experiment, using polynomial kernels with degree higher than 2 does not produce better results.</S>
    <S sid="132" ssid="14">2) Full kernel This is the final kernel we used for this task, which is a combination of all the previous kernels.</S>
    <S sid="133" ssid="15">In our experiments, we set all the scalar factors to 1.</S>
    <S sid="134" ssid="16">Different values were tried, but keeping the original weight for each kernel yielded the best results for this task.</S>
    <S sid="135" ssid="17">All the individual kernels we designed are explicit.</S>
    <S sid="136" ssid="18">Each kernel can be seen as a matching of features and these features are enumerable on the given data.</S>
    <S sid="137" ssid="19">So it is clear that they are all valid kernels.</S>
    <S sid="138" ssid="20">Since the kernel function set is closed under linear combination and polynomial extension, the composite kernels are also valid.</S>
    <S sid="139" ssid="21">The reason we propose to use a feature-based kernel is that we can have a clear idea of what syntactic clues it represents and what kind of information it misses.</S>
    <S sid="140" ssid="22">This is important when developing or refining kernels, so that we can make them generate complementary information from different syntactic processing results.</S>
  </SECTION>
  <SECTION title="5 Experiments" number="7">
    <S sid="141" ssid="1">Experiments were carried out on the ACE RDR (Relation Detection and Recognition) task using hand-annotated entities, provided as part of the ACE evaluation.</S>
    <S sid="142" ssid="2">The ACE corpora contain documents from two sources: newswire (nwire) documents and broadcast news transcripts (bnews).</S>
    <S sid="143" ssid="3">In this section we will compare performance of different kernel setups trained with SVM, as well as different classifiers, KNN and SVM, with the same kernel setup.</S>
    <S sid="144" ssid="4">The SVM package we used is SVMlight.</S>
    <S sid="145" ssid="5">The training parameters were chosen using cross-validation.</S>
    <S sid="146" ssid="6">One-against-all classification was applied to each pair of entities in a sentence.</S>
    <S sid="147" ssid="7">When SVM predictions conflict on a relation example, the one with larger margin will be selected as the final answer.</S>
    <S sid="148" ssid="8">The ACE RDR training data contains 348 documents, 125K words and 4400 relations.</S>
    <S sid="149" ssid="9">It consists of both nwire and bnews documents.</S>
    <S sid="150" ssid="10">Evaluation of kernels was done on the training data using 5-fold cross-validation.</S>
    <S sid="151" ssid="11">We also evaluated the full kernel setup with SVM on the official test data, which is about half the size of the training data.</S>
    <S sid="152" ssid="12">All the data is preprocessed by the Charniak parser and GLARF dependency analyzer.</S>
    <S sid="153" ssid="13">Then relation examples are generated based these results.</S>
    <S sid="154" ssid="14">Table 2 shows the performance of the SVM on different kernel setups.</S>
    <S sid="155" ssid="15">The kernel setups in this experiment are incremental.</S>
    <S sid="156" ssid="16">From this table we can see that adding kernels continuously improves the performance, which indicates they provide additional clues to the previous setup.</S>
    <S sid="157" ssid="17">The argument kernel treats the two arguments as independent entities.</S>
    <S sid="158" ssid="18">The link sequence kernel introduces the syntactic connection between arguments, so adding it to the argument kernel boosted the performance.</S>
    <S sid="159" ssid="19">Setup F shows the performance of adding only dependency kernels to the argument kernel.</S>
    <S sid="160" ssid="20">The performance is not as good as setup B, indicating that dependency information alone is not as crucial as the link sequence. setups.</S>
    <S sid="161" ssid="21">Each setup adds one level of kernels to the previous one except setup F. Evaluated on the ACE training data with 5-fold cross-validation.</S>
    <S sid="162" ssid="22">Fscores marked by * are significantly better than the previous setup (at 95% confidence level).</S>
    <S sid="163" ssid="23">Another observation is that adding the bigram kernel in the presence of all other level of kernels improved both precision and recall, indicating that it helped in both correcting errors in other processing results and providing supplementary information missed by other levels of analysis.</S>
    <S sid="164" ssid="24">In another experiment evaluated on the nwire data only (about half of the training data), adding the bigram kernel improved F-score 0.5% and this improvement is statistically significant. different kernel setups.</S>
    <S sid="165" ssid="25">Types are ordered in decreasing order of frequency of occurrence in the ACE corpus.</S>
    <S sid="166" ssid="26">In SVM training, the same parameters were used for all 7 types.</S>
    <S sid="167" ssid="27">Table 3 shows the performance of SVM and KNN (k Nearest Neighbors) on different kernel setups.</S>
    <S sid="168" ssid="28">For KNN, k was set to 3.</S>
    <S sid="169" ssid="29">In the first setup of KNN, the two kernels which seem to contain most of the important information are used.</S>
    <S sid="170" ssid="30">It performs quite well when compared with the SVM result.</S>
    <S sid="171" ssid="31">The other two tests are based on the full kernel setup.</S>
    <S sid="172" ssid="32">For the two KNN experiments, adding more kernels (features) does not help.</S>
    <S sid="173" ssid="33">The reason might be that all kernels (features) were weighted equally in the composite kernel &#934;2 and this may not be optimal for KNN.</S>
    <S sid="174" ssid="34">Another reason is that the polynomial extension of kernels does not have any benefit in KNN because it is a monotonic transformation of similarity values.</S>
    <S sid="175" ssid="35">So the results of KNN on kernel (&#936;1+&#936;3) and &#934;1 would be exactly the same.</S>
    <S sid="176" ssid="36">We also tried different k for KNN and k=3 seems to be the best choice in either case.</S>
    <S sid="177" ssid="37">For the four major types of relations SVM does better than KNN, probably due to SVM&#8217;s generalization ability in the presence of large numbers of features.</S>
    <S sid="178" ssid="38">For the last three types with many fewer examples, performance of SVM is not as good as KNN.</S>
    <S sid="179" ssid="39">The reason we think is that training of SVM on these types is not sufficient.</S>
    <S sid="180" ssid="40">We tried different training parameters for the types with fewer examples, but no dramatic improvement obtained.</S>
    <S sid="181" ssid="41">We also evaluated our approach on the official ACE RDR test data and obtained very competitive scores.3 The primary scoring metric4 for the ACE evaluation is a 'value' score, which is computed by deducting from 100 a penalty for each missing and spurious relation; the penalty depends on the types of the arguments to the relation.</S>
    <S sid="182" ssid="42">The value scores produced by the ACE scorer for nwire and bnews test data are 71.7 and 68.0 repectively.</S>
    <S sid="183" ssid="43">The value score on all data is 70.1.5 The scorer also reports an F-score based on full or partial match of relations to the keys.</S>
    <S sid="184" ssid="44">The unweighted F-score for this test produced by the ACE scorer on all data is 76.0%.</S>
    <S sid="185" ssid="45">For this evaluation we used nearest neighbor to determine argument ordering and relation subtypes.</S>
    <S sid="186" ssid="46">The classification scheme in our experiments is one-against-all.</S>
    <S sid="187" ssid="47">It turned out there is not so much confusion between relation types.</S>
    <S sid="188" ssid="48">The confusion matrix of predictions is fairly clean.</S>
    <S sid="189" ssid="49">We also tried pairwise classification, and it did not help much.</S>
  </SECTION>
  <SECTION title="6 Discussion" number="8">
    <S sid="190" ssid="1">In this paper, we have shown that using kernels to combine information from different syntactic sources performed well on the entity relation detection task.</S>
    <S sid="191" ssid="2">Our experiments show that each level of syntactic processing contains useful information for the task.</S>
    <S sid="192" ssid="3">Combining them may provide complementary information to overcome errors arising from linguistic analysis.</S>
    <S sid="193" ssid="4">Especially, low level information obtained with high reliability helped with the other deep processing results.</S>
    <S sid="194" ssid="5">This design feature of our approach should be best employed when the preprocessing errors at each level are independent, namely when there is no dependency between the preprocessing modules.</S>
    <S sid="195" ssid="6">The model was tested on text with annotated entities, but its design is generic.</S>
    <S sid="196" ssid="7">It can work with noisy entity detection input from an automatic tagger.</S>
    <S sid="197" ssid="8">With all the existing information from other processing levels, this model can be also expected to recover from errors in entity tagging.</S>
  </SECTION>
  <SECTION title="7 Further Work" number="9">
    <S sid="198" ssid="1">Kernel functions have many nice properties.</S>
    <S sid="199" ssid="2">There are also many well known kernels, such as radial basis kernels, which have proven successful in other areas.</S>
    <S sid="200" ssid="3">In the work described here, only linear combinations and polynomial extensions of kernels have been evaluated.</S>
    <S sid="201" ssid="4">We can explore other kernel properties to integrate the existing syntactic kernels.</S>
    <S sid="202" ssid="5">In another direction, training data is often sparse for IE tasks.</S>
    <S sid="203" ssid="6">String matching is not sufficient to capture semantic similarity of words.</S>
    <S sid="204" ssid="7">One solution is to use general purpose corpora to create clusters of similar words; another option is to use available resources like WordNet.</S>
    <S sid="205" ssid="8">These word similarities can be readily incorporated into the kernel framework.</S>
    <S sid="206" ssid="9">To deal with sparse data, we can also use deeper text analysis to capture more regularities from the data.</S>
    <S sid="207" ssid="10">Such analysis may be based on newly-annotated corpora like PropBank (Kingsbury and Palmer, 2002) at the University of Pennsylvania and NomBank (Meyers et al., 2004) at New York University.</S>
    <S sid="208" ssid="11">Analyzers based on these resources can generate regularized semantic representations for lexically or syntactically related sentence structures.</S>
    <S sid="209" ssid="12">Although deeper analysis may even be less accurate, our framework is designed to handle this and still obtain some improvement in performance.</S>
  </SECTION>
  <SECTION title="8 Acknowledgement" number="10">
    <S sid="210" ssid="1">This research was supported in part by the Defense Advanced Research Projects Agency under Grant N66001-04-1-8920 from SPAWAR San Diego, and by the National Science Foundation under Grant ITS-0325657.</S>
    <S sid="211" ssid="2">This paper does not necessarily reflect the position of the U.S. Government.</S>
    <S sid="212" ssid="3">We wish to thank Adam Meyers of the NYU NLP group for his help in producing deep dependency analyses.</S>
  </SECTION>
</PAPER>
