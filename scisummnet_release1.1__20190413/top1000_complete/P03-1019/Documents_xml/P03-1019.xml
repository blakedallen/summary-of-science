<PAPER>
  <S sid="0">A Comparative Study On Reordering Constraints In Statistical Machine Translation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">In statistical machine translation, the generation of a translation hypothesis is computationally expensive.</S>
    <S sid="2" ssid="2">If arbitrary wordreorderings are permitted, the search problem is NP-hard.</S>
    <S sid="3" ssid="3">On the other hand, if we restrict the possible word-reorderings in an appropriate way, we obtain a polynomial-time search algorithm.</S>
    <S sid="4" ssid="4">In this paper, we compare two different reordering constraints, namely the ITG constraints and the IBM constraints.</S>
    <S sid="5" ssid="5">This comparison includes a theoretical discussion on the permitted number of reorderings for each of these constraints.</S>
    <S sid="6" ssid="6">We show a connection between the ITG constraints and the since 1870 known We evaluate these constraints on two tasks: the Verbmobil task and the Canadian Hansards task.</S>
    <S sid="7" ssid="7">The evaluation consists of two parts: First, we check how many of the Viterbi alignments of the training corpus satisfy each of these constraints.</S>
    <S sid="8" ssid="8">Second, we restrict the search to each of these constraints and compare the resulting translation hypotheses.</S>
    <S sid="9" ssid="9">The experiments will show that the baseline ITG constraints are not sufficient on the Canadian Hansards task.</S>
    <S sid="10" ssid="10">Therefore, we present an extension to the ITG constraints.</S>
    <S sid="11" ssid="11">These extended ITG constraints increase the alignment coverage from about 87% to 96%.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="12" ssid="1">In statistical machine translation, we are given a source language (&#8216;French&#8217;) sentence fJ1 = f1 ... fj ... fJ, which is to be translated into a target language (&#8216;English&#8217;) sentence eI1 = e1 ... ei ... eI.</S>
    <S sid="13" ssid="2">Among all possible target language sentences, we will choose the sentence with the highest probability: The decomposition into two knowledge sources in Eq.</S>
    <S sid="14" ssid="3">2 is the so-called source-channel approach to statistical machine translation (Brown et al., 1990).</S>
    <S sid="15" ssid="4">It allows an independent modeling of target language model Pr(eI1) and translation model Pr(fJ1 |eI1).</S>
    <S sid="16" ssid="5">The target language model describes the well-formedness of the target language sentence.</S>
    <S sid="17" ssid="6">The translation model links the source language sentence to the target language sentence.</S>
    <S sid="18" ssid="7">It can be further decomposed into alignment and lexicon model.</S>
    <S sid="19" ssid="8">The argmax operation denotes the search problem, i.e. the generation of the output sentence in the target language.</S>
    <S sid="20" ssid="9">We have to maximize over all possible target language sentences.</S>
    <S sid="21" ssid="10">In this paper, we will focus on the alignment problem, i.e. the mapping between source sentence positions and target sentence positions.</S>
    <S sid="22" ssid="11">As the word order in source and target language may differ, the search algorithm has to allow certain word-reorderings.</S>
    <S sid="23" ssid="12">If arbitrary word-reorderings are allowed, the search problem is NP-hard (Knight, 1999).</S>
    <S sid="24" ssid="13">Therefore, we have to restrict the possible reorderings in some way to make the search problem feasible.</S>
    <S sid="25" ssid="14">Here, we will discuss two such constraints in detail.</S>
    <S sid="26" ssid="15">The first constraints are based on inversion transduction grammars (ITG) (Wu, 1995; Wu, 1997).</S>
    <S sid="27" ssid="16">In the following, we will call these the ITG constraints.</S>
    <S sid="28" ssid="17">The second constraints are the IBM constraints (Berger et al., 1996).</S>
    <S sid="29" ssid="18">In the next section, we will describe these constraints from a theoretical point of view.</S>
    <S sid="30" ssid="19">Then, we will describe the resulting search algorithm and its extension for word graph generation.</S>
    <S sid="31" ssid="20">Afterwards, we will analyze the Viterbi alignments produced during the training of the alignment models.</S>
    <S sid="32" ssid="21">Then, we will compare the translation results when restricting the search to either of these constraints.</S>
  </SECTION>
  <SECTION title="2 Theoretical Discussion" number="2">
    <S sid="33" ssid="1">In this section, we will discuss the reordering constraints from a theoretical point of view.</S>
    <S sid="34" ssid="2">We will answer the question of how many word-reorderings are permitted for the ITG constraints as well as for the IBM constraints.</S>
    <S sid="35" ssid="3">Since we are only interested in the number of possible reorderings, the specific word identities are of no importance here.</S>
    <S sid="36" ssid="4">Furthermore, we assume a one-to-one correspondence between source and target words.</S>
    <S sid="37" ssid="5">Thus, we are interested in the number of word-reorderings, i.e. permutations, that satisfy the chosen constraints.</S>
    <S sid="38" ssid="6">First, we will consider the ITG constraints.</S>
    <S sid="39" ssid="7">Afterwards, we will describe the IBM constraints.</S>
    <S sid="40" ssid="8">Let us now consider the ITG constraints.</S>
    <S sid="41" ssid="9">Here, we interpret the input sentence as a sequence of blocks.</S>
    <S sid="42" ssid="10">In the beginning, each position is a block of its own.</S>
    <S sid="43" ssid="11">Then, the permutation process can be seen as follows: we select two consecutive blocks and merge them to a single block by choosing between two options: either keep them in monotone order or invert the order.</S>
    <S sid="44" ssid="12">This idea is illustrated in Fig.</S>
    <S sid="45" ssid="13">1.</S>
    <S sid="46" ssid="14">The white boxes represent the two blocks to be merged.</S>
    <S sid="47" ssid="15">Now, we investigate, how many permutations are obtainable with this method.</S>
    <S sid="48" ssid="16">A permutation derived by the above method can be represented as a binary tree where the inner nodes are colored either black or white.</S>
    <S sid="49" ssid="17">At black nodes the resulting sequences of the children are inverted.</S>
    <S sid="50" ssid="18">At white nodes they are kept in monotone order.</S>
    <S sid="51" ssid="19">This representation is equivalent to the parse trees of the simple grammar in (Wu, 1997).</S>
    <S sid="52" ssid="20">We observe that a given permutation may be constructed in several ways by the above method.</S>
    <S sid="53" ssid="21">For instance, let us consider the identity permutation of 1, 2,..., n. Any binary tree with n nodes and all inner nodes colored white (monotone order) is a possible representation of this permutation.</S>
    <S sid="54" ssid="22">To obtain a unique representation, we pose an additional constraint on the binary trees: if the right son of a node is an inner node, it has to be colored with the opposite color.</S>
    <S sid="55" ssid="23">With this constraint, each of these binary trees is unique and equivalent to a parse tree of the &#8217;canonical-form&#8217; grammar in (Wu, 1997).</S>
    <S sid="56" ssid="24">In (Shapiro and Stephens, 1991), it is shown that the number of such binary trees with n nodes is the (n &#8722; 1)th large Schr&#168;oder number Sn&#8722;1.</S>
    <S sid="57" ssid="25">The (small) Schr&#168;oder numbers have been first described in (Schr&#168;oder, 1870) as the number of bracketings of a given sequence (Schr&#168;oder&#8217;s second problem).</S>
    <S sid="58" ssid="26">The large Schr&#168;oder numbers are just twice the Schr&#168;oder numbers.</S>
    <S sid="59" ssid="27">Schr&#168;oder remarked that the ratio between two consecutive Schr&#168;oder numbers approaches 3 + 2.\/2 = 5.8284.... A second-order recurrence for the large Schr&#168;oder numbers is: with n &gt; 2 and S0 = 1, S1 = 2.</S>
    <S sid="60" ssid="28">The Schr&#168;oder numbers have many combinatorical interpretations.</S>
    <S sid="61" ssid="29">Here, we will mention only two of them.</S>
    <S sid="62" ssid="30">The first one is another way of viewing at the ITG constraints.</S>
    <S sid="63" ssid="31">The number of permutations of the sequence 1, 2, ..., n, which avoid the subsequences (3, 1, 4, 2) and (2, 4, 1, 3), is the large Schr&#168;oder number Sn&#8722;1.</S>
    <S sid="64" ssid="32">More details on forbidden subsequences can be found in (West, 1995).</S>
    <S sid="65" ssid="33">The interesting point is that a search with the ITG constraints cannot generate a word-reordering that contains one of these two subsequences.</S>
    <S sid="66" ssid="34">In (Wu, 1997), these forbidden subsequences are called &#8217;inside-out&#8217; transpositions.</S>
    <S sid="67" ssid="35">Another interpretation of the Schr&#168;oder numbers is given in (Knuth, 1973): The number of permutations that can be sorted with an output-restricted doubleended queue (deque) is exactly the large Schr&#168;oder number.</S>
    <S sid="68" ssid="36">Additionally, Knuth presents an approximation for the large Schr&#168;oder numbers: where c is set to 2 &#65533;(3&#8730;2 &#8722; 4)/&#960;.</S>
    <S sid="69" ssid="37">This approximation function confirms the result of Schr&#168;oder, and we obtain Sn &#8712; o((3 + &#8730;8)n), i.e. the Schr&#168;oder numbers grow like (3 + &#8730;8)n &#8776; 5.83n.</S>
    <S sid="70" ssid="38">In this section, we will describe the IBM constraints (Berger et al., 1996).</S>
    <S sid="71" ssid="39">Here, we mark each position in the source sentence either as covered or uncovered.</S>
    <S sid="72" ssid="40">In the beginning, all source positions are uncovered.</S>
    <S sid="73" ssid="41">Now, the target sentence is produced from bottom to top.</S>
    <S sid="74" ssid="42">A target position must be aligned to one of the first k uncovered source positions.</S>
    <S sid="75" ssid="43">The IBM constraints are illustrated in Fig.</S>
    <S sid="76" ssid="44">2.</S>
    <S sid="77" ssid="45">For most of the target positions there are k permitted source positions.</S>
    <S sid="78" ssid="46">Only towards the end of the sentence this is reduced to the number of remaining uncovered source positions.</S>
    <S sid="79" ssid="47">Let n denote the length of the input sequence and let rn denote the permitted number of permutations with the IBM constraints.</S>
    <S sid="80" ssid="48">Then, we obtain: Typically, k is set to 4.</S>
    <S sid="81" ssid="49">In this case, we obtain an asymptotic upper and lower bound of 4n, i.e. rn &#8712; o(4n).</S>
    <S sid="82" ssid="50">In Tab.</S>
    <S sid="83" ssid="51">1, the ratio of the number of permitted reorderings for the discussed constraints is listed as a function of the sentence length.</S>
    <S sid="84" ssid="52">We see that for longer sentences the ITG constraints allow for more reorderings than the IBM constraints.</S>
    <S sid="85" ssid="53">For sentences of length 10 words, there are about twice as many reorderings for the ITG constraints than for the IBM constraints.</S>
    <S sid="86" ssid="54">This ratio steadily increases.</S>
    <S sid="87" ssid="55">For longer sentences, the ITG constraints allow for much more flexibility than the IBM constraints.</S>
  </SECTION>
  <SECTION title="3 Search" number="3">
    <S sid="88" ssid="1">Now, let us get back to more practical aspects.</S>
    <S sid="89" ssid="2">Reordering constraints are more or less useless, if they do not allow the maximization of Eq.</S>
    <S sid="90" ssid="3">2 to be performed in an efficient way.</S>
    <S sid="91" ssid="4">Therefore, in this section, we will describe different aspects of the search algorithm for the ITG constraints.</S>
    <S sid="92" ssid="5">First, we will present the dynamic programming equations and the resulting complexity.</S>
    <S sid="93" ssid="6">Then, we will describe pruning techniques to accelerate the search.</S>
    <S sid="94" ssid="7">Finally, we will extend the basic algorithm for the generation of word graphs.</S>
    <S sid="95" ssid="8">The ITG constraints allow for a polynomial-time search algorithm.</S>
    <S sid="96" ssid="9">It is based on the following dynamic programming recursion equations.</S>
    <S sid="97" ssid="10">During the search a table Qjl,jr,eb,et is constructed.</S>
    <S sid="98" ssid="11">Here, Qjl,jr,eb,et denotes the probability of the best hypothesis translating the source words from position jl (left) to position jr (right) which begins with the target language word eb (bottom) and ends with the word et (top).</S>
    <S sid="99" ssid="12">This is illustrated in Fig.</S>
    <S sid="100" ssid="13">3.</S>
    <S sid="101" ssid="14">Here, we initialize this table with monotone translations of IBM Model 4.</S>
    <S sid="102" ssid="15">Therefore, Q0jl jr eb et denotes the probability of the best monotone hypothesis of IBM Model 4.</S>
    <S sid="103" ssid="16">Alternatively, we could use any other single-word based lexicon as well as phrasebased models for this initialization.</S>
    <S sid="104" ssid="17">Our choice is the IBM Model4 to make the results as comparable as possible to the search with the IBM constraints.</S>
    <S sid="105" ssid="18">We introduce a new parameter pm (m=&#710; monotone), which denotes the probability of a monotone combination of two partial hypotheses.</S>
    <S sid="106" ssid="19">We formulated this equation for a bigram language model, but of course, the same method can also be applied for a trigram language model.</S>
    <S sid="107" ssid="20">The resulting algorithm is similar to the CYK-parsing algorithm.</S>
    <S sid="108" ssid="21">It has a worst-case complexity of O(J3 ' E4).</S>
    <S sid="109" ssid="22">Here, J is the length of the source sentence and E is the vocabulary size of the target language.</S>
    <S sid="110" ssid="23">Although the described search algorithm has a polynomial-time complexity, even with a bigram language model the search space is very large.</S>
    <S sid="111" ssid="24">A full search is possible but time consuming.</S>
    <S sid="112" ssid="25">The situation gets even worse when a trigram language model is used.</S>
    <S sid="113" ssid="26">Therefore, pruning techniques are obligatory to reduce the translation time.</S>
    <S sid="114" ssid="27">Pruning is applied to hypotheses that translate the same subsequence fjr jl of the source sentence.</S>
    <S sid="115" ssid="28">We use pruning in the following two ways.</S>
    <S sid="116" ssid="29">The first pruning technique is histogram pruning: we restrict the number of translation hypotheses per sequence fjr jl .</S>
    <S sid="117" ssid="30">For each sequence fjr jl , we keep only a fixed number of translation hypotheses.</S>
    <S sid="118" ssid="31">The second pruning technique is threshold pruning: the idea is to remove all hypotheses that have a low probability relative to the best hypothesis.</S>
    <S sid="119" ssid="32">Therefore, we introduce a threshold pruning parameter q, with 0 &lt; q &lt; 1.</S>
    <S sid="120" ssid="33">Let Q3&#65533;l,jr denote the maximum probability of all translation hypotheses for fjr Applying these pruning techniques the computational costs can be reduced significantly with almost no loss in translation quality.</S>
    <S sid="121" ssid="34">The generation of word graphs for a bottom-top search with the IBM constraints is described in (Ueffing et al., 2002).</S>
    <S sid="122" ssid="35">These methods cannot be applied to the CYK-style search for the ITG constraints.</S>
    <S sid="123" ssid="36">Here, the idea for the generation of word graphs is the following: assuming we already have word graphs for the source sequences fkjl and fjr in monotone or inverted order.</S>
    <S sid="124" ssid="37">Now, we describe this idea in a more formal way.</S>
    <S sid="125" ssid="38">A word graph is a directed acyclic graph (dag) with one start and one end node.</S>
    <S sid="126" ssid="39">The edges are annotated with target language words or phrases.</S>
    <S sid="127" ssid="40">We also allow 2-transitions.</S>
    <S sid="128" ssid="41">These are edges annotated with the empty word.</S>
    <S sid="129" ssid="42">Additionally, edges may be annotated with probabilities of the language or translation model.</S>
    <S sid="130" ssid="43">Each path from start node to end node represents one translation hypothesis.</S>
    <S sid="131" ssid="44">The probability of this hypothesis is calculated by multiplying the probabilities along the path.</S>
    <S sid="132" ssid="45">During the search, we have to combine two word graphs in either monotone or inverted order.</S>
    <S sid="133" ssid="46">This is done in the following way: we are given two word graphs w1 and w2 with start and end nodes (s1, g1) and (s2,g2), respectively.</S>
    <S sid="134" ssid="47">First, we add an 2-transition (g1, s2) from the end node of the first graph w1 to the start node of the second graph w2 and annotate this edge with the probability of a monotone concatenation pm.</S>
    <S sid="135" ssid="48">Second, we create a copy of each of the original word graphs w1 and w2.</S>
    <S sid="136" ssid="49">Then, we add an 2-transition (g2, s1) from the end node of the copied second graph to the start node of the copied first graph.</S>
    <S sid="137" ssid="50">This edge is annotated with the probability of a inverted concatenation 1 &#8212; pm.</S>
    <S sid="138" ssid="51">Now, we have obtained two word graphs: one for a monotone and one for a inverted concatenation.</S>
    <S sid="139" ssid="52">The final word graphs is constructed by merging the two start nodes and the two end nodes, respectively.</S>
    <S sid="140" ssid="53">Let W(jl, jr) denote the word graph for the source sequence fjr jl .</S>
    <S sid="141" ssid="54">This graph is constructed from the word graphs of all subsequences of (jl, jr).</S>
    <S sid="142" ssid="55">Therefore, we assume, these word graphs have already been produced.</S>
    <S sid="143" ssid="56">For all source positions k with jl &lt; k &lt; jr, we combine the word graphs W (jl, k) and W (k + 1, jr) as described above.</S>
    <S sid="144" ssid="57">Finally, we merge all start nodes of these graphs as well as all end nodes.</S>
    <S sid="145" ssid="58">Now, we have obtained the word graph W(jl, jr) for the source sequence fjr jl .</S>
    <S sid="146" ssid="59">As initialization, we use the word graphs of the monotone IBM4 search.</S>
    <S sid="147" ssid="60">In this section, we will extend the ITG constraints described in Sec.</S>
    <S sid="148" ssid="61">2.1.</S>
    <S sid="149" ssid="62">This extension will go beyond basic reordering constraints.</S>
    <S sid="150" ssid="63">We already mentioned that the use of consecutive phrases within the ITG approach is straightforward.</S>
    <S sid="151" ssid="64">The only thing we have to change is the initialization of the Q-table.</S>
    <S sid="152" ssid="65">Now, we will extend this idea to phrases that are non-consecutive in the source language.</S>
    <S sid="153" ssid="66">For this purpose, we adopt the view of the ITG constraints as a bilingual grammar as, e.g., in (Wu, 1997).</S>
    <S sid="154" ssid="67">For the baseline ITG constraints, the resulting grammar is: A&#8212; [AA]  |(AA)  |f/e  |f/2  |2/e Here, [AA] denotes a monotone concatenation and (AA) denotes an inverted concatenation.</S>
    <S sid="155" ssid="68">Let us now consider the case of a source phrase consisting of two parts f1 and f2.</S>
    <S sid="156" ssid="69">Let e denote the corresponding target phrase.</S>
    <S sid="157" ssid="70">We add the productions A &#8212; [e/f1 A 2/f2]  |(e/f1 A 2/f2) to the grammar.</S>
    <S sid="158" ssid="71">The probabilities of these productions are, dependent on the translation direction, p(e|f1, f2) or p(f1, f2|e), respectively.</S>
    <S sid="159" ssid="72">Obviously, these productions are not in the normal form of an ITG, but with the method described in (Wu, 1997), they can be normalized.</S>
  </SECTION>
  <SECTION title="4 Corpus Statistics" number="4">
    <S sid="160" ssid="1">In the following sections we will present results on two tasks.</S>
    <S sid="161" ssid="2">Therefore, in this section we will show the corpus statistics for each of these tasks.</S>
    <S sid="162" ssid="3">The first task we will present results on is the Verbmobil task (Wahlster, 2000).</S>
    <S sid="163" ssid="4">The domain of this corpus is appointment scheduling, travel planning, and hotel reservation.</S>
    <S sid="164" ssid="5">It consists of transcriptions of spontaneous speech.</S>
    <S sid="165" ssid="6">Table 2 shows the corpus statistics of this corpus.</S>
    <S sid="166" ssid="7">The training corpus (Train) was used to train the IBM model parameters.</S>
    <S sid="167" ssid="8">The remaining free parameters, i.e. pm and the model scaling factors (Och and Ney, 2002), were adjusted on the development corpus (Dev).</S>
    <S sid="168" ssid="9">The resulting system was evaluated on the test corpus (Test).</S>
    <S sid="169" ssid="10">Table 2: Statistics of training and test corpus for the Verbmobil task (PP=perplexity, SL=sentence length).</S>
    <S sid="170" ssid="11">Additionally, we carried out experiments on the Canadian Hansards task.</S>
    <S sid="171" ssid="12">This task contains the proceedings of the Canadian parliament, which are kept by law in both French and English.</S>
    <S sid="172" ssid="13">About 3 million parallel sentences of this bilingual data have been made available by the Linguistic Data Consortium (LDC).</S>
    <S sid="173" ssid="14">Here, we use a subset of the data containing only sentences with a maximum length of 30 words.</S>
    <S sid="174" ssid="15">Table 3 shows the training and test corpus statistics.</S>
  </SECTION>
  <SECTION title="5 Evaluation in Training" number="5">
    <S sid="175" ssid="1">In this section, we will investigate for each of the constraints the coverage of the training corpus alignment.</S>
    <S sid="176" ssid="2">For this purpose, we compute the Viterbi alignment of IBM Model 5 with GIZA++ (Och and Ney, 2000).</S>
    <S sid="177" ssid="3">This alignment is produced without any restrictions on word-reorderings.</S>
    <S sid="178" ssid="4">Then, we check for every sentence if the alignment satisfies each of the constraints.</S>
    <S sid="179" ssid="5">The ratio of the number of satisfied alignments and the total number of sentences is referred to as coverage.</S>
    <S sid="180" ssid="6">Tab.</S>
    <S sid="181" ssid="7">4 shows the results for the Verbmobil task and for the Canadian Hansards task.</S>
    <S sid="182" ssid="8">It contains the results for both translation directions German-English (S&#8212;*T) and English-German (T&#8212;*S) for the Verbmobil task and French-English (S&#8212;*T) and English-French (T&#8212;*S) for the Canadian Hansards task, respectively.</S>
    <S sid="183" ssid="9">For the Verbmobil task, the baseline ITG constraints and the IBM constraints result in a similar coverage.</S>
    <S sid="184" ssid="10">It is about 91% for the German-English translation direction and about 88% for the EnglishGerman translation direction.</S>
    <S sid="185" ssid="11">A significantly higher coverage of about 96% is obtained with the extended ITG constraints.</S>
    <S sid="186" ssid="12">Thus with the extended ITG constraints, the coverage increases by about 8% absolute.</S>
    <S sid="187" ssid="13">For the Canadian Hansards task, the baseline ITG constraints yield a worse coverage than the IBM constraints.</S>
    <S sid="188" ssid="14">Especially for the English-French translation direction, the ITG coverage of 73.6% is very low.</S>
    <S sid="189" ssid="15">Again, the extended ITG constraints obtained the best results.</S>
    <S sid="190" ssid="16">Here, the coverage increases from about 87% for the IBM constraints to about 96% for the extended ITG constraints.</S>
  </SECTION>
  <SECTION title="6 Translation Experiments" number="6">
    <S sid="191" ssid="1">In our experiments, we use the following error criteria: The WER is computed as the minimum number of substitution, insertion and deletion operations that have to be performed to convert the generated sentence into the target sentence.</S>
    <S sid="192" ssid="2">For each test sentence, not only a single reference translation is used, as for the WER, but a whole set of reference translations.</S>
    <S sid="193" ssid="3">For each translation hypothesis, the WER to the most similar sentence is calculated (Nie&#223;en et al., 2000).</S>
    <S sid="194" ssid="4">This score measures the precision of unigrams, bigrams, trigrams and fourgrams with respect to a whole set of reference translations with a penalty for too short sentences (Papineni et al., 2001).</S>
    <S sid="195" ssid="5">BLEU measures accuracy, i.e. large BLEU scores are better.</S>
    <S sid="196" ssid="6">For a more detailed analysis, subjective judgments by test persons are necessary.</S>
    <S sid="197" ssid="7">Each translated sentence was judged by a human examiner according to an error scale from 0.0 to 1.0 (Nie&#223;en et al., 2000).</S>
    <S sid="198" ssid="8">In this section, we will present the translation results for both the IBM constraints and the baseline ITG constraints.</S>
    <S sid="199" ssid="9">We used a single-word based search with IBM Model 4.</S>
    <S sid="200" ssid="10">The initialization for the ITG constraints was done with monotone IBM Model 4 translations.</S>
    <S sid="201" ssid="11">So, the only difference between the two systems are the reordering constraints.</S>
    <S sid="202" ssid="12">In Tab.</S>
    <S sid="203" ssid="13">5 the results for the Verbmobil task are shown.</S>
    <S sid="204" ssid="14">We see that the results on this task are similar.</S>
    <S sid="205" ssid="15">The search with the ITG constraints yields slightly lower error rates.</S>
    <S sid="206" ssid="16">Some translation examples of the Verbmobil task are shown in Tab.</S>
    <S sid="207" ssid="17">6.</S>
    <S sid="208" ssid="18">We have to keep in mind, that the Verbmobil task consists of transcriptions of spontaneous speech.</S>
    <S sid="209" ssid="19">Therefore, the source sentences as well as the reference translations may have an unorthodox grammatical structure.</S>
    <S sid="210" ssid="20">In the first example, the German verb-group (&#8220;w&#168;urde vorschlagen&#8221;) is split into two parts.</S>
    <S sid="211" ssid="21">The search with the ITG constraints is able to produce a correct translation.</S>
    <S sid="212" ssid="22">With the IBM constraints, it is not possible to translate this verb-group correctly, because the distance between the two parts is too large (more than four words).</S>
    <S sid="213" ssid="23">As we see in the second example, in German the verb of a subordinate clause is placed at the end (&#8220;&#168;ubernachten&#8221;).</S>
    <S sid="214" ssid="24">The IBM search is not able to perform the necessary long-range reordering, as it is done with the ITG search.</S>
  </SECTION>
  <SECTION title="7 Related Work" number="7">
    <S sid="215" ssid="1">The ITG constraints were introduced in (Wu, 1995).</S>
    <S sid="216" ssid="2">The applications were, for instance, the segmentation of Chinese character sequences into Chinese &#8220;words&#8221; and the bracketing of the source sentence into sub-sentential chunks.</S>
    <S sid="217" ssid="3">In (Wu, 1996) the baseline ITG constraints were used for statistical machine translation.</S>
    <S sid="218" ssid="4">The resulting algorithm is similar to the one presented in Sect.</S>
    <S sid="219" ssid="5">3.1, but here, we use monotone translation hypotheses of the full IBM Model 4 as initialization, whereas in (Wu, 1996) a single-word based lexicon model is used.</S>
    <S sid="220" ssid="6">In (Vilar, 1998) a model similar to Wu&#8217;s method was considered.</S>
  </SECTION>
  <SECTION title="8 Conclusions" number="8">
    <S sid="221" ssid="1">We have described the ITG constraints in detail and compared them to the IBM constraints.</S>
    <S sid="222" ssid="2">We draw the following conclusions: especially for long sentences the ITG constraints allow for higher flexibility in word-reordering than the IBM constraints.</S>
    <S sid="223" ssid="3">Regarding the Viterbi alignment in training, the baseline ITG constraints yield a similar coverage as the IBM constraints on the Verbmobil task.</S>
    <S sid="224" ssid="4">On the Canadian Hansards task the baseline ITG constraints were not sufficient.</S>
    <S sid="225" ssid="5">With the extended ITG constraints the coverage improves significantly on both tasks.</S>
    <S sid="226" ssid="6">On the Canadian Hansards task the coverage increases from about 87% to about 96%.</S>
    <S sid="227" ssid="7">We have presented a polynomial-time search algorithm for statistical machine translation based on the ITG constraints and its extension for the generation of word graphs.</S>
    <S sid="228" ssid="8">We have shown the translation results for the Verbmobil task.</S>
    <S sid="229" ssid="9">On this task, the translation quality of the search with the baseline ITG constraints is already competitive with the results for the IBM constraints.</S>
    <S sid="230" ssid="10">Therefore, we expect the search with the extended ITG constraints to outperform the search with the IBM constraints.</S>
    <S sid="231" ssid="11">Future work will include the automatic extraction of the bilingual grammar as well as the use of this grammar for the translation process.</S>
  </SECTION>
</PAPER>
