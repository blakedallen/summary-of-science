<PAPER>
  <S sid="0">Semantic Role Labeling Using Different Syntactic Views</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Semantic role labeling is the process of annotating the predicate-argument structure in text with semantic labels.</S>
    <S sid="2" ssid="2">In this paper we present a state-of-the-art baseline semantic role labeling system based on Support Vector Machine classifiers.</S>
    <S sid="3" ssid="3">We show improvements on this system by: i) adding new features including features extracted from dependency parses, ii) performing feature selection and calibration and iii) combining parses obtained from semantic parsers trained using different syntactic views.</S>
    <S sid="4" ssid="4">Error analysis of the baseline system showed that approximately half of the argument identification errors resulted from parse errors in which there was no syntactic constituent that aligned with the correct argument.</S>
    <S sid="5" ssid="5">In order to address this problem, we combined semantic parses from a Minipar syntactic parse and from a chunked syntactic representation with our original baseline system which was based on Charniak parses.</S>
    <S sid="6" ssid="6">All of the reported techniques resulted in performance improvements.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="7" ssid="1">Semantic Role Labeling is the process of annotating the predicate-argument structure in text with se* This research was partially supported by the ARDA AQUAINT program via contract OCG4423B and by the NSF via grants IS-9978025 and ITR/HCI 0086132 mantic labels (Gildea and Jurafsky, 2000; Gildea and Jurafsky, 2002; Gildea and Palmer, 2002; Surdeanu et al., 2003; Hacioglu and Ward, 2003; Chen and Rambow, 2003; Gildea and Hockenmaier, 2003; Pradhan et al., 2004; Hacioglu, 2004).</S>
    <S sid="8" ssid="2">The architecture underlying all of these systems introduces two distinct sub-problems: the identification of syntactic constituents that are semantic roles for a given predicate, and the labeling of the those constituents with the correct semantic role.</S>
    <S sid="9" ssid="3">A detailed error analysis of our baseline system indicates that the identification problem poses a significant bottleneck to improving overall system performance.</S>
    <S sid="10" ssid="4">The baseline system&#8217;s accuracy on the task of labeling nodes known to represent semantic arguments is 90%.</S>
    <S sid="11" ssid="5">On the other hand, the system&#8217;s performance on the identification task is quite a bit lower, achieving only 80% recall with 86% precision.</S>
    <S sid="12" ssid="6">There are two sources of these identification errors: i) failures by the system to identify all and only those constituents that correspond to semantic roles, when those constituents are present in the syntactic analysis, and ii) failures by the syntactic analyzer to provide the constituents that align with correct arguments.</S>
    <S sid="13" ssid="7">The work we present here is tailored to address these two sources of error in the identification problem.</S>
    <S sid="14" ssid="8">The remainder of this paper is organized as follows.</S>
    <S sid="15" ssid="9">We first describe a baseline system based on the best published techniques.</S>
    <S sid="16" ssid="10">We then report on two sets of experiments using techniques that improve performance on the problem of finding arguments when they are present in the syntactic analysis.</S>
    <S sid="17" ssid="11">In the first set of experiments we explore new features, including features extracted from a parser that provides a different syntactic view &#8211; a Combinatory Categorial Grammar (CCG) parser (Hockenmaier and Steedman, 2002).</S>
    <S sid="18" ssid="12">In the second set of experiments, we explore approaches to identify optimal subsets of features for each argument class, and to calibrate the classifier probabilities.</S>
    <S sid="19" ssid="13">We then report on experiments that address the problem of arguments missing from a given syntactic analysis.</S>
    <S sid="20" ssid="14">We investigate ways to combine hypotheses generated from semantic role taggers trained using different syntactic views &#8211; one trained using the Charniak parser (Charniak, 2000), another on a rule-based dependency parser &#8211; Minipar (Lin, 1998), and a third based on a flat, shallow syntactic chunk representation (Hacioglu, 2004a).</S>
    <S sid="21" ssid="15">We show that these three views complement each other to improve performance.</S>
  </SECTION>
  <SECTION title="2 Baseline System" number="2">
    <S sid="22" ssid="1">For our experiments, we use Feb 2004 release of PropBank1 (Kingsbury and Palmer, 2002; Palmer et al., 2005), a corpus in which predicate argument relations are marked for verbs in the Wall Street Journal (WSJ) part of the Penn TreeBank (Marcus et al., 1994).</S>
    <S sid="23" ssid="2">PropBank was constructed by assigning semantic arguments to constituents of handcorrected TreeBank parses.</S>
    <S sid="24" ssid="3">Arguments of a verb are labeled ARG0 to ARG5, where ARG0 is the PROTO-AGENT, ARG1 is the PROTO-PATIENT, etc.</S>
    <S sid="25" ssid="4">In addition to these CORE ARGUMENTS, additional ADJUNCTIVE ARGUMENTS, referred to as ARGMs are also marked.</S>
    <S sid="26" ssid="5">Some examples are ARGM-LOC, for locatives; ARGM-TMP, for temporals; ARGMMNR, for manner, etc.</S>
    <S sid="27" ssid="6">Figure 1 shows a syntax tree along with the argument labels for an example extracted from PropBank.</S>
    <S sid="28" ssid="7">We use Sections 02-21 for training, Section 00 for development and Section 23 for testing.</S>
    <S sid="29" ssid="8">We formulate the semantic labeling problem as a multi-class classification problem using Support Vector Machine (SVM) classifier (Hacioglu et al., 2003; Pradhan et al., 2003; Pradhan et al., 2004) TinySVM2 along with YamCha3 (Kudo and Matsumoto, 2000; Kudo and Matsumoto, 2001) are used to implement the system.</S>
    <S sid="30" ssid="9">Using what is known as the ONE VS ALL classification strategy, n binary classifiers are trained, where n is number of semantic classes including a NULL class.</S>
    <S sid="31" ssid="10">The baseline feature set is a combination of features introduced by Gildea and Jurafsky (2002) and ones proposed in Pradhan et al., (2004), Surdeanu et al., (2003) and the syntactic-frame feature proposed in (Xue and Palmer, 2004).</S>
    <S sid="32" ssid="11">Table 1 lists the features used.</S>
    <S sid="33" ssid="12">As described in (Pradhan et al., 2004), we postprocess the n-best hypotheses using a trigram language model of the argument sequence.</S>
    <S sid="34" ssid="13">We analyze the performance on three tasks: Table 2 shows the performance of the system using the hand corrected, TreeBank parses (HAND) and using parses produced by a Charniak parser (AUTOMATIC).</S>
    <S sid="35" ssid="14">Precision (P), Recall (R) and F1 scores are given for the identification and combined tasks, and Classification Accuracy (A) for the classification task.</S>
    <S sid="36" ssid="15">Classification performance using Charniak parses is about 3% absolute worse than when using TreeBank parses.</S>
    <S sid="37" ssid="16">On the other hand, argument identification performance using Charniak parses is about 12.7% absolute worse.</S>
    <S sid="38" ssid="17">Half of these errors &#8211; about 7% are due to missing constituents, and the other half &#8211; about 6% are due to mis-classifications.</S>
    <S sid="39" ssid="18">Motivated by this severe degradation in argument identification performance for automatic parses, we examined a number of techniques for improving argument identification.</S>
    <S sid="40" ssid="19">We made a number of changes to the system which resulted in improved performance.</S>
    <S sid="41" ssid="20">The changes fell into three categories: i) new features, ii) feature selection and calibration, and iii) combining parses from different syntactic representations.</S>
  </SECTION>
  <SECTION title="3 Additional Features" number="3">
    <S sid="42" ssid="1">While the Path feature has been identified to be very important for the argument identification task, it is one of the most sparse features and may be difficult to train or generalize (Pradhan et al., 2004; Xue and Palmer, 2004).</S>
    <S sid="43" ssid="2">A dependency grammar should generate shorter paths from the predicate to dependent words in the sentence, and could be a more robust complement to the phrase structure grammar paths extracted from the Charniak parse tree.</S>
    <S sid="44" ssid="3">Gildea and Hockenmaier (2003) report that using features extracted from a Combinatory Categorial Grammar (CCG) representation improves semantic labeling performance on core arguments.</S>
    <S sid="45" ssid="4">We evaluated features from a CCG parser combined with our baseline feature set.</S>
    <S sid="46" ssid="5">We used three features that were introduced by Gildea and Hockenmaier (2003): Parallel to the hand-corrected TreeBank parses, we also had access to correct CCG parses derived from the TreeBank (Hockenmaier and Steedman, 2002a).</S>
    <S sid="47" ssid="6">We performed two sets of experiments.</S>
    <S sid="48" ssid="7">One using the correct CCG parses, and the other using parses obtained using StatCCG4 parser (Hockenmaier and Steedman, 2002).</S>
    <S sid="49" ssid="8">We incorporated these features in the systems based on hand-corrected TreeBank parses and Charniak parses respectively.</S>
    <S sid="50" ssid="9">For each constituent in the Charniak parse tree, if there was a dependency between the head word of the constituent and the predicate, then the corresponding CCG features for those words were added to the features for that constituent.</S>
    <S sid="51" ssid="10">Table 3 shows the performance of the system when these features were added.</S>
    <S sid="52" ssid="11">The corresponding baseline performances are mentioned in parentheses.</S>
    <S sid="53" ssid="12">We added several other features to the system.</S>
    <S sid="54" ssid="13">Position of the clause node (S, SBAR) seems to be an important feature in argument identification (Hacioglu et al., 2004) therefore we experimented with four clause-based path feature variations.</S>
    <S sid="55" ssid="14">We added the predicate context to capture predicate sense variations.</S>
    <S sid="56" ssid="15">For some adjunctive arguments, punctuation plays an important role, so we added some punctuation features.</S>
    <S sid="57" ssid="16">All the new features are shown in</S>
  </SECTION>
  <SECTION title="4 Feature Selection and Calibration" number="4">
    <S sid="58" ssid="1">In the baseline system, we used the same set of features for all the n binary ONE VS ALL classifiers.</S>
    <S sid="59" ssid="2">Error analysis showed that some features specifically suited for one argument class, for example, core arguments, tend to hurt performance on some adjunctive arguments.</S>
    <S sid="60" ssid="3">Therefore, we thought that selecting subsets of features for each argument class might improve performance.</S>
    <S sid="61" ssid="4">To achieve this, we performed a simple feature selection procedure.</S>
    <S sid="62" ssid="5">For each argument, we started with the set of features introduced by (Gildea and Jurafsky, 2002).</S>
    <S sid="63" ssid="6">We pruned this set by training classifiers after leaving out one feature at a time and checking its performance on a development set.</S>
    <S sid="64" ssid="7">We used the x2 significance while making pruning decisions.</S>
    <S sid="65" ssid="8">Following that, we added each of the other features one at a time to the pruned baseline set of features and selected ones that showed significantly improved performance.</S>
    <S sid="66" ssid="9">Since the feature selection experiments were computationally intensive, we performed them using 10k training examples.</S>
    <S sid="67" ssid="10">SVMs output distances not probabilities.</S>
    <S sid="68" ssid="11">These distances may not be comparable across classifiers, especially if different features are used to train each binary classifier.</S>
    <S sid="69" ssid="12">In the baseline system, we used the algorithm described by Platt (Platt, 2000) to convert the SVM scores into probabilities by fitting to a sigmoid.</S>
    <S sid="70" ssid="13">When all classifiers used the same set of features, fitting all scores to a single sigmoid was found to give the best performance.</S>
    <S sid="71" ssid="14">Since different feature sets are now used by the classifiers, we trained a separate sigmoid for each classifier.</S>
    <S sid="72" ssid="15">Foster and Stine (2004) show that the pooladjacent-violators (PAV) algorithm (Barlow et al., 1972) provides a better method for converting raw classifier scores to probabilities when Platt&#8217;s algorithm fails.</S>
    <S sid="73" ssid="16">The probabilities resulting from either conversions may not be properly calibrated.</S>
    <S sid="74" ssid="17">So, we binned the probabilities and trained a warping function to calibrate them.</S>
    <S sid="75" ssid="18">For each argument classifier, we used both the methods for converting raw SVM scores into probabilities and calibrated them using a development set.</S>
    <S sid="76" ssid="19">Then, we visually inspected the calibrated plots for each classifier and chose the method that showed better calibration as the calibration procedure for that classifier.</S>
    <S sid="77" ssid="20">Plots of the predicted probabilities versus true probabilities for the ARCM-TmP VS ALL classifier, before and after calibration are shown in Figure 2.</S>
    <S sid="78" ssid="21">The performance improvement over a classifier that is trained using all the features for all the classes is shown in Table 5.</S>
    <S sid="79" ssid="22">Table 6 shows the performance of the system after adding the CCG features, additional features ex</S>
  </SECTION>
  <SECTION title="5 Alternative Syntactic Views" number="5">
    <S sid="80" ssid="1">Adding new features can improve performance when the syntactic representation being used for classification contains the correct constituents.</S>
    <S sid="81" ssid="2">Additional features can&#8217;t recover from the situation where the parse tree being used for classification doesn&#8217;t contain the correct constituent representing an argument.</S>
    <S sid="82" ssid="3">Such parse errors account for about 7% absolute of the errors (or, about half of 12.7%) for the Charniak parse based system.</S>
    <S sid="83" ssid="4">To address these errors, we added two additional parse representations: i) Minipar dependency parser, and ii) chunking parser (Hacioglu et al., 2004).</S>
    <S sid="84" ssid="5">The hope is that these parsers will produce different errors than the Charniak parser since they represent different syntactic views.</S>
    <S sid="85" ssid="6">The Charniak parser is trained on the Penn TreeBank corpus.</S>
    <S sid="86" ssid="7">Minipar is a rule based dependency parser.</S>
    <S sid="87" ssid="8">The chunking parser is trained on PropBank and produces a flat syntactic representation that is very different from the full parse tree produced by Charniak.</S>
    <S sid="88" ssid="9">A combination of the three different parses could produce better results than any single one.</S>
    <S sid="89" ssid="10">Minipar (Lin, 1998; Lin and Pantel, 2001) is a rulebased dependency parser.</S>
    <S sid="90" ssid="11">It outputs dependencies between a word called head and another called modifier.</S>
    <S sid="91" ssid="12">Each word can modify at most one word.</S>
    <S sid="92" ssid="13">The dependency relationships form a dependency tree.</S>
    <S sid="93" ssid="14">The set of words under each node in Minipar&#8217;s dependency tree form a contiguous segment in the original sentence and correspond to the constituent in a constituent tree.</S>
    <S sid="94" ssid="15">We formulate the semantic labeling problem in the same way as in a constituent structure parse, except we classify the nodes that represent head words of constituents.</S>
    <S sid="95" ssid="16">A similar formulation using dependency trees derived from TreeBank was reported in Hacioglu (Hacioglu, 2004).</S>
    <S sid="96" ssid="17">In that experiment, the dependency trees were derived from hand-corrected TreeBank trees using head word rules.</S>
    <S sid="97" ssid="18">Here, an SVM is trained to assign PropBank argument labels to nodes in Minipar dependency trees using the following features: Table 8 shows the performance of the Miniparbased semantic parser.</S>
    <S sid="98" ssid="19">Minipar performance on the PropBank corpus is substantially worse than the Charniak based system.</S>
    <S sid="99" ssid="20">This is understandable from the fact that Minipar is not designed to produce constituents that would exactly match the constituent segmentation used in TreeBank.</S>
    <S sid="100" ssid="21">In the test set, about 37% of the arguments do not have corresponding constituents that match its boundaries.</S>
    <S sid="101" ssid="22">In experiments reported by Hacioglu (Hacioglu, 2004), a mismatch of about 8% was introduced in the transformation from handcorrected constituent trees to dependency trees.</S>
    <S sid="102" ssid="23">Using an errorful automatically generated tree, a still higher mismatch would be expected.</S>
    <S sid="103" ssid="24">In case of the CCG parses, as reported by Gildea and Hockenmaier (2003), the mismatch was about 23%.</S>
    <S sid="104" ssid="25">A more realistic way to score the performance is to score tags assigned to head words of constituents, rather than considering the exact boundaries of the constituents as reported by Gildea and Hockenmaier (2003).</S>
    <S sid="105" ssid="26">The results for this system are shown in Table 9. on the PropBank training data.</S>
    <S sid="106" ssid="27">Table 10 lists the features used by this classifier.</S>
    <S sid="107" ssid="28">For each token (base phrase) to be tagged, a set of features is created from a fixed size context that surrounds each token.</S>
    <S sid="108" ssid="29">In addition to the above features, it also uses previous semantic tags that have already been assigned to the tokens contained in the linguistic context.</S>
    <S sid="109" ssid="30">A 5-token sliding window is used for the context.</S>
    <S sid="110" ssid="31">Hacioglu has previously described a chunk based semantic labeling method (Hacioglu et al., 2004).</S>
    <S sid="111" ssid="32">This system uses SVM classifiers to first chunk input text into flat chunks or base phrases, each labeled with a syntactic tag.</S>
    <S sid="112" ssid="33">A second SVM is trained to assign semantic labels to the chunks.</S>
    <S sid="113" ssid="34">The system is trained SVMs were trained for begin (B) and inside (I) classes of all arguments and outside (O) class for a total of 78 one-vs-all classifiers.</S>
    <S sid="114" ssid="35">Again, TinySVM5 along with YamCha6 (Kudo and Matsumoto, 2000; Kudo and Matsumoto, 2001) are used as the SVM training and test software.</S>
    <S sid="115" ssid="36">Table 11 presents the system performances on the PropBank test set for the chunk-based system.</S>
  </SECTION>
  <SECTION title="6 Combining Semantic Labelers" number="6">
    <S sid="116" ssid="1">We combined the semantic parses as follows: i) scores for arguments were converted to calibrated probabilities, and arguments with scores below a threshold value were deleted.</S>
    <S sid="117" ssid="2">Separate thresholds were used for each parser. ii) For the remaining arguments, the more probable ones among overlapping ones were selected.</S>
    <S sid="118" ssid="3">In the chunked system, an argument could consist of a sequence of chunks.</S>
    <S sid="119" ssid="4">The probability assigned to the begin tag of an argument was used as the probability of the sequence of chunks forming an argument.</S>
    <S sid="120" ssid="5">Table 12 shows the performance improvement after the combination.</S>
    <S sid="121" ssid="6">Again, numbers in parentheses are respective baseline performances. mance on argument identification and argument identification and classification tasks after combining all three semantic parses.</S>
    <S sid="122" ssid="7">The main contribution of combining both the Minipar based and the Charniak-based parsers was significantly improved performance on ARG1 in addition to slight improvements to some other arguments.</S>
    <S sid="123" ssid="8">Table 13 shows the effect on selected arguments on sentences that were altered during the the combination of Charniak-based and Chunk-based parses. changed during pair-wise Charniak and Chunk combination.</S>
    <S sid="124" ssid="9">A marked increase in number of propositions for which all the arguments were identified correctly from 0% to about 46% can be seen.</S>
    <S sid="125" ssid="10">Relatively few predicates, 107 out of 4500, were affected by this combination.</S>
    <S sid="126" ssid="11">To give an idea of what the potential improvements of the combinations could be, we performed an oracle experiment for a combined system that tags head words instead of exact constituents as we did in case of Minipar-based and Charniak-based semantic parser earlier.</S>
    <S sid="127" ssid="12">In case of chunks, first word in prepositional base phrases was selected as the head word, and for all other chunks, the last word was selected to be the head word.</S>
    <S sid="128" ssid="13">If the correct argument was found present in either the Charniak, Minipar or Chunk hypotheses then that was selected.</S>
    <S sid="129" ssid="14">The results for this are shown in Table 14.</S>
    <S sid="130" ssid="15">It can be seen that the head word based performance almost approaches the constituent based performance reported on the hand-corrected parses in Table 3 and there seems to be considerable scope for improvement. based scoring after oracle combination.</S>
    <S sid="131" ssid="16">Charniak (C), Minipar (M) and Chunker (CH).</S>
    <S sid="132" ssid="17">Table 15 shows the performance improvement in the actual system for pairwise combination of the parsers and one using all three.</S>
  </SECTION>
  <SECTION title="7 Conclusions" number="7">
    <S sid="133" ssid="1">We described a state-of-the-art baseline semantic role labeling system based on Support Vector Machine classifiers.</S>
    <S sid="134" ssid="2">Experiments were conducted to evaluate three types of improvements to the system: i) adding new features including features extracted from a Combinatory Categorial Grammar parse, ii) performing feature selection and calibration and iii) combining parses obtained from semantic parsers trained using different syntactic views.</S>
    <S sid="135" ssid="3">We combined semantic parses from a Minipar syntactic parse and from a chunked syntactic representation with our original baseline system which was based on Charniak parses.</S>
    <S sid="136" ssid="4">The belief was that semantic parses based on different syntactic views would make different errors and that the combination would be complimentary.</S>
    <S sid="137" ssid="5">A simple combination of these representations did lead to improved performance.</S>
  </SECTION>
  <SECTION title="8 Acknowledgements" number="8">
    <S sid="138" ssid="1">This research was partially supported by the ARDA AQUAINT program via contract OCG4423B and by the NSF via grants IS-9978025 and ITR/HCI 0086132.</S>
    <S sid="139" ssid="2">Computer time was provided by NSF ARI Grant #CDA-9601817, NSF MRI Grant #CNS0420873, NASA AIST grant #NAG2-1646, DOE SciDAC grant #DE-FG02-04ER63870, NSF sponsorship of the National Center for Atmospheric Research, and a grant from the IBM Shared University Research (SUR) program.</S>
    <S sid="140" ssid="3">We would like to thank Ralph Weischedel and Scott Miller of BBN Inc. for letting us use their named entity tagger &#8211; IdentiFinder; Martha Palmer for providing us with the PropBank data; Dan Gildea and Julia Hockenmaier for providing the gold standard CCG parser information, and all the anonymous reviewers for their helpful comments.</S>
  </SECTION>
</PAPER>
