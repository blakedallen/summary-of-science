<PAPER>
  <S sid="0">TextRank: Bringing Order Into Texts</S>
  <ABSTRACT>
    <S sid="1" ssid="1">In this paper, we introduce TextRank &#8211; a graph-based ranking model for text processing, and show how this model can be successfully used in natural language applications.</S>
    <S sid="2" ssid="2">In particular, we propose two innovative unsupervised methods for keyword and sentence extraction, and show that the results obtained compare favorably with previously published results on established benchmarks.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="3" ssid="1">Graph-based ranking algorithms like Kleinberg&#8217;s HITS algorithm (Kleinberg, 1999) or Google&#8217;s PageRank (Brin and Page, 1998) have been successfully used in citation analysis, social networks, and the analysis of the link-structure of the World Wide Web.</S>
    <S sid="4" ssid="2">Arguably, these algorithms can be singled out as key elements of the paradigm-shift triggered in the field of Web search technology, by providing a Web page ranking mechanism that relies on the collective knowledge of Web architects rather than individual content analysis of Web pages.</S>
    <S sid="5" ssid="3">In short, a graph-based ranking algorithm is a way of deciding on the importance of a vertex within a graph, by taking into account global information recursively computed from the entire graph, rather than relying only on local vertex-specific information.</S>
    <S sid="6" ssid="4">Applying a similar line of thinking to lexical or semantic graphs extracted from natural language documents, results in a graph-based ranking model that can be applied to a variety of natural language processing applications, where knowledge drawn from an entire text is used in making local ranking/selection decisions.</S>
    <S sid="7" ssid="5">Such text-oriented ranking methods can be applied to tasks ranging from automated extraction of keyphrases, to extractive summarization and word sense disambiguation (Mihalcea et al., 2004).</S>
    <S sid="8" ssid="6">In this paper, we introduce the TextRank graphbased ranking model for graphs extracted from natural language texts.</S>
    <S sid="9" ssid="7">We investigate and evaluate the application of TextRank to two language processing tasks consisting of unsupervised keyword and sentence extraction, and show that the results obtained with TextRank are competitive with state-of-the-art systems developed in these areas.</S>
  </SECTION>
  <SECTION title="2 The TextRank Model" number="2">
    <S sid="10" ssid="1">Graph-based ranking algorithms are essentially a way of deciding the importance of a vertex within a graph, based on global information recursively drawn from the entire graph.</S>
    <S sid="11" ssid="2">The basic idea implemented by a graph-based ranking model is that of &#8220;voting&#8221; or &#8220;recommendation&#8221;.</S>
    <S sid="12" ssid="3">When one vertex links to another one, it is basically casting a vote for that other vertex.</S>
    <S sid="13" ssid="4">The higher the number of votes that are cast for a vertex, the higher the importance of the vertex.</S>
    <S sid="14" ssid="5">Moreover, the importance of the vertex casting the vote determines how important the vote itself is, and this information is also taken into account by the ranking model.</S>
    <S sid="15" ssid="6">Hence, the score associated with a vertex is determined based on the votes that are cast for it, and the score of the vertices casting these votes.</S>
    <S sid="16" ssid="7">Formally, let be a directed graph with the set of vertices and set of edges , where is a subset of .</S>
    <S sid="17" ssid="8">For a given vertex , let be the set of vertices that point to it (predecessors), and let be the set of vertices that vertex points to (successors).</S>
    <S sid="18" ssid="9">The score of a vertex is defined as follows (Brin and Page, 1998): where is a damping factor that can be set between 0 and 1, which has the role of integrating into the model the probability of jumping from a given vertex to another random vertex in the graph.</S>
    <S sid="19" ssid="10">In the context of Web surfing, this graph-based ranking algorithm implements the &#8220;random surfer model&#8221;, where a user clicks on links at random with a probability , and jumps to a completely new page with probability .</S>
    <S sid="20" ssid="11">The factor is usually set to 0.85 (Brin and Page, 1998), and this is the value we are also using in our implementation.</S>
    <S sid="21" ssid="12">Starting from arbitrary values assigned to each node in the graph, the computation iterates until convergence below a given threshold is achieved 1.</S>
    <S sid="22" ssid="13">After running the algorithm, a score is associated with each vertex, which represents the &#8220;importance&#8221; of the vertex within the graph.</S>
    <S sid="23" ssid="14">Notice that the final values obtained after TextRank runs to completion are not affected by the choice of the initial value, only the number of iterations to convergence may be different.</S>
    <S sid="24" ssid="15">It is important to notice that although the TextRank applications described in this paper rely on an algorithm derived from Google&#8217;s PageRank (Brin and Page, 1998), other graph-based ranking algorithms such as e.g.</S>
    <S sid="25" ssid="16">HITS (Kleinberg, 1999) or Positional Function (Herings et al., 2001) can be easily integrated into the TextRank model (Mihalcea, 2004).</S>
    <S sid="26" ssid="17">Although traditionally applied on directed graphs, a recursive graph-based ranking algorithm can be also applied to undirected graphs, in which case the outdegree of a vertex is equal to the in-degree of the vertex.</S>
    <S sid="27" ssid="18">For loosely connected graphs, with the number of edges proportional with the number of vertices, undirected graphs tend to have more gradual convergence curves.</S>
    <S sid="28" ssid="19">Figure 1 plots the convergence curves for a randomly generated graph with 250 vertices and 250 edges, for a convergence threshold of 0.0001.</S>
    <S sid="29" ssid="20">As the connectivity of the graph increases (i.e. larger number of edges), convergence is usually achieved after fewer iterations, and the convergence curves for directed and undirected graphs practically overlap.</S>
    <S sid="30" ssid="21">In the context of Web surfing, it is unusual for a page to include multiple or partial links to another page, and hence the original PageRank definition for graph-based ranking is assuming unweighted graphs.</S>
    <S sid="31" ssid="22">However, in our model the graphs are build from natural language texts, and may include multiple or partial links between the units (vertices) that are extracted from text.</S>
    <S sid="32" ssid="23">It may be therefore useful to indicate and incorporate into the model the &#8220;strength&#8221; of the connection between two vertices and as a weight added to the corresponding edge that connects the two vertices.</S>
    <S sid="33" ssid="24">Consequently, we introduce a new formula for graph-based ranking that takes into account edge weights when computing the score associated with a vertex in the graph.</S>
    <S sid="34" ssid="25">Notice that a similar formula can be defined to integrate vertex weights.</S>
    <S sid="35" ssid="26">Figure 1 plots the convergence curves for the same sample graph from section 2.1, with random weights in the interval 0&#8211;10 added to the edges.</S>
    <S sid="36" ssid="27">While the final vertex scores (and therefore rankings) differ significantly as compared to their unweighted alternatives, the number of iterations to convergence and the shape of the convergence curves is almost identical for weighted and unweighted graphs.</S>
    <S sid="37" ssid="28">To enable the application of graph-based ranking algorithms to natural language texts, we have to build a graph that represents the text, and interconnects words or other text entities with meaningful relations.</S>
    <S sid="38" ssid="29">Depending on the application at hand, text units of various sizes and characteristics can be added as vertices in the graph, e.g. words, collocations, entire sentences, or others.</S>
    <S sid="39" ssid="30">Similarly, it is the application that dictates the type of relations that are used to draw connections between any two such vertices, e.g. lexical or semantic relations, contextual overlap, etc.</S>
    <S sid="40" ssid="31">Regardless of the type and characteristics of the elements added to the graph, the application of graphbased ranking algorithms to natural language texts consists of the following main steps: In the following, we investigate and evaluate the application of TextRank to two natural language processing tasks involving ranking of text units: (1) A keyword extraction task, consisting of the selection of keyphrases representative for a given text; and (2) A sentence extraction task, consisting of the identification of the most &#8220;important&#8221; sentences in a text, which can be used to build extractive summaries.</S>
  </SECTION>
  <SECTION title="3 Keyword Extraction" number="3">
    <S sid="41" ssid="1">The task of a keyword extraction application is to automatically identify in a text a set of terms that best describe the document.</S>
    <S sid="42" ssid="2">Such keywords may constitute useful entries for building an automatic index for a document collection, can be used to classify a text, or may serve as a concise summary for a given document.</S>
    <S sid="43" ssid="3">Moreover, a system for automatic identification of important terms in a text can be used for the problem of terminology extraction, and construction of domain-specific dictionaries.</S>
    <S sid="44" ssid="4">The simplest possible approach is perhaps to use a frequency criterion to select the &#8220;important&#8221; keywords in a document.</S>
    <S sid="45" ssid="5">However, this method was generally found to lead to poor results, and consequently other methods were explored.</S>
    <S sid="46" ssid="6">The state-ofthe-art in this area is currently represented by supervised learning methods, where a system is trained to recognize keywords in a text, based on lexical and syntactic features.</S>
    <S sid="47" ssid="7">This approach was first suggested in (Turney, 1999), where parametrized heuristic rules are combined with a genetic algorithm into a system for keyphrase extraction - GenEx - that automatically identifies keywords in a document.</S>
    <S sid="48" ssid="8">A different learning algorithm was used in (Frank et al., 1999), where a Naive Bayes learning scheme is applied on the document collection, with improved results observed on the same data set as used in (Turney, 1999).</S>
    <S sid="49" ssid="9">Neither Turney nor Frank report on the recall of their systems, but only on precision: a 29.0% precision is achieved with GenEx (Turney, 1999) for five keyphrases extracted per document, and 18.3% precision achieved with Kea (Frank et al., 1999) for fifteen keyphrases per document.</S>
    <S sid="50" ssid="10">More recently, (Hulth, 2003) applies a supervised learning system to keyword extraction from abstracts, using a combination of lexical and syntactic features, proved to improve significantly over previously published results.</S>
    <S sid="51" ssid="11">As Hulth suggests, keyword extraction from abstracts is more widely applicable than from full texts, since many documents on the Internet are not available as full-texts, but only as abstracts.</S>
    <S sid="52" ssid="12">In her work, Hulth experiments with the approach proposed in (Turney, 1999), and a new approach that integrates part of speech information into the learning process, and shows that the accuracy of the system is almost doubled by adding linguistic knowledge to the term representation.</S>
    <S sid="53" ssid="13">In this section, we report on our experiments in keyword extraction using TextRank, and show that the graph-based ranking model outperforms the best published results in this problem.</S>
    <S sid="54" ssid="14">Similar to (Hulth, 2003), we are evaluating our algorithm on keyword extraction from abstracts, mainly for the purpose of allowing for a direct comparison with the results she reports with her keyphrase extraction system.</S>
    <S sid="55" ssid="15">Notice that the size of the text is not a limitation imposed by our system, and similar results are expected with TextRank applied on full-texts.</S>
    <S sid="56" ssid="16">The expected end result for this application is a set of words or phrases that are representative for a given natural language text.</S>
    <S sid="57" ssid="17">The units to be ranked are therefore sequences of one or more lexical units extracted from text, and these represent the vertices that are added to the text graph.</S>
    <S sid="58" ssid="18">Any relation that can be defined between two lexical units is a potentially useful connection (edge) that can be added between two such vertices.</S>
    <S sid="59" ssid="19">We are using a co-occurrence relation, controlled by the distance between word occurrences: two vertices are connected if their corresponding lexical units co-occur within a window of maximum words, where can be set anywhere from 2 to 10 words.</S>
    <S sid="60" ssid="20">Co-occurrence links express relations between syntactic elements, and similar to the semantic links found useful for the task of word sense disambiguation (Mihalcea et al., 2004), they represent cohesion indicators for a given text.</S>
    <S sid="61" ssid="21">The vertices added to the graph can be restricted with syntactic filters, which select only lexical units of a certain part of speech.</S>
    <S sid="62" ssid="22">One can for instance consider only nouns and verbs for addition to the graph, and consequently draw potential edges based only on relations that can be established between nouns and verbs.</S>
    <S sid="63" ssid="23">We experimented with various syntactic filters, including: all open class words, nouns and verbs only, etc., with best results observed for nouns and adjectives only, as detailed in section 3.2.</S>
    <S sid="64" ssid="24">The TextRank keyword extraction algorithm is fully unsupervised, and proceeds as follows.</S>
    <S sid="65" ssid="25">First, Compatibility of systems of linear constraints over the set of natural numbers.</S>
    <S sid="66" ssid="26">Criteria of compatibility of a system of linear Diophantine equations, strict inequations, and nonstrict inequations are considered.</S>
    <S sid="67" ssid="27">Upper bounds for components of a minimal set of solutions and algorithms of construction of minimal generating sets of solutions for all types of systems are given.</S>
    <S sid="68" ssid="28">These criteria and the corresponding algorithms for constructing a minimal supporting set of solutions can be used in solving all the considered types systems and systems of mixed types. the text is tokenized, and annotated with part of speech tags &#8211; a preprocessing step required to enable the application of syntactic filters.</S>
    <S sid="69" ssid="29">To avoid excessive growth of the graph size by adding all possible combinations of sequences consisting of more than one lexical unit (ngrams), we consider only single words as candidates for addition to the graph, with multi-word keywords being eventually reconstructed in the post-processing phase.</S>
    <S sid="70" ssid="30">Next, all lexical units that pass the syntactic filter are added to the graph, and an edge is added between those lexical units that co-occur within a window of words.</S>
    <S sid="71" ssid="31">After the graph is constructed (undirected unweighted graph), the score associated with each vertex is set to an initial value of 1, and the ranking algorithm described in section 2 is run on the graph for several iterations until it converges &#8211; usually for 20-30 iterations, at a threshold of 0.0001.</S>
    <S sid="72" ssid="32">Once a final score is obtained for each vertex in the graph, vertices are sorted in reversed order of their score, and the top vertices in the ranking are retained for post-processing.</S>
    <S sid="73" ssid="33">While may be set to any fixed value, usually ranging from 5 to 20 keywords (e.g.</S>
    <S sid="74" ssid="34">(Turney, 1999) limits the number of keywords extracted with his GenEx system to five), we are using a more flexible approach, which decides the number of keywords based on the size of the text.</S>
    <S sid="75" ssid="35">For the data used in our experiments, which consists of relatively short abstracts, is set to a third of the number of vertices in the graph.</S>
    <S sid="76" ssid="36">During post-processing, all lexical units selected as potential keywords by the TextRank algorithm are marked in the text, and sequences of adjacent keywords are collapsed into a multi-word keyword.</S>
    <S sid="77" ssid="37">For instance, in the text Matlab code for plotting ambiguity functions, if both Matlab and code are selected as potential keywords by TextRank, since they are adjacent, they are collapsed into one single keyword Matlab code.</S>
    <S sid="78" ssid="38">Figure 2 shows a sample graph built for an abstract from our test collection.</S>
    <S sid="79" ssid="39">While the size of the abstracts ranges from 50 to 350 words, with an average size of 120 words, we have deliberately selected a very small abstract for the purpose of illustration.</S>
    <S sid="80" ssid="40">For this example, the lexical units found to have higher &#8220;importance&#8221; by the TextRank algorithm are (with the TextRank score indicated in parenthesis): numbers (1.46), inequations (1.45), linear (1.29), diophantine (1.28), upper (0.99), bounds (0.99), strict (0.77).</S>
    <S sid="81" ssid="41">Notice that this ranking is different than the one rendered by simple word frequencies.</S>
    <S sid="82" ssid="42">For the same text, a frequency approach provides the following top-ranked lexical units: systems (4), types (3), solutions (3), minimal (3), linear (2), inequations (2), algorithms (2).</S>
    <S sid="83" ssid="43">All other lexical units have a frequency of 1, and therefore cannot be ranked, but only listed.</S>
    <S sid="84" ssid="44">The data set used in the experiments is a collection of 500 abstracts from the Inspec database, and the corresponding manually assigned keywords.</S>
    <S sid="85" ssid="45">This is the same test data set as used in the keyword extraction experiments reported in (Hulth, 2003).</S>
    <S sid="86" ssid="46">The Inspec abstracts are from journal papers from Computer Science and Information Technology.</S>
    <S sid="87" ssid="47">Each abstract comes with two sets of keywords assigned by professional indexers: controlled keywords, restricted to a given thesaurus, and uncontrolled keywords, freely assigned by the indexers.</S>
    <S sid="88" ssid="48">We follow the evaluation approach from (Hulth, 2003), and use the uncontrolled set of keywords.</S>
    <S sid="89" ssid="49">In her experiments, Hulth is using a total of 2000 abstracts, divided into 1000 for training, 500 for development, and 500 for test2.</S>
    <S sid="90" ssid="50">Since our approach is completely unsupervised, no training/development data is required, and we are only using the test docu2Many thanks to Anette Hulth for allowing us to run our algorithm on the data set used in her keyword extraction experiments, and for making available the training/test/development data split. ments for evaluation purposes.</S>
    <S sid="91" ssid="51">The results are evaluated using precision, recall, and F-measure.</S>
    <S sid="92" ssid="52">Notice that the maximum recall that can be achieved on this collection is less than 100%, since indexers were not limited to keyword extraction &#8211; as our system is &#8211; but they were also allowed to perform keyword generation, which eventually results in keywords that do not explicitly appear in the text.</S>
    <S sid="93" ssid="53">For comparison purposes, we are using the results of the state-of-the-art keyword extraction system reported in (Hulth, 2003).</S>
    <S sid="94" ssid="54">Shortly, her system consists of a supervised learning scheme that attempts to learn how to best extract keywords from a document, by looking at a set of four features that are determined for each &#8220;candidate&#8221; keyword: (1) within-document frequency, (2) collection frequency, (3) relative position of the first occurrence, (4) sequence of part of speech tags.</S>
    <S sid="95" ssid="55">These features are extracted from both training and test data for all &#8220;candidate&#8221; keywords, where a candidate keyword can be: Ngrams (unigrams, bigrams, or trigrams extracted from the abstracts), NP-chunks (noun phrases), patterns (a set of part of speech patterns detected from the keywords attached to the training abstracts).</S>
    <S sid="96" ssid="56">The learning system is a rule induction system with bagging.</S>
    <S sid="97" ssid="57">Our system consists of the TextRank approach described in Section 3.1, with a co-occurrence windowsize set to two, three, five, or ten words.</S>
    <S sid="98" ssid="58">Table 1 lists the results obtained with TextRank, and the best results reported in (Hulth, 2003).</S>
    <S sid="99" ssid="59">For each method, the table lists the total number of keywords assigned, the mean number of keywords per abstract, the total number of correct keywords, as evaluated against the set of keywords assigned by professional indexers, and the mean number of correct keywords.</S>
    <S sid="100" ssid="60">The table also lists precision, recall, and F-measure.</S>
    <S sid="101" ssid="61">Discussion.</S>
    <S sid="102" ssid="62">TextRank achieves the highest precision and F-measure across all systems, although the recall is not as high as in supervised methods &#8211; possibly due the limitation imposed by our approach on the number of keywords selected, which is not made in the supervised systema.</S>
    <S sid="103" ssid="63">A larger window does not seem to help &#8211; on the contrary, the larger the window, the lower the precision, probably explained by the fact that a relation between words that are further apart is not strong enough to define a connection in the text graph.</S>
    <S sid="104" ssid="64">Experiments were performed with various syntactic filters, including: all open class words, nouns and adjectives, and nouns only, and the best performance was achieved with the filter that selects nouns and adjectives only.</S>
    <S sid="105" ssid="65">We have also experimented with a setting where no part of speech information was added to the text, and all words - except a predefined list of stopwords - were added to the graph.</S>
    <S sid="106" ssid="66">The results with this setting were significantly lower than the systems that consider part of speech information, which corroborates with previous observations that linguistic information helps the process of keyword extraction (Hulth, 2003).</S>
    <S sid="107" ssid="67">Experiments were also performed with directed graphs, where a direction was set following the natural flow of the text, e.g. one candidate keyword &#8220;recommends&#8221; (and therefore has a directed arc to) the candidate keyword that follows in the text, keeping the restraint imposed by the co-occurrence relation.</S>
    <S sid="108" ssid="68">We have also tried the reversed direction, where a lexical unit points to a previous token in the text.</S>
    <S sid="109" ssid="69">Table 1 includes the results obtained with directed graphs for a co-occurrence window of 2.</S>
    <S sid="110" ssid="70">Regardless of the direction chosen for the arcs, results obtained with directed graphs are worse than results obtained with undirected graphs, which suggests that despite a natural flow in running text, there is no natural &#8220;direction&#8221; that can be established between cooccurring words.</S>
    <S sid="111" ssid="71">Overall, our TextRank system leads to an Fmeasure higher than any of the previously proposed systems.</S>
    <S sid="112" ssid="72">Notice that TextRank is completely unsupervised, and unlike other supervised systems, it relies exclusively on information drawn from the text itself, which makes it easily portable to other text collections, domains, and languages.</S>
  </SECTION>
  <SECTION title="4 Sentence Extraction" number="4">
    <S sid="113" ssid="1">The other TextRank application that we investigate consists of sentence extraction for automatic summarization.</S>
    <S sid="114" ssid="2">In a way, the problem of sentence extraction can be regarded as similar to keyword extraction, since both applications aim at identifying sequences that are more &#8220;representative&#8221; for the given text.</S>
    <S sid="115" ssid="3">In keyword extraction, the candidate text units consist of words or phrases, whereas in sentence extraction, we deal with entire sentences.</S>
    <S sid="116" ssid="4">TextRank turns out to be well suited for this type of applications, since it allows for a ranking over text units that is recursively computed based on information drawn from the entire text.</S>
    <S sid="117" ssid="5">To apply TextRank, we first need to build a graph associated with the text, where the graph vertices are representative for the units to be ranked.</S>
    <S sid="118" ssid="6">For the task of sentence extraction, the goal is to rank entire sentences, and therefore a vertex is added to the graph for each sentence in the text.</S>
    <S sid="119" ssid="7">The co-occurrence relation used for keyword extraction cannot be applied here, since the text units in consideration are significantly larger than one or few words, and &#8220;co-occurrence&#8221; is not a meaningful relation for such large contexts.</S>
    <S sid="120" ssid="8">Instead, we are defining a different relation, which determines a connection between two sentences if there is a &#8220;similarity&#8221; relation between them, where &#8220;similarity&#8221; is measured as a function of their content overlap.</S>
    <S sid="121" ssid="9">Such a relation between two sentences can be seen as a process of &#8220;recommendation&#8221;: a sentence that addresses certain concepts in a text, gives the reader a &#8220;recommendation&#8221; to refer to other sentences in the text that address the same concepts, and therefore a link can be drawn between any two such sentences that share common content.</S>
    <S sid="122" ssid="10">The overlap of two sentences can be determined simply as the number of common tokens between the lexical representations of the two sentences, or it can be run through syntactic filters, which only count words of a certain syntactic category, e.g. all open class words, nouns and verbs, etc.</S>
    <S sid="123" ssid="11">Moreover, to avoid promoting long sentences, we are using a normalization factor, and divide the content overlap TextRank extractive summary Hurricane Gilbert swept toward the Dominican Republic Sunday, and the Civil De&#8722; fense alerted its heavily populated south coast to prepare for high winds, heavy rains and high seas.</S>
    <S sid="124" ssid="12">The National Hurricane Center in Miami reported its position at 2 a.m. Sunday at latitude 16.1 north, longitude 67.5 west, about 140 miles south of Ponce, Puerto Rico, and 200 miles southeast of Santo Domingo.</S>
    <S sid="125" ssid="13">The National Weather Service in San Juan, Puerto Rico, said Gilbert was moving westward at 15 mph with a &amp;quot;broad area of cloudiness and heavy weather&amp;quot; rotating around the center of the storm.</S>
    <S sid="126" ssid="14">Strong winds associated with Gilbert brought coastal flooding, strong southeast winds and up to 12 feet to Puerto Rico&#8217;s south coast.</S>
    <S sid="127" ssid="15">Manual abstract I Hurricane Gilbert is moving toward the Dominican Republic, where the residents of the south coast, especially the Barahona Province, have been alerted to prepare for heavy rains, and high wind and seas.</S>
    <S sid="128" ssid="16">Tropical storm Gilbert formed in the eastern Carribean and became a hurricane on Saturday night.</S>
    <S sid="129" ssid="17">By 2 a.m. Sunday it was about 200 miles southeast of Santo Domingo and moving westward at 15 mph with winds of 75 mph.</S>
    <S sid="130" ssid="18">Flooding is expected in Puerto Rico and in the Virgin Islands.</S>
    <S sid="131" ssid="19">The second hurricane of the season, Florence, is now over the southern United States and down&#8722; graded to a tropical storm.</S>
    <S sid="132" ssid="20">Manual abstract II Tropical storm Gilbert in the eastern Carribean strenghtened into a hurricane Saturday night.</S>
    <S sid="133" ssid="21">The National Hurricane Center in Miami reported its position at 2 a.m. Sunday to be about 140 miles south of Puerto Rico and 200 miles southeast of Santo Domingo.</S>
    <S sid="134" ssid="22">It is moving westward at 15 mph with a broad area of cloudiness and heavy weather with sustained winds of 75 mph gusting to 92 mph.</S>
    <S sid="135" ssid="23">The Dominican Republic&#8217;s Civil Defense alerted that country&#8217;s heavily populated south coast and the National Weather Service in San Juan, Puerto Rico issued a flood watch for Puerto Rico and the Virgin Islands until at least 6 p.m. Sunday. of two sentences with the length of each sentence.</S>
    <S sid="136" ssid="24">Formally, given two sentences and ,with a sentence being represented by the set of words that appear in the sentence: , the similarity of and is defined as: Other sentence similarity measures, such as string kernels, cosine similarity, longest common subsequence, etc. are also possible, and we are currently evaluating their impact on the summarization performance.</S>
    <S sid="137" ssid="25">The resulting graph is highly connected, with a weight associated with each edge, indicating the strength of the connections established between various sentence pairs in the text.</S>
    <S sid="138" ssid="26">The text is therefore represented as a weighted graph, and consequently we are using the weighted graph-based ranking formula introduced in Section 2.2.</S>
    <S sid="139" ssid="27">After the ranking algorithm is run on the graph, sentences are sorted in reversed order of their score, and the top ranked sentences are selected for inclusion in the summary.</S>
    <S sid="140" ssid="28">Figure 3 shows a text sample, and the associated weighted graph constructed for this text.</S>
    <S sid="141" ssid="29">The figure also shows sample weights attached to the edges connected to vertex 94, and the final TextRank score computed for each sentence.</S>
    <S sid="142" ssid="30">The sentences with the highest rank are selected for inclusion in the abstract.</S>
    <S sid="143" ssid="31">For this sample article, the sentences with id-s 9, 15, 16, 18 are extracted, resulting in a summary of about 100 words, which according to automatic evaluation measures, is ranked the second among summaries produced by 15 other systems (see Section 4.2 for evaluation methodology).</S>
    <S sid="144" ssid="32">We evaluate the TextRank sentence extraction algorithm on a single-document summarization task, using 567 news articles provided during the Document Understanding Evaluations 2002 (DUC, 2002).</S>
    <S sid="145" ssid="33">For each article, TextRank generates an 100-words summary &#8212; the task undertaken by other systems participating in this single document summarization task.</S>
    <S sid="146" ssid="34">For evaluation, we are using the ROUGE evaluation toolkit, which is a method based on Ngram statistics, found to be highly correlated with human evaluations (Lin and Hovy, 2003).</S>
    <S sid="147" ssid="35">Two manually produced reference summaries are provided, and used in the evaluation process5.</S>
    <S sid="148" ssid="36">Fifteen different systems participated in this task, and we compare the performance of TextRank with the top five performing systems, as well as with the baseline proposed by the DUC evaluators &#8211; consisting of a 100-word summary constructed by taking the first sentences in each article.</S>
    <S sid="149" ssid="37">Table 2 shows the results obtained on this data set of 567 news articles, including the results for TextRank (shown in bold), the baseline, and the results of the top five performing systems in the DUC 2002 single document summarization task (DUC, 2002).</S>
    <S sid="150" ssid="38">TextRank, top 5 (out of 15) DUC 2002 systems, and baseline.</S>
    <S sid="151" ssid="39">Evaluation takes into account (a) all words; (b) stemmed words; (c) stemmed words, and no stopwords.</S>
    <S sid="152" ssid="40">Discussion.</S>
    <S sid="153" ssid="41">TextRank succeeds in identifying the most important sentences in a text based on information exclusively drawn from the text itself.</S>
    <S sid="154" ssid="42">Unlike other supervised systems, which attempt to learn what makes a good summary by training on collections of summaries built for other articles, TextRank is fully unsupervised, and relies only on the given text to derive an extractive summary, which represents a summarization model closer to what humans are doing when producing an abstract for a given document.</S>
    <S sid="155" ssid="43">Notice that TextRank goes beyond the sentence &#8220;connectivity&#8221; in a text.</S>
    <S sid="156" ssid="44">For instance, sentence 15 in the example provided in Figure 3 would not be identified as &#8220;important&#8221; based on the number of connections it has with other vertices in the graph, but it is identified as &#8220;important&#8221; by TextRank (and by humans &#8211; see the reference summaries displayed in the same figure).</S>
    <S sid="157" ssid="45">Another important aspect of TextRank is that it gives a ranking over all sentences in a text &#8211; which means that it can be easily adapted to extracting very short summaries (headlines consisting of one The evaluation is done using the Ngram(1,1) setting of ROUGE, which was found to have the highest correlation with human judgments, at a confidence level of 95%.</S>
    <S sid="158" ssid="46">Only the first 100 words in each summary are considered. sentence), or longer more explicative summaries, consisting of more than 100 words.</S>
    <S sid="159" ssid="47">We are also investigating combinations of keyphrase and sentence extraction techniques as a method for building short/long summaries.</S>
    <S sid="160" ssid="48">Finally, another advantage of TextRank over previously proposed methods for building extractive summaries is the fact that it does not require training corpora, which makes it easily adaptable to other languages or domains.</S>
  </SECTION>
  <SECTION title="5 Why TextRank Works" number="5">
    <S sid="161" ssid="1">Intuitively, TextRank works well because it does not only rely on the local context of a text unit (vertex), but rather it takes into account information recursively drawn from the entire text (graph).</S>
    <S sid="162" ssid="2">Through the graphs it builds on texts, TextRank identifies connections between various entities in a text, and implements the concept of recommendation.</S>
    <S sid="163" ssid="3">A text unit recommends other related text units, and the strength of the recommendation is recursively computed based on the importance of the units making the recommendation.</S>
    <S sid="164" ssid="4">For instance, in the keyphrase extraction application, co-occurring words recommend each other as important, and it is the common context that enables the identification of connections between words in text.</S>
    <S sid="165" ssid="5">In the process of identifying important sentences in a text, a sentence recommends another sentence that addresses similar concepts as being useful for the overall understanding of the text.</S>
    <S sid="166" ssid="6">The sentences that are highly recommended by other sentences in the text are likely to be more informative for the given text, and will be therefore given a higher score.</S>
    <S sid="167" ssid="7">An analogy can be also drawn with PageRank&#8217;s &#8220;random surfer model&#8221;, where a user surfs the Web by following links from any given Web page.</S>
    <S sid="168" ssid="8">In the context of text modeling, TextRank implements what we refer to as &#8220;text surfing&#8221;, which relates to the concept of text cohesion (Halliday and Hasan, 1976): from a certain concept in a text, we are likely to &#8220;follow&#8221; links to connected concepts &#8211; that is, concepts that have a relation with the current concept (be that a lexical or semantic relation).</S>
    <S sid="169" ssid="9">This also relates to the &#8220;knitting&#8221; phenomenon (Hobbs, 1974): facts associated with words are shared in different parts of the discourse, and such relationships serve to &#8220;knit the discourse together&#8221;.</S>
    <S sid="170" ssid="10">Through its iterative mechanism, TextRank goes beyond simple graph connectivity, and it is able to score text units based also on the &#8220;importance&#8221; of other text units they link to.</S>
    <S sid="171" ssid="11">The text units selected by TextRank for a given application are the ones most recommended by related text units in the text, with preference given to the recommendations made by most influential ones, i.e. the ones that are in turn highly recommended by other related units.</S>
    <S sid="172" ssid="12">The underlying hypothesis is that in a cohesive text fragment, related text units tend to form a &#8220;Web&#8221; of connections that approximates the model humans build about a given context in the process of discourse understanding.</S>
  </SECTION>
  <SECTION title="6 Conclusions" number="6">
    <S sid="173" ssid="1">In this paper, we introduced TextRank &#8211; a graphbased ranking model for text processing, and show how it can be successfully used for natural language applications.</S>
    <S sid="174" ssid="2">In particular, we proposed and evaluated two innovative unsupervised approaches for keyword and sentence extraction, and showed that the accuracy achieved by TextRank in these applications is competitive with that of previously proposed state-of-the-art algorithms.</S>
    <S sid="175" ssid="3">An important aspect of TextRank is that it does not require deep linguistic knowledge, nor domain or language specific annotated corpora, which makes it highly portable to other domains, genres, or languages.</S>
  </SECTION>
</PAPER>
