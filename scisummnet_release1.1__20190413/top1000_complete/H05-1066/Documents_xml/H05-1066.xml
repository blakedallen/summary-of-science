<PAPER>
	<S sid="0">Non-Projective Dependency Parsing Using Spanning Tree Algorithms</S><ABSTRACT>
		<S sid="1" ssid="1">We formalize weighted dependency pars ing as searching for maximum spanning trees (MSTs) in directed graphs.</S>
		<S sid="2" ssid="2">Using this representation, the parsing algorithmof Eisner (1996) is sufficient for search ing over all projective trees in O(n3) time.</S>
		<S sid="3" ssid="3">More surprisingly, the representation isextended naturally to non-projective pars ing using Chu-Liu-Edmonds (Chu andLiu, 1965; Edmonds, 1967) MST algorithm, yielding an O(n2) parsing al gorithm.</S>
		<S sid="4" ssid="4">We evaluate these methodson the Prague Dependency Treebank using online large-margin learning tech niques (Crammer et al, 2003; McDonald et al, 2005) and show that MST parsingincreases efficiency and accuracy for lan guages with non-projective dependencies.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number="1">
			<S sid="5" ssid="5">Dependency parsing has seen a surge of interest lately for applications such as relation extraction (Culotta and Sorensen, 2004), machine translation (Ding and Palmer, 2005), synonym genera tion (Shinyama et al, 2002), and lexical resource augmentation (Snow et al, 2004).</S>
			<S sid="6" ssid="6">The primary reasons for using dependency structures instead of more informative lexicalized phrase structures is that they are more efficient to learn and parse whilestill encoding much of the predicate-argument infor mation needed in applications.</S>
			<S sid="7" ssid="7">root John hit the ball with the bat Figure 1: An example dependency tree.</S>
			<S sid="8" ssid="8">Dependency representations, which link words to their arguments, have a long history (Hudson, 1984).</S>
			<S sid="9" ssid="9">Figure 1 shows a dependency tree for the sentence John hit the ball with the bat.</S>
			<S sid="10" ssid="10">We restrict ourselvesto dependency tree analyses, in which each word de pends on exactly one parent, either another word or a dummy root symbol as shown in the figure.</S>
			<S sid="11" ssid="11">The tree in Figure 1 is projective, meaning that if we put the words in their linear order, preceded by the root, theedges can be drawn above the words without cross ings, or, equivalently, a word and its descendants form a contiguous substring of the sentence.In English, projective trees are sufficient to ana lyze most sentence types.</S>
			<S sid="12" ssid="12">In fact, the largest sourceof English dependency trees is automatically gener ated from the Penn Treebank (Marcus et al, 1993)and is by convention exclusively projective.</S>
			<S sid="13" ssid="13">However, there are certain examples in which a non projective tree is preferable.</S>
			<S sid="14" ssid="14">Consider the sentenceJohn saw a dog yesterday which was a Yorkshire Ter rier.</S>
			<S sid="15" ssid="15">Here the relative clause which was a YorkshireTerrier and the object it modifies (the dog) are sep arated by an adverb.</S>
			<S sid="16" ssid="16">There is no way to draw the dependency tree for this sentence in the plane withno crossing edges, as illustrated in Figure 2.</S>
			<S sid="17" ssid="17">In lan guages with more flexible word order than English, such as German, Dutch and Czech, non-projective dependencies are more frequent.</S>
			<S sid="18" ssid="18">Rich inflection systems reduce reliance on word order to express 523 root John saw a dog yesterday which was a Yorkshire Terrier root O to nove?</S>
			<S sid="19" ssid="19">ve?ts?inou nema?</S>
			<S sid="20" ssid="20">ani za?jem a taky na to ve?ts?inou nema?</S>
			<S sid="21" ssid="21">pen??ze He is mostly not even interested in the new things and in most cases, he has no money for it either.</S>
			<S sid="22" ssid="22">Figure 2: Non-projective dependency trees in English and Czech.grammatical relations, allowing non-projective dependencies that we need to represent and parse ef ficiently.</S>
			<S sid="23" ssid="23">A non-projective example from the Czech Prague Dependency Treebank (Hajic?</S>
			<S sid="24" ssid="24">et al, 2001) is also shown in Figure 2.</S>
			<S sid="25" ssid="25">Most previous dependency parsing models have focused on projective trees, including the work of Eisner (1996), Collins et al (1999), Yamada and Matsumoto (2003), Nivre and Scholz (2004), and McDonald et al (2005).</S>
			<S sid="26" ssid="26">These systems have shown that accurate projective dependency parsers can be automatically learned from parsed data.</S>
			<S sid="27" ssid="27">However, non-projective analyses have recently attracted some interest, not only for languages with freer word order but also for English.</S>
			<S sid="28" ssid="28">In particular, Wang and Harper (2004) describe a broad coverage non-projectiveparser for English based on a hand-constructed constraint dependency grammar rich in lexical and syntactic information.</S>
			<S sid="29" ssid="29">Nivre and Nilsson (2005) presented a parsing model that allows for the introduc tion of non-projective edges into dependency trees through learned edge transformations within their memory-based parser.</S>
			<S sid="30" ssid="30">They test this system onCzech and show improved accuracy relative to a projective parser.</S>
			<S sid="31" ssid="31">Our approach differs from those ear lier efforts in searching optimally and efficiently the full space of non-projective trees.</S>
			<S sid="32" ssid="32">The main idea of our method is that dependencyparsing can be formalized as the search for a maximum spanning tree in a directed graph.</S>
			<S sid="33" ssid="33">This formalization generalizes standard projective parsing mod els based on the Eisner algorithm (Eisner, 1996) toyield efficient O(n2) exact parsing methods for nonprojective languages like Czech.</S>
			<S sid="34" ssid="34">Using this spanning tree representation, we extend the work of McDonald et al (2005) on online large-margin discriminative training methods to non-projective depen dencies.</S>
			<S sid="35" ssid="35">The present work is related to that of Hirakawa(2001) who, like us, reduces the problem of depen dency parsing to spanning tree search.</S>
			<S sid="36" ssid="36">However, his parsing method uses a branch and bound algorithm that is exponential in the worst case, even thoughit appears to perform reasonably in limited experi ments.</S>
			<S sid="37" ssid="37">Furthermore, his work does not adequately address learning or measure parsing accuracy on held-out data.</S>
			<S sid="38" ssid="38">Section 2 describes an edge-based factorizationof dependency trees and uses it to equate depen dency parsing to the problem of finding maximumspanning trees in directed graphs.</S>
			<S sid="39" ssid="39">Section 3 out lines the online large-margin learning framework used to train our dependency parsers.</S>
			<S sid="40" ssid="40">Finally, in Section 4 we present parsing results for Czech.</S>
			<S sid="41" ssid="41">The trees in Figure 1 and Figure 2 are untyped, that is, edges are not partitioned into types representingadditional syntactic information such as grammati cal function.</S>
			<S sid="42" ssid="42">We study untyped dependency treesmainly, but edge types can be added with simple ex tensions to the methods discussed here.</S>
	</SECTION>
	<SECTION title="Dependency Parsing and Spanning Trees. " number="2">
			<S sid="43" ssid="1">2.1 Edge Based Factorization.</S>
			<S sid="44" ssid="2">In what follows, x = x1 ? ?</S>
			<S sid="45" ssid="3">xn represents a genericinput sentence, and y represents a generic depen dency tree for sentence x. Seeing y as the set of tree edges, we write (i, j) ? y if there is a dependency in y from word xi to word xj .In this paper we follow a common method of fac toring the score of a dependency tree as the sum of the scores of all edges in the tree.</S>
			<S sid="46" ssid="4">In particular, wedefine the score of an edge to be the dot product be 524 tween a high dimensional feature representation of the edge and a weight vector, s(i, j) = w ? f(i, j) Thus the score of a dependency tree y for sentence x is, s(x,y) = ?</S>
			<S sid="47" ssid="5">(i,j)?y s(i, j) = ?</S>
			<S sid="48" ssid="6">(i,j)?y w ? f(i, j) Assuming an appropriate feature representation as well as a weight vector w, dependency parsing is the task of finding the dependency tree y with highest score for a given sentence x. For the rest of this section we assume that the weight vector w is known and thus we know the score s(i, j) of each possible edge.</S>
			<S sid="49" ssid="7">In Section 3 we present a method for learning the weight vector.</S>
			<S sid="50" ssid="8">2.2 Maximum Spanning Trees.</S>
			<S sid="51" ssid="9">We represent the generic directed graph G = (V,E) by its vertex set V = {v1, . . .</S>
			<S sid="52" ssid="10">, vn} and set E ? [1 : n]?</S>
			<S sid="53" ssid="11">[1 : n] of pairs (i, j) of directed edges vi ? vj .Each such edge has a score s(i, j).</S>
			<S sid="54" ssid="12">Since G is di rected, s(i, j) does not necessarily equal s(j, i).</S>
			<S sid="55" ssid="13">A maximum spanning tree (MST) of G is a tree y ? E that maximizes the value ?</S>
			<S sid="56" ssid="14">(i,j)?y s(i, j) such thatevery vertex in V appears in y. The maximum pro jective spanning tree of G is constructed similarlyexcept that it can only contain projective edges rel ative to some total order on the vertices of G. The MST problem for directed graphs is also known as the maximum arborescence problem.</S>
			<S sid="57" ssid="15">For each sentence x we define the directed graph Gx = (Vx, Ex) given by Vx = {x0 = root, x1, . . .</S>
			<S sid="58" ssid="16">, xn} Ex = {(i, j) : i 6= j, (i, j) ? [0 : n] ? [1 : n]} That is, Gx is a graph with the sentence words and the dummy root symbol as vertices and a directed edge between every pair of distinct words and fromthe root symbol to every word.</S>
			<S sid="59" ssid="17">It is clear that dependency trees for x and spanning trees for Gx co incide, since both kinds of trees are required to be rooted at the dummy root and reach all the wordsin the sentence.</S>
			<S sid="60" ssid="18">Hence, finding a (projective) depen dency tree with highest score is equivalent to finding a maximum (projective) spanning tree in Gx.</S>
			<S sid="61" ssid="19">Chu-Liu-Edmonds(G, s) Graph G = (V, E) Edge weight function s : E ? R 1.</S>
			<S sid="62" ssid="20">Let M = {(x?, x) : x ? V, x?</S>
			<S sid="63" ssid="21">= arg maxx?</S>
			<S sid="64" ssid="22">s(x?, x)}.</S>
			<S sid="65" ssid="23">2.</S>
			<S sid="66" ssid="24">Let GM = (V, M).</S>
			<S sid="67" ssid="25">4.</S>
			<S sid="68" ssid="26">Otherwise, find a cycle C in GM.</S>
			<S sid="69" ssid="27">5.</S>
			<S sid="70" ssid="28">Let GC = contract(G, C, s).</S>
			<S sid="71" ssid="29">6.</S>
			<S sid="72" ssid="30">Let y = Chu-Liu-Edmonds(GC , s).</S>
			<S sid="73" ssid="31">7.</S>
			<S sid="74" ssid="32">Find a vertex x ? C s. t.</S>
			<S sid="75" ssid="33">(x?, x) ? y, (x??, x) ? C. 8.</S>
			<S sid="76" ssid="34">return y ? C ? {(x??, x)} contract(G = (V, E), C, s) 1.</S>
			<S sid="77" ssid="35">Let GC be the subgraph of G excluding nodes in C. 2.</S>
			<S sid="78" ssid="36">Add a node c to GC representing cycle C. Add edge (c, x) to GC with s(c, x) = maxx??C s(x?, x) 4.</S>
			<S sid="79" ssid="37">For x ? V ? C : ?x??C(x, x?)</S>
			<S sid="80" ssid="38">E. Add edge (x, c) to GC with s(x, c) = maxx??C [s(x, x?)</S>
			<S sid="81" ssid="39">s(a(x?), x?)</S>
			<S sid="82" ssid="40">+ s(C)] where a(v) is the predecessor of v in C and s(C) = Pv?C s(a(v), v) 5.</S>
			<S sid="83" ssid="41">return GC Figure 3: Chu-Liu-Edmonds algorithm for finding maximum spanning trees in directed graphs.</S>
			<S sid="84" ssid="42">2.2.1 Non-projective Trees To find the highest scoring non-projective tree we simply search the entire space of spanning trees with no restrictions.</S>
			<S sid="85" ssid="43">Well-known algorithms exist for theless general case of finding spanning trees in undi rected graphs (Cormen et al, 1990).</S>
			<S sid="86" ssid="44">Efficient algorithms for the directed case are less well known, but they exist.</S>
			<S sid="87" ssid="45">We will use here the Chu-Liu-Edmonds algorithm (Chu and Liu, 1965;Edmonds, 1967), sketched in Figure 3 follow ing Leonidas (2003).</S>
			<S sid="88" ssid="46">Informally, the algorithm has each vertex in the graph greedily select the incoming edge with highest weight.</S>
			<S sid="89" ssid="47">If a tree results, it must be the maximum spanning tree.</S>
			<S sid="90" ssid="48">If not, there must be a cycle.</S>
			<S sid="91" ssid="49">The procedure identifies a cycle and contracts it into a single vertex and recalculates edge weights going into and out of the cycle.</S>
			<S sid="92" ssid="50">It can be shown that a maximum spanning tree on the contracted graph isequivalent to a maximum spanning tree in the orig inal graph (Leonidas, 2003).</S>
			<S sid="93" ssid="51">Hence the algorithm can recursively call itself on the new graph.</S>
			<S sid="94" ssid="52">Naively,this algorithm runs in O(n3) time since each recur sive call takes O(n2) to find the highest incoming edge for each word and to contract the graph.</S>
			<S sid="95" ssid="53">There are at most O(n) recursive calls since we cannot contract the graph more then n times.</S>
			<S sid="96" ssid="54">However, 525 Tarjan (1977) gives an efficient implementation of the algorithm with O(n2) time complexity for dense graphs, which is what we need here.</S>
			<S sid="97" ssid="55">To find the highest scoring non-projective tree for a sentence, x, we simply construct the graph Gx and run it through the Chu-Liu-Edmonds algorithm.</S>
			<S sid="98" ssid="56">The resulting spanning tree is the best non-projective dependency tree.</S>
			<S sid="99" ssid="57">We illustrate here the application of the Chu-Liu-Edmonds algorithm to dependency parsing on the simple example x = John saw Mary, with directed graph representation Gx, root saw John Mary 10 9 9 30 3020 3 0 11 The first step of the algorithm is to find, for each word, the highest scoring incoming edge root saw John Mary30 3020 If the result were a tree, it would have to be the maximum spanning tree.</S>
			<S sid="100" ssid="58">However, in this case we have a cycle, so we will contract it into a single node and recalculate edge weights according to Figure 3.</S>
			<S sid="101" ssid="59">root saw John Mary 40 9 30 31 wjs The new vertex wjs represents the contraction of vertices John and saw.</S>
			<S sid="102" ssid="60">The edge from wjs to Mary is 30 since that is the highest scoring edge from any vertex in wjs.</S>
			<S sid="103" ssid="61">The edge from root into wjs is set to40 since this represents the score of the best span ning tree originating from root and including only the vertices in wjs.</S>
			<S sid="104" ssid="62">The same leads to the edge from Mary to wjs.</S>
			<S sid="105" ssid="63">The fundamental property of the Chu-Liu-Edmonds algorithm is that an MST in thisgraph can be transformed into an MST in the orig inal graph (Leonidas, 2003).</S>
			<S sid="106" ssid="64">Thus, we recursively call the algorithm on this graph.</S>
			<S sid="107" ssid="65">Note that we need to keep track of the real endpoints of the edges into and out of wjs for reconstruction later.</S>
			<S sid="108" ssid="66">Running the algorithm, we must find the best incoming edge to all words root saw John Mary 40 30 wjs This is a tree and thus the MST of this graph.</S>
			<S sid="109" ssid="67">We now need to go up a level and reconstruct the graph.</S>
			<S sid="110" ssid="68">The edge from wjs to Mary originally was from the word saw, so we include that edge.</S>
			<S sid="111" ssid="69">Furthermore, the edge from root to wjs represented a tree from root to saw to John, so we include all those edges to get the final (and correct) MST, root saw John Mary 10 3030 A possible concern with searching the entire spaceof spanning trees is that we have not used any syntactic constraints to guide the search.</S>
			<S sid="112" ssid="70">Many lan guages that allow non-projectivity are still primarily projective.</S>
			<S sid="113" ssid="71">By searching all possible non-projective trees, we run the risk of finding extremely bad trees.</S>
			<S sid="114" ssid="72">We address this concern in Section 4.</S>
			<S sid="115" ssid="73">2.2.2 Projective TreesIt is well known that projective dependency pars ing using edge based factorization can be handledwith the Eisner algorithm (Eisner, 1996).</S>
			<S sid="116" ssid="74">This algorithm has a runtime of O(n3) and has been employed successfully in both generative and discrimi native parsing models (Eisner, 1996; McDonald et al., 2005).</S>
			<S sid="117" ssid="75">Furthermore, it is trivial to show that the Eisner algorithm solves the maximum projective spanning tree problem.</S>
			<S sid="118" ssid="76">The Eisner algorithm differs significantly from the Chu-Liu-Edmonds algorithm.</S>
			<S sid="119" ssid="77">First of all, it is abottom-up dynamic programming algorithm as opposed to a greedy recursive one.</S>
			<S sid="120" ssid="78">A bottom-up al gorithm is necessary for the projective case since it must maintain the nested structural constraint, which is unnecessary for the non-projective case.</S>
			<S sid="121" ssid="79">2.3 Dependency Trees as MSTs: Summary.</S>
			<S sid="122" ssid="80">In the preceding discussion, we have shown that nat ural language dependency parsing can be reduced to finding maximum spanning trees in directed graphs.This reduction results from edge-based factoriza tion and can be applied to projective languages with 526the Eisner parsing algorithm and non-projective languages with the Chu-Liu-Edmonds maximum span ning tree algorithm.</S>
			<S sid="123" ssid="81">The only remaining problem is how to learn the weight vector w. A major advantage of our approach over other dependency parsing models is its uniformity and simplicity.</S>
			<S sid="124" ssid="82">By viewing dependency structures asspanning trees, we have provided a general framework for parsing trees for both projective and non projective languages.</S>
			<S sid="125" ssid="83">Furthermore, the resultingparsing algorithms are more efficient than lexi calized phrase structure approaches to dependencyparsing, allowing us to search the entire space with out any pruning.</S>
			<S sid="126" ssid="84">In particular the non-projective parsing algorithm based on the Chu-Liu-EdmondsMST algorithm provides true non-projective parsing.</S>
			<S sid="127" ssid="85">This is in contrast to other non-projective meth ods, such as that of Nivre and Nilsson (2005), who implement non-projectivity in a pseudo-projective parser with edge transformations.</S>
			<S sid="128" ssid="86">This formulation also dispels the notion that non-projective parsing is?harder?</S>
			<S sid="129" ssid="87">than projective parsing.</S>
			<S sid="130" ssid="88">In fact, it is easier since non-projective parsing does not need to en force the non-crossing constraint of projective trees.</S>
			<S sid="131" ssid="89">As a result, non-projective parsing complexity is justO(n2), against the O(n3) complexity of the Eisner dynamic programming algorithm, which by con struction enforces the non-crossing constraint.</S>
	</SECTION>
	<SECTION title="Online Large Margin Learning. " number="3">
			<S sid="132" ssid="1">In this section, we review the work of McDonald etal.</S>
			<S sid="133" ssid="2">(2005) for online large-margin dependency pars ing.</S>
			<S sid="134" ssid="3">As usual for supervised learning, we assume a training set T = {(xt,yt)}Tt=1, consisting of pairs of a sentence xt and its correct dependency tree yt.</S>
			<S sid="135" ssid="4">In what follows, dt(x) denotes the set of possible dependency trees for sentence x. The basic idea is to extend the Margin Infused Relaxed Algorithm (MIRA) (Crammer and Singer,2003; Crammer et al, 2003) to learning with struc tured outputs, in the present case dependency trees.</S>
			<S sid="136" ssid="5">Figure 4 gives pseudo-code for the MIRA algorithmas presented by McDonald et al (2005).</S>
			<S sid="137" ssid="6">An on line learning algorithm considers a single training instance at each update to w. The auxiliary vector v accumulates the successive values of w, so that thefinal weight vector is the average of the weight vec Training data: T = {(xt, yt)}Tt=1 1.</S>
			<S sid="138" ssid="7">w0 = 0; v = 0; i = 0 2.</S>
			<S sid="139" ssid="8">for n : 1..N 3.</S>
			<S sid="140" ssid="9">for t : 1..T 4.</S>
			<S sid="141" ssid="10">min ? ?</S>
			<S sid="142" ssid="11">w(i+1) ? w(i) ? ?</S>
			<S sid="143" ssid="12">s.t. s(xt, yt) ? s(xt, y?)</S>
			<S sid="144" ssid="13">L(yt, y?), ?y? ? dt(xt) 5.</S>
			<S sid="145" ssid="14">v = v + w(i+1) 6.</S>
			<S sid="146" ssid="15">i = i + 1 7.</S>
			<S sid="147" ssid="16">w = v/(N ? T ) Figure 4: MIRA learning algorithm.</S>
			<S sid="148" ssid="17">tors after each iteration.</S>
			<S sid="149" ssid="18">This averaging effect has been shown to help overfitting (Collins, 2002).</S>
			<S sid="150" ssid="19">On each update, MIRA attempts to keep the new weight vector as close as possible to the old weight vector, subject to correctly classifying the instance under consideration with a margin given by the loss of the incorrect classifications.</S>
			<S sid="151" ssid="20">For dependency trees, the loss of a tree is defined to be the number of words with incorrect parents relative to the correct tree.</S>
			<S sid="152" ssid="21">This is closely related to the Hamming loss that is often used for sequences (Taskar et al, 2003).For arbitrary inputs, there are typically exponen tially many possible parses and thus exponentially many margin constraints in line 4 of Figure 4.</S>
			<S sid="153" ssid="22">3.1 Single-best MIRA.</S>
			<S sid="154" ssid="23">One solution for the exponential blow-up in number of trees is to relax the optimization by using only the single margin constraint for the tree with the highest score, s(x,y).</S>
			<S sid="155" ssid="24">The resulting online update (to be inserted in Figure 4, line 4) would then be: min ? ?w(i+1) ? w(i) ? ?</S>
			<S sid="156" ssid="25">s.t. s(xt,yt) ? s(xt,y?) ? L(yt,y?) where y?</S>
			<S sid="157" ssid="26">= arg maxy?</S>
			<S sid="158" ssid="27">s(xt,y?) McDonald et al (2005) used a similar update with k constraints for the k highest-scoring trees, and showed that small values of k are sufficient toachieve the best accuracy for these methods.</S>
			<S sid="159" ssid="28">However, here we stay with a single best tree because k best extensions to the Chu-Liu-Edmonds algorithm are too inefficient (Hou, 1996).</S>
			<S sid="160" ssid="29">This model is related to the averaged perceptron algorithm of Collins (2002).</S>
			<S sid="161" ssid="30">In that algorithm, the single highest scoring tree (or structure) is used toupdate the weight vector.</S>
			<S sid="162" ssid="31">However, MIRA aggres sively updates w to maximize the margin between 527 the correct tree and the highest scoring tree, which has been shown to lead to increased accuracy.</S>
			<S sid="163" ssid="32">3.2 Factored MIRA.</S>
			<S sid="164" ssid="33">It is also possible to exploit the structure of the output space and factor the exponential number of mar gin constraints into a polynomial number of local constraints (Taskar et al, 2003; Taskar et al, 2004).</S>
			<S sid="165" ssid="34">For the directed maximum spanning tree problem,we can factor the output by edges to obtain the fol lowing constraints: min ? ?w(i+1) ? w(i) ? ?</S>
			<S sid="166" ssid="35">s.t. s(l, j) ? s(k, j) ? 1 ?(l, j) ? yt, (k, j) /?</S>
			<S sid="167" ssid="36">yt This states that the weight of the correct incomingedge to the word xj and the weight of all other in coming edges must be separated by a margin of 1.</S>
			<S sid="168" ssid="37">It is easy to show that when all these constraintsare satisfied, the correct spanning tree and all incor rect spanning trees are separated by a score at least as large as the number of incorrect incoming edges.This is because the scores for all the correct arcs can cel out, leaving only the scores for the errors causingthe difference in overall score.</S>
			<S sid="169" ssid="38">Since each single er ror results in a score increase of at least 1, the entirescore difference must be at least the number of er rors.</S>
			<S sid="170" ssid="39">For sequences, this form of factorization has been called local lattice preference (Crammer et al, 2004).</S>
			<S sid="171" ssid="40">Let n be the number of nodes in graph Gx.</S>
			<S sid="172" ssid="41">Then the number of constraints is O(n2), since for each node we must maintain n ? 1 constraints.The factored constraints are in general more re strictive than the original constraints, so they mayrule out the optimal solution to the original problem.</S>
			<S sid="173" ssid="42">McDonald et al (2005) examines briefly factored MIRA for projective English dependency pars ing, but for that application, k-best MIRA performs as well or better, and is much faster to train.</S>
	</SECTION>
	<SECTION title="Experiments. " number="4">
			<S sid="174" ssid="1">We performed experiments on the Czech Prague De pendency Treebank (PDT) (Hajic?, 1998; Hajic?</S>
			<S sid="175" ssid="2">et al,2001).</S>
			<S sid="176" ssid="3">We used the predefined training, develop ment and testing split of this data set.</S>
			<S sid="177" ssid="4">Furthermore, we used the automatically generated POS tags that are provided with the data.</S>
			<S sid="178" ssid="5">Czech POS tags are very complex, consisting of a series of slots that may ormay not be filled with some value.</S>
			<S sid="179" ssid="6">These slots rep resent lexical and grammatical properties such as standard POS, case, gender, and tense.</S>
			<S sid="180" ssid="7">The result is that Czech POS tags are rich in information, but quite sparse when viewed as a whole.</S>
			<S sid="181" ssid="8">To reduce sparseness, our features rely only on the reducedPOS tag set from Collins et al (1999).</S>
			<S sid="182" ssid="9">The num ber of features extracted from the PDT training set was 13, 450, 672, using the feature set outlined by McDonald et al (2005).</S>
			<S sid="183" ssid="10">Czech has more flexible word order than Englishand as a result the PDT contains non-projective de pendencies.</S>
			<S sid="184" ssid="11">On average, 23% of the sentences in the training, development and test sets have at least one non-projective dependency.</S>
			<S sid="185" ssid="12">However, less than2% of total edges are actually non-projective.</S>
			<S sid="186" ssid="13">There fore, handling non-projective edges correctly has a relatively small effect on overall accuracy.</S>
			<S sid="187" ssid="14">To show the effect more clearly, we created two Czech data sets.</S>
			<S sid="188" ssid="15">The first, Czech-A, consists of the entire PDT.The second, Czech-B, includes only the 23% of sen tences with at least one non-projective dependency.This second set will allow us to analyze the effectiveness of the algorithms on non-projective mate rial.</S>
			<S sid="189" ssid="16">We compared the following systems: 1.</S>
			<S sid="190" ssid="17">COLL1999: The projective lexicalized phrase-structure.</S>
			<S sid="191" ssid="18">parser of Collins et al (1999).</S>
			<S sid="192" ssid="19">2.</S>
			<S sid="193" ssid="20">N&amp;N2005: The pseudo-projective parser of Nivre and Nilsson (2005).</S>
			<S sid="194" ssid="21">3.</S>
			<S sid="195" ssid="22">McD2005: The projective parser of McDonald et al.</S>
			<S sid="196" ssid="23">(2005) that uses the Eisner algorithm for both training and testing.</S>
			<S sid="197" ssid="24">This system uses k-best MIRA with k=5.</S>
			<S sid="198" ssid="25">4. Single-best MIRA: In this system we use the Chu-Liu-.</S>
			<S sid="199" ssid="26">Edmonds algorithm to find the best dependency tree for Single-best MIRA training and testing.</S>
			<S sid="200" ssid="27">based on edge factorization as described in Section 3.2.</S>
			<S sid="201" ssid="28">We use the Chu-Liu-Edmonds algorithm to find the best tree for the test data.</S>
			<S sid="202" ssid="29">4.1 Results.</S>
			<S sid="203" ssid="30">Results are shown in Table 1.</S>
			<S sid="204" ssid="31">There are two mainmetrics.</S>
			<S sid="205" ssid="32">The first and most widely recognized is Ac curacy, which measures the number of words that correctly identified their parent in the tree.</S>
			<S sid="206" ssid="33">Completemeasures the number of sentences in which the re sulting tree was completely correct.Clearly, there is an advantage in using the ChuLiu-Edmonds algorithm for Czech dependency pars 528 Czech-A Czech-B Accuracy Complete Accuracy CompleteCOLL1999 82.8 - - N&amp;N2005 80.0 31.8 - McD2005 83.3 31.3 74.8 0.0 Single-best MIRA 84.1 32.2 81.0 14.9 Factored MIRA 84.4 32.3 81.5 14.3 Table 1: Dependency parsing results for Czech.</S>
			<S sid="207" ssid="34">Czech-B is the subset of Czech-A containing only sentences with at least one non-projective dependency.</S>
			<S sid="208" ssid="35">ing.</S>
			<S sid="209" ssid="36">Even though less than 2% of all dependenciesare non-projective, we still see an absolute improve ment of up to 1.1% in overall accuracy over the projective model.</S>
			<S sid="210" ssid="37">Furthermore, when we focus on the subset of data that only contains sentences with at least one non-projective dependency, the effect is amplified.</S>
			<S sid="211" ssid="38">Another major improvement here isthat the Chu-Liu-Edmonds non-projective MST al gorithm has a parsing complexity of O(n2), versusthe O(n3) complexity of the projective Eisner algo rithm, which in practice leads to improvements in parsing time.</S>
			<S sid="212" ssid="39">The results also show that in terms of Accuracy, factored MIRA performs better than single-best MIRA.</S>
			<S sid="213" ssid="40">However, for the factored model,we do have O(n2) margin constraints, which re sults in a significant increase in training time over single-best MIRA.</S>
			<S sid="214" ssid="41">Furthermore, we can also see that the MST parsers perform favorably compared to the more powerful lexicalized phrase-structure parsers, such as those presented by Collins et al (1999) andZeman (2004) that use expensive O(n5) parsing al gorithms.</S>
			<S sid="215" ssid="42">We should note that the results in Collins et al (1999) are different then reported here due to different training and testing data sets.One concern raised in Section 2.2.1 is that search ing the entire space of non-projective trees couldcause problems for languages that are primarily projective.</S>
			<S sid="216" ssid="43">However, as we can see, this is not a prob lem.</S>
			<S sid="217" ssid="44">This is because the model sets its weights with respect to the parsing algorithm and will disfavor features over unlikely non-projective edges.</S>
			<S sid="218" ssid="45">Since the space of projective trees is a subset ofthe space of non-projective trees, it is natural to won der how the Chu-Liu-Edmonds parsing algorithm performs on projective data since it is asymptotically better than the Eisner algorithm.</S>
			<S sid="219" ssid="46">Table 2 shows theresults for English projective dependency trees ex tracted from the Penn Treebank (Marcus et al, 1993) using the rules of Yamada and Matsumoto (2003).</S>
			<S sid="220" ssid="47">English Accuracy Complete McD2005 90.9 37.5 Single-best MIRA 90.2 33.2 Factored MIRA 90.2 32.3Table 2: Dependency parsing results for English us ing spanning tree algorithms.</S>
			<S sid="221" ssid="48">This shows that for projective data sets, training and testing with the Chu-Liu-Edmonds algorithm is worse than using the Eisner algorithm.</S>
			<S sid="222" ssid="49">This is notsurprising since the Eisner algorithm uses the a pri ori knowledge that all trees are projective.</S>
	</SECTION>
	<SECTION title="Discussion. " number="5">
			<S sid="223" ssid="1">We presented a general framework for parsing dependency trees based on an equivalence to maximum spanning trees in directed graphs.</S>
			<S sid="224" ssid="2">This frame work provides natural and efficient mechanismsfor parsing both projective and non-projective languages through the use of the Eisner and Chu-Liu Edmonds algorithms.</S>
			<S sid="225" ssid="3">To learn these structures we used online large-margin learning (McDonald et al,2005) that empirically provides state-of-the-art per formance for Czech.A major advantage of our models is the ability to naturally model non-projective parses.</S>
			<S sid="226" ssid="4">Non projective parsing is commonly considered more difficult than projective parsing.</S>
			<S sid="227" ssid="5">However, under our framework, we show that the opposite is actuallytrue that non-projective parsing has a lower asymptotic complexity.</S>
			<S sid="228" ssid="6">Using this framework, we pre sented results showing that the non-projective modeloutperforms the projective model on the Prague De pendency Treebank, which contains a small number of non-projective edges.</S>
			<S sid="229" ssid="7">Our method requires a tree score that decomposes according to the edges of the dependency tree.</S>
			<S sid="230" ssid="8">One might hope that the method would generalize to 529include features of larger substructures.</S>
			<S sid="231" ssid="9">Unfortu nately, that would make the search for the best tree intractable (Ho?ffgen, 1993).</S>
			<S sid="232" ssid="10">Acknowledgments We thank Lillian Lee for bringing an importantmissed connection to our attention, and Koby Cram mer for his help with learning algorithms.</S>
			<S sid="233" ssid="11">This work has been supported by NSF ITR grants 0205448 and 0428193.</S>
	</SECTION>
</PAPER>
