<PAPER>
  <S sid="0">An Improved Extraction Pattern Representation Model For Automatic IE Pattern Acquisition</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Several approaches have been described for the automatic unsupervised acquisition of patterns for information extraction.</S>
    <S sid="2" ssid="2">Each approach is based on a particular model for the patterns to be acquired, such as a predicate-argument structure or a dependency chain.</S>
    <S sid="3" ssid="3">The effect of these alternative models has not been previously studied.</S>
    <S sid="4" ssid="4">In this paper, we compare the prior models and introduce a new model, the Subtree model, based on arbitrary subtrees of dependency trees.</S>
    <S sid="5" ssid="5">We describe a discovery procedure for this model and demonstrate experimentally an improvement in recall using Subtree patterns.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">Information Extraction (IE) is the process of identifying events or actions of interest and their participating entities from a text.</S>
    <S sid="7" ssid="2">As the field of IE has developed, the focus of study has moved towards automatic knowledge acquisition for information extraction, including domain-specific lexicons (Riloff, 1993; Riloff and Jones, 1999) and extraction patterns (Riloff, 1996; Yangarber et al., 2000; Sudo et al., 2001).</S>
    <S sid="8" ssid="3">In particular, methods have recently emerged for the acquisition of event extraction patterns without corpus annotation in view of the cost of manual labor for annotation.</S>
    <S sid="9" ssid="4">However, there has been little study of alternative representation models of extraction patterns for unsupervised acquisition.</S>
    <S sid="10" ssid="5">In the prior work on extraction pattern acquisition, the representation model of the patterns was based on a fixed set of pattern templates (Riloff, 1996), or predicate-argument relations, such as subject-verb, and object-verb (Yangarber et al., 2000).</S>
    <S sid="11" ssid="6">The model of our previous work (Sudo et al., 2001) was based on the paths from predicate nodes in dependency trees.</S>
    <S sid="12" ssid="7">In this paper, we discuss the limitations of prior extraction pattern representation models in relation to their ability to capture the participating entities in scenarios.</S>
    <S sid="13" ssid="8">We present an alternative model based on subtrees of dependency trees, so as to extract entities beyond direct predicate-argument relations.</S>
    <S sid="14" ssid="9">An evaluation on scenario-template tasks shows that the proposed Subtree model outperforms the previous models.</S>
    <S sid="15" ssid="10">Section 2 describes the Subtree model for extraction pattern representation.</S>
    <S sid="16" ssid="11">Section 3 shows the method for automatic acquisition.</S>
    <S sid="17" ssid="12">Section 4 gives the experimental results of the comparison to other methods and Section 5 presents an analysis of these results.</S>
    <S sid="18" ssid="13">Finally, Section 6 provides some concluding remarks and perspective on future research.</S>
  </SECTION>
  <SECTION title="2 Subtree model" number="2">
    <S sid="19" ssid="1">Our research on improved representation models for extraction patterns is motivated by the limitations of the prior extraction pattern representations.</S>
    <S sid="20" ssid="2">In this section, we review two of the previous models in detail, namely the Predicate-Argument model (Yangarber et al., 2000) and the Chain model (Sudo et al., 2001).</S>
    <S sid="21" ssid="3">The main cause of difficulty in finding entities by extraction patterns is the fact that the participating entities can appear not only as an argument of the predicate that describes the event type, but also in other places within the sentence or in the prior text.</S>
    <S sid="22" ssid="4">In the MUC-3 terrorism scenario, WEAPON entities occur in many different relations to event predicates in the documents.</S>
    <S sid="23" ssid="5">Even if WEAPON entities appear in the same sentence with the event predicate, they rarely serve as a direct argument of such predicates.</S>
    <S sid="24" ssid="6">(e.g., &#8220;One person was killed as the result of a bomb explosion.&#8221;) Predicate-Argument model The PredicateArgument model is based on a direct syntactic relation between a predicate and its arguments1 (Yangarber et al., 2000).</S>
    <S sid="25" ssid="7">In general, a predicate provides a strong context for its arguments, which leads to good accuracy.</S>
    <S sid="26" ssid="8">However, this model has two major limitations in terms of its coverage, clausal boundaries and embedded entities inside a predicate&#8217;s arguments.</S>
    <S sid="27" ssid="9">Figure 12 shows an example of an extraction task in the terrorism domain where the event template consists of perpetrator, date, location and victim.</S>
    <S sid="28" ssid="10">With the extraction patterns based on the PredicateArgument model, only perpetrator and victim can be extracted.</S>
    <S sid="29" ssid="11">The location (downtown Jerusalem) is embedded as a modifier of the noun (heart) within the prepositional phrase, which is an adjunct of the main predicate, triggered3.</S>
    <S sid="30" ssid="12">Furthermore, it is not clear whether the extracted entities are related to the same event, because of the clausal boundaries.4 Chain model Our previous work, the Chain model (Sudo et al., 2001)5 attempts to remedy the limitations of the Predicate-Argument model.</S>
    <S sid="31" ssid="13">The extraction patterns generated by the Chain model are any chain-shaped paths in the dependency tree.6 Thus it successfully avoids the clausal boundary and embedded entity limitation.</S>
    <S sid="32" ssid="14">We reported a 5% gain in recall at the same precision level in the MUC-6 management succession task compared to the Predicate-Argument model.</S>
    <S sid="33" ssid="15">However, the Chain model also has its own weakness in terms of accuracy due to the lack of context.</S>
    <S sid="34" ssid="16">For example, in Figure 1(c), (triggered ( C-DATE ADV)) is needed to extract the date entity.</S>
    <S sid="35" ssid="17">However, the same pattern is likely to be applied to texts in other domains as well, such as &#8220;The Mexican peso was devalued and triggered a national financial crisis last week.&#8221; Subtree model The Subtree model is a generalization of previous models, such that any subtree of a dependency tree in the source sentence can be regarded as an extraction pattern candidate.</S>
    <S sid="36" ssid="18">As shown in Figure 1(d), the Subtree model, by its definition, contains all the patterns permitted by either the Predicate-Argument model or the Chain model.</S>
    <S sid="37" ssid="19">It is also capable of providing more relevant context, such as (triggered (explosion-OBJ)( C-DATE -ADV)).</S>
    <S sid="38" ssid="20">The obvious advantage of the Subtree model is the flexibility it affords in creating suitable patterns, spanning multiple levels and multiple branches.</S>
    <S sid="39" ssid="21">Pattern coverage is further improved by relaxing the constraint that the root of the pattern tree be a predicate node.</S>
    <S sid="40" ssid="22">However, this flexibility can also be a disadvantage, since it means that a very large number of pattern candidates &#8212; all possible subtrees of the dependency tree of each sentence in the corpus &#8212; must be considered.</S>
    <S sid="41" ssid="23">An efficient procedure is required to select the appropriate patterns from among the candidates.</S>
    <S sid="42" ssid="24">Also, as the number of pattern candidates increases, the amount of noise and complexity inas &#8220;triggering an explosion is related to killing or injuring and therefore constitutes one terrorism action.&#8221; JERUSALEM, March 21 &#8211; A smiling Palestinian suicide bomber triggered a massive explosion in the heavily policed heart of downtown Jerusalem today, killing himself and three other people and injuring scores. creases.</S>
    <S sid="43" ssid="25">In particular, many of the pattern candidates overlap one another.</S>
    <S sid="44" ssid="26">For a given set of extraction patterns, if pattern A subsumes pattern B (say, A is (shoot ( C-PERSON -OBJ)(to death)) and B is (shoot ( CPERSON -OBJ))), there is no added contribution for extraction by pattern matching with A (since all the matches with pattern A must be covered with pattern B).</S>
    <S sid="45" ssid="27">Therefore, we need to pay special attention to the ranking function for pattern candidates, so that patterns with more relevant contexts get higher score.</S>
  </SECTION>
  <SECTION title="3 Acquisition Method" number="3">
    <S sid="46" ssid="1">This section discusses an automatic procedure to learn extraction patterns.</S>
    <S sid="47" ssid="2">Given a narrative description of the scenario and a set of source documents, the following three stages obtain the relevant extraction patterns for the scenario; preprocessing, document retrieval, and ranking pattern candidates.</S>
    <S sid="48" ssid="3">Morphological analysis and Named Entities (NE) tagging are performed at this stage.7 Then all the sentences are converted into dependency trees by an appropriate dependency analyzer.$ The NE tagging dure, from lexicalized dependency to chunk-level dependency.</S>
    <S sid="49" ssid="4">For the following experiment in Japanese, we define a node in replaces named entities by their class, so the resulting dependency trees contain some NE class names as leaf nodes.</S>
    <S sid="50" ssid="5">This is crucial to identifying common patterns, and to applying these patterns to new text.</S>
    <S sid="51" ssid="6">The procedure retrieves a set of documents that describe the events of the scenario of interest, the relevant document set.</S>
    <S sid="52" ssid="7">A set of narrative sentences describing the scenario is selected to create a query for the retrieval.</S>
    <S sid="53" ssid="8">Any IR system of sufficient accuracy can be used at this stage.</S>
    <S sid="54" ssid="9">For this experiment, we retrieved the documents using CRL&#8217;s stochasticmodel-based IR system (Murata et al., 1999).</S>
    <S sid="55" ssid="10">Given the dependency trees of parsed sentences in the relevant document set, all the possible subtrees can be candidates for extraction patterns.</S>
    <S sid="56" ssid="11">The ranking of pattern candidates is inspired by TF/IDF scoring in IR literature; a pattern is more relevant when it appears more in the relevant document set and less across the entire collection of source documents.</S>
    <S sid="57" ssid="12">The right-most expansion base subtree discovery algorithm (Abe et al., 2002) was implemented to calculate term frequency (raw frequency of a pattern) and document frequency (the number of documents where a pattern appears) for each pattern candidate.</S>
    <S sid="58" ssid="13">The algorithm finds the subtrees appearing more frequently than a given threshold by constructing the subtrees level by level, while keeping track of their occurrence in the corpus.</S>
    <S sid="59" ssid="14">Thus, it efficiently avoids the construction of duplicate patterns and runs almost linearly in the total size of the maximal tree patterns contained in the corpus.</S>
    <S sid="60" ssid="15">The following ranking function was used to rank each pattern candidate.</S>
    <S sid="61" ssid="16">The score of subtree, , is where is the number of times that subtree appears across the documents in the relevant document set, . is the set of subtrees that appear in .is the number of documents in the collection containing subtree, and is the total number of the dependency tree as a bunsetsu, phrasal unit. documents in the collection.</S>
    <S sid="62" ssid="17">The first term roughly corresponds to the term frequency and the second term to the inverse document frequency in TF/IDF scoring. is used to control the weight on the IDF portion of this scoring function.</S>
    <S sid="63" ssid="18">The in Equation (1) is used to parameterize the weight on the IDF portion of the ranking function.</S>
    <S sid="64" ssid="19">As we pointed out in Section 2, we need to pay special attention to overlapping patterns; the more relevant context a pattern contains, the higher it should be ranked.</S>
    <S sid="65" ssid="20">The weight serves to focus on how specific a pattern is to a given scenario.</S>
    <S sid="66" ssid="21">Therefore, for high value, (triggered (explosion-OBJ)( C-DATE ADV)) is ranked higher than (triggered ( C-DATE ADV)) in the terrorism scenario, for example.</S>
    <S sid="67" ssid="22">Figure 2 shows the improvement of the extraction performance by tuning on the entity extraction task which will be discussed in the next section.</S>
    <S sid="68" ssid="23">For unsupervised tuning of, we used a pseudoextraction task, instead of using held-out data for supervised learning.</S>
    <S sid="69" ssid="24">We used an unsupervised version of the text classification task to optimize, assuming that all the documents retrieved by the IR system are relevant to the scenario and the pattern set that performs well on the text classification task also works well on the entity extraction task.</S>
    <S sid="70" ssid="25">The unsupervised text classification task is to measure how close a pattern matching system, given a set of extraction patterns, simulates the document retrieval of the same IR system as in the previous sub-section.</S>
    <S sid="71" ssid="26">The value is optimized so that the cumulative performance of the precision-recall curve over the entire range of recall for the text classification task is maximized.</S>
    <S sid="72" ssid="27">The document set for text classification is composed of the documents retrieved by the same IR system as in Section 3.2 plus the same number of documents picked up randomly, where all the documents are taken from a different document set from the one used for pattern learning.</S>
    <S sid="73" ssid="28">The pattern matching system, given a set of extraction patterns, classifies a document as retrieved if any of the patterns match any portion of the document, and as random otherwise.</S>
    <S sid="74" ssid="29">Thus, we can get the performance of text classification of the pattern matching system in the form of a precision-recall curve, without any supervision.</S>
    <S sid="75" ssid="30">Next, the area of the precision-recall curve is computed by connecting every point in the precision-recall curve from 0 to the maximum recall the pattern matching system reached, and we compare the area for each possible value.</S>
    <S sid="76" ssid="31">Finally, the value which gets the greatest area under the precision-recall curve is used for extraction.</S>
    <S sid="77" ssid="32">The comparison to the same procedure based on the precision-recall curve of the actual extraction performance shows that this tuning has high correlation with the extraction performance (Spearman correlation coefficient with 2% confidence).</S>
    <S sid="78" ssid="33">For efficiency and to eliminate low-frequency noise, we filtered out the pattern candidates that appear in less than 3 documents throughout the entire collection.</S>
    <S sid="79" ssid="34">Also, since the patterns with too much context are unlikely to match with new text, we added another filtering criterion based on the number of nodes in a pattern candidate; the maximum number of nodes is 8.</S>
    <S sid="80" ssid="35">Since all the slot-fillers in the extraction task of our experiment are assumed to be instances of the 150 classes in the extended Named Entity hierarchy (Sekine et al., 2002), further filtering was done by requiring a pattern candidate to contain at least one Named Entity class.</S>
  </SECTION>
  <SECTION title="4 Experiment" number="4">
    <S sid="81" ssid="1">The experiment of this study is focused on comparing the performance of the earlier extraction pattern models to the proposed Subtree Model (SUBT).</S>
    <S sid="82" ssid="2">The compared models are the direct predicate-argument model (PA)9, and the Chain model (CH) in (Sudo et al., 2001).</S>
    <S sid="83" ssid="3">The task for this experiment is entity extraction, which is to identify all the entities participating in relevant events in a set of given Japanese texts.</S>
    <S sid="84" ssid="4">Note that all NEs in the test documents were identified manually, so that the task can measure only how well extraction patterns can distinguish the participating entities from the entities that are not related to any events.</S>
    <S sid="85" ssid="5">This task does not involve grouping entities associated with the same event into a single template to avoid possible effect of merging failure on extraction performance for entities.</S>
    <S sid="86" ssid="6">We accumulated the test set of documents of two scenarios; the Management Succession scenario of (MUC-6, 1995), with a simpler template structure, where corporate managers assumed and/or left their posts, and the Murderer Arrest scenario, where a law enforcement organization arrested a murder suspect.</S>
    <S sid="87" ssid="7">The source document set from which the extraction patterns are learned consists of 117,109 Mainichi Newspaper articles from 1995.</S>
    <S sid="88" ssid="8">All the sentences are morphologically analyzed by JUMAN (Kurohashi, 1997) and converted into dependency trees by KNP (Kurohashi and Nagao, 1994).</S>
    <S sid="89" ssid="9">Regardless of the model of extraction patterns, the pattern acquisition follows the procedure described in Section 3.</S>
    <S sid="90" ssid="10">We retrieved 300 documents as a relevant document set.</S>
    <S sid="91" ssid="11">The association of NE classes and slots in the template is made automatically; Person, Organization, Post (slots) correspond to C-PERSON, CORG, C-POST (NE-classes), respectively, in the Succession scenario, and Suspect, Arresting Agency, Charge (slots) correspond to C-PERSON, C-ORG, C-OFFENCE (NE-classes), respectively, in the Arrest scenario.</S>
    <S sid="92" ssid="12">10 For each model, we get a list of the pattern candidates ordered by the ranking function discussed in Section 3.3 after filtering.</S>
    <S sid="93" ssid="13">The result of the performance is shown (Figure 3) as a precision-recall graph for each subset of top- ranked patterns where ranges from 1 to the number of the pattern candidates.</S>
    <S sid="94" ssid="14">The test set was accumulated from Mainichi Newspaper in 1996 by a simple keyword search, with some additional irrelevant documents.</S>
    <S sid="95" ssid="15">(See Table 1 for detail.)</S>
    <S sid="96" ssid="16">Figure 3(a) shows the precision-recall curve of top- relevant extraction patterns for each model on the Succession Scenario.</S>
    <S sid="97" ssid="17">At lower recall levels (up to 35%), all the models performed similarly.</S>
    <S sid="98" ssid="18">However, the precision of Chain patterns dropped suddenly by 20% at recall level 38%, while the SUBT patterns keep the precision significantly higher than Chain patterns until it reaches 58% recall.</S>
    <S sid="99" ssid="19">Even after SUBT hit the drop at 56%, SUBT is consistently a few percent higher in precision than Chain patterns for most recall levels.</S>
    <S sid="100" ssid="20">Figure 3(a) also shows that although PA keeps high precision at low recall level it has a significantly lower ceiling of recall (52%) compared to other models.</S>
    <S sid="101" ssid="21">Figure 3(b) shows the extraction performance on the Arrest scenario task.</S>
    <S sid="102" ssid="22">Again, the PredicateArgument model has a much lower recall ceiling (25%).</S>
    <S sid="103" ssid="23">The difference in the performance between the Subtree model and the Chain model does not seem as obvious as in the Succession task.</S>
    <S sid="104" ssid="24">However, it is still observable that the Subtree model gains a few percent precision over the Chain model at recall levels around 40%.</S>
    <S sid="105" ssid="25">A possible explanation of the subtleness in performance difference in this scenario is the smaller number of contributing patterns compared to the Succession scenario.</S>
  </SECTION>
  <SECTION title="5 Discussion" number="5">
    <S sid="106" ssid="1">One of the advantages of the proposed model is the ability to capture more varied context.</S>
    <S sid="107" ssid="2">The Predicate-Argument model relies for its context on the predicate and its direct arguments.</S>
    <S sid="108" ssid="3">However, some Predicate-Argument patterns may be too general, so that they could be applied to texts about a different scenario and mistakenly detect entities from them.</S>
    <S sid="109" ssid="4">For example, (( C-ORG -SBJ) happyo-suru), &#8220; C-ORG reports&#8221; may be the pattern used to extract an Organization in the Succession scenario but it is too general &#8212; it could match irrelevant sentences by mistake.</S>
    <S sid="110" ssid="5">The proposed Subtree Model can acquire a more scenario-specific pattern (( C-ORG SBJ)((shunin-suru-REL) jinji-OBJ) happyo-suru) &#8220; C-ORG reports a personnel affair to appoint&#8221;.</S>
    <S sid="111" ssid="6">Any scoring function that penalizes the generality of a pattern match, such as inverse document frequency, can successfully lessen the significance of too general patterns.</S>
    <S sid="112" ssid="7">The detailed analysis of the experiment revealed that the overly-general patterns are more severely penalized in the Subtree model compared to the Chain model.</S>
    <S sid="113" ssid="8">Although both models penalize general patterns in the same way, the Subtree model also promotes more scenario-specific patterns than the Chain model.</S>
    <S sid="114" ssid="9">In Figure 3, the large drop was caused by the pattern (( C-DATE -ON) C-POST ), which was mainly used to describe the date of appointment to the C-POST in the list of one&#8217;s professional history (which is not regarded as a Succession event), but also used in other scenarios in the business domain (18% precision by itself).</S>
    <S sid="115" ssid="10">Although the scoring function described in Section 3.3 is the same for both models, the Subtree model can also produce contributing patterns, such as (( C-PERSON C-POST -SBJ)( C-POST -TO) shuninsuru) &#8220; C-PERSON C-POST was appointed to C-POST &#8221; whose ranks were higher than the problematic pattern.</S>
    <S sid="116" ssid="11">Without generalizing case marking for nominalized predicates, the Predicate-Argument model excludes some highly contributing patterns with nominalized predicates, as some example patterns show in Figure 4.</S>
    <S sid="117" ssid="12">Also, chains of modifiers could be extracted only by the Subtree and Chain models.</S>
    <S sid="118" ssid="13">A typical and highly relevant expression for the Succession scenario is (((daihyo-ken-SBJ) aru-REL) CPOST ) &#8220; C-POST with ministerial authority&#8221;.</S>
    <S sid="119" ssid="14">Although, in the Arrest scenario, the superiority of the Subtree model to the other models is not clear, the general discussion about the capability of capturing additional context still holds.</S>
    <S sid="120" ssid="15">In Figure 4, the short pattern (( C-PERSON C-POST -APPOS) CNUM ), which is used for a general description of a person with his/her occupation and age, has relatively low precision (71%).</S>
    <S sid="121" ssid="16">However, with more relevant context, such as &#8220;arrest&#8221; or &#8220;unemployed&#8221;, the patterns become more relevant to Arrest scenario.</S>
  </SECTION>
  <SECTION title="6 Conclusion and Future Work" number="6">
    <S sid="122" ssid="1">In this paper, we explored alternative models for the automatic acquisition of extraction patterns.</S>
    <S sid="123" ssid="2">We proposed a model based on arbitrary subtrees of dependency trees.</S>
    <S sid="124" ssid="3">The result of the experiment confirmed that the Subtree model allows a gain in recall while preserving high precision.</S>
    <S sid="125" ssid="4">We also discussed the effect of the weight tuning in TF/IDF scoring and showed an unsupervised way of adjusting it.</S>
    <S sid="126" ssid="5">There are several ways in which our pattern model may be further improved.</S>
    <S sid="127" ssid="6">In particular, we would like to relax the restraint that all the fills must be tagged with their proper NE tags by introducing a GENERIC place-holder into the extraction patterns.</S>
    <S sid="128" ssid="7">By allowing a GENERIC place-holder to match with anything as long as the context of the pattern is matched, the extraction patterns can extract the entities that are not tagged properly.</S>
    <S sid="129" ssid="8">Also patterns with a GENERIC place-holder can be applied to slots that are not names.</S>
    <S sid="130" ssid="9">Thus, the acquisition method described in Section 3 can be used to find the patterns for any type of slot fill.</S>
    <S sid="131" ssid="10">Acknowledgments Thanks to Taku Kudo for his implementation of the subtree discovery algorithm and the anonymous reviewers for useful comments.</S>
    <S sid="132" ssid="11">This research is supported by the Defense Advanced Research Projects Agency as part of the Translingual Information Detection, Extraction and Summarization (TIDES) program, under Grant N66001-001-8917 from the Space and Naval Warfare Systems Center San Diego.</S>
  </SECTION>
</PAPER>
