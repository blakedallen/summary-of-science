<PAPER>
  <S sid="0">Transliteration Of Proper Names In Cross-Lingual Information Retrieval</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We address the problem of transliterating English names using Chinese orthography in support of cross-lingual speech and text processing applications.</S>
    <S sid="2" ssid="2">We demonstrate the application of statistical machine translation techniques to &#8220;translate&#8221; the phonemic representation of an English name, obtained by using an automatic text-to-speech system, to a sequence of initials and finals, commonly used subword units of pronunciation for Chinese.</S>
    <S sid="3" ssid="3">We then use another statistical translation model to map the initial/final sequence to Chinese characters.</S>
    <S sid="4" ssid="4">We also present an evaluation of this module in retrieval of Mandarin spoken documents from the TDT corpus using English text queries.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">Translation of proper names is generally recognized as a significant problem in many multi-lingual text and speech processing applications.</S>
    <S sid="6" ssid="2">Even when hand-crafted translation lexicons used for machine translation (MT) and cross-lingual information retrieval (CLIR) provide significant coverage of the words encountered in the text, a significant portion of the tokens not covered by the lexicon are proper names and domain-specific terminology (cf., e.g., Meng et al (2000)).</S>
    <S sid="7" ssid="3">This lack of translations adversely affects performance.</S>
    <S sid="8" ssid="4">For CLIR applications in particular, proper names and technical terms are especially important, as they carry the most distinctive information in a query as corroborated by their relatively low document frequency.</S>
    <S sid="9" ssid="5">Finally, in interactive IR systems where users provide very short queries (e.g.</S>
    <S sid="10" ssid="6">2-5 words), their importance grows even further.</S>
    <S sid="11" ssid="7">Unlike specialized terminology, however, proper names are amenable to a speech-inspired translation approach.</S>
    <S sid="12" ssid="8">One tries, when writing foreign names in ones own language, to preserve the way it sounds. i.e. one uses an orthographic representation which, when &#8220;read aloud&#8221; by a speaker of ones language sounds as much like it would when spoken by a speaker of the foreign language &#8212; a process referred to as transliteration.</S>
    <S sid="13" ssid="9">Therefore, if a mechanism were available to render, say, an English name in its phonemic form, and another mechanism were available to convert this phonemic string into the orthography of, say, Chinese, then one would have a mechanism for transliterating English names using Chinese characters.</S>
    <S sid="14" ssid="10">The first step has been addressed extensively, for other obvious reasons, in the automatic speech synthesis literature.</S>
    <S sid="15" ssid="11">This paper describes a statistical approach for the second step.</S>
    <S sid="16" ssid="12">Several techniques have been proposed in the recent past for name transliteration.</S>
    <S sid="17" ssid="13">Rather than providing a comprehensive survey we highlight a few representative approaches here.</S>
    <S sid="18" ssid="14">Finite state transducers that implement transformation rules for back-transliteration from Japanese to English have been described by Knight and Graehl (1997), and extended to Arabic by Glover-Stalls and Knight (1998).</S>
    <S sid="19" ssid="15">In both cases, the goal is to recognize words in Japanese or Arabic text which happen to be transliterations of English names.</S>
    <S sid="20" ssid="16">If the orthography of a language is strongly phonetic, as is the case for Korean, then one may use relatively simple hidden Markov models to transform English pronunciations, as shown by Jung et al (2000).</S>
    <S sid="21" ssid="17">The work closest to our application scenario, and the one with which we will be making several direct comparisons, is that of Meng et al (2001).</S>
    <S sid="22" ssid="18">In their work, a set of hand-crafted transformations for locally editing the phonemic spelling of an English word to conform to rules of Mandarin syllabification are used to seed a transformation-based learning algorithm.</S>
    <S sid="23" ssid="19">The algorithm examines some data and learns the proper sequence of application of the transformations to convert an English phoneme sequence to a Mandarin syllable sequence.</S>
    <S sid="24" ssid="20">Our paper describes a data driven counterpart to this technique, in which a cascade of two source-channel translation models is used to go from English names to their Chinese transliteration.</S>
    <S sid="25" ssid="21">Thus even the initial requirement of creating candidate transformation rules, which may require knowledge of the phonology of the target language, is eliminated.</S>
    <S sid="26" ssid="22">We also investigate incorporation of this transliteration system in a cross-lingual spoken document retrieval application, in which English text queries are used to index and retrieve Mandarin audio from the TDT corpus.</S>
  </SECTION>
  <SECTION title="2 Translation System Description" number="2">
    <S sid="27" ssid="1">We break down the transliteration process into various steps as depicted in Figure 1.</S>
    <S sid="28" ssid="2">Steps 1. and 3. are deterministic transformations, while Steps 2. and 4. are accomplished using statistical means.</S>
    <S sid="29" ssid="3">The IBM source-channel model for statistical machine translation (P. Brown et al., 1993) plays a central role in our system.</S>
    <S sid="30" ssid="4">We therefore describe it very briefly here for completeness.</S>
    <S sid="31" ssid="5">In this model, a word foreign language sentence is modeled as the output of a &#8220;noisy channel&#8221; whose input is its correct -word English translation , and having observed the channel output , one seeks a posteriori the most likely English sentence The translation model is estimated from are available both for training models2 as well as for decoding3 &#8212; the task of determining the most likely translation .</S>
    <S sid="32" ssid="6">Since we seek Chinese names which are transliteration of a given English name, the notion of words in a sentence in the IBM model above is replaced with phonemes in a word.</S>
    <S sid="33" ssid="7">The roles of English and Chinese are also reversed.</S>
    <S sid="34" ssid="8">Therefore, represents a sequence of English phonemes, and , for instance, a sequence of GIF symbols in Step 2. described above.</S>
    <S sid="35" ssid="9">The overall architecture of the proposed transliteration system is illustrated in Figure 2.</S>
    <S sid="36" ssid="10">We have available from Meng et al (2000) a small list of about 3875 English names and their Chinese transliteration.</S>
    <S sid="37" ssid="11">A pin-yin rendering of the Chinese transliteration is also provided.</S>
    <S sid="38" ssid="12">We use the Festival text-to-speech system to obtain a phonemic pronunciation of each English name.</S>
    <S sid="39" ssid="13">We also replace all pin-yin symbols by their pronunciations, which are described using an inventory of generalized initials and finals.</S>
    <S sid="40" ssid="14">The pronunciation table for this purpose is obtained from an elementary Mandarin textbook (Practical Chinese Reader, 1981).</S>
    <S sid="41" ssid="15">The net result is a corpus of 3875 pairs of &#8220;sentences&#8221; of the kind depicted in the second and third lines of Figure 1.</S>
    <S sid="42" ssid="16">The vocabulary of the English side of this parallel corpus is 43 phonemes, and the Chinese side is 58 (21 initials and 37 finals).</S>
    <S sid="43" ssid="17">Note, however, that only 409 of the 21 37 possible initial-final combinations constitute legal pin-yin symbols.</S>
    <S sid="44" ssid="18">A second corpus of 3875 &#8220;sentence&#8221; pairs is derived corresponding to the fourth and fifth lines of Figure 1, this time to train a statistical model to translate pin-yin sequences to Chinese characters.</S>
    <S sid="45" ssid="19">The vocabulary of the pin-yin side of this corpus is 282 and that of the character side is about 680.</S>
    <S sid="46" ssid="20">These, of course, are much smaller than the inventory of Chinese pin-yin- and character-sets.</S>
    <S sid="47" ssid="21">We note that certain characters are preferentially used in transliteration over others, and the resulting frequency of character-usage is not the same as unrestricted Chinese text.</S>
    <S sid="48" ssid="22">However, there isn&#8217;t a distinct set of characters exclusively for transliteration.</S>
    <S sid="49" ssid="23">For purposes of comparison with the transliteration accuracy reported by Meng et al (2001), we divide this list into 2233 training name-pairs and 1541 test name-pairs.</S>
    <S sid="50" ssid="24">For subsequent CLIR experiments, we create a larger training set of 3625 name-pairs, leaving only 250 names-pairs for intrinsic testing of transliteration performance.</S>
    <S sid="51" ssid="25">The actual training of all translation models proceeds according to a standard recipe recommended in GIZA++, namely 5 iterations of Model 1, followed by 5 of Model 2, 10 HMM-iterations and 10 iterations of Model 4.</S>
    <S sid="52" ssid="26">The GIF language model required for translating English phoneme sequences to GIF sequences is estimated from the training portion of the 3875 Chinese names.</S>
    <S sid="53" ssid="27">A trigram language model on the GIF vocabulary is estimated with the CMU toolkit, using Good-Turing smoothing and Katz back-off.</S>
    <S sid="54" ssid="28">Note that due to the smoothing, this language model does not necessarily assign zero probability to an illegal GIF sequence, e.g., one containing two consecutive initials.</S>
    <S sid="55" ssid="29">This causes the first translation system to sometimes, though very rarely, produce GIF sequences which do not correspond to any pin-yin sequence.</S>
    <S sid="56" ssid="30">We make an ad hoc correction of such sequences when mapping a GIF sequence to pin-yin, which is otherwise trivial for all legal sequences of initials and finals.</S>
    <S sid="57" ssid="31">Specifically, a final e or i or a is tried, in that order, between consecutive initials until a legitimate sequence of pin-yin symbols obtains.</S>
    <S sid="58" ssid="32">The language model required for translating pinyin sequences to Chinese characters is relatively straightforward.</S>
    <S sid="59" ssid="33">A character trigram model with Good-Turing discounting and Katz back-off is estimated from the list of transliterated names.</S>
    <S sid="60" ssid="34">We use the ReWrite decoder provided by ISI, along with the two translation models and their corresponding language models trained, either on 2233 or 3625 name-pairs, as described above, to perform transliteration of English names in the respective test sets with 1541 or 250 name-pairs respectively.</S>
    <S sid="61" ssid="35">A small but important manual setting in the ReWrite decoder is a list of zero fertility words.</S>
    <S sid="62" ssid="36">In the IBM model described earlier, these are the words which may be &#8220;deleted&#8221; by the noisy channel when transforming into .</S>
    <S sid="63" ssid="37">For the decoder, these are therefore the words which may be optionally inserted in even when there is no word in of which they are considered a direct translation.</S>
    <S sid="64" ssid="38">For the usual case of Chinese to English translation, these would usually be articles and other function words which may not be prevalent in the foreign language but frequent in English.</S>
    <S sid="65" ssid="39">For the phoneme-to-GIF translation model, the &#8220;words&#8221; which need to be inserted in this manner are syllabic nuclei!</S>
    <S sid="66" ssid="40">This is because Mandarin does not permit complex consonant clusters in a way that is quite prevalent in English.</S>
    <S sid="67" ssid="41">This linguistic knowledge, however, need not be imparted by hand in the IBM model.</S>
    <S sid="68" ssid="42">One can, indeed, derive such a list from the trained models by simply reading off the list of symbols which have zero fertility with high probability.</S>
    <S sid="69" ssid="43">This list, in our case, is -i, e, u, o, r, tu, ou, c, iu, ie.</S>
    <S sid="70" ssid="44">The second translation system, for converting pinyin sequences to character sequences, has a one-toone mapping between symbols and therefore has no words with zero fertility.</S>
    <S sid="71" ssid="45">We evaluate the efficacy of our transliteration at two levels.</S>
    <S sid="72" ssid="46">For comparison with the very comparable set-up of Meng et al (2001), we measure the accuracy of the pin-yin output produced by our system after Step 3. in Section 2.3.</S>
    <S sid="73" ssid="47">The results are shown in Table 1, where pin-yin error rate is the edit distance between the &#8220;correct&#8221; pin-yin representation of the correct transliteration and the pin-yin sequence output by the system.</S>
    <S sid="74" ssid="48">Note that the pin-yin error performance of our fully statistical method is quite competitive with previous results.</S>
    <S sid="75" ssid="49">We further note that increasing the training data results in further reduction of the syllable error rate.</S>
    <S sid="76" ssid="50">We concede that this performance, while comparable to other systems, is not satisfactory and merits further investigation.</S>
    <S sid="77" ssid="51">We also evaluate the efficacy of our second translation system which maps the pin-yin sequence produced by the previous stages to a sequence of Chinese characters, and obtain character error rates of 12.6%.</S>
    <S sid="78" ssid="52">Thus every correctly recognized pin-yin symbol has a chance of being transformed with some error, resulting in higher character error rate than the pin-yin error rate.</S>
    <S sid="79" ssid="53">Note that while significantly lower error rates have been reported for converting pin-yin to characters in generic Chinese text, ours is a highly specialized subset of transliterated foreign names, where the choice between several characters sharing the same pin-yin symbol is somewhat arbitrary.</S>
  </SECTION>
  <SECTION title="3 Spoken Document Retrieval System" number="3">
    <S sid="80" ssid="1">Several multi-lingual speech and text applications require some form of name transliteration, crosslingual spoken document retrieval being a prototypical example.</S>
    <S sid="81" ssid="2">We build upon the experimental infrastructure developed at the 2000 Johns Hopkins Summer Workshop (Meng et al., 2000) where considerable work was done towards indexing and retrieving Mandarin audio to match English text queries.</S>
    <S sid="82" ssid="3">Specifically, we find that in a large number of queries used in those experiments, English proper names are not available in the translation lexicon, and are subsequently ignored during retrieval.</S>
    <S sid="83" ssid="4">We use the technique described above to transliterate all such names into Chinese characters and observe the effect on retrieval performance.</S>
    <S sid="84" ssid="5">The TDT-2 corpus, which we use for our experiments, contains 2265 audio clips of Mandarin news stories, along with several thousand contemporaneously published Chinese text articles, and English text and audio broadcasts.</S>
    <S sid="85" ssid="6">The articles tend to be several hundred to a few thousand words long, while the audio clips tend to be two minutes or less on average.</S>
    <S sid="86" ssid="7">The purpose of the corpus is to facilitate research in topic detection and tracking and exhaustive relevance judgments are provided for several topics. i.e. for each of at least 17 topics, every English and Chinese article and news clip has been examined by a human assessor and determined to be either onor off-topic.</S>
    <S sid="87" ssid="8">We randomly select an English article on each of the 17 topics as a query, and wish to retrieve all the Mandarin audio clips on the same topic without retrieving any that are off-topic.</S>
    <S sid="88" ssid="9">For mitigating the variability due to query selection, we choose up to 12 different English articles for each of the 17 topics and average retrieval performance over this selection before reporting any results.</S>
    <S sid="89" ssid="10">We use the query term-selection and translation technique described by Meng et al (2000) to convert the English document to Chinese, the only augmentation being the transliterated names &#8212; there are roughly 2000 tokens in the queries which are not translatable, and almost all of them are proper names.</S>
    <S sid="90" ssid="11">We report IR performance with and without the nametransliteration.</S>
    <S sid="91" ssid="12">We use a different information retrieval system from the one used in the 2000 Workshop (Meng et al., 2000) to perform the retrieval task.</S>
    <S sid="92" ssid="13">A brief description of the system is therefore in order.</S>
    <S sid="93" ssid="14">The Hopkins Automated Information Retriever for Combing Unstructured Text (HAIRCUT) is a research retrieval system developed at the Johns Hopkins University Applied Physics Laboratory.</S>
    <S sid="94" ssid="15">The system was developed to investigate knowledgelight methods for linguistic processing in text retrieval.</S>
    <S sid="95" ssid="16">HAIRCUT uses a statistical language model of retrieval such as the one explored by Hiemstra (2001).</S>
    <S sid="96" ssid="17">The model ranks documents according to the probability that the terms in a query are generated by a document.</S>
    <S sid="97" ssid="18">Various smoothing methods have been proposed to combine the contributions for each term based on the document model and also a generic model of the language.</S>
    <S sid="98" ssid="19">Many have found that a simple mixture model using document term frequencies for the former, and occurrence statistics from a large corpus for the later, works quite well.</S>
    <S sid="99" ssid="20">McNamee and Mayfield (2001) have shown using HAIRCUT that overlapping character n-grams are effective for retrieval in non-Asian languages (e.g., using n=6) and that translingual retrieval between closely related languages is quite feasible even without translation resources of any kind (McNamee and Mayfield, 2002).</S>
    <S sid="100" ssid="21">For the task of retrieving Mandarin audio from Chinese text queries on the TDT-2 task, the system described by Meng et al (2000) achieved a mean average precision of 0.733 using character bigrams for indexing.</S>
    <S sid="101" ssid="22">On identical queries, HAIRCUT achieved 0.762 using character bigrams.</S>
    <S sid="102" ssid="23">This figure forms the monolingual baseline for our CLIR system.</S>
    <S sid="103" ssid="24">We first indexed the automatic transcription of the TDT-2 Mandarin audio collection using character bigrams, as done by Meng et al (2000).</S>
    <S sid="104" ssid="25">We performed CLIR using the Chinese translations of the English queries, with and without transliteration of proper names, and compared the standard 11-step mean average precision (mAP) on the TDT-2 audio corpus.</S>
    <S sid="105" ssid="26">Our results and the corresponding results from Meng et al (2001) are reported in Table 2.</S>
    <S sid="106" ssid="27">Without name transliteration, the performance of the two CLIR systems is nearly identical: a paired t-test shows that the difference in the mAPs of 0.514 and 0.501 is significant only at a -value of 0.74.</S>
    <S sid="107" ssid="28">A small improvement in mAP is obtained by the Haircut system with name transliteration over the system without name transliteration: the improvement from 0.501 to 0.515 is statistically significant at a -value of 0.084.</S>
    <S sid="108" ssid="29">The statistical significance of the improvement from 0.514 to 0.522 by Meng et al (2001) is not known to us.</S>
    <S sid="109" ssid="30">In any event, a need for improvement in transliteration is suggested by this result.</S>
    <S sid="110" ssid="31">We recently received a large list of nearly 2M Chinese-English named-entity pairs from the LDC.</S>
    <S sid="111" ssid="32">As a pilot experiment, we simply added this list to the translation lexicon of the CLIR system, i.e., we &#8220;translated&#8221; those names in our English queries which happened to be available in this LDC list.</S>
    <S sid="112" ssid="33">This happens to cover more than 85% of the previously untranslatable names in our queries.</S>
    <S sid="113" ssid="34">For the remaining names, we continued to use our automatic transliterator.</S>
    <S sid="114" ssid="35">To our surprise, the mAP improvement from 0.501 to 0.506 was statistically insignificant ( -value of 0.421) and the reason why the use of the ostensibly correct transliteration most of the time still does not result in any significant gain in CLIR performance continues to elude us.</S>
    <S sid="115" ssid="36">We conjecture that the fact that the audio has been processed by an automatic speech recognition system, which in all likelihood did not have many of the proper names in question in its vocabulary, may be the cause of this dismal performance.</S>
    <S sid="116" ssid="37">It is plausible, though we cannot find a stronger justification for it, that by using the 10-best transliterations produced by our automatic system, we are adding robustness against ASR errors in the retrieval of proper names.</S>
  </SECTION>
  <SECTION title="4 A Large Chinese-English Translation" number="4">
    <S sid="117" ssid="1">The LDC Chinese-English named entity list was compiled from Xinhua News sources, and consists of nine pairs of lists, one each to cover personnames, place-names, organizations, etc.</S>
    <S sid="118" ssid="2">While there are indeed nearly 2 million name-pairs in this list, a large number of formatting, character encoding and other errors exist in this beta release, making it difficult to use the corpus as is in our statistical MT system.</S>
    <S sid="119" ssid="3">We have tried using from this resource the two lists corresponding to person-names and placenames respectively, and have attempted to augment the training data for our system described previously in Section 2.1.</S>
    <S sid="120" ssid="4">However, we further screened these lists as well in order to eliminate possible errors.</S>
    <S sid="121" ssid="5">There are nearly 1 million pairs of person or placenames in the LDC corpus.</S>
    <S sid="122" ssid="6">In order to obtain a clean corpus of Named Entity transliterations we performed the following steps: 3.</S>
    <S sid="123" ssid="7">We then aligned all the (nearly 1M) training &#8220;sentence&#8221; pairs with this translation model, and extracted roughly a third of the sentences with an alignment score above a certain tunable threshold ().</S>
    <S sid="124" ssid="8">This resulted in the extraction of 346860 name-pairs.</S>
    <S sid="125" ssid="9">4.</S>
    <S sid="126" ssid="10">We divided the set into 343738 pairs for training and 3122 for testing.</S>
    <S sid="127" ssid="11">5.</S>
    <S sid="128" ssid="12">We estimated a pin-yin language model from the training portion above.</S>
    <S sid="129" ssid="13">6.</S>
    <S sid="130" ssid="14">We retrained the statistical MT system on this presumably &#8220;good&#8221; training set and evaluated the pin-yin error rate of the transliteration.</S>
    <S sid="131" ssid="15">The result of this evaluation is reported in Table 3 against the line &#8220;Huge MT (Self),&#8221; where we also report the transliteration performance of the so-called Big MT system of Table 1 on this new test set.</S>
    <S sid="132" ssid="16">We note, again with some dismay, that the additional training data did not result in a significant improvement in transliteration performance.</S>
    <S sid="133" ssid="17">We continue to believe that careful data-selection is the key to successful use of this beta-release of the LDC Named Entity corpus.</S>
    <S sid="134" ssid="18">We therefore went back to Step 3 of the procedure outlined above, where we had used alignment scores from an MT system to select &#8220;good&#8221; sentence-pairs from our training data, and instead of using the MT system trained in Step 2 immediately preceding it, we used the previously built Big MT system of Section 2.1, which we know is trained on a small but clean data-set of 3625 namepairs.</S>
    <S sid="135" ssid="19">With a similar threshold as above, we again selected roughly 300K name-pairs, being careful to leave out any pair which appears in the 3122 pair test set described above, and reestimated the entire phoneme-to-GIF translation system on this new corpus.</S>
    <S sid="136" ssid="20">We evaluated this system on the 3122 namepair test set for transliteration performance, and the results are included in Table 3.</S>
    <S sid="137" ssid="21">Note that significant improvements in transliteration performance result from this alternate method of data selection.</S>
    <S sid="138" ssid="22">We reran the CLIR experiments on the TDT-2 corpus using the somewhat improved entity transliterator described above, with the same query and document collection specifications as the experiments reported in Table 2.</S>
    <S sid="139" ssid="23">The results of this second experiment is reported in Table 4, where the performance of the Big MT transliterator is reproduced for comparison. and without name transliteration Note that the gain in CLIR performance is again only somewhat significant, with the improvement in mAP from 0.501 to 0.517 being significant only at a -value of 0.080.</S>
  </SECTION>
  <SECTION title="5 Concluding Remarks" number="5">
    <S sid="140" ssid="1">We have presented a name transliteration procedure based on statistical machine translation techniques and have investigated its use in a cross lingual spoken document retrieval task.</S>
    <S sid="141" ssid="2">We have found small gains in the extrinsic evaluation of our procedure: mAP improvement from 0.501 to 0.517.</S>
    <S sid="142" ssid="3">In a more intrinsic and direct evaluation, we have found ways to gainfully filter a large but noisy training corpus to augment the training data for our models and improve transliteration accuracy considerably beyond our starting point, e.g., to reduce Pin-yin error rates from 51.1% to 42.5%.</S>
    <S sid="143" ssid="4">We expect to further refine the translation models in the future and apply them in other tasks such as text translation.</S>
  </SECTION>
</PAPER>
