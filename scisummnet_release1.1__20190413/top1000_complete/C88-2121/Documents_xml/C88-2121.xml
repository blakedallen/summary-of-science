<PAPER>
  <S sid="0" ssid="0">Parsing Strategies with Lexicalized Grammars: Appl icat ion to Tree Adjoining Grammars * Yves SCHABES,  Anne  ABE ILLE**and  Arav ind  K. JOSHI Department of Computer and Information Science University of Pennsylvania Philadelphia PA 19104-6389 USA schabes~linc.cis.upenn.edu abeille~cis.upenn.edu joshi~eis.upenn.edu ABSTRACT In this paper we present a general parsing strategy that arose from the development of an Earley-type parsing al- gorithm for TAGs (Schabes and Joshi 1988) and from re- cent linguistic work in TAGs (Abeille 1988).</S>
  <S sid="1" ssid="1">In our approach elementary structures are associated with their lexical heads.</S>
  <S sid="2" ssid="2">These structures specify extended domains of locality (as compared to a context-free gram- mar) over which constraints can be stated.</S>
  <S sid="3" ssid="3">These con- straints either hold within the elementary structure itself or specify what other structures can be composed with a given elementary structure.</S>
  <S sid="4" ssid="4">We state the conditions under which context-free based grammars can be lexicalized without changing the lin- guistic structures originally produced.</S>
  <S sid="5" ssid="5">We argue that even if one extends the domain of locality of CFGs to trees, us- ing only substitution does not givo the freedom to choose the head of each structure.</S>
  <S sid="6" ssid="6">We show how adjunction al- lows us to lexicalize a CFG freely.</S>
  <S sid="7" ssid="7">We then show how a lexicalized grammar naturally follows from the extended omain of locality of TAGs and present some of the linguistic advantages ofour approach.</S>
  <S sid="8" ssid="8">A novel general parsing strategy for lexicalized gram- mars is discussed.</S>
  <S sid="9" ssid="9">In a first stage, the parser builds a set structures corresponding to the input sentence and in a second stage, the sentence is parsed with respect o this set.</S>
  <S sid="10" ssid="10">The strategy is independent of the linguistic theory adopted and of the underlying rammar formalism.</S>
  <S sid="11" ssid="11">How- ever, we focus our attention on TAGs.</S>
  <S sid="12" ssid="12">Since the set of trees needed to parse an input sentence is supposed to be finite, the parser can use in principle any search strategy.</S>
  <S sid="13" ssid="13">Thus, in particular, a top-down strategy can be used since problems due to recursive structures are eliminated.</S>
  <S sid="14" ssid="14">The parser is also able to use non-local information to guide the search.</S>
  <S sid="15" ssid="15">We then explain how the Earley-type parser for TAGs can be modified to take advantage of this approach.</S>
  <S sid="16" ssid="16">*This work is partially supported by ARO grant DAA29-84-9- 007, DARPA grant N0014-85-K0018, NSF grants MCS-82-191169 and DGR-84-10413.</S>
  <S sid="17" ssid="17">The second author is also partially supported by J.W.</S>
  <S sid="18" ssid="18">Zellldja grant.</S>
  <S sid="19" ssid="19">The authors would llke to thank Mitch Marcus for his helpful conunents about this work.</S>
  <S sid="20" ssid="20">Thanks are also due to Ellen Hays.</S>
  <S sid="21" ssid="21">**Visiting from University of Paris VII.</S>
  <S sid="22" ssid="22">1 Lexicalization of grammar for- malisms Most of the current linguistics theories tend to give lexical accounts of several phenomena that used to be consid- ered purely syntactic.</S>
  <S sid="23" ssid="23">The information put in the lexi- con is therefore increased and complexified (e.g.</S>
  <S sid="24" ssid="24">lexical rules in LFG, used also by HPSG, or Gross 1984s lexicon- grammar).</S>
  <S sid="25" ssid="25">But the question of what it means to lexical- ize a grammar is seldom addressed.</S>
  <S sid="26" ssid="26">The possible conse- quences of this question for parsing are not fully investi- gated.</S>
  <S sid="27" ssid="27">We present how to lexicalize grammars uch as CFGs in a radical way, while possibly keeping the rules in their full generality.</S>
  <S sid="28" ssid="28">If one assumes that the input sentence is finite and that it cannot be syntactically infinitely am- biguous, the lexicalization simplifies the task of a parser.</S>
  <S sid="29" ssid="29">We say that a grammar formalism is lexicalized if it consists of: ?</S>
  <S sid="30" ssid="30">a finite set of structures to be associated with lexical items, which usually will be heads of these structures, ?</S>
  <S sid="31" ssid="31">an operation or operations for composing the structures.</S>
  <S sid="32" ssid="32">1 The finite set of structures define the domain of locality over which constraints are speci- fied and these are local with respect o their lexical heads.</S>
  <S sid="33" ssid="33">Not every grammar formalism in a given form is in a lexicalized form.</S>
  <S sid="34" ssid="34">For example, a CFG, in general, will not be in a lexicalized form.</S>
  <S sid="35" ssid="35">However, by extending its domain of locality, it can be lexicalized.</S>
  <S sid="36" ssid="36">We require that the lexicalized grammar produces not only the same lan- guage as the original grammar, but also the same struc- tures (or tree set)?</S>
  <S sid="37" ssid="37">We propose to study the conditions under which such a lexicalization is possible for CFGs and TAGs.</S>
  <S sid="38" ssid="38">The domain of locality of a CFG can be extended by using a tree rewriting system that only uses substitution.</S>
  <S sid="39" ssid="39">We state the conditions under which CFGs can be lexlcalized without changing the structures originally produced.</S>
  <S sid="40" ssid="40">We argue that even if one extends the domain of locality of CFGs to trees, using only substitution does not give the freedom to  choose the head of each structure.</S>
  <S sid="41" ssid="41">We then 1 By lexicalization we mean tlmt in each structure there is a lex- ical item that is realized.</S>
  <S sid="42" ssid="42">We do not mean just adding features (such as head) and unification equations to the rules of the formalism.</S>
  <S sid="43" ssid="43">Categorlal grammars are lexicaUzed according to our definition, However, they do not correspond in a simple way to a rtde-based system that could be used for top-down recognition.</S>
  <S sid="44" ssid="44">57,~ show how adjunction enables one to freely lexicalize a CFG.</S>
  <S sid="45" ssid="45">2 Lexical izat ion  of  CFGs The domain of locality of CFGs can be easily extended by using a tree rewriting grammar.</S>
  <S sid="46" ssid="46">This tree rewriting grammar consists of a set of trees that are not restricted to be of depth one (as in CFGs).</S>
  <S sid="47" ssid="47">It uses only substitution as a combining operation.</S>
  <S sid="48" ssid="48">Substitution can take place only on non-terminal nodes of the frontier of each tree.</S>
  <S sid="49" ssid="49">The language is defined to be the set of strings on the frontiers of trees whose roots are labeled by a distinguished symbol S. It is easy to see that the set of languages generated by this tree rewriting grammar is exactly the same set as context-free languages.</S>
  <S sid="50" ssid="50">If no recarsive chain rules exist, it is formally possible to lexicalize a CFG with this tree rewriting grammar, a Recursive chain rules are disallowed since they introduce unbounded structures with no lexical items attached to them.</S>
  <S sid="51" ssid="51">Although a CFG can be lexicalized by using trees, it is not possible to choose freely the lexical item that plays the role of the head for each structure.</S>
  <S sid="52" ssid="52">Consider the following example: S ~ NP  VP VP  "-~ adv VP VP  --+ v NP  --+ n The grammar can be qexicalized as follows: S NP VP / adv VP VP VP NP A I I adv VP v n However, in this lexiealization one is forced to choose adv as the head of the structure given in the first tree.</S>
  <S sid="53" ssid="53">It is not possible to choose the verb v as the head of this struc- ture.</S>
  <S sid="54" ssid="54">If one tried to do so, recursion on the substitution of the VP node would be inhibited.</S>
  <S sid="55" ssid="55">2"his example shows that although it is possible to lexi- calize CFGs, substitution alone does not allow us to freely choose the lexical heads.</S>
  <S sid="56" ssid="56">Substitution alone forces us to make choices that might not be syntactically and seman- tically justified.</S>
  <S sid="57" ssid="57">Tree adjoining grammars (TAGs) are also a tree-based system, ltowever, the major composition operation in TAGs is adjoining or adjunct ion.</S>
  <S sid="58" ssid="58">I t  builds a new tree from an auxiliary tree # and a tree c~ (a is any tree, initial, auxiliary or derived by adjunction).</S>
  <S sid="59" ssid="59">The resulting tree is called a derived tree.</S>
  <S sid="60" ssid="60">Let t~ be atree containing a node n labeled by X and let # be an auxiliary tree whose root node is also labeled by X.</S>
  <S sid="61" ssid="61">Then the adjunction of fl to a at node n results a tree 7 as shown in Figure 1.</S>
  <S sid="62" ssid="62">Adjunetion enables to factor recursion from local dependencies.</S>
  <S sid="63" ssid="63">aNote that  a CFG in Greibach normal  form can be lexicallzed trivially.</S>
  <S sid="64" ssid="64">But since G~eihach normal  form of a given CFG might not generate the same tree set as  the  original grammar,  it cannot be used as a 8.eneral method for lexicaUzation.</S>
  <S sid="65" ssid="65">(a) (g) A Figure 1: The mechanism of adjunction The previous CFG can be lexicalized by using adjunc- tion as follows: 4 s NP VP NP VP I I A v n adv VP The auxiliary tree rooted by VP can be inserted in the S tree on tile VP node by adjunction.</S>
  <S sid="66" ssid="66">Using adjunction one is thus able to choose the appropriate l xical item as head.</S>
  <S sid="67" ssid="67">This example illustrates the fact that a CFG with no recursive chain rules can be lexicalized in TAGs, and that if that is done the head can be freely chosen.</S>
  <S sid="68" ssid="68">3 TAGs  and  lexical izat ion TAGs are naturally lexicalized because they used an ex- tended domain of locality.</S>
  <S sid="69" ssid="69">TAGs were first introduced by Joshi, Levy and Takabashi (1975) and Joshi (1985).</S>
  <S sid="70" ssid="70">For more details on the original definition of TAGs, we refer the reader to Joshi (1985), Kroch and Joshi (1985) or Vijay-Shanker (1987).</S>
  <S sid="71" ssid="71">It is known that Tree Adjoin- ing Languages (TALs) are mildly context-sensitive.</S>
  <S sid="72" ssid="72">TALs properly contain context-free languages.</S>
  <S sid="73" ssid="73">It is also possi- ble to encode a context-free grammar with auxiliary trees using adjunction only.</S>
  <S sid="74" ssid="74">However, although the languages correspond, the possible ncoding does not directly reflect the original context-free grammar since this encoding uses adjunction.</S>
  <S sid="75" ssid="75">Although adjunction is more powerful than substitution and could be used to simulate it, in recent linguistic work in TAG (Abeill~ 1988) substitution has been used in ad- dition to adjunction in order to obtain appropriate struc- tural descriptions in certain cases, such as verbs taking two sentential arguments (e.g.</S>
  <S sid="76" ssid="76">"John equates olving this problem with doing the impossible").</S>
  <S sid="77" ssid="77">Adding substitution does not change the mathematical properties of TAGs.</S>
  <S sid="78" ssid="78">We describe very briefly the Tree Adjoining Grammar formalism with adjunction and substitution.</S>
  <S sid="79" ssid="79">A Tree Adjoining Grammar  is a tree-based system that consists of.three finite sets of trees: I, A and L. The trees in I O A tJ L are called e lementary trees.</S>
  <S sid="80" ssid="80">The trees in I are called initial trees.</S>
  <S sid="81" ssid="81">Initial trees rep- resent basic sententiai structures.</S>
  <S sid="82" ssid="82">They are usually con- sidered as projections of the verb and they take nominal 4We chose v as lexical head of the S tree but  we could have chosen n instead (although it is not motivated).</S>
  <S sid="83" ssid="83">579 complements.</S>
  <S sid="84" ssid="84">Initial trees (see the left tree in Figure 2) are rooted in S and their frontier consists of terminal sym- bols (including the empty string) and non-terminal nodes to be substituted for.</S>
  <S sid="85" ssid="85">The trees in A are called auxi l iary trees.</S>
  <S sid="86" ssid="86">They can represent constituents which ar e adjuncts to basic struc- tures (adverbial).</S>
  <S sid="87" ssid="87">They can also represent basic senten- tial structures corresponding to verbs or predicates taking sentential complements.</S>
  <S sid="88" ssid="88">Auxiliary trees (see right tree in Figure 2) are characterized as follows: ?</S>
  <S sid="89" ssid="89">internal nodes are labeled by non-terminals; ?</S>
  <S sid="90" ssid="90">leaf nodes are labeled by terminals or by non-terminal nodes to be substituted except for exactly one node (called the foot node) labeled by a non-terminal on which only adjunction can apply; furthermore the la- bel of the foot node is the same as the label of the root node.</S>
  <S sid="91" ssid="91">Initial ~:  Auxiliary ~c~: $ ; ; substitution nodes Figure 2: Schematic initial and auxiliaxy trees The trees in L are called lexical trees.</S>
  <S sid="92" ssid="92">They repre- sent basic categories or constituents which serve as argu- ments, to initial or auxiliary trees.</S>
  <S sid="93" ssid="93">They are reduced to a pre-terminal node in the case of simple categories or are expanded into tree structures in the case 0f compounds.</S>
  <S sid="94" ssid="94">Structurally they are characterized the same way as initial trees except hat they are not necessary rooted by S. As noted in Section 2, the major composition operation in TAGs is adjunct ion.</S>
  <S sid="95" ssid="95">We define subst i tut ion in TAGs to take place on spec- ified nodes on the frontiers of elementary trees.</S>
  <S sid="96" ssid="96">When a node is marked to be substituted, no adjunction can take place on that node.</S>
  <S sid="97" ssid="97">Furthermore , substitution is always mandatory.</S>
  <S sid="98" ssid="98">In case of substitution on a node labeled by S (sentential complement), only trees derived from initial trees (therefore rooted by S) can be substituted.</S>
  <S sid="99" ssid="99">In all other cases, any tree derived from a lexlcal tree rooted by the same label as the given node can be substituted.</S>
  <S sid="100" ssid="100">The resulting tree is obtained by replacing the node by the derived tree.</S>
  <S sid="101" ssid="101">Substitution is illustrated in Figure 3.</S>
  <S sid="102" ssid="102">We conventionally mark substitution odes by a down ar row (~).</S>
  <S sid="103" ssid="103">We define the tree set  of a TAG G, T(G) to be the set of all derived trees starting from initial trees in I. Further- more, the str ing language generated by a TAG, ?</S>
  <S sid="104" ssid="104">:(G), is defined to be the set of all terminal strings of the trees in T(G).</S>
  <S sid="105" ssid="105">Grammar ules defined by the linguistic theory are not the same as the rules used by the parser--let us refer to them as parser  rules.</S>
  <S sid="106" ssid="106">A parser rule is defined to be a structure encoding a rule of the grammar (or a set of rules) instantiated bythe parser when it comes to alex- 580 / Figure 3: Mechanism of substitution ical item (considered to yield the rule(s)).</S>
  <S sid="107" ssid="107">It is thus a unique object.</S>
  <S sid="108" ssid="108">It is individualized by the lexical item, which is itself individualized by its position in the input string.</S>
  <S sid="109" ssid="109">The lexical item is directly inserted into the struc- ture corresponding to the parser ule, and such a rule can only occur once.</S>
  <S sid="110" ssid="110">Lexleal i tems are differentiated by their realization in the input sentence and also their position in the sentence.</S>
  <S sid="111" ssid="111">Therefore a given rule corresponds to ex- actly one lexical item in the input sentence.</S>
  <S sid="112" ssid="112">The structures are produced by lexical items which serve as heads.</S>
  <S sid="113" ssid="113">If a structure has only one terminal, the terminal is the head of the structure; if there are several terminals, the choice of the head is linguistically motivated, e.g.</S>
  <S sid="114" ssid="114">by the principles of X theory.</S>
  <S sid="115" ssid="115">S also has to be considered as the projection of a lexical head, usually V. Each lexical item corresponds to as many entries as there are possible category or argument structures.</S>
  <S sid="116" ssid="116">The category structure is a lexical tree that is not necessarily reduced to a single category.</S>
  <S sid="117" ssid="117">It corresponds to the maximal projection of a category in the case of simple phrases, to the entire compound, in the case of compound categories.</S>
  <S sid="118" ssid="118">Category structures can be of two different kinds: ?</S>
  <S sid="119" ssid="119">lexical trees reduced to a single category: ~ DET NP PP DET N of N$ DET , I I t hell) JR bunch(i ) ?</S>
  <S sid="120" ssid="120">lexical trees that consist of a phrase: NP NP A I D~ N N I I boy (I) Ma r y (I) The argument  st ructure is not reduced to a list of arguments as the usual subcategorization frames.</S>
  <S sid="121" ssid="121">It is the syntactic structure constructed with the lexlcal value of the predicate and with all the nodes for its arguments.</S>
  <S sid="122" ssid="122">The argument structure for a predicate is its maximal struc- ture.</S>
  <S sid="123" ssid="123">An argument is present in the argumefit structure even if it is optional and its optionality is stated in the structure.</S>
  <S sid="124" ssid="124">SThe index in "parentheses on a lexical item that produces the structure ncodes the position of the lexical item in the string.</S>
  <S sid="125" ssid="125">A simple case of a argument structure is a verb with its subcategorized arguments.</S>
  <S sid="126" ssid="126">For example, the verb saw (at position i) generates the following structures (among others): 6 S 8 NPo$ VP V NPI$ V $ I I saw(l) eaw(i) The left structure corresponds to: 0 Jolt.</S>
  <S sid="127" ssid="127">1 aaw 2 llary a ( i=  2) and the other to: 0 John  1 saw 2 that  3 Mary  4 le f t  5.</S>
  <S sid="128" ssid="128">( i - - - -2 ) An argument structure can correspond to either one or a set of syntactic surface structures.</S>
  <S sid="129" ssid="129">The lexical head will then produce a set of possible trees, one for NP0 saw NP1 and another for whol did  NP 0 see e i ?, for exam- ple.</S>
  <S sid="130" ssid="130">If one defines principles for building such sets of trees, these principles will correspond to syntactic rules in a derivation-based theory of grammar.</S>
  <S sid="131" ssid="131">Category and argument structures thus instantiated as the parser scans the input string are combined together in a sentence t~tructure by adjoining or substituting.</S>
  <S sid="132" ssid="132">As Gross (1984), we consider verbs, nouns, and adjec- tives as predicates yielding sentences.</S>
  <S sid="133" ssid="133">They can take nomi- nal or sentential arguments.</S>
  <S sid="134" ssid="134">If the predicate takes nominal arguments it produces an initial tree.</S>
  <S sid="135" ssid="135">If it takes a senten- tial argument then it produces an auxiliary tree.</S>
  <S sid="136" ssid="136">Putting arguments into predicates i done by substituting nomi- nal arguments or by adjoining a predicate structure to its sentential argument.</S>
  <S sid="137" ssid="137">Adjuncts are represented as auxiliary trees rooted by the category of the node they are adjoined to.</S>
  <S sid="138" ssid="138">They are also produced by a head.</S>
  <S sid="139" ssid="139">They can be reduced to a basic category or take nominal or sentential arguments intro- duced by substitution.</S>
  <S sid="140" ssid="140">Example,~ of Adjuncts: S vp A A S VP PP S S A A A S ADV P NP$ SC S~ l I I probablYll) during(i) while(i) 4 Parsing lexicalized grammars If we have a lexicalized grammar, the grammar of the parser can be reduced to a set of structures whose nature depends on the input string and whose size is proportional to the length of the sentence (if we suppose that the num- ber of structures associated with a lexical item is finite).</S>
  <S sid="141" ssid="141">Since each structure ( rule) corresponds to a token in the ?We put indices on categories to express syntactic roles (0 for subject, 1 for object).</S>
  <S sid="142" ssid="142">sentence, it can be used only once.</S>
  <S sid="143" ssid="143">Rules are now differen- tiated by their realization in the sentence.</S>
  <S sid="144" ssid="144">The number of rules that can be used for a given sentence is bounded and is proportional to the length of the sentence.</S>
  <S sid="145" ssid="145">Since each rule can be used once, recursion does not lead to the usual non-termination problem.</S>
  <S sid="146" ssid="146">Once a structure has been cho~ sen for a given token, the other possible structures for the same token do not participate in the parse.</S>
  <S sid="147" ssid="147">Of course, if the sentence is ambiguous, there may be more than one choice.</S>
  <S sid="148" ssid="148">If one adopts an off-line parsing algorithm, the parsing problem is reduced to the following two steps: t First produce the set of structures corresponding to each word in the sentence.</S>
  <S sid="149" ssid="149">This step performs the role of an expanded morphological nalysis (or tagging).</S>
  <S sid="150" ssid="150">Then put the argument structures into the predicate structures.</S>
  <S sid="151" ssid="151">This step performs a modified syntactic analysis.</S>
  <S sid="152" ssid="152">In principle any parsing strategy can be applied to execute the second step, since the number of structures produced js finite and since each of them corresponds to a token in the input string, the search space is finite and termination is guaranteed.</S>
  <S sid="153" ssid="153">In principle, one can proceed inside out, left to right or in any other way.</S>
  <S sid="154" ssid="154">Of course, standard parsing algorithm can be used too.</S>
  <S sid="155" ssid="155">In particular, we can use the top-down parsing strategy without encountering the usual problems due to recursion.</S>
  <S sid="156" ssid="156">Problems in the prediction step of the Earley parser used for unification-based formalisms no longer exist.</S>
  <S sid="157" ssid="157">The use of restrictors as proposed by Shieber (1985) is no longer necessary and the difficulties caused by treating subcategorization as a feature is no longer a problem.</S>
  <S sid="158" ssid="158">By assuming that the number of structures associated with a lexical item is finite, since each structure has a lexi- cal item attached to it, we implicitly make the assumption that an input string of finite length cannot be syntactically infinitely ambiguous.</S>
  <S sid="159" ssid="159">Since the trees are produced by the input string, the parser can use information that might be non-local to guide the search.</S>
  <S sid="160" ssid="160">For example, consider the language gen- erated by the following CFG (example due to Mitch Mar- cus): S ~ A IB A ~ aAlax B -* aBlay This grammar generates the language:{a*x} U {ay}.</S>
  <S sid="161" ssid="161">In a standard CFG parsing algorithm, As and Bs will be built until the last token in the input (x or y) is recog- nized.</S>
  <S sid="162" ssid="162">It would require unbounded look-ahead to decide which rule (3 -+ A or S ~ B) to choose.</S>
  <S sid="163" ssid="163">One can encode the grammar in TAG as follows: S S A B A A A A a x a y Suppose that the heads of the initial trees are respec- tively x and y and that a is the head of both auxiliary 581 trees.</S>
  <S sid="164" ssid="164">Then, if the elementary trees are built according to the input string, and if a top-down strategy is used, only A or B trees will be built.</S>
  <S sid="165" ssid="165">An application concerns the parsing of discontinuous constituents.</S>
  <S sid="166" ssid="166">They are recognized even if there are un- bounded insertions between their components and even if their head is the last element of the string.</S>
  <S sid="167" ssid="167">In the two-step strategy described here, before the first step is taken, there is no grammar.</S>
  <S sid="168" ssid="168">After the first step, we have a grammar whose size is proportional to the length of the input string.</S>
  <S sid="169" ssid="169">The size of the grammar to be taken into consideration i  the analysis of the parsing complexity of grammar formalisms has been reduced to an amount proportional to the length of the input.</S>
  <S sid="170" ssid="170">Although we have not yet investigated the implication of this approach on some complexity results, we feel that some of them might be improved.</S>
  <S sid="171" ssid="171">It is possible to express the parsing problem in a de- cidable deduction system on trees (similar to Lambeks deduction system on categories (1958 and 1961)).</S>
  <S sid="172" ssid="172">The grammar can be thought as a five-tuple (VN, ~, O, S, Lex) where: ?</S>
  <S sid="173" ssid="173">VN is a finite set of non-terminal symbols, ?</S>
  <S sid="174" ssid="174">~ is a finite set of alphabet symbols, ?</S>
  <S sid="175" ssid="175">O is the set of trees constructed with P,* and VN (the elements of Z* having ranked 0).</S>
  <S sid="176" ssid="176">Lex is the lexicon , i.e.</S>
  <S sid="177" ssid="177">a function from lexical items to finite subsets of O: P?</S>
  <S sid="178" ssid="178">--+ 2?(finite).</S>
  <S sid="179" ssid="179">A sequent is defined to be of the form: Vl,.. -, rn ~ A, where ri E O and A E VN Two inference rules combine two trees of the left hand side to form a new one.</S>
  <S sid="180" ssid="180">One inference rule corresponds to adjunction of two trees, and the other to substitution of a node in one tree by the other tree.</S>
  <S sid="181" ssid="181">Once two trees are combined, they are replaced by the resulting tree in the left hand side of the seouent.</S>
  <S sid="182" ssid="182">This facts takes into account that each tree corresponds to a single lexical item in the input string.</S>
  <S sid="183" ssid="183">Therefore each tree can be used only once.</S>
  <S sid="184" ssid="184">Axioms of the system are of the form: v ---+ A where r is a completed tree rooted by A.</S>
  <S sid="185" ssid="185">The sequent T1," ? "</S>
  <S sid="186" ssid="186">,Tn "----+ A is said to be provable if the sequent can be reduced (by the inference rules) to an axiom; we write: ~- r l , .</S>
  <S sid="187" ssid="187">Since there are finitely many ways to combine a finite num- ber of trees with each other, the system is decidable.</S>
  <S sid="188" ssid="188">The language generated by such system is defined to be: = {a i ,  .</S>
  <S sid="189" ssid="189">,anl3rl e Lex(al) s. t. ~- r l ,  " , rn  ----+ S} Also, one can state a necessary condition on the correct- ness of a sentence similar to the category count theorem of van Benthem (1985 and 1986).</S>
  <S sid="190" ssid="190">5 Extending the Earley-type parser for TAGs An Earley-type parser for TAGs has been proposed by Schabes and Joshi (1988a).</S>
  <S sid="191" ssid="191">It takes as input a TAG and a sentence to be parsed.</S>
  <S sid="192" ssid="192">It places no restrictions on the grammar.</S>
  <S sid="193" ssid="193">The algorithm is a bottom-up arser that uses top-down filtering.</S>
  <S sid="194" ssid="194">It is able to parse constraints on ad- junction, substitution and feature structures for TAGs as defined by Vijay-Shanker (1987) and Vijay-Shanker and Joshi (1988).</S>
  <S sid="195" ssid="195">It is able to parse directly CFGs and TAGs.</S>
  <S sid="196" ssid="196">Thus it embeds the essential aspects of PATR-II as defined by Shieber (1984 and 1986).</S>
  <S sid="197" ssid="197">Its correctness was proven in Sehabes and Joshi (1988b).</S>
  <S sid="198" ssid="198">The concepts of dotted rule and states have been extended to TAG trees.</S>
  <S sid="199" ssid="199">The algo- rithm as described by Schabes and Joshi (1988a) manip- ulates states of the form: s = [a, dot, side, pos, l, fl, fi, star, t[, b[, snbst?]</S>
  <S sid="200" ssid="200">where a is a tree, dot is the address of the dot in the tree, side is the side of the symbol the dot is on (left or right), pos is the position of the dot (above or below), star is an address in a and l, f~, fr, star, t~, b~ are indices of positions in the input string.</S>
  <S sid="201" ssid="201">The variable subst?</S>
  <S sid="202" ssid="202">is a boolean that indicates whether the tree has been predicted for substi- tution.</S>
  <S sid="203" ssid="203">The algorithm uses nine processes: ?</S>
  <S sid="204" ssid="204">The Scanner  allows lexical items to be recognized.</S>
  <S sid="205" ssid="205">Move dot  down and Move dot  up perform a tree traversal that allow the parser to scan the input from left to right.</S>
  <S sid="206" ssid="206">The Left P red ic tor  predicts an adjunetion if it is possible.</S>
  <S sid="207" ssid="207">Suppose that the auxiliary tree that we left-predicted has been recognized as far as its foot, then the Left Completor  tries to recognize what was pushed under the foot.</S>
  <S sid="208" ssid="208">Once the subtree pushed under the foot has been rec- ognized, the R ight  P red ic tor  tries to recognize the other half of the auxiliary tree.</S>
  <S sid="209" ssid="209">If the auxiliary tree has been totally recognized, the Right  Completor  tries to recognize the rest of the tree in which the auxiliary tree has been adjoined.</S>
  <S sid="210" ssid="210">The Subst i tu t ion  Pred ic tor  performs the same op- erations as Earleys original predictor.</S>
  <S sid="211" ssid="211">It predicts for substitution (when appropriate) all lexical trees or ini- tial trees that could be substituted.</S>
  <S sid="212" ssid="212">If the tree that we predicted for substitution has been totally recognized, the Subst i tu t ion  Comple- tor  tries to recognize the rest of the tree in which we predicted a substitution.</S>
  <S sid="213" ssid="213">The Earley-type parser can be extended to take advan- tage of  the lexicon-based strategy proposed earlier.</S>
  <S sid="214" ssid="214">Once the input string has been scanned and the corresponding elementary trees have been built, the parser will proceed bottom-up using the top-down filtering from the initial trees that have been built.</S>
  <S sid="215" ssid="215">In order to take into account that each tree is unique and therefore can be used only once, a new component r is added to the states.</S>
  <S sid="216" ssid="216">A state is now defined to be: s = [a, dot, side, pos, l, fl, fr, star, t~, b~, subst?, r] r encodes the trees corresponding to the input string that have not yet been used: r ~--- {{"/11, """ , ~lk},"" : ,  { ~ml,"""  , ~mk}} where {7i l ,  " ,7~j} is the set of trees generated by the lexical item a~.</S>
  <S sid="217" ssid="217">582 The left predictor must be modified so that it predicts only trees that are in the set F of the given state.</S>
  <S sid="218" ssid="218">As soon as one tree (say 7in) is used, the entire set of trees cor- responding to the same token ({711,"  ,7i j})  cannot be used later on.</S>
  <S sid="219" ssid="219">Of course, all competitive paths are taken in parallel as in the usual Earley parser.</S>
  <S sid="220" ssid="220">The way that F is modified by the Left Predictor is illustrated in the following figure: A addedtoSi r=((~ ,...a } ..... {~ ..... ~ ), ..., (v ..... v 1} r=({~ ,...,~ } ........ (~ ..... r }1 n lr il is ml mt 11 lr ml rat Figure 4: Update of F in the Left Predictor The tree 71u is predicted and therefore the trees corre- sponding to the token ai ({ Y / l , -  " ,  "/is}) are removed from 1 a" The scanner must also be slightly modified since the head of the structure is differentiated not only by its lexical value but al,~o by its position in the string.</S>
  <S sid="221" ssid="221">6 Conclusion In this paper we presented a general parsing strategy based on lexicalized grammar.</S>
  <S sid="222" ssid="222">We defined the notion of lexi- calization of a grammar.</S>
  <S sid="223" ssid="223">We showed how a CFG can be lexicalized by using only substitution.</S>
  <S sid="224" ssid="224">But the use of adjunction permits lexicalization with linguistically mo- tivated structures.</S>
  <S sid="225" ssid="225">TAGs have been shown to be naturally lexicalized.</S>
  <S sid="226" ssid="226">Then we gave an overview of the specific lex- icon of TAGs.</S>
  <S sid="227" ssid="227">The %xicalization ~ of grammar lead us to introduce a two step parsing strategy.</S>
  <S sid="228" ssid="228">The first step picks up the set of structures corresponding to each word in the sentence.</S>
  <S sid="229" ssid="229">The second step puts the argument structures into predicate structures.</S>
  <S sid="230" ssid="230">Therefore, the relationship be- tween the morphological nd syntactic analyses has been modified.</S>
  <S sid="231" ssid="231">In the first step, structures instead of categories are associated with lexical items.</S>
  <S sid="232" ssid="232">The strategy has been shown to be able to use non-local information in the in- put string.</S>
  <S sid="233" ssid="233">Also problems due to recursion are eliminated.</S>
  <S sid="234" ssid="234">The grammar of the parser has been reduced to a set of structures whose size is proportional to the length Of the input sentence.</S>
  <S sid="235" ssid="235">Furthermore, the parsing strategy applies to any parsing algorithm; in particular top-down.</S>
  <S sid="236" ssid="236">It can be formalized into a decidable deduction system that has finite search space for a sentence of finite length.</S>
  <S sid="237" ssid="237">The Earley-type parser for TAGs has been easily extended to take advantage of this strategy.</S>
  <S sid="238" ssid="238">R e f e r e n c e s Abeilld, Anne, 1988.</S>
  <S sid="239" ssid="239">Parsing French with Tree Adjoining Grammar: some Linguistic Accounts.</S>
  <S sid="240" ssid="240">In Proceeding of the 12 ?</S>
  <S sid="241" ssid="241">International Conference on Computational Linguistics.</S>
  <S sid="242" ssid="242">van Benthem, Johns, 1985.</S>
  <S sid="243" ssid="243">Lambek Calculus.</S>
  <S sid="244" ssid="244">Manuscript, Filosofisch Instituut, Rijks Universiteit, Groningen.</S>
  <S sid="245" ssid="245">van Benthem, Johan, 1986.</S>
  <S sid="246" ssid="246">Essays on Logical Semantics, Chapter 7, pages 123-150.</S>
  <S sid="247" ssid="247">D. Reidel Publishing Company.</S>
  <S sid="248" ssid="248">Gross, Manriee, 1984.</S>
  <S sid="249" ssid="249">Lexicon-Grammar nd the Syntactic Analysis of French.</S>
  <S sid="250" ssid="250">In Proceeding of the 10 th International Conference on Computational Linguistics.</S>
  <S sid="251" ssid="251">Joshi, Aravind K., 1985.</S>
  <S sid="252" ssid="252">How Much Context-Sensitivlty is Nec- essary for Characterizing Structural Descriptions--Tree Ad- joining Grammars.</S>
  <S sid="253" ssid="253">In Dowry, D.; Karttunen, L.; and Zwicky, A.</S>
  <S sid="254" ssid="254">(editors), Natural Language Processing--Theoretical, Com- putational and Psychological Perspectives.</S>
  <S sid="255" ssid="255">Cambridge Univer- sity Press, New York.</S>
  <S sid="256" ssid="256">Originally presented in 1983.</S>
  <S sid="257" ssid="257">Joshi, A. K.; Levy, L. S.; and Ta~ahashi, M, 1975.</S>
  <S sid="258" ssid="258">Tree Ad- junct Grammars.</S>
  <S sid="259" ssid="259">Kroch, A. and Joshi, A. K., 1985.</S>
  <S sid="260" ssid="260">Linguistic Relevance of Tree Adjoining Grammars.</S>
  <S sid="261" ssid="261">Technical Report MS-CIS-85-18, Department ofComputer and Information Science, University of Pennsylvania.</S>
  <S sid="262" ssid="262">Lambek, Joachim, 1958.</S>
  <S sid="263" ssid="263">The Mathematics of Sentence Struc- ture.</S>
  <S sid="264" ssid="264">American Mathematical Monthly 65:154-170.</S>
  <S sid="265" ssid="265">Lambek, Joachim, 1961.</S>
  <S sid="266" ssid="266">On the Calculus of Syntactic Types.</S>
  <S sid="267" ssid="267">In Proceedings of the Symposium on Applied Mathematics, pages 166-178.</S>
  <S sid="268" ssid="268">Schabes, Yves and Joshi, Aravind K., 1988 (a).</S>
  <S sid="269" ssid="269">An Earley- Type Parsing Algorithm for Tree Adjoining Grammars.</S>
  <S sid="270" ssid="270">In 26 th Meeting of the Association for Computational Linguistics.</S>
  <S sid="271" ssid="271">Schabes, Yves and Joshi, Aravind K., ]988 (b).</S>
  <S sid="272" ssid="272">An Earley- type Parser for Tree Adjoining Grammars.</S>
  <S sid="273" ssid="273">Technical Report, Department of Computer and Information Science, University of Pennsylvania.</S>
  <S sid="274" ssid="274">Shieber, Stuart M., 1984.</S>
  <S sid="275" ssid="275">The Design of a Computer Language for Linguistic Information.</S>
  <S sid="276" ssid="276">In 22 ~d Meeting of the Association for Computational Linguistics, pages 362-366.</S>
  <S sid="277" ssid="277">Shieber, Stuart M., 1985.</S>
  <S sid="278" ssid="278">Using Restriction to Extend Pars- ing Algorithms for Complex-feature-based Formalisms.</S>
  <S sid="279" ssid="279">In 23 rd Meeting of the Association for Computational Linguistics, pages 82-93.</S>
  <S sid="280" ssid="280">Shieber, Stuart M., 1986.</S>
  <S sid="281" ssid="281">An Introduction to Unification-Based Approaches to Grammar.</S>
  <S sid="282" ssid="282">Center for the Study of Language and Information, Stanford, CA.</S>
  <S sid="283" ssid="283">Vijay-Shanker, K., 1987.</S>
  <S sid="284" ssid="284">A Study of Tree Adjoining Gram- mars.</S>
  <S sid="285" ssid="285">PhD thesis, Department of Computer and Information Science, University of Pennsylvania.</S>
  <S sid="286" ssid="286">Vijay-Shanker, K. and Joshi, A.K., 1988.</S>
  <S sid="287" ssid="287">Feature Structure Baaed Tree Adjoining Grammars.</S>
  <S sid="288" ssid="288">In Proceedings of the 12 th International Conference on Computational Linguistics.</S>
</PAPER>
