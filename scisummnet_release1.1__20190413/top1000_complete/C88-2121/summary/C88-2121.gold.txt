Parsing Strategies With 'Lexicalized' Grammars: Application To Tree Adjoining Grammars
In this paper we present a general parsing strategy that arose from the development of an Earley-type parsing algorithm for TAGs (Schabes and Joshi 1988) and from recent linguistic work in TAGs (Abeille 1988).
In our approach elementary structures are associated with their lexical heads.
These structures specify extended domains of locality (as compared to a context-free grammar) over which constraints can be stated.
These constraints either hold within the elementary structure itself or specify what other structures can be composed with a given elementary structure.
We state the conditions under which context-free based grammars can be 'lexicalized' without changing the linguistic structures originally produced.
We argue that even if one extends the domain of locality of CFGs to trees, using only substitution does not give the freedom to choose the head of each structure.
We show how adjunction allows us to 'lexicalize' a CFG freely.
We then show how a 'lexicalized' grammar naturally follows from the extended domain of locality of TAGs and present some of the linguistic advantages of our approach.
A novel general parsing strategy for 'lexicalized' grammars is discussed.
In a first stage, the parser builds a set structures corresponding to the input sentence and in a second stage, the sentence is parsed with respect to this set.
The strategy is independent of the linguistic theory adopted and of the underlying grammar formalism.
However, we focus our attention on TAGs.
Since the set of trees needed to parse an input sentence is supposed to be finite, the parser can use in principle any search strategy.
Thus, in particular, a top-down strategy can be used since problems due to recursive structures are eliminated.
The parser is also able to use non-local information to guide the search.
We then explain how the Earley-type parser for TAGs can be modified to take advantage of this approach.
Lexicalized grammars offer significant parsing benefits as the number of applications of productions (i.e., derivation steps) is clearly bounded by the length of the input string.
