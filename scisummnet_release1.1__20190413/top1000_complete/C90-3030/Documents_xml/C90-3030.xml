<PAPER>
  <S sid="0" ssid="0">CONSTRAINT GRAMMAR AS A FRAMEWORK FOR PARSING RUNNING TEXT Fred Karlsson University of Helsinki Department of General Linguistics Hallituskatu 11 SF-00100 Helsinki Finland e-mail: KARLSS?N@FINUH.bitnet 1.</S>
  <S sid="1" ssid="1">Outline Grammars which are used in parsers are often directly imported from autonomous grammar theory and descriptive practice that were not exercised for the explicit purpose of parsing.</S>
  <S sid="2" ssid="2">Parsers have been designed for English based on e.g.</S>
  <S sid="3" ssid="3">Government and Binding Theory, Generalized Phrase Structure Grammar, and LexicaI-Functional Grammar.</S>
  <S sid="4" ssid="4">We present a formalism to be used for parsing where the grammar statements are closer to real text senten- ces and more directly address some notorious pars- ing problems, especially ambiguity.</S>
  <S sid="5" ssid="5">The formalism is a linguistic one.</S>
  <S sid="6" ssid="6">It relies on transitional probabilities in an indirect way.</S>
  <S sid="7" ssid="7">The probabilities are not part of the description.</S>
  <S sid="8" ssid="8">The descriptive statements, constraints, do not have the ordinary task of defining the notion correct sentence in L. They are less categorical in nature, more closely tied to morphological features, and more directly geared towards the basic task of pars- ing.</S>
  <S sid="9" ssid="9">We see this task as one of inferring surface structure from a stream of concrete tokens in a basically bottom-up mode.</S>
  <S sid="10" ssid="10">Constraints are formu- lated on the basis of extensive corpus studies.</S>
  <S sid="11" ssid="11">They may reflect absolute, ruleqike facts, or probabilistic tendencies where a certain risk is judged to be proper to take.</S>
  <S sid="12" ssid="12">Constraints of the former rule-like type are of course preferable.</S>
  <S sid="13" ssid="13">The ensemble of constraints for language L con- stitute a Constraint Grammar (CG) for L. A CG is intended to be used by the Constraint Grammar Parser CGP, implemented as a Lisp interpreter.</S>
  <S sid="14" ssid="14">Our input tokens to CGP are morphologically ana- lyzed word-forms.</S>
  <S sid="15" ssid="15">One central idea is to maximize the use of morphological information for parsing purposes.</S>
  <S sid="16" ssid="16">All relevant structure is assigned directly via lexicon, morphology, and simple mappings from morphology to syntax.</S>
  <S sid="17" ssid="17">]he task of the constraints is basically to discard as many alternatives as possible, the optimum being a fully disambiguated sentence with one syntactic reading only.</S>
  <S sid="18" ssid="18">The second central idea is to treat morphological disambiguation and syntactic labelling by the same mechanism of discarding improper alternatives.</S>
  <S sid="19" ssid="19">168 A good parsing formalism should satisfy many re- quirements: the constraints should be declarative rather than procedural, they should be able to cope with any real-world text-sentence (i.e.</S>
  <S sid="20" ssid="20">with running text, not just with linguists laboratory sentences), they should be clearly separated from the program code by which they are executed, the formalism should be language-independent, it should be rea~ sonably easy to implement (optimally as finite-state automata), and it should also be efficient to run.</S>
  <S sid="21" ssid="21">The CG formalism adheres to these desiderata.</S>
  <S sid="22" ssid="22">Breaking up the problem of parsing The problem of parsing running text may be broken up into six subproblems or modules: ?</S>
  <S sid="23" ssid="23">preprocessing, ?</S>
  <S sid="24" ssid="24">morphological analysis, ?</S>
  <S sid="25" ssid="25">local morphological disambiguation, ?</S>
  <S sid="26" ssid="26">morphosyntactic mapping, ?</S>
  <S sid="27" ssid="27">context-dependent morphological disambigua- tion, , determination of intrasentential clause boun- daries, , disalnbiguation of surface syntactic functions.</S>
  <S sid="28" ssid="28">The first four of these modules are executed se- quentially, optimally followed by parallel execution of the last three modules which constitute syntax proper.</S>
  <S sid="29" ssid="29">We have a five-stage parsing-process.</S>
  <S sid="30" ssid="30">In this general setting, CG is the formalism of the fifth stage, syntax proper.</S>
  <S sid="31" ssid="31">The same CG constraint formalism is used to disambiguate morphological and syntactic ambiguities, and to locate clause boun- daries in a complex sentence.</S>
  <S sid="32" ssid="32">Parts of the CG for- rnalism are used also in morphosyntactic mapping.</S>
  <S sid="33" ssid="33">Real texts are full with idiosyncracies in regard to headings, footnotes, paragraph structure, interpunc- tuation, use of upper and lower case, etc.</S>
  <S sid="34" ssid="34">Such phenomena must be properly normalized.</S>
  <S sid="35" ssid="35">Further- more several purely linguistic phenomena must be somehow dealt with prior to single-word morphologi- cal analysis, especially idioms and other more or less fixed multi-word expressions.</S>
  <S sid="36" ssid="36">make no sense to subject the individual words of the express- ion in spite of to plain morphological analysis.)</S>
  <S sid="37" ssid="37">The existence of an adequate preprocessor is here sim- ply taken for granted.</S>
  <S sid="38" ssid="38">We concentrate on morphological analysis, clause boundary determination, morphological disambigua- tion, and syntactic function assignment.</S>
  <S sid="39" ssid="39">Viewing the problem of parsing in turn from one or another of these angles clarifies many intricacies.</S>
  <S sid="40" ssid="40">The subprob- lems take more manageable proportions and make possible a novel type of modularity.</S>
  <S sid="41" ssid="41">Morphological analysis is relatively independent.</S>
  <S sid="42" ssid="42">CGP is always supplied with adequate morphologi- cal input.</S>
  <S sid="43" ssid="43">The morphological analyzers are designed according to Koskenniemis (1983) two-level model.</S>
  <S sid="44" ssid="44">Currently our Research Unit has morphological ana- lyzers available for English (41,000 lexicon entries), Finnish (37,000 entries), and Swedish (42,000 en- tries).</S>
  <S sid="45" ssid="45">Below are two morphologically analyzed Eng- lish word-forms, a has one reading, move four.</S>
  <S sid="46" ssid="46">The set of readings for a word-form we call a cohort.</S>
  <S sid="47" ssid="47">All readings in a cohort have the base-form initially or+ the line.</S>
  <S sid="48" ssid="48">Upper-case strings are morphological fea- tures except for those containing the designated initial character "@" which denotes that the string following it is the name of a syntactic function, here emanating from the lexicon.</S>
  <S sid="49" ssid="49">"@DN&gt;" = determiner as modif ier of the next noun to the right, "@+FMAINV" = finite main verb, "@-FMAINV" = non-finite main verb as member of a verb chain, "@&lt;NQM-FMAINV" = non-finite main verb as post- modifier of a nominal: a a" DET CENTR ART INDEF @DN&gt;" move move" N NOM SG" move "V SUBJUNCTIVE @+FMAINV" move "V IMP @+FMAINV" move" V INF @-FMAINV @&lt;NOM-FMAINV" described by recursive links back to the main lexicon.</S>
  <S sid="50" ssid="50">Consider the cohort of the Swedish word-form fru- kosten ("_ " = compound boundary, frukost break- fast, fru mrs, kostnutrition, ko cow, sten stone): frukosten frukost" N UTR DEF SG NOM" fru_kost" N UTR DEF SG NOM " fru ko sten" N UTR INDEF SG NOM " By local disambiguation we refer to constraints or strategies that make it possible to discard some readings just by local inspection of the current co- hort, without invoking any contextual information.</S>
  <S sid="51" ssid="51">The present cohort contains three readings.</S>
  <S sid="52" ssid="52">An in- teresting local disambiguation strategy can now be stated: "Discard all readings with more than the smallest number of compound boundaries occurring in the current cohort".</S>
  <S sid="53" ssid="53">This strategy properly discards the readings "fru_kost" and "fru ko sten".</S>
  <S sid="54" ssid="54">I have found this principle to be very close to perfect.</S>
  <S sid="55" ssid="55">A similar principle holds for derivation: "Discard readings with derivational elements if there is at least one non-derived reading available in the cohort".</S>
  <S sid="56" ssid="56">Other local disambiguation strategies compare multiple compound readings in terms of how prob- able their part of speech structure is (NNN, ANN, NVN, AAV, etc.).</S>
  <S sid="57" ssid="57">Local disambiguation is a potent module.</S>
  <S sid="58" ssid="58">The Swedish morphological analyzer was applied to a text containing some 840,000 word-form tokens.</S>
  <S sid="59" ssid="59">The following table shows cohort size N(r) in the first column.</S>
  <S sid="60" ssid="60">The second and third columns sllow the number of cohorts with the respective number of readings before (a) and after (b) local disambigua- tion.</S>
  <S sid="61" ssid="61">E.g., before local disambiguation there were 3830 word-forms with 6 readings but after local disambiguation only 312.</S>
  <S sid="62" ssid="62">Here, disambiguation refers to reduction of mor- phological ambiguities, optimally down to cohort size = 1.</S>
  <S sid="63" ssid="63">Sense disambiguation is not included (presently our lexical items have no sense descriptions).</S>
  <S sid="64" ssid="64">The subproblems of morphosyntactic mapping, morphological disambiguation, clause boundary lo- cation, and syntactic function determination are in- terrelated.</S>
  <S sid="65" ssid="65">E.g., for disambiguation it is useful to know the boundaries of the current clause, and to know as much as possible about its syntactic struc- ture.</S>
  <S sid="66" ssid="66">An important aspect of the general problem is to work out the precise relations between these modules.</S>
  <S sid="67" ssid="67">Local disambiguation Morphological ambiguities may be due to intersec- tion of forms of the same or of different lexical entries, or to intersection of recursive compound paths.</S>
  <S sid="68" ssid="68">The latter phenomenon arises if productive compound formation in e.g.</S>
  <S sid="69" ssid="69">Finnish, German, and Swedish is N(r) (a) (b) 0 13957 13957 1 440035 487994 2 253779 236298 3 55857 44782 4 38062 29053 5 24135 18911 6 3830 312 7 9551 8913 8 541 23 9 232 47 10 72 2 11 46 5 12 124 13 15 14 28 15+ 33 Out of roughly 1,5 million readings assigned by morphology (1.8 readings/word-form), local disam- 169 biguation discards more than 100,000.</S>
  <S sid="70" ssid="70">Especially dramatic the drop is for highly ambiguous words.</S>
  <S sid="71" ssid="71">Morphosyntactic mapping After local disambiguation, each word in the sen- tence undergoes morphosyntactic mapping, i.e.</S>
  <S sid="72" ssid="72">it is assigned at least one syntactic label, perhaps sev- eral if a unique label is not possible to assign.</S>
  <S sid="73" ssid="73">This mapping will be discussed in connection with the syntactic constraints in section 7.</S>
  <S sid="74" ssid="74">Context-dependent disambiguation constraints The CG formalism will first be illustrated by con- text-dependent disambiguation constraints.</S>
  <S sid="75" ssid="75">Sets of grammatical features are needed in the constraints for the purpose of geneialization.</S>
  <S sid="76" ssid="76">Each set declara- tion consists of a set name followed by the elements of that set.</S>
  <S sid="77" ssid="77">The elements are (strings of) features and/or base-forms occurring in readings: (DET "DET") (N "N") (TO "to") (PREMOD "A" "DET") (NOMHEAD "N NOM" "PRON NOM") (VFIN "V PRES" "V PAST" "V IMP" "V SUBJUNC- TIVE") Each constraint is a quadruple consisting of do- main, operator, target, and context condition(s).</S>
  <S sid="78" ssid="78">An example: (@w =0 "PREP" (-1 DET)) other readings.</S>
  <S sid="79" ssid="79">The operators are here defined in the procedural mode as performing operations.</S>
  <S sid="80" ssid="80">Con- ceptually they just express constraints.</S>
  <S sid="81" ssid="81">The context conditions are defined relative to the target reading in position 0.</S>
  <S sid="82" ssid="82">Position 1 is one word to the right of 0,-3 three words to the left of 0, etc.</S>
  <S sid="83" ssid="83">(Such straightforward positions we call absolute.)</S>
  <S sid="84" ssid="84">Each context condition is a triple consisting of polarity, position, and set.</S>
  <S sid="85" ssid="85">Polarity is either NOT or nothing (i.e.</S>
  <S sid="86" ssid="86">positive), position is a legal position number, and set is a declared set name.</S>
  <S sid="87" ssid="87">An asterisk ..... (functionally and mnemotechnically reminiscent of the Kleene star) prefixed to position number n refers to some position rightwards of n (if n is positive), or some position leftwards of n (if n is negative), in both cases including n, up to the next sentence boundary (or clause boundary, if enforced in clause boundary mode, cf.</S>
  <S sid="88" ssid="88">The asterisk convention thus enables the description of un- bounded dependencies.</S>
  <S sid="89" ssid="89">Examples: (1 N) requires there to be a reading with the feature "N" for the next word-form.</S>
  <S sid="90" ssid="90">(NOT *-1 VFIN) states: nowhere leftwards in this sentence is there a reading with any of the feature combinations defining finite verbs.</S>
  <S sid="91" ssid="91">The condition ensemble (1 PREMOD) (2 N) (3 VFIN) requires there to be a reading with either "A" or "DET" in position 1, with "N" in position 2, and with one of the VFIN readings in position 3.</S>
  <S sid="92" ssid="92">Here are two more context-dependent disambiguation constraints for English: (@w =0 VFIN (-1 TO)) ("that" =!</S>
  <S sid="93" ssid="93">"&lt;Rel&gt;" (-1 NOMHEAD) (1 VFIN)) stating that if a word (@w) has a reading with the feature "PREP", this very reading is discarded (=0) iff the preceding word (i.e.</S>
  <S sid="94" ssid="94">the word in position -1) has a reading with the feature "DET".</S>
  <S sid="95" ssid="95">The domain points out some element o be disam- biguated, e.g.</S>
  <S sid="96" ssid="96">(the readings of) a particular word- form.</S>
  <S sid="97" ssid="97">The designated domain @w is a variable over any word-form, used when the target reading is picked by feature(s) only.</S>
  <S sid="98" ssid="98">The target defines which reading the constraint is about.</S>
  <S sid="99" ssid="99">The target may refer to one particular eading, such as "V PRES -SG3", or to all members of a declared set, such as VFIN.</S>
  <S sid="100" ssid="100">The operator defines which operation to perform on the reading(s).</S>
  <S sid="101" ssid="101">There are three disambiguation operators, here treated in order of decreasing strength.</S>
  <S sid="102" ssid="102">The operator =!!</S>
  <S sid="103" ssid="103">indicates that the target reading is the correct one iff all context conditions are satisfied; all other readings should be discarded.</S>
  <S sid="104" ssid="104">If the context conditions are not satisfied, the target reading itself is discarded.</S>
  <S sid="105" ssid="105">The operator =!</S>
  <S sid="106" ssid="106">indicates that the target reading is the correct one iff all context conditions are satisfied, all other readings are dis- carded.</S>
  <S sid="107" ssid="107">The operator =0 discards the target reading iff the context conditions are satisfied, it leaves all The first one discards all finite verb readings imme- diately after the base-form to (itself either a preposi- tion or an infinitive mark).</S>
  <S sid="108" ssid="108">VFIN is a declared set.</S>
  <S sid="109" ssid="109">The constraint is applicable to all strings declared to belong to this set.</S>
  <S sid="110" ssid="110">The second constraint states that the proper read- ing of the word thatis relative pronoun (i.e.</S>
  <S sid="111" ssid="111">a reading containing the string "&lt;Rel&gt;", itself an inherent fea- ture emanating from the lexicon) immediately after a nominal head and immediately belore a finite verb.</S>
  <S sid="112" ssid="112">There is also a mechanism available for expressing relative position with reference to variable positions established via unbounded dependencies.</S>
  <S sid="113" ssid="113">Let con- dition (1 VFIN) be satisfied at absolute position 5, i.e.</S>
  <S sid="114" ssid="114">at the fifth word to the right.</S>
  <S sid="115" ssid="115">Then (L-1 N) would require there to be a feature "N" in absolute position 4, (L* N) would establish a second unbounded de- pendency somewhere left of position 5 (but right of position 0), i.e.</S>
  <S sid="116" ssid="116">looking for satisfaction at one of positions 4,3,2,1.</S>
  <S sid="117" ssid="117">Often context conditions work on ambiguous co- horts, i.e.</S>
  <S sid="118" ssid="118">one reading satisfiesthe condition, but this reading perhaps is not the correct one in the first place.</S>
  <S sid="119" ssid="119">If so, should a risk be taken?</S>
  <S sid="120" ssid="120">The CG formal- ism makes this a matter of deliberate choice.</S>
  <S sid="121" ssid="121">All 170 3 constraints so far treated allow the context condi- tions to be satisfied by ambiguous context cohorts.</S>
  <S sid="122" ssid="122">By appending the character C to the position num- ber, one requires the respective condition to be satisfied only if the cohort being tested is itself un- ambiguous.</S>
  <S sid="123" ssid="123">This is called careful mode, e.g.</S>
  <S sid="124" ssid="124">: classical repertoire of heads and modifiers.</S>
  <S sid="125" ssid="125">CG syn- tax maps morphological categories and word order information onto syntactic labels.</S>
  <S sid="126" ssid="126">The designated syntactic subsets of verb chain elements, head labels, and modifier labels should be established.</S>
  <S sid="127" ssid="127">For English, these include e.g.</S>
  <S sid="128" ssid="128">: (@w =0 VFIN (-1C TO)) For many constraints it is necessary to require that they do not apply over clause boundaries.</S>
  <S sid="129" ssid="129">This clause boundary mode is effected by appending either of the atoms **CLB (ordinary mode) or**CLB- C (careful mode) after the last context condition.</S>
  <S sid="130" ssid="130">Clause boundary mode is typically used in conjunc- tion with unbounded contexts.</S>
  <S sid="131" ssid="131">A template mechanism is available for expressing partial generalizations.</S>
  <S sid="132" ssid="132">E.g., a template "&amp;NP" could be declared to contain the alternatives ((N)), ((A) (N)) ((DET) .</S>
  <S sid="133" ssid="133">(N)) ((DET) (A) (N)), etc.</S>
  <S sid="134" ssid="134">Then the template &amp;NP could be used in the context parl of any con- straint.</S>
  <S sid="135" ssid="135">At run-time all alternative realizations of &amp;NP would be properly considered.</S>
  <S sid="136" ssid="136">Every constraint embodies a true statement.</S>
  <S sid="137" ssid="137">Oc- casionally the constraints might seem quite down-to- earth and even trivial, given mainstream conceptions of what constitutes a linguistically sig- nificant generalization.</S>
  <S sid="138" ssid="138">But the very essence of CG is that low-level constraints (i) are easily express- ible, and (it) prove to be effective in parsing.</S>
  <S sid="139" ssid="139">Constraints for intrasentential clause boundaries Clause boundary constraints establish locations of clause boundaries.</S>
  <S sid="140" ssid="140">They are important especially for the formulation of proper syntactic constraints.</S>
  <S sid="141" ssid="141">E.g., the syntactic constraint "there is only one finite predi- cate in a simplex non-coordinated clause" presup- poses that clause boundary locations are known.</S>
  <S sid="142" ssid="142">Clause boundaries occur i.a.</S>
  <S sid="143" ssid="143">as the inherent fea- ture "&lt;**CLB&gt;" in the input stream.</S>
  <S sid="144" ssid="144">subjunctions are lexically marked by this feature.</S>
  <S sid="145" ssid="145">But many boun- daries must be spotted by specific constraints.</S>
  <S sid="146" ssid="146">Clause boundary constraints have the special oper- ator "=**CLB" stating that there is a clause boundary before the word specified by the target.</S>
  <S sid="147" ssid="147">E.g., given that conjunctions are lexically marked by the inherent feature "&lt;Conj&gt;", the constraint: (@w =**CLB "&lt;Conj&gt;" (1 NOMHEAD) (2 VFIN)) states that there is a clause boundary before con- junction instances that precede a NOMHEAD fol- lowed by a finite verb (e.g., before the conjunction in a sentence such as John eats and Bill drinks).</S>
  <S sid="148" ssid="148">Syntactic constraints CG syntax is based on dependency and should assign flat, functional, surface labels, optimally one to each word-form.</S>
  <S sid="149" ssid="149">The labels are roughly the verb chain members: @+FAUXV (finite auxil- iary V), @-FAUXV (non-finite auxiliary V), @+FMAINV (finite main V), @-FMAINV (non- finite main V) .... ?</S>
  <S sid="150" ssid="150">nominal heads: @SUB J, @OBJ, @I-OBJ, @PCOMPL-S (subj.</S>
  <S sid="151" ssid="151">), @PCOMPL- O (obj.</S>
  <S sid="152" ssid="152">), @ADVL (adverbial) .... ?</S>
  <S sid="153" ssid="153">nominal modifiers: AN&gt; (adjective as premodi~ tier to N), DN&gt; (determiner aspremodifier toN), &lt;NOM (t-mstmodifier to nominal), A&gt; (premodi- tier to A), &lt;P (postmodifier toP) .... A verb chain such as has been reading gets the labels @+FAUXV @-FAUXV @-FMAINV.</S>
  <S sid="154" ssid="154">In the sentenceShe boughtthe car, she is @SUBJ and car @OBJ.</S>
  <S sid="155" ssid="155">Certain verb chain and head labels may occur maximally once in a simplex clause.</S>
  <S sid="156" ssid="156">This restriction we call the Uniqueness Principle.</S>
  <S sid="157" ssid="157">At least @+FAUXV, @+FMAINV, @SUBJ, @OBJ, @I-OBJ, @PCOMPL-S, and @PCOMPL-O obey this restric- tion.</S>
  <S sid="158" ssid="158">Many constraints may be based on consequen- ces of the Uniqueness Principle.</S>
  <S sid="159" ssid="159">E.g., if a morphologically and syntactically unambiguous @SUBJ has been identified in a clause, all other instances of @SUBJ occurring in syntactically am- biguous readings of that clause may be discarded.</S>
  <S sid="160" ssid="160">Modifier and complement labels point in the direc- tion (right "&gt;", left "&lt;") of the respective head which is identified by its part-of-speech label.</S>
  <S sid="161" ssid="161">E.g., the label @&lt;P is assigned to a prepositional complement such as park in in the park.</S>
  <S sid="162" ssid="162">Our analysis of modifier and complement labels is more delicate than in traditional grammar, cf.</S>
  <S sid="163" ssid="163">the premodifiers AN&gt;, DN&gt;, NN&gt;, GN&gt; (genitival).</S>
  <S sid="164" ssid="164">In Constraint Grammar, syntactic labels are as- signed in three steps.</S>
  <S sid="165" ssid="165">The basic strategy is: Do as much as possible as early as possible.</S>
  <S sid="166" ssid="166">The first step is to provide as many syntactic labels as possible in the lexicon (including morphology).</S>
  <S sid="167" ssid="167">For entries having a reduced set of labels (compared to what that morphological class normally has), those labels will be listed in the lexicon.</S>
  <S sid="168" ssid="168">Thus, output from lexicon and morphology will indicate that he is @SUB J, that him is either @OBJ, @I-OBJ, or @&lt;P (NB: a considerably reduced subset of all nominal head functions), that went is @+FMAINV, etc.</S>
  <S sid="169" ssid="169">The second step is morphosyntactic mapping For all readings that remain after local disambigua- tion and do not yet have any syntactic function label, simple mapping statements tell, for each relevant morphological feature, or combination of features, what its range of syntactic labels is.</S>
  <S sid="170" ssid="170">This may be 4 171 compared to traditional grammar book statements such as "the syntactic functions of nou ns are subject, object, indirect object .... ".</S>
  <S sid="171" ssid="171">CG contains one enrichment of this scheme.</S>
  <S sid="172" ssid="172">A mapping statement may be constrained by the con- text condition mechanism specified in section 5.</S>
  <S sid="173" ssid="173">Thus, a mapping statement is a triple &lt;morphologi- cal feature(s), context condition(s), syntactic func- tion(s)&gt;.</S>
  <S sid="174" ssid="174">The first element is a feature string occurring in a morphological reading, the second is either NIL (no conditions) or a list of sublists each of which is a legal context condition.</S>
  <S sid="175" ssid="175">Finally the requi- site grammatical function label(s) are listed.</S>
  <S sid="176" ssid="176">Here are some mapping statements without context condi- tions, providing a maximal set of labels: ("PRON GEN" NIL GN&gt; @PCOMPL-S @ PCOM PL-O) ("A" NIL AN&gt; @PCOMPL-S @PCOMPL-O @SUBJ @OBJ @I-OBJ) ("N NOM" NIL @SUBJ @OBJ @I-OBJ @PCOMPL-S @PCOMPL-O @APP @NN&gt; @&lt;P) A pronoun in the genitive case is either prenominal genitival modifier, subject predicate complement, or object predicate complement.</S>
  <S sid="177" ssid="177">An adjective is pre- nominal adjectival modifier, predicate complement, subject, object, or indirect object (the last three func- tions refer to occurrences of adjectives as nomi- nalized heads), etc.</S>
  <S sid="178" ssid="178">Often morphosyntactic mappings may be consid- erably constrained by imposing context conditions : ("N NOM" ((1 N)) @NN&gt;) ("N NOM" ((-1 PREP)) @&lt;P) ("INF" ((-2 N) (-1 TO)) @&lt;NOM-FMAINV) These state that a noun in the nominative case premodifies (@NN&gt;) a subsequently following noun (in compounds, cf.</S>
  <S sid="179" ssid="179">computer screen), that a noun in the nominative case after a preposition is @&lt;P, and that an infinitive preceded by a noun + to post- modifies that noun.</S>
  <S sid="180" ssid="180">In this way, the task of syntactic analysis is simpli- fied as much as possible, as early as possible.</S>
  <S sid="181" ssid="181">Superfluous alternatives are not even introduced into the parsing of a particular clause if it is clear at the outset, i.e.</S>
  <S sid="182" ssid="182">either in the lexicon or at the stage of morphosyntactic mapping, that certain labels are incompatible with the clausal context at hand.</S>
  <S sid="183" ssid="183">There may be several mapping statements for the same morphological feature(s), e.g.</S>
  <S sid="184" ssid="184">Map- ping statements with more narrowly specified con- texts have precedence over more general statements.</S>
  <S sid="185" ssid="185">In the present implementation of CGP, the mapping statements apply in plain linear order.</S>
  <S sid="186" ssid="186">The last mapping statement for a particular feature 1"/2 provides the worst case, i.e.</S>
  <S sid="187" ssid="187">the maximal assort- ment of function labels for that feature.</S>
  <S sid="188" ssid="188">Every word-form will have at least one syntactic label after morphosyntactic mapping, and all possible syntactic ambiguities have also now been introduced.</S>
  <S sid="189" ssid="189">In step three, syntactic constraints reduce syn- tactic ambiguities where such exist due either to lexical information (cf.</S>
  <S sid="190" ssid="190">the infinitive move above), or to morphosyntactic mapping.</S>
  <S sid="191" ssid="191">Syntactic constraints discard the remaining superfluous syntactic labels.</S>
  <S sid="192" ssid="192">Syntactic constraints differ from context-dependent disambiguation constraints only by having one of the syntactic operators =s!, or =sO (where s indicates that the constraint is a syntactic one).</S>
  <S sid="193" ssid="193">Their seman- tics is identical to that of the disambiguation con- straints: (@w =sO "@+FMAINV" (*-1 VFIN)) (@w =sO "@+FMAINV" (1 VFIN)) (@w =s!</S>
  <S sid="194" ssid="194">"@SUBJ" (0 NOMHEAD) (NOT "1 NOM- HEAD) (1 VFIN)(NOT *-1 NOMHEAD)) The first two constraints discard @+FMAINV as a syntactic alternative if there is a unique finite main verb either to the left or to the right in the same clause.</S>
  <S sid="195" ssid="195">The third constraint prescribes that @SUBJ is the correct label for a noun or pronoun (NOM- HEAD in target position, i.e.</S>
  <S sid="196" ssid="196">position 0), with a finite verb somewhere to the right in the same clause and no similar noun or pronoun either left or right (-- woman -- laughed --).</S>
  <S sid="197" ssid="197">Maximal profit is extracted from the Uniqueness Principle.</S>
  <S sid="198" ssid="198">At each syntactic step (before mapping, after mapping, and after the application of a syntactic constraint hat affects the labels obeying the Unique- hess Principle), each clause is checked for eventual violations of this principle.</S>
  <S sid="199" ssid="199">In this way many ambigu- ous primary labels may be safely discarded.</S>
  <S sid="200" ssid="200">Here is an example sentence, fully analyzed and unambiguous in all respects but the one syntactic ambiguity remaining for the word in: Bill Bill "&lt;Proper&gt; N NOM SG "@SUBJ saw see" &lt;SVO&gt; V PAST" @+FMAINV the the" DET" @DN&gt; little little" A ABS" @AN&gt; dog dog" N NOM SG" @OBJ in in" PREP "@&lt;NOM @ADVL the the" DET" @DN&gt; park park" N NOM SG "@&lt;P 5 There is no non-semantic way of resolving the attachment ambiguity of the adverbial in the park.</S>
  <S sid="201" ssid="201">This ambiguity is therefore properly unresolved.</S>
  <S sid="202" ssid="202">In CGP, all ambiguities are there after morpho- syntactic mapping and require no additional process- ing load.</S>
  <S sid="203" ssid="203">Notice in passing that CGP makes an interesting prediction which might be relevant from the viewpoint of mental language processing.</S>
  <S sid="204" ssid="204">Dis- ambiguation, i.e.</S>
  <S sid="205" ssid="205">finding a unique interpretation by applying constraints, requires more effort than leav.o ing all or many ambiguities unresolved (in which case constraints were not applied).</S>
  <S sid="206" ssid="206">Parsers based on autonomous grammars tend to work in the oppo- site way (the more ambiguities, the more rules to apply and trees to construct).</S>
  <S sid="207" ssid="207">In CGP, there is precisely one output for each sentence regardless of how many unresolved ambi- guities there might be pending in it.</S>
  <S sid="208" ssid="208">This output is an annotated linear, flat string of word-forms, base- forms, inherent features, morphological features, and syntactic function labels, all of the same formal type.</S>
  <S sid="209" ssid="209">The dependency structure of the sentence is expressed by the pointers and parts of speech of the syntactic labels.There is no proliferation of parse trees, often encountered in other types of parsers, even if morphological and/or syntactic ambiguities are left unresolved.</S>
  <S sid="210" ssid="210">Implementation I have written an interpreter in strict Common Lisp for parsing with constraint grammars.</S>
  <S sid="211" ssid="211">This is what we call the Constraint Grammar Parser (CGP).</S>
  <S sid="212" ssid="212">CGP currently runs on Unix workstations under Lucid Common Lisp and Allegro Common Lisp.</S>
  <S sid="213" ssid="213">A PC version with the same functionality runs under mu- Lisp on ordinary XT/AT machines.</S>
  <S sid="214" ssid="214">CGP takes two inputs, a constraint file with set declarations, mapping statements, context-depend- ent disambiguation constraints, syntactic con- straints, etc., and a text file with morphologically analyzed word-forms (cf.</S>
  <S sid="215" ssid="215">The optimal implementation of constraint grammar parsing would be in terms of finite-state machines (cf.</S>
  <S sid="216" ssid="216">Kimmo Koskenniemi, COLING-90 Proceedings, Vol.</S>
  <S sid="217" ssid="217">Discussion The CG formalism has so far been extensively applied only to English context-dependent disam- biguation and syntax.</S>
  <S sid="218" ssid="218">Presently some 400 context-dependent disam- biguation constraints have been formulated for Eng- lish by Atro Voutilainen, Juha Heikkil~, and Arto Anttila.</S>
  <S sid="219" ssid="219">These constraints prune 95-97 % of all mor- phological ambiguities in running English text, de- pending upon the complexity of the text.</S>
  <S sid="220" ssid="220">This level (which is not linal as work on the most recalcitrant problems proceeds) has been achieved using plain morphological information, i.e.</S>
  <S sid="221" ssid="221">information present in [he cohorts of neighbouring words.</S>
  <S sid="222" ssid="222">No syntactic functions have been used.</S>
  <S sid="223" ssid="223">No enorrnous amounts of disambiguation constraints will thus be needed, the finar order of magnitude might be some 500.</S>
  <S sid="224" ssid="224">We consider this number surprisingly small.</S>
  <S sid="225" ssid="225">It shows the descriptive power of low-level morphology-based constraints.</S>
  <S sid="226" ssid="226">The most successful achievements so far in the domain of large-scale morphological disambigua- tion of running text have been those for English reported by Garside, Leech, and Sampson (1987), on tagging the LOB corpus, and Church (1988), on assigning part-of-speech labels and parsing noun phrases.</S>
  <S sid="227" ssid="227">Success rates ranging between 95-99% are reported, depending on how success is defined.</S>
  <S sid="228" ssid="228">These approaches are probabilistic and based on transitional probabilities calculated from extensive pretagged corpora.</S>
  <S sid="229" ssid="229">As for morphological disambiguation, CGP has achieved almost the same success rate.</S>
  <S sid="230" ssid="230">In compari- son, we first note that CG provides a formalism, based on ordinary linguistic concepts, that is applic- able to any language.</S>
  <S sid="231" ssid="231">Work on Finnish and Swedish is in progress.</S>
  <S sid="232" ssid="232">Second, CG fully integrates morpho- logy and surface syntax within the same formalism.</S>
  <S sid="233" ssid="233">Our present success rate for syntax, with some 220 mapping statements and 25 syntactic constraints, is slightly above 90% (words with unique syntactic labels).</S>
  <S sid="234" ssid="234">The remaining words have more than one syntactic label (one of which is correct).</S>
  <S sid="235" ssid="235">References Church, K. 1988.</S>
  <S sid="236" ssid="236">"A Stochastic Parts Program and Noun Phrase Parser for Running Text."</S>
  <S sid="237" ssid="237">SecondCon- ference on Applied Natural Language Processing, Proceedings of the Conference, ACL 1988, pp.136- 143.</S>
  <S sid="238" ssid="238">Garside, Roger, Leech, Geoffrey, and Sampson, Geoffrey 1987 (eds.</S>
  <S sid="239" ssid="239">), 7he Computational Analysis of English.</S>
  <S sid="240" ssid="240">Longman, London and New York.</S>
  <S sid="241" ssid="241">Karlsson, Fred 1989.</S>
  <S sid="242" ssid="242">"Parsing and Constraint Grammar".</S>
  <S sid="243" ssid="243">Manuscript, Research Unit for Computa- tional Linguistics, University of Helsinki.</S>
  <S sid="244" ssid="244">Koskenniemi, Kimmo 1983.</S>
  <S sid="245" ssid="245">Two-Level Morpho- logy.</S>
  <S sid="246" ssid="246">A General Computational Model for Word-Form Recognition and Production.</S>
  <S sid="247" ssid="247">Department of General Linguistics, University of Helsinki, Publications No.</S>
  <S sid="248" ssid="248">Acknowledgements This research was supported by the Academy of Finland in 1985-89, and by the Technology Develop- ment Centre of Finland (TEKES) in 1989-90.</S>
  <S sid="249" ssid="249">Part of it belongs to the ESPRIT II project SIMPR (2083).</S>
  <S sid="250" ssid="250">I am indebted to Kimmo Koskenniemi for help in the field of morphological analysis, and to Atro Vouti- lainen, Juha Heikkil~, and Arto Anttila for help in testing the formalism.</S>
</PAPER>
