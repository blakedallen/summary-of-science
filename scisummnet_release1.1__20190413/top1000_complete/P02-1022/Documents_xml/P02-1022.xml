<PAPER>
  <S sid="0">GATE: A Framework And Graphical Development Environment For Robust NLP Tools And Applications</S>
  <ABSTRACT>
    <S sid="1" ssid="1">peg,. pyscropyrssexa pa...Inn/bee(Esrey:,we6onee nocnemere)seressartba 43csrassartsmeuroto-ssoprbonourseLproronparserrna flaw) sror spe6yer &#8212; ,r1 Transducerloacleo a erkirlE.FOL.</S>
    <S sid="2" ssid="2">*I PD.021 fP21111&#8220;enwialitneI r Figure 2: Unicode text in Gate2 witnessed on the software scene with the emergence of Unicode as a universal standard for representing textual data.</S>
    <S sid="3" ssid="3">GATE supports multilingual data processing using Unicode as its default text encoding.</S>
    <S sid="4" ssid="4">It also provides a means of entering text in various languages, using virtual keyboards where the language is not supported by the underlying operating platform.</S>
    <S sid="5" ssid="5">(Note that although Java represents characters as Unicode, it doesn't support input in many of the languages covered by Unicode.)</S>
    <S sid="6" ssid="6">Currently 28 languages are supported, and more are planned for future releases.</S>
    <S sid="7" ssid="7">Because GATE is an open architecture, new virtual keyboards can be defined by the users and added to the system as needed.</S>
    <S sid="8" ssid="8">For displaying the text, GATE relies on the rendering facilities offered by the Java implementation for the platform it runs on.</S>
    <S sid="9" ssid="9">Figure 2 gives an example of text in various languages displayed by GATE.</S>
    <S sid="10" ssid="10">The ability to handle Unicode data, along with the separation between data and implementation, allows LE systems based on GATE to be ported to new languages with no additional overhead apart from the development of the resources needed for the specific language.</S>
    <S sid="11" ssid="11">These facilities have been developed as part of the EMILLE project (McEnery et al., 2000), which focuses on the construction a 63 million word electronic corpus of South Asian languages.</S>
    <S sid="12" ssid="12">3 Applications One of GATE's strengths is that it is flexible and robust enough to enable the development of a wide range of applications within its framework.</S>
    <S sid="13" ssid="13">In this section, we describe briefly some of the NLP applications we have developed using the GATE architecture.</S>
    <S sid="14" ssid="14">3.1 MUSE The MUSE system (Maynard et al., 2001) is a multi-purpose Named Entity recognition system which is capable of processing texts from widely different domains and genres, thereby aiming to reduce the need for costly and time-consuming adaptation of existing resources to new applications and domains.</S>
    <S sid="15" ssid="15">The system aims to identify the parameters relevant to the creation of a name recognition system across different types of variability such as changes in domain, genre and media.</S>
    <S sid="16" ssid="16">For example, less formal texts may not follow standard capitalisation, punctuation and spelling formats, which can be a problem for many generic NE systems.</S>
    <S sid="17" ssid="17">Current evaluations with this system average around 93% precision and 95% recall across a variety of text types.</S>
    <S sid="18" ssid="18">3.2 ACE The MUSE system has also been adapted to take part in the current ACE (Automatic Content Extraction) program run by NIST.</S>
    <S sid="19" ssid="19">This requires systems to perform recognition and tracking tasks of named, nominal and pronominal entities and their mentions across three types of clean news text (newswire, broadcast news and newspaper) and two types of degraded news text (OCR output and ASR output).</S>
    <S sid="20" ssid="20">3.3 MUMIS The MUMIS (MUltiMedia Indexing and Searching environment) system uses Information Extraction components developed within GATE to produce formal annotations about essential events in football video programme material.</S>
    <S sid="21" ssid="21">This IE system comprises versions of the tokenisation, sentence detection, POS-tagging, and semantic tagging modules developed as part of GATE's standard resources, but also includes morphological analysis, full syntactic parsing and discourse interpretation modules, thereby enabling the production of annotations over text encoding structural, lexical, syntactic and semantic information.</S>
    <S sid="22" ssid="22">The semantic tagging module currently achieves around 91% precision and 76% recall, a significant improvement on a baseline named entity recognition system evaluated against it.</S>
    <S sid="23" ssid="23">4 Processing Resources Provided with GATE is a set of reusable processing resources for common NLP tasks.</S>
    <S sid="24" ssid="24">(None of them are definitive, and the user can replace and/or extend them as necessary.)</S>
    <S sid="25" ssid="25">These are packaged together to form ANNIE, A Nearly- New IE system, but can also be used individually or coupled together with new modules in order to create new applications.</S>
    <S sid="26" ssid="26">For example, many other NLP tasks might require a sentence splitter and POS tagger, but would not necessarily require resources more specific to IE tasks such as a named entity transducer.</S>
    <S sid="27" ssid="27">The system is in use for a variety of IE and other tasks, sometimes in combination with other sets of application-specific modules.</S>
    <S sid="28" ssid="28">ANNIE consists of the following main processing resources: tokeniser, sentence splitter, POS tagger, gazetteer, finite state transducer (based on GATE's built-in regular expressions over annotations language (Cunningham et al., 2002)), orthomatcher and coreference resolver.</S>
    <S sid="29" ssid="29">The resources communicate via GATE's annotation API, which is a directed graph of arcs bearing arbitrary feature/value data, and nodes rooting this data into document content (in this case text). text into simple tokens, such as numbers, punctuation, symbols, and words of different types (e.g. with an initial capital, all upper case, etc.).</S>
    <S sid="30" ssid="30">The aim is to limit the work of the tokeniser to maximise efficiency, and enable greater flexibility by placing the burden of analysis on the grammars.</S>
    <S sid="31" ssid="31">This means that the tokeniser does not need to be modified for different applications or text types. splitter a cascade of finitestate transducers which segments the text into sentences.</S>
    <S sid="32" ssid="32">This module is required for the tagger.</S>
    <S sid="33" ssid="33">Both the splitter and tagger are domainand application-independent. a modified version of the Brill tagger, which produces a part-of-speech tag as an annotation on each word or symbol.</S>
    <S sid="34" ssid="34">Neither the splitter nor the tagger are a mandatory part of the NE system, but the annotations they produce can be used by the grammar (described below), in order to increase its power and coverage. of lists such as cities, organisations, days of the week, etc.</S>
    <S sid="35" ssid="35">It not only consists of entities, but also of names of useful as typical company designators (e.g.</S>
    <S sid="36" ssid="36">'Ltd:), titles, etc.</S>
    <S sid="37" ssid="37">The gazetteer lists are compiled into finite state machines, which can match text tokens. tagger of handcrafted rules written in the JAPE (Java Annotations Pattern Engine) language (Cunningham et al., 2002), which describe patterns to match and annotations to be created as a result.</S>
    <S sid="38" ssid="38">JAPE is a version of CPSL (Common Pattern Specification Language) (Appelt, 1996), which provides finite state transduction over annotations based on regular expressions.</S>
    <S sid="39" ssid="39">A JAPE grammar consists of a set of phases, each of which consists of a set of pattern/action rules, and which run sequentially.</S>
    <S sid="40" ssid="40">Patterns can be specified by describing a specific text string, or annotations previously created by modules such as the tokeniser, gazetteer, or document format analysis.</S>
    <S sid="41" ssid="41">Rule prioritisation (if activated) prevents multiple assignment of annotations to the same text string. another optional module for the IE system.</S>
    <S sid="42" ssid="42">Its primary objective is to perform co-reference, or entity tracking, by recognising relations between entities.</S>
    <S sid="43" ssid="43">It also has a secondary role in improving named entity recognition by assigning annotations to previously unclassified names, based on relations with existing entities. identity relations between entities in the text.</S>
    <S sid="44" ssid="44">For more details see (Dimitrov, 2002).</S>
    <S sid="45" ssid="45">4.1 Implementation The implementation of the processing resources is centred on robustness, usability and the clear distinction between declarative data representations and finite state algorithms The behaviour of all the processors is completely controlled by external resources such as grammars or rule sets, which makes them easily modifiable by users who do not need to be familiar with programming languages.</S>
    <S sid="46" ssid="46">The fact that all processing resources use finite-state transducer technology makes them quite performant in terms of execution times.</S>
    <S sid="47" ssid="47">Our initial experiments show that the full named entity recognition system is capable of processing around 2.5KB/s on a PITT 450 with 256 MB RAM (independently of the size of the input file; the processing requirement is linear in relation to the text size).</S>
    <S sid="48" ssid="48">Scalability was tested by running the ANNIE modules over a randomly chosen part of the British National Corpus (10% of all documents), which contained documents of up to 17MB in size.</S>
    <S sid="49" ssid="49">5 Language Resource Creation Since many NLP algorithms require annotated corpora for training, GATE's development environment provides easy-to-use and extendable facilities for text annotation.</S>
    <S sid="50" ssid="50">In order to test their usability in practice, we used these facilities to build corpora of named entity annotated texts for the MUSE, ACE, and MUMIS applications.</S>
    <S sid="51" ssid="51">The annotation can be done manually by the user or semi-automatically by running some processing resources over the corpus and then correcting/adding new annotations manually.</S>
    <S sid="52" ssid="52">Depending on the information that needs to be annotated, some ANNIE modules can be used or adapted to bootstrap the corpus annotation task.</S>
    <S sid="53" ssid="53">For example, users from the humanities created a gazetteer list with 18th century place names in London, which when supplied to the ANNIE gazetteer, allows the automatic annotation of place information in a large collection of 18th century court reports from the Old Bailey in London.</S>
    <S sid="54" ssid="54">Since manual annotation is a difficult and error-prone task, GATE tries to make it simple to use and yet keep it flexible.</S>
    <S sid="55" ssid="55">To add a new annotation, one selects the text with the mouse (e.g., &amp;quot;Mr. Clever&amp;quot;) and then clicks on the desired annotation type (e.g., Person), which is shown in the list of types on the right-handside of the document viewer (see Figure 1).</S>
    <S sid="56" ssid="56">If however the desired annotation type does not already appear there or the user wants to associate more detailed information with the annotation (not just its type), then an annotation editing dialogue can be used.</S>
    <S sid="57" ssid="57">6 Evaluation A vital part of any language engineering application is the evaluation of its performance, and a development environment for this purpose would not be complete without some mechanisms for its measurement in a large number of test cases.</S>
    <S sid="58" ssid="58">GATE contains two such mechanisms: an evaluation tool (AnnotationDiff) which enables automated performance measurement and visualisation of the results, and a benchmarking tool, which enables the tracking of a system's progress and regression testing.</S>
    <S sid="59" ssid="59">6.1 The AnnotationDiff Tool Gate's AnnotationDiff tool enables two sets of annotations on a document to be compared, in order to either compare a system-annotated text with a reference (hand-annotated) text, or to compare the output of two different versions of the system (or two different systems).</S>
    <S sid="60" ssid="60">For each annotation type, figures are generated for precision, recall, F-measure and false positives.</S>
    <S sid="61" ssid="61">The AnnotationDiff viewer displays the two sets of annotations, marked with different colours (similar to 'visual diff' implementations such as in the MKS Toolkit or TkDiff).</S>
    <S sid="62" ssid="62">Annotations in the key set have two possible colours depending on their state: white for annotations which have a compatible (or partially compatible) annotation in the response set, and orange for annotations which are missing in the response set.</S>
    <S sid="63" ssid="63">Annotations in the response set have three possible colours: green if they are compatible with the key annotation, blue if they Figure 3: Fragment of results from benchmark tool are partially compatible, and red if they are spurious.</S>
    <S sid="64" ssid="64">In the viewer, two annotations will be positioned on the same row if they are co-extensive, and on different rows if not.</S>
    <S sid="65" ssid="65">6.2 Benchmarking tool GATE's benchmarking tool differs from the AnnotationDiff in that it enables evaluation to be carried out over a whole corpus rather than a single document.</S>
    <S sid="66" ssid="66">It also enables tracking of the system's performance over time.</S>
    <S sid="67" ssid="67">The tool requires a clean version of a corpus (with no annotations) and an annotated reference corpus.</S>
    <S sid="68" ssid="68">First of all, the tool is run in generation mode to produce a set of texts annotated by the system.</S>
    <S sid="69" ssid="69">These texts are stored for future use.</S>
    <S sid="70" ssid="70">The tool can then be run in three ways: 1.</S>
    <S sid="71" ssid="71">Comparing the annotated set with the reference set; 2.</S>
    <S sid="72" ssid="72">Comparing the annotated set with the set produced by a more recent version of the system resources (the latest set); 3.</S>
    <S sid="73" ssid="73">Comparing the latest set with the reference set.</S>
    <S sid="74" ssid="74">In each case, performance statistics will be provided for each text in the set, and overall statistics for the entire set, in comparison with the reference set.</S>
    <S sid="75" ssid="75">In case 2, information is also provided about whether the figures have increased or decreased in comparison with the annotated set.</S>
    <S sid="76" ssid="76">The annotated set can be updated at any time by rerunning the tool in generation mode with the latest version of the system resources.</S>
    <S sid="77" ssid="77">Furthermore, the system can be run in verbose mode, where for each figure below a certain threshold (set by the user), the non-coextensive annotations (and their corresponding text) will be displayed.</S>
    <S sid="78" ssid="78">The output of the tool is written to an HTML file in tabular form, as shown in Figure 3.</S>
    <S sid="79" ssid="79">Current evaluations for the MUSE NE system are producing average figures of 90-95% Precision and Recall on a selection of different text types (spoken transcriptions, emails etc.).</S>
    <S sid="80" ssid="80">The default ANNIE system produces figures of between 80-90% Precision and Recall on news texts.</S>
    <S sid="81" ssid="81">This figure is lower than for the MUSE system, because the resources have not been tuned to a specific text type or application, but are intended to be adapted as necessary.</S>
    <S sid="82" ssid="82">Work on resolution of anaphora is currently averaging 63% Precision and 45% Recall, although this work is still very much in progress, and we expect these figures to improve in the near future.</S>
    <S sid="83" ssid="83">7 Related Work GATE draws from a large pool of previous work on infrastructures, architectures and development environments for representing and processing language resources, corpora, and annotations.</S>
    <S sid="84" ssid="84">Due to space limitations here we will discuss only a small subset.</S>
    <S sid="85" ssid="85">For a detailed review and its use for deriving the desiderata for this architecture see (Cunningham, 2000).</S>
    <S sid="86" ssid="86">Work on standard ways to deal with XML data is relevant here, such as the LT XML work at Edinburgh (Thompson and McKelvie, 1997), as is work on managing collections of documents and their formats, e.g.</S>
    <S sid="87" ssid="87">(Brugman et al., 1998; Grishman, 1997; Zajac, 1998).</S>
    <S sid="88" ssid="88">We have also drawn from work on representing information about text and speech, e.g.</S>
    <S sid="89" ssid="89">(Brugman et al., 1998; Mikheev and Finch, 1997; Zajac, 1998; Young et al., 1999), as well as annotation standards, such as the ATLAS project (an architecture for linguistic annotation) at LDC (Bird et kirlactunerkterripNerl ABC19980430.1830.0858.sgm Annotation tope.</S>
    <S sid="90" ssid="90">, GPE RecallIncreaseon Atonaltmarked iron 06371426571426571la10 type Organization 1.0 increaseon hurnan-markedto 1 0 09444444444444444 Mug 07, limEll.ncreaseon tom0345to 07, 14153ING ANNOTATIONSIt To automatetetteABC Ir.NNOTATKMISinTo embroil,bath PARTIALLYCORRECT Pl4071&amp;quot;ATIC*15nhe automateIDA, PratotationType Annotation type Person Precision increase on human-marked from 08947368421052632 lc 09444444444444444 03444444444444444 al., 2000).</S>
    <S sid="91" ssid="91">Our approach is also related to work on user interfaces to architectural facilities such as development environments, e.g.</S>
    <S sid="92" ssid="92">(Brugman et al., 1998) and to work on comparing different versions of information, e.g.</S>
    <S sid="93" ssid="93">(Sparck-Jones and Galliers, 1996; Paggio, 1998).</S>
    <S sid="94" ssid="94">This work is particularly novel in that it addresses the complete range of issues in NLP application development in a flexible and extensible way, rather than focusing just on some particular aspect of the development process.</S>
    <S sid="95" ssid="95">In addition, it promotes robustness, re-usability, and scalability as important principles that help with the construction of practical NLP systems.</S>
    <S sid="96" ssid="96">8 Conclusions In this paper we have described an infrastructure for language engineering software which aims to assist the develeopment of robust tools and resources for NLP.</S>
    <S sid="97" ssid="97">One future direction is the integration of processing resources which learn in the background while the user is annotating corpora in GATE's visual environment.</S>
    <S sid="98" ssid="98">Currently, statistical models can be integrated but need to be trained separately.</S>
    <S sid="99" ssid="99">We are also extending the system to handle language generation modules, in order to enable the construction of applications which require language production in addition to analysis, e.g. intelligent report generation from IE data.</S>
  </ABSTRACT>
  <SECTION title="" number="1">
    <S sid="100" ssid="1">ferent components, and ensures that the component interactions satisfy the system requirements.</S>
    <S sid="101" ssid="2">As a framework, it provides a reusable design for an LE software system and a set of prefabricated software building blocks that language engineers can use, extend and customise for their specific needs.</S>
    <S sid="102" ssid="3">As a development environment, it helps its users to minimise the time they spend building new LE systems or modifying existing ones, by aiding overall development and providing a debugging mechanism for new modules.</S>
    <S sid="103" ssid="4">Because GATE has a componentbased model, this allows for easy coupling and decoupling of the processors, thereby facilitating comparison of alternative configurations of the system or different implementations of the same module (e.g., different parsers).</S>
    <S sid="104" ssid="5">The availability of tools for easy visualisation of data at each point during the development process aids immediate interpretation of the results.</S>
    <S sid="105" ssid="6">The GATE framework comprises a core library (analogous to a bus backplane) and a set of reusable LE modules.</S>
    <S sid="106" ssid="7">The framework implements the architecture and provides (amongst other things) facilities for processing and visualising resources, including representation, import and export of data.</S>
    <S sid="107" ssid="8">The reusable modules provided with the backplane are able to perform basic language processing tasks such as POS tagging and semantic tagging.</S>
    <S sid="108" ssid="9">This eliminates the need for users to keep recreating the same kind of resources, and provides a good starting point for new applications.</S>
    <S sid="109" ssid="10">The modules are described in more detail in Section 4.</S>
    <S sid="110" ssid="11">Applications developed within GATE can be deployed outside its Graphical User Interface (GUI), using programmatic access via the GATE API (see http: //gat e . ac .uk).</S>
    <S sid="111" ssid="12">In addition, the reusable modules, the document and annotation model, and the visualisation components can all be used independently of the development environment.</S>
    <S sid="112" ssid="13">GATE components may be implemented by a variety of programming languages and databases, but in each case they are represented to the system as a Java class.</S>
    <S sid="113" ssid="14">This class may simply call the underlying program or provide an access layer to a database; alternatively it may implement the whole component.</S>
    <S sid="114" ssid="15">In the rest of this section, we show how the GATE infrastructure takes care of the resource discovery, loading, and execution, and briefly discuss data storage and visualisation.</S>
    <S sid="115" ssid="16">The title expresses succinctly the distinction made in GATE between data, algorithms, and ways of visualising them.</S>
    <S sid="116" ssid="17">In other words, GATE components are one of three types: These resources can be local to the user's machine or remote (available via HTTP), and all can be extended by users without modification to GATE itself.</S>
    <S sid="117" ssid="18">One of the main advantages of separating the algorithms from the data they require is that the two can be developed independently by language engineers with different types of expertise, e.g. programmers and linguists.</S>
    <S sid="118" ssid="19">Similarly, separating data from its visualisation allows users to develop alternative visual resources, while still using a language resource provided by GATE.</S>
    <S sid="119" ssid="20">Collectively, all resources are known as CREOLE (a Collection of REusable Objects for Language Engineering), and are declared in a repository XML file, which describes their name, implementing class, parameters, icons, etc.</S>
    <S sid="120" ssid="21">This repository is used by the framework to discover and load available resources.</S>
    <S sid="121" ssid="22">A parameters tag describes the parameters which each resource needs when created or executed.</S>
    <S sid="122" ssid="23">Parameters can be optional, e.g. if a document list is provided when the corpus is constructed, it will be populated automatically with these documents.</S>
    <S sid="123" ssid="24">When an application is developed within GATE's graphical environment, the user chooses which processing resources go into it (e.g. tokeniser, POS tagger), in what order they will be executed, and on which data (e.g. document or corpus).</S>
    <S sid="124" ssid="25">The execution parameters of each resource are also set there, e.g. a loaded document is given as a parameter to each PR.</S>
    <S sid="125" ssid="26">When the application is run, the modules will be executed in the specified order on the given document.</S>
    <S sid="126" ssid="27">The results can be viewed in the document viewer/editor (see Figure 1).</S>
    <S sid="127" ssid="28">GATE supports a variety of formats including XML, RTF, HTML, SGML, email and plain text.</S>
    <S sid="128" ssid="29">In all cases, when a document is created/opened in GATE, the format is analysed and converted into a single unified model of annotation.</S>
    <S sid="129" ssid="30">The annotation format is a modified form of the TIPSTER format (Grishman, 1997) which has been made largely compatible with the Atlas format (Bird et al., 2000), and uses the now standard mechanism of 'stand-off markup' (Thompson and McKelvie, 1997).</S>
    <S sid="130" ssid="31">The annotations associated with each document are a structure central to GATE, because they encode the language data read and produced by each processing module.</S>
    <S sid="131" ssid="32">The GATE framework also provides persistent storage of language resources.</S>
    <S sid="132" ssid="33">It currently offers three storage mechanisms: one uses relational databases (e.g.</S>
    <S sid="133" ssid="34">Oracle) and the other two are file- based, using Java serialisation or an XML-based internal format.</S>
    <S sid="134" ssid="35">GATE documents can also be exported back to their original format (e.g.</S>
    <S sid="135" ssid="36">SGML/XML for the British National Corpus (BNC)) and the user can choose whether some additional annotations (e.g. named entity information) are added to it or not.</S>
    <S sid="136" ssid="37">To summarise, the existence of a unified data structure ensures a smooth communication between components, while the provision of import and export capabilities makes communication with the outside world simple.</S>
    <S sid="137" ssid="38">In recent years, the emphasis on multilinguality has grown, and important advances have been witnessed on the software scene with the emergence of Unicode as a universal standard for representing textual data.</S>
    <S sid="138" ssid="39">GATE supports multilingual data processing using Unicode as its default text encoding.</S>
    <S sid="139" ssid="40">It also provides a means of entering text in various languages, using virtual keyboards where the language is not supported by the underlying operating platform.</S>
    <S sid="140" ssid="41">(Note that although Java represents characters as Unicode, it doesn't support input in many of the languages covered by Unicode.)</S>
    <S sid="141" ssid="42">Currently 28 languages are supported, and more are planned for future releases.</S>
    <S sid="142" ssid="43">Because GATE is an open architecture, new virtual keyboards can be defined by the users and added to the system as needed.</S>
    <S sid="143" ssid="44">For displaying the text, GATE relies on the rendering facilities offered by the Java implementation for the platform it runs on.</S>
    <S sid="144" ssid="45">Figure 2 gives an example of text in various languages displayed by GATE.</S>
    <S sid="145" ssid="46">The ability to handle Unicode data, along with the separation between data and implementation, allows LE systems based on GATE to be ported to new languages with no additional overhead apart from the development of the resources needed for the specific language.</S>
    <S sid="146" ssid="47">These facilities have been developed as part of the EMILLE project (McEnery et al., 2000), which focuses on the construction a 63 million word electronic corpus of South Asian languages.</S>
  </SECTION>
  <SECTION title="3 Applications" number="2">
    <S sid="147" ssid="1">One of GATE's strengths is that it is flexible and robust enough to enable the development of a wide range of applications within its framework.</S>
    <S sid="148" ssid="2">In this section, we describe briefly some of the NLP applications we have developed using the GATE architecture.</S>
    <S sid="149" ssid="3">The MUSE system (Maynard et al., 2001) is a multi-purpose Named Entity recognition system which is capable of processing texts from widely different domains and genres, thereby aiming to reduce the need for costly and time-consuming adaptation of existing resources to new applications and domains.</S>
    <S sid="150" ssid="4">The system aims to identify the parameters relevant to the creation of a name recognition system across different types of variability such as changes in domain, genre and media.</S>
    <S sid="151" ssid="5">For example, less formal texts may not follow standard capitalisation, punctuation and spelling formats, which can be a problem for many generic NE systems.</S>
    <S sid="152" ssid="6">Current evaluations with this system average around 93% precision and 95% recall across a variety of text types.</S>
    <S sid="153" ssid="7">The MUSE system has also been adapted to take part in the current ACE (Automatic Content Extraction) program run by NIST.</S>
    <S sid="154" ssid="8">This requires systems to perform recognition and tracking tasks of named, nominal and pronominal entities and their mentions across three types of clean news text (newswire, broadcast news and newspaper) and two types of degraded news text (OCR output and ASR output).</S>
    <S sid="155" ssid="9">The MUMIS (MUltiMedia Indexing and Searching environment) system uses Information Extraction components developed within GATE to produce formal annotations about essential events in football video programme material.</S>
    <S sid="156" ssid="10">This IE system comprises versions of the tokenisation, sentence detection, POS-tagging, and semantic tagging modules developed as part of GATE's standard resources, but also includes morphological analysis, full syntactic parsing and discourse interpretation modules, thereby enabling the production of annotations over text encoding structural, lexical, syntactic and semantic information.</S>
    <S sid="157" ssid="11">The semantic tagging module currently achieves around 91% precision and 76% recall, a significant improvement on a baseline named entity recognition system evaluated against it.</S>
  </SECTION>
  <SECTION title="4 Processing Resources" number="3">
    <S sid="158" ssid="1">Provided with GATE is a set of reusable processing resources for common NLP tasks.</S>
    <S sid="159" ssid="2">(None of them are definitive, and the user can replace and/or extend them as necessary.)</S>
    <S sid="160" ssid="3">These are packaged together to form ANNIE, A NearlyNew IE system, but can also be used individually or coupled together with new modules in order to create new applications.</S>
    <S sid="161" ssid="4">For example, many other NLP tasks might require a sentence splitter and POS tagger, but would not necessarily require resources more specific to IE tasks such as a named entity transducer.</S>
    <S sid="162" ssid="5">The system is in use for a variety of IE and other tasks, sometimes in combination with other sets of application-specific modules.</S>
    <S sid="163" ssid="6">ANNIE consists of the following main processing resources: tokeniser, sentence splitter, POS tagger, gazetteer, finite state transducer (based on GATE's built-in regular expressions over annotations language (Cunningham et al., 2002)), orthomatcher and coreference resolver.</S>
    <S sid="164" ssid="7">The resources communicate via GATE's annotation API, which is a directed graph of arcs bearing arbitrary feature/value data, and nodes rooting this data into document content (in this case text).</S>
    <S sid="165" ssid="8">The tokeniser splits text into simple tokens, such as numbers, punctuation, symbols, and words of different types (e.g. with an initial capital, all upper case, etc.).</S>
    <S sid="166" ssid="9">The aim is to limit the work of the tokeniser to maximise efficiency, and enable greater flexibility by placing the burden of analysis on the grammars.</S>
    <S sid="167" ssid="10">This means that the tokeniser does not need to be modified for different applications or text types.</S>
    <S sid="168" ssid="11">The sentence splitter is a cascade of finitestate transducers which segments the text into sentences.</S>
    <S sid="169" ssid="12">This module is required for the tagger.</S>
    <S sid="170" ssid="13">Both the splitter and tagger are domainand application-independent.</S>
    <S sid="171" ssid="14">The tagger is a modified version of the Brill tagger, which produces a part-of-speech tag as an annotation on each word or symbol.</S>
    <S sid="172" ssid="15">Neither the splitter nor the tagger are a mandatory part of the NE system, but the annotations they produce can be used by the grammar (described below), in order to increase its power and coverage.</S>
    <S sid="173" ssid="16">The gazetteer consists of lists such as cities, organisations, days of the week, etc.</S>
    <S sid="174" ssid="17">It not only consists of entities, but also of names of useful indicators, such as typical company designators (e.g.</S>
    <S sid="175" ssid="18">'Ltd:), titles, etc.</S>
    <S sid="176" ssid="19">The gazetteer lists are compiled into finite state machines, which can match text tokens.</S>
    <S sid="177" ssid="20">The semantic tagger consists of handcrafted rules written in the JAPE (Java Annotations Pattern Engine) language (Cunningham et al., 2002), which describe patterns to match and annotations to be created as a result.</S>
    <S sid="178" ssid="21">JAPE is a version of CPSL (Common Pattern Specification Language) (Appelt, 1996), which provides finite state transduction over annotations based on regular expressions.</S>
    <S sid="179" ssid="22">A JAPE grammar consists of a set of phases, each of which consists of a set of pattern/action rules, and which run sequentially.</S>
    <S sid="180" ssid="23">Patterns can be specified by describing a specific text string, or annotations previously created by modules such as the tokeniser, gazetteer, or document format analysis.</S>
    <S sid="181" ssid="24">Rule prioritisation (if activated) prevents multiple assignment of annotations to the same text string.</S>
    <S sid="182" ssid="25">The orthomatcher is another optional module for the IE system.</S>
    <S sid="183" ssid="26">Its primary objective is to perform co-reference, or entity tracking, by recognising relations between entities.</S>
    <S sid="184" ssid="27">It also has a secondary role in improving named entity recognition by assigning annotations to previously unclassified names, based on relations with existing entities.</S>
    <S sid="185" ssid="28">The coreferencer finds identity relations between entities in the text.</S>
    <S sid="186" ssid="29">For more details see (Dimitrov, 2002).</S>
    <S sid="187" ssid="30">The implementation of the processing resources is centred on robustness, usability and the clear distinction between declarative data representations and finite state algorithms The behaviour of all the processors is completely controlled by external resources such as grammars or rule sets, which makes them easily modifiable by users who do not need to be familiar with programming languages.</S>
    <S sid="188" ssid="31">The fact that all processing resources use finite-state transducer technology makes them quite performant in terms of execution times.</S>
    <S sid="189" ssid="32">Our initial experiments show that the full named entity recognition system is capable of processing around 2.5KB/s on a PITT 450 with 256 MB RAM (independently of the size of the input file; the processing requirement is linear in relation to the text size).</S>
    <S sid="190" ssid="33">Scalability was tested by running the ANNIE modules over a randomly chosen part of the British National Corpus (10% of all documents), which contained documents of up to 17MB in size.</S>
  </SECTION>
  <SECTION title="5 Language Resource Creation" number="4">
    <S sid="191" ssid="1">Since many NLP algorithms require annotated corpora for training, GATE's development environment provides easy-to-use and extendable facilities for text annotation.</S>
    <S sid="192" ssid="2">In order to test their usability in practice, we used these facilities to build corpora of named entity annotated texts for the MUSE, ACE, and MUMIS applications.</S>
    <S sid="193" ssid="3">The annotation can be done manually by the user or semi-automatically by running some processing resources over the corpus and then correcting/adding new annotations manually.</S>
    <S sid="194" ssid="4">Depending on the information that needs to be annotated, some ANNIE modules can be used or adapted to bootstrap the corpus annotation task.</S>
    <S sid="195" ssid="5">For example, users from the humanities created a gazetteer list with 18th century place names in London, which when supplied to the ANNIE gazetteer, allows the automatic annotation of place information in a large collection of 18th century court reports from the Old Bailey in London.</S>
    <S sid="196" ssid="6">Since manual annotation is a difficult and error-prone task, GATE tries to make it simple to use and yet keep it flexible.</S>
    <S sid="197" ssid="7">To add a new annotation, one selects the text with the mouse (e.g., &amp;quot;Mr. Clever&amp;quot;) and then clicks on the desired annotation type (e.g., Person), which is shown in the list of types on the right-handside of the document viewer (see Figure 1).</S>
    <S sid="198" ssid="8">If however the desired annotation type does not already appear there or the user wants to associate more detailed information with the annotation (not just its type), then an annotation editing dialogue can be used.</S>
  </SECTION>
  <SECTION title="6 Evaluation" number="5">
    <S sid="199" ssid="1">A vital part of any language engineering application is the evaluation of its performance, and a development environment for this purpose would not be complete without some mechanisms for its measurement in a large number of test cases.</S>
    <S sid="200" ssid="2">GATE contains two such mechanisms: an evaluation tool (AnnotationDiff) which enables automated performance measurement and visualisation of the results, and a benchmarking tool, which enables the tracking of a system's progress and regression testing.</S>
    <S sid="201" ssid="3">Gate's AnnotationDiff tool enables two sets of annotations on a document to be compared, in order to either compare a system-annotated text with a reference (hand-annotated) text, or to compare the output of two different versions of the system (or two different systems).</S>
    <S sid="202" ssid="4">For each annotation type, figures are generated for precision, recall, F-measure and false positives.</S>
    <S sid="203" ssid="5">The AnnotationDiff viewer displays the two sets of annotations, marked with different colours (similar to 'visual diff' implementations such as in the MKS Toolkit or TkDiff).</S>
    <S sid="204" ssid="6">Annotations in the key set have two possible colours depending on their state: white for annotations which have a compatible (or partially compatible) annotation in the response set, and orange for annotations which are missing in the response set.</S>
    <S sid="205" ssid="7">Annotations in the response set have three possible colours: green if they are compatible with the key annotation, blue if they are partially compatible, and red if they are spurious.</S>
    <S sid="206" ssid="8">In the viewer, two annotations will be positioned on the same row if they are co-extensive, and on different rows if not.</S>
    <S sid="207" ssid="9">GATE's benchmarking tool differs from the AnnotationDiff in that it enables evaluation to be carried out over a whole corpus rather than a single document.</S>
    <S sid="208" ssid="10">It also enables tracking of the system's performance over time.</S>
    <S sid="209" ssid="11">The tool requires a clean version of a corpus (with no annotations) and an annotated reference corpus.</S>
    <S sid="210" ssid="12">First of all, the tool is run in generation mode to produce a set of texts annotated by the system.</S>
    <S sid="211" ssid="13">These texts are stored for future use.</S>
    <S sid="212" ssid="14">The tool can then be run in three ways: In each case, performance statistics will be provided for each text in the set, and overall statistics for the entire set, in comparison with the reference set.</S>
    <S sid="213" ssid="15">In case 2, information is also provided about whether the figures have increased or decreased in comparison with the annotated set.</S>
    <S sid="214" ssid="16">The annotated set can be updated at any time by rerunning the tool in generation mode with the latest version of the system resources.</S>
    <S sid="215" ssid="17">Furthermore, the system can be run in verbose mode, where for each figure below a certain threshold (set by the user), the non-coextensive annotations (and their corresponding text) will be displayed.</S>
    <S sid="216" ssid="18">The output of the tool is written to an HTML file in tabular form, as shown in Figure 3.</S>
    <S sid="217" ssid="19">Current evaluations for the MUSE NE system are producing average figures of 90-95% Precision and Recall on a selection of different text types (spoken transcriptions, emails etc.).</S>
    <S sid="218" ssid="20">The default ANNIE system produces figures of between 80-90% Precision and Recall on news texts.</S>
    <S sid="219" ssid="21">This figure is lower than for the MUSE system, because the resources have not been tuned to a specific text type or application, but are intended to be adapted as necessary.</S>
    <S sid="220" ssid="22">Work on resolution of anaphora is currently averaging 63% Precision and 45% Recall, although this work is still very much in progress, and we expect these figures to improve in the near future.</S>
  </SECTION>
  <SECTION title="7 Related Work" number="6">
    <S sid="221" ssid="1">GATE draws from a large pool of previous work on infrastructures, architectures and development environments for representing and processing language resources, corpora, and annotations.</S>
    <S sid="222" ssid="2">Due to space limitations here we will discuss only a small subset.</S>
    <S sid="223" ssid="3">For a detailed review and its use for deriving the desiderata for this architecture see (Cunningham, 2000).</S>
    <S sid="224" ssid="4">Work on standard ways to deal with XML data is relevant here, such as the LT XML work at Edinburgh (Thompson and McKelvie, 1997), as is work on managing collections of documents and their formats, e.g.</S>
    <S sid="225" ssid="5">(Brugman et al., 1998; Grishman, 1997; Zajac, 1998).</S>
    <S sid="226" ssid="6">We have also drawn from work on representing information about text and speech, e.g.</S>
    <S sid="227" ssid="7">(Brugman et al., 1998; Mikheev and Finch, 1997; Zajac, 1998; Young et al., 1999), as well as annotation standards, such as the ATLAS project (an architecture for linguistic annotation) at LDC (Bird et al., 2000).</S>
    <S sid="228" ssid="8">Our approach is also related to work on user interfaces to architectural facilities such as development environments, e.g.</S>
    <S sid="229" ssid="9">(Brugman et al., 1998) and to work on comparing different versions of information, e.g.</S>
    <S sid="230" ssid="10">(Sparck-Jones and Galliers, 1996; Paggio, 1998).</S>
    <S sid="231" ssid="11">This work is particularly novel in that it addresses the complete range of issues in NLP application development in a flexible and extensible way, rather than focusing just on some particular aspect of the development process.</S>
    <S sid="232" ssid="12">In addition, it promotes robustness, re-usability, and scalability as important principles that help with the construction of practical NLP systems.</S>
  </SECTION>
  <SECTION title="8 Conclusions" number="7">
    <S sid="233" ssid="1">In this paper we have described an infrastructure for language engineering software which aims to assist the develeopment of robust tools and resources for NLP.</S>
    <S sid="234" ssid="2">One future direction is the integration of processing resources which learn in the background while the user is annotating corpora in GATE's visual environment.</S>
    <S sid="235" ssid="3">Currently, statistical models can be integrated but need to be trained separately.</S>
    <S sid="236" ssid="4">We are also extending the system to handle language generation modules, in order to enable the construction of applications which require language production in addition to analysis, e.g. intelligent report generation from IE data.</S>
  </SECTION>
</PAPER>
