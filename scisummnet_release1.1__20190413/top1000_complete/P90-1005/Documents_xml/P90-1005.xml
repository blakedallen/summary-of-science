<PAPER>
  <S sid="0">Structural Disambiguation With Constraint Propagation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">present a new grammatical formalism called Con- Dependency Grammar in which every rule is given constraint on wordto-word modifications.</S>
    <S sid="2" ssid="2">CDG parsing is formalized as a constraint satisfaction problem over a finite domain so that efficient constraint-propagation algorithms can be employed to reduce structural ambiguity without generating individual parse trees.</S>
    <S sid="3" ssid="3">The weak generative capacity and the computational complexity of CDG parsing are also discussed_</S>
  </ABSTRACT>
  <SECTION title="1 INTRODUCTION" number="1">
    <S sid="4" ssid="1">We are interested in an efficient treatment of structural ambiguity in natural language analysis.</S>
    <S sid="5" ssid="2">It is known that &amp;quot;every-way&amp;quot; ambiguous constructs, such as prepositional attachment in English, have a Catalan number of ambiguous parses (Church and Patil 1982), which grows at a faster than exponential rate (Knuth 1975).</S>
    <S sid="6" ssid="3">A parser should be provided with a disambiguation mechanism that does not involve generating such a combinatorial number of parse trees explicitly.</S>
    <S sid="7" ssid="4">We have developed a. parsing method in which an intermediate parsing result is represented as a data structure called a constraint network.</S>
    <S sid="8" ssid="5">Every solution that satisfies all the constraints simultaneously corresponds to an individual parse tree.</S>
    <S sid="9" ssid="6">No explicit parse trees are generated until ultimately necessary.</S>
    <S sid="10" ssid="7">Parsing and successive disambiguation are performed by adding new constraints to the constraint network.</S>
    <S sid="11" ssid="8">Newly added constraints are efficiently propagated over the network by Constraint Propagation (Waltz 1975, Montanan i 1976) to remove inconsistent values.</S>
    <S sid="12" ssid="9">In this paper, we present the basic ideas of a formal grammatical theory called Constraint Dependency Grammar (CDG for short) that makes this parsing technique possible_ CDG has a reasonable time bound in its parsing, while its weak generative capacity is strictly greater than that of Context Free Grammar (CFG).</S>
    <S sid="13" ssid="10">We give the definition of CDG in the next section.</S>
    <S sid="14" ssid="11">Then, in Section 3, we describe the parsing method based on constraint propagation, using a step-bystep example.</S>
    <S sid="15" ssid="12">Formal properties of CDG are discussed in Section 4.</S>
  </SECTION>
  <SECTION title="2 CDG: DEFINITION" number="2">
    <S sid="16" ssid="1">Let a sentence s w1w2 wn be a finite string on a finite alphabet E. Let R =-- {r1,r2, ,Tk} be a finite set of rale-ids.</S>
    <S sid="17" ssid="2">Suppose that each word i in a sentences has k-different roles ri(i), T2 (i) &#8226; &#8226; &#8226; r (i) &#8226; Roles are like variables, and each role can have a pair &lt;a, d&gt; as its value, where the label a is a member of a finite set L = fat, a2, &#8226; &#8226; &#8226; , ail and the modifies d is either 1 &lt; d &lt; n or a special symbol nil.</S>
    <S sid="18" ssid="3">An analysis of the sentence s is obtained by assigning appropriate values to the n x k roles (we can regard this situation as one in which each word has a. frame with k Slots, as shown in Figure 1).</S>
    <S sid="19" ssid="4">An assignment A of a sentence s is a function that assigns values to the roles.</S>
    <S sid="20" ssid="5">Given an assignment A, the label and the modifiee of a role x are determined.</S>
    <S sid="21" ssid="6">We define the following four functions to represent the various aspect of the role x, assuming that x is an rl-role of the word i: Specifically, we call a, subformula P, a 'unary constraint when P, contains only one variable, and a binary constraint when P, contains exactly two variables.</S>
    <S sid="22" ssid="7">,def , We also define word(i) as the terminal symbol occurring at the position i.1 An individual grammar G =&lt; E, R, L, C &gt; in the CDG theory determines a set of possible assignments of a given sentence, where where the variables xi, x2, ..., xp range over the set of roles in an assignment A and each subformula P consists only of the following vocabulary: The semantics of the functions have been defined above.</S>
    <S sid="23" ssid="8">The semantics of the predicates and the logical connectors are defined as usual, except that comparing an expression containing nil with another value by the inequality predicates always yields the truth value false.</S>
    <S sid="24" ssid="9">These conditions guarantee that, given an assignment A, it is possible to compute whether the values of xl, x2, ,x satisfy C in a constant time, regardless of the sentence length n.</S>
  </SECTION>
  <SECTION title="Definition" number="3">
    <S sid="25" ssid="1">The formula Fl of the constraint Cl is the conjunction of the following four subformulas (an informal description is attached to each constraint): &amp;quot;No two words can modify the same word with the same label.&amp;quot; Analyzing a sentence with G1 means assigning a label-modifiee pair to the only role &amp;quot;governor&amp;quot; of each word so that the assignment satisfies (G1-1) to (G1-4) simultaneously.</S>
    <S sid="26" ssid="2">For example, sentence (1) is analyzed as shown in Figure 2 provided that the words &amp;quot;a,&amp;quot; &amp;quot;dog,&amp;quot; and &amp;quot;runs&amp;quot; are given parts-ofspeech D, N, and V, respectively (the subscript attached to the words indicates the position of the word in the sentence).</S>
    <S sid="27" ssid="3">Thus, sentence (1) is generated by the grammar GI.</S>
    <S sid="28" ssid="4">On the other hand, sentences (2) and (3) are not generated since there are no proper assignments for such sentences.</S>
    <S sid="29" ssid="5">We can graphically represent the parsing result of sentence (1) as shown in Figure 3 if we interpret the governor rote of a word as a pointer to the syntactic governor of the word.</S>
    <S sid="30" ssid="6">Thus, the syntactic structure produced by a CDG is usually a dependency structure (flays 1964) rather than a phtyrse structure.</S>
  </SECTION>
  <SECTION title="3 PARSING WITH CONSTRAINT PROPAGATION" number="4">
    <S sid="31" ssid="1">CDG parsing is done by assigning values to n x k roles, whose values are selected from a finite set L x {1,2, ... , nil}_ Therefore, CDG parsing can be viewed as a constraint satisfaction problem over a finite domain.</S>
    <S sid="32" ssid="2">Many interesting artificial intelligence problems, including graph coloring and scene labeling, are classified in this group of problems, and much effort has been spent on the development of efficient techniques to solve these problems.</S>
    <S sid="33" ssid="3">Constraint propagation (Waltz 1975, Montanan i 1976), sometimes called filtering, is one such technique.</S>
    <S sid="34" ssid="4">One advantage of the filtering algorithm is that it allows new constraints to be added easily so that a better solution can be obtained when many candidates remain.</S>
    <S sid="35" ssid="5">Usually, CDG parsing is done in the following three steps: In this section, we will show, through a step-by-step example, that the filtering algorithms can be effectively used to narrow down the structural ambiguities of CDG parsing.</S>
    <S sid="36" ssid="6">The Example We use a PP-attachment example.</S>
    <S sid="37" ssid="7">Consider sentence (4).</S>
    <S sid="38" ssid="8">Because of the three consecutive prepositional phrases (PPs), this sentence has many structural ambiguities.</S>
    <S sid="39" ssid="9">(4) Put the block on the floor on the table in the room.</S>
    <S sid="40" ssid="10">One of the possible syntactic structures is shown in Figure 42.</S>
    <S sid="41" ssid="11">To simplify the following discussion, we treat the grammatical symbols V. NP, and PP as terminal symbols (words), since the analysis of the internal structures of such phrases is irrelevant to the point being made.</S>
    <S sid="42" ssid="12">The correspondence between such simplified dependency structures and the equivalent phrase structures should be clear.</S>
    <S sid="43" ssid="13">Formally, the input sentence that we will parse with CDG is (5).</S>
    <S sid="44" ssid="14">(5) vl NP2 PP3 PP4 PPs First, we consider a &amp;quot;core&amp;quot; grammar that contains purely syntactic rules only.</S>
    <S sid="45" ssid="15">We define a CDG G2a =&lt; E2, R2, L2, C2&gt; as follows: where the formula P2 is the conjunction of the following unary and binary constraints : &amp;quot;If a PP modifies a PP or an NP, its label should be POSTNOD.&amp;quot; (G2a-3) word(pos(x))=PP, word(ntod(x))=V iab(x)=LOC &amp;quot;If a PP modifies a V, its label should be LOC.&amp;quot; 2In linguistics, arrows are usually drawn in the opposite direction in a dependency diagram: from a governor (modifiee) to its dependent (modifier).</S>
    <S sid="46" ssid="16">In this paper, however, we draw an arrow from a modifier to its modifiee in order to emphasize that this information is contained in a modifier's role.</S>
    <S sid="47" ssid="17">&amp;quot;Modification links do not cross each other.&amp;quot; According to the grammar G2a, sentence (5) has 14 (= Catalan(4)) different syntactic structures.</S>
    <S sid="48" ssid="18">We do not generate these syntactic structures one by one, since the number of the structures may grow more rapidly than exponentially when the sentence becomes long.</S>
    <S sid="49" ssid="19">Instead, we build a packed data structure, called a constraint network, that contains all the syntactic structures implicitly.</S>
    <S sid="50" ssid="20">Explicit parse trees can be generated whenever necessary, but it may take a more than exponential computation time.</S>
    <S sid="51" ssid="21">Figure 5 shows the initial constraint network for sentence (5).</S>
    <S sid="52" ssid="22">A node in a constraint network corresponds to a role.</S>
    <S sid="53" ssid="23">Since each word has only one role governor in the grammar G2, the constraint network has five nodes corresponding to the five words in the sentence.</S>
    <S sid="54" ssid="24">In the figure, the node labeled V1 represents the governor role of the word Vi , and so on.</S>
    <S sid="55" ssid="25">A node is associated with a set of possible values that the role can take as its value, called a domain.</S>
    <S sid="56" ssid="26">The domains of the initial constraint network are computed by examining unary constraints ((G2a-1) to (G2a-5) in our example).</S>
    <S sid="57" ssid="27">For example, the modifiee of the role of the word V1 must be ROOT and its label must be nil according to the unary constraint (G2a5), and therefore the domain of the corresponding node is a singleton set f &lt;ROOT,nil&gt;1.</S>
    <S sid="58" ssid="28">In the figure, values are abbreviated by concatenating the initial letter of the label and the modifiee, such as Rnil for &lt;P.00T , nil&gt;, 01 for &lt;OBJ 1&gt;, and so on.</S>
    <S sid="59" ssid="29">An arc in a constraint network represents a binary constraint imposed on two roles.</S>
    <S sid="60" ssid="30">Each arc is associated with a two-dimensional matrix called a constraint matrix, whose xy-elements are either 1 or 0.</S>
    <S sid="61" ssid="31">The rows and the columns correspond to the possible values of each of the two roles.</S>
    <S sid="62" ssid="32">The value 0 indicates that this particular combination of role values violates the binary constraints.</S>
    <S sid="63" ssid="33">A constraint matrix is calculated by generating every possible pair of values and by checking its validity according to the binary constraints.</S>
    <S sid="64" ssid="34">For example, the case in which governor(PP3) = &lt;1,0C,1&gt; and governor(PP 4) = &lt;P0STM0D,2&gt; violates the binary constraint (G2a-6), so the 1,1-P2 element of the constraint matrix between PP3 and PP4 is set to zero.</S>
    <S sid="65" ssid="35">The reader should not confuse the undirected arcs in a constraint network with the directed modification links in a dependency diagram.</S>
    <S sid="66" ssid="36">An arc in a constraint network represents the existence of a binary constraint between two nodes, and has nothing to do with the modifier-modifiee relationships.</S>
    <S sid="67" ssid="37">The possible modification relationships are represented as the modifiee part of the domain values in a constraint network.</S>
    <S sid="68" ssid="38">A constraint network contains all the information needed to produce the parsing results.</S>
    <S sid="69" ssid="39">No grammatical knowledge is necessary to recover parse trees from a constraint network.</S>
    <S sid="70" ssid="40">A simple backtrack search can generate the 14 parse trees of sentence (5) from the constraint network shown in Figure 5 at any time.</S>
    <S sid="71" ssid="41">Therefore, we regard a constraint network as a packed representation of parsing results.</S>
    <S sid="72" ssid="42">Filtering A constraint network is said to be arc consistent if, for any constraint matrix, there are no rows and no columns that contain only zeros.</S>
    <S sid="73" ssid="43">A node value corresponding to such a row or a column cannot participate in any solution, so it can be abandoned without further checking.</S>
    <S sid="74" ssid="44">The filtering algorithm identifies such inconsistent values and removes them from the domains.</S>
    <S sid="75" ssid="45">Removing a value from one domain may make another value in another domain inconsistent, so the process is propagated over the network until the network becomes arc consistent.</S>
    <S sid="76" ssid="46">Filtering does not generate solutions, but may significantly reduce the search space.</S>
    <S sid="77" ssid="47">In our example, the constraint network shown in Figure 5 is already arc consistent, so nothing can be done by filtering at this point.</S>
  </SECTION>
  <SECTION title="Adding New Constraints" number="5">
    <S sid="78" ssid="1">To illustrate how we can add new constraints to narrow down the ambiguity, let us introduce additional constraints (G2b-1) and (G2b-2), assuming that appropriate syntactic and/or semantic features are attached to each word and that the function NO is provided to access these features.</S>
    <S sid="79" ssid="2">Note that these constraints are not purely syntactic.</S>
    <S sid="80" ssid="3">Any kind of knowledge, syntactic, semantic, or even pragmatic, can be applied in CDG parsing as long as it is expressed as a unary or binary constraint on word-to-word modifications.</S>
    <S sid="81" ssid="4">Each value or pair of values is tested against the newly added constraints.</S>
    <S sid="82" ssid="5">In the network in Figure 5, the value P3 (i.e.</S>
    <S sid="83" ssid="6">&lt;POSTMOD,3&gt;) of the node PP4 (i.e.. &amp;quot;on the table (PP4)&amp;quot; modifies &amp;quot;on the floor (PP3)&amp;quot;) violates the constraint (G2b-1), so we remove P3 from the domain of PRI.</S>
    <S sid="84" ssid="7">Accordingly, corresponding rows and columns in the four constraint matrices adjacent to the node PP4 are removed.</S>
    <S sid="85" ssid="8">The binary constraint (G2b-2) affects the elements of the constraint matrices.</S>
    <S sid="86" ssid="9">For the matrix between the nodes PP3 and PP4, the element in row 1,1 (&lt;1..0C ,1&gt;) and column Li (&lt;1,0C , 1&gt;) is set to zero, since both are modifications to VI with the label LOC.</S>
    <S sid="87" ssid="10">Similarly, the Li-Li elements of the matrices PP3-PP5 and PP4-PP5 are set to zero.</S>
    <S sid="88" ssid="11">The modified network is shown in Figure 6, where the updated elements are indicated by asterisks.</S>
    <S sid="89" ssid="12">Note that the network in Figure 6 is not arc consistent.</S>
    <S sid="90" ssid="13">For example, the Li row of the matrix PP3-PP4 consists of all zero elements.</S>
    <S sid="91" ssid="14">The filtering algorithm identifies such locally inconsistent values and eliminates them until there are no more inconsistent values left.</S>
    <S sid="92" ssid="15">The resultant network is shown in Figure 7.</S>
    <S sid="93" ssid="16">This network implicitly represents the remaining four parses of sentence (5).</S>
    <S sid="94" ssid="17">Since the sentence is still ambiguous, let us consider another constraint.</S>
    <S sid="95" ssid="18">This sets the P2-P2 element of the matrix PP3-PP4 to zero.</S>
    <S sid="96" ssid="19">Filtering on this network again results in the network shown in Figure 8, which is unambiguous, since every node has a singleton domain.</S>
    <S sid="97" ssid="20">Recovering the dependency structure (the one in Figure 4) from this network is straightforward.</S>
    <S sid="98" ssid="21">Several researchers have proposed variant data structures for representing a set of syntactic structures.</S>
    <S sid="99" ssid="22">Chart (Kaplan 1973) and shared, packed forest (Tomita 1987) are packed data structures for context-free parsing.</S>
    <S sid="100" ssid="23">In these data structures, a substring that is recognized as a certain phrase is represented as a single edge or node regardless of how many different readings are possible for this phrase.</S>
    <S sid="101" ssid="24">Since the production rules are context free, it is unnecessary to check the internal structure of an edge when combining it with another edge to form a higher edge.</S>
    <S sid="102" ssid="25">However, this property is true only when the grammar is purely context-free.</S>
    <S sid="103" ssid="26">If one introduces context sensitivity by attaching augmentations and controlling the applicability of the production rules, different readings of the same string with the same nonterminal symbol have to be represented by separate edges, and this may cause a combinatorial explosion.</S>
    <S sid="104" ssid="27">Seo and Simmons (1988) propose a data structure called a syntactic graph as a. packed representation of context-free parsing.</S>
    <S sid="105" ssid="28">A syntactic graph is similar to a constraint network in the sense that it is dependencyoriented (nodes are words) and that an exclusion matrix is used to represent the co-occurrence conditions between modification links.</S>
    <S sid="106" ssid="29">A syntactic graph is, however, built after context-free parsing and is therefore used to represent only context-free parse trees.</S>
    <S sid="107" ssid="30">The formal descriptive power of syntactic graphs is not known.</S>
    <S sid="108" ssid="31">As will be discussed in Section 4, the formal descriptive power of CDG is strictly greater than that of CFG and hence, a constraint network can represent non-context-free parse trees as well.</S>
    <S sid="109" ssid="32">Sugimura et al. (1988) propose the use of a constraint logic program for analyzing modifier-modifiee relationships of Japanese.</S>
    <S sid="110" ssid="33">An arbitrary logical formula can be a constraint, and a constraint solver called CIL (Mukai 1985) is responsible for solving the constraints.</S>
    <S sid="111" ssid="34">The generative capacity and the computational complexity of this formalism are not clear.</S>
    <S sid="112" ssid="35">The above-mentioned works seem to have concentrated on the efficient representation of the output of a parsing process, and lacked the formalization of a structural disambiguation process, that is, they did not specify what kind of knowledge can be used in what way for structural disambiguation.</S>
    <S sid="113" ssid="36">In CDG parsing, any knowledge is applicable to a constraint network as long as it can be expressed as a constraint between two modifications, and an efficient filtering algorithm effectively uses it to reduce structural ambiguities.</S>
  </SECTION>
  <SECTION title="4 FORMAL PROPERTIES" number="6">
    <S sid="114" ssid="1">Consider the language Lww = {wwlw E (o.+ b)*}, the language of strings that are obtained by concatenating the same arbitrary string over an alphabet { a,b}.</S>
    <S sid="115" ssid="2">Lww is known to be non-context-free (Hoperoft and Ullman 1979), and is frequently mentioned when discussing the non-context-freeness of the &amp;quot;respectively&amp;quot; construct (e.g.</S>
    <S sid="116" ssid="3">&amp;quot;A, B, and C do D, E, and F, respectively&amp;quot;) of various natural languages (e.g., Savitch et al. 1987).</S>
    <S sid="117" ssid="4">Although there is no context-free grammar that generates Lww, the grammar Gww =&lt; E, L, R, C &gt; shown in Figure 9 generates it (Maruyama 1990).</S>
    <S sid="118" ssid="5">An assignment given to a sentence &amp;quot;a.aba.ab&amp;quot; is shown in Figure 10.</S>
    <S sid="119" ssid="6">On the other hand, any context-free language can be generated by a degree=2 CDG.</S>
    <S sid="120" ssid="7">This can be proved by constructing a constraint dependency grammar GC DG from an arbitrary context-free grammar GeFG in Greibach Normal Form, and by showing that the two grammars generate exactly the same language.</S>
    <S sid="121" ssid="8">Since GeFa is in Greibach Normal Form, it is easy to make one-to-one correspondence between a word in a sentence and a rule application in a phrase-structure tree.</S>
    <S sid="122" ssid="9">The details of the proof are given in Maruyama (1990).</S>
    <S sid="123" ssid="10">This, combined with the fact that Gww generates Lww, means that the weak generative capacity of CDG with degree=2 is strictly greater than that of CFG.</S>
    <S sid="124" ssid="11">Let us consider a constraint dependency grammar G =&lt; E, R, L,C &gt; with arity=2 and degree=k.</S>
    <S sid="125" ssid="12">Let be the length of the input sentence.</S>
    <S sid="126" ssid="13">Consider the space complexity of the constraint network first.</S>
    <S sid="127" ssid="14">In CDG parsing, every word has k roles, so there are nx k nodes in total.</S>
    <S sid="128" ssid="15">A role can have nx possible values, where 1 is the size of L, so the maximum domain size is ax 1.</S>
    <S sid="129" ssid="16">Binary constraints may be imposed on arbitrary pairs of roles, and therefore the number of constraint matrices is at most proportional to (nk)2.</S>
    <S sid="130" ssid="17">Since the size of a constraint matrix is (n1)2, the total space complexity of the constraint network is 0(1210n4).</S>
    <S sid="131" ssid="18">Since k and 1 are grammatical constants, it is 0(n4) for the sentence length n. As the initial formation of a constraint network takes a computation time proportional to the size of the constraint network, the time complexity of the initial formation of a constraint network is OM.</S>
    <S sid="132" ssid="19">The complexity of adding new constraints to a constraint network never exceeds the complexity of the initial formation of a constraint network, so it is also bounded by 0(0).</S>
    <S sid="133" ssid="20">The most efficient filtering algorithm developed so far runs in 0(ea2) time, where e is the number of arcs and a is the size of the domains in a constraint network (Mohr and Henderson 1986).</S>
    <S sid="134" ssid="21">Since the number of arcs is at most 0((nk)2), filtering can be performed in 0Unk)2(n1)2), which is 0(n4) without grammatical constants.</S>
    <S sid="135" ssid="22">Thus, in CDG parsing with arity 2, both the initial formation of a constraint network and filtering are bounded in 0(n4) time.</S>
  </SECTION>
  <SECTION title="5 CONCLUSION" number="7">
    <S sid="136" ssid="1">We have proposed a formal grammar that allows efficient structural disambiguation.</S>
    <S sid="137" ssid="2">Grammar rules are constraints on word-to-word modifications, and parsing is done by adding the constraints to a data structure called a constraint network.</S>
    <S sid="138" ssid="3">The initial formation of a constraint network and the filtering have a polynomial time bound whereas the weak generative capacity of CDG is strictly greater than that of CFG.</S>
    <S sid="139" ssid="4">CDG is actually being used for an interactive Japanese parser of a Japanese-to-English machine translation system for a newspaper domain (Maruyama et. al.</S>
    <S sid="140" ssid="5">1990).</S>
    <S sid="141" ssid="6">A parser for such a wide domain should make use of any kind of information available to the system, including user-supplied information.</S>
    <S sid="142" ssid="7">The parser treats this information as another set of unary constraints and applies it to the constraint network.</S>
  </SECTION>
</PAPER>
