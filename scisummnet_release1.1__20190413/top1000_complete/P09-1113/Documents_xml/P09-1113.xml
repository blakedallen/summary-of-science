<PAPER>
  <S sid="0">Distant supervision for relation extraction without labeled data</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Modern models of relation extraction for tasks like ACE are based on supervised learning of relations from small hand-labeled corpora.</S>
    <S sid="2" ssid="2">We investigate an alternative paradigm that does not require labeled corpora, avoiding the domain dependence of ACEstyle algorithms, and allowing the use of corpora of any size.</S>
    <S sid="3" ssid="3">Our experiments use Freebase, a large semantic database of several thousand relations, to For each pair of entities that appears in some Freebase relation, we find all sentences containing those entities in a large unlabeled corpus and extract textual features to train a relation classifier.</S>
    <S sid="4" ssid="4">Our algorithm combines the advantages of supervised IE (combining 400,000 noisy pattern features in a probabilistic classifier) and unsupervised IE (extracting large numbers of relations from large corpora of any domain).</S>
    <S sid="5" ssid="5">Our model is able to extract 10,000 instances of 102 relations at a precision of 67.6%.</S>
    <S sid="6" ssid="6">We also analyze feature performance, showing that syntactic parse features are particularly helpful for relations that are ambiguous or lexically distant in their expression.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="7" ssid="1">At least three learning paradigms have been applied to the task of extracting relational facts from text (for example, learning that a person is employed by a particular organization, or that a geographic entity is located in a particular region).</S>
    <S sid="8" ssid="2">In supervised approaches, sentences in a corpus are first hand-labeled for the presence of entities and the relations between them.</S>
    <S sid="9" ssid="3">The NIST Automatic Content Extraction (ACE) RDC 2003 and 2004 corpora, for example, include over 1,000 documents in which pairs of entities have been labeled with 5 to 7 major relation types and 23 to 24 subrelations, totaling 16,771 relation instances.</S>
    <S sid="10" ssid="4">ACE systems then extract a wide variety of lexical, syntactic, and semantic features, and use supervised classifiers to label the relation mention holding between a given pair of entities in a test set sentence, optionally combining relation mentions (Zhou et al., 2005; Zhou et al., 2007; Surdeanu and Ciaramita, 2007).</S>
    <S sid="11" ssid="5">Supervised relation extraction suffers from a number of problems, however.</S>
    <S sid="12" ssid="6">Labeled training data is expensive to produce and thus limited in quantity.</S>
    <S sid="13" ssid="7">Also, because the relations are labeled on a particular corpus, the resulting classifiers tend to be biased toward that text domain.</S>
    <S sid="14" ssid="8">An alternative approach, purely unsupervised information extraction, extracts strings of words between entities in large amounts of text, and clusters and simplifies these word strings to produce relation-strings (Shinyama and Sekine, 2006; Banko et al., 2007).</S>
    <S sid="15" ssid="9">Unsupervised approaches can use very large amounts of data and extract very large numbers of relations, but the resulting relations may not be easy to map to relations needed for a particular knowledge base.</S>
    <S sid="16" ssid="10">A third approach has been to use a very small number of seed instances or patterns to do bootstrap learning (Brin, 1998; Riloff and Jones, 1999; Agichtein and Gravano, 2000; Ravichandran and Hovy, 2002; Etzioni et al., 2005; Pennacchiotti and Pantel, 2006; Bunescu and Mooney, 2007; Rozenfeld and Feldman, 2008).</S>
    <S sid="17" ssid="11">These seeds are used with a large corpus to extract a new set of patterns, which are used to extract more instances, which are used to extract more patterns, in an iterative fashion.</S>
    <S sid="18" ssid="12">The resulting patterns often suffer from low precision and semantic drift.</S>
    <S sid="19" ssid="13">We propose an alternative paradigm, distant supervision, that combines some of the advantages of each of these approaches.</S>
    <S sid="20" ssid="14">Distant supervision is an extension of the paradigm used by Snow et al. (2005) for exploiting WordNet to extract hypernym (is-a) relations between entities, and is similar to the use of weakly labeled data in bioinformatics (Craven and Kumlien, 1999; Morgan et al., 2004).</S>
    <S sid="21" ssid="15">Our algorithm uses Freebase (Bollacker et al., 2008), a large semantic database, to provide distant supervision for relation extraction.</S>
    <S sid="22" ssid="16">Freebase contains 116 million instances of 7,300 relations between 9 million entities.</S>
    <S sid="23" ssid="17">The intuition of distant supervision is that any sentence that contains a pair of entities that participate in a known Freebase relation is likely to express that relation in some way.</S>
    <S sid="24" ssid="18">Since there may be many sentences containing a given entity pair, we can extract very large numbers of (potentially noisy) features that are combined in a logistic regression classifier.</S>
    <S sid="25" ssid="19">Thus whereas the supervised training paradigm uses a small labeled corpus of only 17,000 relation instances as training data, our algorithm can use much larger amounts of data: more text, more relations, and more instances.</S>
    <S sid="26" ssid="20">We use 1.2 million Wikipedia articles and 1.8 million instances of 102 relations connecting 940,000 entities.</S>
    <S sid="27" ssid="21">In addition, combining vast numbers of features in a large classifier helps obviate problems with bad features.</S>
    <S sid="28" ssid="22">Because our algorithm is supervised by a database, rather than by labeled text, it does not suffer from the problems of overfitting and domain-dependence that plague supervised systems.</S>
    <S sid="29" ssid="23">Supervision by a database also means that, unlike in unsupervised approaches, the output of our classifier uses canonical names for relations.</S>
    <S sid="30" ssid="24">Our paradigm offers a natural way of integrating data from multiple sentences to decide if a relation holds between two entities.</S>
    <S sid="31" ssid="25">Because our algorithm can use large amounts of unlabeled data, a pair of entities may occur multiple times in the test set.</S>
    <S sid="32" ssid="26">For each pair of entities, we aggregate the features from the many different sentences in which that pair appeared into a single feature vector, allowing us to provide our classifier with more information, resulting in more accurate labels.</S>
    <S sid="33" ssid="27">Table 1 shows examples of relation instances extracted by our system.</S>
    <S sid="34" ssid="28">We also use this system to investigate the value of syntactic versus lexical (word sequence) features in relation extraction.</S>
    <S sid="35" ssid="29">While syntactic features are known to improve the performance of supervised IE, at least using clean hand-labeled ACE data (Zhou et al., 2007; Zhou et al., 2005), we do not know whether syntactic features can improve the performance of unsupervised or distantly supervised IE.</S>
    <S sid="36" ssid="30">Most previous research in bootstrapping or unsupervised IE has used only simple lexical features, thereby avoiding the computational expense of parsing (Brin, 1998; Agichtein and Gravano, 2000; Etzioni et al., 2005), and the few systems that have used unsupervised IE have not compared the performance of these two types of feature.</S>
  </SECTION>
  <SECTION title="2 Previous work" number="2">
    <S sid="37" ssid="1">Except for the unsupervised algorithms discussed above, previous supervised or bootstrapping approaches to relation extraction have typically relied on relatively small datasets, or on only a small number of distinct relations.</S>
    <S sid="38" ssid="2">Approaches based on WordNet have often only looked at the hypernym (is-a) or meronym (part-of) relation (Girju et al., 2003; Snow et al., 2005), while those based on the ACE program (Doddington et al., 2004) have been restricted in their evaluation to a small number of relation instances and corpora of less than a million words.</S>
    <S sid="39" ssid="3">Many early algorithms for relation extraction used little or no syntactic information.</S>
    <S sid="40" ssid="4">For example, the DIPRE algorithm by Brin (1998) used string-based regular expressions in order to recognize relations such as author-book, while the SNOWBALL algorithm by Agichtein and Gravano (2000) learned similar regular expression patterns over words and named entity tags.</S>
    <S sid="41" ssid="5">Hearst (1992) used a small number of regular expressions over words and part-of-speech tags to find examples of the hypernym relation.</S>
    <S sid="42" ssid="6">The use of these patterns has been widely replicated in successful systems, for example by Etzioni et al. (2005).</S>
    <S sid="43" ssid="7">Other work such as Ravichandran and Hovy (2002) and Pantel and Pennacchiotti (2006) use the same formalism of learning regular expressions over words and part-of-speech tags to discover patterns indicating a variety of relations.</S>
    <S sid="44" ssid="8">More recent approaches have used deeper syntactic information derived from parses of the input sentences, including work exploiting syntactic dependencies by Lin and Pantel (2001) and Snow et al. (2005), and work in the ACE paradigm such as Zhou et al.</S>
    <S sid="45" ssid="9">(2005) and Zhou et al. (2007).</S>
    <S sid="46" ssid="10">Perhaps most similar to our distant supervision algorithm is the effective method of Wu and Weld (2007) who extract relations from a Wikipedia page by using supervision from the page&#8217;s infobox.</S>
    <S sid="47" ssid="11">Unlike their corpus-specific method, which is specific to a (single) Wikipedia page, our algorithm allows us to extract evidence for a relation from many different documents, and from any genre.</S>
  </SECTION>
  <SECTION title="3 Freebase" number="3">
    <S sid="48" ssid="1">Following the literature, we use the term &#8216;relation&#8217; to refer to an ordered, binary relation between entities.</S>
    <S sid="49" ssid="2">We refer to individual ordered pairs in this relation as &#8216;relation instances&#8217;.</S>
    <S sid="50" ssid="3">For example, the person-nationality relation holds between the entities named &#8216;John Steinbeck&#8217; and &#8216;United States&#8217;, so it has (John Steinbeck, United States) as an instance.</S>
    <S sid="51" ssid="4">We use relations and relation instances from Freebase, a freely available online database of structured semantic data.</S>
    <S sid="52" ssid="5">Data in Freebase is collected from a variety of sources.</S>
    <S sid="53" ssid="6">One major source is text boxes and other tabular data from Wikipedia.</S>
    <S sid="54" ssid="7">Data is also taken from NNDB (biographical information), MusicBrainz (music), the SEC (financial and corporate data), as well as direct, wiki-style user editing.</S>
    <S sid="55" ssid="8">After some basic processing of the July 2008 link export to convert Freebase&#8217;s data representation into binary relations, we have 116 million instances of 7,300 relations between 9 million entities.</S>
    <S sid="56" ssid="9">We next filter out nameless and uninteresting entities such as user profiles and music tracks.</S>
    <S sid="57" ssid="10">Freebase also contains the reverses of many of its relations (bookauthor v. author-book), and these are merged.</S>
    <S sid="58" ssid="11">Filtering and removing all but the largest relations leaves us with 1.8 million instances of 102 relations connecting 940,000 entities.</S>
    <S sid="59" ssid="12">Examples are shown in Table 2.</S>
  </SECTION>
  <SECTION title="4 Architecture" number="4">
    <S sid="60" ssid="1">The intuition of our distant supervision approach is to use Freebase to give us a training set of relations and entity pairs that participate in those relations.</S>
    <S sid="61" ssid="2">In the training step, all entities are identified in sentences using a named entity tagger that labels persons, organizations and locations.</S>
    <S sid="62" ssid="3">If a sentence contains two entities and those entities are an instance of one of our Freebase relations, features are extracted from that sentence and are added to the feature vector for the relation.</S>
    <S sid="63" ssid="4">The distant supervision assumption is that if two entities participate in a relation, any sentence that contain those two entities might express that relation.</S>
    <S sid="64" ssid="5">Because any individual sentence may give an incorrect cue, our algorithm trains a multiclass logistic regression classifier, learning weights for each noisy feature.</S>
    <S sid="65" ssid="6">In training, the features for identical tuples (relation, entity1, entity2) from different sentences are combined, creating a richer feature vector.</S>
    <S sid="66" ssid="7">In the testing step, entities are again identified using the named entity tagger.</S>
    <S sid="67" ssid="8">This time, every pair of entities appearing together in a sentence is considered a potential relation instance, and whenever those entities appear together, features are extracted on the sentence and added to a feature vector for that entity pair.</S>
    <S sid="68" ssid="9">For example, if a pair of entities occurs in 10 sentences in the test set, and each sentence has 3 features extracted from it, the entity pair will have 30 associated features.</S>
    <S sid="69" ssid="10">Each entity pair in each sentence in the test corpus is run through feature extraction, and the regression classifier predicts a relation name for each entity pair based on the features from all of the sentences in which it appeared.</S>
    <S sid="70" ssid="11">Consider the location-contains relation, imagining that in Freebase we had two instances of this relation: (Virginia, Richmond) and (France, Nantes).</S>
    <S sid="71" ssid="12">As we encountered sentences like &#8216;Richmond, the capital of Virginia&#8217; and &#8216;Henry&#8217;s Edict of Nantes helped the Protestants of France&#8217; we would extract features from these sentences.</S>
    <S sid="72" ssid="13">Some features would be very useful, such as the features from the Richmond sentence, and some would be less useful, like those from the Nantes sentence.</S>
    <S sid="73" ssid="14">In testing, if we came across a sentence like &#8216;Vienna, the capital of Austria&#8217;, one or more of its features would match those of the Richmond sentence, providing evidence that (Austria, Vienna) belongs to the locationcontains relation.</S>
    <S sid="74" ssid="15">Note that one of the main advantages of our architecture is its ability to combine information from many different mentions of the same relation.</S>
    <S sid="75" ssid="16">Consider the entity pair (Steven Spielberg, Saving Private Ryan) from the following two sentences, as evidence for the film-director relation.</S>
    <S sid="76" ssid="17">The first sentence, while providing evidence for film-director, could instead be evidence for filmwriter orfilm-producer.</S>
    <S sid="77" ssid="18">The second sentence does not mention that Saving Private Ryan is a film, and so could instead be evidence for the CEO relation (consider &#8216;Robert Mueller directed the FBI&#8217;).</S>
    <S sid="78" ssid="19">In isolation, neither of these features is conclusive, but in combination, they are.</S>
  </SECTION>
  <SECTION title="5 Features" number="5">
    <S sid="79" ssid="1">Our features are based on standard lexical and syntactic features from the literature.</S>
    <S sid="80" ssid="2">Each feature describes how two entities are related in a sentence, using either syntactic or non-syntactic information.</S>
    <S sid="81" ssid="3">Our lexical features describe specific words between and surrounding the two entities in the sentence in which they appear: Each lexical feature consists of the conjunction of all these components.</S>
    <S sid="82" ssid="4">We generate a conjunctive feature for each k E 10, 1, 21.</S>
    <S sid="83" ssid="5">Thus each lexical row in Table 3 represents a single lexical feature.</S>
    <S sid="84" ssid="6">Part-of-speech tags were assigned by a maximum entropy tagger trained on the Penn Treebank, and then simplified into seven categories: nouns, verbs, adverbs, adjectives, numbers, foreign words, and everything else.</S>
    <S sid="85" ssid="7">In an attempt to approximate syntactic features, we also tested variations on our lexical features: (1) omitting all words that are not verbs and (2) omitting all function words.</S>
    <S sid="86" ssid="8">In combination with the other lexical features, they gave a small boost to precision, but not large enough to justify the increased demand on our computational resources.</S>
    <S sid="87" ssid="9">In addition to lexical features we extract a number of features based on syntax.</S>
    <S sid="88" ssid="10">In order to generate these features we parse each sentence with the broad-coverage dependency parser MINIPAR (Lin, 1998).</S>
    <S sid="89" ssid="11">A dependency parse consists of a set of words and chunks (e.g.</S>
    <S sid="90" ssid="12">&#8216;Edwin Hubble&#8217;, &#8216;Missouri&#8217;, &#8216;born&#8217;), linked by directional dependencies (e.g.</S>
    <S sid="91" ssid="13">&#8216;pred&#8217;, &#8216;lex-mod&#8217;), as in Figure 1.</S>
    <S sid="92" ssid="14">For each sentence we extract a dependency path between each pair of entities.</S>
    <S sid="93" ssid="15">A dependency path consists of a series of dependencies, directions and words/chunks representing a traversal of the parse.</S>
    <S sid="94" ssid="16">Part-of-speech tags are not included in the dependency path.</S>
    <S sid="95" ssid="17">Our syntactic features are similar to those used in Snow et al. (2005).</S>
    <S sid="96" ssid="18">They consist of the conjunction of: A window node is a node connected to one of the two entities and not part of the dependency path.</S>
    <S sid="97" ssid="19">We generate one conjunctive feature for each pair of left and right window nodes, as well as features which omit one or both of them.</S>
    <S sid="98" ssid="20">Thus each syntactic row in Table 3 represents a single syntactic feature.</S>
    <S sid="99" ssid="21">Every feature contains, in addition to the content described above, named entity tags for the two entities.</S>
    <S sid="100" ssid="22">We perform named entity tagging using the Stanford four-class named entity tagger (Finkel et al., 2005).</S>
    <S sid="101" ssid="23">The tagger provides each word with a label from {person, location, organization, miscellaneous, none}.</S>
    <S sid="102" ssid="24">Rather than use each of the above features in the classifier independently, we use only conjunctive features.</S>
    <S sid="103" ssid="25">Each feature consists of the conjunction of several attributes of the sentence, plus the named entity tags.</S>
    <S sid="104" ssid="26">For two features to match, all of their conjuncts must match exactly.</S>
    <S sid="105" ssid="27">This yields low-recall but high-precision features.</S>
    <S sid="106" ssid="28">With a small amount of data, this approach would be problematic, since most features would only be seen once, rendering them useless to the classifier.</S>
    <S sid="107" ssid="29">Since we use large amounts of data, even complex features appear multiple times, allowing our highprecision features to work as intended.</S>
    <S sid="108" ssid="30">Features for a sample sentence are shown in Table 3.</S>
  </SECTION>
  <SECTION title="6 Implementation" number="6">
    <S sid="109" ssid="1">For unstructured text we use the Freebase Wikipedia Extraction, a dump of the full text of all Wikipedia articles (not including discussion and user pages) which has been sentence-tokenized by Metaweb Technologies, the developers of Freebase (Metaweb, 2008).</S>
    <S sid="110" ssid="2">This dump consists of approximately 1.8 million articles, with an average of 14.3 sentences per article.</S>
    <S sid="111" ssid="3">The total number of words (counting punctuation marks) is 601,600,703.</S>
    <S sid="112" ssid="4">For our experiments we use about half of the articles: 800,000 for training and 400,000 for testing.</S>
    <S sid="113" ssid="5">We use Wikipedia because it is relatively upto-date, and because its sentences tend to make explicit many facts that might be omitted in newswire.</S>
    <S sid="114" ssid="6">Much of the information in Freebase is derived from tabular data from Wikipedia, meaning that Freebase relations are more likely to appear in sentences in Wikipedia.</S>
    <S sid="115" ssid="7">Each sentence of this unstructured text is dependency parsed by MINIPAR to produce a dependency graph.</S>
    <S sid="116" ssid="8">In preprocessing, consecutive words with the same named entity tag are &#8216;chunked&#8217;, so that Edwin/PERSON Hubble/PERSON becomes [Edwin Hubble]/PERSON.</S>
    <S sid="117" ssid="9">This chunking is restricted by the dependency parse of the sentence, however, in that chunks must be contiguous in the parse (i.e., no chunks across subtrees).</S>
    <S sid="118" ssid="10">This ensures that parse tree structure is preserved, since the parses must be updated to reflect the chunking.</S>
    <S sid="119" ssid="11">For held-out evaluation experiments (see section 7.1), half of the instances of each relation are not used in training, and are later used to compare against newly discovered instances.</S>
    <S sid="120" ssid="12">This means that 900,000 Freebase relation instances are used in training, and 900,000 are held out.</S>
    <S sid="121" ssid="13">These experiments used 800,000 Wikipedia articles in the training phase and 400,000 different articles in the testing phase.</S>
    <S sid="122" ssid="14">For human evaluation experiments, all 1.8 million relation instances are used in training.</S>
    <S sid="123" ssid="15">Again, we use 800,000 Wikipedia articles in the training phase and 400,000 different articles in the testing phase.</S>
    <S sid="124" ssid="16">For all our experiments, we only extract relation instances that do not appear in our training data, i.e., instances that are not already in Freebase.</S>
    <S sid="125" ssid="17">Our system needs negative training data for the purposes of constructing the classifier.</S>
    <S sid="126" ssid="18">Towards this end, we build a feature vector in the training phase for an &#8216;unrelated&#8217; relation by randomly selecting entity pairs that do not appear in any Freebase relation and extracting features for them.</S>
    <S sid="127" ssid="19">While it is possible that some of these entity pairs on the 102 largest relations we use.</S>
    <S sid="128" ssid="20">Precision for three different feature sets (lexical features, syntactic features, and both) is reported at recall levels from 10 to 100,000.</S>
    <S sid="129" ssid="21">At the 100,000 recall level, we classify most of the instances into three relations: 60% as location-contains, 13% as person-place-of-birth, and 10% as person-nationality. are in fact related but are wrongly omitted from the Freebase data, we expect that on average these false negatives will have a small effect on the performance of the classifier.</S>
    <S sid="130" ssid="22">For performance reasons, we randomly sample 1% of such entity pairs for use as negative training examples.</S>
    <S sid="131" ssid="23">By contrast, in the actual test data, 98.7% of the entity pairs we extract do not possess any of the top 102 relations we consider in Freebase.</S>
    <S sid="132" ssid="24">We use a multi-class logistic classifier optimized using L-BFGS with Gaussian regularization.</S>
    <S sid="133" ssid="25">Our classifier takes as input an entity pair and a feature vector, and returns a relation name and a confidence score based on the probability of the entity pair belonging to that relation.</S>
    <S sid="134" ssid="26">Once all of the entity pairs discovered during testing have been classified, they can be ranked by confidence score and used to generate a list of the n most likely new relation instances.</S>
    <S sid="135" ssid="27">Table 4 shows some high-weight features learned by our system.</S>
    <S sid="136" ssid="28">We discuss the results in the next section.</S>
  </SECTION>
  <SECTION title="7 Evaluation" number="7">
    <S sid="137" ssid="1">We evaluate labels in two ways: automatically, by holding out part of the Freebase relation data during training, and comparing newly discovered relation instances against this held-out data, and manually, having humans who look at each positively labeled entity pair and mark whether the relation indeed holds between the participants.</S>
    <S sid="138" ssid="2">Both evaluations allow us to calculate the precision of the system for the best N instances.</S>
    <S sid="139" ssid="3">Figure 2 shows the performance of our classifier on held-out Freebase relation data.</S>
    <S sid="140" ssid="4">While held-out evaluation suffers from false negatives, it gives a rough measure of precision without requiring expensive human evaluation, making it useful for parameter setting.</S>
    <S sid="141" ssid="5">At most recall levels, the combination of syntactic and lexical features offers a substantial improvement in precision over either of these feature sets on its own.</S>
    <S sid="142" ssid="6">Human evaluation was performed by evaluators on Amazon&#8217;s Mechanical Turk service, shown to be effective for natural language annotation in Snow et al. (2008).</S>
    <S sid="143" ssid="7">We ran three experiments: one using only syntactic features; one using only lexical features; and one using both syntactic and lexical features.</S>
    <S sid="144" ssid="8">For each of the 10 relations that appeared most frequently in our test data (according to our classifier), we took samples from the first 100 and 1000 instances of this relation generated in each experiment, and sent these to Mechanical Turk for results per relation, using stratified samples.</S>
    <S sid="145" ssid="9">&#8216;Average&#8217; gives the mean precision of the 10 relations.</S>
    <S sid="146" ssid="10">Key: Syn = syntactic features only.</S>
    <S sid="147" ssid="11">Lex = lexical features only.</S>
    <S sid="148" ssid="12">We use stratified samples because of the overabundance of location-contains instances among our high-confidence results. human evaluation.</S>
    <S sid="149" ssid="13">Our sample size was 100.</S>
    <S sid="150" ssid="14">Each predicted relation instance was labeled as true or false by between 1 and 3 labelers on Mechanical Turk.</S>
    <S sid="151" ssid="15">We assigned the truth or falsehood of each relation according to the majority vote of the labels; in the case of a tie (one vote each way) we assigned the relation as true or false with equal probability.</S>
    <S sid="152" ssid="16">The evaluation of the syntactic, lexical, and combination of features at a recall of 100 and 1000 instances is presented in Table 5.</S>
    <S sid="153" ssid="17">At a recall of 100 instances, the combination of lexical and syntactic features has the best performance for a majority of the relations, while at a recall level of 1000 instances the results are mixed.</S>
    <S sid="154" ssid="18">No feature set strongly outperforms any of the others across all relations.</S>
  </SECTION>
  <SECTION title="8 Discussion" number="8">
    <S sid="155" ssid="1">Our results show that the distant supervision algorithm is able to extract high-precision patterns for a reasonably large number of relations.</S>
    <S sid="156" ssid="2">The held-out results in Figure 2 suggest that the combination of syntactic and lexical features provides better performance than either feature set on its own.</S>
    <S sid="157" ssid="3">In order to understand the role of syntactic features, we examine Table 5, the human evaluation of the most frequent 10 relations.</S>
    <S sid="158" ssid="4">For the topranking 100 instances of each relation, most of the best results use syntactic features, either alone or in combination with lexical features.</S>
    <S sid="159" ssid="5">For the topranking 1000 instances of each relation, the results are more mixed, but syntactic features still helped in most classifications.</S>
    <S sid="160" ssid="6">We then examine those relations for which syntactic features seem to help.</S>
    <S sid="161" ssid="7">For example, syntactic features consistently outperform lexical features for the director-film and writer-film relations.</S>
    <S sid="162" ssid="8">As discussed in section 4, these two relations are particularly ambiguous, suggesting that syntactic features may help tease apart difficult relations.</S>
    <S sid="163" ssid="9">Perhaps more telling, we noticed many examples with a long string of words between the director and the film: Back Street is a 1932 film made by Universal Pictures, directed by John M. Stahl, and produced by Carl Laemmle Jr. Sentences like this have very long (and thus rare) lexical features, but relatively short dependency paths.</S>
    <S sid="164" ssid="10">Syntactic features can more easily abstract from the syntactic modifiers that comprise the extraneous parts of these strings.</S>
    <S sid="165" ssid="11">Our results thus suggest that syntactic features are indeed useful in distantly supervised information extraction, and that the benefit of syntax occurs in cases where the individual patterns are particularly ambiguous, and where they are nearby in the dependency structure but distant in terms of words.</S>
    <S sid="166" ssid="12">It remains for future work to see whether simpler, chunk-based syntactic features might be able to capture enough of this gain without the overhead of full parsing, and whether coreference resolution could improve performance.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="9">
    <S sid="167" ssid="1">We would like to acknowledge Sarah Spikes for her help in developing the relation extraction system, Christopher Manning and Mihai Surdeanu for their invaluable advice, and Fuliang Weng and Baoshi Yan for their guidance.</S>
    <S sid="168" ssid="2">Our research was partially funded by the NSF via award IIS0811974 and by Robert Bosch LLC.</S>
  </SECTION>
</PAPER>
