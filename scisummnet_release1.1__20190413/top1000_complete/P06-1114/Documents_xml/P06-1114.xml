<PAPER>
  <S sid="0">Methods For Using Textual Entailment In Open-Domain Question Answering</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Work on the semantics of questions has argued that the relation between a question and its answer(s) can be cast in terms of logical entailment.</S>
    <S sid="2" ssid="2">In this paper, we demonstrate how computational systems to recognize entailment can be used to enhance the accuracy of current open-domain automatic question answering (Q/A) systems.</S>
    <S sid="3" ssid="3">In our experiments, we show that when textual entailment information is used to either filter or rank answers returned by a Q/A system, accuracy can be increased by as much as 20% overall.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="4" ssid="1">Open-Domain Question Answering (Q/A) systems return a textual expression, identified from a vast document collection, as a response to a question asked in natural language.</S>
    <S sid="5" ssid="2">In the quest for producing accurate answers, the open-domain Q/A problem has been cast as: (1) a pipeline of linguistic processes pertaining to the processing of questions, relevant passages and candidate answers, interconnected by several types of lexicosemantic feedback (cf.</S>
    <S sid="6" ssid="3">(Harabagiu et al., 2001; Moldovan et al., 2002)); (2) a combination of language processes that transform questions and candidate answers in logic representations such that reasoning systems can select the correct answer based on their proofs (cf.</S>
    <S sid="7" ssid="4">(Moldovan et al., 2003)); (3) a noisy-channel model which selects the most likely answer to a question (cf.</S>
    <S sid="8" ssid="5">(Echihabi and Marcu, 2003)); or (4) a constraint satisfaction problem, where sets of auxiliary questions are used to provide more information and better constrain the answers to individual questions (cf.</S>
    <S sid="9" ssid="6">(Prager et al., 2004)).</S>
    <S sid="10" ssid="7">While different in their approach, each of these frameworks seeks to approximate the forms of semantic inference that will allow them to identify valid textual answers to natural language questions.</S>
    <S sid="11" ssid="8">Recently, the task of automatically recognizing one form of semantic inference &#8211; textual entailment &#8211; has received much attention from groups participating in the 2005 and 2006 PASCAL Recognizing Textual Entailment (RTE) Challenges (Dagan et al., 2005).</S>
    <S sid="12" ssid="9">1 As currently defined, the RTE task requires systems to determine whether, given two text fragments, the meaning of one text could be reasonably inferred, or textually entailed, from the meaning of the other text.</S>
    <S sid="13" ssid="10">We believe that systems developed specifically for this task can provide current question-answering systems with valuable semantic information that can be leveraged to identify exact answers from ranked lists of candidate answers.</S>
    <S sid="14" ssid="11">By replacing the pairs of texts evaluated in the RTE Challenge with combinations of questions and candidate answers, we expect that textual entailment could provide yet another mechanism for approximating the types of inference needed in order answer questions accurately.</S>
    <S sid="15" ssid="12">In this paper, we present three different methods for incorporating systems for textual entailment into the traditional Q/A architecture employed by many current systems.</S>
    <S sid="16" ssid="13">Our experimental results indicate that (even at their current level of performance) textual entailment systems can substantially improve the accuracy of Q/A, even when no other form of semantic inference is employed.</S>
    <S sid="17" ssid="14">The remainder of the paper is organized as follows.</S>
    <S sid="18" ssid="15">Section 2 describes the three methods of using textual entailment in open-domain question answering that we have identified, while Section 3 presents the textual entailment system we have used.</S>
    <S sid="19" ssid="16">Section 4 details our experimental methods and our evaluation results.</S>
    <S sid="20" ssid="17">Finally, Section 5 provides a discussion of our findings, and Section 6 summarizes our conclusions.</S>
  </SECTION>
  <SECTION title="2 Integrating Textual Entailment in" number="2">
    <S sid="21" ssid="1">In this section, we describe three different methods for integrating a textual entailment (TE) system into the architecture of an open-domain Q/A system.</S>
    <S sid="22" ssid="2">Work on the semantics of questions (Groenendijk, 1999; Lewis, 1988) has argued that the formal answerhood relation found between a question and a set of (correct) answers can be cast in terms of logical entailment.</S>
    <S sid="23" ssid="3">Under these approaches (referred to as licensing by (Groenendijk, 1999) and aboutness by (Lewis, 1988)), p is considered to be an answer to a question ?q iff ?q logically entails the set of worlds in which p is true(i.e.</S>
    <S sid="24" ssid="4">?p).</S>
    <S sid="25" ssid="5">While the notion of textual entailment has been defined far less rigorously than logical entailment, we believe that the recognition of textual entailment between a question and a set of candidate answers &#8211; or between a question and questions generated from answers &#8211; can enable Q/A systems to identify correct answers with greater precision than current keyword- or pattern-based techniques.</S>
    <S sid="26" ssid="6">As illustrated in Figure 1, most open-domain Q/A systems generally consist of a sequence of three modules: (1) a question processing (QP) module; (2) a passage retrieval (PR) module; and (3) an answer processing (AP) module.</S>
    <S sid="27" ssid="7">Questions are first submitted to a QP module, which extracts a set of relevant keywords from the text of the question and identifies the question&#8217;s expected answer type (EAT).</S>
    <S sid="28" ssid="8">Keywords &#8211; along with the question&#8217;s EAT &#8211; are then used by a PR module to retrieve a ranked list of paragraphs which may contain answers to the question.</S>
    <S sid="29" ssid="9">These paragraphs are then sent to an AP module, which extracts an exact candidate answer from each passage and then ranks each candidate answer according to the likelihood that it is a correct answer to the original question.</S>
    <S sid="30" ssid="10">Method 1.</S>
    <S sid="31" ssid="11">In Method 1, each of a ranked list of answers that do not meet the minimum conditions for TE are removed from consideration and then re-ranked based on the entailment confidence (a real-valued number ranging from 0 to 1) assigned by the TE system to each remaining example.</S>
    <S sid="32" ssid="12">The system then outputs a new set of ranked answers which do not contain any answers that are not entailed by the user&#8217;s question.</S>
    <S sid="33" ssid="13">Table 1 provides an example where Method 1 could be used to make the right prediction for a set of answers.</S>
    <S sid="34" ssid="14">Even though Al was ranked in sixth position, the identification of a high-confidence positive entailment enabled it to be returned as the intensive process for most Q/A systems, we expect that TE information can be used to limit the number of passages considered during AP.</S>
    <S sid="35" ssid="15">As illustrated in Method 2 in Figure 1, lists of passages retrieved by a PR module can either be ranked (or filtered) using TE information.</S>
    <S sid="36" ssid="16">Once ranking is complete, answer extraction takes place only on the set of entailed passages that the system considers likely to contain a correct answer to the user&#8217;s question.</S>
    <S sid="37" ssid="17">Method 3.</S>
    <S sid="38" ssid="18">In previous work (Harabagiu et al., 2005b), we have described techniques that can be used to automatically generate well-formed natural language questions from the text of paragraphs retrieved by a PR module.</S>
    <S sid="39" ssid="19">In our current system, sets of automatically-generated questions (AGQ) are created using a stand-alone AutoQUAB generation module, which assembles question-answer pairs (known as QUABs) from the top-ranked passages returned in response to a question.</S>
    <S sid="40" ssid="20">Table 2 lists some of the questions that this module has produced for the question Q2: &#8220;How hot does the inside of an active volcano get?&#8221;.</S>
    <S sid="41" ssid="21">Q2: &#8220;How hot does the inside of an active volcano get?'</S>
    <S sid="42" ssid="22">A2 Tamagawa University volcano expert Takeyo Kosaka said lava fragments belched out of the mountain on January 31 were as hot as 300 degrees Fahrenheit.</S>
    <S sid="43" ssid="23">The intense heat from a second eruption on Tuesday forced rescue operations to stop after 90 minutes.</S>
    <S sid="44" ssid="24">Because of the high temperatures, the bodies of only five of the volcano&#8217;s initial victims were retrieved.</S>
    <S sid="45" ssid="25">Positive Entailment AGQ, What temperature were the lava fragments belched out of the mountain on January 31?</S>
    <S sid="46" ssid="26">AGQ2 How many degrees Fahrenheit were the lava fragments belched out of the mountain on January 31?</S>
    <S sid="47" ssid="27">Negative Entailment AGQ3 When did rescue operations have to stop?</S>
    <S sid="48" ssid="28">AGQ4 How many bodies of the volcano&#8217;s initial victims were retrieved?</S>
    <S sid="49" ssid="29">Table 2: TE between AGQs and user question.</S>
    <S sid="50" ssid="30">Following (Groenendijk, 1999), we expect that if a question ?q logically entails another question ?q', then some subset of the answers entailed by ?q' should also be interpreted as valid answers to ?q.</S>
    <S sid="51" ssid="31">By establishing TE between a question and AGQs derived from passages identified by the Q/A system for that question, we expect we can identify a set of answer passages that contain correct answers to the original question.</S>
    <S sid="52" ssid="32">For example, in Table 2, we find that entailment between questions indicates the correctness of a candidate answer: here, establishing that Q2 entails AGQs and AGQ2 (but not AGQ3 or AGQ4) enables the system to select A2 as the correct answer.</S>
    <S sid="53" ssid="33">When at least one of the AGQs generated by the AutoQUAB module is entailed by the original question, all AGQs that do not reach TE are filtered from consideration; remaining passages are assigned an entailment confidence score and are sent to the AP module in order to provide an exact answer to the question.</S>
    <S sid="54" ssid="34">Following this process, candidate answers extracted from the AP module were then re-associated with their AGQs and resubmitted to the TE system (as in Method 1).</S>
    <S sid="55" ssid="35">Question-answer pairs deemed to be positive instances of entailment were then stored in a database and used as additional training data for the AutoQUAB module.</S>
    <S sid="56" ssid="36">When no AGQs were found to be entailed by the original question, however, passages were ranked according to their entailment confidence and sent to AP for further processing and validation.</S>
  </SECTION>
  <SECTION title="3 The Textual Entailment System" number="3">
    <S sid="57" ssid="1">Processing textual entailment, or recognizing whether the information expressed in a text can be inferred from the information expressed in another text, can be performed in four ways.</S>
    <S sid="58" ssid="2">We can try to (1) derive linguistic information from the pair of texts, and cast the inference recognition as a classification problem; or (2) evaluate the probability that an entailment can exist between the two texts; (3) represent the knowledge from the pair of texts in some representation language that can be associated with an inferential mechanism; or (4) use the classical AI definition of entailment and build models of the world in which the two texts are respectively true, and then check whether the models associated with one text are included in the models associated with the other text.</S>
    <S sid="59" ssid="3">Although we believe that each of these methods should be investigated fully, we decided to focus only on the first method, which allowed us to build the TE system illustrated in Figure 2.</S>
    <S sid="60" ssid="4">Our TE system consists of (1) a Preprocessing Module, which derives linguistic knowledge from the text pair; (2) an Alignment Module, which takes advantage of the notions of lexical alignment and textual paraphrases; and (3) a Classification Module, which uses a machine learning classifier (based on decision trees) to make an entailment judgment for each pair of texts.</S>
    <S sid="61" ssid="5">As described in (Hickl et al., 2006), the Preprocessing module is used to syntactically parse texts, identify the semantic dependencies of predicates, label named entities, normalize temporal and spatial expressions, resolve instances of coreference, and annotate predicates with polarity, tense, and modality information.</S>
    <S sid="62" ssid="6">Following preprocessing, texts are sent to an Alignment Module which uses a Maximum Entropy-based classifier in order to estimate the probability that pairs of constituents selected from texts encode corresponding information that could be used to inform an entailment judgment.</S>
    <S sid="63" ssid="7">This module assumes that since sets of entailing texts necessarily predicate about the same set of individuals or events, systems should be able to identify elements from each text that convey similar types of presuppositions.</S>
    <S sid="64" ssid="8">Examples of predicates and arguments aligned by this module are presented in Figure 3.</S>
    <S sid="65" ssid="9">Aligned constituents are then used to extract sets of phrase-level alternations (or &#8220;paraphrases&#8221;) from the WWW that could be used to capture correspondences between texts longer than individual constituents.</S>
    <S sid="66" ssid="10">The top 8 candidate paraphrases for two of the aligned elements from Figure 3 are presented in Table 3.</S>
    <S sid="67" ssid="11">Finally, the Classification Module employs a decision tree classifier in order to determine whether an entailment relationship exists for each pair of texts.</S>
    <S sid="68" ssid="12">This classifier is learned using features extracted from the previous modules, including features derived from (1) the (lexical) alignment of the texts, (2) syntactic and semantic dependencies discovered in each text passage, (3) paraphrases derived from web documents, and (4) semantic and pragmatic annotations.</S>
    <S sid="69" ssid="13">(A complete list of features can be found in Figure 4.)</S>
    <S sid="70" ssid="14">Based on these features, the classifier outputs both an entailment judgment (either yes or no) and a confidence value, which is used to rank answers or paragraphs in the architecture illustrated in Figure 1.</S>
    <S sid="71" ssid="15">Several approaches to the RTE task have argued that the recognition of textual entailment can be enhanced when systems are able to identify &#8211; or align &#8211; corresponding entities, predicates, or phrases found in a pair of texts.</S>
    <S sid="72" ssid="16">In this section, we show that by using a machine learning-based classifier which combines lexico-semantic information from a wide range of sources, we are able to accurately identify aligned constituents in pairs of texts with over 90% accuracy.</S>
    <S sid="73" ssid="17">We believe the alignment of corresponding entities can be cast as a classification problem which uses lexico-semantic features in order to compute an alignment probability p(a), which corresponds to the likelihood that a term selected from one text entails a term from another text.</S>
    <S sid="74" ssid="18">We used constituency information from a chunk parser to decompose the pair of texts into a set of disjoint segments known as &#8220;alignable chunks&#8221;.</S>
    <S sid="75" ssid="19">Alignable chunks from one text (Ct) and the other text (Ch) are then assembled into an alignment matrix (Ct x Ch).</S>
    <S sid="76" ssid="20">Each pair of chunks (p E Ct x Ch) is then submitted to a Maximum Entropy-based classifier which determines whether or not the pair of chunks represents a case of lexical entailment.</S>
    <S sid="77" ssid="21">Three classes of features were used in the Alignment Classifier: (1) a set of statistical features (e.g. cosine similarity), (2) a set of lexicosemantic features (including WordNet Similarity (Pedersen et al., 2004), named entity class equality, and part-of-speech equality), and (3) a set of string-based features (such as Levenshtein edit distance and morphological stem equality).</S>
    <S sid="78" ssid="22">As in (Hickl et al., 2006), we used a twostep approach to obtain sufficient training data for the Alignment Classifier.</S>
    <S sid="79" ssid="23">First, humans were tasked with annotating a total of 10,000 alignment pairs (extracted from the 2006 PASCAL Development Set) as either positive or negative instances of alignment.</S>
    <S sid="80" ssid="24">These annotations were then used to train a hillclimber that was used to annotate a larger set of 450,000 alignment pairs selected at random from the training corpora described in Section 3.3.</S>
    <S sid="81" ssid="25">These machine-annotated examples were then used to train the Maximum Entropy-based classifier that was used in our TE system.</S>
    <S sid="82" ssid="26">Table 4 presents results from TE&#8217;s linearand Maximum Entropy-based Alignment Classifiers on a sample of 1000 alignment pairs selected at random from the 2006 PASCAL Test Set.</S>
    <S sid="83" ssid="27">Much recent work on automatic paraphrasing (Barzilay and Lee, 2003) has used relatively simple statistical techniques to identify text passages that contain the same information from parallel corpora.</S>
    <S sid="84" ssid="28">Since sentence-level paraphrases are generally assumed to contain information about the same event, these approaches have generally assumed that all of the available paraphrases for a given sentence will include at least one pair of entities which can be used to extract sets of paraphrases from text.</S>
    <S sid="85" ssid="29">The TE system uses a similar approach to gather phrase-level alternations for each entailment pair.</S>
    <S sid="86" ssid="30">In our system, the two highest-confidence entity alignments returned by the Lexical Alignment module were used to construct a query which was used to retrieve the top 500 documents from Google, as well as all matching instances from our training corpora described in Section 3.3.</S>
    <S sid="87" ssid="31">This method did not always extract true paraphrases of either texts.</S>
    <S sid="88" ssid="32">In order increase the likelihood that only true paraphrases were considered as phraselevel alternations for an example, extracted sentences were clustered using complete-link clustering using a technique proposed in (Barzilay and Lee, 2003).</S>
    <S sid="89" ssid="33">In order to obtain more training data for our TE system, we extracted more than 200,000 examples of textual entailment from large newswire corpora.</S>
    <S sid="90" ssid="34">Positive Examples.</S>
    <S sid="91" ssid="35">Following an idea proposed in (Burger and Ferro, 2005), we created a corpus of approximately 101,000 textual entailment examples by pairing the headline and first sentence from newswire documents.</S>
    <S sid="92" ssid="36">In order to increase the likelihood of including only positive examples, pairs were filtered that did not share an entity (or an NP) in common between the headline and the first sentence Negative Examples.</S>
    <S sid="93" ssid="37">Two approaches were used to gather negative examples for our training set.</S>
    <S sid="94" ssid="38">First, we extracted 98,000 pairs of sequential sentences that included mentions of the same named entity from a large newswire corpus.</S>
    <S sid="95" ssid="39">We also extracted 21,000 pairs of sentences linked by connectives such as even though, in contrast and but.</S>
  </SECTION>
  <SECTION title="4 Experimental Results" number="4">
    <S sid="96" ssid="1">In this section, we describe results from four sets of experiments designed to explore how textual entailment information can be used to enhance the quality of automatic Q/A systems.</S>
    <S sid="97" ssid="2">We show that by incorporating features from TE into a Q/A system which employs no other form of textual inference, we can improve accuracy by more than 20% over a baseline.</S>
    <S sid="98" ssid="3">We conducted our evaluations on a set of 500 factoid questions selected randomly from questions previously evaluated during the annual TREC Q/A evaluations.</S>
    <S sid="99" ssid="4">2 Of these 500 questions, 335 (67.0%) were automatically assigned an answer type from our system&#8217;s answer type hierarchy ; the remaining 165 (33.0%) questions were classified as having an unknown answer type.</S>
    <S sid="100" ssid="5">In order to provide a baseline for our experiments, we ran a version of our Q/A system, known as FERRET (Harabagiu et al., 2005a), that does not make use of textual entailment information when identifying answers to questions.</S>
    <S sid="101" ssid="6">Results from this baseline are presented in Table 7.</S>
    <S sid="102" ssid="7">The performance of the TE system described in Section 3 was first evaluated in the 2006 PASCAL RTE Challenge.</S>
    <S sid="103" ssid="8">In this task, systems were tasked with determining whether the meaning of a sentence (referred to as a hypothesis) could be reasonably inferred from the meaning of another sentence (known as a text).</S>
    <S sid="104" ssid="9">Four types of sentence pairs were evaluated in the 2006 RTE Challenge, including: pairs derived from the output of In previous work (Hickl et al., 2006), we have found that the type and amount of training data available to our TE system significantly (p &lt; 0.05) impacted its performance on the 2006 RTE Test Set.</S>
    <S sid="105" ssid="10">When our system was trained on the training corpora described in Section 3.3, the overall accuracy of the system increased by more than 10%, from 65.25% to 75.38%.</S>
    <S sid="106" ssid="11">In order to provide training data that replicated the task of recognizing entailment between a question and an answer, we assembled a corpus of 5000 question-answer pairs selected from answers that our baseline Q/A system returned in response to a new set of 1000 questions selected from the TREC test sets.</S>
    <S sid="107" ssid="12">2500 positive training examples were created from answers identified by human annotators to be correct answers to a question, while 2500 negative examples were created by pairing questions with incorrect answers returned by the Q/A system.</S>
    <S sid="108" ssid="13">After training our TE system on this corpus, we performed the following four experiments: Method 1.</S>
    <S sid="109" ssid="14">In the first experiment, the ranked lists of answers produced by the Q/A system were submitted to the TE system for validation.</S>
    <S sid="110" ssid="15">Under this method, answers that were not entailed by the question were removed from consideration; the top-ranked entailed answer was then returned as the system&#8217;s answer to the question.</S>
    <S sid="111" ssid="16">Results from this method are presented in Table 9.</S>
    <S sid="112" ssid="17">Method 2.</S>
    <S sid="113" ssid="18">In this experiment, entailment information was used to rank passages returned by the PR module.</S>
    <S sid="114" ssid="19">After an initial relevance ranking was determined from the PR engine, the top 50 passages were paired with the original question and were submitted to the TE system.</S>
    <S sid="115" ssid="20">Passages were re-ranked using the entailment judgment and the entailment confidence computed for each pair and then submitted to the AP module.</S>
    <S sid="116" ssid="21">Features derived from the entailment confidence were then combined with the keyword- and relation-based features described in (Harabagiu et al., 2005a) in order to produce a final ranking of candidate answers.</S>
    <S sid="117" ssid="22">Results from this method are presented in Table 9.</S>
    <S sid="118" ssid="23">Method 3.</S>
    <S sid="119" ssid="24">In the third experiment, TE was used to select AGQs that were entailed by the question submitted to the Q/A system.</S>
    <S sid="120" ssid="25">Here, AutoQUAB was used to generate questions for the top 50 candidate answers identified by the system.</S>
    <S sid="121" ssid="26">When at least one of the top 50 AGQs were entailed by the original question, the answer passage associated with the top-ranked entailed question was returned as the answer.</S>
    <S sid="122" ssid="27">When none of the top 50 AGQs were entailed by the question, questionanswer pairs were re-ranked based on the entailment confidence, and the top-ranked answer was returned.</S>
    <S sid="123" ssid="28">Results for both of these conditions are presented in Table 9.</S>
    <S sid="124" ssid="29">Hybrid Method.</S>
    <S sid="125" ssid="30">Finally, we found that the best results could be obtained by combining aspects of each of these three strategies.</S>
    <S sid="126" ssid="31">Under this approach, candidate answers were initially ranked using features derived from entailment classifications performed between (1) the original question and each candidate answer and (2) the original question and the AGQ generated from each candidate answer.</S>
    <S sid="127" ssid="32">Once a ranking was established, answers that were not judged to be entailed by the question were also removed from final ranking.</S>
    <S sid="128" ssid="33">Results from this hybrid method are provided in Table 9.</S>
  </SECTION>
  <SECTION title="5 Discussion" number="5">
    <S sid="129" ssid="1">The experiments reported in this paper suggest that current TE systems may be able to provide open-domain Q/A systems with the forms of semantic inference needed to perform accurate answer validation.</S>
    <S sid="130" ssid="2">While probabilistic or web-based methods for answer validation have been previously explored in the literature (Magnini et al., 2002), these approaches have modeled the relationship between a question and a (correct) answer in terms of relevance and have not tried to approximate the deeper semantic phenomena that are involved in determining answerhood.</S>
    <S sid="131" ssid="3">Our work suggests that considerable gains in performance can be obtained by incorporating TE during both answer processing and passage retrieval.</S>
    <S sid="132" ssid="4">While best results were obtained using the Hybrid Method (which boosted performance by nearly 28% for questions with known EATs), each of the individual methods managed to boost the overall accuracy of the Q/A system by at least 7%.</S>
    <S sid="133" ssid="5">When TE was used to filter non-entailed answers from consideration (Method 1), the overall accuracy of the Q/A system increased by 12% over the baseline (when an EAT could be identified) and by nearly 9% (when no EAT could be identified).</S>
    <S sid="134" ssid="6">In contrast, when entailment information was used to rank passages and candidate answers, performance increased by 22% and 10% respectively.</S>
    <S sid="135" ssid="7">Somewhat smaller performance gains were achieved when TE was used to select amongst AGQs generated by our Q/A system&#8217;s AutoQUAB module (Method 3).</S>
    <S sid="136" ssid="8">We expect that by adding features to TE system specifically designed to account for the semantic contributions of a question&#8217;s EAT, we may be able to boost the performance of this method.</S>
  </SECTION>
  <SECTION title="6 Conclusions" number="6">
    <S sid="137" ssid="1">In this paper, we discussed three different ways that a state-of-the-art textual entailment system could be used to enhance the performance of an open-domain Q/A system.</S>
    <S sid="138" ssid="2">We have shown that when textual entailment information is used to either filter or rank candidate answers returned by a Q/A system, Q/A accuracy can be improved from 32% to 52% (when an answer type can be detected) and from 30% to 40% (when no answer type can be detected).</S>
    <S sid="139" ssid="3">We believe that these results suggest that current supervised machine learning approaches to the recognition of textual entailment may provide open-domain Q/A systems with the inferential information needed to develop viable answer validation systems.</S>
  </SECTION>
  <SECTION title="7 Acknowledgments" number="7">
    <S sid="140" ssid="1">This material is based upon work funded in whole or in part by the U.S. Government and any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the U.S. Government.</S>
  </SECTION>
</PAPER>
