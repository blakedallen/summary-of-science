<PAPER>
  <S sid="0">Efficient Minimum Error Rate Training and Minimum Bayes-Risk Decoding for Translation Hypergraphs and Lattices</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Minimum Error Rate Training (MERT) and Minimum Bayes-Risk (MBR) decoding are used in most current state-of-theart Statistical Machine Translation (SMT) systems.</S>
    <S sid="2" ssid="2">The algorithms were originally to work with lists of translations, and recently extended to lattices that encode many more hypotheses typical lists.</S>
    <S sid="3" ssid="3">We here extend lattice-based MERT and MBR algorithms to work with hypergraphs that encode a vast number of translations produced by MT systems based on Synchronous Context Free Grammars.</S>
    <S sid="4" ssid="4">These algorithms are more efficient than the lattice-based versions presented earlier.</S>
    <S sid="5" ssid="5">We show how MERT can be employed to optimize parameters for MBR decoding.</S>
    <S sid="6" ssid="6">Our experiments show speedups from MERT and MBR as well as performance improvements from MBR decoding on several language pairs.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="7" ssid="1">Statistical Machine Translation (SMT) systems have improved considerably by directly using the error criterion in both training and decoding.</S>
    <S sid="8" ssid="2">By doing so, the system can be optimized for the translation task instead of a criterion such as likelihood that is unrelated to the evaluation metric.</S>
    <S sid="9" ssid="3">Two popular techniques that incorporate the error criterion are Minimum Error Rate Training (MERT) (Och, 2003) and Minimum BayesRisk (MBR) decoding (Kumar and Byrne, 2004).</S>
    <S sid="10" ssid="4">These two techniques were originally developed for N-best lists of translation hypotheses and recently extended to translation lattices (Macherey et al., 2008; Tromble et al., 2008) generated by a phrase-based SMT system (Och and Ney, 2004).</S>
    <S sid="11" ssid="5">Translation lattices contain a significantly higher number of translation alternatives relative to Nbest lists.</S>
    <S sid="12" ssid="6">The extension to lattices reduces the runtimes for both MERT and MBR, and gives performance improvements from MBR decoding.</S>
    <S sid="13" ssid="7">SMT systems based on synchronous context free grammars (SCFG) (Chiang, 2007; Zollmann and Venugopal, 2006; Galley et al., 2006) have recently been shown to give competitive performance relative to phrase-based SMT.</S>
    <S sid="14" ssid="8">For these systems, a hypergraph or packed forest provides a compact representation for encoding a huge number of translation hypotheses (Huang, 2008).</S>
    <S sid="15" ssid="9">In this paper, we extend MERT and MBR decoding to work on hypergraphs produced by SCFG-based MT systems.</S>
    <S sid="16" ssid="10">We present algorithms that are more efficient relative to the lattice algorithms presented in Macherey et al. (2008; Tromble et al.</S>
    <S sid="17" ssid="11">(2008).</S>
    <S sid="18" ssid="12">Lattice MBR decoding uses a linear approximation to the BLEU score (Papineni et al., 2001); the weights in this linear loss are set heuristically by assuming that n-gram precisions decay exponentially with n. However, this may not be optimal in practice.</S>
    <S sid="19" ssid="13">We employ MERT to select these weights by optimizing BLEU score on a development set.</S>
    <S sid="20" ssid="14">A related MBR-inspired approach for hypergraphs was developed by Zhang and Gildea (2008).</S>
    <S sid="21" ssid="15">In this work, hypergraphs were rescored to maximize the expected count of synchronous constituents in the translation.</S>
    <S sid="22" ssid="16">In contrast, our MBR algorithm directly selects the hypothesis in the hypergraph with the maximum expected approximate corpus BLEU score (Tromble et al., 2008).</S>
  </SECTION>
  <SECTION title="2 Translation Hypergraphs" number="2">
    <S sid="23" ssid="1">A translation lattice compactly encodes a large number of hypotheses produced by a phrase-based SMT system.</S>
    <S sid="24" ssid="2">The corresponding representation for an SMT system based on SCFGs (e.g.</S>
    <S sid="25" ssid="3">Chiang (2007), Zollmann and Venugopal (2006), Mi et al. (2008)) is a directed hypergraph or a packed forest (Huang, 2008).</S>
    <S sid="26" ssid="4">Formally, a hypergraph is a pair 7-1 = (V, &#163;) consisting of a vertex set V and a set of hyperedges &#163; C_ V* x V. Each hyperedge e E &#163; connects a head vertex h(e) with a sequence of tail vertices T(e) = {v1, ..., v,,,}.</S>
    <S sid="27" ssid="5">The number of tail vertices is called the arity (|e|) of the hyperedge.</S>
    <S sid="28" ssid="6">If the arity of a hyperedge is zero, h(e) is called a source vertex.</S>
    <S sid="29" ssid="7">The arity of a hypergraph is the maximum arity of its hyperedges.</S>
    <S sid="30" ssid="8">A hyperedge of arity 1 is a regular edge, and a hypergraph of arity 1 is a regular graph (lattice).</S>
    <S sid="31" ssid="9">Each hyperedge is labeled with a rule re from the SCFG.</S>
    <S sid="32" ssid="10">The number of nonterminals on the right-hand side of re corresponds with the arity of e. An example without scores is shown in Figure 1.</S>
    <S sid="33" ssid="11">A path in a translation hypergraph induces a translation hypothesis E along with its sequence of SCFG rules D = r1, r2, ..., rK which, if applied to the start symbol, derives E. The sequence of SCFG rules induced by a path is also called a derivation tree for E.</S>
  </SECTION>
  <SECTION title="3 Minimum Error Rate Training" number="3">
    <S sid="34" ssid="1">Given a set of source sentences F1&#65533; with corresponding reference translations RS , the objective of MERT is to find a parameter set &#65533;&#955;m which minimizes an automated evaluation criterion under a linear model: In the context of statistical machine translation, the optimization procedure was first described in Och (2003) for N-best lists and later extended to phrase-lattices in Macherey et al. (2008).</S>
    <S sid="35" ssid="2">The algorithm is based on the insight that, under a loglinear model, the cost function of any candidate translation can be represented as a line in the plane if the initial parameter set &#955;M is shifted along a direction dM .</S>
    <S sid="36" ssid="3">Let C = {E1, ..., EK} denote a set of candidate translations, then computing the best scoring translation hypothesis E&#65533; out of C results in the following optimization problem: as the independent variable.</S>
    <S sid="37" ssid="4">For any particuthe decoder seeks that translation which yields the largest score and therefore corresponds to the topmost line segment.</S>
    <S sid="38" ssid="5">If to +oo, other translation hypotheses may at some point constitute the topmost line segments and thus change the decision made by the decoder.</S>
    <S sid="39" ssid="6">The entire sequence of topmost line segments is called upper envelope and provides an exhaustive representation of all possible outcomes that the decoder may yield if is shifted along the chosen direction.</S>
    <S sid="40" ssid="7">Both the translations and their corresponding line segments can efficiently be computed without incorporating any error criterion.</S>
    <S sid="41" ssid="8">Once the envelope has been determined, the translation candidates of its constituent line segments are projected onto their corresponding error counts, thus yielding the exact and unsmoothed error surface for all candidate translations encoded in C. The error surface can now easily be traversed in order to find that under which the new paramM minimizes the global error.</S>
    <S sid="42" ssid="9">In this section, we present an extension of the algorithm described in Macherey et al. (2008) that allows us to efficiently compute and represent upper envelopes over all candidate translations encoded in hypergraphs.</S>
    <S sid="43" ssid="10">Conceptually, the algorithm works by propagating (initially empty) envelopes from the source nodes bottom-up to its unique root node, thereby expanding the envelopes by applying SCFG rules to the partial candidate translations that are associated with the constituent line segments.</S>
    <S sid="44" ssid="11">To recombine envelopes, we need two operators: the sum and the maximum over convex polygons.</S>
    <S sid="45" ssid="12">To illustrate which operator is applied when, we transform 7-1 = (V, &#163;) into a regular graph with typed nodes by (1) marking all vertices v E V with the symbol V and (2) replacing each hyperedge e E &#163;, 1, with a small subgraph consisting of a new vertex whose incoming and outgoing edges connect the same head an input: associative map a: V --+ Env(V), hyperarc e output: Minkowski sum of envelopes over T(e) in the transformed graph as were connected by e in the original graph.</S>
    <S sid="46" ssid="13">The unique outgoing edge of v&#8743;(e) is associated with the rule re; incoming edges are not linked to any rule.</S>
    <S sid="47" ssid="14">Figure 2 illustrates the transformation for a hyperedge with arity 3.</S>
    <S sid="48" ssid="15">The graph transformation is isomorphic.</S>
    <S sid="49" ssid="16">The rules associated with every hyperedge specify how line segments in the envelopes of a hyperedge&#8217;s tail nodes can be combined.</S>
    <S sid="50" ssid="17">Suppose we have a hyperedge e with rule re : X &#8212;* aX1bX2c and T(e) = {v1, v2}.</S>
    <S sid="51" ssid="18">Then we substitute X1 and X2 in the rule with candidate translations associated with line segments in envelopes Env(v1) and Env(v2) respectively.</S>
    <S sid="52" ssid="19">To derive the algorithm, we consider the general case of a hyperedge e with rule re : X &#8212;* w1X1w2...wnXnwn+1.</S>
    <S sid="53" ssid="20">Because the right-hand side of re has n nonterminals, the arity of e is |e |= n. Let T(e) = {v1, ..., vn} denote the tail nodes of e. We now assume that each tail node vi E T(e) is associated with the upper envelope over all candidate translations that are induced by derivations of the corresponding nonterminal symbol Xi.</S>
    <S sid="54" ssid="21">These envelopes shall be deAlgorithm 2 V-operation (Max) input: array L[0..K-1] containing line objects output: upper envelope of L noted by Env(vi).</S>
    <S sid="55" ssid="22">To decompose the problem of computing and propagating the tail envelopes over the hyperedge e to its head node, we now define two operations, one for either node type, to specify how envelopes associated with the tail vertices are propagated to the head vertex.</S>
    <S sid="56" ssid="23">Nodes of Type &#8220;&#8743;&#8221;: For a type n node, the resulting envelope is the Minkowski sum over the envelopes of the incoming edges (Berg et al., 2008).</S>
    <S sid="57" ssid="24">Since the envelopes of the incoming edges are convex hulls, the Minkowski sum provides an upper bound to the number of line segments that constitute the resulting envelope: the bound is the sum over the number of line segments in the envelopes of the incoming edges, i.e.</S>
    <S sid="58" ssid="25">: Algorithm 1 shows the pseudo code for computing the Minkowski sum over multiple envelopes.</S>
    <S sid="59" ssid="26">The line objects E used in this algorithm are encoded as 4-tuples, each consisting of the xintercept with E&#8217;s left-adjacent line stored as E.x, the slope E.m, the y-intercept E.y, and the (partial) derivation tree E.D.</S>
    <S sid="60" ssid="27">At the beginning, the leftmost line segment of each envelope is inserted into a priority queue pq.</S>
    <S sid="61" ssid="28">The priority is defined in terms of a line&#8217;s x-intercept such that lower values imply higher priority.</S>
    <S sid="62" ssid="29">Hence, the priority queue enumerates all line segments from left to right in ascending order of their x-intercepts, which is the order needed to compute the Minkowski sum.</S>
    <S sid="63" ssid="30">Nodes of Type &#8220;V&#8221;: The operation performed at nodes of type &#8220;V&#8221; computes the convex hull over the union of the envelopes propagated over the incoming edges.</S>
    <S sid="64" ssid="31">This operation is a &#8220;max&#8221; operation and it is identical to the algorithm described in (Macherey et al., 2008) for phrase lattices.</S>
    <S sid="65" ssid="32">Algorithm 2 contains the pseudo code.</S>
    <S sid="66" ssid="33">The complete algorithm then works as follows: Traversing all nodes in x bottom-up in topological order, we proceed for each node v E V over its incoming hyperedges and combine in each such hyperedge e the envelopes associated with the tail nodes T(e) by computing their sum according to Algorithm 1 (n-operation).</S>
    <S sid="67" ssid="34">For each incoming hyperedge e, the resulting envelope is then expanded by applying the rule re to its constituent line segments.</S>
    <S sid="68" ssid="35">The envelopes associated with different incoming hyperedges of node v are then combined and reduced according to Algorithm 2 (V-operation).</S>
    <S sid="69" ssid="36">By construction, the envelope at the root node is the convex hull over the line segments of all candidate translations that can be derived from the hypergraph.</S>
    <S sid="70" ssid="37">The suggested algorithm has similar properties as the algorithm presented in (Macherey et al., 2008).</S>
    <S sid="71" ssid="38">In particular, it has the same upper bound on the number of line segments that constitute the envelope at the root node, i.e, the size of this envelope is guaranteed to be no larger than the number of edges in the transformed hypergraph.</S>
  </SECTION>
  <SECTION title="4 Minimum Bayes-Risk Decoding" number="4">
    <S sid="72" ssid="1">We first review Minimum Bayes-Risk (MBR) decoding for statistical MT.</S>
    <S sid="73" ssid="2">An MBR decoder seeks the hypothesis with the least expected loss under a probability model (Bickel and Doksum, 1977).</S>
    <S sid="74" ssid="3">If we think of statistical MT as a classifier that maps a source sentence F to a target sentence E, the MBR decoder can be expressed as follows: where L(E, E') is the loss between any two hypotheses E and E', P(E|F) is the probability model, and 9 is the space of translations (N-best list, lattice, or a hypergraph).</S>
    <S sid="75" ssid="4">MBR decoding for translation can be performed by reranking an N-best list of hypotheses generated by an MT system (Kumar and Byrne, 2004).</S>
    <S sid="76" ssid="5">This reranking can be done for any sentencelevel loss function such as BLEU (Papineni et al., 2001), Word Error Rate, or Position-independent Error Rate.</S>
    <S sid="77" ssid="6">Recently, Tromble et al. (2008) extended MBR decoding to translation lattices under an approximate BLEU score.</S>
    <S sid="78" ssid="7">They approximated log(BLEU) score by a linear function of n-gram matches and candidate length.</S>
    <S sid="79" ssid="8">If E and E' are the reference and the candidate translations respectively, this linear function is given by: where w is an n-gram present in either E or E', and &#952;0,&#952;1,..., &#952;N are weights which are determined empirically, where N is the maximum ngram order.</S>
    <S sid="80" ssid="9">Under such a linear decomposition, the MBR decoder (Equation 1) can be written as Tromble et al. (2008) implement the MBR decoder using Weighted Finite State Automata (WFSA) operations.</S>
    <S sid="81" ssid="10">First, the set of n-grams is extracted from the lattice.</S>
    <S sid="82" ssid="11">Next, the posterior probability of each n-gram is computed.</S>
    <S sid="83" ssid="12">A new automaton is then created by intersecting each ngram with weight (from Equation 2) to an unweighted lattice.</S>
    <S sid="84" ssid="13">Finally, the MBR hypothesis is extracted as the best path in the automaton.</S>
    <S sid="85" ssid="14">We will refer to this procedure as FSAMBR.</S>
    <S sid="86" ssid="15">The above steps are carried out one n-gram at a time.</S>
    <S sid="87" ssid="16">For a moderately large lattice, there can be several thousands of n-grams and the procedure becomes expensive.</S>
    <S sid="88" ssid="17">We now present an alternate approximate procedure which can avoid this where the posterior probability of an n-gram in the lattice is given by enumeration making the resulting algorithm much faster than FSAMBR.</S>
    <S sid="89" ssid="18">The key idea behind this new algorithm is to rewrite the n-gram posterior probability (Equation 4) as follows: where f(e, w, E) is a score assigned to edge e on path E containing n-gram w: { 1 w &#8712; e,p(e|G) &gt; p(e'|G), e' precedes e on E 0 otherwise In other words, for each path E, we count the edge that contributes n-gram w and has the highest edge posterior probability relative to its predecessors on the path E; there is exactly one such edge on each lattice path E. We note that f(e, w, E) relies on the full path E which means that it cannot be computed based on local statistics.</S>
    <S sid="90" ssid="19">We therefore approximate the quantity f(e, w, E) with f*(e, w,G) that counts the edge e with n-gram w that has the highest arc posterior probability relative to predecessors in the entire lattice G. f*(e, w,G) can be computed locally, and the n-gram posterior probability based on f* can be determined as follows: Algorithm 3 MBR Decoding on Lattices (Algorithm 3).</S>
    <S sid="91" ssid="20">However, there are important differences when computing the n-gram posterior probabilities (Step 3).</S>
    <S sid="92" ssid="21">In this inside pass, we now maintain both n-gram prefixes and suffixes (up to the maximum order &#8722;1) on each hypergraph node.</S>
    <S sid="93" ssid="22">This is necessary because unlike a lattice, new ngrams may be created at subsequent nodes by concatenating words both to the left and the right side of the n-gram.</S>
    <S sid="94" ssid="23">When the arity of the edge is 2, a rule has the general form aX1bX2c, where X1 and X2 are sequences from tail nodes.</S>
    <S sid="95" ssid="24">As a result, we need to consider all new sequences which can be created by the cross-product of the n-grams on the two tail nodes.</S>
    <S sid="96" ssid="25">E.g. if X1 = {c, cd, d} and X2 = {f, g}, then a total of six sequences will result.</S>
    <S sid="97" ssid="26">In practice, such a cross-product is not prowhere P(e|G) is the posterior probability of a lattice edge.</S>
    <S sid="98" ssid="27">The algorithm to perform Lattice MBR is given in Algorithm 3.</S>
    <S sid="99" ssid="28">For each node t in the lattice, we maintain a quantity Score(w, t) for each n-gram w that lies on a path from the source node to t. Score(w, t) is the highest posterior probability among all edges on the paths that terminate on t and contain n-gram w. The forward pass requires computing the n-grams introduced by each edge; to do this, we propagate n-grams (up to maximum order &#8722;1) terminating on each node.</S>
    <S sid="100" ssid="29">We next extend the Lattice MBR decoding algorithm (Algorithm 3) to rescore hypergraphs produced by a SCFG based MT system.</S>
    <S sid="101" ssid="30">Algorithm 4 is an extension to the MBR decoder on lattices Algorithm 4 MBR Decoding on Hypergraphs hibitive when the maximum n-gram order in MBR does not exceed the order of the n-gram language model used in creating the hypergraph.</S>
    <S sid="102" ssid="31">In the latter case, we will have a small set of unique prefixes and suffixes on the tail nodes.</S>
  </SECTION>
  <SECTION title="5 MERT for MBR Parameter Optimization" number="5">
    <S sid="103" ssid="1">Lattice MBR Decoding (Equation 3) assumes a linear form for the gain function (Equation 2).</S>
    <S sid="104" ssid="2">This linear function contains n + 1 parameters B0, B1, ..., BN, where N is the maximum order of the n-grams involved.</S>
    <S sid="105" ssid="3">Tromble et al. (2008) obtained these factors as a function of n-gram precisions derived from multiple training runs.</S>
    <S sid="106" ssid="4">However, this does not guarantee that the resulting linear score (Equation 2) is close to the corpus BLEU.</S>
    <S sid="107" ssid="5">We now describe how MERT can be used to estimate these factors to achieve a better approximation to the corpus BLEU.</S>
    <S sid="108" ssid="6">We recall that MERT selects weights in a linear model to optimize an error criterion (e.g. corpus BLEU) on a training set.</S>
    <S sid="109" ssid="7">The lattice MBR decoder (Equation 3) can be written as a linear model: E&#65533; = argmaxE,Eg &#65533;Ni=0 Bigi(E', F), where g0(E',F) = IE'I and gi(E', F) = The linear approximation to BLEU may not hold in practice for unseen test sets or languagepairs.</S>
    <S sid="110" ssid="8">Therefore, we would like to allow the decoder to backoff to the MAP translation in such cases.</S>
    <S sid="111" ssid="9">To do that, we introduce an additional feature function gN+1(E, F) equal to the original decoder cost for this sentence.</S>
    <S sid="112" ssid="10">A weight assignment of 1.0 for this feature function and zeros for the other feature functions would imply that the MAP translation is chosen.</S>
    <S sid="113" ssid="11">We now have a total of N+2 feature functions which we optimize using MERT to obtain highest BLEU score on a training set.</S>
  </SECTION>
  <SECTION title="6 Experiments" number="6">
    <S sid="114" ssid="1">We now describe our experiments to evaluate MERT and MBR on lattices and hypergraphs, and show how MERT can be used to tune MBR parameters.</S>
    <S sid="115" ssid="2">We report results on two tasks.</S>
    <S sid="116" ssid="3">The first one is the constrained data track of the NIST Arabicto-English (aren) and Chinese-to-English (zhen) translation task1.</S>
    <S sid="117" ssid="4">On this task, the parallel and the monolingual data included all the allowed training sets for the constrained track.</S>
    <S sid="118" ssid="5">Table 1 reports statistics computed over these data sets.</S>
    <S sid="119" ssid="6">Our development set (dev) consists of the NIST 2005 eval set; we use this set for optimizing MBR parameters.</S>
    <S sid="120" ssid="7">We report results on NIST 2002 and NIST 2003 evaluation sets.</S>
    <S sid="121" ssid="8">The second task consists of systems for 39 language-pairs with English as the target language and trained on at most 300M word tokens mined from the web and other published sources.</S>
    <S sid="122" ssid="9">The development and test sets for this task are randomly selected sentences from the web, and contain 5000 and 1000 sentences respectively.</S>
    <S sid="123" ssid="10">Our phrase-based statistical MT system is similar to the alignment template system described in (Och and Ney, 2004; Tromble et al., 2008).</S>
    <S sid="124" ssid="11">Translation is performed using a standard dynamic programming beam-search decoder (Och and Ney, 2004) using two decoding passes.</S>
    <S sid="125" ssid="12">The first decoder pass generates either a lattice or an N-best list.</S>
    <S sid="126" ssid="13">MBR decoding is performed in the second pass.</S>
    <S sid="127" ssid="14">We also train two SCFG-based MT systems: a hierarchical phrase-based SMT (Chiang, 2007) system and a syntax augmented machine translation (SAMT) system using the approach described in Zollmann and Venugopal (2006).</S>
    <S sid="128" ssid="15">Both systems are built on top of our phrase-based systems.</S>
    <S sid="129" ssid="16">In these systems, the decoder generates an initial hypergraph or an N-best list, which are then rescored using MBR decoding.</S>
    <S sid="130" ssid="17">Table 2 shows runtime experiments for the hypergraph MERT implementation in comparison with the phrase-lattice implementation on both the aren and the zhen system.</S>
    <S sid="131" ssid="18">The first two columns show the average amount of time in msecs that either algorithm requires to compute the upper envelope when applied to phrase lattices.</S>
    <S sid="132" ssid="19">Compared to the algorithm described in (Macherey et al., 2008) which is optimized for phrase lattices, the hypergraph implementation causes a small increase in running time.</S>
    <S sid="133" ssid="20">This increase is mainly due to the representation of line segments; while the phraselattice implementation stores a single backpointer, the hypergraph version stores a vector of backpointers.</S>
    <S sid="134" ssid="21">The last two columns show the average amount of time that is required to compute the upper envelope on hypergraphs.</S>
    <S sid="135" ssid="22">For comparison, we prune hypergraphs to the same density (# of edges per edge on the best path) and achieve identical running times for computing the error surface.</S>
    <S sid="136" ssid="23">We first compare the new lattice MBR (Algorithm 3) with MBR decoding on 1000-best lists and FSAMBR (Tromble et al., 2008) on lattices generated by the phrase-based systems; evaluation is done using both BLEU and average run-time per sentence (Table 3).</S>
    <S sid="137" ssid="24">Note that N-best MBR uses a sentence BLEU loss function.</S>
    <S sid="138" ssid="25">The new lattice MBR algorithm gives about the same performance as FSAMBR while yielding a 20X speedup.</S>
    <S sid="139" ssid="26">We next report the performance of MBR on hypergraphs generated by Hiero/SAMT systems.</S>
    <S sid="140" ssid="27">Table 4 compares Hypergraph MBR (HGMBR) with MAP and MBR decoding on 1000 best lists.</S>
    <S sid="141" ssid="28">On some systems such as the Arabic-English SAMT, the gains from Hypergraph MBR over 1000-best MBR are significant.</S>
    <S sid="142" ssid="29">In other cases, Hypergraph MBR performs at least as well as N-best MBR.</S>
    <S sid="143" ssid="30">In all cases, we observe a 7X speedup in runtime.</S>
    <S sid="144" ssid="31">This shows the usefulness of Hypergraph MBR decoding as an efficient alternative to Nbest MBR.</S>
    <S sid="145" ssid="32">We now describe the results by tuning MBR ngram parameters (Equation 2) using MERT.</S>
    <S sid="146" ssid="33">We first compute N + 1 MBR feature functions on each edge of the lattice/hypergraph.</S>
    <S sid="147" ssid="34">We also include the total decoder cost on the edge as as additional feature function.</S>
    <S sid="148" ssid="35">MERT is then performed to optimize the BLEU score on a development set; For MERT, we use 40 random initial parameters as well as parameters computed using corpus based statistics (Tromble et al., 2008).</S>
    <S sid="149" ssid="36">Table 5 shows results for NIST systems.</S>
    <S sid="150" ssid="37">We report results on nist03 set and present three systems for each language pair: phrase-based (pb), hierarchical (hier), and SAMT; Lattice MBR is done for the phrase-based system while HGMBR is used for the other two.</S>
    <S sid="151" ssid="38">We select the MBR scaling factor (Tromble et al., 2008) based on the development set; it is set to 0.1, 0.01, 0.5, 0.2, 0.5 and 1.0 for the aren-phrase, aren-hier, aren-samt, zhen-phrase zhen-hier and zhen-samt systems respectively.</S>
    <S sid="152" ssid="39">For the multi-language case, we train phrase-based systems and perform lattice MBR for all language pairs.</S>
    <S sid="153" ssid="40">We use a scaling factor of 0.7 for all pairs.</S>
    <S sid="154" ssid="41">Additional gains can be obtained by tuning this factor; however, we do not explore that dimension in this paper.</S>
    <S sid="155" ssid="42">In all cases, we prune the lattices/hypergraphs to a density of 30 using forward-backward pruning (Sixtus and Ortmanns, 1999).</S>
    <S sid="156" ssid="43">We consider a BLEU score difference to be a) gain if is at least 0.2 points, b) drop if it is at most -0.2 points, and c) no change otherwise.</S>
    <S sid="157" ssid="44">The results are shown in Table 6.</S>
    <S sid="158" ssid="45">In both tables, the following results are reported: Lattice/HGMBR with default parameters (&#8722;5,1.5, 2, 3, 4) computed using corpus statistics (Tromble et al., 2008), Lattice/HGMBR with parameters derived from MERT both without/with the baseline model cost feature (mert&#8722;b, mert+b).</S>
    <S sid="159" ssid="46">For multi-language systems, we only show the # of language-pairs with gains/no-changes/drops for each MBR variant with respect to the MAP translation.</S>
    <S sid="160" ssid="47">We observed in the NIST systems that MERT resulted in short translations relative to MAP on the unseen test set.</S>
    <S sid="161" ssid="48">To prevent this behavior, we modify the MERT error criterion to include a sentence-level brevity scorer with parameter &#945;: BLEU+brevity(&#945;).</S>
    <S sid="162" ssid="49">This brevity scorer penalizes each candidate translation that is shorter than the average length over its reference translations, using a penalty term which is linear in the difference between either length.</S>
    <S sid="163" ssid="50">We tune &#945; on the development set so that the brevity score of MBR translation is close to that of the MAP translation.</S>
    <S sid="164" ssid="51">In the NIST systems, MERT yields small improvements on top of MBR with default parameters.</S>
    <S sid="165" ssid="52">This is the case for Arabic-English Hiero/SAMT.</S>
    <S sid="166" ssid="53">In all other cases, we see no change or even a slight degradation due to MERT.</S>
    <S sid="167" ssid="54">We hypothesize that the default MBR parameters (Tromble et al., 2008) are well tuned.</S>
    <S sid="168" ssid="55">Therefore there is little gain by additional tuning using MERT.</S>
    <S sid="169" ssid="56">In the multi-language systems, the results show a different trend.</S>
    <S sid="170" ssid="57">We observe that MBR with default parameters results in gains on 18 pairs, no differences on 9 pairs, and losses on 12 pairs.</S>
    <S sid="171" ssid="58">When we optimize MBR features with MERT, the number of language pairs with gains/no changes/drops is 22/5/12.</S>
    <S sid="172" ssid="59">Thus, MERT has a bigger impact here than in the NIST systems.</S>
    <S sid="173" ssid="60">We hypothesize that the default MBR parameters are sub-optimal for some language pairs and that MERT helps to find better parameter settings.</S>
    <S sid="174" ssid="61">In particular, MERT avoids the need for manually tuning these parameters by language pair.</S>
    <S sid="175" ssid="62">Finally, when baseline model costs are added as an extra feature (mert+b), the number of pairs with gains/no changes/drops is 26/8/5.</S>
    <S sid="176" ssid="63">This shows that this feature can allow MBR decoding to backoff to the MAP translation.</S>
    <S sid="177" ssid="64">When MBR does not produce a higher BLEU score relative to MAP on the development set, MERT assigns a higher weight to this feature function.</S>
    <S sid="178" ssid="65">We see such an effect for 4 systems.</S>
  </SECTION>
  <SECTION title="7 Discussion" number="7">
    <S sid="179" ssid="1">We have presented efficient algorithms which extend previous work on lattice-based MERT (Macherey et al., 2008) and MBR decoding (Tromble et al., 2008) to work with hypergraphs.</S>
    <S sid="180" ssid="2">Our new MERT algorithm can work with both lattices and hypergraphs.</S>
    <S sid="181" ssid="3">On lattices, it achieves similar run-times as the implementation System BLEU (%) MAP MBR default mert-b mert+b aren.pb 54.2 54.8 54.8 54.9 aren.hier 52.8 53.3 53.5 53.7 aren.samt 53.4 54.0 54.4 54.0 zhen.pb 40.1 40.7 40.7 40.9 zhen.hier 41.0 41.0 41.0 41.0 zhen.samt 41.3 41.8 41.6 41.7 described in Macherey et al. (2008).</S>
    <S sid="182" ssid="4">The new Lattice MBR decoder achieves a 20X speedup relative to either FSAMBR implementation described in Tromble et al. (2008) or MBR on 1000-best lists.</S>
    <S sid="183" ssid="5">The algorithm gives comparable results relative to FSAMBR.</S>
    <S sid="184" ssid="6">On hypergraphs produced by Hierarchical and Syntax Augmented MT systems, our MBR algorithm gives a 7X speedup relative to 1000-best MBR while giving comparable or even better performance.</S>
    <S sid="185" ssid="7">Lattice MBR decoding is obtained under a linear approximation to BLEU, where the weights are obtained using n-gram precisions derived from development data.</S>
    <S sid="186" ssid="8">This may not be optimal in practice for unseen test sets and language pairs, and the resulting linear loss may be quite different from the corpus level BLEU.</S>
    <S sid="187" ssid="9">In this paper, we have described how MERT can be employed to estimate the weights for the linear loss function to maximize BLEU on a development set.</S>
    <S sid="188" ssid="10">On an experiment with 40 language pairs, we obtain improvements on 26 pairs, no difference on 8 pairs and drops on 5 pairs.</S>
    <S sid="189" ssid="11">This was achieved without any need for manual tuning for each language pair.</S>
    <S sid="190" ssid="12">The baseline model cost feature helps the algorithm effectively back off to the MAP translation in language pairs where MBR features alone would not have helped.</S>
    <S sid="191" ssid="13">MERT and MBR decoding are popular techniques for incorporating the final evaluation metric into the development of SMT systems.</S>
    <S sid="192" ssid="14">We believe that our efficient algorithms will make them more widely applicable in both SCFG-based and phrase-based MT systems.</S>
  </SECTION>
</PAPER>
