<PAPER>
  <S sid="0">MBT: A Memory-Based Part Of Speech Tagger-Generator</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We introduce a memory-based approach to part of speech tagging.</S>
    <S sid="2" ssid="2">Memory-based learning is a form of supervised learning based on similarity-based reasoning.</S>
    <S sid="3" ssid="3">The part of speech tag of a word in a particular context is extrapolated from the most similar cases held in memory.</S>
    <S sid="4" ssid="4">Supervised learning approaches are useful when a tagged corpus is available as an example of the desired output of the tagger.</S>
    <S sid="5" ssid="5">Based on such a corpus, the tagger-generator automatically builds a tagger which is able to tag new text the same way, diminishing development time for the construction of a tagger considerably.</S>
    <S sid="6" ssid="6">Memory-based tagging shares this advantage with other statistical or machine learning approaches.</S>
    <S sid="7" ssid="7">Additional advantages specific to a memory-based approach include (i) the relatively small tagged corpus size sufficient for training, (ii) incremental learning, (iii) explanation capabilities, (iv) flexible integration of information in case representations, (v) its non-parametric nature, (vi) reasonably good results on unknown words without morphological analysis, and (vii) fast learning and tagging.</S>
    <S sid="8" ssid="8">In this paper we show that a large-scale application of the memory-based approach is feasible: we obtain a tagging accuracy that is on a par with that of known statistical approaches, and with attractive and time complexity properties when using tree-based formalism for indexing and searching huge case bases.</S>
    <S sid="9" ssid="9">The use of IGTree has as additional advantage that optimal context size for disambiguation is dynamically computed.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="10" ssid="1">Part of Speech (POS) tagging is a process in which syntactic categories are assigned to words.</S>
    <S sid="11" ssid="2">It can be seen as a mapping from sentences to strings of tags.</S>
    <S sid="12" ssid="3">Automatic tagging is useful for a number of applications: as a preprocessing stage to parsing, in information retrieval, in text to speech systems, in corpus linguistics, etc.</S>
    <S sid="13" ssid="4">The two factors determining the syntactic category of a word are its lexical probability (e.g. without context, man is more probably a noun than a verb), and its contextual probability (e.g. after a pronoun, man is more probably a verb than a noun, as in they man the boats).</S>
    <S sid="14" ssid="5">Several approaches have been proposed to construct automatic taggers.</S>
    <S sid="15" ssid="6">Most work on statistical methods has used n-gram models or Hidden Markov Model-based taggers (e.g.</S>
    <S sid="16" ssid="7">Church, 1988; DeRose, 1988; Cutting et al. 1992; Merialdo, 1994, etc.).</S>
    <S sid="17" ssid="8">In these approaches, a tag sequence is chosen for a sentence that maximizes the product of lexical and contextual probabilities as estimated from a tagged corpus.</S>
    <S sid="18" ssid="9">In rule-based approaches, words are assigned a tag based on a set of rules and a lexicon.</S>
    <S sid="19" ssid="10">These rules can either be hand-crafted (Garside et al., 1987; Klein &amp; Simmons, 1963; Green 8.6 Rubin, 1971), or learned, as in Hindle (1989) or the transformation-based error-driven approach of Brill (1992).</S>
    <S sid="20" ssid="11">In a memory-based approach, a set of cases is kept in memory.</S>
    <S sid="21" ssid="12">Each case consists of a word (or a lexical representation for the word) with preceding and following context, and the corresponding category for that word in that context.</S>
    <S sid="22" ssid="13">A new sentence is tagged by selecting for each word in the sentence and its context the most similar case(s) in memory, and extrapolating the category of the word from these 'nearest neighbors'.</S>
    <S sid="23" ssid="14">A memorybased approach has features of both learning rule-based taggers (each case can be regarded as a very specific rule, the similarity based reasoning as a form of conflict resolution and rule selection mechanism) and of stochastic taggers: it is fundamentally a form of k-nearest neighbors (k-nn) modeling, a well-known non-parametric statistical pattern recognition technique.</S>
    <S sid="24" ssid="15">The approach in its basic form is computationally expensive, however; each new word in context that has to be tagged, has to be compared to each pattern kept in memory.</S>
    <S sid="25" ssid="16">In this paper we show that a heuristic case base compression formalism (Daelemans et al., 1996), makes the memory-based approach computationally attractive.</S>
  </SECTION>
  <SECTION title="2 Memory-Based Learning" number="2">
    <S sid="26" ssid="1">Memory-based Learning is a form of supervised, inductive learning from examples.</S>
    <S sid="27" ssid="2">Examples are represented as a vector of feature values with an associated category label.</S>
    <S sid="28" ssid="3">During training, a set of examples (the training set) is presented in an incremental fashion to the classifier, and added to memory.</S>
    <S sid="29" ssid="4">During testing, a set of previously unseen feature-value patterns (the test set) is presented to the system.</S>
    <S sid="30" ssid="5">For each test pattern, its distance to all examples in memory is computed, and the category of the least distant instance(s) is used as the predicted category for the test pattern.</S>
    <S sid="31" ssid="6">The approach is based on the assumption that reasoning is based on direct reuse of stored experiences rather than on the application of knowledge (such as rules or decision trees) abstracted from experience.</S>
    <S sid="32" ssid="7">In AT, the concept has appeared in several disciplines (from computer vision to robotics), using terminology such as similarity-based, example-based, memory-based, exemplarbased, case-based, analogical, lazy, nearest-neighbour, and instance-based (Stanfill and Waltz, 1986; Kolodner, 1993; Aha et al. 1991; Salzberg, 1990).</S>
    <S sid="33" ssid="8">Ideas about this type of analogical reasoning can be found also in non-mainstream linguistics and pyscholinguistics (Skousen, 1989; Derwing &amp; Skousen, 1989; Chandler, 1992; Scha, 1992).</S>
    <S sid="34" ssid="9">In computational linguistics (apart from incidental computational work of the linguists referred to earlier), the general approach has only recently gained some popularity: e.g., Cardie (1994, syntactic and semantic disambiguation); Daelemans (1995, an overview of work in the early nineties on memory-based computational phonology and morphology); Jones (1996, an overview of example-based machine translation research); Federici and Pirrelli (1996).</S>
    <S sid="35" ssid="10">Performance of a memory-based system (accuracy on the test set) crucially depends on the distance metric (or similarity metric) used.</S>
    <S sid="36" ssid="11">The most straightforward distance metric would be the one in equation (1), where X and Y are the patterns to be compared, and 6(x, yi) is the distance between the values of the i-th feature in a pattern with n features.</S>
    <S sid="37" ssid="12">Distance between two values is measured using equation (2), an overlap metric, for symbolic features (we will have no numeric features in the tagging application).</S>
    <S sid="38" ssid="13">We will refer to this approach as IB1 (Aha et al., 1991).</S>
    <S sid="39" ssid="14">We extended the algorithm described there in the following way: in case a pattern is associated with more than one category in the training set (i.e. the pattern is ambiguous), the distribution of patterns over the different categories is kept, and the most frequently occurring category is selected when the ambiguous pattern is used to extrapolate from.</S>
    <S sid="40" ssid="15">In this distance metric, all features describing an example are interpreted as being equally important in solving the classification problem, but this is not necessarily the case.</S>
    <S sid="41" ssid="16">In tagging, the focus word to be assigned a category is obviously more relevant than any of the words in its context.</S>
    <S sid="42" ssid="17">We therefore weigh each feature with its information gain; a number expressing the average amount of reduction of training set information entropy when knowing the value of the feature (Daelemans &amp; van de Bosch, 1992, Quinlan, 1993; Hunt et al. 1966) (Equation 3).</S>
    <S sid="43" ssid="18">We will call this algorithm IB-IG.</S>
  </SECTION>
  <SECTION title="3 IGTrees" number="3">
    <S sid="44" ssid="1">Memory-based learning is an expensive algorithm: of each test item, all feature values must be compared to the corresponding feature values of all training items.</S>
    <S sid="45" ssid="2">Without optimisation, it has an asymptotic retrieval complexity of 0(NF) (where N is the number of items in memory, and F the number of features).</S>
    <S sid="46" ssid="3">The same asymptotic complexity is of course found for memory storage in this approach.</S>
    <S sid="47" ssid="4">We use IGTrees (Daelemans et al. 1996) to compress the memory.</S>
    <S sid="48" ssid="5">IGTree is a heuristic approximation of the IB-IG algorithm.</S>
    <S sid="49" ssid="6">IGTree combines two algorithms: one for compressing a case base into a trees, and one for retrieving classification information from these trees.</S>
    <S sid="50" ssid="7">During the construction of IGTree decision trees, cases are stored as paths of connected nodes.</S>
    <S sid="51" ssid="8">All nodes contain a test (based on one of the features) and a class label (representing the default class at that node).</S>
    <S sid="52" ssid="9">Nodes are connected via arcs denoting the outcomes for the test (feature values).</S>
    <S sid="53" ssid="10">A feature relevance ordering technique (in this case information gain, see Section 2.1) is used to determine the order in which features are used as tests in the tree.</S>
    <S sid="54" ssid="11">This order is fixed in advance, so the maximal depth of the tree is always equal to the number of features, and at the same level of the tree, all nodes have the same test (they are an instance of oblivious decision trees; cf.</S>
    <S sid="55" ssid="12">Langley &amp; Sage, 1994).</S>
    <S sid="56" ssid="13">The reasoning behind this reorganisation (which is in fact a compression) is that when the computation of feature relevance points to one feature clearly being the most important in classification, search can be restricted to matching a test case to those stored cases that have the same feature value at that feature.</S>
    <S sid="57" ssid="14">Besides restricting search to those memory cases that match only on this feature, the case memory can be optimised by further restricting search to the Procedure BUILD-IG-TREE: Input: second most important feature, followed by the third most important feature, etc.</S>
    <S sid="58" ssid="15">A considerable compression is obtained as similar cases share partial paths.</S>
    <S sid="59" ssid="16">Instead of converting the case base to a tree in which all cases are fully represented as paths, storing all feature values, we compress the tree even more by restricting the paths to those input feature values that disambiguate the classification from all other cases in the training material.</S>
    <S sid="60" ssid="17">The idea is that it is not necessary to fully store a case as a path when only a few feature values of the case make its classification unique.</S>
    <S sid="61" ssid="18">This implies that feature values that do not contribute to the disambiguation of the case classification (i.e., the values of the features with lower feature relevance values than the the lowest value of the disambiguating features) are not stored in the tree.</S>
    <S sid="62" ssid="19">In our tagging application, this means that only context feature values that actually contribute to disambiguation are used in the construction of the tree.</S>
    <S sid="63" ssid="20">Leaf nodes contain the unique class label corresponding to a path in the tree.</S>
    <S sid="64" ssid="21">Nonterminal nodes contain information about the most probable or default classification given the path thus far, according to the bookkeeping information on class occurrences maintained by the tree construction algorithm.</S>
    <S sid="65" ssid="22">This extra information is essential when using the tree for classification.</S>
    <S sid="66" ssid="23">Finding the classification of a new case involves traversing the tree (i.e., matching all feature values of the test case with arcs in the order of the overall feature information gain), and either retrieving a classification when a leaf is reached, or using the default classification on the last matching non-terminal node if a feature-value match fails.</S>
    <S sid="67" ssid="24">A final compression is obtained by pruning the derived tree.</S>
    <S sid="68" ssid="25">All leaf-node daughters of a mother node that have the same class as that node are removed from the tree, as their class information does not contradict the default class information already present at the mother node.</S>
    <S sid="69" ssid="26">Again, this compression does not affect IGTree's generalisation performance.</S>
    <S sid="70" ssid="27">The recursive algorithms for tree construction (except the final pruning) and retrieval are given in Figures 1 and 2.</S>
    <S sid="71" ssid="28">For a detailed discussion, see Daelemans et al. (1996).</S>
    <S sid="72" ssid="29">The asymptotic complexity of IGTree (i.e, in the worst case) is extremely favorable.</S>
    <S sid="73" ssid="30">Complexity of searching a query pattern in the tree is proportional to F * log(V), where F is the number of features (equal to the maximal depth of the tree), and V is the average number of values per feature (i.e., the average branching factor in the tree).</S>
    <S sid="74" ssid="31">In IB1, search complexity is 0(N * F) (with N the number of stored cases).</S>
    <S sid="75" ssid="32">Retrieval by search in the tree is independent from the number of training cases, and therefore especially useful for large case bases.</S>
    <S sid="76" ssid="33">Storage requirements are proportional to N (compare 0(N * F) for IB1).</S>
    <S sid="77" ssid="34">Finally, the cost of building the tree on the basis of a set of cases is proportional to N * log(V) * F in the worst case (compare 0(N) for training in IB1).</S>
    <S sid="78" ssid="35">In practice, for our part-of-speech tagging experiments, IGTree retrieval is 100 to 200 times faster than normal memory-based retrieval, and uses over 95% less memory.</S>
  </SECTION>
  <SECTION title="4 Architecture of the Tagger" number="4">
    <S sid="79" ssid="1">The architecture takes the form of a tagger generator given a corpus tagged with the desired tag set, a POS tagger is generated which maps the words of new text to tags in this tag set according to the same systematicity.</S>
    <S sid="80" ssid="2">The construction of a POS tagger for a specific corpus is achieved in the following way.</S>
    <S sid="81" ssid="3">Given an annotated corpus, three datastructures are automatically extracted: a lexicon, a case base for known words (words occurring in the lexicon), and a case base for unknown words.</S>
    <S sid="82" ssid="4">Case Bases are indexed using IGTree.</S>
    <S sid="83" ssid="5">During tagging, each word in the text to be tagged is looked up in the lexicon.</S>
    <S sid="84" ssid="6">If it is found, its lexical representation is retrieved and its context is determined, and the resulting pattern is looked up in the known words case base.</S>
    <S sid="85" ssid="7">When a word is not found in the lexicon, its lexical representation is computed on the basis of its form, its context is determined, and the resulting pattern is looked up in the unknown words case base.</S>
    <S sid="86" ssid="8">In each case, output is a best guess of the category for the word in its current context.</S>
    <S sid="87" ssid="9">In the remainder of this section, we will describe each step in more detail.</S>
    <S sid="88" ssid="10">We start from a training set of tagged sentences T. A lexicon is extracted from T by computing for each word in T the number of times it occurs with each category.</S>
    <S sid="89" ssid="11">E.g. when using the first 2 million words of the Wall Street Journal corpus' as T, the word once would get the lexical definition RB: 330; IN: 77, i.e. once was tagged 330 times as an adverb, and 77 times as a preposition/subordinating conjunction.2 Using these lexical definitions, a new, possibly ambiguous, tag is produced for each word type.</S>
    <S sid="90" ssid="12">E.g. once would get a new tag, representing the category of words which can be both adverbs and prepositions/conjunctions (RB-IN).</S>
    <S sid="91" ssid="13">Frequency order is taken into account in this process: if there would be words which, like once, can be RB or IN, but more frequently IN than RB (e.g. the word below), then a different tag (IN-RB) is assigned to these words.</S>
    <S sid="92" ssid="14">The original tag set, consisting of 44 morphosyntactic tags, was expanded this way to 419 (possibly ambiguous) tags.</S>
    <S sid="93" ssid="15">In the WSJ example, the resulting lexicon contains 57962 word types, 7464 (13%) of which are ambiguous.</S>
    <S sid="94" ssid="16">On the same training set, 76% of word tokens are ambiguous.</S>
    <S sid="95" ssid="17">When tagging a new sentence, words are looked up in the lexicon.</S>
    <S sid="96" ssid="18">Depending on whether or not they can be found there, a case representation is constructed for them, and they are retrieved from either the known words case base or the unknown words case base.</S>
    <S sid="97" ssid="19">A windowing approach (Sejnowski &amp; Rosenberg, 1987) was used to represent the tagging task as a classification problem.</S>
    <S sid="98" ssid="20">A case consists of information about a focus word to be tagged, its left and right context, and an associated category (tag) valid for the focus word in that context.</S>
    <S sid="99" ssid="21">There are several types of information which can be stored in the case base for each word, ranging from the words themselves to intricate lexical representations.</S>
    <S sid="100" ssid="22">In the preliminary experiments described in this paper, we limited this information to the possibly ambiguous tags of words (retrieved from the lexicon) for the focus word and its context to the right, and the disambiguated tags of words for the left context (as the result of earlier tagging decisions).</S>
    <S sid="101" ssid="23">Table 1 is a sample of the case base for the first sentence of the corpus (Pierre Vinken, 61 years old, will join the board as a nonexecutiye director nom 29) when using this case representation.</S>
    <S sid="102" ssid="24">The final column shows the target category; the disambiguated tag for the focus word.</S>
    <S sid="103" ssid="25">We will refer to this case representation as ddf at (d for disambiguated, f for focus, a for ambiguous, and t for target).</S>
    <S sid="104" ssid="26">The information gain values are given as well.</S>
    <S sid="105" ssid="27">A search among a selection of different context sizes suggested ddf at as a suitable case representation for tagging known words.</S>
    <S sid="106" ssid="28">An interesting property of memory-based learning is that case representations can be easily extended with different sources of information if available (e.g. feedback from a parser in which the tagger operates, semantic types, the words themselves, lexical representations of words obtained from a different source than the corpus, etc.).</S>
    <S sid="107" ssid="29">The information gain feature relevance ordering technique achieves a delicate relevance weighting of different information sources when they are fused in a single case representation.</S>
    <S sid="108" ssid="30">The window size used by the algorithm will also dynamically change depending on the information present in the context for the disambiguation of a particular focus symbol (see Schiitze et al., 1994, and Pereira et al., 1995 If a word is not present in the lexicon, its ambiguous category cannot be retrieved.</S>
    <S sid="109" ssid="31">In that case, a category can be guessed only on the basis of the form or the context of the word.</S>
    <S sid="110" ssid="32">Again, we take advantage of the data fusion capabilities of a memory-based approach by combining these two sources of information in the case representation, and having the information gain feature relevance weighting technique figure out their relative relevance (see Schmid, 1994; Samuelsson, 1994 for similar solutions).</S>
    <S sid="111" ssid="33">In most taggers, some form of morphological analysis is performed on unknown words, in an attempt to relate the unknown word to a known combination of known morphemes, thereby allowing its association with one or more possible categories.</S>
    <S sid="112" ssid="34">After determining this ambiguous category, the word is disambiguated using context knowledge, the same way as known words.</S>
    <S sid="113" ssid="35">Morphological analysis presupposes the availability of highly language-specific resources such as a morpheme lexicon, spelling rules, morphological rules, and heuristics to prioritise possible analyses of a word according to their plausibility.</S>
    <S sid="114" ssid="36">This is a serious knowledge engineering bottleneck when the goal is to develop a language and annotation-independent tagger generator.</S>
    <S sid="115" ssid="37">In our memory-based approach, we provide morphological information (especially about suffixes) indirectly to the tagger by encoding the three last letters of the word as separate features in the case representation.</S>
    <S sid="116" ssid="38">The first letter is encoded as well because it contains information about prefix and capitalization of the word.</S>
    <S sid="117" ssid="39">Context information is added to the case representation in a similar way as with known words.</S>
    <S sid="118" ssid="40">It turned out that in combination with the 'morphological' features, a context of one disambiguated tag of the word to the left of the unknown word and one ambiguous category of the word to the right, gives good results.</S>
    <S sid="119" ssid="41">We will call this case representation pdassst:3 three suffix letters (s), one prefix letter (p), one left disambiguated context words (d), and one ambiguous right context word (a).</S>
    <S sid="120" ssid="42">As the chance of an unknown word being a function word is small, and cases representing function words may interfere with correct classification of open-class words, only open-class words are used during construction of the unknown words case base.</S>
    <S sid="121" ssid="43">Table 2 shows part of the case base for unknown words.</S>
    <S sid="122" ssid="44">Figure 3 shows the architecture of the tagger-generator: a tagger is produced by extracting a lexicon and two case-bases from the tagged example corpus.</S>
    <S sid="123" ssid="45">During tagging, the control is the following: words are looked up in the lexicon and separated into known and unknown words.</S>
    <S sid="124" ssid="46">They are retrieved from the known words case base and the unknown words case base, respectively.</S>
    <S sid="125" ssid="47">In both cases, context is used, in the case of unknown words, the first and three last letters of the word are used instead of the ambiguous tag for the focus word.</S>
    <S sid="126" ssid="48">As far as disambiguated tags for left context words are used, these are of course not obtained by retrieval from the lexicon (which provides ambiguous categories), but by using the previous decisions of the tagger.</S>
  </SECTION>
  <SECTION title="4.5 IGTrees for Tagging" number="5">
    <S sid="127" ssid="1">As explained earlier, both case bases are implemented as IGTrees.</S>
    <S sid="128" ssid="2">For the known words case base, paths in the tree represent variable size context widths.</S>
    <S sid="129" ssid="3">The first feature (the expansion of the root node of the tree) is the focus word, then context features are added as further expansions of the tree until the context disambiguates the focus word completely.</S>
    <S sid="130" ssid="4">Further expansion is halted at that point.</S>
    <S sid="131" ssid="5">In some cases, short context sizes (corresponding to bigrams, e.g.) are sufficient to disambiguate a focus word, in other cases, more context is needed.</S>
    <S sid="132" ssid="6">IGTrees provide an elegant way of automatic determination of optimal context size.</S>
    <S sid="133" ssid="7">In the unknown words case base, the trie representation provides an automatic integration of information about the form and the context of a focus word not encountered before.</S>
    <S sid="134" ssid="8">In general, the top levels of the tree represent the morphological information (the three suffix letter features and the prefix letter), while the deeper levels contribute contextual disambiguation.</S>
  </SECTION>
  <SECTION title="5 Experiments" number="6">
    <S sid="135" ssid="1">In this section, we report first results on our memory-based tagging approach.</S>
    <S sid="136" ssid="2">In a first set of experiments, we compared our IGTree implementation of memory-based learning to more traditional implementations of the approach.</S>
    <S sid="137" ssid="3">In further experiments we studied the performance of our system on predicting the category of both known and unknown words.</S>
    <S sid="138" ssid="4">The experimental methodology was taken from Machine Learning practice (e.g.</S>
    <S sid="139" ssid="5">Weiss &amp; Kulikowski, 1991): independent training and test sets were selected from the original corpus, the system was trained on the training set, and the generalization accuracy (percentage of correct category assignments) was computed on the independent test set.</S>
    <S sid="140" ssid="6">Storage and time requirements were computed as well.</S>
    <S sid="141" ssid="7">Where possible, we used a 10-fold cross-validation approach.</S>
    <S sid="142" ssid="8">In this experimental method, a data set is partitioned ten times into 90% training material, and 10% testing material.</S>
    <S sid="143" ssid="9">Average accuracy provides a reliable estimate of the generalization accuracy.</S>
    <S sid="144" ssid="10">Our goal is to adhere to the concept of memory-based learning with full memory while at the same time keeping memory and processing speed within attractive bounds.</S>
    <S sid="145" ssid="11">To this end, we applied the IGTree formalism to the task.</S>
    <S sid="146" ssid="12">In order to prove that IGTree is a suitable candidate for practical memory-based tagging, we compared three memory-based learning algorithms: (i) IB1, a slight extension (to cope with symbolic values and ambiguous training items) of the well-known k-nn algorithm in statistical pattern recognition (see Aha et al., 1991), (ii) IB1-IG, an extension of IB1 which uses feature relevance weighting (described in Section 2), and (iii) IGTree, a memory- and processing time saving heuristic implementation of IB1-IG (see Section 3).</S>
    <S sid="147" ssid="13">Table 3 lists the results in generalization accuracy, storage requirements and speed for the three algorithms using a ddf at pattern, a 100,000 word training set, and a 10,000 word test set.</S>
    <S sid="148" ssid="14">In this experiment, accuracy was tested on known words only.</S>
    <S sid="149" ssid="15">The IGTree version turns out to be better or equally good in terms of generalization accuracy, but also is more than 100 times faster for tagging of new words4, and compresses the original case base to 4% of the size of the original case base.</S>
    <S sid="150" ssid="16">This experiment shows that for this problem, we can use IGTree as a time and memory saving approximation of memory-based learning (IB-IG version), without loss in generalization accuracy.</S>
    <S sid="151" ssid="17">The time and speed advantage of IGTree grows with larger training sets.</S>
    <S sid="152" ssid="18">A ten-fold cross-validation experiment on the first two million words of the WSJ corpus shows an average generalization performance of IGTree (on known words only) of 96.3%.</S>
    <S sid="153" ssid="19">We did 10-fold cross-validation experiments for several sizes of datasets (in steps of 100,000 memory items), revealing the learning curve in Figure 4.</S>
    <S sid="154" ssid="20">Training set size is on the X-axis, generalization performance as measured in a 10-fold cross-validation experiment is on the Y-axis. the 'error' range indicate averages plus and minus one standard deviation on each 10-fold cross-validation experiment.'</S>
    <S sid="155" ssid="21">Already at small data set sizes, performance is relatively high.</S>
    <S sid="156" ssid="22">With increasingly larger data sets, the performance becomes more stable (witness the error ranges).</S>
    <S sid="157" ssid="23">It should be noted that in this experiment, we assumed correctly disambiguated tags in the left context.</S>
    <S sid="158" ssid="24">In practice, when using our tagger, this is of course not the case because the disambiguated tags in the left context of the current word to be tagged are the result of a previous decision of the tagger, which may be a mistake.</S>
    <S sid="159" ssid="25">To test the influence of this effect we performed a third experiment.</S>
    <S sid="160" ssid="26">We performed the complete tagger generation process on a 2 million words training set (lexicon construction and known and unknown words case-base construction), and tested on 200,000 test words.</S>
    <S sid="161" ssid="27">Performance on known words, unknown words, and total are given in Table 4.</S>
    <S sid="162" ssid="28">In this experiment, numbers were not stored in the known words case base; they are looked up in the unknown words case base.</S>
    <S sid="163" ssid="29">'We are not convinced that variation in the results of the experiments in a 10-fold-cv set-up is statistically meaningful (the 10 experiments are not independent), but follow common practice here.</S>
  </SECTION>
  <SECTION title="6 Related Research" number="7">
    <S sid="164" ssid="1">A case-based approach, similar to our memory-based approach, was also proposed by Cardie (1993a, 1994) for sentence analysis in limited domains (not only POS tagging but also semantic tagging and structural disambiguation).</S>
    <S sid="165" ssid="2">We will discuss only the reported POS tagging results here.</S>
    <S sid="166" ssid="3">Using a fairly complex case representation based on output from the CIRCUS conceptual sentence analyzer (22 local context features describing syntactic and semantic information about a five-word window centered on the word to be tagged, including the words themselves, and 11 global context features providing information about the major constituents parsed already), and with a tag set of 18 tags (7 open-class, 11 closed class), she reports a 95% tagging accuracy.</S>
    <S sid="167" ssid="4">A decision-tree learning approach to feature selection is used in this experiment (Cardie, 1993b, 1994) to discard irrelevant features.</S>
    <S sid="168" ssid="5">Results are based on experiments with 120 randomly chosen sentences from the TIPSTER JV corpus (representing 2056 cases).</S>
    <S sid="169" ssid="6">Cardie (p.c.) reports 89.1% correct tagging for unknown words.</S>
    <S sid="170" ssid="7">Percentage unknown words was 20.6% of the test words, and overall tagging accuracy (known and unknown) 95%.</S>
    <S sid="171" ssid="8">Notice that her algorithm gives no initial preference to training cases that match the test word during its initial case retrieval.</S>
    <S sid="172" ssid="9">On the other hand, after retrieving the top k cases, the algorithm does prefer those cases that match the test word when making its final predictions.</S>
    <S sid="173" ssid="10">So, it's understandable that the algorithm is doing better on words that it's seen during training as opposed to unknown words.</S>
    <S sid="174" ssid="11">In our memory-based approach, feature weighting (rather than feature selection) for determining the relevance of features is integrated more smoothly with the similarity metric, and our results are based on experiments with a larger corpus (3 million cases).</S>
    <S sid="175" ssid="12">Our case representation is (at this point) simpler: only the (ambiguous) tags, not the words themselves or any other information are used.</S>
    <S sid="176" ssid="13">The most important improvement is the use of IGTree to index and search the case base, solving the computational complexity problems a case-based approach would run into when using large case bases.</S>
    <S sid="177" ssid="14">An approach based on k-nn methods (such as memory-based and case-based methods) is a statistical approach, but it uses a different kind of statistics than Markov model-based approaches.</S>
    <S sid="178" ssid="15">K-nn is a non-parametric technique; it assumes no fixed type of distribution of the data.</S>
    <S sid="179" ssid="16">The most important advantages compared to current stochastic approaches are that (i) few training items (a small tagged corpus) are needed for relatively good performance, (ii) the approach is incremental: adding new cases does not require any recomputation of probabilities, and (iii) it provides explanation capabilities, and (iv) it requires no additional smoothing techniques to avoid zero-probabilities; the IGTree takes care of that.</S>
    <S sid="180" ssid="17">Compared to hand-crafted rule-based approaches, our approach provides a solution to the knowledge-acquisition and reusability bottlenecks, and to robustness and coverage problems (similar advantages motivated Markov model-based statistical approaches).</S>
    <S sid="181" ssid="18">Compared to learning rule-based approaches such as the one by Brill (1992), a k-nn approach provides a uniform approach for all disambiguation tasks, more flexibility in the engineering of case representations, and a more elegant approach to handling of unknown words (see e.g.</S>
    <S sid="182" ssid="19">Cardie 1994).</S>
  </SECTION>
  <SECTION title="7 Conclusion" number="8">
    <S sid="183" ssid="1">We have shown that a memory-based approach to large-scale tagging is feasible both in terms of accuracy (comparable to other statistical approaches), and also in terms of computational efficiency (time and space requirements) when using IGTree to compress and index the case base.</S>
    <S sid="184" ssid="2">The approach combines some of the best features of learned rule-based and statistical systems (small training corpora needed, incremental learning, understandable and explainable behavior of the system).</S>
    <S sid="185" ssid="3">More specifically, memory-based tagging with IGTrees has the following advantages.</S>
    <S sid="186" ssid="4">We have barely begun to optimise the approach: a more intelligent similarity metric would also take into account the differences in similarity between different values of the same feature.</S>
    <S sid="187" ssid="5">E.g. the similarity between the tags rb-in-nn and rb-in should be bigger than the similarity between rb-in and vb-nn.</S>
    <S sid="188" ssid="6">Apart from linguistic engineering refinements of the similarity metric, we are currently experimenting with statistical measures to compute such more fine-grained similarities (e.g.</S>
    <S sid="189" ssid="7">Stanfill &amp; Waltz, 1986, Cost &amp; Salzberg, 1994).</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="9">
    <S sid="190" ssid="1">Research of the first author was done while he was a visiting scholar at NIAS (Netherlands Institute for Advanced Studies) in Wassenaar.</S>
    <S sid="191" ssid="2">Thanks to Antal van den Bosch, Ton Weijters, and Gert Durieux for discussions about tagging, IGTree, and machine learning of natural language.</S>
  </SECTION>
</PAPER>
