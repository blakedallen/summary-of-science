<PAPER>
  <S sid="0" ssid="0">CoNLL 2008: Proceedings of the 12th Conference on Computational Natural Language Learning, pages 183?187 Manchester, August 2008 Dependency-based Syntactic?Semantic Analysis with PropBank and NomBank Richard Johansson and Pierre Nugues Lund University, Sweden {richard, pierre}@cs.lth.se Abstract This paper presents our contribution in the closed track of the 2008 CoNLL Shared Task (Surdeanu et al., 2008).</S>
  <S sid="1" ssid="1">To tackle the problem of joint syntactic?semantic anal- ysis, the system relies on a syntactic and a semantic subcomponent.</S>
  <S sid="2" ssid="2">The syntactic model is a bottom-up projective parser us- ing pseudo-projective transformations, and the semantic model uses global inference mechanisms on top of a pipeline of clas- sifiers.</S>
  <S sid="3" ssid="3">The complete syntactic?semantic output is selected from a candidate pool generated by the subsystems.</S>
  <S sid="4" ssid="4">The system achieved the top score in the closed challenge: a labeled syntactic accu- racy of 89.32%, a labeled semantic F1 of 81.65, and a labeled macro F1 of 85.49.</S>
  <S sid="5" ssid="5">1 Introduction: Syntactic?Semantic Analysis Intuitively, semantic interpretation should help syntactic disambiguation, and joint syntactic?</S>
  <S sid="6" ssid="6">semantic analysis has a long tradition in linguis- tic theory.</S>
  <S sid="7" ssid="7">This motivates a statistical modeling of the problem of finding a syntactic tree y?</S>
  <S sid="8" ssid="8">syn and a semantic graph y?</S>
  <S sid="9" ssid="9">sem for a sentence x as maximiz- ing a function F that scores the joint syntactic?</S>
  <S sid="10" ssid="10">semantic structure: ?y?</S>
  <S sid="11" ssid="11">= arg max y syn ,y sem F (x, y syn , y sem ) The dependencies in the feature representation used to compute F determine the tractability of the search procedure needed to perform the maximiza- tion.</S>
  <S sid="12" ssid="12">To be able to use complex syntactic features c ?</S>
  <S sid="13" ssid="13">Licensed under the Creative Commons Attribution-Noncommercial-Share Alike 3.0 Unported li- cense (http://creativecommons.org/licenses/by-nc-sa/3.0/).</S>
  <S sid="14" ssid="14">Some rights reserved.</S>
  <S sid="15" ssid="15">such as paths when predicting semantic structures, exact search is clearly intractable.</S>
  <S sid="16" ssid="16">This is true even with simpler feature representations ?</S>
  <S sid="17" ssid="17">the problem is a special case of multi-headed dependency anal- ysis, which is NP-hard even if the number of heads is bounded (Chickering et al., 1994).</S>
  <S sid="18" ssid="18">This means that we must resort to a simplifica- tion such as an incremental method or a reranking approach.</S>
  <S sid="19" ssid="19">We chose the latter option and thus cre- ated syntactic and semantic submodels.</S>
  <S sid="20" ssid="20">The joint syntactic?semantic prediction is selected from a small list of candidates generated by the respective subsystems.</S>
  <S sid="21" ssid="21">2 Syntactic Submodel We model the process of syntactic parsing of a sentence x as finding the parse tree y?</S>
  <S sid="22" ssid="22">syn = argmax y F (x, y) that maximizes a scoring func- tion F .</S>
  <S sid="23" ssid="23">The learning problem consists of fitting this function so that the cost of the predictions is as low as possible according to a cost function ?.</S>
  <S sid="24" ssid="24">In this work, we consider linear scoring functions of the following form: F (x, y) = w ??</S>
  <S sid="25" ssid="25">(x, y) is a numeric feature representation of the pair (x, y) andw a vector of feature weights.</S>
  <S sid="26" ssid="26">We defined the syntactic cost ?</S>
  <S sid="27" ssid="27">as the sum of link costs, where the link cost was 0 for a correct de- pendency link with a correct label, 0.5 for a correct link with an incorrect label, and 1 for an incorrect link.</S>
  <S sid="28" ssid="28">A widely used framework for fitting the weight vector is the max-margin model (Taskar et al., 2003), which is a generalization of the well- known support vector machines to general cost- based prediction problems.</S>
  <S sid="29" ssid="29">Since the large num- ber of training examples and features in our case make an exact solution of the max-margin opti- mization problem impractical, we used the on- line passive?aggressive algorithm (Crammer et al., 183 2006), which approximates the optimization pro- cess in two ways: ?</S>
  <S sid="30" ssid="30">The weight vector w is updated incremen- tally, one example at a time.</S>
  <S sid="31" ssid="31">For each example, only the most violated con- straint is considered.</S>
  <S sid="32" ssid="32">The algorithm is a margin-based variant of the per- ceptron (preliminary experiments show that it out- performs the ordinary perceptron on this task).</S>
  <S sid="33" ssid="33">Al- gorithm 1 shows pseudocode for the algorithm.</S>
  <S sid="34" ssid="34">Algorithm 1 The Online PA Algorithm input Training set T = {(x t , y t )} T t=1 Number of iterations N Regularization parameter C Initialize w to zeros repeat N times for (x t , y t ) in T let y?</S>
  <S sid="35" ssid="35">t = argmax y F (x t , y) + ?</S>
  <S sid="36" ssid="36">(y t , y) let ?</S>
  <S sid="37" ssid="37">t )?F (x t ,y t )+?</S>
  <S sid="38" ssid="38">(x,y t )??(x,y?</S>
  <S sid="39" ssid="39">t )) returnwaverage We used a C value of 0.01, and the number of iterations was 6.</S>
  <S sid="40" ssid="40">2.1 Features and Search The feature function ?</S>
  <S sid="41" ssid="41">is a second-order edge- factored representation (McDonald and Pereira, 2006; Carreras, 2007).</S>
  <S sid="42" ssid="42">The second-order repre- sentation allows us to express features not only of head?dependent links, but also of siblings and chil- dren of the dependent.</S>
  <S sid="43" ssid="43">This feature set forces us to adopt the expensive search procedure by Car- reras (2007), which extends Eisner?s span-based dynamic programming algorithm (1996) to allow second-order feature dependencies.</S>
  <S sid="44" ssid="44">Since the cost function ?</S>
  <S sid="45" ssid="45">is based on the cost of single links, this procedure can also be used to find the maximizer of F (x i , y ij )+?</S>
  <S sid="46" ssid="46">(y i , y ij ), which is needed at train- ing time.</S>
  <S sid="47" ssid="47">The search was constrained to disallow multiple root links.</S>
  <S sid="48" ssid="48">2.2 Handling Nonprojective Links Although only 0.4% of the links in the training set are nonprojective, 7.6% of the sentences contain at least one nonprojective link.</S>
  <S sid="49" ssid="49">Many of these links represent long-range dependencies ?</S>
  <S sid="50" ssid="50">such as wh- movement ?</S>
  <S sid="51" ssid="51">that are valuable for semantic pro- cessing.</S>
  <S sid="52" ssid="52">Nonprojectivity cannot be handled by span-based dynamic programming algorithms.</S>
  <S sid="53" ssid="53">For parsers that consider features of single links only, the Chu-Liu/Edmonds algorithm can be used in- stead.</S>
  <S sid="54" ssid="54">However, this algorithm cannot be gen- eralized to the second-order setting ?</S>
  <S sid="55" ssid="55">McDonald and Pereira (2006) proved that this problem is NP- hard, and described an approximate greedy search algorithm.</S>
  <S sid="56" ssid="56">To simplify implementation, we instead opted for the pseudo-projective approach (Nivre and Nilsson, 2005), in which nonprojective links are lifted upwards in the tree to achieve projectivity, and special trace labels are used to enable recovery of the nonprojective links at parse time.</S>
  <S sid="57" ssid="57">The use of trace labels in the pseudo-projective transfor- mation leads to a proliferation of edge label types: from 69 to 234 in the training set, many of which occur only once.</S>
  <S sid="58" ssid="58">Since the running time of our parser depends on the number of labels, we used only the 20 most frequent trace labels.</S>
  <S sid="59" ssid="59">3 Semantic Submodel Our semantic model consists of three parts: ?</S>
  <S sid="60" ssid="60">A SRL classifier pipeline that generates a list of candidate predicate?argument structures.</S>
  <S sid="61" ssid="61">A constraint system that filters the candidate list to enforce linguistic restrictions on the global configuration of arguments.</S>
  <S sid="62" ssid="62">A global classifier that rescores the predicate?</S>
  <S sid="63" ssid="63">argument structures in the filtered candidate list.</S>
  <S sid="64" ssid="64">Rather than training the models on gold- standard syntactic input, we created an automati- cally parsed training set by 5-fold cross-validation.</S>
  <S sid="65" ssid="65">Training on automatic syntax makes the semantic classifiers more resilient to parsing errors, in par- ticular adjunct labeling errors.</S>
  <S sid="66" ssid="66">3.1 SRL Pipeline The SRL pipeline consists of classifiers for predi- cate identification, predicate disambiguation, sup- port identification (for noun predicates), argument identification, and argument classification.</S>
  <S sid="67" ssid="67">We trained one set of classifiers for verb predicates and another for noun predicates.</S>
  <S sid="68" ssid="68">For the pred- icate disambiguation classifiers, we trained one subclassifier for each lemma.</S>
  <S sid="69" ssid="69">All classifiers in the pipeline were L2-regularized linear logistic regres- sion classifiers, implemented using the efficient LIBLINEAR package (Lin et al., 2008).</S>
  <S sid="70" ssid="70">For multi- class problems, we used the one-vs-all binarization 184 method, which makes it easy to prevent outputs not allowed by the PropBank or NomBank frame.</S>
  <S sid="71" ssid="71">Since our classifiers were logistic, their output values could be meaningfully interpreted as prob- abilities.</S>
  <S sid="72" ssid="72">This allowed us to combine the scores from subclassifiers into a score for the complete predicate?argument structure.</S>
  <S sid="73" ssid="73">To generate the can- didate lists used by the global SRL models, we ap- plied beam search based on these scores using a beam width of 4.</S>
  <S sid="74" ssid="74">The features used by the classifiers are listed in Tables 1 and 2.</S>
  <S sid="75" ssid="75">In the tables, the features used by the classifiers for noun and verb predicates are indicated by N and V, respectively.</S>
  <S sid="76" ssid="76">We selected the feature sets by greedy forward subset selection.</S>
  <S sid="77" ssid="77">Feature PredId PredDis PREDWORD N,V N,V PREDLEMMA N,V N,V PREDPARENTWORD/POS N,V N,V CHILDDEPSET N,V N,V CHILDWORDSET N,V N,V CHILDWORDDEPSET N,V N,V CHILDPOSSET N,V N,V CHILDPOSDEPSET N,V N,V DEPSUBCAT N,V N,V PREDRELTOPARENT N,V N,V Table 1: Classifier features in predicate identifica- tion and disambiguation.</S>
  <S sid="78" ssid="78">Feature Supp ArgId ArgCl PREDPARENTWORD/POS N N,V CHILDDEPSET N N,V N,V PREDLEMMASENSE N N,V N,V VOICE V V POSITION N N,V N,V ARGWORD/POS N N,V N,V LEFTWORD/POS N N,V RIGHTWORD/POS N N,V N,V LEFTSIBLINGWORD/POS N,V RIGHTSIBLINGWORD/POS N N PREDPOS N N,V V RELPATH N N,V N,V POSPATH N RELPATHTOSUPPORT N N VERBCHAINHASSUBJ V V CONTROLLERHASOBJ V N PREDRELTOPARENT N N,V N,V FUNCTION N,V Table 2: Classifier features in argument identifica- tion and classification and support detection.</S>
  <S sid="79" ssid="79">Features Used in Predicate Identification and Disambiguation PREDWORD, PREDLEMMA.</S>
  <S sid="80" ssid="80">The lexical form and lemma of the predicate.</S>
  <S sid="81" ssid="81">PREDPARENTWORD and PREDPARENTPOS.</S>
  <S sid="82" ssid="82">Form and part-of-speech tag of the parent node of the predicate.</S>
  <S sid="83" ssid="83">CHILDDEPSET, CHILDWORDSET, CHILD- WORDDEPSET, CHILDPOSSET, CHILD- POSDEPSET.</S>
  <S sid="84" ssid="84">These features represent the set of dependents of the predicate using combinations of dependency labels, words, and parts of speech.</S>
  <S sid="85" ssid="85">Subcategorization frame: the con- catenation of the dependency labels of the predicate dependents.</S>
  <S sid="86" ssid="86">PREDRELTOPARENT.</S>
  <S sid="87" ssid="87">Dependency relation be- tween the predicate and its parent.</S>
  <S sid="88" ssid="88">Features Used in Argument Identification and Classification PREDLEMMASENSE.</S>
  <S sid="89" ssid="89">The lemma and sense number of the predicate, e.g.</S>
  <S sid="90" ssid="90">For verbs, this feature is Active or Pas- sive.</S>
  <S sid="91" ssid="91">For nouns, it is not defined.</S>
  <S sid="92" ssid="92">Position of the argument with respect to the predicate: Before, After, or On.</S>
  <S sid="93" ssid="93">ARGWORD and ARGPOS.</S>
  <S sid="94" ssid="94">Lexical form and part-of-speech tag of the argument node.</S>
  <S sid="95" ssid="95">LEFTWORD, LEFTPOS, RIGHTWORD, RIGHT- POS.</S>
  <S sid="96" ssid="96">Form/part-of-speech tag of the left- most/rightmost dependent of the argument.</S>
  <S sid="97" ssid="97">LEFTSIBLINGWORD, LEFTSIBLINGPOS, RIGHTSIBLINGWORD, RIGHTSIBLING- POS.</S>
  <S sid="98" ssid="98">Form/part-of-speech tag of the left/right sibling of the argument.</S>
  <S sid="99" ssid="99">Part-of-speech tag of the predicate.</S>
  <S sid="100" ssid="100">A representation of the complex grammatical relation between the predicate and the argument.</S>
  <S sid="101" ssid="101">It consists of the sequence of dependency relation labels and link direc- tions in the path between predicate and argu- ment, e.g.</S>
  <S sid="102" ssid="102">An alternative view of the grammat- ical relation, which consists of the POS tags passed when moving from predicate to argu- ment, e.g.</S>
  <S sid="103" ssid="103">RELPATHTOSUPPORT.</S>
  <S sid="104" ssid="104">The RELPATH from the argument to a support chain.</S>
  <S sid="105" ssid="105">VERBCHAINHASSUBJ.</S>
  <S sid="106" ssid="106">Binary feature that is set to true if the predicate verb chain has a sub- ject.</S>
  <S sid="107" ssid="107">The purpose of this feature is to resolve verb coordination ambiguity as in Figure 1.</S>
  <S sid="108" ssid="108">CONTROLLERHASOBJ.</S>
  <S sid="109" ssid="109">Binary feature that is true if the link between the predicate verb chain and its parent is OPRD, and the parent has an object.</S>
  <S sid="110" ssid="110">This feature is meant to resolve control ambiguity as in Figure 2.</S>
  <S sid="111" ssid="111">The grammatical function of the ar- gument node.</S>
  <S sid="112" ssid="112">For direct dependents of the predicate, this is identical to the RELPATH.</S>
  <S sid="113" ssid="113">I SBJ eat drinkyouand COORD SBJ CONJROOT SBJ COORD ROOT drinkandeatI CONJ Figure 1: Coordination ambiguity: The subject I is in an ambiguous position with respect to drink.</S>
  <S sid="114" ssid="114">I to IMSBJ want sleephim OBJ OPRD ROOT IM sleepI SBJ want ROOT to OPRD Figure 2: Subject/object control ambiguity: I is in an ambiguous position with respect to sleep.</S>
  <S sid="115" ssid="115">3.2 Linguistically Motivated Global Constraints The following three global constraints were used to filter the candidates generated by the pipeline.</S>
  <S sid="116" ssid="116">CORE ARGUMENT CONSISTENCY.</S>
  <S sid="117" ssid="117">Core argu- ment labels must not appear more than once.</S>
  <S sid="118" ssid="118">DISCONTINUITY CONSISTENCY.</S>
  <S sid="119" ssid="119">If there is a la- bel C-X, it must be preceded by a label X.</S>
  <S sid="120" ssid="120">REFERENCE CONSISTENCY.</S>
  <S sid="121" ssid="121">If there is a label R-X and the label is inside a relative clause, it must be preceded by a label X.</S>
  <S sid="122" ssid="122">3.3 Global SRL Model Toutanova et al.</S>
  <S sid="123" ssid="123">(2005) have showed that a global model that scores the complete predicate?</S>
  <S sid="124" ssid="124">argument structure can lead to substantial perfor- mance gains.</S>
  <S sid="125" ssid="125">We therefore created a global SRL classifier using the following global features in ad- dition to the features from the pipeline: CORE ARGUMENT LABEL SEQUENCE.</S>
  <S sid="126" ssid="126">The complete sequence of core argument labels.</S>
  <S sid="127" ssid="127">The sequence also includes the predicate and voice, for instance A0+break.01/Active+A1.</S>
  <S sid="128" ssid="128">MISSING CORE ARGUMENT LABELS.</S>
  <S sid="129" ssid="129">The set of core argument labels declared in the Prop- Bank/NomBank frame that are not present in the predicate?argument structure.</S>
  <S sid="130" ssid="130">Similarly to the syntactic submodel, we trained the global SRL model using the online passive?</S>
  <S sid="131" ssid="131">aggressive algorithm.</S>
  <S sid="132" ssid="132">The cost function ?</S>
  <S sid="133" ssid="133">was defined as the number of incorrect links in the predicate?argument structure.</S>
  <S sid="134" ssid="134">The number of it- erations was 20 and the regularization parameter C was 0.01.</S>
  <S sid="135" ssid="135">Interestingly, we noted that the global SRL model outperformed the pipeline even when no global features were added.</S>
  <S sid="136" ssid="136">This shows that the global learning model can correct label bias prob- lems introduced by the pipeline architecture.</S>
  <S sid="137" ssid="137">4 Syntactic?Semantic Integration Our baseline joint feature representation contained only three features: the log probability of the syn- tactic tree and the log probability of the semantic structure according to the pipeline and the global model, respectively.</S>
  <S sid="138" ssid="138">This model was trained on the complete training set using cross-validation.</S>
  <S sid="139" ssid="139">The probabilities were obtained using the multinomial logistic function (?softmax?).</S>
  <S sid="140" ssid="140">We carried out an initial experiment with a more complex joint feature representation, but failed to improve over the baseline.</S>
  <S sid="141" ssid="141">Time prevented us from exploring this direction conclusively.</S>
  <S sid="142" ssid="142">5 Results The submitted results on the development and test corpora are presented in the upper part of Table 3.</S>
  <S sid="143" ssid="143">After the submission deadline, we corrected a bug in the predicate identification method.</S>
  <S sid="144" ssid="144">This re- sulted in improved results shown in the lower part.</S>
  <S sid="145" ssid="145">Corpus Syn acc Sem F1 Macro F1 Development 88.47 80.80 84.66 Test WSJ 90.13 81.75 85.95 Test Brown 82.81 69.06 75.95 Test WSJ + Brown 89.32 80.37 84.86 Development 88.47 81.86 85.17 Test WSJ 90.13 83.75 86.61 Test Brown 82.84 69.85 76.34 Test WSJ + Brown 89.32 81.65 85.49 Table 3: Results.</S>
  <S sid="146" ssid="146">5.1 Syntactic Results Table 4 shows the effect of adding second-order features to the parser in terms of accuracy as well as training and parsing time on a Mac Pro, 3.2 GHz.</S>
  <S sid="147" ssid="147">The training times were measured on the complete training set and the parsing time and ac- curacies on the development set.</S>
  <S sid="148" ssid="148">Similarly to Car- reras (2007), we see that these features have a very large impact on parsing accuracy, but also that the parser pays dearly in terms of efficiency as the search complexity increases fromO(n3) toO(n4).</S>
  <S sid="149" ssid="149">186 Since the low efficiency of the second-order parser restricts its use to batch applications, we see an in- teresting research direction to find suitable com- promises between the two approaches, for instance by sacrificing the exact search procedure.</S>
  <S sid="150" ssid="150">System Training Parse Labeled Unlabeled 1st order 65 min 28 sec 85.78 89.51 2nd order 60 hours 34 min 88.33 91.43 Table 4: Impact of second-order features.</S>
  <S sid="151" ssid="151">Table 5 shows the dependency types most af- fected by the addition of second-order features to the parser when ordered by the increase in F1.</S>
  <S sid="152" ssid="152">As can be seen, they are all verb adjunct categories, which demonstrates the effect of grandchild fea- tures on PP attachment and labeling.</S>
  <S sid="153" ssid="153">Label ?R ?P ?F 1 TMP 14.7 12.9 13.9 DTV 0 19.9 10.5 LOC 7.8 12.3 9.9 PRP 12.4 6.7 9.6 DIR 5.9 7.2 6.5 Table 5: Labels affected by second-order features.</S>
  <S sid="154" ssid="154">5.2 Semantic Results To assess the effect of the components in the se- mantic submodel, we tested their performance on the top-scoring parses from the syntactic model.</S>
  <S sid="155" ssid="155">Table 6 shows the results.</S>
  <S sid="156" ssid="156">The baseline system consists of the SRL pipeline only (P).</S>
  <S sid="157" ssid="157">Adding lin- guistic constraints (C) results in a more precision- oriented system with slightly lower recall, but sig- nificantly higher F1.</S>
  <S sid="158" ssid="158">Even higher performance is obtained when adding the global SRL model (G).</S>
  <S sid="159" ssid="159">System P R F1 P 80.74 77.98 79.33 P+C 82.42 77.66 79.97 P+C+G 83.64 78.14 80.40 Table 6: SRL results on the top-scoring parse trees.</S>
  <S sid="160" ssid="160">5.3 Syntactic?Semantic Integration The final experiment concerned the integration of syntactic and semantic analysis.</S>
  <S sid="161" ssid="161">In this setting, the system chooses the output that maximizes the joint syntactic?semantic score, based on the top N syntactic trees.</S>
  <S sid="162" ssid="162">Table 7 shows the results on the development set.</S>
  <S sid="163" ssid="163">We see that syntactic?semantic integration improves both syntactic accuracy and semantic F1.</S>
  <S sid="164" ssid="164">This holds for the constraint-based SRL system as well as for the full system.</S>
  <S sid="165" ssid="165">Sem model N Syn acc Sem F1 Macro F1 P+C 1 88.33 79.97 84.17 P+C 16 88.42 80.42 84.44 P+C+G 1 88.33 80.40 84.39 P+C+G 16 88.47 80.80 84.66 Table 7: Syntactic?semantic integration.</S>
  <S sid="166" ssid="166">6 Conclusion We have described a system1 for syntactic and se- mantic dependency analysis based on PropBank and NomBank, and detailed the implementation of its subsystems.</S>
  <S sid="167" ssid="167">Crucial to our success was the high performance of the syntactic parser, which achieved a high accuracy.</S>
  <S sid="168" ssid="168">In addition, we recon- firmed the benefits of global inference in semantic analysis: both constraint-based and learning-based methods resulted in improvements over a baseline.</S>
  <S sid="169" ssid="169">Finally, we showed that integration of syntactic and semantic analysis is beneficial for both sub- tasks.</S>
  <S sid="170" ssid="170">We hope that this shared task will spur fur- ther research that leads to new feature representa- tions and search procedures to handle the problem of joint syntactic and semantic analysis.</S>
  <S sid="171" ssid="171">References Carreras, Xavier.</S>
  <S sid="172" ssid="172">Experiments with a higher-order pro- jective dependency parser.</S>
  <S sid="173" ssid="173">In Proceedings of CoNLL.</S>
  <S sid="174" ssid="174">Chickering, David M., Dan Geiger, and David Heckerman.</S>
  <S sid="175" ssid="175">Learning Bayesian networks: The combination of knowledge and statistical data.</S>
  <S sid="176" ssid="176">Technical Report MSR- TR-94-09, Microsoft Research.</S>
  <S sid="177" ssid="177">Crammer, Koby, Ofer Dekel, Joseph Keshet, Shai Shalev- Schwartz, and Yoram Singer.</S>
  <S sid="178" ssid="178">Online passive- aggressive algorithms.</S>
  <S sid="179" ssid="179">JMLR, 2006(7):551?585.</S>
  <S sid="180" ssid="180">Eisner, Jason M. 1996.</S>
  <S sid="181" ssid="181">Three new probabilistic models for dependency parsing: An exploration.</S>
  <S sid="182" ssid="182">Lin, Chih-Jen, Ruby C. Weng, and S. Sathiya Keerthi.</S>
  <S sid="183" ssid="183">Trust region Newton method for large-scale logistic regres- sion.</S>
  <S sid="184" ssid="184">JMLR, 2008(9):627?650.</S>
  <S sid="185" ssid="185">McDonald, Ryan and Fernando Pereira.</S>
  <S sid="186" ssid="186">Online learn- ing of approximate dependency parsing algorithms.</S>
  <S sid="187" ssid="187">In Proceedings of EACL-2006.</S>
  <S sid="188" ssid="188">Nivre, Joakim and Jens Nilsson.</S>
  <S sid="189" ssid="189">Pseudo-projective dependency parsing.</S>
  <S sid="190" ssid="190">In Proceedings of ACL-2005.</S>
  <S sid="191" ssid="191">Surdeanu, Mihai, Richard Johansson, Adam Meyers, Llu?s M?rquez, and Joakim Nivre.</S>
  <S sid="192" ssid="192">The CoNLL?2008 shared task on joint parsing of syntactic and semantic de- pendencies.</S>
  <S sid="193" ssid="193">In Proceedings of CoNLL?2008.</S>
  <S sid="194" ssid="194">Taskar, Ben, Carlos Guestrin, and Daphne Koller.</S>
  <S sid="195" ssid="195">Max-margin Markov networks.</S>
  <S sid="196" ssid="196">In Proceedings of NIPS.</S>
  <S sid="197" ssid="197">Toutanova, Kristina, Aria Haghighi, and Christopher D. Man- ning.</S>
  <S sid="198" ssid="198">Joint learning improves semantic role label- ing.</S>
  <S sid="199" ssid="199">In Proceedings of ACL-2005.</S>
  <S sid="200" ssid="200">1Our system is freely available for download at http://nlp.cs.lth.se/lth_srl.</S>
</PAPER>
