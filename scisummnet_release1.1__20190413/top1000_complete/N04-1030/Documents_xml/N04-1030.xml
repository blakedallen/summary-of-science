<PAPER>
	<S sid="0">Shallow Semantic Parsing Using Support Vector Machines</S><ABSTRACT>
		<S sid="1" ssid="1">In this paper, we propose a machine learning algorithm for shallow semantic parsing, extend ing the work of Gildea and Jurafsky (2002),Surdeanu et al (2003) and others.</S>
		<S sid="2" ssid="2">Our al gorithm is based on Support Vector Machineswhich we show give an improvement in performance over earlier classifiers.</S>
		<S sid="3" ssid="3">We show perfor mance improvements through a number of newfeatures and measure their ability to general ize to a new test set drawn from the AQUAINT corpus.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number="1">
			<S sid="4" ssid="4">Automatic, accurate and wide-coverage techniques thatcan annotate naturally occurring text with semantic argu ment structure can play a key role in NLP applications such as Information Extraction, Question Answering and Summarization.</S>
			<S sid="5" ssid="5">Shallow semantic parsing ? the process of assigning a simple WHO did WHAT to WHOM, WHEN, WHERE, WHY, HOW, etc. structure to sentences in text,is the process of producing such a markup.</S>
			<S sid="6" ssid="6">When pre sented with a sentence, a parser should, for each predicatein the sentence, identify and label the predicate?s seman tic arguments.</S>
			<S sid="7" ssid="7">This process entails identifying groups ofwords in a sentence that represent these semantic argu ments and assigning specific labels to them.</S>
			<S sid="8" ssid="8">In recent work, a number of researchers have cast thisproblem as a tagging problem and have applied vari ous supervised machine learning techniques to it (Gildea and Jurafsky (2000, 2002); Blaheta and Charniak (2000); Gildea and Palmer (2002); Surdeanu et al (2003); Gildea and Hockenmaier (2003); Chen and Rambow (2003); Fleischman and Hovy (2003); Hacioglu and Ward (2003); Thompson et al (2003); Pradhan et al (2003)).</S>
			<S sid="9" ssid="9">In this ?This research was partially supported by the ARDA AQUAINT program via contract OCG4423B and by the NSF via grant IS-9978025 paper, we report on a series of experiments exploring this approach.</S>
			<S sid="10" ssid="10">For the initial experiments, we adopted the approachdescribed by Gildea and Jurafsky (2002) (G&amp;J) and evaluated a series of modifications to improve its performance.</S>
			<S sid="11" ssid="11">In the experiments reported here, we first re placed their statistical classification algorithm with one that uses Support Vector Machines and then added to theexisting feature set.</S>
			<S sid="12" ssid="12">We evaluate results using both hand corrected TreeBank syntactic parses, and actual parses from the Charniak parser.</S>
	</SECTION>
	<SECTION title="Semantic Annotation and Corpora. " number="2">
			<S sid="13" ssid="1">We will be reporting on results using PropBank1 (Kingsbury et al, 2002), a 300k-word corpus in which predi cate argument relations are marked for part of the verbsin the Wall Street Journal (WSJ) part of the Penn Tree Bank (Marcus et al, 1994).</S>
			<S sid="14" ssid="2">The arguments of a verb arelabeled ARG0 to ARG5, where ARG0 is the PROTO AGENT (usually the subject of a transitive verb) ARG1 is the PROTO-PATIENT (usually its direct object), etc. PropBank attempts to treat semantically related verbs consistently.</S>
			<S sid="15" ssid="3">In addition to these CORE ARGUMENTS, additional ADJUNCTIVE ARGUMENTS, referred to asARGMs are also marked.</S>
			<S sid="16" ssid="4">Some examples are ARGMLOC, for locatives, and ARGM-TMP, for temporals.</S>
			<S sid="17" ssid="5">Fig ure 1 shows the syntax tree representation along with the argument labels for an example structure extracted from the PropBank corpus.Most of the experiments in this paper, unless speci fied otherwise, are performed on the July 2002 release of PropBank.</S>
			<S sid="18" ssid="6">A larger, cleaner, completely adjudicated version of PropBank was made available in Feb 2004.</S>
			<S sid="19" ssid="7">We will also report some final best performance numbers on this corpus.</S>
			<S sid="20" ssid="8">PropBank was constructed by assigning semantic arguments to constituents of the hand-corrected TreeBank parses.</S>
			<S sid="21" ssid="9">The data comprise several sections of the WSJ, and we follow the standard convention of using 1http://www.cis.upenn.edu/?ace/Section-23 data as the test set.</S>
			<S sid="22" ssid="10">Section-02 to Section 21 were used for training.</S>
			<S sid="23" ssid="11">In the July 2002 release, thetraining set comprises about 51,000 sentences, instantiat ing about 132,000 arguments, and the test set comprises 2,700 sentences instantiating about 7,000 arguments.</S>
			<S sid="24" ssid="12">TheFeb 2004 release training set comprises about 85,000 sen tences instantiating about 250,000 arguments and the test set comprises 5,000 sentences instantiating about 12,000 arguments.</S>
			<S sid="25" ssid="13">[ARG0 He] [predicate talked] for [ARGM?TMP about 20 minutes].</S>
			<S sid="26" ssid="14">S hhhh (((( NP PRP He ARG0 VP hhhh (((( VBD talked predicate PP hhh ((( IN for NULL NP hhhhh ((((( about 20 minutes ARGM ? TMPFigure 1: Syntax tree for a sentence illustrating the Prop Bank tags.</S>
	</SECTION>
	<SECTION title="Problem Description. " number="3">
			<S sid="27" ssid="1">The problem of shallow semantic parsing can be viewed as three different tasks.Argument Identification ? This is the process of identi fying parsed constituents in the sentence that represent semantic arguments of a given predicate.</S>
			<S sid="28" ssid="2">Argument Classification ? Given constituents known torepresent arguments of a predicate, assign the appropri ate argument labels to them.Argument Identification and Classification ? A combina tion of the above two tasks.</S>
			<S sid="29" ssid="3">Each node in the parse tree can be classified as eitherone that represents a semantic argument (i.e., a NONNULL node) or one that does not represent any seman tic argument (i.e., a NULL node).</S>
			<S sid="30" ssid="4">The NON-NULL nodescan then be further classified into the set of argument la bels.</S>
			<S sid="31" ssid="5">For example, in the tree of Figure 1, the node IN that encompasses ?for?</S>
			<S sid="32" ssid="6">is a NULL node because it does not correspond to a semantic argument.</S>
			<S sid="33" ssid="7">The node NP that encompasses ?about 20 minutes?</S>
			<S sid="34" ssid="8">is a NON-NULL node, since it does correspond to a semantic argument ? ARGM-TMP.</S>
	</SECTION>
	<SECTION title="Baseline Features. " number="4">
			<S sid="35" ssid="1">Our baseline system uses the same set of features in troduced by G&amp;J. Some of the features, viz., predicate, voice and verb sub-categorization are shared by all thenodes in the tree.</S>
			<S sid="36" ssid="2">All the others change with the con stituent under consideration.</S>
			<S sid="37" ssid="3">Predicate ? The predicate itself is used as a feature.</S>
			<S sid="38" ssid="4">Path ? The syntactic path through the parse tree from the parse constituent to the predicate being classified.</S>
			<S sid="39" ssid="5">For example, in Figure 1, the path from ARG0 ? ?He?</S>
			<S sid="40" ssid="6">to the predicate talked, is represented with the string NP?S?VP?VBD.</S>
			<S sid="41" ssid="7">and ? representupward and downward movement in the tree respec tively.</S>
			<S sid="42" ssid="8">Phrase Type ? This is the syntactic category (NP, PP, S, etc.) of the phrase/constituent corresponding to the semantic argument.</S>
			<S sid="43" ssid="9">Position ? This is a binary feature identifying whether the phrase is before or after the predicate.?</S>
			<S sid="44" ssid="10">Voice ? Whether the predicate is realized as an ac tive or passive construction.</S>
			<S sid="45" ssid="11">Head Word ? The syntactic head of the phrase.</S>
			<S sid="46" ssid="12">This is calculated using a head word table described by (Magerman, 1994) and modified by (Collins, 1999, Appendix.</S>
			<S sid="47" ssid="13">A).?</S>
			<S sid="48" ssid="14">Sub-categorization ? This is the phrase struc ture rule expanding the predicate?s parent node in the parse tree.</S>
			<S sid="49" ssid="15">For example, in Figure 1, the sub-categorization for the predicate talked is VP?VBD-PP.</S>
	</SECTION>
	<SECTION title="Classifier and Implementation. " number="5">
			<S sid="50" ssid="1">We formulate the parsing problem as a multi-class clas sification problem and use a Support Vector Machine (SVM) classifier (Hacioglu et al, 2003; Pradhan et al2003).</S>
			<S sid="51" ssid="2">Since SVMs are binary classifiers, we have to con vert the multi-class problem into a number of binary-class problems.</S>
			<S sid="52" ssid="3">We use the ONE vs ALL (OVA) formalism, which involves training n binary classifiers for a n-class problem.Since the training time taken by SVMs scales exponen tially with the number of examples, and about 80% of the nodes in a syntactic tree have NULL argument labels, we found it efficient to divide the training process into two stages, while maintaining the same accuracy: 1.</S>
			<S sid="53" ssid="4">Filter out the nodes that have a very high probabil-.</S>
			<S sid="54" ssid="5">ity of being NULL.</S>
			<S sid="55" ssid="6">A binary NULL vs NON-NULL classifier is trained on the entire dataset.</S>
			<S sid="56" ssid="7">A sigmoid function is fitted to the raw scores to convert the scores to probabilities as described by (Platt, 2000).</S>
			<S sid="57" ssid="8">2.</S>
			<S sid="58" ssid="9">The remaining training data is used to train OVA.</S>
			<S sid="59" ssid="10">classifiers, one of which is the NULL-NON-NULL classifier.With this strategy only one classifier (NULL vs NON NULL) has to be trained on all of the data.</S>
			<S sid="60" ssid="11">The remaining OVA classifiers are trained on the nodes passed by thefilter (approximately 20% of the total), resulting in a con siderable savings in training time.</S>
			<S sid="61" ssid="12">In the testing stage, we do not perform any filtering of NULL nodes.</S>
			<S sid="62" ssid="13">All the nodes are classified directly as NULL or one of the arguments using the classifiertrained in step 2 above.</S>
			<S sid="63" ssid="14">We observe no significant per formance improvement even if we filter the most likely NULL nodes in a first pass.</S>
			<S sid="64" ssid="15">For our experiments, we used TinySVM2 along with YamCha3 (Kudo and Matsumoto, 2000) (Kudo and Matsumoto, 2001) as the SVM training and test software.</S>
			<S sid="65" ssid="16">The system uses a polynomial kernel with degree 2; the cost per unit violation of the margin, C=1; and, tolerance of the termination criterion, e=0.001.</S>
	</SECTION>
	<SECTION title="Baseline System Performance. " number="6">
			<S sid="66" ssid="1">Table 1 shows the baseline performance numbers on the three tasks mentioned earlier; these results are based onsyntactic features computed from hand-corrected Tree Bank (hence LDC hand-corrected) parses.For the argument identification and the combined iden tification and classification tasks, we report the precision (P), recall (R) and the F14 scores, and for the argument classification task we report the classification accuracy (A).</S>
			<S sid="67" ssid="2">This test set and all test sets, unless noted otherwise are Section-23 of PropBank.</S>
			<S sid="68" ssid="3">Classes Task P R F1 A (%) (%) (%) ALL Id. 90.9 89.8 90.4 ARGs Classification - - - 87.9 Id. + Classification 83.3 78.5 80.8 CORE Id. 94.7 90.1 92.3 ARGs Classification - - - 91.4 Id. + Classification 88.4 84.1 86.2 Table 1: Baseline performance on all three tasks using hand-corrected parses.</S>
	</SECTION>
	<SECTION title="System Improvements. " number="7">
			<S sid="69" ssid="1">7.1 Disallowing Overlaps.</S>
			<S sid="70" ssid="2">The system as described above might label two con stituents NON-NULL even if they overlap in words.</S>
			<S sid="71" ssid="3">This is a problem since overlapping arguments are not allowedin PropBank.</S>
			<S sid="72" ssid="4">Among the overlapping constituents we retain the one for which the SVM has the highest confidence, and label the others NULL.</S>
			<S sid="73" ssid="5">The probabilities ob tained by applying the sigmoid function to the raw SVM scores are used as the measure of confidence.</S>
			<S sid="74" ssid="6">Table 2shows the performance of the parser on the task of identifying and labeling semantic arguments using the hand corrected parses.</S>
			<S sid="75" ssid="7">On all the system improvements, we perform a ?2 test of significance at p = 0.05, and all the 2http://cl.aist-nara.ac.jp/?talus-Au/software/TinySVM/ 3http://cl.aist-nara.ac.jp/?taku-Au/software/yamcha/ 4F1 = 2PRP+R significant improvements are marked with an ?.</S>
			<S sid="76" ssid="8">In thissystem, the overlap-removal decisions are taken indepen dently of each other.</S>
			<S sid="77" ssid="9">P R F1 (%) (%) Baseline 83.3 78.5 80.8 No Overlaps 85.4 78.1 ?81.6Table 2: Improvements on the task of argument identi fication and classification after disallowing overlapping constituents.</S>
			<S sid="78" ssid="10">7.2 New Features.</S>
			<S sid="79" ssid="11">We tested several new features.</S>
			<S sid="80" ssid="12">Two were obtained from the literature ? named entities in constituents and head word part of speech.</S>
			<S sid="81" ssid="13">Other are novel features.</S>
			<S sid="82" ssid="14">1.</S>
			<S sid="83" ssid="15">Named Entities in Constituents ? Following.</S>
			<S sid="84" ssid="16">Surdeanu et al (2003), we tagged 7 named en tities (PERSON, ORGANIZATION, LOCATION,PERCENT, MONEY, TIME, DATE) using Identi Finder (Bikel et al, 1999) and added them as 7 binary features.</S>
			<S sid="85" ssid="17">2.</S>
			<S sid="86" ssid="18">Head Word POS ? Surdeanu et al (2003) showed.</S>
			<S sid="87" ssid="19">that using the part of speech (POS) of the head word gave a significant performance boost to their system.</S>
			<S sid="88" ssid="20">Following that, we experimented with the addition of this feature to our system.</S>
			<S sid="89" ssid="21">3.</S>
			<S sid="90" ssid="22">Verb Clustering ? Since our training data is rel-.</S>
			<S sid="91" ssid="23">atively limited, any real world test set will con tain predicates that have not been seen in training.In these cases, we can benefit from some information about the predicate by using predicate clus ter as a feature.</S>
			<S sid="92" ssid="24">The verbs were clustered into 64 classes using the probabilistic co-occurrence modelof Hofmann and Puzicha (1998).</S>
			<S sid="93" ssid="25">The clustering algorithm uses a database of verb-direct-object rela tions extracted by Lin (1998).</S>
			<S sid="94" ssid="26">We then use the verb class of the current predicate as a feature.</S>
			<S sid="95" ssid="27">4.</S>
			<S sid="96" ssid="28">Partial Path ? For the argument identification task,.</S>
			<S sid="97" ssid="29">path is the most salient feature.</S>
			<S sid="98" ssid="30">However, it is alsothe most data sparse feature.</S>
			<S sid="99" ssid="31">To overcome this prob lem, we tried generalizing the path by adding a new feature that contains only the part of the path from the constituent to the lowest common ancestor of thepredicate and the constituent, which we call ?Partial Path?.</S>
			<S sid="100" ssid="32">5.</S>
			<S sid="101" ssid="33">Verb Sense Information ? The arguments that a. predicate can take depend on the word sense of the predicate.</S>
			<S sid="102" ssid="34">Each predicate tagged in the PropBankcorpus is assigned a separate set of arguments de pending on the sense in which it is used.</S>
			<S sid="103" ssid="35">Table 3 illustrates the argument sets for the predicate talk.</S>
			<S sid="104" ssid="36">Depending on the sense of the predicate talk, either ARG1 or ARG2 can identify the hearer.</S>
			<S sid="105" ssid="37">Absence of this information can be potentially confusing to the learning mechanism.</S>
			<S sid="106" ssid="38">Talk sense 1: speak sense 2: persuade/dissuade Tag Description Tag Description ARG0 Talker ARG0 Talker ARG1 Subject ARG1 Talked to ARG2 Hearer ARG2 Secondary action Table 3: Argument labels associated with the two senses of predicate talk in PropBank corpus.</S>
			<S sid="107" ssid="39">We added the oracle sense information extracted from PropBank, to our features by treating each sense of a predicate as a distinct predicate.</S>
			<S sid="108" ssid="40">6.</S>
			<S sid="109" ssid="41">Head Word of Prepositional Phrases ? Many ad-.</S>
			<S sid="110" ssid="42">junctive arguments, such as temporals and locatives, occur as prepositional phrases in a sentence, and it is often the case that the head words of those phrases, which are always prepositions, are not very discriminative, eg., ?in the city?, ?in a few minutes?, both share the same head word ?in?</S>
			<S sid="111" ssid="43">and neithercontain a named entity, but the former is ARGM LOC, whereas the latter is ARGM-TMP.</S>
			<S sid="112" ssid="44">Therefore, we tried replacing the head word of a prepositional phrase, with that of the first noun phrase inside theprepositional phrase.</S>
			<S sid="113" ssid="45">We retained the preposition in formation by appending it to the phrase type, eg., ?PP-in?</S>
			<S sid="114" ssid="46">instead of ?PP?.</S>
			<S sid="115" ssid="47">7.</S>
			<S sid="116" ssid="48">First and Last Word/POS in Constituent ? Some.</S>
			<S sid="117" ssid="49">arguments tend to contain discriminative first and last words so we tried using them along with their part of speech as four new features.</S>
			<S sid="118" ssid="50">false positives of the type where constituents far away from the predicate are spuriously identified asarguments, we added this feature which is a concate nation of the constituent type and its ordinal position from the predicate.</S>
			<S sid="119" ssid="51">9.</S>
			<S sid="120" ssid="52">Constituent tree distance ? This is a finer way of.</S>
			<S sid="121" ssid="53">specifying the already present position feature.</S>
			<S sid="122" ssid="54">10.</S>
			<S sid="123" ssid="55">Constituent relative features ? These are nine fea-.</S>
			<S sid="124" ssid="56">tures representing the phrase type, head word and head word part of speech of the parent, and left and right siblings of the constituent in focus.</S>
			<S sid="125" ssid="57">These were added on the intuition that encoding the tree contextthis way might add robustness and improve general ization.</S>
			<S sid="126" ssid="58">11.</S>
			<S sid="127" ssid="59">Temporal cue words ? There are several temporal.</S>
			<S sid="128" ssid="60">cue words that are not captured by the named entity tagger and were considered for addition as a binary feature indicating their presence.</S>
			<S sid="129" ssid="61">12.</S>
			<S sid="130" ssid="62">Dynamic class context ? In the task of argument.</S>
			<S sid="131" ssid="63">classification, these are dynamic features that repre sent the hypotheses of at most previous two nodesbelonging to the same tree as the node being classi fied.</S>
	</SECTION>
	<SECTION title="Feature Performance. " number="8">
			<S sid="132" ssid="1">Table 4 shows the effect each feature has on the ar gument classification and argument identification tasks, when added individually to the baseline.</S>
			<S sid="133" ssid="2">Addition ofnamed entities improves the F1 score for adjunctive arguments ARGM-LOC from 59% to ?68% and ARGM TMP from 78.8% to ?83.4%.</S>
			<S sid="134" ssid="3">But, since these arguments are small in number compared to the core arguments, theoverall accuracy does not show a significant improve ment.</S>
			<S sid="135" ssid="4">We found that adding this feature to the NULL vs NON-NULL classifier degraded its performance.</S>
			<S sid="136" ssid="5">It also shows the contribution of replacing the head word and the head word POS separately in the feature where the head of a prepositional phrase is replaced by the head word of the noun phrase inside it.</S>
			<S sid="137" ssid="6">Apparently, a combinationof relative features seem to have a significant improve ment on either or both the classification and identification tasks, and so do the first and last words in the constituent.</S>
			<S sid="138" ssid="7">Features Class ARGUMENT ID Acc.</S>
			<S sid="139" ssid="8">P R F1 Baseline 87.9 93.7 88.9 91.3+ Named entities 88.1 - - + Head POS ?88.6 94.4 90.1 ?92.2 + Verb cluster 88.1 94.1 89.0 91.5 + Partial path 88.2 93.3 88.9 91.1 + Verb sense 88.1 93.7 89.5 91.5 + Noun head PP (only POS) ?88.6 94.4 90.0 ?92.2 + Noun head PP (only head) ?89.8 94.0 89.4 91.7 + Noun head PP (both) ?89.9 94.7 90.5 ?92.6 + First word in constituent ?89.0 94.4 91.1 ?92.7 + Last word in constituent ?89.4 93.8 89.4 91.6 + First POS in constituent 88.4 94.4 90.6 ?92.5 + Last POS in constituent 88.3 93.6 89.1 91.3 + Ordinal const.</S>
			<S sid="140" ssid="9">pos.</S>
			<S sid="141" ssid="10">concat.</S>
			<S sid="142" ssid="11">87.7 93.7 89.2 91.4 + Const.</S>
			<S sid="143" ssid="12">tree distance 88.0 93.7 89.5 91.5 + Parent constituent 87.9 94.2 90.2 ?92.2 + Parent head 85.8 94.2 90.5 ?92.3 + Parent head POS ?88.5 94.3 90.3 ?92.3 + Right sibling constituent 87.9 94.0 89.9 91.9 + Right sibling head 87.9 94.4 89.9 ?92.1 + Right sibling head POS 88.1 94.1 89.9 92.0 + Left sibling constituent ?88.6 93.6 89.6 91.6 + Left sibling head 86.9 93.9 86.1 89.9 + Left sibling head POS ?88.8 93.5 89.3 91.4+ Temporal cue words ?88.6 - - + Dynamic class context 88.4 - - Table 4: Effect of each feature on the argument identifi cation and classification tasks when added to the baseline system.</S>
			<S sid="144" ssid="13">We tried two other ways of generalizing the head word:i) adding the head word cluster as a feature, and ii) replac ing the head word with a named entity if it belonged toany of the seven named entities mentioned earlier.</S>
			<S sid="145" ssid="14">Neither method showed any improvement.</S>
			<S sid="146" ssid="15">We also tried gen eralizing the path feature by i) compressing sequences of identical labels, and ii) removing the direction in the path, but none showed any improvement on the baseline.</S>
			<S sid="147" ssid="16">8.1 Argument Sequence Information.</S>
			<S sid="148" ssid="17">In order to improve the performance of their statistical ar gument tagger, G&amp;J used the fact that a predicate is likely to instantiate a certain set of arguments.</S>
			<S sid="149" ssid="18">We use a similar strategy, with some additional constraints: i) argument ordering information is retained, and ii) the predicate is considered as an argument and is part of the sequence.</S>
			<S sid="150" ssid="19">We achieve this by training a trigram language model onthe argument sequences, so unlike G&amp;J, we can also es timate the probability of argument sets not seen in the training data.</S>
			<S sid="151" ssid="20">We first convert the raw SVM scores to probabilities using a sigmoid function.</S>
			<S sid="152" ssid="21">Then, for each sentence being parsed, we generate an argument latticeusing the n-best hypotheses for each node in the syn tax tree.</S>
			<S sid="153" ssid="22">We then perform a Viterbi search through the lattice using the probabilities assigned by the sigmoid as the observation probabilities, along with the language model probabilities, to find the maximum likelihood path through the lattice, such that each node is either assigned a value belonging to the PROPBANK ARGUMENTs, or NULL.</S>
			<S sid="154" ssid="23">CORE ARGs/ P R F1 Hand-corrected parses (%) (%) Baseline w/o overlaps 90.0 86.1 88.0 Common predicate 90.8 86.3 88.5 Specific predicate lemma 90.5 87.4 ?88.9Table 5: Improvements on the task of argument identifi cation and tagging after performing a search through the argument lattice.</S>
			<S sid="155" ssid="24">The search is constrained in such a way that no two NON-NULL nodes overlap with each other.</S>
			<S sid="156" ssid="25">To simplify the search, we allowed only NULL assignments to nodeshaving a NULL likelihood above a threshold.</S>
			<S sid="157" ssid="26">While training the language model, we can either use the actual pred icate to estimate the transition probabilities in and out of the predicate, or we can perform a joint estimationover all the predicates.</S>
			<S sid="158" ssid="27">We implemented both cases con sidering two best hypotheses, which always includes a NULL (we add NULL to the list if it is not among the top two).</S>
			<S sid="159" ssid="28">On performing the search, we found that theoverall performance improvement was not much differ ent than that obtained by resolving overlaps as mentionedearlier.</S>
			<S sid="160" ssid="29">However, we found that there was an improve ment in the CORE ARGUMENT accuracy on the combined task of identifying and assigning semantic arguments, given hand-corrected parses, whereas the accuracy of the ADJUNCTIVE ARGUMENTS slightly deteriorated.</S>
			<S sid="161" ssid="30">Thisseems to be logical considering the fact that the ADJUNC TIVE ARGUMENTS are not linguistically constrained inany way as to their position in the sequence of argu ments, or even the quantity.</S>
			<S sid="162" ssid="31">We therefore decided touse this strategy only for the CORE ARGUMENTS.</S>
			<S sid="163" ssid="32">Although, there was an increase in F1 score when the lan guage model probabilities were jointly estimated over allthe predicates, this improvement is not statistically significant.</S>
			<S sid="164" ssid="33">However, estimating the same using specific predicate lemmas, showed a significant improvement in accu racy.</S>
			<S sid="165" ssid="34">The performance improvement is shown in Table 5.</S>
	</SECTION>
	<SECTION title="Best System Performance. " number="9">
			<S sid="166" ssid="1">The best system is trained by first filtering the mostlikely nulls using the best NULL vs NON-NULL classifier trained using all the features whose argument identi fication F1 score is marked in bold in Table 4, and thentraining a ONE vs ALL classifier using the data remain ing after performing the filtering and using the features that contribute positively to the classification task ? ones whose accuracies are marked in bold in Table 4.</S>
			<S sid="167" ssid="2">Table 6 shows the performance of this system.</S>
			<S sid="168" ssid="3">Classes Task Hand-corrected parses P R F1 A (%) (%) (%) ALL Id. 95.2 92.5 93.8 ARGs Classification - - - 91.0 Id. + Classification 88.9 84.6 86.7 CORE Id. 96.2 93.0 94.6 ARGs Classification - - - 93.9 Id. + Classification 90.5 87.4 88.9 Table 6: Best system performance on all tasks using hand-corrected parses.</S>
	</SECTION>
	<SECTION title="Using Automatic Parses. " number="10">
			<S sid="169" ssid="1">Thus far, we have reported results using hand-corrected parses.</S>
			<S sid="170" ssid="2">In real-word applications, the system will have to extract features from an automatically generated parse.</S>
			<S sid="171" ssid="3">To evaluate this scenario, we used the Charniak parser (Chaniak, 2001) to generate parses for PropBank training and test data.</S>
			<S sid="172" ssid="4">We lemmatized the predicate using the XTAG morphology database5 (Daniel et al, 1992).</S>
			<S sid="173" ssid="5">Table 7 shows the performance degradation when automatically generated parses are used.</S>
	</SECTION>
	<SECTION title="Using Latest PropBank Data. " number="11">
			<S sid="174" ssid="1">Owing to the Feb 2004 release of much more and com pletely adjudicated PropBank data, we have a chance to5ftp://ftp.cis.upenn.edu/pub/xtag/morph-1.5/morph 1.5.tar.gz Classes Task Automatic parses P R F1 A (%) (%) (%) ALL Id. 89.3 82.9 86.0 ARGs Classification - - - 90.0 Id. + Classification 84.0 75.3 79.4 CORE Id. 92.0 83.3 87.4 ARGs Classification - - - 90.5 Id. + Classification 86.4 78.4 82.2 Table 7: Performance degradation when using automatic parses instead of hand-corrected ones.</S>
			<S sid="175" ssid="2">report our performance numbers on this data set.</S>
			<S sid="176" ssid="3">Table 8 shows the same information as in previous Tables 6 and7, but generated using the new data.</S>
			<S sid="177" ssid="4">Owing to time limitations, we could not get the results on the argument iden tification task and the combined argument identification and classification task using automatic parses.</S>
			<S sid="178" ssid="5">ALL ARGs Task P R F1 A (%) (%) (%) HAND Id. 96.2 95.8 96.0 Classification - - - 93.0 Id. + Classification 89.9 89.0 89.4 AUTOMATIC Classification - - - 90.1 Table 8: Best system performance on all tasks using hand-corrected parses using the latest PropBank data.</S>
	</SECTION>
	<SECTION title="Feature Analysis. " number="12">
			<S sid="179" ssid="1">In analyzing the performance of the system, it is useful to estimate the relative contribution of the various featuresets used.</S>
			<S sid="180" ssid="2">Table 9 shows the argument classification ac curacies for combinations of features on the training and test data, using hand-corrected parses, for all PropBank arguments.</S>
			<S sid="181" ssid="3">Features Accuracy (%) All 91.0 All except Path 90.8 All except Phrase Type 90.8 All except HW and HW -POS 90.7 All except All Phrases ?83.6 All except Predicate ?82.4 All except HW and FW and LW -POS ?75.1 Path, Predicate 74.4 Path, Phrase Type 47.2 Head Word 37.7 Path 28.0 Table 9: Performance of various feature combinations on the task of argument classification.</S>
			<S sid="182" ssid="4">In the upper part of Table 9 we see the degradation inperformance by leaving out one feature or a feature fam ily at a time.</S>
			<S sid="183" ssid="5">After the addition of all the new features, it is the case that removal of no individual feature exceptpredicate degrades the classification performance significantly, as there are some other features that provide com plimentary information.</S>
			<S sid="184" ssid="6">However, removal of predicate information hurts performance significantly, so does the removal of a family of features, eg., all phrase types, or the head word (HW), first word (FW) and last word (LW)information.</S>
			<S sid="185" ssid="7">The lower part of the table shows the per formance of some feature combinations by themselves.Table 10 shows the feature salience on the task of ar gument identification.</S>
			<S sid="186" ssid="8">One important observation we canmake here is that the path feature is the most salient fea ture in the task of argument identification, whereas it is the least salient in the task of argument classification.</S>
			<S sid="187" ssid="9">Wecould not provide the numbers for argument identifica tion performance upon removal of the path feature since that made the SVM training prohibitively slow, indicating that the SVM had a very hard time separating the NULL class from the NON-NULL class.</S>
			<S sid="188" ssid="10">Features P R F1 (%) (%) All 95.2 92.5 93.8 All except HW 95.1 92.3 93.7 All except Predicate 94.5 91.9 93.2 Table 10: Performance of various feature combinations on the task of argument identification</S>
	</SECTION>
	<SECTION title="Comparing Performance with Other. " number="13">
			<S sid="189" ssid="1">Systems We compare our system against 4 other shallow semantic parsers in the literature.</S>
			<S sid="190" ssid="2">In comparing systems, results are reported for all the three types of tasks mentioned earlier.</S>
			<S sid="191" ssid="3">13.1 Description of the Systems.</S>
			<S sid="192" ssid="4">The Gildea and Palmer (G&amp;P) System.</S>
			<S sid="193" ssid="5">The Gildea and Palmer (2002) system uses the same features and the same classification mechanism used by G&amp;J. These results are reported on the December 2001 release of PropBank.</S>
			<S sid="194" ssid="6">The Surdeanu et al System.</S>
			<S sid="195" ssid="7">Surdeanu et al (2003) report results on two systems using a decision tree classifier.</S>
			<S sid="196" ssid="8">One that uses exactly the same features as the G&amp;J system.</S>
			<S sid="197" ssid="9">We call this ?SurdeanuSystem I.?</S>
			<S sid="198" ssid="10">They then show improved performance of an other system ? ?Surdeanu System II,?</S>
			<S sid="199" ssid="11">which uses some additional features.</S>
			<S sid="200" ssid="12">These results are are reported on the July 2002 release of PropBank.</S>
			<S sid="201" ssid="13">The Gildea and Hockenmaier (G&amp;H) SystemThe Gildea and Hockenmaier (2003) system uses fea tures extracted from Combinatory Categorial Grammar (CCG) corresponding to the features that were used by G&amp;J and G&amp;P systems.</S>
			<S sid="202" ssid="14">CCG is a form of dependencygrammar and is hoped to capture long distance relationships better than a phrase structure grammar.</S>
			<S sid="203" ssid="15">The fea tures are combined using the same algorithm as in G&amp;Jand G&amp;P. They use a slightly newer ? November 2002 re lease of PropBank.</S>
			<S sid="204" ssid="16">We will refer to this as ?G&amp;H System I?.</S>
			<S sid="205" ssid="17">The Chen and Rambow (C&amp;R) System Chen and Rambow report on two different systems,also using a decision tree classifier.</S>
			<S sid="206" ssid="18">The first ?C&amp;R Sys tem I?</S>
			<S sid="207" ssid="19">uses surface syntactic features much like the G&amp;P system.</S>
			<S sid="208" ssid="20">The second ?C&amp;R System II?</S>
			<S sid="209" ssid="21">uses additional syntactic and semantic representations that are extractedfrom a Tree Adjoining Grammar (TAG) ? another grammar formalism that better captures the syntactic proper ties of natural languages.</S>
			<S sid="210" ssid="22">Classifier Accuracy (%) SVM 88 Decision Tree (Surdeanu et al, 2003) 79 Gildea and Palmer (2002) 77 Table 11: Argument classification using same features but different classifiers.</S>
			<S sid="211" ssid="23">13.2 Comparing Classifiers.</S>
			<S sid="212" ssid="24">Since two systems, in addition to ours, report results us ing the same set of features on the same data, we candirectly assess the influence of the classifiers.</S>
			<S sid="213" ssid="25">G&amp;P system estimates the posterior probabilities using several dif ferent feature sets and interpolate the estimates, whileSurdeanu et al (2003) use a decision tree classifier.</S>
			<S sid="214" ssid="26">Ta ble 11 shows a comparison between the three systems for the task of argument classification.</S>
			<S sid="215" ssid="27">13.3 Argument Identification (NULL vs NON-NULL).</S>
			<S sid="216" ssid="28">Table 12 compares the results of the task of identifying the parse constituents that represent semantic arguments.</S>
			<S sid="217" ssid="29">As expected, the performance degrades consider ably when we extract features from an automatic parse as opposed to a hand-corrected parse.</S>
			<S sid="218" ssid="30">This indicates that thesyntactic parser performance directly influences the argu ment boundary identification performance.</S>
			<S sid="219" ssid="31">This could be attributed to the fact that the two features, viz., Path and Head Word that have been seen to be good discriminators of the semantically salient nodes in the syntax tree, are derived from the syntax tree.</S>
			<S sid="220" ssid="32">Classes System Hand Automatic P R F1 P R F1 ALL SVM 95 92 94 89 83 86ARGs Surdeanu System II - - 89 - - Surdeanu System I 85 84 85 - - Table 12: Argument identification 13.4 Argument Classification.</S>
			<S sid="221" ssid="33">Table 13 compares the argument classification accuracies of various systems, and at various levels of classification granularity, and parse accuracy.</S>
			<S sid="222" ssid="34">It can be seen that the SVM System performs significantly better than all the other systems on all PropBank arguments.</S>
			<S sid="223" ssid="35">Classes System Hand Automatic Accuracy Accuracy ALL SVM 91 90 ARGs G&amp;P 77 74Surdeanu System II 84 Surdeanu System I 79 CORE SVM 93.9 90.5ARGs C&amp;R System II 93.5 C&amp;R System I 92.4 Table 13: Argument classification 13.5 Argument Identification and Classification.</S>
			<S sid="224" ssid="36">Table 14 shows the results for the task where the system first identifies candidate argument boundaries and then labels them with the most likely argument.</S>
			<S sid="225" ssid="37">This is the hardest of the three tasks outlined earlier.</S>
			<S sid="226" ssid="38">SVM does avery good job of generalizing in both stages of process ing.</S>
			<S sid="227" ssid="39">Classes System Hand Automatic P R F1 P R F1 ALL SVM 89 85 87 84 75 79 ARGs G&amp;H System I 76 68 72 71 63 67 G&amp;P 71 64 67 58 50 54 CORE SVM System 90 87 89 86 78 82 ARGs G&amp;H System I 82 79 80 76 73 75 C&amp;R System II - - - 65 75 70 Table 14: Identification and classification</S>
	</SECTION>
	<SECTION title="Generalization to a New Text Source. " number="14">
			<S sid="228" ssid="1">Thus far, in all experiments our unseen test data was selected from the same source as the training data.</S>
			<S sid="229" ssid="2">In order to see how well the features generalize to texts drawn from a similar source, we used the classifier trained on PropBank training data to test data drawn from the AQUAINT corpus (LDC, 2002).</S>
			<S sid="230" ssid="3">We annotated 400 sentences from the AQUAINT corpus with PropBank arguments.</S>
			<S sid="231" ssid="4">This is a collection of text from the New York Times Inc., Associated Press Inc., and Xinhua News Service (PropBank by comparison is drawn from Wall Street Journal).</S>
			<S sid="232" ssid="5">The results are shown in Table 15.</S>
			<S sid="233" ssid="6">Task P R F1 A (%) (%) (%)ALL Id. 75.8 71.4 73.5 ARGs Classification - - - 83.8Id.</S>
			<S sid="234" ssid="7">+ Classification 65.2 61.5 63.3 CORE Id. 88.4 74.4 80.8 ARGs Classification - - - 84.0Id.</S>
			<S sid="235" ssid="8">+ Classification 75.2 63.3 68.7 Table 15: Performance on the AQUAINT test set.</S>
			<S sid="236" ssid="9">There is a significant drop in the precision and recallnumbers for the AQUAINT test set (compared to the pre cision and recall numbers for the PropBank test set which were 84% and 75% respectively).</S>
			<S sid="237" ssid="10">One possible reason for the drop in performance is relative coverage of the features on the two test sets.</S>
			<S sid="238" ssid="11">The head word, path andpredicate features all have a large number of possible val ues and could contribute to lower coverage when moving from one domain to another.</S>
			<S sid="239" ssid="12">Also, being more specific they might not transfer well across domains.</S>
			<S sid="240" ssid="13">Features Arguments non-Arguments (%) (%) Predicate, Path 87.60 2.91 Predicate, Head Word 48.90 26.55 Cluster, Path 96.31 4.99 Cluster, Head Word 83.85 60.14 Path 99.13 15.15 Head Word 93.02 90.59 Table 16: Feature Coverage on PropBank test set using parser trained on PropBank training set.</S>
			<S sid="241" ssid="14">Features Arguments non-Arguments (%) (%) Predicate, Path 62.11 4.66 Predicate, Head Word 30.26 17.41 Cluster, Path 87.19 10.68 Cluster, Head Word 65.82 45.43 Path 96.50 29.26 Head Word 84.65 83.54Table 17: Coverage of features on AQUAINT test set us ing parser trained on PropBank training set.Table 16 shows the coverage for features on the hand corrected PropBank test set.</S>
			<S sid="242" ssid="15">The tables show featurecoverage for constituents that were Arguments and con stituents that were NULL.</S>
			<S sid="243" ssid="16">About 99% of the predicates inthe AQUAINT test set were seen in the PropBank train ing set.</S>
			<S sid="244" ssid="17">Table 17 shows coverage for the same features onthe AQUAINT test set.</S>
			<S sid="245" ssid="18">We believe that the drop in cover age of the more predictive feature combinations explains part of the drop in performance.</S>
	</SECTION>
	<SECTION title="Conclusions. " number="15">
			<S sid="246" ssid="1">We have described an algorithm which significantly im proves the state-of-the-art in shallow semantic parsing.</S>
			<S sid="247" ssid="2">Like previous work, our parser is based on a supervised machine learning approach.</S>
			<S sid="248" ssid="3">Key aspects of our results include significant improvement via an SVM classifier, improvement from new features and a series of analytic experiments on the contributions of the features.</S>
			<S sid="249" ssid="4">Addingfeatures that are generalizations of the more specific features seemed to help.</S>
			<S sid="250" ssid="5">These features were named enti ties, head word part of speech and verb clusters.</S>
			<S sid="251" ssid="6">We also analyzed the transferability of the features to a new text source.</S>
			<S sid="252" ssid="7">We would like to thank Ralph Weischedel and Scott Miller ofBBN Inc. for letting us use their named entity tagger ? Iden tiFinder; Martha Palmer for providing us with the PropBank data, Valerie Krugler for tagging the AQUAINT test set with PropBank arguments, and all the anonymous reviewers for their helpful comments.</S>
	</SECTION>
</PAPER>
