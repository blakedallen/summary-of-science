<PAPER>
  <S sid="0">Semantic Class Learning from the Web with Hyponym Pattern Linkage Graphs</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We present a novel approach to weakly supervised semantic class learning from the web, using a single powerful hyponym pattern combined with graph structures, which capture two properties associated with pattern-based Ina candidate is it was discovered many times by other instances in the pattern.</S>
    <S sid="2" ssid="2">A candidate is if it frequently leads to the discovery of other instances.</S>
    <S sid="3" ssid="3">Together, these two measures capture not only frequency of occurrence, but also cross-checking that the candidate occurs both near the class name and near other class members.</S>
    <S sid="4" ssid="4">We developed two algorithms that begin with just a class name and one seed instance and then automatically generate a ranked list of new class instances.</S>
    <S sid="5" ssid="5">We conducted experiments on four semantic classes and consistently achieved high accuracies.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">Knowing the semantic classes of words (e.g., &#8220;trout&#8221; is a kind of FISH) can be extremely valuable for many natural language processing tasks.</S>
    <S sid="7" ssid="2">Although some semantic dictionaries do exist (e.g., WordNet (Miller, 1990)), they are rarely complete, especially for large open classes (e.g., classes of people and objects) and rapidly changing categories (e.g., computer technology).</S>
    <S sid="8" ssid="3">(Roark and Charniak, 1998) reported that 3 of every 5 terms generated by their semantic lexicon learner were not present in WordNet.</S>
    <S sid="9" ssid="4">Automatic semantic lexicon acquisition could be used to enhance existing resources such as WordNet, or to produce semantic lexicons for specialized categories or domains.</S>
    <S sid="10" ssid="5">A variety of methods have been developed for automatic semantic class identification, under the rubrics of lexical acquisition, hyponym acquisition, semantic lexicon induction, semantic class learning, and web-based information extraction.</S>
    <S sid="11" ssid="6">Many of these approaches employ surface-level patterns to identify words and their associated semantic classes.</S>
    <S sid="12" ssid="7">However, such patterns tend to overgenerate (i.e., deliver incorrect results) and hence require additional filtering mechanisms.</S>
    <S sid="13" ssid="8">To overcome this problem, we employed one single powerful doubly-anchored hyponym pattern to query the web and extract semantic class instances: CLASS NAME such as CLASS MEMBER and *.</S>
    <S sid="14" ssid="9">We hypothesized that a doubly-anchored pattern, which includes both the class name and a class member, would achieve high accuracy because of its specificity.</S>
    <S sid="15" ssid="10">To address concerns about coverage, we embedded the search in a bootstrapping process.</S>
    <S sid="16" ssid="11">This method produced many correct instances, but despite the highly restrictive nature of the pattern, still produced many incorrect instances.</S>
    <S sid="17" ssid="12">This result led us to explore new ways to improve the accuracy of hyponym patterns without requiring additional training resources.</S>
    <S sid="18" ssid="13">The main contribution of this work is a novel method for combining hyponym patterns with graph structures that capture two properties associated with pattern extraction: popularity and productivity.</S>
    <S sid="19" ssid="14">Intuitively, a candidate word (or phrase) is popular if it was discovered many times by other words (or phrases) in a hyponym pattern.</S>
    <S sid="20" ssid="15">A candidate word is productive if it frequently leads to the discovery of other words.</S>
    <S sid="21" ssid="16">Together, these two measures capture not only frequency of occurrence, but also crosschecking that the word occurs both near the class name and near other class members.</S>
    <S sid="22" ssid="17">We present two algorithms that use hyponym pattern linkage graphs (HPLGs) to represent popularity and productivity information.</S>
    <S sid="23" ssid="18">The first method uses a dynamically constructed HPLG to assess the popularity of each candidate and steer the bootstrapping process.</S>
    <S sid="24" ssid="19">This approach produces an efficient bootstrapping process that performs reasonably well, but it cannot take advantage of productivity information because of the dynamic nature of the process.</S>
    <S sid="25" ssid="20">The second method is a two-step procedure that begins with an exhaustive pattern search that acquires popularity and productivity information about candidate instances.</S>
    <S sid="26" ssid="21">The candidates are then ranked based on properties of the HPLG.</S>
    <S sid="27" ssid="22">We conducted experiments with four semantic classes, achieving high accuracies and outperforming the results reported by others who have worked on the same classes.</S>
  </SECTION>
  <SECTION title="2 Related Work" number="2">
    <S sid="28" ssid="1">A substantial amount of research has been done in the area of semantic class learning, under a variety of different names and with a variety of different goals.</S>
    <S sid="29" ssid="2">Given the great deal of similar work in information extraction and ontology learning, we focus here only on techniques for weakly supervised or unsupervised semantic class (i.e., supertype-based) learning, since that is most related to the work in this paper.</S>
    <S sid="30" ssid="3">Fully unsupervised semantic clustering (e.g., (Lin, 1998; Lin and Pantel, 2002; Davidov and Rappoport, 2006)) has the disadvantage that it may or may not produce the types and granularities of semantic classes desired by a user.</S>
    <S sid="31" ssid="4">Another related line of work is automated ontology construction, which aims to create lexical hierarchies based on semantic classes (e.g., (Caraballo, 1999; Cimiano and Volker, 2005; Mann, 2002)), and learning semantic relations such as meronymy (Berland and Charniak, 1999; Girju et al., 2003).</S>
    <S sid="32" ssid="5">Our research focuses on semantic lexicon induction, which aims to generate lists of words that belong to a given semantic class (e.g., lists of FISH or VEHICLE words).</S>
    <S sid="33" ssid="6">Weakly supervised learning methods for semantic lexicon generation have utilized co-occurrence statistics (Riloff and Shepherd, 1997; Roark and Charniak, 1998), syntactic information (Tanev and Magnini, 2006; Pantel and Ravichandran, 2004; Phillips and Riloff, 2002), lexico-syntactic contextual patterns (e.g., &#8220;resides in &lt;location&gt;&#8221; or &#8220;moved to &lt;location&gt;&#8221;) (Riloff and Jones, 1999; Thelen and Riloff, 2002), and local and global contexts (Fleischman and Hovy, 2002).</S>
    <S sid="34" ssid="7">These methods have been evaluated only on fixed corpora1, although (Pantel et al., 2004) demonstrated how to scale up their algorithms for the web.</S>
    <S sid="35" ssid="8">Several techniques for semantic class induction have also been developed specifically for learning from the web.</S>
    <S sid="36" ssid="9">(Pas&#184;ca, 2004) uses Hearst&#8217;s patterns (Hearst, 1992) to learn semantic class instances and class groups by acquiring contexts around the pattern.</S>
    <S sid="37" ssid="10">Pasca also developed a second technique (Pas&#184;ca, 2007b) that creates context vectors for a group of seed instances by searching web query logs, and uses them to learn similar instances.</S>
    <S sid="38" ssid="11">The work most closely related to ours is Hearst&#8217;s early work on hyponym learning (Hearst, 1992) and more recent work that has followed up on her idea.</S>
    <S sid="39" ssid="12">Hearst&#8217;s system exploited patterns that explicitly identify a hyponym relation between a semantic class and a word (e.g., &#8220;such authors as Shakespeare&#8221;).</S>
    <S sid="40" ssid="13">We will refer to these as hyponym patterns.</S>
    <S sid="41" ssid="14">Pasca&#8217;s previously mentioned system (Pas&#184;ca, 2004) applies hyponym patterns to the web and acquires contexts around them.</S>
    <S sid="42" ssid="15">The KnowItAll system (Etzioni et al., 2005) also uses hyponym patterns to extract class instances from the web and then evaluates them further by computing mutual information scores based on web queries.</S>
    <S sid="43" ssid="16">The work by (Widdows and Dorow, 2002) on lexical acquisition is similar to ours because they also use graph structures to learn semantic classes.</S>
    <S sid="44" ssid="17">However, their graph is based entirely on syntactic relations between words, while our graph captures the ability of instances to find each other in a hyponym pattern based on web querying, without any part-ofspeech tagging or parsing.</S>
  </SECTION>
  <SECTION title="3 Semantic Class Learning with Hyponym Pattern Linkage Graphs" number="3">
    <S sid="45" ssid="1">Our work was motivated by early research on hyponym learning (Hearst, 1992), which applied patterns to a corpus to associate words with semantic classes.</S>
    <S sid="46" ssid="2">Hearst&#8217;s system exploited patterns that explicitly link a class name with a class member, such as &#8220;X and other Ys&#8221; and &#8220;Ys such as X&#8221;.</S>
    <S sid="47" ssid="3">Relying on surface-level patterns, however, is risky because incorrect items are frequently extracted due to polysemy, idiomatic expressions, parsing errors, etc.</S>
    <S sid="48" ssid="4">Our work began with the simple idea of using an extremely specific pattern to extract semantic class members with high accuracy.</S>
    <S sid="49" ssid="5">Our expectation was that a very specific pattern would virtually eliminate the most common types of false hits that are caused by phenomena such as polysemy and idiomatic expressions.</S>
    <S sid="50" ssid="6">A concern, however, was that an extremely specific pattern would suffer from sparse data and not extract many new instances.</S>
    <S sid="51" ssid="7">By using the web as a corpus, we hoped that the pattern could extract at least a few instances for virtually any class, and then we could gain additional traction by bootstrapping these instances.</S>
    <S sid="52" ssid="8">All of the work presented in this paper uses just one doubly-anchored pattern to identify candidate instances for a semantic class: &lt;class name&gt; such as &lt;class member&gt; and * This pattern has two variables: the name of the semantic class to be learned (class name) and a member of the semantic class (class member).</S>
    <S sid="53" ssid="9">The asterisk (*) indicates the location of the extracted words.</S>
    <S sid="54" ssid="10">We describe this pattern as being doubly-anchored because it is instantiated with both the name of the semantic class as well as a class member.</S>
    <S sid="55" ssid="11">For example, the pattern &#8220;CARS such as FORD and *&#8221; will extract automobiles, and the pattern &#8220;PRESIDENTS such as FORD and *&#8221; will extract presidents.</S>
    <S sid="56" ssid="12">The doubly-anchored nature of the pattern serves two purposes.</S>
    <S sid="57" ssid="13">First, it increases the likelihood of finding a true list construction for the class.</S>
    <S sid="58" ssid="14">Our system does not use part-of-speech tagging or parsing, so the pattern itself is the only guide for finding an appropriate linguistic context.</S>
    <S sid="59" ssid="15">Second, the doubly-anchored pattern virtually eliminates ambiguity because the class name and class member mutually disambiguate each other.</S>
    <S sid="60" ssid="16">For example, the word FORD could refer to an automobile or a person, but in the pattern &#8220;CARS such as FORD and *&#8221; it will almost certainly refer to an automobile.</S>
    <S sid="61" ssid="17">Similarly, the class &#8220;PRESIDENT&#8221; could refer to country presidents or corporate presidents, and &#8220;BUSH&#8221; could refer to a plant or a person.</S>
    <S sid="62" ssid="18">But in the pattern &#8220;PRESIDENTS such as BUSH&#8221;, both words will surely refer to country presidents.</S>
    <S sid="63" ssid="19">Another advantage of the doubly-anchored pattern is that an ambiguous or underspecified class name will be constrained by the presence of the class member.</S>
    <S sid="64" ssid="20">For example, to generate a list of company presidents, someone might naively define the class name as PRESIDENTS.</S>
    <S sid="65" ssid="21">A singly-anchored pattern (e.g., &#8220;PRESIDENTS such as *&#8221;) might generate lists of other types of presidents (e.g., country presidents, university presidents, etc.).</S>
    <S sid="66" ssid="22">Because the doubly-anchored pattern also requires a class member (e.g., &#8220;PRESIDENTS such as BILL GATES and *&#8221;), it is likely to generate only the desired types of instances.</S>
    <S sid="67" ssid="23">To evaluate the performance of the doubly-anchored pattern, we began by using the pattern to search the web and embedded this process in a simple bootstrapping loop, which is presented in Figure 1.</S>
    <S sid="68" ssid="24">As input, the user must provide the name of the desired semantic class (Class) and a seed example (Seed), which are used to instantiate the pattern.</S>
    <S sid="69" ssid="25">On the first iteration, the pattern is given to Google as a web query, and new class members are extracted from the retrieved text snippets.</S>
    <S sid="70" ssid="26">We wanted the system to be as language-independent as possible, so we refrained from using any taggers or parsing tools.</S>
    <S sid="71" ssid="27">As a result, instances are extracted using only word boundaries and orthographic information.</S>
    <S sid="72" ssid="28">For proper name classes, we extract all capitalized words that immediately follow the pattern.</S>
    <S sid="73" ssid="29">For common noun classes, we extract just one word, if it is not capitalized.</S>
    <S sid="74" ssid="30">Examples are shown below, with the extracted items underlined: countries such as China and Sri Lanka are ... fishes such as trout and bass can ... One limitation is that our system cannot learn multi-word instances of common noun categories, or proper names that include uncapitalized words (e.g., &#8220;United States of America&#8221;).</S>
    <S sid="75" ssid="31">These limitations could be easily overcome by incorporating a noun phrase (NP) chunker and extracting NPs.</S>
    <S sid="76" ssid="32">Each new class member is then used as a seed instance in the bootstrapping loop.</S>
    <S sid="77" ssid="33">We implemented this process as breadth-first search, where each &#8220;ply&#8221; of the search process is the result of bootstrapping the class members learned during the previous iteration as seed instances for the next one.</S>
    <S sid="78" ssid="34">During each iteration, we issue a new web query and add the newly extracted class members to the queue for the next cycle.</S>
    <S sid="79" ssid="35">We run this bootstrapping process for a fixed number of iterations (search ply), or until no new class members are produced.</S>
    <S sid="80" ssid="36">We will refer to this process as reckless bootstrapping because there are no checks of any kind.</S>
    <S sid="81" ssid="37">Every term extracted by the pattern is assumed to be a class member.</S>
  </SECTION>
  <SECTION title="3.2.1 Results" number="4">
    <S sid="82" ssid="1">Table 1 shows the results for 4 iterations of reckless bootstrapping for four semantic categories: U.S. states, countries, singers, and fish.</S>
    <S sid="83" ssid="2">The first two categories are relatively small, closed sets (our gold standard contains 50 U.S. states and 194 countries).</S>
    <S sid="84" ssid="3">The singers andfish categories are much larger, open sets (see Section 4 for details). quality deteriorates rapidly as bootstrapping progresses.</S>
    <S sid="85" ssid="4">Figure 2 shows the recall and precision curves for countries and states.</S>
    <S sid="86" ssid="5">High precision is achieved only with low levels of recall for countries.</S>
    <S sid="87" ssid="6">Our initial hypothesis was that such a specific pattern would be able to maintain high precision because non-class members would be unlikely to cooccur with the pattern.</S>
    <S sid="88" ssid="7">But we were surprised to find that many incorrect entries were generated for reasons such as broken expressions like &#8220;Merce -dez&#8221;, misidentified list constructions (e.g., &#8220;In countries such as China U.S. Policy is failing...&#8221;), and incomplete proper names due to insufficient length of the retrieved text snippet.</S>
    <S sid="89" ssid="8">Incorporating a noun phrase chunker would eliminate some of these cases, but far from all of them.</S>
    <S sid="90" ssid="9">We concluded that even such a restrictive pattern is not sufficient for semantic class learning on its own.</S>
    <S sid="91" ssid="10">In the next section, we present a new approach that creates a Hyponym Pattern Linkage Graph to steer bootstrapping and improve accuracy.</S>
    <S sid="92" ssid="11">Intuitively, we expect true class members to occur frequently in pattern contexts with other class members.</S>
    <S sid="93" ssid="12">To operationalize this intuition, we create a hyponym pattern linkage graph, which represents the frequencies with which candidate instances generate each other in the pattern contexts.</S>
    <S sid="94" ssid="13">We define a hyponym pattern linkage graph (HPLG) as a G = (V, E), where each vertex v &#8712; V is a candidate instance and each edge (u, v) &#8712; E means that instance v was generated by instance u.</S>
    <S sid="95" ssid="14">The weight w of an edge is the frequency with which u generated v. For example, consider the following sentence, where the pattern is italicized and the extracted instance is underlined: Countries such as China and Laos have been...</S>
    <S sid="96" ssid="15">In the HPLG, an edge e = (China, Laos) would be created because the pattern anchored by China extracted Laos as a new candidate instance.</S>
    <S sid="97" ssid="16">If this pattern extracted Laos from 15 different snippets, then the edge&#8217;s weight would be 15.</S>
    <S sid="98" ssid="17">The in-degree of a node represents its popularity, i.e., the number of instance occurrences that generated it.</S>
    <S sid="99" ssid="18">The graph is constructed dynamically as bootstrapping progresses.</S>
    <S sid="100" ssid="19">Initially, the seed is the only trusted class member and the only vertex in the graph.</S>
    <S sid="101" ssid="20">The bootstrapping process begins by instantiating the doubly-anchored pattern with the seed class member, issuing a web query to generate new candidate instances, and adding these new instances to the graph.</S>
    <S sid="102" ssid="21">A score is then assigned to every node in the graph, using one of several different metrics defined below.</S>
    <S sid="103" ssid="22">The highest-scoring unexplored node is then added to the set of trusted class members, and used as the seed for the next bootstrapping iteration.</S>
    <S sid="104" ssid="23">We experimented with three scoring functions for selecting nodes.</S>
    <S sid="105" ssid="24">The In-Degree (inD) score for vertex v is the sum of the weights of all incoming edges (u, v), where u is a trusted class member.</S>
    <S sid="106" ssid="25">Intuitively, this captures the popularity of v among instances that have already been identified as good instances.</S>
    <S sid="107" ssid="26">The Best Edge (BE) score for vertex v is the maximum edge weight among the incoming edges (u, v), where u is a trusted class member.</S>
    <S sid="108" ssid="27">The Key Player Problem (KPP) measure is used in social network analysis (Borgatti and Everett, 2006) to identify nodes whose removal would result in a residual network of minimum cohesion.</S>
    <S sid="109" ssid="28">A node receives a high value if it is highly connected and relatively close to most other nodes in the graph.</S>
    <S sid="110" ssid="29">The KPP score for vertex v is computed as: where d(u, v) is the shortest path between two vertices, where u is a trusted node.</S>
    <S sid="111" ssid="30">For tie-breaking, the distances are multiplied by the weight of the edge.</S>
    <S sid="112" ssid="31">Note that all of these measures rely only on incoming edges because a node does not acquire outgoing edges until it has already been selected as a trusted class member and used to acquire new instances.</S>
    <S sid="113" ssid="32">In the next section, we describe a two-step process for creating graphs that can take advantage of both incoming and outgoing edges.</S>
    <S sid="114" ssid="33">One way to try to confirm (or disconfirm) whether a candidate instance is a true class member is to see whether it can produce new candidate instances.</S>
    <S sid="115" ssid="34">If we instantiate our pattern with the candidate (i.e., &#8220;CLASS NAME such as CANDIDATE and *&#8221;) and successfully extract many new instances, then this is evidence that the candidate frequently occurs with the CLASS NAME in list constructions.</S>
    <S sid="116" ssid="35">We will refer to the ability of a candidate to generate new instances as its productivity.</S>
    <S sid="117" ssid="36">The previous bootstrapping algorithm uses a dynamically constructed graph that is constantly evolving as new nodes are selected and explored.</S>
    <S sid="118" ssid="37">Each node is scored based only on the set of instances that have been generated and identified as &#8220;trusted&#8221; at that point in the bootstrapping process.</S>
    <S sid="119" ssid="38">To use productivity information, we must adopt a different procedure because we need to know not only who generated each candidate, but also the complete set of instances that the candidate itself can generate.</S>
    <S sid="120" ssid="39">We adopted a two-step process that can use both popularity and productivity information in a hyponym pattern linkage graph to assess the quality of candidate instances.</S>
    <S sid="121" ssid="40">First, we perform reckless bootstrapping for a class name and seed until no new instances are generated.</S>
    <S sid="122" ssid="41">Second, we assign a score to each node in the graph using a scoring function that takes into account both the in-degree (popularity) and out-degree (productivity) of each node.</S>
    <S sid="123" ssid="42">We experimented with four different scoring functions, some of which were motivated by work on word sense disambiguation to identify the most &#8220;important&#8221; node in a graph containing its possible senses (Navigli and Lapata, 2007).</S>
    <S sid="124" ssid="43">The Out-degree (outD) score for vertex v is the weighted sum of v&#8217;s outgoing edges, normalized by the number of other nodes in the graph.</S>
    <S sid="125" ssid="44">This measure captures only productivity, while the next three measures consider both productivity and popularity.</S>
    <S sid="126" ssid="45">The Total-degree (totD) score for vertex v is the weighted sum of both incoming and outgoing edges, normalized by the number of other nodes in the graph.</S>
    <S sid="127" ssid="46">The Betweenness (BT) score (Freeman, 1979) considers a vertex to be important if it occurs on many shortest paths between other vertices. where Qst is the number of shortest paths from s to t, and Qst(v) is the number of shortest paths from s to t that pass through vertex v. PageRank (Page et al., 1998) establishes the relative importance of a vertex v through an iterative Markov chain model.</S>
    <S sid="128" ssid="47">The PageRank (PR) score of a vertex v is determined on the basis of the nodes it is connected to. a is a damping factor that we set to 0.85.</S>
    <S sid="129" ssid="48">We discarded all instances that produced zero productivity links, meaning that they did not generate any other candidates when used in web queries.</S>
  </SECTION>
  <SECTION title="4 Experimental evaluation" number="5">
    <S sid="130" ssid="1">We evaluated our algorithms on four semantic categories: U.S. states, countries, singers, and fish.</S>
    <S sid="131" ssid="2">The states and countries categories are relatively small, closed sets: our gold standards consist of 50 U.S. states and 194 countries (based on a list found on Wikipedia).</S>
    <S sid="132" ssid="3">The singers and fish categories are much larger, open classes.</S>
    <S sid="133" ssid="4">As our gold standard for fish, we used a list of common fish names found on Wikipedia.2 All the singer names generated by our algorithms were manually reviewed for correctness.</S>
    <S sid="134" ssid="5">We evaluated performance in terms of accuracy (the percentage of instances that were correct).3 Table 2 shows the accuracy results of the two algorithms that use hyponym pattern linkage graphs.</S>
    <S sid="135" ssid="6">We display results for the top-ranked N candidates, for all instances that have a productivity value &gt; zero.4 The Popularity columns show results for the bootstrapping algorithm described in Section 3.3, using three different scoring functions.</S>
    <S sid="136" ssid="7">The results for the ranking algorithm described in Section 3.4 are shown in the Productivity (Prd) and Popularity&amp;Productivity (Pop&amp;Prd) columns.</S>
    <S sid="137" ssid="8">For the states, countries, and singers categories, we randomly selected 5 different initial seeds and then averaged the results.</S>
    <S sid="138" ssid="9">For the fish category we ran each algorithm using just the seed &#8220;salmon&#8221;.</S>
    <S sid="139" ssid="10">The popularity-based metrics produced good accuracies on the states, countries, and singers categories under all 3 scoring functions.</S>
    <S sid="140" ssid="11">For fish, KPP performed better than the others.</S>
    <S sid="141" ssid="12">The Out-degree (outD) scoring function, which uses only Productivity information, obtained the best results across all 4 categories.</S>
    <S sid="142" ssid="13">OutD achieved 100% accuracy for the first 50 states and fish, 100% accuracy for the top 150 countries, and 97% accuracy for the top 50 singers.</S>
    <S sid="143" ssid="14">The three scoring metrics that use both popularity and productivity also performed well, but productivity information by itself seems to perform better in some cases.</S>
    <S sid="144" ssid="15">It can be difficult to compare the results of different semantic class learners because there is no standard set of benchmark categories, so researchers report results for different classes.</S>
    <S sid="145" ssid="16">For the state and country categories, however, we can compare our results with that of other web-based semantic class learners such as Pasca (Pas&#184;ca, 2007a) and the KnowItAll system (Etzioni et al., 2005).</S>
    <S sid="146" ssid="17">For the U.S. states category, our system achieved 100% recall and 100% precision for the first 50 items generated, and KnowItAll performed similarly achieving 98% recall with 100% precision.</S>
    <S sid="147" ssid="18">Pasca did not evaluate his system on states.</S>
    <S sid="148" ssid="19">For the countries category, our system achieved 100% precision for the first 150 generated instances (77% recall).</S>
    <S sid="149" ssid="20">(Pas&#184;ca, 2007a) reports results of 100% precision for the first 25 instances generated, and 82% precision for the first 150 instances generated.</S>
    <S sid="150" ssid="21">The KnowItAll system (Etzioni et al., 2005) achieved 97% precision with 58% recall, and 79% precision with 87% recall.5 To the best of our knowledge, other researchers have not reported results for the singer and fish categories.</S>
    <S sid="151" ssid="22">Figure 3 shows the learning curve for both algorithms using their best scoring functions on the singer category with Placido Domingo as the initial seed.</S>
    <S sid="152" ssid="23">In total, 400 candidate words were generated.</S>
    <S sid="153" ssid="24">The Out-degree scoring function ranked the candidates well.</S>
    <S sid="154" ssid="25">Figure 3 also includes a vertical line indicating where the candidate list was cut (at 180 instances) based on the zero productivity cutoff.</S>
    <S sid="155" ssid="26">One observation is that the rankings do a good job of identifying borderline cases, which typically are ranked just below most correct instances but just above the obviously bad entries.</S>
    <S sid="156" ssid="27">For example, for states, the 50 U.S. states are ranked first, followed by 14 more entries (in order): The first 7 entries are all former states of the Soviet Union.</S>
    <S sid="157" ssid="28">In retrospect, we realized that we should have searched for &#8220;U.S. states&#8221; instead ofjust &#8220;states&#8221;.</S>
    <S sid="158" ssid="29">This example illustrates the power of the doubly-anchored hyponym pattern to correctly identify our intended semantic class by disambiguating our class name based on the seed class member.</S>
    <S sid="159" ssid="30">The algorithms also seem to be robust with respect to initial seed choice.</S>
    <S sid="160" ssid="31">For the states, countries, and singers categories, we ran experiments with 5 different initial seeds, which were randomly selected.</S>
    <S sid="161" ssid="32">The 5 country seeds represented a diverse set of nations, some of which are rarely mentioned in the news: Brazil, France, Guinea-Bissau, Uganda, and Zimbabwe.</S>
    <S sid="162" ssid="33">All of these seeds obtained &gt; 92% recall with &gt; 90% precision.</S>
    <S sid="163" ssid="34">We examined the incorrect instances produced by our algorithms and found that most of them fell into five categories.</S>
    <S sid="164" ssid="35">Type 1 errors were caused by incorrect proper name extraction.</S>
    <S sid="165" ssid="36">For example, in the sentence &#8220;states such as Georgia and English speaking countries like Canada...&#8221;, &#8220;English&#8221; was extracted as a state.</S>
    <S sid="166" ssid="37">These errors resulted from complex noun phrases and conjunctions, as well as unusual syntactic constructions.</S>
    <S sid="167" ssid="38">An NP chunker might prevent some of these cases, but we suspect that many of them would have been misparsed regardless.</S>
    <S sid="168" ssid="39">Type 2 errors were caused by instances that formerly belonged to the semantic class (e.g., SerbiaMontenegro and Czechoslovakia are no longer countries).</S>
    <S sid="169" ssid="40">In this error type, we also include borderline cases that could arguably belong to the semantic class (e.g., Wales as a country).</S>
    <S sid="170" ssid="41">Type 3 errors were spelling variants (e.g., Kyrgystan vs. Kyrgyzhstan) and name variants (e.g., Beyonce vs. Beyonce Knowles).</S>
    <S sid="171" ssid="42">Officially, every entity has one official spelling and one complete name, but in practice there are often variations that may occur nearly as frequently as the official name.</S>
    <S sid="172" ssid="43">For example, it is most common to refer to the singer Beyonce by just her first name.</S>
    <S sid="173" ssid="44">Type 4 errors were caused by sentences that were just flat out wrong in their factual assertions.</S>
    <S sid="174" ssid="45">For example, some sentences referred to &#8220;North America&#8221; as a country.</S>
    <S sid="175" ssid="46">Type 5 errors were caused by broken expressions found in the retrieved snippets (e.g.</S>
    <S sid="176" ssid="47">Michi -gan).</S>
    <S sid="177" ssid="48">These errors may be fixable by cleaning up the web pages or applying heuristics to prevent or recognize partial words.</S>
    <S sid="178" ssid="49">It is worth noting that incorrect instances of Types 2 and 3 may not be problematic to encounter in a dictionary or ontology.</S>
    <S sid="179" ssid="50">Name variants and former class members may in fact be useful to have.</S>
  </SECTION>
  <SECTION title="5 Conclusions" number="6">
    <S sid="180" ssid="1">Combining hyponym patterns with pattern linkage graphs is an effective way to produce a highly accurate semantic class learner that requires truly minimal supervision: just the class name and one class member as a seed.</S>
    <S sid="181" ssid="2">Our results consistently produced high accuracy and for the states and countries categories produced very high recall.</S>
    <S sid="182" ssid="3">The singers and fish categories, which are much larger open classes, also achieved high accuracy and generated many instances, but the resulting lists are far from complete.</S>
    <S sid="183" ssid="4">Even on the web, the doublyanchored hyponym pattern eventually ran out of steam and could not produce more instances.</S>
    <S sid="184" ssid="5">However, all of our experiments were conducted using just a single hyponym pattern.</S>
    <S sid="185" ssid="6">Other researchers have successfully used sets of hyponym patterns (e.g., (Hearst, 1992; Etzioni et al., 2005; Pas&#184;ca, 2004)), and multiple patterns could be used with our algorithms as well.</S>
    <S sid="186" ssid="7">Incorporating additional hyponym patterns will almost certainly improve coverage, and could potentially improve the quality of the graphs as well.</S>
    <S sid="187" ssid="8">Our popularity-based algorithm was very effective and is practical to use.</S>
    <S sid="188" ssid="9">Our best-performing algorithm, however, was the 2-step process that begins with an exhaustive search (reckless bootstrapping) and then ranks the candidates using the Outdegree scoring function, which represents productivity.</S>
    <S sid="189" ssid="10">The first step is expensive, however, because it exhaustively applies the pattern to the web until no more extractions are found.</S>
    <S sid="190" ssid="11">In our evaluation, we ran this process on a single PC and it usually finished overnight, and we were able to learn a substantial number of new class instances.</S>
    <S sid="191" ssid="12">If more hyponym patterns are used, then this could get considerably more expensive, but the process could be easily parallelized to perform queries across a cluster of machines.</S>
    <S sid="192" ssid="13">With access to a cluster of ordinary PCs, this technique could be used to automatically create extremely large, high-quality semantic lexicons, for virtually any categories, without external training resources.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="7">
    <S sid="193" ssid="1">This research was supported in part by the Department of Homeland Security under ONR Grants N00014-07-1-014 and N0014-07-1-0152, the European Union Sixth Framework project QALLME FP6 IST-033860, and the Spanish Ministry of Science and Technology TEXT-MESS TIN2006-15265-C0601.</S>
  </SECTION>
</PAPER>
