<PAPER>
	<S sid="0">Semantic Role Labeling Via Integer Linear Programming Inference</S><ABSTRACT>
		<S sid="1" ssid="1">We present a system for the semantic role la beling task.</S>
		<S sid="2" ssid="2">The system combines a machine learning technique with an inference procedurebased on integer linear programming that supports the incorporation of linguistic and struc tural constraints into the decision process.</S>
		<S sid="3" ssid="3">Thesystem is tested on the data provided in CoNLL 2004 shared task on semantic role labeling and achieves very competitive results.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number="1">
			<S sid="4" ssid="4">Semantic parsing of sentences is believed to be animportant task toward natural language understand ing, and has immediate applications in tasks such information extraction and question answering.</S>
			<S sid="5" ssid="5">We study semantic role labeling(SRL).</S>
			<S sid="6" ssid="6">For each verb in a sentence, the goal is to identify all constituents that fill a semantic role, and to determine their roles,such as Agent, Patient or Instrument, and their ad juncts, such as Locative, Temporal or Manner.</S>
			<S sid="7" ssid="7">The PropBank project (Kingsbury and Palmer, 2002) provides a large human-annotated corpus of semantic verb-argument relations.</S>
			<S sid="8" ssid="8">Specifically, we use the data provided in the CoNLL-2004 shared task of semantic-role labeling (Carreras and Ma`rquez, 2003) which consists of a portion of thePropBank corpus, allowing us to compare the per formance of our approach with other systems.</S>
			<S sid="9" ssid="9">Previous approaches to the SRL task have madeuse of a full syntactic parse of the sentence in or der to define argument boundaries and to determine the role labels (Gildea and Palmer, 2002; Chen and Rambow, 2003; Gildea and Hockenmaier, 2003;Pradhan et al, 2003; Pradhan et al, 2004; Sur deanu et al, 2003).</S>
			<S sid="10" ssid="10">In this work, following the CoNLL-2004 shared task definition, we assume thatthe SRL system takes as input only partial syn tactic information, and no external lexico-semantic knowledge bases.</S>
			<S sid="11" ssid="11">Specifically, we assume as input resources a part-of-speech tagger, a shallow parser that can process the input to the level of basedchunks and clauses (Tjong Kim Sang and Buch holz, 2000; Tjong Kim Sang and De?jean, 2001), and a named-entity recognizer (Tjong Kim Sang and De Meulder, 2003).</S>
			<S sid="12" ssid="12">We do not assume a full parse as input.</S>
			<S sid="13" ssid="13">SRL is a difficult task, and one cannot expecthigh levels of performance from either purely man ual classifiers or purely learned classifiers.</S>
			<S sid="14" ssid="14">Rather, supplemental linguistic information must be used to support and correct a learning system.</S>
			<S sid="15" ssid="15">So far,machine learning approaches to SRL have incorpo rated linguistic information only implicitly, via theclassifiers?</S>
			<S sid="16" ssid="16">features.</S>
			<S sid="17" ssid="17">The key innovation in our ap proach is the development of a principled method tocombine machine learning techniques with linguistic and structural constraints by explicitly incorpo rating inference into the decision process.</S>
			<S sid="18" ssid="18">In the machine learning part, the system we present here is composed of two phases.</S>
			<S sid="19" ssid="19">First, a set of argument candidates is produced using twolearned classifiers?one to discover beginning po sitions and one to discover end positions of each argument type.</S>
			<S sid="20" ssid="20">Hopefully, this phase discovers a small superset of all arguments in the sentence (foreach verb).</S>
			<S sid="21" ssid="21">In a second learning phase, the candi date arguments from the first phase are re-scored using a classifier designed to determine argument type, given a candidate argument.Unfortunately, it is difficult to utilize global prop erties of the sentence into the learning phases.However, the inference level it is possible to incorporate the fact that the set of possible rolelabelings is restricted by both structural and lin guistic constraints?for example, arguments cannotstructurally overlap, or, given a predicate, some ar gument structures are illegal.</S>
			<S sid="22" ssid="22">The overall decision problem must produce an outcome that consistent with these constraints.</S>
			<S sid="23" ssid="23">We encode the constraints aslinear inequalities, and use integer linear programming(ILP) as an inference procedure to make a final decision that is both consistent with the con straints and most likely according to the learningsystem.</S>
			<S sid="24" ssid="24">Although ILP is generally a computationally hard problem, there are efficient implementations that can run on thousands of variables and constraints.</S>
			<S sid="25" ssid="25">In our experiments, we used the commer cial ILP package (Xpress-MP, 2003), and were able to process roughly twenty sentences per second.</S>
	</SECTION>
	<SECTION title="Task Description. " number="2">
			<S sid="26" ssid="1">The goal of the semantic-role labeling task is to dis cover the verb-argument structure for a given input sentence.</S>
			<S sid="27" ssid="2">For example, given a sentence ? I left my pearls to my daughter-in-law in my will?, the goal is to identify different arguments of the verb left which yields the output:[A0 I] [V left ] [A1 my pearls] [A2 to my daughter in-law] [AM-LOC in my will].</S>
			<S sid="28" ssid="3">Here A0 represents the leaver, A1 represents the thing left, A2 represents the benefactor, AM-LOC is an adjunct indicating the location of the action, and V determines the verb.</S>
			<S sid="29" ssid="4">Following the definition of the PropBank, and CoNLL-2004 shared task, there are six different types of arguments labelled as A0-A5 and AA.</S>
			<S sid="30" ssid="5">These labels have different semantics for each verbas specified in the PropBank Frame files.</S>
			<S sid="31" ssid="6">In addi tion, there are also 13 types of adjuncts labelled as AM-XXX where XXX specifies the adjunct type.In some cases, an argument may span over differ ent parts of a sentence, the label C-XXX is used to specify the continuity of the arguments, as shown in the example below.</S>
			<S sid="32" ssid="7">[A1 The pearls] , [A0 I] [V said] , [C-A1 were left to my daughter-in-law].</S>
			<S sid="33" ssid="8">Moreover in some cases, an argument might be a relative pronoun that in fact refers to the actual agentoutside the clause.</S>
			<S sid="34" ssid="9">In this case, the actual agent is la beled as the appropriate argument type, XXX, while the relative pronoun is instead labeled as R-XXX.</S>
			<S sid="35" ssid="10">For example, [A1 The pearls] [R-A1 which] [A0 I] [V left] , [A2 to my daughter-in-law] are fake.</S>
			<S sid="36" ssid="11">See the details of the definition in Kingsbury and Palmer (2002) and Carreras and Ma`rquez (2003).</S>
	</SECTION>
	<SECTION title="System Architecture. " number="3">
			<S sid="37" ssid="1">Our semantic role labeling system consists of two phases.</S>
			<S sid="38" ssid="2">The first phase finds a subset of arguments from all possible candidates.</S>
			<S sid="39" ssid="3">The goal here is tofilter out as many as possible false argument candidates, while still maintaining high recall.</S>
			<S sid="40" ssid="4">The sec ond phase focuses on identifying the types of thoseargument candidates.</S>
			<S sid="41" ssid="5">Since the number of candi dates is much fewer, the second phase is able to use slightly complicated features to facilitate learning a better classifier.</S>
			<S sid="42" ssid="6">This section first introduces the learning system we use and then describes how we learn the classifiers in these two phases.</S>
			<S sid="43" ssid="7">3.1 SNoW Learning Architecture.</S>
			<S sid="44" ssid="8">The learning algorithm used is a variation of the Winnow update rule incorporated in SNoW (Roth, 1998; Roth and Yih, 2002), a multi-class classifier that is specifically tailored for large scale learningtasks.</S>
			<S sid="45" ssid="9">SNoW learns a sparse network of linear functions, in which the targets (argument border predic tions or argument type predictions, in this case) arerepresented as linear functions over a common fea ture space.</S>
			<S sid="46" ssid="10">It incorporates several improvements over the basic Winnow multiplicative update rule.</S>
			<S sid="47" ssid="11">In particular, a regularization term is added, which has the effect of trying to separate the data with a thick separator (Grove and Roth, 2001; Hang et al,2002).</S>
			<S sid="48" ssid="12">In the work presented here we use this regu larization with a fixed parameter.</S>
			<S sid="49" ssid="13">Experimental evidence has shown that SNoW activations are monotonic with the confidence in the prediction.</S>
			<S sid="50" ssid="14">Therefore, it can provide a goodsource of probability estimation.</S>
			<S sid="51" ssid="15">We use soft max (Bishop, 1995) over the raw activation values as conditional probabilities, and also the score of the target.</S>
			<S sid="52" ssid="16">Specifically, suppose the number of classes is n, and the raw activation values of class i is acti.</S>
			<S sid="53" ssid="17">The posterior estimation for class i is derived by the following equation.</S>
			<S sid="54" ssid="18">score(i) = pi = e acti ? 1?j?n eactj The score plays an important role in different places.</S>
			<S sid="55" ssid="19">For example, the first phase uses the scoresto decide which argument candidates should be filtered out.</S>
			<S sid="56" ssid="20">Also, the scores output by the second phase classifier are used in the inference procedure to reason for the best global labeling.</S>
			<S sid="57" ssid="21">3.2 First Phase: Find Argument Candidates.</S>
			<S sid="58" ssid="22">The first phase is to predict the argument candidates of a given sentence that correspond to the active verb.</S>
			<S sid="59" ssid="23">Unfortunately, it turns out that it is difficult to predict the exact arguments accurately.</S>
			<S sid="60" ssid="24">Therefore, the goal here is to output a superset of the correct arguments by filtering out unlikely candidates.Specifically, we learn two classifiers, one to de tect beginning argument locations and the otherto detect end argument locations.</S>
			<S sid="61" ssid="25">Each multi class classifier makes predictions over forty-three classes?thirty-two argument types, ten continuousargument types, and one class to detect not begin ning/not end.</S>
			<S sid="62" ssid="26">Features used for these classifiers are: ? Word feature includes the current word, two words before and two words after.</S>
			<S sid="63" ssid="27">Part-of-speech tag (POS) feature includes the POS tags of all words in a window of size two.</S>
			<S sid="64" ssid="28">Chunk feature includes the BIO tags for chunks of all words in a window of size two.</S>
			<S sid="65" ssid="29">Predicate lemma &amp; POS tag show the lemma form and POS tag of the active predicate.</S>
			<S sid="66" ssid="30">Voice feature is the voice (active/passive) of the current predicate.</S>
			<S sid="67" ssid="31">This is extracted with a simple rule: a verb is identified as passive if it follows a to-be verb in the same phrase chunk and its POS tag is VBN(past participle) or it immediately follows a noun phrase.</S>
			<S sid="68" ssid="32">Position feature describes if the current word is before or after the predicate.</S>
			<S sid="69" ssid="33">Chunk pattern encodes the sequence of chunks from the current words to the predicate.</S>
			<S sid="70" ssid="34">Clause tag indicates the boundary of clauses.</S>
			<S sid="71" ssid="35">Clause path feature is a path formed from a semi-parsed tree containing only clauses and chunks.</S>
			<S sid="72" ssid="36">Each clause is named with the chunk preceding it.</S>
			<S sid="73" ssid="37">The clause path is the path from predicate to target word in the semi-parse tree.</S>
			<S sid="74" ssid="38">Clause position feature is the position of the target word relative to the predicate in the semi-parse tree containing only clauses.</S>
			<S sid="75" ssid="39">Thereare four configurations ? target word and pred icate share the same parent, target word parent is an ancestor of predicate, predicate parent is an ancestor of target word, or otherwise.Because each argument consists of a single be ginning and a single ending, these classifiers can be used to construct a set of potential arguments (by combining each predicted begin with each predicted end after it of the same type).</S>
			<S sid="76" ssid="40">Although this phase identifies typed arguments (i.e. labeled with argument types), the second phasewill re-score each phrase using phrase-based classifiers ? therefore, the goal of the first phase is sim ply to identify non-typed phrase candidates.</S>
			<S sid="77" ssid="41">In thistask, we achieves 98.96% and 88.65% recall (overall, without verb) on the training and the develop ment set, respectively.</S>
			<S sid="78" ssid="42">Because these are the onlycandidates passed to the second phase, the final sys tem performance is upper-bounded by 88.65%.</S>
			<S sid="79" ssid="43">3.3 Second Phase: Argument Classification.</S>
			<S sid="80" ssid="44">The second phase of our system assigns the final argument classes to (a subset) of the argument can didates supplied from the first phase.</S>
			<S sid="81" ssid="45">Again, theSNoW learning architecture is used to train a multi class classifier to label each argument to one of the argument types, plus a special class?no argument(null).</S>
			<S sid="82" ssid="46">Training examples are created from the argu ment candidates supplied from the first phase using the following features: ? Predicate lemma &amp; POS tag, voice, position, clause Path, clause position, chunk pattern Same features as those in the first phase.?</S>
			<S sid="83" ssid="47">Word &amp; POS tag from the argument, includ ing the first,last,and head1 word and tag.?</S>
			<S sid="84" ssid="48">Named entity feature tells if the target argu ment is, embeds, overlaps, or is embedded in a named entity with its type.</S>
			<S sid="85" ssid="49">Chunk tells if the target argument is, embeds, overlaps, or is embedded in a chunk with its type.</S>
			<S sid="86" ssid="50">Lengths of the target argument, in the numbers of words and chunks separately.</S>
			<S sid="87" ssid="51">Verb class feature is the class of the active predicate described in PropBank Frames.</S>
			<S sid="88" ssid="52">Phrase type uses simple heuristics to identify the target argument as VP, PP, or NP.</S>
			<S sid="89" ssid="53">Sub-categorization describes the phrase structure around the predicate.</S>
			<S sid="90" ssid="54">We separate the clause where the predicate is in into three parts?the predicate chunk, segments before and after the predicate, and use the sequence of phrase types of these three segments.</S>
			<S sid="91" ssid="55">Baseline features identified not in the main verb chunk as AM-NEG and modal verb in the main verb chunk as AM-MOD.</S>
			<S sid="92" ssid="56">Clause coverage describes how much of the local clause (from the predicate) is covered by the target argument.?</S>
			<S sid="93" ssid="57">Chunk pattern length feature counts the num ber of patterns in the argument.?</S>
			<S sid="94" ssid="58">Conjunctions join every pair of the above fea tures as new features.</S>
			<S sid="95" ssid="59">Boundary words &amp; POS tag include twowords/tags before and after the target argu ment.</S>
			<S sid="96" ssid="60">Bigrams are pairs of words/tags in the window from two words before the target to the first word of the target, and also from the last word to two words after the argument.</S>
			<S sid="97" ssid="61">1We use simple rules to first decide if a candidate phrase type is VP, NP, or PP.</S>
			<S sid="98" ssid="62">The headword of an NP phrase is the right-most noun.</S>
			<S sid="99" ssid="63">Similarly, the left-most verb/proposition of a VP/PP phrase is extracted as the headword ? Sparse collocation picks one word/tag from the two words before the argument, the first word/tag, the last word/tag of the argument, and one word/tag from the two words after the argument to join as features.</S>
			<S sid="100" ssid="64">Although the predictions of the second-phaseclassifier can be used directly, the labels of argu ments in a sentence often violate some constraints.</S>
			<S sid="101" ssid="65">Therefore, we rely on the inference procedure to make the final predictions.</S>
	</SECTION>
	<SECTION title="Inference via ILP. " number="4">
			<S sid="102" ssid="1">Ideally, if the learned classifiers are perfect, arguments can be labeled correctly according to the classifiers?</S>
			<S sid="103" ssid="2">predictions.</S>
			<S sid="104" ssid="3">In reality, labels assigned to ar guments in a sentence often contradict each other,and violate the constraints arising from the struc tural and linguistic information.</S>
			<S sid="105" ssid="4">In order to resolve the conflicts, we design an inference procedure thattakes the confidence scores of each individual argument given by the second-phase classifier as in put, and outputs the best global assignment that also satisfies the constraints.</S>
			<S sid="106" ssid="5">In this section we firstintroduce the constraints and the inference prob lem in the semantic role labeling task.</S>
			<S sid="107" ssid="6">Then, wedemonstrate how we apply integer linear program ming(ILP) to reason for the global label assignment.</S>
			<S sid="108" ssid="7">4.1 Constraints over Argument Labeling.</S>
			<S sid="109" ssid="8">Formally, the argument classifier attempts to assign labels to a set of arguments, S1:M , indexed from 1 to M . Each argument Si can take any label from a set of argument labels, P , and the indexed set of arguments can take a set of labels, c1:M ? PM . If we assume that the classifier returns a score, score(Si = ci), corresponding to the likelihood ofseeing label ci for argument Si, then, given a sentence, the unaltered inference task is solved by max imizing the overall score of the arguments, c?1:M = argmax c1:M?PM score(S1:M = c1:M ) = argmax c1:M?PM M?</S>
			<S sid="110" ssid="9">i=1 score(Si = ci).</S>
			<S sid="111" ssid="10">(1) In the presence of global constraints derived from linguistic information and structural considerations,our system seeks for a legitimate labeling that max imizes the score.</S>
			<S sid="112" ssid="11">Specifically, it can be viewed asthe solution space is limited through the use of a filter function, F , that eliminates many argument labelings from consideration.</S>
			<S sid="113" ssid="12">It is interesting to con trast this with previous work that filters individual phrases (see (Carreras and Ma`rquez, 2003)).</S>
			<S sid="114" ssid="13">Here, we are concerned with global constraints as well as constraints on the arguments.</S>
			<S sid="115" ssid="14">Therefore, the final labeling becomes c?1:M = argmax c1:M?F(PM ) M?</S>
			<S sid="116" ssid="15">i=1 score(Si = ci) (2)The filter function used considers the following con straints: 1.</S>
			<S sid="117" ssid="16">Arguments cannot cover the predicate except.</S>
			<S sid="118" ssid="17">those that contain only the verb or the verb and the following word.</S>
			<S sid="119" ssid="18">2.</S>
			<S sid="120" ssid="19">Arguments cannot overlap with the clauses.</S>
			<S sid="121" ssid="20">(they can be embedded in one another).</S>
			<S sid="122" ssid="21">3.</S>
			<S sid="123" ssid="22">If a predicate is outside a clause, its arguments.</S>
			<S sid="124" ssid="23">cannot be embedded in that clause.</S>
			<S sid="125" ssid="24">4.</S>
			<S sid="126" ssid="25">No overlapping or embedding arguments..</S>
	</SECTION>
	<SECTION title="No duplicate argument classes for A0?A5,V.. " number="5">
			<S sid="127" ssid="1">7.</S>
			<S sid="128" ssid="2">If there is C-V, then there should be a sequence.</S>
			<S sid="129" ssid="3">of consecutive V, A1, and C-V pattern.</S>
			<S sid="130" ssid="4">For ex ample, when split is the verb in ?split it up?, the A1 argument is ?it?</S>
			<S sid="131" ssid="5">and C-V argument is ?up?.</S>
			<S sid="132" ssid="6">8.</S>
			<S sid="133" ssid="7">If there is an R-XXX argument, then there has.</S>
			<S sid="134" ssid="8">to be an XXX argument.</S>
			<S sid="135" ssid="9">That is, if an ar gument is a reference to some other argument XXX, then this referenced argument must exist in the sentence.</S>
			<S sid="136" ssid="10">9.</S>
			<S sid="137" ssid="11">If there is a C-XXX argument, then there has.</S>
			<S sid="138" ssid="12">to be an XXX argument; in addition, the C XXX argument must occur after XXX.</S>
			<S sid="139" ssid="13">This is stricter than the previous rule because the order of appearance also needs to be considered.</S>
			<S sid="140" ssid="14">10.</S>
			<S sid="141" ssid="15">Given the predicate, some argument classes.</S>
			<S sid="142" ssid="16">are illegal (e.g. predicate ?stalk?</S>
			<S sid="143" ssid="17">can take only A0 or A1).</S>
			<S sid="144" ssid="18">This linguistic information can be found in PropBank Frames.</S>
			<S sid="145" ssid="19">We reformulate the constraints as linear (in)equalities by introducing indicator variables.</S>
			<S sid="146" ssid="20">The optimization problem (Eq.</S>
			<S sid="147" ssid="21">2) is solved using ILP.</S>
			<S sid="148" ssid="22">4.2 Using Integer Linear Programming.</S>
			<S sid="149" ssid="23">As discussed previously, a collection of potential arguments is not necessarily a valid semantic label ing since it must satisfy all of the constraints.</S>
			<S sid="150" ssid="24">In this context, inference is the process of finding the best (according to Equation 1) valid semantic labels that satisfy all of the specified constraints.</S>
			<S sid="151" ssid="25">We take a similar approach that has been previously used for entity/relation recognition (Roth and Yih, 2004), and model this inference procedure as solving an ILP.</S>
			<S sid="152" ssid="26">An integer linear program(ILP) is basically the same as a linear program.</S>
			<S sid="153" ssid="27">The cost function and the (in)equality constraints are all linear in terms of thevariables.</S>
			<S sid="154" ssid="28">The only difference in an ILP is the vari ables can only take integers as their values.</S>
			<S sid="155" ssid="29">In our inference problem, the variables are in fact binary.</S>
			<S sid="156" ssid="30">A general binary integer programming problem can be stated as follows.</S>
			<S sid="157" ssid="31">Given a cost vector p ? &lt;d, a set of variables, z = (z1, . . .</S>
			<S sid="158" ssid="32">, zd) and cost matrices C1 ? &lt;t1 ? &lt;d,C2 ? &lt;t2?&lt;d , where t1 and t2 are the numbers of inequality and equality constraints and d is the number of binary variables.</S>
			<S sid="159" ssid="33">The ILP solution z?</S>
			<S sid="160" ssid="34">is the vector that maximizes the cost function, z?</S>
			<S sid="161" ssid="35">= argmax z?{0,1}d p ? z, subject to C1z ? b1, and C2z = b2, where b1,b2 ? &lt;d, and for all z ? z, z ? {0, 1}.To solve the problem of Equation 2 in this set ting, we first reformulate the original cost function?Mi=1 score(Si = ci) as a linear function over sev eral binary variables, and then represent the filter function F using linear inequalities and equalities.</S>
			<S sid="162" ssid="36">We set up a bijection from the semantic labeling to the variable set z. This is done by setting z to a set of indicator variables.</S>
			<S sid="163" ssid="37">Specifically, let zic = [Si = c] be the indicator variable that represents whether or not the argument type c is assigned to Si, and let pic = score(Si = c).</S>
			<S sid="164" ssid="38">Equation 1 can then be written as an ILP cost function as argmax z?{0,1}d M?</S>
			<S sid="165" ssid="39">i=1 |P|?</S>
			<S sid="166" ssid="40">c=1 piczic, subject to |P|?</S>
			<S sid="167" ssid="41">c=1 zic = 1 ?zic ? z, which means that each argument can take only one type.</S>
			<S sid="168" ssid="42">Note that this new constraint comes from thevariable transformation, and is not one of the con straints used in the filter function F .Constraints 1 through 3 can be evaluated on a per argument basis ? the sake of efficiency, arguments that violate these constraints are eliminated even before given the second-phase classifier.</S>
			<S sid="169" ssid="43">Next, we show how to transform the constraints in the filter function into the form of linear (in)equalities over z, and use them in this ILP setting.</S>
			<S sid="170" ssid="44">Constraint 4: No overlapping or embedding If arguments Sj1 , . . .</S>
			<S sid="171" ssid="45">, Sjk occupy the same word in asentence, then this constraint restricts only one ar guments to be assigned to an argument type.</S>
			<S sid="172" ssid="46">In other words, k ? 1 arguments will be the special class null, which means the argument candidate is not a legitimate argument.</S>
			<S sid="173" ssid="47">If the special class null is represented by the symbol ?, then for every set ofsuch arguments, the following linear equality repre sents this constraint.</S>
			<S sid="174" ssid="48">k? i=1 zji?</S>
			<S sid="175" ssid="49">= k ? 1 Constraint 5: No duplicate argument classesWithin the same sentence, several types of argu ments cannot appear more than once.</S>
			<S sid="176" ssid="50">For example, a predicate can only take one A0.</S>
			<S sid="177" ssid="51">This constraint can be represented using the following inequality.</S>
			<S sid="178" ssid="52">M? i=1 ziA0 ? 1 Constraint 6: Exactly one V argument For each verb, there is one and has to be one V argument,which represents the active verb.</S>
			<S sid="179" ssid="53">Similarly, this con straint can be represented by the following equality.</S>
			<S sid="180" ssid="54">M? i=1 ziV = 1Constraint 7: V?A1?C-V pattern This constraint is only useful when there are three consec utive candidate arguments in a sentence.</S>
			<S sid="181" ssid="55">Suppose arguments Sj1 , Sj2 , Sj3 are consecutive.</S>
			<S sid="182" ssid="56">If Sj3 isC-V, then Sj1 and Sj2 have to be V and A1, respec tively.</S>
			<S sid="183" ssid="57">This if-then constraint can be represented by the following two linear inequalities.</S>
			<S sid="184" ssid="58">zj3C-V ? zj1V, and zj3C-V ? zj2A1 Constraint 8: R-XXX arguments Suppose the referenced argument type is A0 and the reference type is R-A0.</S>
			<S sid="185" ssid="59">The linear inequalities that represent this constraint are: ?m ? {1, . . .</S>
			<S sid="186" ssid="60">,M} : M?</S>
			<S sid="187" ssid="61">i=1 ziA0 ? zmR-A0 If there are ? reference argument pairs, then the total number of inequalities needed is ?M .Constraint 9: C-XXX arguments This constraint is similar to the reference argument constraints.</S>
			<S sid="188" ssid="62">The difference is that the continued argu ment XXX has to occur before C-XXX.</S>
			<S sid="189" ssid="63">Assumethat the argument pair is A0 and C-A0, and argu ment Sji appears before Sjk if i ? k. The linear inequalities that represent this constraint are: ?m ? {2, . . .</S>
			<S sid="190" ssid="64">,M} : j?1?</S>
			<S sid="191" ssid="65">i=1 zjiA0 ? zmR-A0 Constraint 10: Illegal argument types Given aspecific verb, some argument types should never oc cur.</S>
			<S sid="192" ssid="66">For example, most verbs don?t have arguments A5.</S>
			<S sid="193" ssid="67">This constraint is represented by summing all the corresponding indicator variables to be 0.</S>
			<S sid="194" ssid="68">M? i=1 ziA5 = 0Using ILP to solve this inference problem en joys several advantages.</S>
			<S sid="195" ssid="69">Linear constraints are very general, and are able to represent many types of constraints.</S>
			<S sid="196" ssid="70">Previous approaches usually relyon dynamic programming to resolve non over lapping/embedding constraints (i.e., Constraint 4)when the data is sequential, but are unable to han dle other constraints.</S>
			<S sid="197" ssid="71">The ILP approach is flexibleenough to handle constraints regardless of the structure of the data.</S>
			<S sid="198" ssid="72">Although solving an ILP problem is NP-hard, with the help of todays commer cial numerical packages, this problem can usually be solved very fast in practice.</S>
			<S sid="199" ssid="73">For instance, it onlytakes about 10 minutes to solve the inference prob lem for 4305 sentences on a Pentium-III 800 MHz machine in our experiments.</S>
			<S sid="200" ssid="74">Note that ordinarysearch methods (e.g., beam search) are not neces sarily faster than solving an ILP problem and do not guarantee the optimal solution.</S>
			<S sid="201" ssid="75">5 Experimental Results.</S>
			<S sid="202" ssid="76">The system is evaluated on the data provided in the CoNLL-2004 semantic-role labeling shared task which consists of a portion of PropBank corpus.The training set is extracted from TreeBank (Mar cus et al, 1993) section 15?18, the development set,used in tuning parameters of the system, from sec tion 20, and the test set from section 21.</S>
			<S sid="203" ssid="77">We first compare this system with the basic taggerthat we have, the CSCL shallow parser from (Punyakanok and Roth, 2001), which is equivalent to us ing the scoring function from the first phase with only the non-overlapping/embedding constraints.</S>
			<S sid="204" ssid="78">In Prec.</S>
			<S sid="205" ssid="79">Rec.</S>
			<S sid="206" ssid="80">F?=1 1st-phase, non-overlap 70.54 61.50 65.71 1st-phase, All Const.</S>
			<S sid="207" ssid="81">70.97 60.74 65.46 2nd-phase, non-overlap 69.69 64.75 67.13 2nd-phase, All Const.</S>
			<S sid="208" ssid="82">71.96 64.93 68.26 Table 1: Summary of experiments on the development set.</S>
			<S sid="209" ssid="83">All results are for overall performance.</S>
			<S sid="210" ssid="84">Precision Recall F?=1 Without Inference 86.95 87.24 87.10 With Inference 88.03 88.23 88.13 Table 2: Results of second phase phrase prediction and inference assuming perfect boundary detection inthe first phase.</S>
			<S sid="211" ssid="85">Inference improves performance by re stricting label sequences rather than restricting structuralproperties since the correct boundaries are given.</S>
			<S sid="212" ssid="86">All re sults are for overall performance on the development set.</S>
			<S sid="213" ssid="87">addition, we evaluate the effectiveness of using only this constraint versus all constraints, as in Sec.</S>
			<S sid="214" ssid="88">4.</S>
			<S sid="215" ssid="89">Table 1 shows how additional constraints over thestandard non-overlapping constraints improve per formance on the development set.</S>
			<S sid="216" ssid="90">The argument scoring is chosen from either the first phase or the second phase and each is evaluated by considering simply the non-overlapping/embedding constraint or the full set of linguistic constraints.</S>
			<S sid="217" ssid="91">To make a fair comparison, parameters were set separately to optimize performance when using the first phase results.</S>
			<S sid="218" ssid="92">In general, using all constraints increasesF?=1 by about 1% in this system, but slightly de creases the performance when only the first phaseclassifier is used.</S>
			<S sid="219" ssid="93">Also, using the two-phase archi tecture improves both precision and recall, and the enhancement reflected in F?=1 is about 2.5%.</S>
			<S sid="220" ssid="94">It is interesting to find out how well the secondphase classifier can perform given perfectly seg mented arguments.</S>
			<S sid="221" ssid="95">This evaluates the quality of the argument classifier, and also provides a conceptual upper bound.</S>
			<S sid="222" ssid="96">Table 2 first shows the results without using inference (i.e. F(PM ) = PM ).</S>
			<S sid="223" ssid="97">The secondrow shows adding inference to the phrase classifica tion can further improve F?=1 by 1%.</S>
			<S sid="224" ssid="98">Finally, the overall result on the official test set is given in Table 3.</S>
			<S sid="225" ssid="99">Note that the result here is not comparable with the best in this domain (Pradhan et al., 2004) where the full parse tree is assumed given.</S>
			<S sid="226" ssid="100">For a fair comparison, our system was among the best at CoNLL-04, where the best system (Hacioglu et al, 2004) achieve a 69.49 F1 score.</S>
	</SECTION>
	<SECTION title="Conclusion. " number="6">
			<S sid="227" ssid="1">We show that linguistic information is useful for se mantic role labeling, both in extracting features and Dist. Prec.</S>
			<S sid="228" ssid="2">Rec.</S>
			<S sid="229" ssid="3">F?=1 Overall 100.00 70.07 63.07 66.39 A0 26.87 81.13 77.70 79.38 A1 35.73 74.21 63.02 68.16 A2 7.44 54.16 41.04 46.69 A3 1.56 47.06 26.67 34.04 A4 0.52 71.43 60.00 65.22 AM-ADV 3.20 39.36 36.16 37.69 AM-CAU 0.51 45.95 34.69 39.53 AM-DIR 0.52 42.50 34.00 37.78 AM-DIS 2.22 52.00 67.14 58.61 AM-EXT 0.15 46.67 50.00 48.28 AM-LOC 2.38 33.47 34.65 34.05 AM-MNR 2.66 45.19 36.86 40.60 AM-MOD 3.51 92.49 94.96 93.70 AM-NEG 1.32 85.92 96.06 90.71 AM-PNC 0.89 32.79 23.53 27.40 AM-TMP 7.78 59.77 56.89 58.30 R-A0 1.66 81.33 76.73 78.96 R-A1 0.73 58.82 57.14 57.97 R-A2 0.09 100.00 22.22 36.36 R-AM-TMP 0.15 54.55 42.86 48.00 Table 3: Results on the test set.</S>
			<S sid="230" ssid="4">deriving hard constraints on the output.</S>
			<S sid="231" ssid="5">We also demonstrate that it is possible to use integer linear programming to perform inference that incorporates a wide variety of hard constraints, which would be difficult to incorporate using existing methods.</S>
			<S sid="232" ssid="6">In addition, we provide further evidence supporting the use of scoring arguments over scoring argument boundaries for complex tasks.</S>
			<S sid="233" ssid="7">In the future, we planto use the full PropBank corpus to see the improvement when more training data is provided.</S>
			<S sid="234" ssid="8">In addition, we would like to explore the possibility of integer linear programming approach using soft constraints.</S>
			<S sid="235" ssid="9">As more constraints are considered, we ex pect the overall performance to improve.</S>
	</SECTION>
	<SECTION title="Acknowledgments. " number="7">
			<S sid="236" ssid="1">We thank Xavier Carreras and Llu??s Ma`rquez for the data and scripts, Martha Palmer and the anonymous referees for their useful comments, AMD for their equipment donation, and Dash Optimization for the free academic use of their Xpress-MP software.This research is supported by NSF grants ITR-IIS0085836, ITR-IIS-0085980 and IIS-9984168, EIA 0224453 and an ONR MURI Award.</S>
	</SECTION>
</PAPER>
