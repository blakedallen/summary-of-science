<PAPER>
  <S sid="0">Early Results For Named Entity Recognition With Conditional Random Fields Feature Induction And Web-Enhanced Lexicons</S>
  <ABSTRACT/>
  <SECTION title="1 Introduction" number="1">
    <S sid="1" ssid="1">Models for many natural language tasks benefit from the flexibility to use overlapping, non-independent features.</S>
    <S sid="2" ssid="2">For example, the need for labeled data can be drastically reduced by taking advantage of domain knowledge in the form of word lists, part-of-speech tags, character ngrams, and capitalization patterns.</S>
    <S sid="3" ssid="3">While it is difficult to capture such inter-dependent features with a generative probabilistic model, conditionally-trained models, such as conditional maximum entropy models, handle them well.</S>
    <S sid="4" ssid="4">There has been significant work with such models for greedy sequence modeling in NLP (Ratnaparkhi, 1996; Borthwick et al., 1998).</S>
    <S sid="5" ssid="5">Conditional Random Fields (CRFs) (Lafferty et al., 2001) are undirected graphical models, a special case of which correspond to conditionally-trained finite state machines.</S>
    <S sid="6" ssid="6">While based on the same exponential form as maximum entropy models, they have efficient procedures for complete, non-greedy finite-state inference and training.</S>
    <S sid="7" ssid="7">CRFs have shown empirical successes recently in POS tagging (Lafferty et al., 2001), noun phrase segmentation (Sha and Pereira, 2003) and Chinese word segmentation (McCallum and Feng, 2003).</S>
    <S sid="8" ssid="8">Given these models&#8217; great flexibility to include a wide array of features, an important question that remains is what features should be used?</S>
    <S sid="9" ssid="9">For example, in some cases capturing a word tri-gram is important, however, there is not sufficient memory or computation to include all word tri-grams.</S>
    <S sid="10" ssid="10">As the number of overlapping atomic features increases, the difficulty and importance of constructing only certain feature combinations grows.</S>
    <S sid="11" ssid="11">This paper presents a feature induction method for CRFs.</S>
    <S sid="12" ssid="12">Founded on the principle of constructing only those feature conjunctions that significantly increase loglikelihood, the approach builds on that of Della Pietra et al (1997), but is altered to work with conditional rather than joint probabilities, and with a mean-field approximation and other additional modifications that improve efficiency specifically for a sequence model.</S>
    <S sid="13" ssid="13">In comparison with traditional approaches, automated feature induction offers both improved accuracy and significant reduction in feature count; it enables the use of richer, higherorder Markov models, and offers more freedom to liberally guess about which atomic features may be relevant to a task.</S>
    <S sid="14" ssid="14">Feature induction methods still require the user to create the building-block atomic features.</S>
    <S sid="15" ssid="15">Lexicon membership tests are particularly powerful features in natural language tasks.</S>
    <S sid="16" ssid="16">The question is where to get lexicons that are relevant for the particular task at hand?</S>
    <S sid="17" ssid="17">This paper describes WebListing, a method that obtains seeds for the lexicons from the labeled data, then uses the Web, HTML formatting regularities and a search engine service to significantly augment those lexicons.</S>
    <S sid="18" ssid="18">For example, based on the appearance of Arnold Palmer in the labeled data, we gather from the Web a large list of other golf players, including Tiger Woods (a phrase that is difficult to detect as a name without a good lexicon).</S>
    <S sid="19" ssid="19">We present results on the CoNLL-2003 named entity recognition (NER) shared task, consisting of news articles with tagged entities PERSON, LOCATION, ORGANIZATION and MISC.</S>
    <S sid="20" ssid="20">The data is quite complex; for example the English data includes foreign person names (such as Yayuk Basuki and Innocent Butare), a wide diversity of locations (including sports venues such as The Oval, and rare location names such as Nirmal Hriday), many types of organizations (from company names such as 3M, to acronyms for political parties such as KDP, to location names used to refer to sports teams such as Cleveland), and a wide variety of miscellaneous named entities (from software such as Java, to nationalities such as Basque, to sporting competitions such as 1,000 Lakes Rally).</S>
    <S sid="21" ssid="21">On this, our first attempt at a NER task, with just a few person-weeks of effort and little work on developmentset error analysis, our method currently obtains overall English F1 of 84.04% on the test set by using CRFs, feature induction and Web-augmented lexicons.</S>
    <S sid="22" ssid="22">German F1 using very limited lexicons is 68.11%.</S>
  </SECTION>
  <SECTION title="2 Conditional Random Fields" number="2">
    <S sid="23" ssid="1">Conditional Random Fields (CRFs) (Lafferty et al., 2001) are undirected graphical models used to calculate the conditional probability of values on designated output nodes given values assigned to other designated input nodes.</S>
    <S sid="24" ssid="2">In the special case in which the output nodes of the graphical model are linked by edges in a linear chain, CRFs make a first-order Markov independence assumption, and thus can be understood as conditionally-trained finite state machines (FSMs).</S>
    <S sid="25" ssid="3">In the remainder of this section we introduce the likelihood model, inference and estimation procedures for CRFs.</S>
    <S sid="26" ssid="4">Let o = (o1, o2, ...oT) be some observed input data sequence, such as a sequence of words in text in a document, (the values on n input nodes of the graphical model).</S>
    <S sid="27" ssid="5">Let S be a set of FSM states, each of which is associated with a label, l E L, (such as ORG).</S>
    <S sid="28" ssid="6">Let s = (s1, s2, ...sT) be some sequence of states, (the values on T output nodes).</S>
    <S sid="29" ssid="7">By the Hammersley-Clifford theorem, CRFs define the conditional probability of a state sequence given an input sequence to be where Zo is a normalization factor over all state sequences, fk(st&#8722;1, st, o, t) is an arbitrary feature function over its arguments, and &#955;k is a learned weight for each feature function.</S>
    <S sid="30" ssid="8">A feature function may, for example, be defined to have value 0 in most cases, and have value 1 if and only if st&#8722;1 is state #1 (which may have label OTHER), and st is state #2 (which may have label LOCATION), and the observation at position t in o is a word appearing in a list of country names.</S>
    <S sid="31" ssid="9">Higher &#955; weights make their corresponding FSM transitions more likely, so the weight &#955;k in this example should be positive.</S>
    <S sid="32" ssid="10">More generally, feature functions can ask powerfully arbitrary questions about the input sequence, including queries about previous words, next words, and conjunctions of all these, and fk(&#183;) can range &#8722;oo...oo.</S>
    <S sid="33" ssid="11">CRFs define the conditional probability of a label sequence based on total probability over the state sequences, PA(l|o) = Ps:l(s)=l PA(s|o), where l(s) is the sequence of labels corresponding to the labels of the states in sequences.</S>
    <S sid="34" ssid="12">Note that the normalization factor, Zo, is the sum of the &#8220;scores&#8221; of all possible state sequences, Zo = the number of state sequences is exponential in the input sequence length, T. In arbitrarily-structured CRFs, calculating the normalization factor in closed form is intractable, but in linear-chain-structured CRFs, as in forward-backward for hidden Markov models (HMMs), the probability that a particular transition was taken between two CRF states at a particular position in the input sequence can be calculated efficiently by dynamic programming.</S>
    <S sid="35" ssid="13">We define slightly modified forward values, &#945;t(si), to be the &#8220;unnormalized probability&#8221; of arriving in state si given the observations (o1, ...ot).</S>
    <S sid="36" ssid="14">We set &#945;0(s) equal to the probability of starting in each state s, and recurse: !</S>
    <S sid="37" ssid="15">The backward procedure and the remaining details of Baum-Welch are defined similarly.</S>
    <S sid="38" ssid="16">Zo is then Ps &#945;T(s).</S>
    <S sid="39" ssid="17">The Viterbi algorithm for finding the most likely state sequence given the observation sequence can be correspondingly modified from its HMM form.</S>
    <S sid="40" ssid="18">The weights of a CRF, A={&#955;, ...}, are set to maximize the conditional log-likelihood of labeled sequences in some training set, D = {(o, l)(1), ...(o, l)(j), ...(o, l)(N)}: where the second sum is a Gaussian prior over parameters (with variance &#963;) that provides smoothing to help cope with sparsity in the training data.</S>
    <S sid="41" ssid="19">When the training labels make the state sequence unambiguous (as they often do in practice), the likelihood function in exponential models such as CRFs is convex, so there are no local maxima, and thus finding the global optimum is guaranteed.</S>
    <S sid="42" ssid="20">It has recently been shown that quasi-Newton methods, such as L-BFGS, are significantly more efficient than traditional iterative scaling and even conjugate gradient (Malouf, 2002; Sha and Pereira, 2003).</S>
    <S sid="43" ssid="21">This method approximates the second-derivative of the likelihood by keeping a running, finite-sized window of previous first-derivatives.</S>
    <S sid="44" ssid="22">L-BFGS can simply be treated as a black-box optimization procedure, requiring only that one provide the first-derivative of the function to be optimized.</S>
    <S sid="45" ssid="23">Assuming that the training labels on instance j make its state path unambiguous, let s(j) denote that path, and then the first-derivative of the log-likelihood is where Ck(s, o) is the &#8220;count&#8221; for feature k given s and o, equal to PTt=1 fk(st&#8722;1, st, o, t), the sum of fk(st&#8722;1, st, o, t) values for all positions, t, in the sequence s. The first two terms correspond to the difference between the empirical expected value of feature fk and the model&#8217;s expected value: (&#732;E[fk]&#8722;EA[fk])N. The last term is the derivative of the Gaussian prior.</S>
  </SECTION>
  <SECTION title="3 Efficient Feature Induction for CRFs" number="3">
    <S sid="46" ssid="1">PA( Typically the features, fk, are based on some number of hand-crafted atomic observational tests (such as word is capitalized or word is &#8220;said&#8221;, or word appears in lexicon of country names), and a large collection of features is formed by making conjunctions of the atomic tests in certain user-defined patterns; (for example, the conjunctions consisting of all tests at the current sequence position conjoined with all tests at the position one step ahead&#8212;specifically, for instance, current word is capitalized and next word is &#8220;Inc&#8221;).</S>
    <S sid="47" ssid="2">There can easily be over 100,000 atomic tests (mostly based on tests for the identity of words in the vocabulary), and ten or more shifted-conjunction patterns&#8212;resulting in several million features (Sha and Pereira, 2003).</S>
    <S sid="48" ssid="3">This large number of features can be prohibitively expensive in memory and computation; furthermore many of these features are irrelevant, and others that are relevant are excluded.</S>
    <S sid="49" ssid="4">In response, we wish to use just those time-shifted conjunctions that will significantly improve performance.</S>
    <S sid="50" ssid="5">We start with no features, and over several rounds of feature induction: (1) consider a set of proposed new features, (2) select for inclusion those candidate features that will most increase the log-likelihood of the correct state path s(j), and (3) train weights for all features.</S>
    <S sid="51" ssid="6">The proposed new features are based on the hand-crafted observational tests&#8212;consisting of singleton tests, and binary conjunctions of tests with each other and with features currently in the model.</S>
    <S sid="52" ssid="7">The later allows arbitrary-length conjunctions to be built.</S>
    <S sid="53" ssid="8">The fact that not all singleton tests are included in the model gives the designer great freedom to use a very large variety of observational tests, and a large window of time shifts.</S>
    <S sid="54" ssid="9">To consider the effect of adding a new feature, define the new sequence model with additional feature, g, having weight &#181;, to be Zo(A, g, &#181;) def=Es P&#923;(s'|o) exp(ETt=1 &#181;g(st&#8722;1, st, o, t)) in the denominator is simply the additional portion of normalization required to make the new function sum to 1 over all state sequences.</S>
    <S sid="55" ssid="10">Following (Della Pietra et al., 1997), we efficiently assess many candidate features in parallel by assuming that the &#955; parameters on all included features remain fixed while estimating the gain, G(g), of a candidate feature, g, based on the improvement in log-likelihood it provides, where L&#923;+g&#181; includes &#8722;&#181;2/2&#963;2.</S>
    <S sid="56" ssid="11">In addition, we make this approach tractable for CRFs with two further reasonable and mutually-supporting approximations specific to CRFs.</S>
    <S sid="57" ssid="12">(1) We avoid dynamic programming for inference in the gain calculation with a mean-field approximation, removing the dependence among states.</S>
    <S sid="58" ssid="13">(Thus we transform the gain from a sequence problem to a token classification problem.</S>
    <S sid="59" ssid="14">However, the original posterior distribution over states given each token, P&#923;(s|o) = &#945;t(s|o)&#946;t+1(s|o)/Zo, is still calculated by dynamic programming without approximation.)</S>
    <S sid="60" ssid="15">Furthermore, we can calculate the gain of aggregate features irrespective of transition source, g(st, o, t), and expand them after they are selected.</S>
    <S sid="61" ssid="16">(2) In many sequence problems, the great majority of the tokens are correctly labeled even in the early stages of training.</S>
    <S sid="62" ssid="17">We significantly gain efficiency by including in the gain calculation only those tokens that are mislabeled by the current model.</S>
    <S sid="63" ssid="18">Let {o(i) : i = 1...M} be those tokens, and o(i) be the input sequence in which the ith error token occurs at position t(i).</S>
    <S sid="64" ssid="19">Then algebraic simplification using these approximations and previous definitions gives G&#923;(g, &#181;) = where Zo(i)(A, g, &#181;) (with non-bold o) is simply s P&#923;(s|o(i))exp(&#181;g(s,o(i),t(i))).</S>
    <S sid="65" ssid="20">The optimal values of the &#181;&#8217;s cannot be solved in closed form, but Newton&#8217;s method finds them all in about 12 quick iterations.</S>
    <S sid="66" ssid="21">There are two additional important modeling choices: (1) Because we expect our models to still require several thousands of features, we save time by adding many of the features with highest gain each round of induction rather than just one; (including a few redundant features is not harmful).</S>
    <S sid="67" ssid="22">(2) Because even models with a small select number of features can still severely overfit, we train the model with just a few BFGS iterations (not to convergence) before performing the next round of feature induction.</S>
    <S sid="68" ssid="23">Details are in (McCallum, 2003).</S>
  </SECTION>
  <SECTION title="4 Web-augmented Lexicons" number="4">
    <S sid="69" ssid="1">Some general-purpose lexicons, such a surnames and location names, are widely available, however, many natural language tasks will benefit from more task-specific lexicons, such as lists of soccer teams, political parties, NGOs and English counties.</S>
    <S sid="70" ssid="2">Creating new lexicons entirely by hand is tedious and time consuming.</S>
    <S sid="71" ssid="3">Using a technique we call WebListing, we build lexicons automatically from HTML data on the Web.</S>
    <S sid="72" ssid="4">Previous work has built lexicons from fixed corpora by determining linguistic patterns for the context in which relevant words appear (Collins and Singer, 1999; Jones et al., 1999).</S>
    <S sid="73" ssid="5">Rather than mining a small corpus, we gather data from nearly the entire Web; rather than relying on fragile linguistic context patterns, we leverage robust formatting regularities on the Web.</S>
    <S sid="74" ssid="6">WebListing finds co-occurrences of seed terms that appear in an identical HTML formatting pattern, and augments a lexicon with other terms on the page that share the same formatting.</S>
    <S sid="75" ssid="7">Our current implementation uses GoogleSets, which we understand to be a simple implementation of this approach based on using HTML list items as the formatting regularity.</S>
    <S sid="76" ssid="8">We are currently building a more sophisticated replacement.</S>
  </SECTION>
  <SECTION title="5 Results" number="5">
    <S sid="77" ssid="1">To perform named entity extraction on the news articles in the CoNLL-2003 English shared task, several families of features are used, all time-shifted by -2, -1, 0, 1, 2: (a) the word itself, (b) 16 character-level regular expressions, mostly concerning capitalization and digit patterns, such as A, A+, Aa+, Aa+Aa*, A., D+, where A, a and D indicate the regular expressions [A-Z], [a-z] and [0-9], (c) 8 lexicons entered by hand, such as honorifics, days and months, (d) 15 lexicons obtained from specific web sites, such as countries, publicly-traded companies, surnames, stopwords, and universities, (e) 25 lexicons obtained by WebListing (including people names, organizations, NGOs and nationalities), (f) all the above tests with prefix firstmention from any previous duplicate of the current word, (if capitalized).</S>
    <S sid="78" ssid="2">A small amount of hand-filtering was performed on some of the WebListing lexicons.</S>
    <S sid="79" ssid="3">Since GoogleSets&#8217; support for non-English is severely limited, only 5 small lexicons were used for German; but character bi- and tri-grams were added.</S>
    <S sid="80" ssid="4">A Java-implemented, first-order CRF was trained for about 12 hours on a 1GHz Pentium with a Gaussian prior variance of 0.5, inducing 1000 or fewer features (down to a gain threshold of 5.0) each round of 10 iterations of L-BFGS.</S>
    <S sid="81" ssid="5">Candidate conjunctions are limited to the 1000 atomic and existing features with highest gain.</S>
    <S sid="82" ssid="6">Performance results for each of the entity classes can be found in Figure 1.</S>
    <S sid="83" ssid="7">The model achieved an overall F1 of 84.04% on the English test set using 6423 features.</S>
    <S sid="84" ssid="8">(Using a set of fixed conjunction patterns instead of feature induction results in F1 73.34%, with about 1 million features; trialand-error tuning the fixed patterns would likely improve this.)</S>
    <S sid="85" ssid="9">Accuracy gains are expected from experimentation with the induction parameters and improved WebListing.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="6">
    <S sid="86" ssid="1">We thank John Lafferty, Fernando Pereira, Andres CorradaEmmanuel, Drew Bagnell and Guy Lebanon, for helpful input.</S>
    <S sid="87" ssid="2">This work was supported in part by the Center for Intelligent Information Retrieval, SPAWARSYSCEN-SD grant numbers N66001-99-1-8912 and N66001-02-1-8903, Advanced Research and Development Activity under contract number MDA904-01-C-0984, and DARPA contract F3060201-2-0566.</S>
  </SECTION>
</PAPER>
