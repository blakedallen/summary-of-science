<PAPER>
  <S sid="0">Two Languages are Better than One (for Syntactic Parsing)</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We show that jointly parsing a bitext can substantially improve parse quality on both sides.</S>
    <S sid="2" ssid="2">In a maximum entropy bitext parsing model, we define a distribution over source trees, target trees, and node-to-node alignments between them.</S>
    <S sid="3" ssid="3">Features include monolingual parse scores and various measures of syntactic divergence.</S>
    <S sid="4" ssid="4">Using the translated portion of the Chinese treebank, our model is trained iteratively to maximize the marginal likelihood of training tree pairs, with alignments treated as latent variables.</S>
    <S sid="5" ssid="5">The resulting bitext parser outperforms state-of-the-art monoparser baselines by 2.5 predicting side trees and 1.8 predicting Chinese side trees (the highest published numbers on these corpora).</S>
    <S sid="6" ssid="6">Moreover, these improved trees yield a 2.4 BLEU increase when used in a downstream MT evaluation.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="7" ssid="1">Methods for machine translation (MT) have increasingly leveraged not only the formal machinery of syntax (Wu, 1997; Chiang, 2007; Zhang et al., 2008), but also linguistic tree structures of either the source side (Huang et al., 2006; Marton and Resnik, 2008; Quirk et al., 2005), the target side (Yamada and Knight, 2001; Galley et al., 2004; Zollmann et al., 2006; Shen et al., 2008), or both (Och et al., 2003; Aue et al., 2004; Ding and Palmer, 2005).</S>
    <S sid="8" ssid="2">These methods all rely on automatic parsing of one or both sides of input bitexts and are therefore impacted by parser quality.</S>
    <S sid="9" ssid="3">Unfortunately, parsing general bitexts well can be a challenge for newswiretrained treebank parsers for many reasons, including out-of-domain input and tokenization issues.</S>
    <S sid="10" ssid="4">On the other hand, the presence of translation pairs offers a new source of information: bilingual constraints.</S>
    <S sid="11" ssid="5">For example, Figure 1 shows a case where a state-of-the-art English parser (Petrov and Klein, 2007) has chosen an incorrect structure which is incompatible with the (correctly chosen) output of a comparable Chinese parser.</S>
    <S sid="12" ssid="6">Smith and Smith (2004) previously showed that such bilingual constraints can be leveraged to transfer parse quality from a resource-rich language to a resourceimpoverished one.</S>
    <S sid="13" ssid="7">In this paper, we show that bilingual constraints and reinforcement can be leveraged to substantially improve parses on both sides of a bitext, even for two resource-rich languages.</S>
    <S sid="14" ssid="8">Formally, we present a log-linear model over triples of source trees, target trees, and node-tonode tree alignments between them.</S>
    <S sid="15" ssid="9">We consider a set of core features which capture the scores of monolingual parsers as well as measures of syntactic alignment.</S>
    <S sid="16" ssid="10">Our model conditions on the input sentence pair and so features can and do reference input characteristics such as posterior distributions from a word-level aligner (Liang et al., 2006; DeNero and Klein, 2007).</S>
    <S sid="17" ssid="11">Our training data is the translated section of the Chinese treebank (Xue et al., 2002; Bies et al., 2007), so at training time correct trees are observed on both the source and target side.</S>
    <S sid="18" ssid="12">Gold tree alignments are not present and so are induced as latent variables using an iterative training procedure.</S>
    <S sid="19" ssid="13">To make the process efficient and modular to existing monolingual parsers, we introduce several approximations: use of k-best lists in candidate generation, an adaptive bound to avoid considering all k2 combinations, and Viterbi approximations to alignment posteriors.</S>
    <S sid="20" ssid="14">We evaluate our system primarily as a parser and secondarily as a component in a machine translation pipeline.</S>
    <S sid="21" ssid="15">For both English and Chinese, we begin with the state-of-the-art parsers presented in Petrov and Klein (2007) as a baseline.</S>
    <S sid="22" ssid="16">Joint parse selection improves the English trees by 2.5 F1 and the Chinese trees by 1.8 F1.</S>
    <S sid="23" ssid="17">While other Chinese treebank parsers do not have access to English side translations, this Chinese figure does outperform all published monolingual Chinese treebank results on an equivalent split of the data.</S>
    <S sid="24" ssid="18">As MT motivates this work, another valuable evaluation is the effect of joint selection on downstream MT quality.</S>
    <S sid="25" ssid="19">In an experiment using a syntactic MT system, we find that rules extracted from joint parses results in an increase of 2.4 BLEU points over rules extracted from independent parses.1 In sum, jointly parsing bitexts improves parses substantially, and does so in a way that that carries all the way through the MT pipeline.</S>
  </SECTION>
  <SECTION title="2 Model" number="2">
    <S sid="26" ssid="1">In our model, we consider pairs of sentences (s, s'), where we use the convention that unprimed variables are source domain and primed variables are target domain.</S>
    <S sid="27" ssid="2">These sentences have parse trees t (respectively t') taken from candidate sets T (T').</S>
    <S sid="28" ssid="3">Non-terminal nodes in trees will be denoted by n (n') and we abuse notation by equating trees with their node sets.</S>
    <S sid="29" ssid="4">Alignments a are simply at-mostone-to-one matchings between a pair of trees t and t' (see Figure 2a for an example).</S>
    <S sid="30" ssid="5">Note that we will also mention word alignments in feature definitions; a and the unqualified term alignment will always refer to node alignments.</S>
    <S sid="31" ssid="6">Words in a sentence are denoted by v (v').</S>
    <S sid="32" ssid="7">Our model is a general log-linear (maximum entropy) distribution over triples (t, a, t') for sentence pairs (s, s'): Features are thus defined over (t, a, t') triples; we discuss specific features below.</S>
  </SECTION>
  <SECTION title="3 Features" number="3">
    <S sid="33" ssid="1">To use our model, we need features of a triple (t, a, t') which encode both the monolingual quality of the trees as well as the quality of the alignment between them.</S>
    <S sid="34" ssid="2">We introduce a variety of features in the next sections.</S>
    <S sid="35" ssid="3">To capture basic monolingual parse quality, we begin with a single source and a single target feature whose values are the log likelihood of the source tree t and the target tree t', respectively, as given by our baseline monolingual parsers.</S>
    <S sid="36" ssid="4">These two features are called SOURCELL and TARGETLL respectively.</S>
    <S sid="37" ssid="5">It is certainly possible to augment these simple features with what would amount to monolingual reranking features, but we do not explore that option here.</S>
    <S sid="38" ssid="6">Note that with only these two features, little can be learned: all positive weights w cause the jointly optimal parse pair (t, t') to comprise the two top-1 monolingual outputs (the baseline).</S>
    <S sid="39" ssid="7">All other features in our model reference the entire triple (t, a, t').</S>
    <S sid="40" ssid="8">In this work, such features are defined over aligned node pairs for efficiency, but generalizations are certainly possible.</S>
    <S sid="41" ssid="9">Bias: The first feature is simply a bias feature which has value 1 on each aligned node pair (n, n').</S>
    <S sid="42" ssid="10">This bias allows the model to learn a general preference for denser alignments.</S>
    <S sid="43" ssid="11">Alignment features: Of course, some alignments are better than others.</S>
    <S sid="44" ssid="12">One indicator of a good nodeto-node alignment between n and n' is that a good word alignment model thinks that there are many word-to-word alignments in their bispan.</S>
    <S sid="45" ssid="13">Similarly, there should be few alignments that violate that bispan.</S>
    <S sid="46" ssid="14">To compute such features, we define a(v, v') to be the posterior probability assigned to the word alignment between v and v' by an independent word aligner.2 Before defining alignment features, we need to define some additional variables.</S>
    <S sid="47" ssid="15">For any node n E t (n' E t'), the inside span i(n) (i(n')) comprises the input tokens of s (s') dominated by that node.</S>
    <S sid="48" ssid="16">Similarly, the complement, the outside span, will be denoted o(n) (o(n')), and comprises the tokens not dominated by that node.</S>
    <S sid="49" ssid="17">See Figure 2b,c for examples of the resulting regions.</S>
    <S sid="50" ssid="18">Hard alignment features: We also define the hard versions of these features, which take counts from the word aligner&#8217;s hard top-1 alignment output S: Scaled alignment features: Finally, undesirable larger bispans can be relatively sparse at the word alignment level, yet still contain many good word alignments simply by virtue of being large.</S>
    <S sid="51" ssid="19">We therefore define a scaled count which measures density rather than totals.</S>
    <S sid="52" ssid="20">The geometric mean of span lengths was a superior measure of bispan &#8220;area&#8221; than the true area because word-level alignments tend to be broadly one-to-one in our word alignment model.</S>
    <S sid="53" ssid="21">Head word alignment features: When considering a node pair (n, n'), especially one which dominates a large area, the above measures treat all spanned words as equally important.</S>
    <S sid="54" ssid="22">However, lexical heads are generally more representative than other spanned words.</S>
    <S sid="55" ssid="23">Let h select the headword of a node according to standard head percolation rules (Collins, 2003; Bikel and Chiang, 2000).</S>
    <S sid="56" ssid="24">We also consider features that measure correspondences between the tree structures themselves.</S>
    <S sid="57" ssid="25">Span difference: We expect that, in general, aligned nodes should dominate spans of roughly the same length, and so we allow the model to learn to penalize node pairs whose inside span lengths differ greatly.</S>
    <S sid="58" ssid="26">Number of children: We also expect that there will be correspondences between the rules of the CFGs that generate the trees in each language.</S>
    <S sid="59" ssid="27">To encode some of this information, we compute indicators of the number of children c that the nodes have in t and t'.</S>
    <S sid="60" ssid="28">NUMCHILDREN(|c(n)|, |c(n')|) = 1 For each feature above (except monolingual features), we create label-specific versions by conjoining the label pair (`(n), `(n')).</S>
    <S sid="61" ssid="29">We use both the typed and untyped variants of all features.</S>
  </SECTION>
  <SECTION title="4 Training" number="4">
    <S sid="62" ssid="1">Recall that our data condition supplies sentence pairs (s, s') along with gold parse pairs (g, g').</S>
    <S sid="63" ssid="2">We do not observe the alignments a which link these parses.</S>
    <S sid="64" ssid="3">In principle, we want to find weights which maximize the marginal log likelihood of what we do observe given our sentence pairs:3 Child labels: In addition, we also encode whether w&#8727; = arg max EP(g,a,g0|s,s0,w) (1) certain label pairs occur as children of matched w a nodes.</S>
    <S sid="65" ssid="4">Let c(n, `) select the children of n with la- = arg max Ea exp(w&gt;&#966;(g, a, g0)) bel `. w &#65533; &#65533;a exp(w&gt;&#966;(t, a, t0)) (2) (t,t') CHILDLABEL(`, `') = |c(n, `) |&#183; |c(n', `')| Note that the corresponding &#8220;self labels&#8221; feature is not listed because it arises in the next section as a typed variant of the bias feature.</S>
    <S sid="66" ssid="5">There are several challenges.</S>
    <S sid="67" ssid="6">First, the space of symmetric at-most-one-to-one matchings is #P-hard to sum over exactly (Valiant, 1979).</S>
    <S sid="68" ssid="7">Second, even without matchings to worry about, standard methods for maximizing the above formulation would require summation over pairs of trees, and we want to assume a fairly generic interface to independent monolingual parsers (though deeper joint modeling and/or training is of course a potential extension).</S>
    <S sid="69" ssid="8">As we have chosen to operate in a reranking mode over monolingual k-best lists, we have another issue: our k-best outputs on the data which trains our model may not include the gold tree pair.</S>
    <S sid="70" ssid="9">We therefore make several approximations and modifications, which we discuss in turn.</S>
    <S sid="71" ssid="10">Because summing over alignments a is intractable, we cannot evaluate (2) or its derivatives.</S>
    <S sid="72" ssid="11">However, if we restrict the space of possible alignments, then we can make this optimization more feasible.</S>
    <S sid="73" ssid="12">One way to do this is to stipulate in advance that for each tree pair, there is a canonical alignment a0(t, t0).</S>
    <S sid="74" ssid="13">Of course, we want a0 to reflect actual correspondences between t and t0, so we want a reasonable definition that ensures the alignments are of reasonable quality.</S>
    <S sid="75" ssid="14">Fortunately, it turns out that we can efficiently optimize a given a fixed tree pair and weight vector: This optimization requires only that we search for an optimal alignment.</S>
    <S sid="76" ssid="15">Because all our features can be factored to individual node pairs, this can be done with the Hungarian algorithm in cubic time.4 Note that we do not enforce any kind of domination consistency in the matching: for example, the optimal alignment might in principle have the source root aligning to a target non-root and vice versa.</S>
    <S sid="77" ssid="16">We then define a0(t, t0) as the alignment that maximizes w&gt;0 O(t, a, t0), where w0 is a fixed initial weight vector with a weight of 1 for INSIDEBOTH, -1 for INSRCOUTTRG and INTRGOUTSRC, and 0 for all other features.</S>
    <S sid="78" ssid="17">Then, we simplify (2) by fixing the alignments a0: This optimization has no latent variables and is therefore convex and straightforward.</S>
    <S sid="79" ssid="18">However, while we did use this as a rapid training procedure during development, fixing the alignments a priori is both unsatisfying and also less effective than a procedure which allows the alignments a to adapt during training.</S>
    <S sid="80" ssid="19">Again, for fixed alignments a, optimizing w is easy.</S>
    <S sid="81" ssid="20">Similarly, with a fixed w, finding the optimal a for any particular tree pair is also easy.</S>
    <S sid="82" ssid="21">Another option is therefore to use an iterative procedure that alternates between choosing optimal alignments for a fixed w, and then reoptimizing w for those fixed alignments according to (3).</S>
    <S sid="83" ssid="22">By iterating, we perform the following optimization: Note that (4) is just (2) with summation replaced by maximization.</S>
    <S sid="84" ssid="23">Though we do not know of any guarantees for this EM-like algorithm, in practice it converges after a few iterations given sufficient training data.</S>
    <S sid="85" ssid="24">We initialize the procedure by setting w0 as defined above.</S>
    <S sid="86" ssid="25">When training our model, we approximate the sets of all trees with k-best lists, T and T0, produced by monolingual parsers.</S>
    <S sid="87" ssid="26">Since these sets are not guaranteed to contain the gold trees g and g0, our next approximation is to define a set of pseudo-gold trees, following previous work in monolingual parse reranking (Charniak and Johnson, 2005).</S>
    <S sid="88" ssid="27">We define T&#710; ( T&#710;0) as the F1-optimal subset of T (T0).</S>
    <S sid="89" ssid="28">We then modify (4) to reflect the fact that we are seeking to maximize the likelihood of trees in this subset: To reduce the time and space requirements for training, we do not always use the full k-best lists.</S>
    <S sid="90" ssid="29">To prune the set T, we rank all the trees in T from 1 to k, according to their log likelihood under the baseline parsing model, and find the rank of the least likely pseudo-gold tree: Finally, we restrict T based on rank: To prune the list of tree pairs, first we rank them according to the metric: where E is a free parameter of the pruning procedure.</S>
    <S sid="91" ssid="30">The restricted set T0pruned is constructed in the same way.</S>
    <S sid="92" ssid="31">When training, we replace the sum over all tree pairs in (T, T0) in the denominator of (6) with a sum over all tree pairs in (Tpruned, T0pruned).</S>
    <S sid="93" ssid="32">The parameter E can be set to any value from 0 to k, with lower values resulting in more efficient training, and higher values resulting in better performance.</S>
    <S sid="94" ssid="33">We set E by empirically determining a good speed/performance tradeoff (see &#167;6.2).</S>
  </SECTION>
  <SECTION title="5 Joint Selection" number="5">
    <S sid="95" ssid="1">At test time, we have a weight vector w and so selecting optimal trees for the sentence pair (s, s0) from a pair of k best lists, (T, T0) is straightforward.</S>
    <S sid="96" ssid="2">We just find: Note that with no additional cost, we can also find the optimal alignment between t&#8727; and t0&#8727;: Because the size of (T, T0) grows as O(k&#65533;), the time spent iterating through all these tree pairs can grow unreasonably long, particularly when reranking a set of sentence pairs the size of a typical MT corpus.</S>
    <S sid="97" ssid="3">To combat this, we use a simple pruning technique to limit the number of tree pairs under consideration.</S>
    <S sid="98" ssid="4">Then, we simply remove all tree pairs whose ranking falls below some empirically determined cutoff.</S>
    <S sid="99" ssid="5">As we show in &#167;6.3, by using this technique we are able to speed up reranking by a factor of almost 20 without an appreciable loss of performance.</S>
  </SECTION>
  <SECTION title="6 Statistical Parsing Experiments" number="6">
    <S sid="100" ssid="1">All the data used to train the joint parsing model and to evaluate parsing performance were taken from articles 1-325 of the Chinese treebank, which all have English translations with gold-standard parse trees.</S>
    <S sid="101" ssid="2">The articles were split into training, development, and test sets according to the standard breakdown for Chinese parsing evaluations.</S>
    <S sid="102" ssid="3">Not all sentence pairs could be included for various reasons, including one-to-many Chinese-English sentence alignments, sentences omitted from the English translations, and low-fidelity translations.</S>
    <S sid="103" ssid="4">Additional sentence pairs were dropped from the training data because they had unambiguous parses in at least one of the two languages.</S>
    <S sid="104" ssid="5">Table 1 shows how many sentences were included in each dataset.</S>
    <S sid="105" ssid="6">We had two training setups: rapid and full.</S>
    <S sid="106" ssid="7">In the rapid training setup, only 1000 sentence pairs from the training set were used, and we used fixed alignments for each tree pair rather than iterating (see &#167;4.1).</S>
    <S sid="107" ssid="8">The full training setup used the iterative training procedure on all 2298 training sentence pairs.</S>
    <S sid="108" ssid="9">We used the English and Chinese parsers in Petrov and Klein (2007)5 to generate all k-best lists and as our evaluation baseline.</S>
    <S sid="109" ssid="10">Because our bilingual data is from the Chinese treebank, and the data typically used to train a Chinese parser contains the Chinese side of our bilingual training data, we had to train a new Chinese grammar using only articles 400-1151 (omitting articles 1-270).</S>
    <S sid="110" ssid="11">This modified grammar was used to generate the k-best lists that we trained our model on.</S>
    <S sid="111" ssid="12">However, as we tested on the same set of articles used for monolingual Chinese parser evaluation, there was no need to use a modified grammar to generate k-best lists at test time, and so we used a regularly trained Chinese parser for this purpose.</S>
    <S sid="112" ssid="13">We also note that since all parsing evaluations were performed on Chinese treebank data, the Chinese test sentences were in-domain, whereas the English sentences were very far out-of-domain for the Penn Treebank-trained baseline English parser.</S>
    <S sid="113" ssid="14">Hence, in these evaluations, Chinese scores tend to be higher than English ones.</S>
    <S sid="114" ssid="15">Posterior word alignment probabilities were obtained from the word aligner of Liang et al. (2006) and DeNero and Klein (2007)6, trained on approximately 1.7 million sentence pairs.</S>
    <S sid="115" ssid="16">For our alignment model we used an HMM in each direction, trained to agree (Liang et al., 2006), and we combined the posteriors using DeNero and Klein&#8217;s (2007) soft union method.</S>
    <S sid="116" ssid="17">Unless otherwise specified, the maximum value of k was set to 100 for both training and testing, and all experiments used a value of 25 as the c parameter for training set pruning and a cutoff rank of 500 for test set pruning.</S>
    <S sid="117" ssid="18">To verify that all our features were contributing to the model&#8217;s performance, we did an ablation study, removing one group of features at a time.</S>
    <S sid="118" ssid="19">Table 2 shows the F1 scores on the bilingual development data resulting from training with each group of features removed.7 Note that though head word features seemed to be detrimental in our rapid training setup, earlier testing had shown a positive effect, so we reran the comparison using our full training setup, where we again saw an improvement when including these features.</S>
    <S sid="119" ssid="20">To find a good value of the c parameter for training set pruning we tried several different values, using our rapid training setup and testing on the dev set.</S>
    <S sid="120" ssid="21">The results are shown in Table 3.</S>
    <S sid="121" ssid="22">We selected 25 as it showed the best performance/speed tradeoff, on average performing as well as if we had done no pruning at all, while requiring only a quarter the memory and CPU time.</S>
    <S sid="122" ssid="23">We also tried several different values of the rank cutoff for test set pruning, using the full training setup and testing on the dev set.</S>
    <S sid="123" ssid="24">The results are in Table 4.</S>
    <S sid="124" ssid="25">For F1 evaluation, which is on a very small set of sentences, we selected 500 as the value with the best speed/performance tradeoff.</S>
    <S sid="125" ssid="26">However, when reranking our entire MT corpus, we used a value of 200, sacrificing a tiny bit of performance for an extra factor of 2 in speed.8 Since our bitext parser currently operates as a reranker, the quality of the trees is limited by the quality of the k-best lists produced by the baseline parsers.</S>
    <S sid="126" ssid="27">To test this limitation, we evaluated performance on the dev set using baseline k-best lists of varying length.</S>
    <S sid="127" ssid="28">Training parameters were fixed (full training setup with k = 100) and test set pruning was disabled for these experiments.</S>
    <S sid="128" ssid="29">The results are in Table 5.</S>
    <S sid="129" ssid="30">The relatively modest gains with increasing k, even as the oracle scores continue to improve, indicate that performance is limited more by the model&#8217;s reliance on the baseline parsers than by search errors that result from the reranking approach.</S>
    <S sid="130" ssid="31">Our final evaluation was done using the full training setup.</S>
    <S sid="131" ssid="32">Here, we report F1 scores on two sets of data.</S>
    <S sid="132" ssid="33">First, as before, we only include the sentence pairs from our bilingual corpus to fully demonstrate the gains made by joint parsing.</S>
    <S sid="133" ssid="34">We also report scores on the full test set to allow easier comparison with past work on Chinese parsing.</S>
    <S sid="134" ssid="35">For the latter evaluation, sentences that were not in the bilingual corpus were simply parsed with the baseline parsers.</S>
    <S sid="135" ssid="36">The results are in Table 6.</S>
    <S sid="136" ssid="37">Joint parsing improves F1 by 2.5 points on out-of-domain English sentences and by 1.8 points on in-domain Chinese sentences; this represents the best published Chinese treebank parsing performance, even after sentences that lack a translation are taken into account.</S>
  </SECTION>
  <SECTION title="7 Machine Translation" number="7">
    <S sid="137" ssid="1">To test the impact of joint parsing on syntactic MT systems, we compared the results of training an MT system with two different sets of trees: those produced by the baseline parsers, and those produced by our joint parser.</S>
    <S sid="138" ssid="2">For this evaluation, we used a syntactic system based on Galley et al. (2004) and Galley et al.</S>
    <S sid="139" ssid="3">(2006), which extracts tree-to-string transducer rules based on target-side trees.</S>
    <S sid="140" ssid="4">We trained the system on 150,000 Chinese-English sentence pairs from the training corpus of Wang et al. (2007), and used a large (close to 5 billion tokens) 4-gram lanwith trees output from either baseline monolingual parsers or our joint parser.</S>
    <S sid="141" ssid="5">To facilitate relative comparison, the Moses (Koehn et al., 2007) number listed reflects the default Moses configuration, including its full distortion model, and standard training pipeline. guage model for decoding.</S>
    <S sid="142" ssid="6">We tuned and evaluated BLEU (Papineni et al., 2001) on separate held-out sets of sentences of up to length 40 from the same corpus.</S>
    <S sid="143" ssid="7">The results are in Table 7, showing that joint parsing yields a BLEU increase of 2.4.9</S>
  </SECTION>
  <SECTION title="8 Conclusions" number="8">
    <S sid="144" ssid="1">By jointly parsing (and aligning) sentences in a translation pair, it is possible to exploit mutual constraints that improve the quality of syntactic analyses over independent monolingual parsing.</S>
    <S sid="145" ssid="2">We presented a joint log-linear model over source trees, target trees, and node-to-node alignments between them, which is used to select an optimal tree pair from a k-best list.</S>
    <S sid="146" ssid="3">On Chinese treebank data, this procedure improves F1 by 1.8 on Chinese sentences and by 2.5 on out-of-domain English sentences.</S>
    <S sid="147" ssid="4">Furthermore, by using this joint parsing technique to preprocess the input to a syntactic MT system, we obtain a 2.4 BLEU improvement.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="9">
    <S sid="148" ssid="1">We would like to thank the anonymous reviewers for helpful comments on an earlier draft of this paper and Adam Pauls and Jing Zheng for help in running our MT experiments.</S>
  </SECTION>
</PAPER>
