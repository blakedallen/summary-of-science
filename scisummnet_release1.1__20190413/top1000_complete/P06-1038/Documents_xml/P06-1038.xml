<PAPER>
  <S sid="0">Efficient Unsupervised Discovery Of Word Categories Using Symmetric Patterns And High Frequency Words</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We present a novel approach for discovering word categories, sets of words sharing a significant aspect of their meaning.</S>
    <S sid="2" ssid="2">We utilize meta-patterns of highfrequency words and content words in order to discover pattern candidates.</S>
    <S sid="3" ssid="3">Symmetric patterns are then identified using graph-based measures, and word categories are created based on graph clique sets.</S>
    <S sid="4" ssid="4">Our method is the first pattern-based method that requires no corpus annotation or manually provided seed patterns or words.</S>
    <S sid="5" ssid="5">We evaluate our algorithm on very large corpora in two languages, using both human judgments and WordNetbased evaluation.</S>
    <S sid="6" ssid="6">Our fully unsupervised results are superior to previous work that used a POS tagged corpus, and computation time for huge corpora are orders of magnitude faster than previously reported.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="7" ssid="1">Lexical resources are crucial in most NLP tasks and are extensively used by people.</S>
    <S sid="8" ssid="2">Manual compilation of lexical resources is labor intensive, error prone, and susceptible to arbitrary human decisions.</S>
    <S sid="9" ssid="3">Hence there is a need for automatic authoring that would be as unsupervised and languageindependent as possible.</S>
    <S sid="10" ssid="4">An important type of lexical resource is that given by grouping words into categories.</S>
    <S sid="11" ssid="5">In general, the notion of a category is a fundamental one in cognitive psychology (Matlin, 2005).</S>
    <S sid="12" ssid="6">A lexical category is a set of words that share a significant aspect of their meaning, e.g., sets of words denoting vehicles, types of food, tool names, etc.</S>
    <S sid="13" ssid="7">A word can obviously belong to more than a single category.</S>
    <S sid="14" ssid="8">We will use &#8216;category&#8217; instead of &#8216;lexical category&#8217; for brevity'.</S>
    <S sid="15" ssid="9">Grouping of words into categories is useful in itself (e.g., for the construction of thesauri), and can serve as the starting point in many applications, such as ontology construction and enhancement, discovery of verb subcategorization frames, etc.</S>
    <S sid="16" ssid="10">Our goal in this paper is a fully unsupervised discovery of categories from large unannotated text corpora.</S>
    <S sid="17" ssid="11">We aim for categories containing single words (multi-word lexical items will be dealt with in future papers.)</S>
    <S sid="18" ssid="12">Our approach is based on patterns, and utilizes the following stages: We performed a thorough evaluation on two English corpora (the BNC and a 68GB web corpus) and on a 33GB Russian corpus, and a sanity-check test on smaller Danish, Irish and Portuguese corpora.</S>
    <S sid="19" ssid="13">Evaluations were done using both human judgments and WordNet in a setting quite similar to that done (for the BNC) in previous work.</S>
    <S sid="20" ssid="14">Our unsupervised results are superior to previous work that used a POS tagged corpus, are less language dependent, and are very efficient computationally2.</S>
    <S sid="21" ssid="15">Patterns are a common approach in lexical acquisition.</S>
    <S sid="22" ssid="16">Our approach is novel in several aspects: (1) we discover patterns in a fully unsupervised manner, as opposed to using a manually prepared pattern set, pattern seed or words seeds; (2) our pattern discovery requires no annotation of the input corpus, as opposed to requiring POS tagging or partial or full parsing; (3) we discover general symmetric patterns, as opposed to using a few hard-coded ones such as &#8216;x and y&#8217;; (4) the cliqueset graph algorithm in stage 3 is novel.</S>
    <S sid="23" ssid="17">In addition, we demonstrated the relatively language independent nature of our approach by evaluating on very large corpora in two languages3.</S>
    <S sid="24" ssid="18">Section 2 surveys previous work.</S>
    <S sid="25" ssid="19">Section 3 describes pattern discovery, and Section 4 describes the formation of categories.</S>
    <S sid="26" ssid="20">Evaluation is presented in Section 5, and a discussion in Section 6.</S>
  </SECTION>
  <SECTION title="2 Previous Work" number="2">
    <S sid="27" ssid="1">Much work has been done on lexical acquisition of all sorts.</S>
    <S sid="28" ssid="2">The three main distinguishing axes are (1) the type of corpus annotation and other human input used; (2) the type of lexical relationship targeted; and (3) the basic algorithmic approach.</S>
    <S sid="29" ssid="3">The two main approaches are pattern-based discovery and clustering of context feature vectors.</S>
    <S sid="30" ssid="4">Many of the papers cited below aim at the construction of hyponym (is-a) hierarchies.</S>
    <S sid="31" ssid="5">Note that they can also be viewed as algorithms for category discovery, because a subtree in such a hierarchy defines a lexical category.</S>
    <S sid="32" ssid="6">A first major algorithmic approach is to represent word contexts as vectors in some space and use similarity measures and automatic clustering in that space (Curran and Moens, 2002).</S>
    <S sid="33" ssid="7">Pereira (1993) and Lin (1998) use syntactic features in the vector definition.</S>
    <S sid="34" ssid="8">(Pantel and Lin, 2002) improves on the latter by clustering by committee.</S>
    <S sid="35" ssid="9">Caraballo (1999) uses conjunction and appositive annotations in the vector representation.</S>
    <S sid="36" ssid="10">The only previous works addressing our problem and not requiring any syntactic annotation are those that decompose a lexically-defined matrix (by SVD, PCA etc), e.g.</S>
    <S sid="37" ssid="11">(Sch&#168;utze, 1998; Deerwester et al, 1990).</S>
    <S sid="38" ssid="12">Such matrix decomposition is computationally heavy and has not been proven to scale well when the number of words assigned to categories grows.</S>
    <S sid="39" ssid="13">Agglomerative clustering (e.g., (Brown et al, 1992; Li, 1996)) can produce hierarchical word categories from an unannotated corpus.</S>
    <S sid="40" ssid="14">However, we are not aware of work in this direction that has been evaluated with good results on lexical category acquisition.</S>
    <S sid="41" ssid="15">The technique is also quite demanding computationally.</S>
    <S sid="42" ssid="16">The second main algorithmic approach is to use lexico-syntactic patterns.</S>
    <S sid="43" ssid="17">Patterns have been shown to produce more accurate results than feature vectors, at a lower computational cost on large corpora (Pantel et al, 2004).</S>
    <S sid="44" ssid="18">Hearst (1992) uses a manually prepared set of initial lexical patterns in order to discover hierarchical categories, and utilizes those categories in order to automatically discover additional patterns.</S>
    <S sid="45" ssid="19">(Berland and Charniak, 1999) use hand crafted patterns to discover part-of (meronymy) relationships, and (Chklovski and Pantel, 2004) discover various interesting relations between verbs.</S>
    <S sid="46" ssid="20">Both use information obtained by parsing.</S>
    <S sid="47" ssid="21">(Pantel et al, 2004) reduce the depth of the linguistic data used but still requires POS tagging.</S>
    <S sid="48" ssid="22">Many papers directly target specific applications, and build lexical resources as a side effect.</S>
    <S sid="49" ssid="23">Named Entity Recognition can be viewed as an instance of our problem where the desired categories contain words that are names of entities of a particular kind, as done in (Freitag, 2004) using coclustering.</S>
    <S sid="50" ssid="24">Many Information Extraction papers discover relationships between words using syntactic patterns (Riloff and Jones, 1999).</S>
    <S sid="51" ssid="25">(Widdows and Dorow, 2002; Dorow et al, 2005) discover categories using two hard-coded symmetric patterns, and are thus the closest to us.</S>
    <S sid="52" ssid="26">They also introduce an elegant graph representation that we adopted.</S>
    <S sid="53" ssid="27">They report good results.</S>
    <S sid="54" ssid="28">However, they require POS tagging of the corpus, use only two hard-coded patterns (&#8216;x and y&#8217;, &#8216;x or y&#8217;), deal only with nouns, and require non-trivial computations on the graph.</S>
    <S sid="55" ssid="29">A third, less common, approach uses settheoretic inference, for example (Cimiano et al, 2005).</S>
    <S sid="56" ssid="30">Again, that paper uses syntactic information.</S>
    <S sid="57" ssid="31">In summary, no previous work has combined the accuracy, scalability and performance advantages of patterns with the fully unsupervised, unannotated nature possible with clustering approaches.</S>
    <S sid="58" ssid="32">This severely limits the applicability of previous work on the huge corpora available at present.</S>
  </SECTION>
  <SECTION title="3 Discovery of Patterns" number="3">
    <S sid="59" ssid="1">Our first step is the discovery of patterns that are useful for lexical category acquisition.</S>
    <S sid="60" ssid="2">We use two main stages: discovery of pattern candidates, and identification of the symmetric patterns among the candidates.</S>
    <S sid="61" ssid="3">An examination of the patterns found useful in previous work shows that they contain one or more very frequent word, such as &#8216;and&#8217;, &#8216;is&#8217;, etc.</S>
    <S sid="62" ssid="4">Our approach towards unsupervised pattern induction is to find such words and utilize them.</S>
    <S sid="63" ssid="5">We define a high frequency word (HFW) as a word appearing more than TH times per million words, and a content word (CW) as a word appearing less than TC times per a million words4.</S>
    <S sid="64" ssid="6">Now define a meta-pattern as any sequence of HFWs and CWs.</S>
    <S sid="65" ssid="7">In this paper we require that meta-patterns obey the following constraints: (1) at most 4 words; (2) exactly two content words; (3) no two consecutive CWs.</S>
    <S sid="66" ssid="8">The rationale is to see what can be achieved using relatively short patterns and where the discovered categories contain single words only.</S>
    <S sid="67" ssid="9">We will relax these constraints in future papers.</S>
    <S sid="68" ssid="10">Our meta-patterns here are thus of four types: CHC, CHCH, CHHC, and HCHC.</S>
    <S sid="69" ssid="11">In order to focus on patterns that are more likely to provide high quality categories, we removed patterns that appear in the corpus less than TP times per million words.</S>
    <S sid="70" ssid="12">Since we can ensure that the number of HFWs is bounded, the total number of pattern candidates is bounded as well.</S>
    <S sid="71" ssid="13">Hence, this stage can be computed in time linear in the size of the corpus (assuming the corpus has been already pre-processed to allow direct access to a word by its index.)</S>
    <S sid="72" ssid="14">Many of the pattern candidates discovered in the previous stage are not usable.</S>
    <S sid="73" ssid="15">In order to find a usable subset, we focus on the symmetric patterns.</S>
    <S sid="74" ssid="16">Our rationale is that two content-bearing words that appear in a symmetric pattern are likely to be semantically similar in some sense.</S>
    <S sid="75" ssid="17">This simple observation turns out to be very powerful, as shown by our results.</S>
    <S sid="76" ssid="18">We will eventually combine data from several patterns and from different corpus windows (Section 4.)</S>
    <S sid="77" ssid="19">For identifying symmetric patterns, we use a version of the graph representation of (Widdows and Dorow, 2002).</S>
    <S sid="78" ssid="20">We first define the singlepattern graph G(P) as follows.</S>
    <S sid="79" ssid="21">Nodes correspond to content words, and there is a directed arc A(x, y) from node x to node y iff (1) the words x and y both appear in an instance of the pattern P as its two CWs; and (2) x precedes y in P. Denote by Nodes(G), Arcs(G) the nodes and arcs in a graph G, respectively.</S>
    <S sid="80" ssid="22">We now compute three measures on G(P) and combine them for all pattern candidates to filter asymmetric ones.</S>
    <S sid="81" ssid="23">The first measure (M1) counts the proportion of words that can appear in both slots of the pattern, out of the total number of words.</S>
    <S sid="82" ssid="24">The reasoning here is that if a pattern allows a large percentage of words to participate in both slots, its chances of being a symmetric pattern are greater: M1 filters well patterns that connect words having different parts of speech.</S>
    <S sid="83" ssid="25">However, it may fail to filter patterns that contain multiple levels of asymmetric relationships.</S>
    <S sid="84" ssid="26">For example, in the pattern &#8216;x belongs to y&#8217;, we may find a word B on both sides (&#8216;A belongs to B&#8217;, &#8216;B belongs to C&#8217;) while the pattern is still asymmetric.</S>
    <S sid="85" ssid="27">In order to detect symmetric relationships in a finer manner, for the second and third measures we define 5ymG(P), the symmetric subgraph of G(P), containing only the bidirectional arcs and nodes of G(P): The second and third measures count the proportion of the number of symmetric nodes and edges in G(P), respectively: All three measures yield values in [0, 1], and in all three a higher value indicates more symmetry.</S>
    <S sid="86" ssid="28">M2 and M3 are obviously correlated, but they capture different aspects of a pattern&#8217;s nature: M3 is informative for highly interconnected but small word categories (e.g., month names), while M2 is useful for larger categories that are more loosely connected in the corpus.</S>
    <S sid="87" ssid="29">We use the three measures as follows.</S>
    <S sid="88" ssid="30">For each measure, we prepare a sorted list of all candidate patterns.</S>
    <S sid="89" ssid="31">We remove patterns that are not in the top ZT (we use 100, see Section 5) in any of the three lists, and patterns that are in the bottom ZB in at least one of the lists.</S>
    <S sid="90" ssid="32">The remaining patterns constitute our final list of symmetric patterns.</S>
    <S sid="91" ssid="33">We do not rank the final list, since the category discovery algorithm of the next section does not need such a ranking.</S>
    <S sid="92" ssid="34">Defining and utilizing such a ranking is a subject for future work.</S>
    <S sid="93" ssid="35">A sparse matrix representation of each graph can be computed in time linear in the size of the input corpus, since (1) the number of patterns |P |is bounded, (2) vocabulary size |V  |(the total number of graph nodes) is much smaller than corpus size, and (3) the average node degree is much smaller than |V  |(in practice, with the thresholds used, it is a small constant.)</S>
  </SECTION>
  <SECTION title="4 Discovery of Categories" number="4">
    <S sid="94" ssid="1">After the end of the previous stage we have a set of symmetric patterns.</S>
    <S sid="95" ssid="2">We now use them in order to discover categories.</S>
    <S sid="96" ssid="3">In this section we describe the graph clique-set method for generating initial categories, and category pruning techniques for increased quality.</S>
    <S sid="97" ssid="4">Our approach to category discovery is based on connectivity structures in the all-pattern word relationship graph G, resulting from merging all of the single-pattern graphs into a single unified graph.</S>
    <S sid="98" ssid="5">The graph G can be built in time O(|V  |x |P |x AverageDegree(G(P))) = O(|V |) (we use V rather than Nodes(G) for brevity.)</S>
    <S sid="99" ssid="6">When building G, no special treatment is done when one pattern is contained within another.</S>
    <S sid="100" ssid="7">For example, any pattern of the form CHC is contained in a pattern of the form HCHC (&#8216;x and y&#8217;, &#8216;both x and y&#8217;.)</S>
    <S sid="101" ssid="8">The shared part yields exactly the same subgraph.</S>
    <S sid="102" ssid="9">This policy could be changed for a discovery of finer relationships.</S>
    <S sid="103" ssid="10">The main observation on G is that words that are highly interconnected are good candidates to form a category.</S>
    <S sid="104" ssid="11">This is the same general observation exploited by (Widdows and Dorow, 2002), who try to find graph regions that are more connected internally than externally.</S>
    <S sid="105" ssid="12">We use a different algorithm.</S>
    <S sid="106" ssid="13">We find all strong n-cliques (subgraphs containing n nodes that are all bidirectionally interconnected.)</S>
    <S sid="107" ssid="14">A clique Q defines a category that contains the nodes in Q plus all of the nodes that are (1) at least unidirectionally connected to all nodes in Q, and (2) bidirectionally connected to at least one node in Q.</S>
    <S sid="108" ssid="15">In practice we use 2-cliques.</S>
    <S sid="109" ssid="16">The strongly connected cliques are the bidirectional arcs in G and their nodes.</S>
    <S sid="110" ssid="17">For each such arc A, a category is generated that contains the nodes of all triangles that contain A and at least one additional bidirectional arc.</S>
    <S sid="111" ssid="18">For example, suppose the corpus contains the text fragments &#8216;book and newspaper&#8217;, &#8216;newspaper and book&#8217;, &#8216;book and note&#8217;, &#8216;note and book&#8217; and &#8216;note and newspaper&#8217;.</S>
    <S sid="112" ssid="19">In this case the three words are assigned to a category.</S>
    <S sid="113" ssid="20">Note that a pair of nodes connected by a symmetric arc can appear in more than a single category.</S>
    <S sid="114" ssid="21">For example, suppose a graph G containing five nodes and seven arcs that define exactly three strongly connected triangles, ABC, ABD, ACE.</S>
    <S sid="115" ssid="22">The arc (A, B) yields a category {A, B, C, D}, and the arc (A, C) yields a category {A, C, B, E}.</S>
    <S sid="116" ssid="23">Nodes A and C appear in both categories.</S>
    <S sid="117" ssid="24">Category merging is described below.</S>
    <S sid="118" ssid="25">This stage requires an O(1) computation for each bidirectional arc of each node, so its complexity is O(|V  |x AverageDegree(G)) O(|V |).</S>
    <S sid="119" ssid="26">In order to cover as many words as possible, we use the smallest clique, a single symmetric arc.</S>
    <S sid="120" ssid="27">This creates redundant categories.</S>
    <S sid="121" ssid="28">We enhance the quality of the categories by merging them and by windowing on the corpus.</S>
    <S sid="122" ssid="29">We use two simple merge heuristics.</S>
    <S sid="123" ssid="30">First, if two categories are identical we treat them as one.</S>
    <S sid="124" ssid="31">Second, given two categories Q, R, we merge them iff there&#8217;s more than a 50% overlap between them: (|Q n R |&gt; |Q|/2) n (|Q n R |&gt; |R|/2).</S>
    <S sid="125" ssid="32">= This could be added to the clique-set stage, but the phrasing above is simpler to explain and implement.</S>
    <S sid="126" ssid="33">In order to increase category quality and remove categories that are too context-specific, we use a simple corpus windowing technique.</S>
    <S sid="127" ssid="34">Instead of running the algorithm of this section on the whole corpus, we divide the corpus into windows of equal size (see Section 5 for size determination) and perform the category discovery algorithm of this section on each window independently.</S>
    <S sid="128" ssid="35">Merging is also performed in each window separately.</S>
    <S sid="129" ssid="36">We now have a set of categories for each window.</S>
    <S sid="130" ssid="37">For the final set, we select only those categories that appear in at least two of the windows.</S>
    <S sid="131" ssid="38">This technique reduces noise at the potential cost of lowering coverage.</S>
    <S sid="132" ssid="39">However, the numbers of categories discovered and words they contain is still very large (see Section 5), so windowing achieves higher precision without hurting coverage in practice.</S>
    <S sid="133" ssid="40">The complexity of the merge stage is O(|V |) times the average number of categories per word times the average number of words per category.</S>
    <S sid="134" ssid="41">The latter two are small in practice, so complexity amounts to O(|V |).</S>
  </SECTION>
  <SECTION title="5 Evaluation" number="5">
    <S sid="135" ssid="1">Lexical acquisition algorithms are notoriously hard to evaluate.</S>
    <S sid="136" ssid="2">We have attempted to be as thorough as possible, using several languages and both automatic and human evaluation.</S>
    <S sid="137" ssid="3">In the automatic part, we followed as closely as possible the methodology and data used in previous work, so that meaningful comparisons could be made.</S>
    <S sid="138" ssid="4">We performed in-depth evaluation on two languages, English and Russian, using three corpora, two for English and one for Russian.</S>
    <S sid="139" ssid="5">The first English corpus is the BNC, containing about 100M words.</S>
    <S sid="140" ssid="6">The second English corpus, Dmoz (Gabrilovich and Markovitch, 2005), is a web corpus obtained by crawling and cleaning the URLs in the Open Directory Project (dmoz.org), resulting in 68GB containing about 8.2G words from 50M web pages.</S>
    <S sid="141" ssid="7">The Russian corpus was assembled from many web sites and carefully filtered for duplicates, to yield 33GB and 4G words.</S>
    <S sid="142" ssid="8">It is a varied corpus comprising literature, technical texts, news, newsgroups, etc.</S>
    <S sid="143" ssid="9">As a preliminary sanity-check test we also applied our method to smaller corpora in Danish, Irish and Portuguese, and noted some substantial similarities in the discovered patterns.</S>
    <S sid="144" ssid="10">For example, in all 5 languages the pattern corresponding to &#8216;x and y&#8217; was among the 50 selected.</S>
    <S sid="145" ssid="11">The thresholds TH, TC, TP, ZT, ZB, were determined by memory size considerations: we computed thresholds that would give us the maximal number of words, while enabling the pattern access table to reside in main memory.</S>
    <S sid="146" ssid="12">The resulting numbers are 100, 50,20, 100, 100.</S>
    <S sid="147" ssid="13">Corpus window size was determined by starting from a very small window size, defining at random a single window of that size, running the algorithm, and iterating this process with increased window sizes until reaching a desired vocabulary category participation percentage (i.e., x% of the different words in the corpus assigned into categories.</S>
    <S sid="148" ssid="14">We used 5%.)</S>
    <S sid="149" ssid="15">This process has only a negligible effect on running times, because each iteration is run only on a single window, not on the whole corpus.</S>
    <S sid="150" ssid="16">The table below gives some statistics.</S>
    <S sid="151" ssid="17">V is the total number of different words in the corpus.</S>
    <S sid="152" ssid="18">W is the number of words belonging to at least one of our categories.</S>
    <S sid="153" ssid="19">C is the number of categories (after merging and windowing.)</S>
    <S sid="154" ssid="20">A5 is the average category size.</S>
    <S sid="155" ssid="21">Running times are in minutes on a 2.53Ghz Pentium 4 XP machine with 1GB memory.</S>
    <S sid="156" ssid="22">Note how small they are, when compared to (Pantel et al, 2004), which took 4 days for a smaller corpus using the same CPU.</S>
    <S sid="157" ssid="23">Among the patterns discovered are the ubiquitous &#8216;x and y&#8217;, &#8216;x or y&#8217; and many patterns containing them.</S>
    <S sid="158" ssid="24">Additional patterns include &#8216;from x to y&#8217;, &#8216;x and/or y&#8217; (punctuation is treated here as white space), &#8216;x and a y&#8217;, and &#8216;neither x nor y&#8217;.</S>
    <S sid="159" ssid="25">We discover categories of different parts of speech.</S>
    <S sid="160" ssid="26">Among the noun ones, there are many whose precision is 100%: 37 countries, 18 languages, 51 chemical elements, 62 animals, 28 types of meat, 19 fruits, 32 university names, etc.</S>
    <S sid="161" ssid="27">A nice verb category example is {dive, snorkel, swim, float, surf, sail, canoe, kayak, paddle, tube, drift}.</S>
    <S sid="162" ssid="28">A nice adjective example is {amazing, The purpose of the human evaluation was dual: to assess the quality of the discovered categories in terms of precision, and to compare with those obtained by a baseline clustering algorithm.</S>
    <S sid="163" ssid="29">For the baseline, we implemented k-means as follows.</S>
    <S sid="164" ssid="30">We have removed stopwords from the corpus, and then used as features the words which appear before or after the target word.</S>
    <S sid="165" ssid="31">In the calculation of feature values and inter-vector distances, and in the removal of less informative features, we have strictly followed (Pantel and Lin, 2002).</S>
    <S sid="166" ssid="32">We ran the algorithm 10 times using k = 500 with randomly selected centroids, producing 5000 clusters.</S>
    <S sid="167" ssid="33">We then merged the resulting clusters using the same 50% overlap criterion as in our algorithm.</S>
    <S sid="168" ssid="34">The result included 3090, 2116, and 3206 clusters for Dmoz, BNC and Russian respectively.</S>
    <S sid="169" ssid="35">We used 8 subjects for evaluation of the English categories and 15 subjects for evaluation of the Russian ones.</S>
    <S sid="170" ssid="36">In order to assess the subjects&#8217; reliability, we also included random categories (see below.)</S>
    <S sid="171" ssid="37">The experiment contained two parts.</S>
    <S sid="172" ssid="38">In Part I, subjects were given 40 triplets of words and were asked to rank them using the following scale: (1) the words definitely share a significant part of their meaning; (2) the words have a shared meaning but only in some context; (3) the words have a shared meaning only under a very unusual context/situation; (4) the words do not share any meaning; (5) I am not familiar enough with some/all of the words.</S>
    <S sid="173" ssid="39">The 40 triplets were obtained as follows.</S>
    <S sid="174" ssid="40">20 of our categories were selected at random from the non-overlapping categories we have discovered, and three words were selected from each of these at random.</S>
    <S sid="175" ssid="41">10 triplets were selected in the same manner from the categories produced by k-means, and 10 triplets were generated by random selection of content words from the same window in the corpus.</S>
    <S sid="176" ssid="42">In Part II, subjects were given the full categories of the triplets that were graded as 1 or 2 in Part I (that is, the full &#8216;good&#8217; categories in terms of sharing of meaning.)</S>
    <S sid="177" ssid="43">They were asked to grade the categories from 1 (worst) to 10 (best) according to how much the full category had met the expectations they had when seeing only the triplet.</S>
    <S sid="178" ssid="44">Results are given in Table 1.</S>
    <S sid="179" ssid="45">The first line gives the average percentage of triplets that were given scores of 1 or 2 (that is, &#8216;significant shared meaning&#8217;.)</S>
    <S sid="180" ssid="46">The 2nd line gives the average score of a triplet (1 is best.)</S>
    <S sid="181" ssid="47">In these lines scores of 5 were not counted.</S>
    <S sid="182" ssid="48">The 3rd line gives the average score given to a full category (10 is best.)</S>
    <S sid="183" ssid="49">Interevaluator Kappa between scores 1,2 and 3,4 was 0.56, 0.67 and 0.72 for Dmoz, BNC and Russian respectively.</S>
    <S sid="184" ssid="50">Our algorithm clearly outperforms k-means, which outperforms random.</S>
    <S sid="185" ssid="51">We believe that the Russian results are better because the percentage of native speakers among our subjects for Russian was larger than that for English.</S>
    <S sid="186" ssid="52">The major guideline in this part of the evaluation was to compare our results with previous work having a similar goal (Widdows and Dorow, 2002).</S>
    <S sid="187" ssid="53">We have followed their methodology as best as we could, using the same WordNet (WN) categories and the same corpus (BNC) in addition to the Dmoz and Russian corporal.</S>
    <S sid="188" ssid="54">The evaluation method is as follows.</S>
    <S sid="189" ssid="55">We took the exact 10 WN subsets referred to as &#8216;subjects&#8217; in (Widdows and Dorow, 2002), and removed all multi-word items.</S>
    <S sid="190" ssid="56">We now selected at random 10 pairs of words from each subject.</S>
    <S sid="191" ssid="57">For each pair, we found the largest of our discovered categories containing it (if there isn&#8217;t one, we pick another pair.</S>
    <S sid="192" ssid="58">This is valid because our Recall is obviously not even close to 100%, so if we did not pick another pair we would seriously harm the validity of the evaluation.)</S>
    <S sid="193" ssid="59">The various morphological forms of the same word were treated as one during the evaluation.</S>
    <S sid="194" ssid="60">The only difference from the (Widdows and Dorow, 2002) experiment is the usage of pairs rather than single words.</S>
    <S sid="195" ssid="61">We did this in order to disambiguate our categories.</S>
    <S sid="196" ssid="62">This was not needed in (Widdows and Dorow, 2002) because they had directly accessed the word graph, which may be an advantage in some applications.</S>
    <S sid="197" ssid="63">The Russian evaluation posed a bit of a problem because the Russian WordNet is not readily available and its coverage is rather small.</S>
    <S sid="198" ssid="64">Fortunately, the subject list is such that WordNet words could be translated unambiguously to Russian and words in our discovered categories could be translated unambiguously into English.</S>
    <S sid="199" ssid="65">This was the methodology taken.</S>
    <S sid="200" ssid="66">For each found category C containing N words, we computed the following (see Table 2): (1) Precision: the number of words present in both C and WN divided by N; (2) Precision*: the number of correct words divided by N. Correct words are either words that appear in the WN subtree, or words whose entry in the American Heritage Dictionary or the Britannica directly defines them as belonging to the given class (e.g., &#8216;keyboard&#8217; is defined as &#8216;a piano&#8217;; &#8216;mitt&#8217; is defined by &#8216;a type of glove&#8217;.)</S>
    <S sid="201" ssid="67">This was done in order to overcome the relative poorness of WordNet; (3) Recall: the number of words present in both C and WN divided by the number of (single) words in WN; (4) The number of correctly discovered words (New) that are not in WN.</S>
    <S sid="202" ssid="68">The Table also shows the number of WN words (:WN), in order to get a feeling by how much WN could be improved here.</S>
    <S sid="203" ssid="69">For each subject, we show the average over the 10 randomly selected pairs.</S>
    <S sid="204" ssid="70">Table 2 also shows the average of each measure over the subjects, and the two precision measures when computed on the total set of WN words.</S>
    <S sid="205" ssid="71">The (uncorrected) precision is the only metric given in (Widdows and Dorow, 2002), who reported 82% (for the BNC.)</S>
    <S sid="206" ssid="72">Our method gives 90.47% for this metric on the same corpus.</S>
    <S sid="207" ssid="73">Our human-evaluated and WordNet-based results are better than the baseline and previous work respectively.</S>
    <S sid="208" ssid="74">Both are also of good standalone quality.</S>
    <S sid="209" ssid="75">Clearly, evaluation methodology for lexical acquisition tasks should be improved, which is an interesting research direction in itself.</S>
    <S sid="210" ssid="76">Examining our categories at random, we found a nice example that shows how difficult it is to evaluate the task and how useful automatic category discovery can be, as opposed to manual definition.</S>
    <S sid="211" ssid="77">Consider the following category, discovered in the Dmoz corpus: {nightcrawlers, chicken, shrimp, liver, leeches}.</S>
    <S sid="212" ssid="78">We did not know why these words were grouped together; if asked in an evaluation, we would give the category a very low score.</S>
    <S sid="213" ssid="79">However, after some web search, we found that this is a &#8216;fish bait&#8217; category, especially suitable for catfish.</S>
  </SECTION>
  <SECTION title="6 Discussion" number="6">
    <S sid="214" ssid="1">We have presented a novel method for patternbased discovery of lexical semantic categories.</S>
    <S sid="215" ssid="2">It is the first pattern-based lexical acquisition method that is fully unsupervised, requiring no corpus annotation or manually provided patterns or words.</S>
    <S sid="216" ssid="3">Pattern candidates are discovered using meta-patterns of high frequency and content words, and symmetric patterns are discovered using simple graph-theoretic measures.</S>
    <S sid="217" ssid="4">Categories are generated using a novel graph clique-set algorithm.</S>
    <S sid="218" ssid="5">The only other fully unsupervised lexical category acquisition approach is based on decomposition of a matrix defined by context feature vectors, and it has not been shown to scale well yet.</S>
    <S sid="219" ssid="6">Our algorithm was evaluated using both human judgment and automatic comparisons with WordNet, and results were superior to previous work (although it used a POS tagged corpus) and more efficient computationally.</S>
    <S sid="220" ssid="7">Our algorithm is also easy to implement.</S>
    <S sid="221" ssid="8">Computational efficiency and specifically lack of annotation are important criteria, because they allow usage of huge corpora, which are presently becoming available and growing in size.</S>
    <S sid="222" ssid="9">There are many directions to pursue in the future: (1) support multi-word lexical items; (2) increase category quality by improved merge algorithms; (3) discover various relationships (e.g., hyponymy) between the discovered categories; (4) discover finer inter-word relationships, such as verb selection preferences; (5) study various properties of discovered patterns in a detailed manner; and (6) adapt the algorithm to morphologically rich languages. words&#8217; precision of 90.47%.</S>
    <S sid="223" ssid="10">This metric was reported to be 82% in (Widdows and Dorow, 2002).</S>
    <S sid="224" ssid="11">It should be noted that our algorithm can be viewed as one for automatic discovery of word senses, because it allows a word to participate in more than a single category.</S>
    <S sid="225" ssid="12">When merged properly, the different categories containing a word can be viewed as the set of its senses.</S>
    <S sid="226" ssid="13">We are planning an evaluation according to this measure after improving the merge stage.</S>
  </SECTION>
</PAPER>
