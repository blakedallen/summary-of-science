<PAPER>
  <S sid="0">Cascaded Grammatical Relation Assignment</S>
  <ABSTRACT>
    <S sid="1" ssid="1">In this paper we discuss cascaded Memory- Based grammatical relations assignment.</S>
    <S sid="2" ssid="2">In the first stages of the cascade, we find chunks of several types (NP,VP,ADJP,ADVP,PP) and label them with their adverbial function (e.g. local, temporal).</S>
    <S sid="3" ssid="3">In the last stage, we assign grammatical relations to pairs of chunks.</S>
    <S sid="4" ssid="4">We studied the effect of adding several levels to this cascaded classifier and we found that even the less performing chunkers enhanced the performance of the relation finder.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">When dealing with large amounts of text, finding structure in sentences is often a useful preprocessing step.</S>
    <S sid="6" ssid="2">Traditionally, full parsing is used to find structure in sentences.</S>
    <S sid="7" ssid="3">However, full parsing is a complex task and often provides us with more information then we need.</S>
    <S sid="8" ssid="4">For many tasks detecting only shallow structures in a sentence in a fast and reliable way is to be preferred over full parsing.</S>
    <S sid="9" ssid="5">For example, in information retrieval it can be enough to find only simple NPs and VPs in a sentence, for information extraction we might also want to find relations between constituents as for example the subject and object of a verb.</S>
    <S sid="10" ssid="6">In this paper we discuss some Memory-Based (MB) shallow parsing techniques to find labeled chunks and grammatical relations in a sentence.</S>
    <S sid="11" ssid="7">Several MB modules have been developed in previous work, such as: a POS tagger (Daelemans et al., 1996), a chunker (Veenstra, 1998; Tjong Kim Sang and Veenstra, 1999) and a grammatical relation (GR) assigner (Buchholz, 1998).</S>
    <S sid="12" ssid="8">The questions we will answer in this paper are: Can we reuse these modules in a cascade of classifiers?</S>
    <S sid="13" ssid="9">What is the effect of cascading?</S>
    <S sid="14" ssid="10">Will errors at a lower level percolate to higher modules?</S>
    <S sid="15" ssid="11">Recently, many people have looked at cascaded and/or shallow parsing and OR assignment.</S>
    <S sid="16" ssid="12">Abney (1991) is one of the first who proposed to split up parsing into several cascades.</S>
    <S sid="17" ssid="13">He suggests to first find the chunks and then the dependecies between these chunks.</S>
    <S sid="18" ssid="14">Crefenstette (1996) describes a cascade of finite-state transducers, which first finds noun and verb groups, then their heads, and finally syntactic functions.</S>
    <S sid="19" ssid="15">Brants and Skut (1998) describe a partially automated annotation tool which constructs a complete parse of a sentence by recursively adding levels to the tree.</S>
    <S sid="20" ssid="16">(Collins, 1997; Ratnaparkhi, 1997) use cascaded processing for full parsing with good results.</S>
    <S sid="21" ssid="17">Argamon et at.</S>
    <S sid="22" ssid="18">(1998) applied Memory-Based Sequence Learning (MBSL) to NP chunking and subject/object identification.</S>
    <S sid="23" ssid="19">However, their subject and object finders are independent of their chunker (i.e. not cascaded).</S>
    <S sid="24" ssid="20">Drawing from this previous work we will explicitly study the effect of adding steps to the grammatical relations assignment cascade.</S>
    <S sid="25" ssid="21">Through experiments with cascading several classifiers, we will show that even using imperfect classifiers can improve overall performance of the cascaded classifier.</S>
    <S sid="26" ssid="22">We illustrate this claim on the task of finding grammatical relations (e.g. subject, object, locative) to verbs in text.</S>
    <S sid="27" ssid="23">The CR assigner uses several sources of information step by step such as several types of XP chunks (NP, VP, PP, ADJP and ADVP), and adverbial functions assigned to these chunks (e.g. temporal, local).</S>
    <S sid="28" ssid="24">Since not all of these entities are predicted reliably, it is the question whether each source leads to an improvement of the overall GR assignment.</S>
    <S sid="29" ssid="25">In the rest of this paper we will first briefly describe Memory-Based Learning in Section 2.</S>
    <S sid="30" ssid="26">In Section 3.1, we discuss the chunking classifiers that we later use as steps in the cascade.</S>
    <S sid="31" ssid="27">Section 3.2 describes the basic GR classifier.</S>
    <S sid="32" ssid="28">Section 3.3 presents the architecture and results of the cascaded GR assignment experiments.</S>
    <S sid="33" ssid="29">We discuss the results in Section 4 and conclude with Section 5.</S>
  </SECTION>
  <SECTION title="2 Memory-Based Learning" number="2">
    <S sid="34" ssid="1">Memory-Based Learning (MBL) keeps all training data in memory and only abstracts at classification time by extrapolating a class from the most similar item(s) in memory.</S>
    <S sid="35" ssid="2">In recent work Daelemans et at.</S>
    <S sid="36" ssid="3">(1999b) have shown that for typical natural language processing tasks, this approach is at an advantage because it also &amp;quot;remembers&amp;quot; exceptional, low-frequency cases which are useful to extrapolate from.</S>
    <S sid="37" ssid="4">Moreover, automatic feature weighting in the similarity metric of an MB learner makes the approach well-suited for domains with large numbers of features from heterogeneous sources, as it embodies a smoothing-by-similarity method when data is sparse (Zavrel and Daelemans, 1997).</S>
    <S sid="38" ssid="5">We have used the following MBL algorithms': test item and each memory item is defined as the number of features for which they have a different value (overlap metric).</S>
    <S sid="39" ssid="6">IB1-IG : IB1 with information gain (an information-theoretic notion measuring the reduction of uncertainty about the class to be predicted when knowing the value of a feature) to weight the cost of a feature value mismatch during comparison.</S>
    <S sid="40" ssid="7">IGTree : In this variant, a decision tree is created with features as tests, and ordered according to the information gain of the features, as a heuristic approximation of the computationally more expensive IB1 variants.</S>
    <S sid="41" ssid="8">For more references and information about these algorithms we refer to (Daelemans et al., 1998; Daelemans et al., 1999b).</S>
    <S sid="42" ssid="9">For other memory-based approaches to parsing, see (Bod, 1992) and (Sekine, 1998).</S>
  </SECTION>
  <SECTION title="3 Methods and Results" number="3">
    <S sid="43" ssid="1">In this section we describe the stages of the cascade.</S>
    <S sid="44" ssid="2">The very first stage consists of a MemoryBased Part-of-Speech Tagger (MBT) for which we refer to (Daelemans et al., 1996).</S>
    <S sid="45" ssid="3">The next three stages involve determining boundaries and labels of chunks.</S>
    <S sid="46" ssid="4">Chunks are nonrecursive, non-overlapping constituent parts of sentences (see (Abney, 1991)).</S>
    <S sid="47" ssid="5">First, we simultaneously chunk sentences into: NP-, VP: Prep-, ADJP- and APVP-chunks.</S>
    <S sid="48" ssid="6">As these chunks are non-overlapping, no words can belong to more than one chunk, and thus no conflicts can arise.</S>
    <S sid="49" ssid="7">Prep-chunks are the prepositional part of PPs, thus excluding the nominal part.</S>
    <S sid="50" ssid="8">Then we join a Prep-chunk and one &#8212; or more coordinated &#8212; NP-chunks into a PPchunk.</S>
    <S sid="51" ssid="9">Finally, we assign adverbial function (ADVFUNC) labels (e.g. locative or temporal) to all chunks.</S>
    <S sid="52" ssid="10">In the last stage of the cascade, we label several types of grammatical relations between pairs of words in the sentence.</S>
    <S sid="53" ssid="11">The data for all our experiments was extracted from the Penn Treebank II Wall Street Journal (WSJ) corpus (Marcus et al., 1993).</S>
    <S sid="54" ssid="12">For all experiments, we used sections 00-19 as training material and 20-24 as test material.</S>
    <S sid="55" ssid="13">See Section 4 for results on other train/test set splittings.</S>
    <S sid="56" ssid="14">For evaluation of our results we use the precision and recall measures.</S>
    <S sid="57" ssid="15">Precision is the percentage of predicted chunks/relations that are actually correct, recall is the percentage of correct chunks/relations that are actually found.</S>
    <S sid="58" ssid="16">For convenient comparisons of only one value, we also list the Fo---1 value (C.J.van Rijsbergen, 1979).</S>
    <S sid="59" ssid="17">(i32+1)pree.rec with /3 1 In the first experiment described in this section, the task is to segment the sentence into chunks and to assign labels to these chunks.</S>
    <S sid="60" ssid="18">This process of chunking and labeling is carried out by assigning a tag to each word in a sentence leftto-right.</S>
    <S sid="61" ssid="19">Ramshaw and Marcus (1995) first assigned a chunk tag to each word in the sentence: I for inside a chunk, 0 for outside a chunk, and B for inside a chunk, but the preceding word is in another chunk.</S>
    <S sid="62" ssid="20">As we want to find more than one kind of chunk, we have to further differentiate the JOB tags as to which kind of chunk (NP, VP, Prep, ADJP or ADVP) the word is in.</S>
    <S sid="63" ssid="21">With the extended JOB tag set at hand we can tag the sentence: After having found Prep-, NP- and other chunks, we collapse Preps and NPs to PPs in a second step.</S>
    <S sid="64" ssid="22">While the GR assigner finds relations between VPs and other chunks (cf.</S>
    <S sid="65" ssid="23">Section 3.2), the PP chunker finds relations between prepositions and NPs 2 in a way similar to OR. assignment (see Section 3.2).</S>
    <S sid="66" ssid="24">In the last chunking/labeling step, we assign adverbial functions to chunks.</S>
    <S sid="67" ssid="25">The classes are the adverbial function labels from the treebank: LOC (locative), TMP (temporal), DIR.</S>
    <S sid="68" ssid="26">(directional), PRP (purpose and reason), MNR (manner), EXT (extension) or &amp;quot;2 for none of the former.</S>
    <S sid="69" ssid="27">Table 1 gives an overview of the results of the chunking-labeling experiments, using the following algorithms, determined by validation on the train set: IBI-IG for XP-chunking and IGTree for PP-chunking and ADVFUNCs assignment.</S>
    <S sid="70" ssid="28">In grammatical relation assignment we assign a GR to pairs of words in a sentence.</S>
    <S sid="71" ssid="29">In our 2PPs containing anything else than NPs (e.g.</S>
    <S sid="72" ssid="30">'without bringing his wife) are not searched for. ments.</S>
    <S sid="73" ssid="31">NP-,VP-, ADJP-, ADVP- and Prepchunks are found simultaneously, but for convenience, precision and recall values are given separately for each type of chunk. experiments, one of these words is always a verb, since this yields the most important GRs.</S>
    <S sid="74" ssid="32">The other word is the head of the phrase which is annotated with this grammatical relation in the treebank.</S>
    <S sid="75" ssid="33">A preposition is the head of a PP, a noun of an NP and so on.</S>
    <S sid="76" ssid="34">Defining relations to hold between heads means that the algorithm can, for example, find a subject relation between a noun and a verb without necessarily having to make decisions about the precise boundaries of the subject NP.</S>
    <S sid="77" ssid="35">Suppose we had the POS-tagged sentence shown in Figure 1 and we wanted the algorithm to decide whether, and if so how, Miller (henceforth: the focus) is related to the first verb organized.</S>
    <S sid="78" ssid="36">We then construct an instance for this pair of words by extracting a set of feature values from the sentence.</S>
    <S sid="79" ssid="37">The instance contains information about the verb and the focus: a feature for the word form and a feature for the POS of both.</S>
    <S sid="80" ssid="38">It also has similar features for the local context of the focus.</S>
    <S sid="81" ssid="39">Experiments on the training data suggest an optimal context width of two elements to the left and one to the right.</S>
    <S sid="82" ssid="40">In the present case, elements are words or punctuation signs.</S>
    <S sid="83" ssid="41">In addition to the lexical and the local context information, we include superficial information about clause structure: The first feature indicates the distance from the verb to the focus, counted in elements.</S>
    <S sid="84" ssid="42">A negative distance means that the focus is to the left of the verb.</S>
    <S sid="85" ssid="43">The second feature contains the number of other verbs between the verb and the focus.</S>
    <S sid="86" ssid="44">The third feature is the number of intervening commas.</S>
    <S sid="87" ssid="45">The features were chosen by manual 6-7, 8-9 and 12-13 describe the context words, Features 10-11 the focus word.</S>
    <S sid="88" ssid="46">Empty contexts are indicated by the value &amp;quot;-&amp;quot; for all features.</S>
    <S sid="89" ssid="47">&amp;quot;feature engineering&amp;quot;.</S>
    <S sid="90" ssid="48">Table 2 shows the complete instance for Miller-organized in row 5, together with the other first four instances for the sentence.</S>
    <S sid="91" ssid="49">The class is mostly &amp;quot;-&amp;quot;, to indicate that the word does not have a direct grammatical relation to organized.</S>
    <S sid="92" ssid="50">Other possible classes are those from a list of more than 100 different labels found in the treebank.</S>
    <S sid="93" ssid="51">These are combinations of a syntactic category and zero, one or more functions, e.g.</S>
    <S sid="94" ssid="52">NP-SBJ for subject, NP-PRD for predicative object, NP for (in)direct object3, PP-LOC for locative PP adjunct, PP-LOC-CLR for subcategorised locative PP, etcetera.</S>
    <S sid="95" ssid="53">According to their information gain values, features are ordered with decreasing importance as follows: 11,13, 10, 1, 2, 8, 12, 9, 6 , 4 , 7 , 3 , 5.</S>
    <S sid="96" ssid="54">Intuitively,. this ordering makes sense.</S>
    <S sid="97" ssid="55">The most important feature is the POS of the focus, because this determines whether it can have a GR to a verb at all (fninctuation cannot) and what kind of relation is possible.</S>
    <S sid="98" ssid="56">The POS of the following word is important, because e.g. a noun followed by a noun is probably not the head of an NP and will therefore not have a direct GR to the verb.</S>
    <S sid="99" ssid="57">The word itself may be important if it is e.g. a preposition, a pronoun or a clearly temporal/local adverb.</S>
    <S sid="100" ssid="58">Features 1 and 2 give some indication of the complexity of the structure intervening between the focus and the verb.</S>
    <S sid="101" ssid="59">The more complex this structure, the lower the probability that the focus and the verb are related.</S>
    <S sid="102" ssid="60">Context further away is less important than near context.</S>
    <S sid="103" ssid="61">To test the effects of the chunking steps from Section 3.1 on this task, we will now construct instances based on more structured input text, like that in Figure 2.</S>
    <S sid="104" ssid="62">This time, the focus is described by five features instead of two, for the additional information: which type of chunk it is in, what, the preposition is if it is in a PP chunk, and what the adverbial function is, if any.</S>
    <S sid="105" ssid="63">We still have a context of two elements left, one right, but elements are now defined to be either chunks, or words outside any chunk, or punctuation.</S>
    <S sid="106" ssid="64">Each chunk in the context is represented by its last word (which is the semantically most important word in most cases), by the POS of the last word, and by the type of chunk.</S>
    <S sid="107" ssid="65">The distance feature is adapted to the new definition of element, too, and instead of counting intervening verbs, we now count intervening VP chunks.</S>
    <S sid="108" ssid="66">Figure 3 shows the first five instances for the sentence in Figure 2.</S>
    <S sid="109" ssid="67">Class value&amp;quot; &amp;quot; again means the focus is not directly related to the verb&amp;quot; (but to some other verb or a non-verbal element).</S>
    <S sid="110" ssid="68">According to their information gain values, features are ordered in decreasing importance as follows: 16, 15, 12, 14, 11, 2, 1, 19, 10, 9, 13, 18, 6, 17, 8, 4, 7, 3, 5.</S>
    <S sid="111" ssid="69">Comparing this to the earlier feature ordering, we see that most of the new features are distance and intervening VPs and commas.</S>
    <S sid="112" ssid="70">Features 4 and 5 show the verb and its POS.</S>
    <S sid="113" ssid="71">Features 6-8, 9-11 and 17-19 describe the context words/chunks, Features 12-16 the focus chunk.</S>
    <S sid="114" ssid="72">Empty contexts are indicated by the &amp;quot;-&amp;quot; for all features. very important, thereby justifying their introduction.</S>
    <S sid="115" ssid="73">Relative to the other &amp;quot;old&amp;quot; features, the structural features 1 and 2 have gained importance, probably because more structure is available in the input to represent.</S>
    <S sid="116" ssid="74">In principle, we would have to construct one instance for each possible pair of a verb and a focus word in the sentence.</S>
    <S sid="117" ssid="75">However, we restrict instances to those where there is at most one other verb/VP chunk between the verb and the focus, in case the focus precedes the verb, and no other verb in case the verb precedes the focus.</S>
    <S sid="118" ssid="76">This restriction allows, for example, for a relative clause on the subject (as in our example sentence).</S>
    <S sid="119" ssid="77">In the training data, 97.9% of the related pairs fulfill this condition (when counting VP chunks).</S>
    <S sid="120" ssid="78">Experiments on the training data showed that increasing the admitted number of intervening VP chunks slightly increases recall, at the cost of precision.</S>
    <S sid="121" ssid="79">Having constructed all instances from the test data and from a training set with the same level of partial structure, we first train the IGTree algorithm, and then let it classify the test instances.</S>
    <S sid="122" ssid="80">Then, for each test instance that was classified with a grammatical relation, we check whether the same verb-focuspair appears with the same relation in the GR list extracted directly from the treebank.</S>
    <S sid="123" ssid="81">This gives us the precision of the classifier.</S>
    <S sid="124" ssid="82">Checking the treebank list versus the classified list yields We have already seen from the example that the level of structure in the input text can influence the composition of the instances.</S>
    <S sid="125" ssid="83">We are interested in the effects of different sorts of partial structure in the input data on the classification performance of the final classifier.</S>
    <S sid="126" ssid="84">Therefore, we ran a series of experiments.</S>
    <S sid="127" ssid="85">The classification task was always that of finding grammatical relations to verbs and performance was always measured by precision and recall on those relations (the test set contained 45825 relations).</S>
    <S sid="128" ssid="86">The amount of structure in the input data varied.</S>
    <S sid="129" ssid="87">Table 4 shows the results of the experiments.</S>
    <S sid="130" ssid="88">In the first experiment, only POS tagged input is used.</S>
    <S sid="131" ssid="89">Then, NP chunks are added.</S>
    <S sid="132" ssid="90">Other sorts of chunks are inserted at each subsequent step.</S>
    <S sid="133" ssid="91">Finally, the adverbial function labels are added.</S>
    <S sid="134" ssid="92">We can see that the more structure we add, the better precision and recall of the grammatical relations get: precision increases from 60.7% to 74.8%, recall from 41.3% to 67.9%.</S>
    <S sid="135" ssid="93">This in spite of the fact that the added information is not always correct, because it was predicted for the test material on the basis of the training material by the classifiers described in Section 3.1.</S>
    <S sid="136" ssid="94">As we have seen in Table 1, especially ADJP and ADVP chunks and adverbial function labels did not have very high precision and recall.</S>
  </SECTION>
  <SECTION title="4 Discussion" number="4">
    <S sid="137" ssid="1">There are three ways how two cascaded modules can interact.</S>
    <S sid="138" ssid="2">&#8226; The first module can add information on which the later module can (partially) base its decisions.</S>
    <S sid="139" ssid="3">This is the case between the adverbial functions finder and the relations finder.</S>
    <S sid="140" ssid="4">The former adds an extra informative feature to the instances of the latter (Feature 16 in Table 3).</S>
    <S sid="141" ssid="5">Cf. column two of Table 4.</S>
    <S sid="142" ssid="6">&#8226; The first module can restrict the number of decisions to be made by the second one.</S>
    <S sid="143" ssid="7">This is the case in the combination of the chunking steps and the relations finder.</S>
    <S sid="144" ssid="8">Without the chunker, the relations finder would have to decide for every word, whether it is the head of a constituent that bears a relation to the verb.</S>
    <S sid="145" ssid="9">With the churlker., the relations finder has to make this decision for fewer words, namely only for those which are the last word in a chunk resp. the preposition of a PP chunk.</S>
    <S sid="146" ssid="10">Practically, this reduction of the number of decisions (which translates into a reduction of instances) as can be seen in the third column of Table 4.</S>
    <S sid="147" ssid="11">&#8226; The first module can reduce the number of elements used for the instances by counting one chunk as just one context element.</S>
    <S sid="148" ssid="12">We can see the effect in the feature that indicates the distance in elements between the focus and the verb.</S>
    <S sid="149" ssid="13">The more chunks are used, the smaller the average absolute distance (see column four Table 4).</S>
    <S sid="150" ssid="14">All three effects interact in the cascade we describe.</S>
    <S sid="151" ssid="15">The PP chunker reduces the number of decisions for the relations finder (instead of one instance for the preposition and one for the NP chunk, we get only one instance for the PP chunk-). introduces an extra feature (Feature 12 in Table 3), and changes the context (instead of a preposition and an NP, context may now be one PP).</S>
    <S sid="152" ssid="16">As we already noted above, precision and recall are monotonically increasing when adding more structure.</S>
    <S sid="153" ssid="17">However, we note large differences, such as NP chunks which increase Fs_i by more than 10%, and VP chunks which add another 6.8%, whereas ADVPs and ADJPs yield hardly any improvement.</S>
    <S sid="154" ssid="18">This may partially be explained by the fact that these chunks are less frequent than the former two.</S>
    <S sid="155" ssid="19">Preps, on the other hand, while hardly reducing the average distance or the number of instances, improve 1,3-1 by nearly 1%.</S>
    <S sid="156" ssid="20">PPs yield another 1.1%.</S>
    <S sid="157" ssid="21">What may come as a surprise is that adverbial functions again increase F,3,1 by nearly 2%, despite the fact that F1 for this ADVFTJNC assignment step was not very high.</S>
    <S sid="158" ssid="22">This result shows that cascaded modules need not be perfect to be useful.</S>
    <S sid="159" ssid="23">Up to now, we only looked at the overall results.</S>
    <S sid="160" ssid="24">Table 4 also shows individual Fp_1 values for four selected common grammatical relations: subject NP, (in)direct object NP, locative PP adjunct and temporal PP adjunct.</S>
    <S sid="161" ssid="25">Note that the steps have different effects on the different relations: Adding NPs increases Fp=i by 11.3% for subjects resp.</S>
    <S sid="162" ssid="26">16.2% for objects, but only 3.9% resp.</S>
    <S sid="163" ssid="27">3.7% for locatives and temporals.</S>
    <S sid="164" ssid="28">Adverbial functions are more important for the two adjuncts (+6.3% resp.</S>
    <S sid="165" ssid="29">+15%) than for the two complements (+0.2% resp.</S>
    <S sid="166" ssid="30">+0.7%).</S>
    <S sid="167" ssid="31">Argamon et al. (1998) report F13=1 for subject and object identification of respectively 86.5% and 83.0%, compared to 81.8% and 81.0% in this paper.</S>
    <S sid="168" ssid="32">Note however that Argamon et al. (1998) do not identify the head of subjects, subjects in embedded clauses, or subjects and objects related to the verb only through a trace, which makes their task easier.</S>
    <S sid="169" ssid="33">For a detailed comparison of the two methods on the same task see (Daelemans et al., 1999a).</S>
    <S sid="170" ssid="34">That paper also shows that the chunking method proposed here performs about as well as other methods, and that the influence of tagging errors on (NP) chunking is less than 1%.</S>
    <S sid="171" ssid="35">To study the effect of the errors in the lower modules other than the tagger, we used &amp;quot;perfect&amp;quot; test data in a last experiment, i.e. data annotated with partial information taken directly from the treebank.</S>
    <S sid="172" ssid="36">The results are shown in Table 5.</S>
    <S sid="173" ssid="37">We see that later modules suffer from errors of earlier modules (as could be expected): Fp_1 of PP chunking is 92% but could have previous modules in the cascade) vs. on &amp;quot;perfect&amp;quot; input (enriched with partial treebank annotation).</S>
    <S sid="174" ssid="38">For PPs, this means perfect POS tags and chunk labels/boundaries, for ADVFUNC additionally perfect PP chunks, for GR assignment also perfect ADVFUNC labels. been 97.9% if all previous chunks would have been correct (+5.9%).</S>
    <S sid="175" ssid="39">For adverbial functions, the difference is 3.5%.</S>
    <S sid="176" ssid="40">For grammatical relation assignment, the last module in the cascade, the difference is, not surprisingly, the largest: 7.9% for chunks only, 12.3% for chunks and ADVFUNCs.</S>
    <S sid="177" ssid="41">The latter percentage shows what could maximally be gained by further improving the chunker and ADVFUNCs finder.</S>
    <S sid="178" ssid="42">On realistic data, a realistic ADVFUNCs finder improves CR assigment by 1.9%.</S>
    <S sid="179" ssid="43">On perfect data, a perfect ADVFUNCs finder increases performance by 6.3%.</S>
  </SECTION>
  <SECTION title="5 Conclusion and Future Research" number="5">
    <S sid="180" ssid="1">In this paper we studied cascaded grammatical relations assignment.</S>
    <S sid="181" ssid="2">We showed that even the use of imperfect modules improves the overall result of the cascade.</S>
    <S sid="182" ssid="3">In future research we plan to also train our classifiers on imperfectly chunked material.</S>
    <S sid="183" ssid="4">This enables the classifier to better cope with systematic errors in train and test material.</S>
    <S sid="184" ssid="5">We expect that especially an improvement of the adverbial function assignment will lead to better OR assignment.</S>
    <S sid="185" ssid="6">Finally, since cascading proved effective for GR. assignment we intend to study the effect of cascading different types of XP chunkers on chunking performance.</S>
    <S sid="186" ssid="7">We might e.g. first find ADJP chunks, then use that chunker's output as additional input for the NP chunker, then use the combined output as input to the VP chunker and so on.</S>
    <S sid="187" ssid="8">Other chunker orderings are possible, too.</S>
    <S sid="188" ssid="9">Likewise, it might be better to find different grammatical relations subsequently, instead of simultaneously.</S>
  </SECTION>
</PAPER>
