<PAPER>
  <S sid="0">Inference In DATR</S>
  <ABSTRACT>
    <S sid="1" ssid="1">a declarative language for representing a restricted class of inheritance networks, permitting both multiple and default inheritance.</S>
    <S sid="2" ssid="2">The principal intended area of application is the representation of lexical entries for natural language processing, and we use examples from this domain throughout.</S>
    <S sid="3" ssid="3">In this paper we present the syntax and inference mechanisms for language.</S>
    <S sid="4" ssid="4">The goal of the is the design of a simple language that (i) has the necessary expressive power to encode the lexical entries presupposed by contemporary work in the unification grammar tradition, (ii) can express all the evident generalizations about such entries, (iii) has an explicit theory of inference, (iv) is computationally tractable, and (v) has an explicit declarative semantics.</S>
    <S sid="5" ssid="5">The present paper is primarily concerned with (iii), though the examples used may hint at our strategy in respect of (i) and (ii).</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">Inheritance networks (&amp;quot;semantic nets&amp;quot;) provide an intuitively appealing way of thinking about the representation of various kinds of knowledge.</S>
    <S sid="7" ssid="2">This fact has not gone unnoticed by a number of researchers working on lexical knowledge representation, e.g.</S>
    <S sid="8" ssid="3">de Smedt (1984), Flickinger et al. (1985), Calder &amp; te Linden (1987), Daelemans (1987a,1987b), Gazdar (1987) and Calder (1989).</S>
    <S sid="9" ssid="4">However, many such networks have been realized in the context of programming systems or programming languages that leave their precise meaning unclear.</S>
    <S sid="10" ssid="5">In the light of Braclunan (1985), Ether. ington (1988) and much other recent work, it ha become apparent that the formal properties oi notations intended to represent inheritance arc highly problematic.</S>
    <S sid="11" ssid="6">Although not discussec here, DATR has a formal semantics (Evans &amp; Gazdar 1989) for which some completeness anc soundness results have been derived.</S>
    <S sid="12" ssid="7">These results, and others (on complexity, for example; will be provided in a subsequent paper.</S>
    <S sid="13" ssid="8">There are several prototype computational implementa. tions of the language, and non-trivial lexicor fragments for English, German and Latin have been developed and tested.</S>
  </SECTION>
  <SECTION title="2 Syntax" number="2">
    <S sid="14" ssid="1">The syntax of DATR, especially the use of value terminated attribute trees to encode information derives from PATR (Shieber 1986).</S>
    <S sid="15" ssid="2">The language consists of strings of symbols drawn from the se S'YM = {:, &amp;quot;, =, ==, &lt;, &gt;, (, )} and the set: ATOM and NODE, all of which are disjoint.</S>
    <S sid="16" ssid="3">A string is in DATR, (with respect to given set: ATOM of [atom]s and NODE of [node]s) if it is [sentence] as defined by the following set 01 rules: There are two kinds of sentence, those containing `-==' and those containing `='.</S>
    <S sid="17" ssid="4">Both kinds have on their left-hand side a node: path specification, where a path is a sequence of atoms enclosed in &lt;...&gt;.</S>
    <S sid="18" ssid="5">Pragmatically, the `==3 sentences are intended for defining the network, whilst the '=' statements express the values at individual nodes.</S>
    <S sid="19" ssid="6">Put another way, the former provide the database definition language whilst the latter provide the query language: the useful premises will standardly all be statements, whilst the interesting theorems will standardly all be statements (though the language itself also allows the former to be derived as theorems and the latter to be used as premises).</S>
    <S sid="20" ssid="7">In view of this distinction, we shall sometimes refer to `=--' sentences as definitional and 4=' sentences as extensional.</S>
    <S sid="21" ssid="8">Throughout the examples in this paper, we shall use bold for nodes and roman for atoms.</S>
    <S sid="22" ssid="9">Bold italic and italic will be used for corresponding meta-notational variables.</S>
    <S sid="23" ssid="10">Variables such as N, P, L,G and V will be assumed to be typed (as nodes, paths, lvalues, gvalues and values respectively).</S>
    <S sid="24" ssid="11">We shall sometimes refer to atoms occurring in paths as attributes.</S>
    <S sid="25" ssid="12">The right-hand sides of extensional sentences are values, that is, simple atoms or lists of atoms/nested lists enclosed in (...).</S>
    <S sid="26" ssid="13">Lists are provided to allow the components of complex values to be specified independently (inherited from different places, for example).</S>
    <S sid="27" ssid="14">As an example, the following sentences might be derivable from a lexical entry for English 'be': Likewise, the following for German `Buch': Values are the principal 'results' of a DATR description: the most typical operation is to determine the value associated (by an extensional sentence) with some node/path pair.</S>
    <S sid="28" ssid="15">The right-hand sides of definitional sentences are lvalues, which can be simple atoms, inheritance descriptors (quoted or unquoted), or lists of lvalues.</S>
    <S sid="29" ssid="16">An atom is primitive, an inheritance descriptor specifies where the required value can be inherited from, and lists allow arbitrary structures to be built as values.</S>
    <S sid="30" ssid="17">Inheritance descriptors come in several forms with two dimensions of variation.</S>
    <S sid="31" ssid="18">The unquoted/quoted distinction specifies whether the inheritance context is local (the most recent context employed) or global (the initial context employed).</S>
    <S sid="32" ssid="19">Once the context is established, the descriptor specifies a new node, a new lpath, or both to be used to determine the inherited value.</S>
    <S sid="33" ssid="20">For example, the following sentences might be found in a description of a lexicon for English: Finally an lpath is a path made up of lvalues, that is, elements which themselves may need evaluation, as in this example:</S>
  </SECTION>
  <SECTION title="Adjective:" number="3">
    <S sid="34" ssid="1">&lt;form&gt; == &lt;&amp;quot;&lt;gen&gt;&amp;quot; &amp;quot;&lt;num&gt;&amp;quot; &amp;quot;&lt;case&gt;&amp;quot;&gt;.</S>
    <S sid="35" ssid="2">We adopt the following abbreviation convention for sets of sentences about a single node:</S>
  </SECTION>
  <SECTION title="3 Rule-based inference" number="4">
    <S sid="36" ssid="1">DATR has seven syntactic rules of inference falling into three groups.</S>
    <S sid="37" ssid="2">The first rule just provides us with a trivial route from definitional to extensional sentences: Note that V must be a value (not an lvalue) here, otherwise the consequent would not be wellformed.</S>
    <S sid="38" ssid="3">The next three rules implement local inheritance of values, and use the following additional meta-notational device: the expression E0(E21E1) is well-formed iff EO, El and E2 are lvalues and El occurs as a subexpression of EO.</S>
    <S sid="39" ssid="4">In that case, the expression denotes the result of substituting E2 for all occurrences of El in EO.</S>
    <S sid="40" ssid="5">Rule II says that if we have a theorem Nl:P1 == L. where L contains N2:P2 as a subexpression, and we also have a theorem N2:P2 == G., then we can derive a theorem in which all occurrences of N2:P2 in L are replaced by G. In the simplest case, this means that we can interpret a sentence of the form N1:P1==N2:P2. as an inheritance specification meaning &amp;quot;the value of P1 at Ni is inherited from P2 at N2&amp;quot;.</S>
    <S sid="41" ssid="6">So for example, from: Rules III and IV are similar, but specify only a new node or path (not both) to inherit from.</S>
    <S sid="42" ssid="7">The other component (path or node) is unchanged, that is, it is the same as the corresponding component on the left-hand-side of the rule specifying the inheritance.</S>
    <S sid="43" ssid="8">In fact, the following two sentence schemas are entirely equivalent: Rules II, III, and IV implement a local notion of inheritance in the sense that the new node or path specifications are interpreted in the current local context.</S>
    <S sid="44" ssid="9">The three remaining inference rules implement a non-local notion of inheritance: quoted descriptors specify values to be - 68 interpreted in the context in which the original query was made (the global context), rather than the current context.</S>
    <S sid="45" ssid="10">To see how the operation of these rules differs from the earlier unquoted cases, consider the following theory: The intention here is that the CAT node expresses the generalisation that by default plural is the same as singular, v and Al inherit this, but A2, while inheriting its plural form from Al, has an exceptional singular form, overriding inheritance from CAT (via Al).</S>
    <S sid="46" ssid="11">Now from this theory we can derive all the following theorems concerning plural: and the following theorem concerning singular: A2: &lt;sing&gt; = en.</S>
    <S sid="47" ssid="12">But we cannot derive a theorem for V:&lt;sing&gt;, for example.</S>
    <S sid="48" ssid="13">This is because v:&lt;sing&gt; inherits from cAT:&lt;sing&gt;, which inherits (locally) from cAT:&lt;plur&gt;, which is not defined.</S>
    <S sid="49" ssid="14">What we wanted was for cAT:&lt;sing&gt; to inherit from v:&lt;plur&gt;, that is, from the global initial context.</S>
    <S sid="50" ssid="15">To achieve this we change the CAT definition to be: CAT: &lt;sing&gt; == &amp;quot;&lt;plur&gt;&amp;quot;.</S>
    <S sid="51" ssid="16">Now we find that we can still derive the same plural theorems, but now in addition we get all these theorems concerning singular: For example, the derivation for the first of these is as follows: Finally, given a set of sentences T, we define the rule-closure of 7, rc1( T) to be the closure of T under finite application of the above inference rules in the conventional fashion.</S>
  </SECTION>
  <SECTION title="4 Default inference" number="5">
    <S sid="52" ssid="1">In addition to the conventional inference defined above, DATR has a nonmonotonic notion of inference by default: each definitional sentence about some node/path combination implicitly determines additional sentences about all the extensions to the path at that node for which no more specific definitional sentence exists in the theory.</S>
    <S sid="53" ssid="2">Our overall approach follows Moore (1983, 1985), whose treatment of inferences from sets of beliefs can be viewed more generally as a technique for providing a semantics for a declarative notion of inference by default (cf.</S>
    <S sid="54" ssid="3">Touretzky 1986, p34; Evans 1987).</S>
    <S sid="55" ssid="4">We begin with some auxiliary definitions.</S>
    <S sid="56" ssid="5">The expression PAQ, where P and Q are paths, denotes the path formed by concatenating components of P and Q.</S>
    <S sid="57" ssid="6">A path P2 is an extension of a path P1 iff there is a path Q such that P2 = P1AQ.</S>
    <S sid="58" ssid="7">P2 is a strict extension if Q is nonempty.</S>
    <S sid="59" ssid="8">We also use the A operator to denote extension of all the paths in a DATR sentence, as in the following examples: Given a sentence S, we define the root of S to be the [node]:[path] expression appearing to the left of the equality (`==' or `=') in S (for example the root of 'N:P =--- V.' is 'N:P)'.</S>
    <S sid="60" ssid="9">The root does not correspond to any syntactic category defined above: it is simply a substring of the sentence.</S>
    <S sid="61" ssid="10">Given a set of sentences in DATR, T, a node N and a path P. we say N:P is specified in q- if 'T contains a definitional sentence S whose root is N:P. Let Ni :P1, Ni :P2 be such that Ni :P1 is specified in T. We say Nl:P2 is connected to Ni :P1 (relative to ,r) if: there is no strict extension P3 of P1 of which P2 is an extension such that N1:P3 is specified in T. So Ni :P2 is connected to Ni :P1 if PI is the maximal subpath of P2 that is specified (with Ni) in T. Now given a set of sentences T, define the path closure pcl(T) of T to be: pcl(T) = (S:S is an extensional sentence in ) (S^Q: S is a definitional sentence in T, with root N:P, and N:PAQ is connected to N:P) It is clear from these definitions that any N:P is connected to itself and thus that T is always a subset of pd( T).</S>
    <S sid="62" ssid="11">The path closure contains all those theorems which can be inferred by default from T. To illustrate path closure, consider the following example theory: The situation is slightly more complicated with sentences that have paths on their right-hand sides.</S>
    <S sid="63" ssid="12">Such paths are also extended by the subpath used to extend the left-hand side.</S>
    <S sid="64" ssid="13">So the sentence: might give rise (by default) to sentences such as: A2:&lt;sing fern nom&gt; == &amp;quot;Alxplur fern nom&gt;&amp;quot;.</S>
    <S sid="65" ssid="14">Using default inference, the example theory we used to illustrate global inference can be phrased more succinctly: In this version, we state that anything not specifically mentioned for V is inherited (by default) from CAT, whereas before we had to list cases (only 'sing' in the example) explicitly.</S>
    <S sid="66" ssid="15">Similarly Al inherits by default from CAT, and A2 from Al.</S>
    <S sid="67" ssid="16">The operation of path closure is non-monotonic: if we add more sentences to our original theory, some of our derived sentences may cease to be true.</S>
    <S sid="68" ssid="17">The two forms of inference in DATR are combined by taking the path closure of a theory first, and then applying the inference rules to the result.</S>
    <S sid="69" ssid="18">In other words, given a theory qc and a sentence S, S is provable from T if $ rd(pc1( 2)).</S>
    <S sid="70" ssid="19">- 70</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="6">
    <S sid="71" ssid="1">Evans's work was supported by a grant from the SERC.</S>
    <S sid="72" ssid="2">Gazdar's work was supported by grants from the ESRC and SERC.</S>
    <S sid="73" ssid="3">We are grateful to our referees and to Jon Cunningham, Walter Daelemans, David Israel, Bill Keller, Tom Khabaza, Ewan Klein, Bob Moore, Fernando Pereira, Allan Ramsay and Chris Thornton for clarifying our thinking about aspects of DATR.</S>
  </SECTION>
</PAPER>
