<PAPER>
  <S sid="0">A Simple Pattern-Matching Algorithm For Recovering Empty Nodes And Their Antecedents</S>
  <ABSTRACT>
    <S sid="1" ssid="1">This paper describes a simple patternmatching algorithm for recovering empty nodes and identifying their co-indexed antecedents in phrase structure trees that do not contain this information.</S>
    <S sid="2" ssid="2">The patterns are minimal connected tree fragments containing an empty node and all other nodes co-indexed with it.</S>
    <S sid="3" ssid="3">This paper also proposes an evaluation procedure for empty node recovery procedures which is independent of most of the details of phrase structure, which makes it possible to compare the performance of empty node recovery on parser output with the empty node annotations in a goldstandard corpus.</S>
    <S sid="4" ssid="4">Evaluating the algorithm on the output of Charniak&#8217;s parser (Charniak, 2000) and the Penn treebank (Marcus et al., 1993) shows that the patternmatching algorithm does surprisingly well on the most frequently occuring types of empty nodes given its simplicity.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">One of the main motivations for research on parsing is that syntactic structure provides important information for semantic interpretation; hence syntactic parsing is an important first step in a variety of useful tasks.</S>
    <S sid="6" ssid="2">Broad coverage syntactic parsers with good performance have recently become available (Charniak, 2000; Collins, 2000), but these typically produce as output a parse tree that only encodes local syntactic information, i.e., a tree that does not include any &#8220;empty nodes&#8221;.</S>
    <S sid="7" ssid="3">(Collins (1997) discusses the recovery of one kind of empty node, viz., WH-traces).</S>
    <S sid="8" ssid="4">This paper describes a simple patternmatching algorithm for post-processing the output of such parsers to add a wide variety of empty nodes to its parse trees.</S>
    <S sid="9" ssid="5">Empty nodes encode additional information about non-local dependencies between words and phrases which is important for the interpretation of constructions such as WH-questions, relative clauses, etc.1 For example, in the noun phrase the man Sam likes the fact the man is interpreted as the direct object of the verb likes is indicated in Penn treebank notation by empty nodes and coindexation as shown in Figure 1 (see the next section for an explanation of why likes is tagged VBZ t rather than the standard VBZ).</S>
    <S sid="10" ssid="6">The broad-coverage statistical parsers just mentioned produce a simpler tree structure for such a relative clause that contains neither of the empty nodes just indicated.</S>
    <S sid="11" ssid="7">Rather, they produce trees of the kind shown in Figure 2.</S>
    <S sid="12" ssid="8">Unlike the tree depicted in Figure 1, this type of tree does not explicitly represent the relationship between likes and the man.</S>
    <S sid="13" ssid="9">This paper presents an algorithm that takes as its input a tree without empty nodes of the kind shown in Figure 2 and modifies it by inserting empty nodes and coindexation to produce a the tree shown in Figure 1.</S>
    <S sid="14" ssid="10">The algorithm is described in detail in section 2.</S>
    <S sid="15" ssid="11">The standard Parseval precision and recall measures for evaluating parse accuracy do not measure the accuracy of empty node and antecedent recovery, but there is a fairly straightforward extension of them that can evaluate empty node and antecedent recovery, as described in section 3.</S>
    <S sid="16" ssid="12">The rest of this section provides a brief introduction to empty nodes, especially as they are used in the Penn Treebank.</S>
    <S sid="17" ssid="13">Non-local dependencies and displacement phenomena, such as Passive and WH-movement, have been a central topic of generative linguistics since its inception half a century ago.</S>
    <S sid="18" ssid="14">However, current linguistic research focuses on explaining the possible non-local dependencies, and has little to say about how likely different kinds of dependencies are.</S>
    <S sid="19" ssid="15">Many current linguistic theories of non-local dependencies are extremely complex, and would be difficult to apply with the kind of broad coverage described here.</S>
    <S sid="20" ssid="16">Psycholinguists have also investigated certain kinds of non-local dependencies, and their theories of parsing preferences might serve as the basis for specialized algorithms for recovering certain kinds of non-local dependencies, such as WH dependencies.</S>
    <S sid="21" ssid="17">All of these approaches require considerably more specialized linguitic knowledge than the pattern-matching algorithm described here.</S>
    <S sid="22" ssid="18">This algorithm is both simple and general, and can serve as a benchmark against which more complex approaches can be evaluated.</S>
    <S sid="23" ssid="19">The pattern-matching approach is not tied to any particular linguistic theory, but it does require a treebank training corpus from which the algorithm extracts its patterns.</S>
    <S sid="24" ssid="20">We used sections 2&#8211;21 of the Penn Treebank as the training corpus; section 24 was used as the development corpus for experimentation and tuning, while the test corpus (section 23) was used exactly once (to obtain the results in section 3).</S>
    <S sid="25" ssid="21">Chapter 4 of the Penn Treebank tagging guidelines (Bies et al., 1995) contains an extensive description of the kinds of empty nodes and the use of co-indexation in the Penn Treebank.</S>
    <S sid="26" ssid="22">Table 1 contains summary statistics on the distribution of empty nodes in the Penn Treebank.</S>
    <S sid="27" ssid="23">The entry with POS SBAR and no label refers to a &#8220;compound&#8221; type of empty structure labelled SBAR consisting of an empty complementizer and an empty (moved) S (thus SBAR is really a nonterminal label rather than a part of speech); a typical example is shown in Figure 3.</S>
    <S sid="28" ssid="24">As might be expected the distribution is highly skewed, with most of the empty node tokens belonging to just a few types.</S>
    <S sid="29" ssid="25">Because of this, a system can provide good average performance on all empty nodes if it performs well on the most frequent types of empty nodes, and conversely, a system will perform poorly on average if it does not perform at least moderately well on the most common types of empty nodes, irrespective of how well it performs on more esoteric constructions.</S>
    <S sid="30" ssid="26">This section describes the pattern-matching algorithm in detail.</S>
    <S sid="31" ssid="27">In broad outline the algorithm can 21 of the Penn Treebank (there are approximately 64,000 empty nodes in total).</S>
    <S sid="32" ssid="28">The &#8220;label&#8221; column gives the terminal label of the empty node, the &#8220;POS&#8221; column gives its preterminal label and the &#8220;Antecedent&#8221; column gives the label of its antecedent.</S>
    <S sid="33" ssid="29">The entry with an SBAR POS and empty label corresponds to an empty compound SBAR subtree, as explained in the text and Figure 3. be regarded as an instance of the Memory-Based Learning approach, where both the pattern extraction and pattern matching involve recursively visiting all of the subtrees of the tree concerned.</S>
    <S sid="34" ssid="30">It can also be regarded as a kind of tree transformation, so the overall system architecture (including the parser) is an instance of the &#8220;transform-detransform&#8221; approach advocated by Johnson (1998).</S>
    <S sid="35" ssid="31">The algorithm has two phases.</S>
    <S sid="36" ssid="32">The first phase of the algorithm extracts the patterns from the trees in the training corpus.</S>
    <S sid="37" ssid="33">The second phase of the algorithm uses these extracted patterns to insert empty nodes and index their antecedents in trees that do not contain empty nodes.</S>
    <S sid="38" ssid="34">Before the trees are used in the training and insertion phases they are passed through a common preproccessing step, which relabels preterminal nodes dominating auxiliary verbs and transitive verbs.</S>
    <S sid="39" ssid="35">The preprocessing step relabels auxiliary verbs and transitive verbs in all trees seen by the algorithm.</S>
    <S sid="40" ssid="36">This relabelling is deterministic and depends only on the terminal (i.e., the word) and its preterminal label.</S>
    <S sid="41" ssid="37">Auxiliary verbs such as is and being are relabelled as either a AUX or AUXG respectively.</S>
    <S sid="42" ssid="38">The relabelling of auxiliary verbs was performed primarily because Charniak&#8217;s parser (which produced one of the test corpora) produces trees with such labels; experiments (on the development section) show that auxiliary relabelling has little effect on the algorithm&#8217;s performance.</S>
    <S sid="43" ssid="39">The transitive verb relabelling suffixes the preterminal labels of transitive verbs with &#8220; t&#8221;.</S>
    <S sid="44" ssid="40">For example, in Figure 1 the verb likes is relabelled VBZ t in this step.</S>
    <S sid="45" ssid="41">A verb is deemed transitive if its stem is followed by an NP without any grammatical function annotation at least 50% of the time in the training corpus; all such verbs are relabelled whether or not any particular instance is followed by an NP.</S>
    <S sid="46" ssid="42">Intuitively, transitivity would seem to be a powerful cue that there is an empty node following a verb.</S>
    <S sid="47" ssid="43">Experiments on the development corpus showed that transitivity annotation provides a small but useful improvement to the algorithm&#8217;s performance.</S>
    <S sid="48" ssid="44">The accuracy of transitivity labelling was not systematically evaluated here.</S>
    <S sid="49" ssid="45">Informally, patterns are minimal connected tree fragments containing an empty node and all nodes co-indexed with it.</S>
    <S sid="50" ssid="46">The intuition is that the path from the empty node to its antecedents specifies important aspects of the context in which the empty node can appear.</S>
    <S sid="51" ssid="47">There are many different possible ways of realizing this intuition, but all of the ones tried gave approximately similar results so we present the simplest one here.</S>
    <S sid="52" ssid="48">The results given below were generated where the pattern for an empty node is the minimal tree fragment (i.e., connected set of local trees) required to connect the empty node with all of the nodes coindexed with it.</S>
    <S sid="53" ssid="49">Any indices occuring on nodes in the pattern are systematically renumbered beginning with 1.</S>
    <S sid="54" ssid="50">If an empty node does not bear an index, its pattern is just the local tree containing it.</S>
    <S sid="55" ssid="51">Figure 4 displays the single pattern that would be extracted corresponding to the two empty nodes in the tree depicted in Figure 1.</S>
    <S sid="56" ssid="52">For this kind of pattern we define pattern matching informally as follows.</S>
    <S sid="57" ssid="53">If p is a pattern and t is a tree, then p matches t iff t is an extension of p ignoring empty nodes in p. For example, the pattern displayed in Figure 4 matches the subtree rooted under SBAR depicted in Figure 2.</S>
    <S sid="58" ssid="54">If a pattern p matches a tree t, then it is possible to substitute p for the fragment of t that it matches.</S>
    <S sid="59" ssid="55">For example, the result of substituting the pattern shown in Figure 4 for the subtree rooted under SBAR depicted in Figure 2 is the tree shown in Figure 1.</S>
    <S sid="60" ssid="56">Note that the substitution process must &#8220;standardize apart&#8221; or renumber indices appropriately in order to avoid accidentally labelling empty nodes inserted by two independent patterns with the same index.</S>
    <S sid="61" ssid="57">Pattern matching and substitution can be defined more rigorously using tree automata (G&#180;ecseg and Steinby, 1984), but for reasons of space these definitions are not given here.</S>
    <S sid="62" ssid="58">In fact, the actual implementation of pattern matching and substitution used here is considerably more complex than just described.</S>
    <S sid="63" ssid="59">It goes to some lengths to handle complex cases such as adjunction and where two or more empty nodes&#8217; paths cross (in these cases the pattern extracted consists of the union of the local trees that constitute the patterns for each of the empty nodes).</S>
    <S sid="64" ssid="60">However, given the low frequency of these constructions, there is probably only one case where this extra complexity is justified: viz., the empty compound SBAR subtree shown in Figure 3.</S>
    <S sid="65" ssid="61">Suppose we have a rank-ordered list of patterns (the next subsection describes how to obtain such a list).</S>
    <S sid="66" ssid="62">The procedure that uses these to insert empty nodes into a tree t not containing empty nodes is as follows.</S>
    <S sid="67" ssid="63">We perform a pre-order traversal of the subtrees of t (i.e., visit parents before their children), and at each subtree we find the set of patterns that match the subtree.</S>
    <S sid="68" ssid="64">If this set is non-empty we substitute the highest ranked pattern in the set into the subtree, inserting an empty node and (if required) co-indexing it with its antecedents.</S>
    <S sid="69" ssid="65">Note that the use of a pre-order traversal effectively biases the procedure toward &#8220;deeper&#8221;, more embedded patterns.</S>
    <S sid="70" ssid="66">Since empty nodes are typically located in the most embedded local trees of patterns (i.e., movement is usually &#8220;upward&#8221; in a tree), if two different patterns (corresponding to different non-local dependencies) could potentially insert empty nodes into the same tree fragment in t, the deeper pattern will match at a higher node in t, and hence will be substituted.</S>
    <S sid="71" ssid="67">Since the substitution of one pattern typically destroys the context for a match of another pattern, the shallower patterns no longer match.</S>
    <S sid="72" ssid="68">On the other hand, since shallower patterns contain less structure they are likely to match a greater variety of trees than the deeper patterns, they still have ample opportunity to apply.</S>
    <S sid="73" ssid="69">Finally, the pattern matching process can be speeded considerably by indexing patterns appropriately, since the number of patterns involved is quite large (approximately 11,000).</S>
    <S sid="74" ssid="70">For patterns of the kind described here, patterns can be indexed on their topmost local tree (i.e., the pattern&#8217;s root node label and the sequence of node labels of its children).</S>
    <S sid="75" ssid="71">After relabelling preterminals as described above, patterns are extracted during a traversal of each of the trees in the training corpus.</S>
    <S sid="76" ssid="72">Table 2 lists the most frequent patterns extracted from the Penn Treebank training corpus.</S>
    <S sid="77" ssid="73">The algorithm also records how often each pattern was seen; this is shown in the &#8220;count&#8221; column of Table 2.</S>
    <S sid="78" ssid="74">The next step of the algorithm determines approximately how many times each pattern can match some subtree of a version of the training corpus from which all empty nodes have been removed (regardless of whether or not the corresponding substitutions would insert empty nodes correctly).</S>
    <S sid="79" ssid="75">This information is shown under the &#8220;match&#8221; column in Table 2, and is used to filter patterns which would most often be incorrect to apply even though they match.</S>
    <S sid="80" ssid="76">If c is the count value for a pattern and m is its match value, then the algorithm discards that pattern when the lower bound of a 67% confidence interval for its success probability (given c successes out of m trials) is less than 1/2.</S>
    <S sid="81" ssid="77">This is a standard technique for &#8220;discounting&#8221; success probabilities from small sample size data (Witten and Frank, 2000).</S>
    <S sid="82" ssid="78">(As explained immediately below, the estimates of c and m given in Table 2 are inaccurate, so whenever the estimate of m is less than c we replace m by c in this calculation).</S>
    <S sid="83" ssid="79">This pruning removes approximately 2,000 patterns, leaving 9,000 patterns.</S>
    <S sid="84" ssid="80">The match value is obtained by making a second pre-order traversal through a version of the training data from which empty nodes are removed.</S>
    <S sid="85" ssid="81">It turns out that subtle differences in how the match value is obtained make a large difference to the algorithm&#8217;s performance.</S>
    <S sid="86" ssid="82">Initially we defined the match value of a pattern to be the number of subtrees that match that pattern in the training corpus.</S>
    <S sid="87" ssid="83">But as explained above, the earlier substitution of a deeper pattern may prevent smaller patterns from applying, so this simple definition of match value undoubtedly over-estimates the number of times shallow patterns might apply.</S>
    <S sid="88" ssid="84">To avoid this over-estimation, after we have matched all patterns against a node of a training corpus tree we determine the correct pattern (if any) to apply in order to recover the empty nodes that were originally present, and reinsert the relevant empty nodes.</S>
    <S sid="89" ssid="85">This blocks the matching of shallower patterns, reducing their match values and hence raising their success probability.</S>
    <S sid="90" ssid="86">(Undoubtedly the &#8220;count&#8221; values are also over-estimated in the same way; however, experiments showed that estimating count values in a similar manner to the way in which match values are estimated reduces the algorithm&#8217;s performance).</S>
    <S sid="91" ssid="87">Finally, we rank all of the remaining patterns.</S>
    <S sid="92" ssid="88">We experimented with several different ranking criteria, including pattern depth, success probability (i.e., c/m) and discounted success probability.</S>
    <S sid="93" ssid="89">Perhaps surprisingly, all produced similiar results on the development corpus.</S>
    <S sid="94" ssid="90">We used pattern depth as the ranking criterion to produce the results reported below because it ensures that &#8220;deep&#8221; patterns receive a chance to apply.</S>
    <S sid="95" ssid="91">For example, this ensures that the pattern inserting an empty NP * and WHNP can apply before the pattern inserting an empty complementizer 0.</S>
  </SECTION>
  <SECTION title="3 Empty node recovery evaluation" number="2">
    <S sid="96" ssid="1">The previous section described an algorithm for restoring empty nodes and co-indexing their antecedents.</S>
    <S sid="97" ssid="2">This section describes two evaluation procedures for such algorithms.</S>
    <S sid="98" ssid="3">The first, which measures the accuracy of empty node recovery but not co-indexation, is just the standard Parseval evaluation applied to empty nodes only, viz., precision and recall and scores derived from these.</S>
    <S sid="99" ssid="4">In this evaluation, each node is represented by a triple consisting of its category and its left and right string positions.</S>
    <S sid="100" ssid="5">(Note that because empty nodes dominate the empty string, their left and right string positions of empty nodes are always identical).</S>
    <S sid="101" ssid="6">Let G be the set of such empty node representations derived from the &#8220;gold standard&#8221; evaluation corpus and T the set of empty node representations column is the number of times the pattern was found, and the Match column is an estimate of the number of times that this pattern matches some subtree in the training corpus during empty node recovery, as explained in the text. derived from the corpus to be evaluated.</S>
    <S sid="102" ssid="7">Then as is standard, the precision P, recall R and f-score f are calculated as follows: Table 3 provides these measures for two different test corpora: (i) a version of section 23 of the Penn Treebank from which empty nodes, indices and unary branching chains consisting of nodes of the same category were removed, and (ii) the trees produced by Charniak&#8217;s parser on the strings of section 23 (Charniak, 2000).</S>
    <S sid="103" ssid="8">To evaluate co-indexation of empty nodes and their antecedents, we augment the representation of empty nodes as follows.</S>
    <S sid="104" ssid="9">The augmented representation for empty nodes consists of the triple of category plus string positions as above, together with the set of triples of all of the non-empty nodes the empty node is co-indexed with.</S>
    <S sid="105" ssid="10">(Usually this set of antecedents is either empty or contains a single node).</S>
    <S sid="106" ssid="11">Precision, recall and f-score are defined for these augmented representations as before.</S>
    <S sid="107" ssid="12">Note that this is a particularly stringent evaluation measure for a system including a parser, since it is necessary for the parser to produce a non-empty node of the correct category in the correct location to serve as an antecedent for the empty node.</S>
    <S sid="108" ssid="13">Table 4 provides these measures for the same two corpora described earlier.</S>
    <S sid="109" ssid="14">In an attempt to devise an evaluation measure for empty node co-indexation that depends less on syntactic structure we experimented with a modified augmented empty node representation in which each antecedent is represented by its head&#8217;s category and location.</S>
    <S sid="110" ssid="15">(The intuition behind this is that we do not want to penalize the empty node antecedentfinding algorithm if the parser misattaches modifiers to the antecedent).</S>
    <S sid="111" ssid="16">In fact this head-based antecedent representation yields scores very similiar to those obtained using the phrase-based representation.</S>
    <S sid="112" ssid="17">It seems that in the cases where the parser does not construct a phrase in the appropriate location to serve as the antecedent for an empty node, the syntactic structure is typically so distorted that either the pattern-matcher fails or the head-finding algorithm does not return the &#8220;correct&#8221; head either.</S>
    <S sid="113" ssid="18">0.93 0.83 0.88 0.95 0.87 0.91 0.93 0.88 0.91 0.94 0.99 0.96 0.92 0.98 0.95 0.98 0.83 0.90 0.91 0.52 0.66 0.90 0.63 0.74 0.75 0.79 0.77 0.85 0.74 0.79 0.86 0.79 0.82 0.85 0.77 0.81 0.86 0.89 0.88 0.87 0.96 0.92 0.97 0.81 0.88 0.84 0.42 0.56 0.88 0.58 0.70 0.48 0.46 0.47</S>
  </SECTION>
  <SECTION title="4 Conclusion" number="3">
    <S sid="114" ssid="1">This paper described a simple pattern-matching algorithm for restoring empty nodes in parse trees that do not contain them, and appropriately indexing these nodes with their antecedents.</S>
    <S sid="115" ssid="2">The patternmatching algorithm combines both simplicity and reasonable performance over the frequently occuring types of empty nodes.</S>
    <S sid="116" ssid="3">Performance drops considerably when using trees produced by the parser, even though this parser&#8217;s precision and recall is around 0.9.</S>
    <S sid="117" ssid="4">Presumably this is because the pattern matching technique requires that the parser correctly identify large tree fragments that encode long-range dependencies not captured by the parser.</S>
    <S sid="118" ssid="5">If the parser makes a single parsing error anywhere in the tree fragment matched by a pattern, the pattern will no longer match.</S>
    <S sid="119" ssid="6">This is not unlikely since the statistical model used by the parser does not model these larger tree fragments.</S>
    <S sid="120" ssid="7">It suggests that one might improve performance by integrating parsing, empty node recovery and antecedent finding in a single system, in which case the current algorithm might serve as a useful baseline.</S>
    <S sid="121" ssid="8">Alternatively, one might try to design a &#8220;sloppy&#8221; pattern matching algorithm which in effect recognizes and corrects common parser errors in these constructions.</S>
    <S sid="122" ssid="9">Also, it is undoubtedly possible to build programs that can do better than this algorithm on special cases.</S>
    <S sid="123" ssid="10">For example, we constructed a Boosting classifier which does recover *U* and empty complementizers 0 more accurately than the pattern-matcher described here (although the pattern-matching algorithm does quite well on these constructions), but this classifier&#8217;s performance averaged over all empty node types was approximately the same as the pattern-matching algorithm.</S>
    <S sid="124" ssid="11">As a comparison of tables 3 and 4 shows, the pattern-matching algorithm&#8217;s biggest weakness is its inability to correctly distinguish co-indexed NP * (i.e., NP PRO) from free (i.e., unindexed) NP *.</S>
    <S sid="125" ssid="12">This seems to be a hard problem, and lexical information (especially the class of the governing verb) seems relevant.</S>
    <S sid="126" ssid="13">We experimented with specialized classifiers for determining if an NP * is co-indexed, but they did not perform much better than the algorithm presented here.</S>
    <S sid="127" ssid="14">(Also, while we did not systematically investigate this, there seems to be a number of errors in the annotation of free vs. co-indexed NP * in the treebank).</S>
    <S sid="128" ssid="15">There are modications and variations on this algorithm that are worth exploring in future work.</S>
    <S sid="129" ssid="16">We experimented with lexicalizing patterns, but the simple method we tried did not improve results.</S>
    <S sid="130" ssid="17">Inspired by results suggesting that the patternmatching algorithm suffers from over-learning (e.g., testing on the training corpus), we experimented with more abstract &#8220;skeletal&#8221; patterns, which improved performance on some types of empty nodes but hurt performance on others, leaving overall performance approximately unchanged.</S>
    <S sid="131" ssid="18">Possibly there is a way to use both skeletal and the original kind of patterns in a single system.</S>
  </SECTION>
</PAPER>
