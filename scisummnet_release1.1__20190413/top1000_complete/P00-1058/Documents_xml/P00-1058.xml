<PAPER>
  <S sid="0">Statistical Parsing With An Automatically-Extracted Tree Adjoining Grammar</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We discuss the advantages of lexicalized tree-adjoining grammar as an alternative to lexicalized PCFG for statistical parsing, describing the induction of a probabilistic LTAG model from the Penn Treebank and evaluating its parsing performance.</S>
    <S sid="2" ssid="2">We find that this induction method is an improvement over the EM-based method of (Hwa, 1998), and that the induced model yields results comparable to lexicalized PCFG.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="3" ssid="1">Why use tree-adjoining grammar for statistical parsing?</S>
    <S sid="4" ssid="2">Given that statistical natural language processing is concerned with the probable rather than the possible, it is not because TAG can describe constructions like arbitrarily large Dutch verb clusters.</S>
    <S sid="5" ssid="3">Rather, what makes TAG useful for statistical parsing are the structural descriptions it assigns to breadand-butter sentences.</S>
    <S sid="6" ssid="4">The approach of Chelba and Jelinek (1998) to language modeling is illustrative: even though the probability estimate of w appearing as the lith word can be conditioned on the entire history w1, ... , wk-1, the quantity of available training data limits the usable context to about two words but which two?</S>
    <S sid="7" ssid="5">A trigram model chooses wk-1 and wk-2 and works quite well; a model which chose wk-7 and wk-11 would probably work less well.</S>
    <S sid="8" ssid="6">But (Chelba and Jelinek, 1998) chooses the lexical heads of the two previous constituents as determined by a shift-reduce parser, and works better than a trigram model.</S>
    <S sid="9" ssid="7">Thus the (virtual) grammar serves to structure the history so that the two most useful words can be chosen, even though the structure of the problem itself is entirely linear.</S>
    <S sid="10" ssid="8">Similarly, nothing about the parsing problem requires that we construct any structure other than phrase structure.</S>
    <S sid="11" ssid="9">But beginning with (Magerman, 1995) statistical parsers have used bilexical dependencies with great success.</S>
    <S sid="12" ssid="10">Since these dependencies are not encoded in plain phrase-structure trees, the standard approach has been to let the lexical heads percolate up the tree, so that when one lexical head is immediately dominated by another, it is understood to be dependent on it.</S>
    <S sid="13" ssid="11">Effectively, a dependency structure is made parasitic on the phrase structure so that they can be generated together by a context-free model.</S>
    <S sid="14" ssid="12">However, this solution is not ideal.</S>
    <S sid="15" ssid="13">Aside from cases where context-free derivations are incapable of encoding both constituency and dependency (which are somewhat isolated and not of great interest for statistical parsing) there are common cases where percolation of single heads is not sufficient to encode dependencies correctly for example, relative clause attachment or raising/auxiliary verbs (see Section 3).</S>
    <S sid="16" ssid="14">More complicated grammar transformations are necessary.</S>
    <S sid="17" ssid="15">A more suitable approach is to employ a grammar formalism which produces structural descriptions that can encode both constituency and dependency.</S>
    <S sid="18" ssid="16">Lexicalized TAG is such a formalism, because it assigns to each sentence not only a parse tree, which is built out of elementary trees and is interpreted as encoding constituency, but a derivation tree, which records how the various elementary trees were combined together and is commonly intepreted as encoding dependency.</S>
    <S sid="19" ssid="17">The ability of probabilistic LTAG to model bilexical dependencies was noted early on by (Resnik, 1992).</S>
    <S sid="20" ssid="18">It turns out that there are other pieces of contextual information that need to be explicitly accounted for in a CFG by grammar transformations but come for free in a TAG.</S>
    <S sid="21" ssid="19">We discuss a few such cases in Section 3.</S>
    <S sid="22" ssid="20">In Sections 4 and 5 we describe an experiment to test the parsing accuracy of a probabilistic TAG extracted automatically from the Penn Treebank.</S>
    <S sid="23" ssid="21">We find that the automatically-extracted grammar gives an improvement over the EM-based induction method of (Hwa, 1998), and that the parser performs comparably to lexicalized PCFG parsers, though certainly with room for improvement.</S>
    <S sid="24" ssid="22">We emphasize that TAG is attractive not because it can do things that CFG cannot, but because it does everything that CFG can, only more cleanly.</S>
    <S sid="25" ssid="23">(This is where the analogy with (Chelba and Jelinek, 1998) breaks down.)</S>
    <S sid="26" ssid="24">Thus certain possibilities which were not apparent in a PCFG framework or prohibitively complicated might become simple to implement in a PTAG framework; we conclude by offering two such possibilities.</S>
  </SECTION>
  <SECTION title="2 The formalism" number="2">
    <S sid="27" ssid="1">The formalism we use is a variant of lexicalized tree-insertion grammar (LTIG), which is in turn a restriction of LTAG (Schabes and Waters, 1995).</S>
    <S sid="28" ssid="2">In this variant there are three kinds of elementary tree: initial, (predicative) auxiliary, and modifier, and three composition operations: substitution, adjunction, and sister-adjunction.</S>
    <S sid="29" ssid="3">Auxiliary trees and adjunction are restricted as in TIG: essentially, no wrapping adjunction or anything equivalent to wrapping adjunction is allowed.</S>
    <S sid="30" ssid="4">Sister-adjunction is not an operation found in standard definitions of TAG, but is borrowed from D-Tree Grammar (Rambow et al., 1995).</S>
    <S sid="31" ssid="5">In sisteradjunction the root of a modifier tree is added as a new daughter to any other node.</S>
    <S sid="32" ssid="6">(Note that as it stands sister-adjunction is completely unconstrained; it will be constrained by the probability model.)</S>
    <S sid="33" ssid="7">We introduce this operation simply so we can derive the flat structures found in the Penn Treebank.</S>
    <S sid="34" ssid="8">Following (Schabes and Shieber, 1994), multiple modifier trees can be sister-adjoined at a single site, but only one auxiliary tree may be adjoined at a single node.</S>
    <S sid="35" ssid="9">Figure 1 shows an example grammar and the derivation of the sentence &amp;quot;John should leave tomorrow.&amp;quot; The derivation tree encodes this process, with each arc corresponding to a composition operation.</S>
    <S sid="36" ssid="10">Arcs corresponding to substitution and adjunction are labeled with the Gorn address1 of the substitution or adjunction site.</S>
    <S sid="37" ssid="11">An arc corresponding to the sister-adjunction of a tree between the ith and i + 1th children of rl (allowing for two imaginary children beyond the leftmost and rightmost children) is labeled rl; i.</S>
    <S sid="38" ssid="12">This grammar, as well as the grammar used by the parser, is lexicalized in the sense that every elementary tree has exactly one terminal node, its lexical anchor.</S>
    <S sid="39" ssid="13">Since sister-adjunction can be simulated by ordinary adjunction, this variant is, like TIG (and CFG), weakly context-free and O(n3)-time parsable.</S>
    <S sid="40" ssid="14">Rather than coin a new acronym for this particular variant, we will simply refer to it as &amp;quot;TAG&amp;quot; and trust that no confusion will arise.</S>
    <S sid="41" ssid="15">The parameters of a probabilistic TAG (Resnik, 1992; Schabes, 1992) are: where a ranges over initial trees, ,3 over auxiliary trees, y over modifier trees, and rl over nodes.</S>
    <S sid="42" ssid="16">Pi(a) is the probability of beginning a derivation with a; Ps(a j TI) is the probability of substituting a at TI; Pa(,3 j TI) is the probability of adjoining ,3 at TI; finally, Pa(NONE j TI) is the probability of nothing adjoining at rl.</S>
    <S sid="43" ssid="17">(Carroll and Weir, 1997) suggest other parameterizations worth exploring as well.</S>
    <S sid="44" ssid="18">Our variant adds another set of parameters: This is the probability of sister-adjoining y between the ith and i + 1th children of rl (as before, allowing for two imaginary children beyond the leftmost and rightmost children).</S>
    <S sid="45" ssid="19">Since multiple modifier trees can adjoin at the same location, Psa(-Y) is also conditioned on a flag f which indicates whether y is the first modifier tree (i.e., the one closest to the head) to adjoin at that location.</S>
    <S sid="46" ssid="20">The probability of a derivation can then be expressed as a product of the probabilities of address i has address i &#8226; j. the individual operations of the derivation.</S>
    <S sid="47" ssid="21">Thus the probability of the example derivation of Figure 1 would be where a(i) is the node of a with address i.</S>
    <S sid="48" ssid="22">We want to obtain a maximum-likelihood estimate of these parameters, but cannot estimate them directly from the Treebank, because the sample space of PTAG is the space of TAG derivations, not the derived trees that are found in the Treebank.</S>
    <S sid="49" ssid="23">One approach, taken in (Hwa, 1998), is to choose some grammar general enough to parse the whole corpus and obtain a maximum-likelihood estimate by EM.</S>
    <S sid="50" ssid="24">Another approach, taken in (Magerman, 1995) and others for lexicalized PCFGs and (Neumann, 1998; Xia, 1999; Chen and VijayShanker, 2000) for LTAGs, is to use heuristics to reconstruct the derivations, and directly estimate the PTAG parameters from the reconstructed derivations.</S>
    <S sid="51" ssid="25">We take this approach as well.</S>
    <S sid="52" ssid="26">(One could imagine combining the two approaches, using heuristics to extract a grammar but EM to estimate its parameters.)</S>
  </SECTION>
  <SECTION title="3 Some properties of probabilistic TAG" number="3">
    <S sid="53" ssid="1">In a lexicalized TAG, because each composition brings together two lexical items, every composition probability involves a bilexical dependency.</S>
    <S sid="54" ssid="2">Given a CFG and headpercolation scheme, an equivalent TAG can be constructed whose derivations mirror the dependency analysis implicit in the headpercolation scheme.</S>
    <S sid="55" ssid="3">Furthermore, there are some dependency analyses encodable by TAGs that are not encodable by a simple head-percolation scheme.</S>
    <S sid="56" ssid="4">For example, for the sentence &amp;quot;John should have left,&amp;quot; Magerman's rules make should and have the heads of their respective VPs, so that there is no dependency between left and its subject John (see Figure 2a).</S>
    <S sid="57" ssid="5">Since nearly a quarter of nonempty subjects appear in such a configuration, this is not a small problem.</S>
    <S sid="58" ssid="6">(We could make VP the head of VP instead, but this would generate auxiliaries independently of each other, so that, for example, P(John leave) &gt; 0.)</S>
    <S sid="59" ssid="7">TAG can produce the desired dependencies (b) easily, using the grammar of Figure 1.</S>
    <S sid="60" ssid="8">A more complex lexicalization scheme for CFG could as well (one which kept track of two heads at a time, for example), but the TAG account is simpler and cleaner.</S>
    <S sid="61" ssid="9">Bilexical dependencies are not the only nonlocal dependencies that can be used to improve parsing accuracy.</S>
    <S sid="62" ssid="10">For example, the attachment of an S depends on the presence or absence of the embedded subject (Collins, 1999); Treebank-style two-level NPs are mismodeled by PCFG (Collins, 1999; Johnson, 1998); the generation of a node depends on the label of its grandparent (Charniak, 2000; Johnson, 1998).</S>
    <S sid="63" ssid="11">In order to capture such dependencies in a PCFG-based model, they must be localized either by transforming the data or modifying the parser.</S>
    <S sid="64" ssid="12">Such changes are not always obvious a priori and often must be devised anew for each language or each corpus.</S>
    <S sid="65" ssid="13">But none of these cases really requires special treatment in a PTAG model, because each composition probability involves not only a bilexical dependency but a &amp;quot;biarboreal&amp;quot; (tree-tree) dependency.</S>
    <S sid="66" ssid="14">That is, PTAG generates an entire elementary tree at once, conditioned on the entire elementary tree being modified.</S>
    <S sid="67" ssid="15">Thus dependencies that have to be stipulated in a PCFG by tree transformations or parser modifications are captured for free in a PTAG model.</S>
    <S sid="68" ssid="16">Of course, the price that the PTAG model pays is sparser data; the backoff model must therefore be chosen carefully.</S>
  </SECTION>
  <SECTION title="4 Inducing a stochastic grammar from the Treebank" number="4">
    <S sid="69" ssid="1">We want to extract from the Penn Treebank an LTAG whose derivations mirror the dependency analysis implicit in the head-percolation rules of (Magerman, 1995; Collins, 1997).</S>
    <S sid="70" ssid="2">For each node T1, these rules classify exactly one child of T1 as a head and the rest as either arguments or adjuncts.</S>
    <S sid="71" ssid="3">Using this classification we can construct a TAG derivation (including elementary trees) from a derived tree as follows: Rules (1) and (2) produce the desired result; rule (3) changes the analysis somewhat by making subtrees with recursive arguments into predicative auxiliary trees.</S>
    <S sid="72" ssid="4">It produces, among other things, the analysis of auxiliary verbs described in the previous section.</S>
    <S sid="73" ssid="5">It is applied in a greedy fashion, with potential rjs considered top-down and potential Bs bottomup.</S>
    <S sid="74" ssid="6">The complicated restrictions on 0 are simply to ensure that a well-formed TIG derivation is produced.</S>
    <S sid="75" ssid="7">Now that we have augmented the training data to include TAG derivations, we could try to directly estimate the parameters of the model from Section 2.</S>
    <S sid="76" ssid="8">But since the number of (tree, site) pairs is very high, the data would be too sparse.</S>
    <S sid="77" ssid="9">We therefore generate an elementary tree in two steps: first the tree template (that is, the elementary tree minus its Frequency anchor), then the anchor.</S>
    <S sid="78" ssid="10">The probabilities are decomposed as follows: where Ta is the tree template of a, to is the part-of-speech tag of the anchor, and wa is the anchor itself.</S>
    <S sid="79" ssid="11">The generation of the tree template has two backoff levels: at the first level, the anchor of il is ignored, and at the second level, the POS tag of the anchor as well as the flag f are ignored.</S>
    <S sid="80" ssid="12">The generation of the anchor has three backoff levels: the first two are as before, and the third just conditions the anchor on its POS tag.</S>
    <S sid="81" ssid="13">The backed-off models are combined by linear interpolation, with the weights chosen as in (Bikel et al., 1997).</S>
  </SECTION>
  <SECTION title="5 The experiment" number="5">
    <S sid="82" ssid="1">We ran the algorithm given in Section 4.1 on sections 02{21 of the Penn Treebank.</S>
    <S sid="83" ssid="2">The extracted grammar is large (about 73,000 trees, with words seen fewer than four times replaced with the symbol *UNKNOWN*), but if we consider elementary tree templates, the grammar is quite manageable: 3626 tree templates, of which 2039 occur more than once (see Figure 4).</S>
    <S sid="84" ssid="3">The 616 most frequent tree-template types account for 99% of tree-template tokens in the training data.</S>
    <S sid="85" ssid="4">Removing all but these trees from the grammar increased the error rate by about 5% (testing on a subset of section 00).</S>
    <S sid="86" ssid="5">A few of the most frequent tree-templates are shown in Figure 3.</S>
    <S sid="87" ssid="6">So the extracted grammar is fairly compact, but how complete is it?</S>
    <S sid="88" ssid="7">If we plot the growth of the grammar during training (Figure 5), it's not clear the grammar will ever converge, even though the very idea of a grammar requires it.</S>
    <S sid="89" ssid="8">Three possible explanations are: In a random sample of 100 once-seen elementary tree templates, we found (by casual inspection) that 34 resulted from annotation errors, 50 from deficiencies in the heuristics, and four apparently from performance errors.</S>
    <S sid="90" ssid="9">Only twelve appeared to be genuine.</S>
    <S sid="91" ssid="10">Therefore the continued growth of the grammar is not as rapid as Figure 5 might indicate.</S>
    <S sid="92" ssid="11">Moreover, our extraction heuristics evidently have room to improve.</S>
    <S sid="93" ssid="12">The majority of trees resulting from deficiencies in the heuristics involved complicated coordination structures, which is not surprising, since coordination has always been problematic for TAG.</S>
    <S sid="94" ssid="13">To see what the impact of this failure to converge is, we ran the grammar extractor on some held-out data (section 00).</S>
    <S sid="95" ssid="14">Out of 45082 tree tokens, 107 tree templates, or 0.2%, had not been seen in training.</S>
    <S sid="96" ssid="15">This amounts to about one unseen tree template every 20 sentences.</S>
    <S sid="97" ssid="16">When we consider lexicalized trees, this figure of course rises: out of the same 45082 tree tokens, 1828 lexicalized trees, or 4%, had not been seen in training.</S>
    <S sid="98" ssid="17">So the coverage of the grammar is quite good.</S>
    <S sid="99" ssid="18">Note that even in cases where the parser encounters a sentence for which the (fallible) extraction heuristics would have produced an unseen tree template, it is possible that the parser will use other trees to produce the correct bracketing.</S>
    <S sid="100" ssid="19">We used a CKY-style parser similar to the one described in (Schabes and Waters, 1996), with a modification to ensure completeness (because foot nodes are treated as empty, which CKY prohibits) and another to reduce useless substitutions.</S>
    <S sid="101" ssid="20">We also extended the parser to simulate sister-adjunction as regular adjunction and compute the flag f which distinguishes the first modifier from subsequent modifiers.</S>
    <S sid="102" ssid="21">We use a beam search, computing the score of an item [TI, i, j] by multiplying it by the prior probability P(TI) (Goodman, 1997); any item with score less than 10-5 times that of the best item in a cell is pruned.</S>
    <S sid="103" ssid="22">Following (Collins, 1997), words occurring fewer than four times in training were replaced with the symbol *UNKNOWN* and tagged with the output of the part-of-speech tagger described in (Ratnaparkhi, 1996).</S>
    <S sid="104" ssid="23">Tree templates occurring only once in training were ignored entirely.</S>
    <S sid="105" ssid="24">We first compared the parser with (Hwa, 1998): we trained the model on sentences of length 40 or less in sections 02{09 of the Penn Treebank, down to parts of speech only, and then tested on sentences of length 40 or less in section 23, parsing from part-of-speech tag sequences to fully bracketed parses.</S>
    <S sid="106" ssid="25">The metric used was the percentage of guessed brackets which did not cross any correct brackets.</S>
    <S sid="107" ssid="26">Our parser scored 84.4% compared with 82.4% for (Hwa, 1998), an error reduction of 11%.</S>
    <S sid="108" ssid="27">Next we compared our parser against lexicalized PCFG parsers, training on sections 02{21 and testing on section 23.</S>
    <S sid="109" ssid="28">The results are shown in Figure 6.</S>
    <S sid="110" ssid="29">These results place our parser roughly in the middle of the lexicalized PCFG parsers.</S>
    <S sid="111" ssid="30">While the results are not state-of-the-art, they do demonstrate the viability of TAG as a framework for statistical parsing.</S>
    <S sid="112" ssid="31">With improvements in smoothing and cleaner handling of punctuation and coordination, perhaps these results can be brought more upto-date.</S>
  </SECTION>
  <SECTION title="6 Conclusion: related and future work" number="6">
    <S sid="113" ssid="1">(Neumann, 1998) describes an experiment similar to ours, although the grammar he extracts only arrives at a complete parse for 10% of unseen sentences.</S>
    <S sid="114" ssid="2">(Xia, 1999) describes a grammar extraction process similar to ours, and describes some techniques for automatically filtering out invalid elementary trees.</S>
    <S sid="115" ssid="3">Our work has a great deal in common with independent work by Chen and VijayShanker (2000).</S>
    <S sid="116" ssid="4">They present a more detailed discussion of various grammar extraction processes and the performance of supertagging models (B. Srinivas, 1997) based on the extracted grammars.</S>
    <S sid="117" ssid="5">They do not report parsing results, though their intention is to evaluate how the various grammars affect parsing accuracy and how k-best supertagging afffects parsing speed.</S>
    <S sid="118" ssid="6">Srinivas's work on supertags (B. Srinivas, 1997) also uses TAG for statistical parsing, but with a rather different strategy: tree templates are thought of as extended parts-ofspeech, and these are assigned to words based on local (e.g., n-gram) context.</S>
    <S sid="119" ssid="7">As for future work, there are still possibilities made available by TAG which remain to be explored.</S>
    <S sid="120" ssid="8">One, also suggested by (Chen and Vijay-Shanker, 2000), is to group elementary trees into families and relate the trees of a family by transformations.</S>
    <S sid="121" ssid="9">For example, one would imagine that the distribution of active verbs and their subjects would be similar to the distribution of passive verbs and their notional subjects, yet they are treated as independent in the current model.</S>
    <S sid="122" ssid="10">If the two configurations could be related, then the sparseness of verb-argument dependencies would be reduced.</S>
    <S sid="123" ssid="11">Another possibility is the use of multiplyanchored trees.</S>
    <S sid="124" ssid="12">Nothing about PTAG requires that elementary trees have only a single anchor (or any anchor at all), so multiplyanchored trees could be used to make, for example, the attachment of a PP dependent not only on the preposition (as in the current model) but the lexical head of the prepositional object as well, or the attachment of a relative clause dependent on the embedded verb as well as the relative pronoun.</S>
    <S sid="125" ssid="13">The smoothing method described above would have to be modified to account for multiple anchors.</S>
    <S sid="126" ssid="14">In summary, we have argued that TAG provides a cleaner way of looking at statistical parsing than lexicalized PCFG does, and demonstrated that in practice it performs in the same range.</S>
    <S sid="127" ssid="15">Moreover, the greater flexibility of TAG suggests some potential improvements which would be cumbersome to implement using a lexicalized CFG.</S>
    <S sid="128" ssid="16">Further research will show whether these advantages turn out to be significant in practice.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="7">
    <S sid="129" ssid="1">This research is supported in part by ARO grant DAAG55971-0228 and NSF grant SBR89-20230-15.</S>
    <S sid="130" ssid="2">Thanks to Mike Collins, Aravind Joshi, and the anonymous reviewers for their valuable help.</S>
    <S sid="131" ssid="3">S. D. G.</S>
  </SECTION>
</PAPER>
