<PAPER>
  <S sid="0">Using Restriction To Extend Parsing Algorithms For Complex-Feature-Based Formalisms</S>
  <ABSTRACT/>
  <SECTION title="Artificial Intelligence Center SRI International" number="1">
    <S sid="1" ssid="1">and Center for the Study of Language and Information Stanford University</S>
  </SECTION>
  <SECTION title="Abstract 1 Introduction" number="2">
    <S sid="2" ssid="1">Grammar formalisms based on the encoding of grammatical information in complex-valued feature systems enjoy some currency both in linguistics and natural-language-processing research.</S>
    <S sid="3" ssid="2">Such formalisms can be thought of by analogy to context-free grammars as generalizing the notion of nonterminal symbol from a finite domain of atomic elements to a possibly infinite domain of directed graph structures of a certain sort.</S>
    <S sid="4" ssid="3">Unfortunately, in moving to an infinite nonterniinal domain, standard methods of parsing may no longer be applicable to the formalism.</S>
    <S sid="5" ssid="4">Typically, the problem manifests itself as gross inefficiency or even nonterminat ion of the algorithms.</S>
    <S sid="6" ssid="5">In this paper, we discuss a solution to the problem of extending parsing algorithms to formalisms with possibly infinite nonterminal domains, a solution based on a general technique we call restriction.</S>
    <S sid="7" ssid="6">As a particular example of such an extension, we present a complete, correct, terminating extension of Earley's algorithm that uses restriction to perform top-down filtering.</S>
    <S sid="8" ssid="7">Our implementation of this algorithm demonstrates the drastic elimination of chart edges that can be achieved by this technique.</S>
    <S sid="9" ssid="8">Finally, we describe further uses for the technique&#8212;including parsing other grammar formalisms, including definite-clause grammars; extending other parsing algorithms, including LR methods and syntactic preference modeling algorithms; and efficient indexing.</S>
    <S sid="10" ssid="9">0078 with the Naval Electronics Systems Command.</S>
    <S sid="11" ssid="10">The views and conclusions contained in this document should not he interpreted as representative of the official policies, either expressed or implied, of the Defense Research Projects Agency or the United States government.</S>
    <S sid="12" ssid="11">The author is indebted to Fernando Pereira and Ray Perrault for their comments on earlier drafts of this paper.</S>
    <S sid="13" ssid="12">Grammar formalisms based on the encoding of grammatical information in complex-valued feature systems enjoy some currency both in linguistics and natural-languageprocessing research.</S>
    <S sid="14" ssid="13">Such formalisms can be thought of by analogy to context-free grammars as generalizing the notion of nonterminal symbol from a finite domain of atomic elements to a possibly infinite domain of directed graph structures of a certain sort.</S>
    <S sid="15" ssid="14">Many of the surface-based grammatical formalisms explicitly defined or presupposed in linguistics can be characterized in this way e.g., lexi &#8226;.</S>
    <S sid="16" ssid="15">(1functional grammar (I.F(;) [51, generalized phrase st ruct grammar (GPSG) [II, even categorial systems such as Montague grammar 181 and Ades/Steedman grammar [ I &#8212;as can several of the grammar formalisms being used in naturallanguage processing research&#8212;e.g., definite clause grammar (DCG) [91, and PATR-II 1131.</S>
    <S sid="17" ssid="16">Unfortunately, in moving to an infinite nonterminal domain, standard methods of parsing may no longer he applicable to the formalism.</S>
    <S sid="18" ssid="17">For instance, the application of techniques for preprocessing of g,ranintars in order to gain efficiency may fail to terminate, as in left-corner and LR algorithms.</S>
    <S sid="19" ssid="18">Algorithms performing top-down prediction (e.g. top-down backtrack parsing, Earley's algorithm) may not terminate at parse time.</S>
    <S sid="20" ssid="19">Implementing backtracking regimens&#8212;useful for instance for generating parses in some particular order, say, in order of syntactic preference&#8212;is in general difficult when LR-style and top-down backtrack techniques are eliminated.</S>
    <S sid="21" ssid="20">In this paper, we discuss a solution to the problem of extending parsing algorithms to formalisms with possibly infinite nonterminal domains, a solution based on an operation we call restriction.</S>
    <S sid="22" ssid="21">In Section 2, we summarize traditional proposals for solutions and problems inherent in them and propose an alternative approach to a solution using restriction.</S>
    <S sid="23" ssid="22">In Section 3, we present some technical background including a brief description of the PATR-II formalism&#8212; which is used as the formalism interpreted by the parsing algorithms&#8212;and a formal definition of restriction for PATR-H's nonterminal domain.</S>
    <S sid="24" ssid="23">In Section 4, we develop a correct, complete and terminating extension of Earley's algorithm for the PATR-II formalism using the restriction notion.</S>
    <S sid="25" ssid="24">Readers uninterested in the technical details of the extensions may want to skip these latter two sections, referring instead to Section 4.1 for an informal overview of the algorithms.</S>
    <S sid="26" ssid="25">Finally, in Section 5, we discuss applications of the particular algorithm and the restriction technique in general.</S>
  </SECTION>
  <SECTION title="2 Traditional Solutions and an Alternative Approach" number="3">
    <S sid="27" ssid="1">Problems with efficiently parsing formalisms based on potentially infinite nonterminal domains have manifested themselves in many different ways.</S>
    <S sid="28" ssid="2">Traditional solutions have involved limiting in some way the class of grammars that can be parsed.</S>
    <S sid="29" ssid="3">The limitations can be applied to the formalism by, for instance. adding a context-free &amp;quot;backbone.&amp;quot; If we require that a context-free subgrammar be implicit in every grammar, the subgrammar can be used for parsing and the rest of the grammar used as a filter during or after parsing.</S>
    <S sid="30" ssid="4">This solution has been recommended for functional unification grammars (FUG) by Martin Kay 161; its legacy can be seen in the context-free skeleton of LFG, and the Hewlett-Packard GPSC; system 131, and in the cat feature requirement in PATR-Il that is described below.</S>
    <S sid="31" ssid="5">However, several problems inhere in this solution of mandating a context-free backbone.</S>
    <S sid="32" ssid="6">First, the move from context-free to complex-feature-based formalisms was motivated by the desire to structure the notion of nonterminal.</S>
    <S sid="33" ssid="7">Many analyses take advantage of this by eliminating mention of major category information from particular rules' or by structuring the major category itself (say into binary N and V features plus a bar-level feature as in X-based theories).</S>
    <S sid="34" ssid="8">Forcing the primacy and atomicity of major category defeats part of the purpose of structured category systems.</S>
    <S sid="35" ssid="9">Second. and perhaps more critically, because only certain of the information in a rule is used to guide the parse, say major category information, only such information can be used to filter spurious hypotheses by top-down filtering.</S>
    <S sid="36" ssid="10">Note that this problem occurs even if filtering by the rule information is used to eliminate at the earliest possible time constituents and partial constituents proposed during parsing (as is the case in the PATR-II implementation and the 'See. for instance, the coordination and copular &amp;quot;be&amp;quot; analyses from CPSC [41, the nested VP analysis used in some PATR-Il grammars 1151, or almost all categorial analyses, in which general rules of combination play the role of specific phrase-structure rules.</S>
    <S sid="37" ssid="11">Earley algorithm given below; cf. the Xerox LFG system).</S>
    <S sid="38" ssid="12">Thus, if information about subcategorization is left out of the category information in the context-free skeleton, it cannot be used to eliminate prediction edges.</S>
    <S sid="39" ssid="13">For example, if we find a verb that subcategorizes for a noun phrase, but the grammar rules allow postverbal NPs, PPs, s, VPs, and so forth, the parser will have no way to eliminate the building of edges corresponding to these categories.</S>
    <S sid="40" ssid="14">Only when such edges attempt to join with the V will the inconsistency be found.</S>
    <S sid="41" ssid="15">Similarly, if information about filler-gap dependencies is kept extrinsic to the category information, as in a slash category in GPSG or an LFG annotation concerning a matching constituent for a it specification, there will be no way to keep from hypothesizing gaps at any given vertex.</S>
    <S sid="42" ssid="16">This &amp;quot;gap-proliferation&amp;quot; problem has plagued many attempts at building parsers for grammar formalisms in this style.</S>
    <S sid="43" ssid="17">In fact, by making these stringent requirements on what information is used to guide parsing, we have to a certain extent thrown the baby out with the bathwater.</S>
    <S sid="44" ssid="18">These formalisms were intended to free us from the tyranny of atomic nonterminal symbols, but for good performance. we are forced toward analyses putting more and more information in an atomic category feature.</S>
    <S sid="45" ssid="19">An example of this phenomenon can be seen in the author's paper on LR syntactic preference parsing 1141.</S>
    <S sid="46" ssid="20">Because the LALR table building algorithm does not in general terminate for complex-featurebased grammar formalisms, the grammar used in that paper was a simple context-free grammar with subcategorization and gap information placed in the atomic nonterminal symbol.</S>
    <S sid="47" ssid="21">On the other hand, the grammar formalism can be left unchanged, but particular grammars developed that happen not to succumb to the problems inherent in the general parsing problem for the formalism.</S>
    <S sid="48" ssid="22">The solution mentioned above of placing more information in the category symbol falls into this class.</S>
    <S sid="49" ssid="23">Unpublished work by Kent Wit tenburg and by Robin Cooper has attempted to solve the gap proliferation problem using special grammars.</S>
    <S sid="50" ssid="24">In building a general tool for grammar testing and debugging, however, we would like to commit as little as possible to a particular grammar or style of grammar.</S>
    <S sid="51" ssid="25">= Furthermore, the grammar designer should not be held down in building an analysis by limitations of the algorithms.</S>
    <S sid="52" ssid="26">Thus a solution requiring careful crafting of grammars is inadequate.</S>
    <S sid="53" ssid="27">Finally, specialized parsing algorithms eau he designed that make use of information about the part Hilar grammar being parsed to eliminate spurious edges or hypotheses.</S>
    <S sid="54" ssid="28">Rather than using a general parsing algorithm on a limited formalism, Ford, Bresnan, and Kaplan [2] chose a specialized algorithm working on grammars in the full LFG formalism to model syntactic preferences.</S>
    <S sid="55" ssid="29">Current work at Hewlett-Packard on parsing recent variants of GPSG seems to take this line as well.</S>
    <S sid="56" ssid="30">Again, we feel that the separation of burden is inappropriate in such an attack, especially in a grammar-development context.</S>
    <S sid="57" ssid="31">Coupling the grammar design and parser design problems in this way leads to the linguistic and technological problems becoming inherently mixed, magnifying the difficulty of writing an adequate grammar/parser system.</S>
    <S sid="58" ssid="32">Instead, we would like a parsing algorithm that placed no restraints on the grammars it could handle as long as they could be expressed within the intended formalism.</S>
    <S sid="59" ssid="33">Still, the algorithm should take advantage of that part of the arbitrarily large amount of information in the complex-feature structures that is significant for guiding parsing with the particular grammar.</S>
    <S sid="60" ssid="34">One of the aforementioned solutions is to require the grammar writer to put all such significant information in a special atomic symbol&#8212;i.e., mandate a context-free backbone.</S>
    <S sid="61" ssid="35">Another is to use all of the feature structure information&#8212;but this method, as we shall see, inevitably leads to nonterminating algorithms.</S>
    <S sid="62" ssid="36">A compromise is to parameterize the parsing algorithm by a small amount of grammar-dependent information that tells the algorithm which of the information in the feature structures is significant for guiding the parse.</S>
    <S sid="63" ssid="37">That is, the parameter determines how to split up the infinite nonterminal domain into a finite set of equivalence classes that can be used for parsing.</S>
    <S sid="64" ssid="38">By doing so, we have an optimal compromise: Whatever part of the feature structure is significant we distinguish in the equivalence classes by setting the parameter appropriately, so the information is used in parsing.</S>
    <S sid="65" ssid="39">But because there are only a finite number of equivalence classes, parsing algorithms guided in this way will terminate.</S>
    <S sid="66" ssid="40">The technique we use to form equivalence classes is restriction, which involves taking a quotient of the domain with respect to a restrictor.</S>
    <S sid="67" ssid="41">The restrictor thus serves as the sole repository of grammar-dependent information in the algorithm.</S>
    <S sid="68" ssid="42">By tuning the restrictor, the set of equivalence classes engendered can be changed, making the algorithm more or less efficient at guiding the parse.</S>
    <S sid="69" ssid="43">But independent of the restrictor, the algorithm will be correct, since it is still doing parsing over a finite domain of &amp;quot;nonterminals,&amp;quot; namely, the elements of the restricted domain.</S>
    <S sid="70" ssid="44">This idea can be applied to solve many of the problems engendered by infinite nonterminal domains, allowing preprocessing of grammars as required by LR and LC algorithms, allowing top-down filtering or prediction as in Earley and top-down backtrack parsing, guaranteeing termination, etc.</S>
  </SECTION>
  <SECTION title="3 Technical Preliminaries" number="4">
    <S sid="71" ssid="1">Before discussing the use of restriction in parsing algorithms, we present some technical details, including a brief introduction to the PATR-II grammar formalism, which will serve as the grammatical formalism that the presented algorithms will interpret.</S>
    <S sid="72" ssid="2">PATR-II is a simple grammar formalism that can serve as the least common denominator of many of the complex-feature-based and unification-based formalisms prevalent in linguistics and computational linguistics.</S>
    <S sid="73" ssid="3">As such it provides a good testbed for describing algorithms for complex-feature-based formalisms.</S>
    <S sid="74" ssid="4">The PATR-II nonterminal domain is a lattice of directed, acyclic, graph structures (dags).3 Dags can be thought of as similar to the reentrant f-structures of LFG or functional structures of FUG, and we will use the bracketed notation associated with these formalisms for them.</S>
    <S sid="75" ssid="5">For example. the following is a dag (D0) in this notation, with reentrancy indicated with coindexing boxes: Dags come in two varieties, complex (like the one above) and atomic (like the dags h and c in the example).</S>
    <S sid="76" ssid="6">Complex dags can be viewed as partial functions from labels to dag values, and the notation D(l) will therefore denote the value associated with the label / in the dag D. In the same spirit. we can refer to the domain of a dag (dorn(D)).</S>
    <S sid="77" ssid="7">A dag with an empty domain is often called an empty dag or variable.</S>
    <S sid="78" ssid="8">A path in a dag is a sequence of label names (notated, e.g.. (d e I)), which can be used to pick out a particular subpart of the dag by repeated application (in this case, the dag (g : hi).</S>
    <S sid="79" ssid="9">We will extend the notation D(p) in the obvious way to include the subdag of D picked out by a path p. We will also occasionally use the square brackets as the Hag constructor function, so that If : Di where D is an expression denoting a dag will denote the dag whose f feature has value D. There is a natural lattice structure for dags based on substimption&#8212;an ordering on (lags that roughly corre,pow Is to the compatibility and relative specificity of information 3 The reader is referred to earlier works 115,101 for more detailed discussions of dag structures. contained in the dags.</S>
    <S sid="80" ssid="10">Intuitively viewed, a dag D subsumes a dag D' (notated DC D') if D contains a subset of the information in (i.e., is more general than) U.</S>
    <S sid="81" ssid="11">Thus variables subsume all other dags, atomic or complex, because as the trivial case, they contain no information at all.</S>
    <S sid="82" ssid="12">A complex dag D subsumes a complex dag Ds if and only if D(1) C DT) for all I E dom(D) and Ds(P) = f/(q) for all paths p and q such that D(p) = D(q).</S>
    <S sid="83" ssid="13">An atomic dag neither subsumes nor is subsumed by any different atomic dag.</S>
    <S sid="84" ssid="14">For instance, the following subsumption relations hold: Finally, given two dags D' and D&amp;quot;, the unification of the dags is the most general dag D such that D' C D and D&amp;quot; C D. We notate this D = D' U D&amp;quot;.</S>
    <S sid="85" ssid="15">The following examples illustrate the notion of unification: The unification of two dags is not always well-defined.</S>
    <S sid="86" ssid="16">In the cases where no unification exists, the unification is said to fail.</S>
    <S sid="87" ssid="17">For example the following pair of dags fail to unify with each other: [a: 1 a: (b : cl 1 &#8222; id: al JULd: [b:dli=16.</S>
    <S sid="88" ssid="18">&#8226; Now, consider the notion of restriction of a dag, using the term almost in its technical sense of restricting the domain of a function.</S>
    <S sid="89" ssid="19">By viewing dags as partial functions from labels to dag values, we can envision a process of restricting the domain of this function to a given set of labels.</S>
    <S sid="90" ssid="20">Extending this process recursively to every level of the (lag, we have the concept of restriction used below.</S>
    <S sid="91" ssid="21">Given a finite specification (I) (called a restrictor) of what the allowable domain at each node of a dag is, we can define a functional, that yields the dag restricted by the given restrictor.</S>
    <S sid="92" ssid="22">Formally, we define restriction as follows.</S>
    <S sid="93" ssid="23">Given a relation 41 between paths and labels, and a dag D, we define Dt4) to be the most specific dag D' D such that for every path p either De(p) is undefined, or LY(p) is atomic, or for every 1 E dom(Ds(p)), p(111.</S>
    <S sid="94" ssid="24">That is, every path in the restricted dag is either undefined, atomic, or specifically allowed by the restrictor.</S>
    <S sid="95" ssid="25">The restriction process can be viewed as putting dags into equivalence classes, each equivalence class being the largest set of dags that all are restricted to the same dag (which we will call its canonical member).</S>
    <S sid="96" ssid="26">It follows from the definition that in general DM) C D. Finally, if we disallow infinite relations as restrictors (i.e., restrictors must not allow values for an infinite number of distinct paths) as we will do for the remainder of the discussion, we are guaranteed to have only a finite number of equivalence classes.</S>
    <S sid="97" ssid="27">Actually, in the sequel we will use a particularly simple subclass of restrictors that are generable from sets of paths.</S>
    <S sid="98" ssid="28">Given a set of paths s, we can define (I) such that p43.1 if and only if p is a prefix of some p' E s. Such restrictors can be understood as &amp;quot;throwing away' all values not lying on one of the given paths.</S>
    <S sid="99" ssid="29">This subclass of restrictors is sufficient for most applications.</S>
    <S sid="100" ssid="30">However, the algorithms that we will present apply to the general class as well.</S>
    <S sid="101" ssid="31">Using our previous example, consider a restrictor 00 generated from the set of paths ((a b), (d e 1), (d ij f)}.</S>
    <S sid="102" ssid="32">That is, p4'01 for all p in the listed paths and all their prefixes.</S>
    <S sid="103" ssid="33">Then given the previous dag Do, D0f40 is Restriction has thrown away all the information except the direct values of (a b), (d e f), and (d if P. (Note however that because the values for paths such as (d e f (j) were thrown away, (Do(t(too)(((l e f)) is a variable.)</S>
    <S sid="104" ssid="34">PATR-II rules describe how to combine a sequence of constituents.</S>
    <S sid="105" ssid="35">X1 V, to form a constituent No, stating mutual constraints on the dags associated with the n + 1 constituents as unifications of various parts of the dags.</S>
    <S sid="106" ssid="36">For instance, we might have the following rule: By notational convention, we can eliminate unifications for the special feature cat (the atomic major category feature) recording this information implicitly by using it in the &amp;quot;name&amp;quot; of the constituent, e.g., If we require that this notational convention always be used (in so doing, guaranteeing that each constituent have an atomic major category associated with it), we have thereby mandated a context-free backbone to the grammar, and can then use standard context-free parsing algorithms to parse sentences relative to grammars in this formalism.</S>
    <S sid="107" ssid="37">Limiting to a context-free-based PATR-II is the solution that previous implementations have incorporated.</S>
    <S sid="108" ssid="38">Before proceeding to describe parsing such a context-freebased PATR-II, we make one more purely notational change.</S>
    <S sid="109" ssid="39">Rather than associating with each grammar rule a set of unifications, we instead associate a dag that incorporates all of those unifications implicitly, i.e., a rule is associated with a dag D, such that for all unifications of the form p q in the rule.</S>
    <S sid="110" ssid="40">D,(p) = D,(q).</S>
    <S sid="111" ssid="41">Similarly, unifications of the form p = a where a is atomic would require that D,(p) = a.</S>
    <S sid="112" ssid="42">For the rule mentioned above, such a dag would be Thus a rule can be thought of as an ordered pair (P, D) whore P is a production of the form Xo &#8212; &#8226; &#8226; X&#8222; and D is a (lag with top-level features X0, , X&#8222; and with atomic values for the cat feature of each of the top-level subdags.</S>
    <S sid="113" ssid="43">The two notational conventions&#8212;using sets of unifications instead of dags, and putting the cat feature information implicitly in the names of the constituents&#8212;allow us to write rules in the more compact and familiar.format above, rather than this final cumbersome way presupposed by the algorithm.</S>
  </SECTION>
  <SECTION title="4 Using Restriction to Extend Ear-. ley's Algorithm for PATR-II" number="5">
    <S sid="114" ssid="1">We now develop a concrete example of the use of restriction in parsing by extending Earley's algorithm to parse grammars in the PATR-II formalism just presented.</S>
    <S sid="115" ssid="2">Earley's algorithm L1 a bottom-up parsing algorithm that uses top-down prediction to hypothesize the starting points of possible constituents.</S>
    <S sid="116" ssid="3">Typically, the prediction step determines which categories of constituent can start at a given point in a sentence.</S>
    <S sid="117" ssid="4">But when most of the information is not in an atomic category symbol, such prediction is relatively useless and many types of constituents are predicted that could never be involved in a completed parse.</S>
    <S sid="118" ssid="5">This standard Earley's algorithm is presented in Section 4.2.</S>
    <S sid="119" ssid="6">By extending the algorithm so that the prediction step determines which dogs can start at a given point, we can use the information in the features to be more precise in the predictions and eliminate many hypotheses.</S>
    <S sid="120" ssid="7">However, because there are a potentially infinite number of such feature structures, the prediction step may never terminate.</S>
    <S sid="121" ssid="8">This extended Earley's algorithm is presented in Section 4.3.</S>
    <S sid="122" ssid="9">We compromise by having the prediction step determine which restricted dags can start at a given point.</S>
    <S sid="123" ssid="10">If the restrictor is chosen appropriately, this can be as constraining as predicting on the basis of the whole feature structure, yet prediction is guaranteed to terminate because the domain of restricted feature structures is finite.</S>
    <S sid="124" ssid="11">This final extension of Earley's algorithm is presented in Section 4.4.</S>
    <S sid="125" ssid="12">We start with the Earley algorithm for context-free-based PATR-II on which the other algorithms are based.</S>
    <S sid="126" ssid="13">The algorithm is described in a chart-parsing incarnation, vertices numbered from 0 to n for an n-word sentence wi &#8226; &#8226; w&#8222;.</S>
    <S sid="127" ssid="14">An item of the form [h, i, A &#8212; ct./3, DI designates an edge in the chart from vertex h to i with dotted rule .4 &#8212; a-3 and dag D. The chart is initialized with an edge [0,0, X0 &#8212; .a, DI for each rule (X0 a, D) where D((X0 eat)) = S. For each vertex i do the following steps until no more items can be added: Predictor step: For each item ending at i of the formi [h, i, X0 a.X;3, DI and each rule of the form (X0 &#8212; -I, E) such that E((Xo cat)) = D((X; cat)), add an edge of the form e, X0 &#8212; El if this edge is not subsumed by another edge.</S>
    <S sid="128" ssid="15">Informally, this involves predicting top-down all rules whose left-hand-side category matches the category of some constituent being looked for.</S>
    <S sid="129" ssid="16">Completer step: For each item of the form [h, 1, .V0 &#8212; a., DI and each item of the form [y. h, X0 &#8212; E.] add the item 19,1, Xo Eu [X : D(X0)IJ if the unification succeeds' and this edge is not subsumed by another edge.' no edge will be added, i.e., if the subphrase is not of the appropriate category for Insertion Into the phrase being built.</S>
    <S sid="130" ssid="17">'One edge subsumes another edge if and only if the first three elements of the edges are identical and the fourth element of the first edge subsumes that of the second edge.</S>
    <S sid="131" ssid="18">Informally, this involves forming a new partial phrase whenever the category of a constituent needed by one partial phrase matches the category of a completed phrase and the dag associated with the completed phrase can be unified in appropriately.</S>
    <S sid="132" ssid="19">Scanner step: If i 0 and tv; = a, then for all items (h, i &#8212; 1, X0 a.a13, DI add the item [h, i, X0 oia.fl, Di.</S>
    <S sid="133" ssid="20">Informally, this involves allowing lexical items to be inserted into partial phrases.</S>
    <S sid="134" ssid="21">Notice that the Predictor Step in particular assumes the availability of the cat feature for top-down prediction.</S>
    <S sid="135" ssid="22">Consequently, this algorithm applies only to PATR-II with a context-free base.</S>
    <S sid="136" ssid="23">A first attempt at extending the algorithm to make use of more than just a single atomic-valued cal feature (or less if no such feature is mandated) is to change the Predictor Step so that instead of checking the predicted rule for a lefthand side that matches its cat feature with the predicting subphrase, we require that the whole left-hand-side subdag unifies with the subphrase being predicted from.</S>
    <S sid="137" ssid="24">Formally, we have Predictor step: For each item ending at i of the form [h. i. X0 D1 and each rule of the form (X0 E). add an edge of the form 11,1, Xe &#8212; Eu (Xo D(X1)11 if the unification succeeds and this edge is not subsumed by another edge.</S>
    <S sid="138" ssid="25">This step predicts top-down all rides whose left-hand side matches the dag of some constituent being looked for.</S>
    <S sid="139" ssid="26">Completer step: As before.</S>
    <S sid="140" ssid="27">Scanner step: As before.</S>
    <S sid="141" ssid="28">However, this extension does not preserve termination.</S>
    <S sid="142" ssid="29">Consider a &amp;quot;counting' grammar that records in the dag the number of terminals in the string.&#176; A -- a. and so forth ad infinitum.</S>
    <S sid="143" ssid="30">What is needed is a way of 'forgetting' some of the structure we are using for top-down prediction.</S>
    <S sid="144" ssid="31">But this is just what restriction gives us, since a restricted dag always subsumes the original, i.e., it has strictly less information.</S>
    <S sid="145" ssid="32">Taking advantage of this property. we can change the Prediction Step to restrict the top-down information before unif&#9632; lug it into the rule's dag.</S>
    <S sid="146" ssid="33">Predictor step: For each item ending at i of the form 1h, i, X0 &#8212; D) and each rule of the form,(X0 &#8212; E), add an edge of the form 11,1, X0 &#8212; E u (D(X1)1`4:)1 if the unification succeeds and this edge is not subsumed by another edge.</S>
    <S sid="147" ssid="34">This step predicts top-down all rules frh,,se left-hand side matches the restricted dag of some constituent being looked for.</S>
    <S sid="148" ssid="35">This algorithm on the previous grammar, using a restrictor that allows through only the cat feature of a dag, operates as before, but predicts the first time around the more general edge: Another round of prediction yields this same edge so the process terminates immediately. duck Because the predicted edge is more general than (i.e., subsumes) all the infinite number of edges it replaced that were predicted under the nonterminating extension, it preserves completeness.</S>
    <S sid="149" ssid="36">On the other hand, because the predicted edge is not more general than the rule itself, it permits no constituents that violate the constraints of the rule; therefore, it preserves correctness.</S>
    <S sid="150" ssid="37">Finally, because restriction has a finite range, the prediction step can only occur a finite number of times before building an edge identical to one already built; therefore, it preserves termination.</S>
  </SECTION>
  <SECTION title="5 Applications" number="6">
    <S sid="151" ssid="1">The algorithm just. described has been implemented and incorporated into the PATR-II Experimental System at.</S>
    <S sid="152" ssid="2">SRI International. a grammar development and testing environment for PAT grammars written in Zetalisp for the Symbolics 3Witi.</S>
    <S sid="153" ssid="3">The following table gives some data suggestive of the of- fect of the restrictor on parsing efficiency.</S>
    <S sid="154" ssid="4">It shows the total number of active and passive edges added to the chart for five sentences of up to eleven words using four different restrictors.</S>
    <S sid="155" ssid="5">The first allowed only category information to be useI in prediction, thus generating the same behavior as the unextended Earley's algorithm.</S>
    <S sid="156" ssid="6">The second added subcate. g,orizati(in information in addition to the category.</S>
    <S sid="157" ssid="7">The third added liller-gap dependency information as well so that the gap proliferaticm priiblem was removed.</S>
    <S sid="158" ssid="8">The final restrictor added verb form information.</S>
    <S sid="159" ssid="9">The last cohunn shows the percentage of edges that were eliminated by using this final restrictor.</S>
    <S sid="160" ssid="10">Several facts should be kept in mind about the data above.</S>
    <S sid="161" ssid="11">First, for sentences with no Wh-movement or relative clauses, no gaps were ever predicted.</S>
    <S sid="162" ssid="12">In other words, the top-down filtering is in some sense maximal with respect to gap hypothesis.</S>
    <S sid="163" ssid="13">Second, the subcategorization information used in top-down filtering removed all hypotheses of constituents except for those directly subcategorized for.</S>
    <S sid="164" ssid="14">Finally, the grammar used contained constructs that would cause nonterrnination in the unrestricted extension of Earley's algorithm.</S>
    <S sid="165" ssid="15">This technique of restriction of complex-feature structures into a finite set of equivalence classes can be used for a wide variety of purposes.</S>
    <S sid="166" ssid="16">First, parsing algorithms such as the above can be modified for use by grammar formalisms other than PATR-II.</S>
    <S sid="167" ssid="17">In particular. defin ite-c lause grammars are amenable to this technique, and it can be used to extend the Earley deduction of Pereira and Warren [I LI.</S>
    <S sid="168" ssid="18">Pereira has used a similar technique to improve the efficiency of the RUP (bottomup left-corner) parser 171 for DCG.</S>
    <S sid="169" ssid="19">I,FC and (PSG parsers can make rise of the top-down filtering device as Well.</S>
    <S sid="170" ssid="20">El'C parsers might be built that do not require a context-free backbone.</S>
    <S sid="171" ssid="21">Second, restriction ran be used to enhane4. it her parsing algorithms.</S>
    <S sid="172" ssid="22">For example. the ancillary rimrt ion to compfite 1.1t closure-- which, like the Earley algorithm. either does not use feature information, or fails to terminate&#8212;can be modified in the same way as the Earley predictor step to terminate while still using significant feature information.</S>
    <S sid="173" ssid="23">EA parsing techniques can thereby 1)0 used for efficient parsing if complex-feature-based formalisms.</S>
    <S sid="174" ssid="24">More speculatively. schemes for scheduling LH parsers to yield p.irses ill preference order might be modified for complex-foal ure-kisod formalisms, and even timed by means of the restrictor.</S>
    <S sid="175" ssid="25">Finally, restriction can be used in areas of parsing other than top-down prediction and filtering.</S>
    <S sid="176" ssid="26">For instance, in many parsing schemes, edges are indexed by a category symbol for efficient retrieval.</S>
    <S sid="177" ssid="27">In the case of Earley's algorithm. active edges can be indexed by the category of the constituent following the dot in the (lotted rule.</S>
    <S sid="178" ssid="28">However, this again forces the primacy and atomicity of major category information.</S>
    <S sid="179" ssid="29">Once again, restriction can be used to solve the problem.</S>
    <S sid="180" ssid="30">Indexing by the restriction of the dag associated with the need pgrmits efficient retrieval that can be tuned to the particular grammar, yet does not affect the completeness or correctness of the algorithm.</S>
    <S sid="181" ssid="31">The indexing can be done by discrimination nets, or specialized hashing functions akin to the partial-match retrieval techniques designed for use in Prolog implementations [161.</S>
  </SECTION>
  <SECTION title="6 Conclusion" number="7">
    <S sid="182" ssid="1">We have presented a general technique of restriction with many applications in the area of manipulating complexfeature-based grammar formalisms.</S>
    <S sid="183" ssid="2">As a particular example, we presented a complete, correct, terminating extension of Earley's algorithm that uses restriction to perform top-down filtering.</S>
    <S sid="184" ssid="3">Our implementation demonstrates the drastic elimination of chart edges that can be achieved by this technique.</S>
    <S sid="185" ssid="4">Finally, we described further uses for the technique&#8212;including parsing other grammar formalisms, including definite-clause grammars; extending other parsing algorithms, including LR methods and syntactic preference modeling algorithms; and efficient indexing.</S>
    <S sid="186" ssid="5">We feel that the restriction technique has great potential to make increasingly powerful grammar formalisms computationally feasible.</S>
  </SECTION>
</PAPER>
