<PAPER>
  <S sid="0">Learning to Translate with Source and Target Syntax</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Statistical translation models that try to capture the recursive structure of language have been widely adopted over the last few years.</S>
    <S sid="2" ssid="2">These models make use of varying amounts of information from linguistic theory: some use none at all, some use information about the grammar of the target language, some use information about the grammar of the source language.</S>
    <S sid="3" ssid="3">But progress has been slower on translation models that are able to learn the relationship between the grammars of both the source and target language.</S>
    <S sid="4" ssid="4">We discuss the reasons why this has been a challenge, review existing attempts to meet this challenge, and show how some old and new ideas can be combined into a simple approach that uses both source and target syntax for significant improvements in translation accuracy.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">Statistical translation models that use synchronous context-free grammars (SCFGs) or related formalisms to try to capture the recursive structure of language have been widely adopted over the last few years.</S>
    <S sid="6" ssid="2">The simplest of these (Chiang, 2005) make no use of information from syntactic theories or syntactic annotations, whereas others have successfully incorporated syntactic information on the target side (Galley et al., 2004; Galley et al., 2006) or the source side (Liu et al., 2006; Huang et al., 2006).</S>
    <S sid="7" ssid="3">The next obvious step is toward models that make full use of syntactic information on both sides.</S>
    <S sid="8" ssid="4">But the natural generalization to this setting has been found to underperform phrasebased models (Liu et al., 2009; Ambati and Lavie, 2008), and researchers have begun to explore solutions (Zhang et al., 2008; Liu et al., 2009).</S>
    <S sid="9" ssid="5">In this paper, we explore the reasons why treeto-tree translation has been challenging, and how source syntax and target syntax might be used together.</S>
    <S sid="10" ssid="6">Drawing on previous successful attempts to relax syntactic constraints during grammar extraction in various ways (Zhang et al., 2008; Liu et al., 2009; Zollmann and Venugopal, 2006), we compare several methods for extracting a synchronous grammar from tree-to-tree data.</S>
    <S sid="11" ssid="7">One confounding factor in such a comparison is that some methods generate many new syntactic categories, making it more difficult to satisfy syntactic constraints at decoding time.</S>
    <S sid="12" ssid="8">We therefore propose to move these constraints from the formalism into the model, implemented as features in the hierarchical phrasebased model Hiero (Chiang, 2005).</S>
    <S sid="13" ssid="9">This augmented model is able to learn from data whether to rely on syntax or not, or to revert back to monotone phrase-based translation.</S>
    <S sid="14" ssid="10">In experiments on Chinese-English and ArabicEnglish translation, we find that when both source and target syntax are made available to the model in an unobtrusive way, the model chooses to build structures that are more syntactically well-formed and yield significantly better translations than a nonsyntactic hierarchical phrase-based model.</S>
  </SECTION>
  <SECTION title="2 Grammar extraction" number="2">
    <S sid="15" ssid="1">A synchronous tree-substitution grammar (STSG) is a set of rules or elementary tree pairs ('y, &#945;), where: of packed forests instead of pairs of trees.</S>
    <S sid="16" ssid="2">Since a packed forest is much more likely to include the correct tree, it is less likely that parser errors will cause good rules to be filtered out.</S>
    <S sid="17" ssid="3">However, even on human-annotated data, treeto-tree extraction misses many rules, and many such rules would seem to be useful.</S>
    <S sid="18" ssid="4">For example, in Figure 2, the whole English phrase &#8220;Taiwan&#8217;s...shores&#8221; is an NP, but its Chinese counterpart is not a constituent.</S>
    <S sid="19" ssid="5">Furthermore, neither &#8220;surplus...shores&#8221; nor its Chinese counterpart are constituents.</S>
    <S sid="20" ssid="6">But both rules are arguably useful for translation.</S>
    <S sid="21" ssid="7">Wellington et al. therefore argue that in order to extract as many rules as possible, a more powerful formalism than synchronous CFG/TSG is required: for example, generalized multitext grammar (Melamed et al., 2004), which is equivalent to synchronous set-local multicomponent CFG/TSG (Weir, 1988).</S>
    <S sid="22" ssid="8">But the problem illustrated in Figure 2 does not reflect a very deep fact about syntax or crosslingual divergences, but rather choices in annotation style that interact badly with the exact treeto-tree extraction heuristic.</S>
    <S sid="23" ssid="9">On the Chinese side, the IP is too flat (because &#21488;&#28286;/T&#225;iw&#257;n has been analyzed as a topic), whereas the more articulated structure would also be quite reasonable.</S>
    <S sid="24" ssid="10">On the English side, the high attachment of the PP disagrees with the corresponding Chinese structure, but low attachment also seems reasonable: Thus even in the gold-standard parse trees, phrase structure can be underspecified (like the flat IP above) or uncertain (like the PP attachment above).</S>
    <S sid="25" ssid="11">For this reason, some approaches work with a more flexible notion of constituency.</S>
    <S sid="26" ssid="12">Synchronous tree-sequence&#8211;substitution grammar (STSSG) allows either side of a rule to comprise a sequence of trees instead of a single tree (Zhang et al., 2008).</S>
    <S sid="27" ssid="13">In the substitution operation, a sequence of sister substitution nodes is rewritten with a tree sequence of equal length (see Figure 3a).</S>
    <S sid="28" ssid="14">This extra flexibility effectively makes the analysis (1) available to us.</S>
    <S sid="29" ssid="15">Any STSSG can be converted into an equivalent STSG via the creation of virtual nodes (see Figure 3b): for every elementary tree sequence with roots X1, ... , Xn, create a new root node with a that differ only in their nonterminal labels, only the most-frequent rule is kept, and its count is the total count of all the rules.</S>
    <S sid="30" ssid="16">This means that there is a one-to-one correspondence between the rules extracted by fuzzy tree-to-tree extraction and hierarchical string-to-string extraction.</S>
    <S sid="31" ssid="17">Fuzzy tree-to-tree extraction (like string-to-string extraction) generates many times more rules than exact tree-to-tree extraction does.</S>
    <S sid="32" ssid="18">In Figure 2, we observed that the flat structure of the Chinese IP prevented exact tree-to-tree extraction from extracting a rule containing just part of the IP, for example: Fuzzy tree-to-tree extraction allows any of these to be the source side of a rule.</S>
    <S sid="33" ssid="19">We might think of it as effectively restructuring the trees by inserting nodes with complex labels.</S>
    <S sid="34" ssid="20">However, it is not possible to represent this restructuring with a single tree (see Figure 4).</S>
    <S sid="35" ssid="21">More formally, let us say that two phrases wi &#183; &#183; &#183; wj&#8722;1 and wi&#8242; &#183; &#183; &#183; wj&#8242;&#8722;1 nest if i &lt; i&#8242; &lt; j&#8242; &lt; j or i&#8242; &lt; i &lt; j &lt; j&#8242;; otherwise, they cross.</S>
    <S sid="36" ssid="22">The two Chinese phrases (4) and (5) cross, and therefore cannot both be constituents in the same tree.</S>
    <S sid="37" ssid="23">In other words, exact tree-to-tree extraction commits to a single structural analysis but fuzzy tree-to-tree extraction pursues many restructured analyses at once.</S>
    <S sid="38" ssid="24">We can strike a compromise by continuing to allow SAMT-style complex categories, but committing to a single analysis by requiring all phrases to nest.</S>
    <S sid="39" ssid="25">To do this, we use a simple heuristic.</S>
    <S sid="40" ssid="26">Iterate through all the phrase pairs (f, e) in the following order: For each phrase pair, accept it if it does not cross any previously accepted phrase pair; otherwise, reject it.</S>
    <S sid="41" ssid="27">Because this heuristic produces a set of nesting phrases, we can represent them all in a single restructured tree.</S>
    <S sid="42" ssid="28">In Figure 4, this heuristic chooses structure (a) because the English-side counterpart of IP/VP has the simple category NP.</S>
  </SECTION>
  <SECTION title="3 Decoding" number="3">
    <S sid="43" ssid="1">In decoding, the rules extracted during training must be reassembled to form a derivation whose source side matches the input sentence.</S>
    <S sid="44" ssid="2">In the exact tree-to-tree approach, whenever substitution is performed, the root labels of the substituted trees must match the labels of the substitution nodes&#8212;call this the matching constraint.</S>
    <S sid="45" ssid="3">Because this constraint must be satisfied on both the source and target side, it can become difficult to generalize well from training examples to new input sentences.</S>
    <S sid="46" ssid="4">Venugopal et al. (2009), in the string-to-tree setting, attempt to soften the data-fragmentation effect of the matching constraint: instead of trying to find the single derivation with the highest probability, they sum over derivations that differ only in their nonterminal labels and try to find the single derivation-class with the highest probability.</S>
    <S sid="47" ssid="5">Still, only derivations that satisfy the matching constraint are included in the summation.</S>
    <S sid="48" ssid="6">But in some cases we may want to soften the matching constraint itself.</S>
    <S sid="49" ssid="7">Some syntactic categories are similar enough to be considered compatible: for example, if a rule rooted in VBD (pasttense verb) could substitute into a site labeled VBZ (present-tense verb), it might still generate correct output.</S>
    <S sid="50" ssid="8">This is all the more true with the addition of SAMT-style categories: for example, if a rule rooted in ADVP * VP could substitute into a site labeled VP, it would very likely generate correct output.</S>
    <S sid="51" ssid="9">Since we want syntactic information to help the model make good translation choices, not to rule out potentially correct choices, we can change the way the information is used during decoding: we allow any rule to substitute into any site, but let the model learn which substitutions are better than others.</S>
    <S sid="52" ssid="10">To do this, we add the following features to the model: iments.</S>
    <S sid="53" ssid="11">&#8220;Loose source/target&#8221; is the maximum number of unaligned source/target words at the endpoints of a phrase. limit, above which the glue rule must be used.</S>
    <S sid="54" ssid="12">We trained two 5-gram language models: one on the combined English halves of the bitexts, and one on two billion words of English.</S>
    <S sid="55" ssid="13">These were smoothed using modified Kneser-Ney (Chen and Goodman, 1998) and stored using randomized data structures similar to those of Talbot and Brants (2008).</S>
    <S sid="56" ssid="14">The base feature set for all systems was similar to the expanded set recently used for Hiero (Chiang et al., 2009), but with bigram features (source and target word) instead of trigram features (source and target word and neighboring source word).</S>
    <S sid="57" ssid="15">For all systems but the baselines, the features described in Section 3 were added.</S>
    <S sid="58" ssid="16">The systems were trained using MIRA (Crammer and Singer, 2003; Chiang et al., 2009) on a tuning set of about 3000 sentences of newswire from NIST MT evaluation data and GALE development data, disjoint from the training data.</S>
    <S sid="59" ssid="17">We optimized feature weights on 90% of this and held out the other 10% to determine when to stop.</S>
  </SECTION>
  <SECTION title="4.2 Results" number="4">
    <S sid="60" ssid="1">Table 3 shows the scores on our development sets and test sets, which are about 3000 and 2000 sentences, respectively, of newswire drawn from NIST MT evaluation data and GALE development data and disjoint from the tuning data.</S>
    <S sid="61" ssid="2">For Chinese, we first tried increasing the distortion limit from 10 words to 20.</S>
    <S sid="62" ssid="3">This limit controls how deeply nested the tree structures built by the decoder are, and we want to see whether adding syntactic information leads to more complex structures.</S>
    <S sid="63" ssid="4">This change by itself led to an increase in the BLEU score.</S>
    <S sid="64" ssid="5">We then compared against two systems using tree-to-tree grammars.</S>
    <S sid="65" ssid="6">Using exact tree-to-tree extraction, we got a much smaller grammar, but decreased accuracy on all but the Chinese-English test set, where there was no significant change.</S>
    <S sid="66" ssid="7">But with fuzzy tree-to-tree extraction, we obtained an improvement of +0.6 on both Chinese-English sets, and +0.7/+0.8 on the ArabicEnglish sets.</S>
    <S sid="67" ssid="8">Applying the heuristic for nesting phrases reduced the grammar sizes dramatically (by a factor of 2.4 for Chinese and 4.2 for Arabic) but, interestingly, had almost no effect on translation quality: a slight decrease in BLEU on the Arabic-English development set and no significant difference on the other sets.</S>
    <S sid="68" ssid="9">This suggests that the strength of fuzzy tree-to-tree extraction lies in its ability to break up flat structures and to reconcile the source and target trees with each other, rather than multiple restructurings of the training trees.</S>
    <S sid="69" ssid="10">We then took a closer look at the behavior of the string-to-string and fuzzy tree-to-tree grammars (without the nesting heuristic).</S>
    <S sid="70" ssid="11">Because the rules of these grammars are in one-to-one correspondence, we can analyze the string-to-string system&#8217;s derivations as though they had syntactic categories.</S>
    <S sid="71" ssid="12">First, Table 4 shows that the system using the tree-to-tree grammar used the glue rule much less and performed more matching substitutions.</S>
    <S sid="72" ssid="13">That is, in order to minimize errors on the tuning set, the model learned to build syntactically richer and more well-formed derivations.</S>
    <S sid="73" ssid="14">Tables 5 and 6 show how the new syntax features affected particular substitutions.</S>
    <S sid="74" ssid="15">In general we see a shift towards more matching substitutions; correct placement of punctuation is particularly emphasized.</S>
    <S sid="75" ssid="16">Several changes appear to have to do with definiteness of NPs: on the English side, adding the syntax features encourages matching substitutions of type DT \ NP-C (anarthrous NP), but discourages DT \ NP-C and NN from substituting into NP-C and vice versa.</S>
    <S sid="76" ssid="17">For example, a translation with the rewriting NP-C &#8212;* DT \ NP-C begins with &#8220;24th meeting of the Standing Committee...,&#8221; but the system using the fuzzy tree-to-tree grammar changes this to &#8220;The 24th meeting of the Standing Committee....&#8221; The root features had a less noticeable effect on rule choice; one interesting change was that the frequency of rules with Chinese root VP / IP and English root VP / S-C increased from 0.2% to 0.7%: apparently the model learned that it is good to use rules that pair Chinese and English verbs that subcategorize for sentential complements.</S>
  </SECTION>
  <SECTION title="5 Conclusion" number="5">
    <S sid="77" ssid="1">Though exact tree-to-tree translation tends to hamper translation quality by imposing too many constraints during both grammar extraction and decoding, we have shown that using both source and target syntax improves translation accuracy when the model is given the opportunity to learn from data how strongly to apply syntactic constraints.</S>
    <S sid="78" ssid="2">Indeed, we have found that the model learns on its own to choose syntactically richer and more wellformed structures, demonstrating that source- and target-side syntax can be used together profitably as long as they are not allowed to overconstrain the translation model.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="6">
    <S sid="79" ssid="1">Thanks to Steve DeNeefe, Adam Lopez, Jonathan May, Miles Osborne, Adam Pauls, Richard Schwartz, and the anonymous reviewers for their valuable help.</S>
    <S sid="80" ssid="2">This research was supported in part by DARPA contract HR0011-06-C-0022 under subcontract to BBN Technologies and DARPA contract HR0011-09-1-0028.</S>
    <S sid="81" ssid="3">S. D. G. rewrites in Chinese-English translation between string-to-string (s-to-s) and fuzzy tree-to-tree (t-tot) grammars.</S>
    <S sid="82" ssid="4">All rewrites occurring more than 1% of the time in either system are shown.</S>
    <S sid="83" ssid="5">The label &#8220;entity&#8221; stands for handwritten rules for named entities and numbers. rewrites in Chinese-English translation between string-to-string (s-to-s) and fuzzy tree-to-tree (tto-t) grammars.</S>
    <S sid="84" ssid="6">All rewrites occurring more than 1% of the time in either system are shown, plus a few more of interest.</S>
    <S sid="85" ssid="7">The label &#8220;entity&#8221; stands for handwritten rules for named entities and numbers.</S>
  </SECTION>
</PAPER>
