<PAPER>
	<S sid="0">The Importance Of Supertagging For Wide-Coverage CCG Parsing</S><ABSTRACT>
		<S sid="1" ssid="1">This paper describes the role of supertagging in a wide-coverage CCG parser which uses a log-linear model to select an analysis.</S>
		<S sid="2" ssid="2">The supertagger reduces the derivation space over which model estimation is performed, reducing the space required for discriminative training.</S>
		<S sid="3" ssid="3">It also dramatically increases the speed of the parser.</S>
		<S sid="4" ssid="4">We show that large increases in speedcan be obtained by tightly integrating the su pertagger with the CCG grammar and parser.This is the first work we are aware of to success fully integrate a supertagger with a full parser which uses an automatically extracted grammar.We also further reduce the derivation space us ing constraints on category combination.</S>
		<S sid="5" ssid="5">The result is an accurate wide-coverage CCG parserwhich is an order of magnitude faster than comparable systems for other linguistically moti vated formalisms.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number="1">
			<S sid="6" ssid="6">Lexicalised grammar formalisms such as Lexicalized Tree Adjoining Grammar (LTAG) and Com binatory Categorial Grammar (CCG) assign one or more syntactic structures to each word in a sentencewhich are then manipulated by the parser.</S>
			<S sid="7" ssid="7">Supertag ging was introduced for LTAG as a way of increasingparsing efficiency by reducing the number of struc tures assigned to each word (Bangalore and Joshi, 1999).</S>
			<S sid="8" ssid="8">Supertagging has more recently been applied to CCG (Clark, 2002; Curran and Clark, 2003).Supertagging accuracy is relatively high for man ually constructed LTAGs (Bangalore and Joshi,1999).</S>
			<S sid="9" ssid="9">However, for LTAGs extracted automati cally from the Penn Treebank, performance is much lower (Chen et al, 1999; Chen et al, 2002).</S>
			<S sid="10" ssid="10">In fact, performance for such grammars is below that needed for successful integration into a full parser (Sarkar et al, 2000).</S>
			<S sid="11" ssid="11">In this paper we demonstratethat CCG supertagging accuracy is not only sufficient for accurate and robust parsing using an auto matically extracted grammar, but also offers several practical advantages.</S>
			<S sid="12" ssid="12">Our wide-coverage CCG parser uses a log-linear model to select an analysis.</S>
			<S sid="13" ssid="13">The model paramaters are estimated using a discriminative method, that is,one which requires all incorrect parses for a sentence as well as the correct parse.</S>
			<S sid="14" ssid="14">Since an auto matically extracted CCG grammar can produce anextremely large number of parses, the use of a su pertagger is crucial in limiting the total number of parses for the training data to a computationally manageable number.</S>
			<S sid="15" ssid="15">The supertagger is also crucial for increasing thespeed of the parser.</S>
			<S sid="16" ssid="16">We show that spectacular in creases in speed can be obtained, without affectingaccuracy or coverage, by tightly integrating the su pertagger with the CCG grammar and parser.</S>
			<S sid="17" ssid="17">To achieve maximum speed, the supertagger initially assigns only a small number of CCG categories toeach word, and the parser only requests more cate gories from the supertagger if it cannot provide an analysis.</S>
			<S sid="18" ssid="18">We also demonstrate how extra constraints on the category combinations, and the application of beam search using the parsing model, can further increase parsing speed.This is the first work we are aware of to succes fully integrate a supertagger with a full parser which uses a lexicalised grammar automatically extractedfrom the Penn Treebank.</S>
			<S sid="19" ssid="19">We also report signifi cantly higher parsing speeds on newspaper text than any previously reported for a full wide-coverage parser.</S>
			<S sid="20" ssid="20">Our results confirm that wide-coverage CCG parsing is feasible for many large-scale NLP tasks.</S>
	</SECTION>
	<SECTION title="CCG Supertagging. " number="2">
			<S sid="21" ssid="1">Parsing using CCG can be viewed as a two-stage process: first assign lexical categories to the wordsin the sentence, and then combine the categories to gether using CCG?s combinatory rules.1 The first stage can be accomplished by simply assigning to each word all categories from the word?s entry in the lexicon (Hockenmaier, 2003).</S>
			<S sid="22" ssid="2">1See Steedman (2000) for an introduction to CCG, and see Clark et al (2002) and Hockenmaier (2003) for an introduction to wide-coverage parsing using CCG.</S>
			<S sid="23" ssid="3">The WSJ is a publication that I enjoy reading NP/N N (S[dcl]\NP)/NP NP/N N (NP\NP)/(S[dcl]/NP) NP (S[dcl]\NP)/(S[ng]\NP) (S[ng]\NP)/NP Figure 1: Example sentence with CCG lexical categories frequency # cat types # cat tokens in # sentences in 2-21 # cat tokens in # sentences in 00 cut-off 2-21 not in cat set with missing cat 00 not in cat set with missing cat 1 1 225 0 0 12 (0.03%) 12 (0.6%) 10 409 1 933 (0.2%) 1 712 (4.3%) 79 (0.2%) 69 (3.6%) Table 1: Statistics for the lexical category setAn alternative is to use a statistical tagging approach to assign one or more categories.</S>
			<S sid="24" ssid="4">A statisti cal model can be used to determine the most likelycategories given the word?s context.</S>
			<S sid="25" ssid="5">The advantage of this supertagging approach is that the number of categories assigned to each word can be re duced, with a correspondingly massive reduction in the number of derivations.</S>
			<S sid="26" ssid="6">Bangalore and Joshi (1999) use a standard Markov model tagger to assign LTAG elementarytrees to words.</S>
			<S sid="27" ssid="7">Here we use the Maximum En tropy models described in Curran and Clark (2003).</S>
			<S sid="28" ssid="8">An advantage of the Maximum Entropy approachis that it is easy to encode a wide range of poten tially useful information as features; for example,Clark (2002) has shown that POS tags provide use ful information for supertagging.</S>
			<S sid="29" ssid="9">The next section describes the set of lexical categories used by our supertagger and parser.</S>
			<S sid="30" ssid="10">2.1 The Lexical Category Set.</S>
			<S sid="31" ssid="11">The set of lexical categories is obtained from CCGbank (Hockenmaier and Steedman, 2002; Hockenmaier, 2003), a corpus of CCG normal-form deriva tions derived semi-automatically from the PennTreebank.</S>
			<S sid="32" ssid="12">Following Clark (2002), we apply a fre quency cutoff to the training set, only using thosecategories which appear at least 10 times in sections 2-21.</S>
			<S sid="33" ssid="13">Figure 1 gives an example sentence su pertagged with the correct CCG lexical categories.</S>
			<S sid="34" ssid="14">Table 1 gives the number of different category types and shows the coverage on training (seen) anddevelopment (unseen) data (section 00 from CCGbank).</S>
			<S sid="35" ssid="15">The table also gives statistics for the com plete set containing every lexical category type inCCGbank.2 These figures show that using a fre quency cutoff can significantly reduce the size of the category set with only a small loss in coverage.</S>
			<S sid="36" ssid="16">2The numbers differ slightly from those reported in Clark (2002) since a newer version of CCGbank is being used here.</S>
			<S sid="37" ssid="17">Clark (2002) compares the size of grammarsextracted from CCGbank with automatically extracted LTAGs.</S>
			<S sid="38" ssid="18">The grammars of Chen and Vijay Shanker (2000) contain between 2,000 and 9,000 tree frames, depending on the parameters used inthe extraction process, significantly more elemen tary structures than the number of lexical categories derived from CCGbank.</S>
			<S sid="39" ssid="19">We hypothesise this is a key factor in the higher accuracy for supertaggingusing a CCG grammar compared with an automati cally extracted LTAG.</S>
			<S sid="40" ssid="20">2.2 The Tagging Model.</S>
			<S sid="41" ssid="21">The supertagger uses probabilities p(y|x) where y is a lexical category and x is a context.</S>
			<S sid="42" ssid="22">The conditional probabilities have the following log-linear form: p(y|x) = 1 Z(x)e ? i ?i fi(y,x) (1) where fi is a feature, ?i is the corresponding weight, and Z(x) is a normalisation constant.</S>
			<S sid="43" ssid="23">The context is a 5-word window surrounding the target word.</S>
			<S sid="44" ssid="24">Features are defined for each word in the window and for the POS tag of each word.</S>
			<S sid="45" ssid="25">Curran and Clark(2003) describes the model and explains how Gen eralised Iterative Scaling, together with a Gaussian prior for smoothing, can be used to set the weights.</S>
			<S sid="46" ssid="26">The supertagger in Curran and Clark (2003) finds the single most probable category sequence given the sentence, and uses additional features defined in terms of the previously assigned categories.</S>
			<S sid="47" ssid="27">Theper-word accuracy is between 91 and 92% on un seen data in CCGbank; however, Clark (2002) shows this is not high enough for integration into a parser since the large number of incorrect categories results in a significant loss in coverage.</S>
			<S sid="48" ssid="28">Clark (2002) shows how the models in (1) can be used to define a multi-tagger which can assign more than one category to a word.</S>
			<S sid="49" ssid="29">For each word inthe sentence, the multi-tagger assigns all those cat ? CATS/ ACC SENT ACC SENT WORD ACC (POS) ACC 0.1 1.4 97.0 62.6 96.4 57.4 0.075 1.5 97.4 65.9 96.8 60.6 0.05 1.7 97.8 70.2 97.3 64.4 0.01 2.9 98.5 78.4 98.2 74.2 0.01k=100 3.5 98.9 83.6 98.6 78.9 0 21.9 99.1 84.8 99.0 83.0 Table 2: Supertagger accuracy on section 00 egories whose probability according to (1) is within some factor, ?, of the highest probability category for the word.</S>
			<S sid="50" ssid="30">We follow Clark (2002) in ignoring the featuresbased on the previously assigned categories; there fore every tagging decision is local and the Viterbi algorithm is not required.</S>
			<S sid="51" ssid="31">This simple approach has the advantage of being very efficient, and we findthat it is accurate enough to enable highly accu rate parsing.</S>
			<S sid="52" ssid="32">However, a method which used theforward-backward algorithm to sum over all possi ble sequences, or some other method which took into account category sequence information, may well improve the results.</S>
			<S sid="53" ssid="33">For words seen at least k times in the trainingdata, the tagger can only assign categories appear ing in the word?s entry in the tag dictionary.</S>
			<S sid="54" ssid="34">Eachentry in the tag dictionary is a list of all the cate gories seen with that word in the training data.</S>
			<S sid="55" ssid="35">For words seen less than k times, we use an alternative dictionary based on the word?s POS tag: the tagger can only assign categories that have been seen with the POS tag in the training data.</S>
			<S sid="56" ssid="36">A value of k = 20was used in this work, and sections 2-21 of CCG bank were used as training data.Table 2 gives the per-word accuracy (acc) on sec tion 00 for various values of ?, together with the average number of categories per word.</S>
			<S sid="57" ssid="37">The sent acc column gives the precentage of sentences whose words are all supertagged correctly.</S>
			<S sid="58" ssid="38">The figures for ? = 0.01k=100 correspond to a value of 100 for thetag dictionary parameter k. The set of categories as signed to a word is considered correct if it contains the correct category.</S>
			<S sid="59" ssid="39">The table gives results for gold standard POS tags and, in the final 2 columns, for POS tags automatically assigned by the Curran andClark (2003) tagger.</S>
			<S sid="60" ssid="40">The drop in accuracy is ex pected given the importance of POS tags as features.</S>
			<S sid="61" ssid="41">The figures for ? = 0 are obtained by assigning all categories to a word from the word?s entry in the tag dictionary.</S>
			<S sid="62" ssid="42">For words which appear less than 20 times in the training data, the dictionary based on the word?s POS tag is used.</S>
			<S sid="63" ssid="43">The table demonstrates the significant reduction in the average number of categories that can be achieved through the use of a supertagger.</S>
			<S sid="64" ssid="44">To give one example, the number of categories in the tag dictionary?s entry for the wordis is 45 (only considering categories which have appeared at least 10 times in the training data).</S>
			<S sid="65" ssid="45">However, in the sentence Mr. Vinken is chairman of Elsevier N.V., the Dutch publishing group., the supertag ger correctly assigns 1 category to is for ? = 0.1, and 3 categories for ? = 0.01.</S>
	</SECTION>
	<SECTION title="The Parser. " number="3">
			<S sid="66" ssid="1">The parser is described in detail in Clark and Curran (2004).</S>
			<S sid="67" ssid="2">It takes POS tagged sentences as input with each word assigned a set of lexical categories.</S>
			<S sid="68" ssid="3">A packed chart is used to efficiently represent all of the possible analyses for a sentence, and the CKY chart parsing algorithm described in Steedman (2000) is used to build the chart.</S>
			<S sid="69" ssid="4">Clark and Curran (2004) evaluate a number of log-linear parsing models for CCG.</S>
			<S sid="70" ssid="5">In this paper weuse the normal-form model, which defines proba bilities with the conditional log-linear form in (1), where y is a derivation and x is a sentence.</S>
			<S sid="71" ssid="6">Featuresare defined in terms of the local trees in the derivation, including lexical head information and word word dependencies.</S>
			<S sid="72" ssid="7">The normal-form derivations in CCGbank provide the gold standard training data.</S>
			<S sid="73" ssid="8">The feature set we use is from the best performing normal-form model in Clark and Curran (2004).</S>
			<S sid="74" ssid="9">For a given sentence the output of the parser is a dependency structure corresponding to the most probable derivation, which can be found using theViterbi algorithm.</S>
			<S sid="75" ssid="10">The dependency relations are de fined in terms of the argument slots of CCG lexical categories.</S>
			<S sid="76" ssid="11">Clark et al (2002) and Clark and Curran (2004) give a detailed description of the dependency structures.</S>
			<S sid="77" ssid="12">3.1 Model Estimation.</S>
			<S sid="78" ssid="13">In Clark and Curran (2004) we describe a discrim inative method for estimating the parameters of a log-linear parsing model.</S>
			<S sid="79" ssid="14">The estimation method maximises the following objective function: L?(?)</S>
			<S sid="80" ssid="15">= L(?)</S>
			<S sid="81" ssid="16">?G(?)</S>
			<S sid="82" ssid="17">(2) = log m ? j=1 P?(d j|S j) ? n ? i=1 ?2i 2?2The data consists of sentences S 1, . . .</S>
			<S sid="83" ssid="18">, S m, to gether with gold standard normal-form derivations, d1, . . .</S>
			<S sid="84" ssid="19">, dm.</S>
			<S sid="85" ssid="20">L(?)</S>
			<S sid="86" ssid="21">is the log-likelihood of model ?, and G(?)</S>
			<S sid="87" ssid="22">is a Gaussian prior term used to avoid overfitting (n is the number of features; ?i is the weight for feature fi; and ? is a parameter of theGaussian).</S>
			<S sid="88" ssid="23">The objective function is optimised using L-BFGS (Nocedal and Wright, 1999), an iterative algorithm from the numerical optimisation lit erature.The algorithm requires the gradient of the objective function, and the value of the objective function, at each iteration.</S>
			<S sid="89" ssid="24">Calculation of these val ues requires all derivations for each sentence in the training data.</S>
			<S sid="90" ssid="25">In Clark and Curran (2004) wedescribe efficient methods for performing the cal culations using packed charts.</S>
			<S sid="91" ssid="26">However, a very large amount of memory is still needed to store the packed charts for the complete training data even though the representation is very compact; in Clark and Curran (2003) we report a memory usage of 30 GB.</S>
			<S sid="92" ssid="27">To handle this we have developed a parallel implementation of the estimation algorithm which runs on a Beowulf cluster.</S>
			<S sid="93" ssid="28">The need for large high-performance computing resources is a disadvantage of our earlier approach.In the next section we show how use of the supertag ger, combined with normal-form constraints on thederivations, can significantly reduce the memory re quirements for the model estimation.</S>
	</SECTION>
	<SECTION title="Generating Parser Training Data. " number="4">
			<S sid="94" ssid="1">Since the training data contains the correct lexicalcategories, we ensure the correct category is as signed to each word when generating the packed charts for model estimation.</S>
			<S sid="95" ssid="2">Whilst training theparser, the supertagger can be thought of as supply ing a number of plausible but incorrect categoriesfor each word; these, together with the correct cat egories, determine the parts of the parse space that are used in the estimation process.</S>
			<S sid="96" ssid="3">We would like to keep the packed charts as small as possible, but not lose accuracy in the resulting parser.</S>
			<S sid="97" ssid="4">Section 4.2discusses the use of various settings on the supertag ger.</S>
			<S sid="98" ssid="5">The next section describes how normal-form constraints can further reduce the derivation space.</S>
			<S sid="99" ssid="6">4.1 Normal-Form Constraints.</S>
			<S sid="100" ssid="7">As well as the supertagger, we use two additional strategies for reducing the derivation space.</S>
			<S sid="101" ssid="8">Thefirst, following Hockenmaier (2003), is to only al low categories to combine if the combination hasbeen seen in sections 2-21 of CCGbank.</S>
			<S sid="102" ssid="9">For exam ple, NP/NP could combine with NP/NP accordingto CCG?s combinatory rules (by forward composi tion), but since this particular combination does not appear in CCGbank the parser does not allow it.The second strategy is to use Eisner?s normal form constraints (Eisner, 1996).</S>
			<S sid="103" ssid="10">The constraints SUPERTAGGING/PARSING USAGE CONSTRAINTS DISK MEMORY ? = 0.01 ? 0.05 ? 0.1 17 GB 31 GB CCGbank constraints 13 GB 23 GB Eisner constraints 9 GB 16 GB ? = 0.05 ? 0.1 2 GB 4 GB Table 3: Space requirements for model training dataprevent any constituent which is the result of a forward (backward) composition serving as the primary functor in another forward (backward) composition or a forward (backward) application.</S>
			<S sid="104" ssid="11">Eis ner only deals with a grammar without type-raising,and so the constraints do not guarantee a normal form parse when using a grammar extracted from CCGbank.</S>
			<S sid="105" ssid="12">However, the constraints are still useful in restricting the derivation space.</S>
			<S sid="106" ssid="13">As far as we are aware, this is the first demonstration of the utility of such constraints for a wide-coverage CCG parser.</S>
			<S sid="107" ssid="14">4.2 Results (Space Requirements).</S>
			<S sid="108" ssid="15">Table 3 shows the effect of different supertagger set tings, and the normal-form constraints, on the size of the packed charts used for model estimation.</S>
			<S sid="109" ssid="16">The disk usage is the space taken on disk by the charts,and the memory usage is the space taken in memory during the estimation process.</S>
			<S sid="110" ssid="17">The training sen tences are parsed using a number of nodes from a 64-node Beowulf cluster.3 The time taken to parse the training sentences depends on the supertagging and parsing constraints, and the number of nodes used, but is typically around 30 minutes.</S>
			<S sid="111" ssid="18">The first row of the table corresponds to using the least restrictive ? value of 0.01, and reverting to ? = 0.05, and finally ? = 0.1, if the chart size exceeds some threshold.</S>
			<S sid="112" ssid="19">The threshold was set at300,000 nodes in the chart.</S>
			<S sid="113" ssid="20">Packed charts are created for approximately 94% of the sentences in sec tions 2-21 of CCGbank.</S>
			<S sid="114" ssid="21">The coverage is not 100%because, for some sentences, the parser cannot pro vide an analysis, and some charts exceed the node limit even at the ? = 0.1 level.</S>
			<S sid="115" ssid="22">This strategy was used in our earlier work (Clark and Curran, 2003) and, as the table shows, results in very large charts.Note that, even with this relaxed setting on the su pertagger, the number of categories assigned to each word is only around 3 on average.</S>
			<S sid="116" ssid="23">This suggests that it is only through use of the supertagger that we are able to estimate a log-linear parsing model on all of the training data at all, since without it the memory 3The figures in the table are estimates based on a sample of the nodes in the cluster.</S>
			<S sid="117" ssid="24">requirements would be far too great, even for the entire 64-node cluster.4 The second row shows the reduction in size if the parser is only allowed to combine categorieswhich have combined in the training data.</S>
			<S sid="118" ssid="25">This sig nificantly reduces the number of categories created using the composition rules, and also prevents thecreation of unlikely categories using rule combina tions not seen in CCGbank.</S>
			<S sid="119" ssid="26">The results show thatthe memory and disk usage are reduced by approx imately 25% using these constraints.</S>
			<S sid="120" ssid="27">The third row shows a further reduction in size when using the Eisner normal-form constraints.</S>
			<S sid="121" ssid="28">Even with the CCGbank rule constraints, theparser still builds many non-normal-form derivations, since CCGbank does contain cases of compo sition and type-raising.</S>
			<S sid="122" ssid="29">(These are used to analysesome coordination and extraction cases, for example.)</S>
			<S sid="123" ssid="30">The combination of the two types of normal form constraints reduces the memory requirements by 48% over the original approach.</S>
			<S sid="124" ssid="31">In Clark andCurran (2004) we show that the parsing model re sulting from training data generated in this way produces state-of-the-art CCG dependency recovery: 84.6 F-score over labelled dependencies.</S>
			<S sid="125" ssid="32">The final row corresponds to a more restrictive setting on the supertagger, in which a value of ? = 0.05 is used initially and ? = 0.1 is used if thenode limit is exceeded.</S>
			<S sid="126" ssid="33">The two types of normal form constraints are also used.</S>
			<S sid="127" ssid="34">In Clark and Curran(2004) we show that using this more restrictive set ting has a small negative impact on the accuracy of the resulting parser (about 0.6 F-score over labelled dependencies).</S>
			<S sid="128" ssid="35">However, the memory requirement for training the model is now only 4 GB, a reduction of 87% compared with the original approach.</S>
	</SECTION>
	<SECTION title="Parsing Unseen Data. " number="5">
			<S sid="129" ssid="1">The previous section showed how to combine the supertagger and parser for the purpose of creating training data, assuming the correct category for each word is known.</S>
			<S sid="130" ssid="2">In this section we describe our approach to tightly integrating the supertagger and parser for parsing unseen data.</S>
			<S sid="131" ssid="3">Our previous approach to parsing unseen data (Clark et al, 2002; Clark and Curran, 2003) wasto use the least restrictive setting of the supertagger which still allows a reasonable compromise be tween speed and accuracy.</S>
			<S sid="132" ssid="4">Our philosophy was to give the parser the greatest possibility of finding thecorrect parse, by giving it as many categories as pos sible, while still retaining reasonable efficiency.4Another possible solution would be to use sampling meth ods, e.g. Osborne (2000).</S>
			<S sid="133" ssid="5">SUPERTAGGING/PARSING TIME SENTS WORDS CONSTRAINTS SEC /SEC /SEC ? = 0.01?</S>
			<S sid="134" ssid="6">0.1 3 523 0.7 16 CCGbank constraints 1 181 2.0 46 Eisner constraints 995 2.4 55 ? = 0.1?</S>
			<S sid="135" ssid="7">0.01k=100 608 3.9 90 CCGbank constraints 124 19.4 440 Eisner constraints 100 24.0 546 Parser beam 67 35.8 814 94% coverage 49 49.0 1 114 Parser beam 46 52.2 1 186 Oracle 18 133.4 3 031 Table 4: Parse times for section 23 The problem with this approach is that, for some sentences, the number of categories in the chart still gets extremely large and so parsing is unacceptably slow.</S>
			<S sid="136" ssid="8">Hence we applied a limit to the number of categories in the chart, as in the previous section,and reverted to a more restrictive setting of the su pertagger if the limit was exceeded.</S>
			<S sid="137" ssid="9">We first used a value of ? = 0.01, and then reverted to ? = 0.05, and finally ? = 0.1.</S>
			<S sid="138" ssid="10">In this paper we take the opposite approach: westart with a very restrictive setting of the supertag ger, and only assign more categories if the parser cannot find an analysis spanning the sentence.</S>
			<S sid="139" ssid="11">In this way the parser interacts much more closely with the supertagger.</S>
			<S sid="140" ssid="12">In effect, the parser is using the grammar to decide if the categories provided by thesupertagger are acceptable, and if not the parser re quests more categories.</S>
			<S sid="141" ssid="13">The parser uses the 5 levels given in Table 2, starting with ? = 0.1 and moving through the levels to ? = 0.01k=100 . The advantage of this approach is that parsing speeds are much higher.</S>
			<S sid="142" ssid="14">We also show that our new approach slightly increases parsing accuracy over the previous method.</S>
			<S sid="143" ssid="15">This suggests that, given our current parsing model, it is better to rely largely on the supertagger to provide the correct categoriesrather than use the parsing model to select the cor rect categories from a very large derivation space.</S>
			<S sid="144" ssid="16">5.1 Results (Parse Times).</S>
			<S sid="145" ssid="17">The results in this section are all using the best per forming normal-form model in Clark and Curran (2004), which corresponds to row 3 in Table 3.</S>
			<S sid="146" ssid="18">All experiments were run on a 2.8 GHZ Intel Xeon P4 with 2 GB RAM.</S>
			<S sid="147" ssid="19">Table 4 gives parse times for the 2,401 sentences in section 23 of CCGbank.</S>
			<S sid="148" ssid="20">The final two columns give the number of sentences, and the number of ? CATS/ 0.1 FIRST 0.01 FIRST WORD PARSES % PARSES % 0.1 1.4 1689 88.4 0 0.0 0.075 1.5 43 2.3 7 0.4 0.05 1.7 51 2.7 39 2.0 0.01 2.9 79 4.1 1816 95.1 0.01k=100 3.5 33 1.7 33 1.7 NO SPAN 15 0.8 15 0.8 Table 5: Supertagger ? levels used on section 00words, parsed per second.</S>
			<S sid="149" ssid="21">For all of the figures re ported on section 23, unless stated otherwise, the parser is able to provide an analysis for 98.5% of the sentences.</S>
			<S sid="150" ssid="22">The parse times and speeds include the failed sentences, but do not include the time takenby the supertagger; however, the supertagger is ex tremely efficient, and takes less than 6 seconds to supertag section 23, most of which consists of load time for the Maximum Entropy model.</S>
			<S sid="151" ssid="23">The first three rows correspond to our strategy ofearlier work by starting with the least restrictive set ting of the supertagger.</S>
			<S sid="152" ssid="24">The first value of ? is 0.01; if the parser cannot find a spanning analysis, this ischanged to ? = 0.01k=100; if the node limit is ex ceeded (for these experiments set at 1,000,000), ? is changed to 0.05.</S>
			<S sid="153" ssid="25">If the node limit is still exceeded, ? is changed to 0.075, and finally 0.1.</S>
			<S sid="154" ssid="26">The second row has the CCGbank rule restriction applied, and the third row the Eisner normal-form restrictions.The next three rows correspond to our new strat egy of starting with the least restrictive setting of thesupertagger (?</S>
			<S sid="155" ssid="27">= 0.1), and moving through the set tings if the parser cannot find a spanning analysis.</S>
			<S sid="156" ssid="28">The table shows that the normal-form constraints have a significant impact on the speed, reducing theparse times for the old strategy by 72%, and reduc ing the times for the new strategy by 84%.</S>
			<S sid="157" ssid="29">The new strategy also has a spectacular impact on the speed compared with the old strategy, reducing the times by 83% without the normal-form constraints and 90% with the constraints.</S>
			<S sid="158" ssid="30">The 94% coverage row corresponds to using only the first two supertagging levels; the parser ignores the sentence if it cannot get an analysis at the ? = 0.05 level.</S>
			<S sid="159" ssid="31">The percentage of sentences without an analysis is now 6%, but the parser is extremely fast,processing almost 50 sentences a second.</S>
			<S sid="160" ssid="32">This configuration of the system would be useful for obtaining data for lexical knowledge acquisition, for ex ample, for which large amounts of data are required.</S>
			<S sid="161" ssid="33">The oracle row shows the parser speed when it is provided with only the correct lexical categories.The parser is extremely fast, and in Clark and Cur ran (2004) we show that the F-score for labelled dependencies is almost 98%.</S>
			<S sid="162" ssid="34">This demonstratesthe large amount of information in the lexical categories, and the potential for improving parser ac curacy and efficiency by improving the supertagger.</S>
			<S sid="163" ssid="35">Finally, the first parser beam row corresponds to the parser using a beam search to further reduce thederivation space.</S>
			<S sid="164" ssid="36">The beam search works by prun ing categories from the chart: a category can only be part of a derivation if its beam score is within some factor, ?, of the highest scoring category forthat cell in the chart.</S>
			<S sid="165" ssid="37">Here we simply use the ex ponential of the inside score of a category as the beam score; the inside score for a category c is the sum over all sub-derivations dominated by c of the weights of the features in those sub-derivations (see Clark and Curran (2004).5The value of ? that we use here reduces the accu racy of the parser on section 00 by a small amount (0.3% labelled F-score), but has a significant impacton parser speed, reducing the parse times by a fur ther 33%.</S>
			<S sid="166" ssid="38">The final parser beam row combines thebeam search with the fast, reduced coverage config uration of the parser, producing speeds of over 50 sentences per second.</S>
			<S sid="167" ssid="39">Table 5 gives the percentage of sentences which are parsed at each supertagger level, for both the new and old parsing strategies.</S>
			<S sid="168" ssid="40">The results show that, for the old approach, most of the sentences areparsed using the least restrictive setting of the supertagger (?</S>
			<S sid="169" ssid="41">= 0.01); conversely, for the new ap proach, most of the sentences are parsed using the most restrictive setting (?</S>
			<S sid="170" ssid="42">= 0.1).</S>
			<S sid="171" ssid="43">As well as investigating parser efficiency, we have also evaluated the accuracy of the parser onsection 00 of CCGbank, using both parsing strate gies together with the normal-form constraints.</S>
			<S sid="172" ssid="44">Thenew strategy increases the F-score over labelled de pendencies by approximately 0.5%, leading to the figures reported in Clark and Curran (2004).</S>
			<S sid="173" ssid="45">5.2 Comparison with Other Work.</S>
			<S sid="174" ssid="46">The only other work we are aware of to investigate the impact of supertagging on parsing efficiency is the work of Sarkar et al (2000) for LTAG.</S>
			<S sid="175" ssid="47">Sarkar etal.</S>
			<S sid="176" ssid="48">did find that LTAG supertagging increased pars ing speed, but at a significant cost in coverage: only 1,324 sentences out of a test set of 2,250 received a parse.</S>
			<S sid="177" ssid="49">The parse times reported are also not as good as those reported here: the time taken to parse the 2,250 test sentences was over 5 hours.5Multiplying by an estimate of the outside score may im prove the efficacy of the beam.</S>
			<S sid="178" ssid="50">Kaplan et al (2004) report high parsing speedsfor a deep parsing system which uses an LFG gram mar: 1.9 sentences per second for 560 sentencesfrom section 23 of the Penn Treebank.</S>
			<S sid="179" ssid="51">They also re port speeds for the publicly available Collins parser (Collins, 1999): 2.8 sentences per second for the same set.</S>
			<S sid="180" ssid="52">The best speeds we have reported for the CCG parser are an order of magnitude faster.</S>
	</SECTION>
	<SECTION title="Conclusions. " number="6">
			<S sid="181" ssid="1">This paper has shown that by tightly integrating a supertagger with a CCG parser, very fast parse times can be achieved for Penn Treebank WSJ text.</S>
			<S sid="182" ssid="2">As far as we are aware, the times reported here are an orderof magnitude faster than any reported for compara ble systems using linguistically motivated grammar formalisms.</S>
			<S sid="183" ssid="3">The techniques we have presented inthis paper increase the speed of the parser by a factor of 77.</S>
			<S sid="184" ssid="4">This makes this parser suitable for large scale NLP tasks.The results also suggest that further improvements can be obtained by improving the supertagger, which should be possible given the simple tag ging approach currently being used.The novel parsing strategy of allowing the grammar to decide if the supertagging is likely to be cor rect suggests a number of interesting possibilities.In particular, we would like to investigate only re pairing those areas of the chart that are most likely to contain errors, rather than parsing the sentence from scratch using a new set of lexical categories.</S>
			<S sid="185" ssid="5">This could further increase parsing effficiency.</S>
			<S sid="186" ssid="6">Acknowledgements We would like to thank Julia Hockenmaier, whosework creating the CCGbank made this research possible, and Mark Steedman for his advice and guid ance.</S>
			<S sid="187" ssid="7">This research was supported by EPSRC grant GR/M96889, and a Commonwealth scholarship and a Sydney University Travelling scholarship to the second author.</S>
	</SECTION>
</PAPER>
