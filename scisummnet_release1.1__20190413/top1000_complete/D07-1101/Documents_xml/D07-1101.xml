<PAPER>
	<S sid="0">Experiments with a Higher-Order Projective Dependency Parser</S><ABSTRACT>
		<S sid="1" ssid="1">We present experiments with a dependency parsing model defined on rich factors.</S>
		<S sid="2" ssid="2">Ourmodel represents dependency trees with factors that include three types of relations be tween the tokens of a dependency and theirchildren.</S>
		<S sid="3" ssid="3">We extend the projective pars ing algorithm of Eisner (1996) for our case,and train models using the averaged perceptron.</S>
		<S sid="4" ssid="4">Our experiments show that considering higher-order information yields signifi cant improvements in parsing accuracy, but comes at a high cost in terms of both timeand memory consumption.</S>
		<S sid="5" ssid="5">In the multi lingual exercise of the CoNLL-2007 shared task (Nivre et al, 2007), our system obtains the best accuracy for English, and the second best accuracies for Basque and Czech.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number="1">
			<S sid="6" ssid="6">Structured prediction problems usually involve models that work with factored representations of structures.</S>
			<S sid="7" ssid="7">The information included in the factors determines the type of features that the model can exploit.</S>
			<S sid="8" ssid="8">However, richer representations translate into higher complexity of the inference algorithms associated with the model.</S>
			<S sid="9" ssid="9">In dependency parsing, the basic first-order modelis defined by a decomposition of a tree into head modifier dependencies.</S>
			<S sid="10" ssid="10">Previous work extended this basic model to include second-order relations?i.e.dependencies that are adjacent to the main depen dency of the factor.</S>
			<S sid="11" ssid="11">Specifically, these approaches considered sibling relations of the modifier token (Eisner, 1996; McDonald and Pereira, 2006).</S>
			<S sid="12" ssid="12">In this paper we extend the parsing model with other typesof second-order relations.</S>
			<S sid="13" ssid="13">In particular, we incorpo rate relations between the head and modifier tokens and the children of the modifier.</S>
			<S sid="14" ssid="14">One paradigmatic case where the relations we consider are relevant is PP-attachment.</S>
			<S sid="15" ssid="15">For example,in ?They sold 1,210 cars in the U.S.?, the ambigu ity problem is to determine whether the preposition ?in?</S>
			<S sid="16" ssid="16">(which governs ?the U.S.?)</S>
			<S sid="17" ssid="17">is modifying ?sold?</S>
			<S sid="18" ssid="18">or ?cars?, the former being correct in this case.</S>
			<S sid="19" ssid="19">It isgenerally accepted that to solve the attachment deci sion it is necessary to look at the head noun withinthe prepositional phrase (i.e., ?U.S.?</S>
			<S sid="20" ssid="20">in the exam ple), which has a grand-parental relation with the two candidate tokens that the phrase may attach?see e.g.</S>
			<S sid="21" ssid="21">(Ratnaparkhi et al, 1994).</S>
			<S sid="22" ssid="22">Other ambigu ities in language may also require consideration of grand-parental relations in the dependency structure.</S>
			<S sid="23" ssid="23">We present experiments with higher-order models trained with averaged perceptron.</S>
			<S sid="24" ssid="24">The second-orderrelations that we incorporate in the model yield significant improvements in accuracy.</S>
			<S sid="25" ssid="25">However, the inference algorithms for our factorization are very ex pensive in terms of time and memory consumption,and become impractical when dealing with many la bels or long sentences.</S>
	</SECTION>
	<SECTION title="Higher-Order Projective Models. " number="2">
			<S sid="26" ssid="1">A dependency parser receives a sentence x of n to kens, and outputs a labeled dependency tree y. In the tree, a labeled dependency is a triple ?h, m, l?, where h ? [0 . . .</S>
			<S sid="27" ssid="2">n] is the index of the head token, 957 lh m ccch mi mo Figure 1: A factor in the higher-order parsing model.</S>
			<S sid="28" ssid="3">m ? [1 . . .</S>
			<S sid="29" ssid="4">n] is the index of the modifier token, and l ? [1 . . .</S>
			<S sid="30" ssid="5">L] is the label of the dependency.</S>
			<S sid="31" ssid="6">The value h = 0 is used for dependencies where the head is a special root-symbol of the sentence.</S>
			<S sid="32" ssid="7">We denote by T (x) the set of all possible dependency structures for a sentence x. In this paper, we restrict to projective dependency trees.</S>
			<S sid="33" ssid="8">The dependency tree computed by the parser for a given sentence is: y?(x) = arg max y?T (x) ? f?y score(w,x, f) The parsing model represents a structure y as a set offactors, f ? y, and scores each factor using param eters w. In a first-order model a factor corresponds to a single labeled dependency, i.e. f = ?h, m, l?.The features of the model are defined through a feature function ?1(x, h, m) which maps a sentence to gether with an unlabeled dependency to a feature vector in Rd1 . The parameters of the model are acollection of vectors wl1 ? Rd1 , one for each pos sible label.</S>
			<S sid="34" ssid="9">The first-order model scores a factor as score1(w,x, ?h, m, l?)</S>
			<S sid="35" ssid="10">= ?1(x, h, m) ? wl1.The higher-order model defined in this paper de composes a dependency structure into factors that include children of the head and the modifier.</S>
			<S sid="36" ssid="11">In particular, a factor in our model is represented by the signature f = ?h, m, l, ch, cmi, cmo?</S>
			<S sid="37" ssid="12">where, as in the first-order model, h, m and l are respectively the head, modifier and label of the main dependency of the factor; ch is the child of h in [h . . .m] that is closest to m; cmi is child of m inside [h . . .m]that is furthest from m; cmo is the child of m outside [h . . .</S>
			<S sid="38" ssid="13">m] that is furthest from m. Figure 1 de picts a factor of the higher-order model, and Table 1 lists the factors of an example sentence.</S>
			<S sid="39" ssid="14">Note that a factor involves a main labeled dependency and threeadjacent unlabeled dependencies that attach to chil dren of h and m. Special values are used when either of these children are null.</S>
			<S sid="40" ssid="15">The higher-order model defines additional m h ch cmi cmoThey 1 2 - - sold 2 0 - 1 51,200 3 4 - - cars 4 2 - 3 in 5 2 4 - 7the 6 7 - - U.S. 7 5 - 6 Table 1: Higher-order factors for an example sentence.</S>
			<S sid="41" ssid="16">For simplicity, labels of the factors have been omitted.</S>
			<S sid="42" ssid="17">A first-ordermodel considers only ?h, m?.</S>
			<S sid="43" ssid="18">The second-order model of McDonald and Pereira (2006) considers ?h, m, ch?.</S>
			<S sid="44" ssid="19">For the PP attachment decision (factor in row 5), the higher-order model allows us to define features that relate the verb (?sold?)</S>
			<S sid="45" ssid="20">with the content word of the prepositional phrase (?U.S.?).</S>
			<S sid="46" ssid="21">second-order features through a function ?2(x, h, m, c) which maps a head, a modifierand a child in a feature vector in Rd2 . The param eters of the model are a collection of four vectors for each dependency label: wl1 ? Rd1 as in the first-order model; and wlh,wlmi and wlmo, all three in Rd2 and each associated to one of the adjacent dependencies in the factor.</S>
			<S sid="47" ssid="22">The score of a factor is: score2(w,x, ?h, m, l, ch, cmi, cmo?)</S>
			<S sid="48" ssid="23">= ?1(x, h, m) ? wl1 + ?2(x, h, m, ch) ? wlh + ?2(x, h, m, cmi) ? wlmi + ?2(x, h, m, cmo) ? wlmoNote that the model uses a common feature func tion for second-order relations, but features could be defined specifically for each type of relation.</S>
			<S sid="49" ssid="24">Note also that while the higher-order factors includefour dependencies, our modelling choice only ex ploits relations between the main dependency andsecondary dependencies.</S>
			<S sid="50" ssid="25">Considering relations between secondary dependencies would greatly in crease the cost of the associated algorithms.</S>
			<S sid="51" ssid="26">2.1 Parsing Algorithm.</S>
			<S sid="52" ssid="27">In this section we sketch an extension of the projective dynamic programming algorithm of Eisner (1996; 2000) for the higher-order model defined above.</S>
			<S sid="53" ssid="28">The time complexity of the algo rithm is O(n4L), and the memory requirements areO(n2L + n3).</S>
			<S sid="54" ssid="29">As in the Eisner approach, our algo rithm visits sentence spans in a bottom up fashion, and constructs a chart with two types of dynamic programming structures, namely open and closedstructures?see Figure 2 for a diagram.</S>
			<S sid="55" ssid="30">The dy namic programming structures are: 958 h m h m ecmo l micr+1rhc lFigure 2: Dynamic programming structures used in the pars ing algorithm.</S>
			<S sid="56" ssid="31">The variables in boldface constitute the index of the chart entry for a structure; the other variables constitute the back-pointer stored in the chart entry.</S>
			<S sid="57" ssid="32">Left: an open structure for the chart entry [h, m, l]O ; the algorithm looks for the r, ch and cmi that yield the optimal score for this structure.</S>
			<S sid="58" ssid="33">Right: a closed structure for the chart entry [h, e, m]C ; the algorithm looks for the l and cmo that yield the optimal score.</S>
			<S sid="59" ssid="34">Open structures: For each span from s to e and each label l, the algorithm maintains a chart entry [s, e, l]O associated to the dependency ?s, e, l?.</S>
			<S sid="60" ssid="35">For each entry, the algorithm looks for the optimal splitting point r, sibling ch and grand-child cmi using parameters wl1, wlh and wlmi.</S>
			<S sid="61" ssid="36">This can be done in O(n2) because our features do not consider interactions betweench and cmi.</S>
			<S sid="62" ssid="37">Similar entries [e, s, l]O are main tained for dependencies headed at e. ? Closed structures: For each span from s to e and each token m ? [s . . .</S>
			<S sid="63" ssid="38">e], the algorithm maintains an entry [s, e, m]C associated to a partial dependency tree rooted at s in which m is the last modifier of s. The algorithm chooses the optimal dependency label l and grand-child cmo in O(nL), using parameters wlmo.</S>
			<S sid="64" ssid="39">Similarentries [e, s, m]C are maintained for dependen cies headed at e. We implemented two variants of the algorithm.The first forces the root token to participate in exactly one dependency.</S>
			<S sid="65" ssid="40">The second allows many dependencies involving the root token.</S>
			<S sid="66" ssid="41">For the singleroot case, it is necessary to treat the root token dif ferently than other tokens.</S>
			<S sid="67" ssid="42">In the experiments, weused the single-root variant if sentences in the train ing set satisfy this property.</S>
			<S sid="68" ssid="43">Otherwise we used the multi-root variant.</S>
			<S sid="69" ssid="44">2.2 Features.</S>
			<S sid="70" ssid="45">The first-order features ?1(x, h, m) are the exactsame implementation as in previous CoNLL sys tem (Carreras et al, 2006).</S>
			<S sid="71" ssid="46">In turn, those featureswere inspired by successful previous work in first order dependency parsing (McDonald et al, 2005).The most basic feature patterns consider the surface form, part-of-speech, lemma and other morpho syntactic attributes of the head or the modifier of adependency.</S>
			<S sid="72" ssid="47">The representation also considers com plex features that exploit a variety of conjunctionsof the forms and part-of-speech tags of the follow ing items: the head and modifier; the head, modifier, and any token in between them; the head, modifier, and the two tokens following or preceding them.</S>
			<S sid="73" ssid="48">As for the second-order features, we again base our features with those of McDonald and Pereira (2006), who reported successful experiments with second-order models.</S>
			<S sid="74" ssid="49">We add some patterns to their features.</S>
			<S sid="75" ssid="50">Let dir be ?right?</S>
			<S sid="76" ssid="51">if h &lt; m, and ?left?</S>
			<S sid="77" ssid="52">otherwise; let form(xi) and cpos(xi) return the surface form and coarse part-of-speech of token xi, respectively.</S>
			<S sid="78" ssid="53">The definition of ?2(x, h, m, c) is: ? dir ? cpos(xh) ? cpos(xm) ? cpos(xc) ? dir ? cpos(xh) ? cpos(xc) ? dir ? cpos(xm) ? cpos(xc) ? dir ? form(xh) ? form(xc) ? dir ? form(xm) ? form(xc) ? dir ? cpos(xh) ? form(xc) ? dir ? cpos(xm) ? form(xc) ? dir ? form(xh) ? cpos(xc) ? dir ? form(xm) ? cpos(xc)</S>
	</SECTION>
	<SECTION title="Experiments and Results. " number="3">
			<S sid="79" ssid="1">We report experiments with higher-order models for the ten languages in the multilingual track of the CoNLL-2007 shared task (Nivre et al, 2007).1In all experiments, we trained our models us ing the averaged perceptron (Freund and Schapire, 1999), following the extension of Collins (2002) for structured prediction problems.</S>
			<S sid="80" ssid="2">To train models, weused ?projectivized?</S>
			<S sid="81" ssid="3">versions of the training depen dency trees.21We are grateful to the providers of the treebanks that con stituted the data for the shared task (Hajic?</S>
			<S sid="82" ssid="4">et al, 2004; Aduriz et al, 2003; Mart??</S>
			<S sid="83" ssid="5">et al, 2007; Chen et al, 2003; Bo?hmova?</S>
			<S sid="84" ssid="6">et al., 2003; Marcus et al, 1993; Johansson and Nugues, 2007; Prokopidis et al, 2005; Csendes et al, 2005; Montemagni et al., 2003; Oflazer et al, 2003).2We obtained projective trees for training sentences by run ning the projective parser with an oracle model (that assigns a score of +1 to correct dependencies and -1 otherwise).</S>
			<S sid="85" ssid="7">959 Catalan Czech English First-Order, no averaging 82.07 68.98 83.75 First-Order 86.15 75.96 87.54 Higher-Order, ch 87.50 77.15 88.70 Higher-Order, ch cmo 87.68 77.62 89.28 Higher-Order, ch cmi cmo 88.04 78.09 89.59 Table 2: Labeled attachment scores on validation data(?10,000 tokens per language), for different models that ex ploit increasing orders of factorizations.</S>
			<S sid="86" ssid="8">3.1 Impact of Higher-Order Factorization.</S>
			<S sid="87" ssid="9">Our first set of experiments looks at the performanceof different factorizations.</S>
			<S sid="88" ssid="10">We selected three lan guages with a large number of training sentences, namely Catalan, Czech and English.</S>
			<S sid="89" ssid="11">To evaluate models, we held out the training sentences that cover the first 10,000 tokens; the rest was used for training.</S>
			<S sid="90" ssid="12">We compared four models at increasing orders of factorizations.</S>
			<S sid="91" ssid="13">The first is a first-order model.</S>
			<S sid="92" ssid="14">The second model is similar to that of McDonald and Pereira (2006): a factor consists of a main labeleddependency and the head child closest to the modifier (ch).</S>
			<S sid="93" ssid="15">The third model incorporates the modifier child outside the main dependency in the factorization (cmo).</S>
			<S sid="94" ssid="16">Finally, the last model incorpo rates the modifier child inside the dependency span(cmi), thus corresponding to the complete higher order model presented in the previous section.</S>
			<S sid="95" ssid="17">Table 2 shows the accuracies of the models on validation data.</S>
			<S sid="96" ssid="18">Each model was trained for up to 10 epochs, and evaluated at the end of each epoch; we report the best accuracy of these evaluations.Clearly, the accuracy increases as the factors in clude richer information in terms of second-orderrelations.</S>
			<S sid="97" ssid="19">The richest model obtains the best accu racy in the three languages, being much better than that of the first-order model.</S>
			<S sid="98" ssid="20">The table also reportsthe accuracy of an unaveraged first-order model, il lustrating the benefits of parameter averaging.</S>
			<S sid="99" ssid="21">3.2 Results on the Multilingual Track.</S>
			<S sid="100" ssid="22">We trained a higher-order model for each language, using the averaged perceptron.</S>
			<S sid="101" ssid="23">In the experiments presented above we observed that the algorithmdoes not over-fit, and that after two or three train ing epochs only small variations in accuracy occur.</S>
			<S sid="102" ssid="24">Based on this fact, we designed a criterion to train models: we ran the training algorithm for up to three training test sent./min.</S>
			<S sid="103" ssid="25">mem.</S>
			<S sid="104" ssid="26">UAS LAS Arabic 1.21 1.8GB 81.48 70.20 Basque 33.15 1.2GB 81.08 75.73 Catalan 5.50 1.7GB 92.46 87.60 Chinese 1461.66 60MB 86.20 80.86 Czech 18.19 1.8GB 85.16 78.60 English 15.57 1.0GB 90.63 89.61 Greek 8.10 250MB 81.37 73.56 Hungarian 5.65 1.6GB 79.92 75.42 Italian 12.44 900MB 87.19 83.46 Turkish 116.55 600MB 82.41 75.85 Average - - 84.79 79.09 Table 3: Performance of the higher-order projective models on the multilingual track of the CoNLL-2007 task.</S>
			<S sid="105" ssid="27">The first twocolumns report the speed (in sentences per minute) and mem ory requirements of the training algorithm?these evaluationswere made on the first 1,000 training sentences with a Dual Core AMD OpteronTM Processor 256 at 1.8GHz with 4GB of memory.</S>
			<S sid="106" ssid="28">The last two columns report unlabelled (UAS) and labelled (LAS) attachment scores on test data.</S>
			<S sid="107" ssid="29">days of computation, or a maximum of 15 epochs.</S>
			<S sid="108" ssid="30">For Basque, Chinese and Turkish we could complete the 15 epochs.</S>
			<S sid="109" ssid="31">For Arabic and Catalan, we couldonly complete 2 epochs.</S>
			<S sid="110" ssid="32">Table 3 reports the perfor mance of the higher-order projective models on the ten languages of the multilingual track.</S>
	</SECTION>
	<SECTION title="Conclusion. " number="4">
			<S sid="111" ssid="1">We have presented dependency parsing models that exploit higher-order factorizations of trees.</S>
			<S sid="112" ssid="2">Such factorizations allow the definition of second-order features associated with sibling and grand-parental relations.</S>
			<S sid="113" ssid="3">For some languages, our models obtain state-of-the-art results.One drawback of our approach is that the inference algorithms for higher-order models are very expensive.</S>
			<S sid="114" ssid="4">For languages with many dependency la bels or long sentences, training and parsing becomes impractical for current machines.</S>
			<S sid="115" ssid="5">Thus, a promising line of research is the investigation of methods toefficiently incorporate higher-order relations in dis criminative parsing.</S>
			<S sid="116" ssid="6">Acknowledgments I am grateful to Terry Koo, Amir Globerson and Michael Collins for their helpful comments relating this work, and to the anonymous reviewers for their suggestions.</S>
			<S sid="117" ssid="7">A significant part of the system and the code was based on my previous system in the CoNLL-X task, developed with Mihai Surdeanu and Llu??s Ma`rquez at the UPC.</S>
			<S sid="118" ssid="8">The author was supported by the Catalan Ministry of Innovation, Universities and Enterprise.</S>
			<S sid="119" ssid="9">960</S>
	</SECTION>
</PAPER>
