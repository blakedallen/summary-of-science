<PAPER>
  <S sid="0">Functional Unification Grammar: A Formalism For Machine Translation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Arg = (Sense Var) P2 = Arg = (Sense Var)1 This, in turn, is readily interpretable as a description of the logical expression Vq.dog(q)AP(g) It remains to provide verbs with a sense that provides a suitable for is, for (Sense Prop P2 Pred).</S>
    <S sid="2" ssid="2">An example would be the following: Cat = V Lex = barks Tense = Pres Pers = 3 Subj = {Num = Sing Anim = + Obj = NONE = [P2 = [Fred = bark]]] IV Conclusion It has not been possible in this paper to give more than an impression of how an experimental machine translation system might be constructed based on FUG.</S>
    <S sid="3" ssid="3">I hope, however, that it has been possible to convey something of the value of monotonic systems for this purpose.</S>
    <S sid="4" ssid="4">Implementing FUG in an efficient way requires skill and a variety of little known techniques.</S>
    <S sid="5" ssid="5">However, the programs, though subtle, are not large and, once written, they provide the grammarian and lexicographer with an emmense wealth of expressive devices.</S>
    <S sid="6" ssid="6">Any system implemented strictly within this framework will be reversible in the sense that, if it translates from language A to language B the, to the same extent, translates from B to A.</S>
    <S sid="7" ssid="7">If the set among the translations it delivers for a, then a will be among the translations of each of I of no system that comes close to providing these advantages and I know of no facility provided for in any system proposed hitherto that it not subsumable under FUG =</S>
  </ABSTRACT>
  <SECTION title="I Overview" number="1">
    <S sid="8" ssid="1">A classical translating machine stands with one foot on the input text and one on the output.</S>
    <S sid="9" ssid="2">The input text is analyzed by the components of the machine that make up the left leg, each one feeding information into the one above it.</S>
    <S sid="10" ssid="3">Information is passed from component to component down the right leg to construct the output text.</S>
    <S sid="11" ssid="4">The components of each leg correspond to the chapters of an introductory textbook on linguistics with phonology or graphology at the bottom, then syntax, semantics, and so on.</S>
    <S sid="12" ssid="5">The legs join where languages are no longer differentiated and linguistics shades off into psychology and philosophy.</S>
    <S sid="13" ssid="6">The higher levels are also the ones whose theoretical underpinnings are less well known and system designers therefore often tie the legs together somewhere lower down, constructing a more or less ad hoc bridge, pivot, or transfer component.</S>
    <S sid="14" ssid="7">We connot be sure that the classical design is the right design, or the best design, for a translating machine.</S>
    <S sid="15" ssid="8">But it does have several strong points.</S>
    <S sid="16" ssid="9">Since the structure of the components is grounded in linguistic theory, it is possible to divide each of these components into two parts: a formal description of the relevant facts about the language, and an interpreter of the formalism.</S>
    <S sid="17" ssid="10">The formal description is data whereas the interpreter is program.</S>
    <S sid="18" ssid="11">The formal description should ideally serve the needs of synthesis and analysis indifferently.</S>
    <S sid="19" ssid="12">On the other hand we would expect different interpreters to be required in the two legs of the machine.</S>
    <S sid="20" ssid="13">We expect to be able to use identical interpreters in corresponding places in all machines of similar design because the information they embody comes from general lingusitic theory and not from particular languages.</S>
    <S sid="21" ssid="14">The scheme therefore has the advantage of modularity.</S>
    <S sid="22" ssid="15">The linguistic descriptions are independent of the leg of the machine they are used in and the programs are independent of the languages to which they are applied.</S>
    <S sid="23" ssid="16">For all the advantgages of the classical design, it is not hard to imagine improvements.</S>
    <S sid="24" ssid="17">In the best all possible worlds, there would only be one formalism in which all the facts about a language&#8212;morphological, syntactic, semantic, or whatever&#8212;could he stated.</S>
    <S sid="25" ssid="18">A formalism powerful enough to accommodate the various different kinds of linguistic phenomena with equal facility might be unappealing to theoretical linguists because powerful formal systems do not make powerful claims.</S>
    <S sid="26" ssid="19">But the engineering advantages are clear to see.</S>
    <S sid="27" ssid="20">A single formalism would straightforwardly reduce the number of interpreters to two, one for analysis and one for synthesis.</S>
    <S sid="28" ssid="21">Furthermore, the explanatory value of a theory clearly rests on a great deal more than the restriciveness of its formal base.</S>
    <S sid="29" ssid="22">In particular, the possiblity of encompassing what had hitherto been thought to require altogether different kinds of treatment within a single framework could be theoretically interesting.</S>
    <S sid="30" ssid="23">Another clear improvement on the classical design would 'result from merging &#8226;the two interpreters associated with a formalism.</S>
    <S sid="31" ssid="24">The most obvious advantage to be hoped for with this move would be that the overall structure of the translating machine would be greatly simplified, though this would not necessarily happen.</S>
    <S sid="32" ssid="25">It is also reasonable to hope that the machine would be more robust, easier to modify and maintain, and altogether more perspicuous.</S>
    <S sid="33" ssid="26">This is because a device to which analysis and synthesis look essentially the same is one that is fundamentally less time dependent, with fewer internal variables and states; it is apt to work by monitoring constraints laid down in the formal description and ensuring that they are maintained, rather than carrying out long and complex sequences of steps in a carefully prescribed order.</S>
    <S sid="34" ssid="27">&#8226; These advantages are available in large measure through a class of formal devices that are slowly gaining acceptance in linguistics and which are based on the relations contracted by formal objects rather than by transformations of one formal object into another.</S>
    <S sid="35" ssid="28">These systems are all procedurally monotonic in the sense that, while new information may be added to existing data structures, possibly different information on different branches of a nondeterministic process, nothing is ever deleted or changed.</S>
    <S sid="36" ssid="29">As a result, the particular order in which elementary events take place is of little importance.</S>
    <S sid="37" ssid="30">Lexical Functional Grammar and Generalized Phrase-Structure grammar share these relational and monotonic properties.</S>
    <S sid="38" ssid="31">They are also characteristics of Functional Unificational Grammar (FUG) which I believe also has additional properties that suit it particularly well to the needs of experimental machine-translation systems.</S>
    <S sid="39" ssid="32">The term experimental must be taken quite seriously here though, if my view of machine translation were more generally held, it would be redundant.</S>
    <S sid="40" ssid="33">I believe that all machine translation of natural languages is experimental and that he who claims otherwise does his more serious colleagues a serious disservice.</S>
    <S sid="41" ssid="34">I should not wish any thing that I say in this paper as a claim to have solved any of the miriad problems that stand between us and working machine translation systems worthy of the name.</S>
    <S sid="42" ssid="35">The contribution that FUG might make is, I believe, a great deal more conjuncts from disjuncts by the kinds of brackets used to enclose their members; the conjuncts and disjuncts of a = p, b = q, and c = r are written modest, namely to reformalize more simply and perspicuously what has been done before and which has come to be regarded, as I said at the outset &amp;quot;classical&amp;quot;.</S>
    <S sid="43" ssid="36">FUG traffics in descriptions and there is essentially only one kind of description, whether for lexical items, phrases, sentences, or entire languages.</S>
    <S sid="44" ssid="37">Descriptions do not distinguish among levels in the linguistic hierarchy.</S>
    <S sid="45" ssid="38">This is not to say that the distinctions among the levels are unreal or that a linguist working with the formalism whould not respect them.</S>
    <S sid="46" ssid="39">It means only that the notation and its interpretation are always uniform.</S>
    <S sid="47" ssid="40">Either a pair of descriptions is incompatible or they are combinable into a single description.</S>
    <S sid="48" ssid="41">Within FUG, every object has infinitely many descriptions, though a given grammar partitions the descriptions of the words and phrases in its language into a finite number of equivalence classes, one for each interpretation that the grammar assigns to it.</S>
    <S sid="49" ssid="42">The members of an equivalence class differ along dimensions that are grammatically irrelevant&#8212;when they were uttered, whether they ammused Queen Victoria, or whether they contain a prime number of words.</S>
    <S sid="50" ssid="43">Each equivalence class constitutes a lattice with just one member that contains none of these grammatically irrelevant properties, and this canonical member is the only one a linguist would normally concern himself with.</S>
    <S sid="51" ssid="44">However, a grammatical irrelevancy that acquires relevance in the present context is the description of possible translations of a word or phrase, or of one of its interpretations, in one or more other languages.</S>
    <S sid="52" ssid="45">A description is an expression over an essentially arbitrary basic vocabulary.</S>
    <S sid="53" ssid="46">The relations among sets of descriptions therefore remain unchanged under one-for-one mappings of their basic vocabularies.</S>
    <S sid="54" ssid="47">It is therefore possible to arrange that different grammars share no terms except for possible quotations from the languages described.</S>
    <S sid="55" ssid="48">Canonical descriptions of a pair of sentences in different languages according to grammars that shared no terms could always be unified into a single description which would, of course, not be canonical.</S>
    <S sid="56" ssid="49">Since all pairs are unifiable, the relation that they establish between sentences is entriely arbitrary.</S>
    <S sid="57" ssid="50">However, a third grammar can be written that unifies with these combined descriptions only if the sentences they describe in the two langauages stand in a certain relation to one another.</S>
    <S sid="58" ssid="51">The relation we are interested in is, of course, the translation relation which, for the purposes of the kind of experimantal system I have in mind I take to be definable even for isolated sentences.</S>
    <S sid="59" ssid="52">Such a transfer grammar can readily capture all the components of the translation relation that have in fact been built into translation systems: correspondences between words and continuous or discontinuous phrases, use of selectional features or local contexts, case frames, reordering rules, lexical functions, compositional semantics, and so on.</S>
  </SECTION>
  <SECTION title="II The Formalism" number="2">
    <S sid="60" ssid="1">In 'FUG, linguistic objects are represented by functional descriptions (FDs).</S>
    <S sid="61" ssid="2">The basic constituent of a functional description is a feature consisting of an attribute and an associated value.</S>
    <S sid="62" ssid="3">We write features in the form a = v, where a is the attribute and v, the value.</S>
    <S sid="63" ssid="4">Attributes are arbitrary words with no significant internal structure.</S>
    <S sid="64" ssid="5">Values can be of various types, the simplest of which is an atomic value, also an arbitrary word.</S>
    <S sid="65" ssid="6">So Cat = S is a feature of the most elementary type.</S>
    <S sid="66" ssid="7">It appears in the descriptions of sentences, and which declares that their Category is S. The only kinds of non-atomic values that will concern us here are constituent sets, patterns and FDs themselves. respectively.</S>
    <S sid="67" ssid="8">The vertical arrangement of these expressions has proved convenient and it is of minor importance in that braces of the ordinary variety are used for a different purpose in FUG, namely to enclose the members of consituent sets.</S>
    <S sid="68" ssid="9">The following FD describes all sentences whose subject is a singular noun phrase in the nominative or accusative cases It is a crucial property of FDs that no attribute should figure more than once in any conjunct, though a given attribute may appear in feature lists that are themselves the values of different attributes.</S>
    <S sid="69" ssid="10">This being the case, it is always possible to identify a given conjunct or disjunct in a FD by giving a sequence of attributes (al.</S>
    <S sid="70" ssid="11">&#8226; &#8226;ak). al is a attribute in the FD whose value, v1, is another FD.</S>
    <S sid="71" ssid="12">The attribute a2 is an attribute in vi whose value if an FD, and so on.</S>
    <S sid="72" ssid="13">Sequences of attributes of this kind are referred to as paths.</S>
    <S sid="73" ssid="14">If the FD contains disjuncts, then the value identified by the path will naturally also be a disjunct.</S>
    <S sid="74" ssid="15">We sometimes write a path as the value of an attribute to indicate that that value of that attribute is not only eaqual to the value identified by the path but that these values are one and the same, inshort, that they are unified in a sense soon to be explained.</S>
    <S sid="75" ssid="16">Roughly, if more information were acquired about one of the values so that more features were added to it, the same additions would be reflected in the other value.</S>
    <S sid="76" ssid="17">This would not automatically happen because a pair of values happened to be the , same.</S>
    <S sid="77" ssid="18">So, for example, if the topic of the sentence were also its object, we might write [Object = v Topic = (Object)] where v is some FD.</S>
    <S sid="78" ssid="19">Constituent sets are sets of paths identifying within a given FD the descriptions of its constituents in the sense of phrasestructure grammar.</S>
    <S sid="79" ssid="20">No constituent set is specified in example (I) above and the question of whether the subject is a constituent is therefore left open.</S>
    <S sid="80" ssid="21">Example (2), though still artificially simple, is more realistic.</S>
    <S sid="81" ssid="22">It is a syntactic description of the sentence John knows Mary.</S>
    <S sid="82" ssid="23">Perhaps the most striking property of this description is that descriptions of constituents are embedded one inside another, even though the constituents themselves are not so embedded.</S>
    <S sid="83" ssid="24">The value of the Head attribute describes a constituent of the sentence, a fact which is declared in the value of the CSet attribute.</S>
    <S sid="84" ssid="25">We also see that the sentence has a second attribute whose decription is to be found as the value of the Subject of the Head of the Head of the sentence.</S>
    <S sid="85" ssid="26">The reason for this arrangement will become clear shortly.</S>
    <S sid="86" ssid="27">In example (2), every conjunct in which the CSet attribute has a value other than NONE also has a substantive value for the attribute Pat.</S>
    <S sid="87" ssid="28">The value of this attribute is a regular expression over paths which restricts the order in which the constituents must appear.</S>
    <S sid="88" ssid="29">By convention, if no pattern is given for a description which nevertheless does have constituents, they may occur in any order.</S>
    <S sid="89" ssid="30">We shall have more to say about patterns in due course.</S>
    <S sid="90" ssid="31">Essentially the only operation used in processing FUG is that of Unification, the paradigm example of a monotonic operation.</S>
    <S sid="91" ssid="32">Given a pair of descriptions, the unification process first determines whether they are compatible in the sense of allowing the possibility of there being some object that is in the extension of both of them.</S>
    <S sid="92" ssid="33">This possibility would be excluded if there were a path in one of the two descriptions that lead to an atomic value while the same path in the other one lead to some other value.</S>
    <S sid="93" ssid="34">This would occur if, for example, one described a sentence with a singular subject and the other a sentence with a plural subject, or if one described a sentence and the other a noun phrase.</S>
    <S sid="94" ssid="35">There can also be incompatibilities in respect of other kinds of value.</S>
    <S sid="95" ssid="36">Thus, if one has a pattern requiring the subject to precede the main verb whereas the other specifies the other order, the two descriptions will be incompatible.</S>
    <S sid="96" ssid="37">Constituent sets are incompatible if they are not the same.</S>
    <S sid="97" ssid="38">We have briefly considered how three different types of description behave under unification.</S>
    <S sid="98" ssid="39">Implicit in what we have said is that descriptions of different types do not unify with one another.</S>
    <S sid="99" ssid="40">Grammars, which are the descriptions of the infinite sets of sentences that make up a language constitute a type of description that is structurally identical an ordinary FD but is distinguished on the grounds that it behaves slightly differently under unification.</S>
    <S sid="100" ssid="41">In particular, it is possible to unify a grammar with another grammar to produce a new grammar, but it is also possible to unify a grammar with a FD, in which case the result is a new FD.</S>
    <S sid="101" ssid="42">The rules for unifying grammars with grammars are the same as those for unifying FDs with FDs.</S>
    <S sid="102" ssid="43">The rules for unifying grammars with FDs, however, are slightly different and in the difference lies the ability of FUG to describe structures recursively and hence to provide for sentences of unbounded size.</S>
    <S sid="103" ssid="44">The rule for unifying grammars with FDs requires the grammars to be unified&#8212;following the rules for FD unification&#8212;with each individual constituent of the FD.</S>
    <S sid="104" ssid="45">By way of illustration, consider the grammar in (3).</S>
    <S sid="105" ssid="46">Like most grammars, it is a disjunction of clauses, one for each (nonterminal) category or constituent type in the language.</S>
    <S sid="106" ssid="47">The first of the three clauses in the principle dirjunction describes sentences as having a head whose head is of category V. This characterization is in line with so called X-theory, according to which a sentence belongs to the category V. In general, a phrase of category X, for whatever X, has a head constituent of category X, that is, a category with the same name but one less bar.</S>
    <S sid="107" ssid="48">X is built into the very fabric of the version of FUG illutrated here where, for example, a setence is by definition a phrase whose head's head is a verb.</S>
    <S sid="108" ssid="49">The head of a sentence is a V, that is, a phrase whose head is of category V and which has no head of its own.</S>
    <S sid="109" ssid="50">A phrase with this description cannot unify with the first clause in the grammar because its head has the feature [Head = NONE].</S>
    <S sid="110" ssid="51">Of sentences, the grammar says that they have two constituents.</S>
    <S sid="111" ssid="52">It is no surprise that the second of these is its head.</S>
    <S sid="112" ssid="53">The first would usually be called its subject but is here characterized as the subject of its verb.</S>
    <S sid="113" ssid="54">This does not imply that there must be lexical entries not only for all the verbs in the language but that there must be such an entry for each of the subjects that the verb might have.</S>
    <S sid="114" ssid="55">What it does mean is that the subject must be unifiable with any description the verb gives of its subject and thus provides automatically both for any selectional restrictions that a verb might place on its subject but also for agreement in person and number between subject and verb.</S>
    <S sid="115" ssid="56">Objects are handled in an analogous manner.</S>
    <S sid="116" ssid="57">Thus, the lexical entries for the French verb forms connait and sait might be as follows: Obj = [Cat = NP] Each requires its subject to be third person, singular and animate.</S>
    <S sid="117" ssid="58">Taking a rather simplistic view of the difference between these verbs for the sake of the example, this lexicon states that connatt takes noun phrases as objects, whereas sait takes sentences.</S>
  </SECTION>
  <SECTION title="III Translation" number="3">
    <S sid="118" ssid="1">Consider now the French sentence Jean connatt Marie which is presumably a reasonable rendering of the English sentence John knows Mary, a possible fumctional description of which we was given in (2).</S>
    <S sid="119" ssid="2">I take it that the French sentence has an essentially isomorphic structure.</S>
    <S sid="120" ssid="3">In fact, following the plan laid out at the beginning of the paper, let us assume that the functional description of the French sentence is that given in (2) with obvious replacements for the values of the Lex attribute and with attribute names x, in the English grammar systematically replaced by F-x, in the French.</S>
    <S sid="121" ssid="4">Thus we have F-Cat, F-Head, etc.</S>
    <S sid="122" ssid="5">Suppose now, that, using the English grammar and a suitable parsing algorithm, the structure given in (2) is derived from the English sentence, and that this description is then unified with the following transfer grammar: The first clause of the principal conjunct states a very strong requirement, namely that the description of a phrase in one of the two languages should be a description of a phrase of the same category in the other language.</S>
    <S sid="123" ssid="6">The disjunct that follows is essentially a bilingual lexicon that requires the description of a lexical item in one language to be a description of that word's counterpart in the other language.</S>
    <S sid="124" ssid="7">It allows the English verb know to be set in correspondence with either connattre or savoir and gives no means by which to distinguish them.</S>
    <S sid="125" ssid="8">In the simple example we are developing, the choice will be determined on the basis of criteria expressed only in the French grammar, namely whether the object is a noun phrase or a sentence.</S>
    <S sid="126" ssid="9">This is about as trivial a transfer grammar as one could readily imagine writing.</S>
    <S sid="127" ssid="10">It profits to the minimal possible extent from the power of FUG.</S>
    <S sid="128" ssid="11">Nevertheless, it should already do better than word-for-word translation because the transfer grammar says nothing at all about the order of the words or phrases.</S>
    <S sid="129" ssid="12">If the English grammar states that pronominal objects follow the verb and the French one says that they precede, the same transfer grammar, though still without any explicit mention of order, will cause the appropriate &amp;quot;reordering&amp;quot; to take place.</S>
    <S sid="130" ssid="13">Similarly, nothing more would be required in the transfer grammar in order to place adjectives properly with respect to the nouns they modify, and so forth.</S>
    <S sid="131" ssid="14">It may be objected to the line of argument that I have been persuing that it requires the legs of the translating machine to be tied together at too lower a level, essentially at the level of syntax.</S>
    <S sid="132" ssid="15">To be sure, it allows more elaborate transfer grammars than the one just illustrated so that the translation of a sentence would not have to be structurally isomorphic with its source, modulo ordering.</S>
    <S sid="133" ssid="16">But the device is essentially syntactic.</S>
    <S sid="134" ssid="17">However, the relations that can be characterized by FUG and similar monotonic devices are in fact a great deal more diverse than this suggests.</S>
    <S sid="135" ssid="18">In particular, much of what falls under the umbrella of semantics in modern linguistics also fits conveniently within this framework.</S>
    <S sid="136" ssid="19">Something of the flavor of this can be captured from the following example.</S>
    <S sid="137" ssid="20">Suppose that the lexical entries for the words all and dogs are as follows: = [Type = Fred]]]Pred = dog When the first of these is unified with the value of the Art attribute in the second as required by the grammar, the result is as follows: This, in turn, is readily interpretable as a description of the logical expression It remains to provide verbs with a sense that provides a suitable value for P, that is, for (Sense Prop P2 Pred).</S>
    <S sid="138" ssid="21">An example would be the following:</S>
  </SECTION>
</PAPER>
