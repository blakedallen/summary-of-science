<PAPER>
  <S sid="0">TnT - A Statistical Part-Of-Speech Tagger</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Trigrams'n'Tags (TnT) is an efficient statistical part-of-speech tagger.</S>
    <S sid="2" ssid="2">Contrary to claims found elsewhere in the literature, we argue that a tagger based on Markov models performs at least as well as other current approaches, including the Maximum Entropy framework.</S>
    <S sid="3" ssid="3">A recent comparison has even shown that TnT performs significantly better for the tested corpora.</S>
    <S sid="4" ssid="4">We describe the basic model of TnT, the techniques used for smoothing and for handling unknown words.</S>
    <S sid="5" ssid="5">Furthermore, we present evaluations on two corpora.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">A large number of current language processing systems use a part-of-speech tagger for pre-processing.</S>
    <S sid="7" ssid="2">The tagger assigns a (unique or ambiguous) part-ofspeech tag to each token in the input and passes its output to the next processing level, usually a parser.</S>
    <S sid="8" ssid="3">Furthermore, there is a large interest in part-ofspeech tagging for corpus annotation projects, who create valuable linguistic resources by a combination of automatic processing and human correction.</S>
    <S sid="9" ssid="4">For both applications, a tagger with the highest possible accuracy is required.</S>
    <S sid="10" ssid="5">The debate about which paradigm solves the part-of-speech tagging problem best is not finished.</S>
    <S sid="11" ssid="6">Recent comparisons of approaches that can be trained on corpora (van Halteren et al., 1998; Volk and Schneider, 1998) have shown that in most cases statistical aproaches (Cutting et al., 1992; Schmid, 1995; Ratnaparkhi, 1996) yield better results than finite-state, rule-based, or memory-based taggers (Brill, 1993; Daelemans et al., 1996).</S>
    <S sid="12" ssid="7">They are only surpassed by combinations of different systems, forming a &amp;quot;voting tagger&amp;quot;.</S>
    <S sid="13" ssid="8">Among the statistical approaches, the Maximum Entropy framework has a very strong position.</S>
    <S sid="14" ssid="9">Nevertheless, a recent independent comparison of 7 taggers (Zavrel and Daelemans, 1999) has shown that another approach even works better: Markov models combined with a good smoothing technique and with handling of unknown words.</S>
    <S sid="15" ssid="10">This tagger, TnT, not only yielded the highest accuracy, it also was the fastest both in training and tagging.</S>
    <S sid="16" ssid="11">The tagger comparison was organized as a &amp;quot;blackbox test&amp;quot;: set the same task to every tagger and compare the outcomes.</S>
    <S sid="17" ssid="12">This paper describes the models and techniques used by TnT together with the implementation.</S>
    <S sid="18" ssid="13">The reader will be surprised how simple the underlying model is.</S>
    <S sid="19" ssid="14">The result of the tagger comparison seems to support the maxime &amp;quot;the simplest is the best&amp;quot;.</S>
    <S sid="20" ssid="15">However, in this paper we clarify a number of details that are omitted in major previous publications concerning tagging with Markov models.</S>
    <S sid="21" ssid="16">As two examples, (Rabiner, 1989) and (Charniak et al., 1993) give good overviews of the techniques and equations used for Markov models and part-ofspeech tagging, but they are not very explicit in the details that are needed for their application.</S>
    <S sid="22" ssid="17">We argue that it is not only the choice of the general model that determines the result of the tagger but also the various &amp;quot;small&amp;quot; decisions on alternatives.</S>
    <S sid="23" ssid="18">The aim of this paper is to give a detailed account of the techniques used in TnT.</S>
    <S sid="24" ssid="19">Additionally, we present results of the tagger on the NEGRA corpus (Brants et al., 1999) and the Penn Treebank (Marcus et al., 1993).</S>
    <S sid="25" ssid="20">The Penn Treebank results reported here for the Markov model approach are at least equivalent to those reported for the Maximum Entropy approach in (Ratnaparkhi, 1996).</S>
    <S sid="26" ssid="21">For a comparison to other taggers, the reader is referred to (Zavrel and Daelemans, 1999).</S>
  </SECTION>
  <SECTION title="2 Architecture" number="2">
    <S sid="27" ssid="1">TnT uses second order Markov models for part-ofspeech tagging.</S>
    <S sid="28" ssid="2">The states of the model represent tags, outputs represent the words.</S>
    <S sid="29" ssid="3">Transition probabilities depend on the states, thus pairs of tags.</S>
    <S sid="30" ssid="4">Output probabilities only depend on the most recent category.</S>
    <S sid="31" ssid="5">To be explicit, we calculate for a given sequence of words w1 of length T. t1 tr are elements of the tagset, the additional tags t_1, to, and t7-,&#177;1 are beginning-of-sequence and end-of-sequence markers.</S>
    <S sid="32" ssid="6">Using these additional tags, even if they stem from rudimentary processing of punctuation marks, slightly improves tagging results.</S>
    <S sid="33" ssid="7">This is different from formulas presented in other publications, which just stop with a &amp;quot;loose end&amp;quot; at the last word.</S>
    <S sid="34" ssid="8">If sentence boundaries are not marked in the input, TnT adds these tags if it encounters one of [.!?</S>
    <S sid="35" ssid="9">;] as a token.</S>
    <S sid="36" ssid="10">Transition and output probabilities are estimated from a tagged corpus.</S>
    <S sid="37" ssid="11">As a first step, we use the maximum likelihood probabilities P which are derived from the relative frequencies: for all t1, t2, t3 in the tagset and w3 in the lexicon.</S>
    <S sid="38" ssid="12">N is the total number of tokens in the training corpus.</S>
    <S sid="39" ssid="13">We define a maximum likelihood probability to be zero if the corresponding nominators and denominators are zero.</S>
    <S sid="40" ssid="14">As a second step, contextual frequencies are smoothed and lexical frequences are completed by handling words that are not in the lexicon (see below).</S>
    <S sid="41" ssid="15">Trigram probabilities generated from a corpus usually cannot directly be used because of the sparsedata problem.</S>
    <S sid="42" ssid="16">This means that there are not enough instances for each trigram to reliably estimate the probability.</S>
    <S sid="43" ssid="17">Furthermore, setting a probability to zero because the corresponding trigram never occured in the corpus has an undesired effect.</S>
    <S sid="44" ssid="18">It causes the probability of a complete sequence to be set to zero if its use is necessary for a new text sequence, thus makes it impossible to rank different sequences containing a zero probability.</S>
    <S sid="45" ssid="19">The smoothing paradigm that delivers the best results in TnT is linear interpolation of unigrams, bigrams, and trigrams.</S>
    <S sid="46" ssid="20">Therefore, we estimate a trigram probability as follows: P are maximum likelihood estimates of the probabilities, and A1 + A2 &#177; A3 = 1, SO P again represent probability distributions.</S>
    <S sid="47" ssid="21">We use the context-independent variant of linear interpolation, i.e., the values of the As do not depend on the particular trigram.</S>
    <S sid="48" ssid="22">Contrary to intuition, this yields better results than the context-dependent variant.</S>
    <S sid="49" ssid="23">Due to sparse-data problems, one cannot estimate a different set of As for each trigram.</S>
    <S sid="50" ssid="24">Therefore, it is common practice to group trigrams by frequency and estimate tied sets of As.</S>
    <S sid="51" ssid="25">However, we are not aware of any publication that has investigated frequency groupings for linear interpolation in part-of-speech tagging.</S>
    <S sid="52" ssid="26">All groupings that we have tested yielded at most equivalent results to contextindependent linear interpolation.</S>
    <S sid="53" ssid="27">Some groupings even yielded worse results.</S>
    <S sid="54" ssid="28">The tested groupings included a) one set of As for each frequency value and b) two classes (low and high frequency) on the two ends of the scale, as well as several groupings in between and several settings for partitioning the classes.</S>
    <S sid="55" ssid="29">The values of A1, A2, and A3 are estimated by deleted interpolation.</S>
    <S sid="56" ssid="30">This technique successively removes each trigram from the training corpus and estimates best values for the As from all other ngrams in the corpus.</S>
    <S sid="57" ssid="31">Given the frequency counts for uni-, bi-, and trigrams, the weights can be very efficiently determined with a processing time linear in the number of different trigrams.</S>
    <S sid="58" ssid="32">The algorithm is given in figure 1.</S>
    <S sid="59" ssid="33">Note that subtracting 1 means taking unseen data into account.</S>
    <S sid="60" ssid="34">Without this subtraction the model would overfit the training data and would generally yield worse results.</S>
    <S sid="61" ssid="35">Currently, the method of handling unknown words that seems to work best for inflected languages is a suffix analysis as proposed in (Samuelsson, 1993).</S>
    <S sid="62" ssid="36">Tag probabilities are set according to the word's ending.</S>
    <S sid="63" ssid="37">The suffix is a strong predictor for word classes, e.g., words in the Wall Street Journal part of the Penn Treebank ending in able are adjectives (.11) in 98% of the cases (e.g. fashionable, variable) , the rest of 2% are nouns (e.g. cable, variable).</S>
    <S sid="64" ssid="38">The probability distribution for a particular suffix is generated from all words in the training set that share the same suffix of some predefined maximum length.</S>
    <S sid="65" ssid="39">The term suffix as used here means &amp;quot;final sequence of characters of a word&amp;quot; which is not necessarily a linguistically meaningful suffix.</S>
    <S sid="66" ssid="40">Probabilities are smoothed by successive abstraction.</S>
    <S sid="67" ssid="41">This calculates the probability of a tag t given the last m letters i of an n letter word: P(t1/7&#8222;,+1,,..ln).</S>
    <S sid="68" ssid="42">The sequence of increasingly more general contexts omits more and more characters of the suffix, such that P(tlin-m+2, &#8226; &#8226; &#8226; P(tlin_m+3, ,i), , P(t) are used for smoothing.</S>
    <S sid="69" ssid="43">The recursion formula is set A = A2 = A3 = 0 foreach trigram t1,t2,t3 with f (ti,t2,t3) &gt;0 depending on the maximum of the following three values: for i = m ... 0, using the maximum likelihood estimates P from frequencies in the lexicon, weights Oi and the initialization For the Markov model, we need the inverse conditional probabilities P(1,2_1+1, ... /Tilt) which are obtained by Bayesian inversion.</S>
    <S sid="70" ssid="44">A theoretical motivated argumentation uses the standard deviation of the maximum likelihood probabilities for the weights 0, (Samuelsson, 1993).</S>
    <S sid="71" ssid="45">This leaves room for interpretation.</S>
    <S sid="72" ssid="46">We use the longest suffix that we can find in the training set (i.e., for which the frequency is greater than or equal to 1), but at most 10 characters.</S>
    <S sid="73" ssid="47">This is an empirically determined choice.</S>
    <S sid="74" ssid="48">2) We use a context-independent approach for 0&#8222; as we did for the contextual weights A.</S>
    <S sid="75" ssid="49">It turned out to be a good choice to set all 0, to the standard deviation of the unconditioned maximum likelihood probabilities of the tags in the training corpus, i.e., we set for all i = 0 ... m &#8212; 1, using a tagset of s tags and the average (11) This usually yields values in the range 0,03 ... 0.10.</S>
    <S sid="76" ssid="50">3) We use different estimates for uppercase and lowercase words, i.e., we maintain two different suffix tries depending on the capitalization of the word.</S>
    <S sid="77" ssid="51">This information improves the tagging results.</S>
    <S sid="78" ssid="52">4) Another freedom concerns the choice of the words in the lexicon that should be used for suffix handling.</S>
    <S sid="79" ssid="53">Should we use all words, or are some of them better suited than others?</S>
    <S sid="80" ssid="54">Accepting that unknown words are most probably infrequent, one can argue that using suffixes of infrequent words in the lexicon is a better approximation for unknown words than using suffixes of frequent words.</S>
    <S sid="81" ssid="55">Therefore, we restrict the procedure of suffix handling to words with a frequency smaller than or equal to some threshold value.</S>
    <S sid="82" ssid="56">Empirically, 10 turned out to be a good choice for this threshold.</S>
    <S sid="83" ssid="57">Additional information that turned out to be useful for the disambiguation process for several corpora and tagsets is capitalization information.</S>
    <S sid="84" ssid="58">Tags are usually not informative about capitalization, but probability distributions of tags around capitalized words are different from those not capitalized.</S>
    <S sid="85" ssid="59">The effect is larger for English, which only capitalizes proper names, and smaller for German, which capitalizes all nouns.</S>
    <S sid="86" ssid="60">We use flags ci that are true if wi is a capitalized word and false otherwise.</S>
    <S sid="87" ssid="61">These flags are added to the contextual probability distributions.</S>
    <S sid="88" ssid="62">Instead of and equations (3) to (5) are updated accordingly.</S>
    <S sid="89" ssid="63">This is equivalent to doubling the size of the tagset and using different tags depending on capitalization.</S>
    <S sid="90" ssid="64">The processing time of the Viterbi algorithm (Rabiner, 1989) can be reduced by introducing a beam search.</S>
    <S sid="91" ssid="65">Each state that receives a 6 value smaller than the largest 6 divided by some threshold value 0 is excluded from further processing.</S>
    <S sid="92" ssid="66">While the Viterbi algorithm is guaranteed to find the sequence of states with the highest probability, this is no longer true when beam search is added.</S>
    <S sid="93" ssid="67">Nevertheless, for practical purposes and the right choice of 0, there is virtually no difference between the algorithm with and without a beam.</S>
    <S sid="94" ssid="68">Empirically, a value of 0 = 1000 turned out to approximately double the speed of the tagger without affecting the accuracy.</S>
    <S sid="95" ssid="69">The tagger currently tags between 30,000 and 60,000 tokens per second (including file I/O) on a Pentium 500 running Linux.</S>
    <S sid="96" ssid="70">The speed mainly depends on the percentage of unknown words and on the average ambiguity rate.</S>
  </SECTION>
  <SECTION title="3 Evaluation" number="3">
    <S sid="97" ssid="1">We evaluate the tagger's performance under several aspects.</S>
    <S sid="98" ssid="2">First of all, we determine the tagging accuracy averaged over ten iterations.</S>
    <S sid="99" ssid="3">The overall accuracy, as well as separate accuracies for known and unknown words are measured.</S>
    <S sid="100" ssid="4">Second, learning curves are presented, that indicate the performance when using training corpora of different sizes, starting with as few as 1,000 tokens and ranging to the size of the entire corpus (minus the test set).</S>
    <S sid="101" ssid="5">An important characteristic of statistical taggers is that they not only assign tags to words but also probabilities in order to rank different assignments.</S>
    <S sid="102" ssid="6">We distinguish reliable from unreliable assignments by the quotient of the best and second best assignmentsl .</S>
    <S sid="103" ssid="7">All assignments for which this quotient is larger than some threshold are regarded as reliable, the others as unreliable.</S>
    <S sid="104" ssid="8">As we will see below, accuracies for reliable assignments are much higher.</S>
    <S sid="105" ssid="9">The tests are performed on partitions of the corpora that use 90% as training set and 10% as test set, so that the test data is guaranteed to be unseen during training.</S>
    <S sid="106" ssid="10">Each result is obtained by repeating the experiment 10 times with different partitions and averaging the single outcomes.</S>
    <S sid="107" ssid="11">In all experiments, contiguous test sets are used.</S>
    <S sid="108" ssid="12">The alternative is a round-robin procedure that puts every 10th sentence into the test set.</S>
    <S sid="109" ssid="13">We argue that contiguous test sets yield more realistic results because completely unseen articles are tagged.</S>
    <S sid="110" ssid="14">Using the round-robin procedure, parts of an article are already seen, which significantly reduces the percentage of unknown words.</S>
    <S sid="111" ssid="15">Therefore, we expect even 'By definition, this quotient is oo if there is only one possible tag for a given word. higher results when testing on every 10th sentence instead of a contiguous set of 10%.</S>
    <S sid="112" ssid="16">In the following, accuracy denotes the number of correctly assigned tags divided by the number of tokens in the corpus processed.</S>
    <S sid="113" ssid="17">The tagger is allowed to assign exactly one tag to each token.</S>
    <S sid="114" ssid="18">We distinguish the overall accuracy, taking into account all tokens in the test corpus, and separate accuracies for known and unknown tokens.</S>
    <S sid="115" ssid="19">The latter are interesting, since usually unknown tokens are much more difficult to process than known tokens, for which a list of valid tags can be found in the lexicon.</S>
    <S sid="116" ssid="20">The German NEGRA corpus consists of 20,000 sentences (355,000 tokens) of newspaper texts (Frankfurter Rundschau) that are annotated with parts-ofspeech and predicate-argument structures (Skut et al., 1997).</S>
    <S sid="117" ssid="21">It was developed at the Saarland University in Saarbriicken2.</S>
    <S sid="118" ssid="22">Part of it was tagged at the IMS Stuttgart.</S>
    <S sid="119" ssid="23">This evaluation only uses the partof-speech annotation and ignores structural annotations.</S>
    <S sid="120" ssid="24">Tagging accuracies for the NEGRA corpus are shown in table 2.</S>
    <S sid="121" ssid="25">Figure 3 shows the learning curve of the tagger, i.e., the accuracy depending on the amount of training data.</S>
    <S sid="122" ssid="26">Training length is the number of tokens used for training.</S>
    <S sid="123" ssid="27">Each training length was tested ten times, training and test sets were randomly chosen and disjoint, results were averaged.</S>
    <S sid="124" ssid="28">The training length is given on a logarithmic scale.</S>
    <S sid="125" ssid="29">It is remarkable that tagging accuracy for known words is very high even for very small training corpora.</S>
    <S sid="126" ssid="30">This means that we have a good chance of getting the right tag if a word is seen at least once during training.</S>
    <S sid="127" ssid="31">Average percentages of unknown tokens are shown in the bottom line of each diagram.</S>
    <S sid="128" ssid="32">We exploit the fact that the tagger not only determines tags, but also assigns probabilities.</S>
    <S sid="129" ssid="33">If there is an alternative that has a probability &amp;quot;close to&amp;quot; that of the best assignment, this alternative can be viewed as almost equally well suited.</S>
    <S sid="130" ssid="34">The notion of &amp;quot;close to&amp;quot; is expressed by the distance of probabilities, and this in turn is expressed by the quotient of probabilities.</S>
    <S sid="131" ssid="35">So, the distance of the probabilities of a best tag tbest and an alternative tag tau is expressed by p(tbest)/P(talt)7 which is some value greater or equal to 1 since the best tag assignment has the highest probability.</S>
    <S sid="132" ssid="36">Figure 4 shows the accuracy when separating assignments with quotients larger and smaller than the threshold (hence reliable and unreliable assignments).</S>
    <S sid="133" ssid="37">As expected, we find that accuracies for percentage known unknown &#8226; overall unknowns acc. acc. acc. a Table 5: Part-of-speech tagging accuracy for the Penn Treebank.</S>
    <S sid="134" ssid="38">The table shows the percentage of unknown tokens, separate accuracies and standard deviations for known and unknown tokens, as well as the overall accuracy. percentage known unknown overall unknowns acc. acc. acc. reliable assignments are much higher than for unreliable assignments.</S>
    <S sid="135" ssid="39">This distinction is, e.g., useful for annotation projects during the cleaning process, or during pre-processing, so the tagger can emit multiple tags if the best tag is classified as unreliable.</S>
    <S sid="136" ssid="40">We use the Wall Street Journal as contained in the Penn Treebank for our experiments.</S>
    <S sid="137" ssid="41">The annotation consists of four parts: 1) a context-free structure augmented with traces to mark movement and discontinuous constituents, 2) phrasal categories that are annotated as node labels, 3) a small set of grammatical functions that are annotated as extensions to the node labels, and 4) part-of-speech tags (Marcus et al., 1993).</S>
    <S sid="138" ssid="42">This evaluation only uses the part-ofspeech annotation.</S>
    <S sid="139" ssid="43">The Wall Street Journal part of the Penn Treebank consists of approx.</S>
    <S sid="140" ssid="44">50,000 sentences (1.2 million tokens).</S>
    <S sid="141" ssid="45">Tagging accuracies for the Penn Treebank are shown in table 5.</S>
    <S sid="142" ssid="46">Figure 6 shows the learning curve of the tagger, i.e., the accuracy depending on the amount of training data.</S>
    <S sid="143" ssid="47">Training length is the number of tokens used for training.</S>
    <S sid="144" ssid="48">Each training length was tested ten times.</S>
    <S sid="145" ssid="49">Training and test sets were disjoint, results are averaged.</S>
    <S sid="146" ssid="50">The training length is given on a logarithmic scale.</S>
    <S sid="147" ssid="51">As for the NEGRA corpus, tagging accuracy is very high for known tokens even with small amounts of training data.</S>
    <S sid="148" ssid="52">We exploit the fact that the tagger not only determines tags, but also assigns probabilities.</S>
    <S sid="149" ssid="53">Figure 7 shows the accuracy when separating assignments with quotients larger and smaller than the threshold (hence reliable and unreliable assignments).</S>
    <S sid="150" ssid="54">Again, we find that accuracies for reliable assignments are much higher than for unreliable assignments.</S>
    <S sid="151" ssid="55">Average part-of-speech tagging accuracy is between 96% and 97%, depending on language and tagset, which is at least on a par with state-of-the-art results found in the literature, possibly better.</S>
    <S sid="152" ssid="56">For the Penn Treebank, (Ratnaparkhi, 1996) reports an accuracy of 96.6% using the Maximum Entropy approach, our much simpler and therefore faster HMM approach delivers 96.7%.</S>
    <S sid="153" ssid="57">This comparison needs to be re-examined, since we use a ten-fold crossvalidation and averaging of results while Ratnaparkhi only makes one test run.</S>
    <S sid="154" ssid="58">The accuracy for known tokens is significantly higher than for unknown tokens.</S>
    <S sid="155" ssid="59">For the German newspaper data, results are 8.7% better when the word was seen before and therefore is in the lexicon, than when it was not seen before (97.7% vs. 89.0%).</S>
    <S sid="156" ssid="60">Accuracy for known tokens is high even with very small amounts of training data.</S>
    <S sid="157" ssid="61">As few as 1000 tokens are sufficient to achieve 95%-96% accuracy for them.</S>
    <S sid="158" ssid="62">It is important for the tagger to have seen a word at least once during training.</S>
    <S sid="159" ssid="63">Stochastic taggers assign probabilities to tags.</S>
    <S sid="160" ssid="64">We exploit the probabilities to determine reliability of assignments.</S>
    <S sid="161" ssid="65">For a subset that is determined during processing by the tagger we achieve accuracy rates of over 99%.</S>
    <S sid="162" ssid="66">The accuracy of the complement set is much lower.</S>
    <S sid="163" ssid="67">This information can, e.g., be exploited in an annotation project to give an additional treatment to the unreliable assignments, or to pass selected ambiguities to a subsequent processing step.</S>
  </SECTION>
  <SECTION title="4 Conclusion" number="4">
    <S sid="164" ssid="1">We have shown that a tagger based on Markov models yields state-of-the-art results, despite contrary claims found in the literature.</S>
    <S sid="165" ssid="2">For example, the Markov model tagger used in the comparison of (van Halteren et al., 1998) yielded worse results than all other taggers.</S>
    <S sid="166" ssid="3">In our opinion, a reason for the wrong claim is that the basic algorithms leave several decisions to the implementor.</S>
    <S sid="167" ssid="4">The rather large amount of freedom was not handled in detail in previous publications: handling of start- and end-of-sequence, the exact smoothing technique, how to determine the weights for context probabilities, details on handling unknown words, and how to determine the weights for unknown words.</S>
    <S sid="168" ssid="5">Note that the decisions we made yield good results for both the German and the English Corpus.</S>
    <S sid="169" ssid="6">They do so for several other corpora as well.</S>
    <S sid="170" ssid="7">The architecture remains applicable to a large variety of languages.</S>
    <S sid="171" ssid="8">According to current tagger comparisons (van Halteren et al., 1998; Zavrel and Daelemans, 1999), and according to a comparsion of the results presented here with those in (Ratnaparkhi, 1996), the Maximum Entropy framework seems to be the only other approach yielding comparable results to the one presented here.</S>
    <S sid="172" ssid="9">It is a very interesting future research topic to determine the advantages of either of these approaches, to find the reason for their high accuracies, and to find a good combination of both.</S>
    <S sid="173" ssid="10">TnT is freely available to universities and related organizations for research purposes (see http://www.coli.uni-sb.derthorstenAnt).</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="5">
    <S sid="174" ssid="1">Many thanks go to Hans Uszkoreit for his support during the development of TnT.</S>
    <S sid="175" ssid="2">Most of the work on TnT was carried out while the author received a grant of the Deutsche Forschungsgemeinschaft in the Graduiertenkolleg Kognitionswissenschaft Saarbriicken.</S>
    <S sid="176" ssid="3">Large annotated corpora are the pre-requisite for developing and testing part-ofspeech taggers, and they enable the generation of high-quality language models.</S>
    <S sid="177" ssid="4">Therefore, I would like to thank all the people who took the effort to annotate the Penn Treebank, the Susanne Corpus, the Stuttgarter Referenzkorpus, the NEGRA Corpus, the Verbmobil Corpora, and several others.</S>
    <S sid="178" ssid="5">And, last but not least, I would like to thank the users of TnT who provided me with bug reports and valuable suggestions for improvements.</S>
  </SECTION>
</PAPER>
