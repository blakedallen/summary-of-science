<PAPER>
  <S sid="0">A Single Generative Model for Joint Morphological Segmentation and Syntactic Parsing</S>
  <ABSTRACT>
    <S sid="1" ssid="1">Morphological processes in Semitic languages deliver space-delimited words which introduce multiple, distinct, syntactic units into the structure of the input sentence.</S>
    <S sid="2" ssid="2">These words are in turn highly ambiguous, breaking the assumption underlying most parsers that the yield of a tree for a given sentence is known in advance.</S>
    <S sid="3" ssid="3">Here we propose a single joint model for performing both morphological segmentation and syntactic disambiguation which bypasses the associated circularity.</S>
    <S sid="4" ssid="4">Using a treebank grammar, a data-driven lexicon, and a linguistically motivated unknown-tokens handling technique our model outperforms previous pipelined, integrated or factorized systems for Hebrew morphological and syntactic processing, yielding an error reduction of 12% over the best published results so far.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">Current state-of-the-art broad-coverage parsers assume a direct correspondence between the lexical items ingrained in the proposed syntactic analyses (the yields of syntactic parse-trees) and the spacedelimited tokens (henceforth, &#8216;tokens&#8217;) that constitute the unanalyzed surface forms (utterances).</S>
    <S sid="6" ssid="2">In Semitic languages the situation is very different.</S>
    <S sid="7" ssid="3">In Modern Hebrew (Hebrew), a Semitic language with very rich morphology, particles marking conjunctions, prepositions, complementizers and relativizers are bound elements prefixed to the word (Glinert, 1989).</S>
    <S sid="8" ssid="4">The Hebrew token &#8216;bcl&#8217;1, for example, stands for the complete prepositional phrase 'We adopt here the transliteration of (Sima&#8217;an et al., 2001).</S>
    <S sid="9" ssid="5">&#8220;in the shadow&#8221;.</S>
    <S sid="10" ssid="6">This token may further embed into a larger utterance, e.g., &#8216;bcl hneim&#8217; (literally &#8220;in-the-shadow the-pleasant&#8221;, meaning roughly &#8220;in the pleasant shadow&#8221;) in which the dominated Noun is modified by a proceeding space-delimited adjective.</S>
    <S sid="11" ssid="7">It should be clear from the onset that the particle b (&#8220;in&#8221;) in &#8216;bcl&#8217; may then attach higher than the bare noun cl (&#8220;shadow&#8221;).</S>
    <S sid="12" ssid="8">This leads to word- and constituent-boundaries discrepancy, which breaks the assumptions underlying current state-of-the-art statistical parsers.</S>
    <S sid="13" ssid="9">One way to approach this discrepancy is to assume a preceding phase of morphological segmentation for extracting the different lexical items that exist at the token level (as is done, to the best of our knowledge, in all parsing related work on Arabic and its dialects (Chiang et al., 2006)).</S>
    <S sid="14" ssid="10">The input for the segmentation task is however highly ambiguous for Semitic languages, and surface forms (tokens) may admit multiple possible analyses as in (BarHaim et al., 2007; Adler and Elhadad, 2006).</S>
    <S sid="15" ssid="11">The aforementioned surface form bcl, for example, may also stand for the lexical item &#8220;onion&#8221;, a Noun.</S>
    <S sid="16" ssid="12">The implication of this ambiguity for a parser is that the yield of syntactic trees no longer consists of spacedelimited tokens, and the expected number of leaves in the syntactic analysis in not known in advance.</S>
    <S sid="17" ssid="13">Tsarfaty (2006) argues that for Semitic languages determining the correct morphological segmentation is dependent on syntactic context and shows that increasing information sharing between the morphological and the syntactic components leads to improved performance on the joint task.</S>
    <S sid="18" ssid="14">Cohen and Smith (2007) followed up on these results and proposed a system for joint inference of morphological and syntactic structures using factored models each designed and trained on its own.</S>
    <S sid="19" ssid="15">Here we push the single-framework conjecture across the board and present a single model that performs morphological segmentation and syntactic disambiguation in a fully generative framework.</S>
    <S sid="20" ssid="16">We claim that no particular morphological segmentation is a-priory more likely for surface forms before exploring the compositional nature of syntactic structures, including manifestations of various long-distance dependencies.</S>
    <S sid="21" ssid="17">Morphological segmentation decisions in our model are delegated to a lexeme-based PCFG and we show that using a simple treebank grammar, a data-driven lexicon, and a linguistically motivated unknown-tokens handling our model outperforms (Tsarfaty, 2006) and (Cohen and Smith, 2007) on the joint task and achieves state-of-the-art results on a par with current respective standalone models.2</S>
  </SECTION>
  <SECTION title="2 Modern Hebrew Structure" number="2">
    <S sid="22" ssid="1">Segmental morphology Hebrew consists of seven particles m(&#8220;from&#8221;) f(&#8220;when&#8221;/&#8220;who&#8221;/&#8220;that&#8221;) h(&#8220;the&#8221;) w(&#8220;and&#8221;) k(&#8220;like&#8221;) l(&#8220;to&#8221;) and b(&#8220;in&#8221;). which may never appear in isolation and must always attach as prefixes to the following open-class category item we refer to as stem.</S>
    <S sid="23" ssid="2">Several such particles may be prefixed onto a single stem, in which case the affixation is subject to strict linear precedence constraints.</S>
    <S sid="24" ssid="3">Co-occurrences among the particles themselves are subject to further syntactic and lexical constraints relative to the stem.</S>
    <S sid="25" ssid="4">While the linear precedence of segmental morphemes within a token is subject to constraints, the dominance relations among their mother and sister constituents is rather free.</S>
    <S sid="26" ssid="5">The relativizer f(&#8220;that&#8221;) for example, may attach to an arbitrarily long relative clause that goes beyond token boundaries.</S>
    <S sid="27" ssid="6">The attachment in such cases encompasses a long distance dependency that cannot be captured by Markovian processes that are typically used for morphological disambiguation.</S>
    <S sid="28" ssid="7">The same argument holds for resolving PP attachment of a prefixed preposition or marking conjunction of elements of any kind.</S>
    <S sid="29" ssid="8">A less canonical representation of segmental morphology is triggered by a morpho-phonological process of omitting the definite article h when occurring after the particles b or l. This process triggers ambiguity as for the definiteness status of Nouns following these particles.We refer to such cases in which the concatenation of elements does not strictly correspond to the original surface form as super-segmental morphology.</S>
    <S sid="30" ssid="9">An additional case of super-segmental morphology is the case of Pronominal Clitics.</S>
    <S sid="31" ssid="10">Inflectional features marking pronominal elements may be attached to different kinds of categories marking their pronominal complements.</S>
    <S sid="32" ssid="11">The additional morphological material in such cases appears after the stem and realizes the extended meaning.</S>
    <S sid="33" ssid="12">The current work treats both segmental and super-segmental phenomena, yet we note that there may be more adequate ways to treat supersegmental phenomena assuming Word-Based morphology as we explore in (Tsarfaty and Goldberg, 2008).</S>
    <S sid="34" ssid="13">Lexical and Morphological Ambiguity The rich morphological processes for deriving Hebrew stems give rise to a high degree of ambiguity for Hebrew space-delimited tokens.</S>
    <S sid="35" ssid="14">The form fmnh, for example, can be understood as the verb &#8220;lubricated&#8221;, the possessed noun &#8220;her oil&#8221;, the adjective &#8220;fat&#8221; or the verb &#8220;got fat&#8221;.</S>
    <S sid="36" ssid="15">Furthermore, the systematic way in which particles are prefixed to one another and onto an open-class category gives rise to a distinct sort of morphological ambiguity: space-delimited tokens may be ambiguous between several different segmentation possibilities.</S>
    <S sid="37" ssid="16">The same form fmnh can be segmented as f-mnh, f (&#8220;that&#8221;) functioning as a reletivizer with the form mnh.</S>
    <S sid="38" ssid="17">The form mnh itself can be read as at least three different verbs (&#8220;counted&#8221;, &#8220;appointed&#8221;, &#8220;was appointed&#8221;), a noun (&#8220;a portion&#8221;), and a possessed noun (&#8220;her kind&#8221;).</S>
    <S sid="39" ssid="18">Such ambiguities cause discrepancies between token boundaries (indexed as white spaces) and constituent boundaries (imposed by syntactic categories) with respect to a surface form.</S>
    <S sid="40" ssid="19">Such discrepancies can be aligned via an intermediate level of PoS tags.</S>
    <S sid="41" ssid="20">PoS tags impose a unique morphological segmentation on surface tokens and present a unique valid yield for syntactic trees.</S>
    <S sid="42" ssid="21">The correct ambiguity resolution of the syntactic level therefore helps to resolve the morphological one, and vice versa.</S>
  </SECTION>
  <SECTION title="3 Previous Work on Hebrew Processing" number="3">
    <S sid="43" ssid="1">Morphological analyzers for Hebrew that analyze a surface form in isolation have been proposed by Segal (2000), Yona and Wintner (2005), and recently by the knowledge center for processing Hebrew (Itai et al., 2006).</S>
    <S sid="44" ssid="2">Such analyzers propose multiple segmentation possibilities and their corresponding analyses for a token in isolation but have no means to determine the most likely ones.</S>
    <S sid="45" ssid="3">Morphological disambiguators that consider a token in context (an utterance) and propose the most likely morphological analysis of an utterance (including segmentation) were presented by Bar-Haim et al. (2005), Adler and Elhadad (2006), Shacham and Wintner (2007), and achieved good results (the best segmentation result so far is around 98%).</S>
    <S sid="46" ssid="4">The development of the very first Hebrew Treebank (Sima&#8217;an et al., 2001) called for the exploration of general statistical parsing methods, but the application was at first limited.</S>
    <S sid="47" ssid="5">Sima&#8217;an et al. (2001) presented parsing results for a DOP tree-gram model using a small data set (500 sentences) and semiautomatic morphological disambiguation.</S>
    <S sid="48" ssid="6">Tsarfaty (2006) was the first to demonstrate that fully automatic Hebrew parsing is feasible using the newly available 5000 sentences treebank.</S>
    <S sid="49" ssid="7">Tsarfaty and Sima&#8217;an (2007) have reported state-of-the-art results on Hebrew unlexicalized parsing (74.41%) albeit assuming oracle morphological segmentation.</S>
    <S sid="50" ssid="8">The joint morphological and syntactic hypothesis was first discussed in (Tsarfaty, 2006; Tsarfaty and Sima&#8217;an, 2004) and empirically explored in (Tsarfaty, 2006).</S>
    <S sid="51" ssid="9">Tsarfaty (2006) used a morphological analyzer (Segal, 2000), a PoS tagger (Bar-Haim et al., 2005), and a general purpose parser (Schmid, 2000) in an integrated framework in which morphological and syntactic components interact to share information, leading to improved performance on the joint task.</S>
    <S sid="52" ssid="10">Cohen and Smith (2007) later on based a system for joint inference on factored, independent, morphological and syntactic components of which scores are combined to cater for the joint inference task.</S>
    <S sid="53" ssid="11">Both (Tsarfaty, 2006; Cohen and Smith, 2007) have shown that a single integrated framework outperforms a completely streamlined implementation, yet neither has shown a single generative model which handles both tasks.</S>
  </SECTION>
  <SECTION title="4 Model Preliminaries" number="4">
    <S sid="54" ssid="1">A Hebrew surface token may have several readings, each of which corresponding to a sequence of segments and their corresponding PoS tags.</S>
    <S sid="55" ssid="2">We refer to different readings as different analyses whereby the segments are deterministic given the sequence of PoS tags.</S>
    <S sid="56" ssid="3">We refer to a segment and its assigned PoS tag as a lexeme, and so analyses are in fact sequences of lexemes.</S>
    <S sid="57" ssid="4">For brevity we omit the segments from the analysis, and so analysis of the form &#8220;fmnh&#8221; as f/REL mnh/VB is represented simply as REL VB.</S>
    <S sid="58" ssid="5">Such tag sequences are often treated as &#8220;complex tags&#8221; (e.g.</S>
    <S sid="59" ssid="6">REL+VB) (cf.</S>
    <S sid="60" ssid="7">(Bar-Haim et al., 2007; Habash and Rambow, 2005)) and probabilities are assigned to different analyses in accordance with the likelihood of their tags (e.g., &#8220;fmnh is 30% likely to be tagged NN and 70% likely to be tagged REL+VB&#8221;).</S>
    <S sid="61" ssid="8">Here we do not submit to this view.</S>
    <S sid="62" ssid="9">When a token fmnh is to be interpreted as the lexeme sequence f/REL mnh/VB, the analysis introduces two distinct entities, the relativizer f (&#8220;that&#8221;) and the verb mnh (&#8220;counted&#8221;), and not as the complex entity &#8220;that counted&#8221;.</S>
    <S sid="63" ssid="10">When the same token is to be interpreted as a single lexeme fmnh, it may function as a single adjective &#8220;fat&#8221;.</S>
    <S sid="64" ssid="11">There is no relation between these two interpretations other then the fact that their surface forms coincide, and we argue that the only reason to prefer one analysis over the other is compositional.</S>
    <S sid="65" ssid="12">A possible probabilistic model for assigning probabilities to complex analyses of a surface form may be and indeed recent sequential disambiguation models for Hebrew (Adler and Elhadad, 2006) and Arabic (Smith et al., 2005) present similar models.</S>
    <S sid="66" ssid="13">We suggest that in unlexicalized PCFGs the syntactic context may be explicitly modeled in the derivation probabilities.</S>
    <S sid="67" ssid="14">Hence, we take the probability of the event fmnh analyzed as REL VB to be This means that we generate f and mnh independently depending on their corresponding PoS tags, and the context (as well as the syntactic relation between the two) is modeled via the derivation resulting in a sequence REL VB spanning the form fmnh. based on linear context.</S>
    <S sid="68" ssid="15">In our model, however, all lattice paths are taken to be a-priori equally likely.</S>
  </SECTION>
  <SECTION title="5 A Generative PCFG Model" number="5">
    <S sid="69" ssid="1">We represent all morphological analyses of a given utterance using a lattice structure.</S>
    <S sid="70" ssid="2">Each lattice arc corresponds to a segment and its corresponding PoS tag, and a path through the lattice corresponds to a specific morphological segmentation of the utterance.</S>
    <S sid="71" ssid="3">This is by now a fairly standard representation for multiple morphological segmentation of Hebrew utterances (Adler, 2001; Bar-Haim et al., 2005; Smith et al., 2005; Cohen and Smith, 2007; Adler, 2007).</S>
    <S sid="72" ssid="4">Figure 1 depicts the lattice for a 2-words sentence bclm hneim.</S>
    <S sid="73" ssid="5">We use double-circles to indicate the space-delimited token boundaries.</S>
    <S sid="74" ssid="6">Note that in our construction arcs can never cross token boundaries.</S>
    <S sid="75" ssid="7">Every token is independent of the others, and the sentence lattice is in fact a concatenation of smaller lattices, one for each token.</S>
    <S sid="76" ssid="8">Furthermore, some of the arcs represent lexemes not present in the input tokens (e.g. h/DT, fl/POS), however these are parts of valid analyses of the token (cf. super-segmental morphology section 2).</S>
    <S sid="77" ssid="9">Segments with the same surface form but different PoS tags are treated as different lexemes, and are represented as separate arcs (e.g. the two arcs labeled neim from node 6 to 7).</S>
    <S sid="78" ssid="10">A similar structure is used in speech recognition.</S>
    <S sid="79" ssid="11">There, a lattice is used to represent the possible sentences resulting from an interpretation of an acoustic model.</S>
    <S sid="80" ssid="12">In speech recognition the arcs of the lattice are typically weighted in order to indicate the probability of specific transitions.</S>
    <S sid="81" ssid="13">Given that weights on all outgoing arcs sum up to one, weights induce a probability distribution on the lattice paths.</S>
    <S sid="82" ssid="14">In sequential tagging models such as (Adler and Elhadad, 2006; Bar-Haim et al., 2007; Smith et al., 2005) weights are assigned according to a language model The input for the joint task is a sequence W = w1, ... , wn of space-delimited tokens.</S>
    <S sid="83" ssid="15">Each token may admit multiple analyses, each of which a sequence of one or more lexemes (we use li to denote a lexeme) belonging a presupposed Hebrew lexicon LEX.</S>
    <S sid="84" ssid="16">The entries in such a lexicon may be thought of as meaningful surface segments paired up with their PoS tags li = (si, pi), but note that a surface segment s need not be a space-delimited token.</S>
    <S sid="85" ssid="17">The Input The set of analyses for a token is thus represented as a lattice in which every arc corresponds to a specific lexeme l, as shown in Figure 1.</S>
    <S sid="86" ssid="18">A morphological analyzer M : W&#8212;* L is a function mapping sentences in Hebrew (W E W) to their corresponding lattices (M(W) = L E L).</S>
    <S sid="87" ssid="19">We define the lattice L to be the concatenation of the lattices Li corresponding to the input words wi (s.t.</S>
    <S sid="88" ssid="20">M(wi) = Li).</S>
    <S sid="89" ssid="21">Each connected path (l1 ... lk) E L corresponds to one morphological segmentation possibility of W. The Parser Given a sequence of input tokens W = w1 ... wn and a morphological analyzer, we look for the most probable parse tree &#960; s.t.</S>
    <S sid="90" ssid="22">Since the lattice L for a given sentence W is determined by the morphological analyzer M we have which is precisely the formula corresponding to the so-called lattice parsing familiar from speech recognition.</S>
    <S sid="91" ssid="23">Every parse &#960; selects a specific morphological segmentation (l1...lk) (a path through the lattice).</S>
    <S sid="92" ssid="24">This is akin to PoS tags sequences induced by different parses in the setup familiar from English and explored in e.g.</S>
    <S sid="93" ssid="25">(Charniak et al., 1996).</S>
    <S sid="94" ssid="26">Our use of an unweighted lattice reflects our belief that all the segmentations of the given input sentence are a-priori equally likely; the only reason to prefer one segmentation over the another is due to the overall syntactic context which is modeled via the PCFG derivations.</S>
    <S sid="95" ssid="27">A compatible view is presented by Charniak et al. (1996) who consider the kind of probabilities a generative parser should get from a PoS tagger, and concludes that these should be P(w|t) &#8220;and nothing fancier&#8221;.3 In our setting, therefore, the Lattice is not used to induce a probability distribution on a linear context, but rather, it is used as a common-denominator of state-indexation of all segmentations possibilities of a surface form.</S>
    <S sid="96" ssid="28">This is a unique object for which we are able to define a proper probability model.</S>
    <S sid="97" ssid="29">Thus our proposed model is a proper model assigning probability mass to all (7r, L) pairs, where 7r is a parse tree and L is the one and only lattice that a sequence of characters (and spaces) W over our alpha-beth gives rise to.</S>
    <S sid="98" ssid="30">The Grammar Our parser looks for the most likely tree spanning a single path through the lattice of which the yield is a sequence of lexemes.</S>
    <S sid="99" ssid="31">This is done using a simple PCFG which is lexemebased.</S>
    <S sid="100" ssid="32">This means that the rules in our grammar are of two kinds: (a) syntactic rules relating nonterminals to a sequence of non-terminals and/or PoS tags, and (b) lexical rules relating PoS tags to lattice arcs (lexemes).</S>
    <S sid="101" ssid="33">The possible analyses of a surface token pose constraints on the analyses of specific segments.</S>
    <S sid="102" ssid="34">In order to pass these constraints onto the parser, the lexical rules in the grammar are of the form pi &#8212;* (si, pi) Parameter Estimation The grammar probabilities are estimated from the corpus using simple relative frequency estimates.</S>
    <S sid="103" ssid="35">Lexical rules are estimated in a similar manner.</S>
    <S sid="104" ssid="36">We smooth Prf(p &#8212;* (s, p)) for rare and OOV segments (s E l, l E L, s unseen) using a &#8220;per-tag&#8221; probability distribution over rare segments which we estimate using relative frequency estimates for once-occurring segments.</S>
    <S sid="105" ssid="37">3An English sentence with ambiguous PoS assignment can be trivially represented as a lattice similar to our own, where every pair of consecutive nodes correspond to a word, and every possible PoS assignment for this word is a connecting arc.</S>
    <S sid="106" ssid="38">Handling Unknown tokens When handling unknown tokens in a language such as Hebrew various important aspects have to be borne in mind.</S>
    <S sid="107" ssid="39">Firstly, Hebrew unknown tokens are doubly unknown: each unknown token may correspond to several segmentation possibilities, and each segment in such sequences may be able to admit multiple PoS tags.</S>
    <S sid="108" ssid="40">Secondly, some segments in a proposed segment sequence may in fact be seen lexical events, i.e., for some p tag Prf(p &#8212;* (s, p)) &gt; 0, while other segments have never been observed as a lexical event before.</S>
    <S sid="109" ssid="41">The latter arcs correspond to OOV words in English.</S>
    <S sid="110" ssid="42">Finally, the assignments of PoS tags to OOV segments is subject to language specific constraints relative to the token it was originated from.</S>
    <S sid="111" ssid="43">Our smoothing procedure takes into account all the aforementioned aspects and works as follows.</S>
    <S sid="112" ssid="44">We first make use of our morphological analyzer to find all segmentation possibilities by chopping off all prefix sequence possibilities (including the empty prefix) and construct a lattice off of them.</S>
    <S sid="113" ssid="45">The remaining arcs are marked OOV.</S>
    <S sid="114" ssid="46">At this stage the lattice path corresponds to segments only, with no PoS assigned to them.</S>
    <S sid="115" ssid="47">In turn we use two sorts of heuristics, orthogonal to one another, to prune segmentation possibilities based on lexical and grammatical constraints.</S>
    <S sid="116" ssid="48">We simulate lexical constraints by using an external lexical resource against which we verify whether OOV segments are in fact valid Hebrew lexemes.</S>
    <S sid="117" ssid="49">This heuristics is used to prune all segmentation possibilities involving &#8220;lexically improper&#8221; segments.</S>
    <S sid="118" ssid="50">For the remaining arcs, if the segment is in fact a known lexeme it is tagged as usual, but for the OOV arcs which are valid Hebrew entries lacking tags assignment, we assign all possible tags and then simulate a grammatical constraint.</S>
    <S sid="119" ssid="51">Here, all tokeninternal collocations of tags unseen in our training data are pruned away.</S>
    <S sid="120" ssid="52">From now on all lattice arcs are tagged segments and the assignment of probability P(p &#8212;* (s, p)) to lattice arcs proceeds as usual.4 A rather pathological case is when our lexical heuristics prune away all segmentation possibilities and we remain with an empty lattice.</S>
    <S sid="121" ssid="53">In such cases we use the non-pruned lattice including all (possibly ungrammatical) segmentation, and let the statistics (including OOV) decide.</S>
    <S sid="122" ssid="54">We empirically control for the effect of our heuristics to make sure our pruning does not undermine the objectives of our joint task.</S>
  </SECTION>
  <SECTION title="6 Experimental Setup" number="6">
    <S sid="123" ssid="1">Previous work on morphological and syntactic disambiguation in Hebrew used different sets of data, different splits, differing annotation schemes, and different evaluation measures.</S>
    <S sid="124" ssid="2">Our experimental setup therefore is designed to serve two goals.</S>
    <S sid="125" ssid="3">Our primary goal is to exploit the resources that are most appropriate for the task at hand, and our secondary goal is to allow for comparison of our models&#8217; performance against previously reported results.</S>
    <S sid="126" ssid="4">When a comparison against previous results requires additional pre-processing, we state it explicitly to allow for the reader to replicate the reported results.</S>
    <S sid="127" ssid="5">Data We use the Hebrew Treebank, (Sima&#8217;an et al., 2001), provided by the knowledge center for processing Hebrew, in which sentences from the daily newspaper &#8220;Ha&#8217;aretz&#8221; are morphologically segmented and syntactically annotated.</S>
    <S sid="128" ssid="6">The treebank has two versions, v1.0 and v2.0, containing 5001 and 6501 sentences respectively.</S>
    <S sid="129" ssid="7">We use v1.0 mainly because previous studies on joint inference reported results w.r.t. v1.0 only.5 We expect that using the same setup on v2.0 will allow a crosstreebank comparison.6 We used the first 500 sentences as our dev set and the rest 4500 for training and report our main results on this split.</S>
    <S sid="130" ssid="8">To facilitate the comparison of our results to those reported by (Cohen and Smith, 2007) we use their data set in which 177 empty and &#8220;malformed&#8221;7 were removed.</S>
    <S sid="131" ssid="9">The first 3770 trees of the resulting set then were used for training, and the last 418 are used testing.</S>
    <S sid="132" ssid="10">(we ignored the 419 trees in their development set.)</S>
    <S sid="133" ssid="11">Morphological Analyzer Ideally, we would use an of-the-shelf morphological analyzer for mapping each input token to its possible analyses.</S>
    <S sid="134" ssid="12">Such resources exist for Hebrew (Itai et al., 2006), but unfortunately use a tagging scheme which is incompatible with the one of the Hebrew Treebank.s For this reason, we use a data-driven morphological analyzer derived from the training data similar to (Cohen and Smith, 2007).</S>
    <S sid="135" ssid="13">We construct a mapping from all the space-delimited tokens seen in the training sentences to their corresponding analyses.</S>
    <S sid="136" ssid="14">Lexicon and OOV Handling Our data-driven morphological-analyzer proposes analyses for unknown tokens as described in Section 5.</S>
    <S sid="137" ssid="15">We use the HSPELL9 (Har&#8217;el and Kenigsberg, 2004) wordlist as a lexeme-based lexicon for pruning segmentations involving invalid segments.</S>
    <S sid="138" ssid="16">Models that employ this strategy are denoted hsp.</S>
    <S sid="139" ssid="17">To control for the effect of the HSPELL-based pruning, we also experimented with a morphological analyzer that does not perform this pruning.</S>
    <S sid="140" ssid="18">For these models we limit the options provided for OOV words by not considering the entire token as a valid segmentation in case at least some prefix segmentation exists.</S>
    <S sid="141" ssid="19">This analyzer setting is similar to that of (Cohen and Smith, 2007), and models using it are denoted nohsp, Parser and Grammar We used BitPar (Schmid, 2004), an efficient general purpose parser,10 together with various treebank grammars to parse the input sentences and propose compatible morphological segmentation and syntactic analysis.</S>
    <S sid="142" ssid="20">We experimented with increasingly rich grammars read off of the treebank.</S>
    <S sid="143" ssid="21">Our first model is GTplain, a PCFG learned from the treebank after removing all functional features from the syntactic categories.</S>
    <S sid="144" ssid="22">In our second model GTvpi we also distinguished finite and non-finite verbs and VPs as 10Lattice parsing can be performed by special initialization of the chart in a CKY parser (Chappelier et al., 1999).</S>
    <S sid="145" ssid="23">We currently simulate this by crafting a WCFG and feeding it to BitPar.</S>
    <S sid="146" ssid="24">Given a PCFG grammar G and a lattice L with nodes n1 ... nk, we construct the weighted grammar GL as follows: for every arc (lexeme) l E L from node ni to node nj, we add to GL the rule [l --+ tni, tni+1, ... , tnj_1] with a probability of 1 (this indicates the lexeme l spans from node ni to node nj).</S>
    <S sid="147" ssid="25">GL is then used to parse the string tn1 ... tnk_1, where tni is a terminal corresponding to the lattice span between node ni and ni+1.</S>
    <S sid="148" ssid="26">Removing the leaves from the resulting tree yields a parse for L under G, with the desired probabilities.</S>
    <S sid="149" ssid="27">We use a patched version of BitPar allowing for direct input of probabilities instead of counts.</S>
    <S sid="150" ssid="28">We thank Felix Hageloh (Hageloh, 2006) for providing us with this version. proposed in (Tsarfaty, 2006).</S>
    <S sid="151" ssid="29">In our third model GTppp we also add the distinction between general PPs and possessive PPs following Goldberg and Elhadad (2007).</S>
    <S sid="152" ssid="30">In our forth model GTnph we add the definiteness status of constituents following Tsarfaty and Sima&#8217;an (2007).</S>
    <S sid="153" ssid="31">Finally, model GTv = 2 includes parent annotation on top of the various state-splits, as is done also in (Tsarfaty and Sima&#8217;an, 2007; Cohen and Smith, 2007).</S>
    <S sid="154" ssid="32">For all grammars, we use fine-grained PoS tags indicating various morphological features annotated therein.</S>
    <S sid="155" ssid="33">Evaluation We use 8 different measures to evaluate the performance of our system on the joint disambiguation task.</S>
    <S sid="156" ssid="34">To evaluate the performance on the segmentation task, we report SEG, the standard harmonic means for segmentation Precision and Recall F1 (as defined in Bar-Haim et al. (2005); Tsarfaty (2006)) as well as the segmentation accuracy SEGTok measure indicating the percentage of input tokens assigned the correct exact segmentation (as reported by Cohen and Smith (2007)).</S>
    <S sid="157" ssid="35">SEGTok(noH) is the segmentation accuracy ignoring mistakes involving the implicit definite article h.11 To evaluate our performance on the tagging task we report CPOS and FPOS corresponding to coarse- and fine-grained PoS tagging results (F1) measure.</S>
    <S sid="158" ssid="36">Evaluating parsing results in our joint framework, as argued by Tsarfaty (2006), is not trivial under the joint disambiguation task, as the hypothesized yield need not coincide with the correct one.</S>
    <S sid="159" ssid="37">Our parsing performance measures (SY N) thus report the PARSEVAL extension proposed in Tsarfaty (2006).</S>
    <S sid="160" ssid="38">We further report SYNCS, the parsing metric of Cohen and Smith (2007), to facilitate the comparison.</S>
    <S sid="161" ssid="39">We report the F1 value of both measures.</S>
    <S sid="162" ssid="40">Finally, our U (unparsed) measure is used to report the number of sentences to which our system could not propose a joint analysis.</S>
  </SECTION>
  <SECTION title="7 Results and Analysis" number="7">
    <S sid="163" ssid="1">The accuracy results for segmentation, tagging and parsing using our different models and our standard data split are summarized in Table 1.</S>
    <S sid="164" ssid="2">In addition we report for each model its performance on goldsegmented input (GS) to indicate the upper bound 11Overt definiteness errors may be seen as a wrong feature rather than as wrong constituent and it is by now an accepted standard to report accuracy with and without such errors. for the grammars&#8217; performance on the parsing task.</S>
    <S sid="165" ssid="3">The table makes clear that enriching our grammar improves the syntactic performance as well as morphological disambiguation (segmentation and POS tagging) accuracy.</S>
    <S sid="166" ssid="4">This supports our main thesis that decisions taken by single, improved, grammar are beneficial for both tasks.</S>
    <S sid="167" ssid="5">When using the segmentation pruning (using HSPELL) for unseen tokens, performance improves for all tasks as well.</S>
    <S sid="168" ssid="6">Yet we note that the better grammars without pruning outperform the poorer grammars using this technique, indicating that the syntactic context aids, to some extent, the disambiguation of unknown tokens.</S>
    <S sid="169" ssid="7">Table 2 compares the performance of our system on the setup of Cohen and Smith (2007) to the best results reported by them for the same tasks.</S>
    <S sid="170" ssid="8">We first note that the accuracy results of our system are overall higher on their setup, on all measures, indicating that theirs may be an easier dataset.</S>
    <S sid="171" ssid="9">Secondly, for all our models we provide better fine- and coarse-grained POS-tagging accuracy, and all pruned models outperform the Oracle results reported by them.12 In terms of syntactic disambiguation, even the simplest grammar pruned with HSPELL outperforms their non-Oracle results.</S>
    <S sid="172" ssid="10">Without HSPELL-pruning, our simpler grammars are somewhat lagging behind, but as the grammars improve the gap is bridged.</S>
    <S sid="173" ssid="11">The addition of vertical markovization enables non-pruned models to outperform all previously reported re12Cohen and Smith (2007) make use of a parameter (&#945;) which is tuned separately for each of the tasks.</S>
    <S sid="174" ssid="12">This essentially means that their model does not result in a true joint inference, as executions for different tasks involve tuning a parameter separately.</S>
    <S sid="175" ssid="13">In our model there are no such hyper-parameters, and the performance is the result of truly joint disambiguation. sults.</S>
    <S sid="176" ssid="14">Furthermore, the combination of pruning and vertical markovization of the grammar outperforms the Oracle results reported by Cohen and Smith.</S>
    <S sid="177" ssid="15">This essentially means that a better grammar tunes the joint model for optimized syntactic disambiguation at least in as much as their hyper parameters do.</S>
    <S sid="178" ssid="16">An interesting observation is that while vertical markovization benefits all our models, its effect is less evident in Cohen and Smith.</S>
    <S sid="179" ssid="17">On the surface, our model may seem as a special case of Cohen and Smith in which &#945; = 0.</S>
    <S sid="180" ssid="18">However, there is a crucial difference: the morphological probabilities in their model come from discriminative models based on linear context.</S>
    <S sid="181" ssid="19">Many morphological decisions are based on long distance dependencies, and when the global syntactic evidence disagrees with evidence based on local linear context, the two models compete with one another, despite the fact that the PCFG takes also local context into account.</S>
    <S sid="182" ssid="20">In addition, as the CRF and PCFG look at similar sorts of information from within two inherently different models, they are far from independent and optimizing their product is meaningless.</S>
    <S sid="183" ssid="21">Cohen and Smith approach this by introducing the &#945; hyperparameter, which performs best when optimized independently for each sentence (cf.</S>
    <S sid="184" ssid="22">Oracle results).</S>
    <S sid="185" ssid="23">In contrast, our morphological probabilities are based on a unigram, lexeme-based model, and all other (local and non-local) contextual considerations are delegated to the PCFG.</S>
    <S sid="186" ssid="24">This fully generative model caters for real interaction between the syntactic and morphological levels as a part of a single coherent process.</S>
  </SECTION>
  <SECTION title="8 Discussion and Conclusion" number="8">
    <S sid="187" ssid="1">Employing a PCFG-based generative framework to make both syntactic and morphological disambiguation decisions is not only theoretically clean and linguistically justified and but also probabilistically apropriate and empirically sound.</S>
    <S sid="188" ssid="2">The overall performance of our joint framework demonstrates that a probability distribution obtained over mere syntactic contexts using a Treebank grammar and a data-driven lexicon outperforms upper bounds proposed by previous joint disambiguation systems and achieves segmentation and parsing results on a par with state-of-the-art standalone applications results.</S>
    <S sid="189" ssid="3">Better grammars are shown here to improve performance on both morphological and syntactic tasks, providing support for the advantage of a joint framework over pipelined or factorized ones.</S>
    <S sid="190" ssid="4">We conjecture that this trend may continue by incorporating additional information, e.g., three-dimensional models as proposed by Tsarfaty and Sima&#8217;an (2007).</S>
    <S sid="191" ssid="5">In the current work morphological analyses and lexical probabilities are derived from a small Treebank, which is by no means the best way to go.</S>
    <S sid="192" ssid="6">Using a wide-coverage morphological analyzer based on (Itai et al., 2006) should cater for a better coverage, and incorporating lexical probabilities learned from a big (unannotated) corpus (cf.</S>
    <S sid="193" ssid="7">(Levinger et al., 1995; Goldberg et al., ; Adler et al., 2008)) will make the parser more robust and suitable for use in more realistic scenarios.</S>
    <S sid="194" ssid="8">Acknowledgments We thank Meni Adler and Michael Elhadad (BGU) for helpful comments and discussion.</S>
    <S sid="195" ssid="9">We further thank Khalil Simaan (ILLCUvA) for his careful advise concerning the formal details of the proposal.</S>
    <S sid="196" ssid="10">The work of the first author was supported by the Lynn and William Frankel Center for Computer Sciences.</S>
    <S sid="197" ssid="11">The work of the second author as well as collaboration visits to Israel was financed by NWO, grant number 017.001.271.</S>
  </SECTION>
</PAPER>
