<PAPER>
  <S sid="0">Latent Semantic Analysis For Text Segmentation</S>
  <ABSTRACT>
    <S sid="1" ssid="1">This paper describes a method for linear text segmentation that is more accurate or at least as accurate as state-of-the-art methods (Utiyama and Isahara, 2001; Choi, 2000a).</S>
    <S sid="2" ssid="2">Inter-sentence similarity is estimated by latent semantic analysis (LSA).</S>
    <S sid="3" ssid="3">Boundary locations are discovered by divisive clustering.</S>
    <S sid="4" ssid="4">Test results show LSA is a more accurate similarity measure than the</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">The aim of linear text segmentation is to partition a document into blocks, such that each segment is coherent and consecutive segments are about different topics.</S>
    <S sid="6" ssid="2">This procedure is useful in information retrieval (Hearst and Plaunt, 1993; Hearst, 1994; Yaari, 1997; Reynar, 1999), summarisation (Reynar, 1998), text understanding, anaphora resolution (Kozima, 1993), language modelling (Morris and Hirst, 1991; Beeferman et al., 1997) and text navigation (Choi, 2000b).</S>
    <S sid="7" ssid="3">This paper presents a new algorithm for segmenting written text.</S>
    <S sid="8" ssid="4">The method builds on previous work by Choi (2000a).</S>
    <S sid="9" ssid="5">The primary distinction is the use of latent semantic analysis (LSA) in formulating the similarity matrix.</S>
    <S sid="10" ssid="6">We discovered that (1) LSA is a more accurate measure of similarity than the cosine metric, (2) stemming does not always improve segmentation accuracy and (3) ranking is crucial to cosine but not LSA.</S>
  </SECTION>
  <SECTION title="2 Background" number="2">
    <S sid="11" ssid="1">A text segmentation algorithm has three main parts.</S>
    <S sid="12" ssid="2">First, the input text is divided into elementary blocks.</S>
    <S sid="13" ssid="3">Second, a similarity metric identifies blocks that are about the same topic.</S>
    <S sid="14" ssid="4">Finally, topic boundaries are discovered by a clustering algorithm.</S>
    <S sid="15" ssid="5">An elementary block is the smallest text segment that can describe an entire topic, e.g. sentences (Ponte and Croft, 1997), paragraphs (Yaari, 1997) and arbitrary-sized segments (Hearst, 1994).</S>
    <S sid="16" ssid="6">Linguistic theories (Chafe, 1979; Longacre, 1979; Kieras, 1982) and work in information retrieval (Salton et al., 1993; Kaszkiel and Zobel, 1997) suggest a coherent text segment is represented by paragraphs.</S>
    <S sid="17" ssid="7">We argue that a paragraph can address multiple topics and is motivated by content, writing style and presentation.</S>
    <S sid="18" ssid="8">Thus, a topic segment is a collection of sentences.</S>
    <S sid="19" ssid="9">This view is supported by previous work in text segmentation (Ponte and Croft, 1997; Choi, 2000a).</S>
    <S sid="20" ssid="10">A similarity metric estimates the likelihood of two segments describing the same topic.</S>
    <S sid="21" ssid="11">Existing methods fall into one of two categories.</S>
    <S sid="22" ssid="12">Lexical cohesion methods stem from the work of Halliday and Hasan (1976), in which a coherent topic segment is believed to contain parts with similar vocabulary.</S>
    <S sid="23" ssid="13">Implementations of this use word stem repetition (Youmans, 1991; Reynar, 1994; Ponte and Croft, 1997), context vectors (Hearst, 1994; Yaari, 1997; Kaufmann, 1999; Eichmann et al., 1999; Choi, 2000a), entity repetition (Kan et al., 1998), thesaurus relations (Morris and Hirst, 1991), spreading activation over dictionary (Kozima, 1993), a word distance model (Beeferman et al., 1997) or a word frequency model (Reynar, 1999; Utiyama and Isahara, 2001) to detect cohesion.</S>
    <S sid="24" ssid="14">These methods are typically applied in information retrieval (Hearst, 1994; Reynar, 1998) to segment written text.</S>
    <S sid="25" ssid="15">Multi-source methods use cue phrases, prosodic features, ellipsis, anaphora, syntactic features, language models and lexical cohesion metrics to detect topic boundaries.</S>
    <S sid="26" ssid="16">Features are combined using decision trees (Miike et al., 1994; Kurohashi and Nagao, 1994; Litman and Passonneau, 1995), probabilistic models (Hajime et al., 1998) and maximum entropy models (Beeferman et al., 1997; Reynar, 1998).</S>
    <S sid="27" ssid="17">The aim is to improve segmentation accuracy by combining multiple indicators of topic shift.</S>
    <S sid="28" ssid="18">These methods are typically applied in topic detection and tracking (Allan et al., 1998) to segment transcribed text and broadcast news stories.</S>
    <S sid="29" ssid="19">Topic boundaries are discovered by merging consecutive elementary blocks that are about the same topic.</S>
    <S sid="30" ssid="20">Existing algorithms used a sliding window (Hearst, 1994), lexical chains (Morris, 1988; Kan et al., 1998), dynamic programming (Ponte and Croft, 1997; Heinonen, 1998; Utiyama and Isahara, 2001), agglomerative clustering (Yaari, 1997) and divisive clustering (Reynar, 1994; Choi, 2000a) to determine the optimal segmentation.</S>
    <S sid="31" ssid="21">The main difficulty in clustering is automatic termination, i.e. determining the number of topic boundaries in a document.</S>
  </SECTION>
  <SECTION title="3 A new method" number="3">
    <S sid="32" ssid="1">The input to our algorithm is a list of tokenised sentences S = {81,..,8}.</S>
    <S sid="33" ssid="2">Content words are identified by removing punctuation marks and stopwords from S. A term frequency vector f, is then constructed for each sentence i. fij denotes the number of times content word j occurs in s,.</S>
    <S sid="34" ssid="3">The C99 algorithm (Choi, 2000a) uses the cosine metric (van Rijsbergen, 1979) (eq.</S>
    <S sid="35" ssid="4">1) to compute a nxn similarity matrix M for S. represents the similarity between s, and si.</S>
    <S sid="36" ssid="5">The assumption is, two sentences with similar word usage are likely to be about the same topic.</S>
    <S sid="37" ssid="6">This idea has two main problems.</S>
    <S sid="38" ssid="7">First, the estimate is inaccurate for short passages.</S>
    <S sid="39" ssid="8">Second, synonyms are considered negative evidence, e.g. car E s, and automobile E si implies s, and si are dissimilar.</S>
    <S sid="40" ssid="9">The first problem was addressed by replacing with its rank Rii (eq.</S>
    <S sid="41" ssid="10">2, r defines the local context).</S>
    <S sid="42" ssid="11">The idea is, the difference in magnitude is inaccurate, thus one can only use the order as evidence for segmentation.</S>
    <S sid="43" ssid="12">Consider X = {xl,x2,x3} = {1,3,6} as the length of three objects.</S>
    <S sid="44" ssid="13">If X was measured with an ordinary ruler, one can conclude that x2 is three times longer than x1.</S>
    <S sid="45" ssid="14">This is a quantitative analysis of X, i.e. the quantity is significant.</S>
    <S sid="46" ssid="15">However, if the ruler was warped, but the order of the markings is preserved, one can only conclude that x1 &lt; x2 &lt; x3.</S>
    <S sid="47" ssid="16">This is a qualitative analysis of X, i.e. the order is significant but the relative value has no meaning.</S>
    <S sid="48" ssid="17">This is a more robust interpretation of X.</S>
    <S sid="49" ssid="18">The second problem was addressed by applying a stemming algorithm (Porter, 1980) to S, such that syntactically motivated inflections are placed in an equivalent class.</S>
    <S sid="50" ssid="19">For example, cooking, cooked, cooks, cooker are all instances of the class cook.</S>
    <S sid="51" ssid="20">Unlike morphological analysers (Koskenniemi, 1983, for example), a stemming algorithm does not identify the morphemes.</S>
    <S sid="52" ssid="21">Its simply removes common affixes from a word, e.g. combines, combine &#8212;&gt; combin, depart, department &#8212;&gt; depart.</S>
    <S sid="53" ssid="22">Thus, similar surface forms are considered positive evidence in the similarity estimate.</S>
    <S sid="54" ssid="23">We propose that latent semantic analysis offers a better solution to the term matching problem.</S>
    <S sid="55" ssid="24">LSA (Deerwester et al., 1990) stems from work in information retrieval, where the main difficulty is formulating a similarity metric that associates a user query with the relevant documents in a database.</S>
    <S sid="56" ssid="25">The basic keyword search approach retrieves all documents which contain some or all of the query terms.</S>
    <S sid="57" ssid="26">This is inaccurate since the same concept may be described using different terms.</S>
    <S sid="58" ssid="27">To circumvent this, Jing and Croft (1994) developed an association thesaurus for matching semantically related words.</S>
    <S sid="59" ssid="28">Xu and Croft (1996) offered a trainable method call local context analysis (LCA) which replaces each query term with frequently cooccurring words.</S>
    <S sid="60" ssid="29">Roughly speaking, LCA computes a word co-occurrence matrix C for a training corpus.</S>
    <S sid="61" ssid="30">A threshold is then applied such that large values in C are replaced by 1 and other values become 0.</S>
    <S sid="62" ssid="31">Each row C, can be considered as a feature vector for word i.</S>
    <S sid="63" ssid="32">The meaning of a text is approximated by the sum of the word feature vectors.</S>
    <S sid="64" ssid="33">Similarity between two texts is estimated by the distance between the corresponding feature vectors (Ponte and Croft, 1997, for details).</S>
    <S sid="65" ssid="34">LSA is a classification approach to query expansion.</S>
    <S sid="66" ssid="35">The method is similar to LCA in that the &amp;quot;meaning&amp;quot; of a word w is represented by its relation to other words.</S>
    <S sid="67" ssid="36">The primary distinction is, LSA applies principle components analysis to a word similarity matrix to identify the best features for distinguishing dissimilar words.</S>
    <S sid="68" ssid="37">Like LCA, the meaning of a text is computed as the sum of the word feature vectors.</S>
    <S sid="69" ssid="38">Text similarity is measured by the cosine of the corresponding feature vectors.</S>
    <S sid="70" ssid="39">LSA has been shown to match human similarity judgements on a wide range of tasks (Landauer and Dumais, 1997; Wolfe et al., 1998; Wiemer-Hastings et al., 1999, for example).</S>
    <S sid="71" ssid="40">LSA is trained on a set of texts A = Y1, ..., with vocabulary twi, turd-.</S>
    <S sid="72" ssid="41">Anxm matrix A is calculated, in which, A,i is the number of times to, occurs in Si.</S>
    <S sid="73" ssid="42">The values are scaled according to a general form of inverse document frequency, Singular value decomposition, or SVD (Golub and van Loan, 1989) is then applied to yield B = UEVT, where XT denotes the transposed matrix of X.</S>
    <S sid="74" ssid="43">The columns of U and V are the eigenvectors of BBT and BTB, respectively.</S>
    <S sid="75" ssid="44">The diagonal values of E are the corresponding singular values, i.e. the non-negative square roots of the eigenvalues of BBT.</S>
    <S sid="76" ssid="45">These are sorted in descending order.</S>
    <S sid="77" ssid="46">BBT is a word similarity matrix, where the &amp;quot;meaning&amp;quot; of a word to, is expressed in terms of its dot-product with all other words {w1, 1.07,}.</S>
    <S sid="78" ssid="47">As a classification problem, the eigenvectors in U are the principle axes for distinguishing the word feature vectors, or rows, in BBT.</S>
    <S sid="79" ssid="48">In other words, the first k columns of U, or Ak, is the best approximation of BBT in k&#8212;dimensional space.</S>
    <S sid="80" ssid="49">Ak is the k&#8212;dimensional LSA space for A.</S>
    <S sid="81" ssid="50">The i&#8212;th row in Ak, or Ak(i), is the LSA feature vector for word to,.</S>
    <S sid="82" ssid="51">Applying SVD to W has three main benefits.</S>
    <S sid="83" ssid="52">First, Ak is a concise representation of W. Thus, storage and computational complexity of the similarity metric is reduced.</S>
    <S sid="84" ssid="53">Second, words which occur in similar contexts are represented by similar feature vectors in Ak.</S>
    <S sid="85" ssid="54">Finally, noise in W is removed by simply omitting the less salient dimensions in U.</S>
    <S sid="86" ssid="55">A sentence s, is represented by its term frequency vector A, where Li is the frequency of term j in s,.</S>
    <S sid="87" ssid="56">Given Ak, the &amp;quot;meaning&amp;quot; of s, is computed by eq.</S>
    <S sid="88" ssid="57">3.</S>
    <S sid="89" ssid="58">Informally, s, is represented by the sum of the LSA feature vectors.</S>
    <S sid="90" ssid="59">Inter-sentence similarity is estimated by the cosine of the corresponding X (eq.</S>
    <S sid="91" ssid="60">4, Azk is the k&#8212;th element in Ai).</S>
    <S sid="92" ssid="61">Since Ak is derived from the co-occurrence matrix A, the size of each training text Si E A is crucial to its performance.</S>
    <S sid="93" ssid="62">Work in information retrieval uses Sz = document since the aim is to distinguish entire texts.</S>
    <S sid="94" ssid="63">Sz = paragraph is popular in psychology experiments.</S>
    <S sid="95" ssid="64">However, we suspect the segmentation task may benefit from Sz = sentence.</S>
    <S sid="96" ssid="65">Thus, two training corpora were derived from the Brown Corpus (Marcus et al., 1993).</S>
    <S sid="97" ssid="66">Annotations were first removed to leave a set of tokenised raw text (1.2 million tokens).</S>
    <S sid="98" ssid="67">This was partitioned into 35,000 paragraphs or 104,000 sentences, as two training corpora.</S>
    <S sid="99" ssid="68">The parameter k adjusts the accuracy of Ak.</S>
    <S sid="100" ssid="69">A large k implies minor differences in the feature space are significant.</S>
    <S sid="101" ssid="70">Thus, they should be taken into account in the formulation of Ak.</S>
    <S sid="102" ssid="71">This is appropriate when the vocabulary is small and there is sufficient training data.</S>
    <S sid="103" ssid="72">A small k is used when A is sparse and the values in A are inaccurate.</S>
    <S sid="104" ssid="73">Once the similarity matrix M is calculated for the input text S, the image ranking procedure in C99 is then applied to obtain a rank matrix R (see eq.</S>
    <S sid="105" ssid="74">2).</S>
    <S sid="106" ssid="75">Rzi is the proportion of neighbours of Mzi with a lower value than Mzi.</S>
    <S sid="107" ssid="76">The motivation for applying image ranking in the new algorithm is to test whether a quantitative or qualitative interpretation of the similarity values has any impact on segmentation accuracy.</S>
    <S sid="108" ssid="77">The hypothesis is that LSA similarity values are more accurate than cosine similarity values.</S>
    <S sid="109" ssid="78">Thus, image ranking should have a smaller impact on LSA than the cosine metric.</S>
    <S sid="110" ssid="79">The input matrix X can either be the similarity matrix M or the rank matrix R, depending on whether ranking is applied to M. Topic boundaries are identified by the divisive clustering procedure in C99.</S>
    <S sid="111" ssid="80">A topic segment tk is defined by its start and end sentences, sz and si, or its range tk = [i, j].</S>
    <S sid="112" ssid="81">The number of intersentence similarity values in tk is O(tk) = Itk12, i.e.</S>
    <S sid="113" ssid="82">(j &#8212; j &#177; 1)2.</S>
    <S sid="114" ssid="83">The sum of the values in tk is /3(tk) = EzEt.1 k E.Ebk X Thus, the average inter-sentence similarity value for a segmentation T = {t,, ...,t} is defined as, The divisive clustering algorithm begins by considering the entire input document S as a coherent topic segment.</S>
    <S sid="115" ssid="84">This is partitioned into two segments T = ftl, t21 at a sentence boundary that maximises [IT, i.e. the most prominent topic boundary.</S>
    <S sid="116" ssid="85">The recursive procedure proceeds until S can no longer be subdivided.</S>
    <S sid="117" ssid="86">The optimal segmentation is signalled by a sharp change in [IT.</S>
    <S sid="118" ssid="87">For implementation details and optimisations, see (Choi, 2000a).</S>
  </SECTION>
  <SECTION title="4 Evaluation" number="4">
    <S sid="119" ssid="1">The following experiments aim to establish the relationship between linguistic processes (stemming, ranking, cosine metric, LSA) and segmentation error rate.</S>
    <S sid="120" ssid="2">The test procedure is based on that presented in (Choi, 2000a) which was derived from work in TDT (Allan et al., 1998) and previous experiments in text segmentation (Reynar, 1998, 71-73).</S>
    <S sid="121" ssid="3">The task is to find the most prominent topic boundaries in a concatenated text.</S>
    <S sid="122" ssid="4">The accuracy of a segmentation algorithm is assessed by the experiment package' described in (Choi, 2000a).</S>
    <S sid="123" ssid="5">A test sample is a concatenation of ten text segments.</S>
    <S sid="124" ssid="6">Each segment is the first n sentences of a randomly selected document from a subset2 of the Brown corpus (Marcus et al., 1993).</S>
    <S sid="125" ssid="7">Table 1 presents the corpus statistics.</S>
    <S sid="126" ssid="8">A sample is characterised by the range of n. Ti,j is a set of samples with i &lt;n &lt;j.</S>
    <S sid="127" ssid="9">T is the union of the other four test sets.</S>
    <S sid="128" ssid="10">Segmentation accuracy is measured by the metric proposed in (Beeferman et al., 1999).</S>
    <S sid="129" ssid="11">Let Tr and Tp be the reference segmentation and that proposed by an automatic procedure. k is the average segment length in T. p(samelTr, k) and p(diffiTr, k) refer to the likelihood of sentence sz and sz&#177;k belonging to the same and different topic segment(s) in Tk p(samelTr, Tp, diff, k) is the probability of a miss, i.e. sz and sz&#177;k are about different topics in Tk but they belong to the same topic segment in T. p(difflTr, Tp, same, k) is the probability of false alarm, i.e. two sentences are about the same topic in Tr but they belong to different segments in T. Equation 5 combines these four measures to calculate p(errorlTr, Tp, k), the probability of segmentation errors.</S>
    <S sid="130" ssid="12">The error rate of an algorithm is computed as the average of p(errorlTr, Tp, k) for a test set.</S>
    <S sid="131" ssid="13">A low error rate implies high segmentation accuracy. p(diffl , Tp , same, k)p(samelTr, k) This test procedure is not perfect.</S>
    <S sid="132" ssid="14">First, assessing the accuracy of an algorithm in an artificial task is inferior to a test that uses human segmented text.</S>
    <S sid="133" ssid="15">However, this approach does allow us to conduct a large-scale comparative study on similarity metrics which focuses on text similarity rather than topic boundary detection.</S>
    <S sid="134" ssid="16">Second, the error metric favours texts with short topic segments.</S>
    <S sid="135" ssid="17">Segmentation errors within a segment which is smaller than k are not always detected correctly.</S>
    <S sid="136" ssid="18">Thus, an algorithm is assessed using texts with different ranges of segment length.</S>
    <S sid="137" ssid="19">Although the metric is not perfect, it is significantly more accurate than the popular precision/recall metric which ignores near misses.</S>
    <S sid="138" ssid="20">Furthermore, the method is sufficiently accurate for this comparative study.</S>
    <S sid="139" ssid="21">Five degenerate algorithms define the baseline for the experiments.</S>
    <S sid="140" ssid="22">Be partitions a document into e = 10 segments of equal length.</S>
    <S sid="141" ssid="23">Br, does not propose any boundaries.</S>
    <S sid="142" ssid="24">B,&#8222; assumes all potential boundaries are topic boundaries.</S>
    <S sid="143" ssid="25">Bb randomly selects b = 10 boundaries.</S>
    <S sid="144" ssid="26">B? randomly selects any number of boundaries as real boundaries.</S>
    <S sid="145" ssid="27">Details about Bb and B? are described in (Choi, 2000a).</S>
    <S sid="146" ssid="28">Table 2 shows Be performed best with an average error rate of 42%.</S>
    <S sid="147" ssid="29">This is the baseline for algorithms that find the e most prominent topic boundaries.</S>
    <S sid="148" ssid="30">B? serves as the baseline for methods that determines the optimal segmentation, i.e. the number of topic segments in a text.</S>
    <S sid="149" ssid="31">The aim is to relate stemming, ranking and the termination procedure in C99 with segmentation accuracy.</S>
    <S sid="150" ssid="32">The algorithm used in this experiment is identical to that presented in (Choi, 2000a) except tokens such as -- and - are recognised as punctuation marks and removed during pre-processing.</S>
    <S sid="151" ssid="33">Test results show this modification reduces error rate by 1%.</S>
    <S sid="152" ssid="34">An analysis of the original algorithm reveals that non-word tokens introduce errors since they are converted into a null string by the stemming algorithm (Porter, 1980).</S>
    <S sid="153" ssid="35">This implementation of C99 has three parameters.</S>
    <S sid="154" ssid="36">+r implies ranking is applied to the similarity matrix prior to divisive clustering.</S>
    <S sid="155" ssid="37">+s shows the stemming algorithm is used in preprocessing.</S>
    <S sid="156" ssid="38">+b means the algorithm finds the 10 most prominent topic boundaries, i.e. the automatic termination procedure is inactive.</S>
    <S sid="157" ssid="39">Test results (table 3) show ranking is crucial to C99.</S>
    <S sid="158" ssid="40">There is a 10% difference between row 3 and 6 for T. This confirms the cosine metric is inaccurate for short text segments but the order between values, or rank, is significant.</S>
    <S sid="159" ssid="41">Future experiments will establish the relationship between segment size and accuracy.</S>
    <S sid="160" ssid="42">Stemming is generally believed to improve segmentation accuracy.</S>
    <S sid="161" ssid="43">This is confirmed by the experiment results.</S>
    <S sid="162" ssid="44">However, we discovered that the process can introduce errors when segmenting short segments.</S>
    <S sid="163" ssid="45">There is a 0.7% difference between row 1 and 3 for T3,5.</S>
    <S sid="164" ssid="46">Finally, the termination strategy in C99 is not effective for short topic segments.</S>
    <S sid="165" ssid="47">There is a 6.3% improvement between row 1 and 2 for T3,5.</S>
    <S sid="166" ssid="48">However, its performance for larger segments is exceptional (0.6% difference between row 1 and 2 for T).</S>
    <S sid="167" ssid="49">The aim is to establish the relationship between LSA dimensionality, training data and accuracy.</S>
    <S sid="168" ssid="50">Our new algorithm, CWM, was used in this experiment.</S>
    <S sid="169" ssid="51">The method is identical to C99 except the stemming algorithm has been disabled and LSA is used in the formulation of the similarity matrix.</S>
    <S sid="170" ssid="52">Ten LSA spaces were examined.</S>
    <S sid="171" ssid="53">Each space is characterised by the training data and its dimensionality. s and p imply the LSA space was trained on sentences and paragraphs, respectively.</S>
    <S sid="172" ssid="54">The values {100, 200, 300, 400, 500} represent the dimensionality of the trained space.</S>
    <S sid="173" ssid="55">For instance, &amp;quot;p, 400&amp;quot; is a 400-dimensional space that was trained on paragraphs.</S>
    <S sid="174" ssid="56">Like C99, +r implies ranking is applied to the similarity matrix.</S>
    <S sid="175" ssid="57">+b means CWM finds the ten most prominent boundaries.</S>
    <S sid="176" ssid="58">Let ji be the column average.</S>
    <S sid="177" ssid="59">Test results (table 4) show ranked LSA (column 4) has the lowest error rate.</S>
    <S sid="178" ssid="60">The raw values (column 1 and 3) performed well.</S>
    <S sid="179" ssid="61">The 1% difference in accuracy implies the termination strategy works well with LSA.</S>
    <S sid="180" ssid="62">However, the same method is not applicable to the ranked LSA values (see column 2).</S>
    <S sid="181" ssid="63">The results in column 3 highlights the relationship between LSA space and error rate.</S>
    <S sid="182" ssid="64">On average, a LSA space that was trained on paragraphs ([2(p) = 11.8%) out-performed one that was trained on sentences (p(s) = 15.6%).</S>
    <S sid="183" ssid="65">This shows similarity is well modelled by word co-occurrence in paragraphs.</S>
    <S sid="184" ssid="66">It also suggests that although sentences are good for identifying words about the same topic, paragraphs are better for finding dissimilar words.</S>
    <S sid="185" ssid="67">Intuitively speaking, large feature vectors are expected to generate more accurate similarity values.</S>
    <S sid="186" ssid="68">Thus, segmentation accuracy should improve with dimensionality.</S>
    <S sid="187" ssid="69">The figures in column 3 show high dimensionality increases error rate.</S>
    <S sid="188" ssid="70">However, the figures in column 4 suggest the contrary.</S>
    <S sid="189" ssid="71">This implies high dimensionality improves the ranking of LSA values but is detrimental to value accuracy.</S>
    <S sid="190" ssid="72">Table 5 presents a summary of experiment results.</S>
    <S sid="191" ssid="73">C99 and C99b are the algorithms described in (Choi, 2000a).</S>
    <S sid="192" ssid="74">C99b,, is the same as C99b except ranking has been disabled.</S>
    <S sid="193" ssid="75">The 11% difference between the two shows ranking is crucial to the cosine metric.</S>
    <S sid="194" ssid="76">U00 and U00b are the word frequency methods proposed in (Utiyama and Isahara, 2001).</S>
    <S sid="195" ssid="77">CWM is the new method described in this paper.</S>
    <S sid="196" ssid="78">All versions of the algorithm use a LSA space that was trained on paragraphs.</S>
    <S sid="197" ssid="79">CWM1 is identical to C99b except the stemming algorithm has been disabled and it uses A500 to measure similarity.</S>
    <S sid="198" ssid="80">The results show it is more accurate than previous methods.</S>
    <S sid="199" ssid="81">CWM2 is the same algorithm but ranking has been disabled.</S>
    <S sid="200" ssid="82">The 5% difference between this and CWM1 implies ranking does improve accuracy.</S>
    <S sid="201" ssid="83">Finally, CWM3 is a variant of CWM2 which uses A100 to measure similarity.</S>
    <S sid="202" ssid="84">The 11% difference between this and C99b,_, shows LSA is more accurate than the cosine metric.</S>
    <S sid="203" ssid="85">The significance of our results has been confirmed by both t-test and KS-test (Press et al., 1992).</S>
  </SECTION>
  <SECTION title="5 Conclusions" number="5">
    <S sid="204" ssid="1">A series of experiments were conducted to establish the relationship between linguistic processes and segmentation accuracy.</S>
    <S sid="205" ssid="2">C99 (Choi, 2000a) was used as the test bench.</S>
    <S sid="206" ssid="3">In the first set of experiments, its stemming algorithm, ranking procedure and automatic termination method were systematically disabled to determine the contribution of each process to overall performance.</S>
    <S sid="207" ssid="4">We discovered that, first, stemming generally improves accuracy unless the topic segments are short (3 to 5 sentences).</S>
    <S sid="208" ssid="5">Second, ranking plays a vital role in C99.</S>
    <S sid="209" ssid="6">It reduces error rate by half (22% to 10%).</S>
    <S sid="210" ssid="7">Finally, the termination procedure in C99 is effective (0.6% difference).</S>
    <S sid="211" ssid="8">The method works particularly well on long topic segments (&gt; 6 sentences).</S>
    <S sid="212" ssid="9">The second set of experiments focused on LSA as a similarity metric.</S>
    <S sid="213" ssid="10">The cosine metric in C99 was replaced by LSA.</S>
    <S sid="214" ssid="11">Ten different LSA spaces were examined.</S>
    <S sid="215" ssid="12">We discovered that LSA is twice as accurate as the cosine metric.</S>
    <S sid="216" ssid="13">The results also showed vocabulary difference between paragraphs is a good feature for training a similarity metric.</S>
    <S sid="217" ssid="14">Further investigation into the relationship between ranking, LSA dimensionality and error rate revealed that LSA values become less accurate as more dimensions are incorporated into the feature vectors.</S>
    <S sid="218" ssid="15">This implies the training data is noisy.</S>
    <S sid="219" ssid="16">However, with ranking, error rate decreases.</S>
    <S sid="220" ssid="17">This shows the order of LSA values becomes more accurate when more features are used.</S>
    <S sid="221" ssid="18">Future work will focus on document specific LSA and the termination strategy of the new algorithm.</S>
    <S sid="222" ssid="19">Test results have shown the termination procedure in C99 works well on LSA similarity values but not on the ranked values.</S>
    <S sid="223" ssid="20">We suspect the threshold selection method has to be modified.</S>
    <S sid="224" ssid="21">In terms of clustering, dynamic programming approaches (Ponte and Croft, 1997; Utiyama and Isahara, 2001, for example) will be examined.</S>
    <S sid="225" ssid="22">Finally, a LSA procedure for computing document specific similarity values will be evaluated.</S>
  </SECTION>
  <SECTION title="Acknowledgements" number="6">
    <S sid="226" ssid="1">Thanks are due to the anonymous reviewers for their invaluable comments; Masao Utiyama and Hitoshi Isahara for providing the U00 algorithm and detailed results; Marti Hearst for guidance on the evaluation problem; Mary McGee Wood for support and HCRC for making this work possible.</S>
  </SECTION>
</PAPER>
